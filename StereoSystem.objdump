
StereoSystem.elf:     file format elf32-littlenios2
StereoSystem.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00020cac memsz 0x00020cac flags r-x
    LOAD off    0x00021ccc vaddr 0x00820ccc paddr 0x008229e4 align 2**12
         filesz 0x00001d18 memsz 0x00001d18 flags rw-
    LOAD off    0x000246fc vaddr 0x008246fc paddr 0x008246fc align 2**12
         filesz 0x00000000 memsz 0x0000adc0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001f8a0  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001274  0081fa58  0081fa58  00020a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d18  00820ccc  008229e4  00021ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000adc0  008246fc  008246fc  000246fc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000239e4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001398  00000000  00000000  00023a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00003fd2  00000000  00000000  00024da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00040707  00000000  00000000  00028d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000da61  00000000  00000000  00069481  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0002a11d  00000000  00000000  00076ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000436c  00000000  00000000  000a1000  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000459c  00000000  00000000  000a536c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00014b31  00000000  00000000  000a9908  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000be43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018f8  00000000  00000000  000be470  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000c6a67  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  000c6a6a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000c6a79  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000c6a7a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000c6a7b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000c6a84  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000c6a8d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000c6a96  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  000c6aa1  2**0
                  CONTENTS, READONLY
 26 .jdi          00005a69  00000000  00000000  000c6ad1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000b9b47  00000000  00000000  000cc53a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
0081fa58 l    d  .rodata	00000000 .rodata
00820ccc l    d  .rwdata	00000000 .rwdata
008246fc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Button.c
00000000 l    df *ABS*	00000000 Colder.c
00000000 l    df *ABS*	00000000 Command.c
00000000 l    df *ABS*	00000000 CommandScheduler.c
00000000 l    df *ABS*	00000000 Cursor.c
00000000 l    df *ABS*	00000000 Database.c
00000000 l    df *ABS*	00000000 Frame.c
00000000 l    df *ABS*	00000000 Graphic.c
00000000 l    df *ABS*	00000000 ISR_vectors.c
00000000 l    df *ABS*	00000000 MemoryMgr.c
00000000 l    df *ABS*	00000000 Object.c
00000000 l    df *ABS*	00000000 Packet.c
00000000 l    df *ABS*	00000000 Playlist.c
00000000 l    df *ABS*	00000000 PushKeyController.c
00000000 l    df *ABS*	00000000 Queue.c
00000000 l    df *ABS*	00000000 RS232.c
00000000 l    df *ABS*	00000000 Range.c
00000000 l    df *ABS*	00000000 Song.c
00000000 l    df *ABS*	00000000 StereoSystem.c
00000000 l    df *ABS*	00000000 TestBot.c
00000000 l    df *ABS*	00000000 AudioDeviceController.c
00000000 l    df *ABS*	00000000 Sound.c
00000000 l    df *ABS*	00000000 SoundMixer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00809c9c l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080a650 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080b194 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
0080d030 l     F .text	00000134 critical_factorization
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080da2c l     F .text	00000058 __sprint_r
008207ca l     O .rodata	00000010 blanks.3452
008207ba l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
008208db l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0080fa90 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0081148c l     F .text	00000058 std
00811598 l     F .text	00000008 __fp_lock
008115a0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008211d4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
008229b8 l     O .rwdata	00000004 charset
00820a7c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00820bc4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00815294 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008152f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008153f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
008156d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008157b4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00815910 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00815b3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008229d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00815f7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00821788 l     O .rwdata	00001060 jtag_uart
008227e8 l     O .rwdata	00000030 audio_and_video_config_0
00822818 l     O .rwdata	00000030 audio
00822848 l     O .rwdata	0000002c character_lcd_0
00822874 l     O .rwdata	00000038 ps2_0
008228ac l     O .rwdata	0000002c rs232_0
008228d8 l     O .rwdata	00000048 char_drawer
00822920 l     O .rwdata	00000054 pixel_buffer_dma_0
00822974 l     O .rwdata	0000002c SD_Card
00816380 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008165b8 l     F .text	0000022c altera_avalon_jtag_uart_irq
008167e4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00816e60 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081ede0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081efcc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0081f108 l     F .text	000000dc alt_file_locked
0081f36c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081f7d4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081f988 l     F .text	00000040 alt_sim_halt
00800e60 g     F .text	00000190 decode
008178bc g     F .text	00000038 alt_up_av_config_reset
00824750 g     O .bss	00000004 aux_status_register
00812a44 g     F .text	00000094 _mprec_log10
00817d60 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
00802578 g     F .text	00000034 initCmdScheduler
00807b74 g     F .text	000000e8 compareRange
00808f80 g     F .text	00000024 getSoundPositionMS
00812b30 g     F .text	00000088 __any_on
00813bfc g     F .text	00000070 _isatty_r
00820b9c g     O .rodata	00000028 __mprec_tinytens
0081792c g     F .text	00000030 alt_up_av_config_disable_interrupt
00815970 g     F .text	0000006c alt_main
0080cdc4 g     F .text	0000008c strcpy
00819e28 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00800768 g     F .text	000000e0 decodeString
0080c470 g     F .text	000000a0 _puts_r
008025bc g     F .text	00000010 getCursorY
0081866c g     F .text	00000058 alt_up_ps2_disable_read_interrupt
0082f22c g     O .bss	00000100 alt_irq
00800ff8 g     F .text	00000004 moveSongToIndex
00813c6c g     F .text	00000078 _lseek_r
008012f0 g     F .text	0000003c createPlaylist
00803b58 g     F .text	000003cc getAndUpdateSongsFromTxt
00808a10 g     F .text	00000010 checkEnd
008229e4 g       *ABS*	00000000 __flash_rwdata_start
00817f6c g     F .text	00000034 alt_up_character_lcd_send_cmd
00814b40 g     F .text	00000088 __eqdf2
008013e4 g     F .text	00000038 pause
0081aad8 g     F .text	000001b0 Check_for_Master_Boot_Record
00809454 g     F .text	00000200 loadToSoundBuffer
008015c4 g     F .text	00000060 syncCreatePlaylist
008171d4 g     F .text	00000070 alt_up_audio_read_fifo_avail
008179fc g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
0082f4bc g       *ABS*	00000000 __alt_heap_start
0081e990 g     F .text	000001cc alt_up_sd_card_fclose
00803400 g     F .text	00000140 addExisitedListToDB
00801048 g     F .text	00000078 removeSongFromList
0080c3f8 g     F .text	00000044 printf
00808a64 g     F .text	0000009c initSound
00817244 g     F .text	00000070 alt_up_audio_record_r
008136a4 g     F .text	00000068 __sseek
008114f4 g     F .text	000000a4 __sinit
0081904c g     F .text	00000114 alt_up_char_buffer_string
00818484 g     F .text	00000034 read_CE_bit
0080132c g     F .text	00000048 setVolume
008121cc g     F .text	00000084 _setlocale_r
008115f4 g     F .text	00000068 __sfmoreglue
0080216c g     F .text	00000134 syncCreateExisitedPlaylist
008075c0 g     F .text	0000007c checkStartAck
00803134 g     F .text	000000f8 writeLine
008159fc g     F .text	00000020 __malloc_unlock
00801028 g     F .text	00000010 removeList
00818818 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00818d54 g     F .text	00000090 alt_up_rs232_read_fd
00801170 g     F .text	0000003c selectList
0080058c g     F .text	00000070 initSongButton
0080a134 g     F .text	00000174 __divsf3
00824774 g     O .bss	00000004 current_sector_modified
00824710 g     O .bss	00000004 queue_lock
00818f7c g     F .text	000000d0 alt_up_char_buffer_draw
0081714c g     F .text	00000088 alt_up_audio_reset_audio_core
0081ec58 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
00805a50 g     F .text	00000144 killImage
00812558 g     F .text	000000e0 memmove
008115e4 g     F .text	00000010 _cleanup
00809654 g     F .text	00000018 negativeToPositive
00812bb8 g     F .text	000000bc _Balloc
00808378 g     F .text	0000007c loadSDCard
0080a4a8 g     F .text	00000094 __fixsfsi
00801000 g     F .text	00000004 reverse
0081d554 g     F .text	000000c8 alt_up_sd_card_is_Present
0081a7f0 g     F .text	00000050 Save_Modified_Sector
008191fc g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00814c50 g     F .text	00000088 __gtdf2
0080713c g     F .text	0000008c updateAcknowledge
00000000  w      *UND*	00000000 __errno
00817ef0 g     F .text	0000007c get_DDRAM_addr
0080597c g     F .text	00000070 drawVerticalLine
008191bc g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
008051e4 g     F .text	00000064 drawBox
00800000 g     F .entry	0000001c __reset
0082476c g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00807c5c g     F .text	00000064 initRange
00800280 g     F .text	0000000c dummyCollide
008046ec g     F .text	00000078 drawPlaylistPanel
00800020 g       *ABS*	00000000 __flash_exceptions_start
00813b88 g     F .text	00000074 _fstat_r
00824720 g     O .bss	00000004 errno
0080b0e8 g     F .text	00000038 __make_dp
008247a4 g     O .bss	0000a470 db
008064bc g     F .text	0000004c initObject
00801008 g     F .text	00000010 repeatPlaylist
00800270 g     F .text	00000010 getYActionBtn
00817110 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00808564 g     F .text	00000004 dBTester
00807768 g     F .text	00000140 sendStats
0080b6c8 g     F .text	0000002c __make_fp
00824708 g     O .bss	00000004 char_buffer
0080028c g     F .text	0000000c playButtonCollide
00824738 g     O .bss	00000004 alt_argv
00800ff4 g     F .text	00000004 updateSongToPlaylist
0082a9a0 g       *ABS*	00000000 _gp
0081db14 g     F .text	000003a8 alt_up_sd_card_fopen
008030c8 g     F .text	0000006c openFileFromSD
00807ccc g     F .text	00000008 getLength
00809e80 g     F .text	00000070 __subsf3
0081d690 g     F .text	000000d4 alt_up_sd_card_find_first
008073a8 g     F .text	00000138 reset
00824760 g     O .bss	00000004 command_argument_register
0081939c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00806af8 g     F .text	00000018 isBitSet
00807dd8 g     F .text	00000074 setSongName
00808814 g     F .text	00000054 initAudioDeviceController
00807e4c g     F .text	0000004c unloadSong
00808f34 g     F .text	00000028 handleSoundEnd
00821608 g     O .rwdata	00000180 alt_fd_list
00804e48 g     F .text	000000c8 initMenuFrame
00800a4c g     F .text	00000264 encodeCmd
0081cd84 g     F .text	0000012c find_first_empty_record_in_root_directory
0081ef08 g     F .text	00000094 alt_find_dev
0080c2c0 g     F .text	000000a0 memcpy
00818104 g     F .text	0000004c alt_up_character_lcd_write_fd
00819160 g     F .text	0000005c alt_up_char_buffer_clear
008115d8 g     F .text	0000000c _cleanup_r
0080af18 g     F .text	000000f8 __floatsidf
0081f090 g     F .text	00000078 alt_io_redirect
00814d60 g     F .text	00000088 __ltdf2
00803f54 g     F .text	00000170 preloadSongsToPlaylist
0081fa58 g       *ABS*	00000000 __DTOR_END__
00818ce0 g     F .text	00000074 alt_up_rs232_read_data
0080c510 g     F .text	00000014 puts
00808a04 g     F .text	0000000c stopSound
00804f10 g     F .text	00000258 initMainFrame
0080795c g     F .text	0000010c checkImgBtnCollision
0081c994 g     F .text	000001a4 find_first_empty_cluster
00812994 g     F .text	000000b0 __ratio
0081d490 g     F .text	000000c4 alt_up_sd_card_open_dev
008176a8 g     F .text	00000060 alt_up_audio_read_fifo_head
0081944c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
008169fc g     F .text	00000224 altera_avalon_jtag_uart_read
00807e98 g     F .text	00000064 loadStream
0080bb6c g     F .text	00000014 malloc
0080c43c g     F .text	00000034 _printf_r
0080b2d0 g     F .text	00000008 __udivsi3
00815614 g     F .text	000000c0 isatty
00809838 g     F .text	000003f4 updateMixer
00820aac g     O .rodata	000000c8 __mprec_tens
00801d78 g     F .text	00000110 syncAddExisitedSongToList
00806884 g     F .text	0000009c setHeader
00819ad8 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
008089d4 g     F .text	0000001c updatePos
008121a8 g     F .text	00000008 __locale_charset
0081f5c4 g     F .text	00000090 alt_icache_flush
00824714 g     O .bss	00000004 __malloc_top_pad
008078a8 g     F .text	000000b4 sendStartInit
00817830 g     F .text	0000008c alt_up_av_config_read_data
008229b4 g     O .rwdata	00000004 __mb_cur_max
008121b0 g     F .text	0000000c _localeconv_r
00800354 g     F .text	00000020 drawSongButton
008132b0 g     F .text	0000003c __i2b
00811b8c g     F .text	0000049c __sfvwrite_r
00800374 g     F .text	00000020 drawMenuButton
0081bc70 g     F .text	000000c0 get_dir_divider_location
0080cb34 g     F .text	00000070 _sbrk_r
0082eca0 g     O .bss	0000000c up_dev
0081a2bc g     F .text	000000d0 helper_plot_pixel
0081b910 g     F .text	000000d0 filename_to_upper_case
008012b4 g     F .text	0000003c createExisitedPlaylist
00801724 g     F .text	00000088 syncPause
0081debc g     F .text	00000090 alt_up_sd_card_set_attributes
0081ac88 g     F .text	00000284 Read_File_Record_At_Offset
00802d94 g     F .text	00000088 querySongByName
00813ce4 g     F .text	00000078 _read_r
00802ee8 g     F .text	00000100 getSongsFromSD
008025ac g     F .text	00000010 getCursorX
008215d4 g     O .rwdata	0000000c __lc_ctype
008229cc g     O .rwdata	00000004 alt_max_fd
00818c48 g     F .text	00000050 alt_up_rs232_check_parity
0080546c g     F .text	000000d0 draw_notransparent
00817708 g     F .text	00000060 alt_up_audio_write_fifo_head
0080ba08 g     F .text	00000138 __unpack_d
0081c530 g     F .text	00000464 find_file_in_directory
00813a64 g     F .text	00000110 _fclose_r
008184b8 g     F .text	00000034 read_num_bytes_available
00811458 g     F .text	00000034 fflush
00824718 g     O .bss	00000004 __malloc_max_sbrked_mem
00815454 g     F .text	000001c0 alt_irq_register
00818420 g     F .text	00000034 read_RI_bit
0080a53c g     F .text	00000054 __extendsfdf2
00808b00 g     F .text	0000010c readInt
00806508 g     F .text	00000010 getBit
0081d61c g     F .text	00000074 alt_up_sd_card_is_FAT16
0080aae0 g     F .text	00000074 __adddf3
0080966c g     F .text	00000018 positiveToNegative
00806860 g     F .text	00000024 setAck
0082ec14 g     O .bss	00000070 com
00812874 g     F .text	00000120 __b2d
00800848 g     F .text	00000204 decodeCmd
00819480 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00808994 g     F .text	00000028 convertVolumeToInt
00814338 g     F .text	000005b0 __umoddi3
00815820 g     F .text	000000f0 lseek
00808f14 g     F .text	00000020 playSound
008229b0 g     O .rwdata	00000004 _global_impure_ptr
00800cb0 g     F .text	000001b0 encodeString
0081c01c g     F .text	00000514 get_home_directory_cluster_for_file
0080c540 g     F .text	000005f4 _realloc_r
0082f4bc g       *ABS*	00000000 __bss_end
008195e4 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00815d50 g     F .text	0000010c alt_tick
0080895c g     F .text	00000020 allowFade
008070dc g     F .text	00000060 sendRS232
00813d5c g     F .text	000005dc __udivdi3
00800208 g     F .text	00000068 getXActionBtn
008071c8 g     F .text	0000007c send
00808870 g     F .text	00000020 convertToMS
008059ec g     F .text	00000064 drawHorizontalLine
00820b74 g     O .rodata	00000028 __mprec_bigtens
0081350c g     F .text	00000120 __s2b
0080763c g     F .text	0000012c sendAck
00814de8 g     F .text	00000194 __floatunsidf
008065c8 g     F .text	00000108 strnsep_
00812794 g     F .text	00000060 __mcmp
00824778 g     O .bss	00000004 current_sector_index
00816f5c g     F .text	00000040 alt_up_audio_open_dev
00818520 g     F .text	0000002c read_data_byte
008229a8 g     O .rwdata	00000004 __ctype_ptr
008115c0 g     F .text	00000018 __fp_lock_all
00800ff0 g     F .text	00000004 syncRemoveSongFromList
0082ecac g     O .bss	00000018 alarm
00801f98 g     F .text	000000cc syncDBFinish
00817398 g     F .text	00000070 alt_up_audio_play_r
00815cb8 g     F .text	00000098 alt_alarm_stop
0080da08 g     F .text	00000024 strtol
00818454 g     F .text	00000030 read_RE_bit
0081a9f4 g     F .text	000000e4 mark_cluster
00806c9c g     F .text	00000028 initQueue
00824730 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000cc alt_irq_handler
008215e0 g     O .rwdata	00000028 alt_dev_null
0081ceb0 g     F .text	000001b8 convert_filename_to_name_extension
00808984 g     F .text	00000010 setFadeOutLength
0080b558 g     F .text	000000c8 __unpack_f
008183ec g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
008186c4 g     F .text	00000078 alt_up_ps2_write_data_byte
00804674 g     F .text	00000078 drawSongPanel
0081ece8 g     F .text	00000044 alt_dcache_flush_all
00812660 g     F .text	00000070 __hi0bits
0082474c g     O .bss	00000004 is_sd_card_formated_as_FAT16
0081a1f8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00809774 g     F .text	000000c4 initSoundMixer
0080b010 g     F .text	000000d8 __fixdfsi
00804b34 g     F .text	000000dc initPlaylistPanel
0081cb38 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
008229e4 g       *ABS*	00000000 __ram_rwdata_end
008087dc g     F .text	00000038 av_config_setup
008229c4 g     O .rwdata	00000008 alt_dev_list
008070bc g     F .text	00000020 setStates
00815e5c g     F .text	00000120 write
008005fc g     F .text	000000d4 initMenuButton
00824770 g     O .bss	00000004 device_pointer
0081a38c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0080a320 g     F .text	00000078 __gtsf2
00808718 g     F .text	00000044 graphicTester
00820ccc g       *ABS*	00000000 __ram_rodata_end
00815320 g     F .text	000000d4 fstat
00808868 g     F .text	00000008 convertFromMS
00818de4 g     F .text	00000094 alt_up_rs232_write_fd
00806c50 g     F .text	0000004c containsValue
0080cc78 g     F .text	00000090 strcat
00802b38 g     F .text	00000030 isCurrPlaying
008089c8 g     F .text	0000000c seekSound
008133ec g     F .text	00000120 __pow5mult
00824724 g     O .bss	00000004 __nlocale_changed
0080b2d8 g     F .text	00000008 __umodsi3
0080051c g     F .text	00000070 initPlaylistButton
0082f4bc g       *ABS*	00000000 end
00818a38 g     F .text	000000a8 alt_up_ps2_write_fd
0080b3f8 g     F .text	00000160 __pack_f
00818eb8 g     F .text	00000084 alt_up_char_buffer_init
0080bb40 g     F .text	0000000c _atoi_r
00803540 g     F .text	0000010c addListToDB
008003e0 g     F .text	00000018 actionButtonCollide
008246fc g     O .bss	00000004 song_id_lock
00816500 g     F .text	000000b8 altera_avalon_jtag_uart_init
0080364c g     F .text	00000058 addSongToDB
0081fa54 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00816ed4 g     F .text	00000088 alt_avalon_timer_sc_init
0080b378 g     F .text	00000080 __clzsi2
00816c20 g     F .text	00000240 altera_avalon_jtag_uart_write
008114e4 g     F .text	00000004 __sfp_lock_acquire
00812400 g     F .text	000000e4 memchr
00818014 g     F .text	00000078 alt_up_character_lcd_write
0080da84 g     F .text	00001eac ___vfprintf_internal_r
0080cc18 g     F .text	00000060 _sprintf_r
00811878 g     F .text	00000314 _free_r
0080289c g     F .text	0000029c updateCursor
00806e7c g     F .text	0000012c dequeueValue
00807dd0 g     F .text	00000008 setSongVolume
0081f7d8 g     F .text	000001b0 __call_exitprocs
00824728 g     O .bss	00000004 __mlocale_changed
008229a4 g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000004c _start
00824740 g     O .bss	00000004 _alt_tick_rate
0080d164 g     F .text	00000660 strstr
008016d8 g     F .text	0000004c syncStop
0081757c g     F .text	0000012c alt_up_audio_write_fifo
00804344 g     F .text	000001e8 loadListsFromSD
00812f7c g     F .text	0000014c __lshift
008177cc g     F .text	00000064 alt_up_av_config_write_data
00804764 g     F .text	0000006c displayLoadingScreenVGA
00824744 g     O .bss	00000004 _alt_nticks
00801b40 g     F .text	000000dc play
00815a1c g     F .text	00000120 read
00816010 g     F .text	00000370 alt_sys_init
00818278 g     F .text	000000b0 alt_up_character_lcd_shift_display
0080a410 g     F .text	00000098 __floatsisf
00803b38 g     F .text	00000020 saveAllUpdatesToSDBeforeQuits
00817478 g     F .text	00000104 alt_up_audio_read_fifo
0081f6a0 g     F .text	00000134 __register_exitproc
00817e8c g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
00801004 g     F .text	00000004 updateDBIndex
00800394 g     F .text	0000004c initButton
00817084 g     F .text	00000050 alt_up_audio_disable_write_interrupt
00807cc4 g     F .text	00000008 setSongId
00818944 g     F .text	00000058 alt_up_ps2_clear_fifo
00818c08 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00801e88 g     F .text	00000110 syncAddSongToList
00804a78 g     F .text	0000009c drawMainFrame
008130c8 g     F .text	000001e8 __multiply
00818328 g     F .text	00000090 alt_up_character_lcd_erase_pos
00816894 g     F .text	00000074 altera_avalon_jtag_uart_close
00800340 g     F .text	00000014 drawActionButton
00805d60 g     F .text	000004f8 RS232_ISR
00820ccc g       *ABS*	00000000 __ram_rwdata_start
0081fa58 g       *ABS*	00000000 __ram_rodata_start
0080cf74 g     F .text	000000bc strncpy
0082477c g     O .bss	00000028 __malloc_current_mallinfo
0080a2a8 g     F .text	00000078 __eqsf2
00812c74 g     F .text	0000017c __d2b
00808e14 g     F .text	00000100 loadStreamBuffer
00824748 g     O .bss	00000004 initialized
0080c524 g     F .text	0000001c realloc
008163b8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081f50c g     F .text	000000b8 alt_get_fd
008011bc g     F .text	0000001c modifyPlaylistName
0082ecc4 g     O .bss	00000014 search_data
00814f7c g     F .text	000000c8 __fpcmp_parts_d
00801624 g     F .text	000000b4 syncSetVol
0080452c g     F .text	00000148 initDatabase
008139f4 g     F .text	00000070 _close_r
00817038 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00802d00 g     F .text	00000094 removeCurrPlaying
00808890 g     F .text	00000094 changeBitsPerSample
008124e4 g     F .text	00000074 memcmp
0082ec84 g     O .bss	0000001c memMgr
00816468 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0082f4bc g       *ABS*	00000000 __alt_stack_base
00804cf4 g     F .text	00000154 initActionFrame
008164b0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008096d4 g     F .text	00000018 clearIndexBuffer
00807cd4 g     F .text	00000008 getSongPosition
00804238 g     F .text	0000010c updateSongToSD
0080f954 g     F .text	0000013c __swsetup_r
008089bc g     F .text	0000000c setSoundVolume
008148e8 g     F .text	00000258 __divdf3
00816fe8 g     F .text	00000050 alt_up_audio_disable_read_interrupt
0081165c g     F .text	000000f0 __sfp
0082ecd8 g     O .bss	00000054 boot_sector_data
0080cec4 g     F .text	000000b0 strncat
00812ad8 g     F .text	00000058 __copybits
0080647c g     F .text	0000002c initMemory
00820dcc g     O .rwdata	00000408 __malloc_av_
008114f0 g     F .text	00000004 __sinit_lock_release
008089f0 g     F .text	00000008 pauseSound
0080ab54 g     F .text	000003c4 __muldf3
00813788 g     F .text	00000060 __sread
00806394 g     F .text	000000e8 addToMemory
0082063c g     O .rodata	00000010 __thenan_sf
00818b74 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0081f3ec g     F .text	00000120 alt_find_file
0081ed2c g     F .text	000000b4 alt_dev_llist_insert
008159dc g     F .text	00000020 __malloc_lock
00815bfc g     F .text	000000bc sbrk
00804c10 g     F .text	000000e4 initSongPanel
00802e1c g     F .text	000000cc queryListByName
0081125c g     F .text	000001fc _fflush_r
00813940 g     F .text	000000b4 _calloc_r
00807cc0 g     F .text	00000004 killSong
00807d5c g     F .text	00000074 pauseSong
00820ccc g     O .rwdata	00000100 __divsi3_table
008246fc g       *ABS*	00000000 __bss_start
00806518 g     F .text	00000018 setBit
0080c360 g     F .text	00000098 memset
00800204 g     F .text	00000004 dummyDraw
008083f4 g     F .text	00000170 main
008022a0 g     F .text	000002d0 cmdProcessing
00817324 g     F .text	00000074 alt_up_audio_write_fifo_space
0082473c g     O .bss	00000004 alt_envp
0082471c g     O .bss	00000004 __malloc_max_total_mem
008193f4 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00818f3c g     F .text	00000040 alt_up_char_buffer_open_dev
00816410 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008074e0 g     F .text	0000003c failReceive
00801a04 g     F .text	0000013c syncUpdatePos
008064a8 g     F .text	00000014 setXY
0081df4c g     F .text	0000008c alt_up_sd_card_get_attributes
00806530 g     F .text	00000098 initPacket
00801c1c g     F .text	000000b4 prev
00802570 g     F .text	00000008 addCmd
0081a728 g     F .text	000000c8 Write_Sector_Data
0081e36c g     F .text	00000624 alt_up_sd_card_write
00801018 g     F .text	00000010 play_playlist
008181c8 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0081369c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00824700 g     O .bss	00000004 soundMixer
00813b74 g     F .text	00000014 fclose
008188c8 g     F .text	0000007c alt_up_ps2_read_data_byte
0080d7c4 g     F .text	00000244 _strtol_r
0080b120 g     F .text	00000074 __truncdfsf2
0080751c g     F .text	000000a4 checkAck
008010c0 g     F .text	000000b0 addSongToList
0082f32c g     O .bss	00000190 _atexit0
0080fca8 g     F .text	000015b4 _dtoa_r
0080bb80 g     F .text	00000740 _malloc_r
00808a20 g     F .text	00000044 unloadSound
008229d0 g     O .rwdata	00000004 alt_errno
008066d0 g     F .text	00000068 killPacket
00805168 g     F .text	00000020 getColor
008011ac g     F .text	00000010 seek
008120f0 g     F .text	000000b8 _fwalk
00807efc g     F .text	00000090 loadSong
008051c8 g     F .text	0000001c setImagePos
00818ae0 g     F .text	00000040 alt_up_ps2_open_dev
0080b210 g     F .text	00000060 __divsi3
008069b0 g     F .text	00000038 killPlaylist
0082064c g     O .rodata	00000014 __thenan_df
00817fd4 g     F .text	00000040 alt_up_character_lcd_open_dev
0081174c g     F .text	0000012c _malloc_trim_r
00818618 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
00806d8c g     F .text	00000044 killQueueData
0081fa58 g       *ABS*	00000000 __CTOR_END__
00809f54 g     F .text	000001e0 __mulsf3
00805248 g     F .text	000000b0 initImage
00824754 g     O .bss	00000004 status_register
00817fa0 g     F .text	00000034 alt_up_character_lcd_init
0080cd08 g     F .text	000000bc strcmp
0082475c g     O .bss	00000004 command_register
00806258 g     F .text	0000013c freeMem
00809684 g     F .text	00000050 incIndex
0081fa58 g       *ABS*	00000000 __flash_rodata_start
00806c04 g     F .text	0000004c wasKeyJustPressed
0081fa58 g       *ABS*	00000000 __DTOR_LIST__
00818e78 g     F .text	00000040 alt_up_rs232_open_dev
00814bc8 g     F .text	00000088 __nedf2
00817768 g     F .text	00000064 alt_up_av_config_open_dev
00815fdc g     F .text	00000034 alt_irq_init
008052f8 g     F .text	00000098 initVGA
00815b9c g     F .text	00000060 alt_release_fd
0081a93c g     F .text	000000b8 get_cluster_flag
00807a68 g     F .text	0000010c checkTxtBtnCollision
00806b10 g     F .text	00000024 isKeyUp
008184ec g     F .text	00000034 read_data_valid
0080cba4 g     F .text	00000074 sprintf
008183b8 g     F .text	00000034 alt_up_character_lcd_cursor_off
00820660 g     O .rodata	00000100 __clz_tab
0081af0c g     F .text	000002b8 Write_File_Record_At_Offset
0082472c g     O .bss	00000004 _PathLocale
0082470c g     O .bss	00000004 pixel_buffer
008187ac g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0081f654 g     F .text	00000014 atexit
0080a398 g     F .text	00000078 __gesf2
008138c8 g     F .text	00000078 _write_r
008179c4 g     F .text	00000038 alt_up_av_config_read_ready
00812250 g     F .text	0000001c setlocale
0080875c g     F .text	00000010 disableAudioDeviceController
0081b1c4 g     F .text	00000648 Check_for_DOS_FAT
00808fa4 g     F .text	00000358 loadSoundBuffer
0081d068 g     F .text	000002d4 create_file
008229ac g     O .rwdata	00000004 _impure_ptr
00824758 g     O .bss	00000004 CSD_register_w0
00824734 g     O .bss	00000004 alt_argc
008011d8 g     F .text	000000b0 killCmd
0081eea4 g     F .text	00000064 _do_dtors
00801cd0 g     F .text	000000a8 next
00808568 g     F .text	00000090 soundTester
008040c4 g     F .text	00000174 saveListsToSD
00800020 g       .exceptions	00000000 alt_irq_entry
008127f4 g     F .text	00000080 __ulp
0081362c g     F .text	00000040 __isinfd
008115a8 g     F .text	00000018 __fp_unlock_all
00808108 g     F .text	000000ac initSong
0080553c g     F .text	00000440 loadSDImage
00806fa8 g     F .text	000000fc addPacketsLengthToQueue
00804938 g     F .text	0000008c drawActionFrame
008229bc g     O .rwdata	00000008 alt_fs_list
0081b9e0 g     F .text	00000290 check_file_name_for_FAT16_compliance
0080876c g     F .text	00000070 enableAudioDeviceController
00824764 g     O .bss	00000004 buffer_memory
0080141c g     F .text	00000120 initCmd
00818b20 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
008172b4 g     F .text	00000070 alt_up_audio_record_l
00818c98 g     F .text	00000048 alt_up_rs232_write_data
00806cc4 g     F .text	000000c8 enqueue
00806a5c g     F .text	0000009c initPlaylist
008003f8 g     F .text	00000124 initActionButton
00800020 g       *ABS*	00000000 __ram_exceptions_start
008092fc g     F .text	00000158 loadWavSound
008096ec g     F .text	00000028 setGlobalVolume
008121bc g     F .text	00000010 localeconv
00807244 g     F .text	00000164 initRS232
00807f8c g     F .text	0000017c playStream
00824704 g     O .bss	00000004 SDIO_lock
0080189c g     F .text	000000b4 syncNext
008178f4 g     F .text	00000038 alt_up_av_config_enable_interrupt
00806738 g     F .text	00000128 readPacketHeader
008085f8 g     F .text	00000090 cmdTester
008051a0 g     F .text	00000028 addImage
00824768 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00806dd0 g     F .text	000000ac dequeue
008069e8 g     F .text	00000074 setListName
0081795c g     F .text	00000068 alt_up_av_config_read_acknowledge
00817cfc g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
008017ac g     F .text	000000f0 syncPlay
008229e4 g       *ABS*	00000000 _edata
008006d0 g     F .text	00000090 menuButtonCollide
0082f4bc g       *ABS*	00000000 _end
0082ed2c g     O .bss	00000500 active_files
008001b8 g       *ABS*	00000000 __ram_exceptions_end
0081d33c g     F .text	00000154 copy_file_record_name_to_string
00807d54 g     F .text	00000008 resumeSong
00816908 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00808f5c g     F .text	00000024 getSoundLengthMS
00805b94 g     F .text	0000009c audio_ISR
0081b80c g     F .text	00000104 Look_for_FAT16
00817408 g     F .text	00000070 alt_up_audio_play_l
0081370c g     F .text	0000007c __swrite
008002ec g     F .text	00000054 playlistMenuButtonCollide
00806b34 g     F .text	00000028 isKeyDown
008025cc g     F .text	00000208 memOverlap
00800ffc g     F .text	00000004 repeatCurrentSong
008229a0 g     O .rwdata	00000004 __malloc_trim_threshold
0081f3cc g     F .text	00000020 altera_nios2_qsys_irq_init
0081f668 g     F .text	00000038 exit
0081d764 g     F .text	000003b0 alt_up_sd_card_find_next
00812028 g     F .text	000000c8 _fwalk_reent
0080a590 g     F .text	000000c0 __floatunsisf
0081854c g     F .text	000000cc alt_up_ps2_init
00812df0 g     F .text	0000018c __mdiff
00817e28 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
0080b270 g     F .text	00000060 __modsi3
008027d4 g     F .text	000000c8 initCursor
00800760 g     F .text	00000008 decodePlaylist
00802064 g     F .text	00000108 syncCreateSong
0081a840 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008114e8 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081808c g     F .text	00000078 alt_up_character_lcd_string
0080bb4c g     F .text	0000000c atoi
0080153c g     F .text	00000088 syncSelectList
008207da g     O .rodata	00000101 _ctype_
00807cdc g     F .text	00000008 seekSong
0080322c g     F .text	000000fc readLine
008036a4 g     F .text	0000017c update
00807ce4 g     F .text	00000070 stopSong
00805390 g     F .text	000000dc draw
00800298 g     F .text	00000054 allSongsMenuButtonCollide
00809c2c g     F .text	00000070 __fixunssfsi
0080b620 g     F .text	000000a8 __fpcmp_parts_f
0081f9c8 g     F .text	00000020 _exit
0081366c g     F .text	00000030 __isnand
00815044 g     F .text	00000154 alt_alarm_start
0080b2e0 g     F .text	00000098 __muldi3
0081eb5c g     F .text	000000fc Read_Sector_Data_CRC
0081dfd8 g     F .text	00000394 alt_up_sd_card_read
0081226c g     F .text	00000194 __smakebuf_r
00806b5c g     F .text	00000060 initPushKeyController
0081873c g     F .text	00000070 alt_up_ps2_wait_for_ack
00808924 g     F .text	00000038 clearSoundBuffer
0080ce50 g     F .text	00000074 strlen
008089f8 g     F .text	0000000c resumeSound
0081f1e4 g     F .text	00000188 open
00802b68 g     F .text	00000198 initializeListWithSongs
00814cd8 g     F .text	00000088 __gedf2
00803f24 g     F .text	00000030 loadSongsFromSD
008081b4 g     F .text	000001c4 playSong
00801374 g     F .text	00000070 stop
00817aa8 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00801950 g     F .text	000000b4 syncPrev
00808c0c g     F .text	00000208 loadWavHeader
0081ef9c g     F .text	00000030 alt_icache_flush_all
008137e8 g     F .text	000000e0 strchr
00818150 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
008229d4 g     O .rwdata	00000004 alt_priority_mask
00803328 g     F .text	000000d8 removeListFromDB
008047d0 g     F .text	00000168 clearSongPanel
008049c4 g     F .text	000000b4 drawMenuFrame
0080f930 g     F .text	00000024 __vfprintf_internal
00817dc4 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
00806928 g     F .text	00000088 generateListNameForSD
0081899c g     F .text	0000009c alt_up_ps2_read_fd
00803820 g     F .text	00000318 saveListChangesToSD
0080aa60 g     F .text	00000080 __subdf3
00801038 g     F .text	00000010 shuffle
00804b14 g     F .text	00000020 initFrame
008126d0 g     F .text	000000c4 __lo0bits
008070a4 g     F .text	00000018 switchAck
008229dc g     O .rwdata	00000008 alt_alarm_list
0081ee40 g     F .text	00000064 _do_ctors
00818bcc g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00815198 g     F .text	000000fc close
00809ef0 g     F .text	00000064 __addsf3
00809714 g     F .text	00000060 clearSoundMixer
00806920 g     F .text	00000008 setListId
00815734 g     F .text	00000080 alt_load
00816f9c g     F .text	0000004c alt_up_audio_enable_read_interrupt
0080897c g     F .text	00000008 setFadeInLength
00817ba0 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
00801288 g     F .text	0000002c createSong
0080b6f4 g     F .text	00000314 __pack_d
00802fe8 g     F .text	000000e0 createPlaylistFromTxt
00806bbc g     F .text	00000048 wasKeyJustReleased
00805c30 g     F .text	00000130 push_key_ISR
0081bd30 g     F .text	000002ec match_file_record_to_name_ext
00808688 g     F .text	00000090 dbTester2
00805188 g     F .text	00000018 getColor555
0080bb58 g     F .text	00000014 free
008114ec g     F .text	00000004 __sinit_lock_acquire
008132ec g     F .text	00000100 __multadd
00812638 g     F .text	00000028 _Bfree
00817c98 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
008170d4 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020f4 	movhi	r3,131
  800134:	18fc8b04 	addi	r3,r3,-3540
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020f4 	movhi	r3,131
  80014c:	18fc8b04 	addi	r3,r3,-3540
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  8001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c4:	00bffd16 	blt	zero,r2,8001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d0:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001d4:	d6aa6814 	ori	gp,gp,43424
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d8:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  8001dc:	1091bf14 	ori	r2,r2,18172

    movhi r3, %hi(__bss_end)
  8001e0:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001e4:	18fd2f14 	ori	r3,r3,62652

    beq r2, r3, 1f
  8001e8:	10c00326 	beq	r2,r3,8001f8 <_start+0x40>

0:
    stw zero, (r2)
  8001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f4:	10fffd36 	bltu	r2,r3,8001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f8:	08157340 	call	815734 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001fc:	08159700 	call	815970 <alt_main>

00800200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800200:	003fff06 	br	800200 <alt_after_alt_main>

00800204 <dummyDraw>:
	draw(this->x_pos, this->y_pos, this->stats[0]);
}

void dummyDraw(struct Button* this){

}
  800204:	f800283a 	ret

00800208 <getXActionBtn>:
	printf("ERROR:Dummy Collide is called.\n");
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800208:	00800104 	movi	r2,4
  80020c:	11000c36 	bltu	r2,r4,800240 <getXActionBtn+0x38>
  800210:	2105883a 	add	r2,r4,r4
  800214:	1085883a 	add	r2,r2,r2
  800218:	00c02034 	movhi	r3,128
  80021c:	18c08b04 	addi	r3,r3,556
  800220:	10c5883a 	add	r2,r2,r3
  800224:	11000017 	ldw	r4,0(r2)
  800228:	2000683a 	jmp	r4
  80022c:	00800248 	cmpgei	r2,zero,9
  800230:	00800268 	cmpgeui	r2,zero,9
  800234:	00800260 	cmpeqi	r2,zero,9
  800238:	00800258 	cmpnei	r2,zero,9
  80023c:	00800250 	cmplti	r2,zero,9
  800240:	0005883a 	mov	r2,zero
  800244:	f800283a 	ret
  800248:	00802444 	movi	r2,145
  80024c:	f800283a 	ret
  800250:	00803344 	movi	r2,205
  800254:	f800283a 	ret
	case 1:
		x = 120;
		break;
	case 2:
		x = 180;
		break;
  800258:	008017c4 	movi	r2,95
		break;
	default:
		break;
	}
	return x;
}
  80025c:	f800283a 	ret
	case 0:
		x = 145;
		break;
	case 1:
		x = 120;
		break;
  800260:	00802d04 	movi	r2,180
  800264:	f800283a 	ret
int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
	case 0:
		x = 145;
		break;
  800268:	00801e04 	movi	r2,120
  80026c:	f800283a 	ret

00800270 <getYActionBtn>:
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  800270:	00803204 	movi	r2,200
  800274:	20000126 	beq	r4,zero,80027c <getYActionBtn+0xc>
  800278:	00803344 	movi	r2,205
	default:
		y = 205;
		break;
	}
	return y;
}
  80027c:	f800283a 	ret

00800280 <dummyCollide>:
void playButtonCollide(struct Button* this){
	printf("Play button is clicked\n");
}

void dummyCollide(struct Button* this){
	printf("ERROR:Dummy Collide is called.\n");
  800280:	010020b4 	movhi	r4,130
  800284:	213e9604 	addi	r4,r4,-1448
  800288:	080c5101 	jmpi	80c510 <puts>

0080028c <playButtonCollide>:
		break;
	}
}

void playButtonCollide(struct Button* this){
	printf("Play button is clicked\n");
  80028c:	010020b4 	movhi	r4,130
  800290:	213e9e04 	addi	r4,r4,-1416
  800294:	080c5101 	jmpi	80c510 <puts>

00800298 <allSongsMenuButtonCollide>:
		printf("Playlist frame is NULL\n");
		return;
	}
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
  800298:	defffe04 	addi	sp,sp,-8
  80029c:	dc400015 	stw	r17,0(sp)
  8002a0:	2023883a 	mov	r17,r4
  8002a4:	dfc00115 	stw	ra,4(sp)
	clearSongPanel();
  8002a8:	08047d00 	call	8047d0 <clearSongPanel>
	if (this->mainPanel->elements[2] == NULL){
  8002ac:	88c00117 	ldw	r3,4(r17)
		printf("All Songs frame is NULL\n");
  8002b0:	010020b4 	movhi	r4,130
  8002b4:	213ea404 	addi	r4,r4,-1392
	}
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->mainPanel->elements[2] == NULL){
  8002b8:	18800017 	ldw	r2,0(r3)
  8002bc:	10c00217 	ldw	r3,8(r2)
  8002c0:	18000626 	beq	r3,zero,8002dc <allSongsMenuButtonCollide+0x44>
		printf("All Songs frame is NULL\n");
		return;
	}
	this->mainPanel->elements[2]->drawFrame(this->mainPanel->elements[2]);
  8002c4:	18800717 	ldw	r2,28(r3)
  8002c8:	1809883a 	mov	r4,r3
}
  8002cc:	dfc00117 	ldw	ra,4(sp)
  8002d0:	dc400017 	ldw	r17,0(sp)
  8002d4:	dec00204 	addi	sp,sp,8
	clearSongPanel();
	if (this->mainPanel->elements[2] == NULL){
		printf("All Songs frame is NULL\n");
		return;
	}
	this->mainPanel->elements[2]->drawFrame(this->mainPanel->elements[2]);
  8002d8:	1000683a 	jmp	r2
}
  8002dc:	dfc00117 	ldw	ra,4(sp)
  8002e0:	dc400017 	ldw	r17,0(sp)
  8002e4:	dec00204 	addi	sp,sp,8
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->mainPanel->elements[2] == NULL){
		printf("All Songs frame is NULL\n");
  8002e8:	080c5101 	jmpi	80c510 <puts>

008002ec <playlistMenuButtonCollide>:
		break;
	default:
		break;
	}
}
void playlistMenuButtonCollide(struct Button* this){
  8002ec:	defffe04 	addi	sp,sp,-8
  8002f0:	dc400015 	stw	r17,0(sp)
  8002f4:	2023883a 	mov	r17,r4
  8002f8:	dfc00115 	stw	ra,4(sp)
	clearSongPanel();
  8002fc:	08047d00 	call	8047d0 <clearSongPanel>
	if (this->mainPanel->elements[3] == NULL){
  800300:	88c00117 	ldw	r3,4(r17)
		printf("Playlist frame is NULL\n");
  800304:	010020b4 	movhi	r4,130
  800308:	213eaa04 	addi	r4,r4,-1368
		break;
	}
}
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->mainPanel->elements[3] == NULL){
  80030c:	18800017 	ldw	r2,0(r3)
  800310:	10c00317 	ldw	r3,12(r2)
  800314:	18000626 	beq	r3,zero,800330 <playlistMenuButtonCollide+0x44>
		printf("Playlist frame is NULL\n");
		return;
	}
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
  800318:	18800717 	ldw	r2,28(r3)
  80031c:	1809883a 	mov	r4,r3
}
  800320:	dfc00117 	ldw	ra,4(sp)
  800324:	dc400017 	ldw	r17,0(sp)
  800328:	dec00204 	addi	sp,sp,8
	clearSongPanel();
	if (this->mainPanel->elements[3] == NULL){
		printf("Playlist frame is NULL\n");
		return;
	}
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
  80032c:	1000683a 	jmp	r2
}
  800330:	dfc00117 	ldw	ra,4(sp)
  800334:	dc400017 	ldw	r17,0(sp)
  800338:	dec00204 	addi	sp,sp,8
	}
}
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->mainPanel->elements[3] == NULL){
		printf("Playlist frame is NULL\n");
  80033c:	080c5101 	jmpi	80c510 <puts>

00800340 <drawActionButton>:
	// TODO: draw with different gradient background color,
	// may need to add integer as parameter.
	alt_up_char_buffer_string(char_buffer, this->name, this->x_pos, this->y_pos);
}

void drawActionButton(struct Button* this){
  800340:	2007883a 	mov	r3,r4
	draw(this->x_pos, this->y_pos, this->stats[0]);
  800344:	21800817 	ldw	r6,32(r4)
  800348:	19400617 	ldw	r5,24(r3)
  80034c:	21000517 	ldw	r4,20(r4)
  800350:	08053901 	jmpi	805390 <draw>

00800354 <drawSongButton>:
void drawMenuButton(struct Button* this){
	// right now just write
	alt_up_char_buffer_string(char_buffer, this->name, this->x_pos, this->y_pos);
}

void drawSongButton(struct Button* this){
  800354:	200d883a 	mov	r6,r4
	// TODO: draw with different gradient background color,
	// may need to add integer as parameter.
	alt_up_char_buffer_string(char_buffer, this->name, this->x_pos, this->y_pos);
  800358:	008020b4 	movhi	r2,130
  80035c:	1091c204 	addi	r2,r2,18184
  800360:	31c00617 	ldw	r7,24(r6)
  800364:	31400717 	ldw	r5,28(r6)
  800368:	11000017 	ldw	r4,0(r2)
  80036c:	31800517 	ldw	r6,20(r6)
  800370:	081904c1 	jmpi	81904c <alt_up_char_buffer_string>

00800374 <drawMenuButton>:
	ab->draw = drawActionButton;
	ab->collide = actionButtonCollide;
	return ab;
}

void drawMenuButton(struct Button* this){
  800374:	200d883a 	mov	r6,r4
	// right now just write
	alt_up_char_buffer_string(char_buffer, this->name, this->x_pos, this->y_pos);
  800378:	008020b4 	movhi	r2,130
  80037c:	1091c204 	addi	r2,r2,18184
  800380:	31c00617 	ldw	r7,24(r6)
  800384:	31400717 	ldw	r5,28(r6)
  800388:	11000017 	ldw	r4,0(r2)
  80038c:	31800517 	ldw	r6,20(r6)
  800390:	081904c1 	jmpi	81904c <alt_up_char_buffer_string>

00800394 <initButton>:
#include "Button.h"

struct Button* initButton(){
  800394:	deffff04 	addi	sp,sp,-4
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800398:	01000c04 	movi	r4,48
#include "Button.h"

struct Button* initButton(){
  80039c:	dfc00015 	stw	ra,0(sp)
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  8003a0:	080bb6c0 	call	80bb6c <malloc>
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
  8003a4:	01002034 	movhi	r4,128
  8003a8:	21008104 	addi	r4,r4,516
  8003ac:	11000a15 	stw	r4,40(r2)
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  8003b0:	014000c4 	movi	r5,3
	b->collide = dummyCollide;
  8003b4:	01002034 	movhi	r4,128
  8003b8:	2100a004 	addi	r4,r4,640
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  8003bc:	11400015 	stw	r5,0(r2)
	b->collide = dummyCollide;
  8003c0:	11000b15 	stw	r4,44(r2)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
  8003c4:	10000715 	stw	zero,28(r2)
	b->range = NULL;
  8003c8:	10000215 	stw	zero,8(r2)
	b->x_pos = 0;
  8003cc:	10000515 	stw	zero,20(r2)
	b->y_pos = 0;
  8003d0:	10000615 	stw	zero,24(r2)
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	return b;
}
  8003d4:	dfc00017 	ldw	ra,0(sp)
  8003d8:	dec00104 	addi	sp,sp,4
  8003dc:	f800283a 	ret

008003e0 <actionButtonCollide>:
	}
	this->mainPanel->elements[2]->drawFrame(this->mainPanel->elements[2]);
}

void actionButtonCollide(struct Button* this){
	switch(this->type){
  8003e0:	20800317 	ldw	r2,12(r4)
		break;
	}
}

void playButtonCollide(struct Button* this){
	printf("Play button is clicked\n");
  8003e4:	010020b4 	movhi	r4,130
  8003e8:	213e9e04 	addi	r4,r4,-1416
	}
	this->mainPanel->elements[2]->drawFrame(this->mainPanel->elements[2]);
}

void actionButtonCollide(struct Button* this){
	switch(this->type){
  8003ec:	1000011e 	bne	r2,zero,8003f4 <actionButtonCollide+0x14>
		break;
	}
}

void playButtonCollide(struct Button* this){
	printf("Play button is clicked\n");
  8003f0:	080c5101 	jmpi	80c510 <puts>
  8003f4:	f800283a 	ret

008003f8 <initActionButton>:
	return pb;
}

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
  8003f8:	defffd04 	addi	sp,sp,-12
  8003fc:	dc400115 	stw	r17,4(sp)
  800400:	2023883a 	mov	r17,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800404:	01000c04 	movi	r4,48
	return pb;
}

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
  800408:	dc000015 	stw	r16,0(sp)
  80040c:	dfc00215 	stw	ra,8(sp)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800410:	080bb6c0 	call	80bb6c <malloc>
  800414:	1021883a 	mov	r16,r2
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800418:	008000c4 	movi	r2,3
  80041c:	80800015 	stw	r2,0(r16)
	b->collide = dummyCollide;
	b->draw = dummyDraw;
  800420:	00802034 	movhi	r2,128
  800424:	10808104 	addi	r2,r2,516
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800428:	00c02034 	movhi	r3,128
  80042c:	18c0a004 	addi	r3,r3,640
	b->draw = dummyDraw;
  800430:	80800a15 	stw	r2,40(r16)
	printf("ERROR:Dummy Collide is called.\n");
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800434:	00800104 	movi	r2,4
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800438:	80c00b15 	stw	r3,44(r16)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
  80043c:	80000715 	stw	zero,28(r16)
	b->range = NULL;
  800440:	80000215 	stw	zero,8(r16)
	b->x_pos = 0;
  800444:	80000515 	stw	zero,20(r16)
	b->y_pos = 0;
  800448:	80000615 	stw	zero,24(r16)
	printf("ERROR:Dummy Collide is called.\n");
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  80044c:	14400c36 	bltu	r2,r17,800480 <initActionButton+0x88>
  800450:	8c45883a 	add	r2,r17,r17
  800454:	1085883a 	add	r2,r2,r2
  800458:	00c02034 	movhi	r3,128
  80045c:	18c11b04 	addi	r3,r3,1132
  800460:	10c5883a 	add	r2,r2,r3
  800464:	11000017 	ldw	r4,0(r2)
  800468:	2000683a 	jmp	r4
  80046c:	008004dc 	xori	r2,zero,19
  800470:	00800510 	cmplti	r2,zero,20
  800474:	00800504 	movi	r2,20
  800478:	008004f8 	rdprs	r2,zero,19
  80047c:	008004ec 	andhi	r2,zero,19

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800480:	80000515 	stw	zero,20(r16)
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  800484:	88001726 	beq	r17,zero,8004e4 <initActionButton+0xec>

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800488:	00803344 	movi	r2,205
	ab->y_pos = getYActionBtn(type);
	ab->range = initRange(ab->x_pos, ab->y_pos, 20, 20);
  80048c:	81000517 	ldw	r4,20(r16)
  800490:	01800504 	movi	r6,20
  800494:	100b883a 	mov	r5,r2
  800498:	300f883a 	mov	r7,r6
// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
	ab->y_pos = getYActionBtn(type);
  80049c:	80800615 	stw	r2,24(r16)
	ab->range = initRange(ab->x_pos, ab->y_pos, 20, 20);
  8004a0:	0807c5c0 	call	807c5c <initRange>
  8004a4:	80800215 	stw	r2,8(r16)
	ab->type = type;
	ab->draw = drawActionButton;
  8004a8:	00802034 	movhi	r2,128
  8004ac:	1080d004 	addi	r2,r2,832
  8004b0:	80800a15 	stw	r2,40(r16)
	ab->collide = actionButtonCollide;
  8004b4:	00c02034 	movhi	r3,128
  8004b8:	18c0f804 	addi	r3,r3,992
	return ab;
}
  8004bc:	8005883a 	mov	r2,r16
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
	ab->y_pos = getYActionBtn(type);
	ab->range = initRange(ab->x_pos, ab->y_pos, 20, 20);
	ab->type = type;
  8004c0:	84400315 	stw	r17,12(r16)
	ab->draw = drawActionButton;
	ab->collide = actionButtonCollide;
  8004c4:	80c00b15 	stw	r3,44(r16)
	return ab;
}
  8004c8:	dfc00217 	ldw	ra,8(sp)
  8004cc:	dc400117 	ldw	r17,4(sp)
  8004d0:	dc000017 	ldw	r16,0(sp)
  8004d4:	dec00304 	addi	sp,sp,12
  8004d8:	f800283a 	ret

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  8004dc:	00802444 	movi	r2,145
  8004e0:	80800515 	stw	r2,20(r16)
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  8004e4:	00803204 	movi	r2,200
  8004e8:	003fe806 	br	80048c <initActionButton+0x94>

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  8004ec:	00803344 	movi	r2,205
  8004f0:	80800515 	stw	r2,20(r16)
  8004f4:	003fe406 	br	800488 <initActionButton+0x90>
	printf("ERROR:Dummy Collide is called.\n");
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  8004f8:	008017c4 	movi	r2,95

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  8004fc:	80800515 	stw	r2,20(r16)
  800500:	003fe106 	br	800488 <initActionButton+0x90>
	printf("ERROR:Dummy Collide is called.\n");
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800504:	00802d04 	movi	r2,180

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800508:	80800515 	stw	r2,20(r16)
  80050c:	003fde06 	br	800488 <initActionButton+0x90>
	printf("ERROR:Dummy Collide is called.\n");
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800510:	00801e04 	movi	r2,120

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800514:	80800515 	stw	r2,20(r16)
  800518:	003fdb06 	br	800488 <initActionButton+0x90>

0080051c <initPlaylistButton>:
	sb->x_pos = x;
	sb->y_pos = y;
	sb->draw = drawSongButton;
	return sb;
}
struct Button* initPlaylistButton(int x, int y, char* name, int color){
  80051c:	defffc04 	addi	sp,sp,-16
  800520:	dd400215 	stw	r21,8(sp)
  800524:	202b883a 	mov	r21,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800528:	01000c04 	movi	r4,48
	sb->x_pos = x;
	sb->y_pos = y;
	sb->draw = drawSongButton;
	return sb;
}
struct Button* initPlaylistButton(int x, int y, char* name, int color){
  80052c:	dcc00115 	stw	r19,4(sp)
  800530:	dc400015 	stw	r17,0(sp)
  800534:	2827883a 	mov	r19,r5
  800538:	3023883a 	mov	r17,r6
  80053c:	dfc00315 	stw	ra,12(sp)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800540:	080bb6c0 	call	80bb6c <malloc>
struct Button* initPlaylistButton(int x, int y, char* name, int color){
	struct Button* pb = initButton();
	pb->name = name;
	pb->x_pos = x;
	pb->y_pos = y;
	pb->draw = drawMenuButton;
  800544:	01002034 	movhi	r4,128
  800548:	2100dd04 	addi	r4,r4,884
  80054c:	11000a15 	stw	r4,40(r2)
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800550:	014000c4 	movi	r5,3
	b->collide = dummyCollide;
  800554:	01002034 	movhi	r4,128
  800558:	2100a004 	addi	r4,r4,640
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  80055c:	11400015 	stw	r5,0(r2)
	b->collide = dummyCollide;
  800560:	11000b15 	stw	r4,44(r2)
	sb->draw = drawSongButton;
	return sb;
}
struct Button* initPlaylistButton(int x, int y, char* name, int color){
	struct Button* pb = initButton();
	pb->name = name;
  800564:	14400715 	stw	r17,28(r2)
	pb->x_pos = x;
  800568:	15400515 	stw	r21,20(r2)
	pb->y_pos = y;
  80056c:	14c00615 	stw	r19,24(r2)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
  800570:	10000215 	stw	zero,8(r2)
	pb->name = name;
	pb->x_pos = x;
	pb->y_pos = y;
	pb->draw = drawMenuButton;
	return pb;
}
  800574:	dfc00317 	ldw	ra,12(sp)
  800578:	dd400217 	ldw	r21,8(sp)
  80057c:	dcc00117 	ldw	r19,4(sp)
  800580:	dc400017 	ldw	r17,0(sp)
  800584:	dec00404 	addi	sp,sp,16
  800588:	f800283a 	ret

0080058c <initSongButton>:
	b->collide = menuButtonCollide;
	b->mainPanel = mainFrame;
	return b;
}

struct Button* initSongButton(int x, int y, char* name, int color){
  80058c:	defffc04 	addi	sp,sp,-16
  800590:	dd400215 	stw	r21,8(sp)
  800594:	202b883a 	mov	r21,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800598:	01000c04 	movi	r4,48
	b->collide = menuButtonCollide;
	b->mainPanel = mainFrame;
	return b;
}

struct Button* initSongButton(int x, int y, char* name, int color){
  80059c:	dcc00115 	stw	r19,4(sp)
  8005a0:	dc400015 	stw	r17,0(sp)
  8005a4:	2827883a 	mov	r19,r5
  8005a8:	3023883a 	mov	r17,r6
  8005ac:	dfc00315 	stw	ra,12(sp)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  8005b0:	080bb6c0 	call	80bb6c <malloc>
struct Button* initSongButton(int x, int y, char* name, int color){
	struct Button* sb = initButton();
	sb->name = name;
	sb->x_pos = x;
	sb->y_pos = y;
	sb->draw = drawSongButton;
  8005b4:	01002034 	movhi	r4,128
  8005b8:	2100d504 	addi	r4,r4,852
  8005bc:	11000a15 	stw	r4,40(r2)
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  8005c0:	014000c4 	movi	r5,3
	b->collide = dummyCollide;
  8005c4:	01002034 	movhi	r4,128
  8005c8:	2100a004 	addi	r4,r4,640
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  8005cc:	11400015 	stw	r5,0(r2)
	b->collide = dummyCollide;
  8005d0:	11000b15 	stw	r4,44(r2)
	return b;
}

struct Button* initSongButton(int x, int y, char* name, int color){
	struct Button* sb = initButton();
	sb->name = name;
  8005d4:	14400715 	stw	r17,28(r2)
	sb->x_pos = x;
  8005d8:	15400515 	stw	r21,20(r2)
	sb->y_pos = y;
  8005dc:	14c00615 	stw	r19,24(r2)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
  8005e0:	10000215 	stw	zero,8(r2)
	sb->name = name;
	sb->x_pos = x;
	sb->y_pos = y;
	sb->draw = drawSongButton;
	return sb;
}
  8005e4:	dfc00317 	ldw	ra,12(sp)
  8005e8:	dd400217 	ldw	r21,8(sp)
  8005ec:	dcc00117 	ldw	r19,4(sp)
  8005f0:	dc400017 	ldw	r17,0(sp)
  8005f4:	dec00404 	addi	sp,sp,16
  8005f8:	f800283a 	ret

008005fc <initMenuButton>:
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	return b;
}

struct Button* initMenuButton(int x, char* name, int color, int type, struct Frame* mainFrame){
  8005fc:	defffa04 	addi	sp,sp,-24
  800600:	dd000315 	stw	r20,12(sp)
  800604:	2029883a 	mov	r20,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800608:	01000c04 	movi	r4,48
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	return b;
}

struct Button* initMenuButton(int x, char* name, int color, int type, struct Frame* mainFrame){
  80060c:	dfc00515 	stw	ra,20(sp)
  800610:	dd800415 	stw	r22,16(sp)
  800614:	dc800215 	stw	r18,8(sp)
  800618:	282d883a 	mov	r22,r5
  80061c:	dc400115 	stw	r17,4(sp)
  800620:	dc000015 	stw	r16,0(sp)
  800624:	3821883a 	mov	r16,r7
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800628:	080bb6c0 	call	80bb6c <malloc>
  80062c:	1023883a 	mov	r17,r2
	return b;
}

struct Button* initMenuButton(int x, char* name, int color, int type, struct Frame* mainFrame){
	struct Button* b = initButton();
	b->range = initRange(x, 1, 5, 10);
  800630:	04800044 	movi	r18,1
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800634:	008000c4 	movi	r2,3
  800638:	88800015 	stw	r2,0(r17)
	b->collide = dummyCollide;
  80063c:	00c02034 	movhi	r3,128
  800640:	18c0a004 	addi	r3,r3,640
	return b;
}

struct Button* initMenuButton(int x, char* name, int color, int type, struct Frame* mainFrame){
	struct Button* b = initButton();
	b->range = initRange(x, 1, 5, 10);
  800644:	a009883a 	mov	r4,r20
  800648:	900b883a 	mov	r5,r18
  80064c:	01800144 	movi	r6,5
  800650:	01c00284 	movi	r7,10
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
  800654:	00802034 	movhi	r2,128
  800658:	10808104 	addi	r2,r2,516
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  80065c:	88c00b15 	stw	r3,44(r17)
	b->draw = dummyDraw;
  800660:	88800a15 	stw	r2,40(r17)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
  800664:	88000715 	stw	zero,28(r17)
	b->range = NULL;
  800668:	88000215 	stw	zero,8(r17)
	b->x_pos = 0;
  80066c:	88000515 	stw	zero,20(r17)
	b->y_pos = 0;
  800670:	88000615 	stw	zero,24(r17)
	return b;
}

struct Button* initMenuButton(int x, char* name, int color, int type, struct Frame* mainFrame){
	struct Button* b = initButton();
	b->range = initRange(x, 1, 5, 10);
  800674:	0807c5c0 	call	807c5c <initRange>
  800678:	88800215 	stw	r2,8(r17)
	b->x_pos = x;
	b->y_pos = 1; // all menu buttons have to be drawn at y = 1
	b->draw = drawMenuButton;
	b->type = type;
	b->collide = menuButtonCollide;
	b->mainPanel = mainFrame;
  80067c:	d8c00617 	ldw	r3,24(sp)
	struct Button* b = initButton();
	b->range = initRange(x, 1, 5, 10);
	b->name = name;
	b->x_pos = x;
	b->y_pos = 1; // all menu buttons have to be drawn at y = 1
	b->draw = drawMenuButton;
  800680:	00802034 	movhi	r2,128
  800684:	1080dd04 	addi	r2,r2,884
  800688:	88800a15 	stw	r2,40(r17)
	b->type = type;
	b->collide = menuButtonCollide;
  80068c:	00802034 	movhi	r2,128
  800690:	1081b404 	addi	r2,r2,1744
  800694:	88800b15 	stw	r2,44(r17)
	b->mainPanel = mainFrame;
	return b;
}
  800698:	8805883a 	mov	r2,r17
}

struct Button* initMenuButton(int x, char* name, int color, int type, struct Frame* mainFrame){
	struct Button* b = initButton();
	b->range = initRange(x, 1, 5, 10);
	b->name = name;
  80069c:	8d800715 	stw	r22,28(r17)
	b->x_pos = x;
  8006a0:	8d000515 	stw	r20,20(r17)
	b->y_pos = 1; // all menu buttons have to be drawn at y = 1
  8006a4:	8c800615 	stw	r18,24(r17)
	b->draw = drawMenuButton;
	b->type = type;
  8006a8:	8c000315 	stw	r16,12(r17)
	b->collide = menuButtonCollide;
	b->mainPanel = mainFrame;
  8006ac:	88c00115 	stw	r3,4(r17)
	return b;
}
  8006b0:	dfc00517 	ldw	ra,20(sp)
  8006b4:	dd800417 	ldw	r22,16(sp)
  8006b8:	dd000317 	ldw	r20,12(sp)
  8006bc:	dc800217 	ldw	r18,8(sp)
  8006c0:	dc400117 	ldw	r17,4(sp)
  8006c4:	dc000017 	ldw	r16,0(sp)
  8006c8:	dec00604 	addi	sp,sp,24
  8006cc:	f800283a 	ret

008006d0 <menuButtonCollide>:

}

void menuButtonCollide(struct Button* this){
	// 0:ALLSONGS, 1:PLAYLISTS
	switch(this->type){
  8006d0:	20c00317 	ldw	r3,12(r4)

void dummyDraw(struct Button* this){

}

void menuButtonCollide(struct Button* this){
  8006d4:	defffe04 	addi	sp,sp,-8
  8006d8:	dc000015 	stw	r16,0(sp)
  8006dc:	dfc00115 	stw	ra,4(sp)
  8006e0:	2021883a 	mov	r16,r4
	// 0:ALLSONGS, 1:PLAYLISTS
	switch(this->type){
  8006e4:	18000626 	beq	r3,zero,800700 <menuButtonCollide+0x30>
  8006e8:	00800044 	movi	r2,1
  8006ec:	18801126 	beq	r3,r2,800734 <menuButtonCollide+0x64>
		playlistMenuButtonCollide(this);
		break;
	default:
		break;
	}
}
  8006f0:	dfc00117 	ldw	ra,4(sp)
  8006f4:	dc000017 	ldw	r16,0(sp)
  8006f8:	dec00204 	addi	sp,sp,8
  8006fc:	f800283a 	ret
		return;
	}
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
	clearSongPanel();
  800700:	08047d00 	call	8047d0 <clearSongPanel>
	if (this->mainPanel->elements[2] == NULL){
  800704:	80c00117 	ldw	r3,4(r16)
		printf("All Songs frame is NULL\n");
  800708:	010020b4 	movhi	r4,130
  80070c:	213ea404 	addi	r4,r4,-1392
	}
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->mainPanel->elements[2] == NULL){
  800710:	18800017 	ldw	r2,0(r3)
  800714:	10c00217 	ldw	r3,8(r2)
  800718:	18000d26 	beq	r3,zero,800750 <menuButtonCollide+0x80>
	clearSongPanel();
	if (this->mainPanel->elements[3] == NULL){
		printf("Playlist frame is NULL\n");
		return;
	}
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
  80071c:	18800717 	ldw	r2,28(r3)
  800720:	1809883a 	mov	r4,r3
		playlistMenuButtonCollide(this);
		break;
	default:
		break;
	}
}
  800724:	dfc00117 	ldw	ra,4(sp)
  800728:	dc000017 	ldw	r16,0(sp)
  80072c:	dec00204 	addi	sp,sp,8
	clearSongPanel();
	if (this->mainPanel->elements[3] == NULL){
		printf("Playlist frame is NULL\n");
		return;
	}
	this->mainPanel->elements[3]->drawFrame(this->mainPanel->elements[3]);
  800730:	1000683a 	jmp	r2
	default:
		break;
	}
}
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
  800734:	08047d00 	call	8047d0 <clearSongPanel>
	if (this->mainPanel->elements[3] == NULL){
  800738:	80800117 	ldw	r2,4(r16)
		printf("Playlist frame is NULL\n");
  80073c:	010020b4 	movhi	r4,130
  800740:	213eaa04 	addi	r4,r4,-1368
		break;
	}
}
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->mainPanel->elements[3] == NULL){
  800744:	10c00017 	ldw	r3,0(r2)
  800748:	18c00317 	ldw	r3,12(r3)
  80074c:	183ff31e 	bne	r3,zero,80071c <menuButtonCollide+0x4c>
		playlistMenuButtonCollide(this);
		break;
	default:
		break;
	}
}
  800750:	dfc00117 	ldw	ra,4(sp)
  800754:	dc000017 	ldw	r16,0(sp)
  800758:	dec00204 	addi	sp,sp,8
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->mainPanel->elements[3] == NULL){
		printf("Playlist frame is NULL\n");
  80075c:	080c5101 	jmpi	80c510 <puts>

00800760 <decodePlaylist>:
	return result;
}
void* decodePlaylist(struct Packet** p, int size) {

	return NULL;
}
  800760:	0005883a 	mov	r2,zero
  800764:	f800283a 	ret

00800768 <decodeString>:
}

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  800768:	2945883a 	add	r2,r5,r5
  80076c:	1085883a 	add	r2,r2,r2
  800770:	1105883a 	add	r2,r2,r4
  800774:	10ffff17 	ldw	r3,-4(r2)
	}
	free(packets);
	packets = NULL;
}

void* decodeString(struct Packet** p, int size) {
  800778:	defffd04 	addi	sp,sp,-12
  80077c:	dc400115 	stw	r17,4(sp)
  800780:	2023883a 	mov	r17,r4
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  800784:	19000117 	ldw	r4,4(r3)
	}
	free(packets);
	packets = NULL;
}

void* decodeString(struct Packet** p, int size) {
  800788:	dc000015 	stw	r16,0(sp)
  80078c:	2821883a 	mov	r16,r5
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  800790:	29401924 	muli	r5,r5,100
  800794:	213fe704 	addi	r4,r4,-100
	}
	free(packets);
	packets = NULL;
}

void* decodeString(struct Packet** p, int size) {
  800798:	dfc00215 	stw	ra,8(sp)
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  80079c:	2909883a 	add	r4,r5,r4
  8007a0:	080bb6c0 	call	80bb6c <malloc>
  8007a4:	1013883a 	mov	r9,r2
	for(i = 0; i < size; i++) {
  8007a8:	04001e0e 	bge	zero,r16,800824 <decodeString+0xbc>
  8007ac:	8809883a 	mov	r4,r17
  8007b0:	000f883a 	mov	r7,zero
  8007b4:	0011883a 	mov	r8,zero
		for(j = 0; j < p[i]->data_size; j++) {
  8007b8:	20c00017 	ldw	r3,0(r4)
  8007bc:	18800117 	ldw	r2,4(r3)
  8007c0:	00800c0e 	bge	zero,r2,8007f4 <decodeString+0x8c>
  8007c4:	3a4d883a 	add	r6,r7,r9
  8007c8:	000b883a 	mov	r5,zero
			result[k] = p[i]->data[j+HEADERSIZE];
  8007cc:	18800017 	ldw	r2,0(r3)
			k++;
  8007d0:	39c00044 	addi	r7,r7,1
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
			result[k] = p[i]->data[j+HEADERSIZE];
  8007d4:	1145883a 	add	r2,r2,r5
  8007d8:	10c00083 	ldbu	r3,2(r2)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  8007dc:	29400044 	addi	r5,r5,1
			result[k] = p[i]->data[j+HEADERSIZE];
  8007e0:	30c00005 	stb	r3,0(r6)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  8007e4:	20c00017 	ldw	r3,0(r4)
  8007e8:	31800044 	addi	r6,r6,1
  8007ec:	18800117 	ldw	r2,4(r3)
  8007f0:	28bff616 	blt	r5,r2,8007cc <decodeString+0x64>

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
  8007f4:	42000044 	addi	r8,r8,1
  8007f8:	21000104 	addi	r4,r4,4
  8007fc:	823fee1e 	bne	r16,r8,8007b8 <decodeString+0x50>
  800800:	3805883a 	mov	r2,r7
		for(j = 0; j < p[i]->data_size; j++) {
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  800804:	1245883a 	add	r2,r2,r9
  800808:	10000005 	stb	zero,0(r2)
	return (void*)result;
}
  80080c:	4805883a 	mov	r2,r9
  800810:	dfc00217 	ldw	ra,8(sp)
  800814:	dc400117 	ldw	r17,4(sp)
  800818:	dc000017 	ldw	r16,0(sp)
  80081c:	dec00304 	addi	sp,sp,12
  800820:	f800283a 	ret
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  800824:	0005883a 	mov	r2,zero
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  800828:	1245883a 	add	r2,r2,r9
  80082c:	10000005 	stb	zero,0(r2)
	return (void*)result;
}
  800830:	4805883a 	mov	r2,r9
  800834:	dfc00217 	ldw	ra,8(sp)
  800838:	dc400117 	ldw	r17,4(sp)
  80083c:	dc000017 	ldw	r16,0(sp)
  800840:	dec00304 	addi	sp,sp,12
  800844:	f800283a 	ret

00800848 <decodeCmd>:
void* decodeCmd(struct Packet** p, int size) {
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
  800848:	20c00017 	ldw	r3,0(r4)
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  80084c:	defff404 	addi	sp,sp,-48
  800850:	dd000615 	stw	r20,24(sp)
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
  800854:	18800017 	ldw	r2,0(r3)
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  800858:	dc400315 	stw	r17,12(sp)
  80085c:	dc000215 	stw	r16,8(sp)
  800860:	dfc00b15 	stw	ra,44(sp)
  800864:	df000a15 	stw	fp,40(sp)
  800868:	ddc00915 	stw	r23,36(sp)
  80086c:	dd800815 	stw	r22,32(sp)
  800870:	dd400715 	stw	r21,28(sp)
  800874:	dcc00515 	stw	r19,20(sp)
  800878:	dc800415 	stw	r18,16(sp)
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
	int num_parameters = (int)p[0]->data[3];;
  80087c:	15c000c3 	ldbu	r23,3(r2)
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
  800880:	10800083 	ldbu	r2,2(r2)
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  800884:	2023883a 	mov	r17,r4
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
	int num_parameters = (int)p[0]->data[3];;
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
  800888:	bdc9883a 	add	r4,r23,r23
  80088c:	2109883a 	add	r4,r4,r4
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  800890:	2821883a 	mov	r16,r5
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
  800894:	d8800115 	stw	r2,4(sp)
	int num_parameters = (int)p[0]->data[3];;
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
  800898:	080bb6c0 	call	80bb6c <malloc>
  80089c:	1029883a 	mov	r20,r2
  8008a0:	d8800015 	stw	r2,0(sp)
	int i, j, k;
	for(i = 0; i < size; i++) {
  8008a4:	0400650e 	bge	zero,r16,800a3c <decodeCmd+0x1f4>
  8008a8:	880b883a 	mov	r5,r17
  8008ac:	0009883a 	mov	r4,zero
  8008b0:	000d883a 	mov	r6,zero
		length += p[i]->data_size;
  8008b4:	28c00017 	ldw	r3,0(r5)
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
	int num_parameters = (int)p[0]->data[3];;
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
	int i, j, k;
	for(i = 0; i < size; i++) {
  8008b8:	31800044 	addi	r6,r6,1
  8008bc:	29400104 	addi	r5,r5,4
		length += p[i]->data_size;
  8008c0:	18800117 	ldw	r2,4(r3)
  8008c4:	2089883a 	add	r4,r4,r2
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
	int num_parameters = (int)p[0]->data[3];;
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
	int i, j, k;
	for(i = 0; i < size; i++) {
  8008c8:	81bffa1e 	bne	r16,r6,8008b4 <decodeCmd+0x6c>
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
  8008cc:	080bb6c0 	call	80bb6c <malloc>
  8008d0:	1039883a 	mov	fp,r2
  8008d4:	8809883a 	mov	r4,r17
  8008d8:	000f883a 	mov	r7,zero
  8008dc:	0011883a 	mov	r8,zero
	i = 0;
	for(j = 0; j < size; j++) {
		for(k = 0; k < p[j]->data_size; k++) {
  8008e0:	20c00017 	ldw	r3,0(r4)
  8008e4:	18800117 	ldw	r2,4(r3)
  8008e8:	00800c0e 	bge	zero,r2,80091c <decodeCmd+0xd4>
  8008ec:	e1cd883a 	add	r6,fp,r7
  8008f0:	000b883a 	mov	r5,zero
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
  8008f4:	18800017 	ldw	r2,0(r3)
  8008f8:	39c00044 	addi	r7,r7,1
  8008fc:	1145883a 	add	r2,r2,r5
  800900:	10c00083 	ldbu	r3,2(r2)
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
	i = 0;
	for(j = 0; j < size; j++) {
		for(k = 0; k < p[j]->data_size; k++) {
  800904:	29400044 	addi	r5,r5,1
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
  800908:	30c00005 	stb	r3,0(r6)
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
	i = 0;
	for(j = 0; j < size; j++) {
		for(k = 0; k < p[j]->data_size; k++) {
  80090c:	20c00017 	ldw	r3,0(r4)
  800910:	31800044 	addi	r6,r6,1
  800914:	18800117 	ldw	r2,4(r3)
  800918:	28bff616 	blt	r5,r2,8008f4 <decodeCmd+0xac>
	for(i = 0; i < size; i++) {
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
	i = 0;
	for(j = 0; j < size; j++) {
  80091c:	42000044 	addi	r8,r8,1
  800920:	21000104 	addi	r4,r4,4
  800924:	823fee1e 	bne	r16,r8,8008e0 <decodeCmd+0x98>
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
		}
	}
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
  800928:	b8003e26 	beq	r23,zero,800a24 <decodeCmd+0x1dc>
  80092c:	a023883a 	mov	r17,r20
  800930:	002d883a 	mov	r22,zero
  800934:	05400084 	movi	r21,2
		len = (int)dataBuf[j++];
  800938:	af25883a 	add	r18,r21,fp
  80093c:	94000007 	ldb	r16,0(r18)
  800940:	acc00044 	addi	r19,r21,1
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
  800944:	81000044 	addi	r4,r16,1
  800948:	080bb6c0 	call	80bb6c <malloc>
  80094c:	88800015 	stw	r2,0(r17)
		for(k = 0; k < len; k++) {
  800950:	0400310e 	bge	zero,r16,800a18 <decodeCmd+0x1d0>
  800954:	9009883a 	mov	r4,r18
  800958:	000b883a 	mov	r5,zero
			paras[i][k] = dataBuf[j++];
  80095c:	88800017 	ldw	r2,0(r17)
  800960:	20c00043 	ldbu	r3,1(r4)
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
  800964:	21000044 	addi	r4,r4,1
			paras[i][k] = dataBuf[j++];
  800968:	1145883a 	add	r2,r2,r5
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
  80096c:	29400044 	addi	r5,r5,1
			paras[i][k] = dataBuf[j++];
  800970:	10c00005 	stb	r3,0(r2)
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
  800974:	2c3ff91e 	bne	r5,r16,80095c <decodeCmd+0x114>
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  800978:	a945883a 	add	r2,r21,r5
  80097c:	15400044 	addi	r21,r2,1
  800980:	2807883a 	mov	r3,r5
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
  800984:	88800017 	ldw	r2,0(r17)
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
		}
	}
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
  800988:	b5800044 	addi	r22,r22,1
  80098c:	8c400104 	addi	r17,r17,4
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
  800990:	1885883a 	add	r2,r3,r2
  800994:	10000005 	stb	zero,0(r2)
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
		}
	}
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
  800998:	bdbfe71e 	bne	r23,r22,800938 <decodeCmd+0xf0>
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
  80099c:	d9000117 	ldw	r4,4(sp)
  8009a0:	b80b883a 	mov	r5,r23
  8009a4:	a00d883a 	mov	r6,r20
  8009a8:	080141c0 	call	80141c <initCmd>
  8009ac:	1023883a 	mov	r17,r2
  8009b0:	0021883a 	mov	r16,zero
	for(i = 0; i < num_parameters; i++) {
		free(paras[i]);
  8009b4:	a1000017 	ldw	r4,0(r20)
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
	for(i = 0; i < num_parameters; i++) {
  8009b8:	84000044 	addi	r16,r16,1
		free(paras[i]);
  8009bc:	080bb580 	call	80bb58 <free>
		paras[i] = NULL;
  8009c0:	a0000015 	stw	zero,0(r20)
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
	for(i = 0; i < num_parameters; i++) {
  8009c4:	a5000104 	addi	r20,r20,4
  8009c8:	bc3ffa1e 	bne	r23,r16,8009b4 <decodeCmd+0x16c>
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
  8009cc:	8821883a 	mov	r16,r17
	for(i = 0; i < num_parameters; i++) {
		free(paras[i]);
		paras[i] = NULL;
	}
	if(num_parameters != 0) {
  8009d0:	b8000226 	beq	r23,zero,8009dc <decodeCmd+0x194>
		free(paras);
  8009d4:	d9000017 	ldw	r4,0(sp)
  8009d8:	080bb580 	call	80bb58 <free>
		paras = NULL;
	}
	free(dataBuf);
  8009dc:	e009883a 	mov	r4,fp
  8009e0:	080bb580 	call	80bb58 <free>
	dataBuf = NULL;
	return result;
}
  8009e4:	8005883a 	mov	r2,r16
  8009e8:	dfc00b17 	ldw	ra,44(sp)
  8009ec:	df000a17 	ldw	fp,40(sp)
  8009f0:	ddc00917 	ldw	r23,36(sp)
  8009f4:	dd800817 	ldw	r22,32(sp)
  8009f8:	dd400717 	ldw	r21,28(sp)
  8009fc:	dd000617 	ldw	r20,24(sp)
  800a00:	dcc00517 	ldw	r19,20(sp)
  800a04:	dc800417 	ldw	r18,16(sp)
  800a08:	dc400317 	ldw	r17,12(sp)
  800a0c:	dc000217 	ldw	r16,8(sp)
  800a10:	dec00c04 	addi	sp,sp,48
  800a14:	f800283a 	ret
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
  800a18:	982b883a 	mov	r21,r19
  800a1c:	0007883a 	mov	r3,zero
  800a20:	003fd806 	br	800984 <decodeCmd+0x13c>
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
  800a24:	d9000117 	ldw	r4,4(sp)
  800a28:	a00d883a 	mov	r6,r20
  800a2c:	b80b883a 	mov	r5,r23
  800a30:	080141c0 	call	80141c <initCmd>
  800a34:	1021883a 	mov	r16,r2
  800a38:	003fe506 	br	8009d0 <decodeCmd+0x188>
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
	int i, j, k;
	for(i = 0; i < size; i++) {
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
  800a3c:	0009883a 	mov	r4,zero
  800a40:	080bb6c0 	call	80bb6c <malloc>
  800a44:	1039883a 	mov	fp,r2
  800a48:	003fb706 	br	800928 <decodeCmd+0xe0>

00800a4c <encodeCmd>:
}

/*
 * encode a command to packets and push to the queue
 */
void encodeCmd(struct Command* cmd, struct Queue* q) {
  800a4c:	defff704 	addi	sp,sp,-36
  800a50:	dd800715 	stw	r22,28(sp)
  800a54:	dc400215 	stw	r17,8(sp)
  800a58:	dfc00815 	stw	ra,32(sp)
  800a5c:	dd400615 	stw	r21,24(sp)
  800a60:	dd000515 	stw	r20,20(sp)
  800a64:	dcc00415 	stw	r19,16(sp)
  800a68:	dc800315 	stw	r18,12(sp)
  800a6c:	dc000115 	stw	r16,4(sp)
  800a70:	2023883a 	mov	r17,r4
  800a74:	282d883a 	mov	r22,r5
	if(cmd == NULL || q == NULL) return;
  800a78:	20007026 	beq	r4,zero,800c3c <encodeCmd+0x1f0>
  800a7c:	28006f26 	beq	r5,zero,800c3c <encodeCmd+0x1f0>
	int data_size = 2; //1 byte for cmd index and the other for number of parameters
	data_size += cmd->num_of_parameters; //each parameter need a byte for its length
  800a80:	21400117 	ldw	r5,4(r4)
  800a84:	2cc00084 	addi	r19,r5,2
	int i, j, k;
	for(i = 0; i < cmd->num_of_parameters; i++) {
  800a88:	0140070e 	bge	zero,r5,800aa8 <encodeCmd+0x5c>
  800a8c:	20c00217 	ldw	r3,8(r4)
  800a90:	0009883a 	mov	r4,zero
		data_size += cmd->parameters_size[i];
  800a94:	18800017 	ldw	r2,0(r3)
void encodeCmd(struct Command* cmd, struct Queue* q) {
	if(cmd == NULL || q == NULL) return;
	int data_size = 2; //1 byte for cmd index and the other for number of parameters
	data_size += cmd->num_of_parameters; //each parameter need a byte for its length
	int i, j, k;
	for(i = 0; i < cmd->num_of_parameters; i++) {
  800a98:	21000044 	addi	r4,r4,1
  800a9c:	18c00104 	addi	r3,r3,4
		data_size += cmd->parameters_size[i];
  800aa0:	98a7883a 	add	r19,r19,r2
void encodeCmd(struct Command* cmd, struct Queue* q) {
	if(cmd == NULL || q == NULL) return;
	int data_size = 2; //1 byte for cmd index and the other for number of parameters
	data_size += cmd->num_of_parameters; //each parameter need a byte for its length
	int i, j, k;
	for(i = 0; i < cmd->num_of_parameters; i++) {
  800aa4:	293ffb1e 	bne	r5,r4,800a94 <encodeCmd+0x48>
		data_size += cmd->parameters_size[i];
	}
	char* dataBuf = (char*)malloc(sizeof(char)*data_size);
  800aa8:	9809883a 	mov	r4,r19
  800aac:	080bb6c0 	call	80bb6c <malloc>
  800ab0:	1025883a 	mov	r18,r2
	struct Packet* result = NULL;
	int packets_size = data_size/100;
  800ab4:	9c001914 	ori	r16,r19,100
  800ab8:	008003c4 	movi	r2,15
  800abc:	14006936 	bltu	r2,r16,800c64 <encodeCmd+0x218>
  800ac0:	9804913a 	slli	r2,r19,4
  800ac4:	00c020b4 	movhi	r3,130
  800ac8:	18c33304 	addi	r3,r3,3276
  800acc:	10801914 	ori	r2,r2,100
  800ad0:	10c5883a 	add	r2,r2,r3
  800ad4:	15000003 	ldbu	r20,0(r2)
	if(data_size %100 > 0)
  800ad8:	008003c4 	movi	r2,15
  800adc:	14006736 	bltu	r2,r16,800c7c <encodeCmd+0x230>
  800ae0:	9804913a 	slli	r2,r19,4
  800ae4:	00c020b4 	movhi	r3,130
  800ae8:	18c33304 	addi	r3,r3,3276
  800aec:	10801914 	ori	r2,r2,100
  800af0:	10c5883a 	add	r2,r2,r3
  800af4:	10800003 	ldbu	r2,0(r2)
  800af8:	10801924 	muli	r2,r2,100
  800afc:	9885c83a 	sub	r2,r19,r2
  800b00:	0080010e 	bge	zero,r2,800b08 <encodeCmd+0xbc>
		packets_size+=1;
  800b04:	a5000044 	addi	r20,r20,1

	addPacketsLengthToQueue(packets_size);
  800b08:	a009883a 	mov	r4,r20
	data_size += cmd->num_of_parameters; //each parameter need a byte for its length
	int i, j, k;
	for(i = 0; i < cmd->num_of_parameters; i++) {
		data_size += cmd->parameters_size[i];
	}
	char* dataBuf = (char*)malloc(sizeof(char)*data_size);
  800b0c:	dc800015 	stw	r18,0(sp)
	struct Packet* result = NULL;
	int packets_size = data_size/100;
	if(data_size %100 > 0)
		packets_size+=1;

	addPacketsLengthToQueue(packets_size);
  800b10:	0806fa80 	call	806fa8 <addPacketsLengthToQueue>

	dataBuf[0] = (unsigned char)cmd->cmd_index;
  800b14:	88800017 	ldw	r2,0(r17)
  800b18:	d9000017 	ldw	r4,0(sp)
  800b1c:	20800005 	stb	r2,0(r4)
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
  800b20:	88c00117 	ldw	r3,4(r17)
  800b24:	20c00045 	stb	r3,1(r4)
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
  800b28:	88800117 	ldw	r2,4(r17)
  800b2c:	0080210e 	bge	zero,r2,800bb4 <encodeCmd+0x168>
  800b30:	89000217 	ldw	r4,8(r17)
  800b34:	0011883a 	mov	r8,zero
  800b38:	01800084 	movi	r6,2
  800b3c:	000f883a 	mov	r7,zero
		dataBuf[j++] = (char)cmd->parameters_size[i];
  800b40:	21c7883a 	add	r3,r4,r7
  800b44:	d8800017 	ldw	r2,0(sp)
  800b48:	19000017 	ldw	r4,0(r3)
  800b4c:	3085883a 	add	r2,r6,r2
  800b50:	11000005 	stb	r4,0(r2)
		for(k = 0; k < cmd->parameters_size[i]; k++) {
  800b54:	89000217 	ldw	r4,8(r17)

	dataBuf[0] = (unsigned char)cmd->cmd_index;
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
		dataBuf[j++] = (char)cmd->parameters_size[i];
  800b58:	31800044 	addi	r6,r6,1
		for(k = 0; k < cmd->parameters_size[i]; k++) {
  800b5c:	3905883a 	add	r2,r7,r4
  800b60:	10c00017 	ldw	r3,0(r2)
  800b64:	00c00f0e 	bge	zero,r3,800ba4 <encodeCmd+0x158>
  800b68:	000b883a 	mov	r5,zero
			dataBuf[j++] = (char)cmd->parameters[i][k];
  800b6c:	88800317 	ldw	r2,12(r17)
  800b70:	d9000017 	ldw	r4,0(sp)
  800b74:	11c5883a 	add	r2,r2,r7
  800b78:	10c00017 	ldw	r3,0(r2)
  800b7c:	2189883a 	add	r4,r4,r6
  800b80:	31800044 	addi	r6,r6,1
  800b84:	28c7883a 	add	r3,r5,r3
  800b88:	18800003 	ldbu	r2,0(r3)
	dataBuf[0] = (unsigned char)cmd->cmd_index;
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
  800b8c:	29400044 	addi	r5,r5,1
			dataBuf[j++] = (char)cmd->parameters[i][k];
  800b90:	20800005 	stb	r2,0(r4)
	dataBuf[0] = (unsigned char)cmd->cmd_index;
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
  800b94:	89000217 	ldw	r4,8(r17)
  800b98:	21c5883a 	add	r2,r4,r7
  800b9c:	10c00017 	ldw	r3,0(r2)
  800ba0:	28fff216 	blt	r5,r3,800b6c <encodeCmd+0x120>
	addPacketsLengthToQueue(packets_size);

	dataBuf[0] = (unsigned char)cmd->cmd_index;
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
  800ba4:	88800117 	ldw	r2,4(r17)
  800ba8:	42000044 	addi	r8,r8,1
  800bac:	39c00104 	addi	r7,r7,4
  800bb0:	40bfe316 	blt	r8,r2,800b40 <encodeCmd+0xf4>
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
  800bb4:	05001f0e 	bge	zero,r20,800c34 <encodeCmd+0x1e8>
  800bb8:	a57fffc4 	addi	r21,r20,-1
  800bbc:	0025883a 	mov	r18,zero
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
  800bc0:	9809883a 	mov	r4,r19
			setHeader(result, 0, 1, CMD); //last packet
		} else {
			char* temp = strnsep_(&dataBuf, 100);
  800bc4:	01401904 	movi	r5,100
		for(k = 0; k < cmd->parameters_size[i]; k++) {
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
		if(i == packets_size-1) {
  800bc8:	95403026 	beq	r18,r21,800c8c <encodeCmd+0x240>
			result = initPacket(data_size, (unsigned char*)dataBuf);
			setHeader(result, 0, 1, CMD); //last packet
		} else {
			char* temp = strnsep_(&dataBuf, 100);
  800bcc:	d809883a 	mov	r4,sp
  800bd0:	08065c80 	call	8065c8 <strnsep_>
			result = initPacket(100, (unsigned char*)dataBuf);
  800bd4:	d9400017 	ldw	r5,0(sp)
	for(i = 0; i < packets_size; i++) {
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
			setHeader(result, 0, 1, CMD); //last packet
		} else {
			char* temp = strnsep_(&dataBuf, 100);
  800bd8:	1023883a 	mov	r17,r2
			result = initPacket(100, (unsigned char*)dataBuf);
  800bdc:	01001904 	movi	r4,100
  800be0:	08065300 	call	806530 <initPacket>
			free(temp);
  800be4:	8809883a 	mov	r4,r17
			temp = NULL;
			data_size -= 100;
  800be8:	9cffe704 	addi	r19,r19,-100
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
			setHeader(result, 0, 1, CMD); //last packet
		} else {
			char* temp = strnsep_(&dataBuf, 100);
			result = initPacket(100, (unsigned char*)dataBuf);
  800bec:	1021883a 	mov	r16,r2
			free(temp);
  800bf0:	080bb580 	call	80bb58 <free>
			temp = NULL;
			data_size -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, CMD); //first packet
  800bf4:	01400044 	movi	r5,1
  800bf8:	8009883a 	mov	r4,r16
  800bfc:	000d883a 	mov	r6,zero
  800c00:	280f883a 	mov	r7,r5
			result = initPacket(100, (unsigned char*)dataBuf);
			free(temp);
			temp = NULL;
			data_size -= 100;
		}
		if(i == 0)
  800c04:	90000526 	beq	r18,zero,800c1c <encodeCmd+0x1d0>
			setHeader(result, 1, 0, CMD); //first packet
		else if(i != packets_size - 1)
			setHeader(result, 0, 0, CMD);
  800c08:	8009883a 	mov	r4,r16
  800c0c:	000b883a 	mov	r5,zero
  800c10:	000d883a 	mov	r6,zero
  800c14:	01c00044 	movi	r7,1
			temp = NULL;
			data_size -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, CMD); //first packet
		else if(i != packets_size - 1)
  800c18:	95400126 	beq	r18,r21,800c20 <encodeCmd+0x1d4>
			setHeader(result, 0, 0, CMD);
  800c1c:	08068840 	call	806884 <setHeader>
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
  800c20:	94800044 	addi	r18,r18,1
		}
		if(i == 0)
			setHeader(result, 1, 0, CMD); //first packet
		else if(i != packets_size - 1)
			setHeader(result, 0, 0, CMD);
		enqueue(q, (void*)result);
  800c24:	800b883a 	mov	r5,r16
  800c28:	b009883a 	mov	r4,r22
  800c2c:	0806cc40 	call	806cc4 <enqueue>
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
  800c30:	a4bfe31e 	bne	r20,r18,800bc0 <encodeCmd+0x174>
		else if(i != packets_size - 1)
			setHeader(result, 0, 0, CMD);
		enqueue(q, (void*)result);
	}
	result = NULL;
	free(dataBuf);
  800c34:	d9000017 	ldw	r4,0(sp)
  800c38:	080bb580 	call	80bb58 <free>
	dataBuf = NULL;
}
  800c3c:	dfc00817 	ldw	ra,32(sp)
  800c40:	dd800717 	ldw	r22,28(sp)
  800c44:	dd400617 	ldw	r21,24(sp)
  800c48:	dd000517 	ldw	r20,20(sp)
  800c4c:	dcc00417 	ldw	r19,16(sp)
  800c50:	dc800317 	ldw	r18,12(sp)
  800c54:	dc400217 	ldw	r17,8(sp)
  800c58:	dc000117 	ldw	r16,4(sp)
  800c5c:	dec00904 	addi	sp,sp,36
  800c60:	f800283a 	ret
	for(i = 0; i < cmd->num_of_parameters; i++) {
		data_size += cmd->parameters_size[i];
	}
	char* dataBuf = (char*)malloc(sizeof(char)*data_size);
	struct Packet* result = NULL;
	int packets_size = data_size/100;
  800c64:	9809883a 	mov	r4,r19
  800c68:	01401904 	movi	r5,100
  800c6c:	080b2100 	call	80b210 <__divsi3>
  800c70:	1029883a 	mov	r20,r2
	if(data_size %100 > 0)
  800c74:	008003c4 	movi	r2,15
  800c78:	143f992e 	bgeu	r2,r16,800ae0 <encodeCmd+0x94>
  800c7c:	9809883a 	mov	r4,r19
  800c80:	01401904 	movi	r5,100
  800c84:	080b2100 	call	80b210 <__divsi3>
  800c88:	003f9b06 	br	800af8 <encodeCmd+0xac>
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
  800c8c:	d9400017 	ldw	r5,0(sp)
  800c90:	08065300 	call	806530 <initPacket>
			setHeader(result, 0, 1, CMD); //last packet
  800c94:	01800044 	movi	r6,1
  800c98:	1009883a 	mov	r4,r2
  800c9c:	000b883a 	mov	r5,zero
  800ca0:	300f883a 	mov	r7,r6
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
  800ca4:	1021883a 	mov	r16,r2
			setHeader(result, 0, 1, CMD); //last packet
  800ca8:	08068840 	call	806884 <setHeader>
  800cac:	003fd106 	br	800bf4 <encodeCmd+0x1a8>

00800cb0 <encodeString>:

/*
 * encode the string into multiply packets and put into queue
 *
 */
void encodeString(char* str, struct Queue* q) {
  800cb0:	defff704 	addi	sp,sp,-36
  800cb4:	dd800715 	stw	r22,28(sp)
  800cb8:	dc000115 	stw	r16,4(sp)
  800cbc:	dfc00815 	stw	ra,32(sp)
  800cc0:	dd400615 	stw	r21,24(sp)
  800cc4:	dd000515 	stw	r20,20(sp)
  800cc8:	dcc00415 	stw	r19,16(sp)
  800ccc:	dc800315 	stw	r18,12(sp)
  800cd0:	dc400215 	stw	r17,8(sp)
  800cd4:	2021883a 	mov	r16,r4
  800cd8:	282d883a 	mov	r22,r5
	if(str == NULL || q == NULL) return;
  800cdc:	20004326 	beq	r4,zero,800dec <encodeString+0x13c>
  800ce0:	28004226 	beq	r5,zero,800dec <encodeString+0x13c>
	int i;
	int length = strlen(str);
  800ce4:	080ce500 	call	80ce50 <strlen>
	char* strBuf = (char*)malloc(sizeof(char)*length);
  800ce8:	1009883a 	mov	r4,r2
 *
 */
void encodeString(char* str, struct Queue* q) {
	if(str == NULL || q == NULL) return;
	int i;
	int length = strlen(str);
  800cec:	1027883a 	mov	r19,r2
	char* strBuf = (char*)malloc(sizeof(char)*length);
  800cf0:	080bb6c0 	call	80bb6c <malloc>
	strncpy(strBuf, str, length);
  800cf4:	800b883a 	mov	r5,r16
  800cf8:	1009883a 	mov	r4,r2
  800cfc:	980d883a 	mov	r6,r19
 */
void encodeString(char* str, struct Queue* q) {
	if(str == NULL || q == NULL) return;
	int i;
	int length = strlen(str);
	char* strBuf = (char*)malloc(sizeof(char)*length);
  800d00:	d8800015 	stw	r2,0(sp)
	strncpy(strBuf, str, length);
  800d04:	080cf740 	call	80cf74 <strncpy>
	int packet_size = length / 100;
  800d08:	9c001914 	ori	r16,r19,100
  800d0c:	008003c4 	movi	r2,15
  800d10:	14004036 	bltu	r2,r16,800e14 <encodeString+0x164>
  800d14:	9804913a 	slli	r2,r19,4
  800d18:	00c020b4 	movhi	r3,130
  800d1c:	18c33304 	addi	r3,r3,3276
  800d20:	10801914 	ori	r2,r2,100
  800d24:	10c5883a 	add	r2,r2,r3
  800d28:	15000003 	ldbu	r20,0(r2)
	if(length % 100 >0) {
  800d2c:	008003c4 	movi	r2,15
  800d30:	14003e36 	bltu	r2,r16,800e2c <encodeString+0x17c>
  800d34:	9804913a 	slli	r2,r19,4
  800d38:	00c020b4 	movhi	r3,130
  800d3c:	18c33304 	addi	r3,r3,3276
  800d40:	10801914 	ori	r2,r2,100
  800d44:	10c5883a 	add	r2,r2,r3
  800d48:	10800003 	ldbu	r2,0(r2)
  800d4c:	10801924 	muli	r2,r2,100
  800d50:	9885c83a 	sub	r2,r19,r2
  800d54:	0080010e 	bge	zero,r2,800d5c <encodeString+0xac>
		packet_size+=1;
  800d58:	a5000044 	addi	r20,r20,1
	}

	addPacketsLengthToQueue(packet_size);
  800d5c:	a009883a 	mov	r4,r20
  800d60:	0806fa80 	call	806fa8 <addPacketsLengthToQueue>

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
  800d64:	05001f0e 	bge	zero,r20,800de4 <encodeString+0x134>
  800d68:	a57fffc4 	addi	r21,r20,-1
  800d6c:	0025883a 	mov	r18,zero
		if(i == packet_size - 1) {
			result = initPacket(length, (unsigned char*)strBuf);
  800d70:	9809883a 	mov	r4,r19
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
  800d74:	01401904 	movi	r5,100

	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
		if(i == packet_size - 1) {
  800d78:	ac803026 	beq	r21,r18,800e3c <encodeString+0x18c>
			result = initPacket(length, (unsigned char*)strBuf);
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
  800d7c:	d809883a 	mov	r4,sp
  800d80:	08065c80 	call	8065c8 <strnsep_>
  800d84:	1023883a 	mov	r17,r2
			result = initPacket(100, (unsigned char*)temp);
  800d88:	100b883a 	mov	r5,r2
  800d8c:	01001904 	movi	r4,100
  800d90:	08065300 	call	806530 <initPacket>
			free(temp);
  800d94:	8809883a 	mov	r4,r17
			result = initPacket(length, (unsigned char*)strBuf);
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
			result = initPacket(100, (unsigned char*)temp);
  800d98:	1021883a 	mov	r16,r2
			free(temp);
			temp = NULL;
			length -= 100;
  800d9c:	9cffe704 	addi	r19,r19,-100
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
			result = initPacket(100, (unsigned char*)temp);
			free(temp);
  800da0:	080bb580 	call	80bb58 <free>
			temp = NULL;
			length -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, STRING); //first packet
  800da4:	8009883a 	mov	r4,r16
  800da8:	01400044 	movi	r5,1
  800dac:	000d883a 	mov	r6,zero
  800db0:	000f883a 	mov	r7,zero
			result = initPacket(100, (unsigned char*)temp);
			free(temp);
			temp = NULL;
			length -= 100;
		}
		if(i == 0)
  800db4:	90000526 	beq	r18,zero,800dcc <encodeString+0x11c>
			setHeader(result, 1, 0, STRING); //first packet
		else if(i != packet_size - 1)
			setHeader(result, 0, 0, STRING);
  800db8:	8009883a 	mov	r4,r16
  800dbc:	000b883a 	mov	r5,zero
  800dc0:	000d883a 	mov	r6,zero
  800dc4:	000f883a 	mov	r7,zero
			temp = NULL;
			length -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, STRING); //first packet
		else if(i != packet_size - 1)
  800dc8:	ac800126 	beq	r21,r18,800dd0 <encodeString+0x120>
			setHeader(result, 0, 0, STRING);
  800dcc:	08068840 	call	806884 <setHeader>
	}

	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
  800dd0:	94800044 	addi	r18,r18,1
		}
		if(i == 0)
			setHeader(result, 1, 0, STRING); //first packet
		else if(i != packet_size - 1)
			setHeader(result, 0, 0, STRING);
		enqueue(q, (void*)result);
  800dd4:	800b883a 	mov	r5,r16
  800dd8:	b009883a 	mov	r4,r22
  800ddc:	0806cc40 	call	806cc4 <enqueue>
	}

	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
  800de0:	a4bfe31e 	bne	r20,r18,800d70 <encodeString+0xc0>
		else if(i != packet_size - 1)
			setHeader(result, 0, 0, STRING);
		enqueue(q, (void*)result);
	}
	result = NULL;
	free(strBuf);
  800de4:	d9000017 	ldw	r4,0(sp)
  800de8:	080bb580 	call	80bb58 <free>
	strBuf = NULL;
}
  800dec:	dfc00817 	ldw	ra,32(sp)
  800df0:	dd800717 	ldw	r22,28(sp)
  800df4:	dd400617 	ldw	r21,24(sp)
  800df8:	dd000517 	ldw	r20,20(sp)
  800dfc:	dcc00417 	ldw	r19,16(sp)
  800e00:	dc800317 	ldw	r18,12(sp)
  800e04:	dc400217 	ldw	r17,8(sp)
  800e08:	dc000117 	ldw	r16,4(sp)
  800e0c:	dec00904 	addi	sp,sp,36
  800e10:	f800283a 	ret
	if(str == NULL || q == NULL) return;
	int i;
	int length = strlen(str);
	char* strBuf = (char*)malloc(sizeof(char)*length);
	strncpy(strBuf, str, length);
	int packet_size = length / 100;
  800e14:	9809883a 	mov	r4,r19
  800e18:	01401904 	movi	r5,100
  800e1c:	080b2100 	call	80b210 <__divsi3>
  800e20:	1029883a 	mov	r20,r2
	if(length % 100 >0) {
  800e24:	008003c4 	movi	r2,15
  800e28:	143fc22e 	bgeu	r2,r16,800d34 <encodeString+0x84>
  800e2c:	9809883a 	mov	r4,r19
  800e30:	01401904 	movi	r5,100
  800e34:	080b2100 	call	80b210 <__divsi3>
  800e38:	003fc406 	br	800d4c <encodeString+0x9c>
	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
		if(i == packet_size - 1) {
			result = initPacket(length, (unsigned char*)strBuf);
  800e3c:	d9400017 	ldw	r5,0(sp)
  800e40:	08065300 	call	806530 <initPacket>
			setHeader(result, 0, 1, STRING); //last packet
  800e44:	1009883a 	mov	r4,r2
  800e48:	000b883a 	mov	r5,zero
  800e4c:	01800044 	movi	r6,1
  800e50:	000f883a 	mov	r7,zero
	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
		if(i == packet_size - 1) {
			result = initPacket(length, (unsigned char*)strBuf);
  800e54:	1021883a 	mov	r16,r2
			setHeader(result, 0, 1, STRING); //last packet
  800e58:	08068840 	call	806884 <setHeader>
  800e5c:	003fd106 	br	800da4 <encodeString+0xf4>

00800e60 <decode>:
	result = NULL;
	free(dataBuf);
	dataBuf = NULL;
}

void decode(struct Queue* this) {
  800e60:	defff704 	addi	sp,sp,-36
  800e64:	dc800215 	stw	r18,8(sp)
	int len = this->size;
  800e68:	24800017 	ldw	r18,0(r4)
	result = NULL;
	free(dataBuf);
	dataBuf = NULL;
}

void decode(struct Queue* this) {
  800e6c:	dd400515 	stw	r21,20(sp)
  800e70:	dd000415 	stw	r20,16(sp)
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
  800e74:	94ab883a 	add	r21,r18,r18
	result = NULL;
	free(dataBuf);
	dataBuf = NULL;
}

void decode(struct Queue* this) {
  800e78:	2029883a 	mov	r20,r4
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
  800e7c:	ad49883a 	add	r4,r21,r21
	result = NULL;
	free(dataBuf);
	dataBuf = NULL;
}

void decode(struct Queue* this) {
  800e80:	ddc00715 	stw	r23,28(sp)
  800e84:	dd800615 	stw	r22,24(sp)
  800e88:	dcc00315 	stw	r19,12(sp)
  800e8c:	dfc00815 	stw	ra,32(sp)
  800e90:	dc400115 	stw	r17,4(sp)
  800e94:	dc000015 	stw	r16,0(sp)
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  800e98:	95c00050 	cmplti	r23,r18,1
	dataBuf = NULL;
}

void decode(struct Queue* this) {
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
  800e9c:	080bb6c0 	call	80bb6c <malloc>
  800ea0:	102d883a 	mov	r22,r2
  800ea4:	1027883a 	mov	r19,r2
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  800ea8:	b800081e 	bne	r23,zero,800ecc <decode+0x6c>
  800eac:	1021883a 	mov	r16,r2
  800eb0:	0023883a 	mov	r17,zero
		packets[i] = (struct Packet*)dequeue(this);
  800eb4:	a009883a 	mov	r4,r20
  800eb8:	0806dd00 	call	806dd0 <dequeue>
void decode(struct Queue* this) {
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  800ebc:	8c400044 	addi	r17,r17,1
		packets[i] = (struct Packet*)dequeue(this);
  800ec0:	80800015 	stw	r2,0(r16)
void decode(struct Queue* this) {
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  800ec4:	84000104 	addi	r16,r16,4
  800ec8:	947ffa1e 	bne	r18,r17,800eb4 <decode+0x54>
		packets[i] = (struct Packet*)dequeue(this);
	}

	switch(*(packets[0]->type)) {
  800ecc:	b0800017 	ldw	r2,0(r22)
  800ed0:	10c00217 	ldw	r3,8(r2)
  800ed4:	18c00017 	ldw	r3,0(r3)
  800ed8:	18001526 	beq	r3,zero,800f30 <decode+0xd0>
  800edc:	00800044 	movi	r2,1
  800ee0:	18803826 	beq	r3,r2,800fc4 <decode+0x164>

		break;
	default:
		break;
	}
	for(i = 0; i < len ; i++ ) {
  800ee4:	b800061e 	bne	r23,zero,800f00 <decode+0xa0>
  800ee8:	0021883a 	mov	r16,zero
		killPacket(&packets[i]);
  800eec:	9809883a 	mov	r4,r19

		break;
	default:
		break;
	}
	for(i = 0; i < len ; i++ ) {
  800ef0:	84000044 	addi	r16,r16,1
		killPacket(&packets[i]);
  800ef4:	08066d00 	call	8066d0 <killPacket>

		break;
	default:
		break;
	}
	for(i = 0; i < len ; i++ ) {
  800ef8:	9cc00104 	addi	r19,r19,4
  800efc:	943ffb1e 	bne	r18,r16,800eec <decode+0x8c>
		killPacket(&packets[i]);
	}
	free(packets);
  800f00:	b009883a 	mov	r4,r22
	packets = NULL;
}
  800f04:	dfc00817 	ldw	ra,32(sp)
  800f08:	ddc00717 	ldw	r23,28(sp)
  800f0c:	dd800617 	ldw	r22,24(sp)
  800f10:	dd400517 	ldw	r21,20(sp)
  800f14:	dd000417 	ldw	r20,16(sp)
  800f18:	dcc00317 	ldw	r19,12(sp)
  800f1c:	dc800217 	ldw	r18,8(sp)
  800f20:	dc400117 	ldw	r17,4(sp)
  800f24:	dc000017 	ldw	r16,0(sp)
  800f28:	dec00904 	addi	sp,sp,36
		break;
	}
	for(i = 0; i < len ; i++ ) {
		killPacket(&packets[i]);
	}
	free(packets);
  800f2c:	080bb581 	jmpi	80bb58 <free>
}

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  800f30:	ad45883a 	add	r2,r21,r21
  800f34:	1585883a 	add	r2,r2,r22
  800f38:	10ffff17 	ldw	r3,-4(r2)
  800f3c:	91401924 	muli	r5,r18,100
  800f40:	19000117 	ldw	r4,4(r3)
  800f44:	213fe704 	addi	r4,r4,-100
  800f48:	2909883a 	add	r4,r5,r4
  800f4c:	080bb6c0 	call	80bb6c <malloc>
  800f50:	1021883a 	mov	r16,r2
	for(i = 0; i < size; i++) {
  800f54:	0480240e 	bge	zero,r18,800fe8 <decode+0x188>
  800f58:	b011883a 	mov	r8,r22
  800f5c:	0013883a 	mov	r9,zero
  800f60:	000f883a 	mov	r7,zero
		for(j = 0; j < p[i]->data_size; j++) {
  800f64:	40800017 	ldw	r2,0(r8)
  800f68:	11800117 	ldw	r6,4(r2)
  800f6c:	01800a0e 	bge	zero,r6,800f98 <decode+0x138>
  800f70:	11400017 	ldw	r5,0(r2)
  800f74:	8249883a 	add	r4,r16,r9
  800f78:	0007883a 	mov	r3,zero
			result[k] = p[i]->data[j+HEADERSIZE];
  800f7c:	28800083 	ldbu	r2,2(r5)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  800f80:	18c00044 	addi	r3,r3,1
  800f84:	29400044 	addi	r5,r5,1
			result[k] = p[i]->data[j+HEADERSIZE];
  800f88:	20800005 	stb	r2,0(r4)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  800f8c:	21000044 	addi	r4,r4,1
  800f90:	19bffa1e 	bne	r3,r6,800f7c <decode+0x11c>
  800f94:	48d3883a 	add	r9,r9,r3

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
  800f98:	39c00044 	addi	r7,r7,1
  800f9c:	42000104 	addi	r8,r8,4
  800fa0:	91fff01e 	bne	r18,r7,800f64 <decode+0x104>
  800fa4:	4805883a 	mov	r2,r9
		for(j = 0; j < p[i]->data_size; j++) {
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  800fa8:	1405883a 	add	r2,r2,r16
	}

	switch(*(packets[0]->type)) {
	case STRING:
		result = decodeString(packets, len);
		printf("%s\n",(char*)result);
  800fac:	8009883a 	mov	r4,r16
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  800fb0:	10000005 	stb	zero,0(r2)
	}

	switch(*(packets[0]->type)) {
	case STRING:
		result = decodeString(packets, len);
		printf("%s\n",(char*)result);
  800fb4:	080c5100 	call	80c510 <puts>
		free(result);
  800fb8:	8009883a 	mov	r4,r16
  800fbc:	080bb580 	call	80bb58 <free>
  800fc0:	003fc806 	br	800ee4 <decode+0x84>
		result = NULL;
		break;
	case CMD:
		result = decodeCmd(packets, len);
  800fc4:	b009883a 	mov	r4,r22
  800fc8:	900b883a 	mov	r5,r18
  800fcc:	08008480 	call	800848 <decodeCmd>
		addCmd(com.scheduler, result);
  800fd0:	00c020f4 	movhi	r3,131
  800fd4:	18fb0504 	addi	r3,r3,-5100
  800fd8:	19001117 	ldw	r4,68(r3)
  800fdc:	100b883a 	mov	r5,r2
  800fe0:	08025700 	call	802570 <addCmd>
  800fe4:	003fbf06 	br	800ee4 <decode+0x84>
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  800fe8:	0005883a 	mov	r2,zero
  800fec:	003fee06 	br	800fa8 <decode+0x148>

00800ff0 <syncRemoveSongFromList>:
	sprintf(temp[0], "%d", list_id);
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
  800ff0:	f800283a 	ret

00800ff4 <updateSongToPlaylist>:
	printf("Playlist %d is shuffled\n", index);
}

void updateSongToPlaylist(int song_index, int list_index, int order) {

}
  800ff4:	f800283a 	ret

00800ff8 <moveSongToIndex>:
	printf("Playlist: %d is set to repeated\n", index);
}

void moveSongToIndex(char* song, int index, char* listname) {

}
  800ff8:	f800283a 	ret

00800ffc <repeatCurrentSong>:

void repeatCurrentSong() {

}
  800ffc:	f800283a 	ret

00801000 <reverse>:

void reverse() {

}
  801000:	f800283a 	ret

00801004 <updateDBIndex>:

void updateDBIndex() {

}
  801004:	f800283a 	ret

00801008 <repeatPlaylist>:
	printf("Playlist: %d is removed\n", index);
}
void play_playlist(int index) {
	printf("Playlist %d is selected and played\n", index);
}
void repeatPlaylist(int index) {
  801008:	200b883a 	mov	r5,r4
	printf("Playlist: %d is set to repeated\n", index);
  80100c:	010020b4 	movhi	r4,130
  801010:	213eb004 	addi	r4,r4,-1344
  801014:	080c3f81 	jmpi	80c3f8 <printf>

00801018 <play_playlist>:

}
void removeList(int index) {
	printf("Playlist: %d is removed\n", index);
}
void play_playlist(int index) {
  801018:	200b883a 	mov	r5,r4
	printf("Playlist %d is selected and played\n", index);
  80101c:	010020b4 	movhi	r4,130
  801020:	213eb904 	addi	r4,r4,-1308
  801024:	080c3f81 	jmpi	80c3f8 <printf>

00801028 <removeList>:
}

void updateSongToPlaylist(int song_index, int list_index, int order) {

}
void removeList(int index) {
  801028:	200b883a 	mov	r5,r4
	printf("Playlist: %d is removed\n", index);
  80102c:	010020b4 	movhi	r4,130
  801030:	213ec204 	addi	r4,r4,-1272
  801034:	080c3f81 	jmpi	80c3f8 <printf>

00801038 <shuffle>:

void modifyPlaylistName(int index, char* new_listname) {
	setListName(db.playlists[index], new_listname);

}
void shuffle(int index) {
  801038:	200b883a 	mov	r5,r4
	printf("Playlist %d is shuffled\n", index);
  80103c:	010020b4 	movhi	r4,130
  801040:	213ec904 	addi	r4,r4,-1244
  801044:	080c3f81 	jmpi	80c3f8 <printf>

00801048 <removeSongFromList>:
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
  801048:	defffd04 	addi	sp,sp,-12
  80104c:	dc800115 	stw	r18,4(sp)
  801050:	2025883a 	mov	r18,r4
	printf("remove song %d from list %d\n", song_id, list_id);
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  801054:	94801964 	muli	r18,r18,101
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
  801058:	dc000015 	stw	r16,0(sp)
  80105c:	2821883a 	mov	r16,r5
	printf("remove song %d from list %d\n", song_id, list_id);
  801060:	200d883a 	mov	r6,r4
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  801064:	9421883a 	add	r16,r18,r16
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
	printf("remove song %d from list %d\n", song_id, list_id);
  801068:	010020b4 	movhi	r4,130
  80106c:	213ed004 	addi	r4,r4,-1216
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
  801070:	dfc00215 	stw	ra,8(sp)
	printf("remove song %d from list %d\n", song_id, list_id);
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  801074:	8421883a 	add	r16,r16,r16
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
	printf("remove song %d from list %d\n", song_id, list_id);
  801078:	080c3f80 	call	80c3f8 <printf>
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  80107c:	00c020b4 	movhi	r3,130
  801080:	18d1e904 	addi	r3,r3,18340
  801084:	8421883a 	add	r16,r16,r16
  801088:	80e1883a 	add	r16,r16,r3
  80108c:	8400a804 	addi	r16,r16,672
  801090:	80800017 	ldw	r2,0(r16)
	db.index_list_song[list_id][song_id] = 0;
  801094:	80000015 	stw	zero,0(r16)
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
	printf("remove song %d from list %d\n", song_id, list_id);
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  801098:	90a5883a 	add	r18,r18,r2
  80109c:	94a5883a 	add	r18,r18,r18
  8010a0:	94a5883a 	add	r18,r18,r18
  8010a4:	90e5883a 	add	r18,r18,r3
  8010a8:	9014c715 	stw	zero,21276(r18)
	db.index_list_song[list_id][song_id] = 0;
}
  8010ac:	dfc00217 	ldw	ra,8(sp)
  8010b0:	dc800117 	ldw	r18,4(sp)
  8010b4:	dc000017 	ldw	r16,0(sp)
  8010b8:	dec00304 	addi	sp,sp,12
  8010bc:	f800283a 	ret

008010c0 <addSongToList>:
	free(temp[0]);
	free(temp[1]);
	//addCmd(com.scheduler, cmd);
}
void addSongToList(int list_index, int song_index) {
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
  8010c0:	2105883a 	add	r2,r4,r4
  8010c4:	1085883a 	add	r2,r2,r2
  8010c8:	018020b4 	movhi	r6,130
  8010cc:	3191e904 	addi	r6,r6,18340
	killCmd(&cmd);
	free(temp[0]);
	free(temp[1]);
	//addCmd(com.scheduler, cmd);
}
void addSongToList(int list_index, int song_index) {
  8010d0:	2011883a 	mov	r8,r4
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
  8010d4:	1189883a 	add	r4,r2,r6
  8010d8:	20c00117 	ldw	r3,4(r4)
  8010dc:	18002326 	beq	r3,zero,80116c <addSongToList+0xac>
  8010e0:	2945883a 	add	r2,r5,r5
  8010e4:	1085883a 	add	r2,r2,r2
  8010e8:	1185883a 	add	r2,r2,r6
  8010ec:	10c03617 	ldw	r3,216(r2)
  8010f0:	18001e26 	beq	r3,zero,80116c <addSongToList+0xac>
  8010f4:	40801964 	muli	r2,r8,101
  8010f8:	40c06524 	muli	r3,r8,404
  8010fc:	2015883a 	mov	r10,r4
  801100:	1145883a 	add	r2,r2,r5
  801104:	1085883a 	add	r2,r2,r2
  801108:	1989883a 	add	r4,r3,r6
  80110c:	1085883a 	add	r2,r2,r2
  801110:	18d4c804 	addi	r3,r3,21280
  801114:	1987883a 	add	r3,r3,r6
  801118:	1193883a 	add	r9,r2,r6
  80111c:	2114c804 	addi	r4,r4,21280
  801120:	01800044 	movi	r6,1
  801124:	01c01944 	movi	r7,101
  801128:	00000306 	br	801138 <addSongToList+0x78>
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
  80112c:	31800044 	addi	r6,r6,1
  801130:	21000104 	addi	r4,r4,4
  801134:	31c00d26 	beq	r6,r7,80116c <addSongToList+0xac>
		if(db.index_list_order[list_index][i] == 0) {
  801138:	18800017 	ldw	r2,0(r3)
	//addCmd(com.scheduler, cmd);
}
void addSongToList(int list_index, int song_index) {
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
  80113c:	18c00104 	addi	r3,r3,4
		if(db.index_list_order[list_index][i] == 0) {
  801140:	103ffa1e 	bne	r2,zero,80112c <addSongToList+0x6c>
			db.index_list_order[list_index][i] = song_index;
			db.index_list_song[list_index][song_index] = i;
			db.playlists[list_index]->num_of_songs++;
  801144:	50c00117 	ldw	r3,4(r10)
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
		if(db.index_list_order[list_index][i] == 0) {
			db.index_list_order[list_index][i] = song_index;
			db.index_list_song[list_index][song_index] = i;
  801148:	4980a815 	stw	r6,672(r9)
void addSongToList(int list_index, int song_index) {
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
		if(db.index_list_order[list_index][i] == 0) {
			db.index_list_order[list_index][i] = song_index;
  80114c:	21400015 	stw	r5,0(r4)
			db.index_list_song[list_index][song_index] = i;
			db.playlists[list_index]->num_of_songs++;
  801150:	18801a17 	ldw	r2,104(r3)
			printf("Song %d is added to %d\n", song_index, list_index);
  801154:	400d883a 	mov	r6,r8
  801158:	010020b4 	movhi	r4,130
  80115c:	213ed804 	addi	r4,r4,-1184
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
		if(db.index_list_order[list_index][i] == 0) {
			db.index_list_order[list_index][i] = song_index;
			db.index_list_song[list_index][song_index] = i;
			db.playlists[list_index]->num_of_songs++;
  801160:	10800044 	addi	r2,r2,1
  801164:	18801a15 	stw	r2,104(r3)
			printf("Song %d is added to %d\n", song_index, list_index);
  801168:	080c3f81 	jmpi	80c3f8 <printf>
  80116c:	f800283a 	ret

00801170 <selectList>:
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}

void selectList(int id) {
  801170:	defffe04 	addi	sp,sp,-8
  801174:	dc400015 	stw	r17,0(sp)
	printf("list %d is selected\n", id);
  801178:	200b883a 	mov	r5,r4
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}

void selectList(int id) {
  80117c:	2023883a 	mov	r17,r4
	printf("list %d is selected\n", id);
  801180:	010020b4 	movhi	r4,130
  801184:	213ede04 	addi	r4,r4,-1160
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}

void selectList(int id) {
  801188:	dfc00115 	stw	ra,4(sp)
	printf("list %d is selected\n", id);
  80118c:	080c3f80 	call	80c3f8 <printf>
	db.curr_playlist_id = id;
  801190:	00c020b4 	movhi	r3,130
  801194:	18d1e904 	addi	r3,r3,18340
  801198:	1c403415 	stw	r17,208(r3)
}
  80119c:	dfc00117 	ldw	ra,4(sp)
  8011a0:	dc400017 	ldw	r17,0(sp)
  8011a4:	dec00204 	addi	sp,sp,8
  8011a8:	f800283a 	ret

008011ac <seek>:
void setVolume(int id, int vol) {
	setGlobalVolume((float)vol/100.0);
	printf("Volume is set to %d percent\n", vol);
}

void seek(int pos) {
  8011ac:	200b883a 	mov	r5,r4
	printf("Seek is set to %d\n", pos);
  8011b0:	010020b4 	movhi	r4,130
  8011b4:	213ee404 	addi	r4,r4,-1136
  8011b8:	080c3f81 	jmpi	80c3f8 <printf>

008011bc <modifyPlaylistName>:
	free(temp[1]);
	free(temp[2]);
}

void modifyPlaylistName(int index, char* new_listname) {
	setListName(db.playlists[index], new_listname);
  8011bc:	2109883a 	add	r4,r4,r4
  8011c0:	008020b4 	movhi	r2,130
  8011c4:	1091ea04 	addi	r2,r2,18344
  8011c8:	2109883a 	add	r4,r4,r4
  8011cc:	2089883a 	add	r4,r4,r2
  8011d0:	21000017 	ldw	r4,0(r4)
  8011d4:	08069e81 	jmpi	8069e8 <setListName>

008011d8 <killCmd>:
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  8011d8:	20c00017 	ldw	r3,0(r4)
		this->parameters[i][this->parameters_size[i]] = '\0';
	}
	return this;
}

void killCmd(struct Command** this) {
  8011dc:	defffc04 	addi	sp,sp,-16
  8011e0:	dc800215 	stw	r18,8(sp)
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  8011e4:	18800117 	ldw	r2,4(r3)
		this->parameters[i][this->parameters_size[i]] = '\0';
	}
	return this;
}

void killCmd(struct Command** this) {
  8011e8:	dfc00315 	stw	ra,12(sp)
  8011ec:	dc400115 	stw	r17,4(sp)
  8011f0:	dc000015 	stw	r16,0(sp)
  8011f4:	2025883a 	mov	r18,r4
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  8011f8:	1000091e 	bne	r2,zero,801220 <killCmd+0x48>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  8011fc:	91000017 	ldw	r4,0(r18)
  801200:	080bb580 	call	80bb58 <free>
	*this = NULL;
  801204:	90000015 	stw	zero,0(r18)
}
  801208:	dfc00317 	ldw	ra,12(sp)
  80120c:	dc800217 	ldw	r18,8(sp)
  801210:	dc400117 	ldw	r17,4(sp)
  801214:	dc000017 	ldw	r16,0(sp)
  801218:	dec00404 	addi	sp,sp,16
  80121c:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  801220:	19000217 	ldw	r4,8(r3)
  801224:	080bb580 	call	80bb58 <free>
		(*this)->parameters_size = NULL;
  801228:	90c00017 	ldw	r3,0(r18)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  80122c:	18800117 	ldw	r2,4(r3)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  801230:	18000215 	stw	zero,8(r3)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801234:	0080120e 	bge	zero,r2,801280 <killCmd+0xa8>
  801238:	19000317 	ldw	r4,12(r3)
  80123c:	0023883a 	mov	r17,zero
  801240:	0021883a 	mov	r16,zero
			free((*this)->parameters[i]);
  801244:	2405883a 	add	r2,r4,r16
  801248:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  80124c:	8c400044 	addi	r17,r17,1
			free((*this)->parameters[i]);
  801250:	080bb580 	call	80bb58 <free>
			(*this)->parameters[i] = NULL;
  801254:	90c00017 	ldw	r3,0(r18)
  801258:	19000317 	ldw	r4,12(r3)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  80125c:	18c00117 	ldw	r3,4(r3)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  801260:	2405883a 	add	r2,r4,r16
  801264:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801268:	84000104 	addi	r16,r16,4
  80126c:	88fff516 	blt	r17,r3,801244 <killCmd+0x6c>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  801270:	080bb580 	call	80bb58 <free>
		(*this)->parameters = NULL;
  801274:	90800017 	ldw	r2,0(r18)
  801278:	10000315 	stw	zero,12(r2)
  80127c:	003fdf06 	br	8011fc <killCmd+0x24>
  801280:	19000317 	ldw	r4,12(r3)
  801284:	003ffa06 	br	801270 <killCmd+0x98>

00801288 <createSong>:
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
	free(temp[1]);
}
void createSong(char* song_name, int len) {
  801288:	defffe04 	addi	sp,sp,-8
  80128c:	dc400015 	stw	r17,0(sp)
  801290:	dfc00115 	stw	ra,4(sp)
  801294:	2823883a 	mov	r17,r5
	struct Song* song = initSong(song_name);
  801298:	08081080 	call	808108 <initSong>
  80129c:	1009883a 	mov	r4,r2
	song->size = len;
  8012a0:	14400915 	stw	r17,36(r2)
	addSongToDB(song);
	song = NULL;
}
  8012a4:	dfc00117 	ldw	ra,4(sp)
  8012a8:	dc400017 	ldw	r17,0(sp)
  8012ac:	dec00204 	addi	sp,sp,8
	free(temp[1]);
}
void createSong(char* song_name, int len) {
	struct Song* song = initSong(song_name);
	song->size = len;
	addSongToDB(song);
  8012b0:	080364c1 	jmpi	80364c <addSongToDB>

008012b4 <createExisitedPlaylist>:
	killCmd(&cmd);
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
void createExisitedPlaylist(char* listname, int num_of_songs, int id) {
  8012b4:	defffd04 	addi	sp,sp,-12
  8012b8:	dcc00115 	stw	r19,4(sp)
  8012bc:	dc400015 	stw	r17,0(sp)
  8012c0:	3027883a 	mov	r19,r6
  8012c4:	2823883a 	mov	r17,r5
  8012c8:	dfc00215 	stw	ra,8(sp)
	struct Playlist* pl = initPlaylist(listname);
  8012cc:	0806a5c0 	call	806a5c <initPlaylist>
  8012d0:	1009883a 	mov	r4,r2
	pl->num_of_songs = num_of_songs;
	addExisitedListToDB(pl, id);
  8012d4:	980b883a 	mov	r5,r19
	free(temp[1]);
	free(temp[2]);
}
void createExisitedPlaylist(char* listname, int num_of_songs, int id) {
	struct Playlist* pl = initPlaylist(listname);
	pl->num_of_songs = num_of_songs;
  8012d8:	14401a15 	stw	r17,104(r2)
	addExisitedListToDB(pl, id);
	pl = NULL;
}
  8012dc:	dfc00217 	ldw	ra,8(sp)
  8012e0:	dcc00117 	ldw	r19,4(sp)
  8012e4:	dc400017 	ldw	r17,0(sp)
  8012e8:	dec00304 	addi	sp,sp,12
	free(temp[2]);
}
void createExisitedPlaylist(char* listname, int num_of_songs, int id) {
	struct Playlist* pl = initPlaylist(listname);
	pl->num_of_songs = num_of_songs;
	addExisitedListToDB(pl, id);
  8012ec:	08034001 	jmpi	803400 <addExisitedListToDB>

008012f0 <createPlaylist>:
	struct Command* cmd = initCmd(8, 1, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
}
//index 8
void createPlaylist(char* listname) {
  8012f0:	defffe04 	addi	sp,sp,-8
	printf("A playlist %s is created.\n", listname);
  8012f4:	200b883a 	mov	r5,r4
	struct Command* cmd = initCmd(8, 1, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
}
//index 8
void createPlaylist(char* listname) {
  8012f8:	dc400015 	stw	r17,0(sp)
  8012fc:	2023883a 	mov	r17,r4
	printf("A playlist %s is created.\n", listname);
  801300:	010020b4 	movhi	r4,130
  801304:	213ee904 	addi	r4,r4,-1116
	struct Command* cmd = initCmd(8, 1, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
}
//index 8
void createPlaylist(char* listname) {
  801308:	dfc00115 	stw	ra,4(sp)
	printf("A playlist %s is created.\n", listname);
  80130c:	080c3f80 	call	80c3f8 <printf>
	struct Playlist* pl = initPlaylist(listname);
  801310:	8809883a 	mov	r4,r17
  801314:	0806a5c0 	call	806a5c <initPlaylist>
	addListToDB(pl);
  801318:	1009883a 	mov	r4,r2
	pl = NULL;
}
  80131c:	dfc00117 	ldw	ra,4(sp)
  801320:	dc400017 	ldw	r17,0(sp)
  801324:	dec00204 	addi	sp,sp,8
}
//index 8
void createPlaylist(char* listname) {
	printf("A playlist %s is created.\n", listname);
	struct Playlist* pl = initPlaylist(listname);
	addListToDB(pl);
  801328:	08035401 	jmpi	803540 <addListToDB>

0080132c <setVolume>:
	addCmd(com.scheduler, cmd);
	free(temp[0]);
	free(temp[1]);
}
//index 4
void setVolume(int id, int vol) {
  80132c:	defffe04 	addi	sp,sp,-8
	setGlobalVolume((float)vol/100.0);
  801330:	2809883a 	mov	r4,r5
	addCmd(com.scheduler, cmd);
	free(temp[0]);
	free(temp[1]);
}
//index 4
void setVolume(int id, int vol) {
  801334:	dfc00115 	stw	ra,4(sp)
  801338:	dc400015 	stw	r17,0(sp)
  80133c:	2823883a 	mov	r17,r5
	setGlobalVolume((float)vol/100.0);
  801340:	080a4100 	call	80a410 <__floatsisf>
  801344:	0150b234 	movhi	r5,17096
  801348:	1009883a 	mov	r4,r2
  80134c:	080a1340 	call	80a134 <__divsf3>
  801350:	1009883a 	mov	r4,r2
  801354:	08096ec0 	call	8096ec <setGlobalVolume>
	printf("Volume is set to %d percent\n", vol);
  801358:	880b883a 	mov	r5,r17
  80135c:	010020b4 	movhi	r4,130
  801360:	213ef004 	addi	r4,r4,-1088
}
  801364:	dfc00117 	ldw	ra,4(sp)
  801368:	dc400017 	ldw	r17,0(sp)
  80136c:	dec00204 	addi	sp,sp,8
	free(temp[1]);
}
//index 4
void setVolume(int id, int vol) {
	setGlobalVolume((float)vol/100.0);
	printf("Volume is set to %d percent\n", vol);
  801370:	080c3f81 	jmpi	80c3f8 <printf>

00801374 <stop>:
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
}
//index 3
void stop() {
  801374:	defffc04 	addi	sp,sp,-16
	printf("The music start to stop.\n");
  801378:	010020b4 	movhi	r4,130
  80137c:	213ef804 	addi	r4,r4,-1056
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
}
//index 3
void stop() {
  801380:	dc800215 	stw	r18,8(sp)
	printf("The music start to stop.\n");
	disableAudioDeviceController();
	clearSoundMixer();
	int i;
	int size = db.total_songs_playing;
  801384:	048020b4 	movhi	r18,130
  801388:	9491e904 	addi	r18,r18,18340
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
}
//index 3
void stop() {
  80138c:	dfc00315 	stw	ra,12(sp)
  801390:	dc400115 	stw	r17,4(sp)
  801394:	dc000015 	stw	r16,0(sp)
	printf("The music start to stop.\n");
  801398:	080c5100 	call	80c510 <puts>
	disableAudioDeviceController();
  80139c:	080875c0 	call	80875c <disableAudioDeviceController>
	clearSoundMixer();
  8013a0:	08097140 	call	809714 <clearSoundMixer>
	int i;
	int size = db.total_songs_playing;
  8013a4:	9440a617 	ldw	r17,664(r18)
	for(i = 0; i < size; i++) {
  8013a8:	0440050e 	bge	zero,r17,8013c0 <stop+0x4c>
  8013ac:	0021883a 	mov	r16,zero
		removeCurrPlaying(i);
  8013b0:	8009883a 	mov	r4,r16
	printf("The music start to stop.\n");
	disableAudioDeviceController();
	clearSoundMixer();
	int i;
	int size = db.total_songs_playing;
	for(i = 0; i < size; i++) {
  8013b4:	84000044 	addi	r16,r16,1
		removeCurrPlaying(i);
  8013b8:	0802d000 	call	802d00 <removeCurrPlaying>
	printf("The music start to stop.\n");
	disableAudioDeviceController();
	clearSoundMixer();
	int i;
	int size = db.total_songs_playing;
	for(i = 0; i < size; i++) {
  8013bc:	8c3ffc1e 	bne	r17,r16,8013b0 <stop+0x3c>
		removeCurrPlaying(i);
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
  8013c0:	010020b4 	movhi	r4,130
  8013c4:	213eff04 	addi	r4,r4,-1028
	int i;
	int size = db.total_songs_playing;
	for(i = 0; i < size; i++) {
		removeCurrPlaying(i);
	}
	db.curr_song_id = 0;
  8013c8:	90000015 	stw	zero,0(r18)
	printf("Music has stopped.\n");
}
  8013cc:	dfc00317 	ldw	ra,12(sp)
  8013d0:	dc800217 	ldw	r18,8(sp)
  8013d4:	dc400117 	ldw	r17,4(sp)
  8013d8:	dc000017 	ldw	r16,0(sp)
  8013dc:	dec00404 	addi	sp,sp,16
	int size = db.total_songs_playing;
	for(i = 0; i < size; i++) {
		removeCurrPlaying(i);
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
  8013e0:	080c5101 	jmpi	80c510 <puts>

008013e4 <pause>:
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
	free(temp[0]);
}
//pause current play song; index 2
void pause(int id) {
  8013e4:	defffe04 	addi	sp,sp,-8
	disableAudioDeviceController();
  8013e8:	d9000015 	stw	r4,0(sp)
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
	free(temp[0]);
}
//pause current play song; index 2
void pause(int id) {
  8013ec:	dfc00115 	stw	ra,4(sp)
	disableAudioDeviceController();
  8013f0:	080875c0 	call	80875c <disableAudioDeviceController>
	pauseSong(db.songs[id]);
  8013f4:	d9000017 	ldw	r4,0(sp)
  8013f8:	008020b4 	movhi	r2,130
  8013fc:	10921f04 	addi	r2,r2,18556
  801400:	2109883a 	add	r4,r4,r4
  801404:	2109883a 	add	r4,r4,r4
  801408:	2089883a 	add	r4,r4,r2
  80140c:	21000017 	ldw	r4,0(r4)
	//if(db.curr_playlist_id != 0) {
		//syncNext();
	//}
}
  801410:	dfc00117 	ldw	ra,4(sp)
  801414:	dec00204 	addi	sp,sp,8
	free(temp[0]);
}
//pause current play song; index 2
void pause(int id) {
	disableAudioDeviceController();
	pauseSong(db.songs[id]);
  801418:	0807d5c1 	jmpi	807d5c <pauseSong>

0080141c <initCmd>:
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Command.h"

struct Command* initCmd(int index, int num_parameters, char** paras) {
  80141c:	defff804 	addi	sp,sp,-32
  801420:	dc400115 	stw	r17,4(sp)
  801424:	2023883a 	mov	r17,r4
	struct Command* this = (struct Command*)malloc(sizeof(struct Command));
  801428:	01000404 	movi	r4,16
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Command.h"

struct Command* initCmd(int index, int num_parameters, char** paras) {
  80142c:	dd800615 	stw	r22,24(sp)
  801430:	dc800215 	stw	r18,8(sp)
  801434:	dc000015 	stw	r16,0(sp)
  801438:	282d883a 	mov	r22,r5
  80143c:	dfc00715 	stw	ra,28(sp)
  801440:	dd400515 	stw	r21,20(sp)
  801444:	dd000415 	stw	r20,16(sp)
  801448:	dcc00315 	stw	r19,12(sp)
  80144c:	3021883a 	mov	r16,r6
	struct Command* this = (struct Command*)malloc(sizeof(struct Command));
  801450:	080bb6c0 	call	80bb6c <malloc>
  801454:	1025883a 	mov	r18,r2
	this->cmd_index = index;
  801458:	14400015 	stw	r17,0(r2)
	this->num_of_parameters = num_parameters;
  80145c:	15800115 	stw	r22,4(r2)
	if(num_parameters == 0 || paras == NULL) return  this;
  801460:	b0002b26 	beq	r22,zero,801510 <initCmd+0xf4>
  801464:	80002a26 	beq	r16,zero,801510 <initCmd+0xf4>
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
  801468:	b5a3883a 	add	r17,r22,r22
  80146c:	8c63883a 	add	r17,r17,r17
  801470:	8809883a 	mov	r4,r17
  801474:	080bb6c0 	call	80bb6c <malloc>
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
  801478:	8809883a 	mov	r4,r17
struct Command* initCmd(int index, int num_parameters, char** paras) {
	struct Command* this = (struct Command*)malloc(sizeof(struct Command));
	this->cmd_index = index;
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
  80147c:	90800315 	stw	r2,12(r18)
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
  801480:	080bb6c0 	call	80bb6c <malloc>
  801484:	90800215 	stw	r2,8(r18)
	int i ;
	for( i = 0; i < num_parameters; i++) {
  801488:	0580210e 	bge	zero,r22,801510 <initCmd+0xf4>
  80148c:	8029883a 	mov	r20,r16
  801490:	002b883a 	mov	r21,zero
  801494:	0027883a 	mov	r19,zero
		this->parameters_size[i] = strlen(paras[i]);
  801498:	a1000017 	ldw	r4,0(r20)
  80149c:	94000217 	ldw	r16,8(r18)
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
  8014a0:	ad400044 	addi	r21,r21,1
		this->parameters_size[i] = strlen(paras[i]);
  8014a4:	080ce500 	call	80ce50 <strlen>
  8014a8:	9c21883a 	add	r16,r19,r16
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
  8014ac:	94400317 	ldw	r17,12(r18)
  8014b0:	11000044 	addi	r4,r2,1
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
		this->parameters_size[i] = strlen(paras[i]);
  8014b4:	80800015 	stw	r2,0(r16)
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
  8014b8:	080bb6c0 	call	80bb6c <malloc>
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
  8014bc:	90c00317 	ldw	r3,12(r18)
  8014c0:	91400217 	ldw	r5,8(r18)
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
		this->parameters_size[i] = strlen(paras[i]);
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
  8014c4:	9c63883a 	add	r17,r19,r17
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
  8014c8:	1cc7883a 	add	r3,r3,r19
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
		this->parameters_size[i] = strlen(paras[i]);
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
  8014cc:	88800015 	stw	r2,0(r17)
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
  8014d0:	994b883a 	add	r5,r19,r5
  8014d4:	19000017 	ldw	r4,0(r3)
  8014d8:	29800017 	ldw	r6,0(r5)
  8014dc:	a1400017 	ldw	r5,0(r20)
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
  8014e0:	a5000104 	addi	r20,r20,4
		this->parameters_size[i] = strlen(paras[i]);
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
  8014e4:	080cf740 	call	80cf74 <strncpy>
		this->parameters[i][this->parameters_size[i]] = '\0';
  8014e8:	90c00317 	ldw	r3,12(r18)
  8014ec:	90800217 	ldw	r2,8(r18)
  8014f0:	98c7883a 	add	r3,r19,r3
  8014f4:	9885883a 	add	r2,r19,r2
  8014f8:	19000017 	ldw	r4,0(r3)
  8014fc:	11400017 	ldw	r5,0(r2)
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
  801500:	9cc00104 	addi	r19,r19,4
		this->parameters_size[i] = strlen(paras[i]);
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
		this->parameters[i][this->parameters_size[i]] = '\0';
  801504:	2149883a 	add	r4,r4,r5
  801508:	20000005 	stb	zero,0(r4)
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
  80150c:	b57fe21e 	bne	r22,r21,801498 <initCmd+0x7c>
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
		this->parameters[i][this->parameters_size[i]] = '\0';
	}
	return this;
}
  801510:	9005883a 	mov	r2,r18
  801514:	dfc00717 	ldw	ra,28(sp)
  801518:	dd800617 	ldw	r22,24(sp)
  80151c:	dd400517 	ldw	r21,20(sp)
  801520:	dd000417 	ldw	r20,16(sp)
  801524:	dcc00317 	ldw	r19,12(sp)
  801528:	dc800217 	ldw	r18,8(sp)
  80152c:	dc400117 	ldw	r17,4(sp)
  801530:	dc000017 	ldw	r16,0(sp)
  801534:	dec00804 	addi	sp,sp,32
  801538:	f800283a 	ret

0080153c <syncSelectList>:

/*
 * Send command to select a list to play
 * index: 11
 */
void syncSelectList(int id) {
  80153c:	defffd04 	addi	sp,sp,-12
  801540:	dc400015 	stw	r17,0(sp)
  801544:	2023883a 	mov	r17,r4
	char* temp[0];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801548:	01000104 	movi	r4,4

/*
 * Send command to select a list to play
 * index: 11
 */
void syncSelectList(int id) {
  80154c:	dfc00215 	stw	ra,8(sp)
  801550:	dcc00115 	stw	r19,4(sp)
	char* temp[0];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801554:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", id);
  801558:	880d883a 	mov	r6,r17
	struct Command* cmd = initCmd(11, 1, temp);
  80155c:	04c00044 	movi	r19,1
 * index: 11
 */
void syncSelectList(int id) {
	char* temp[0];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
  801560:	1009883a 	mov	r4,r2
  801564:	014020b4 	movhi	r5,130
  801568:	297f0404 	addi	r5,r5,-1008
 * Send command to select a list to play
 * index: 11
 */
void syncSelectList(int id) {
	char* temp[0];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80156c:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", id);
  801570:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(11, 1, temp);
  801574:	d80d883a 	mov	r6,sp
  801578:	980b883a 	mov	r5,r19
  80157c:	010002c4 	movi	r4,11
  801580:	080141c0 	call	80141c <initCmd>
	send(cmd, CMD);
  801584:	1009883a 	mov	r4,r2
  801588:	980b883a 	mov	r5,r19
 */
void syncSelectList(int id) {
	char* temp[0];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	struct Command* cmd = initCmd(11, 1, temp);
  80158c:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  801590:	08071c80 	call	8071c8 <send>
	addCmd(com.scheduler, cmd);
  801594:	00c020f4 	movhi	r3,131
  801598:	18fb0504 	addi	r3,r3,-5100
  80159c:	19001117 	ldw	r4,68(r3)
  8015a0:	880b883a 	mov	r5,r17
  8015a4:	08025700 	call	802570 <addCmd>
	free(temp[0]);
  8015a8:	d9000017 	ldw	r4,0(sp)
  8015ac:	080bb580 	call	80bb58 <free>
}
  8015b0:	dfc00217 	ldw	ra,8(sp)
  8015b4:	dcc00117 	ldw	r19,4(sp)
  8015b8:	dc400017 	ldw	r17,0(sp)
  8015bc:	dec00304 	addi	sp,sp,12
  8015c0:	f800283a 	ret

008015c4 <syncCreatePlaylist>:

/*
 * send command to a create playlist on android side
 * index: 8
 */
void syncCreatePlaylist(char* list_name) {
  8015c4:	defffc04 	addi	sp,sp,-16
  8015c8:	dcc00215 	stw	r19,8(sp)
	char* temp[1];
	temp[0] = list_name;
	struct Command* cmd = initCmd(8, 1, temp);
  8015cc:	04c00044 	movi	r19,1
  8015d0:	d80d883a 	mov	r6,sp
 * send command to a create playlist on android side
 * index: 8
 */
void syncCreatePlaylist(char* list_name) {
	char* temp[1];
	temp[0] = list_name;
  8015d4:	d9000015 	stw	r4,0(sp)
	struct Command* cmd = initCmd(8, 1, temp);
  8015d8:	980b883a 	mov	r5,r19
  8015dc:	01000204 	movi	r4,8

/*
 * send command to a create playlist on android side
 * index: 8
 */
void syncCreatePlaylist(char* list_name) {
  8015e0:	dfc00315 	stw	ra,12(sp)
  8015e4:	dc400115 	stw	r17,4(sp)
	char* temp[1];
	temp[0] = list_name;
	struct Command* cmd = initCmd(8, 1, temp);
  8015e8:	080141c0 	call	80141c <initCmd>
	send(cmd, CMD);
  8015ec:	1009883a 	mov	r4,r2
  8015f0:	980b883a 	mov	r5,r19
 * index: 8
 */
void syncCreatePlaylist(char* list_name) {
	char* temp[1];
	temp[0] = list_name;
	struct Command* cmd = initCmd(8, 1, temp);
  8015f4:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8015f8:	08071c80 	call	8071c8 <send>
	addCmd(com.scheduler, cmd);
  8015fc:	00c020f4 	movhi	r3,131
  801600:	18fb0504 	addi	r3,r3,-5100
  801604:	19001117 	ldw	r4,68(r3)
  801608:	880b883a 	mov	r5,r17
  80160c:	08025700 	call	802570 <addCmd>
}
  801610:	dfc00317 	ldw	ra,12(sp)
  801614:	dcc00217 	ldw	r19,8(sp)
  801618:	dc400117 	ldw	r17,4(sp)
  80161c:	dec00404 	addi	sp,sp,16
  801620:	f800283a 	ret

00801624 <syncSetVol>:
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
}

void syncSetVol(int id, int vol) {
  801624:	defff904 	addi	sp,sp,-28
  801628:	dcc00315 	stw	r19,12(sp)
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80162c:	04c00104 	movi	r19,4
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
}

void syncSetVol(int id, int vol) {
  801630:	dd400415 	stw	r21,16(sp)
  801634:	202b883a 	mov	r21,r4
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801638:	9809883a 	mov	r4,r19
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
}

void syncSetVol(int id, int vol) {
  80163c:	dfc00615 	stw	ra,24(sp)
  801640:	ddc00515 	stw	r23,20(sp)
  801644:	dc400215 	stw	r17,8(sp)
  801648:	282f883a 	mov	r23,r5
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80164c:	080bb6c0 	call	80bb6c <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  801650:	9809883a 	mov	r4,r19
	printf("Music has stopped.\n");
}

void syncSetVol(int id, int vol) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801654:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  801658:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", id);
  80165c:	d9000017 	ldw	r4,0(sp)
  801660:	044020b4 	movhi	r17,130
  801664:	8c7f0404 	addi	r17,r17,-1008
  801668:	a80d883a 	mov	r6,r21
  80166c:	880b883a 	mov	r5,r17
}

void syncSetVol(int id, int vol) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  801670:	d8800115 	stw	r2,4(sp)
	sprintf(temp[0], "%d", id);
  801674:	080cba40 	call	80cba4 <sprintf>
	sprintf(temp[1], "%d", vol);
  801678:	d9000117 	ldw	r4,4(sp)
  80167c:	880b883a 	mov	r5,r17
  801680:	b80d883a 	mov	r6,r23
  801684:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(4, 2, temp);
  801688:	d80d883a 	mov	r6,sp
  80168c:	9809883a 	mov	r4,r19
  801690:	01400084 	movi	r5,2
  801694:	080141c0 	call	80141c <initCmd>
	addCmd(com.scheduler, cmd);
  801698:	00c020f4 	movhi	r3,131
  80169c:	18fb0504 	addi	r3,r3,-5100
  8016a0:	19001117 	ldw	r4,68(r3)
  8016a4:	100b883a 	mov	r5,r2
  8016a8:	08025700 	call	802570 <addCmd>
	free(temp[0]);
  8016ac:	d9000017 	ldw	r4,0(sp)
  8016b0:	080bb580 	call	80bb58 <free>
	free(temp[1]);
  8016b4:	d9000117 	ldw	r4,4(sp)
  8016b8:	080bb580 	call	80bb58 <free>
}
  8016bc:	dfc00617 	ldw	ra,24(sp)
  8016c0:	ddc00517 	ldw	r23,20(sp)
  8016c4:	dd400417 	ldw	r21,16(sp)
  8016c8:	dcc00317 	ldw	r19,12(sp)
  8016cc:	dc400217 	ldw	r17,8(sp)
  8016d0:	dec00704 	addi	sp,sp,28
  8016d4:	f800283a 	ret

008016d8 <syncStop>:
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
  8016d8:	defffe04 	addi	sp,sp,-8
	struct Command* cmd = initCmd(3, 0, NULL);
  8016dc:	000d883a 	mov	r6,zero
  8016e0:	000b883a 	mov	r5,zero
  8016e4:	010000c4 	movi	r4,3
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
  8016e8:	dfc00115 	stw	ra,4(sp)
  8016ec:	dc400015 	stw	r17,0(sp)
	struct Command* cmd = initCmd(3, 0, NULL);
  8016f0:	080141c0 	call	80141c <initCmd>
	send(cmd, CMD);
  8016f4:	1009883a 	mov	r4,r2
  8016f8:	01400044 	movi	r5,1
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8016fc:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  801700:	08071c80 	call	8071c8 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  801704:	00c020f4 	movhi	r3,131
  801708:	18fb0504 	addi	r3,r3,-5100
  80170c:	19001117 	ldw	r4,68(r3)
  801710:	880b883a 	mov	r5,r17
}
  801714:	dfc00117 	ldw	ra,4(sp)
  801718:	dc400017 	ldw	r17,0(sp)
  80171c:	dec00204 	addi	sp,sp,8
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
  801720:	08025701 	jmpi	802570 <addCmd>

00801724 <syncPause>:
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPause(int id) {
  801724:	defffc04 	addi	sp,sp,-16
  801728:	dc400115 	stw	r17,4(sp)
  80172c:	2023883a 	mov	r17,r4
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801730:	01000104 	movi	r4,4
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPause(int id) {
  801734:	dfc00315 	stw	ra,12(sp)
  801738:	dcc00215 	stw	r19,8(sp)
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80173c:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", id);
  801740:	880d883a 	mov	r6,r17
	struct Command* cmd = initCmd(2, 1, temp);
  801744:	04c00044 	movi	r19,1
 * It will also put command to scheduler
 */
void syncPause(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
  801748:	1009883a 	mov	r4,r2
  80174c:	014020b4 	movhi	r5,130
  801750:	297f0404 	addi	r5,r5,-1008
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPause(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801754:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", id);
  801758:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(2, 1, temp);
  80175c:	d80d883a 	mov	r6,sp
  801760:	980b883a 	mov	r5,r19
  801764:	01000084 	movi	r4,2
  801768:	080141c0 	call	80141c <initCmd>
	send(cmd, CMD);
  80176c:	1009883a 	mov	r4,r2
  801770:	980b883a 	mov	r5,r19
 */
void syncPause(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	struct Command* cmd = initCmd(2, 1, temp);
  801774:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  801778:	08071c80 	call	8071c8 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  80177c:	00c020f4 	movhi	r3,131
  801780:	18fb0504 	addi	r3,r3,-5100
  801784:	19001117 	ldw	r4,68(r3)
  801788:	880b883a 	mov	r5,r17
  80178c:	08025700 	call	802570 <addCmd>
	free(temp[0]);
  801790:	d9000017 	ldw	r4,0(sp)
  801794:	080bb580 	call	80bb58 <free>
}
  801798:	dfc00317 	ldw	ra,12(sp)
  80179c:	dcc00217 	ldw	r19,8(sp)
  8017a0:	dc400117 	ldw	r17,4(sp)
  8017a4:	dec00404 	addi	sp,sp,16
  8017a8:	f800283a 	ret

008017ac <syncPlay>:
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
  8017ac:	defff804 	addi	sp,sp,-32
  8017b0:	dc400315 	stw	r17,12(sp)
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8017b4:	04400104 	movi	r17,4
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
  8017b8:	dcc00415 	stw	r19,16(sp)
  8017bc:	2027883a 	mov	r19,r4
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8017c0:	8809883a 	mov	r4,r17
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
  8017c4:	dfc00715 	stw	ra,28(sp)
  8017c8:	ddc00615 	stw	r23,24(sp)
  8017cc:	dd400515 	stw	r21,20(sp)
  8017d0:	302f883a 	mov	r23,r6
  8017d4:	282b883a 	mov	r21,r5
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8017d8:	080bb6c0 	call	80bb6c <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  8017dc:	8809883a 	mov	r4,r17
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8017e0:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  8017e4:	080bb6c0 	call	80bb6c <malloc>
	temp[2] = (char*)malloc(sizeof(char)*4);
  8017e8:	8809883a 	mov	r4,r17
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  8017ec:	d8800115 	stw	r2,4(sp)
	temp[2] = (char*)malloc(sizeof(char)*4);
  8017f0:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", id);
  8017f4:	d9000017 	ldw	r4,0(sp)
  8017f8:	044020b4 	movhi	r17,130
  8017fc:	8c7f0404 	addi	r17,r17,-1008
  801800:	980d883a 	mov	r6,r19
  801804:	880b883a 	mov	r5,r17
 */
void syncPlay(int id, int vol, int pos) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
	temp[2] = (char*)malloc(sizeof(char)*4);
  801808:	d8800215 	stw	r2,8(sp)
	sprintf(temp[0], "%d", id);
  80180c:	080cba40 	call	80cba4 <sprintf>
	sprintf(temp[1], "%d", vol);
  801810:	d9000117 	ldw	r4,4(sp)
  801814:	a80d883a 	mov	r6,r21
  801818:	880b883a 	mov	r5,r17
  80181c:	080cba40 	call	80cba4 <sprintf>
	sprintf(temp[2], "%d", pos);
  801820:	d9000217 	ldw	r4,8(sp)
  801824:	880b883a 	mov	r5,r17
  801828:	b80d883a 	mov	r6,r23
	struct Command* cmd = initCmd(1, 3, temp);
  80182c:	04c00044 	movi	r19,1
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
	temp[2] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	sprintf(temp[1], "%d", vol);
	sprintf(temp[2], "%d", pos);
  801830:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(1, 3, temp);
  801834:	d80d883a 	mov	r6,sp
  801838:	9809883a 	mov	r4,r19
  80183c:	014000c4 	movi	r5,3
  801840:	080141c0 	call	80141c <initCmd>
	send(cmd, CMD);
  801844:	1009883a 	mov	r4,r2
  801848:	980b883a 	mov	r5,r19
	temp[1] = (char*)malloc(sizeof(char)*4);
	temp[2] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	sprintf(temp[1], "%d", vol);
	sprintf(temp[2], "%d", pos);
	struct Command* cmd = initCmd(1, 3, temp);
  80184c:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  801850:	08071c80 	call	8071c8 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  801854:	00c020f4 	movhi	r3,131
  801858:	18fb0504 	addi	r3,r3,-5100
  80185c:	19001117 	ldw	r4,68(r3)
  801860:	880b883a 	mov	r5,r17
  801864:	08025700 	call	802570 <addCmd>
	free(temp[0]);
  801868:	d9000017 	ldw	r4,0(sp)
  80186c:	080bb580 	call	80bb58 <free>
	free(temp[1]);
  801870:	d9000117 	ldw	r4,4(sp)
  801874:	080bb580 	call	80bb58 <free>
	free(temp[2]);
  801878:	d9000217 	ldw	r4,8(sp)
  80187c:	080bb580 	call	80bb58 <free>
}
  801880:	dfc00717 	ldw	ra,28(sp)
  801884:	ddc00617 	ldw	r23,24(sp)
  801888:	dd400517 	ldw	r21,20(sp)
  80188c:	dcc00417 	ldw	r19,16(sp)
  801890:	dc400317 	ldw	r17,12(sp)
  801894:	dec00804 	addi	sp,sp,32
  801898:	f800283a 	ret

0080189c <syncNext>:
}

void seek(int pos) {
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
  80189c:	defffa04 	addi	sp,sp,-24
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8018a0:	000d883a 	mov	r6,zero
}

void seek(int pos) {
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
  8018a4:	dd800415 	stw	r22,16(sp)
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8018a8:	000b883a 	mov	r5,zero
}

void seek(int pos) {
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
  8018ac:	202d883a 	mov	r22,r4
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8018b0:	010000c4 	movi	r4,3
}

void seek(int pos) {
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
  8018b4:	dfc00515 	stw	ra,20(sp)
  8018b8:	dd000315 	stw	r20,12(sp)
  8018bc:	dcc00215 	stw	r19,8(sp)
  8018c0:	dc400115 	stw	r17,4(sp)
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
  8018c4:	04c00044 	movi	r19,1
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8018c8:	080141c0 	call	80141c <initCmd>
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
  8018cc:	050020f4 	movhi	r20,131
  8018d0:	a53b0504 	addi	r20,r20,-5100
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
  8018d4:	980b883a 	mov	r5,r19
  8018d8:	1009883a 	mov	r4,r2
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8018dc:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8018e0:	08071c80 	call	8071c8 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  8018e4:	a1001117 	ldw	r4,68(r20)
  8018e8:	880b883a 	mov	r5,r17
  8018ec:	08025700 	call	802570 <addCmd>
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8018f0:	01000104 	movi	r4,4
  8018f4:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", song_id);
  8018f8:	b00d883a 	mov	r6,r22
  8018fc:	1009883a 	mov	r4,r2
  801900:	014020b4 	movhi	r5,130
  801904:	297f0404 	addi	r5,r5,-1008
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801908:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", song_id);
  80190c:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(6, 1, temp);
  801910:	d80d883a 	mov	r6,sp
  801914:	980b883a 	mov	r5,r19
  801918:	01000184 	movi	r4,6
  80191c:	080141c0 	call	80141c <initCmd>
	addCmd(com.scheduler, cmd);
  801920:	a1001117 	ldw	r4,68(r20)
  801924:	100b883a 	mov	r5,r2
  801928:	08025700 	call	802570 <addCmd>
	free(temp[0]);
  80192c:	d9000017 	ldw	r4,0(sp)
  801930:	080bb580 	call	80bb58 <free>
}
  801934:	dfc00517 	ldw	ra,20(sp)
  801938:	dd800417 	ldw	r22,16(sp)
  80193c:	dd000317 	ldw	r20,12(sp)
  801940:	dcc00217 	ldw	r19,8(sp)
  801944:	dc400117 	ldw	r17,4(sp)
  801948:	dec00604 	addi	sp,sp,24
  80194c:	f800283a 	ret

00801950 <syncPrev>:
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
		printf("Next song is played.\n");
	}
}
void syncPrev(int song_id) {
  801950:	defffa04 	addi	sp,sp,-24
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  801954:	000d883a 	mov	r6,zero
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
		printf("Next song is played.\n");
	}
}
void syncPrev(int song_id) {
  801958:	dd800415 	stw	r22,16(sp)
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  80195c:	000b883a 	mov	r5,zero
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
		printf("Next song is played.\n");
	}
}
void syncPrev(int song_id) {
  801960:	202d883a 	mov	r22,r4
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  801964:	010000c4 	movi	r4,3
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
		printf("Next song is played.\n");
	}
}
void syncPrev(int song_id) {
  801968:	dfc00515 	stw	ra,20(sp)
  80196c:	dd000315 	stw	r20,12(sp)
  801970:	dcc00215 	stw	r19,8(sp)
  801974:	dc400115 	stw	r17,4(sp)
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
  801978:	04c00044 	movi	r19,1
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  80197c:	080141c0 	call	80141c <initCmd>
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
  801980:	050020f4 	movhi	r20,131
  801984:	a53b0504 	addi	r20,r20,-5100
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
  801988:	980b883a 	mov	r5,r19
  80198c:	1009883a 	mov	r4,r2
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  801990:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  801994:	08071c80 	call	8071c8 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  801998:	a1001117 	ldw	r4,68(r20)
  80199c:	880b883a 	mov	r5,r17
  8019a0:	08025700 	call	802570 <addCmd>
	}
}
void syncPrev(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8019a4:	01000104 	movi	r4,4
  8019a8:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", song_id);
  8019ac:	b00d883a 	mov	r6,r22
  8019b0:	1009883a 	mov	r4,r2
  8019b4:	014020b4 	movhi	r5,130
  8019b8:	297f0404 	addi	r5,r5,-1008
	}
}
void syncPrev(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8019bc:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", song_id);
  8019c0:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(7, 1, temp);
  8019c4:	d80d883a 	mov	r6,sp
  8019c8:	980b883a 	mov	r5,r19
  8019cc:	010001c4 	movi	r4,7
  8019d0:	080141c0 	call	80141c <initCmd>
	addCmd(com.scheduler, cmd);
  8019d4:	a1001117 	ldw	r4,68(r20)
  8019d8:	100b883a 	mov	r5,r2
  8019dc:	08025700 	call	802570 <addCmd>
	free(temp[0]);
  8019e0:	d9000017 	ldw	r4,0(sp)
  8019e4:	080bb580 	call	80bb58 <free>

}
  8019e8:	dfc00517 	ldw	ra,20(sp)
  8019ec:	dd800417 	ldw	r22,16(sp)
  8019f0:	dd000317 	ldw	r20,12(sp)
  8019f4:	dcc00217 	ldw	r19,8(sp)
  8019f8:	dc400117 	ldw	r17,4(sp)
  8019fc:	dec00604 	addi	sp,sp,24
  801a00:	f800283a 	ret

00801a04 <syncUpdatePos>:
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
	db.index_list_song[list_id][song_id] = 0;
}

//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
  801a04:	defff904 	addi	sp,sp,-28
  801a08:	dc400315 	stw	r17,12(sp)
  801a0c:	2023883a 	mov	r17,r4
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801a10:	01000104 	movi	r4,4
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
	db.index_list_song[list_id][song_id] = 0;
}

//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
  801a14:	dfc00615 	stw	ra,24(sp)
  801a18:	dd400515 	stw	r21,20(sp)
  801a1c:	dcc00415 	stw	r19,16(sp)
  801a20:	302b883a 	mov	r21,r6
  801a24:	2827883a 	mov	r19,r5
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801a28:	080bb6c0 	call	80bb6c <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  801a2c:	01000104 	movi	r4,4
}

//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801a30:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  801a34:	080bb6c0 	call	80bb6c <malloc>
	temp[2] = (char*)malloc(sizeof(char)*4);
  801a38:	01000104 	movi	r4,4

//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  801a3c:	d8800115 	stw	r2,4(sp)
	temp[2] = (char*)malloc(sizeof(char)*4);
  801a40:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", song_id);
  801a44:	d9000017 	ldw	r4,0(sp)
  801a48:	880d883a 	mov	r6,r17
  801a4c:	014020b4 	movhi	r5,130
  801a50:	297f0404 	addi	r5,r5,-1008
//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
	temp[2] = (char*)malloc(sizeof(char)*4);
  801a54:	d8800215 	stw	r2,8(sp)
	sprintf(temp[0], "%d", song_id);
  801a58:	080cba40 	call	80cba4 <sprintf>
	sprintf(temp[1], "%d", pos);
  801a5c:	d9000117 	ldw	r4,4(sp)
  801a60:	980d883a 	mov	r6,r19
  801a64:	014020b4 	movhi	r5,130
  801a68:	297f0404 	addi	r5,r5,-1008
  801a6c:	080cba40 	call	80cba4 <sprintf>
	sprintf(temp[2], "%d", isStart);
  801a70:	d9000217 	ldw	r4,8(sp)
  801a74:	a80d883a 	mov	r6,r21
  801a78:	014020b4 	movhi	r5,130
  801a7c:	297f0404 	addi	r5,r5,-1008
  801a80:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(16, 3, temp);
  801a84:	014000c4 	movi	r5,3
  801a88:	d80d883a 	mov	r6,sp
  801a8c:	01000404 	movi	r4,16
  801a90:	080141c0 	call	80141c <initCmd>
  801a94:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  801a98:	1009883a 	mov	r4,r2
  801a9c:	01400044 	movi	r5,1
  801aa0:	08071c80 	call	8071c8 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  801aa4:	88c00117 	ldw	r3,4(r17)
  801aa8:	18000e1e 	bne	r3,zero,801ae4 <syncUpdatePos+0xe0>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  801aac:	8809883a 	mov	r4,r17
  801ab0:	080bb580 	call	80bb58 <free>
	sprintf(temp[1], "%d", pos);
	sprintf(temp[2], "%d", isStart);
	struct Command* cmd = initCmd(16, 3, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  801ab4:	d9000017 	ldw	r4,0(sp)
  801ab8:	080bb580 	call	80bb58 <free>
	free(temp[1]);
  801abc:	d9000117 	ldw	r4,4(sp)
  801ac0:	080bb580 	call	80bb58 <free>
	free(temp[2]);
  801ac4:	d9000217 	ldw	r4,8(sp)
  801ac8:	080bb580 	call	80bb58 <free>
}
  801acc:	dfc00617 	ldw	ra,24(sp)
  801ad0:	dd400517 	ldw	r21,20(sp)
  801ad4:	dcc00417 	ldw	r19,16(sp)
  801ad8:	dc400317 	ldw	r17,12(sp)
  801adc:	dec00704 	addi	sp,sp,28
  801ae0:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  801ae4:	89000217 	ldw	r4,8(r17)
  801ae8:	080bb580 	call	80bb58 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801aec:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  801af0:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801af4:	0080100e 	bge	zero,r2,801b38 <syncUpdatePos+0x134>
  801af8:	89000317 	ldw	r4,12(r17)
  801afc:	002b883a 	mov	r21,zero
  801b00:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  801b04:	9905883a 	add	r2,r19,r4
  801b08:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801b0c:	ad400044 	addi	r21,r21,1
			free((*this)->parameters[i]);
  801b10:	080bb580 	call	80bb58 <free>
			(*this)->parameters[i] = NULL;
  801b14:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801b18:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  801b1c:	9905883a 	add	r2,r19,r4
  801b20:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801b24:	9cc00104 	addi	r19,r19,4
  801b28:	a8fff616 	blt	r21,r3,801b04 <syncUpdatePos+0x100>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  801b2c:	080bb580 	call	80bb58 <free>
		(*this)->parameters = NULL;
  801b30:	88000315 	stw	zero,12(r17)
  801b34:	003fdd06 	br	801aac <syncUpdatePos+0xa8>
  801b38:	89000317 	ldw	r4,12(r17)
  801b3c:	003ffb06 	br	801b2c <syncUpdatePos+0x128>

00801b40 <play>:
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
	if(db.songs[id] == NULL || id <= 0 || id > MAX_SONGS) return;
  801b40:	2105883a 	add	r2,r4,r4
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
  801b44:	defffb04 	addi	sp,sp,-20
	if(db.songs[id] == NULL || id <= 0 || id > MAX_SONGS) return;
  801b48:	1085883a 	add	r2,r2,r2
  801b4c:	00c020b4 	movhi	r3,130
  801b50:	18d1e904 	addi	r3,r3,18340
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
  801b54:	dcc00315 	stw	r19,12(sp)
	if(db.songs[id] == NULL || id <= 0 || id > MAX_SONGS) return;
  801b58:	10e7883a 	add	r19,r2,r3
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
  801b5c:	dc000015 	stw	r16,0(sp)
  801b60:	2021883a 	mov	r16,r4
	if(db.songs[id] == NULL || id <= 0 || id > MAX_SONGS) return;
  801b64:	99003617 	ldw	r4,216(r19)
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
  801b68:	dc800215 	stw	r18,8(sp)
  801b6c:	dc400115 	stw	r17,4(sp)
  801b70:	dfc00415 	stw	ra,16(sp)
  801b74:	3025883a 	mov	r18,r6
  801b78:	2823883a 	mov	r17,r5
	if(db.songs[id] == NULL || id <= 0 || id > MAX_SONGS) return;
  801b7c:	20000726 	beq	r4,zero,801b9c <play+0x5c>
  801b80:	0400060e 	bge	zero,r16,801b9c <play+0x5c>
  801b84:	00801944 	movi	r2,101
	printf("A song %d is started at %d volume.\n", id, vol);
  801b88:	800b883a 	mov	r5,r16
  801b8c:	880d883a 	mov	r6,r17
  801b90:	010020b4 	movhi	r4,130
  801b94:	213f0504 	addi	r4,r4,-1004
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
	if(db.songs[id] == NULL || id <= 0 || id > MAX_SONGS) return;
  801b98:	1400070e 	bge	r2,r16,801bb8 <play+0x78>
	playSong(db.songs[id], vol, pos, 0);
	syncUpdatePos(id, pos, 1);
	updateMixer();
	enableAudioDeviceController();
	printf("A song %d is played at %d position.\n", id, pos);
}
  801b9c:	dfc00417 	ldw	ra,16(sp)
  801ba0:	dcc00317 	ldw	r19,12(sp)
  801ba4:	dc800217 	ldw	r18,8(sp)
  801ba8:	dc400117 	ldw	r17,4(sp)
  801bac:	dc000017 	ldw	r16,0(sp)
  801bb0:	dec00504 	addi	sp,sp,20
  801bb4:	f800283a 	ret
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
	if(db.songs[id] == NULL || id <= 0 || id > MAX_SONGS) return;
	printf("A song %d is started at %d volume.\n", id, vol);
  801bb8:	080c3f80 	call	80c3f8 <printf>
	playSong(db.songs[id], vol, pos, 0);
  801bbc:	8809883a 	mov	r4,r17
  801bc0:	080a4100 	call	80a410 <__floatsisf>
  801bc4:	99003617 	ldw	r4,216(r19)
  801bc8:	100b883a 	mov	r5,r2
  801bcc:	000f883a 	mov	r7,zero
  801bd0:	900d883a 	mov	r6,r18
  801bd4:	08081b40 	call	8081b4 <playSong>
	syncUpdatePos(id, pos, 1);
  801bd8:	8009883a 	mov	r4,r16
  801bdc:	900b883a 	mov	r5,r18
  801be0:	01800044 	movi	r6,1
  801be4:	0801a040 	call	801a04 <syncUpdatePos>
	updateMixer();
  801be8:	08098380 	call	809838 <updateMixer>
	enableAudioDeviceController();
  801bec:	080876c0 	call	80876c <enableAudioDeviceController>
	printf("A song %d is played at %d position.\n", id, pos);
  801bf0:	800b883a 	mov	r5,r16
  801bf4:	900d883a 	mov	r6,r18
  801bf8:	010020b4 	movhi	r4,130
  801bfc:	213f0e04 	addi	r4,r4,-968
}
  801c00:	dfc00417 	ldw	ra,16(sp)
  801c04:	dcc00317 	ldw	r19,12(sp)
  801c08:	dc800217 	ldw	r18,8(sp)
  801c0c:	dc400117 	ldw	r17,4(sp)
  801c10:	dc000017 	ldw	r16,0(sp)
  801c14:	dec00504 	addi	sp,sp,20
	printf("A song %d is started at %d volume.\n", id, vol);
	playSong(db.songs[id], vol, pos, 0);
	syncUpdatePos(id, pos, 1);
	updateMixer();
	enableAudioDeviceController();
	printf("A song %d is played at %d position.\n", id, pos);
  801c18:	080c3f81 	jmpi	80c3f8 <printf>

00801c1c <prev>:
	addCmd(com.scheduler, cmd);
	free(temp[0]);

}
//index 7
void prev(int song_id) {
  801c1c:	defffe04 	addi	sp,sp,-8
  801c20:	dc000015 	stw	r16,0(sp)
  801c24:	2021883a 	mov	r16,r4
	printf("Previous song is selected.\n");
  801c28:	010020b4 	movhi	r4,130
  801c2c:	213f1804 	addi	r4,r4,-928
	addCmd(com.scheduler, cmd);
	free(temp[0]);

}
//index 7
void prev(int song_id) {
  801c30:	dfc00115 	stw	ra,4(sp)
	printf("Previous song is selected.\n");
  801c34:	080c5100 	call	80c510 <puts>
	if(db.curr_playlist_id == 0 && song_id > 1) {
  801c38:	010020b4 	movhi	r4,130
  801c3c:	2111e904 	addi	r4,r4,18340
  801c40:	20803417 	ldw	r2,208(r4)
		play(song_id-1, 100, 0);
		printf("Previous song is played.\n");
	} else if(db.curr_playlist_id != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1], 100, 0);
  801c44:	01401904 	movi	r5,100
  801c48:	000d883a 	mov	r6,zero
  801c4c:	11c01964 	muli	r7,r2,101

}
//index 7
void prev(int song_id) {
	printf("Previous song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id > 1) {
  801c50:	10000a1e 	bne	r2,zero,801c7c <prev+0x60>
  801c54:	00800044 	movi	r2,1
		play(song_id-1, 100, 0);
  801c58:	813fffc4 	addi	r4,r16,-1

}
//index 7
void prev(int song_id) {
	printf("Previous song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id > 1) {
  801c5c:	1400180e 	bge	r2,r16,801cc0 <prev+0xa4>
		play(song_id-1, 100, 0);
		printf("Previous song is played.\n");
	} else if(db.curr_playlist_id != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1], 100, 0);
  801c60:	0801b400 	call	801b40 <play>
		printf("Previous song is played.\n");
  801c64:	010020b4 	movhi	r4,130
  801c68:	213f1f04 	addi	r4,r4,-900
	}
}
  801c6c:	dfc00117 	ldw	ra,4(sp)
  801c70:	dc000017 	ldw	r16,0(sp)
  801c74:	dec00204 	addi	sp,sp,8
	if(db.curr_playlist_id == 0 && song_id > 1) {
		play(song_id-1, 100, 0);
		printf("Previous song is played.\n");
	} else if(db.curr_playlist_id != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1], 100, 0);
		printf("Previous song is played.\n");
  801c78:	080c5101 	jmpi	80c510 <puts>
	printf("Previous song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id > 1) {
		play(song_id-1, 100, 0);
		printf("Previous song is played.\n");
	} else if(db.curr_playlist_id != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1], 100, 0);
  801c7c:	3c05883a 	add	r2,r7,r16
  801c80:	1085883a 	add	r2,r2,r2
  801c84:	1085883a 	add	r2,r2,r2
  801c88:	1105883a 	add	r2,r2,r4
  801c8c:	10c0a817 	ldw	r3,672(r2)
  801c90:	38c7883a 	add	r3,r7,r3
  801c94:	18c7883a 	add	r3,r3,r3
  801c98:	18c7883a 	add	r3,r3,r3
  801c9c:	1907883a 	add	r3,r3,r4
  801ca0:	1914c617 	ldw	r4,21272(r3)
  801ca4:	0801b400 	call	801b40 <play>
		printf("Previous song is played.\n");
  801ca8:	010020b4 	movhi	r4,130
  801cac:	213f1f04 	addi	r4,r4,-900
	}
}
  801cb0:	dfc00117 	ldw	ra,4(sp)
  801cb4:	dc000017 	ldw	r16,0(sp)
  801cb8:	dec00204 	addi	sp,sp,8
	if(db.curr_playlist_id == 0 && song_id > 1) {
		play(song_id-1, 100, 0);
		printf("Previous song is played.\n");
	} else if(db.curr_playlist_id != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1], 100, 0);
		printf("Previous song is played.\n");
  801cbc:	080c5101 	jmpi	80c510 <puts>
	}
}
  801cc0:	dfc00117 	ldw	ra,4(sp)
  801cc4:	dc000017 	ldw	r16,0(sp)
  801cc8:	dec00204 	addi	sp,sp,8
  801ccc:	f800283a 	ret

00801cd0 <next>:
	struct Command* cmd = initCmd(6, 1, temp);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}
//index 6
void next(int song_id) {
  801cd0:	defffe04 	addi	sp,sp,-8
  801cd4:	dc000015 	stw	r16,0(sp)
  801cd8:	2021883a 	mov	r16,r4
	printf("Next song is selected.\n");
  801cdc:	010020b4 	movhi	r4,130
  801ce0:	213f2604 	addi	r4,r4,-872
	struct Command* cmd = initCmd(6, 1, temp);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}
//index 6
void next(int song_id) {
  801ce4:	dfc00115 	stw	ra,4(sp)
	printf("Next song is selected.\n");
  801ce8:	080c5100 	call	80c510 <puts>
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
  801cec:	010020b4 	movhi	r4,130
  801cf0:	2111e904 	addi	r4,r4,18340
  801cf4:	20803417 	ldw	r2,208(r4)
		play(song_id+1, 100, 0);
		printf("Next song is played.\n");
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
  801cf8:	11c01964 	muli	r7,r2,101
	free(temp[0]);
}
//index 6
void next(int song_id) {
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
  801cfc:	1000091e 	bne	r2,zero,801d24 <next+0x54>
  801d00:	2080a717 	ldw	r2,668(r4)
		play(song_id+1, 100, 0);
  801d04:	01401904 	movi	r5,100
  801d08:	81000044 	addi	r4,r16,1
  801d0c:	000d883a 	mov	r6,zero
	free(temp[0]);
}
//index 6
void next(int song_id) {
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
  801d10:	80801216 	blt	r16,r2,801d5c <next+0x8c>
		printf("Next song is played.\n");
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
		printf("Next song is played.\n");
	}
}
  801d14:	dfc00117 	ldw	ra,4(sp)
  801d18:	dc000017 	ldw	r16,0(sp)
  801d1c:	dec00204 	addi	sp,sp,8
  801d20:	f800283a 	ret
void next(int song_id) {
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
		play(song_id+1, 100, 0);
		printf("Next song is played.\n");
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
  801d24:	3c05883a 	add	r2,r7,r16
  801d28:	1085883a 	add	r2,r2,r2
  801d2c:	1085883a 	add	r2,r2,r2
  801d30:	1105883a 	add	r2,r2,r4
  801d34:	10c0a817 	ldw	r3,672(r2)
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
  801d38:	01401904 	movi	r5,100
  801d3c:	000d883a 	mov	r6,zero
void next(int song_id) {
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
		play(song_id+1, 100, 0);
		printf("Next song is played.\n");
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
  801d40:	38c7883a 	add	r3,r7,r3
  801d44:	18c7883a 	add	r3,r3,r3
  801d48:	18c7883a 	add	r3,r3,r3
  801d4c:	1907883a 	add	r3,r3,r4
  801d50:	1894c817 	ldw	r2,21280(r3)
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
  801d54:	1009883a 	mov	r4,r2
void next(int song_id) {
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
		play(song_id+1, 100, 0);
		printf("Next song is played.\n");
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
  801d58:	103fee26 	beq	r2,zero,801d14 <next+0x44>
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
  801d5c:	0801b400 	call	801b40 <play>
		printf("Next song is played.\n");
  801d60:	010020b4 	movhi	r4,130
  801d64:	213f2c04 	addi	r4,r4,-848
	}
}
  801d68:	dfc00117 	ldw	ra,4(sp)
  801d6c:	dc000017 	ldw	r16,0(sp)
  801d70:	dec00204 	addi	sp,sp,8
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
		play(song_id+1, 100, 0);
		printf("Next song is played.\n");
	} else if(db.curr_playlist_id != 0 && db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0) {
		play(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1], 100, 0);
		printf("Next song is played.\n");
  801d74:	080c5101 	jmpi	80c510 <puts>

00801d78 <syncAddExisitedSongToList>:
		}
	}
}

//index 14
void syncAddExisitedSongToList(int list_id, int song_id) {
  801d78:	defffa04 	addi	sp,sp,-24
  801d7c:	dc400315 	stw	r17,12(sp)
  801d80:	2023883a 	mov	r17,r4
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801d84:	01000104 	movi	r4,4
		}
	}
}

//index 14
void syncAddExisitedSongToList(int list_id, int song_id) {
  801d88:	dfc00515 	stw	ra,20(sp)
  801d8c:	dcc00415 	stw	r19,16(sp)
  801d90:	dc000215 	stw	r16,8(sp)
  801d94:	2827883a 	mov	r19,r5
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801d98:	080bb6c0 	call	80bb6c <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  801d9c:	01000104 	movi	r4,4
}

//index 14
void syncAddExisitedSongToList(int list_id, int song_id) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801da0:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  801da4:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", list_id);
  801da8:	d9000017 	ldw	r4,0(sp)
  801dac:	880d883a 	mov	r6,r17
  801db0:	014020b4 	movhi	r5,130
  801db4:	297f0404 	addi	r5,r5,-1008

//index 14
void syncAddExisitedSongToList(int list_id, int song_id) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  801db8:	d8800115 	stw	r2,4(sp)
	sprintf(temp[0], "%d", list_id);
  801dbc:	080cba40 	call	80cba4 <sprintf>
	sprintf(temp[1], "%d", song_id);
  801dc0:	d9000117 	ldw	r4,4(sp)
  801dc4:	980d883a 	mov	r6,r19
  801dc8:	014020b4 	movhi	r5,130
  801dcc:	297f0404 	addi	r5,r5,-1008
  801dd0:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(14, 2, temp);
  801dd4:	01400084 	movi	r5,2
  801dd8:	d80d883a 	mov	r6,sp
  801ddc:	01000384 	movi	r4,14
  801de0:	080141c0 	call	80141c <initCmd>
  801de4:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  801de8:	1009883a 	mov	r4,r2
  801dec:	01400044 	movi	r5,1
  801df0:	08071c80 	call	8071c8 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  801df4:	88c00117 	ldw	r3,4(r17)
  801df8:	18000c1e 	bne	r3,zero,801e2c <syncAddExisitedSongToList+0xb4>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  801dfc:	8809883a 	mov	r4,r17
  801e00:	080bb580 	call	80bb58 <free>
	sprintf(temp[0], "%d", list_id);
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  801e04:	d9000017 	ldw	r4,0(sp)
  801e08:	080bb580 	call	80bb58 <free>
	free(temp[1]);
  801e0c:	d9000117 	ldw	r4,4(sp)
  801e10:	080bb580 	call	80bb58 <free>
}
  801e14:	dfc00517 	ldw	ra,20(sp)
  801e18:	dcc00417 	ldw	r19,16(sp)
  801e1c:	dc400317 	ldw	r17,12(sp)
  801e20:	dc000217 	ldw	r16,8(sp)
  801e24:	dec00604 	addi	sp,sp,24
  801e28:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  801e2c:	89000217 	ldw	r4,8(r17)
  801e30:	080bb580 	call	80bb58 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801e34:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  801e38:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801e3c:	0080100e 	bge	zero,r2,801e80 <syncAddExisitedSongToList+0x108>
  801e40:	89000317 	ldw	r4,12(r17)
  801e44:	0021883a 	mov	r16,zero
  801e48:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  801e4c:	9905883a 	add	r2,r19,r4
  801e50:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801e54:	84000044 	addi	r16,r16,1
			free((*this)->parameters[i]);
  801e58:	080bb580 	call	80bb58 <free>
			(*this)->parameters[i] = NULL;
  801e5c:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801e60:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  801e64:	9905883a 	add	r2,r19,r4
  801e68:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801e6c:	9cc00104 	addi	r19,r19,4
  801e70:	80fff616 	blt	r16,r3,801e4c <syncAddExisitedSongToList+0xd4>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  801e74:	080bb580 	call	80bb58 <free>
		(*this)->parameters = NULL;
  801e78:	88000315 	stw	zero,12(r17)
  801e7c:	003fdf06 	br	801dfc <syncAddExisitedSongToList+0x84>
  801e80:	89000317 	ldw	r4,12(r17)
  801e84:	003ffb06 	br	801e74 <syncAddExisitedSongToList+0xfc>

00801e88 <syncAddSongToList>:
	struct Command* cmd = initCmd(12, 0, NULL);
	send(cmd, CMD);
	killCmd(&cmd);
}

void syncAddSongToList(int list_id, int song_id) {
  801e88:	defffa04 	addi	sp,sp,-24
  801e8c:	dc400315 	stw	r17,12(sp)
  801e90:	2023883a 	mov	r17,r4
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801e94:	01000104 	movi	r4,4
	struct Command* cmd = initCmd(12, 0, NULL);
	send(cmd, CMD);
	killCmd(&cmd);
}

void syncAddSongToList(int list_id, int song_id) {
  801e98:	dfc00515 	stw	ra,20(sp)
  801e9c:	dcc00415 	stw	r19,16(sp)
  801ea0:	dc000215 	stw	r16,8(sp)
  801ea4:	2827883a 	mov	r19,r5
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801ea8:	080bb6c0 	call	80bb6c <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  801eac:	01000104 	movi	r4,4
	killCmd(&cmd);
}

void syncAddSongToList(int list_id, int song_id) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  801eb0:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  801eb4:	080bb6c0 	call	80bb6c <malloc>
	sprintf(temp[0], "%d", list_id);
  801eb8:	d9000017 	ldw	r4,0(sp)
  801ebc:	880d883a 	mov	r6,r17
  801ec0:	014020b4 	movhi	r5,130
  801ec4:	297f0404 	addi	r5,r5,-1008
}

void syncAddSongToList(int list_id, int song_id) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  801ec8:	d8800115 	stw	r2,4(sp)
	sprintf(temp[0], "%d", list_id);
  801ecc:	080cba40 	call	80cba4 <sprintf>
	sprintf(temp[1], "%d", song_id);
  801ed0:	d9000117 	ldw	r4,4(sp)
  801ed4:	980d883a 	mov	r6,r19
  801ed8:	014020b4 	movhi	r5,130
  801edc:	297f0404 	addi	r5,r5,-1008
  801ee0:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(13, 2, temp);
  801ee4:	01400084 	movi	r5,2
  801ee8:	d80d883a 	mov	r6,sp
  801eec:	01000344 	movi	r4,13
  801ef0:	080141c0 	call	80141c <initCmd>
  801ef4:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  801ef8:	1009883a 	mov	r4,r2
  801efc:	01400044 	movi	r5,1
  801f00:	08071c80 	call	8071c8 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  801f04:	88c00117 	ldw	r3,4(r17)
  801f08:	18000c1e 	bne	r3,zero,801f3c <syncAddSongToList+0xb4>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  801f0c:	8809883a 	mov	r4,r17
  801f10:	080bb580 	call	80bb58 <free>
	sprintf(temp[0], "%d", list_id);
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(13, 2, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  801f14:	d9000017 	ldw	r4,0(sp)
  801f18:	080bb580 	call	80bb58 <free>
	free(temp[1]);
  801f1c:	d9000117 	ldw	r4,4(sp)
  801f20:	080bb580 	call	80bb58 <free>
	//addCmd(com.scheduler, cmd);
}
  801f24:	dfc00517 	ldw	ra,20(sp)
  801f28:	dcc00417 	ldw	r19,16(sp)
  801f2c:	dc400317 	ldw	r17,12(sp)
  801f30:	dc000217 	ldw	r16,8(sp)
  801f34:	dec00604 	addi	sp,sp,24
  801f38:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  801f3c:	89000217 	ldw	r4,8(r17)
  801f40:	080bb580 	call	80bb58 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801f44:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  801f48:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801f4c:	0080100e 	bge	zero,r2,801f90 <syncAddSongToList+0x108>
  801f50:	89000317 	ldw	r4,12(r17)
  801f54:	0021883a 	mov	r16,zero
  801f58:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  801f5c:	9905883a 	add	r2,r19,r4
  801f60:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801f64:	84000044 	addi	r16,r16,1
			free((*this)->parameters[i]);
  801f68:	080bb580 	call	80bb58 <free>
			(*this)->parameters[i] = NULL;
  801f6c:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801f70:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  801f74:	9905883a 	add	r2,r19,r4
  801f78:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801f7c:	9cc00104 	addi	r19,r19,4
  801f80:	80fff616 	blt	r16,r3,801f5c <syncAddSongToList+0xd4>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  801f84:	080bb580 	call	80bb58 <free>
		(*this)->parameters = NULL;
  801f88:	88000315 	stw	zero,12(r17)
  801f8c:	003fdf06 	br	801f0c <syncAddSongToList+0x84>
  801f90:	89000317 	ldw	r4,12(r17)
  801f94:	003ffb06 	br	801f84 <syncAddSongToList+0xfc>

00801f98 <syncDBFinish>:
/*
 * Send command to notify android app that the sync process at start up is finished
 * index: 12
 */

void syncDBFinish() {
  801f98:	defffc04 	addi	sp,sp,-16
	struct Command* cmd = initCmd(12, 0, NULL);
  801f9c:	000b883a 	mov	r5,zero
  801fa0:	000d883a 	mov	r6,zero
  801fa4:	01000304 	movi	r4,12
/*
 * Send command to notify android app that the sync process at start up is finished
 * index: 12
 */

void syncDBFinish() {
  801fa8:	dfc00315 	stw	ra,12(sp)
  801fac:	dc000015 	stw	r16,0(sp)
  801fb0:	dc800215 	stw	r18,8(sp)
  801fb4:	dc400115 	stw	r17,4(sp)
	struct Command* cmd = initCmd(12, 0, NULL);
  801fb8:	080141c0 	call	80141c <initCmd>
  801fbc:	1021883a 	mov	r16,r2
	send(cmd, CMD);
  801fc0:	1009883a 	mov	r4,r2
  801fc4:	01400044 	movi	r5,1
  801fc8:	08071c80 	call	8071c8 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  801fcc:	80c00117 	ldw	r3,4(r16)
  801fd0:	1800071e 	bne	r3,zero,801ff0 <syncDBFinish+0x58>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  801fd4:	8009883a 	mov	r4,r16

void syncDBFinish() {
	struct Command* cmd = initCmd(12, 0, NULL);
	send(cmd, CMD);
	killCmd(&cmd);
}
  801fd8:	dfc00317 	ldw	ra,12(sp)
  801fdc:	dc800217 	ldw	r18,8(sp)
  801fe0:	dc400117 	ldw	r17,4(sp)
  801fe4:	dc000017 	ldw	r16,0(sp)
  801fe8:	dec00404 	addi	sp,sp,16
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  801fec:	080bb581 	jmpi	80bb58 <free>
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  801ff0:	81000217 	ldw	r4,8(r16)
  801ff4:	080bb580 	call	80bb58 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  801ff8:	80800117 	ldw	r2,4(r16)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  801ffc:	80000215 	stw	zero,8(r16)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802000:	0080160e 	bge	zero,r2,80205c <syncDBFinish+0xc4>
  802004:	81000317 	ldw	r4,12(r16)
  802008:	0025883a 	mov	r18,zero
  80200c:	0023883a 	mov	r17,zero
			free((*this)->parameters[i]);
  802010:	8905883a 	add	r2,r17,r4
  802014:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802018:	94800044 	addi	r18,r18,1
			free((*this)->parameters[i]);
  80201c:	080bb580 	call	80bb58 <free>
			(*this)->parameters[i] = NULL;
  802020:	81000317 	ldw	r4,12(r16)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802024:	80c00117 	ldw	r3,4(r16)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  802028:	8905883a 	add	r2,r17,r4
  80202c:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802030:	8c400104 	addi	r17,r17,4
  802034:	90fff616 	blt	r18,r3,802010 <syncDBFinish+0x78>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  802038:	080bb580 	call	80bb58 <free>
		(*this)->parameters = NULL;
	}
	free(*this);
  80203c:	8009883a 	mov	r4,r16
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
  802040:	80000315 	stw	zero,12(r16)

void syncDBFinish() {
	struct Command* cmd = initCmd(12, 0, NULL);
	send(cmd, CMD);
	killCmd(&cmd);
}
  802044:	dfc00317 	ldw	ra,12(sp)
  802048:	dc800217 	ldw	r18,8(sp)
  80204c:	dc400117 	ldw	r17,4(sp)
  802050:	dc000017 	ldw	r16,0(sp)
  802054:	dec00404 	addi	sp,sp,16
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  802058:	080bb581 	jmpi	80bb58 <free>
  80205c:	81000317 	ldw	r4,12(r16)
  802060:	003ff506 	br	802038 <syncDBFinish+0xa0>

00802064 <syncCreateSong>:
}
/*
 * Send command to create a song on android phone
 * index 10
 */
void syncCreateSong(char* song_name, int len) {
  802064:	defffa04 	addi	sp,sp,-24
  802068:	dc400315 	stw	r17,12(sp)
  80206c:	2023883a 	mov	r17,r4
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*15);
  802070:	010003c4 	movi	r4,15
}
/*
 * Send command to create a song on android phone
 * index 10
 */
void syncCreateSong(char* song_name, int len) {
  802074:	dfc00515 	stw	ra,20(sp)
  802078:	dcc00415 	stw	r19,16(sp)
  80207c:	dc000215 	stw	r16,8(sp)
  802080:	2827883a 	mov	r19,r5
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*15);
  802084:	080bb6c0 	call	80bb6c <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  802088:	01000104 	movi	r4,4
 * Send command to create a song on android phone
 * index 10
 */
void syncCreateSong(char* song_name, int len) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*15);
  80208c:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  802090:	080bb6c0 	call	80bb6c <malloc>
	strcpy(temp[0], song_name);
  802094:	d9000017 	ldw	r4,0(sp)
  802098:	880b883a 	mov	r5,r17
 * index 10
 */
void syncCreateSong(char* song_name, int len) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*15);
	temp[1] = (char*)malloc(sizeof(char)*4);
  80209c:	d8800115 	stw	r2,4(sp)
	strcpy(temp[0], song_name);
  8020a0:	080cdc40 	call	80cdc4 <strcpy>
	sprintf(temp[1], "%d", len);
  8020a4:	d9000117 	ldw	r4,4(sp)
  8020a8:	980d883a 	mov	r6,r19
  8020ac:	014020b4 	movhi	r5,130
  8020b0:	297f0404 	addi	r5,r5,-1008
  8020b4:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(10, 2, temp);
  8020b8:	01400084 	movi	r5,2
  8020bc:	d80d883a 	mov	r6,sp
  8020c0:	01000284 	movi	r4,10
  8020c4:	080141c0 	call	80141c <initCmd>
  8020c8:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8020cc:	1009883a 	mov	r4,r2
  8020d0:	01400044 	movi	r5,1
  8020d4:	08071c80 	call	8071c8 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  8020d8:	88c00117 	ldw	r3,4(r17)
  8020dc:	18000c1e 	bne	r3,zero,802110 <syncCreateSong+0xac>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  8020e0:	8809883a 	mov	r4,r17
  8020e4:	080bb580 	call	80bb58 <free>
	strcpy(temp[0], song_name);
	sprintf(temp[1], "%d", len);
	struct Command* cmd = initCmd(10, 2, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  8020e8:	d9000017 	ldw	r4,0(sp)
  8020ec:	080bb580 	call	80bb58 <free>
	free(temp[1]);
  8020f0:	d9000117 	ldw	r4,4(sp)
  8020f4:	080bb580 	call	80bb58 <free>
}
  8020f8:	dfc00517 	ldw	ra,20(sp)
  8020fc:	dcc00417 	ldw	r19,16(sp)
  802100:	dc400317 	ldw	r17,12(sp)
  802104:	dc000217 	ldw	r16,8(sp)
  802108:	dec00604 	addi	sp,sp,24
  80210c:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  802110:	89000217 	ldw	r4,8(r17)
  802114:	080bb580 	call	80bb58 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802118:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  80211c:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802120:	0080100e 	bge	zero,r2,802164 <syncCreateSong+0x100>
  802124:	89000317 	ldw	r4,12(r17)
  802128:	0021883a 	mov	r16,zero
  80212c:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  802130:	9905883a 	add	r2,r19,r4
  802134:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802138:	84000044 	addi	r16,r16,1
			free((*this)->parameters[i]);
  80213c:	080bb580 	call	80bb58 <free>
			(*this)->parameters[i] = NULL;
  802140:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802144:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  802148:	9905883a 	add	r2,r19,r4
  80214c:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802150:	9cc00104 	addi	r19,r19,4
  802154:	80fff616 	blt	r16,r3,802130 <syncCreateSong+0xcc>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  802158:	080bb580 	call	80bb58 <free>
		(*this)->parameters = NULL;
  80215c:	88000315 	stw	zero,12(r17)
  802160:	003fdf06 	br	8020e0 <syncCreateSong+0x7c>
  802164:	89000317 	ldw	r4,12(r17)
  802168:	003ffb06 	br	802158 <syncCreateSong+0xf4>

0080216c <syncCreateExisitedPlaylist>:
}
/*
 * send command to tell android phone to create a playlist with given information
 * index: 9
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
  80216c:	defff904 	addi	sp,sp,-28
  802170:	dc400315 	stw	r17,12(sp)
  802174:	2023883a 	mov	r17,r4
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
  802178:	010003c4 	movi	r4,15
}
/*
 * send command to tell android phone to create a playlist with given information
 * index: 9
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
  80217c:	dfc00615 	stw	ra,24(sp)
  802180:	dd400515 	stw	r21,20(sp)
  802184:	dcc00415 	stw	r19,16(sp)
  802188:	302b883a 	mov	r21,r6
  80218c:	2827883a 	mov	r19,r5
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
  802190:	080bb6c0 	call	80bb6c <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  802194:	01000104 	movi	r4,4
 * send command to tell android phone to create a playlist with given information
 * index: 9
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
  802198:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  80219c:	080bb6c0 	call	80bb6c <malloc>
	temp[2] = (char*)malloc(sizeof(char)*4);
  8021a0:	01000104 	movi	r4,4
 * index: 9
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
	temp[1] = (char*)malloc(sizeof(char)*4);
  8021a4:	d8800115 	stw	r2,4(sp)
	temp[2] = (char*)malloc(sizeof(char)*4);
  8021a8:	080bb6c0 	call	80bb6c <malloc>
	strcpy(temp[0], listname);
  8021ac:	d9000017 	ldw	r4,0(sp)
  8021b0:	880b883a 	mov	r5,r17
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
	temp[1] = (char*)malloc(sizeof(char)*4);
	temp[2] = (char*)malloc(sizeof(char)*4);
  8021b4:	d8800215 	stw	r2,8(sp)
	strcpy(temp[0], listname);
  8021b8:	080cdc40 	call	80cdc4 <strcpy>
	sprintf(temp[1], "%d", num_of_songs);
  8021bc:	d9000117 	ldw	r4,4(sp)
  8021c0:	980d883a 	mov	r6,r19
  8021c4:	014020b4 	movhi	r5,130
  8021c8:	297f0404 	addi	r5,r5,-1008
  8021cc:	080cba40 	call	80cba4 <sprintf>
	sprintf(temp[2], "%d", id);
  8021d0:	d9000217 	ldw	r4,8(sp)
  8021d4:	a80d883a 	mov	r6,r21
  8021d8:	014020b4 	movhi	r5,130
  8021dc:	297f0404 	addi	r5,r5,-1008
  8021e0:	080cba40 	call	80cba4 <sprintf>
	struct Command* cmd = initCmd(9, 3, temp);
  8021e4:	014000c4 	movi	r5,3
  8021e8:	d80d883a 	mov	r6,sp
  8021ec:	01000244 	movi	r4,9
  8021f0:	080141c0 	call	80141c <initCmd>
  8021f4:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8021f8:	1009883a 	mov	r4,r2
  8021fc:	01400044 	movi	r5,1
  802200:	08071c80 	call	8071c8 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  802204:	88c00117 	ldw	r3,4(r17)
  802208:	18000e1e 	bne	r3,zero,802244 <syncCreateExisitedPlaylist+0xd8>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  80220c:	8809883a 	mov	r4,r17
  802210:	080bb580 	call	80bb58 <free>
	sprintf(temp[1], "%d", num_of_songs);
	sprintf(temp[2], "%d", id);
	struct Command* cmd = initCmd(9, 3, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  802214:	d9000017 	ldw	r4,0(sp)
  802218:	080bb580 	call	80bb58 <free>
	free(temp[1]);
  80221c:	d9000117 	ldw	r4,4(sp)
  802220:	080bb580 	call	80bb58 <free>
	free(temp[2]);
  802224:	d9000217 	ldw	r4,8(sp)
  802228:	080bb580 	call	80bb58 <free>
}
  80222c:	dfc00617 	ldw	ra,24(sp)
  802230:	dd400517 	ldw	r21,20(sp)
  802234:	dcc00417 	ldw	r19,16(sp)
  802238:	dc400317 	ldw	r17,12(sp)
  80223c:	dec00704 	addi	sp,sp,28
  802240:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  802244:	89000217 	ldw	r4,8(r17)
  802248:	080bb580 	call	80bb58 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  80224c:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  802250:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802254:	0080100e 	bge	zero,r2,802298 <syncCreateExisitedPlaylist+0x12c>
  802258:	89000317 	ldw	r4,12(r17)
  80225c:	002b883a 	mov	r21,zero
  802260:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  802264:	9905883a 	add	r2,r19,r4
  802268:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  80226c:	ad400044 	addi	r21,r21,1
			free((*this)->parameters[i]);
  802270:	080bb580 	call	80bb58 <free>
			(*this)->parameters[i] = NULL;
  802274:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802278:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  80227c:	9905883a 	add	r2,r19,r4
  802280:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802284:	9cc00104 	addi	r19,r19,4
  802288:	a8fff616 	blt	r21,r3,802264 <syncCreateExisitedPlaylist+0xf8>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  80228c:	080bb580 	call	80bb58 <free>
		(*this)->parameters = NULL;
  802290:	88000315 	stw	zero,12(r17)
  802294:	003fdd06 	br	80220c <syncCreateExisitedPlaylist+0xa0>
  802298:	89000317 	ldw	r4,12(r17)
  80229c:	003ffb06 	br	80228c <syncCreateExisitedPlaylist+0x120>

008022a0 <cmdProcessing>:
}
/*
 * This function schedule a command in the waiting list to be executed
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
  8022a0:	20800017 	ldw	r2,0(r4)
	enqueue(this->cmds, (void*)cmd);
}
/*
 * This function schedule a command in the waiting list to be executed
 */
void cmdProcessing(struct CmdScheduler* this) {
  8022a4:	defffa04 	addi	sp,sp,-24
  8022a8:	dc000115 	stw	r16,4(sp)
	if(this->cmds->size <= 0 || this == NULL) return;
  8022ac:	14000017 	ldw	r16,0(r2)
	enqueue(this->cmds, (void*)cmd);
}
/*
 * This function schedule a command in the waiting list to be executed
 */
void cmdProcessing(struct CmdScheduler* this) {
  8022b0:	dc800315 	stw	r18,12(sp)
  8022b4:	dfc00515 	stw	ra,20(sp)
  8022b8:	dcc00415 	stw	r19,16(sp)
  8022bc:	dc400215 	stw	r17,8(sp)
  8022c0:	2025883a 	mov	r18,r4
	if(this->cmds->size <= 0 || this == NULL) return;
  8022c4:	04002d0e 	bge	zero,r16,80237c <cmdProcessing+0xdc>
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
		cmd = dequeue(this->cmds);
  8022c8:	91000017 	ldw	r4,0(r18)
  8022cc:	0806dd00 	call	806dd0 <dequeue>
		switch(cmd->cmd_index) {
  8022d0:	10c00017 	ldw	r3,0(r2)
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
		cmd = dequeue(this->cmds);
  8022d4:	100b883a 	mov	r5,r2
  8022d8:	d8800015 	stw	r2,0(sp)
		switch(cmd->cmd_index) {
  8022dc:	008003c4 	movi	r2,15
  8022e0:	10c02236 	bltu	r2,r3,80236c <cmdProcessing+0xcc>
  8022e4:	18c5883a 	add	r2,r3,r3
  8022e8:	1085883a 	add	r2,r2,r2
  8022ec:	00c02034 	movhi	r3,128
  8022f0:	18c8c004 	addi	r3,r3,8960
  8022f4:	10c5883a 	add	r2,r2,r3
  8022f8:	11000017 	ldw	r4,0(r2)
  8022fc:	2000683a 	jmp	r4
  802300:	0080236c 	andhi	r2,zero,141
  802304:	00802398 	cmpnei	r2,zero,142
  802308:	008023f0 	cmpltui	r2,zero,143
  80230c:	00802418 	cmpnei	r2,zero,144
  802310:	00802430 	cmpltui	r2,zero,144
  802314:	00802470 	cmpltui	r2,zero,145
  802318:	00802498 	cmpnei	r2,zero,146
  80231c:	008024c0 	call	8024c <__alt_mem_sdram-0x77fdb4>
  802320:	008024e8 	cmpgeui	r2,zero,147
  802324:	0080236c 	andhi	r2,zero,141
  802328:	0080236c 	andhi	r2,zero,141
  80232c:	00802508 	cmpgei	r2,zero,148
  802330:	0080236c 	andhi	r2,zero,141
  802334:	00802530 	cmpltui	r2,zero,148
  802338:	0080236c 	andhi	r2,zero,141
  80233c:	00802340 	call	80234 <__alt_mem_sdram-0x77fdcc>
			break;
		case 14:
			//empty
			break;
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  802340:	28800317 	ldw	r2,12(r5)
  802344:	11000017 	ldw	r4,0(r2)
  802348:	080bb4c0 	call	80bb4c <atoi>
  80234c:	1023883a 	mov	r17,r2
  802350:	d8800017 	ldw	r2,0(sp)
  802354:	10c00317 	ldw	r3,12(r2)
  802358:	19000117 	ldw	r4,4(r3)
  80235c:	080bb4c0 	call	80bb4c <atoi>
  802360:	100b883a 	mov	r5,r2
  802364:	8809883a 	mov	r4,r17
  802368:	08010480 	call	801048 <removeSongFromList>
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  80236c:	843fffc4 	addi	r16,r16,-1
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  802370:	d809883a 	mov	r4,sp
  802374:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  802378:	803fd31e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
			break;
		}
		killCmd(&cmd);
		num_cmds--;
	}
}
  80237c:	dfc00517 	ldw	ra,20(sp)
  802380:	dcc00417 	ldw	r19,16(sp)
  802384:	dc800317 	ldw	r18,12(sp)
  802388:	dc400217 	ldw	r17,8(sp)
  80238c:	dc000117 	ldw	r16,4(sp)
  802390:	dec00604 	addi	sp,sp,24
  802394:	f800283a 	ret
	struct Command* cmd;
	while(num_cmds > 0) {
		cmd = dequeue(this->cmds);
		switch(cmd->cmd_index) {
		case 1:
			play(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
  802398:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  80239c:	843fffc4 	addi	r16,r16,-1
	struct Command* cmd;
	while(num_cmds > 0) {
		cmd = dequeue(this->cmds);
		switch(cmd->cmd_index) {
		case 1:
			play(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
  8023a0:	11000017 	ldw	r4,0(r2)
  8023a4:	080bb4c0 	call	80bb4c <atoi>
  8023a8:	1027883a 	mov	r19,r2
  8023ac:	d8800017 	ldw	r2,0(sp)
  8023b0:	10c00317 	ldw	r3,12(r2)
  8023b4:	19000117 	ldw	r4,4(r3)
  8023b8:	080bb4c0 	call	80bb4c <atoi>
  8023bc:	1023883a 	mov	r17,r2
  8023c0:	d8800017 	ldw	r2,0(sp)
  8023c4:	10c00317 	ldw	r3,12(r2)
  8023c8:	19000217 	ldw	r4,8(r3)
  8023cc:	080bb4c0 	call	80bb4c <atoi>
  8023d0:	880b883a 	mov	r5,r17
  8023d4:	9809883a 	mov	r4,r19
  8023d8:	100d883a 	mov	r6,r2
  8023dc:	0801b400 	call	801b40 <play>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  8023e0:	d809883a 	mov	r4,sp
  8023e4:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  8023e8:	803fb71e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  8023ec:	003fe306 	br	80237c <cmdProcessing+0xdc>
		switch(cmd->cmd_index) {
		case 1:
			play(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
			break;
		case 2:
			pause(atoi(cmd->parameters[0]));
  8023f0:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  8023f4:	843fffc4 	addi	r16,r16,-1
		switch(cmd->cmd_index) {
		case 1:
			play(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
			break;
		case 2:
			pause(atoi(cmd->parameters[0]));
  8023f8:	11000017 	ldw	r4,0(r2)
  8023fc:	080bb4c0 	call	80bb4c <atoi>
  802400:	1009883a 	mov	r4,r2
  802404:	08013e40 	call	8013e4 <pause>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  802408:	d809883a 	mov	r4,sp
  80240c:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  802410:	803fad1e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  802414:	003fd906 	br	80237c <cmdProcessing+0xdc>
			break;
		case 2:
			pause(atoi(cmd->parameters[0]));
			break;
		case 3:
			stop();
  802418:	08013740 	call	801374 <stop>
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  80241c:	843fffc4 	addi	r16,r16,-1
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  802420:	d809883a 	mov	r4,sp
  802424:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  802428:	803fa71e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  80242c:	003fd306 	br	80237c <cmdProcessing+0xdc>
			break;
		case 3:
			stop();
			break;
		case 4:
			setVolume(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  802430:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  802434:	843fffc4 	addi	r16,r16,-1
			break;
		case 3:
			stop();
			break;
		case 4:
			setVolume(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  802438:	11000017 	ldw	r4,0(r2)
  80243c:	080bb4c0 	call	80bb4c <atoi>
  802440:	1023883a 	mov	r17,r2
  802444:	d8800017 	ldw	r2,0(sp)
  802448:	10c00317 	ldw	r3,12(r2)
  80244c:	19000117 	ldw	r4,4(r3)
  802450:	080bb4c0 	call	80bb4c <atoi>
  802454:	100b883a 	mov	r5,r2
  802458:	8809883a 	mov	r4,r17
  80245c:	080132c0 	call	80132c <setVolume>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  802460:	d809883a 	mov	r4,sp
  802464:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  802468:	803f971e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  80246c:	003fc306 	br	80237c <cmdProcessing+0xdc>
			break;
		case 4:
			setVolume(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
			break;
		case 5:
			seek(atoi(cmd->parameters[0]));
  802470:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  802474:	843fffc4 	addi	r16,r16,-1
			break;
		case 4:
			setVolume(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
			break;
		case 5:
			seek(atoi(cmd->parameters[0]));
  802478:	11000017 	ldw	r4,0(r2)
  80247c:	080bb4c0 	call	80bb4c <atoi>
  802480:	1009883a 	mov	r4,r2
  802484:	08011ac0 	call	8011ac <seek>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  802488:	d809883a 	mov	r4,sp
  80248c:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  802490:	803f8d1e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  802494:	003fb906 	br	80237c <cmdProcessing+0xdc>
			break;
		case 5:
			seek(atoi(cmd->parameters[0]));
			break;
		case 6:
			next(atoi(cmd->parameters[0]));
  802498:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  80249c:	843fffc4 	addi	r16,r16,-1
			break;
		case 5:
			seek(atoi(cmd->parameters[0]));
			break;
		case 6:
			next(atoi(cmd->parameters[0]));
  8024a0:	11000017 	ldw	r4,0(r2)
  8024a4:	080bb4c0 	call	80bb4c <atoi>
  8024a8:	1009883a 	mov	r4,r2
  8024ac:	0801cd00 	call	801cd0 <next>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  8024b0:	d809883a 	mov	r4,sp
  8024b4:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  8024b8:	803f831e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  8024bc:	003faf06 	br	80237c <cmdProcessing+0xdc>
			break;
		case 6:
			next(atoi(cmd->parameters[0]));
			break;
		case 7:
			prev(atoi(cmd->parameters[0]));
  8024c0:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  8024c4:	843fffc4 	addi	r16,r16,-1
			break;
		case 6:
			next(atoi(cmd->parameters[0]));
			break;
		case 7:
			prev(atoi(cmd->parameters[0]));
  8024c8:	11000017 	ldw	r4,0(r2)
  8024cc:	080bb4c0 	call	80bb4c <atoi>
  8024d0:	1009883a 	mov	r4,r2
  8024d4:	0801c1c0 	call	801c1c <prev>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  8024d8:	d809883a 	mov	r4,sp
  8024dc:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  8024e0:	803f791e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  8024e4:	003fa506 	br	80237c <cmdProcessing+0xdc>
			break;
		case 7:
			prev(atoi(cmd->parameters[0]));
			break;
		case 8:
			createPlaylist(cmd->parameters[0]);
  8024e8:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  8024ec:	843fffc4 	addi	r16,r16,-1
			break;
		case 7:
			prev(atoi(cmd->parameters[0]));
			break;
		case 8:
			createPlaylist(cmd->parameters[0]);
  8024f0:	11000017 	ldw	r4,0(r2)
  8024f4:	08012f00 	call	8012f0 <createPlaylist>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  8024f8:	d809883a 	mov	r4,sp
  8024fc:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  802500:	803f711e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  802504:	003f9d06 	br	80237c <cmdProcessing+0xdc>
			break;
		case 10:
			//empty command for DE2
			break;
		case 11:
			selectList(atoi(cmd->parameters[0]));
  802508:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  80250c:	843fffc4 	addi	r16,r16,-1
			break;
		case 10:
			//empty command for DE2
			break;
		case 11:
			selectList(atoi(cmd->parameters[0]));
  802510:	11000017 	ldw	r4,0(r2)
  802514:	080bb4c0 	call	80bb4c <atoi>
  802518:	1009883a 	mov	r4,r2
  80251c:	08011700 	call	801170 <selectList>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  802520:	d809883a 	mov	r4,sp
  802524:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  802528:	803f671e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  80252c:	003f9306 	br	80237c <cmdProcessing+0xdc>
			break;
		case 12:
			//empty command for DE2
			break;
		case 13:
			addSongToList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  802530:	28800317 	ldw	r2,12(r5)
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  802534:	843fffc4 	addi	r16,r16,-1
			break;
		case 12:
			//empty command for DE2
			break;
		case 13:
			addSongToList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  802538:	11000017 	ldw	r4,0(r2)
  80253c:	080bb4c0 	call	80bb4c <atoi>
  802540:	1023883a 	mov	r17,r2
  802544:	d8800017 	ldw	r2,0(sp)
  802548:	10c00317 	ldw	r3,12(r2)
  80254c:	19000117 	ldw	r4,4(r3)
  802550:	080bb4c0 	call	80bb4c <atoi>
  802554:	100b883a 	mov	r5,r2
  802558:	8809883a 	mov	r4,r17
  80255c:	08010c00 	call	8010c0 <addSongToList>
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
		default:
			break;
		}
		killCmd(&cmd);
  802560:	d809883a 	mov	r4,sp
  802564:	08011d80 	call	8011d8 <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  802568:	803f571e 	bne	r16,zero,8022c8 <cmdProcessing+0x28>
  80256c:	003f8306 	br	80237c <cmdProcessing+0xdc>

00802570 <addCmd>:

/*
 * Add command to the scheduler
 */
void addCmd(struct CmdScheduler* this, struct Command* cmd) {
	enqueue(this->cmds, (void*)cmd);
  802570:	21000017 	ldw	r4,0(r4)
  802574:	0806cc41 	jmpi	806cc4 <enqueue>

00802578 <initCmdScheduler>:
 *      Author: danny
 */

#include "CommandScheduler.h"

struct CmdScheduler* initCmdScheduler() {
  802578:	defffe04 	addi	sp,sp,-8
	struct CmdScheduler* this = (struct CmdScheduler*)malloc(sizeof(struct CmdScheduler));
  80257c:	01000104 	movi	r4,4
 *      Author: danny
 */

#include "CommandScheduler.h"

struct CmdScheduler* initCmdScheduler() {
  802580:	dfc00115 	stw	ra,4(sp)
  802584:	dc400015 	stw	r17,0(sp)
	struct CmdScheduler* this = (struct CmdScheduler*)malloc(sizeof(struct CmdScheduler));
  802588:	080bb6c0 	call	80bb6c <malloc>
  80258c:	1023883a 	mov	r17,r2
	this->cmds = initQueue();
  802590:	0806c9c0 	call	806c9c <initQueue>
  802594:	88800015 	stw	r2,0(r17)
	return this;
}
  802598:	8805883a 	mov	r2,r17
  80259c:	dfc00117 	ldw	ra,4(sp)
  8025a0:	dc400017 	ldw	r17,0(sp)
  8025a4:	dec00204 	addi	sp,sp,8
  8025a8:	f800283a 	ret

008025ac <getCursorX>:
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
		}
	}
}

int getCursorX(struct Cursor* this) {
  8025ac:	20800017 	ldw	r2,0(r4)
  8025b0:	10c00017 	ldw	r3,0(r2)
	return this->super->r->x;
}
  8025b4:	18800017 	ldw	r2,0(r3)
  8025b8:	f800283a 	ret

008025bc <getCursorY>:

int getCursorY(struct Cursor* this) {
  8025bc:	20800017 	ldw	r2,0(r4)
  8025c0:	10c00017 	ldw	r3,0(r2)
	return this->super->r->y;
}
  8025c4:	18800117 	ldw	r2,4(r3)
  8025c8:	f800283a 	ret

008025cc <memOverlap>:
		}
		setXY_noBound(this->super, x, y);*/
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
  8025cc:	20800017 	ldw	r2,0(r4)
  8025d0:	11400017 	ldw	r5,0(r2)
  8025d4:	28c00017 	ldw	r3,0(r5)
  8025d8:	18007d16 	blt	r3,zero,8027d0 <memOverlap+0x204>
  8025dc:	29800117 	ldw	r6,4(r5)
  8025e0:	30007b16 	blt	r6,zero,8027d0 <memOverlap+0x204>
  8025e4:	00804ec4 	movi	r2,315
  8025e8:	10c07916 	blt	r2,r3,8027d0 <memOverlap+0x204>
  8025ec:	00803ac4 	movi	r2,235
  8025f0:	11807716 	blt	r2,r6,8027d0 <memOverlap+0x204>
  8025f4:	20c00317 	ldw	r3,12(r4)
  8025f8:	008020b4 	movhi	r2,130
  8025fc:	1091c304 	addi	r2,r2,18188
  802600:	11c00017 	ldw	r7,0(r2)
  802604:	19800017 	ldw	r6,0(r3)
  802608:	0011883a 	mov	r8,zero
	int i, j;
	for(i = 0; i < 10; i++) {
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
  80260c:	28800117 	ldw	r2,4(r5)
  802610:	28c00017 	ldw	r3,0(r5)
  802614:	39000b17 	ldw	r4,44(r7)
  802618:	10805024 	muli	r2,r2,320
  80261c:	10c5883a 	add	r2,r2,r3
  802620:	1205883a 	add	r2,r2,r8
  802624:	1085883a 	add	r2,r2,r2
  802628:	1105883a 	add	r2,r2,r4
  80262c:	10c0002b 	ldhuio	r3,0(r2)
  802630:	30c00015 	stw	r3,0(r6)
  802634:	28800117 	ldw	r2,4(r5)
  802638:	28c00017 	ldw	r3,0(r5)
  80263c:	39000b17 	ldw	r4,44(r7)
  802640:	10800044 	addi	r2,r2,1
  802644:	10805024 	muli	r2,r2,320
  802648:	10c5883a 	add	r2,r2,r3
  80264c:	1205883a 	add	r2,r2,r8
  802650:	1085883a 	add	r2,r2,r2
  802654:	1105883a 	add	r2,r2,r4
  802658:	10c0002b 	ldhuio	r3,0(r2)
  80265c:	30c00a15 	stw	r3,40(r6)
  802660:	28800117 	ldw	r2,4(r5)
  802664:	28c00017 	ldw	r3,0(r5)
  802668:	39000b17 	ldw	r4,44(r7)
  80266c:	10800084 	addi	r2,r2,2
  802670:	10805024 	muli	r2,r2,320
  802674:	10c5883a 	add	r2,r2,r3
  802678:	1205883a 	add	r2,r2,r8
  80267c:	1085883a 	add	r2,r2,r2
  802680:	1105883a 	add	r2,r2,r4
  802684:	10c0002b 	ldhuio	r3,0(r2)
  802688:	30c01415 	stw	r3,80(r6)
  80268c:	28800117 	ldw	r2,4(r5)
  802690:	28c00017 	ldw	r3,0(r5)
  802694:	39000b17 	ldw	r4,44(r7)
  802698:	108000c4 	addi	r2,r2,3
  80269c:	10805024 	muli	r2,r2,320
  8026a0:	10c5883a 	add	r2,r2,r3
  8026a4:	1205883a 	add	r2,r2,r8
  8026a8:	1085883a 	add	r2,r2,r2
  8026ac:	1105883a 	add	r2,r2,r4
  8026b0:	10c0002b 	ldhuio	r3,0(r2)
  8026b4:	30c01e15 	stw	r3,120(r6)
  8026b8:	28800117 	ldw	r2,4(r5)
  8026bc:	28c00017 	ldw	r3,0(r5)
  8026c0:	39000b17 	ldw	r4,44(r7)
  8026c4:	10800104 	addi	r2,r2,4
  8026c8:	10805024 	muli	r2,r2,320
  8026cc:	10c5883a 	add	r2,r2,r3
  8026d0:	1205883a 	add	r2,r2,r8
  8026d4:	1085883a 	add	r2,r2,r2
  8026d8:	1105883a 	add	r2,r2,r4
  8026dc:	10c0002b 	ldhuio	r3,0(r2)
  8026e0:	30c02815 	stw	r3,160(r6)
  8026e4:	28800117 	ldw	r2,4(r5)
  8026e8:	28c00017 	ldw	r3,0(r5)
  8026ec:	39000b17 	ldw	r4,44(r7)
  8026f0:	10800144 	addi	r2,r2,5
  8026f4:	10805024 	muli	r2,r2,320
  8026f8:	10c5883a 	add	r2,r2,r3
  8026fc:	1205883a 	add	r2,r2,r8
  802700:	1085883a 	add	r2,r2,r2
  802704:	1105883a 	add	r2,r2,r4
  802708:	10c0002b 	ldhuio	r3,0(r2)
  80270c:	30c03215 	stw	r3,200(r6)
  802710:	28800117 	ldw	r2,4(r5)
  802714:	28c00017 	ldw	r3,0(r5)
  802718:	39000b17 	ldw	r4,44(r7)
  80271c:	10800184 	addi	r2,r2,6
  802720:	10805024 	muli	r2,r2,320
  802724:	10c5883a 	add	r2,r2,r3
  802728:	1205883a 	add	r2,r2,r8
  80272c:	1085883a 	add	r2,r2,r2
  802730:	1105883a 	add	r2,r2,r4
  802734:	10c0002b 	ldhuio	r3,0(r2)
  802738:	30c03c15 	stw	r3,240(r6)
  80273c:	28800117 	ldw	r2,4(r5)
  802740:	28c00017 	ldw	r3,0(r5)
  802744:	39000b17 	ldw	r4,44(r7)
  802748:	108001c4 	addi	r2,r2,7
  80274c:	10805024 	muli	r2,r2,320
  802750:	10c5883a 	add	r2,r2,r3
  802754:	1205883a 	add	r2,r2,r8
  802758:	1085883a 	add	r2,r2,r2
  80275c:	1105883a 	add	r2,r2,r4
  802760:	10c0002b 	ldhuio	r3,0(r2)
  802764:	30c04615 	stw	r3,280(r6)
  802768:	28800117 	ldw	r2,4(r5)
  80276c:	28c00017 	ldw	r3,0(r5)
  802770:	39000b17 	ldw	r4,44(r7)
  802774:	10800204 	addi	r2,r2,8
  802778:	10805024 	muli	r2,r2,320
  80277c:	10c5883a 	add	r2,r2,r3
  802780:	1205883a 	add	r2,r2,r8
  802784:	1085883a 	add	r2,r2,r2
  802788:	1105883a 	add	r2,r2,r4
  80278c:	10c0002b 	ldhuio	r3,0(r2)
  802790:	30c05015 	stw	r3,320(r6)
  802794:	28800117 	ldw	r2,4(r5)
  802798:	28c00017 	ldw	r3,0(r5)
  80279c:	39000b17 	ldw	r4,44(r7)
  8027a0:	10800244 	addi	r2,r2,9
  8027a4:	10805024 	muli	r2,r2,320
  8027a8:	10c5883a 	add	r2,r2,r3
  8027ac:	1205883a 	add	r2,r2,r8
  8027b0:	1085883a 	add	r2,r2,r2
  8027b4:	1105883a 	add	r2,r2,r4
  8027b8:	10c0002b 	ldhuio	r3,0(r2)
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  8027bc:	00800284 	movi	r2,10
  8027c0:	42000044 	addi	r8,r8,1
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
  8027c4:	30c05a15 	stw	r3,360(r6)
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  8027c8:	31800104 	addi	r6,r6,4
  8027cc:	40bf8f1e 	bne	r8,r2,80260c <memOverlap+0x40>
  8027d0:	f800283a 	ret

008027d4 <initCursor>:
 *      Author: Danny
 */

#include "Cursor.h"

struct Cursor* initCursor(int x, int y) {
  8027d4:	defffb04 	addi	sp,sp,-20
  8027d8:	dcc00315 	stw	r19,12(sp)
  8027dc:	dc400215 	stw	r17,8(sp)
  8027e0:	dc000115 	stw	r16,4(sp)
  8027e4:	dfc00415 	stw	ra,16(sp)
  8027e8:	2027883a 	mov	r19,r4
  8027ec:	2821883a 	mov	r16,r5
  8027f0:	044020f4 	movhi	r17,131
  8027f4:	8c7b2804 	addi	r17,r17,-4960
	/*up_dev.ps2_dev = alt_up_ps2_open_dev("/dev/ps2_0");
	up_dev.ps2_dev->timeout = 2000000;
	alt_up_ps2_clear_fifo(up_dev.ps2_dev);
	alt_up_ps2_init(up_dev.ps2_dev);*/
	unsigned char byte1;
	while(alt_up_ps2_read_data_byte(up_dev.ps2_dev, &byte1)!=0);
  8027f8:	89000217 	ldw	r4,8(r17)
  8027fc:	d80b883a 	mov	r5,sp
  802800:	08188c80 	call	8188c8 <alt_up_ps2_read_data_byte>
  802804:	103ffc1e 	bne	r2,zero,8027f8 <initCursor+0x24>
	struct Cursor* this = (struct Cursor*)malloc(sizeof(struct Cursor));
  802808:	01000404 	movi	r4,16
  80280c:	080bb6c0 	call	80bb6c <malloc>
	this->super = initObject(initRange(x, y, 10, 10), loadSDImage("AR01.BMP"), (void*)this);
  802810:	01800284 	movi	r6,10
  802814:	300f883a 	mov	r7,r6
  802818:	800b883a 	mov	r5,r16
  80281c:	9809883a 	mov	r4,r19
	up_dev.ps2_dev->timeout = 2000000;
	alt_up_ps2_clear_fifo(up_dev.ps2_dev);
	alt_up_ps2_init(up_dev.ps2_dev);*/
	unsigned char byte1;
	while(alt_up_ps2_read_data_byte(up_dev.ps2_dev, &byte1)!=0);
	struct Cursor* this = (struct Cursor*)malloc(sizeof(struct Cursor));
  802820:	1023883a 	mov	r17,r2
	this->super = initObject(initRange(x, y, 10, 10), loadSDImage("AR01.BMP"), (void*)this);
  802824:	0807c5c0 	call	807c5c <initRange>
  802828:	010020b4 	movhi	r4,130
  80282c:	213f3204 	addi	r4,r4,-824
  802830:	1027883a 	mov	r19,r2
  802834:	080553c0 	call	80553c <loadSDImage>
  802838:	880d883a 	mov	r6,r17
  80283c:	9809883a 	mov	r4,r19
  802840:	100b883a 	mov	r5,r2
  802844:	08064bc0 	call	8064bc <initObject>
  802848:	88800015 	stw	r2,0(r17)
	int* image = (int*)malloc(sizeof(int)*100);
  80284c:	01006404 	movi	r4,400
  802850:	080bb6c0 	call	80bb6c <malloc>
	memset(image, 0, sizeof(int)*100);
  802854:	1009883a 	mov	r4,r2
  802858:	000b883a 	mov	r5,zero
  80285c:	01806404 	movi	r6,400
	alt_up_ps2_init(up_dev.ps2_dev);*/
	unsigned char byte1;
	while(alt_up_ps2_read_data_byte(up_dev.ps2_dev, &byte1)!=0);
	struct Cursor* this = (struct Cursor*)malloc(sizeof(struct Cursor));
	this->super = initObject(initRange(x, y, 10, 10), loadSDImage("AR01.BMP"), (void*)this);
	int* image = (int*)malloc(sizeof(int)*100);
  802860:	1027883a 	mov	r19,r2
	memset(image, 0, sizeof(int)*100);
  802864:	080c3600 	call	80c360 <memset>
	this->overlapImg = initImage(image, 0, 10, 10);
  802868:	01800284 	movi	r6,10
  80286c:	9809883a 	mov	r4,r19
  802870:	000b883a 	mov	r5,zero
  802874:	300f883a 	mov	r7,r6
  802878:	08052480 	call	805248 <initImage>
  80287c:	88800315 	stw	r2,12(r17)
	return this;
}
  802880:	8805883a 	mov	r2,r17
  802884:	dfc00417 	ldw	ra,16(sp)
  802888:	dcc00317 	ldw	r19,12(sp)
  80288c:	dc400217 	ldw	r17,8(sp)
  802890:	dc000117 	ldw	r16,4(sp)
  802894:	dec00504 	addi	sp,sp,20
  802898:	f800283a 	ret

0080289c <updateCursor>:

void updateCursor(struct Cursor* this, int x, int y) {
	if((x == this->super->r->x && y == this->super->r->y) || this == NULL) return;
  80289c:	20800017 	ldw	r2,0(r4)
	memset(image, 0, sizeof(int)*100);
	this->overlapImg = initImage(image, 0, 10, 10);
	return this;
}

void updateCursor(struct Cursor* this, int x, int y) {
  8028a0:	defffc04 	addi	sp,sp,-16
  8028a4:	dc000015 	stw	r16,0(sp)
	if((x == this->super->r->x && y == this->super->r->y) || this == NULL) return;
  8028a8:	10800017 	ldw	r2,0(r2)
	memset(image, 0, sizeof(int)*100);
	this->overlapImg = initImage(image, 0, 10, 10);
	return this;
}

void updateCursor(struct Cursor* this, int x, int y) {
  8028ac:	2021883a 	mov	r16,r4
  8028b0:	dc800215 	stw	r18,8(sp)
	if((x == this->super->r->x && y == this->super->r->y) || this == NULL) return;
  8028b4:	11000017 	ldw	r4,0(r2)
	memset(image, 0, sizeof(int)*100);
	this->overlapImg = initImage(image, 0, 10, 10);
	return this;
}

void updateCursor(struct Cursor* this, int x, int y) {
  8028b8:	dc400115 	stw	r17,4(sp)
  8028bc:	dfc00315 	stw	ra,12(sp)
  8028c0:	2823883a 	mov	r17,r5
  8028c4:	3025883a 	mov	r18,r6
	if((x == this->super->r->x && y == this->super->r->y) || this == NULL) return;
  8028c8:	21409326 	beq	r4,r5,802b18 <updateCursor+0x27c>
  8028cc:	11400117 	ldw	r5,4(r2)
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
  8028d0:	81800317 	ldw	r6,12(r16)
  8028d4:	080546c0 	call	80546c <draw_notransparent>
	setXY(this->super, x, y);
  8028d8:	81000017 	ldw	r4,0(r16)
  8028dc:	880b883a 	mov	r5,r17
  8028e0:	900d883a 	mov	r6,r18
  8028e4:	08064a80 	call	8064a8 <setXY>
		}
		setXY_noBound(this->super, x, y);*/
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
  8028e8:	82400017 	ldw	r9,0(r16)
  8028ec:	49400017 	ldw	r5,0(r9)
  8028f0:	28c00017 	ldw	r3,0(r5)
  8028f4:	18000416 	blt	r3,zero,802908 <updateCursor+0x6c>
  8028f8:	29000117 	ldw	r4,4(r5)
  8028fc:	20000216 	blt	r4,zero,802908 <updateCursor+0x6c>
  802900:	00804ec4 	movi	r2,315
  802904:	10c00a0e 	bge	r2,r3,802930 <updateCursor+0x94>
void updateCursor(struct Cursor* this, int x, int y) {
	if((x == this->super->r->x && y == this->super->r->y) || this == NULL) return;
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
	setXY(this->super, x, y);
	memOverlap(this);
	draw(this->super->r->x, this->super->r->y, this->super->img);
  802908:	48800017 	ldw	r2,0(r9)
  80290c:	49800117 	ldw	r6,4(r9)
  802910:	11400117 	ldw	r5,4(r2)
  802914:	11000017 	ldw	r4,0(r2)
					this->selectedObj = this->super;
				}
			}
		}
		setXY_noBound(this->super, x, y);*/
}
  802918:	dfc00317 	ldw	ra,12(sp)
  80291c:	dc800217 	ldw	r18,8(sp)
  802920:	dc400117 	ldw	r17,4(sp)
  802924:	dc000017 	ldw	r16,0(sp)
  802928:	dec00404 	addi	sp,sp,16
void updateCursor(struct Cursor* this, int x, int y) {
	if((x == this->super->r->x && y == this->super->r->y) || this == NULL) return;
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
	setXY(this->super, x, y);
	memOverlap(this);
	draw(this->super->r->x, this->super->r->y, this->super->img);
  80292c:	08053901 	jmpi	805390 <draw>
		}
		setXY_noBound(this->super, x, y);*/
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
  802930:	00803ac4 	movi	r2,235
  802934:	113ff416 	blt	r2,r4,802908 <updateCursor+0x6c>
  802938:	80c00317 	ldw	r3,12(r16)
  80293c:	008020b4 	movhi	r2,130
  802940:	1091c304 	addi	r2,r2,18188
  802944:	11c00017 	ldw	r7,0(r2)
  802948:	19800017 	ldw	r6,0(r3)
void updateCursor(struct Cursor* this, int x, int y) {
	if((x == this->super->r->x && y == this->super->r->y) || this == NULL) return;
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
	setXY(this->super, x, y);
	memOverlap(this);
	draw(this->super->r->x, this->super->r->y, this->super->img);
  80294c:	0011883a 	mov	r8,zero
void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
  802950:	28800117 	ldw	r2,4(r5)
  802954:	28c00017 	ldw	r3,0(r5)
  802958:	39000b17 	ldw	r4,44(r7)
  80295c:	10805024 	muli	r2,r2,320
  802960:	10c5883a 	add	r2,r2,r3
  802964:	1205883a 	add	r2,r2,r8
  802968:	1085883a 	add	r2,r2,r2
  80296c:	1105883a 	add	r2,r2,r4
  802970:	10c0002b 	ldhuio	r3,0(r2)
  802974:	30c00015 	stw	r3,0(r6)
  802978:	28800117 	ldw	r2,4(r5)
  80297c:	28c00017 	ldw	r3,0(r5)
  802980:	39000b17 	ldw	r4,44(r7)
  802984:	10800044 	addi	r2,r2,1
  802988:	10805024 	muli	r2,r2,320
  80298c:	10c5883a 	add	r2,r2,r3
  802990:	1205883a 	add	r2,r2,r8
  802994:	1085883a 	add	r2,r2,r2
  802998:	1105883a 	add	r2,r2,r4
  80299c:	10c0002b 	ldhuio	r3,0(r2)
  8029a0:	30c00a15 	stw	r3,40(r6)
  8029a4:	28800117 	ldw	r2,4(r5)
  8029a8:	28c00017 	ldw	r3,0(r5)
  8029ac:	39000b17 	ldw	r4,44(r7)
  8029b0:	10800084 	addi	r2,r2,2
  8029b4:	10805024 	muli	r2,r2,320
  8029b8:	10c5883a 	add	r2,r2,r3
  8029bc:	1205883a 	add	r2,r2,r8
  8029c0:	1085883a 	add	r2,r2,r2
  8029c4:	1105883a 	add	r2,r2,r4
  8029c8:	10c0002b 	ldhuio	r3,0(r2)
  8029cc:	30c01415 	stw	r3,80(r6)
  8029d0:	28800117 	ldw	r2,4(r5)
  8029d4:	28c00017 	ldw	r3,0(r5)
  8029d8:	39000b17 	ldw	r4,44(r7)
  8029dc:	108000c4 	addi	r2,r2,3
  8029e0:	10805024 	muli	r2,r2,320
  8029e4:	10c5883a 	add	r2,r2,r3
  8029e8:	1205883a 	add	r2,r2,r8
  8029ec:	1085883a 	add	r2,r2,r2
  8029f0:	1105883a 	add	r2,r2,r4
  8029f4:	10c0002b 	ldhuio	r3,0(r2)
  8029f8:	30c01e15 	stw	r3,120(r6)
  8029fc:	28800117 	ldw	r2,4(r5)
  802a00:	28c00017 	ldw	r3,0(r5)
  802a04:	39000b17 	ldw	r4,44(r7)
  802a08:	10800104 	addi	r2,r2,4
  802a0c:	10805024 	muli	r2,r2,320
  802a10:	10c5883a 	add	r2,r2,r3
  802a14:	1205883a 	add	r2,r2,r8
  802a18:	1085883a 	add	r2,r2,r2
  802a1c:	1105883a 	add	r2,r2,r4
  802a20:	10c0002b 	ldhuio	r3,0(r2)
  802a24:	30c02815 	stw	r3,160(r6)
  802a28:	28800117 	ldw	r2,4(r5)
  802a2c:	28c00017 	ldw	r3,0(r5)
  802a30:	39000b17 	ldw	r4,44(r7)
  802a34:	10800144 	addi	r2,r2,5
  802a38:	10805024 	muli	r2,r2,320
  802a3c:	10c5883a 	add	r2,r2,r3
  802a40:	1205883a 	add	r2,r2,r8
  802a44:	1085883a 	add	r2,r2,r2
  802a48:	1105883a 	add	r2,r2,r4
  802a4c:	10c0002b 	ldhuio	r3,0(r2)
  802a50:	30c03215 	stw	r3,200(r6)
  802a54:	28800117 	ldw	r2,4(r5)
  802a58:	28c00017 	ldw	r3,0(r5)
  802a5c:	39000b17 	ldw	r4,44(r7)
  802a60:	10800184 	addi	r2,r2,6
  802a64:	10805024 	muli	r2,r2,320
  802a68:	10c5883a 	add	r2,r2,r3
  802a6c:	1205883a 	add	r2,r2,r8
  802a70:	1085883a 	add	r2,r2,r2
  802a74:	1105883a 	add	r2,r2,r4
  802a78:	10c0002b 	ldhuio	r3,0(r2)
  802a7c:	30c03c15 	stw	r3,240(r6)
  802a80:	28800117 	ldw	r2,4(r5)
  802a84:	28c00017 	ldw	r3,0(r5)
  802a88:	39000b17 	ldw	r4,44(r7)
  802a8c:	108001c4 	addi	r2,r2,7
  802a90:	10805024 	muli	r2,r2,320
  802a94:	10c5883a 	add	r2,r2,r3
  802a98:	1205883a 	add	r2,r2,r8
  802a9c:	1085883a 	add	r2,r2,r2
  802aa0:	1105883a 	add	r2,r2,r4
  802aa4:	10c0002b 	ldhuio	r3,0(r2)
  802aa8:	30c04615 	stw	r3,280(r6)
  802aac:	28800117 	ldw	r2,4(r5)
  802ab0:	28c00017 	ldw	r3,0(r5)
  802ab4:	39000b17 	ldw	r4,44(r7)
  802ab8:	10800204 	addi	r2,r2,8
  802abc:	10805024 	muli	r2,r2,320
  802ac0:	10c5883a 	add	r2,r2,r3
  802ac4:	1205883a 	add	r2,r2,r8
  802ac8:	1085883a 	add	r2,r2,r2
  802acc:	1105883a 	add	r2,r2,r4
  802ad0:	10c0002b 	ldhuio	r3,0(r2)
  802ad4:	30c05015 	stw	r3,320(r6)
  802ad8:	28800117 	ldw	r2,4(r5)
  802adc:	28c00017 	ldw	r3,0(r5)
  802ae0:	39000b17 	ldw	r4,44(r7)
  802ae4:	10800244 	addi	r2,r2,9
  802ae8:	10805024 	muli	r2,r2,320
  802aec:	10c5883a 	add	r2,r2,r3
  802af0:	1205883a 	add	r2,r2,r8
  802af4:	1085883a 	add	r2,r2,r2
  802af8:	1105883a 	add	r2,r2,r4
  802afc:	10c0002b 	ldhuio	r3,0(r2)
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  802b00:	00800284 	movi	r2,10
  802b04:	42000044 	addi	r8,r8,1
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
  802b08:	30c05a15 	stw	r3,360(r6)
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  802b0c:	31800104 	addi	r6,r6,4
  802b10:	40bf8f1e 	bne	r8,r2,802950 <updateCursor+0xb4>
  802b14:	003f7c06 	br	802908 <updateCursor+0x6c>
	this->overlapImg = initImage(image, 0, 10, 10);
	return this;
}

void updateCursor(struct Cursor* this, int x, int y) {
	if((x == this->super->r->x && y == this->super->r->y) || this == NULL) return;
  802b18:	11400117 	ldw	r5,4(r2)
  802b1c:	317f6c1e 	bne	r6,r5,8028d0 <updateCursor+0x34>
					this->selectedObj = this->super;
				}
			}
		}
		setXY_noBound(this->super, x, y);*/
}
  802b20:	dfc00317 	ldw	ra,12(sp)
  802b24:	dc800217 	ldw	r18,8(sp)
  802b28:	dc400117 	ldw	r17,4(sp)
  802b2c:	dc000017 	ldw	r16,0(sp)
  802b30:	dec00404 	addi	sp,sp,16
  802b34:	f800283a 	ret

00802b38 <isCurrPlaying>:
}

/*
 * This function check if the song is currently playing in the SoundMixer
 */
int isCurrPlaying(int song_id) {
  802b38:	0005883a 	mov	r2,zero
  802b3c:	014020b4 	movhi	r5,130
  802b40:	29528404 	addi	r5,r5,18960
	int i = 0;
	while(db.curr_song_ids[i] != 0) {
  802b44:	28c00017 	ldw	r3,0(r5)
		if(db.curr_song_ids[i++] == song_id) {
  802b48:	10800044 	addi	r2,r2,1
  802b4c:	29400104 	addi	r5,r5,4
/*
 * This function check if the song is currently playing in the SoundMixer
 */
int isCurrPlaying(int song_id) {
	int i = 0;
	while(db.curr_song_ids[i] != 0) {
  802b50:	18000326 	beq	r3,zero,802b60 <isCurrPlaying+0x28>
		if(db.curr_song_ids[i++] == song_id) {
  802b54:	193ffb1e 	bne	r3,r4,802b44 <isCurrPlaying+0xc>
			return i-1;
  802b58:	10bfffc4 	addi	r2,r2,-1
  802b5c:	f800283a 	ret
/*
 * This function check if the song is currently playing in the SoundMixer
 */
int isCurrPlaying(int song_id) {
	int i = 0;
	while(db.curr_song_ids[i] != 0) {
  802b60:	00bfffc4 	movi	r2,-1
		if(db.curr_song_ids[i++] == song_id) {
			return i-1;
		}
	} return -1;
}
  802b64:	f800283a 	ret

00802b68 <initializeListWithSongs>:
/*
 * Parses a string that contains playlist & songs that
 * belong to that playlist, load all songs to the playlist
 * in correct order.
 * */
void initializeListWithSongs(char* input){
  802b68:	defdf604 	addi	sp,sp,-2088
  802b6c:	dcc20315 	stw	r19,2060(sp)
	char line[1024];
	char temp[1024];
	int i, list_id, song_id, cursorPos;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
  802b70:	dcc10004 	addi	r19,sp,1024
  802b74:	01810004 	movi	r6,1024
/*
 * Parses a string that contains playlist & songs that
 * belong to that playlist, load all songs to the playlist
 * in correct order.
 * */
void initializeListWithSongs(char* input){
  802b78:	dd020415 	stw	r20,2064(sp)
	char line[1024];
	char temp[1024];
	int i, list_id, song_id, cursorPos;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
  802b7c:	000b883a 	mov	r5,zero
/*
 * Parses a string that contains playlist & songs that
 * belong to that playlist, load all songs to the playlist
 * in correct order.
 * */
void initializeListWithSongs(char* input){
  802b80:	2029883a 	mov	r20,r4
	char line[1024];
	char temp[1024];
	int i, list_id, song_id, cursorPos;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
  802b84:	9809883a 	mov	r4,r19
/*
 * Parses a string that contains playlist & songs that
 * belong to that playlist, load all songs to the playlist
 * in correct order.
 * */
void initializeListWithSongs(char* input){
  802b88:	dfc20915 	stw	ra,2084(sp)
  802b8c:	df020815 	stw	fp,2080(sp)
  802b90:	dd820615 	stw	r22,2072(sp)
  802b94:	dd420515 	stw	r21,2068(sp)
  802b98:	dc420115 	stw	r17,2052(sp)
  802b9c:	dc020015 	stw	r16,2048(sp)
  802ba0:	ddc20715 	stw	r23,2076(sp)
  802ba4:	dc820215 	stw	r18,2056(sp)
	char line[1024];
	char temp[1024];
	int i, list_id, song_id, cursorPos;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
  802ba8:	080c3600 	call	80c360 <memset>
	strcpy(line, input);
  802bac:	a00b883a 	mov	r5,r20
  802bb0:	9809883a 	mov	r4,r19
  802bb4:	080cdc40 	call	80cdc4 <strcpy>
	for (i = 0; i < strlen(input); i++){
  802bb8:	a009883a 	mov	r4,r20
  802bbc:	080ce500 	call	80ce50 <strlen>
	char temp[1024];
	int i, list_id, song_id, cursorPos;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
  802bc0:	0021883a 	mov	r16,zero
  802bc4:	002d883a 	mov	r22,zero
  802bc8:	05400044 	movi	r21,1
  802bcc:	070020b4 	movhi	fp,130
  802bd0:	e711e904 	addi	fp,fp,18340
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
  802bd4:	84400044 	addi	r17,r16,1
  802bd8:	9c07883a 	add	r3,r19,r16
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
  802bdc:	d809883a 	mov	r4,sp
  802be0:	000b883a 	mov	r5,zero
  802be4:	01810004 	movi	r6,1024
	int i, list_id, song_id, cursorPos;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
  802be8:	80800c2e 	bgeu	r16,r2,802c1c <initializeListWithSongs+0xb4>
		if (line[i] == ' '){
  802bec:	18c00007 	ldb	r3,0(r3)
  802bf0:	00800804 	movi	r2,32
  802bf4:	18801526 	beq	r3,r2,802c4c <initializeListWithSongs+0xe4>
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
				order++;
  802bf8:	8821883a 	mov	r16,r17
	int i, list_id, song_id, cursorPos;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
  802bfc:	a009883a 	mov	r4,r20
  802c00:	080ce500 	call	80ce50 <strlen>
		if (line[i] == ' '){
  802c04:	84400044 	addi	r17,r16,1
  802c08:	9c07883a 	add	r3,r19,r16
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
  802c0c:	d809883a 	mov	r4,sp
  802c10:	000b883a 	mov	r5,zero
  802c14:	01810004 	movi	r6,1024
	int i, list_id, song_id, cursorPos;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
  802c18:	80bff436 	bltu	r16,r2,802bec <initializeListWithSongs+0x84>
				db.index_list_order[list_id][order] = song_id;
				order++;
			}
		}
	}
}
  802c1c:	dfc20917 	ldw	ra,2084(sp)
  802c20:	df020817 	ldw	fp,2080(sp)
  802c24:	ddc20717 	ldw	r23,2076(sp)
  802c28:	dd820617 	ldw	r22,2072(sp)
  802c2c:	dd420517 	ldw	r21,2068(sp)
  802c30:	dd020417 	ldw	r20,2064(sp)
  802c34:	dcc20317 	ldw	r19,2060(sp)
  802c38:	dc820217 	ldw	r18,2056(sp)
  802c3c:	dc420117 	ldw	r17,2052(sp)
  802c40:	dc020017 	ldw	r16,2048(sp)
  802c44:	dec20a04 	addi	sp,sp,2088
  802c48:	f800283a 	ret
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
  802c4c:	080c3600 	call	80c360 <memset>
			if (iteration == 0){
  802c50:	b004c03a 	cmpne	r2,r22,zero
				iteration++;
				list_id = strtol(temp, NULL, 10);
				//printf("List id is %d\n", list_id);
				if (list_id == 0){ break;}
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
  802c54:	848dc83a 	sub	r6,r16,r18
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
			if (iteration == 0){
				cursorPos = i+1;
  802c58:	84400044 	addi	r17,r16,1
				iteration++;
				list_id = strtol(temp, NULL, 10);
				//printf("List id is %d\n", list_id);
				if (list_id == 0){ break;}
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
  802c5c:	9c8b883a 	add	r5,r19,r18
  802c60:	31800044 	addi	r6,r6,1
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
			if (iteration == 0){
				cursorPos = i+1;
				strncpy(temp, line, cursorPos);
  802c64:	d809883a 	mov	r4,sp
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
			if (iteration == 0){
  802c68:	10000d1e 	bne	r2,zero,802ca0 <initializeListWithSongs+0x138>
				cursorPos = i+1;
				strncpy(temp, line, cursorPos);
  802c6c:	980b883a 	mov	r5,r19
  802c70:	880d883a 	mov	r6,r17
  802c74:	080cf740 	call	80cf74 <strncpy>
				iteration++;
				list_id = strtol(temp, NULL, 10);
  802c78:	d809883a 	mov	r4,sp
  802c7c:	000b883a 	mov	r5,zero
  802c80:	01800284 	movi	r6,10
  802c84:	080da080 	call	80da08 <strtol>
				//printf("List id is %d\n", list_id);
				if (list_id == 0){ break;}
  802c88:	102f883a 	mov	r23,r2
  802c8c:	8825883a 	mov	r18,r17
  802c90:	05800044 	movi	r22,1
  802c94:	103fe126 	beq	r2,zero,802c1c <initializeListWithSongs+0xb4>
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
				order++;
  802c98:	8821883a 	mov	r16,r17
  802c9c:	003fd706 	br	802bfc <initializeListWithSongs+0x94>
				iteration++;
				list_id = strtol(temp, NULL, 10);
				//printf("List id is %d\n", list_id);
				if (list_id == 0){ break;}
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
  802ca0:	d809883a 	mov	r4,sp
  802ca4:	080cf740 	call	80cf74 <strncpy>
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
  802ca8:	d809883a 	mov	r4,sp
  802cac:	000b883a 	mov	r5,zero
  802cb0:	01800284 	movi	r6,10
  802cb4:	080da080 	call	80da08 <strtol>
  802cb8:	1009883a 	mov	r4,r2
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  802cbc:	b8c01964 	muli	r3,r23,101
				if (list_id == 0){ break;}
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
  802cc0:	103fd626 	beq	r2,zero,802c1c <initializeListWithSongs+0xb4>
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
  802cc4:	1d45883a 	add	r2,r3,r21
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  802cc8:	1907883a 	add	r3,r3,r4
  802ccc:	18c7883a 	add	r3,r3,r3
				db.index_list_order[list_id][order] = song_id;
  802cd0:	1085883a 	add	r2,r2,r2
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  802cd4:	18c7883a 	add	r3,r3,r3
				db.index_list_order[list_id][order] = song_id;
  802cd8:	1085883a 	add	r2,r2,r2
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  802cdc:	1f07883a 	add	r3,r3,fp
				db.index_list_order[list_id][order] = song_id;
				order++;
  802ce0:	84400044 	addi	r17,r16,1
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
  802ce4:	1705883a 	add	r2,r2,fp
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  802ce8:	1d40a815 	stw	r21,672(r3)
				db.index_list_order[list_id][order] = song_id;
				order++;
  802cec:	8025883a 	mov	r18,r16
  802cf0:	ad400044 	addi	r21,r21,1
  802cf4:	8821883a 	mov	r16,r17
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
  802cf8:	1114c715 	stw	r4,21276(r2)
  802cfc:	003fbf06 	br	802bfc <initializeListWithSongs+0x94>

00802d00 <removeCurrPlaying>:
			return i-1;
		}
	} return -1;
}

void removeCurrPlaying(int index) {
  802d00:	defffc04 	addi	sp,sp,-16
	int j = index;
	db.total_songs_playing--;
	stopSound(db.songs[db.curr_song_ids[j]]->sound);
  802d04:	2105883a 	add	r2,r4,r4
			return i-1;
		}
	} return -1;
}

void removeCurrPlaying(int index) {
  802d08:	dc800215 	stw	r18,8(sp)
  802d0c:	dc400115 	stw	r17,4(sp)
	int j = index;
	db.total_songs_playing--;
	stopSound(db.songs[db.curr_song_ids[j]]->sound);
  802d10:	10a5883a 	add	r18,r2,r2
	} return -1;
}

void removeCurrPlaying(int index) {
	int j = index;
	db.total_songs_playing--;
  802d14:	044020b4 	movhi	r17,130
  802d18:	8c51e904 	addi	r17,r17,18340
	stopSound(db.songs[db.curr_song_ids[j]]->sound);
  802d1c:	9447883a 	add	r3,r18,r17
  802d20:	18809b17 	ldw	r2,620(r3)
			return i-1;
		}
	} return -1;
}

void removeCurrPlaying(int index) {
  802d24:	dc000015 	stw	r16,0(sp)
  802d28:	2021883a 	mov	r16,r4
	int j = index;
	db.total_songs_playing--;
	stopSound(db.songs[db.curr_song_ids[j]]->sound);
  802d2c:	1085883a 	add	r2,r2,r2
  802d30:	1085883a 	add	r2,r2,r2
	} return -1;
}

void removeCurrPlaying(int index) {
	int j = index;
	db.total_songs_playing--;
  802d34:	8900a617 	ldw	r4,664(r17)
	stopSound(db.songs[db.curr_song_ids[j]]->sound);
  802d38:	1445883a 	add	r2,r2,r17
  802d3c:	10c03617 	ldw	r3,216(r2)
	} return -1;
}

void removeCurrPlaying(int index) {
	int j = index;
	db.total_songs_playing--;
  802d40:	213fffc4 	addi	r4,r4,-1
  802d44:	8900a615 	stw	r4,664(r17)
	stopSound(db.songs[db.curr_song_ids[j]]->sound);
  802d48:	19000017 	ldw	r4,0(r3)
			return i-1;
		}
	} return -1;
}

void removeCurrPlaying(int index) {
  802d4c:	dfc00315 	stw	ra,12(sp)
	int j = index;
	db.total_songs_playing--;
	stopSound(db.songs[db.curr_song_ids[j]]->sound);
  802d50:	0808a040 	call	808a04 <stopSound>
	for(j = index; j <= db.total_songs_playing; j++) {
  802d54:	8940a617 	ldw	r5,664(r17)
  802d58:	2c000816 	blt	r5,r16,802d7c <removeCurrPlaying+0x7c>
  802d5c:	90809c04 	addi	r2,r18,624
  802d60:	1447883a 	add	r3,r2,r17
  802d64:	8009883a 	mov	r4,r16

		db.curr_song_ids[j] = db.curr_song_ids[j+1];
  802d68:	18800017 	ldw	r2,0(r3)
  802d6c:	21000044 	addi	r4,r4,1
  802d70:	18bfff15 	stw	r2,-4(r3)
  802d74:	18c00104 	addi	r3,r3,4

void removeCurrPlaying(int index) {
	int j = index;
	db.total_songs_playing--;
	stopSound(db.songs[db.curr_song_ids[j]]->sound);
	for(j = index; j <= db.total_songs_playing; j++) {
  802d78:	293ffb0e 	bge	r5,r4,802d68 <removeCurrPlaying+0x68>

		db.curr_song_ids[j] = db.curr_song_ids[j+1];
	}
}
  802d7c:	dfc00317 	ldw	ra,12(sp)
  802d80:	dc800217 	ldw	r18,8(sp)
  802d84:	dc400117 	ldw	r17,4(sp)
  802d88:	dc000017 	ldw	r16,0(sp)
  802d8c:	dec00404 	addi	sp,sp,16
  802d90:	f800283a 	ret

00802d94 <querySongByName>:
		} j++;
	}
	return NULL;
}

struct Song* querySongByName(char* song_name) {
  802d94:	defffa04 	addi	sp,sp,-24
  802d98:	dcc00315 	stw	r19,12(sp)
  802d9c:	dfc00515 	stw	ra,20(sp)
  802da0:	dd000415 	stw	r20,16(sp)
  802da4:	dc800215 	stw	r18,8(sp)
  802da8:	dc400115 	stw	r17,4(sp)
  802dac:	dc000015 	stw	r16,0(sp)
  802db0:	2027883a 	mov	r19,r4
	if(song_name == NULL) return NULL;
  802db4:	20000a1e 	bne	r4,zero,802de0 <querySongByName+0x4c>
	int i;
	int size = db.num_of_songs;
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  802db8:	0021883a 	mov	r16,zero
		if(strcmp(song_name, db.songs[i]->song_name) == 0) {
			return db.songs[i];
		}
	}
	return NULL;
}
  802dbc:	8005883a 	mov	r2,r16
  802dc0:	dfc00517 	ldw	ra,20(sp)
  802dc4:	dd000417 	ldw	r20,16(sp)
  802dc8:	dcc00317 	ldw	r19,12(sp)
  802dcc:	dc800217 	ldw	r18,8(sp)
  802dd0:	dc400117 	ldw	r17,4(sp)
  802dd4:	dc000017 	ldw	r16,0(sp)
  802dd8:	dec00604 	addi	sp,sp,24
  802ddc:	f800283a 	ret
}

struct Song* querySongByName(char* song_name) {
	if(song_name == NULL) return NULL;
	int i;
	int size = db.num_of_songs;
  802de0:	008020b4 	movhi	r2,130
  802de4:	1091e904 	addi	r2,r2,18340
  802de8:	1500a717 	ldw	r20,668(r2)
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  802dec:	053ff20e 	bge	zero,r20,802db8 <querySongByName+0x24>
  802df0:	14803704 	addi	r18,r2,220
  802df4:	04400044 	movi	r17,1
		if(strcmp(song_name, db.songs[i]->song_name) == 0) {
  802df8:	94000017 	ldw	r16,0(r18)
  802dfc:	9809883a 	mov	r4,r19

struct Song* querySongByName(char* song_name) {
	if(song_name == NULL) return NULL;
	int i;
	int size = db.num_of_songs;
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  802e00:	8c400044 	addi	r17,r17,1
		if(strcmp(song_name, db.songs[i]->song_name) == 0) {
  802e04:	81400104 	addi	r5,r16,4
  802e08:	080cd080 	call	80cd08 <strcmp>

struct Song* querySongByName(char* song_name) {
	if(song_name == NULL) return NULL;
	int i;
	int size = db.num_of_songs;
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  802e0c:	94800104 	addi	r18,r18,4
		if(strcmp(song_name, db.songs[i]->song_name) == 0) {
  802e10:	103fea26 	beq	r2,zero,802dbc <querySongByName+0x28>

struct Song* querySongByName(char* song_name) {
	if(song_name == NULL) return NULL;
	int i;
	int size = db.num_of_songs;
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  802e14:	a47ff80e 	bge	r20,r17,802df8 <querySongByName+0x64>
  802e18:	003fe706 	br	802db8 <querySongByName+0x24>

00802e1c <queryListByName>:
}
/*
 * Query the list with a given play list name
 * return the first list founded with the same name, NULL otherwise
 */
struct Playlist* queryListByName(char* list_name) {
  802e1c:	defff804 	addi	sp,sp,-32
  802e20:	dcc00315 	stw	r19,12(sp)
  802e24:	dfc00715 	stw	ra,28(sp)
  802e28:	dd800615 	stw	r22,24(sp)
  802e2c:	dd400515 	stw	r21,20(sp)
  802e30:	dd000415 	stw	r20,16(sp)
  802e34:	dc800215 	stw	r18,8(sp)
  802e38:	dc400115 	stw	r17,4(sp)
  802e3c:	dc000015 	stw	r16,0(sp)
  802e40:	2027883a 	mov	r19,r4
	if(list_name == NULL || db.num_of_lists == 0) return NULL;
  802e44:	20000c1e 	bne	r4,zero,802e78 <queryListByName+0x5c>
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
  802e48:	0021883a 	mov	r16,zero
			}
			i++;
		} j++;
	}
	return NULL;
}
  802e4c:	8005883a 	mov	r2,r16
  802e50:	dfc00717 	ldw	ra,28(sp)
  802e54:	dd800617 	ldw	r22,24(sp)
  802e58:	dd400517 	ldw	r21,20(sp)
  802e5c:	dd000417 	ldw	r20,16(sp)
  802e60:	dcc00317 	ldw	r19,12(sp)
  802e64:	dc800217 	ldw	r18,8(sp)
  802e68:	dc400117 	ldw	r17,4(sp)
  802e6c:	dc000017 	ldw	r16,0(sp)
  802e70:	dec00804 	addi	sp,sp,32
  802e74:	f800283a 	ret
/*
 * Query the list with a given play list name
 * return the first list founded with the same name, NULL otherwise
 */
struct Playlist* queryListByName(char* list_name) {
	if(list_name == NULL || db.num_of_lists == 0) return NULL;
  802e78:	008020b4 	movhi	r2,130
  802e7c:	1091e904 	addi	r2,r2,18340
  802e80:	14403517 	ldw	r17,212(r2)
  802e84:	883ff026 	beq	r17,zero,802e48 <queryListByName+0x2c>
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
  802e88:	047fef0e 	bge	zero,r17,802e48 <queryListByName+0x2c>
  802e8c:	1029883a 	mov	r20,r2
  802e90:	002b883a 	mov	r21,zero
  802e94:	048020f4 	movhi	r18,131
  802e98:	94bad104 	addi	r18,r18,-5308
  802e9c:	05800044 	movi	r22,1
  802ea0:	00000206 	br	802eac <queryListByName+0x90>
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
				return db.playlists[j];
			}
			i++;
  802ea4:	a5000104 	addi	r20,r20,4
 */
struct Playlist* queryListByName(char* list_name) {
	if(list_name == NULL || db.num_of_lists == 0) return NULL;
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
  802ea8:	ac7fe70e 	bge	r21,r17,802e48 <queryListByName+0x2c>
		if(db.used_list_index[j] == 1) {
  802eac:	90800017 	ldw	r2,0(r18)
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
				printf("querry list by name error\n");
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
  802eb0:	9809883a 	mov	r4,r19
				return db.playlists[j];
			}
			i++;
  802eb4:	94800104 	addi	r18,r18,4
struct Playlist* queryListByName(char* list_name) {
	if(list_name == NULL || db.num_of_lists == 0) return NULL;
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
		if(db.used_list_index[j] == 1) {
  802eb8:	15bffa1e 	bne	r2,r22,802ea4 <queryListByName+0x88>
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
  802ebc:	a4000217 	ldw	r16,8(r20)
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
				return db.playlists[j];
			}
			i++;
  802ec0:	a8ab883a 	add	r21,r21,r2
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
				printf("querry list by name error\n");
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
  802ec4:	800b883a 	mov	r5,r16
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
		if(db.used_list_index[j] == 1) {
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
  802ec8:	80000326 	beq	r16,zero,802ed8 <queryListByName+0xbc>
				printf("querry list by name error\n");
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
  802ecc:	080cd080 	call	80cd08 <strcmp>
  802ed0:	103ff41e 	bne	r2,zero,802ea4 <queryListByName+0x88>
  802ed4:	003fdd06 	br	802e4c <queryListByName+0x30>
	int size = db.num_of_lists;
	while(i < size) {
		if(db.used_list_index[j] == 1) {
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
				printf("querry list by name error\n");
  802ed8:	010020b4 	movhi	r4,130
  802edc:	213f3e04 	addi	r4,r4,-776
  802ee0:	080c5100 	call	80c510 <puts>
  802ee4:	003fd906 	br	802e4c <queryListByName+0x30>

00802ee8 <getSongsFromSD>:
/*
 * Find all .WAV files in SDCard and return their names in an
 * array of strings.
 * Return: array containing names of all .WAV files in SDCard
 * */
char** getSongsFromSD(){
  802ee8:	defff804 	addi	sp,sp,-32
	int fileStatus = 0;
	char fileName[15];
	int numOfWavFiles = 0;

	// songNames is array of strings that store song names.
	char** songNames = malloc(MAX_SONGS *sizeof(char*));
  802eec:	01006504 	movi	r4,404
/*
 * Find all .WAV files in SDCard and return their names in an
 * array of strings.
 * Return: array containing names of all .WAV files in SDCard
 * */
char** getSongsFromSD(){
  802ef0:	dfc00715 	stw	ra,28(sp)
  802ef4:	dc800615 	stw	r18,24(sp)
  802ef8:	dc400515 	stw	r17,20(sp)
  802efc:	dc000415 	stw	r16,16(sp)
	int fileStatus = 0;
	char fileName[15];
	int numOfWavFiles = 0;

	// songNames is array of strings that store song names.
	char** songNames = malloc(MAX_SONGS *sizeof(char*));
  802f00:	080bb6c0 	call	80bb6c <malloc>

	memset(fileName, 0 , sizeof(fileName));
	fileStatus = alt_up_sd_card_find_first("", fileName);
  802f04:	d80b883a 	mov	r5,sp
  802f08:	010020b4 	movhi	r4,130
  802f0c:	21013504 	addi	r4,r4,1236
	int fileStatus = 0;
	char fileName[15];
	int numOfWavFiles = 0;

	// songNames is array of strings that store song names.
	char** songNames = malloc(MAX_SONGS *sizeof(char*));
  802f10:	1025883a 	mov	r18,r2

	memset(fileName, 0 , sizeof(fileName));
  802f14:	d8000015 	stw	zero,0(sp)
  802f18:	d8000115 	stw	zero,4(sp)
  802f1c:	d8000215 	stw	zero,8(sp)
  802f20:	d800030d 	sth	zero,12(sp)
  802f24:	d8000385 	stb	zero,14(sp)
	fileStatus = alt_up_sd_card_find_first("", fileName);
  802f28:	081d6900 	call	81d690 <alt_up_sd_card_find_first>
	if (fileStatus != 0){
  802f2c:	10bfffcc 	andi	r2,r2,65535
  802f30:	10a0001c 	xori	r2,r2,32768
  802f34:	10a00004 	addi	r2,r2,-32768
  802f38:	1000261e 	bne	r2,zero,802fd4 <getSongsFromSD+0xec>
		printf("ERROR: updateSongsFromSD.\n");
		return NULL;
  802f3c:	0023883a 	mov	r17,zero
  802f40:	9021883a 	mov	r16,r18
	}
	while (fileStatus != -1){
		if (strstr(fileName, ".WAV") != NULL){
  802f44:	d809883a 	mov	r4,sp
  802f48:	014020b4 	movhi	r5,130
  802f4c:	297f3c04 	addi	r5,r5,-784
  802f50:	080d1640 	call	80d164 <strstr>
			songNames[numOfWavFiles] = malloc(20 * sizeof(char));
  802f54:	01000504 	movi	r4,20
	if (fileStatus != 0){
		printf("ERROR: updateSongsFromSD.\n");
		return NULL;
	}
	while (fileStatus != -1){
		if (strstr(fileName, ".WAV") != NULL){
  802f58:	10000726 	beq	r2,zero,802f78 <getSongsFromSD+0x90>
			songNames[numOfWavFiles] = malloc(20 * sizeof(char));
  802f5c:	080bb6c0 	call	80bb6c <malloc>
  802f60:	80800015 	stw	r2,0(r16)
  802f64:	1009883a 	mov	r4,r2
			strcpy(songNames[numOfWavFiles], fileName);
  802f68:	d80b883a 	mov	r5,sp
			//createSong(fileName, 0);
			numOfWavFiles++;
  802f6c:	8c400044 	addi	r17,r17,1
  802f70:	84000104 	addi	r16,r16,4
		return NULL;
	}
	while (fileStatus != -1){
		if (strstr(fileName, ".WAV") != NULL){
			songNames[numOfWavFiles] = malloc(20 * sizeof(char));
			strcpy(songNames[numOfWavFiles], fileName);
  802f74:	080cdc40 	call	80cdc4 <strcpy>
			//createSong(fileName, 0);
			numOfWavFiles++;
		}
		memset(fileName, 0 , sizeof(fileName));
		fileStatus = alt_up_sd_card_find_next(fileName);
  802f78:	d809883a 	mov	r4,sp
			songNames[numOfWavFiles] = malloc(20 * sizeof(char));
			strcpy(songNames[numOfWavFiles], fileName);
			//createSong(fileName, 0);
			numOfWavFiles++;
		}
		memset(fileName, 0 , sizeof(fileName));
  802f7c:	d8000015 	stw	zero,0(sp)
  802f80:	d8000115 	stw	zero,4(sp)
  802f84:	d8000215 	stw	zero,8(sp)
  802f88:	d800030d 	sth	zero,12(sp)
  802f8c:	d8000385 	stb	zero,14(sp)
		fileStatus = alt_up_sd_card_find_next(fileName);
  802f90:	081d7640 	call	81d764 <alt_up_sd_card_find_next>
	fileStatus = alt_up_sd_card_find_first("", fileName);
	if (fileStatus != 0){
		printf("ERROR: updateSongsFromSD.\n");
		return NULL;
	}
	while (fileStatus != -1){
  802f94:	10bfffcc 	andi	r2,r2,65535
  802f98:	10a0001c 	xori	r2,r2,32768
  802f9c:	10a00004 	addi	r2,r2,-32768
  802fa0:	00ffffc4 	movi	r3,-1
  802fa4:	10ffe71e 	bne	r2,r3,802f44 <getSongsFromSD+0x5c>
		}
		memset(fileName, 0 , sizeof(fileName));
		fileStatus = alt_up_sd_card_find_next(fileName);
	}
	// set ending condition, NULL means end of the array
	songNames[numOfWavFiles] = NULL;
  802fa8:	8c45883a 	add	r2,r17,r17
  802fac:	1085883a 	add	r2,r2,r2
  802fb0:	1485883a 	add	r2,r2,r18
  802fb4:	10000015 	stw	zero,0(r2)
	return songNames;
}
  802fb8:	9005883a 	mov	r2,r18
  802fbc:	dfc00717 	ldw	ra,28(sp)
  802fc0:	dc800617 	ldw	r18,24(sp)
  802fc4:	dc400517 	ldw	r17,20(sp)
  802fc8:	dc000417 	ldw	r16,16(sp)
  802fcc:	dec00804 	addi	sp,sp,32
  802fd0:	f800283a 	ret
	char** songNames = malloc(MAX_SONGS *sizeof(char*));

	memset(fileName, 0 , sizeof(fileName));
	fileStatus = alt_up_sd_card_find_first("", fileName);
	if (fileStatus != 0){
		printf("ERROR: updateSongsFromSD.\n");
  802fd4:	010020b4 	movhi	r4,130
  802fd8:	213f3504 	addi	r4,r4,-812
  802fdc:	080c5100 	call	80c510 <puts>
  802fe0:	0025883a 	mov	r18,zero
  802fe4:	003ff406 	br	802fb8 <getSongsFromSD+0xd0>

00802fe8 <createPlaylistFromTxt>:

/*
 * Parse a string containing playlist information
 * into a playlist object and add it to DB.
 * */
void createPlaylistFromTxt(char* line){
  802fe8:	deffe104 	addi	sp,sp,-124
  802fec:	dc001b15 	stw	r16,108(sp)
  802ff0:	dfc01e15 	stw	ra,120(sp)
  802ff4:	dc801d15 	stw	r18,116(sp)
  802ff8:	dc401c15 	stw	r17,112(sp)
  802ffc:	200f883a 	mov	r7,r4
  803000:	000d883a 	mov	r6,zero
  803004:	dc000104 	addi	r16,sp,4
  803008:	01400804 	movi	r5,32
	int i = 0, j = 0;
	char id[4];
	char listName[100];
	char numOfSong[4];
	while((id[j++] = line[i++]) != ' ');
  80300c:	31c5883a 	add	r2,r6,r7
  803010:	10c00007 	ldb	r3,0(r2)
  803014:	8189883a 	add	r4,r16,r6
  803018:	31800044 	addi	r6,r6,1
  80301c:	20c00005 	stb	r3,0(r4)
  803020:	197ffa1e 	bne	r3,r5,80300c <createPlaylistFromTxt+0x24>
	id[j] = 0; j = 0;
  803024:	8185883a 	add	r2,r16,r6
  803028:	dc800204 	addi	r18,sp,8
  80302c:	10000005 	stb	zero,0(r2)
  803030:	3989883a 	add	r4,r7,r6
  803034:	900b883a 	mov	r5,r18
  803038:	02000804 	movi	r8,32
	while((listName[j++] = line[i++]) != ' ');
  80303c:	20800007 	ldb	r2,0(r4)
  803040:	31800044 	addi	r6,r6,1
  803044:	21000044 	addi	r4,r4,1
  803048:	28800005 	stb	r2,0(r5)
  80304c:	29400044 	addi	r5,r5,1
  803050:	123ffa1e 	bne	r2,r8,80303c <createPlaylistFromTxt+0x54>
	listName[j-1] = 0; j = 0;
  803054:	2c87c83a 	sub	r3,r5,r18
  803058:	d88001c4 	addi	r2,sp,7
  80305c:	10c5883a 	add	r2,r2,r3
  803060:	10000005 	stb	zero,0(r2)
	if(listName[0] == '0') return;
  803064:	d8c00207 	ldb	r3,8(sp)
  803068:	00800c04 	movi	r2,48
  80306c:	18801026 	beq	r3,r2,8030b0 <createPlaylistFromTxt+0xc8>
  803070:	3989883a 	add	r4,r7,r6
  803074:	d807883a 	mov	r3,sp
	while((numOfSong[j++] = line[i++]) != 0);
  803078:	20800003 	ldbu	r2,0(r4)
  80307c:	21000044 	addi	r4,r4,1
  803080:	18800005 	stb	r2,0(r3)
  803084:	18c00044 	addi	r3,r3,1
  803088:	103ffb1e 	bne	r2,zero,803078 <createPlaylistFromTxt+0x90>
	createExisitedPlaylist(listName, atoi(numOfSong), atoi(id));
  80308c:	d809883a 	mov	r4,sp
  803090:	080bb4c0 	call	80bb4c <atoi>
  803094:	8009883a 	mov	r4,r16
  803098:	1023883a 	mov	r17,r2
  80309c:	080bb4c0 	call	80bb4c <atoi>
  8030a0:	880b883a 	mov	r5,r17
  8030a4:	9009883a 	mov	r4,r18
  8030a8:	100d883a 	mov	r6,r2
  8030ac:	08012b40 	call	8012b4 <createExisitedPlaylist>
}
  8030b0:	dfc01e17 	ldw	ra,120(sp)
  8030b4:	dc801d17 	ldw	r18,116(sp)
  8030b8:	dc401c17 	ldw	r17,112(sp)
  8030bc:	dc001b17 	ldw	r16,108(sp)
  8030c0:	dec01f04 	addi	sp,sp,124
  8030c4:	f800283a 	ret

008030c8 <openFileFromSD>:
	}
}
/*
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
  8030c8:	defffe04 	addi	sp,sp,-8
  8030cc:	dc000015 	stw	r16,0(sp)
  8030d0:	dfc00115 	stw	ra,4(sp)
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  8030d4:	000b883a 	mov	r5,zero
	}
}
/*
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
  8030d8:	2021883a 	mov	r16,r4
	int fileHandler;
	if (file == NULL) return -2;
  8030dc:	00bfff84 	movi	r2,-2
  8030e0:	20000726 	beq	r4,zero,803100 <openFileFromSD+0x38>
	fileHandler = alt_up_sd_card_fopen(file, false);
  8030e4:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  8030e8:	10bfffcc 	andi	r2,r2,65535
  8030ec:	10a0001c 	xori	r2,r2,32768
  8030f0:	10a00004 	addi	r2,r2,-32768
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8030f4:	8009883a 	mov	r4,r16
  8030f8:	01400044 	movi	r5,1
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
  8030fc:	10000416 	blt	r2,zero,803110 <openFileFromSD+0x48>
			alt_up_sd_card_fclose(fileHandler);
			return -1;
		}
	}
	return fileHandler;
}
  803100:	dfc00117 	ldw	ra,4(sp)
  803104:	dc000017 	ldw	r16,0(sp)
  803108:	dec00204 	addi	sp,sp,8
  80310c:	f800283a 	ret
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  803110:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  803114:	10bfffcc 	andi	r2,r2,65535
  803118:	10a0001c 	xori	r2,r2,32768
  80311c:	10a00004 	addi	r2,r2,-32768
			alt_up_sd_card_fclose(fileHandler);
  803120:	1009883a 	mov	r4,r2
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  803124:	103ff60e 	bge	r2,zero,803100 <openFileFromSD+0x38>
			alt_up_sd_card_fclose(fileHandler);
  803128:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  80312c:	00bfffc4 	movi	r2,-1
  803130:	003ff306 	br	803100 <openFileFromSD+0x38>

00803134 <writeLine>:

/*
 * A helper function that write a segment of data to SD card and write a LINE FEED at the end
 * it does not close file pointer and require an input of file pointer
 */
void writeLine(int file_pointer, char* data, int size) {
  803134:	defffb04 	addi	sp,sp,-20
  803138:	dcc00315 	stw	r19,12(sp)
  80313c:	dc400115 	stw	r17,4(sp)
  803140:	dfc00415 	stw	ra,16(sp)
  803144:	dc800215 	stw	r18,8(sp)
  803148:	dc000015 	stw	r16,0(sp)
  80314c:	2823883a 	mov	r17,r5
  803150:	3027883a 	mov	r19,r6
	if(data == NULL) return;
  803154:	28001d26 	beq	r5,zero,8031cc <writeLine+0x98>
	int i;
	for( i = 0; i < size; i++ )
  803158:	0180300e 	bge	zero,r6,80321c <writeLine+0xe8>
	{
		if(data[i] == 0) break;
  80315c:	29400007 	ldb	r5,0(r5)
  803160:	28002e26 	beq	r5,zero,80321c <writeLine+0xe8>
  803164:	24bfffcc 	andi	r18,r4,65535
  803168:	94a0001c 	xori	r18,r18,32768
  80316c:	94a00004 	addi	r18,r18,-32768
  803170:	0021883a 	mov	r16,zero
  803174:	00000406 	br	803188 <writeLine+0x54>
  803178:	8c0b883a 	add	r5,r17,r16
 * it does not close file pointer and require an input of file pointer
 */
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
  80317c:	9c000b26 	beq	r19,r16,8031ac <writeLine+0x78>
	{
		if(data[i] == 0) break;
  803180:	29400007 	ldb	r5,0(r5)
  803184:	28000926 	beq	r5,zero,8031ac <writeLine+0x78>
		if(!alt_up_sd_card_write(file_pointer, data[i])){
  803188:	9009883a 	mov	r4,r18
  80318c:	081e36c0 	call	81e36c <alt_up_sd_card_write>
 * it does not close file pointer and require an input of file pointer
 */
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
  803190:	84000044 	addi	r16,r16,1
	{
		if(data[i] == 0) break;
		if(!alt_up_sd_card_write(file_pointer, data[i])){
			printf("Write a character to SD card failed.\n");
  803194:	010020b4 	movhi	r4,130
  803198:	213f4504 	addi	r4,r4,-748
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
	{
		if(data[i] == 0) break;
		if(!alt_up_sd_card_write(file_pointer, data[i])){
  80319c:	103ff61e 	bne	r2,zero,803178 <writeLine+0x44>
			printf("Write a character to SD card failed.\n");
  8031a0:	080c5100 	call	80c510 <puts>
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
	{
		if(data[i] == 0) break;
  8031a4:	8c0b883a 	add	r5,r17,r16
 * it does not close file pointer and require an input of file pointer
 */
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
  8031a8:	9c3ff51e 	bne	r19,r16,803180 <writeLine+0x4c>
		if(data[i] == 0) break;
		if(!alt_up_sd_card_write(file_pointer, data[i])){
			printf("Write a character to SD card failed.\n");
		}
	}
	if(!alt_up_sd_card_write(file_pointer, '\r')) {
  8031ac:	9009883a 	mov	r4,r18
  8031b0:	01400344 	movi	r5,13
  8031b4:	081e36c0 	call	81e36c <alt_up_sd_card_write>
  8031b8:	10001426 	beq	r2,zero,80320c <writeLine+0xd8>
		printf("Write a new line ASCII failed\n");
	}
	if(!alt_up_sd_card_write(file_pointer, '\n')) {
  8031bc:	9009883a 	mov	r4,r18
  8031c0:	01400284 	movi	r5,10
  8031c4:	081e36c0 	call	81e36c <alt_up_sd_card_write>
  8031c8:	10000726 	beq	r2,zero,8031e8 <writeLine+0xb4>
		printf("Write a new line ASCII failed\n");
	}
}
  8031cc:	dfc00417 	ldw	ra,16(sp)
  8031d0:	dcc00317 	ldw	r19,12(sp)
  8031d4:	dc800217 	ldw	r18,8(sp)
  8031d8:	dc400117 	ldw	r17,4(sp)
  8031dc:	dc000017 	ldw	r16,0(sp)
  8031e0:	dec00504 	addi	sp,sp,20
  8031e4:	f800283a 	ret
	}
	if(!alt_up_sd_card_write(file_pointer, '\r')) {
		printf("Write a new line ASCII failed\n");
	}
	if(!alt_up_sd_card_write(file_pointer, '\n')) {
		printf("Write a new line ASCII failed\n");
  8031e8:	010020b4 	movhi	r4,130
  8031ec:	213f4f04 	addi	r4,r4,-708
	}
}
  8031f0:	dfc00417 	ldw	ra,16(sp)
  8031f4:	dcc00317 	ldw	r19,12(sp)
  8031f8:	dc800217 	ldw	r18,8(sp)
  8031fc:	dc400117 	ldw	r17,4(sp)
  803200:	dc000017 	ldw	r16,0(sp)
  803204:	dec00504 	addi	sp,sp,20
	}
	if(!alt_up_sd_card_write(file_pointer, '\r')) {
		printf("Write a new line ASCII failed\n");
	}
	if(!alt_up_sd_card_write(file_pointer, '\n')) {
		printf("Write a new line ASCII failed\n");
  803208:	080c5101 	jmpi	80c510 <puts>
		if(!alt_up_sd_card_write(file_pointer, data[i])){
			printf("Write a character to SD card failed.\n");
		}
	}
	if(!alt_up_sd_card_write(file_pointer, '\r')) {
		printf("Write a new line ASCII failed\n");
  80320c:	010020b4 	movhi	r4,130
  803210:	213f4f04 	addi	r4,r4,-708
  803214:	080c5100 	call	80c510 <puts>
  803218:	003fe806 	br	8031bc <writeLine+0x88>
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
	{
		if(data[i] == 0) break;
  80321c:	24bfffcc 	andi	r18,r4,65535
  803220:	94a0001c 	xori	r18,r18,32768
  803224:	94a00004 	addi	r18,r18,-32768
  803228:	003fe006 	br	8031ac <writeLine+0x78>

0080322c <readLine>:

/*
 * A helper function that read a line in a text file, require file pointer and does not close the file
 * Assumption has made that a line does not go over 100 characters
 */
int readLine(int file_pointer, char* line) {
  80322c:	defff904 	addi	sp,sp,-28
  803230:	dfc00615 	stw	ra,24(sp)
  803234:	dd400515 	stw	r21,20(sp)
  803238:	dd000415 	stw	r20,16(sp)
  80323c:	dcc00315 	stw	r19,12(sp)
  803240:	dc800215 	stw	r18,8(sp)
  803244:	dc400115 	stw	r17,4(sp)
  803248:	dc000015 	stw	r16,0(sp)
	if(line == NULL) return -1;
  80324c:	28000a1e 	bne	r5,zero,803278 <readLine+0x4c>
			printf("WARNNING! reading a line that contains more than 500 characters\n");
			break;
		}
	} while(line[i] != '\n' && line[i] != '\r' && line[i] != 0 && line[i] != -1);
	line[i] = 0;
	if(i == 0)
  803250:	00bfffc4 	movi	r2,-1
		return -1;
	return 0;
}
  803254:	dfc00617 	ldw	ra,24(sp)
  803258:	dd400517 	ldw	r21,20(sp)
  80325c:	dd000417 	ldw	r20,16(sp)
  803260:	dcc00317 	ldw	r19,12(sp)
  803264:	dc800217 	ldw	r18,8(sp)
  803268:	dc400117 	ldw	r17,4(sp)
  80326c:	dc000017 	ldw	r16,0(sp)
  803270:	dec00704 	addi	sp,sp,28
  803274:	f800283a 	ret
/*
 * A helper function that read a line in a text file, require file pointer and does not close the file
 * Assumption has made that a line does not go over 100 characters
 */
int readLine(int file_pointer, char* line) {
	if(line == NULL) return -1;
  803278:	24ffffcc 	andi	r19,r4,65535
  80327c:	047fffc4 	movi	r17,-1
  803280:	9ce0001c 	xori	r19,r19,32768
  803284:	9ce00004 	addi	r19,r19,-32768
  803288:	2821883a 	mov	r16,r5
  80328c:	8829883a 	mov	r20,r17
  803290:	05400284 	movi	r21,10
  803294:	00000906 	br	8032bc <readLine+0x90>
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
			return -2;
		}
		if(i == 0 && line[i] == '\n') //this is to skip an empty line if any
			line[i] = alt_up_sd_card_read(file_pointer);
  803298:	9809883a 	mov	r4,r19
	do {
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
			return -2;
		}
		if(i == 0 && line[i] == '\n') //this is to skip an empty line if any
  80329c:	1d401d26 	beq	r3,r21,803314 <readLine+0xe8>
			line[i] = alt_up_sd_card_read(file_pointer);
		if(i >= 500) {
			printf("WARNNING! reading a line that contains more than 500 characters\n");
			break;
		}
	} while(line[i] != '\n' && line[i] != '\r' && line[i] != 0 && line[i] != -1);
  8032a0:	80c00007 	ldb	r3,0(r16)
  8032a4:	84000044 	addi	r16,r16,1
  8032a8:	1d401626 	beq	r3,r21,803304 <readLine+0xd8>
  8032ac:	00800344 	movi	r2,13
  8032b0:	18801426 	beq	r3,r2,803304 <readLine+0xd8>
  8032b4:	18001326 	beq	r3,zero,803304 <readLine+0xd8>
  8032b8:	1d001226 	beq	r3,r20,803304 <readLine+0xd8>
	if(line == NULL) return -1;
	int i = -1;

	do {
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
  8032bc:	9809883a 	mov	r4,r19
  8032c0:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  8032c4:	10c03fcc 	andi	r3,r2,255
  8032c8:	18c0201c 	xori	r3,r3,128
  8032cc:	18ffe004 	addi	r3,r3,-128
  8032d0:	80800005 	stb	r2,0(r16)
int readLine(int file_pointer, char* line) {
	if(line == NULL) return -1;
	int i = -1;

	do {
		i++;
  8032d4:	8c400044 	addi	r17,r17,1
  8032d8:	8025883a 	mov	r18,r16
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
  8032dc:	1d001016 	blt	r3,r20,803320 <readLine+0xf4>
			return -2;
		}
		if(i == 0 && line[i] == '\n') //this is to skip an empty line if any
  8032e0:	883fed26 	beq	r17,zero,803298 <readLine+0x6c>
			line[i] = alt_up_sd_card_read(file_pointer);
		if(i >= 500) {
  8032e4:	00807cc4 	movi	r2,499
  8032e8:	147fed0e 	bge	r2,r17,8032a0 <readLine+0x74>
			printf("WARNNING! reading a line that contains more than 500 characters\n");
  8032ec:	010020b4 	movhi	r4,130
  8032f0:	213f5704 	addi	r4,r4,-676
  8032f4:	080c5100 	call	80c510 <puts>
			break;
		}
	} while(line[i] != '\n' && line[i] != '\r' && line[i] != 0 && line[i] != -1);
	line[i] = 0;
  8032f8:	0005883a 	mov	r2,zero
  8032fc:	80000005 	stb	zero,0(r16)
  803300:	003fd406 	br	803254 <readLine+0x28>
  803304:	90000005 	stb	zero,0(r18)
	if(i == 0)
  803308:	883fd126 	beq	r17,zero,803250 <readLine+0x24>
  80330c:	0005883a 	mov	r2,zero
  803310:	003fd006 	br	803254 <readLine+0x28>
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
			return -2;
		}
		if(i == 0 && line[i] == '\n') //this is to skip an empty line if any
			line[i] = alt_up_sd_card_read(file_pointer);
  803314:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  803318:	80800005 	stb	r2,0(r16)
  80331c:	003fe006 	br	8032a0 <readLine+0x74>
	if(line == NULL) return -1;
	int i = -1;

	do {
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
  803320:	00bfff84 	movi	r2,-2
  803324:	003fcb06 	br	803254 <readLine+0x28>

00803328 <removeListFromDB>:
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  803328:	defffb04 	addi	sp,sp,-20
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  80332c:	2105883a 	add	r2,r4,r4
  803330:	108b883a 	add	r5,r2,r2
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  803334:	dcc00315 	stw	r19,12(sp)
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  803338:	04c020b4 	movhi	r19,130
  80333c:	9cd1e904 	addi	r19,r19,18340
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  803340:	dc800215 	stw	r18,8(sp)
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  803344:	00a8e714 	movui	r2,41884
  803348:	2ce5883a 	add	r18,r5,r19
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  80334c:	dc400115 	stw	r17,4(sp)
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  803350:	90a3883a 	add	r17,r18,r2
  803354:	88c00017 	ldw	r3,0(r17)
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  803358:	dc000015 	stw	r16,0(sp)
  80335c:	dfc00415 	stw	ra,16(sp)
  803360:	2021883a 	mov	r16,r4
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  803364:	1800091e 	bne	r3,zero,80338c <removeListFromDB+0x64>
		db.index_list_order[list_id][i] = 0;
		db.index_list_song[list_id][i] = 0;
	}
	db.num_of_lists--;
	temp = NULL;
	return 0;
  803368:	00ffffc4 	movi	r3,-1
}
  80336c:	1805883a 	mov	r2,r3
  803370:	dfc00417 	ldw	ra,16(sp)
  803374:	dcc00317 	ldw	r19,12(sp)
  803378:	dc800217 	ldw	r18,8(sp)
  80337c:	dc400117 	ldw	r17,4(sp)
  803380:	dc000017 	ldw	r16,0(sp)
  803384:	dec00504 	addi	sp,sp,20
  803388:	f800283a 	ret
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  80338c:	013ff60e 	bge	zero,r4,803368 <removeListFromDB+0x40>
	killPlaylist(&(db.playlists[list_id]));
  803390:	99000104 	addi	r4,r19,4
  803394:	2909883a 	add	r4,r5,r4
  803398:	08069b00 	call	8069b0 <killPlaylist>
	db.playlists[list_id] = NULL;
	db.used_list_index[list_id] = 0;
	int* temp = (int*)malloc(sizeof(int));
  80339c:	01000104 	movi	r4,4
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
	killPlaylist(&(db.playlists[list_id]));
	db.playlists[list_id] = NULL;
  8033a0:	90000115 	stw	zero,4(r18)
	db.used_list_index[list_id] = 0;
  8033a4:	88000015 	stw	zero,0(r17)
	int* temp = (int*)malloc(sizeof(int));
  8033a8:	080bb6c0 	call	80bb6c <malloc>
	*temp = list_id;
	enqueue(db.avail_list_index, temp);
  8033ac:	00e8e614 	movui	r3,41880
  8033b0:	98c7883a 	add	r3,r19,r3
  8033b4:	19000017 	ldw	r4,0(r3)
  8033b8:	100b883a 	mov	r5,r2
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
	killPlaylist(&(db.playlists[list_id]));
	db.playlists[list_id] = NULL;
	db.used_list_index[list_id] = 0;
	int* temp = (int*)malloc(sizeof(int));
	*temp = list_id;
  8033bc:	14000015 	stw	r16,0(r2)
	enqueue(db.avail_list_index, temp);
  8033c0:	0806cc40 	call	806cc4 <enqueue>
  8033c4:	80806524 	muli	r2,r16,404
  8033c8:	0007883a 	mov	r3,zero
  8033cc:	01401944 	movi	r5,101
  8033d0:	1094c704 	addi	r2,r2,21276
  8033d4:	14c5883a 	add	r2,r2,r19
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8033d8:	18c00044 	addi	r3,r3,1
		db.index_list_order[list_id][i] = 0;
  8033dc:	10000015 	stw	zero,0(r2)
		db.index_list_song[list_id][i] = 0;
  8033e0:	102be115 	stw	zero,-20604(r2)
	db.used_list_index[list_id] = 0;
	int* temp = (int*)malloc(sizeof(int));
	*temp = list_id;
	enqueue(db.avail_list_index, temp);
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8033e4:	10800104 	addi	r2,r2,4
  8033e8:	197ffb1e 	bne	r3,r5,8033d8 <removeListFromDB+0xb0>
		db.index_list_order[list_id][i] = 0;
		db.index_list_song[list_id][i] = 0;
	}
	db.num_of_lists--;
  8033ec:	98803517 	ldw	r2,212(r19)
  8033f0:	0007883a 	mov	r3,zero
  8033f4:	10bfffc4 	addi	r2,r2,-1
  8033f8:	98803515 	stw	r2,212(r19)
  8033fc:	003fdb06 	br	80336c <removeListFromDB+0x44>

00803400 <addExisitedListToDB>:
}
/*
 * Add a playlist to the database by giving its id
 * adding operation will failed if the id has been used already
 */
void addExisitedListToDB(struct Playlist* playlist, int id) {
  803400:	defffa04 	addi	sp,sp,-24
  803404:	dc800215 	stw	r18,8(sp)
  803408:	dfc00515 	stw	ra,20(sp)
  80340c:	dd000415 	stw	r20,16(sp)
  803410:	dcc00315 	stw	r19,12(sp)
  803414:	dc400115 	stw	r17,4(sp)
  803418:	dc000015 	stw	r16,0(sp)
  80341c:	2025883a 	mov	r18,r4
	if(playlist == NULL || db.avail_list_index->size <= 0
  803420:	20003f26 	beq	r4,zero,803520 <addExisitedListToDB+0x120>
  803424:	044020b4 	movhi	r17,130
  803428:	8c51e904 	addi	r17,r17,18340
  80342c:	00a8e614 	movui	r2,41880
  803430:	8885883a 	add	r2,r17,r2
  803434:	11000017 	ldw	r4,0(r2)
  803438:	20c00017 	ldw	r3,0(r4)
  80343c:	00c0380e 	bge	zero,r3,803520 <addExisitedListToDB+0x120>
  803440:	28003726 	beq	r5,zero,803520 <addExisitedListToDB+0x120>
  803444:	2945883a 	add	r2,r5,r5
  803448:	1085883a 	add	r2,r2,r2
  80344c:	1445883a 	add	r2,r2,r17
  803450:	0528e714 	movui	r20,41884
  803454:	1505883a 	add	r2,r2,r20
  803458:	10c00017 	ldw	r3,0(r2)
  80345c:	04c00044 	movi	r19,1
  803460:	1cc02f26 	beq	r3,r19,803520 <addExisitedListToDB+0x120>
			|| id == 0 || db.used_list_index[id] == 1) return;
	int* index = dequeueValue(db.avail_list_index, id);
  803464:	0806e7c0 	call	806e7c <dequeueValue>
  803468:	1021883a 	mov	r16,r2
	db.num_of_lists++;
  80346c:	88803517 	ldw	r2,212(r17)
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
  803470:	9009883a 	mov	r4,r18
 */
void addExisitedListToDB(struct Playlist* playlist, int id) {
	if(playlist == NULL || db.avail_list_index->size <= 0
			|| id == 0 || db.used_list_index[id] == 1) return;
	int* index = dequeueValue(db.avail_list_index, id);
	db.num_of_lists++;
  803474:	14c5883a 	add	r2,r2,r19
  803478:	88803515 	stw	r2,212(r17)
	db.used_list_index[*index] = 1;
  80347c:	80c00017 	ldw	r3,0(r16)
  803480:	18c7883a 	add	r3,r3,r3
  803484:	18c7883a 	add	r3,r3,r3
  803488:	1c47883a 	add	r3,r3,r17
  80348c:	1d07883a 	add	r3,r3,r20
  803490:	1cc00015 	stw	r19,0(r3)
	setListId(playlist, *index);
  803494:	81400017 	ldw	r5,0(r16)
  803498:	08069200 	call	806920 <setListId>
	db.playlists[*index] = playlist;
  80349c:	80c00017 	ldw	r3,0(r16)
  8034a0:	0009883a 	mov	r4,zero
  8034a4:	18c5883a 	add	r2,r3,r3
  8034a8:	1085883a 	add	r2,r2,r2
  8034ac:	1445883a 	add	r2,r2,r17
  8034b0:	14800115 	stw	r18,4(r2)
  8034b4:	00000106 	br	8034bc <addExisitedListToDB+0xbc>
  8034b8:	80c00017 	ldw	r3,0(r16)
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
		db.index_list_order[*index][i] = 0;
  8034bc:	18801964 	muli	r2,r3,101
  8034c0:	1105883a 	add	r2,r2,r4
  8034c4:	1085883a 	add	r2,r2,r2
  8034c8:	1085883a 	add	r2,r2,r2
  8034cc:	1445883a 	add	r2,r2,r17
  8034d0:	1014c715 	stw	zero,21276(r2)
		db.index_list_song[*index][i] = 0;
  8034d4:	80c00017 	ldw	r3,0(r16)
	db.num_of_lists++;
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8034d8:	00801944 	movi	r2,101
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
  8034dc:	18c01964 	muli	r3,r3,101
  8034e0:	1907883a 	add	r3,r3,r4
  8034e4:	18c7883a 	add	r3,r3,r3
  8034e8:	18c7883a 	add	r3,r3,r3
  8034ec:	1c47883a 	add	r3,r3,r17
	db.num_of_lists++;
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8034f0:	21000044 	addi	r4,r4,1
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
  8034f4:	1800a815 	stw	zero,672(r3)
	db.num_of_lists++;
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8034f8:	20bfef1e 	bne	r4,r2,8034b8 <addExisitedListToDB+0xb8>
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
	}
	free(index);
  8034fc:	8009883a 	mov	r4,r16
	index = NULL;
}
  803500:	dfc00517 	ldw	ra,20(sp)
  803504:	dd000417 	ldw	r20,16(sp)
  803508:	dcc00317 	ldw	r19,12(sp)
  80350c:	dc800217 	ldw	r18,8(sp)
  803510:	dc400117 	ldw	r17,4(sp)
  803514:	dc000017 	ldw	r16,0(sp)
  803518:	dec00604 	addi	sp,sp,24
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
	}
	free(index);
  80351c:	080bb581 	jmpi	80bb58 <free>
	index = NULL;
}
  803520:	dfc00517 	ldw	ra,20(sp)
  803524:	dd000417 	ldw	r20,16(sp)
  803528:	dcc00317 	ldw	r19,12(sp)
  80352c:	dc800217 	ldw	r18,8(sp)
  803530:	dc400117 	ldw	r17,4(sp)
  803534:	dc000017 	ldw	r16,0(sp)
  803538:	dec00604 	addi	sp,sp,24
  80353c:	f800283a 	ret

00803540 <addListToDB>:
	db.songs[db.num_of_songs] = song;
}
/*
 * Add a playlist to the database; id will be automatically assigned
 */
void addListToDB(struct Playlist* playlist) {
  803540:	defffc04 	addi	sp,sp,-16
  803544:	dc800215 	stw	r18,8(sp)
  803548:	dfc00315 	stw	ra,12(sp)
  80354c:	dc400115 	stw	r17,4(sp)
  803550:	dc000015 	stw	r16,0(sp)
  803554:	2025883a 	mov	r18,r4
	if(playlist == NULL || db.avail_list_index->size <= 0) return;
  803558:	20003626 	beq	r4,zero,803634 <addListToDB+0xf4>
  80355c:	044020b4 	movhi	r17,130
  803560:	8c51e904 	addi	r17,r17,18340
  803564:	00a8e614 	movui	r2,41880
  803568:	8885883a 	add	r2,r17,r2
  80356c:	11000017 	ldw	r4,0(r2)
  803570:	20c00017 	ldw	r3,0(r4)
  803574:	00c02f0e 	bge	zero,r3,803634 <addListToDB+0xf4>
	db.num_of_lists++;
  803578:	88803517 	ldw	r2,212(r17)
  80357c:	10800044 	addi	r2,r2,1
  803580:	88803515 	stw	r2,212(r17)
	int* index = dequeue(db.avail_list_index);
  803584:	0806dd00 	call	806dd0 <dequeue>
  803588:	1021883a 	mov	r16,r2
	db.used_list_index[*index] = 1;
  80358c:	10800017 	ldw	r2,0(r2)
  803590:	00e8e714 	movui	r3,41884
  803594:	01400044 	movi	r5,1
  803598:	1085883a 	add	r2,r2,r2
  80359c:	1085883a 	add	r2,r2,r2
  8035a0:	1445883a 	add	r2,r2,r17
  8035a4:	10c5883a 	add	r2,r2,r3
  8035a8:	11400015 	stw	r5,0(r2)
	setListId(playlist, *index);
  8035ac:	81400017 	ldw	r5,0(r16)
  8035b0:	9009883a 	mov	r4,r18
  8035b4:	08069200 	call	806920 <setListId>
	db.playlists[*index] = playlist;
  8035b8:	80c00017 	ldw	r3,0(r16)
  8035bc:	0009883a 	mov	r4,zero
  8035c0:	18c5883a 	add	r2,r3,r3
  8035c4:	1085883a 	add	r2,r2,r2
  8035c8:	1445883a 	add	r2,r2,r17
  8035cc:	14800115 	stw	r18,4(r2)
  8035d0:	00000106 	br	8035d8 <addListToDB+0x98>
  8035d4:	80c00017 	ldw	r3,0(r16)
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
		db.index_list_order[*index][i] = 0;
  8035d8:	18801964 	muli	r2,r3,101
  8035dc:	1105883a 	add	r2,r2,r4
  8035e0:	1085883a 	add	r2,r2,r2
  8035e4:	1085883a 	add	r2,r2,r2
  8035e8:	1445883a 	add	r2,r2,r17
  8035ec:	1014c715 	stw	zero,21276(r2)
		db.index_list_song[*index][i] = 0;
  8035f0:	80c00017 	ldw	r3,0(r16)
	int* index = dequeue(db.avail_list_index);
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8035f4:	00801944 	movi	r2,101
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
  8035f8:	18c01964 	muli	r3,r3,101
  8035fc:	1907883a 	add	r3,r3,r4
  803600:	18c7883a 	add	r3,r3,r3
  803604:	18c7883a 	add	r3,r3,r3
  803608:	1c47883a 	add	r3,r3,r17
	int* index = dequeue(db.avail_list_index);
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  80360c:	21000044 	addi	r4,r4,1
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
  803610:	1800a815 	stw	zero,672(r3)
	int* index = dequeue(db.avail_list_index);
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  803614:	20bfef1e 	bne	r4,r2,8035d4 <addListToDB+0x94>
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
	}
	free(index);
  803618:	8009883a 	mov	r4,r16
	index = NULL;
}
  80361c:	dfc00317 	ldw	ra,12(sp)
  803620:	dc800217 	ldw	r18,8(sp)
  803624:	dc400117 	ldw	r17,4(sp)
  803628:	dc000017 	ldw	r16,0(sp)
  80362c:	dec00404 	addi	sp,sp,16
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
	}
	free(index);
  803630:	080bb581 	jmpi	80bb58 <free>
	index = NULL;
}
  803634:	dfc00317 	ldw	ra,12(sp)
  803638:	dc800217 	ldw	r18,8(sp)
  80363c:	dc400117 	ldw	r17,4(sp)
  803640:	dc000017 	ldw	r16,0(sp)
  803644:	dec00404 	addi	sp,sp,16
  803648:	f800283a 	ret

0080364c <addSongToDB>:
	return NULL;
}
/*
 * Add a song to the database
 */
void addSongToDB(struct Song* song) {
  80364c:	defffd04 	addi	sp,sp,-12
  803650:	dc000015 	stw	r16,0(sp)
	db.num_of_songs++;
  803654:	040020b4 	movhi	r16,130
  803658:	8411e904 	addi	r16,r16,18340
  80365c:	8080a717 	ldw	r2,668(r16)
	return NULL;
}
/*
 * Add a song to the database
 */
void addSongToDB(struct Song* song) {
  803660:	dc400115 	stw	r17,4(sp)
  803664:	dfc00215 	stw	ra,8(sp)
	db.num_of_songs++;
  803668:	10800044 	addi	r2,r2,1
	setSongId(song, db.num_of_songs);
  80366c:	100b883a 	mov	r5,r2
	return NULL;
}
/*
 * Add a song to the database
 */
void addSongToDB(struct Song* song) {
  803670:	2023883a 	mov	r17,r4
	db.num_of_songs++;
  803674:	8080a715 	stw	r2,668(r16)
	setSongId(song, db.num_of_songs);
  803678:	0807cc40 	call	807cc4 <setSongId>
	db.songs[db.num_of_songs] = song;
  80367c:	8080a717 	ldw	r2,668(r16)
  803680:	1085883a 	add	r2,r2,r2
  803684:	1085883a 	add	r2,r2,r2
  803688:	1405883a 	add	r2,r2,r16
  80368c:	14403615 	stw	r17,216(r2)
}
  803690:	dfc00217 	ldw	ra,8(sp)
  803694:	dc400117 	ldw	r17,4(sp)
  803698:	dc000017 	ldw	r16,0(sp)
  80369c:	dec00304 	addi	sp,sp,12
  8036a0:	f800283a 	ret

008036a4 <update>:
	loadListsFromSD();
	loadSongsFromSD();
	preloadSongsToPlaylist();
}

void update() {
  8036a4:	defff904 	addi	sp,sp,-28
  8036a8:	dd000415 	stw	r20,16(sp)
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
  8036ac:	050020b4 	movhi	r20,130
  8036b0:	a511e904 	addi	r20,r20,18340
  8036b4:	a0803517 	ldw	r2,212(r20)
	loadListsFromSD();
	loadSongsFromSD();
	preloadSongsToPlaylist();
}

void update() {
  8036b8:	dfc00615 	stw	ra,24(sp)
  8036bc:	dd400515 	stw	r21,20(sp)
  8036c0:	dcc00315 	stw	r19,12(sp)
  8036c4:	dc800215 	stw	r18,8(sp)
  8036c8:	dc400115 	stw	r17,4(sp)
  8036cc:	dc000015 	stw	r16,0(sp)
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
  8036d0:	0080190e 	bge	zero,r2,803738 <update+0x94>
  8036d4:	0021883a 	mov	r16,zero
  8036d8:	0027883a 	mov	r19,zero
  8036dc:	0023883a 	mov	r17,zero
  8036e0:	04800044 	movi	r18,1
  8036e4:	8c45883a 	add	r2,r17,r17
  8036e8:	00e8e814 	movui	r3,41888
  8036ec:	10c5883a 	add	r2,r2,r3
  8036f0:	1505883a 	add	r2,r2,r20
		while(db.used_list_index[++j] != 1);
  8036f4:	10c00017 	ldw	r3,0(r2)
  8036f8:	84000044 	addi	r16,r16,1
  8036fc:	10800104 	addi	r2,r2,4
  803700:	1cbffc1e 	bne	r3,r18,8036f4 <update+0x50>
		if(db.playlists[j] == NULL) {
  803704:	8423883a 	add	r17,r16,r16
  803708:	8c45883a 	add	r2,r17,r17
  80370c:	1505883a 	add	r2,r2,r20
  803710:	11000117 	ldw	r4,4(r2)
  803714:	20003726 	beq	r4,zero,8037f4 <update+0x150>
			printf("update error\n");
			return;
		}
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
  803718:	21401a17 	ldw	r5,104(r4)
  80371c:	21801b17 	ldw	r6,108(r4)
	preloadSongsToPlaylist();
}

void update() {
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
  803720:	98e7883a 	add	r19,r19,r3
		while(db.used_list_index[++j] != 1);
		if(db.playlists[j] == NULL) {
			printf("update error\n");
			return;
		}
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
  803724:	080216c0 	call	80216c <syncCreateExisitedPlaylist>
	preloadSongsToPlaylist();
}

void update() {
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
  803728:	008020b4 	movhi	r2,130
  80372c:	1091e904 	addi	r2,r2,18340
  803730:	10c03517 	ldw	r3,212(r2)
  803734:	98ffeb16 	blt	r19,r3,8036e4 <update+0x40>
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
									db.playlists[j]->num_of_songs,
									db.playlists[j]->id);

	}
	for(i = 1; i <= db.num_of_songs; i++) {
  803738:	a080a717 	ldw	r2,668(r20)
  80373c:	00800b0e 	bge	zero,r2,80376c <update+0xc8>
  803740:	04400044 	movi	r17,1
  803744:	040020b4 	movhi	r16,130
  803748:	84122004 	addi	r16,r16,18560
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
  80374c:	81000017 	ldw	r4,0(r16)
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
									db.playlists[j]->num_of_songs,
									db.playlists[j]->id);

	}
	for(i = 1; i <= db.num_of_songs; i++) {
  803750:	8c400044 	addi	r17,r17,1
  803754:	84000104 	addi	r16,r16,4
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
  803758:	21400917 	ldw	r5,36(r4)
  80375c:	21000104 	addi	r4,r4,4
  803760:	08020640 	call	802064 <syncCreateSong>
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
									db.playlists[j]->num_of_songs,
									db.playlists[j]->id);

	}
	for(i = 1; i <= db.num_of_songs; i++) {
  803764:	a080a717 	ldw	r2,668(r20)
  803768:	147ff80e 	bge	r2,r17,80374c <update+0xa8>
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
	}

	for(i = 1; i <= db.num_of_lists; i++){
  80376c:	a0803517 	ldw	r2,212(r20)
  803770:	0080170e 	bge	zero,r2,8037d0 <update+0x12c>
  803774:	04c00044 	movi	r19,1
  803778:	048020b4 	movhi	r18,130
  80377c:	9491eb04 	addi	r18,r18,18348
  803780:	05552d04 	movi	r21,21684
		if (db.playlists[i] != NULL){
  803784:	90800017 	ldw	r2,0(r18)
  803788:	10000c26 	beq	r2,zero,8037bc <update+0x118>
			for(j = 1; j <= db.playlists[i]->num_of_songs; j++){
  80378c:	10801a17 	ldw	r2,104(r2)
  803790:	00800a0e 	bge	zero,r2,8037bc <update+0x118>
  803794:	ad21883a 	add	r16,r21,r20
  803798:	04400044 	movi	r17,1
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
  80379c:	81400017 	ldw	r5,0(r16)
  8037a0:	9809883a 	mov	r4,r19
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
	}

	for(i = 1; i <= db.num_of_lists; i++){
		if (db.playlists[i] != NULL){
			for(j = 1; j <= db.playlists[i]->num_of_songs; j++){
  8037a4:	8c400044 	addi	r17,r17,1
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
  8037a8:	0801d780 	call	801d78 <syncAddExisitedSongToList>
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
	}

	for(i = 1; i <= db.num_of_lists; i++){
		if (db.playlists[i] != NULL){
			for(j = 1; j <= db.playlists[i]->num_of_songs; j++){
  8037ac:	90c00017 	ldw	r3,0(r18)
  8037b0:	84000104 	addi	r16,r16,4
  8037b4:	18801a17 	ldw	r2,104(r3)
  8037b8:	147ff80e 	bge	r2,r17,80379c <update+0xf8>
	}
	for(i = 1; i <= db.num_of_songs; i++) {
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
	}

	for(i = 1; i <= db.num_of_lists; i++){
  8037bc:	a0803517 	ldw	r2,212(r20)
  8037c0:	9cc00044 	addi	r19,r19,1
  8037c4:	ad406504 	addi	r21,r21,404
  8037c8:	94800104 	addi	r18,r18,4
  8037cc:	14ffed0e 	bge	r2,r19,803784 <update+0xe0>
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
			}
		}
	}
	syncDBFinish();
}
  8037d0:	dfc00617 	ldw	ra,24(sp)
  8037d4:	dd400517 	ldw	r21,20(sp)
  8037d8:	dd000417 	ldw	r20,16(sp)
  8037dc:	dcc00317 	ldw	r19,12(sp)
  8037e0:	dc800217 	ldw	r18,8(sp)
  8037e4:	dc400117 	ldw	r17,4(sp)
  8037e8:	dc000017 	ldw	r16,0(sp)
  8037ec:	dec00704 	addi	sp,sp,28
			for(j = 1; j <= db.playlists[i]->num_of_songs; j++){
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
			}
		}
	}
	syncDBFinish();
  8037f0:	0801f981 	jmpi	801f98 <syncDBFinish>
void update() {
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
		while(db.used_list_index[++j] != 1);
		if(db.playlists[j] == NULL) {
			printf("update error\n");
  8037f4:	010020b4 	movhi	r4,130
  8037f8:	213f6704 	addi	r4,r4,-612
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
			}
		}
	}
	syncDBFinish();
}
  8037fc:	dfc00617 	ldw	ra,24(sp)
  803800:	dd400517 	ldw	r21,20(sp)
  803804:	dd000417 	ldw	r20,16(sp)
  803808:	dcc00317 	ldw	r19,12(sp)
  80380c:	dc800217 	ldw	r18,8(sp)
  803810:	dc400117 	ldw	r17,4(sp)
  803814:	dc000017 	ldw	r16,0(sp)
  803818:	dec00704 	addi	sp,sp,28
void update() {
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
		while(db.used_list_index[++j] != 1);
		if(db.playlists[j] == NULL) {
			printf("update error\n");
  80381c:	080c5101 	jmpi	80c510 <puts>

00803820 <saveListChangesToSD>:
 * each playlist.
 * LORDER.TXT will contain have id of each playlist along with their songs
 * in correct order.
 * */
// TODO: simplify this function :(
void saveListChangesToSD(int param){
  803820:	defef404 	addi	sp,sp,-1072
  803824:	dc010215 	stw	r16,1032(sp)
  803828:	dfc10b15 	stw	ra,1068(sp)
  80382c:	df010a15 	stw	fp,1064(sp)
  803830:	ddc10915 	stw	r23,1060(sp)
  803834:	dd810815 	stw	r22,1056(sp)
  803838:	dd410715 	stw	r21,1052(sp)
  80383c:	dd010615 	stw	r20,1048(sp)
  803840:	dcc10515 	stw	r19,1044(sp)
  803844:	dc810415 	stw	r18,1040(sp)
  803848:	dc410315 	stw	r17,1036(sp)
  80384c:	2021883a 	mov	r16,r4

	int fileHandler;
	char* fileName = NULL;

	if (param == 0){
  803850:	20006f26 	beq	r4,zero,803a10 <saveListChangesToSD+0x1f0>
		fileName = LISTSONGFILE;
	} else if (param == 1){
  803854:	00800044 	movi	r2,1
  803858:	20800f26 	beq	r4,r2,803898 <saveListChangesToSD+0x78>
		fileName = LISTORDERFILE;
	} else {
		printf("Incorrect parameter value.\n");
  80385c:	010020b4 	movhi	r4,130
  803860:	213f6e04 	addi	r4,r4,-584
  803864:	080c5100 	call	80c510 <puts>
	fileName = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("file is not closed properly.\n");
		return;
	}
}
  803868:	dfc10b17 	ldw	ra,1068(sp)
  80386c:	df010a17 	ldw	fp,1064(sp)
  803870:	ddc10917 	ldw	r23,1060(sp)
  803874:	dd810817 	ldw	r22,1056(sp)
  803878:	dd410717 	ldw	r21,1052(sp)
  80387c:	dd010617 	ldw	r20,1048(sp)
  803880:	dcc10517 	ldw	r19,1044(sp)
  803884:	dc810417 	ldw	r18,1040(sp)
  803888:	dc410317 	ldw	r17,1036(sp)
  80388c:	dc010217 	ldw	r16,1032(sp)
  803890:	dec10c04 	addi	sp,sp,1072
  803894:	f800283a 	ret
	int fileHandler;
	char* fileName = NULL;

	if (param == 0){
		fileName = LISTSONGFILE;
	} else if (param == 1){
  803898:	044020b4 	movhi	r17,130
  80389c:	8c7f6b04 	addi	r17,r17,-596
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  8038a0:	8809883a 	mov	r4,r17
  8038a4:	000b883a 	mov	r5,zero
  8038a8:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  8038ac:	157fffcc 	andi	r21,r2,65535
  8038b0:	ad60001c 	xori	r21,r21,32768
  8038b4:	ad600004 	addi	r21,r21,-32768
	if (fileHandler < 0){
  8038b8:	a8005816 	blt	r21,zero,803a1c <saveListChangesToSD+0x1fc>
	int i, j;
	char line[1024];
	char temp[5];
	char* emptyPlaylist = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0";

	if (param == 0)
  8038bc:	80002a1e 	bne	r16,zero,803968 <saveListChangesToSD+0x148>
  8038c0:	07000044 	movi	fp,1
  8038c4:	058020b4 	movhi	r22,130
  8038c8:	b591eb04 	addi	r22,r22,18348
  8038cc:	dc800144 	addi	r18,sp,5
  8038d0:	05c10e04 	movi	r23,1080
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
  8038d4:	b0800017 	ldw	r2,0(r22)
  8038d8:	10006e26 	beq	r2,zero,803a94 <saveListChangesToSD+0x274>
				sprintf(line, "%d", db.playlists[i]->id);
  8038dc:	11801b17 	ldw	r6,108(r2)
  8038e0:	9009883a 	mov	r4,r18
  8038e4:	014020b4 	movhi	r5,130
  8038e8:	297f0404 	addi	r5,r5,-1008
  8038ec:	080cba40 	call	80cba4 <sprintf>
  8038f0:	00c020b4 	movhi	r3,130
  8038f4:	18d1e904 	addi	r3,r3,18340
  8038f8:	b8e1883a 	add	r16,r23,r3
  8038fc:	04400044 	movi	r17,1
  803900:	0500ffc4 	movi	r20,1023
  803904:	04c01944 	movi	r19,101
  803908:	00000606 	br	803924 <saveListChangesToSD+0x104>
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
  80390c:	080ce500 	call	80ce50 <strlen>
  803910:	d80b883a 	mov	r5,sp
  803914:	9009883a 	mov	r4,r18
  803918:	100d883a 	mov	r6,r2
  80391c:	080cec40 	call	80cec4 <strncat>
	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  803920:	8cc07626 	beq	r17,r19,803afc <saveListChangesToSD+0x2dc>
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_song[i][j]);
  803924:	81800017 	ldw	r6,0(r16)
  803928:	014020b4 	movhi	r5,130
  80392c:	297f7f04 	addi	r5,r5,-516
  803930:	d809883a 	mov	r4,sp
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  803934:	d8000015 	stw	zero,0(sp)
  803938:	d8000105 	stb	zero,4(sp)
					sprintf(temp, " %d", db.index_list_song[i][j]);
  80393c:	080cba40 	call	80cba4 <sprintf>
					if (strlen(line) >= 1024) {
  803940:	9009883a 	mov	r4,r18
  803944:	080ce500 	call	80ce50 <strlen>
	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  803948:	8c400044 	addi	r17,r17,1
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
  80394c:	d809883a 	mov	r4,sp
	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  803950:	84000104 	addi	r16,r16,4
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_song[i][j]);
					if (strlen(line) >= 1024) {
  803954:	a0bfed2e 	bgeu	r20,r2,80390c <saveListChangesToSD+0xec>
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_order[i][j]);
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
  803958:	010020b4 	movhi	r4,130
  80395c:	213f8004 	addi	r4,r4,-512
  803960:	080c5100 	call	80c510 <puts>
  803964:	003fc006 	br	803868 <saveListChangesToSD+0x48>
	char temp[5];
	char* emptyPlaylist = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0";

	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
  803968:	07000044 	movi	fp,1
  80396c:	058020b4 	movhi	r22,130
  803970:	b591eb04 	addi	r22,r22,18348
  803974:	dc800144 	addi	r18,sp,5
  803978:	05d52d04 	movi	r23,21684
				writeLine(fileHandler, emptyPlaylist, strlen(emptyPlaylist));
			}
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
  80397c:	b0800017 	ldw	r2,0(r22)
  803980:	10003326 	beq	r2,zero,803a50 <saveListChangesToSD+0x230>
				sprintf(line, "%d", db.playlists[i]->id);
  803984:	11801b17 	ldw	r6,108(r2)
  803988:	9009883a 	mov	r4,r18
  80398c:	014020b4 	movhi	r5,130
  803990:	297f0404 	addi	r5,r5,-1008
  803994:	080cba40 	call	80cba4 <sprintf>
  803998:	00c020b4 	movhi	r3,130
  80399c:	18d1e904 	addi	r3,r3,18340
  8039a0:	b8e1883a 	add	r16,r23,r3
  8039a4:	04400044 	movi	r17,1
  8039a8:	0500ffc4 	movi	r20,1023
  8039ac:	04c01944 	movi	r19,101
  8039b0:	00000606 	br	8039cc <saveListChangesToSD+0x1ac>
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
  8039b4:	080ce500 	call	80ce50 <strlen>
  8039b8:	d80b883a 	mov	r5,sp
  8039bc:	9009883a 	mov	r4,r18
  8039c0:	100d883a 	mov	r6,r2
  8039c4:	080cec40 	call	80cec4 <strncat>
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  8039c8:	8cc03d26 	beq	r17,r19,803ac0 <saveListChangesToSD+0x2a0>
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_order[i][j]);
  8039cc:	81800017 	ldw	r6,0(r16)
  8039d0:	014020b4 	movhi	r5,130
  8039d4:	297f7f04 	addi	r5,r5,-516
  8039d8:	d809883a 	mov	r4,sp
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  8039dc:	d8000015 	stw	zero,0(sp)
  8039e0:	d8000105 	stb	zero,4(sp)
					sprintf(temp, " %d", db.index_list_order[i][j]);
  8039e4:	080cba40 	call	80cba4 <sprintf>
					if (strlen(line) >= 1024) {
  8039e8:	9009883a 	mov	r4,r18
  8039ec:	080ce500 	call	80ce50 <strlen>
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  8039f0:	8c400044 	addi	r17,r17,1
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
  8039f4:	d809883a 	mov	r4,sp
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  8039f8:	84000104 	addi	r16,r16,4
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_order[i][j]);
					if (strlen(line) >= 1024) {
  8039fc:	a0bfed2e 	bgeu	r20,r2,8039b4 <saveListChangesToSD+0x194>
						printf("this line has more than 1024 words\n");
  803a00:	010020b4 	movhi	r4,130
  803a04:	213f8004 	addi	r4,r4,-512
  803a08:	080c5100 	call	80c510 <puts>
  803a0c:	003f9606 	br	803868 <saveListChangesToSD+0x48>
		fileName = LISTSONGFILE;
	} else if (param == 1){
		fileName = LISTORDERFILE;
	} else {
		printf("Incorrect parameter value.\n");
		return;
  803a10:	044020b4 	movhi	r17,130
  803a14:	8c7f7504 	addi	r17,r17,-556
  803a18:	003fa106 	br	8038a0 <saveListChangesToSD+0x80>
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  803a1c:	8809883a 	mov	r4,r17
  803a20:	01400044 	movi	r5,1
  803a24:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  803a28:	157fffcc 	andi	r21,r2,65535
  803a2c:	ad60001c 	xori	r21,r21,32768
  803a30:	ad600004 	addi	r21,r21,-32768
  803a34:	a83fa10e 	bge	r21,zero,8038bc <saveListChangesToSD+0x9c>
			alt_up_sd_card_fclose(fileHandler);
  803a38:	a809883a 	mov	r4,r21
  803a3c:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
	} else {
		printf("Incorrect parameter value.\n");
		return;
	}
	if ((fileHandler = openFileFromSD(fileName)) < 0){
		printf("Can't open LSONG.TXT error!\n");
  803a40:	010020b4 	movhi	r4,130
  803a44:	213f7804 	addi	r4,r4,-544
  803a48:	080c5100 	call	80c510 <puts>
  803a4c:	003f8606 	br	803868 <saveListChangesToSD+0x48>
				}
				line[strlen(line)] = '\0';
				writeLine(fileHandler, line, strlen(line));
				memset(line, 0, sizeof(line)/sizeof(line[0]));
			} else {
				writeLine(fileHandler, emptyPlaylist, strlen(emptyPlaylist));
  803a50:	a809883a 	mov	r4,r21
  803a54:	014020b4 	movhi	r5,130
  803a58:	297f8904 	addi	r5,r5,-476
  803a5c:	01803244 	movi	r6,201
  803a60:	08031340 	call	803134 <writeLine>
			} else {
				writeLine(fileHandler, emptyPlaylist, strlen(emptyPlaylist));
			}
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
  803a64:	e7000044 	addi	fp,fp,1
  803a68:	00800c84 	movi	r2,50
  803a6c:	bdc06504 	addi	r23,r23,404
  803a70:	b5800104 	addi	r22,r22,4
  803a74:	e0bfc11e 	bne	fp,r2,80397c <saveListChangesToSD+0x15c>
			}
		}
	}
	emptyPlaylist = NULL;
	fileName = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
  803a78:	a809883a 	mov	r4,r21
  803a7c:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  803a80:	103f791e 	bne	r2,zero,803868 <saveListChangesToSD+0x48>
		printf("file is not closed properly.\n");
  803a84:	010020b4 	movhi	r4,130
  803a88:	213fbc04 	addi	r4,r4,-272
  803a8c:	080c5100 	call	80c510 <puts>
  803a90:	003f7506 	br	803868 <saveListChangesToSD+0x48>
				}
				line[strlen(line)] = '\0';
				writeLine(fileHandler, line, strlen(line));
				memset(line, 0, sizeof(line)/sizeof(line[0]));
			} else {
				writeLine(fileHandler, emptyPlaylist, strlen(emptyPlaylist));
  803a94:	a809883a 	mov	r4,r21
  803a98:	014020b4 	movhi	r5,130
  803a9c:	297f8904 	addi	r5,r5,-476
  803aa0:	01803244 	movi	r6,201
  803aa4:	08031340 	call	803134 <writeLine>
	char temp[5];
	char* emptyPlaylist = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0";

	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
  803aa8:	e7000044 	addi	fp,fp,1
  803aac:	00800c84 	movi	r2,50
  803ab0:	bdc06504 	addi	r23,r23,404
  803ab4:	b5800104 	addi	r22,r22,4
  803ab8:	e0bf861e 	bne	fp,r2,8038d4 <saveListChangesToSD+0xb4>
  803abc:	003fee06 	br	803a78 <saveListChangesToSD+0x258>
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
				}
				line[strlen(line)] = '\0';
  803ac0:	9009883a 	mov	r4,r18
  803ac4:	080ce500 	call	80ce50 <strlen>
  803ac8:	9085883a 	add	r2,r18,r2
				writeLine(fileHandler, line, strlen(line));
  803acc:	9009883a 	mov	r4,r18
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
				}
				line[strlen(line)] = '\0';
  803ad0:	10000005 	stb	zero,0(r2)
				writeLine(fileHandler, line, strlen(line));
  803ad4:	080ce500 	call	80ce50 <strlen>
  803ad8:	900b883a 	mov	r5,r18
  803adc:	a809883a 	mov	r4,r21
  803ae0:	100d883a 	mov	r6,r2
  803ae4:	08031340 	call	803134 <writeLine>
				memset(line, 0, sizeof(line)/sizeof(line[0]));
  803ae8:	9009883a 	mov	r4,r18
  803aec:	000b883a 	mov	r5,zero
  803af0:	01810004 	movi	r6,1024
  803af4:	080c3600 	call	80c360 <memset>
  803af8:	003fda06 	br	803a64 <saveListChangesToSD+0x244>
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
				}
				line[strlen(line)] = '\0';
  803afc:	9009883a 	mov	r4,r18
  803b00:	080ce500 	call	80ce50 <strlen>
  803b04:	9085883a 	add	r2,r18,r2
				writeLine(fileHandler, line, strlen(line));
  803b08:	9009883a 	mov	r4,r18
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
				}
				line[strlen(line)] = '\0';
  803b0c:	10000005 	stb	zero,0(r2)
				writeLine(fileHandler, line, strlen(line));
  803b10:	080ce500 	call	80ce50 <strlen>
  803b14:	900b883a 	mov	r5,r18
  803b18:	a809883a 	mov	r4,r21
  803b1c:	100d883a 	mov	r6,r2
  803b20:	08031340 	call	803134 <writeLine>
				memset(line, 0, sizeof(line)/sizeof(line[0]));
  803b24:	9009883a 	mov	r4,r18
  803b28:	000b883a 	mov	r5,zero
  803b2c:	01810004 	movi	r6,1024
  803b30:	080c3600 	call	80c360 <memset>
  803b34:	003fdc06 	br	803aa8 <saveListChangesToSD+0x288>

00803b38 <saveAllUpdatesToSDBeforeQuits>:

/*
 * Saves all changes related to songs and playlists to SDCard
 * Called before quitting the app
 * */
void saveAllUpdatesToSDBeforeQuits(){
  803b38:	deffff04 	addi	sp,sp,-4
	saveListChangesToSD(0);
  803b3c:	0009883a 	mov	r4,zero

/*
 * Saves all changes related to songs and playlists to SDCard
 * Called before quitting the app
 * */
void saveAllUpdatesToSDBeforeQuits(){
  803b40:	dfc00015 	stw	ra,0(sp)
	saveListChangesToSD(0);
  803b44:	08038200 	call	803820 <saveListChangesToSD>
	saveListChangesToSD(1);
  803b48:	01000044 	movi	r4,1
}
  803b4c:	dfc00017 	ldw	ra,0(sp)
  803b50:	dec00104 	addi	sp,sp,4
 * Saves all changes related to songs and playlists to SDCard
 * Called before quitting the app
 * */
void saveAllUpdatesToSDBeforeQuits(){
	saveListChangesToSD(0);
	saveListChangesToSD(1);
  803b54:	08038201 	jmpi	803820 <saveListChangesToSD>

00803b58 <getAndUpdateSongsFromTxt>:
 * It also checks if there exist any songs in SDCard that are newly
 * added and has not been written to SONGS.TXT.
 * Those songs will also get added to DB.
 * */

int getAndUpdateSongsFromTxt(char** arrFromSDFiles){
  803b58:	defef604 	addi	sp,sp,-1064
  803b5c:	df010815 	stw	fp,1056(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  803b60:	000b883a 	mov	r5,zero
 * It also checks if there exist any songs in SDCard that are newly
 * added and has not been written to SONGS.TXT.
 * Those songs will also get added to DB.
 * */

int getAndUpdateSongsFromTxt(char** arrFromSDFiles){
  803b64:	2039883a 	mov	fp,r4
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  803b68:	010020b4 	movhi	r4,130
  803b6c:	213fc404 	addi	r4,r4,-240
 * It also checks if there exist any songs in SDCard that are newly
 * added and has not been written to SONGS.TXT.
 * Those songs will also get added to DB.
 * */

int getAndUpdateSongsFromTxt(char** arrFromSDFiles){
  803b70:	ddc10715 	stw	r23,1052(sp)
  803b74:	dfc10915 	stw	ra,1060(sp)
  803b78:	dd810615 	stw	r22,1048(sp)
  803b7c:	dd410515 	stw	r21,1044(sp)
  803b80:	dd010415 	stw	r20,1040(sp)
  803b84:	dcc10315 	stw	r19,1036(sp)
  803b88:	dc810215 	stw	r18,1032(sp)
  803b8c:	dc410115 	stw	r17,1028(sp)
  803b90:	dc010015 	stw	r16,1024(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  803b94:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  803b98:	15ffffcc 	andi	r23,r2,65535
  803b9c:	bde0001c 	xori	r23,r23,32768
  803ba0:	bde00004 	addi	r23,r23,-32768
	if (fileHandler < 0){
  803ba4:	b800c816 	blt	r23,zero,803ec8 <getAndUpdateSongsFromTxt+0x370>
		printf("Reading songs from SONGS.TXT error!\n");
		return -1;
	}

	// add songs from
	char** songNames = malloc(MAX_SONGS *sizeof(char*));
  803ba8:	01006504 	movi	r4,404
  803bac:	080bb6c0 	call	80bb6c <malloc>
  803bb0:	1027883a 	mov	r19,r2
  803bb4:	102b883a 	mov	r21,r2
  803bb8:	0029883a 	mov	r20,zero
  803bbc:	dc408244 	addi	r17,sp,521
	char temp[501];
	char substr[501];
	int start, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
		line = (char*)malloc(sizeof(char)*501);
  803bc0:	01007d44 	movi	r4,501
  803bc4:	080bb6c0 	call	80bb6c <malloc>
		if((fileStats = readLine(fileHandler, line)) == -2) {
  803bc8:	100b883a 	mov	r5,r2
  803bcc:	b809883a 	mov	r4,r23
	char temp[501];
	char substr[501];
	int start, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
		line = (char*)malloc(sizeof(char)*501);
  803bd0:	1025883a 	mov	r18,r2
		if((fileStats = readLine(fileHandler, line)) == -2) {
  803bd4:	080322c0 	call	80322c <readLine>
  803bd8:	1007883a 	mov	r3,r2
  803bdc:	00bfff84 	movi	r2,-2
  803be0:	1880aa26 	beq	r3,r2,803e8c <getAndUpdateSongsFromTxt+0x334>
				printf("File is not closed properly.\n");
			}
			free(line);
			line = NULL;
			return -1;
		} else if(fileStats == -1) {
  803be4:	00bfffc4 	movi	r2,-1
  803be8:	1880b426 	beq	r3,r2,803ebc <getAndUpdateSongsFromTxt+0x364>
			free(line);
			line = NULL;
			break;
		} else {
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  803bec:	01807d44 	movi	r6,501
  803bf0:	8809883a 	mov	r4,r17
  803bf4:	000b883a 	mov	r5,zero
  803bf8:	080c3600 	call	80c360 <memset>
			strcpy(temp, line);
  803bfc:	900b883a 	mov	r5,r18
  803c00:	8809883a 	mov	r4,r17
  803c04:	080cdc40 	call	80cdc4 <strcpy>
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
  803c08:	8809883a 	mov	r4,r17
  803c0c:	080ce500 	call	80ce50 <strlen>
  803c10:	0021883a 	mov	r16,zero
  803c14:	100d883a 	mov	r6,r2
  803c18:	000f883a 	mov	r7,zero
				if (temp[i] == ' '){
  803c1c:	8c05883a 	add	r2,r17,r16
					if (iteration == 0){
						start = i+1;
  803c20:	81000044 	addi	r4,r16,1
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
					if (iteration == 0){
  803c24:	380ac03a 	cmpne	r5,r7,zero
			break;
		} else {
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
  803c28:	8180092e 	bgeu	r16,r6,803c50 <getAndUpdateSongsFromTxt+0xf8>
				if (temp[i] == ' '){
  803c2c:	10c00007 	ldb	r3,0(r2)
  803c30:	00800804 	movi	r2,32
  803c34:	18806526 	beq	r3,r2,803dcc <getAndUpdateSongsFromTxt+0x274>
						if (temp[0] != '0'){
							memset(substr, 0 , sizeof(substr)/sizeof(substr[0]));
							strcpy(substr, line+i+1);
							createSong(temp, strtol(substr, NULL, 10));
							songNames[numOfSongs] = malloc(20*sizeof(char));
							strcpy(songNames[numOfSongs], temp);
  803c38:	81000044 	addi	r4,r16,1
  803c3c:	2021883a 	mov	r16,r4
		} else {
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
  803c40:	8c05883a 	add	r2,r17,r16
					if (iteration == 0){
						start = i+1;
  803c44:	81000044 	addi	r4,r16,1
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
					if (iteration == 0){
  803c48:	380ac03a 	cmpne	r5,r7,zero
			break;
		} else {
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
  803c4c:	81bff736 	bltu	r16,r6,803c2c <getAndUpdateSongsFromTxt+0xd4>
					}
				}
			}
			numOfSongs++;
		}
		free(line);
  803c50:	9009883a 	mov	r4,r18
  803c54:	080bb580 	call	80bb58 <free>
						}
						break;
					}
				}
			}
			numOfSongs++;
  803c58:	a5000044 	addi	r20,r20,1
	char* line = NULL;
	char temp[501];
	char substr[501];
	int start, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
  803c5c:	00801944 	movi	r2,101
					}
				}
			}
			numOfSongs++;
		}
		free(line);
  803c60:	ad400104 	addi	r21,r21,4
	char* line = NULL;
	char temp[501];
	char substr[501];
	int start, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
  803c64:	a0bfd61e 	bne	r20,r2,803bc0 <getAndUpdateSongsFromTxt+0x68>
		}
		free(line);
		line = NULL;
	}
	//set an end sign, null means end of the array.
	songNames[numOfSongs] = NULL;
  803c68:	a505883a 	add	r2,r20,r20
	int size = 0;
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
  803c6c:	e4400017 	ldw	r17,0(fp)
		}
		free(line);
		line = NULL;
	}
	//set an end sign, null means end of the array.
	songNames[numOfSongs] = NULL;
  803c70:	1085883a 	add	r2,r2,r2
  803c74:	14c5883a 	add	r2,r2,r19
  803c78:	10000015 	stw	zero,0(r2)
	int size = 0;
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
  803c7c:	88002626 	beq	r17,zero,803d18 <getAndUpdateSongsFromTxt+0x1c0>
	j = 0;
	while (songNames[j] != NULL){
		free(songNames[j]);
		songNames[j++] = NULL;
	}
	free(songNames);
  803c80:	e5400104 	addi	r21,fp,4
  803c84:	e025883a 	mov	r18,fp
  803c88:	0021883a 	mov	r16,zero
  803c8c:	00000406 	br	803ca0 <getAndUpdateSongsFromTxt+0x148>
				writeLine(fileHandler, strToStore, size);
				createSong(arrFromSDFiles[sdFiles_index], 0);
				numOfSongs++;
				break;
			} else {
				if (strcmp(songNames[txtFiles_index], arrFromSDFiles[sdFiles_index]) == 0)
  803c90:	080cd080 	call	80cd08 <strcmp>
  803c94:	10001c26 	beq	r2,zero,803d08 <getAndUpdateSongsFromTxt+0x1b0>
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
		for (txtFiles_index = 0; txtFiles_index < MAX_SONGS; txtFiles_index++){
  803c98:	00806504 	movi	r2,404
  803c9c:	80801a26 	beq	r16,r2,803d08 <getAndUpdateSongsFromTxt+0x1b0>
			if (songNames[txtFiles_index] == NULL){
  803ca0:	9c05883a 	add	r2,r19,r16
  803ca4:	10c00017 	ldw	r3,0(r2)
				createSong(arrFromSDFiles[sdFiles_index], 0);
				numOfSongs++;
				break;
			} else {
				if (strcmp(songNames[txtFiles_index], arrFromSDFiles[sdFiles_index]) == 0)
					break;
  803ca8:	84000104 	addi	r16,r16,4
				writeLine(fileHandler, strToStore, size);
				createSong(arrFromSDFiles[sdFiles_index], 0);
				numOfSongs++;
				break;
			} else {
				if (strcmp(songNames[txtFiles_index], arrFromSDFiles[sdFiles_index]) == 0)
  803cac:	880b883a 	mov	r5,r17
  803cb0:	1809883a 	mov	r4,r3
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
		for (txtFiles_index = 0; txtFiles_index < MAX_SONGS; txtFiles_index++){
			if (songNames[txtFiles_index] == NULL){
  803cb4:	183ff61e 	bne	r3,zero,803c90 <getAndUpdateSongsFromTxt+0x138>
				memset(strToStore, 0 , sizeof(strToStore)/sizeof(strToStore[0]));
  803cb8:	d8000015 	stw	zero,0(sp)
  803cbc:	d8000115 	stw	zero,4(sp)
  803cc0:	d8000215 	stw	zero,8(sp)
  803cc4:	d8000315 	stw	zero,12(sp)
  803cc8:	d8000415 	stw	zero,16(sp)
  803ccc:	a5000044 	addi	r20,r20,1
				while((size = sprintf(strToStore, "%d %s 0", numOfSongs+1, arrFromSDFiles[sdFiles_index])) <= 0);
  803cd0:	91c00017 	ldw	r7,0(r18)
  803cd4:	d809883a 	mov	r4,sp
  803cd8:	014020b4 	movhi	r5,130
  803cdc:	297fe304 	addi	r5,r5,-116
  803ce0:	a00d883a 	mov	r6,r20
  803ce4:	080cba40 	call	80cba4 <sprintf>
  803ce8:	00bff90e 	bge	zero,r2,803cd0 <getAndUpdateSongsFromTxt+0x178>
				writeLine(fileHandler, strToStore, size);
  803cec:	b809883a 	mov	r4,r23
  803cf0:	d80b883a 	mov	r5,sp
  803cf4:	100d883a 	mov	r6,r2
  803cf8:	08031340 	call	803134 <writeLine>
				createSong(arrFromSDFiles[sdFiles_index], 0);
  803cfc:	91000017 	ldw	r4,0(r18)
  803d00:	000b883a 	mov	r5,zero
  803d04:	08012880 	call	801288 <createSong>
	int size = 0;
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
  803d08:	ac400017 	ldw	r17,0(r21)
		for (txtFiles_index = 0; txtFiles_index < MAX_SONGS; txtFiles_index++){
  803d0c:	a825883a 	mov	r18,r21
	int size = 0;
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
  803d10:	ad400104 	addi	r21,r21,4
  803d14:	883fdc1e 	bne	r17,zero,803c88 <getAndUpdateSongsFromTxt+0x130>
			}
		}
		sdFiles_index++;
	}
	memset(&strToStore[0], 0 , sizeof(strToStore)/sizeof(strToStore[0]));
	if (!alt_up_sd_card_fclose(fileHandler)){
  803d18:	b809883a 	mov	r4,r23
					break;
			}
		}
		sdFiles_index++;
	}
	memset(&strToStore[0], 0 , sizeof(strToStore)/sizeof(strToStore[0]));
  803d1c:	d8000015 	stw	zero,0(sp)
  803d20:	d8000115 	stw	zero,4(sp)
  803d24:	d8000215 	stw	zero,8(sp)
  803d28:	d8000315 	stw	zero,12(sp)
  803d2c:	d8000415 	stw	zero,16(sp)
	if (!alt_up_sd_card_fclose(fileHandler)){
  803d30:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  803d34:	10007326 	beq	r2,zero,803f04 <getAndUpdateSongsFromTxt+0x3ac>
		printf("File is not closed properly.\n");
	}

	int j = 0;
	while (arrFromSDFiles[j] != NULL){
  803d38:	e1000017 	ldw	r4,0(fp)
  803d3c:	20000826 	beq	r4,zero,803d60 <getAndUpdateSongsFromTxt+0x208>
  803d40:	e4000104 	addi	r16,fp,4
  803d44:	e023883a 	mov	r17,fp
		free(arrFromSDFiles[j]);
  803d48:	080bb580 	call	80bb58 <free>
		arrFromSDFiles[j++] = NULL;
  803d4c:	88000015 	stw	zero,0(r17)
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
	}

	int j = 0;
	while (arrFromSDFiles[j] != NULL){
  803d50:	81000017 	ldw	r4,0(r16)
		free(arrFromSDFiles[j]);
		arrFromSDFiles[j++] = NULL;
  803d54:	8023883a 	mov	r17,r16
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
	}

	int j = 0;
	while (arrFromSDFiles[j] != NULL){
  803d58:	84000104 	addi	r16,r16,4
  803d5c:	203ffa1e 	bne	r4,zero,803d48 <getAndUpdateSongsFromTxt+0x1f0>
		free(arrFromSDFiles[j]);
		arrFromSDFiles[j++] = NULL;
	}
	free(arrFromSDFiles);
  803d60:	e009883a 	mov	r4,fp
  803d64:	080bb580 	call	80bb58 <free>
	arrFromSDFiles = NULL;
	j = 0;
	while (songNames[j] != NULL){
  803d68:	99000017 	ldw	r4,0(r19)
  803d6c:	20000826 	beq	r4,zero,803d90 <getAndUpdateSongsFromTxt+0x238>
  803d70:	9c000104 	addi	r16,r19,4
  803d74:	9823883a 	mov	r17,r19
		free(songNames[j]);
  803d78:	080bb580 	call	80bb58 <free>
		songNames[j++] = NULL;
  803d7c:	88000015 	stw	zero,0(r17)
		arrFromSDFiles[j++] = NULL;
	}
	free(arrFromSDFiles);
	arrFromSDFiles = NULL;
	j = 0;
	while (songNames[j] != NULL){
  803d80:	81000017 	ldw	r4,0(r16)
		free(songNames[j]);
		songNames[j++] = NULL;
  803d84:	8023883a 	mov	r17,r16
		arrFromSDFiles[j++] = NULL;
	}
	free(arrFromSDFiles);
	arrFromSDFiles = NULL;
	j = 0;
	while (songNames[j] != NULL){
  803d88:	84000104 	addi	r16,r16,4
  803d8c:	203ffa1e 	bne	r4,zero,803d78 <getAndUpdateSongsFromTxt+0x220>
		free(songNames[j]);
		songNames[j++] = NULL;
	}
	free(songNames);
  803d90:	9809883a 	mov	r4,r19
  803d94:	080bb580 	call	80bb58 <free>
  803d98:	0005883a 	mov	r2,zero
	songNames = NULL;
	return 0;
}
  803d9c:	dfc10917 	ldw	ra,1060(sp)
  803da0:	df010817 	ldw	fp,1056(sp)
  803da4:	ddc10717 	ldw	r23,1052(sp)
  803da8:	dd810617 	ldw	r22,1048(sp)
  803dac:	dd410517 	ldw	r21,1044(sp)
  803db0:	dd010417 	ldw	r20,1040(sp)
  803db4:	dcc10317 	ldw	r19,1036(sp)
  803db8:	dc810217 	ldw	r18,1032(sp)
  803dbc:	dc410117 	ldw	r17,1028(sp)
  803dc0:	dc010017 	ldw	r16,1024(sp)
  803dc4:	dec10a04 	addi	sp,sp,1064
  803dc8:	f800283a 	ret
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
					if (iteration == 0){
						start = i+1;
  803dcc:	01c00044 	movi	r7,1
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
					if (iteration == 0){
  803dd0:	2800031e 	bne	r5,zero,803de0 <getAndUpdateSongsFromTxt+0x288>
						start = i+1;
  803dd4:	202d883a 	mov	r22,r4
						if (temp[0] != '0'){
							memset(substr, 0 , sizeof(substr)/sizeof(substr[0]));
							strcpy(substr, line+i+1);
							createSong(temp, strtol(substr, NULL, 10));
							songNames[numOfSongs] = malloc(20*sizeof(char));
							strcpy(songNames[numOfSongs], temp);
  803dd8:	2021883a 	mov	r16,r4
  803ddc:	003f9806 	br	803c40 <getAndUpdateSongsFromTxt+0xe8>
					if (iteration == 0){
						start = i+1;
						iteration++;
					} else {
						end = i+1;
						memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  803de0:	000b883a 	mov	r5,zero
  803de4:	01807d44 	movi	r6,501
  803de8:	8809883a 	mov	r4,r17
  803dec:	080c3600 	call	80c360 <memset>
						strncpy(temp, line+start, end-start-1);
  803df0:	8809883a 	mov	r4,r17
  803df4:	958b883a 	add	r5,r18,r22
  803df8:	858dc83a 	sub	r6,r16,r22
  803dfc:	080cf740 	call	80cf74 <strncpy>
						temp[strlen(temp)] = '\0';
  803e00:	8809883a 	mov	r4,r17
  803e04:	080ce500 	call	80ce50 <strlen>
  803e08:	8885883a 	add	r2,r17,r2
  803e0c:	10000005 	stb	zero,0(r2)
						if (temp[0] != '0'){
  803e10:	d8c08247 	ldb	r3,521(sp)
  803e14:	00800c04 	movi	r2,48
  803e18:	18bf8d26 	beq	r3,r2,803c50 <getAndUpdateSongsFromTxt+0xf8>
							memset(substr, 0 , sizeof(substr)/sizeof(substr[0]));
  803e1c:	01807d44 	movi	r6,501
  803e20:	d9000504 	addi	r4,sp,20
  803e24:	000b883a 	mov	r5,zero
  803e28:	080c3600 	call	80c360 <memset>
							strcpy(substr, line+i+1);
  803e2c:	940b883a 	add	r5,r18,r16
  803e30:	29400044 	addi	r5,r5,1
  803e34:	d9000504 	addi	r4,sp,20
  803e38:	080cdc40 	call	80cdc4 <strcpy>
							createSong(temp, strtol(substr, NULL, 10));
  803e3c:	01800284 	movi	r6,10
  803e40:	d9000504 	addi	r4,sp,20
  803e44:	000b883a 	mov	r5,zero
  803e48:	080da080 	call	80da08 <strtol>
  803e4c:	100b883a 	mov	r5,r2
  803e50:	8809883a 	mov	r4,r17
  803e54:	08012880 	call	801288 <createSong>
							songNames[numOfSongs] = malloc(20*sizeof(char));
  803e58:	01000504 	movi	r4,20
  803e5c:	080bb6c0 	call	80bb6c <malloc>
							strcpy(songNames[numOfSongs], temp);
  803e60:	1009883a 	mov	r4,r2
  803e64:	880b883a 	mov	r5,r17
						temp[strlen(temp)] = '\0';
						if (temp[0] != '0'){
							memset(substr, 0 , sizeof(substr)/sizeof(substr[0]));
							strcpy(substr, line+i+1);
							createSong(temp, strtol(substr, NULL, 10));
							songNames[numOfSongs] = malloc(20*sizeof(char));
  803e68:	a8800015 	stw	r2,0(r21)
							strcpy(songNames[numOfSongs], temp);
  803e6c:	080cdc40 	call	80cdc4 <strcpy>
					}
				}
			}
			numOfSongs++;
		}
		free(line);
  803e70:	9009883a 	mov	r4,r18
  803e74:	080bb580 	call	80bb58 <free>
						}
						break;
					}
				}
			}
			numOfSongs++;
  803e78:	a5000044 	addi	r20,r20,1
	char* line = NULL;
	char temp[501];
	char substr[501];
	int start, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
  803e7c:	00801944 	movi	r2,101
					}
				}
			}
			numOfSongs++;
		}
		free(line);
  803e80:	ad400104 	addi	r21,r21,4
	char* line = NULL;
	char temp[501];
	char substr[501];
	int start, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
  803e84:	a0bf4e1e 	bne	r20,r2,803bc0 <getAndUpdateSongsFromTxt+0x68>
  803e88:	003f7706 	br	803c68 <getAndUpdateSongsFromTxt+0x110>
		line = (char*)malloc(sizeof(char)*501);
		if((fileStats = readLine(fileHandler, line)) == -2) {
			printf("File SONGS.TXT cannot be read, reopening...\n");
  803e8c:	010020b4 	movhi	r4,130
  803e90:	213fd004 	addi	r4,r4,-192
  803e94:	080c5100 	call	80c510 <puts>
			if (!alt_up_sd_card_fclose(fileHandler)){
  803e98:	b93fffcc 	andi	r4,r23,65535
  803e9c:	2120001c 	xori	r4,r4,32768
  803ea0:	21200004 	addi	r4,r4,-32768
  803ea4:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  803ea8:	10001a26 	beq	r2,zero,803f14 <getAndUpdateSongsFromTxt+0x3bc>
				printf("File is not closed properly.\n");
			}
			free(line);
  803eac:	9009883a 	mov	r4,r18
  803eb0:	080bb580 	call	80bb58 <free>
  803eb4:	00bfffc4 	movi	r2,-1
  803eb8:	003fb806 	br	803d9c <getAndUpdateSongsFromTxt+0x244>
			line = NULL;
			return -1;
		} else if(fileStats == -1) {
			free(line);
  803ebc:	9009883a 	mov	r4,r18
  803ec0:	080bb580 	call	80bb58 <free>
  803ec4:	003f6806 	br	803c68 <getAndUpdateSongsFromTxt+0x110>
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  803ec8:	010020b4 	movhi	r4,130
  803ecc:	213fc404 	addi	r4,r4,-240
  803ed0:	01400044 	movi	r5,1
  803ed4:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  803ed8:	15ffffcc 	andi	r23,r2,65535
  803edc:	bde0001c 	xori	r23,r23,32768
  803ee0:	bde00004 	addi	r23,r23,-32768
  803ee4:	b83f300e 	bge	r23,zero,803ba8 <getAndUpdateSongsFromTxt+0x50>
			alt_up_sd_card_fclose(fileHandler);
  803ee8:	b809883a 	mov	r4,r23
  803eec:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
 * */

int getAndUpdateSongsFromTxt(char** arrFromSDFiles){
	int fileHandler;
	if ((fileHandler = openFileFromSD(SONGFILE)) < 0){
		printf("Reading songs from SONGS.TXT error!\n");
  803ef0:	010020b4 	movhi	r4,130
  803ef4:	213fc704 	addi	r4,r4,-228
  803ef8:	080c5100 	call	80c510 <puts>
  803efc:	00bfffc4 	movi	r2,-1
  803f00:	003fa606 	br	803d9c <getAndUpdateSongsFromTxt+0x244>
		}
		sdFiles_index++;
	}
	memset(&strToStore[0], 0 , sizeof(strToStore)/sizeof(strToStore[0]));
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
  803f04:	010020b4 	movhi	r4,130
  803f08:	213fdb04 	addi	r4,r4,-148
  803f0c:	080c5100 	call	80c510 <puts>
  803f10:	003f8906 	br	803d38 <getAndUpdateSongsFromTxt+0x1e0>
	while (numOfSongs < MAX_SONGS){
		line = (char*)malloc(sizeof(char)*501);
		if((fileStats = readLine(fileHandler, line)) == -2) {
			printf("File SONGS.TXT cannot be read, reopening...\n");
			if (!alt_up_sd_card_fclose(fileHandler)){
				printf("File is not closed properly.\n");
  803f14:	010020b4 	movhi	r4,130
  803f18:	213fdb04 	addi	r4,r4,-148
  803f1c:	080c5100 	call	80c510 <puts>
  803f20:	003fe206 	br	803eac <getAndUpdateSongsFromTxt+0x354>

00803f24 <loadSongsFromSD>:
/*
 * Load songs from SDCARD and added it to DB
 * This also updates the SONGS.TXT if the text file misses
 * any song titles.
 * */
void loadSongsFromSD(){
  803f24:	defffe04 	addi	sp,sp,-8
  803f28:	dc000015 	stw	r16,0(sp)
  803f2c:	dfc00115 	stw	ra,4(sp)
	char** sdsongs = NULL;
	sdsongs = getSongsFromSD();
  803f30:	0802ee80 	call	802ee8 <getSongsFromSD>
  803f34:	1021883a 	mov	r16,r2
	//getAndUpdateSongsFromTxt(sdsongs);
	while(getAndUpdateSongsFromTxt(sdsongs) < 0);
  803f38:	8009883a 	mov	r4,r16
  803f3c:	0803b580 	call	803b58 <getAndUpdateSongsFromTxt>
  803f40:	103ffd16 	blt	r2,zero,803f38 <loadSongsFromSD+0x14>

}
  803f44:	dfc00117 	ldw	ra,4(sp)
  803f48:	dc000017 	ldw	r16,0(sp)
  803f4c:	dec00204 	addi	sp,sp,8
  803f50:	f800283a 	ret

00803f54 <preloadSongsToPlaylist>:
 * After all playlists are loaded to database,
 * initialize each playlist with the correct songs that belong to
 * that playlist.
 * This information is stored in LORDER.TXT
 * */
void preloadSongsToPlaylist(){
  803f54:	defffb04 	addi	sp,sp,-20
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  803f58:	010020b4 	movhi	r4,130
  803f5c:	213f6b04 	addi	r4,r4,-596
  803f60:	000b883a 	mov	r5,zero
 * After all playlists are loaded to database,
 * initialize each playlist with the correct songs that belong to
 * that playlist.
 * This information is stored in LORDER.TXT
 * */
void preloadSongsToPlaylist(){
  803f64:	dc800215 	stw	r18,8(sp)
  803f68:	dfc00415 	stw	ra,16(sp)
  803f6c:	dcc00315 	stw	r19,12(sp)
  803f70:	dc400115 	stw	r17,4(sp)
  803f74:	dc000015 	stw	r16,0(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  803f78:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  803f7c:	14bfffcc 	andi	r18,r2,65535
  803f80:	94a0001c 	xori	r18,r18,32768
  803f84:	94a00004 	addi	r18,r18,-32768
	if (fileHandler < 0){
  803f88:	90004116 	blt	r18,zero,804090 <preloadSongsToPlaylist+0x13c>
  803f8c:	94ffffcc 	andi	r19,r18,65535
  803f90:	9ce0001c 	xori	r19,r19,32768
 * This information is stored in LORDER.TXT
 * */
void preloadSongsToPlaylist(){
	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTORDERFILE)) < 0){
		printf("Can't open file LORDER.TXT error!\n");
  803f94:	0023883a 	mov	r17,zero
  803f98:	9ce00004 	addi	r19,r19,-32768
  803f9c:	00000706 	br	803fbc <preloadSongsToPlaylist+0x68>
				printf("File is not closed properly.\n");
			}
			free(line);
			line = NULL;
			break;
		} else if (fileStats == -1){
  803fa0:	00bfffc4 	movi	r2,-1
  803fa4:	18802c26 	beq	r3,r2,804058 <preloadSongsToPlaylist+0x104>
			//printf("Quit after iteration %d\n", i);
			free(line);
			line = NULL;
			break;
		} else {
			initializeListWithSongs(line);
  803fa8:	0802b680 	call	802b68 <initializeListWithSongs>
			free(line);
  803fac:	8009883a 	mov	r4,r16
  803fb0:	080bb580 	call	80bb58 <free>

	char* line = NULL;
	int i, fileStats;

	i = 0;
	while (i < 50){
  803fb4:	00800c84 	movi	r2,50
  803fb8:	88802d26 	beq	r17,r2,804070 <preloadSongsToPlaylist+0x11c>
		line = (char*)malloc(sizeof(char)*501);
  803fbc:	01007d44 	movi	r4,501
  803fc0:	080bb6c0 	call	80bb6c <malloc>
		fileStats = readLine(fileHandler, line);
  803fc4:	100b883a 	mov	r5,r2
  803fc8:	9009883a 	mov	r4,r18
	char* line = NULL;
	int i, fileStats;

	i = 0;
	while (i < 50){
		line = (char*)malloc(sizeof(char)*501);
  803fcc:	1021883a 	mov	r16,r2
		fileStats = readLine(fileHandler, line);
  803fd0:	080322c0 	call	80322c <readLine>
  803fd4:	1007883a 	mov	r3,r2
		if (fileStats == -2){
  803fd8:	00bfff84 	movi	r2,-2
			line = NULL;
			break;
		} else {
			initializeListWithSongs(line);
			free(line);
			i++;
  803fdc:	8c400044 	addi	r17,r17,1
			//printf("Quit after iteration %d\n", i);
			free(line);
			line = NULL;
			break;
		} else {
			initializeListWithSongs(line);
  803fe0:	8009883a 	mov	r4,r16

	i = 0;
	while (i < 50){
		line = (char*)malloc(sizeof(char)*501);
		fileStats = readLine(fileHandler, line);
		if (fileStats == -2){
  803fe4:	18bfee1e 	bne	r3,r2,803fa0 <preloadSongsToPlaylist+0x4c>
			printf("LORDER.TXT cannot be read, reopening...\n");
  803fe8:	010020b4 	movhi	r4,130
  803fec:	213fee04 	addi	r4,r4,-72
  803ff0:	080c5100 	call	80c510 <puts>
			if (!alt_up_sd_card_fclose(fileHandler)){
  803ff4:	9809883a 	mov	r4,r19
  803ff8:	9823883a 	mov	r17,r19
  803ffc:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  804000:	10001f26 	beq	r2,zero,804080 <preloadSongsToPlaylist+0x12c>
				printf("File is not closed properly.\n");
			}
			free(line);
  804004:	8009883a 	mov	r4,r16
  804008:	080bb580 	call	80bb58 <free>
			free(line);
			i++;
		}
	}
	line = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
  80400c:	8809883a 	mov	r4,r17
  804010:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  804014:	10000726 	beq	r2,zero,804034 <preloadSongsToPlaylist+0xe0>
		printf("file is not closed properly.\n");
		return;
	}
}
  804018:	dfc00417 	ldw	ra,16(sp)
  80401c:	dcc00317 	ldw	r19,12(sp)
  804020:	dc800217 	ldw	r18,8(sp)
  804024:	dc400117 	ldw	r17,4(sp)
  804028:	dc000017 	ldw	r16,0(sp)
  80402c:	dec00504 	addi	sp,sp,20
  804030:	f800283a 	ret
			i++;
		}
	}
	line = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("file is not closed properly.\n");
  804034:	010020b4 	movhi	r4,130
  804038:	213fbc04 	addi	r4,r4,-272
		return;
	}
}
  80403c:	dfc00417 	ldw	ra,16(sp)
  804040:	dcc00317 	ldw	r19,12(sp)
  804044:	dc800217 	ldw	r18,8(sp)
  804048:	dc400117 	ldw	r17,4(sp)
  80404c:	dc000017 	ldw	r16,0(sp)
  804050:	dec00504 	addi	sp,sp,20
			i++;
		}
	}
	line = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("file is not closed properly.\n");
  804054:	080c5101 	jmpi	80c510 <puts>
			free(line);
			line = NULL;
			break;
		} else if (fileStats == -1){
			//printf("Quit after iteration %d\n", i);
			free(line);
  804058:	947fffcc 	andi	r17,r18,65535
  80405c:	8009883a 	mov	r4,r16
  804060:	8c60001c 	xori	r17,r17,32768
  804064:	080bb580 	call	80bb58 <free>
  804068:	8c600004 	addi	r17,r17,-32768
  80406c:	003fe706 	br	80400c <preloadSongsToPlaylist+0xb8>

	char* line = NULL;
	int i, fileStats;

	i = 0;
	while (i < 50){
  804070:	947fffcc 	andi	r17,r18,65535
  804074:	8c60001c 	xori	r17,r17,32768
  804078:	8c600004 	addi	r17,r17,-32768
  80407c:	003fe306 	br	80400c <preloadSongsToPlaylist+0xb8>
		line = (char*)malloc(sizeof(char)*501);
		fileStats = readLine(fileHandler, line);
		if (fileStats == -2){
			printf("LORDER.TXT cannot be read, reopening...\n");
			if (!alt_up_sd_card_fclose(fileHandler)){
				printf("File is not closed properly.\n");
  804080:	010020b4 	movhi	r4,130
  804084:	213fdb04 	addi	r4,r4,-148
  804088:	080c5100 	call	80c510 <puts>
  80408c:	003fdd06 	br	804004 <preloadSongsToPlaylist+0xb0>
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  804090:	010020b4 	movhi	r4,130
  804094:	213f6b04 	addi	r4,r4,-596
  804098:	01400044 	movi	r5,1
  80409c:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  8040a0:	14bfffcc 	andi	r18,r2,65535
  8040a4:	94a0001c 	xori	r18,r18,32768
  8040a8:	94a00004 	addi	r18,r18,-32768
  8040ac:	903fb70e 	bge	r18,zero,803f8c <preloadSongsToPlaylist+0x38>
			alt_up_sd_card_fclose(fileHandler);
  8040b0:	9009883a 	mov	r4,r18
  8040b4:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
 * This information is stored in LORDER.TXT
 * */
void preloadSongsToPlaylist(){
	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTORDERFILE)) < 0){
		printf("Can't open file LORDER.TXT error!\n");
  8040b8:	010020b4 	movhi	r4,130
  8040bc:	213fe504 	addi	r4,r4,-108
  8040c0:	003fde06 	br	80403c <preloadSongsToPlaylist+0xe8>

008040c4 <saveListsToSD>:
/*
 * Saves all playlists with their information to
 * LISTS.TXT in SDCard.
 * Return value: 0 means success, -1 means error in fopen/fclose
 */
int saveListsToSD() {
  8040c4:	defff904 	addi	sp,sp,-28
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  8040c8:	010020b4 	movhi	r4,130
  8040cc:	213ff804 	addi	r4,r4,-32
  8040d0:	000b883a 	mov	r5,zero
/*
 * Saves all playlists with their information to
 * LISTS.TXT in SDCard.
 * Return value: 0 means success, -1 means error in fopen/fclose
 */
int saveListsToSD() {
  8040d4:	dd000515 	stw	r20,20(sp)
  8040d8:	dfc00615 	stw	ra,24(sp)
  8040dc:	dcc00415 	stw	r19,16(sp)
  8040e0:	dc800315 	stw	r18,12(sp)
  8040e4:	dc400215 	stw	r17,8(sp)
  8040e8:	dc000115 	stw	r16,4(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  8040ec:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  8040f0:	153fffcc 	andi	r20,r2,65535
  8040f4:	a520001c 	xori	r20,r20,32768
  8040f8:	a5200004 	addi	r20,r20,-32768
	if (fileHandler < 0){
  8040fc:	a0003a16 	blt	r20,zero,8041e8 <saveListsToSD+0x124>
	if ((fileHandler = openFileFromSD(LISTFILE)) < 0){
		printf("Error opening file in addListToSD.\n");
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
  804100:	010018c4 	movi	r4,99
  804104:	080bb6c0 	call	80bb6c <malloc>
  804108:	1021883a 	mov	r16,r2
  80410c:	04c020b4 	movhi	r19,130
  804110:	9cd1e904 	addi	r19,r19,18340
  804114:	04400044 	movi	r17,1
  804118:	048020f4 	movhi	r18,131
  80411c:	94bad104 	addi	r18,r18,-5308
  804120:	00000b06 	br	804150 <saveListsToSD+0x8c>
	for(i = 1; i < MAX_LISTS; i++){
		if (db.used_list_index[i] == 0){
			size = sprintf(strToStore, "%d %d %d", i, 0, 0);
  804124:	d8000015 	stw	zero,0(sp)
  804128:	080cba40 	call	80cba4 <sprintf>
  80412c:	100d883a 	mov	r6,r2
		} else {
			size = sprintf(strToStore,"%d %s %d", db.playlists[i]->id, db.playlists[i]->list_name, db.playlists[i]->num_of_songs);
		}
		writeLine(fileHandler, strToStore, size);
  804130:	a009883a 	mov	r4,r20
  804134:	800b883a 	mov	r5,r16
  804138:	08031340 	call	803134 <writeLine>
		printf("Error opening file in addListToSD.\n");
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
	for(i = 1; i < MAX_LISTS; i++){
  80413c:	8c400044 	addi	r17,r17,1
  804140:	00800cc4 	movi	r2,51
  804144:	94800104 	addi	r18,r18,4
  804148:	9cc00104 	addi	r19,r19,4
  80414c:	88801826 	beq	r17,r2,8041b0 <saveListsToSD+0xec>
		if (db.used_list_index[i] == 0){
  804150:	90800017 	ldw	r2,0(r18)
			size = sprintf(strToStore, "%d %d %d", i, 0, 0);
  804154:	8009883a 	mov	r4,r16
  804158:	014020b4 	movhi	r5,130
  80415c:	29400404 	addi	r5,r5,16
  804160:	880d883a 	mov	r6,r17
  804164:	000f883a 	mov	r7,zero
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
	for(i = 1; i < MAX_LISTS; i++){
		if (db.used_list_index[i] == 0){
  804168:	103fee26 	beq	r2,zero,804124 <saveListsToSD+0x60>
			size = sprintf(strToStore, "%d %d %d", i, 0, 0);
		} else {
			size = sprintf(strToStore,"%d %s %d", db.playlists[i]->id, db.playlists[i]->list_name, db.playlists[i]->num_of_songs);
  80416c:	99c00217 	ldw	r7,8(r19)
  804170:	8009883a 	mov	r4,r16
  804174:	014020b4 	movhi	r5,130
  804178:	29400704 	addi	r5,r5,28
  80417c:	39801b17 	ldw	r6,108(r7)
  804180:	38801a17 	ldw	r2,104(r7)
		printf("Error opening file in addListToSD.\n");
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
	for(i = 1; i < MAX_LISTS; i++){
  804184:	8c400044 	addi	r17,r17,1
  804188:	94800104 	addi	r18,r18,4
		if (db.used_list_index[i] == 0){
			size = sprintf(strToStore, "%d %d %d", i, 0, 0);
		} else {
			size = sprintf(strToStore,"%d %s %d", db.playlists[i]->id, db.playlists[i]->list_name, db.playlists[i]->num_of_songs);
  80418c:	d8800015 	stw	r2,0(sp)
  804190:	080cba40 	call	80cba4 <sprintf>
  804194:	100d883a 	mov	r6,r2
		}
		writeLine(fileHandler, strToStore, size);
  804198:	a009883a 	mov	r4,r20
  80419c:	800b883a 	mov	r5,r16
  8041a0:	08031340 	call	803134 <writeLine>
		printf("Error opening file in addListToSD.\n");
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
	for(i = 1; i < MAX_LISTS; i++){
  8041a4:	00800cc4 	movi	r2,51
  8041a8:	9cc00104 	addi	r19,r19,4
  8041ac:	88bfe81e 	bne	r17,r2,804150 <saveListsToSD+0x8c>
		} else {
			size = sprintf(strToStore,"%d %s %d", db.playlists[i]->id, db.playlists[i]->list_name, db.playlists[i]->num_of_songs);
		}
		writeLine(fileHandler, strToStore, size);
	}
	free(strToStore);
  8041b0:	8009883a 	mov	r4,r16
  8041b4:	080bb580 	call	80bb58 <free>
	strToStore = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
  8041b8:	a009883a 	mov	r4,r20
  8041bc:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  8041c0:	10001826 	beq	r2,zero,804224 <saveListsToSD+0x160>
  8041c4:	0005883a 	mov	r2,zero
		printf("File is not closed properly.\n");
		return -1;
	}
	return 0;
}
  8041c8:	dfc00617 	ldw	ra,24(sp)
  8041cc:	dd000517 	ldw	r20,20(sp)
  8041d0:	dcc00417 	ldw	r19,16(sp)
  8041d4:	dc800317 	ldw	r18,12(sp)
  8041d8:	dc400217 	ldw	r17,8(sp)
  8041dc:	dc000117 	ldw	r16,4(sp)
  8041e0:	dec00704 	addi	sp,sp,28
  8041e4:	f800283a 	ret
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8041e8:	010020b4 	movhi	r4,130
  8041ec:	213ff804 	addi	r4,r4,-32
  8041f0:	01400044 	movi	r5,1
  8041f4:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  8041f8:	153fffcc 	andi	r20,r2,65535
  8041fc:	a520001c 	xori	r20,r20,32768
  804200:	a5200004 	addi	r20,r20,-32768
  804204:	a03fbe0e 	bge	r20,zero,804100 <saveListsToSD+0x3c>
			alt_up_sd_card_fclose(fileHandler);
  804208:	a009883a 	mov	r4,r20
  80420c:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
 * Return value: 0 means success, -1 means error in fopen/fclose
 */
int saveListsToSD() {
	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTFILE)) < 0){
		printf("Error opening file in addListToSD.\n");
  804210:	010020b4 	movhi	r4,130
  804214:	213ffb04 	addi	r4,r4,-20
  804218:	080c5100 	call	80c510 <puts>
  80421c:	00bfffc4 	movi	r2,-1
  804220:	003fe906 	br	8041c8 <saveListsToSD+0x104>
		writeLine(fileHandler, strToStore, size);
	}
	free(strToStore);
	strToStore = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
  804224:	010020b4 	movhi	r4,130
  804228:	213fdb04 	addi	r4,r4,-148
  80422c:	080c5100 	call	80c510 <puts>
  804230:	00bfffc4 	movi	r2,-1
  804234:	003fe406 	br	8041c8 <saveListsToSD+0x104>

00804238 <updateSongToSD>:
	// set ending condition, NULL means end of the array
	songNames[numOfWavFiles] = NULL;
	return songNames;
}

void updateSongToSD() {
  804238:	defff204 	addi	sp,sp,-56
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  80423c:	010020b4 	movhi	r4,130
  804240:	213fc404 	addi	r4,r4,-240
  804244:	000b883a 	mov	r5,zero
	// set ending condition, NULL means end of the array
	songNames[numOfWavFiles] = NULL;
	return songNames;
}

void updateSongToSD() {
  804248:	dcc00b15 	stw	r19,44(sp)
  80424c:	dfc00d15 	stw	ra,52(sp)
  804250:	dd000c15 	stw	r20,48(sp)
  804254:	dc800a15 	stw	r18,40(sp)
  804258:	dc400915 	stw	r17,36(sp)
  80425c:	dc000815 	stw	r16,32(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  804260:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  804264:	14ffffcc 	andi	r19,r2,65535
  804268:	9ce0001c 	xori	r19,r19,32768
  80426c:	9ce00004 	addi	r19,r19,-32768
	if (fileHandler < 0){
  804270:	98002616 	blt	r19,zero,80430c <updateSongToSD+0xd4>
	int len, filepointer;
	if ((filepointer = openFileFromSD(SONGFILE)) < 0){
		printf("Loading list error!\n");
		return;
	}
	for(i = 1; i <= db.num_of_songs; i++) {
  804274:	050020b4 	movhi	r20,130
  804278:	a511e904 	addi	r20,r20,18340
  80427c:	a080a717 	ldw	r2,668(r20)
  804280:	0080140e 	bge	zero,r2,8042d4 <updateSongToSD+0x9c>
  804284:	04400044 	movi	r17,1
  804288:	a4803704 	addi	r18,r20,220
		len = sprintf(temp, "%d %s %d", i, db.songs[i]->song_name, getLength(db.songs[i]));
  80428c:	94000017 	ldw	r16,0(r18)
	int len, filepointer;
	if ((filepointer = openFileFromSD(SONGFILE)) < 0){
		printf("Loading list error!\n");
		return;
	}
	for(i = 1; i <= db.num_of_songs; i++) {
  804290:	94800104 	addi	r18,r18,4
		len = sprintf(temp, "%d %s %d", i, db.songs[i]->song_name, getLength(db.songs[i]));
  804294:	8009883a 	mov	r4,r16
  804298:	0807ccc0 	call	807ccc <getLength>
  80429c:	880d883a 	mov	r6,r17
  8042a0:	81c00104 	addi	r7,r16,4
  8042a4:	d9000104 	addi	r4,sp,4
  8042a8:	014020b4 	movhi	r5,130
  8042ac:	29400704 	addi	r5,r5,28
  8042b0:	d8800015 	stw	r2,0(sp)
  8042b4:	080cba40 	call	80cba4 <sprintf>
		writeLine(filepointer, temp, len);
  8042b8:	100d883a 	mov	r6,r2
  8042bc:	9809883a 	mov	r4,r19
  8042c0:	d9400104 	addi	r5,sp,4
  8042c4:	08031340 	call	803134 <writeLine>
	int len, filepointer;
	if ((filepointer = openFileFromSD(SONGFILE)) < 0){
		printf("Loading list error!\n");
		return;
	}
	for(i = 1; i <= db.num_of_songs; i++) {
  8042c8:	a080a717 	ldw	r2,668(r20)
  8042cc:	8c400044 	addi	r17,r17,1
  8042d0:	147fee0e 	bge	r2,r17,80428c <updateSongToSD+0x54>
		len = sprintf(temp, "%d %s %d", i, db.songs[i]->song_name, getLength(db.songs[i]));
		writeLine(filepointer, temp, len);
	}
	if (!alt_up_sd_card_fclose(filepointer)){
  8042d4:	9809883a 	mov	r4,r19
  8042d8:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  8042dc:	1000031e 	bne	r2,zero,8042ec <updateSongToSD+0xb4>
		printf("File is not closed properly.\n");
  8042e0:	010020b4 	movhi	r4,130
  8042e4:	213fdb04 	addi	r4,r4,-148
  8042e8:	080c5100 	call	80c510 <puts>
	}
}
  8042ec:	dfc00d17 	ldw	ra,52(sp)
  8042f0:	dd000c17 	ldw	r20,48(sp)
  8042f4:	dcc00b17 	ldw	r19,44(sp)
  8042f8:	dc800a17 	ldw	r18,40(sp)
  8042fc:	dc400917 	ldw	r17,36(sp)
  804300:	dc000817 	ldw	r16,32(sp)
  804304:	dec00e04 	addi	sp,sp,56
  804308:	f800283a 	ret
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  80430c:	010020b4 	movhi	r4,130
  804310:	213fc404 	addi	r4,r4,-240
  804314:	01400044 	movi	r5,1
  804318:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  80431c:	14ffffcc 	andi	r19,r2,65535
  804320:	9ce0001c 	xori	r19,r19,32768
  804324:	9ce00004 	addi	r19,r19,-32768
  804328:	983fd20e 	bge	r19,zero,804274 <updateSongToSD+0x3c>
			alt_up_sd_card_fclose(fileHandler);
  80432c:	9809883a 	mov	r4,r19
  804330:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
void updateSongToSD() {
	int i;
	char temp[25];
	int len, filepointer;
	if ((filepointer = openFileFromSD(SONGFILE)) < 0){
		printf("Loading list error!\n");
  804334:	010020b4 	movhi	r4,130
  804338:	21000a04 	addi	r4,r4,40
  80433c:	080c5100 	call	80c510 <puts>
  804340:	003fea06 	br	8042ec <updateSongToSD+0xb4>

00804344 <loadListsFromSD>:
}

/*
 * Reads LISTS.TXT and load all playlists into the DB.
 */
int loadListsFromSD() {
  804344:	deffde04 	addi	sp,sp,-136
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  804348:	010020b4 	movhi	r4,130
  80434c:	213ff804 	addi	r4,r4,-32
  804350:	000b883a 	mov	r5,zero
}

/*
 * Reads LISTS.TXT and load all playlists into the DB.
 */
int loadListsFromSD() {
  804354:	dcc01e15 	stw	r19,120(sp)
  804358:	dfc02115 	stw	ra,132(sp)
  80435c:	dd402015 	stw	r21,128(sp)
  804360:	dd001f15 	stw	r20,124(sp)
  804364:	dc801d15 	stw	r18,116(sp)
  804368:	dc401c15 	stw	r17,112(sp)
  80436c:	dc001b15 	stw	r16,108(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  804370:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  804374:	14ffffcc 	andi	r19,r2,65535
  804378:	9ce0001c 	xori	r19,r19,32768
  80437c:	9ce00004 	addi	r19,r19,-32768
	if (fileHandler < 0){
  804380:	98005616 	blt	r19,zero,8044dc <loadListsFromSD+0x198>
int loadListsFromSD() {

	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTFILE)) < 0){
		printf("Loading list error!\n");
		return -1;
  804384:	0029883a 	mov	r20,zero
  804388:	dc800104 	addi	r18,sp,4
  80438c:	dd400204 	addi	r21,sp,8
	}
	char* line = NULL;
	int i = 0;
	int stats = 0;
	for(i = 0; i < 50; i++) {
		line = (char*)malloc(sizeof(char)*501);
  804390:	01007d44 	movi	r4,501
  804394:	080bb6c0 	call	80bb6c <malloc>
		stats = readLine(fileHandler, line);
  804398:	100b883a 	mov	r5,r2
  80439c:	9809883a 	mov	r4,r19
	}
	char* line = NULL;
	int i = 0;
	int stats = 0;
	for(i = 0; i < 50; i++) {
		line = (char*)malloc(sizeof(char)*501);
  8043a0:	1021883a 	mov	r16,r2
		stats = readLine(fileHandler, line);
  8043a4:	080322c0 	call	80322c <readLine>
  8043a8:	1007883a 	mov	r3,r2

		if(stats == -2) {
  8043ac:	00bfff84 	movi	r2,-2
  8043b0:	18803e26 	beq	r3,r2,8044ac <loadListsFromSD+0x168>
			alt_up_sd_card_fclose(fileHandler);
			printf("Cannot read the list file, file closed.\n");
			free(line);
			line = NULL;
			return -1;
		} else if(stats == -1) {
  8043b4:	00bfffc4 	movi	r2,-1
  8043b8:	18804526 	beq	r3,r2,8044d0 <loadListsFromSD+0x18c>
			free(line);
			line = NULL;
			break;
  8043bc:	000b883a 	mov	r5,zero
  8043c0:	01800804 	movi	r6,32
void createPlaylistFromTxt(char* line){
	int i = 0, j = 0;
	char id[4];
	char listName[100];
	char numOfSong[4];
	while((id[j++] = line[i++]) != ' ');
  8043c4:	8145883a 	add	r2,r16,r5
  8043c8:	10c00007 	ldb	r3,0(r2)
  8043cc:	9149883a 	add	r4,r18,r5
  8043d0:	29400044 	addi	r5,r5,1
  8043d4:	20c00005 	stb	r3,0(r4)
  8043d8:	19bffa1e 	bne	r3,r6,8043c4 <loadListsFromSD+0x80>
	id[j] = 0; j = 0;
  8043dc:	9145883a 	add	r2,r18,r5
  8043e0:	10000005 	stb	zero,0(r2)
  8043e4:	8149883a 	add	r4,r16,r5
  8043e8:	a80d883a 	mov	r6,r21
  8043ec:	01c00804 	movi	r7,32
	while((listName[j++] = line[i++]) != ' ');
  8043f0:	20800007 	ldb	r2,0(r4)
  8043f4:	29400044 	addi	r5,r5,1
  8043f8:	21000044 	addi	r4,r4,1
  8043fc:	30800005 	stb	r2,0(r6)
  804400:	31800044 	addi	r6,r6,1
  804404:	11fffa1e 	bne	r2,r7,8043f0 <loadListsFromSD+0xac>
	listName[j-1] = 0; j = 0;
  804408:	3547c83a 	sub	r3,r6,r21
  80440c:	d88001c4 	addi	r2,sp,7
  804410:	10c5883a 	add	r2,r2,r3
  804414:	10000005 	stb	zero,0(r2)
	if(listName[0] == '0') return;
  804418:	d8c00207 	ldb	r3,8(sp)
  80441c:	00800c04 	movi	r2,48
  804420:	18801026 	beq	r3,r2,804464 <loadListsFromSD+0x120>
  804424:	2c07883a 	add	r3,r5,r16
  804428:	d809883a 	mov	r4,sp
	while((numOfSong[j++] = line[i++]) != 0);
  80442c:	18800003 	ldbu	r2,0(r3)
  804430:	18c00044 	addi	r3,r3,1
  804434:	20800005 	stb	r2,0(r4)
  804438:	21000044 	addi	r4,r4,1
  80443c:	103ffb1e 	bne	r2,zero,80442c <loadListsFromSD+0xe8>
	createExisitedPlaylist(listName, atoi(numOfSong), atoi(id));
  804440:	d809883a 	mov	r4,sp
  804444:	080bb4c0 	call	80bb4c <atoi>
  804448:	9009883a 	mov	r4,r18
  80444c:	1023883a 	mov	r17,r2
  804450:	080bb4c0 	call	80bb4c <atoi>
  804454:	880b883a 	mov	r5,r17
  804458:	a809883a 	mov	r4,r21
  80445c:	100d883a 	mov	r6,r2
  804460:	08012b40 	call	8012b4 <createExisitedPlaylist>
			free(line);
			line = NULL;
			break;
		} else {
			createPlaylistFromTxt(line);
			free(line);
  804464:	8009883a 	mov	r4,r16
  804468:	080bb580 	call	80bb58 <free>
		return -1;
	}
	char* line = NULL;
	int i = 0;
	int stats = 0;
	for(i = 0; i < 50; i++) {
  80446c:	a5000044 	addi	r20,r20,1
  804470:	00800c84 	movi	r2,50
  804474:	a0bfc61e 	bne	r20,r2,804390 <loadListsFromSD+0x4c>
			createPlaylistFromTxt(line);
			free(line);
			line = NULL;
		}
	}
	if (!alt_up_sd_card_fclose(fileHandler)){
  804478:	9809883a 	mov	r4,r19
  80447c:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  804480:	10002526 	beq	r2,zero,804518 <loadListsFromSD+0x1d4>
  804484:	0005883a 	mov	r2,zero
		printf("File is not closed properly.\n");
		return -1;
	}
	return 0;
}
  804488:	dfc02117 	ldw	ra,132(sp)
  80448c:	dd402017 	ldw	r21,128(sp)
  804490:	dd001f17 	ldw	r20,124(sp)
  804494:	dcc01e17 	ldw	r19,120(sp)
  804498:	dc801d17 	ldw	r18,116(sp)
  80449c:	dc401c17 	ldw	r17,112(sp)
  8044a0:	dc001b17 	ldw	r16,108(sp)
  8044a4:	dec02204 	addi	sp,sp,136
  8044a8:	f800283a 	ret
	for(i = 0; i < 50; i++) {
		line = (char*)malloc(sizeof(char)*501);
		stats = readLine(fileHandler, line);

		if(stats == -2) {
			alt_up_sd_card_fclose(fileHandler);
  8044ac:	9809883a 	mov	r4,r19
  8044b0:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
			printf("Cannot read the list file, file closed.\n");
  8044b4:	010020b4 	movhi	r4,130
  8044b8:	21000f04 	addi	r4,r4,60
  8044bc:	080c5100 	call	80c510 <puts>
			free(line);
  8044c0:	8009883a 	mov	r4,r16
  8044c4:	080bb580 	call	80bb58 <free>
  8044c8:	00bfffc4 	movi	r2,-1
  8044cc:	003fee06 	br	804488 <loadListsFromSD+0x144>
			line = NULL;
			return -1;
		} else if(stats == -1) {
			free(line);
  8044d0:	8009883a 	mov	r4,r16
  8044d4:	080bb580 	call	80bb58 <free>
  8044d8:	003fe706 	br	804478 <loadListsFromSD+0x134>
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8044dc:	010020b4 	movhi	r4,130
  8044e0:	213ff804 	addi	r4,r4,-32
  8044e4:	01400044 	movi	r5,1
  8044e8:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  8044ec:	14ffffcc 	andi	r19,r2,65535
  8044f0:	9ce0001c 	xori	r19,r19,32768
  8044f4:	9ce00004 	addi	r19,r19,-32768
  8044f8:	983fa20e 	bge	r19,zero,804384 <loadListsFromSD+0x40>
			alt_up_sd_card_fclose(fileHandler);
  8044fc:	9809883a 	mov	r4,r19
  804500:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
 */
int loadListsFromSD() {

	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTFILE)) < 0){
		printf("Loading list error!\n");
  804504:	010020b4 	movhi	r4,130
  804508:	21000a04 	addi	r4,r4,40
  80450c:	080c5100 	call	80c510 <puts>
  804510:	00bfffc4 	movi	r2,-1
  804514:	003fdc06 	br	804488 <loadListsFromSD+0x144>
			free(line);
			line = NULL;
		}
	}
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
  804518:	010020b4 	movhi	r4,130
  80451c:	213fdb04 	addi	r4,r4,-148
  804520:	080c5100 	call	80c510 <puts>
  804524:	00bfffc4 	movi	r2,-1
  804528:	003fd706 	br	804488 <loadListsFromSD+0x144>

0080452c <initDatabase>:
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Database.h"

void initDatabase() {
  80452c:	defff904 	addi	sp,sp,-28
  804530:	dc400115 	stw	r17,4(sp)
  804534:	dc000015 	stw	r16,0(sp)
	//db.cache = initCache();
	db.curr_song_id = 1;
  804538:	04400044 	movi	r17,1
  80453c:	040020b4 	movhi	r16,130
  804540:	8411e904 	addi	r16,r16,18340
  804544:	84400015 	stw	r17,0(r16)
	db.curr_playlist_id = 0;
  804548:	80003415 	stw	zero,208(r16)
	db.num_of_lists = 0;
  80454c:	80003515 	stw	zero,212(r16)
	db.num_of_songs = 0;
  804550:	8000a715 	stw	zero,668(r16)
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Database.h"

void initDatabase() {
  804554:	dd400515 	stw	r21,20(sp)
  804558:	dd000415 	stw	r20,16(sp)
  80455c:	dcc00315 	stw	r19,12(sp)
  804560:	dc800215 	stw	r18,8(sp)
  804564:	dfc00615 	stw	ra,24(sp)
	//db.cache = initCache();
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
  804568:	0806c9c0 	call	806c9c <initQueue>
  80456c:	01e8e614 	movui	r7,41880
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
	db.total_songs_playing = 0;
	db.used_memory = 0;
  804570:	01a91a14 	movui	r6,42088
	int i;
	int* temp;
	db.used_list_index[0] = 1; //index 0 should never get used
  804574:	0168e714 	movui	r5,41884
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isPaused = false;
  804578:	01291b14 	movui	r4,42092
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
  80457c:	80c09b04 	addi	r3,r16,620
	//db.cache = initCache();
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
  804580:	81cf883a 	add	r7,r16,r7
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
	db.total_songs_playing = 0;
	db.used_memory = 0;
  804584:	818d883a 	add	r6,r16,r6
	int i;
	int* temp;
	db.used_list_index[0] = 1; //index 0 should never get used
  804588:	814b883a 	add	r5,r16,r5
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isPaused = false;
  80458c:	8109883a 	add	r4,r16,r4
  804590:	8027883a 	mov	r19,r16
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
  804594:	80009b15 	stw	zero,620(r16)
	db.total_songs_playing = 0;
  804598:	8000a615 	stw	zero,664(r16)
	db.used_memory = 0;
	int i;
	int* temp;
	db.used_list_index[0] = 1; //index 0 should never get used
	db.index_list_order[0][0] = 0;
  80459c:	8014c715 	stw	zero,21276(r16)
	db.index_list_song[0][0] = 0;
  8045a0:	8000a815 	stw	zero,672(r16)
	db.playlists[0] = NULL;
  8045a4:	80000115 	stw	zero,4(r16)
	db.songs[0] = NULL;
  8045a8:	80003615 	stw	zero,216(r16)
	//db.cache = initCache();
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
  8045ac:	38800015 	stw	r2,0(r7)
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
  8045b0:	18000a15 	stw	zero,40(r3)
	db.total_songs_playing = 0;
	db.used_memory = 0;
  8045b4:	30000015 	stw	zero,0(r6)
	int i;
	int* temp;
	db.used_list_index[0] = 1; //index 0 should never get used
  8045b8:	2c400015 	stw	r17,0(r5)
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isPaused = false;
  8045bc:	20000005 	stb	zero,0(r4)
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
  8045c0:	18000115 	stw	zero,4(r3)
  8045c4:	18000215 	stw	zero,8(r3)
  8045c8:	18000315 	stw	zero,12(r3)
  8045cc:	18000415 	stw	zero,16(r3)
  8045d0:	18000515 	stw	zero,20(r3)
  8045d4:	18000615 	stw	zero,24(r3)
  8045d8:	18000715 	stw	zero,28(r3)
  8045dc:	18000815 	stw	zero,32(r3)
  8045e0:	18000915 	stw	zero,36(r3)
  8045e4:	382b883a 	mov	r21,r7
	db.used_list_index[0] = 1; //index 0 should never get used
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isPaused = false;
  8045e8:	048020f4 	movhi	r18,131
  8045ec:	94bad104 	addi	r18,r18,-5308
  8045f0:	84152c04 	addi	r16,r16,21680
  8045f4:	05000cc4 	movi	r20,51
	for(i = 1; i < MAX_LISTS; i++) {
		temp = (int*)malloc(sizeof(int));
  8045f8:	01000104 	movi	r4,4
  8045fc:	080bb6c0 	call	80bb6c <malloc>
		*temp = i;
		enqueue(db.avail_list_index, temp);
  804600:	a9000017 	ldw	r4,0(r21)
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isPaused = false;
	for(i = 1; i < MAX_LISTS; i++) {
		temp = (int*)malloc(sizeof(int));
		*temp = i;
  804604:	14400015 	stw	r17,0(r2)
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isPaused = false;
	for(i = 1; i < MAX_LISTS; i++) {
		temp = (int*)malloc(sizeof(int));
  804608:	100b883a 	mov	r5,r2
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isPaused = false;
	for(i = 1; i < MAX_LISTS; i++) {
  80460c:	8c400044 	addi	r17,r17,1
		temp = (int*)malloc(sizeof(int));
		*temp = i;
		enqueue(db.avail_list_index, temp);
  804610:	0806cc40 	call	806cc4 <enqueue>
		db.used_list_index[i] = 0;
  804614:	90000015 	stw	zero,0(r18)
		db.index_list_order[i][0] = 0;
  804618:	80000015 	stw	zero,0(r16)
		db.index_list_song[i][0] = 0;
  80461c:	802be115 	stw	zero,-20604(r16)
		db.playlists[i] = NULL;
  804620:	98000215 	stw	zero,8(r19)
		db.songs[i] = NULL;
  804624:	98003715 	stw	zero,220(r19)
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isPaused = false;
	for(i = 1; i < MAX_LISTS; i++) {
  804628:	94800104 	addi	r18,r18,4
  80462c:	9cc00104 	addi	r19,r19,4
  804630:	84006504 	addi	r16,r16,404
  804634:	8d3ff01e 	bne	r17,r20,8045f8 <initDatabase+0xcc>
		db.index_list_order[i][0] = 0;
		db.index_list_song[i][0] = 0;
		db.playlists[i] = NULL;
		db.songs[i] = NULL;
	} temp = NULL;
	loadListsFromSD();
  804638:	08043440 	call	804344 <loadListsFromSD>
 * This also updates the SONGS.TXT if the text file misses
 * any song titles.
 * */
void loadSongsFromSD(){
	char** sdsongs = NULL;
	sdsongs = getSongsFromSD();
  80463c:	0802ee80 	call	802ee8 <getSongsFromSD>
  804640:	1021883a 	mov	r16,r2
	//getAndUpdateSongsFromTxt(sdsongs);
	while(getAndUpdateSongsFromTxt(sdsongs) < 0);
  804644:	8009883a 	mov	r4,r16
  804648:	0803b580 	call	803b58 <getAndUpdateSongsFromTxt>
  80464c:	103ffd16 	blt	r2,zero,804644 <initDatabase+0x118>
		db.songs[i] = NULL;
	} temp = NULL;
	loadListsFromSD();
	loadSongsFromSD();
	preloadSongsToPlaylist();
}
  804650:	dfc00617 	ldw	ra,24(sp)
  804654:	dd400517 	ldw	r21,20(sp)
  804658:	dd000417 	ldw	r20,16(sp)
  80465c:	dcc00317 	ldw	r19,12(sp)
  804660:	dc800217 	ldw	r18,8(sp)
  804664:	dc400117 	ldw	r17,4(sp)
  804668:	dc000017 	ldw	r16,0(sp)
  80466c:	dec00704 	addi	sp,sp,28
		db.playlists[i] = NULL;
		db.songs[i] = NULL;
	} temp = NULL;
	loadListsFromSD();
	loadSongsFromSD();
	preloadSongsToPlaylist();
  804670:	0803f541 	jmpi	803f54 <preloadSongsToPlaylist>

00804674 <drawSongPanel>:
	for (i = 0; i < this->button_size; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void drawSongPanel(struct Frame* this){
  804674:	defffb04 	addi	sp,sp,-20
  804678:	dcc00315 	stw	r19,12(sp)
	int i = 1;
	for (i = 1; i < db.num_of_songs; i++){
  80467c:	04c020b4 	movhi	r19,130
  804680:	9cd1e904 	addi	r19,r19,18340
  804684:	9880a717 	ldw	r2,668(r19)
  804688:	00c00044 	movi	r3,1
	for (i = 0; i < this->button_size; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void drawSongPanel(struct Frame* this){
  80468c:	dc800215 	stw	r18,8(sp)
  804690:	dfc00415 	stw	ra,16(sp)
  804694:	dc400115 	stw	r17,4(sp)
  804698:	dc000015 	stw	r16,0(sp)
  80469c:	2025883a 	mov	r18,r4
	int i = 1;
	for (i = 1; i < db.num_of_songs; i++){
  8046a0:	18800b0e 	bge	r3,r2,8046d0 <drawSongPanel+0x5c>
  8046a4:	1823883a 	mov	r17,r3
  8046a8:	04000104 	movi	r16,4
		this->buttons[i]->draw(this->buttons[i]);
  8046ac:	90800117 	ldw	r2,4(r18)
	}
}

void drawSongPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i < db.num_of_songs; i++){
  8046b0:	8c400044 	addi	r17,r17,1
		this->buttons[i]->draw(this->buttons[i]);
  8046b4:	1405883a 	add	r2,r2,r16
  8046b8:	11000017 	ldw	r4,0(r2)
	}
}

void drawSongPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i < db.num_of_songs; i++){
  8046bc:	84000104 	addi	r16,r16,4
		this->buttons[i]->draw(this->buttons[i]);
  8046c0:	20c00a17 	ldw	r3,40(r4)
  8046c4:	183ee83a 	callr	r3
	}
}

void drawSongPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i < db.num_of_songs; i++){
  8046c8:	9880a717 	ldw	r2,668(r19)
  8046cc:	88bff716 	blt	r17,r2,8046ac <drawSongPanel+0x38>
		this->buttons[i]->draw(this->buttons[i]);
	}
}
  8046d0:	dfc00417 	ldw	ra,16(sp)
  8046d4:	dcc00317 	ldw	r19,12(sp)
  8046d8:	dc800217 	ldw	r18,8(sp)
  8046dc:	dc400117 	ldw	r17,4(sp)
  8046e0:	dc000017 	ldw	r16,0(sp)
  8046e4:	dec00504 	addi	sp,sp,20
  8046e8:	f800283a 	ret

008046ec <drawPlaylistPanel>:

void drawPlaylistPanel(struct Frame* this){
  8046ec:	defffb04 	addi	sp,sp,-20
  8046f0:	dcc00315 	stw	r19,12(sp)
	int i = 1;
	for (i = 1; i < db.num_of_lists; i++){
  8046f4:	04c020b4 	movhi	r19,130
  8046f8:	9cd1e904 	addi	r19,r19,18340
  8046fc:	98803517 	ldw	r2,212(r19)
  804700:	00c00044 	movi	r3,1
	for (i = 1; i < db.num_of_songs; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void drawPlaylistPanel(struct Frame* this){
  804704:	dc800215 	stw	r18,8(sp)
  804708:	dfc00415 	stw	ra,16(sp)
  80470c:	dc400115 	stw	r17,4(sp)
  804710:	dc000015 	stw	r16,0(sp)
  804714:	2025883a 	mov	r18,r4
	int i = 1;
	for (i = 1; i < db.num_of_lists; i++){
  804718:	18800b0e 	bge	r3,r2,804748 <drawPlaylistPanel+0x5c>
  80471c:	1823883a 	mov	r17,r3
  804720:	04000104 	movi	r16,4
		this->buttons[i]->draw(this->buttons[i]);
  804724:	90800117 	ldw	r2,4(r18)
	}
}

void drawPlaylistPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i < db.num_of_lists; i++){
  804728:	8c400044 	addi	r17,r17,1
		this->buttons[i]->draw(this->buttons[i]);
  80472c:	1405883a 	add	r2,r2,r16
  804730:	11000017 	ldw	r4,0(r2)
	}
}

void drawPlaylistPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i < db.num_of_lists; i++){
  804734:	84000104 	addi	r16,r16,4
		this->buttons[i]->draw(this->buttons[i]);
  804738:	20c00a17 	ldw	r3,40(r4)
  80473c:	183ee83a 	callr	r3
	}
}

void drawPlaylistPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i < db.num_of_lists; i++){
  804740:	98803517 	ldw	r2,212(r19)
  804744:	88bff716 	blt	r17,r2,804724 <drawPlaylistPanel+0x38>
		this->buttons[i]->draw(this->buttons[i]);
	}
}
  804748:	dfc00417 	ldw	ra,16(sp)
  80474c:	dcc00317 	ldw	r19,12(sp)
  804750:	dc800217 	ldw	r18,8(sp)
  804754:	dc400117 	ldw	r17,4(sp)
  804758:	dc000017 	ldw	r16,0(sp)
  80475c:	dec00504 	addi	sp,sp,20
  804760:	f800283a 	ret

00804764 <displayLoadingScreenVGA>:
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
		y += 3;
	}
}
void displayLoadingScreenVGA(){
  804764:	defffe04 	addi	sp,sp,-8
  804768:	dfc00115 	stw	ra,4(sp)
  80476c:	dc000015 	stw	r16,0(sp)
	struct Image* testImg;
	while ((testImg = loadSDImage("TEST.BMP")) == NULL);
  804770:	010020b4 	movhi	r4,130
  804774:	21001904 	addi	r4,r4,100
  804778:	080553c0 	call	80553c <loadSDImage>
  80477c:	1021883a 	mov	r16,r2
  804780:	103ffb26 	beq	r2,zero,804770 <displayLoadingScreenVGA+0xc>
	draw(35, 35, testImg);
  804784:	010008c4 	movi	r4,35
  804788:	200b883a 	mov	r5,r4
  80478c:	100d883a 	mov	r6,r2
  804790:	08053900 	call	805390 <draw>
	killImage(testImg);
  804794:	8009883a 	mov	r4,r16
	alt_up_char_buffer_clear(char_buffer);
  804798:	040020b4 	movhi	r16,130
  80479c:	8411c204 	addi	r16,r16,18184
}
void displayLoadingScreenVGA(){
	struct Image* testImg;
	while ((testImg = loadSDImage("TEST.BMP")) == NULL);
	draw(35, 35, testImg);
	killImage(testImg);
  8047a0:	0805a500 	call	805a50 <killImage>
	alt_up_char_buffer_clear(char_buffer);
  8047a4:	81000017 	ldw	r4,0(r16)
  8047a8:	08191600 	call	819160 <alt_up_char_buffer_clear>
	alt_up_char_buffer_string(char_buffer, "Initialization Completed", 27, 5);
  8047ac:	81000017 	ldw	r4,0(r16)
  8047b0:	014020b4 	movhi	r5,130
  8047b4:	29401c04 	addi	r5,r5,112
  8047b8:	018006c4 	movi	r6,27
  8047bc:	01c00144 	movi	r7,5
}
  8047c0:	dfc00117 	ldw	ra,4(sp)
  8047c4:	dc000017 	ldw	r16,0(sp)
  8047c8:	dec00204 	addi	sp,sp,8
	struct Image* testImg;
	while ((testImg = loadSDImage("TEST.BMP")) == NULL);
	draw(35, 35, testImg);
	killImage(testImg);
	alt_up_char_buffer_clear(char_buffer);
	alt_up_char_buffer_string(char_buffer, "Initialization Completed", 27, 5);
  8047cc:	081904c1 	jmpi	81904c <alt_up_char_buffer_string>

008047d0 <clearSongPanel>:
	for (i = 1; i < db.num_of_lists; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void clearSongPanel(){
  8047d0:	defffc04 	addi	sp,sp,-16
  8047d4:	dc000015 	stw	r16,0(sp)
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  8047d8:	040020b4 	movhi	r16,130
  8047dc:	8411c204 	addi	r16,r16,18184
  8047e0:	81000017 	ldw	r4,0(r16)
	for (i = 1; i < db.num_of_lists; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void clearSongPanel(){
  8047e4:	dd000215 	stw	r20,8(sp)
  8047e8:	dc800115 	stw	r18,4(sp)
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  8047ec:	05000f44 	movi	r20,61
  8047f0:	048020b4 	movhi	r18,130
  8047f4:	94802304 	addi	r18,r18,140
  8047f8:	900b883a 	mov	r5,r18
  8047fc:	a00d883a 	mov	r6,r20
  804800:	01c00104 	movi	r7,4
	for (i = 1; i < db.num_of_lists; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void clearSongPanel(){
  804804:	dfc00315 	stw	ra,12(sp)
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  804808:	081904c0 	call	81904c <alt_up_char_buffer_string>
  80480c:	81000017 	ldw	r4,0(r16)
  804810:	900b883a 	mov	r5,r18
  804814:	a00d883a 	mov	r6,r20
  804818:	01c001c4 	movi	r7,7
  80481c:	081904c0 	call	81904c <alt_up_char_buffer_string>
  804820:	81000017 	ldw	r4,0(r16)
  804824:	900b883a 	mov	r5,r18
  804828:	a00d883a 	mov	r6,r20
  80482c:	01c00284 	movi	r7,10
  804830:	081904c0 	call	81904c <alt_up_char_buffer_string>
  804834:	81000017 	ldw	r4,0(r16)
  804838:	900b883a 	mov	r5,r18
  80483c:	a00d883a 	mov	r6,r20
  804840:	01c00344 	movi	r7,13
  804844:	081904c0 	call	81904c <alt_up_char_buffer_string>
  804848:	81000017 	ldw	r4,0(r16)
  80484c:	900b883a 	mov	r5,r18
  804850:	a00d883a 	mov	r6,r20
  804854:	01c00404 	movi	r7,16
  804858:	081904c0 	call	81904c <alt_up_char_buffer_string>
  80485c:	81000017 	ldw	r4,0(r16)
  804860:	900b883a 	mov	r5,r18
  804864:	a00d883a 	mov	r6,r20
  804868:	01c004c4 	movi	r7,19
  80486c:	081904c0 	call	81904c <alt_up_char_buffer_string>
  804870:	81000017 	ldw	r4,0(r16)
  804874:	900b883a 	mov	r5,r18
  804878:	a00d883a 	mov	r6,r20
  80487c:	01c00584 	movi	r7,22
  804880:	081904c0 	call	81904c <alt_up_char_buffer_string>
  804884:	81000017 	ldw	r4,0(r16)
  804888:	900b883a 	mov	r5,r18
  80488c:	a00d883a 	mov	r6,r20
  804890:	01c00644 	movi	r7,25
  804894:	081904c0 	call	81904c <alt_up_char_buffer_string>
  804898:	81000017 	ldw	r4,0(r16)
  80489c:	900b883a 	mov	r5,r18
  8048a0:	a00d883a 	mov	r6,r20
  8048a4:	01c00704 	movi	r7,28
  8048a8:	081904c0 	call	81904c <alt_up_char_buffer_string>
  8048ac:	81000017 	ldw	r4,0(r16)
  8048b0:	900b883a 	mov	r5,r18
  8048b4:	a00d883a 	mov	r6,r20
  8048b8:	01c007c4 	movi	r7,31
  8048bc:	081904c0 	call	81904c <alt_up_char_buffer_string>
  8048c0:	81000017 	ldw	r4,0(r16)
  8048c4:	900b883a 	mov	r5,r18
  8048c8:	a00d883a 	mov	r6,r20
  8048cc:	01c00884 	movi	r7,34
  8048d0:	081904c0 	call	81904c <alt_up_char_buffer_string>
  8048d4:	81000017 	ldw	r4,0(r16)
  8048d8:	900b883a 	mov	r5,r18
  8048dc:	a00d883a 	mov	r6,r20
  8048e0:	01c00944 	movi	r7,37
  8048e4:	081904c0 	call	81904c <alt_up_char_buffer_string>
  8048e8:	81000017 	ldw	r4,0(r16)
  8048ec:	900b883a 	mov	r5,r18
  8048f0:	a00d883a 	mov	r6,r20
  8048f4:	01c00a04 	movi	r7,40
  8048f8:	081904c0 	call	81904c <alt_up_char_buffer_string>
  8048fc:	81000017 	ldw	r4,0(r16)
  804900:	900b883a 	mov	r5,r18
  804904:	a00d883a 	mov	r6,r20
  804908:	01c00ac4 	movi	r7,43
  80490c:	081904c0 	call	81904c <alt_up_char_buffer_string>
  804910:	81000017 	ldw	r4,0(r16)
  804914:	900b883a 	mov	r5,r18
  804918:	a00d883a 	mov	r6,r20
  80491c:	01c00b84 	movi	r7,46
		y += 3;
	}
}
  804920:	dfc00317 	ldw	ra,12(sp)
  804924:	dd000217 	ldw	r20,8(sp)
  804928:	dc800117 	ldw	r18,4(sp)
  80492c:	dc000017 	ldw	r16,0(sp)
  804930:	dec00404 	addi	sp,sp,16

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  804934:	081904c1 	jmpi	81904c <alt_up_char_buffer_string>

00804938 <drawActionFrame>:
	}
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
}

void drawActionFrame(struct Frame* this){
  804938:	defffc04 	addi	sp,sp,-16
  80493c:	dc800215 	stw	r18,8(sp)
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
  804940:	014030c4 	movi	r5,195
	}
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
}

void drawActionFrame(struct Frame* this){
  804944:	2025883a 	mov	r18,r4
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
  804948:	01804fc4 	movi	r6,319
  80494c:	0009883a 	mov	r4,zero
  804950:	01c04034 	movhi	r7,256
  804954:	39ffffc4 	addi	r7,r7,-1
	}
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
}

void drawActionFrame(struct Frame* this){
  804958:	dfc00315 	stw	ra,12(sp)
  80495c:	dc400115 	stw	r17,4(sp)
  804960:	dc000015 	stw	r16,0(sp)
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
  804964:	08059ec0 	call	8059ec <drawHorizontalLine>
	draw_notransparent(0, 196, this->bg_image);;
  804968:	91800617 	ldw	r6,24(r18)
  80496c:	0009883a 	mov	r4,zero
  804970:	01403104 	movi	r5,196
  804974:	080546c0 	call	80546c <draw_notransparent>
	int i = 0;
	for (i = 0; i < this->button_size; i++){
  804978:	90800317 	ldw	r2,12(r18)
  80497c:	00800b0e 	bge	zero,r2,8049ac <drawActionFrame+0x74>
  804980:	0023883a 	mov	r17,zero
  804984:	0021883a 	mov	r16,zero
		this->buttons[i]->draw(this->buttons[i]);
  804988:	90800117 	ldw	r2,4(r18)

void drawActionFrame(struct Frame* this){
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
	draw_notransparent(0, 196, this->bg_image);;
	int i = 0;
	for (i = 0; i < this->button_size; i++){
  80498c:	8c400044 	addi	r17,r17,1
		this->buttons[i]->draw(this->buttons[i]);
  804990:	1405883a 	add	r2,r2,r16
  804994:	11000017 	ldw	r4,0(r2)

void drawActionFrame(struct Frame* this){
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
	draw_notransparent(0, 196, this->bg_image);;
	int i = 0;
	for (i = 0; i < this->button_size; i++){
  804998:	84000104 	addi	r16,r16,4
		this->buttons[i]->draw(this->buttons[i]);
  80499c:	20c00a17 	ldw	r3,40(r4)
  8049a0:	183ee83a 	callr	r3

void drawActionFrame(struct Frame* this){
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
	draw_notransparent(0, 196, this->bg_image);;
	int i = 0;
	for (i = 0; i < this->button_size; i++){
  8049a4:	90800317 	ldw	r2,12(r18)
  8049a8:	88bff716 	blt	r17,r2,804988 <drawActionFrame+0x50>
		this->buttons[i]->draw(this->buttons[i]);
	}
}
  8049ac:	dfc00317 	ldw	ra,12(sp)
  8049b0:	dc800217 	ldw	r18,8(sp)
  8049b4:	dc400117 	ldw	r17,4(sp)
  8049b8:	dc000017 	ldw	r16,0(sp)
  8049bc:	dec00404 	addi	sp,sp,16
  8049c0:	f800283a 	ret

008049c4 <drawMenuFrame>:
	struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, bg);
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
}

void drawMenuFrame(struct Frame* this){
  8049c4:	defffa04 	addi	sp,sp,-24
  8049c8:	dcc00415 	stw	r19,16(sp)
	int x1, y1, x2, y2;
	drawHorizontalLine(0, 0, SCREEN_WIDTH-1, 0xFFFFFF);
  8049cc:	000b883a 	mov	r5,zero
  8049d0:	01804fc4 	movi	r6,319
  8049d4:	01c04034 	movhi	r7,256
  8049d8:	39ffffc4 	addi	r7,r7,-1
	struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, bg);
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
}

void drawMenuFrame(struct Frame* this){
  8049dc:	2027883a 	mov	r19,r4
	int x1, y1, x2, y2;
	drawHorizontalLine(0, 0, SCREEN_WIDTH-1, 0xFFFFFF);
  8049e0:	0009883a 	mov	r4,zero
	struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, bg);
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
}

void drawMenuFrame(struct Frame* this){
  8049e4:	dfc00515 	stw	ra,20(sp)
  8049e8:	dc800315 	stw	r18,12(sp)
  8049ec:	dc400215 	stw	r17,8(sp)
  8049f0:	dc000115 	stw	r16,4(sp)
	int x1, y1, x2, y2;
	drawHorizontalLine(0, 0, SCREEN_WIDTH-1, 0xFFFFFF);
  8049f4:	08059ec0 	call	8059ec <drawHorizontalLine>
	drawHorizontalLine(0, 11, SCREEN_WIDTH-1, 0xFFFFFF);
  8049f8:	0009883a 	mov	r4,zero
  8049fc:	014002c4 	movi	r5,11
  804a00:	01804fc4 	movi	r6,319
  804a04:	01c04034 	movhi	r7,256
  804a08:	39ffffc4 	addi	r7,r7,-1
  804a0c:	08059ec0 	call	8059ec <drawHorizontalLine>
  804a10:	048039f4 	movhi	r18,231
  804a14:	94847384 	addi	r18,r18,4558
  804a18:	0009883a 	mov	r4,zero
  804a1c:	04405004 	movi	r17,320
	x1 = 0; y1 = 1;
	x2 = x1 + 10;
	y2 = 11;
	while (x2 <= 320){
		drawBox(x1, y1, x2, y2, 0xe711ce);
  804a20:	24000284 	addi	r16,r4,10
  804a24:	01400044 	movi	r5,1
  804a28:	800d883a 	mov	r6,r16
  804a2c:	01c002c4 	movi	r7,11
  804a30:	dc800015 	stw	r18,0(sp)
  804a34:	08051e40 	call	8051e4 <drawBox>
		x1+=10;
  804a38:	8009883a 	mov	r4,r16
	drawHorizontalLine(0, 0, SCREEN_WIDTH-1, 0xFFFFFF);
	drawHorizontalLine(0, 11, SCREEN_WIDTH-1, 0xFFFFFF);
	x1 = 0; y1 = 1;
	x2 = x1 + 10;
	y2 = 11;
	while (x2 <= 320){
  804a3c:	847ff81e 	bne	r16,r17,804a20 <drawMenuFrame+0x5c>
		drawBox(x1, y1, x2, y2, 0xe711ce);
		x1+=10;
		x2+=10;
	}
	this->buttons[0]->draw(this->buttons[0]);
  804a40:	98800117 	ldw	r2,4(r19)
  804a44:	11000017 	ldw	r4,0(r2)
  804a48:	20c00a17 	ldw	r3,40(r4)
  804a4c:	183ee83a 	callr	r3
	this->buttons[1]->draw(this->buttons[1]);
  804a50:	98800117 	ldw	r2,4(r19)
  804a54:	11000117 	ldw	r4,4(r2)
  804a58:	20c00a17 	ldw	r3,40(r4)
}
  804a5c:	dfc00517 	ldw	ra,20(sp)
  804a60:	dcc00417 	ldw	r19,16(sp)
  804a64:	dc800317 	ldw	r18,12(sp)
  804a68:	dc400217 	ldw	r17,8(sp)
  804a6c:	dc000117 	ldw	r16,4(sp)
  804a70:	dec00604 	addi	sp,sp,24
		drawBox(x1, y1, x2, y2, 0xe711ce);
		x1+=10;
		x2+=10;
	}
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
  804a74:	1800683a 	jmp	r3

00804a78 <drawMainFrame>:
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size - 1; i++){
  804a78:	20800217 	ldw	r2,8(r4)

/**
 * Draws all elements of mainFrame. All backgrounds are
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
  804a7c:	defffc04 	addi	sp,sp,-16
  804a80:	dc000015 	stw	r16,0(sp)
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size - 1; i++){
  804a84:	10bfffc4 	addi	r2,r2,-1

/**
 * Draws all elements of mainFrame. All backgrounds are
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
  804a88:	dfc00315 	stw	ra,12(sp)
  804a8c:	dc800215 	stw	r18,8(sp)
  804a90:	dc400115 	stw	r17,4(sp)
  804a94:	2021883a 	mov	r16,r4
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size - 1; i++){
  804a98:	00800c0e 	bge	zero,r2,804acc <drawMainFrame+0x54>
  804a9c:	0025883a 	mov	r18,zero
  804aa0:	0023883a 	mov	r17,zero
		this->elements[i]->drawFrame(this->elements[i]);
  804aa4:	80800017 	ldw	r2,0(r16)
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size - 1; i++){
  804aa8:	94800044 	addi	r18,r18,1
		this->elements[i]->drawFrame(this->elements[i]);
  804aac:	1445883a 	add	r2,r2,r17
  804ab0:	11000017 	ldw	r4,0(r2)
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size - 1; i++){
  804ab4:	8c400104 	addi	r17,r17,4
		this->elements[i]->drawFrame(this->elements[i]);
  804ab8:	20c00717 	ldw	r3,28(r4)
  804abc:	183ee83a 	callr	r3
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size - 1; i++){
  804ac0:	80800217 	ldw	r2,8(r16)
  804ac4:	10bfffc4 	addi	r2,r2,-1
  804ac8:	90bff616 	blt	r18,r2,804aa4 <drawMainFrame+0x2c>
		this->elements[i]->drawFrame(this->elements[i]);
	}
	// TODO: put all backgrounds in here.
	// make a struct Image array in mainFrame
	struct Image* bg = loadSDImage("AND.BMP");
  804acc:	010020b4 	movhi	r4,130
  804ad0:	21002704 	addi	r4,r4,156
  804ad4:	080553c0 	call	80553c <loadSDImage>
	draw_notransparent(241, 13, bg);
  804ad8:	100d883a 	mov	r6,r2
  804adc:	01003c44 	movi	r4,241
  804ae0:	01400344 	movi	r5,13
  804ae4:	080546c0 	call	80546c <draw_notransparent>
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
  804ae8:	01c04034 	movhi	r7,256
  804aec:	39ffffc4 	addi	r7,r7,-1
  804af0:	01003c04 	movi	r4,240
  804af4:	01400304 	movi	r5,12
  804af8:	01802dc4 	movi	r6,183
}
  804afc:	dfc00317 	ldw	ra,12(sp)
  804b00:	dc800217 	ldw	r18,8(sp)
  804b04:	dc400117 	ldw	r17,4(sp)
  804b08:	dc000017 	ldw	r16,0(sp)
  804b0c:	dec00404 	addi	sp,sp,16
	}
	// TODO: put all backgrounds in here.
	// make a struct Image array in mainFrame
	struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, bg);
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
  804b10:	080597c1 	jmpi	80597c <drawVerticalLine>

00804b14 <initFrame>:
#include "Frame.h"

struct Frame* initFrame(){
  804b14:	deffff04 	addi	sp,sp,-4
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804b18:	01000804 	movi	r4,32
#include "Frame.h"

struct Frame* initFrame(){
  804b1c:	dfc00015 	stw	ra,0(sp)
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804b20:	080bb6c0 	call	80bb6c <malloc>
	f->element_size = 0;
  804b24:	10000215 	stw	zero,8(r2)
	return f;
}
  804b28:	dfc00017 	ldw	ra,0(sp)
  804b2c:	dec00104 	addi	sp,sp,4
  804b30:	f800283a 	ret

00804b34 <initPlaylistPanel>:
	sp->background_col = 0;
	sp->button_size = db.num_of_songs; // starts from 1
	return sp;
}

struct Frame* initPlaylistPanel(){
  804b34:	defff804 	addi	sp,sp,-32
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804b38:	01000804 	movi	r4,32
	sp->background_col = 0;
	sp->button_size = db.num_of_songs; // starts from 1
	return sp;
}

struct Frame* initPlaylistPanel(){
  804b3c:	dfc00715 	stw	ra,28(sp)
  804b40:	dd800615 	stw	r22,24(sp)
  804b44:	dd400515 	stw	r21,20(sp)
  804b48:	dd000415 	stw	r20,16(sp)
  804b4c:	dcc00315 	stw	r19,12(sp)
  804b50:	dc800215 	stw	r18,8(sp)
  804b54:	dc400115 	stw	r17,4(sp)
  804b58:	dc000015 	stw	r16,0(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804b5c:	080bb6c0 	call	80bb6c <malloc>
struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  804b60:	058020b4 	movhi	r22,130
  804b64:	b591e904 	addi	r22,r22,18340
	return sp;
}

struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  804b68:	01003204 	movi	r4,200
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
  804b6c:	10000215 	stw	zero,8(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804b70:	102b883a 	mov	r21,r2
	return sp;
}

struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  804b74:	080bb6c0 	call	80bb6c <malloc>
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  804b78:	b0c03517 	ldw	r3,212(r22)
  804b7c:	01000044 	movi	r4,1
	return sp;
}

struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  804b80:	a8800115 	stw	r2,4(r21)
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  804b84:	20c0130e 	bge	r4,r3,804bd4 <initPlaylistPanel+0xa0>
  804b88:	05000104 	movi	r20,4
  804b8c:	2027883a 	mov	r19,r4
  804b90:	a025883a 	mov	r18,r20
  804b94:	b4400204 	addi	r17,r22,8
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
  804b98:	89800017 	ldw	r6,0(r17)
  804b9c:	ac000117 	ldw	r16,4(r21)
  804ba0:	900b883a 	mov	r5,r18
  804ba4:	01000f44 	movi	r4,61
  804ba8:	01c004b4 	movhi	r7,18
  804bac:	39cd1584 	addi	r7,r7,13398
  804bb0:	080051c0 	call	80051c <initPlaylistButton>
struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  804bb4:	b0c03517 	ldw	r3,212(r22)
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
  804bb8:	a421883a 	add	r16,r20,r16
struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  804bbc:	9cc00044 	addi	r19,r19,1
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
  804bc0:	80800015 	stw	r2,0(r16)
		init_playlist_y += 3;
  804bc4:	948000c4 	addi	r18,r18,3
struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  804bc8:	a5000104 	addi	r20,r20,4
  804bcc:	8c400104 	addi	r17,r17,4
  804bd0:	98fff116 	blt	r19,r3,804b98 <initPlaylistPanel+0x64>
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
		init_playlist_y += 3;
	}
	pp->drawFrame = drawPlaylistPanel;
  804bd4:	00802034 	movhi	r2,128
  804bd8:	1091bb04 	addi	r2,r2,18156
  804bdc:	a8800715 	stw	r2,28(r21)
	pp->button_size = db.num_of_lists; // starts from 1
	return pp;
}
  804be0:	a805883a 	mov	r2,r21
	for (i = 1; i < db.num_of_lists; i++){
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
		init_playlist_y += 3;
	}
	pp->drawFrame = drawPlaylistPanel;
	pp->button_size = db.num_of_lists; // starts from 1
  804be4:	a8c00315 	stw	r3,12(r21)
	return pp;
}
  804be8:	dfc00717 	ldw	ra,28(sp)
  804bec:	dd800617 	ldw	r22,24(sp)
  804bf0:	dd400517 	ldw	r21,20(sp)
  804bf4:	dd000417 	ldw	r20,16(sp)
  804bf8:	dcc00317 	ldw	r19,12(sp)
  804bfc:	dc800217 	ldw	r18,8(sp)
  804c00:	dc400117 	ldw	r17,4(sp)
  804c04:	dc000017 	ldw	r16,0(sp)
  804c08:	dec00804 	addi	sp,sp,32
  804c0c:	f800283a 	ret

00804c10 <initSongPanel>:
	af->drawFrame = drawActionFrame;
	af->button_size = 5;
	return af;
}

struct Frame* initSongPanel(){
  804c10:	defff804 	addi	sp,sp,-32
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804c14:	01000804 	movi	r4,32
	af->drawFrame = drawActionFrame;
	af->button_size = 5;
	return af;
}

struct Frame* initSongPanel(){
  804c18:	dfc00715 	stw	ra,28(sp)
  804c1c:	dd800615 	stw	r22,24(sp)
  804c20:	dd000415 	stw	r20,16(sp)
  804c24:	dd400515 	stw	r21,20(sp)
  804c28:	dcc00315 	stw	r19,12(sp)
  804c2c:	dc800215 	stw	r18,8(sp)
  804c30:	dc400115 	stw	r17,4(sp)
  804c34:	dc000015 	stw	r16,0(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804c38:	080bb6c0 	call	80bb6c <malloc>
struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  804c3c:	058020b4 	movhi	r22,130
  804c40:	b591e904 	addi	r22,r22,18340
	return af;
}

struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  804c44:	01003204 	movi	r4,200
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
  804c48:	10000215 	stw	zero,8(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804c4c:	1029883a 	mov	r20,r2
	return af;
}

struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  804c50:	080bb6c0 	call	80bb6c <malloc>
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  804c54:	b0c0a717 	ldw	r3,668(r22)
  804c58:	01000044 	movi	r4,1
	return af;
}

struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  804c5c:	a0800115 	stw	r2,4(r20)
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  804c60:	20c0140e 	bge	r4,r3,804cb4 <initSongPanel+0xa4>
  804c64:	05400104 	movi	r21,4
  804c68:	2027883a 	mov	r19,r4
  804c6c:	a825883a 	mov	r18,r21
  804c70:	b4403704 	addi	r17,r22,220
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
  804c74:	89800017 	ldw	r6,0(r17)
  804c78:	a4000117 	ldw	r16,4(r20)
  804c7c:	900b883a 	mov	r5,r18
  804c80:	31800104 	addi	r6,r6,4
  804c84:	01000f44 	movi	r4,61
  804c88:	01c004b4 	movhi	r7,18
  804c8c:	39cd1584 	addi	r7,r7,13398
  804c90:	080058c0 	call	80058c <initSongButton>
struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  804c94:	b0c0a717 	ldw	r3,668(r22)
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
  804c98:	ac21883a 	add	r16,r21,r16
struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  804c9c:	9cc00044 	addi	r19,r19,1
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
  804ca0:	80800015 	stw	r2,0(r16)
		init_song_y = init_song_y+3;
  804ca4:	948000c4 	addi	r18,r18,3
struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  804ca8:	ad400104 	addi	r21,r21,4
  804cac:	8c400104 	addi	r17,r17,4
  804cb0:	98fff016 	blt	r19,r3,804c74 <initSongPanel+0x64>
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
		init_song_y = init_song_y+3;
	}
	sp->drawFrame = drawSongPanel;
  804cb4:	00802034 	movhi	r2,128
  804cb8:	10919d04 	addi	r2,r2,18036
  804cbc:	a0800715 	stw	r2,28(r20)
	sp->background_col = 0;
	sp->button_size = db.num_of_songs; // starts from 1
	return sp;
}
  804cc0:	a005883a 	mov	r2,r20
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
		init_song_y = init_song_y+3;
	}
	sp->drawFrame = drawSongPanel;
	sp->background_col = 0;
	sp->button_size = db.num_of_songs; // starts from 1
  804cc4:	a0c00315 	stw	r3,12(r20)
	for (i = 1; i < db.num_of_songs; i++){
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
		init_song_y = init_song_y+3;
	}
	sp->drawFrame = drawSongPanel;
	sp->background_col = 0;
  804cc8:	a0000415 	stw	zero,16(r20)
	sp->button_size = db.num_of_songs; // starts from 1
	return sp;
}
  804ccc:	dfc00717 	ldw	ra,28(sp)
  804cd0:	dd800617 	ldw	r22,24(sp)
  804cd4:	dd400517 	ldw	r21,20(sp)
  804cd8:	dd000417 	ldw	r20,16(sp)
  804cdc:	dcc00317 	ldw	r19,12(sp)
  804ce0:	dc800217 	ldw	r18,8(sp)
  804ce4:	dc400117 	ldw	r17,4(sp)
  804ce8:	dc000017 	ldw	r16,0(sp)
  804cec:	dec00804 	addi	sp,sp,32
  804cf0:	f800283a 	ret

00804cf4 <initActionFrame>:
	mf->drawFrame = drawMenuFrame;
	mf->button_size = 2;
	return mf;
}

struct Frame* initActionFrame(){
  804cf4:	defffb04 	addi	sp,sp,-20
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804cf8:	01000804 	movi	r4,32
	mf->drawFrame = drawMenuFrame;
	mf->button_size = 2;
	return mf;
}

struct Frame* initActionFrame(){
  804cfc:	dfc00415 	stw	ra,16(sp)
  804d00:	dd400315 	stw	r21,12(sp)
  804d04:	dcc00215 	stw	r19,8(sp)
  804d08:	dc800115 	stw	r18,4(sp)
  804d0c:	dc000015 	stw	r16,0(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804d10:	080bb6c0 	call	80bb6c <malloc>
	f->element_size = 0;
  804d14:	10000215 	stw	zero,8(r2)
	return mf;
}

struct Frame* initActionFrame(){
	struct Frame* af = initFrame();
	af->bg_image = loadSDImage("GR3.BMP");
  804d18:	010020b4 	movhi	r4,130
  804d1c:	21002904 	addi	r4,r4,164
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804d20:	1025883a 	mov	r18,r2
	return mf;
}

struct Frame* initActionFrame(){
	struct Frame* af = initFrame();
	af->bg_image = loadSDImage("GR3.BMP");
  804d24:	080553c0 	call	80553c <loadSDImage>
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
  804d28:	01000504 	movi	r4,20
	return mf;
}

struct Frame* initActionFrame(){
	struct Frame* af = initFrame();
	af->bg_image = loadSDImage("GR3.BMP");
  804d2c:	90800615 	stw	r2,24(r18)
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
  804d30:	080bb6c0 	call	80bb6c <malloc>
	af->buttons[0] = initActionButton(0);
  804d34:	0009883a 	mov	r4,zero
}

struct Frame* initActionFrame(){
	struct Frame* af = initFrame();
	af->bg_image = loadSDImage("GR3.BMP");
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
  804d38:	1027883a 	mov	r19,r2
  804d3c:	90800115 	stw	r2,4(r18)
	af->buttons[0] = initActionButton(0);
  804d40:	08003f80 	call	8003f8 <initActionButton>
	af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP"); //size 30x30
  804d44:	90c00117 	ldw	r3,4(r18)

struct Frame* initActionFrame(){
	struct Frame* af = initFrame();
	af->bg_image = loadSDImage("GR3.BMP");
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
	af->buttons[0] = initActionButton(0);
  804d48:	98800015 	stw	r2,0(r19)
	af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP"); //size 30x30
  804d4c:	010020b4 	movhi	r4,130
  804d50:	21002b04 	addi	r4,r4,172
  804d54:	1cc00017 	ldw	r19,0(r3)
  804d58:	080553c0 	call	80553c <loadSDImage>
	af->buttons[1] = initActionButton(1);
  804d5c:	94000117 	ldw	r16,4(r18)
struct Frame* initActionFrame(){
	struct Frame* af = initFrame();
	af->bg_image = loadSDImage("GR3.BMP");
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
	af->buttons[0] = initActionButton(0);
	af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP"); //size 30x30
  804d60:	98800815 	stw	r2,32(r19)
	af->buttons[1] = initActionButton(1);
  804d64:	01000044 	movi	r4,1
  804d68:	08003f80 	call	8003f8 <initActionButton>
  804d6c:	05400104 	movi	r21,4
	af->buttons[1]->stats[0] = loadSDImage("STOP.BMP"); //size 20x20
  804d70:	90c00117 	ldw	r3,4(r18)
	struct Frame* af = initFrame();
	af->bg_image = loadSDImage("GR3.BMP");
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
	af->buttons[0] = initActionButton(0);
	af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP"); //size 30x30
	af->buttons[1] = initActionButton(1);
  804d74:	8561883a 	add	r16,r16,r21
  804d78:	80800015 	stw	r2,0(r16)
	af->buttons[1]->stats[0] = loadSDImage("STOP.BMP"); //size 20x20
  804d7c:	1cc00117 	ldw	r19,4(r3)
  804d80:	010020b4 	movhi	r4,130
  804d84:	21002e04 	addi	r4,r4,184
  804d88:	080553c0 	call	80553c <loadSDImage>
	af->buttons[2] = initActionButton(2);
  804d8c:	94000117 	ldw	r16,4(r18)
	af->bg_image = loadSDImage("GR3.BMP");
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
	af->buttons[0] = initActionButton(0);
	af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP"); //size 30x30
	af->buttons[1] = initActionButton(1);
	af->buttons[1]->stats[0] = loadSDImage("STOP.BMP"); //size 20x20
  804d90:	98800815 	stw	r2,32(r19)
	af->buttons[2] = initActionButton(2);
  804d94:	01000084 	movi	r4,2
  804d98:	08003f80 	call	8003f8 <initActionButton>
	af->buttons[2]->stats[0] = loadSDImage("PAUSE.BMP");
  804d9c:	90c00117 	ldw	r3,4(r18)
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
	af->buttons[0] = initActionButton(0);
	af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP"); //size 30x30
	af->buttons[1] = initActionButton(1);
	af->buttons[1]->stats[0] = loadSDImage("STOP.BMP"); //size 20x20
	af->buttons[2] = initActionButton(2);
  804da0:	84000204 	addi	r16,r16,8
  804da4:	80800015 	stw	r2,0(r16)
	af->buttons[2]->stats[0] = loadSDImage("PAUSE.BMP");
  804da8:	1cc00217 	ldw	r19,8(r3)
  804dac:	010020b4 	movhi	r4,130
  804db0:	21003104 	addi	r4,r4,196
  804db4:	080553c0 	call	80553c <loadSDImage>
	af->buttons[3] = initActionButton(3);
  804db8:	94000117 	ldw	r16,4(r18)
	af->buttons[0] = initActionButton(0);
	af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP"); //size 30x30
	af->buttons[1] = initActionButton(1);
	af->buttons[1]->stats[0] = loadSDImage("STOP.BMP"); //size 20x20
	af->buttons[2] = initActionButton(2);
	af->buttons[2]->stats[0] = loadSDImage("PAUSE.BMP");
  804dbc:	98800815 	stw	r2,32(r19)
	af->buttons[3] = initActionButton(3);
  804dc0:	010000c4 	movi	r4,3
  804dc4:	08003f80 	call	8003f8 <initActionButton>
	af->buttons[3]->stats[0] = loadSDImage("PREV.BMP");
  804dc8:	90c00117 	ldw	r3,4(r18)
	af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP"); //size 30x30
	af->buttons[1] = initActionButton(1);
	af->buttons[1]->stats[0] = loadSDImage("STOP.BMP"); //size 20x20
	af->buttons[2] = initActionButton(2);
	af->buttons[2]->stats[0] = loadSDImage("PAUSE.BMP");
	af->buttons[3] = initActionButton(3);
  804dcc:	84000304 	addi	r16,r16,12
  804dd0:	80800015 	stw	r2,0(r16)
	af->buttons[3]->stats[0] = loadSDImage("PREV.BMP");
  804dd4:	1cc00317 	ldw	r19,12(r3)
  804dd8:	010020b4 	movhi	r4,130
  804ddc:	21003404 	addi	r4,r4,208
  804de0:	080553c0 	call	80553c <loadSDImage>
	af->buttons[4] = initActionButton(4);
  804de4:	94000117 	ldw	r16,4(r18)
  804de8:	a809883a 	mov	r4,r21
	af->buttons[1] = initActionButton(1);
	af->buttons[1]->stats[0] = loadSDImage("STOP.BMP"); //size 20x20
	af->buttons[2] = initActionButton(2);
	af->buttons[2]->stats[0] = loadSDImage("PAUSE.BMP");
	af->buttons[3] = initActionButton(3);
	af->buttons[3]->stats[0] = loadSDImage("PREV.BMP");
  804dec:	98800815 	stw	r2,32(r19)
	af->buttons[4] = initActionButton(4);
  804df0:	08003f80 	call	8003f8 <initActionButton>
	af->buttons[4]->stats[0] = loadSDImage("NEXT.BMP");
  804df4:	90c00117 	ldw	r3,4(r18)
	af->buttons[1]->stats[0] = loadSDImage("STOP.BMP"); //size 20x20
	af->buttons[2] = initActionButton(2);
	af->buttons[2]->stats[0] = loadSDImage("PAUSE.BMP");
	af->buttons[3] = initActionButton(3);
	af->buttons[3]->stats[0] = loadSDImage("PREV.BMP");
	af->buttons[4] = initActionButton(4);
  804df8:	84000404 	addi	r16,r16,16
  804dfc:	80800015 	stw	r2,0(r16)
	af->buttons[4]->stats[0] = loadSDImage("NEXT.BMP");
  804e00:	1c000417 	ldw	r16,16(r3)
  804e04:	010020b4 	movhi	r4,130
  804e08:	21003704 	addi	r4,r4,220
  804e0c:	080553c0 	call	80553c <loadSDImage>
  804e10:	80800815 	stw	r2,32(r16)
	af->drawFrame = drawActionFrame;
  804e14:	00802034 	movhi	r2,128
  804e18:	10924e04 	addi	r2,r2,18744
  804e1c:	90800715 	stw	r2,28(r18)
	af->button_size = 5;
  804e20:	00c00144 	movi	r3,5
	return af;
}
  804e24:	9005883a 	mov	r2,r18
	af->buttons[3] = initActionButton(3);
	af->buttons[3]->stats[0] = loadSDImage("PREV.BMP");
	af->buttons[4] = initActionButton(4);
	af->buttons[4]->stats[0] = loadSDImage("NEXT.BMP");
	af->drawFrame = drawActionFrame;
	af->button_size = 5;
  804e28:	90c00315 	stw	r3,12(r18)
	return af;
}
  804e2c:	dfc00417 	ldw	ra,16(sp)
  804e30:	dd400317 	ldw	r21,12(sp)
  804e34:	dcc00217 	ldw	r19,8(sp)
  804e38:	dc800117 	ldw	r18,4(sp)
  804e3c:	dc000017 	ldw	r16,0(sp)
  804e40:	dec00504 	addi	sp,sp,20
  804e44:	f800283a 	ret

00804e48 <initMenuFrame>:
	f->button_size = 0;
	f->currentPanel = 0;
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
  804e48:	defff904 	addi	sp,sp,-28
  804e4c:	dc400215 	stw	r17,8(sp)
  804e50:	2023883a 	mov	r17,r4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804e54:	01000804 	movi	r4,32
	f->button_size = 0;
	f->currentPanel = 0;
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
  804e58:	dfc00615 	stw	ra,24(sp)
  804e5c:	dd800515 	stw	r22,20(sp)
  804e60:	dd000415 	stw	r20,16(sp)
  804e64:	dc800315 	stw	r18,12(sp)
  804e68:	dc000115 	stw	r16,4(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804e6c:	080bb6c0 	call	80bb6c <malloc>
	f->element_size = 0;
  804e70:	10000215 	stw	zero,8(r2)
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  804e74:	01000204 	movi	r4,8
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804e78:	1025883a 	mov	r18,r2
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
  804e7c:	050004b4 	movhi	r20,18
  804e80:	a50d1584 	addi	r20,r20,13398
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  804e84:	080bb6c0 	call	80bb6c <malloc>
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
  804e88:	a00d883a 	mov	r6,r20
  804e8c:	01000144 	movi	r4,5
  804e90:	014020b4 	movhi	r5,130
  804e94:	29403a04 	addi	r5,r5,232
  804e98:	000f883a 	mov	r7,zero
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  804e9c:	102d883a 	mov	r22,r2
  804ea0:	90800115 	stw	r2,4(r18)
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
  804ea4:	dc400015 	stw	r17,0(sp)
  804ea8:	08005fc0 	call	8005fc <initMenuButton>
	mf->buttons[1] = initMenuButton(35, "Playlists", 0x123456, 1, mainFrame);
  804eac:	94000117 	ldw	r16,4(r18)
  804eb0:	a00d883a 	mov	r6,r20
  804eb4:	010008c4 	movi	r4,35
  804eb8:	014020b4 	movhi	r5,130
  804ebc:	29403d04 	addi	r5,r5,244
  804ec0:	01c00044 	movi	r7,1
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
  804ec4:	b0800015 	stw	r2,0(r22)
	mf->buttons[1] = initMenuButton(35, "Playlists", 0x123456, 1, mainFrame);
  804ec8:	dc400015 	stw	r17,0(sp)
  804ecc:	84000104 	addi	r16,r16,4
  804ed0:	08005fc0 	call	8005fc <initMenuButton>
  804ed4:	80800015 	stw	r2,0(r16)
	mf->drawFrame = drawMenuFrame;
  804ed8:	00802034 	movhi	r2,128
  804edc:	10927104 	addi	r2,r2,18884
  804ee0:	90800715 	stw	r2,28(r18)
	mf->button_size = 2;
  804ee4:	00c00084 	movi	r3,2
	return mf;
}
  804ee8:	9005883a 	mov	r2,r18
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
	mf->buttons[1] = initMenuButton(35, "Playlists", 0x123456, 1, mainFrame);
	mf->drawFrame = drawMenuFrame;
	mf->button_size = 2;
  804eec:	90c00315 	stw	r3,12(r18)
	return mf;
}
  804ef0:	dfc00617 	ldw	ra,24(sp)
  804ef4:	dd800517 	ldw	r22,20(sp)
  804ef8:	dd000417 	ldw	r20,16(sp)
  804efc:	dc800317 	ldw	r18,12(sp)
  804f00:	dc400217 	ldw	r17,8(sp)
  804f04:	dc000117 	ldw	r16,4(sp)
  804f08:	dec00704 	addi	sp,sp,28
  804f0c:	f800283a 	ret

00804f10 <initMainFrame>:
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	return f;
}

struct Frame* initMainFrame(){
  804f10:	defff504 	addi	sp,sp,-44
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804f14:	01000804 	movi	r4,32
	f->element_size = 0;
	return f;
}

struct Frame* initMainFrame(){
  804f18:	dfc00a15 	stw	ra,40(sp)
  804f1c:	df000915 	stw	fp,36(sp)
  804f20:	ddc00815 	stw	r23,32(sp)
  804f24:	dd800715 	stw	r22,28(sp)
  804f28:	dd400615 	stw	r21,24(sp)
  804f2c:	dd000515 	stw	r20,20(sp)
  804f30:	dcc00415 	stw	r19,16(sp)
  804f34:	dc800315 	stw	r18,12(sp)
  804f38:	dc400215 	stw	r17,8(sp)
  804f3c:	dc000115 	stw	r16,4(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804f40:	080bb6c0 	call	80bb6c <malloc>
	f->element_size = 0;
  804f44:	10000215 	stw	zero,8(r2)
	return f;
}

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
  804f48:	01000404 	movi	r4,16
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804f4c:	102f883a 	mov	r23,r2
	return f;
}

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
  804f50:	080bb6c0 	call	80bb6c <malloc>
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804f54:	01000804 	movi	r4,32
	return f;
}

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
  804f58:	102d883a 	mov	r22,r2
  804f5c:	b8800015 	stw	r2,0(r23)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804f60:	080bb6c0 	call	80bb6c <malloc>
	f->element_size = 0;
  804f64:	10000215 	stw	zero,8(r2)
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  804f68:	01000204 	movi	r4,8
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804f6c:	1023883a 	mov	r17,r2
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  804f70:	080bb6c0 	call	80bb6c <malloc>
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
  804f74:	014020b4 	movhi	r5,130
  804f78:	29403a04 	addi	r5,r5,232
  804f7c:	01000144 	movi	r4,5
  804f80:	018004b4 	movhi	r6,18
  804f84:	318d1584 	addi	r6,r6,13398
  804f88:	000f883a 	mov	r7,zero
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  804f8c:	88800115 	stw	r2,4(r17)
  804f90:	1029883a 	mov	r20,r2
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
  804f94:	ddc00015 	stw	r23,0(sp)
	mf->buttons[1] = initMenuButton(35, "Playlists", 0x123456, 1, mainFrame);
  804f98:	04000044 	movi	r16,1
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
  804f9c:	08005fc0 	call	8005fc <initMenuButton>
	mf->buttons[1] = initMenuButton(35, "Playlists", 0x123456, 1, mainFrame);
  804fa0:	8cc00117 	ldw	r19,4(r17)
  804fa4:	014020b4 	movhi	r5,130
  804fa8:	29403d04 	addi	r5,r5,244
  804fac:	018004b4 	movhi	r6,18
  804fb0:	318d1584 	addi	r6,r6,13398
  804fb4:	800f883a 	mov	r7,r16
  804fb8:	010008c4 	movi	r4,35
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
  804fbc:	a0800015 	stw	r2,0(r20)
	mf->buttons[1] = initMenuButton(35, "Playlists", 0x123456, 1, mainFrame);
  804fc0:	ddc00015 	stw	r23,0(sp)
  804fc4:	08005fc0 	call	8005fc <initMenuButton>
	mf->drawFrame = drawMenuFrame;
	mf->button_size = 2;
  804fc8:	00c00084 	movi	r3,2

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame();
  804fcc:	bc800017 	ldw	r18,0(r23)

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
	mf->buttons[1] = initMenuButton(35, "Playlists", 0x123456, 1, mainFrame);
  804fd0:	98800115 	stw	r2,4(r19)
	mf->drawFrame = drawMenuFrame;
  804fd4:	00802034 	movhi	r2,128
  804fd8:	10927104 	addi	r2,r2,18884
	mf->button_size = 2;
  804fdc:	88c00315 	stw	r3,12(r17)
}

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
  804fe0:	b4400015 	stw	r17,0(r22)
struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0x123456, 0, mainFrame);
	mf->buttons[1] = initMenuButton(35, "Playlists", 0x123456, 1, mainFrame);
	mf->drawFrame = drawMenuFrame;
  804fe4:	88800715 	stw	r2,28(r17)

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame();
  804fe8:	0804cf40 	call	804cf4 <initActionFrame>
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804fec:	01000804 	movi	r4,32

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame();
  804ff0:	90800115 	stw	r2,4(r18)
	f->elements[2] = initSongPanel();
  804ff4:	bf000017 	ldw	fp,0(r23)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  804ff8:	080bb6c0 	call	80bb6c <malloc>
struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  804ffc:	054020b4 	movhi	r21,130
  805000:	ad51e904 	addi	r21,r21,18340
	return af;
}

struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  805004:	01003204 	movi	r4,200
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
  805008:	10000215 	stw	zero,8(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  80500c:	1029883a 	mov	r20,r2
	return af;
}

struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  805010:	080bb6c0 	call	80bb6c <malloc>
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  805014:	a8c0a717 	ldw	r3,668(r21)
	return af;
}

struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  805018:	a0800115 	stw	r2,4(r20)
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  80501c:	80c0140e 	bge	r16,r3,805070 <initMainFrame+0x160>
  805020:	05800104 	movi	r22,4
  805024:	8027883a 	mov	r19,r16
  805028:	b025883a 	mov	r18,r22
  80502c:	ac403704 	addi	r17,r21,220
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
  805030:	89800017 	ldw	r6,0(r17)
  805034:	a4000117 	ldw	r16,4(r20)
  805038:	900b883a 	mov	r5,r18
  80503c:	31800104 	addi	r6,r6,4
  805040:	01000f44 	movi	r4,61
  805044:	01c004b4 	movhi	r7,18
  805048:	39cd1584 	addi	r7,r7,13398
  80504c:	080058c0 	call	80058c <initSongButton>
struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  805050:	a8c0a717 	ldw	r3,668(r21)
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
  805054:	b421883a 	add	r16,r22,r16
struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  805058:	9cc00044 	addi	r19,r19,1
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
  80505c:	80800015 	stw	r2,0(r16)
		init_song_y = init_song_y+3;
  805060:	948000c4 	addi	r18,r18,3
struct Frame* initSongPanel(){
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
  805064:	b5800104 	addi	r22,r22,4
  805068:	8c400104 	addi	r17,r17,4
  80506c:	98fff016 	blt	r19,r3,805030 <initMainFrame+0x120>
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
		init_song_y = init_song_y+3;
	}
	sp->drawFrame = drawSongPanel;
  805070:	00802034 	movhi	r2,128
  805074:	10919d04 	addi	r2,r2,18036
	sp->background_col = 0;
	sp->button_size = db.num_of_songs; // starts from 1
  805078:	a0c00315 	stw	r3,12(r20)
struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame();
	f->elements[2] = initSongPanel();
  80507c:	e5000215 	stw	r20,8(fp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  805080:	01000804 	movi	r4,32
	int init_song_y = 4;
	for (i = 1; i < db.num_of_songs; i++){
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, 0x123456);
		init_song_y = init_song_y+3;
	}
	sp->drawFrame = drawSongPanel;
  805084:	a0800715 	stw	r2,28(r20)
	sp->background_col = 0;
  805088:	a0000415 	stw	zero,16(r20)
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame();
	f->elements[2] = initSongPanel();
	f->elements[3] = initPlaylistPanel();
  80508c:	bf000017 	ldw	fp,0(r23)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  805090:	080bb6c0 	call	80bb6c <malloc>
	f->element_size = 0;
  805094:	10000215 	stw	zero,8(r2)
	return sp;
}

struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  805098:	01003204 	movi	r4,200
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  80509c:	102d883a 	mov	r22,r2
	return sp;
}

struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  8050a0:	080bb6c0 	call	80bb6c <malloc>
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  8050a4:	a8c03517 	ldw	r3,212(r21)
  8050a8:	01000044 	movi	r4,1
	return sp;
}

struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
  8050ac:	b0800115 	stw	r2,4(r22)
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  8050b0:	20c0140e 	bge	r4,r3,805104 <initMainFrame+0x1f4>
  8050b4:	05000104 	movi	r20,4
  8050b8:	2027883a 	mov	r19,r4
  8050bc:	a025883a 	mov	r18,r20
  8050c0:	044020b4 	movhi	r17,130
  8050c4:	8c51eb04 	addi	r17,r17,18348
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
  8050c8:	89800017 	ldw	r6,0(r17)
  8050cc:	b4000117 	ldw	r16,4(r22)
  8050d0:	900b883a 	mov	r5,r18
  8050d4:	01000f44 	movi	r4,61
  8050d8:	01c004b4 	movhi	r7,18
  8050dc:	39cd1584 	addi	r7,r7,13398
  8050e0:	080051c0 	call	80051c <initPlaylistButton>
struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  8050e4:	a8c03517 	ldw	r3,212(r21)
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
  8050e8:	a421883a 	add	r16,r20,r16
struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  8050ec:	9cc00044 	addi	r19,r19,1
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
  8050f0:	80800015 	stw	r2,0(r16)
		init_playlist_y += 3;
  8050f4:	948000c4 	addi	r18,r18,3
struct Frame* initPlaylistPanel(){
	struct Frame* pp = initFrame();
	pp->buttons = (struct Button**)malloc(50*sizeof(struct Button*));
	int i = 1;
	int init_playlist_y = 4;
	for (i = 1; i < db.num_of_lists; i++){
  8050f8:	a5000104 	addi	r20,r20,4
  8050fc:	8c400104 	addi	r17,r17,4
  805100:	98fff116 	blt	r19,r3,8050c8 <initMainFrame+0x1b8>
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
		init_playlist_y += 3;
	}
	pp->drawFrame = drawPlaylistPanel;
  805104:	00802034 	movhi	r2,128
  805108:	1091bb04 	addi	r2,r2,18156
  80510c:	b0800715 	stw	r2,28(r22)
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame();
	f->elements[2] = initSongPanel();
	f->elements[3] = initPlaylistPanel();
	f->drawFrame = drawMainFrame;
  805110:	00802034 	movhi	r2,128
  805114:	10929e04 	addi	r2,r2,19064
	for (i = 1; i < db.num_of_lists; i++){
		pp->buttons[i] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, 0x123456);
		init_playlist_y += 3;
	}
	pp->drawFrame = drawPlaylistPanel;
	pp->button_size = db.num_of_lists; // starts from 1
  805118:	b0c00315 	stw	r3,12(r22)
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame();
	f->elements[2] = initSongPanel();
	f->elements[3] = initPlaylistPanel();
	f->drawFrame = drawMainFrame;
  80511c:	b8800715 	stw	r2,28(r23)
	f->element_size = 4;
  805120:	00c00104 	movi	r3,4
	f->button_size = 0;
	f->currentPanel = 0;
	return f;
}
  805124:	b805883a 	mov	r2,r23
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(4*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame();
	f->elements[2] = initSongPanel();
	f->elements[3] = initPlaylistPanel();
  805128:	e5800315 	stw	r22,12(fp)
	f->drawFrame = drawMainFrame;
	f->element_size = 4;
  80512c:	b8c00215 	stw	r3,8(r23)
	f->button_size = 0;
  805130:	b8000315 	stw	zero,12(r23)
	f->currentPanel = 0;
  805134:	b8000515 	stw	zero,20(r23)
	return f;
}
  805138:	dfc00a17 	ldw	ra,40(sp)
  80513c:	df000917 	ldw	fp,36(sp)
  805140:	ddc00817 	ldw	r23,32(sp)
  805144:	dd800717 	ldw	r22,28(sp)
  805148:	dd400617 	ldw	r21,24(sp)
  80514c:	dd000517 	ldw	r20,20(sp)
  805150:	dcc00417 	ldw	r19,16(sp)
  805154:	dc800317 	ldw	r18,12(sp)
  805158:	dc400217 	ldw	r17,8(sp)
  80515c:	dc000117 	ldw	r16,4(sp)
  805160:	dec00b04 	addi	sp,sp,44
  805164:	f800283a 	ret

00805168 <getColor>:
		}
	}
}
/*helper function to convert 32 bit color code to 16 bit color*/

int getColor(int red, int green, int blue) {
  805168:	2005d0fa 	srai	r2,r4,3
  80516c:	280bd0ba 	srai	r5,r5,2
  805170:	300dd0fa 	srai	r6,r6,3
  805174:	100492fa 	slli	r2,r2,11
  805178:	280a917a 	slli	r5,r5,5
  80517c:	1145883a 	add	r2,r2,r5
	return (int)(((red>>3)<<11) + ((green>>2)<<5) + (blue>>3));
}
  805180:	1185883a 	add	r2,r2,r6
  805184:	f800283a 	ret

00805188 <getColor555>:
int getColor555(int color555) {
	int color = color555&0x7FFF;
  805188:	211fffcc 	andi	r4,r4,32767
  80518c:	209ff80c 	andi	r2,r4,32736
  805190:	1085883a 	add	r2,r2,r2
  805194:	210007cc 	andi	r4,r4,31
	return (color&0x7C00)*2+(color&0x03E0)*2+(color&0x1F);
}
  805198:	1105883a 	add	r2,r2,r4
  80519c:	f800283a 	ret

008051a0 <addImage>:
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
	curr->end->next = n;
	curr->end = n;
	curr->first->prev = n;
  8051a0:	21800917 	ldw	r6,36(r4)
}
/*
 * add an image to the animation
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
  8051a4:	20800a17 	ldw	r2,40(r4)
	curr->end->next = n;
	curr->end = n;
  8051a8:	21400a15 	stw	r5,40(r4)
	curr->first->prev = n;
	n->first = curr->first;
  8051ac:	29800915 	stw	r6,36(r5)
	n->next = curr->first;
  8051b0:	20c00917 	ldw	r3,36(r4)
/*
 * add an image to the animation
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
	curr->end->next = n;
  8051b4:	11400815 	stw	r5,32(r2)
}
/*
 * add an image to the animation
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
  8051b8:	28800715 	stw	r2,28(r5)
	curr->end->next = n;
	curr->end = n;
	curr->first->prev = n;
	n->first = curr->first;
	n->next = curr->first;
  8051bc:	28c00815 	stw	r3,32(r5)
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
	curr->end->next = n;
	curr->end = n;
	curr->first->prev = n;
  8051c0:	31400715 	stw	r5,28(r6)
	n->first = curr->first;
	n->next = curr->first;
}
  8051c4:	f800283a 	ret

008051c8 <setImagePos>:
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  8051c8:	20800117 	ldw	r2,4(r4)
	this->prev_y = this->y;
  8051cc:	20c00217 	ldw	r3,8(r4)
	this->x = pos_x;
  8051d0:	21400115 	stw	r5,4(r4)
	this->y = pos_y;
  8051d4:	21800215 	stw	r6,8(r4)
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  8051d8:	20800315 	stw	r2,12(r4)
	this->prev_y = this->y;
  8051dc:	20c00415 	stw	r3,16(r4)
	this->x = pos_x;
	this->y = pos_y;
}
  8051e0:	f800283a 	ret

008051e4 <drawBox>:

void drawBox(int x1, int y1, int x2, int y2, int color) {
  8051e4:	da800017 	ldw	r10,0(sp)
	if(x1 < 0 || y1 < 0) return;
  8051e8:	20001616 	blt	r4,zero,805244 <drawBox+0x60>
  8051ec:	28001516 	blt	r5,zero,805244 <drawBox+0x60>
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  8051f0:	310dc83a 	sub	r6,r6,r4
  8051f4:	394fc83a 	sub	r7,r7,r5
		for(i = 0; i < w; i++) {
  8051f8:	0180120e 	bge	zero,r6,805244 <drawBox+0x60>
  8051fc:	28805024 	muli	r2,r5,320
  805200:	0017883a 	mov	r11,zero
  805204:	3b000050 	cmplti	r12,r7,1
  805208:	2085883a 	add	r2,r4,r2
  80520c:	1089883a 	add	r4,r2,r2
		    for(j = 0; j < h; j++) {
  805210:	6000091e 	bne	r12,zero,805238 <drawBox+0x54>
  805214:	2013883a 	mov	r9,r4
  805218:	0011883a 	mov	r8,zero
		    	/*if(mouse != NULL) {
		    		dx = x-mouse->super->x; dy = y-mouse->super->y;
		    		if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
		    			*(mouse->overlapImg+dy*10 + dx) = color;
		    	}*/
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  80521c:	d0e75b17 	ldw	r3,-25236(gp)
  805220:	18800b17 	ldw	r2,44(r3)
  805224:	4885883a 	add	r2,r9,r2
  805228:	1280002d 	sthio	r10,0(r2)

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
		for(i = 0; i < w; i++) {
		    for(j = 0; j < h; j++) {
  80522c:	42000044 	addi	r8,r8,1
  805230:	4a40a004 	addi	r9,r9,640
  805234:	3a3ff91e 	bne	r7,r8,80521c <drawBox+0x38>
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
		for(i = 0; i < w; i++) {
  805238:	5ac00044 	addi	r11,r11,1
  80523c:	21000084 	addi	r4,r4,2
  805240:	32fff31e 	bne	r6,r11,805210 <drawBox+0x2c>
  805244:	f800283a 	ret

00805248 <initImage>:

/*
 * Constructor of Animation; start == 1 if this animation contains the first image
 * in the sequence;
 */
struct Image* initImage(int* img, int start, int width, int height) {
  805248:	defffb04 	addi	sp,sp,-20
  80524c:	dcc00315 	stw	r19,12(sp)
  805250:	dc800215 	stw	r18,8(sp)
  805254:	dc400115 	stw	r17,4(sp)
  805258:	dc000015 	stw	r16,0(sp)
  80525c:	2025883a 	mov	r18,r4
  805260:	2827883a 	mov	r19,r5
  805264:	3021883a 	mov	r16,r6
  805268:	3823883a 	mov	r17,r7
  80526c:	dfc00415 	stw	ra,16(sp)
  805270:	00000106 	br	805278 <initImage+0x30>
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
  805274:	080c5100 	call	80c510 <puts>
  805278:	01000b04 	movi	r4,44
  80527c:	080bb6c0 	call	80bb6c <malloc>
  805280:	010020b4 	movhi	r4,130
  805284:	21004004 	addi	r4,r4,256
  805288:	103ffa26 	beq	r2,zero,805274 <initImage+0x2c>
	a->width = width;
  80528c:	14000615 	stw	r16,24(r2)
	a->height = height;
  805290:	14400515 	stw	r17,20(r2)
	a->x = a->y = a->prev_x = a->prev_y = 0;
	a->buffer = img;
  805294:	14800015 	stw	r18,0(r2)
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
	a->width = width;
	a->height = height;
	a->x = a->y = a->prev_x = a->prev_y = 0;
  805298:	10000415 	stw	zero,16(r2)
  80529c:	10000315 	stw	zero,12(r2)
  8052a0:	10000215 	stw	zero,8(r2)
  8052a4:	10000115 	stw	zero,4(r2)
	a->buffer = img;
	a->prev = a;
  8052a8:	10800715 	stw	r2,28(r2)
	a->next = a;
  8052ac:	10800815 	stw	r2,32(r2)
	a->end = a;
  8052b0:	10800a15 	stw	r2,40(r2)
	if(start > 0)
  8052b4:	04c0080e 	bge	zero,r19,8052d8 <initImage+0x90>
		a->first = a;
  8052b8:	10800915 	stw	r2,36(r2)
	else
		a->first = NULL;
	return a;
}
  8052bc:	dfc00417 	ldw	ra,16(sp)
  8052c0:	dcc00317 	ldw	r19,12(sp)
  8052c4:	dc800217 	ldw	r18,8(sp)
  8052c8:	dc400117 	ldw	r17,4(sp)
  8052cc:	dc000017 	ldw	r16,0(sp)
  8052d0:	dec00504 	addi	sp,sp,20
  8052d4:	f800283a 	ret
	a->next = a;
	a->end = a;
	if(start > 0)
		a->first = a;
	else
		a->first = NULL;
  8052d8:	10000915 	stw	zero,36(r2)
	return a;
}
  8052dc:	dfc00417 	ldw	ra,16(sp)
  8052e0:	dcc00317 	ldw	r19,12(sp)
  8052e4:	dc800217 	ldw	r18,8(sp)
  8052e8:	dc400117 	ldw	r17,4(sp)
  8052ec:	dc000017 	ldw	r16,0(sp)
  8052f0:	dec00504 	addi	sp,sp,20
  8052f4:	f800283a 	ret

008052f8 <initVGA>:
alt_up_pixel_buffer_dma_dev* pixel_buffer;
alt_up_char_buffer_dev* char_buffer;
/*
* this function clear the screen and set up pixel buffers for graphics
*/
void initVGA() {
  8052f8:	deffff04 	addi	sp,sp,-4
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");
  8052fc:	010020b4 	movhi	r4,130
  805300:	21004904 	addi	r4,r4,292
alt_up_pixel_buffer_dma_dev* pixel_buffer;
alt_up_char_buffer_dev* char_buffer;
/*
* this function clear the screen and set up pixel buffers for graphics
*/
void initVGA() {
  805304:	dfc00015 	stw	ra,0(sp)
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");
  805308:	08191bc0 	call	8191bc <alt_up_pixel_buffer_dma_open_dev>

	//text on screen initialization
	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  80530c:	010020b4 	movhi	r4,130
  805310:	21004f04 	addi	r4,r4,316
/*
* this function clear the screen and set up pixel buffers for graphics
*/
void initVGA() {
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");
  805314:	d0a75b15 	stw	r2,-25236(gp)

	//text on screen initialization
	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  805318:	0818f3c0 	call	818f3c <alt_up_char_buffer_open_dev>
	alt_up_char_buffer_init(char_buffer);
  80531c:	1009883a 	mov	r4,r2
void initVGA() {
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");

	//text on screen initialization
	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  805320:	d0a75a15 	stw	r2,-25240(gp)
	alt_up_char_buffer_init(char_buffer);
  805324:	0818eb80 	call	818eb8 <alt_up_char_buffer_init>
	// they only provide a function to change the background buffer address, so
	// we must set that, and then swap it to the foreground.
	unsigned int pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
	unsigned int pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320*240*2);

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,pixel_buffer_addr1);
  805328:	d1275b17 	ldw	r4,-25236(gp)
  80532c:	01404034 	movhi	r5,256
  805330:	081939c0 	call	81939c <alt_up_pixel_buffer_dma_change_back_buffer_address>
	// Swap background and foreground buffers
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  805334:	d1275b17 	ldw	r4,-25236(gp)
  805338:	08193f40 	call	8193f4 <alt_up_pixel_buffer_dma_swap_buffers>
	// Wait for the swap to complete
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  80533c:	d1275b17 	ldw	r4,-25236(gp)
  805340:	081944c0 	call	81944c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  805344:	103ffd1e 	bne	r2,zero,80533c <initVGA+0x44>

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,pixel_buffer_addr2);
  805348:	d1275b17 	ldw	r4,-25236(gp)
  80534c:	014040b4 	movhi	r5,258
  805350:	29560004 	addi	r5,r5,22528
  805354:	081939c0 	call	81939c <alt_up_pixel_buffer_dma_change_back_buffer_address>
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  805358:	d1275b17 	ldw	r4,-25236(gp)
  80535c:	000b883a 	mov	r5,zero
  805360:	08194800 	call	819480 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
  805364:	d1275b17 	ldw	r4,-25236(gp)
  805368:	01400044 	movi	r5,1
  80536c:	08194800 	call	819480 <alt_up_pixel_buffer_dma_clear_screen>

	//Swap background and foreground buffers
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  805370:	d1275b17 	ldw	r4,-25236(gp)
  805374:	08193f40 	call	8193f4 <alt_up_pixel_buffer_dma_swap_buffers>
	//Wait for the swap to complete
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  805378:	d1275b17 	ldw	r4,-25236(gp)
  80537c:	081944c0 	call	81944c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  805380:	103ffd1e 	bne	r2,zero,805378 <initVGA+0x80>

}
  805384:	dfc00017 	ldw	ra,0(sp)
  805388:	dec00104 	addi	sp,sp,4
  80538c:	f800283a 	ret

00805390 <draw>:
}
/*
 * This function draw the image and set the previous position for the image
 */
void draw(int pos_x, int pos_y, struct Image* this) {
	if(this == NULL || this->buffer == NULL) return;
  805390:	30003526 	beq	r6,zero,805468 <draw+0xd8>
  805394:	30800017 	ldw	r2,0(r6)
  805398:	10003326 	beq	r2,zero,805468 <draw+0xd8>
	if(pos_x < 0 || pos_y < 0 || pos_x + this->width> 320 || pos_y + this->height> 240) {
  80539c:	20000516 	blt	r4,zero,8053b4 <draw+0x24>
  8053a0:	28000416 	blt	r5,zero,8053b4 <draw+0x24>
  8053a4:	33000617 	ldw	r12,24(r6)
  8053a8:	00805004 	movi	r2,320
  8053ac:	2307883a 	add	r3,r4,r12
  8053b0:	10c0030e 	bge	r2,r3,8053c0 <draw+0x30>
		printf("draw image out of boundary\n");
  8053b4:	010020b4 	movhi	r4,130
  8053b8:	21005404 	addi	r4,r4,336
  8053bc:	080c5101 	jmpi	80c510 <puts>
/*
 * This function draw the image and set the previous position for the image
 */
void draw(int pos_x, int pos_y, struct Image* this) {
	if(this == NULL || this->buffer == NULL) return;
	if(pos_x < 0 || pos_y < 0 || pos_x + this->width> 320 || pos_y + this->height> 240) {
  8053c0:	32c00517 	ldw	r11,20(r6)
  8053c4:	00803c04 	movi	r2,240
  8053c8:	2ac7883a 	add	r3,r5,r11
  8053cc:	10fff916 	blt	r2,r3,8053b4 <draw+0x24>
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  8053d0:	30800117 	ldw	r2,4(r6)
	this->prev_y = this->y;
  8053d4:	30c00217 	ldw	r3,8(r6)
	this->x = pos_x;
  8053d8:	31000115 	stw	r4,4(r6)
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  8053dc:	30800315 	stw	r2,12(r6)
	this->prev_y = this->y;
  8053e0:	30c00415 	stw	r3,16(r6)
	this->x = pos_x;
	this->y = pos_y;
  8053e4:	31400215 	stw	r5,8(r6)
		printf("draw image out of boundary\n");
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
  8053e8:	03001f0e 	bge	zero,r12,805468 <draw+0xd8>
  8053ec:	28805024 	muli	r2,r5,320
  8053f0:	001b883a 	mov	r13,zero
  8053f4:	2089883a 	add	r4,r4,r2
		for(j = 0; j < this->height; j++) {
  8053f8:	02c0180e 	bge	zero,r11,80545c <draw+0xcc>
  8053fc:	2013883a 	mov	r9,r4
  805400:	000f883a 	mov	r7,zero
  805404:	00000306 	br	805414 <draw+0x84>
  805408:	39c00044 	addi	r7,r7,1
  80540c:	4a405004 	addi	r9,r9,320
  805410:	3ac0120e 	bge	r7,r11,80545c <draw+0xcc>
			if(*(this->buffer+ j*this->width+i) != BACKGROUND) {
  805414:	3b05383a 	mul	r2,r7,r12
  805418:	30c00017 	ldw	r3,0(r6)
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)<<1, *(this->buffer + j*this->width+i));
  80541c:	4a55883a 	add	r10,r9,r9
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
		for(j = 0; j < this->height; j++) {
			if(*(this->buffer+ j*this->width+i) != BACKGROUND) {
  805420:	1345883a 	add	r2,r2,r13
  805424:	1085883a 	add	r2,r2,r2
  805428:	1085883a 	add	r2,r2,r2
  80542c:	10c5883a 	add	r2,r2,r3
  805430:	12000017 	ldw	r8,0(r2)
  805434:	403ff426 	beq	r8,zero,805408 <draw+0x78>
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)<<1, *(this->buffer + j*this->width+i));
  805438:	d0e75b17 	ldw	r3,-25236(gp)
  80543c:	18800b17 	ldw	r2,44(r3)
  805440:	5085883a 	add	r2,r10,r2
  805444:	1200002d 	sthio	r8,0(r2)
  805448:	32c00517 	ldw	r11,20(r6)
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
		for(j = 0; j < this->height; j++) {
  80544c:	39c00044 	addi	r7,r7,1
  805450:	33000617 	ldw	r12,24(r6)
  805454:	4a405004 	addi	r9,r9,320
  805458:	3affee16 	blt	r7,r11,805414 <draw+0x84>
		printf("draw image out of boundary\n");
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
  80545c:	6b400044 	addi	r13,r13,1
  805460:	21000044 	addi	r4,r4,1
  805464:	6b3fe416 	blt	r13,r12,8053f8 <draw+0x68>
  805468:	f800283a 	ret

0080546c <draw_notransparent>:
			}
		}
	}
}
void draw_notransparent(int pos_x, int pos_y, struct Image* this) {
	if(this == NULL || this->buffer == NULL) return;
  80546c:	30003226 	beq	r6,zero,805538 <draw_notransparent+0xcc>
  805470:	30800017 	ldw	r2,0(r6)
  805474:	10003026 	beq	r2,zero,805538 <draw_notransparent+0xcc>
	if(pos_x < 0 || pos_y < 0 || pos_x + this->width> 320 || pos_y + this->height> 240) {
  805478:	20000516 	blt	r4,zero,805490 <draw_notransparent+0x24>
  80547c:	28000416 	blt	r5,zero,805490 <draw_notransparent+0x24>
  805480:	32800617 	ldw	r10,24(r6)
  805484:	00805004 	movi	r2,320
  805488:	2287883a 	add	r3,r4,r10
  80548c:	10c0030e 	bge	r2,r3,80549c <draw_notransparent+0x30>
		printf("draw image out of boundary\n");
  805490:	010020b4 	movhi	r4,130
  805494:	21005404 	addi	r4,r4,336
  805498:	080c5101 	jmpi	80c510 <puts>
		}
	}
}
void draw_notransparent(int pos_x, int pos_y, struct Image* this) {
	if(this == NULL || this->buffer == NULL) return;
	if(pos_x < 0 || pos_y < 0 || pos_x + this->width> 320 || pos_y + this->height> 240) {
  80549c:	32400517 	ldw	r9,20(r6)
  8054a0:	00803c04 	movi	r2,240
  8054a4:	2a47883a 	add	r3,r5,r9
  8054a8:	10fff916 	blt	r2,r3,805490 <draw_notransparent+0x24>
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  8054ac:	30800117 	ldw	r2,4(r6)
	this->prev_y = this->y;
  8054b0:	30c00217 	ldw	r3,8(r6)
	this->x = pos_x;
  8054b4:	31000115 	stw	r4,4(r6)
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  8054b8:	30800315 	stw	r2,12(r6)
	this->prev_y = this->y;
  8054bc:	30c00415 	stw	r3,16(r6)
	this->x = pos_x;
	this->y = pos_y;
  8054c0:	31400215 	stw	r5,8(r6)
		printf("draw image out of boundary\n");
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
  8054c4:	02801c0e 	bge	zero,r10,805538 <draw_notransparent+0xcc>
  8054c8:	28805024 	muli	r2,r5,320
  8054cc:	0017883a 	mov	r11,zero
  8054d0:	2099883a 	add	r12,r4,r2
		for(j = 0; j < this->height; j++) {
  8054d4:	0240150e 	bge	zero,r9,80552c <draw_notransparent+0xc0>
  8054d8:	6011883a 	mov	r8,r12
  8054dc:	000f883a 	mov	r7,zero
  8054e0:	00000106 	br	8054e8 <draw_notransparent+0x7c>
  8054e4:	32800617 	ldw	r10,24(r6)
			//if(*(this->buffer+ j*this->width+i) != 0) {
			IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)<<1, *(this->buffer + j*this->width+i));
  8054e8:	3a85383a 	mul	r2,r7,r10
  8054ec:	31000017 	ldw	r4,0(r6)
  8054f0:	d0e75b17 	ldw	r3,-25236(gp)
  8054f4:	12c5883a 	add	r2,r2,r11
  8054f8:	1085883a 	add	r2,r2,r2
  8054fc:	1085883a 	add	r2,r2,r2
  805500:	1105883a 	add	r2,r2,r4
  805504:	19000b17 	ldw	r4,44(r3)
  805508:	11400017 	ldw	r5,0(r2)
  80550c:	4207883a 	add	r3,r8,r8
  805510:	1907883a 	add	r3,r3,r4
  805514:	1940002d 	sthio	r5,0(r3)
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
		for(j = 0; j < this->height; j++) {
  805518:	32400517 	ldw	r9,20(r6)
  80551c:	39c00044 	addi	r7,r7,1
  805520:	42005004 	addi	r8,r8,320
  805524:	3a7fef16 	blt	r7,r9,8054e4 <draw_notransparent+0x78>
  805528:	32800617 	ldw	r10,24(r6)
		printf("draw image out of boundary\n");
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
  80552c:	5ac00044 	addi	r11,r11,1
  805530:	63000044 	addi	r12,r12,1
  805534:	5abfe716 	blt	r11,r10,8054d4 <draw_notransparent+0x68>
  805538:	f800283a 	ret

0080553c <loadSDImage>:
* Load bitmap image from SD card.
* file name is required to be upper-case
* return Image struct if success; null otherwise
*/

struct Image* loadSDImage(char* filename) {
  80553c:	defff204 	addi	sp,sp,-56
	int height = 0, width = 0;
	int size = 0, count = 0;
	char bmpId[3];
	int* result = NULL;
	memset(bmpId, 0, 3);
	short int file_pointer = alt_up_sd_card_fopen(filename, false);
  805540:	000b883a 	mov	r5,zero
* Load bitmap image from SD card.
* file name is required to be upper-case
* return Image struct if success; null otherwise
*/

struct Image* loadSDImage(char* filename) {
  805544:	dcc00715 	stw	r19,28(sp)
  805548:	dfc00d15 	stw	ra,52(sp)
  80554c:	df000c15 	stw	fp,48(sp)
  805550:	ddc00b15 	stw	r23,44(sp)
  805554:	dd800a15 	stw	r22,40(sp)
  805558:	dd400915 	stw	r21,36(sp)
  80555c:	dd000815 	stw	r20,32(sp)
  805560:	dc800615 	stw	r18,24(sp)
  805564:	dc400515 	stw	r17,20(sp)
  805568:	dc000415 	stw	r16,16(sp)
	int a, b;
	int height = 0, width = 0;
	int size = 0, count = 0;
	char bmpId[3];
	int* result = NULL;
	memset(bmpId, 0, 3);
  80556c:	d800000d 	sth	zero,0(sp)
  805570:	d8000085 	stb	zero,2(sp)
* Load bitmap image from SD card.
* file name is required to be upper-case
* return Image struct if success; null otherwise
*/

struct Image* loadSDImage(char* filename) {
  805574:	d9000315 	stw	r4,12(sp)
	int height = 0, width = 0;
	int size = 0, count = 0;
	char bmpId[3];
	int* result = NULL;
	memset(bmpId, 0, 3);
	short int file_pointer = alt_up_sd_card_fopen(filename, false);
  805578:	081db140 	call	81db14 <alt_up_sd_card_fopen>
	if(file_pointer < 0) {
  80557c:	14ffffcc 	andi	r19,r2,65535
  805580:	9ce0001c 	xori	r19,r19,32768
  805584:	9ce00004 	addi	r19,r19,-32768
  805588:	98006216 	blt	r19,zero,805714 <loadSDImage+0x1d8>
		alt_up_sd_card_fclose(file_pointer); //close the file
		return NULL;
	}
	//Start reading the bitmap header
	while(bytes < 2) {
		if((bmpId[bytes++] = alt_up_sd_card_read(file_pointer)) < 0) {
  80558c:	9809883a 	mov	r4,r19
  805590:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  805594:	10c03fcc 	andi	r3,r2,255
  805598:	18c0201c 	xori	r3,r3,128
  80559c:	18ffe004 	addi	r3,r3,-128
  8055a0:	d8800005 	stb	r2,0(sp)
  8055a4:	18001716 	blt	r3,zero,805604 <loadSDImage+0xc8>
  8055a8:	9809883a 	mov	r4,r19
  8055ac:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  8055b0:	10c03fcc 	andi	r3,r2,255
  8055b4:	18c0201c 	xori	r3,r3,128
  8055b8:	18ffe004 	addi	r3,r3,-128
  8055bc:	d8800045 	stb	r2,1(sp)
  8055c0:	18001016 	blt	r3,zero,805604 <loadSDImage+0xc8>
			alt_up_sd_card_fclose(file_pointer);
			printf("fail reading %s\n", filename);
			return NULL;
		}
	}
	if(strcmp(bmpId, "BM") != 0) {
  8055c4:	d809883a 	mov	r4,sp
  8055c8:	014020b4 	movhi	r5,130
  8055cc:	29406004 	addi	r5,r5,384
  8055d0:	080cd080 	call	80cd08 <strcmp>
  8055d4:	1000dc1e 	bne	r2,zero,805948 <loadSDImage+0x40c>
		alt_up_sd_card_fclose(file_pointer);
		printf("fail reading %s at ID %s\n", filename, bmpId);
		return NULL;
  8055d8:	04000084 	movi	r16,2
  8055dc:	04400284 	movi	r17,10
  8055e0:	00000106 	br	8055e8 <loadSDImage+0xac>
	}
	short int temp;
	while(bytes < 10) {
  8055e4:	84401a26 	beq	r16,r17,805650 <loadSDImage+0x114>
		if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
  8055e8:	9809883a 	mov	r4,r19
  8055ec:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  8055f0:	10bfffcc 	andi	r2,r2,65535
  8055f4:	10a0001c 	xori	r2,r2,32768
  8055f8:	10a00004 	addi	r2,r2,-32768
			alt_up_sd_card_fclose(file_pointer);
			printf("fail reading %s\n", filename);
			return NULL;
		}
		bytes++;
  8055fc:	84000044 	addi	r16,r16,1
		printf("fail reading %s at ID %s\n", filename, bmpId);
		return NULL;
	}
	short int temp;
	while(bytes < 10) {
		if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
  805600:	103ff80e 	bge	r2,zero,8055e4 <loadSDImage+0xa8>
			alt_up_sd_card_fclose(file_pointer);
  805604:	9809883a 	mov	r4,r19
  805608:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
			printf("fail reading %s\n", filename);
  80560c:	d9400317 	ldw	r5,12(sp)
  805610:	010020b4 	movhi	r4,130
  805614:	21005b04 	addi	r4,r4,364
  805618:	080c3f80 	call	80c3f8 <printf>
  80561c:	0005883a 	mov	r2,zero
			*(result + j*(width)+i) = byte;
		}
	}
	alt_up_sd_card_fclose(file_pointer);
	return initImage(result, 0, width, height);
}
  805620:	dfc00d17 	ldw	ra,52(sp)
  805624:	df000c17 	ldw	fp,48(sp)
  805628:	ddc00b17 	ldw	r23,44(sp)
  80562c:	dd800a17 	ldw	r22,40(sp)
  805630:	dd400917 	ldw	r21,36(sp)
  805634:	dd000817 	ldw	r20,32(sp)
  805638:	dcc00717 	ldw	r19,28(sp)
  80563c:	dc800617 	ldw	r18,24(sp)
  805640:	dc400517 	ldw	r17,20(sp)
  805644:	dc000417 	ldw	r16,16(sp)
  805648:	dec00e04 	addi	sp,sp,56
  80564c:	f800283a 	ret
			return NULL;
		}
		bytes++;
	}

	if((offset = alt_up_sd_card_read(file_pointer))< 0) {
  805650:	9809883a 	mov	r4,r19
  805654:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  805658:	153fffcc 	andi	r20,r2,65535
  80565c:	a520001c 	xori	r20,r20,32768
  805660:	a5200004 	addi	r20,r20,-32768
  805664:	a0002b16 	blt	r20,zero,805714 <loadSDImage+0x1d8>
		alt_up_sd_card_fclose(file_pointer);
		return NULL;
	} printf("offset: %x\n", offset);
  805668:	010020b4 	movhi	r4,130
  80566c:	21006804 	addi	r4,r4,416
  805670:	a00b883a 	mov	r5,r20
  805674:	080c3f80 	call	80c3f8 <printf>
	bytes++;
	while(bytes < offset){
  805678:	008002c4 	movi	r2,11
  80567c:	1500bb0e 	bge	r2,r20,80596c <loadSDImage+0x430>
  805680:	1023883a 	mov	r17,r2
  805684:	0039883a 	mov	fp,zero
  805688:	002f883a 	mov	r23,zero
  80568c:	002b883a 	mov	r21,zero
  805690:	04bfea04 	movi	r18,-88
  805694:	05800044 	movi	r22,1
  805698:	d8000215 	stw	zero,8(sp)
  80569c:	d8000115 	stw	zero,4(sp)
  8056a0:	00000f06 	br	8056e0 <loadSDImage+0x1a4>
				return NULL;
			} height += (int)temp << (bytes-22)*8 ;
			if(bytes == 22)
				printf("height: %d\n", height);
		} else if(bytes == 34 || bytes == 35 || bytes == 36 || bytes == 37) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
  8056a4:	9809883a 	mov	r4,r19
  8056a8:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  8056ac:	10ffffcc 	andi	r3,r2,65535
  8056b0:	18e0001c 	xori	r3,r3,32768
  8056b4:	18e00004 	addi	r3,r3,-32768
  8056b8:	18001616 	blt	r3,zero,805714 <loadSDImage+0x1d8>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}  size += (int)(temp << 8*(count++));
  8056bc:	a80490fa 	slli	r2,r21,3
  8056c0:	ad400044 	addi	r21,r21,1
  8056c4:	1884983a 	sll	r2,r3,r2
			if(bytes == 37) {
  8056c8:	00c00944 	movi	r3,37
				printf("height: %d\n", height);
		} else if(bytes == 34 || bytes == 35 || bytes == 36 || bytes == 37) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}  size += (int)(temp << 8*(count++));
  8056cc:	b8af883a 	add	r23,r23,r2
			if(bytes == 37) {
  8056d0:	88c08126 	beq	r17,r3,8058d8 <loadSDImage+0x39c>
			}
		} else if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
			alt_up_sd_card_fclose(file_pointer);
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
  8056d4:	8c400044 	addi	r17,r17,1
  8056d8:	94800204 	addi	r18,r18,8
	if((offset = alt_up_sd_card_read(file_pointer))< 0) {
		alt_up_sd_card_fclose(file_pointer);
		return NULL;
	} printf("offset: %x\n", offset);
	bytes++;
	while(bytes < offset){
  8056dc:	8d00250e 	bge	r17,r20,805774 <loadSDImage+0x238>
		if(bytes == 18 || bytes == 19) {
  8056e0:	88bffb84 	addi	r2,r17,-18
  8056e4:	b0800f2e 	bgeu	r22,r2,805724 <loadSDImage+0x1e8>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} width += (int)temp << (bytes-18)*8 ;
			if(bytes == 19)
				printf("width: %d, ", width);
		} else if(bytes == 22 || bytes == 23) {
  8056e8:	88bffa84 	addi	r2,r17,-22
  8056ec:	b0806b2e 	bgeu	r22,r2,80589c <loadSDImage+0x360>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} height += (int)temp << (bytes-22)*8 ;
			if(bytes == 22)
				printf("height: %d\n", height);
		} else if(bytes == 34 || bytes == 35 || bytes == 36 || bytes == 37) {
  8056f0:	88fff784 	addi	r3,r17,-34
  8056f4:	008000c4 	movi	r2,3
  8056f8:	10ffea2e 	bgeu	r2,r3,8056a4 <loadSDImage+0x168>
			}  size += (int)(temp << 8*(count++));
			if(bytes == 37) {
				printf("data size: %d\n", size/2);
				result = (int*)malloc(sizeof(int)*(size/2));
			}
		} else if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
  8056fc:	9809883a 	mov	r4,r19
  805700:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  805704:	10bfffcc 	andi	r2,r2,65535
  805708:	10a0001c 	xori	r2,r2,32768
  80570c:	10a00004 	addi	r2,r2,-32768
  805710:	103ff00e 	bge	r2,zero,8056d4 <loadSDImage+0x198>
			alt_up_sd_card_fclose(file_pointer);
  805714:	9809883a 	mov	r4,r19
  805718:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  80571c:	0005883a 	mov	r2,zero
  805720:	003fbf06 	br	805620 <loadSDImage+0xe4>
		return NULL;
	} printf("offset: %x\n", offset);
	bytes++;
	while(bytes < offset){
		if(bytes == 18 || bytes == 19) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
  805724:	9809883a 	mov	r4,r19
  805728:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  80572c:	10ffffcc 	andi	r3,r2,65535
  805730:	18e0001c 	xori	r3,r3,32768
  805734:	18e00004 	addi	r3,r3,-32768
  805738:	183ff616 	blt	r3,zero,805714 <loadSDImage+0x1d8>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} width += (int)temp << (bytes-18)*8 ;
  80573c:	90800804 	addi	r2,r18,32
  805740:	1884983a 	sll	r2,r3,r2
  805744:	d8c00217 	ldw	r3,8(sp)
  805748:	1887883a 	add	r3,r3,r2
  80574c:	d8c00215 	stw	r3,8(sp)
			if(bytes == 19)
  805750:	00c004c4 	movi	r3,19
  805754:	88ffdf1e 	bne	r17,r3,8056d4 <loadSDImage+0x198>
				printf("width: %d, ", width);
  805758:	d9400217 	ldw	r5,8(sp)
  80575c:	010020b4 	movhi	r4,130
  805760:	21006b04 	addi	r4,r4,428
			}
		} else if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
			alt_up_sd_card_fclose(file_pointer);
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
  805764:	8c400044 	addi	r17,r17,1
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} width += (int)temp << (bytes-18)*8 ;
			if(bytes == 19)
				printf("width: %d, ", width);
  805768:	080c3f80 	call	80c3f8 <printf>
			}
		} else if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
			alt_up_sd_card_fclose(file_pointer);
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
  80576c:	94800204 	addi	r18,r18,8
	if((offset = alt_up_sd_card_read(file_pointer))< 0) {
		alt_up_sd_card_fclose(file_pointer);
		return NULL;
	} printf("offset: %x\n", offset);
	bytes++;
	while(bytes < offset){
  805770:	8d3fdb16 	blt	r17,r20,8056e0 <loadSDImage+0x1a4>
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
  805774:	e5bfffc4 	addi	r22,fp,-1
  805778:	b0003116 	blt	r22,zero,805840 <loadSDImage+0x304>
  80577c:	b804d7fa 	srli	r2,r23,31
  805780:	15c5883a 	add	r2,r2,r23
  805784:	1009d07a 	srai	r4,r2,1
  805788:	008003c4 	movi	r2,15
  80578c:	2706b03a 	or	r3,r4,fp
  805790:	10c06936 	bltu	r2,r3,805938 <loadSDImage+0x3fc>
  805794:	2004913a 	slli	r2,r4,4
  805798:	00c020b4 	movhi	r3,130
  80579c:	18c33304 	addi	r3,r3,3276
  8057a0:	1704b03a 	or	r2,r2,fp
  8057a4:	10c5883a 	add	r2,r2,r3
  8057a8:	15000003 	ldbu	r20,0(r2)
  8057ac:	d8c00217 	ldw	r3,8(sp)
  8057b0:	e705883a 	add	r2,fp,fp
  8057b4:	1085883a 	add	r2,r2,r2
  8057b8:	10bfff04 	addi	r2,r2,-4
  8057bc:	10c5383a 	mul	r2,r2,r3
  8057c0:	1dffff24 	muli	r23,r3,-4
  8057c4:	d8c00117 	ldw	r3,4(sp)
  8057c8:	10eb883a 	add	r21,r2,r3
  8057cc:	a823883a 	mov	r17,r21
  8057d0:	0025883a 	mov	r18,zero
  8057d4:	00001406 	br	805828 <loadSDImage+0x2ec>
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
  8057d8:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
			b = alt_up_sd_card_read(file_pointer);
  8057dc:	9809883a 	mov	r4,r19
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
  8057e0:	143fffcc 	andi	r16,r2,65535
			b = alt_up_sd_card_read(file_pointer);
  8057e4:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  8057e8:	113fffcc 	andi	r4,r2,65535
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
  8057ec:	8420001c 	xori	r16,r16,32768
			b = alt_up_sd_card_read(file_pointer);
  8057f0:	2120001c 	xori	r4,r4,32768
  8057f4:	21200004 	addi	r4,r4,-32768
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
  8057f8:	84200004 	addi	r16,r16,-32768

int getColor(int red, int green, int blue) {
	return (int)(((red>>3)<<11) + ((green>>2)<<5) + (blue>>3));
}
int getColor555(int color555) {
	int color = color555&0x7FFF;
  8057fc:	2004923a 	slli	r2,r4,8
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
			b = alt_up_sd_card_read(file_pointer);
			if(a < 0 || b < 0) {
  805800:	80004116 	blt	r16,zero,805908 <loadSDImage+0x3cc>

int getColor(int red, int green, int blue) {
	return (int)(((red>>3)<<11) + ((green>>2)<<5) + (blue>>3));
}
int getColor555(int color555) {
	int color = color555&0x7FFF;
  805804:	8087883a 	add	r3,r16,r2
				result = NULL;
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}
			byte = getColor555(b*256+a);
			*(result + j*(width)+i) = byte;
  805808:	189ff80c 	andi	r2,r3,32736
  80580c:	1085883a 	add	r2,r2,r2
  805810:	18c007cc 	andi	r3,r3,31
  805814:	10c5883a 	add	r2,r2,r3
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
			b = alt_up_sd_card_read(file_pointer);
  805818:	8c400104 	addi	r17,r17,4
			if(a < 0 || b < 0) {
  80581c:	20003a16 	blt	r4,zero,805908 <loadSDImage+0x3cc>
				result = NULL;
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}
			byte = getColor555(b*256+a);
			*(result + j*(width)+i) = byte;
  805820:	88bfff15 	stw	r2,-4(r17)
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
  805824:	94800044 	addi	r18,r18,1
			a = alt_up_sd_card_read(file_pointer);
  805828:	9809883a 	mov	r4,r19
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
  80582c:	953fea16 	blt	r18,r20,8057d8 <loadSDImage+0x29c>
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
  805830:	b5bfffc4 	addi	r22,r22,-1
  805834:	00bfffc4 	movi	r2,-1
  805838:	adeb883a 	add	r21,r21,r23
  80583c:	b0bfe31e 	bne	r22,r2,8057cc <loadSDImage+0x290>
			}
			byte = getColor555(b*256+a);
			*(result + j*(width)+i) = byte;
		}
	}
	alt_up_sd_card_fclose(file_pointer);
  805840:	9809883a 	mov	r4,r19
  805844:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  805848:	00000106 	br	805850 <loadSDImage+0x314>
 * Constructor of Animation; start == 1 if this animation contains the first image
 * in the sequence;
 */
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
  80584c:	080c5100 	call	80c510 <puts>
  805850:	01000b04 	movi	r4,44
  805854:	080bb6c0 	call	80bb6c <malloc>
  805858:	010020b4 	movhi	r4,130
  80585c:	21004004 	addi	r4,r4,256
  805860:	103ffa26 	beq	r2,zero,80584c <loadSDImage+0x310>
	a->width = width;
  805864:	d8c00217 	ldw	r3,8(sp)
	a->height = height;
  805868:	17000515 	stw	fp,20(r2)
	a->x = a->y = a->prev_x = a->prev_y = 0;
  80586c:	10000415 	stw	zero,16(r2)
 * in the sequence;
 */
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
	a->width = width;
  805870:	10c00615 	stw	r3,24(r2)
	a->height = height;
	a->x = a->y = a->prev_x = a->prev_y = 0;
	a->buffer = img;
  805874:	d8c00117 	ldw	r3,4(sp)
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
	a->width = width;
	a->height = height;
	a->x = a->y = a->prev_x = a->prev_y = 0;
  805878:	10000315 	stw	zero,12(r2)
  80587c:	10000215 	stw	zero,8(r2)
	a->buffer = img;
  805880:	10c00015 	stw	r3,0(r2)
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
	a->width = width;
	a->height = height;
	a->x = a->y = a->prev_x = a->prev_y = 0;
  805884:	10000115 	stw	zero,4(r2)
	a->buffer = img;
	a->prev = a;
  805888:	10800715 	stw	r2,28(r2)
	a->next = a;
  80588c:	10800815 	stw	r2,32(r2)
	a->end = a;
  805890:	10800a15 	stw	r2,40(r2)
	if(start > 0)
		a->first = a;
	else
		a->first = NULL;
  805894:	10000915 	stw	zero,36(r2)
  805898:	003f6106 	br	805620 <loadSDImage+0xe4>
				return NULL;
			} width += (int)temp << (bytes-18)*8 ;
			if(bytes == 19)
				printf("width: %d, ", width);
		} else if(bytes == 22 || bytes == 23) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
  80589c:	9809883a 	mov	r4,r19
  8058a0:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  8058a4:	10bfffcc 	andi	r2,r2,65535
  8058a8:	10a0001c 	xori	r2,r2,32768
  8058ac:	10a00004 	addi	r2,r2,-32768
  8058b0:	103f9816 	blt	r2,zero,805714 <loadSDImage+0x1d8>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} height += (int)temp << (bytes-22)*8 ;
  8058b4:	1484983a 	sll	r2,r2,r18
			if(bytes == 22)
  8058b8:	00c00584 	movi	r3,22
				printf("width: %d, ", width);
		} else if(bytes == 22 || bytes == 23) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} height += (int)temp << (bytes-22)*8 ;
  8058bc:	e0b9883a 	add	fp,fp,r2
			if(bytes == 22)
  8058c0:	88ff841e 	bne	r17,r3,8056d4 <loadSDImage+0x198>
				printf("height: %d\n", height);
  8058c4:	010020b4 	movhi	r4,130
  8058c8:	21006e04 	addi	r4,r4,440
  8058cc:	e00b883a 	mov	r5,fp
  8058d0:	080c3f80 	call	80c3f8 <printf>
  8058d4:	003f7f06 	br	8056d4 <loadSDImage+0x198>
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}  size += (int)(temp << 8*(count++));
			if(bytes == 37) {
				printf("data size: %d\n", size/2);
  8058d8:	b820d7fa 	srli	r16,r23,31
  8058dc:	010020b4 	movhi	r4,130
  8058e0:	21007104 	addi	r4,r4,452
  8058e4:	85e1883a 	add	r16,r16,r23
  8058e8:	8021d07a 	srai	r16,r16,1
  8058ec:	800b883a 	mov	r5,r16
				result = (int*)malloc(sizeof(int)*(size/2));
  8058f0:	8421883a 	add	r16,r16,r16
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}  size += (int)(temp << 8*(count++));
			if(bytes == 37) {
				printf("data size: %d\n", size/2);
  8058f4:	080c3f80 	call	80c3f8 <printf>
				result = (int*)malloc(sizeof(int)*(size/2));
  8058f8:	8409883a 	add	r4,r16,r16
  8058fc:	080bb6c0 	call	80bb6c <malloc>
  805900:	d8800115 	stw	r2,4(sp)
  805904:	003f7306 	br	8056d4 <loadSDImage+0x198>
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
			b = alt_up_sd_card_read(file_pointer);
			if(a < 0 || b < 0) {
				printf("%s invalid at pixel[%d, %d]!\n", filename, i, j);
  805908:	d9400317 	ldw	r5,12(sp)
  80590c:	900d883a 	mov	r6,r18
  805910:	b00f883a 	mov	r7,r22
  805914:	010020b4 	movhi	r4,130
  805918:	21007504 	addi	r4,r4,468
  80591c:	080c3f80 	call	80c3f8 <printf>
				free(result);
  805920:	d9000117 	ldw	r4,4(sp)
  805924:	080bb580 	call	80bb58 <free>
				result = NULL;
				alt_up_sd_card_fclose(file_pointer);
  805928:	9809883a 	mov	r4,r19
  80592c:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  805930:	0005883a 	mov	r2,zero
  805934:	003f3a06 	br	805620 <loadSDImage+0xe4>
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
  805938:	e00b883a 	mov	r5,fp
  80593c:	080b2100 	call	80b210 <__divsi3>
  805940:	1029883a 	mov	r20,r2
  805944:	003f9906 	br	8057ac <loadSDImage+0x270>
			printf("fail reading %s\n", filename);
			return NULL;
		}
	}
	if(strcmp(bmpId, "BM") != 0) {
		alt_up_sd_card_fclose(file_pointer);
  805948:	9809883a 	mov	r4,r19
  80594c:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
		printf("fail reading %s at ID %s\n", filename, bmpId);
  805950:	d9400317 	ldw	r5,12(sp)
  805954:	010020b4 	movhi	r4,130
  805958:	21006104 	addi	r4,r4,388
  80595c:	d80d883a 	mov	r6,sp
  805960:	080c3f80 	call	80c3f8 <printf>
  805964:	0005883a 	mov	r2,zero
  805968:	003f2d06 	br	805620 <loadSDImage+0xe4>
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
  80596c:	0039883a 	mov	fp,zero
  805970:	d8000215 	stw	zero,8(sp)
  805974:	d8000115 	stw	zero,4(sp)
  805978:	003fb106 	br	805840 <loadSDImage+0x304>

0080597c <drawVerticalLine>:
}

void drawVerticalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
  80597c:	20c00044 	addi	r3,r4,1
	y2 = y+1;
	while (i <= length){
  805980:	30001416 	blt	r6,zero,8059d4 <drawVerticalLine+0x58>
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  805984:	28805024 	muli	r2,r5,320
  805988:	1907c83a 	sub	r3,r3,r4
  80598c:	1a800050 	cmplti	r10,r3,1
  805990:	2085883a 	add	r2,r4,r2
  805994:	1093883a 	add	r9,r2,r2
  805998:	0011883a 	mov	r8,zero
  80599c:	20000a16 	blt	r4,zero,8059c8 <drawVerticalLine+0x4c>
  8059a0:	29000044 	addi	r4,r5,1
	this->x = pos_x;
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
  8059a4:	28000316 	blt	r5,zero,8059b4 <drawVerticalLine+0x38>
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  8059a8:	2145c83a 	sub	r2,r4,r5
		for(i = 0; i < w; i++) {
  8059ac:	5000011e 	bne	r10,zero,8059b4 <drawVerticalLine+0x38>
		    for(j = 0; j < h; j++) {
  8059b0:	00800916 	blt	zero,r2,8059d8 <drawVerticalLine+0x5c>
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
		drawBox(x, y, x2, y2, color);
		y++;
  8059b4:	200b883a 	mov	r5,r4
		    	/*if(mouse != NULL) {
		    		dx = x-mouse->super->x; dy = y-mouse->super->y;
		    		if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
		    			*(mouse->overlapImg+dy*10 + dx) = color;
		    	}*/
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  8059b8:	4a40a004 	addi	r9,r9,640
void drawVerticalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
  8059bc:	41800526 	beq	r8,r6,8059d4 <drawVerticalLine+0x58>
		drawBox(x, y, x2, y2, color);
		y++;
  8059c0:	42000044 	addi	r8,r8,1
  8059c4:	003ff606 	br	8059a0 <drawVerticalLine+0x24>
void drawVerticalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
  8059c8:	41800226 	beq	r8,r6,8059d4 <drawVerticalLine+0x58>
		drawBox(x, y, x2, y2, color);
		y++;
  8059cc:	42000044 	addi	r8,r8,1
void drawVerticalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
  8059d0:	41bffe1e 	bne	r8,r6,8059cc <drawVerticalLine+0x50>
  8059d4:	f800283a 	ret
		    	/*if(mouse != NULL) {
		    		dx = x-mouse->super->x; dy = y-mouse->super->y;
		    		if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
		    			*(mouse->overlapImg+dy*10 + dx) = color;
		    	}*/
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  8059d8:	d0e75b17 	ldw	r3,-25236(gp)
  8059dc:	18800b17 	ldw	r2,44(r3)
  8059e0:	4885883a 	add	r2,r9,r2
  8059e4:	11c0002d 	sthio	r7,0(r2)
  8059e8:	003ff206 	br	8059b4 <drawVerticalLine+0x38>

008059ec <drawHorizontalLine>:

void drawHorizontalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
  8059ec:	28c00044 	addi	r3,r5,1
	while (i <= length){
  8059f0:	30001616 	blt	r6,zero,805a4c <drawHorizontalLine+0x60>
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  8059f4:	28805024 	muli	r2,r5,320
  8059f8:	1947c83a 	sub	r3,r3,r5
  8059fc:	1ac00048 	cmpgei	r11,r3,1
  805a00:	2085883a 	add	r2,r4,r2
  805a04:	280a803a 	cmplt	r5,r5,zero
  805a08:	1091883a 	add	r8,r2,r2
  805a0c:	0015883a 	mov	r10,zero
  805a10:	00000106 	br	805a18 <drawHorizontalLine+0x2c>
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
		drawBox(x, y, x2, y2, color);
		x++;
  805a14:	52800044 	addi	r10,r10,1
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  805a18:	22400044 	addi	r9,r4,1
	this->x = pos_x;
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
  805a1c:	20000816 	blt	r4,zero,805a40 <drawHorizontalLine+0x54>
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
		for(i = 0; i < w; i++) {
  805a20:	4905c83a 	sub	r2,r9,r4
	this->x = pos_x;
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
  805a24:	2800061e 	bne	r5,zero,805a40 <drawHorizontalLine+0x54>
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
		for(i = 0; i < w; i++) {
  805a28:	0080050e 	bge	zero,r2,805a40 <drawHorizontalLine+0x54>
		    for(j = 0; j < h; j++) {
  805a2c:	58000426 	beq	r11,zero,805a40 <drawHorizontalLine+0x54>
		    	/*if(mouse != NULL) {
		    		dx = x-mouse->super->x; dy = y-mouse->super->y;
		    		if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
		    			*(mouse->overlapImg+dy*10 + dx) = color;
		    	}*/
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  805a30:	d0e75b17 	ldw	r3,-25236(gp)
  805a34:	18800b17 	ldw	r2,44(r3)
  805a38:	4085883a 	add	r2,r8,r2
  805a3c:	11c0002d 	sthio	r7,0(r2)
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
		drawBox(x, y, x2, y2, color);
		x++;
  805a40:	4809883a 	mov	r4,r9

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
		for(i = 0; i < w; i++) {
		    for(j = 0; j < h; j++) {
  805a44:	42000084 	addi	r8,r8,2
void drawHorizontalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
  805a48:	51bff21e 	bne	r10,r6,805a14 <drawHorizontalLine+0x28>
  805a4c:	f800283a 	ret

00805a50 <killImage>:
}

/*
 * Destructor;
 */
void killImage(struct Image* this) {
  805a50:	defffb04 	addi	sp,sp,-20
  805a54:	dc400115 	stw	r17,4(sp)
  805a58:	dfc00415 	stw	ra,16(sp)
  805a5c:	dcc00315 	stw	r19,12(sp)
  805a60:	dc800215 	stw	r18,8(sp)
  805a64:	dc000015 	stw	r16,0(sp)
  805a68:	2023883a 	mov	r17,r4
	if(this == NULL) return;
  805a6c:	20004226 	beq	r4,zero,805b78 <killImage+0x128>
	if(this->prev != NULL) {
  805a70:	20800717 	ldw	r2,28(r4)
  805a74:	10000126 	beq	r2,zero,805a7c <killImage+0x2c>
		this->prev = NULL;
  805a78:	20000715 	stw	zero,28(r4)
	}
	free(this->buffer);
  805a7c:	89000017 	ldw	r4,0(r17)
  805a80:	080bb580 	call	80bb58 <free>
	this->buffer = NULL;
	if(this->end != this)
  805a84:	88800a17 	ldw	r2,40(r17)
	if(this == NULL) return;
	if(this->prev != NULL) {
		this->prev = NULL;
	}
	free(this->buffer);
	this->buffer = NULL;
  805a88:	88000015 	stw	zero,0(r17)
	if(this->end != this)
  805a8c:	88802f26 	beq	r17,r2,805b4c <killImage+0xfc>
		killImage(this->next);
  805a90:	8c800817 	ldw	r18,32(r17)

/*
 * Destructor;
 */
void killImage(struct Image* this) {
	if(this == NULL) return;
  805a94:	90002d26 	beq	r18,zero,805b4c <killImage+0xfc>
	if(this->prev != NULL) {
  805a98:	90800717 	ldw	r2,28(r18)
  805a9c:	10000126 	beq	r2,zero,805aa4 <killImage+0x54>
		this->prev = NULL;
  805aa0:	90000715 	stw	zero,28(r18)
	}
	free(this->buffer);
  805aa4:	91000017 	ldw	r4,0(r18)
  805aa8:	080bb580 	call	80bb58 <free>
	this->buffer = NULL;
	if(this->end != this)
  805aac:	90800a17 	ldw	r2,40(r18)
	if(this == NULL) return;
	if(this->prev != NULL) {
		this->prev = NULL;
	}
	free(this->buffer);
	this->buffer = NULL;
  805ab0:	90000015 	stw	zero,0(r18)
	if(this->end != this)
  805ab4:	90802026 	beq	r18,r2,805b38 <killImage+0xe8>
		killImage(this->next);
  805ab8:	94c00817 	ldw	r19,32(r18)

/*
 * Destructor;
 */
void killImage(struct Image* this) {
	if(this == NULL) return;
  805abc:	98001e26 	beq	r19,zero,805b38 <killImage+0xe8>
	if(this->prev != NULL) {
  805ac0:	98800717 	ldw	r2,28(r19)
  805ac4:	10000126 	beq	r2,zero,805acc <killImage+0x7c>
		this->prev = NULL;
  805ac8:	98000715 	stw	zero,28(r19)
	}
	free(this->buffer);
  805acc:	99000017 	ldw	r4,0(r19)
  805ad0:	080bb580 	call	80bb58 <free>
	this->buffer = NULL;
	if(this->end != this)
  805ad4:	98800a17 	ldw	r2,40(r19)
	if(this == NULL) return;
	if(this->prev != NULL) {
		this->prev = NULL;
	}
	free(this->buffer);
	this->buffer = NULL;
  805ad8:	98000015 	stw	zero,0(r19)
	if(this->end != this)
  805adc:	98801126 	beq	r19,r2,805b24 <killImage+0xd4>
		killImage(this->next);
  805ae0:	9c000817 	ldw	r16,32(r19)

/*
 * Destructor;
 */
void killImage(struct Image* this) {
	if(this == NULL) return;
  805ae4:	80000f26 	beq	r16,zero,805b24 <killImage+0xd4>
	if(this->prev != NULL) {
  805ae8:	80800717 	ldw	r2,28(r16)
  805aec:	10000126 	beq	r2,zero,805af4 <killImage+0xa4>
		this->prev = NULL;
  805af0:	80000715 	stw	zero,28(r16)
	}
	free(this->buffer);
  805af4:	81000017 	ldw	r4,0(r16)
  805af8:	080bb580 	call	80bb58 <free>
	this->buffer = NULL;
	if(this->end != this)
  805afc:	80800a17 	ldw	r2,40(r16)
	if(this == NULL) return;
	if(this->prev != NULL) {
		this->prev = NULL;
	}
	free(this->buffer);
	this->buffer = NULL;
  805b00:	80000015 	stw	zero,0(r16)
	if(this->end != this)
  805b04:	80800226 	beq	r16,r2,805b10 <killImage+0xc0>
		killImage(this->next);
  805b08:	81000817 	ldw	r4,32(r16)
  805b0c:	0805a500 	call	805a50 <killImage>

	this->next = NULL;
  805b10:	80000815 	stw	zero,32(r16)
	this->first = NULL;
  805b14:	80000915 	stw	zero,36(r16)
	this->end = NULL;
  805b18:	80000a15 	stw	zero,40(r16)
	free(this);
  805b1c:	8009883a 	mov	r4,r16
  805b20:	080bb580 	call	80bb58 <free>
	free(this->buffer);
	this->buffer = NULL;
	if(this->end != this)
		killImage(this->next);

	this->next = NULL;
  805b24:	98000815 	stw	zero,32(r19)
	this->first = NULL;
  805b28:	98000915 	stw	zero,36(r19)
	this->end = NULL;
  805b2c:	98000a15 	stw	zero,40(r19)
	free(this);
  805b30:	9809883a 	mov	r4,r19
  805b34:	080bb580 	call	80bb58 <free>
	free(this->buffer);
	this->buffer = NULL;
	if(this->end != this)
		killImage(this->next);

	this->next = NULL;
  805b38:	90000815 	stw	zero,32(r18)
	this->first = NULL;
  805b3c:	90000915 	stw	zero,36(r18)
	this->end = NULL;
  805b40:	90000a15 	stw	zero,40(r18)
	free(this);
  805b44:	9009883a 	mov	r4,r18
  805b48:	080bb580 	call	80bb58 <free>
  805b4c:	8809883a 	mov	r4,r17
	free(this->buffer);
	this->buffer = NULL;
	if(this->end != this)
		killImage(this->next);

	this->next = NULL;
  805b50:	88000815 	stw	zero,32(r17)
	this->first = NULL;
  805b54:	88000915 	stw	zero,36(r17)
	this->end = NULL;
  805b58:	88000a15 	stw	zero,40(r17)
	free(this);
	this = NULL;
}
  805b5c:	dfc00417 	ldw	ra,16(sp)
  805b60:	dcc00317 	ldw	r19,12(sp)
  805b64:	dc800217 	ldw	r18,8(sp)
  805b68:	dc400117 	ldw	r17,4(sp)
  805b6c:	dc000017 	ldw	r16,0(sp)
  805b70:	dec00504 	addi	sp,sp,20
		killImage(this->next);

	this->next = NULL;
	this->first = NULL;
	this->end = NULL;
	free(this);
  805b74:	080bb581 	jmpi	80bb58 <free>
	this = NULL;
}
  805b78:	dfc00417 	ldw	ra,16(sp)
  805b7c:	dcc00317 	ldw	r19,12(sp)
  805b80:	dc800217 	ldw	r18,8(sp)
  805b84:	dc400117 	ldw	r17,4(sp)
  805b88:	dc000017 	ldw	r16,0(sp)
  805b8c:	dec00504 	addi	sp,sp,20
  805b90:	f800283a 	ret

00805b94 <audio_ISR>:
			//numWritten += numToWrite;
			updateSoundMixerPosition(numToWrite);

		//}
	}*/
	if(soundMixer->indexSize <= 0) return;
  805b94:	d2275817 	ldw	r8,-25248(gp)
  805b98:	008000b4 	movhi	r2,2
  805b9c:	10b0e204 	addi	r2,r2,-15480
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
  805ba0:	defffd04 	addi	sp,sp,-12
			//numWritten += numToWrite;
			updateSoundMixerPosition(numToWrite);

		//}
	}*/
	if(soundMixer->indexSize <= 0) return;
  805ba4:	4085883a 	add	r2,r8,r2
  805ba8:	10c00017 	ldw	r3,0(r2)
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
  805bac:	dc400115 	stw	r17,4(sp)
			updateSoundMixerPosition(numToWrite);

		//}
	}*/
	if(soundMixer->indexSize <= 0) return;
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
  805bb0:	044000b4 	movhi	r17,2
  805bb4:	8c70e004 	addi	r17,r17,-15488
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
  805bb8:	dc000015 	stw	r16,0(sp)
  805bbc:	dfc00215 	stw	ra,8(sp)
			updateSoundMixerPosition(numToWrite);

		//}
	}*/
	if(soundMixer->indexSize <= 0) return;
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
  805bc0:	01801804 	movi	r6,96
  805bc4:	000f883a 	mov	r7,zero
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
  805bc8:	2021883a 	mov	r16,r4
			updateSoundMixerPosition(numToWrite);

		//}
	}*/
	if(soundMixer->indexSize <= 0) return;
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
  805bcc:	444b883a 	add	r5,r8,r17
			//numWritten += numToWrite;
			updateSoundMixerPosition(numToWrite);

		//}
	}*/
	if(soundMixer->indexSize <= 0) return;
  805bd0:	00c0120e 	bge	zero,r3,805c1c <audio_ISR+0x88>
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
  805bd4:	29400017 	ldw	r5,0(r5)
  805bd8:	29406024 	muli	r5,r5,384
  805bdc:	414b883a 	add	r5,r8,r5
  805be0:	081757c0 	call	81757c <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_RIGHT);
  805be4:	d0e75817 	ldw	r3,-25248(gp)
  805be8:	8009883a 	mov	r4,r16
  805bec:	01801804 	movi	r6,96
  805bf0:	1c45883a 	add	r2,r3,r17
  805bf4:	11400017 	ldw	r5,0(r2)
  805bf8:	01c00044 	movi	r7,1
  805bfc:	29406024 	muli	r5,r5,384
  805c00:	194b883a 	add	r5,r3,r5
  805c04:	081757c0 	call	81757c <alt_up_audio_write_fifo>

	incIndex();
	return;
}
  805c08:	dfc00217 	ldw	ra,8(sp)
  805c0c:	dc400117 	ldw	r17,4(sp)
  805c10:	dc000017 	ldw	r16,0(sp)
  805c14:	dec00304 	addi	sp,sp,12
	}*/
	if(soundMixer->indexSize <= 0) return;
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_RIGHT);

	incIndex();
  805c18:	08096841 	jmpi	809684 <incIndex>
	return;
}
  805c1c:	dfc00217 	ldw	ra,8(sp)
  805c20:	dc400117 	ldw	r17,4(sp)
  805c24:	dc000017 	ldw	r16,0(sp)
  805c28:	dec00304 	addi	sp,sp,12
  805c2c:	f800283a 	ret

00805c30 <push_key_ISR>:
/**
 * The Interrupt service routine for the keys
 * This reads the values of the keys and then calls the registered key listener.
 */
void push_key_ISR(struct PushKeyController* pushKeyController, unsigned int id)
{
  805c30:	defffd04 	addi	sp,sp,-12
  805c34:	dc000015 	stw	r16,0(sp)
  805c38:	dfc00215 	stw	ra,8(sp)
  805c3c:	dc400115 	stw	r17,4(sp)
  805c40:	2021883a 	mov	r16,r4
	pushKeyController->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  805c44:	00804234 	movhi	r2,264
  805c48:	108d1f04 	addi	r2,r2,13436
  805c4c:	10c00037 	ldwio	r3,0(r2)

	if(wasKeyJustPressed(pushKeyController, 0)) {
  805c50:	000b883a 	mov	r5,zero
 * The Interrupt service routine for the keys
 * This reads the values of the keys and then calls the registered key listener.
 */
void push_key_ISR(struct PushKeyController* pushKeyController, unsigned int id)
{
	pushKeyController->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  805c54:	20c00015 	stw	r3,0(r4)

	if(wasKeyJustPressed(pushKeyController, 0)) {
  805c58:	0806c040 	call	806c04 <wasKeyJustPressed>
  805c5c:	10803fcc 	andi	r2,r2,255
  805c60:	10001626 	beq	r2,zero,805cbc <push_key_ISR+0x8c>
		if(db.curr_song_id < db.num_of_songs)
  805c64:	008020b4 	movhi	r2,130
  805c68:	1091e904 	addi	r2,r2,18340
  805c6c:	10c0a717 	ldw	r3,668(r2)
  805c70:	11000017 	ldw	r4,0(r2)
  805c74:	20c00816 	blt	r4,r3,805c98 <push_key_ISR+0x68>
		syncPause(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 3)) {
		syncPlay(db.curr_song_id, 100, 0);
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( KEYS_BASE, 0);
  805c78:	00804234 	movhi	r2,264
  805c7c:	108d1f04 	addi	r2,r2,13436
  805c80:	10000035 	stwio	zero,0(r2)
}
  805c84:	dfc00217 	ldw	ra,8(sp)
  805c88:	dc400117 	ldw	r17,4(sp)
  805c8c:	dc000017 	ldw	r16,0(sp)
  805c90:	dec00304 	addi	sp,sp,12
  805c94:	f800283a 	ret
{
	pushKeyController->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);

	if(wasKeyJustPressed(pushKeyController, 0)) {
		if(db.curr_song_id < db.num_of_songs)
			syncNext(db.curr_song_id);
  805c98:	080189c0 	call	80189c <syncNext>
		syncPause(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 3)) {
		syncPlay(db.curr_song_id, 100, 0);
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( KEYS_BASE, 0);
  805c9c:	00804234 	movhi	r2,264
  805ca0:	108d1f04 	addi	r2,r2,13436
  805ca4:	10000035 	stwio	zero,0(r2)
}
  805ca8:	dfc00217 	ldw	ra,8(sp)
  805cac:	dc400117 	ldw	r17,4(sp)
  805cb0:	dc000017 	ldw	r16,0(sp)
  805cb4:	dec00304 	addi	sp,sp,12
  805cb8:	f800283a 	ret
	pushKeyController->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);

	if(wasKeyJustPressed(pushKeyController, 0)) {
		if(db.curr_song_id < db.num_of_songs)
			syncNext(db.curr_song_id);
	} else if( wasKeyJustPressed(pushKeyController, 1)) {
  805cbc:	04400044 	movi	r17,1
  805cc0:	8009883a 	mov	r4,r16
  805cc4:	880b883a 	mov	r5,r17
  805cc8:	0806c040 	call	806c04 <wasKeyJustPressed>
  805ccc:	10803fcc 	andi	r2,r2,255
  805cd0:	10000d26 	beq	r2,zero,805d08 <push_key_ISR+0xd8>
		if(db.curr_song_id > 1)
  805cd4:	008020b4 	movhi	r2,130
  805cd8:	1091e904 	addi	r2,r2,18340
  805cdc:	11000017 	ldw	r4,0(r2)
  805ce0:	893fe50e 	bge	r17,r4,805c78 <push_key_ISR+0x48>
			syncPrev(db.curr_song_id);
  805ce4:	08019500 	call	801950 <syncPrev>
		syncPause(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 3)) {
		syncPlay(db.curr_song_id, 100, 0);
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( KEYS_BASE, 0);
  805ce8:	00804234 	movhi	r2,264
  805cec:	108d1f04 	addi	r2,r2,13436
  805cf0:	10000035 	stwio	zero,0(r2)
}
  805cf4:	dfc00217 	ldw	ra,8(sp)
  805cf8:	dc400117 	ldw	r17,4(sp)
  805cfc:	dc000017 	ldw	r16,0(sp)
  805d00:	dec00304 	addi	sp,sp,12
  805d04:	f800283a 	ret
		if(db.curr_song_id < db.num_of_songs)
			syncNext(db.curr_song_id);
	} else if( wasKeyJustPressed(pushKeyController, 1)) {
		if(db.curr_song_id > 1)
			syncPrev(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 2)) {
  805d08:	8009883a 	mov	r4,r16
  805d0c:	01400084 	movi	r5,2
  805d10:	0806c040 	call	806c04 <wasKeyJustPressed>
  805d14:	10803fcc 	andi	r2,r2,255
  805d18:	10000c1e 	bne	r2,zero,805d4c <push_key_ISR+0x11c>
		syncPause(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 3)) {
  805d1c:	8009883a 	mov	r4,r16
  805d20:	014000c4 	movi	r5,3
  805d24:	0806c040 	call	806c04 <wasKeyJustPressed>
  805d28:	10803fcc 	andi	r2,r2,255
  805d2c:	103fd226 	beq	r2,zero,805c78 <push_key_ISR+0x48>
		syncPlay(db.curr_song_id, 100, 0);
  805d30:	008020b4 	movhi	r2,130
  805d34:	1091e904 	addi	r2,r2,18340
  805d38:	11000017 	ldw	r4,0(r2)
  805d3c:	01401904 	movi	r5,100
  805d40:	000d883a 	mov	r6,zero
  805d44:	08017ac0 	call	8017ac <syncPlay>
  805d48:	003fcb06 	br	805c78 <push_key_ISR+0x48>
			syncNext(db.curr_song_id);
	} else if( wasKeyJustPressed(pushKeyController, 1)) {
		if(db.curr_song_id > 1)
			syncPrev(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 2)) {
		syncPause(db.curr_song_id);
  805d4c:	008020b4 	movhi	r2,130
  805d50:	1091e904 	addi	r2,r2,18340
  805d54:	11000017 	ldw	r4,0(r2)
  805d58:	08017240 	call	801724 <syncPause>
  805d5c:	003fc606 	br	805c78 <push_key_ISR+0x48>

00805d60 <RS232_ISR>:
	incIndex();
	return;
}

alt_u32 RS232_ISR(void* up_dev) {
	if(queue_lock == 1 || SDIO_lock == 1) return alt_ticks_per_second()/1000;
  805d60:	008020b4 	movhi	r2,130
  805d64:	1091c404 	addi	r2,r2,18192
  805d68:	10c00017 	ldw	r3,0(r2)

	incIndex();
	return;
}

alt_u32 RS232_ISR(void* up_dev) {
  805d6c:	defff904 	addi	sp,sp,-28
	if(queue_lock == 1 || SDIO_lock == 1) return alt_ticks_per_second()/1000;
  805d70:	01400044 	movi	r5,1

	incIndex();
	return;
}

alt_u32 RS232_ISR(void* up_dev) {
  805d74:	dfc00615 	stw	ra,24(sp)
  805d78:	dd400515 	stw	r21,20(sp)
  805d7c:	dd000415 	stw	r20,16(sp)
  805d80:	dcc00315 	stw	r19,12(sp)
  805d84:	dc800215 	stw	r18,8(sp)
  805d88:	dc400115 	stw	r17,4(sp)
  805d8c:	dc000015 	stw	r16,0(sp)
	if(queue_lock == 1 || SDIO_lock == 1) return alt_ticks_per_second()/1000;
  805d90:	19402926 	beq	r3,r5,805e38 <RS232_ISR+0xd8>
  805d94:	d0a75917 	ldw	r2,-25244(gp)
  805d98:	11402726 	beq	r2,r5,805e38 <RS232_ISR+0xd8>
	alt_up_rs232_dev *serial_dev = ((struct alt_up_dev*)up_dev)->RS232_dev;
	unsigned char* cert;
	int i = 0;
	int len = 0;
	switch(*(com.stateMachine)) {
  805d9c:	048020f4 	movhi	r18,131
  805da0:	94bb0504 	addi	r18,r18,-5100
  805da4:	90c01217 	ldw	r3,72(r18)
  805da8:	00800284 	movi	r2,10
	return;
}

alt_u32 RS232_ISR(void* up_dev) {
	if(queue_lock == 1 || SDIO_lock == 1) return alt_ticks_per_second()/1000;
	alt_up_rs232_dev *serial_dev = ((struct alt_up_dev*)up_dev)->RS232_dev;
  805dac:	24000017 	ldw	r16,0(r4)
	unsigned char* cert;
	int i = 0;
	int len = 0;
	switch(*(com.stateMachine)) {
  805db0:	18c00017 	ldw	r3,0(r3)
  805db4:	10c00e2e 	bgeu	r2,r3,805df0 <RS232_ISR+0x90>
		return alt_ticks_per_second()/20;
	default:
		break;
	}

	return alt_ticks_per_second()/20;
  805db8:	008020b4 	movhi	r2,130
  805dbc:	1091d004 	addi	r2,r2,18240
  805dc0:	11000017 	ldw	r4,0(r2)
  805dc4:	01400504 	movi	r5,20
  805dc8:	080b2d00 	call	80b2d0 <__udivsi3>
}
  805dcc:	dfc00617 	ldw	ra,24(sp)
  805dd0:	dd400517 	ldw	r21,20(sp)
  805dd4:	dd000417 	ldw	r20,16(sp)
  805dd8:	dcc00317 	ldw	r19,12(sp)
  805ddc:	dc800217 	ldw	r18,8(sp)
  805de0:	dc400117 	ldw	r17,4(sp)
  805de4:	dc000017 	ldw	r16,0(sp)
  805de8:	dec00704 	addi	sp,sp,28
  805dec:	f800283a 	ret
	if(queue_lock == 1 || SDIO_lock == 1) return alt_ticks_per_second()/1000;
	alt_up_rs232_dev *serial_dev = ((struct alt_up_dev*)up_dev)->RS232_dev;
	unsigned char* cert;
	int i = 0;
	int len = 0;
	switch(*(com.stateMachine)) {
  805df0:	18c5883a 	add	r2,r3,r3
  805df4:	1085883a 	add	r2,r2,r2
  805df8:	00c02034 	movhi	r3,128
  805dfc:	18d78304 	addi	r3,r3,24076
  805e00:	10c5883a 	add	r2,r2,r3
  805e04:	11000017 	ldw	r4,0(r2)
  805e08:	2000683a 	jmp	r4
  805e0c:	00805e50 	cmplti	r2,zero,377
  805e10:	00806088 	cmpgei	r2,zero,386
  805e14:	0080601c 	xori	r2,zero,384
  805e18:	00805fb8 	rdprs	r2,zero,382
  805e1c:	00805f54 	movui	r2,381
  805e20:	00805db8 	rdprs	r2,zero,374
  805e24:	00805db8 	rdprs	r2,zero,374
  805e28:	008060c0 	call	8060c <__alt_mem_sdram-0x77f9f4>
  805e2c:	00806090 	cmplti	r2,zero,386
  805e30:	00805f18 	cmpnei	r2,zero,380
  805e34:	00805eb4 	movhi	r2,378
	incIndex();
	return;
}

alt_u32 RS232_ISR(void* up_dev) {
	if(queue_lock == 1 || SDIO_lock == 1) return alt_ticks_per_second()/1000;
  805e38:	008020b4 	movhi	r2,130
  805e3c:	1091d004 	addi	r2,r2,18240
  805e40:	11000017 	ldw	r4,0(r2)
  805e44:	0140fa04 	movi	r5,1000
  805e48:	080b2d00 	call	80b2d0 <__udivsi3>
  805e4c:	003fdf06 	br	805dcc <RS232_ISR+0x6c>
				setStates(startInit);
		}
		return alt_ticks_per_second()/20;
	case checkClient:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  805e50:	8009883a 	mov	r4,r16
  805e54:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  805e58:	00c00084 	movi	r3,2
  805e5c:	1880900e 	bge	r3,r2,8060a0 <RS232_ISR+0x340>
  805e60:	182b883a 	mov	r21,r3
  805e64:	0023883a 	mov	r17,zero
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  805e68:	8009883a 	mov	r4,r16
  805e6c:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  805e70:	103ffd26 	beq	r2,zero,805e68 <RS232_ISR+0x108>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  805e74:	04c020f4 	movhi	r19,131
  805e78:	9cfb0504 	addi	r19,r19,-5100
  805e7c:	8c8b883a 	add	r5,r17,r18
  805e80:	8009883a 	mov	r4,r16
  805e84:	99800c84 	addi	r6,r19,50
				i++;
  805e88:	8c400044 	addi	r17,r17,1
	case checkClient:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  805e8c:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
				i++;
  805e90:	05000044 	movi	r20,1
			} while(i < 3);
  805e94:	ac7ff40e 	bge	r21,r17,805e68 <RS232_ISR+0x108>
			if(checkAck(com.data) == 1) {
  805e98:	9809883a 	mov	r4,r19
  805e9c:	080751c0 	call	80751c <checkAck>
  805ea0:	1021883a 	mov	r16,r2
  805ea4:	1500dd26 	beq	r2,r20,80621c <RS232_ISR+0x4bc>
			if(checkAck(com.data) == 1) {
				setStates(sendData0);
			} else {
				com.failReceive++;
				if(com.failReceive > 100)
					setStates(sendStates);
  805ea8:	a009883a 	mov	r4,r20
  805eac:	08070bc0 	call	8070bc <setStates>
  805eb0:	003fc106 	br	805db8 <RS232_ISR+0x58>
		cert = NULL;
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case waitStart:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  805eb4:	8009883a 	mov	r4,r16
  805eb8:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  805ebc:	00c00084 	movi	r3,2
  805ec0:	18808b0e 	bge	r3,r2,8060f0 <RS232_ISR+0x390>
  805ec4:	1829883a 	mov	r20,r3
  805ec8:	0023883a 	mov	r17,zero
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  805ecc:	8009883a 	mov	r4,r16
  805ed0:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  805ed4:	103ffd26 	beq	r2,zero,805ecc <RS232_ISR+0x16c>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  805ed8:	04c020f4 	movhi	r19,131
  805edc:	9cfb0504 	addi	r19,r19,-5100
  805ee0:	8c8b883a 	add	r5,r17,r18
  805ee4:	8009883a 	mov	r4,r16
				i++;
  805ee8:	8c400044 	addi	r17,r17,1
	case waitStart:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  805eec:	99800c84 	addi	r6,r19,50
  805ef0:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
				i++;
			} while(i < 3);
  805ef4:	a47ff50e 	bge	r20,r17,805ecc <RS232_ISR+0x16c>
			if(checkStartAck(com.data[0]) == 1) {
  805ef8:	99000003 	ldbu	r4,0(r19)
  805efc:	08075c00 	call	8075c0 <checkStartAck>
  805f00:	1007883a 	mov	r3,r2
  805f04:	00800044 	movi	r2,1
  805f08:	1880c126 	beq	r3,r2,806210 <RS232_ISR+0x4b0>
			} else
				setStates(startInit);
		} else {
			com.failReceive++;
			if(com.failReceive > 10)
				setStates(startInit);
  805f0c:	01000244 	movi	r4,9
  805f10:	08070bc0 	call	8070bc <setStates>
  805f14:	003fa806 	br	805db8 <RS232_ISR+0x58>
	unsigned char* cert;
	int i = 0;
	int len = 0;
	switch(*(com.stateMachine)) {
	case startInit:
		cert = sendStartInit();
  805f18:	08078a80 	call	8078a8 <sendStartInit>
			}
		}
		return alt_ticks_per_second()/20;
	case sendStates:
		cert = sendStats();
		sendRS232(serial_dev, cert, 3);
  805f1c:	8009883a 	mov	r4,r16
  805f20:	100b883a 	mov	r5,r2
  805f24:	018000c4 	movi	r6,3
				reset(serial_dev);
			}
		}
		return alt_ticks_per_second()/20;
	case sendStates:
		cert = sendStats();
  805f28:	1023883a 	mov	r17,r2
		sendRS232(serial_dev, cert, 3);
  805f2c:	08070dc0 	call	8070dc <sendRS232>
		free(cert);
  805f30:	8809883a 	mov	r4,r17
  805f34:	080bb580 	call	80bb58 <free>
		cert = NULL;
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
  805f38:	008020b4 	movhi	r2,130
  805f3c:	1091d004 	addi	r2,r2,18240
  805f40:	11000017 	ldw	r4,0(r2)
  805f44:	01400504 	movi	r5,20
	case sendStates:
		cert = sendStats();
		sendRS232(serial_dev, cert, 3);
		free(cert);
		cert = NULL;
		com.failReceive = 0;
  805f48:	90001715 	stw	zero,92(r18)
		return alt_ticks_per_second()/20;
  805f4c:	080b2d00 	call	80b2d0 <__udivsi3>
  805f50:	003f9e06 	br	805dcc <RS232_ISR+0x6c>
		setStates(waitAck0);
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case waitAck0:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  805f54:	8009883a 	mov	r4,r16
  805f58:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  805f5c:	00c00084 	movi	r3,2
  805f60:	18804f0e 	bge	r3,r2,8060a0 <RS232_ISR+0x340>
  805f64:	1829883a 	mov	r20,r3
  805f68:	0023883a 	mov	r17,zero
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  805f6c:	8009883a 	mov	r4,r16
  805f70:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  805f74:	103ffd26 	beq	r2,zero,805f6c <RS232_ISR+0x20c>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  805f78:	04c020f4 	movhi	r19,131
  805f7c:	9cfb0504 	addi	r19,r19,-5100
  805f80:	8c8b883a 	add	r5,r17,r18
  805f84:	8009883a 	mov	r4,r16
				i++;
  805f88:	8c400044 	addi	r17,r17,1
	case waitAck0:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  805f8c:	99800c84 	addi	r6,r19,50
  805f90:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
				i++;
			} while(i < 3);
  805f94:	a47ff50e 	bge	r20,r17,805f6c <RS232_ISR+0x20c>
			if(checkAck(com.data) == 1) {
  805f98:	9809883a 	mov	r4,r19
  805f9c:	080751c0 	call	80751c <checkAck>
  805fa0:	1021883a 	mov	r16,r2
  805fa4:	00800044 	movi	r2,1
  805fa8:	80808b26 	beq	r16,r2,8061d8 <RS232_ISR+0x478>
					com.index_send_packets = com.num_send_packets = 0;
					setStates(sendStates);
					com.isRdySend = 0;
				}
			} else {
				setStates(sendData0);
  805fac:	010000c4 	movi	r4,3
  805fb0:	08070bc0 	call	8070bc <setStates>
  805fb4:	003f8006 	br	805db8 <RS232_ISR+0x58>
				reset(serial_dev);
			}
		}
		return alt_ticks_per_second()/20;
	case sendData0:
		if(com.packetBuf == NULL) {
  805fb8:	90801017 	ldw	r2,64(r18)
  805fbc:	044020f4 	movhi	r17,131
  805fc0:	8c7b0504 	addi	r17,r17,-5100
  805fc4:	10007526 	beq	r2,zero,80619c <RS232_ISR+0x43c>
			if((com.packetBuf = (struct Packet*)dequeue(com.sendPackets))==NULL) {
				printf("Packet sending fail, queue is empty");
				setStates(sendStates);
				return alt_ticks_per_second()/50;
			}
		} setAck(com.packetBuf, com.host_ack);
  805fc8:	91001017 	ldw	r4,64(r18)
  805fcc:	91401517 	ldw	r5,84(r18)
  805fd0:	08068600 	call	806860 <setAck>

		for(i = 0; i< com.packetBuf->data_size+HEADERSIZE; i++) {
  805fd4:	90c01017 	ldw	r3,64(r18)
  805fd8:	18800117 	ldw	r2,4(r3)
  805fdc:	10800084 	addi	r2,r2,2
  805fe0:	00800b0e 	bge	zero,r2,806010 <RS232_ISR+0x2b0>
  805fe4:	0023883a 	mov	r17,zero
			alt_up_rs232_write_data(serial_dev, com.packetBuf->data[i]);
  805fe8:	18800017 	ldw	r2,0(r3)
  805fec:	8009883a 	mov	r4,r16
  805ff0:	1445883a 	add	r2,r2,r17
  805ff4:	11400003 	ldbu	r5,0(r2)
				setStates(sendStates);
				return alt_ticks_per_second()/50;
			}
		} setAck(com.packetBuf, com.host_ack);

		for(i = 0; i< com.packetBuf->data_size+HEADERSIZE; i++) {
  805ff8:	8c400044 	addi	r17,r17,1
			alt_up_rs232_write_data(serial_dev, com.packetBuf->data[i]);
  805ffc:	0818c980 	call	818c98 <alt_up_rs232_write_data>
				setStates(sendStates);
				return alt_ticks_per_second()/50;
			}
		} setAck(com.packetBuf, com.host_ack);

		for(i = 0; i< com.packetBuf->data_size+HEADERSIZE; i++) {
  806000:	90c01017 	ldw	r3,64(r18)
  806004:	18800117 	ldw	r2,4(r3)
  806008:	10800084 	addi	r2,r2,2
  80600c:	88bff616 	blt	r17,r2,805fe8 <RS232_ISR+0x288>
			alt_up_rs232_write_data(serial_dev, com.packetBuf->data[i]);
		}
		setStates(waitAck0);
  806010:	01000104 	movi	r4,4
  806014:	08070bc0 	call	8070bc <setStates>
  806018:	003fc706 	br	805f38 <RS232_ISR+0x1d8>
			}
		}
		return alt_ticks_per_second()/20;
	case waitClient:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  80601c:	8009883a 	mov	r4,r16
  806020:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  806024:	00c00084 	movi	r3,2
  806028:	18801d0e 	bge	r3,r2,8060a0 <RS232_ISR+0x340>
  80602c:	182b883a 	mov	r21,r3
  806030:	0023883a 	mov	r17,zero
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  806034:	8009883a 	mov	r4,r16
  806038:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  80603c:	103ffd26 	beq	r2,zero,806034 <RS232_ISR+0x2d4>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  806040:	04c020f4 	movhi	r19,131
  806044:	9cfb0504 	addi	r19,r19,-5100
  806048:	8c8b883a 	add	r5,r17,r18
  80604c:	8009883a 	mov	r4,r16
  806050:	99800c84 	addi	r6,r19,50
				i++;
  806054:	8c400044 	addi	r17,r17,1
	case waitClient:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  806058:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
				i++;
  80605c:	05000044 	movi	r20,1
			} while(i < 3);
  806060:	ac7ff40e 	bge	r21,r17,806034 <RS232_ISR+0x2d4>
			if(checkAck(com.data) == 1) {
  806064:	9809883a 	mov	r4,r19
  806068:	080751c0 	call	80751c <checkAck>
  80606c:	153fcf26 	beq	r2,r20,805fac <RS232_ISR+0x24c>
				setStates(sendData0);
			} else {
				com.failReceive++;
  806070:	98801717 	ldw	r2,92(r19)
				if(com.failReceive > 100)
  806074:	00c01904 	movi	r3,100
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				setStates(sendData0);
			} else {
				com.failReceive++;
  806078:	10800044 	addi	r2,r2,1
  80607c:	98801715 	stw	r2,92(r19)
				if(com.failReceive > 100)
  806080:	18bf4d0e 	bge	r3,r2,805db8 <RS232_ISR+0x58>
  806084:	003f8806 	br	805ea8 <RS232_ISR+0x148>
				reset(serial_dev);
			}
		}
		return alt_ticks_per_second()/20;
	case sendStates:
		cert = sendStats();
  806088:	08077680 	call	807768 <sendStats>
  80608c:	003fa306 	br	805f1c <RS232_ISR+0x1bc>
		free(cert);
		cert = NULL;
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case receiveData0:
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) > 2) {
  806090:	8009883a 	mov	r4,r16
  806094:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  806098:	00c00084 	movi	r3,2
  80609c:	18801a16 	blt	r3,r2,806108 <RS232_ISR+0x3a8>
				}
			} else {
				setStates(sendData0);
			}
		} else {
			com.failReceive++;
  8060a0:	90801717 	ldw	r2,92(r18)
			if(com.failReceive > 100) {
  8060a4:	00c01904 	movi	r3,100
				}
			} else {
				setStates(sendData0);
			}
		} else {
			com.failReceive++;
  8060a8:	10800044 	addi	r2,r2,1
  8060ac:	90801715 	stw	r2,92(r18)
			if(com.failReceive > 100) {
  8060b0:	18bf410e 	bge	r3,r2,805db8 <RS232_ISR+0x58>
				reset(serial_dev);
  8060b4:	8009883a 	mov	r4,r16
  8060b8:	08073a80 	call	8073a8 <reset>
  8060bc:	003f3e06 	br	805db8 <RS232_ISR+0x58>
		free(cert);
		cert = NULL;
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case sendAck0:
		cert = sendAck();
  8060c0:	080763c0 	call	80763c <sendAck>
  8060c4:	1023883a 	mov	r17,r2
		sendRS232(serial_dev, cert, 3);
  8060c8:	100b883a 	mov	r5,r2
  8060cc:	8009883a 	mov	r4,r16
  8060d0:	018000c4 	movi	r6,3
  8060d4:	08070dc0 	call	8070dc <sendRS232>
		if(cert[1] != 0)
  8060d8:	88800043 	ldbu	r2,1(r17)
  8060dc:	103f9426 	beq	r2,zero,805f30 <RS232_ISR+0x1d0>
			printf("sth is wrong");
  8060e0:	010020b4 	movhi	r4,130
  8060e4:	21007d04 	addi	r4,r4,500
  8060e8:	080c3f80 	call	80c3f8 <printf>
  8060ec:	003f9006 	br	805f30 <RS232_ISR+0x1d0>
			if(checkStartAck(com.data[0]) == 1) {
				setStates(sendStates);
			} else
				setStates(startInit);
		} else {
			com.failReceive++;
  8060f0:	90801717 	ldw	r2,92(r18)
			if(com.failReceive > 10)
  8060f4:	00c00284 	movi	r3,10
			if(checkStartAck(com.data[0]) == 1) {
				setStates(sendStates);
			} else
				setStates(startInit);
		} else {
			com.failReceive++;
  8060f8:	10800044 	addi	r2,r2,1
  8060fc:	90801715 	stw	r2,92(r18)
			if(com.failReceive > 10)
  806100:	18bf2d0e 	bge	r3,r2,805db8 <RS232_ISR+0x58>
  806104:	003f8106 	br	805f0c <RS232_ISR+0x1ac>
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case receiveData0:
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) > 2) {
			//read first 2 bytes for header information
			alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);
  806108:	014020f4 	movhi	r5,131
  80610c:	297b0504 	addi	r5,r5,-5100
  806110:	29800c84 	addi	r6,r5,50
  806114:	8009883a 	mov	r4,r16
  806118:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
			alt_up_rs232_read_data(serial_dev, &com.data[1], &com.parity);
  80611c:	014020f4 	movhi	r5,131
  806120:	297b0544 	addi	r5,r5,-5099
  806124:	29800c44 	addi	r6,r5,49
  806128:	8009883a 	mov	r4,r16
  80612c:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
			struct Packet* p = readPacketHeader(com.data[0], com.data[1]);
  806130:	91000003 	ldbu	r4,0(r18)
  806134:	91400043 	ldbu	r5,1(r18)
  806138:	0027883a 	mov	r19,zero
  80613c:	08067380 	call	806738 <readPacketHeader>
  806140:	1023883a 	mov	r17,r2
			i = 0;
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  806144:	8009883a 	mov	r4,r16
  806148:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
  80614c:	103ffd26 	beq	r2,zero,806144 <RS232_ISR+0x3e4>
				alt_up_rs232_read_data(serial_dev, &(p->data[i+HEADERSIZE]), &com.parity);
  806150:	89400017 	ldw	r5,0(r17)
  806154:	8009883a 	mov	r4,r16
  806158:	018020f4 	movhi	r6,131
  80615c:	31bb1184 	addi	r6,r6,-5050
  806160:	994b883a 	add	r5,r19,r5
  806164:	29400084 	addi	r5,r5,2
  806168:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
			//	printf("%c", p->data[i+HEADERSIZE]);
				i++;
			} while(p->data_size > i );
  80616c:	88c00117 	ldw	r3,4(r17)
			i = 0;
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &(p->data[i+HEADERSIZE]), &com.parity);
			//	printf("%c", p->data[i+HEADERSIZE]);
				i++;
  806170:	9cc00044 	addi	r19,r19,1
			} while(p->data_size > i );
  806174:	98fff316 	blt	r19,r3,806144 <RS232_ISR+0x3e4>
			//printf("\n");
			enqueue(com.receivePackets, (void*)p);
  806178:	91000e17 	ldw	r4,56(r18)
  80617c:	880b883a 	mov	r5,r17
  806180:	0806cc40 	call	806cc4 <enqueue>
			com.index_packets++;
  806184:	90801917 	ldw	r2,100(r18)
			setStates(sendAck0);
  806188:	010001c4 	movi	r4,7
			//	printf("%c", p->data[i+HEADERSIZE]);
				i++;
			} while(p->data_size > i );
			//printf("\n");
			enqueue(com.receivePackets, (void*)p);
			com.index_packets++;
  80618c:	10800044 	addi	r2,r2,1
  806190:	90801915 	stw	r2,100(r18)
			setStates(sendAck0);
  806194:	08070bc0 	call	8070bc <setStates>
  806198:	003f0706 	br	805db8 <RS232_ISR+0x58>
			}
		}
		return alt_ticks_per_second()/20;
	case sendData0:
		if(com.packetBuf == NULL) {
			if((com.packetBuf = (struct Packet*)dequeue(com.sendPackets))==NULL) {
  80619c:	89000d17 	ldw	r4,52(r17)
  8061a0:	0806dd00 	call	806dd0 <dequeue>
  8061a4:	88801015 	stw	r2,64(r17)
  8061a8:	103f871e 	bne	r2,zero,805fc8 <RS232_ISR+0x268>
				printf("Packet sending fail, queue is empty");
  8061ac:	010020b4 	movhi	r4,130
  8061b0:	21008104 	addi	r4,r4,516
  8061b4:	080c3f80 	call	80c3f8 <printf>
				setStates(sendStates);
  8061b8:	01000044 	movi	r4,1
  8061bc:	08070bc0 	call	8070bc <setStates>
				return alt_ticks_per_second()/50;
  8061c0:	008020b4 	movhi	r2,130
  8061c4:	1091d004 	addi	r2,r2,18240
  8061c8:	11000017 	ldw	r4,0(r2)
  8061cc:	01400c84 	movi	r5,50
  8061d0:	080b2d00 	call	80b2d0 <__udivsi3>
  8061d4:	003efd06 	br	805dcc <RS232_ISR+0x6c>
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				com.index_send_packets++;
  8061d8:	98801b17 	ldw	r2,108(r19)
				killPacket(&(com.packetBuf));
  8061dc:	99001004 	addi	r4,r19,64
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				com.index_send_packets++;
  8061e0:	1405883a 	add	r2,r2,r16
  8061e4:	98801b15 	stw	r2,108(r19)
				killPacket(&(com.packetBuf));
  8061e8:	08066d00 	call	8066d0 <killPacket>
				if(com.index_send_packets < com.num_send_packets)
  8061ec:	98c01b17 	ldw	r3,108(r19)
  8061f0:	98801a17 	ldw	r2,104(r19)
  8061f4:	18bf6d16 	blt	r3,r2,805fac <RS232_ISR+0x24c>
					setStates(sendData0);
				else {
					com.index_send_packets = com.num_send_packets = 0;
					setStates(sendStates);
  8061f8:	8009883a 	mov	r4,r16
				com.index_send_packets++;
				killPacket(&(com.packetBuf));
				if(com.index_send_packets < com.num_send_packets)
					setStates(sendData0);
				else {
					com.index_send_packets = com.num_send_packets = 0;
  8061fc:	98001a15 	stw	zero,104(r19)
  806200:	98001b15 	stw	zero,108(r19)
					setStates(sendStates);
  806204:	08070bc0 	call	8070bc <setStates>
					com.isRdySend = 0;
  806208:	98001615 	stw	zero,88(r19)
  80620c:	003eea06 	br	805db8 <RS232_ISR+0x58>
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkStartAck(com.data[0]) == 1) {
				setStates(sendStates);
  806210:	1809883a 	mov	r4,r3
  806214:	08070bc0 	call	8070bc <setStates>
  806218:	003ee706 	br	805db8 <RS232_ISR+0x58>
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				if(getBit(com.data[0], 1) == 1) {
  80621c:	99000003 	ldbu	r4,0(r19)
  806220:	100b883a 	mov	r5,r2
  806224:	08065080 	call	806508 <getBit>
  806228:	14000326 	beq	r2,r16,806238 <RS232_ISR+0x4d8>
					setStates(sendAck0);
					com.num_packets = ((int)(com.data[1] << 8))+(int)com.data[2];
					//printf("num of packets will be receiving: %d\n", com.num_packets);
				} else
					setStates(sendStates);
  80622c:	8009883a 	mov	r4,r16
  806230:	08070bc0 	call	8070bc <setStates>
  806234:	003ee006 	br	805db8 <RS232_ISR+0x58>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				if(getBit(com.data[0], 1) == 1) {
					setStates(sendAck0);
  806238:	010001c4 	movi	r4,7
  80623c:	08070bc0 	call	8070bc <setStates>
					com.num_packets = ((int)(com.data[1] << 8))+(int)com.data[2];
  806240:	98800043 	ldbu	r2,1(r19)
  806244:	98c00083 	ldbu	r3,2(r19)
  806248:	1004923a 	slli	r2,r2,8
  80624c:	10c5883a 	add	r2,r2,r3
  806250:	98801815 	stw	r2,96(r19)
  806254:	003ed806 	br	805db8 <RS232_ISR+0x58>

00806258 <freeMem>:
	memMgr.songs[memMgr.curr_index++] = id;
	if(memMgr.curr_index >= 3)
		memMgr.curr_index = 0;
}

void freeMem(int mem) {
  806258:	defff704 	addi	sp,sp,-36
  80625c:	dd000415 	stw	r20,16(sp)
  806260:	dcc00315 	stw	r19,12(sp)
  806264:	2029883a 	mov	r20,r4
	printf("Free memory from buffer\n");
	int temp = memMgr.used_memory;
  806268:	04c020f4 	movhi	r19,131
  80626c:	9cfb2104 	addi	r19,r19,-4988
	if(memMgr.curr_index >= 3)
		memMgr.curr_index = 0;
}

void freeMem(int mem) {
	printf("Free memory from buffer\n");
  806270:	010020b4 	movhi	r4,130
  806274:	21008a04 	addi	r4,r4,552
	memMgr.songs[memMgr.curr_index++] = id;
	if(memMgr.curr_index >= 3)
		memMgr.curr_index = 0;
}

void freeMem(int mem) {
  806278:	dfc00815 	stw	ra,32(sp)
  80627c:	ddc00715 	stw	r23,28(sp)
  806280:	dc000015 	stw	r16,0(sp)
  806284:	dd800615 	stw	r22,24(sp)
  806288:	dd400515 	stw	r21,20(sp)
  80628c:	dc800215 	stw	r18,8(sp)
  806290:	dc400115 	stw	r17,4(sp)
	printf("Free memory from buffer\n");
  806294:	080c5100 	call	80c510 <puts>
	int temp = memMgr.used_memory;
  806298:	9dc00017 	ldw	r23,0(r19)
	printf("used memory: %u\n", memMgr.used_memory);
  80629c:	010020b4 	movhi	r4,130
  8062a0:	21009004 	addi	r4,r4,576
  8062a4:	b80b883a 	mov	r5,r23
  8062a8:	080c3f80 	call	80c3f8 <printf>
	int freeIndex = memMgr.curr_index;
  8062ac:	9c000617 	ldw	r16,24(r19)
	if(freeIndex >= 3)
  8062b0:	00800084 	movi	r2,2
  8062b4:	1400010e 	bge	r2,r16,8062bc <freeMem+0x64>
  8062b8:	0021883a 	mov	r16,zero
  8062bc:	9825883a 	mov	r18,r19
  8062c0:	058020b4 	movhi	r22,130
  8062c4:	b591e904 	addi	r22,r22,18340
  8062c8:	054003f4 	movhi	r21,15
  8062cc:	ad509004 	addi	r21,r21,16960
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  8062d0:	99400017 	ldw	r5,0(r19)
		if(memMgr.songs[freeIndex] != 0) {
  8062d4:	8405883a 	add	r2,r16,r16
  8062d8:	1085883a 	add	r2,r2,r2
  8062dc:	14a3883a 	add	r17,r2,r18
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  8062e0:	2d05883a 	add	r2,r5,r20
		if(memMgr.songs[freeIndex] != 0) {
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
			unloadSong(db.songs[memMgr.songs[freeIndex]]);
			memMgr.songs[freeIndex] = 0;
		}
		freeIndex++;
  8062e4:	84000044 	addi	r16,r16,1
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  8062e8:	a8800f2e 	bgeu	r21,r2,806328 <freeMem+0xd0>
		if(memMgr.songs[freeIndex] != 0) {
  8062ec:	88c00117 	ldw	r3,4(r17)
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
  8062f0:	18c5883a 	add	r2,r3,r3
  8062f4:	1085883a 	add	r2,r2,r2
  8062f8:	1585883a 	add	r2,r2,r22
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
		if(memMgr.songs[freeIndex] != 0) {
  8062fc:	1800191e 	bne	r3,zero,806364 <freeMem+0x10c>
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
			unloadSong(db.songs[memMgr.songs[freeIndex]]);
			memMgr.songs[freeIndex] = 0;
		}
		freeIndex++;
		if(freeIndex >= 3)
  806300:	00800084 	movi	r2,2
  806304:	143ff20e 	bge	r2,r16,8062d0 <freeMem+0x78>
  806308:	0021883a 	mov	r16,zero
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  80630c:	99400017 	ldw	r5,0(r19)
		if(memMgr.songs[freeIndex] != 0) {
  806310:	8405883a 	add	r2,r16,r16
  806314:	1085883a 	add	r2,r2,r2
  806318:	14a3883a 	add	r17,r2,r18
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  80631c:	2d05883a 	add	r2,r5,r20
		if(memMgr.songs[freeIndex] != 0) {
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
			unloadSong(db.songs[memMgr.songs[freeIndex]]);
			memMgr.songs[freeIndex] = 0;
		}
		freeIndex++;
  806320:	84000044 	addi	r16,r16,1
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  806324:	a8bff136 	bltu	r21,r2,8062ec <freeMem+0x94>
		}
		freeIndex++;
		if(freeIndex >= 3)
			freeIndex = 0;
	}
	if(temp == memMgr.used_memory) {
  806328:	2dc01626 	beq	r5,r23,806384 <freeMem+0x12c>
		printf("???\n");
	}
	printf("used memory: %u\n", memMgr.used_memory);
  80632c:	91400017 	ldw	r5,0(r18)
  806330:	010020b4 	movhi	r4,130
  806334:	21009004 	addi	r4,r4,576
}
  806338:	dfc00817 	ldw	ra,32(sp)
  80633c:	ddc00717 	ldw	r23,28(sp)
  806340:	dd800617 	ldw	r22,24(sp)
  806344:	dd400517 	ldw	r21,20(sp)
  806348:	dd000417 	ldw	r20,16(sp)
  80634c:	dcc00317 	ldw	r19,12(sp)
  806350:	dc800217 	ldw	r18,8(sp)
  806354:	dc400117 	ldw	r17,4(sp)
  806358:	dc000017 	ldw	r16,0(sp)
  80635c:	dec00904 	addi	sp,sp,36
			freeIndex = 0;
	}
	if(temp == memMgr.used_memory) {
		printf("???\n");
	}
	printf("used memory: %u\n", memMgr.used_memory);
  806360:	080c3f81 	jmpi	80c3f8 <printf>
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
		if(memMgr.songs[freeIndex] != 0) {
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
  806364:	11003617 	ldw	r4,216(r2)
  806368:	20c00017 	ldw	r3,0(r4)
  80636c:	18800417 	ldw	r2,16(r3)
  806370:	2885c83a 	sub	r2,r5,r2
  806374:	90800015 	stw	r2,0(r18)
			unloadSong(db.songs[memMgr.songs[freeIndex]]);
  806378:	0807e4c0 	call	807e4c <unloadSong>
			memMgr.songs[freeIndex] = 0;
  80637c:	88000115 	stw	zero,4(r17)
  806380:	003fdf06 	br	806300 <freeMem+0xa8>
		freeIndex++;
		if(freeIndex >= 3)
			freeIndex = 0;
	}
	if(temp == memMgr.used_memory) {
		printf("???\n");
  806384:	010020b4 	movhi	r4,130
  806388:	21009504 	addi	r4,r4,596
  80638c:	080c5100 	call	80c510 <puts>
  806390:	003fe606 	br	80632c <freeMem+0xd4>

00806394 <addToMemory>:
	memMgr.used_memory = 0;
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
  806394:	defffd04 	addi	sp,sp,-12
  806398:	dc000015 	stw	r16,0(sp)
	memMgr.used_memory += sound->length;
  80639c:	040020f4 	movhi	r16,131
  8063a0:	843b2104 	addi	r16,r16,-4988
	if(memMgr.songs[memMgr.curr_index] != 0) {
  8063a4:	82000617 	ldw	r8,24(r16)
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
	memMgr.used_memory += sound->length;
  8063a8:	21c00417 	ldw	r7,16(r4)
  8063ac:	80c00017 	ldw	r3,0(r16)
	if(memMgr.songs[memMgr.curr_index] != 0) {
  8063b0:	4205883a 	add	r2,r8,r8
  8063b4:	1085883a 	add	r2,r2,r2
  8063b8:	1405883a 	add	r2,r2,r16
  8063bc:	11800117 	ldw	r6,4(r2)
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
	memMgr.used_memory += sound->length;
  8063c0:	19c7883a 	add	r3,r3,r7
	memMgr.used_memory = 0;
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
  8063c4:	dc400115 	stw	r17,4(sp)
  8063c8:	dfc00215 	stw	ra,8(sp)
  8063cc:	2823883a 	mov	r17,r5
	memMgr.used_memory += sound->length;
	if(memMgr.songs[memMgr.curr_index] != 0) {
		printf("used memory: %u\n", memMgr.used_memory);
  8063d0:	010020b4 	movhi	r4,130
  8063d4:	21009004 	addi	r4,r4,576
  8063d8:	180b883a 	mov	r5,r3
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
	memMgr.used_memory += sound->length;
  8063dc:	80c00015 	stw	r3,0(r16)
	if(memMgr.songs[memMgr.curr_index] != 0) {
  8063e0:	30000e1e 	bne	r6,zero,80641c <addToMemory+0x88>
		printf("used memory: %u\n", memMgr.used_memory);
		memMgr.used_memory -= db.songs[memMgr.songs[memMgr.curr_index]]->sound->length;
		unloadSong(db.songs[memMgr.songs[memMgr.curr_index]]);
		printf("used memory: %u\n", memMgr.used_memory);
	}
	memMgr.songs[memMgr.curr_index++] = id;
  8063e4:	4205883a 	add	r2,r8,r8
  8063e8:	1085883a 	add	r2,r2,r2
  8063ec:	1405883a 	add	r2,r2,r16
  8063f0:	42000044 	addi	r8,r8,1
  8063f4:	14400115 	stw	r17,4(r2)
	if(memMgr.curr_index >= 3)
  8063f8:	00800084 	movi	r2,2
		printf("used memory: %u\n", memMgr.used_memory);
		memMgr.used_memory -= db.songs[memMgr.songs[memMgr.curr_index]]->sound->length;
		unloadSong(db.songs[memMgr.songs[memMgr.curr_index]]);
		printf("used memory: %u\n", memMgr.used_memory);
	}
	memMgr.songs[memMgr.curr_index++] = id;
  8063fc:	82000615 	stw	r8,24(r16)
	if(memMgr.curr_index >= 3)
  806400:	1200010e 	bge	r2,r8,806408 <addToMemory+0x74>
		memMgr.curr_index = 0;
  806404:	80000615 	stw	zero,24(r16)
}
  806408:	dfc00217 	ldw	ra,8(sp)
  80640c:	dc400117 	ldw	r17,4(sp)
  806410:	dc000017 	ldw	r16,0(sp)
  806414:	dec00304 	addi	sp,sp,12
  806418:	f800283a 	ret
}

void addToMemory(struct Sound* sound, int id) {
	memMgr.used_memory += sound->length;
	if(memMgr.songs[memMgr.curr_index] != 0) {
		printf("used memory: %u\n", memMgr.used_memory);
  80641c:	080c3f80 	call	80c3f8 <printf>
		memMgr.used_memory -= db.songs[memMgr.songs[memMgr.curr_index]]->sound->length;
  806420:	80c00617 	ldw	r3,24(r16)
  806424:	81400017 	ldw	r5,0(r16)
  806428:	18c7883a 	add	r3,r3,r3
  80642c:	18c7883a 	add	r3,r3,r3
  806430:	1c07883a 	add	r3,r3,r16
  806434:	18800117 	ldw	r2,4(r3)
  806438:	00c020b4 	movhi	r3,130
  80643c:	18d1e904 	addi	r3,r3,18340
  806440:	1085883a 	add	r2,r2,r2
  806444:	1085883a 	add	r2,r2,r2
  806448:	10c5883a 	add	r2,r2,r3
  80644c:	11003617 	ldw	r4,216(r2)
  806450:	20c00017 	ldw	r3,0(r4)
  806454:	18800417 	ldw	r2,16(r3)
  806458:	288bc83a 	sub	r5,r5,r2
  80645c:	81400015 	stw	r5,0(r16)
		unloadSong(db.songs[memMgr.songs[memMgr.curr_index]]);
  806460:	0807e4c0 	call	807e4c <unloadSong>
		printf("used memory: %u\n", memMgr.used_memory);
  806464:	81400017 	ldw	r5,0(r16)
  806468:	010020b4 	movhi	r4,130
  80646c:	21009004 	addi	r4,r4,576
  806470:	080c3f80 	call	80c3f8 <printf>
  806474:	82000617 	ldw	r8,24(r16)
  806478:	003fda06 	br	8063e4 <addToMemory+0x50>

0080647c <initMemory>:
#include "MemoryMgr.h"

struct MemoryMgr memMgr;

void initMemory() {
	memMgr.used_memory = 0;
  80647c:	008020f4 	movhi	r2,131
  806480:	10bb2104 	addi	r2,r2,-4988
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
  806484:	10c00104 	addi	r3,r2,4
  806488:	18000415 	stw	zero,16(r3)
	memMgr.curr_index = 0;
  80648c:	10000615 	stw	zero,24(r2)
#include "MemoryMgr.h"

struct MemoryMgr memMgr;

void initMemory() {
	memMgr.used_memory = 0;
  806490:	10000015 	stw	zero,0(r2)
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
  806494:	10000115 	stw	zero,4(r2)
  806498:	18000115 	stw	zero,4(r3)
  80649c:	18000215 	stw	zero,8(r3)
  8064a0:	18000315 	stw	zero,12(r3)
	memMgr.curr_index = 0;
}
  8064a4:	f800283a 	ret

008064a8 <setXY>:
	this->subObj = subObj;
	return this;
}

void setXY(struct Object* this, int x, int y) {
	if(this == NULL) return;
  8064a8:	20000326 	beq	r4,zero,8064b8 <setXY+0x10>
	this->r->x = x;
  8064ac:	20800017 	ldw	r2,0(r4)
	this->r->y = y;
  8064b0:	11800115 	stw	r6,4(r2)
	return this;
}

void setXY(struct Object* this, int x, int y) {
	if(this == NULL) return;
	this->r->x = x;
  8064b4:	11400015 	stw	r5,0(r2)
  8064b8:	f800283a 	ret

008064bc <initObject>:
 *      Author: danny
 */

#include "Object.h"

struct Object* initObject(struct Range* r, struct Image* img, void* subObj) {
  8064bc:	defffc04 	addi	sp,sp,-16
  8064c0:	dd400215 	stw	r21,8(sp)
  8064c4:	202b883a 	mov	r21,r4
	struct Object* this = (struct Object*)malloc(sizeof(struct Object));
  8064c8:	01000304 	movi	r4,12
 *      Author: danny
 */

#include "Object.h"

struct Object* initObject(struct Range* r, struct Image* img, void* subObj) {
  8064cc:	dcc00115 	stw	r19,4(sp)
  8064d0:	dc400015 	stw	r17,0(sp)
  8064d4:	2827883a 	mov	r19,r5
  8064d8:	3023883a 	mov	r17,r6
  8064dc:	dfc00315 	stw	ra,12(sp)
	struct Object* this = (struct Object*)malloc(sizeof(struct Object));
  8064e0:	080bb6c0 	call	80bb6c <malloc>
	this->r = r;
	this->img = img;
	this->subObj = subObj;
  8064e4:	14400215 	stw	r17,8(r2)

#include "Object.h"

struct Object* initObject(struct Range* r, struct Image* img, void* subObj) {
	struct Object* this = (struct Object*)malloc(sizeof(struct Object));
	this->r = r;
  8064e8:	15400015 	stw	r21,0(r2)
	this->img = img;
  8064ec:	14c00115 	stw	r19,4(r2)
	this->subObj = subObj;
	return this;
}
  8064f0:	dfc00317 	ldw	ra,12(sp)
  8064f4:	dd400217 	ldw	r21,8(sp)
  8064f8:	dcc00117 	ldw	r19,4(sp)
  8064fc:	dc400017 	ldw	r17,0(sp)
  806500:	dec00404 	addi	sp,sp,16
  806504:	f800283a 	ret

00806508 <getBit>:
		break;
	}
	return result;
}

int getBit(unsigned char byte, int pos) {
  806508:	20803fcc 	andi	r2,r4,255
  80650c:	1145d83a 	sra	r2,r2,r5
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
}
  806510:	1080004c 	andi	r2,r2,1
  806514:	f800283a 	ret

00806518 <setBit>:
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
  806518:	00800044 	movi	r2,1
  80651c:	20c00003 	ldbu	r3,0(r4)
  806520:	1144983a 	sll	r2,r2,r5
  806524:	10c4b03a 	or	r2,r2,r3
  806528:	20800005 	stb	r2,0(r4)
}
  80652c:	f800283a 	ret

00806530 <initPacket>:
 *      Author: danny
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
  806530:	defffb04 	addi	sp,sp,-20
  806534:	dc800215 	stw	r18,8(sp)
  806538:	dc000015 	stw	r16,0(sp)
  80653c:	2025883a 	mov	r18,r4
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  806540:	24000084 	addi	r16,r4,2
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
  806544:	01000504 	movi	r4,20
 *      Author: danny
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
  806548:	dfc00415 	stw	ra,16(sp)
  80654c:	dcc00315 	stw	r19,12(sp)
  806550:	dc400115 	stw	r17,4(sp)
  806554:	2827883a 	mov	r19,r5
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
  806558:	080bb6c0 	call	80bb6c <malloc>
	this->data_size = data_size;
  80655c:	14800115 	stw	r18,4(r2)
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  806560:	8009883a 	mov	r4,r16
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
  806564:	1023883a 	mov	r17,r2
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  806568:	080bb6c0 	call	80bb6c <malloc>
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
  80656c:	14000045 	stb	r16,1(r2)
#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  806570:	88800015 	stw	r2,0(r17)
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
  806574:	01000104 	movi	r4,4

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
	this->data[0] = 0;
  806578:	10000005 	stb	zero,0(r2)
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
  80657c:	080bb6c0 	call	80bb6c <malloc>
  806580:	88800215 	stw	r2,8(r17)
	int i;
	for(i = 0; i < data_size; i++) {
  806584:	0480080e 	bge	zero,r18,8065a8 <initPacket+0x78>
  806588:	000b883a 	mov	r5,zero
		this->data[i+HEADERSIZE] = data[i];
  80658c:	88800017 	ldw	r2,0(r17)
  806590:	9947883a 	add	r3,r19,r5
  806594:	19000003 	ldbu	r4,0(r3)
  806598:	1145883a 	add	r2,r2,r5
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
	int i;
	for(i = 0; i < data_size; i++) {
  80659c:	29400044 	addi	r5,r5,1
		this->data[i+HEADERSIZE] = data[i];
  8065a0:	11000085 	stb	r4,2(r2)
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
	int i;
	for(i = 0; i < data_size; i++) {
  8065a4:	917ff91e 	bne	r18,r5,80658c <initPacket+0x5c>
		this->data[i+HEADERSIZE] = data[i];
	}
	return this;
}
  8065a8:	8805883a 	mov	r2,r17
  8065ac:	dfc00417 	ldw	ra,16(sp)
  8065b0:	dcc00317 	ldw	r19,12(sp)
  8065b4:	dc800217 	ldw	r18,8(sp)
  8065b8:	dc400117 	ldw	r17,4(sp)
  8065bc:	dc000017 	ldw	r16,0(sp)
  8065c0:	dec00504 	addi	sp,sp,20
  8065c4:	f800283a 	ret

008065c8 <strnsep_>:
}
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
  8065c8:	defff804 	addi	sp,sp,-32
  8065cc:	dfc00715 	stw	ra,28(sp)
  8065d0:	df000615 	stw	fp,24(sp)
  8065d4:	dd400515 	stw	r21,20(sp)
  8065d8:	dd000415 	stw	r20,16(sp)
  8065dc:	dcc00315 	stw	r19,12(sp)
  8065e0:	dc800215 	stw	r18,8(sp)
  8065e4:	dc400115 	stw	r17,4(sp)
  8065e8:	dc000015 	stw	r16,0(sp)
  8065ec:	d839883a 	mov	fp,sp
  8065f0:	2023883a 	mov	r17,r4
	char* result = (char*)malloc(sizeof(char)*pos);
  8065f4:	2809883a 	mov	r4,r5
}
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
  8065f8:	2821883a 	mov	r16,r5
	char* result = (char*)malloc(sizeof(char)*pos);
  8065fc:	080bb6c0 	call	80bb6c <malloc>
	int i;
	int len = strlen(*str);
  806600:	89000017 	ldw	r4,0(r17)
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
  806604:	1025883a 	mov	r18,r2
}
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
  806608:	d82b883a 	mov	r21,sp
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
  80660c:	080ce500 	call	80ce50 <strlen>
	char temp[len-pos];
  806610:	1427c83a 	sub	r19,r2,r16
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
  806614:	100f883a 	mov	r7,r2
	char temp[len-pos];
  806618:	00ffff04 	movi	r3,-4
  80661c:	98800184 	addi	r2,r19,6
  806620:	10c4703a 	and	r2,r2,r3
  806624:	d8b7c83a 	sub	sp,sp,r2
  806628:	d829883a 	mov	r20,sp
	for(i = 0; i < len; i++) {
  80662c:	01c0130e 	bge	zero,r7,80667c <strnsep_+0xb4>
  806630:	dc0bc83a 	sub	r5,sp,r16
  806634:	0009883a 	mov	r4,zero
  806638:	00000706 	br	806658 <strnsep_+0x90>
		if(i < pos)
			result[i] = (*str)[i];
  80663c:	88800017 	ldw	r2,0(r17)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  806640:	29400044 	addi	r5,r5,1
		if(i < pos)
			result[i] = (*str)[i];
  806644:	1105883a 	add	r2,r2,r4
  806648:	10c00003 	ldbu	r3,0(r2)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  80664c:	21000044 	addi	r4,r4,1
		if(i < pos)
			result[i] = (*str)[i];
  806650:	30c00005 	stb	r3,0(r6)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  806654:	39000926 	beq	r7,r4,80667c <strnsep_+0xb4>
		if(i < pos)
			result[i] = (*str)[i];
  806658:	910d883a 	add	r6,r18,r4
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
		if(i < pos)
  80665c:	243ff716 	blt	r4,r16,80663c <strnsep_+0x74>
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
  806660:	88800017 	ldw	r2,0(r17)
  806664:	1105883a 	add	r2,r2,r4
  806668:	10c00003 	ldbu	r3,0(r2)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  80666c:	21000044 	addi	r4,r4,1
		if(i < pos)
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
  806670:	28c00005 	stb	r3,0(r5)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  806674:	29400044 	addi	r5,r5,1
  806678:	393ff71e 	bne	r7,r4,806658 <strnsep_+0x90>
		if(i < pos)
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
	}
	*str = (char*)realloc(*str, len-pos);
  80667c:	89000017 	ldw	r4,0(r17)
  806680:	980b883a 	mov	r5,r19
  806684:	080c5240 	call	80c524 <realloc>
  806688:	1009883a 	mov	r4,r2
  80668c:	88800015 	stw	r2,0(r17)
	strncpy(*str, temp, len-pos);
  806690:	a00b883a 	mov	r5,r20
  806694:	980d883a 	mov	r6,r19
  806698:	080cf740 	call	80cf74 <strncpy>
	return result;
}
  80669c:	9005883a 	mov	r2,r18
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
	}
	*str = (char*)realloc(*str, len-pos);
	strncpy(*str, temp, len-pos);
  8066a0:	a837883a 	mov	sp,r21
	return result;
}
  8066a4:	e037883a 	mov	sp,fp
  8066a8:	dfc00717 	ldw	ra,28(sp)
  8066ac:	df000617 	ldw	fp,24(sp)
  8066b0:	dd400517 	ldw	r21,20(sp)
  8066b4:	dd000417 	ldw	r20,16(sp)
  8066b8:	dcc00317 	ldw	r19,12(sp)
  8066bc:	dc800217 	ldw	r18,8(sp)
  8066c0:	dc400117 	ldw	r17,4(sp)
  8066c4:	dc000017 	ldw	r16,0(sp)
  8066c8:	dec00804 	addi	sp,sp,32
  8066cc:	f800283a 	ret

008066d0 <killPacket>:
		this->data[i+HEADERSIZE] = data[i];
	}
	return this;
}

void killPacket(struct Packet** this) {
  8066d0:	defffe04 	addi	sp,sp,-8
  8066d4:	dc000015 	stw	r16,0(sp)
  8066d8:	2021883a 	mov	r16,r4
  8066dc:	dfc00115 	stw	ra,4(sp)
	if(this == NULL) {
		printf("packet is null when attempt to removed\n");
  8066e0:	010020b4 	movhi	r4,130
  8066e4:	21009604 	addi	r4,r4,600
	}
	return this;
}

void killPacket(struct Packet** this) {
	if(this == NULL) {
  8066e8:	80000f26 	beq	r16,zero,806728 <killPacket+0x58>
		printf("packet is null when attempt to removed\n");
		return;
	}
	free((*this)->data);
  8066ec:	80800017 	ldw	r2,0(r16)
  8066f0:	11000017 	ldw	r4,0(r2)
  8066f4:	080bb580 	call	80bb58 <free>
	(*this)->data = NULL;
  8066f8:	80800017 	ldw	r2,0(r16)
	free((*this)->type);
  8066fc:	11000217 	ldw	r4,8(r2)
	if(this == NULL) {
		printf("packet is null when attempt to removed\n");
		return;
	}
	free((*this)->data);
	(*this)->data = NULL;
  806700:	10000015 	stw	zero,0(r2)
	free((*this)->type);
  806704:	080bb580 	call	80bb58 <free>
	(*this)->type = NULL;
  806708:	81000017 	ldw	r4,0(r16)
  80670c:	20000215 	stw	zero,8(r4)
	free(*this);
  806710:	080bb580 	call	80bb58 <free>
	*this = NULL;
  806714:	80000015 	stw	zero,0(r16)
}
  806718:	dfc00117 	ldw	ra,4(sp)
  80671c:	dc000017 	ldw	r16,0(sp)
  806720:	dec00204 	addi	sp,sp,8
  806724:	f800283a 	ret
  806728:	dfc00117 	ldw	ra,4(sp)
  80672c:	dc000017 	ldw	r16,0(sp)
  806730:	dec00204 	addi	sp,sp,8
	return this;
}

void killPacket(struct Packet** this) {
	if(this == NULL) {
		printf("packet is null when attempt to removed\n");
  806734:	080c5101 	jmpi	80c510 <puts>

00806738 <readPacketHeader>:
}

/*
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
  806738:	defff904 	addi	sp,sp,-28
  80673c:	dd000415 	stw	r20,16(sp)
  806740:	2029883a 	mov	r20,r4
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
  806744:	01000504 	movi	r4,20
}

/*
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
  806748:	dd400515 	stw	r21,20(sp)
  80674c:	dc800215 	stw	r18,8(sp)
  806750:	dc400115 	stw	r17,4(sp)
  806754:	dc000015 	stw	r16,0(sp)
  806758:	282b883a 	mov	r21,r5
  80675c:	dfc00615 	stw	ra,24(sp)
  806760:	dcc00315 	stw	r19,12(sp)
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
  806764:	080bb6c0 	call	80bb6c <malloc>
  806768:	1021883a 	mov	r16,r2
}

/*
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
  80676c:	a023883a 	mov	r17,r20
  806770:	a825883a 	mov	r18,r21
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
  806774:	10003226 	beq	r2,zero,806840 <readPacketHeader+0x108>
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  806778:	8cc03fcc 	andi	r19,r17,255
	}
	return result;
}

int getBit(unsigned char byte, int pos) {
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
  80677c:	9c403fcc 	andi	r17,r19,255
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  806780:	880ad1fa 	srli	r5,r17,7
	result->data_size = (int)byte2 - HEADERSIZE;
  806784:	90803fcc 	andi	r2,r18,255
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  806788:	00c020f4 	movhi	r3,131
  80678c:	18fb0504 	addi	r3,r3,-5100
	result->data_size = (int)byte2 - HEADERSIZE;
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
  806790:	11000084 	addi	r4,r2,2
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  806794:	19401415 	stw	r5,80(r3)
	result->data_size = (int)byte2 - HEADERSIZE;
  806798:	10bfff84 	addi	r2,r2,-2
  80679c:	80800115 	stw	r2,4(r16)
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
  8067a0:	080bb6c0 	call	80bb6c <malloc>
  8067a4:	80800015 	stw	r2,0(r16)
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  8067a8:	04800044 	movi	r18,1
	result->data_size = (int)byte2 - HEADERSIZE;
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
	if(result->data == NULL) {
  8067ac:	10002826 	beq	r2,zero,806850 <readPacketHeader+0x118>
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
  8067b0:	81000017 	ldw	r4,0(r16)
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
  8067b4:	8806d17a 	srli	r3,r17,5
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
  8067b8:	8804d1ba 	srli	r2,r17,6
	result->data_size = (int)byte2 - HEADERSIZE;
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
  8067bc:	25000005 	stb	r20,0(r4)
	result->data[1] = byte2;
  8067c0:	81400017 	ldw	r5,0(r16)
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
  8067c4:	18c0004c 	andi	r3,r3,1
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
  8067c8:	1080004c 	andi	r2,r2,1
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
  8067cc:	2d400045 	stb	r21,1(r5)
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
  8067d0:	01000104 	movi	r4,4
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
  8067d4:	80c00415 	stw	r3,16(r16)
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
  8067d8:	80800315 	stw	r2,12(r16)
	result->isEnd = getBit(byte1, 5);
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
  8067dc:	080bb6c0 	call	80bb6c <malloc>
	switch((int)(byte1 & 0x0F)) {
  8067e0:	98c003cc 	andi	r3,r19,15
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
  8067e4:	1009883a 	mov	r4,r2
  8067e8:	80800215 	stw	r2,8(r16)
	switch((int)(byte1 & 0x0F)) {
  8067ec:	1c801226 	beq	r3,r18,806838 <readPacketHeader+0x100>
  8067f0:	90c00e0e 	bge	r18,r3,80682c <readPacketHeader+0xf4>
  8067f4:	00800084 	movi	r2,2
  8067f8:	18800f26 	beq	r3,r2,806838 <readPacketHeader+0x100>
  8067fc:	008000c4 	movi	r2,3
  806800:	18800d26 	beq	r3,r2,806838 <readPacketHeader+0x100>
		break;
	default:
		break;
	}
	return result;
}
  806804:	8005883a 	mov	r2,r16
  806808:	dfc00617 	ldw	ra,24(sp)
  80680c:	dd400517 	ldw	r21,20(sp)
  806810:	dd000417 	ldw	r20,16(sp)
  806814:	dcc00317 	ldw	r19,12(sp)
  806818:	dc800217 	ldw	r18,8(sp)
  80681c:	dc400117 	ldw	r17,4(sp)
  806820:	dc000017 	ldw	r16,0(sp)
  806824:	dec00704 	addi	sp,sp,28
  806828:	f800283a 	ret
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
	switch((int)(byte1 & 0x0F)) {
  80682c:	183ff51e 	bne	r3,zero,806804 <readPacketHeader+0xcc>
	case 0:
		*result->type = STRING;
  806830:	10000015 	stw	zero,0(r2)
  806834:	003ff306 	br	806804 <readPacketHeader+0xcc>
		break;
	case 2:
		*result->type = PLAYLIST;
		break;
	case 3:
		*result->type = AUDIO;
  806838:	20c00015 	stw	r3,0(r4)
  80683c:	003ff106 	br	806804 <readPacketHeader+0xcc>
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
  806840:	010020b4 	movhi	r4,130
  806844:	2100a004 	addi	r4,r4,640
  806848:	080c5100 	call	80c510 <puts>
  80684c:	003fca06 	br	806778 <readPacketHeader+0x40>
	}
	com.client_ack = getBit(byte1, 7);
	result->data_size = (int)byte2 - HEADERSIZE;
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
  806850:	010020b4 	movhi	r4,130
  806854:	2100aa04 	addi	r4,r4,680
  806858:	080c5100 	call	80c510 <puts>
  80685c:	003fd406 	br	8067b0 <readPacketHeader+0x78>

00806860 <setAck>:
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
}

void setAck(struct Packet* this, int ack) {
	if(ack == 1) {
  806860:	00800044 	movi	r2,1
  806864:	28800126 	beq	r5,r2,80686c <setAck+0xc>
  806868:	f800283a 	ret
		setBit(&this->data[0], 7);
  80686c:	21000017 	ldw	r4,0(r4)

int getBit(unsigned char byte, int pos) {
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
}
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
  806870:	00bfe004 	movi	r2,-128
  806874:	20c00003 	ldbu	r3,0(r4)
  806878:	1886b03a 	or	r3,r3,r2
  80687c:	20c00005 	stb	r3,0(r4)
  806880:	f800283a 	ret

00806884 <setHeader>:
	(*this)->type = NULL;
	free(*this);
	*this = NULL;
}

void setHeader(struct Packet* this, int isHead, int isEnd, enum msgType type) {
  806884:	2011883a 	mov	r8,r4
	if(this == NULL) return;
  806888:	20001026 	beq	r4,zero,8068cc <setHeader+0x48>
	if((this->isHead = isHead) == 1) {
  80688c:	02400044 	movi	r9,1
  806890:	21400315 	stw	r5,12(r4)
  806894:	2a401826 	beq	r5,r9,8068f8 <setHeader+0x74>
		setBit(&this->data[0], 6);
	}
	if((this->isEnd = isEnd) == 1) {
  806898:	41800415 	stw	r6,16(r8)
  80689c:	32401126 	beq	r6,r9,8068e4 <setHeader+0x60>
		setBit(&this->data[0], 5);
	}
	*(this->type) = type;
  8068a0:	40c00217 	ldw	r3,8(r8)
	this->data[0] = this->data[0] & 0xF0;
  8068a4:	41000017 	ldw	r4,0(r8)
		setBit(&this->data[0], 6);
	}
	if((this->isEnd = isEnd) == 1) {
		setBit(&this->data[0], 5);
	}
	*(this->type) = type;
  8068a8:	19c00015 	stw	r7,0(r3)
	this->data[0] = this->data[0] & 0xF0;
  8068ac:	20800003 	ldbu	r2,0(r4)
	switch(type) {
  8068b0:	00c00084 	movi	r3,2
	}
	if((this->isEnd = isEnd) == 1) {
		setBit(&this->data[0], 5);
	}
	*(this->type) = type;
	this->data[0] = this->data[0] & 0xF0;
  8068b4:	10803c0c 	andi	r2,r2,240
  8068b8:	20800005 	stb	r2,0(r4)
	switch(type) {
  8068bc:	38c00426 	beq	r7,r3,8068d0 <setHeader+0x4c>
  8068c0:	008000c4 	movi	r2,3
  8068c4:	38801126 	beq	r7,r2,80690c <setHeader+0x88>
  8068c8:	3a400126 	beq	r7,r9,8068d0 <setHeader+0x4c>
  8068cc:	f800283a 	ret
		break;
	case CMD:
		this->data[0] = this->data[0] | 0x01;
		break;
	case PLAYLIST:
		this->data[0] = this->data[0] | 0x02;
  8068d0:	40c00017 	ldw	r3,0(r8)
  8068d4:	18800003 	ldbu	r2,0(r3)
  8068d8:	3884b03a 	or	r2,r7,r2
  8068dc:	18800005 	stb	r2,0(r3)
  8068e0:	f800283a 	ret
	if(this == NULL) return;
	if((this->isHead = isHead) == 1) {
		setBit(&this->data[0], 6);
	}
	if((this->isEnd = isEnd) == 1) {
		setBit(&this->data[0], 5);
  8068e4:	40c00017 	ldw	r3,0(r8)

int getBit(unsigned char byte, int pos) {
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
}
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
  8068e8:	18800003 	ldbu	r2,0(r3)
  8068ec:	10800814 	ori	r2,r2,32
  8068f0:	18800005 	stb	r2,0(r3)
  8068f4:	003fea06 	br	8068a0 <setHeader+0x1c>
}

void setHeader(struct Packet* this, int isHead, int isEnd, enum msgType type) {
	if(this == NULL) return;
	if((this->isHead = isHead) == 1) {
		setBit(&this->data[0], 6);
  8068f8:	20c00017 	ldw	r3,0(r4)

int getBit(unsigned char byte, int pos) {
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
}
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
  8068fc:	18800003 	ldbu	r2,0(r3)
  806900:	10801014 	ori	r2,r2,64
  806904:	18800005 	stb	r2,0(r3)
  806908:	003fe306 	br	806898 <setHeader+0x14>
		break;
	case PLAYLIST:
		this->data[0] = this->data[0] | 0x02;
		break;
	case AUDIO:
		this->data[0] = this->data[0] | 0x03;
  80690c:	40c00017 	ldw	r3,0(r8)
  806910:	18800003 	ldbu	r2,0(r3)
  806914:	3884b03a 	or	r2,r7,r2
  806918:	18800005 	stb	r2,0(r3)
  80691c:	f800283a 	ret

00806920 <setListId>:
	//this->next = this->prev = NULL;
	return this;
}

void setListId(struct Playlist* this, int id) {
	this->id = id;
  806920:	21401b15 	stw	r5,108(r4)
}
  806924:	f800283a 	ret

00806928 <generateListNameForSD>:
	if(this == NULL || *this == NULL) return;
	free(*this);
	*this = NULL;
}

void generateListNameForSD(char* str, int list_index_in_db){
  806928:	defffc04 	addi	sp,sp,-16
  80692c:	dfc00315 	stw	ra,12(sp)
  806930:	dc400215 	stw	r17,8(sp)
  806934:	dc000115 	stw	r16,4(sp)
	char index[2];
	index[0] = list_index_in_db + '0';
	index[1] = '\0';
	strcpy(str, "LIST");
  806938:	00801304 	movi	r2,76
  80693c:	20800005 	stb	r2,0(r4)
  806940:	04401504 	movi	r17,84
  806944:	00c01244 	movi	r3,73
  806948:	008014c4 	movi	r2,83
  80694c:	20c00045 	stb	r3,1(r4)
  806950:	244000c5 	stb	r17,3(r4)
	*this = NULL;
}

void generateListNameForSD(char* str, int list_index_in_db){
	char index[2];
	index[0] = list_index_in_db + '0';
  806954:	28c00c04 	addi	r3,r5,48
	if(this == NULL || *this == NULL) return;
	free(*this);
	*this = NULL;
}

void generateListNameForSD(char* str, int list_index_in_db){
  806958:	2021883a 	mov	r16,r4
	char index[2];
	index[0] = list_index_in_db + '0';
	index[1] = '\0';
	strcpy(str, "LIST");
  80695c:	20800085 	stb	r2,2(r4)
  806960:	20000105 	stb	zero,4(r4)
	strcat(str, index);
  806964:	d80b883a 	mov	r5,sp
	*this = NULL;
}

void generateListNameForSD(char* str, int list_index_in_db){
	char index[2];
	index[0] = list_index_in_db + '0';
  806968:	d8c00005 	stb	r3,0(sp)
	index[1] = '\0';
  80696c:	d8000045 	stb	zero,1(sp)
	strcpy(str, "LIST");
	strcat(str, index);
  806970:	080cc780 	call	80cc78 <strcat>
	strcat(str, ".TXT");
  806974:	8009883a 	mov	r4,r16
  806978:	080ce500 	call	80ce50 <strlen>
  80697c:	1405883a 	add	r2,r2,r16
  806980:	00c00b84 	movi	r3,46
  806984:	01001604 	movi	r4,88
  806988:	10c00005 	stb	r3,0(r2)
  80698c:	11000085 	stb	r4,2(r2)
  806990:	144000c5 	stb	r17,3(r2)
  806994:	10000105 	stb	zero,4(r2)
  806998:	14400045 	stb	r17,1(r2)
}
  80699c:	dfc00317 	ldw	ra,12(sp)
  8069a0:	dc400217 	ldw	r17,8(sp)
  8069a4:	dc000117 	ldw	r16,4(sp)
  8069a8:	dec00404 	addi	sp,sp,16
  8069ac:	f800283a 	ret

008069b0 <killPlaylist>:
		this->list_name[LISTNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->list_name, name);

}
void killPlaylist(struct Playlist** this) {
  8069b0:	defffe04 	addi	sp,sp,-8
  8069b4:	dc000015 	stw	r16,0(sp)
  8069b8:	dfc00115 	stw	ra,4(sp)
  8069bc:	2021883a 	mov	r16,r4
	if(this == NULL || *this == NULL) return;
  8069c0:	20000526 	beq	r4,zero,8069d8 <killPlaylist+0x28>
  8069c4:	20800017 	ldw	r2,0(r4)
	free(*this);
  8069c8:	1009883a 	mov	r4,r2
	} else
		strcpy(this->list_name, name);

}
void killPlaylist(struct Playlist** this) {
	if(this == NULL || *this == NULL) return;
  8069cc:	10000226 	beq	r2,zero,8069d8 <killPlaylist+0x28>
	free(*this);
  8069d0:	080bb580 	call	80bb58 <free>
	*this = NULL;
  8069d4:	80000015 	stw	zero,0(r16)
}
  8069d8:	dfc00117 	ldw	ra,4(sp)
  8069dc:	dc000017 	ldw	r16,0(sp)
  8069e0:	dec00204 	addi	sp,sp,8
  8069e4:	f800283a 	ret

008069e8 <setListName>:
}

void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
  8069e8:	defffd04 	addi	sp,sp,-12
  8069ec:	dc400115 	stw	r17,4(sp)
  8069f0:	dc000015 	stw	r16,0(sp)
  8069f4:	dfc00215 	stw	ra,8(sp)
  8069f8:	2023883a 	mov	r17,r4
  8069fc:	2821883a 	mov	r16,r5
	if(this == NULL || name == NULL) return;
  806a00:	20001126 	beq	r4,zero,806a48 <setListName+0x60>
	int size = strlen(name);
  806a04:	2809883a 	mov	r4,r5

void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
  806a08:	28000f26 	beq	r5,zero,806a48 <setListName+0x60>
	int size = strlen(name);
  806a0c:	080ce500 	call	80ce50 <strlen>
  806a10:	00c01904 	movi	r3,100
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
  806a14:	800b883a 	mov	r5,r16
  806a18:	8809883a 	mov	r4,r17
  806a1c:	180d883a 	mov	r6,r3
void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  806a20:	18800716 	blt	r3,r2,806a40 <setListName+0x58>
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
		this->list_name[LISTNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->list_name, name);
  806a24:	8809883a 	mov	r4,r17
  806a28:	800b883a 	mov	r5,r16

}
  806a2c:	dfc00217 	ldw	ra,8(sp)
  806a30:	dc400117 	ldw	r17,4(sp)
  806a34:	dc000017 	ldw	r16,0(sp)
  806a38:	dec00304 	addi	sp,sp,12
	int size = strlen(name);
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
		this->list_name[LISTNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->list_name, name);
  806a3c:	080cdc41 	jmpi	80cdc4 <strcpy>
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
  806a40:	080cf740 	call	80cf74 <strncpy>
		this->list_name[LISTNAME_LENGTH-1] = '\0';
  806a44:	88001905 	stb	zero,100(r17)
	} else
		strcpy(this->list_name, name);

}
  806a48:	dfc00217 	ldw	ra,8(sp)
  806a4c:	dc400117 	ldw	r17,4(sp)
  806a50:	dc000017 	ldw	r16,0(sp)
  806a54:	dec00304 	addi	sp,sp,12
  806a58:	f800283a 	ret

00806a5c <initPlaylist>:
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
  806a5c:	defffc04 	addi	sp,sp,-16
  806a60:	dc400115 	stw	r17,4(sp)
  806a64:	2023883a 	mov	r17,r4
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
  806a68:	01001c04 	movi	r4,112
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
  806a6c:	dc800215 	stw	r18,8(sp)
  806a70:	dc000015 	stw	r16,0(sp)
  806a74:	dfc00315 	stw	ra,12(sp)
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
  806a78:	080bb6c0 	call	80bb6c <malloc>
  806a7c:	1021883a 	mov	r16,r2
	if(this == NULL) {
		printf("playlist cannot malloc\n");
  806a80:	010020b4 	movhi	r4,130
  806a84:	2100b704 	addi	r4,r4,732
  806a88:	0025883a 	mov	r18,zero
 */
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
	if(this == NULL) {
  806a8c:	10001826 	beq	r2,zero,806af0 <initPlaylist+0x94>
void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  806a90:	8809883a 	mov	r4,r17
 *      Author: danny
 */
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
  806a94:	1025883a 	mov	r18,r2

void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
  806a98:	88000926 	beq	r17,zero,806ac0 <initPlaylist+0x64>
	int size = strlen(name);
  806a9c:	080ce500 	call	80ce50 <strlen>
  806aa0:	00c01904 	movi	r3,100
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
  806aa4:	880b883a 	mov	r5,r17
  806aa8:	8009883a 	mov	r4,r16
  806aac:	180d883a 	mov	r6,r3
void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  806ab0:	18800c16 	blt	r3,r2,806ae4 <initPlaylist+0x88>
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
		this->list_name[LISTNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->list_name, name);
  806ab4:	880b883a 	mov	r5,r17
  806ab8:	8009883a 	mov	r4,r16
  806abc:	080cdc40 	call	80cdc4 <strcpy>
		return NULL;
	}
	setListName(this, listname);
	//this->songs = initQueue();
	this->num_of_songs = 0;
	this->id = 0;
  806ac0:	80001b15 	stw	zero,108(r16)
		printf("playlist cannot malloc\n");
		return NULL;
	}
	setListName(this, listname);
	//this->songs = initQueue();
	this->num_of_songs = 0;
  806ac4:	80001a15 	stw	zero,104(r16)
	this->id = 0;
	//this->next = this->prev = NULL;
	return this;
}
  806ac8:	9005883a 	mov	r2,r18
  806acc:	dfc00317 	ldw	ra,12(sp)
  806ad0:	dc800217 	ldw	r18,8(sp)
  806ad4:	dc400117 	ldw	r17,4(sp)
  806ad8:	dc000017 	ldw	r16,0(sp)
  806adc:	dec00404 	addi	sp,sp,16
  806ae0:	f800283a 	ret
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
  806ae4:	080cf740 	call	80cf74 <strncpy>
		this->list_name[LISTNAME_LENGTH-1] = '\0';
  806ae8:	80001905 	stb	zero,100(r16)
  806aec:	003ff406 	br	806ac0 <initPlaylist+0x64>
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
	if(this == NULL) {
		printf("playlist cannot malloc\n");
  806af0:	080c5100 	call	80c510 <puts>
  806af4:	003ff406 	br	806ac8 <initPlaylist+0x6c>

00806af8 <isBitSet>:
 *      Author: Adam
 */

#include "PushKeyController.h"

bool isBitSet(char num, int bit) {
  806af8:	20803fcc 	andi	r2,r4,255
  806afc:	1080201c 	xori	r2,r2,128
  806b00:	10bfe004 	addi	r2,r2,-128
  806b04:	1145d83a 	sra	r2,r2,r5
	return num & 1 << bit;
}
  806b08:	1080004c 	andi	r2,r2,1
  806b0c:	f800283a 	ret

00806b10 <isKeyUp>:
/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is up
 */
bool isKeyUp(int key) {
	return isBitSet(IORD_8DIRECT(KEYS_BASE, 0), key);
  806b10:	00c04234 	movhi	r3,264
  806b14:	18cd1c04 	addi	r3,r3,13424
  806b18:	18800023 	ldbuio	r2,0(r3)
  806b1c:	10803fcc 	andi	r2,r2,255
  806b20:	1080201c 	xori	r2,r2,128
  806b24:	10bfe004 	addi	r2,r2,-128
  806b28:	1105d83a 	sra	r2,r2,r4
}
  806b2c:	1080004c 	andi	r2,r2,1
  806b30:	f800283a 	ret

00806b34 <isKeyDown>:
/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is down
 */
bool isKeyDown(int key) {
	return !isBitSet(IORD_8DIRECT(KEYS_BASE, 0), key);
  806b34:	00c04234 	movhi	r3,264
  806b38:	18cd1c04 	addi	r3,r3,13424
  806b3c:	18800023 	ldbuio	r2,0(r3)
  806b40:	10803fcc 	andi	r2,r2,255
  806b44:	1080201c 	xori	r2,r2,128
  806b48:	10bfe004 	addi	r2,r2,-128
  806b4c:	1105d83a 	sra	r2,r2,r4
  806b50:	0084303a 	nor	r2,zero,r2
}
  806b54:	1080004c 	andi	r2,r2,1
  806b58:	f800283a 	ret

00806b5c <initPushKeyController>:

bool isBitSet(char num, int bit) {
	return num & 1 << bit;
}

struct PushKeyController* initPushKeyController(void) {
  806b5c:	defffe04 	addi	sp,sp,-8
	struct PushKeyController* this = (struct PushKeyController*) malloc(
			sizeof(struct PushKeyController));
  806b60:	01000104 	movi	r4,4

bool isBitSet(char num, int bit) {
	return num & 1 << bit;
}

struct PushKeyController* initPushKeyController(void) {
  806b64:	dfc00115 	stw	ra,4(sp)
  806b68:	dc400015 	stw	r17,0(sp)
	struct PushKeyController* this = (struct PushKeyController*) malloc(
			sizeof(struct PushKeyController));
  806b6c:	080bb6c0 	call	80bb6c <malloc>
	this->keys_changed = 0;

	alt_irq_register(KEYS_IRQ, this, (void*) push_key_ISR);
  806b70:	100b883a 	mov	r5,r2
  806b74:	01000084 	movi	r4,2
  806b78:	01802034 	movhi	r6,128
  806b7c:	31970c04 	addi	r6,r6,23600
}

struct PushKeyController* initPushKeyController(void) {
	struct PushKeyController* this = (struct PushKeyController*) malloc(
			sizeof(struct PushKeyController));
	this->keys_changed = 0;
  806b80:	10000015 	stw	zero,0(r2)
	return num & 1 << bit;
}

struct PushKeyController* initPushKeyController(void) {
	struct PushKeyController* this = (struct PushKeyController*) malloc(
			sizeof(struct PushKeyController));
  806b84:	1023883a 	mov	r17,r2
	this->keys_changed = 0;

	alt_irq_register(KEYS_IRQ, this, (void*) push_key_ISR);
  806b88:	08154540 	call	815454 <alt_irq_register>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  806b8c:	00c04234 	movhi	r3,264
  806b90:	18cd1f04 	addi	r3,r3,13436
  806b94:	18000035 	stwio	zero,0(r3)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 15);
  806b98:	010003c4 	movi	r4,15
  806b9c:	00804234 	movhi	r2,264
  806ba0:	108d1e04 	addi	r2,r2,13432
  806ba4:	11000035 	stwio	r4,0(r2)
	return this;
}
  806ba8:	8805883a 	mov	r2,r17
  806bac:	dfc00117 	ldw	ra,4(sp)
  806bb0:	dc400017 	ldw	r17,0(sp)
  806bb4:	dec00204 	addi	sp,sp,8
  806bb8:	f800283a 	ret

00806bbc <wasKeyJustReleased>:

/**
 * Returns true if the key was released when the last ISR was called
 */
bool wasKeyJustReleased(struct PushKeyController* this, int key) {
	return isBitSet(this->keys_changed, key) && isKeyUp(key);
  806bbc:	20800017 	ldw	r2,0(r4)
  806bc0:	0007883a 	mov	r3,zero
  806bc4:	10803fcc 	andi	r2,r2,255
  806bc8:	1080201c 	xori	r2,r2,128
  806bcc:	10bfe004 	addi	r2,r2,-128
  806bd0:	1145d83a 	sra	r2,r2,r5
  806bd4:	1080004c 	andi	r2,r2,1
  806bd8:	10000826 	beq	r2,zero,806bfc <wasKeyJustReleased+0x40>
/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is up
 */
bool isKeyUp(int key) {
	return isBitSet(IORD_8DIRECT(KEYS_BASE, 0), key);
  806bdc:	00c04234 	movhi	r3,264
  806be0:	18cd1c04 	addi	r3,r3,13424
  806be4:	18800023 	ldbuio	r2,0(r3)
  806be8:	10803fcc 	andi	r2,r2,255
  806bec:	1080201c 	xori	r2,r2,128
  806bf0:	10bfe004 	addi	r2,r2,-128
  806bf4:	1145d83a 	sra	r2,r2,r5
  806bf8:	10c0004c 	andi	r3,r2,1
/**
 * Returns true if the key was released when the last ISR was called
 */
bool wasKeyJustReleased(struct PushKeyController* this, int key) {
	return isBitSet(this->keys_changed, key) && isKeyUp(key);
}
  806bfc:	1805883a 	mov	r2,r3
  806c00:	f800283a 	ret

00806c04 <wasKeyJustPressed>:

/**
 * Returns true if the key was pressed when the last ISR was called
 */
bool wasKeyJustPressed(struct PushKeyController* this, int key) {
	return isBitSet(this->keys_changed, key) && isKeyDown(key);
  806c04:	20800017 	ldw	r2,0(r4)
  806c08:	0007883a 	mov	r3,zero
  806c0c:	10803fcc 	andi	r2,r2,255
  806c10:	1080201c 	xori	r2,r2,128
  806c14:	10bfe004 	addi	r2,r2,-128
  806c18:	1145d83a 	sra	r2,r2,r5
  806c1c:	1080004c 	andi	r2,r2,1
  806c20:	10000926 	beq	r2,zero,806c48 <wasKeyJustPressed+0x44>
/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is down
 */
bool isKeyDown(int key) {
	return !isBitSet(IORD_8DIRECT(KEYS_BASE, 0), key);
  806c24:	00c04234 	movhi	r3,264
  806c28:	18cd1c04 	addi	r3,r3,13424
  806c2c:	18800023 	ldbuio	r2,0(r3)
  806c30:	10803fcc 	andi	r2,r2,255
  806c34:	1080201c 	xori	r2,r2,128
  806c38:	10bfe004 	addi	r2,r2,-128
  806c3c:	1145d83a 	sra	r2,r2,r5
  806c40:	1080004c 	andi	r2,r2,1
  806c44:	10c0005c 	xori	r3,r2,1
/**
 * Returns true if the key was pressed when the last ISR was called
 */
bool wasKeyJustPressed(struct PushKeyController* this, int key) {
	return isBitSet(this->keys_changed, key) && isKeyDown(key);
}
  806c48:	1805883a 	mov	r2,r3
  806c4c:	f800283a 	ret

00806c50 <containsValue>:
	this->head = NULL;
	return this;
}

int containsValue(struct Queue* this, int val) {
	if(this == NULL) return -1;
  806c50:	2000021e 	bne	r4,zero,806c5c <containsValue+0xc>
	int i;
	int size = this->size;
	struct QueueData* temp = this->head;
	for(i = 0; i < size; i++) {
  806c54:	00bfffc4 	movi	r2,-1
		}
		temp = temp->next;
	}
	temp = NULL;
	return -1;
}
  806c58:	f800283a 	ret
}

int containsValue(struct Queue* this, int val) {
	if(this == NULL) return -1;
	int i;
	int size = this->size;
  806c5c:	21c00017 	ldw	r7,0(r4)
	struct QueueData* temp = this->head;
  806c60:	21000117 	ldw	r4,4(r4)
	for(i = 0; i < size; i++) {
  806c64:	01fffb0e 	bge	zero,r7,806c54 <containsValue+0x4>
		if(*((int*)(temp->obj)) == val) {
  806c68:	20800217 	ldw	r2,8(r4)
  806c6c:	10c00017 	ldw	r3,0(r2)
  806c70:	28c00726 	beq	r5,r3,806c90 <containsValue+0x40>
			temp = NULL;
			queue_lock = 0;
			return 0;
  806c74:	000d883a 	mov	r6,zero
int containsValue(struct Queue* this, int val) {
	if(this == NULL) return -1;
	int i;
	int size = this->size;
	struct QueueData* temp = this->head;
	for(i = 0; i < size; i++) {
  806c78:	31800044 	addi	r6,r6,1
		if(*((int*)(temp->obj)) == val) {
			temp = NULL;
			queue_lock = 0;
			return 0;
		}
		temp = temp->next;
  806c7c:	21000017 	ldw	r4,0(r4)
int containsValue(struct Queue* this, int val) {
	if(this == NULL) return -1;
	int i;
	int size = this->size;
	struct QueueData* temp = this->head;
	for(i = 0; i < size; i++) {
  806c80:	39bff426 	beq	r7,r6,806c54 <containsValue+0x4>
		if(*((int*)(temp->obj)) == val) {
  806c84:	20800217 	ldw	r2,8(r4)
  806c88:	10c00017 	ldw	r3,0(r2)
  806c8c:	197ffa1e 	bne	r3,r5,806c78 <containsValue+0x28>
			temp = NULL;
			queue_lock = 0;
  806c90:	0005883a 	mov	r2,zero
  806c94:	d0275c15 	stw	zero,-25232(gp)
  806c98:	f800283a 	ret

00806c9c <initQueue>:
 */

#include "Queue.h"
int queue_lock = 0;

struct Queue* initQueue() {
  806c9c:	deffff04 	addi	sp,sp,-4
	struct Queue* this = (struct Queue*)malloc(sizeof(struct Queue));
  806ca0:	01000304 	movi	r4,12
 */

#include "Queue.h"
int queue_lock = 0;

struct Queue* initQueue() {
  806ca4:	dfc00015 	stw	ra,0(sp)
	struct Queue* this = (struct Queue*)malloc(sizeof(struct Queue));
  806ca8:	080bb6c0 	call	80bb6c <malloc>
	this->size = 0;
	this->tail = NULL;
	this->head = NULL;
  806cac:	10000115 	stw	zero,4(r2)
#include "Queue.h"
int queue_lock = 0;

struct Queue* initQueue() {
	struct Queue* this = (struct Queue*)malloc(sizeof(struct Queue));
	this->size = 0;
  806cb0:	10000015 	stw	zero,0(r2)
	this->tail = NULL;
  806cb4:	10000215 	stw	zero,8(r2)
	this->head = NULL;
	return this;
}
  806cb8:	dfc00017 	ldw	ra,0(sp)
  806cbc:	dec00104 	addi	sp,sp,4
  806cc0:	f800283a 	ret

00806cc4 <enqueue>:
		temp = temp->next;
	}
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
  806cc4:	defffc04 	addi	sp,sp,-16
  806cc8:	dc000015 	stw	r16,0(sp)
  806ccc:	2021883a 	mov	r16,r4
  806cd0:	dc400115 	stw	r17,4(sp)
  806cd4:	dfc00315 	stw	ra,12(sp)
  806cd8:	dc800215 	stw	r18,8(sp)
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
  806cdc:	010020b4 	movhi	r4,130
  806ce0:	2100bd04 	addi	r4,r4,756
		temp = temp->next;
	}
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
  806ce4:	2823883a 	mov	r17,r5
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
  806ce8:	80002226 	beq	r16,zero,806d74 <enqueue+0xb0>
  806cec:	28002126 	beq	r5,zero,806d74 <enqueue+0xb0>
  806cf0:	84800217 	ldw	r18,8(r16)
  806cf4:	90800217 	ldw	r2,8(r18)
  806cf8:	28801e26 	beq	r5,r2,806d74 <enqueue+0xb0>
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
	if(this->size == 0) {
  806cfc:	80c00017 	ldw	r3,0(r16)
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
  806d00:	00800044 	movi	r2,1
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  806d04:	01000304 	movi	r4,12
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
  806d08:	d0a75c15 	stw	r2,-25232(gp)
	if(this->size == 0) {
  806d0c:	1800101e 	bne	r3,zero,806d50 <enqueue+0x8c>
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
  806d10:	080bb6c0 	call	80bb6c <malloc>
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
  806d14:	80800215 	stw	r2,8(r16)
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
	if(this->size == 0) {
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
  806d18:	80800115 	stw	r2,4(r16)
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
  806d1c:	14400215 	stw	r17,8(r2)
		return;
	}
	queue_lock = 1;
	if(this->size == 0) {
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
		this->head->next = NULL;
  806d20:	10000015 	stw	zero,0(r2)
		this->head->prev = NULL;
  806d24:	10000115 	stw	zero,4(r2)
		this->tail->next->prev = this->tail;
		this->tail = this->tail->next;
		this->tail->obj = obj;
		this->tail->next = NULL;
	}
	this->size++;
  806d28:	80800017 	ldw	r2,0(r16)
  806d2c:	10800044 	addi	r2,r2,1
  806d30:	80800015 	stw	r2,0(r16)
	queue_lock = 0;
  806d34:	d0275c15 	stw	zero,-25232(gp)
}
  806d38:	dfc00317 	ldw	ra,12(sp)
  806d3c:	dc800217 	ldw	r18,8(sp)
  806d40:	dc400117 	ldw	r17,4(sp)
  806d44:	dc000017 	ldw	r16,0(sp)
  806d48:	dec00404 	addi	sp,sp,16
  806d4c:	f800283a 	ret
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  806d50:	080bb6c0 	call	80bb6c <malloc>
  806d54:	90800015 	stw	r2,0(r18)
		this->tail->next->prev = this->tail;
  806d58:	80c00217 	ldw	r3,8(r16)
  806d5c:	18800017 	ldw	r2,0(r3)
  806d60:	10c00115 	stw	r3,4(r2)
		this->tail = this->tail->next;
  806d64:	80800215 	stw	r2,8(r16)
		this->tail->obj = obj;
  806d68:	14400215 	stw	r17,8(r2)
		this->tail->next = NULL;
  806d6c:	10000015 	stw	zero,0(r2)
  806d70:	003fed06 	br	806d28 <enqueue+0x64>
	}
	this->size++;
	queue_lock = 0;
}
  806d74:	dfc00317 	ldw	ra,12(sp)
  806d78:	dc800217 	ldw	r18,8(sp)
  806d7c:	dc400117 	ldw	r17,4(sp)
  806d80:	dc000017 	ldw	r16,0(sp)
  806d84:	dec00404 	addi	sp,sp,16
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
  806d88:	080c5101 	jmpi	80c510 <puts>

00806d8c <killQueueData>:
	this->size--;
	queue_lock = 0;
	return result;
}

void killQueueData(struct QueueData** this) {
  806d8c:	defffe04 	addi	sp,sp,-8
  806d90:	dc000015 	stw	r16,0(sp)
  806d94:	dfc00115 	stw	ra,4(sp)
  806d98:	2021883a 	mov	r16,r4
	if(this == NULL) return;
  806d9c:	20000826 	beq	r4,zero,806dc0 <killQueueData+0x34>
	(*this)->next =NULL;
  806da0:	20800017 	ldw	r2,0(r4)
  806da4:	10000015 	stw	zero,0(r2)
	(*this)->prev = NULL;
  806da8:	20c00017 	ldw	r3,0(r4)
  806dac:	18000115 	stw	zero,4(r3)
	(*this)->obj = NULL;
  806db0:	21000017 	ldw	r4,0(r4)
  806db4:	20000215 	stw	zero,8(r4)
	free(*this);
  806db8:	080bb580 	call	80bb58 <free>
	*this = NULL;
  806dbc:	80000015 	stw	zero,0(r16)
}
  806dc0:	dfc00117 	ldw	ra,4(sp)
  806dc4:	dc000017 	ldw	r16,0(sp)
  806dc8:	dec00204 	addi	sp,sp,8
  806dcc:	f800283a 	ret

00806dd0 <dequeue>:
	}
	this->size++;
	queue_lock = 0;
}

void* dequeue(struct Queue* this) {
  806dd0:	defffd04 	addi	sp,sp,-12
  806dd4:	dc000015 	stw	r16,0(sp)
  806dd8:	2021883a 	mov	r16,r4
  806ddc:	dc400115 	stw	r17,4(sp)
  806de0:	dfc00215 	stw	ra,8(sp)
	if(this == NULL || this->size <= 0) {
		printf("dequeue returns null\n");
  806de4:	010020b4 	movhi	r4,130
  806de8:	2100c104 	addi	r4,r4,772
  806dec:	0023883a 	mov	r17,zero
	this->size++;
	queue_lock = 0;
}

void* dequeue(struct Queue* this) {
	if(this == NULL || this->size <= 0) {
  806df0:	80001b26 	beq	r16,zero,806e60 <dequeue+0x90>
  806df4:	80800017 	ldw	r2,0(r16)
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
  806df8:	00c00044 	movi	r3,1
	this->size++;
	queue_lock = 0;
}

void* dequeue(struct Queue* this) {
	if(this == NULL || this->size <= 0) {
  806dfc:	0080180e 	bge	zero,r2,806e60 <dequeue+0x90>
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
  806e00:	d0e75c15 	stw	r3,-25232(gp)
	if(this->size == 1)
  806e04:	10c01426 	beq	r2,r3,806e58 <dequeue+0x88>
		this->tail = NULL;
	struct QueueData* temp = this->head;
  806e08:	80800117 	ldw	r2,4(r16)
	void* result = this->head->obj;
	this->head = this->head->next;
  806e0c:	10c00017 	ldw	r3,0(r2)
	}
	queue_lock = 1;
	if(this->size == 1)
		this->tail = NULL;
	struct QueueData* temp = this->head;
	void* result = this->head->obj;
  806e10:	14400217 	ldw	r17,8(r2)
	this->head = this->head->next;
	temp->obj = NULL;
	if(this->head != NULL)
		this->head->prev = NULL;
	temp->next = NULL;
	free(temp);
  806e14:	1009883a 	mov	r4,r2
	queue_lock = 1;
	if(this->size == 1)
		this->tail = NULL;
	struct QueueData* temp = this->head;
	void* result = this->head->obj;
	this->head = this->head->next;
  806e18:	80c00115 	stw	r3,4(r16)
	temp->obj = NULL;
  806e1c:	10000215 	stw	zero,8(r2)
	if(this->head != NULL)
  806e20:	18000126 	beq	r3,zero,806e28 <dequeue+0x58>
		this->head->prev = NULL;
  806e24:	18000115 	stw	zero,4(r3)
	temp->next = NULL;
  806e28:	10000015 	stw	zero,0(r2)
	free(temp);
  806e2c:	080bb580 	call	80bb58 <free>
	temp = NULL;
	this->size--;
  806e30:	80800017 	ldw	r2,0(r16)
  806e34:	10bfffc4 	addi	r2,r2,-1
  806e38:	80800015 	stw	r2,0(r16)
	queue_lock = 0;
	return result;
}
  806e3c:	8805883a 	mov	r2,r17
		this->head->prev = NULL;
	temp->next = NULL;
	free(temp);
	temp = NULL;
	this->size--;
	queue_lock = 0;
  806e40:	d0275c15 	stw	zero,-25232(gp)
	return result;
}
  806e44:	dfc00217 	ldw	ra,8(sp)
  806e48:	dc400117 	ldw	r17,4(sp)
  806e4c:	dc000017 	ldw	r16,0(sp)
  806e50:	dec00304 	addi	sp,sp,12
  806e54:	f800283a 	ret
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
	if(this->size == 1)
		this->tail = NULL;
  806e58:	80000215 	stw	zero,8(r16)
  806e5c:	003fea06 	br	806e08 <dequeue+0x38>
	queue_lock = 0;
}

void* dequeue(struct Queue* this) {
	if(this == NULL || this->size <= 0) {
		printf("dequeue returns null\n");
  806e60:	080c5100 	call	80c510 <puts>
	free(temp);
	temp = NULL;
	this->size--;
	queue_lock = 0;
	return result;
}
  806e64:	8805883a 	mov	r2,r17
  806e68:	dfc00217 	ldw	ra,8(sp)
  806e6c:	dc400117 	ldw	r17,4(sp)
  806e70:	dc000017 	ldw	r16,0(sp)
  806e74:	dec00304 	addi	sp,sp,12
  806e78:	f800283a 	ret

00806e7c <dequeueValue>:

void* dequeueValue(struct Queue* this, int value) {
  806e7c:	defffd04 	addi	sp,sp,-12
  806e80:	dc000015 	stw	r16,0(sp)
  806e84:	dfc00215 	stw	ra,8(sp)
  806e88:	dc400115 	stw	r17,4(sp)
  806e8c:	2021883a 	mov	r16,r4
	if(this == NULL || this->size <= 0) {
  806e90:	20003326 	beq	r4,zero,806f60 <dequeueValue+0xe4>
  806e94:	20800017 	ldw	r2,0(r4)
  806e98:	0080310e 	bge	zero,r2,806f60 <dequeueValue+0xe4>
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
	struct QueueData* temp = this->head;
  806e9c:	21c00117 	ldw	r7,4(r4)
void* dequeueValue(struct Queue* this, int value) {
	if(this == NULL || this->size <= 0) {
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
  806ea0:	00800044 	movi	r2,1
  806ea4:	d0a75c15 	stw	r2,-25232(gp)
	struct QueueData* temp = this->head;
	void* result;

	while(*((int*)(temp->obj)) != value) {
  806ea8:	38c00217 	ldw	r3,8(r7)
  806eac:	18800017 	ldw	r2,0(r3)
  806eb0:	28803526 	beq	r5,r2,806f88 <dequeueValue+0x10c>
		if(temp != this->tail)
  806eb4:	21800217 	ldw	r6,8(r4)
  806eb8:	39801f26 	beq	r7,r6,806f38 <dequeueValue+0xbc>
  806ebc:	3809883a 	mov	r4,r7
  806ec0:	00000106 	br	806ec8 <dequeueValue+0x4c>
  806ec4:	21801c26 	beq	r4,r6,806f38 <dequeueValue+0xbc>
			temp = temp->next;
  806ec8:	21000017 	ldw	r4,0(r4)
	}
	queue_lock = 1;
	struct QueueData* temp = this->head;
	void* result;

	while(*((int*)(temp->obj)) != value) {
  806ecc:	20c00217 	ldw	r3,8(r4)
  806ed0:	18800017 	ldw	r2,0(r3)
  806ed4:	117ffb1e 	bne	r2,r5,806ec4 <dequeueValue+0x48>
		else {
			printf("dequeueValue cannot find the value\n");
			return NULL;
		}
	}
	if(temp == this->head) {
  806ed8:	39002d26 	beq	r7,r4,806f90 <dequeueValue+0x114>
		this->head = temp->next;
	}
	if(temp == this->tail) {
  806edc:	31002f26 	beq	r6,r4,806f9c <dequeueValue+0x120>
		this->tail = temp->prev;
	}
	if(temp->prev != NULL)
  806ee0:	21400117 	ldw	r5,4(r4)
  806ee4:	28000226 	beq	r5,zero,806ef0 <dequeueValue+0x74>
		temp->prev->next = temp->next;
  806ee8:	20800017 	ldw	r2,0(r4)
  806eec:	28800015 	stw	r2,0(r5)
	if(temp->next != NULL)
  806ef0:	20800017 	ldw	r2,0(r4)
  806ef4:	10000126 	beq	r2,zero,806efc <dequeueValue+0x80>
		temp->next->prev = temp->prev;
  806ef8:	11400115 	stw	r5,4(r2)
	return result;
}

void killQueueData(struct QueueData** this) {
	if(this == NULL) return;
	(*this)->next =NULL;
  806efc:	20000015 	stw	zero,0(r4)
	(*this)->prev = NULL;
  806f00:	20000115 	stw	zero,4(r4)
	(*this)->obj = NULL;
  806f04:	20000215 	stw	zero,8(r4)
		temp->prev->next = temp->next;
	if(temp->next != NULL)
		temp->next->prev = temp->prev;
	temp->next = NULL;
	temp->prev = NULL;
	result = temp->obj;
  806f08:	1823883a 	mov	r17,r3
void killQueueData(struct QueueData** this) {
	if(this == NULL) return;
	(*this)->next =NULL;
	(*this)->prev = NULL;
	(*this)->obj = NULL;
	free(*this);
  806f0c:	080bb580 	call	80bb58 <free>
		temp->next->prev = temp->prev;
	temp->next = NULL;
	temp->prev = NULL;
	result = temp->obj;
	killQueueData(&temp);
	this->size--;
  806f10:	80800017 	ldw	r2,0(r16)
  806f14:	10bfffc4 	addi	r2,r2,-1
  806f18:	80800015 	stw	r2,0(r16)
	queue_lock = 0;
	return result;
}
  806f1c:	8805883a 	mov	r2,r17
	temp->next = NULL;
	temp->prev = NULL;
	result = temp->obj;
	killQueueData(&temp);
	this->size--;
	queue_lock = 0;
  806f20:	d0275c15 	stw	zero,-25232(gp)
	return result;
}
  806f24:	dfc00217 	ldw	ra,8(sp)
  806f28:	dc400117 	ldw	r17,4(sp)
  806f2c:	dc000017 	ldw	r16,0(sp)
  806f30:	dec00304 	addi	sp,sp,12
  806f34:	f800283a 	ret

	while(*((int*)(temp->obj)) != value) {
		if(temp != this->tail)
			temp = temp->next;
		else {
			printf("dequeueValue cannot find the value\n");
  806f38:	010020b4 	movhi	r4,130
  806f3c:	2100c704 	addi	r4,r4,796
  806f40:	080c5100 	call	80c510 <puts>
  806f44:	0023883a 	mov	r17,zero
	result = temp->obj;
	killQueueData(&temp);
	this->size--;
	queue_lock = 0;
	return result;
}
  806f48:	8805883a 	mov	r2,r17
  806f4c:	dfc00217 	ldw	ra,8(sp)
  806f50:	dc400117 	ldw	r17,4(sp)
  806f54:	dc000017 	ldw	r16,0(sp)
  806f58:	dec00304 	addi	sp,sp,12
  806f5c:	f800283a 	ret
	return result;
}

void* dequeueValue(struct Queue* this, int value) {
	if(this == NULL || this->size <= 0) {
		printf("dequeue returns null\n");
  806f60:	010020b4 	movhi	r4,130
  806f64:	2100c104 	addi	r4,r4,772
  806f68:	080c5100 	call	80c510 <puts>
  806f6c:	0023883a 	mov	r17,zero
	result = temp->obj;
	killQueueData(&temp);
	this->size--;
	queue_lock = 0;
	return result;
}
  806f70:	8805883a 	mov	r2,r17
  806f74:	dfc00217 	ldw	ra,8(sp)
  806f78:	dc400117 	ldw	r17,4(sp)
  806f7c:	dc000017 	ldw	r16,0(sp)
  806f80:	dec00304 	addi	sp,sp,12
  806f84:	f800283a 	ret
  806f88:	21800217 	ldw	r6,8(r4)
	}
	queue_lock = 1;
	struct QueueData* temp = this->head;
	void* result;

	while(*((int*)(temp->obj)) != value) {
  806f8c:	3809883a 	mov	r4,r7
			printf("dequeueValue cannot find the value\n");
			return NULL;
		}
	}
	if(temp == this->head) {
		this->head = temp->next;
  806f90:	38800017 	ldw	r2,0(r7)
  806f94:	80800115 	stw	r2,4(r16)
  806f98:	003fd006 	br	806edc <dequeueValue+0x60>
	}
	if(temp == this->tail) {
		this->tail = temp->prev;
  806f9c:	20800117 	ldw	r2,4(r4)
  806fa0:	80800215 	stw	r2,8(r16)
  806fa4:	003fce06 	br	806ee0 <dequeueValue+0x64>

00806fa8 <addPacketsLengthToQueue>:
	(*this)->obj = NULL;
	free(*this);
	*this = NULL;
}

void addPacketsLengthToQueue(int packet_size) {
  806fa8:	defffc04 	addi	sp,sp,-16
  806fac:	dc800215 	stw	r18,8(sp)
  806fb0:	2025883a 	mov	r18,r4
	int* num_packets = (int*)malloc(sizeof(int));
  806fb4:	01000104 	movi	r4,4
	(*this)->obj = NULL;
	free(*this);
	*this = NULL;
}

void addPacketsLengthToQueue(int packet_size) {
  806fb8:	dc400115 	stw	r17,4(sp)
  806fbc:	dfc00315 	stw	ra,12(sp)
  806fc0:	dc000015 	stw	r16,0(sp)
	int* num_packets = (int*)malloc(sizeof(int));
  806fc4:	080bb6c0 	call	80bb6c <malloc>
  806fc8:	1023883a 	mov	r17,r2
	if(num_packets == NULL) {
		printf("NO MEMORY\n");
  806fcc:	010020b4 	movhi	r4,130
  806fd0:	2100d004 	addi	r4,r4,832
	*this = NULL;
}

void addPacketsLengthToQueue(int packet_size) {
	int* num_packets = (int*)malloc(sizeof(int));
	if(num_packets == NULL) {
  806fd4:	10003126 	beq	r2,zero,80709c <addPacketsLengthToQueue+0xf4>
		printf("NO MEMORY\n");
	}
	*num_packets = packet_size;
	enqueue(com.pendingPacketSize, (void*)num_packets);
  806fd8:	008020f4 	movhi	r2,131
  806fdc:	10bb0504 	addi	r2,r2,-5100
  806fe0:	14000f17 	ldw	r16,60(r2)
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
  806fe4:	010020b4 	movhi	r4,130
  806fe8:	2100bd04 	addi	r4,r4,756
void addPacketsLengthToQueue(int packet_size) {
	int* num_packets = (int*)malloc(sizeof(int));
	if(num_packets == NULL) {
		printf("NO MEMORY\n");
	}
	*num_packets = packet_size;
  806fec:	8c800015 	stw	r18,0(r17)
	}
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
  806ff0:	80002426 	beq	r16,zero,807084 <addPacketsLengthToQueue+0xdc>
  806ff4:	84800217 	ldw	r18,8(r16)
  806ff8:	90800217 	ldw	r2,8(r18)
  806ffc:	88802126 	beq	r17,r2,807084 <addPacketsLengthToQueue+0xdc>
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
	if(this->size == 0) {
  807000:	80c00017 	ldw	r3,0(r16)
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
  807004:	00800044 	movi	r2,1
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  807008:	01000304 	movi	r4,12
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
  80700c:	d0a75c15 	stw	r2,-25232(gp)
	if(this->size == 0) {
  807010:	1800111e 	bne	r3,zero,807058 <addPacketsLengthToQueue+0xb0>
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
  807014:	080bb6c0 	call	80bb6c <malloc>
  807018:	80800115 	stw	r2,4(r16)
		this->head->next = NULL;
  80701c:	10000015 	stw	zero,0(r2)
		this->head->prev = NULL;
  807020:	10000115 	stw	zero,4(r2)
		this->head->obj = obj;
		this->tail = this->head;
  807024:	80c00117 	ldw	r3,4(r16)
	queue_lock = 1;
	if(this->size == 0) {
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
  807028:	14400215 	stw	r17,8(r2)
		this->tail = this->head;
  80702c:	80c00215 	stw	r3,8(r16)
		this->tail->next->prev = this->tail;
		this->tail = this->tail->next;
		this->tail->obj = obj;
		this->tail->next = NULL;
	}
	this->size++;
  807030:	80800017 	ldw	r2,0(r16)
  807034:	10800044 	addi	r2,r2,1
  807038:	80800015 	stw	r2,0(r16)
	queue_lock = 0;
  80703c:	d0275c15 	stw	zero,-25232(gp)
		printf("NO MEMORY\n");
	}
	*num_packets = packet_size;
	enqueue(com.pendingPacketSize, (void*)num_packets);
	num_packets = NULL;
}
  807040:	dfc00317 	ldw	ra,12(sp)
  807044:	dc800217 	ldw	r18,8(sp)
  807048:	dc400117 	ldw	r17,4(sp)
  80704c:	dc000017 	ldw	r16,0(sp)
  807050:	dec00404 	addi	sp,sp,16
  807054:	f800283a 	ret
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  807058:	080bb6c0 	call	80bb6c <malloc>
  80705c:	90800015 	stw	r2,0(r18)
		this->tail->next->prev = this->tail;
  807060:	81000217 	ldw	r4,8(r16)
  807064:	20800017 	ldw	r2,0(r4)
  807068:	11000115 	stw	r4,4(r2)
		this->tail = this->tail->next;
  80706c:	80c00217 	ldw	r3,8(r16)
  807070:	18800017 	ldw	r2,0(r3)
  807074:	80800215 	stw	r2,8(r16)
		this->tail->obj = obj;
  807078:	14400215 	stw	r17,8(r2)
		this->tail->next = NULL;
  80707c:	10000015 	stw	zero,0(r2)
  807080:	003feb06 	br	807030 <addPacketsLengthToQueue+0x88>
		printf("NO MEMORY\n");
	}
	*num_packets = packet_size;
	enqueue(com.pendingPacketSize, (void*)num_packets);
	num_packets = NULL;
}
  807084:	dfc00317 	ldw	ra,12(sp)
  807088:	dc800217 	ldw	r18,8(sp)
  80708c:	dc400117 	ldw	r17,4(sp)
  807090:	dc000017 	ldw	r16,0(sp)
  807094:	dec00404 	addi	sp,sp,16
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
  807098:	080c5101 	jmpi	80c510 <puts>
}

void addPacketsLengthToQueue(int packet_size) {
	int* num_packets = (int*)malloc(sizeof(int));
	if(num_packets == NULL) {
		printf("NO MEMORY\n");
  80709c:	080c5100 	call	80c510 <puts>
  8070a0:	003fcd06 	br	806fd8 <addPacketsLengthToQueue+0x30>

008070a4 <switchAck>:
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  8070a4:	00c020f4 	movhi	r3,131
  8070a8:	18fb0504 	addi	r3,r3,-5100
  8070ac:	18801517 	ldw	r2,84(r3)
  8070b0:	1005003a 	cmpeq	r2,r2,zero
  8070b4:	18801515 	stw	r2,84(r3)
}
  8070b8:	f800283a 	ret

008070bc <setStates>:
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8070bc:	00c020f4 	movhi	r3,131
  8070c0:	18fb0504 	addi	r3,r3,-5100
  8070c4:	19801217 	ldw	r6,72(r3)
  8070c8:	19401317 	ldw	r5,76(r3)
  8070cc:	30800017 	ldw	r2,0(r6)
  8070d0:	28800015 	stw	r2,0(r5)
	*(com.stateMachine) = s;
  8070d4:	31000015 	stw	r4,0(r6)
	//printf("past state: %d\n", *(com.pastState));
	//printf("current state: %d\n", *(com.stateMachine));
}
  8070d8:	f800283a 	ret

008070dc <sendRS232>:
	printf("WARNNING!! the connection has been reseted.\n");
}
/*
 * Send sequence of bytes to serial port
 */
void sendRS232(alt_up_rs232_dev *serial_dev, unsigned char* bytes, int size) {
  8070dc:	defffb04 	addi	sp,sp,-20
  8070e0:	dcc00315 	stw	r19,12(sp)
  8070e4:	dc800215 	stw	r18,8(sp)
  8070e8:	dc400115 	stw	r17,4(sp)
  8070ec:	dfc00415 	stw	ra,16(sp)
  8070f0:	dc000015 	stw	r16,0(sp)
  8070f4:	3027883a 	mov	r19,r6
  8070f8:	2025883a 	mov	r18,r4
  8070fc:	2823883a 	mov	r17,r5
	int i;
	for(i = 0; i < size; i++) {
  807100:	0180070e 	bge	zero,r6,807120 <sendRS232+0x44>
  807104:	0021883a 	mov	r16,zero
		alt_up_rs232_write_data(serial_dev, bytes[i]);
  807108:	8c05883a 	add	r2,r17,r16
  80710c:	11400003 	ldbu	r5,0(r2)
/*
 * Send sequence of bytes to serial port
 */
void sendRS232(alt_up_rs232_dev *serial_dev, unsigned char* bytes, int size) {
	int i;
	for(i = 0; i < size; i++) {
  807110:	84000044 	addi	r16,r16,1
		alt_up_rs232_write_data(serial_dev, bytes[i]);
  807114:	9009883a 	mov	r4,r18
  807118:	0818c980 	call	818c98 <alt_up_rs232_write_data>
/*
 * Send sequence of bytes to serial port
 */
void sendRS232(alt_up_rs232_dev *serial_dev, unsigned char* bytes, int size) {
	int i;
	for(i = 0; i < size; i++) {
  80711c:	9c3ffa1e 	bne	r19,r16,807108 <sendRS232+0x2c>
		alt_up_rs232_write_data(serial_dev, bytes[i]);
	}
}
  807120:	dfc00417 	ldw	ra,16(sp)
  807124:	dcc00317 	ldw	r19,12(sp)
  807128:	dc800217 	ldw	r18,8(sp)
  80712c:	dc400117 	ldw	r17,4(sp)
  807130:	dc000017 	ldw	r16,0(sp)
  807134:	dec00504 	addi	sp,sp,20
  807138:	f800283a 	ret

0080713c <updateAcknowledge>:
		switchAck();
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
  80713c:	defffd04 	addi	sp,sp,-12
  807140:	dc400115 	stw	r17,4(sp)
	if(com.host_ack == 0)
  807144:	044020f4 	movhi	r17,131
  807148:	8c7b0504 	addi	r17,r17,-5100
  80714c:	88801517 	ldw	r2,84(r17)
		switchAck();
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
  807150:	dc000015 	stw	r16,0(sp)
  807154:	dfc00215 	stw	ra,8(sp)
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  807158:	01400084 	movi	r5,2
		switchAck();
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
  80715c:	2021883a 	mov	r16,r4
	if(com.host_ack == 0)
  807160:	10000f1e 	bne	r2,zero,8071a0 <updateAcknowledge+0x64>
		*byte &= 0xFB; //XXXXX0XX
  807164:	20800003 	ldbu	r2,0(r4)
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  807168:	014000c4 	movi	r5,3
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
  80716c:	10803ecc 	andi	r2,r2,251
  807170:	20800005 	stb	r2,0(r4)
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  807174:	88801417 	ldw	r2,80(r17)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  807178:	8009883a 	mov	r4,r16
void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80717c:	10000d1e 	bne	r2,zero,8071b4 <updateAcknowledge+0x78>
		*byte &= 0xF7; //XXXX0XXX
  807180:	80800003 	ldbu	r2,0(r16)
  807184:	10803dcc 	andi	r2,r2,247
  807188:	80800005 	stb	r2,0(r16)
	else
		setBit(byte, 3); //XXXX1XXX
}
  80718c:	dfc00217 	ldw	ra,8(sp)
  807190:	dc400117 	ldw	r17,4(sp)
  807194:	dc000017 	ldw	r16,0(sp)
  807198:	dec00304 	addi	sp,sp,12
  80719c:	f800283a 	ret

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  8071a0:	08065180 	call	806518 <setBit>
	if(com.client_ack == 0)
  8071a4:	88801417 	ldw	r2,80(r17)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  8071a8:	8009883a 	mov	r4,r16
  8071ac:	014000c4 	movi	r5,3
void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  8071b0:	103ff326 	beq	r2,zero,807180 <updateAcknowledge+0x44>
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
}
  8071b4:	dfc00217 	ldw	ra,8(sp)
  8071b8:	dc400117 	ldw	r17,4(sp)
  8071bc:	dc000017 	ldw	r16,0(sp)
  8071c0:	dec00304 	addi	sp,sp,12
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  8071c4:	08065181 	jmpi	806518 <setBit>

008071c8 <send>:
/*
 * Send data to the other end
 * @parm data data to send; must be void*
 * @parm type type of data to send
 */
int send(void* data, enum msgType type) {
  8071c8:	defffe04 	addi	sp,sp,-8
  8071cc:	dfc00115 	stw	ra,4(sp)
  8071d0:	dc000015 	stw	r16,0(sp)
	if(data == NULL) return -1;
	switch(type) {
  8071d4:	00800044 	movi	r2,1
 * Send data to the other end
 * @parm data data to send; must be void*
 * @parm type type of data to send
 */
int send(void* data, enum msgType type) {
	if(data == NULL) return -1;
  8071d8:	2000061e 	bne	r4,zero,8071f4 <send+0x2c>
		break;
	default:
		return -1;
	}
	com.isRdySend = 1;
	return 0;
  8071dc:	00ffffc4 	movi	r3,-1
}
  8071e0:	1805883a 	mov	r2,r3
  8071e4:	dfc00117 	ldw	ra,4(sp)
  8071e8:	dc000017 	ldw	r16,0(sp)
  8071ec:	dec00204 	addi	sp,sp,8
  8071f0:	f800283a 	ret
	switch(type) {
	case STRING:
		encodeString((char*)data, com.sendPackets);
		break;
	case CMD:
		encodeCmd((struct Command*)data, com.sendPackets);
  8071f4:	040020f4 	movhi	r16,131
  8071f8:	843b0504 	addi	r16,r16,-5100
 * @parm data data to send; must be void*
 * @parm type type of data to send
 */
int send(void* data, enum msgType type) {
	if(data == NULL) return -1;
	switch(type) {
  8071fc:	28800e26 	beq	r5,r2,807238 <send+0x70>
  807200:	28800a36 	bltu	r5,r2,80722c <send+0x64>
  807204:	008000c4 	movi	r2,3
  807208:	117ff436 	bltu	r2,r5,8071dc <send+0x14>
	case AUDIO:
		break;
	default:
		return -1;
	}
	com.isRdySend = 1;
  80720c:	0007883a 	mov	r3,zero
  807210:	00800044 	movi	r2,1
  807214:	80801615 	stw	r2,88(r16)
	return 0;
}
  807218:	1805883a 	mov	r2,r3
  80721c:	dfc00117 	ldw	ra,4(sp)
  807220:	dc000017 	ldw	r16,0(sp)
  807224:	dec00204 	addi	sp,sp,8
  807228:	f800283a 	ret
 */
int send(void* data, enum msgType type) {
	if(data == NULL) return -1;
	switch(type) {
	case STRING:
		encodeString((char*)data, com.sendPackets);
  80722c:	81400d17 	ldw	r5,52(r16)
  807230:	0800cb00 	call	800cb0 <encodeString>
  807234:	003ff506 	br	80720c <send+0x44>
		break;
	case CMD:
		encodeCmd((struct Command*)data, com.sendPackets);
  807238:	81400d17 	ldw	r5,52(r16)
  80723c:	0800a4c0 	call	800a4c <encodeCmd>
  807240:	003ff206 	br	80720c <send+0x44>

00807244 <initRS232>:
struct alt_up_dev up_dev;

/*
 * Initialization of Serail communication
 */
struct RS232 initRS232(struct CmdScheduler* sched) {
  807244:	defff704 	addi	sp,sp,-36
  807248:	dfc00815 	stw	ra,32(sp)
  80724c:	ddc00715 	stw	r23,28(sp)
  807250:	dd800615 	stw	r22,24(sp)
  807254:	dd400515 	stw	r21,20(sp)
  807258:	282d883a 	mov	r22,r5
  80725c:	dd000415 	stw	r20,16(sp)
  807260:	dcc00315 	stw	r19,12(sp)
  807264:	dc800215 	stw	r18,8(sp)
  807268:	dc400115 	stw	r17,4(sp)
  80726c:	dc000015 	stw	r16,0(sp)
  807270:	2023883a 	mov	r17,r4
	struct RS232 com_local;
	com_local.receivePackets = initQueue();
  807274:	0806c9c0 	call	806c9c <initQueue>
  807278:	102f883a 	mov	r23,r2
	com_local.sendPackets = initQueue();
  80727c:	0806c9c0 	call	806c9c <initQueue>
  807280:	102b883a 	mov	r21,r2
	com_local.pendingPacketSize = initQueue();
  807284:	0806c9c0 	call	806c9c <initQueue>
	com_local.client_ack = 0;
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
  807288:	01000104 	movi	r4,4
 */
struct RS232 initRS232(struct CmdScheduler* sched) {
	struct RS232 com_local;
	com_local.receivePackets = initQueue();
	com_local.sendPackets = initQueue();
	com_local.pendingPacketSize = initQueue();
  80728c:	1029883a 	mov	r20,r2
	com_local.client_ack = 0;
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
  807290:	080bb6c0 	call	80bb6c <malloc>
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
  807294:	01000104 	movi	r4,4
	com_local.pendingPacketSize = initQueue();
	com_local.client_ack = 0;
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
  807298:	1027883a 	mov	r19,r2
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
  80729c:	080bb6c0 	call	80bb6c <malloc>
  8072a0:	1025883a 	mov	r18,r2
	com_local.num_packets = com_local.index_packets = 0;
	com_local.num_send_packets = com_local.index_send_packets = 0;
	com_local.packetBuf = NULL;
	com_local.scheduler = sched;

	printf("UART Initialization\n");
  8072a4:	010020b4 	movhi	r4,130
  8072a8:	2100d304 	addi	r4,r4,844
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
	*com_local.stateMachine = startInit;
  8072ac:	00800244 	movi	r2,9
	*com_local.pastState = startInit;
  8072b0:	90800015 	stw	r2,0(r18)
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
	*com_local.stateMachine = startInit;
  8072b4:	98800015 	stw	r2,0(r19)
	com_local.num_packets = com_local.index_packets = 0;
	com_local.num_send_packets = com_local.index_send_packets = 0;
	com_local.packetBuf = NULL;
	com_local.scheduler = sched;

	printf("UART Initialization\n");
  8072b8:	080c5100 	call	80c510 <puts>
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
  8072bc:	010020b4 	movhi	r4,130
  8072c0:	2100d804 	addi	r4,r4,864
  8072c4:	0818e780 	call	818e78 <alt_up_rs232_open_dev>
  8072c8:	1021883a 	mov	r16,r2
	up_dev.RS232_dev = uart;
  8072cc:	008020f4 	movhi	r2,131
  8072d0:	10bb2804 	addi	r2,r2,-4960

	printf("Clearing read buffer to start\n");
  8072d4:	010020b4 	movhi	r4,130
  8072d8:	2100dc04 	addi	r4,r4,880
	com_local.packetBuf = NULL;
	com_local.scheduler = sched;

	printf("UART Initialization\n");
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
	up_dev.RS232_dev = uart;
  8072dc:	14000015 	stw	r16,0(r2)

	printf("Clearing read buffer to start\n");
  8072e0:	080c5100 	call	80c510 <puts>
  8072e4:	00000106 	br	8072ec <initRS232+0xa8>
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
  8072e8:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
	printf("UART Initialization\n");
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
	up_dev.RS232_dev = uart;

	printf("Clearing read buffer to start\n");
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
  8072ec:	8009883a 	mov	r4,r16
  8072f0:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
  8072f4:	014020f4 	movhi	r5,131
  8072f8:	297b0504 	addi	r5,r5,-5100
  8072fc:	8009883a 	mov	r4,r16
  807300:	29800c84 	addi	r6,r5,50
	printf("UART Initialization\n");
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
	up_dev.RS232_dev = uart;

	printf("Clearing read buffer to start\n");
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
  807304:	103ff81e 	bne	r2,zero,8072e8 <initRS232+0xa4>
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
	}
	alt_alarm_start(&alarm, alt_ticks_per_second(), RS232_ISR, (void*)&up_dev);
  807308:	008020b4 	movhi	r2,130
  80730c:	1091d004 	addi	r2,r2,18240
  807310:	11400017 	ldw	r5,0(r2)
  807314:	01802034 	movhi	r6,128
  807318:	31975804 	addi	r6,r6,23904
  80731c:	01c020f4 	movhi	r7,131
  807320:	39fb2804 	addi	r7,r7,-4960
  807324:	010020f4 	movhi	r4,131
  807328:	213b2b04 	addi	r4,r4,-4948
  80732c:	08150440 	call	815044 <alt_alarm_start>

	printf("UART Initialization finished\n");
  807330:	010020b4 	movhi	r4,130
  807334:	2100e404 	addi	r4,r4,912
  807338:	080c5100 	call	80c510 <puts>
	return com_local;
}
  80733c:	8805883a 	mov	r2,r17
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
	}
	alt_alarm_start(&alarm, alt_ticks_per_second(), RS232_ISR, (void*)&up_dev);

	printf("UART Initialization finished\n");
	return com_local;
  807340:	8d801115 	stw	r22,68(r17)
  807344:	8c801315 	stw	r18,76(r17)
  807348:	8cc01215 	stw	r19,72(r17)
  80734c:	8d000f15 	stw	r20,60(r17)
  807350:	8d400d15 	stw	r21,52(r17)
  807354:	8dc00e15 	stw	r23,56(r17)
  807358:	88001015 	stw	zero,64(r17)
  80735c:	88001a15 	stw	zero,104(r17)
  807360:	88001b15 	stw	zero,108(r17)
  807364:	88001815 	stw	zero,96(r17)
  807368:	88001915 	stw	zero,100(r17)
  80736c:	88001715 	stw	zero,92(r17)
  807370:	88001615 	stw	zero,88(r17)
  807374:	88001515 	stw	zero,84(r17)
  807378:	88001415 	stw	zero,80(r17)
}
  80737c:	dfc00817 	ldw	ra,32(sp)
  807380:	ddc00717 	ldw	r23,28(sp)
  807384:	dd800617 	ldw	r22,24(sp)
  807388:	dd400517 	ldw	r21,20(sp)
  80738c:	dd000417 	ldw	r20,16(sp)
  807390:	dcc00317 	ldw	r19,12(sp)
  807394:	dc800217 	ldw	r18,8(sp)
  807398:	dc400117 	ldw	r17,4(sp)
  80739c:	dc000017 	ldw	r16,0(sp)
  8073a0:	dec00904 	addi	sp,sp,36
  8073a4:	f800283a 	ret

008073a8 <reset>:
	//printf("current state: %d\n", *(com.stateMachine));
}
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
  8073a8:	defffc04 	addi	sp,sp,-16
  8073ac:	dc400215 	stw	r17,8(sp)
  8073b0:	dc000115 	stw	r16,4(sp)
  8073b4:	2023883a 	mov	r17,r4
	printf("Starting reseting connection\n");
	com.client_ack = com.host_ack = 0;
  8073b8:	040020f4 	movhi	r16,131
  8073bc:	843b0504 	addi	r16,r16,-5100
}
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
	printf("Starting reseting connection\n");
  8073c0:	010020b4 	movhi	r4,130
  8073c4:	2100ec04 	addi	r4,r4,944
	//printf("current state: %d\n", *(com.stateMachine));
}
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
  8073c8:	dfc00315 	stw	ra,12(sp)
	printf("Starting reseting connection\n");
  8073cc:	080c5100 	call	80c510 <puts>
	com.num_packets = com.num_send_packets = 0;
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
  8073d0:	81000d17 	ldw	r4,52(r16)
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
	printf("Starting reseting connection\n");
	com.client_ack = com.host_ack = 0;
  8073d4:	80001515 	stw	zero,84(r16)
  8073d8:	80001415 	stw	zero,80(r16)
	com.failReceive = com.isRdySend = 0;
  8073dc:	80001615 	stw	zero,88(r16)
  8073e0:	80001715 	stw	zero,92(r16)
	com.num_packets = com.num_send_packets = 0;
  8073e4:	80001a15 	stw	zero,104(r16)
  8073e8:	80001815 	stw	zero,96(r16)
	com.index_packets = com.index_send_packets = 0;
  8073ec:	80001b15 	stw	zero,108(r16)
  8073f0:	80001915 	stw	zero,100(r16)

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
  8073f4:	20800017 	ldw	r2,0(r4)
	com.client_ack = com.host_ack = 0;
	com.failReceive = com.isRdySend = 0;
	com.num_packets = com.num_send_packets = 0;
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
  8073f8:	d8000015 	stw	zero,0(sp)
	int* len;
	while(com.sendPackets->size > 0) {
  8073fc:	00800e0e 	bge	zero,r2,807438 <reset+0x90>
		p = (struct Packet*)dequeue(com.sendPackets);
  807400:	0806dd00 	call	806dd0 <dequeue>
		killPacket(&p);
  807404:	d809883a 	mov	r4,sp
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
		p = (struct Packet*)dequeue(com.sendPackets);
  807408:	d8800015 	stw	r2,0(sp)
		killPacket(&p);
  80740c:	08066d00 	call	8066d0 <killPacket>
	com.num_packets = com.num_send_packets = 0;
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
  807410:	81000d17 	ldw	r4,52(r16)
  807414:	20800017 	ldw	r2,0(r4)
  807418:	00bff916 	blt	zero,r2,807400 <reset+0x58>
		p = (struct Packet*)dequeue(com.sendPackets);
		killPacket(&p);
	}

	while(com.receivePackets->size > 0) {
  80741c:	81000e17 	ldw	r4,56(r16)
  807420:	20800017 	ldw	r2,0(r4)
  807424:	00800d0e 	bge	zero,r2,80745c <reset+0xb4>
		p = (struct Packet*)dequeue(com.receivePackets);
  807428:	0806dd00 	call	806dd0 <dequeue>
		killPacket(&p);
  80742c:	d809883a 	mov	r4,sp
		p = (struct Packet*)dequeue(com.sendPackets);
		killPacket(&p);
	}

	while(com.receivePackets->size > 0) {
		p = (struct Packet*)dequeue(com.receivePackets);
  807430:	d8800015 	stw	r2,0(sp)
		killPacket(&p);
  807434:	08066d00 	call	8066d0 <killPacket>
	while(com.sendPackets->size > 0) {
		p = (struct Packet*)dequeue(com.sendPackets);
		killPacket(&p);
	}

	while(com.receivePackets->size > 0) {
  807438:	81000e17 	ldw	r4,56(r16)
  80743c:	20800017 	ldw	r2,0(r4)
  807440:	00bff916 	blt	zero,r2,807428 <reset+0x80>
		p = (struct Packet*)dequeue(com.receivePackets);
		killPacket(&p);
	}

	while(com.pendingPacketSize->size > 0) {
  807444:	81000f17 	ldw	r4,60(r16)
  807448:	20800017 	ldw	r2,0(r4)
  80744c:	0080060e 	bge	zero,r2,807468 <reset+0xc0>
		len = (int*)dequeue(com.pendingPacketSize);
  807450:	0806dd00 	call	806dd0 <dequeue>
		free(len);
  807454:	1009883a 	mov	r4,r2
  807458:	080bb580 	call	80bb58 <free>
	while(com.receivePackets->size > 0) {
		p = (struct Packet*)dequeue(com.receivePackets);
		killPacket(&p);
	}

	while(com.pendingPacketSize->size > 0) {
  80745c:	81000f17 	ldw	r4,60(r16)
  807460:	20800017 	ldw	r2,0(r4)
  807464:	00bffa16 	blt	zero,r2,807450 <reset+0xa8>
		len = (int*)dequeue(com.pendingPacketSize);
		free(len);
		len = NULL;
	}
	if(&com.packetBuf != NULL) {
		free(com.packetBuf);
  807468:	81001017 	ldw	r4,64(r16)
  80746c:	080bb580 	call	80bb58 <free>
		com.packetBuf = NULL;
  807470:	80001015 	stw	zero,64(r16)
	}

	saveListsToSD();
  807474:	08040c40 	call	8040c4 <saveListsToSD>
	updateSongToSD();
  807478:	08042380 	call	804238 <updateSongToSD>
	saveAllUpdatesToSDBeforeQuits();
  80747c:	0803b380 	call	803b38 <saveAllUpdatesToSDBeforeQuits>
	update();
  807480:	08036a40 	call	8036a4 <update>
  807484:	00000106 	br	80748c <reset+0xe4>

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
		alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);}
  807488:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
	saveListsToSD();
	updateSongToSD();
	saveAllUpdatesToSDBeforeQuits();
	update();

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
  80748c:	8809883a 	mov	r4,r17
  807490:	0818bcc0 	call	818bcc <alt_up_rs232_get_used_space_in_read_FIFO>
		alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);}
  807494:	014020f4 	movhi	r5,131
  807498:	297b0504 	addi	r5,r5,-5100
  80749c:	8809883a 	mov	r4,r17
  8074a0:	29800c84 	addi	r6,r5,50
	saveListsToSD();
	updateSongToSD();
	saveAllUpdatesToSDBeforeQuits();
	update();

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
  8074a4:	103ff81e 	bne	r2,zero,807488 <reset+0xe0>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8074a8:	81801217 	ldw	r6,72(r16)
  8074ac:	81401317 	ldw	r5,76(r16)
	*(com.stateMachine) = s;
  8074b0:	00800244 	movi	r2,9
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8074b4:	30c00017 	ldw	r3,0(r6)
	update();

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
		alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);}
	setStates(startInit);
	printf("WARNNING!! the connection has been reseted.\n");
  8074b8:	010020b4 	movhi	r4,130
  8074bc:	2100f404 	addi	r4,r4,976
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8074c0:	28c00015 	stw	r3,0(r5)
	*(com.stateMachine) = s;
  8074c4:	30800015 	stw	r2,0(r6)
	update();

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
		alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);}
	setStates(startInit);
	printf("WARNNING!! the connection has been reseted.\n");
  8074c8:	080c5100 	call	80c510 <puts>
}
  8074cc:	dfc00317 	ldw	ra,12(sp)
  8074d0:	dc400217 	ldw	r17,8(sp)
  8074d4:	dc000117 	ldw	r16,4(sp)
  8074d8:	dec00404 	addi	sp,sp,16
  8074dc:	f800283a 	ret

008074e0 <failReceive>:
/*
* increment the frequency of failing receive data;
* go back to past state if it has already fail receiving 100 times
*/
void failReceive(enum States pastState) {
	com.failReceive++;
  8074e0:	014020f4 	movhi	r5,131
  8074e4:	297b0504 	addi	r5,r5,-5100
  8074e8:	28801717 	ldw	r2,92(r5)
	if(com.failReceive > 100) {
  8074ec:	00c01904 	movi	r3,100

/*
* increment the frequency of failing receive data;
* go back to past state if it has already fail receiving 100 times
*/
void failReceive(enum States pastState) {
  8074f0:	200d883a 	mov	r6,r4
	com.failReceive++;
  8074f4:	10800044 	addi	r2,r2,1
  8074f8:	28801715 	stw	r2,92(r5)
	if(com.failReceive > 100) {
  8074fc:	1880060e 	bge	r3,r2,807518 <failReceive+0x38>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  807500:	29001217 	ldw	r4,72(r5)
  807504:	28c01317 	ldw	r3,76(r5)
*/
void failReceive(enum States pastState) {
	com.failReceive++;
	if(com.failReceive > 100) {
		setStates(pastState);
		com.failReceive=0;
  807508:	28001715 	stw	zero,92(r5)
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80750c:	20800017 	ldw	r2,0(r4)
  807510:	18800015 	stw	r2,0(r3)
	*(com.stateMachine) = s;
  807514:	21800015 	stw	r6,0(r4)
  807518:	f800283a 	ret

0080751c <checkAck>:
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
}
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
  80751c:	defffc04 	addi	sp,sp,-16
  807520:	dc800215 	stw	r18,8(sp)
  807524:	dc400115 	stw	r17,4(sp)
  807528:	dfc00315 	stw	ra,12(sp)
  80752c:	dc000015 	stw	r16,0(sp)
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  807530:	24000003 	ldbu	r16,0(r4)
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
}
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
  807534:	2023883a 	mov	r17,r4
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  807538:	01400084 	movi	r5,2
  80753c:	8009883a 	mov	r4,r16
  807540:	08065080 	call	806508 <getBit>
  807544:	1007883a 	mov	r3,r2
  807548:	84003c0c 	andi	r16,r16,240
  80754c:	00803c04 	movi	r2,240
  807550:	048020f4 	movhi	r18,131
  807554:	94bb0504 	addi	r18,r18,-5100
  807558:	80800d26 	beq	r16,r2,807590 <checkAck+0x74>
  80755c:	048020f4 	movhi	r18,131
  807560:	94bb0504 	addi	r18,r18,-5100
		com.client_ack = getBit(bytes[0], 3);
		switchAck(); //very important to switch ack for next ack
		com.failReceive = 0;
		return 1;
	} com.failReceive++;
  807564:	90801717 	ldw	r2,92(r18)
  807568:	0007883a 	mov	r3,zero
  80756c:	10800044 	addi	r2,r2,1
  807570:	90801715 	stw	r2,92(r18)
	return 0;
}
  807574:	1805883a 	mov	r2,r3
  807578:	dfc00317 	ldw	ra,12(sp)
  80757c:	dc800217 	ldw	r18,8(sp)
  807580:	dc400117 	ldw	r17,4(sp)
  807584:	dc000017 	ldw	r16,0(sp)
  807588:	dec00404 	addi	sp,sp,16
  80758c:	f800283a 	ret
}
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  807590:	90801517 	ldw	r2,84(r18)
		com.client_ack = getBit(bytes[0], 3);
  807594:	014000c4 	movi	r5,3
}
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  807598:	18bff21e 	bne	r3,r2,807564 <checkAck+0x48>
		com.client_ack = getBit(bytes[0], 3);
  80759c:	89000003 	ldbu	r4,0(r17)
  8075a0:	08065080 	call	806508 <getBit>
  8075a4:	90801415 	stw	r2,80(r18)
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  8075a8:	90801517 	ldw	r2,84(r18)
 */
int checkAck(unsigned char* bytes) {
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
		com.client_ack = getBit(bytes[0], 3);
		switchAck(); //very important to switch ack for next ack
		com.failReceive = 0;
  8075ac:	00c00044 	movi	r3,1
  8075b0:	90001715 	stw	zero,92(r18)
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  8075b4:	1005003a 	cmpeq	r2,r2,zero
  8075b8:	90801515 	stw	r2,84(r18)
  8075bc:	003fed06 	br	807574 <checkAck+0x58>

008075c0 <checkStartAck>:
	setStates(waitStart);
	return cert;

}

int checkStartAck(unsigned char byte) {
  8075c0:	defffd04 	addi	sp,sp,-12
  8075c4:	dc000015 	stw	r16,0(sp)
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  8075c8:	24003fcc 	andi	r16,r4,255
  8075cc:	80c03ccc 	andi	r3,r16,243
  8075d0:	008028c4 	movi	r2,163
	setStates(waitStart);
	return cert;

}

int checkStartAck(unsigned char byte) {
  8075d4:	dc400115 	stw	r17,4(sp)
  8075d8:	dfc00215 	stw	ra,8(sp)
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  8075dc:	044020f4 	movhi	r17,131
  8075e0:	8c7b0504 	addi	r17,r17,-5100
  8075e4:	01400084 	movi	r5,2
  8075e8:	8009883a 	mov	r4,r16
  8075ec:	18800726 	beq	r3,r2,80760c <checkStartAck+0x4c>
		com.client_ack = getBit(byte, 3);
		switchAck();
		return 1;
  8075f0:	0009883a 	mov	r4,zero
	} return 0;
}
  8075f4:	2005883a 	mov	r2,r4
  8075f8:	dfc00217 	ldw	ra,8(sp)
  8075fc:	dc400117 	ldw	r17,4(sp)
  807600:	dc000017 	ldw	r16,0(sp)
  807604:	dec00304 	addi	sp,sp,12
  807608:	f800283a 	ret
	return cert;

}

int checkStartAck(unsigned char byte) {
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  80760c:	08065080 	call	806508 <getBit>
  807610:	88c01517 	ldw	r3,84(r17)
		com.client_ack = getBit(byte, 3);
  807614:	8009883a 	mov	r4,r16
  807618:	014000c4 	movi	r5,3
	return cert;

}

int checkStartAck(unsigned char byte) {
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  80761c:	10fff41e 	bne	r2,r3,8075f0 <checkStartAck+0x30>
		com.client_ack = getBit(byte, 3);
  807620:	08065080 	call	806508 <getBit>
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  807624:	88c01517 	ldw	r3,84(r17)
  807628:	01000044 	movi	r4,1

}

int checkStartAck(unsigned char byte) {
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
		com.client_ack = getBit(byte, 3);
  80762c:	88801415 	stw	r2,80(r17)
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  807630:	1807003a 	cmpeq	r3,r3,zero
  807634:	88c01515 	stw	r3,84(r17)
  807638:	003fee06 	br	8075f4 <checkStartAck+0x34>

0080763c <sendAck>:
		setBit(&cert[0], 0); //1111XX01
	}
	return cert;
}

unsigned char* sendAck() {
  80763c:	defffd04 	addi	sp,sp,-12
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  807640:	010000c4 	movi	r4,3
		setBit(&cert[0], 0); //1111XX01
	}
	return cert;
}

unsigned char* sendAck() {
  807644:	dc000015 	stw	r16,0(sp)
  807648:	dfc00215 	stw	ra,8(sp)
  80764c:	dc400115 	stw	r17,4(sp)
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  807650:	080bb6c0 	call	80bb6c <malloc>
  807654:	1021883a 	mov	r16,r2
	if(cert == NULL) {
  807658:	10003f26 	beq	r2,zero,807758 <sendAck+0x11c>
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80765c:	044020f4 	movhi	r17,131
  807660:	8c7b0504 	addi	r17,r17,-5100
  807664:	88801517 	ldw	r2,84(r17)
unsigned char* sendAck() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	if(cert == NULL) {
		printf("NO MEMORY to send ack!!\n");
	}
	cert[0] = 0xF0; //set the format as 1111+(client_ack)(host_ack)(send)(receive)
  807668:	00fffc04 	movi	r3,-16
  80766c:	80c00005 	stb	r3,0(r16)
	cert[1] = 0;
  807670:	80000045 	stb	zero,1(r16)
	cert[2] = 0;
  807674:	80000085 	stb	zero,2(r16)
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  807678:	1000191e 	bne	r2,zero,8076e0 <sendAck+0xa4>
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80767c:	88801417 	ldw	r2,80(r17)
  807680:	10001c1e 	bne	r2,zero,8076f4 <sendAck+0xb8>
		*byte &= 0xF7; //XXXX0XXX
  807684:	80800003 	ldbu	r2,0(r16)
	cert[1] = 0;
	cert[2] = 0;

	updateAcknowledge(&cert[0]);

	setBit(&cert[0], 0); //1111XX01
  807688:	8009883a 	mov	r4,r16
  80768c:	000b883a 	mov	r5,zero
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
		*byte &= 0xF7; //XXXX0XXX
  807690:	10803dcc 	andi	r2,r2,247
  807694:	80800005 	stb	r2,0(r16)
	cert[1] = 0;
	cert[2] = 0;

	updateAcknowledge(&cert[0]);

	setBit(&cert[0], 0); //1111XX01
  807698:	08065180 	call	806518 <setBit>

	//char* temp; //need to do something with this later

	if(com.index_packets >= com.num_packets) { //all packets received
  80769c:	88c01817 	ldw	r3,96(r17)
  8076a0:	88801917 	ldw	r2,100(r17)
  8076a4:	018020f4 	movhi	r6,131
  8076a8:	31bb0504 	addi	r6,r6,-5100
  8076ac:	10c01c0e 	bge	r2,r3,807720 <sendAck+0xe4>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8076b0:	31401217 	ldw	r5,72(r6)
  8076b4:	31001317 	ldw	r4,76(r6)
	*(com.stateMachine) = s;
  8076b8:	00c00204 	movi	r3,8
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8076bc:	28800017 	ldw	r2,0(r5)
  8076c0:	20800015 	stw	r2,0(r4)
		//call decode & command here later
		decode(com.receivePackets);
	} else
		setStates(receiveData0);
	return cert;
}
  8076c4:	8005883a 	mov	r2,r16
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
	*(com.stateMachine) = s;
  8076c8:	28c00015 	stw	r3,0(r5)
		//call decode & command here later
		decode(com.receivePackets);
	} else
		setStates(receiveData0);
	return cert;
}
  8076cc:	dfc00217 	ldw	ra,8(sp)
  8076d0:	dc400117 	ldw	r17,4(sp)
  8076d4:	dc000017 	ldw	r16,0(sp)
  8076d8:	dec00304 	addi	sp,sp,12
  8076dc:	f800283a 	ret

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  8076e0:	8009883a 	mov	r4,r16
  8076e4:	01400084 	movi	r5,2
  8076e8:	08065180 	call	806518 <setBit>
	if(com.client_ack == 0)
  8076ec:	88801417 	ldw	r2,80(r17)
  8076f0:	103fe426 	beq	r2,zero,807684 <sendAck+0x48>
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  8076f4:	8009883a 	mov	r4,r16
  8076f8:	014000c4 	movi	r5,3
  8076fc:	08065180 	call	806518 <setBit>
	cert[1] = 0;
	cert[2] = 0;

	updateAcknowledge(&cert[0]);

	setBit(&cert[0], 0); //1111XX01
  807700:	8009883a 	mov	r4,r16
  807704:	000b883a 	mov	r5,zero
  807708:	08065180 	call	806518 <setBit>

	//char* temp; //need to do something with this later

	if(com.index_packets >= com.num_packets) { //all packets received
  80770c:	88c01817 	ldw	r3,96(r17)
  807710:	88801917 	ldw	r2,100(r17)
  807714:	018020f4 	movhi	r6,131
  807718:	31bb0504 	addi	r6,r6,-5100
  80771c:	10ffe416 	blt	r2,r3,8076b0 <sendAck+0x74>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  807720:	30801217 	ldw	r2,72(r6)
  807724:	31401317 	ldw	r5,76(r6)
	if(com.index_packets >= com.num_packets) { //all packets received
		setStates(checkClient);
		com.index_packets = 0;

		//call decode & command here later
		decode(com.receivePackets);
  807728:	31000e17 	ldw	r4,56(r6)
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80772c:	10c00017 	ldw	r3,0(r2)

	//char* temp; //need to do something with this later

	if(com.index_packets >= com.num_packets) { //all packets received
		setStates(checkClient);
		com.index_packets = 0;
  807730:	30001915 	stw	zero,100(r6)
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  807734:	28c00015 	stw	r3,0(r5)
	*(com.stateMachine) = s;
  807738:	10000015 	stw	zero,0(r2)
	if(com.index_packets >= com.num_packets) { //all packets received
		setStates(checkClient);
		com.index_packets = 0;

		//call decode & command here later
		decode(com.receivePackets);
  80773c:	0800e600 	call	800e60 <decode>
	} else
		setStates(receiveData0);
	return cert;
}
  807740:	8005883a 	mov	r2,r16
  807744:	dfc00217 	ldw	ra,8(sp)
  807748:	dc400117 	ldw	r17,4(sp)
  80774c:	dc000017 	ldw	r16,0(sp)
  807750:	dec00304 	addi	sp,sp,12
  807754:	f800283a 	ret
}

unsigned char* sendAck() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	if(cert == NULL) {
		printf("NO MEMORY to send ack!!\n");
  807758:	010020b4 	movhi	r4,130
  80775c:	2100ff04 	addi	r4,r4,1020
  807760:	080c5100 	call	80c510 <puts>
  807764:	003fbd06 	br	80765c <sendAck+0x20>

00807768 <sendStats>:
/*
 * send 3 bytes acknowledge to client at sendStats stage;
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
  807768:	defffb04 	addi	sp,sp,-20
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80776c:	010000c4 	movi	r4,3
/*
 * send 3 bytes acknowledge to client at sendStats stage;
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
  807770:	dcc00315 	stw	r19,12(sp)
  807774:	dc800215 	stw	r18,8(sp)
  807778:	dc400115 	stw	r17,4(sp)
  80777c:	dc000015 	stw	r16,0(sp)
  807780:	dfc00415 	stw	ra,16(sp)
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  807784:	044020f4 	movhi	r17,131
  807788:	8c7b0504 	addi	r17,r17,-5100
 * send 3 bytes acknowledge to client at sendStats stage;
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80778c:	080bb6c0 	call	80bb6c <malloc>
  807790:	1021883a 	mov	r16,r2
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  807794:	88801517 	ldw	r2,84(r17)
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	cert[0] = 0xF0; //set the format as 1111+(client_ack)(host_ack)(send)(receive)
  807798:	00fffc04 	movi	r3,-16
  80779c:	80c00005 	stb	r3,0(r16)
	cert[1] = 0;
  8077a0:	80000045 	stb	zero,1(r16)
	cert[2] = 0;
  8077a4:	80000085 	stb	zero,2(r16)
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	cert[0] = 0xF0; //set the format as 1111+(client_ack)(host_ack)(send)(receive)
	cert[1] = 0;
  8077a8:	84c00044 	addi	r19,r16,1
	cert[2] = 0;
  8077ac:	84800084 	addi	r18,r16,2
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  8077b0:	1000291e 	bne	r2,zero,807858 <sendStats+0xf0>
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  8077b4:	88801417 	ldw	r2,80(r17)
  8077b8:	10002c1e 	bne	r2,zero,80786c <sendStats+0x104>
		*byte &= 0xF7; //XXXX0XXX
  8077bc:	80800003 	ldbu	r2,0(r16)
  8077c0:	10803dcc 	andi	r2,r2,247
  8077c4:	80800005 	stb	r2,0(r16)
	cert[2] = 0;
	int* num_s_packets;

	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
  8077c8:	88801617 	ldw	r2,88(r17)
  8077cc:	01400044 	movi	r5,1
  8077d0:	044020f4 	movhi	r17,131
  8077d4:	8c7b0504 	addi	r17,r17,-5100
  8077d8:	11400326 	beq	r2,r5,8077e8 <sendStats+0x80>
  8077dc:	88800f17 	ldw	r2,60(r17)
  8077e0:	10c00017 	ldw	r3,0(r2)
  8077e4:	00c0270e 	bge	zero,r3,807884 <sendStats+0x11c>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8077e8:	89c01217 	ldw	r7,72(r17)
  8077ec:	89801317 	ldw	r6,76(r17)
	*(com.stateMachine) = s;
  8077f0:	00800084 	movi	r2,2
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8077f4:	38c00017 	ldw	r3,0(r7)

	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
  8077f8:	8009883a 	mov	r4,r16
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  8077fc:	30c00015 	stw	r3,0(r6)
	*(com.stateMachine) = s;
  807800:	38800015 	stw	r2,0(r7)

	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
  807804:	08065180 	call	806518 <setBit>
		com.index_send_packets = 0;
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
  807808:	89000f17 	ldw	r4,60(r17)
	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
		com.index_send_packets = 0;
  80780c:	88001b15 	stw	zero,108(r17)
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
  807810:	0806dd00 	call	806dd0 <dequeue>
		com.num_send_packets = *num_s_packets;
  807814:	10c00017 	ldw	r3,0(r2)

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
		com.index_send_packets = 0;
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
  807818:	1009883a 	mov	r4,r2
		com.num_send_packets = *num_s_packets;
  80781c:	88c01a15 	stw	r3,104(r17)
		cert[1] = (unsigned char)(com.num_send_packets/256);
  807820:	1805883a 	mov	r2,r3
  807824:	18001516 	blt	r3,zero,80787c <sendStats+0x114>
  807828:	1005d23a 	srai	r2,r2,8
  80782c:	98800005 	stb	r2,0(r19)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
  807830:	90c00005 	stb	r3,0(r18)
		free(num_s_packets);
  807834:	080bb580 	call	80bb58 <free>
	} else {
		setStates(checkClient);
		setBit(&cert[0], 0); //1111XX01
	}
	return cert;
}
  807838:	8005883a 	mov	r2,r16
  80783c:	dfc00417 	ldw	ra,16(sp)
  807840:	dcc00317 	ldw	r19,12(sp)
  807844:	dc800217 	ldw	r18,8(sp)
  807848:	dc400117 	ldw	r17,4(sp)
  80784c:	dc000017 	ldw	r16,0(sp)
  807850:	dec00504 	addi	sp,sp,20
  807854:	f800283a 	ret

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  807858:	8009883a 	mov	r4,r16
  80785c:	01400084 	movi	r5,2
  807860:	08065180 	call	806518 <setBit>
	if(com.client_ack == 0)
  807864:	88801417 	ldw	r2,80(r17)
  807868:	103fd426 	beq	r2,zero,8077bc <sendStats+0x54>
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80786c:	8009883a 	mov	r4,r16
  807870:	014000c4 	movi	r5,3
  807874:	08065180 	call	806518 <setBit>
  807878:	003fd306 	br	8077c8 <sendStats+0x60>
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
		com.index_send_packets = 0;
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
		com.num_send_packets = *num_s_packets;
		cert[1] = (unsigned char)(com.num_send_packets/256);
  80787c:	18803fc4 	addi	r2,r3,255
  807880:	003fe906 	br	807828 <sendStats+0xc0>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  807884:	88801217 	ldw	r2,72(r17)
  807888:	89801317 	ldw	r6,76(r17)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
		free(num_s_packets);
		num_s_packets = NULL;
	} else {
		setStates(checkClient);
		setBit(&cert[0], 0); //1111XX01
  80788c:	8009883a 	mov	r4,r16
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  807890:	10c00017 	ldw	r3,0(r2)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
		free(num_s_packets);
		num_s_packets = NULL;
	} else {
		setStates(checkClient);
		setBit(&cert[0], 0); //1111XX01
  807894:	000b883a 	mov	r5,zero
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  807898:	30c00015 	stw	r3,0(r6)
	*(com.stateMachine) = s;
  80789c:	10000015 	stw	zero,0(r2)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
		free(num_s_packets);
		num_s_packets = NULL;
	} else {
		setStates(checkClient);
		setBit(&cert[0], 0); //1111XX01
  8078a0:	08065180 	call	806518 <setBit>
  8078a4:	003fe406 	br	807838 <sendStats+0xd0>

008078a8 <sendStartInit>:
	}
	com.isRdySend = 1;
	return 0;
}

unsigned char* sendStartInit() {
  8078a8:	defffd04 	addi	sp,sp,-12
  8078ac:	dc400115 	stw	r17,4(sp)
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  8078b0:	010000c4 	movi	r4,3
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  8078b4:	044020f4 	movhi	r17,131
  8078b8:	8c7b0504 	addi	r17,r17,-5100
	}
	com.isRdySend = 1;
	return 0;
}

unsigned char* sendStartInit() {
  8078bc:	dc000015 	stw	r16,0(sp)
  8078c0:	dfc00215 	stw	ra,8(sp)
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  8078c4:	080bb6c0 	call	80bb6c <malloc>
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  8078c8:	88c01517 	ldw	r3,84(r17)
	com.isRdySend = 1;
	return 0;
}

unsigned char* sendStartInit() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  8078cc:	1021883a 	mov	r16,r2
	cert[0] = 0xA3; //set the format as 1010+(client_ack)(host_ack)+11
  8078d0:	01bfe8c4 	movi	r6,-93
	cert[1] = 0xAA; //10101010
  8078d4:	00bfea84 	movi	r2,-86

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  8078d8:	8009883a 	mov	r4,r16
  8078dc:	01400084 	movi	r5,2

unsigned char* sendStartInit() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	cert[0] = 0xA3; //set the format as 1010+(client_ack)(host_ack)+11
	cert[1] = 0xAA; //10101010
	cert[2] = 0xAA; //10101010
  8078e0:	80800085 	stb	r2,2(r16)
	return 0;
}

unsigned char* sendStartInit() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	cert[0] = 0xA3; //set the format as 1010+(client_ack)(host_ack)+11
  8078e4:	81800005 	stb	r6,0(r16)
	cert[1] = 0xAA; //10101010
  8078e8:	80800045 	stb	r2,1(r16)
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  8078ec:	1800141e 	bne	r3,zero,807940 <sendStartInit+0x98>
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  8078f0:	88801417 	ldw	r2,80(r17)
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
  8078f4:	81800005 	stb	r6,0(r16)
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  8078f8:	8009883a 	mov	r4,r16
  8078fc:	014000c4 	movi	r5,3
void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  807900:	1000141e 	bne	r2,zero,807954 <sendStartInit+0xac>
		*byte &= 0xF7; //XXXX0XXX
  807904:	80800003 	ldbu	r2,0(r16)
  807908:	10803dcc 	andi	r2,r2,247
  80790c:	80800005 	stb	r2,0(r16)
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  807910:	89401217 	ldw	r5,72(r17)
  807914:	89001317 	ldw	r4,76(r17)
	*(com.stateMachine) = s;
  807918:	00c00284 	movi	r3,10
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80791c:	28800017 	ldw	r2,0(r5)
  807920:	20800015 	stw	r2,0(r4)

	updateAcknowledge(&cert[0]);
	setStates(waitStart);
	return cert;

}
  807924:	8005883a 	mov	r2,r16
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
	*(com.stateMachine) = s;
  807928:	28c00015 	stw	r3,0(r5)

	updateAcknowledge(&cert[0]);
	setStates(waitStart);
	return cert;

}
  80792c:	dfc00217 	ldw	ra,8(sp)
  807930:	dc400117 	ldw	r17,4(sp)
  807934:	dc000017 	ldw	r16,0(sp)
  807938:	dec00304 	addi	sp,sp,12
  80793c:	f800283a 	ret

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  807940:	08065180 	call	806518 <setBit>
	if(com.client_ack == 0)
  807944:	88801417 	ldw	r2,80(r17)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  807948:	8009883a 	mov	r4,r16
  80794c:	014000c4 	movi	r5,3
void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  807950:	103fec26 	beq	r2,zero,807904 <sendStartInit+0x5c>
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  807954:	08065180 	call	806518 <setBit>
  807958:	003fed06 	br	807910 <sendStartInit+0x68>

0080795c <checkImgBtnCollision>:
	r_cursor = NULL;
	r_button = NULL;
}

void checkImgBtnCollision(void* cursor, void* button){
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
  80795c:	20800017 	ldw	r2,0(r4)

	r_cursor = NULL;
	r_button = NULL;
}

void checkImgBtnCollision(void* cursor, void* button){
  807960:	defffd04 	addi	sp,sp,-12
  807964:	dc000015 	stw	r16,0(sp)
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
  807968:	11800017 	ldw	r6,0(r2)
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80796c:	2c000217 	ldw	r16,8(r5)

	r_cursor = NULL;
	r_button = NULL;
}

void checkImgBtnCollision(void* cursor, void* button){
  807970:	dc400115 	stw	r17,4(sp)
  807974:	2823883a 	mov	r17,r5
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = r_button->x;
  807978:	80800017 	ldw	r2,0(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  80797c:	31400017 	ldw	r5,0(r6)

	r_cursor = NULL;
	r_button = NULL;
}

void checkImgBtnCollision(void* cursor, void* button){
  807980:	dfc00215 	stw	ra,8(sp)
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = r_button->x;
	int y_button_start = r_button->y;
  807984:	81000117 	ldw	r4,4(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
  807988:	80c00317 	ldw	r3,12(r16)
	int y_button_end = 4 * r_button->y + r_button->height;
  80798c:	81c00217 	ldw	r7,8(r16)
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807990:	28800616 	blt	r5,r2,8079ac <checkImgBtnCollision+0x50>
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = r_button->x;
	int y_button_start = r_button->y;
	int x_button_end = 4 * r_button->x + r_button->width;
  807994:	1085883a 	add	r2,r2,r2
  807998:	1085883a 	add	r2,r2,r2
  80799c:	10c5883a 	add	r2,r2,r3
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  8079a0:	00c05004 	movi	r3,320
  8079a4:	18801916 	blt	r3,r2,807a0c <checkImgBtnCollision+0xb0>
  8079a8:	28800c16 	blt	r5,r2,8079dc <checkImgBtnCollision+0x80>
			r_cursor->y >= y_button_start && r_cursor->y < y_button_end){
		r_button->currentlyCollided = 1;
	} else {
		r_button->currentlyCollided = 0;
  8079ac:	80000515 	stw	zero,20(r16)
	}
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  8079b0:	80800417 	ldw	r2,16(r16)
  8079b4:	1000181e 	bne	r2,zero,807a18 <checkImgBtnCollision+0xbc>
  8079b8:	80c00517 	ldw	r3,20(r16)
  8079bc:	00800044 	movi	r2,1
  8079c0:	18801c26 	beq	r3,r2,807a34 <checkImgBtnCollision+0xd8>
		printf("Collision detected\n");
		((struct Button*)button)->collide(((struct Button*)button));
	}
	r_button->previouslyCollided = r_button->currentlyCollided;
  8079c4:	80c00415 	stw	r3,16(r16)

	r_cursor = NULL;
	r_button = NULL;
}
  8079c8:	dfc00217 	ldw	ra,8(sp)
  8079cc:	dc400117 	ldw	r17,4(sp)
  8079d0:	dc000017 	ldw	r16,0(sp)
  8079d4:	dec00304 	addi	sp,sp,12
  8079d8:	f800283a 	ret
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  8079dc:	30c00117 	ldw	r3,4(r6)
  8079e0:	193ff216 	blt	r3,r4,8079ac <checkImgBtnCollision+0x50>
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = r_button->x;
	int y_button_start = r_button->y;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height;
  8079e4:	2105883a 	add	r2,r4,r4
  8079e8:	1085883a 	add	r2,r2,r2
  8079ec:	11c5883a 	add	r2,r2,r7
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  8079f0:	01003c04 	movi	r4,240
  8079f4:	2080010e 	bge	r4,r2,8079fc <checkImgBtnCollision+0xa0>
  8079f8:	2005883a 	mov	r2,r4
  8079fc:	18bfeb0e 	bge	r3,r2,8079ac <checkImgBtnCollision+0x50>
			r_cursor->y >= y_button_start && r_cursor->y < y_button_end){
		r_button->currentlyCollided = 1;
  807a00:	00c00044 	movi	r3,1
  807a04:	80c00515 	stw	r3,20(r16)
  807a08:	003fe906 	br	8079b0 <checkImgBtnCollision+0x54>
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807a0c:	1805883a 	mov	r2,r3
  807a10:	28bfe60e 	bge	r5,r2,8079ac <checkImgBtnCollision+0x50>
  807a14:	003ff106 	br	8079dc <checkImgBtnCollision+0x80>
  807a18:	80c00517 	ldw	r3,20(r16)
	}
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		printf("Collision detected\n");
		((struct Button*)button)->collide(((struct Button*)button));
	}
	r_button->previouslyCollided = r_button->currentlyCollided;
  807a1c:	80c00415 	stw	r3,16(r16)

	r_cursor = NULL;
	r_button = NULL;
}
  807a20:	dfc00217 	ldw	ra,8(sp)
  807a24:	dc400117 	ldw	r17,4(sp)
  807a28:	dc000017 	ldw	r16,0(sp)
  807a2c:	dec00304 	addi	sp,sp,12
  807a30:	f800283a 	ret
		r_button->currentlyCollided = 1;
	} else {
		r_button->currentlyCollided = 0;
	}
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		printf("Collision detected\n");
  807a34:	010020b4 	movhi	r4,130
  807a38:	21010504 	addi	r4,r4,1044
  807a3c:	080c5100 	call	80c510 <puts>
		((struct Button*)button)->collide(((struct Button*)button));
  807a40:	88c00b17 	ldw	r3,44(r17)
  807a44:	8809883a 	mov	r4,r17
  807a48:	183ee83a 	callr	r3
  807a4c:	80c00517 	ldw	r3,20(r16)
	}
	r_button->previouslyCollided = r_button->currentlyCollided;
  807a50:	80c00415 	stw	r3,16(r16)

	r_cursor = NULL;
	r_button = NULL;
}
  807a54:	dfc00217 	ldw	ra,8(sp)
  807a58:	dc400117 	ldw	r17,4(sp)
  807a5c:	dc000017 	ldw	r16,0(sp)
  807a60:	dec00304 	addi	sp,sp,12
  807a64:	f800283a 	ret

00807a68 <checkTxtBtnCollision>:

	r2->previouslyCollided = r2->currentlyCollided;
}


void checkTxtBtnCollision(void* cursor, void* button){
  807a68:	defffd04 	addi	sp,sp,-12
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
  807a6c:	20c00017 	ldw	r3,0(r4)

	r2->previouslyCollided = r2->currentlyCollided;
}


void checkTxtBtnCollision(void* cursor, void* button){
  807a70:	dc000015 	stw	r16,0(sp)
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  807a74:	2c000217 	ldw	r16,8(r5)
	r2->previouslyCollided = r2->currentlyCollided;
}


void checkTxtBtnCollision(void* cursor, void* button){
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
  807a78:	18c00017 	ldw	r3,0(r3)

	r2->previouslyCollided = r2->currentlyCollided;
}


void checkTxtBtnCollision(void* cursor, void* button){
  807a7c:	dc400115 	stw	r17,4(sp)
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = 4 * r_button->x;
  807a80:	80800017 	ldw	r2,0(r16)

	r2->previouslyCollided = r2->currentlyCollided;
}


void checkTxtBtnCollision(void* cursor, void* button){
  807a84:	2823883a 	mov	r17,r5
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	//TODO: same logic for leftClick
	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807a88:	19400017 	ldw	r5,0(r3)

void checkTxtBtnCollision(void* cursor, void* button){
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = 4 * r_button->x;
  807a8c:	1085883a 	add	r2,r2,r2
  807a90:	1085883a 	add	r2,r2,r2

	r2->previouslyCollided = r2->currentlyCollided;
}


void checkTxtBtnCollision(void* cursor, void* button){
  807a94:	dfc00215 	stw	ra,8(sp)
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y;
  807a98:	81800117 	ldw	r6,4(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
  807a9c:	81000317 	ldw	r4,12(r16)
	int y_button_end = 4 * r_button->y + r_button->height;
  807aa0:	81c00217 	ldw	r7,8(r16)
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	//TODO: same logic for leftClick
	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807aa4:	28800416 	blt	r5,r2,807ab8 <checkTxtBtnCollision+0x50>
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y;
	int x_button_end = 4 * r_button->x + r_button->width;
  807aa8:	1105883a 	add	r2,r2,r4
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	//TODO: same logic for leftClick
	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807aac:	01005004 	movi	r4,320
  807ab0:	20801916 	blt	r4,r2,807b18 <checkTxtBtnCollision+0xb0>
  807ab4:	28800c16 	blt	r5,r2,807ae8 <checkTxtBtnCollision+0x80>
			r_cursor->y >= y_button_start && r_cursor->y < y_button_end){
		r_button->currentlyCollided = 1;
	} else {
		r_button->currentlyCollided = 0;
  807ab8:	80000515 	stw	zero,20(r16)
	}
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  807abc:	80800417 	ldw	r2,16(r16)
  807ac0:	1000181e 	bne	r2,zero,807b24 <checkTxtBtnCollision+0xbc>
  807ac4:	80c00517 	ldw	r3,20(r16)
  807ac8:	00800044 	movi	r2,1
  807acc:	18801c26 	beq	r3,r2,807b40 <checkTxtBtnCollision+0xd8>
		printf("Collision detected\n");
		((struct Button*)button)->collide(((struct Button*)button));
	}
	r_button->previouslyCollided = r_button->currentlyCollided;
  807ad0:	80c00415 	stw	r3,16(r16)

	r_cursor = NULL;
	r_button = NULL;
}
  807ad4:	dfc00217 	ldw	ra,8(sp)
  807ad8:	dc400117 	ldw	r17,4(sp)
  807adc:	dc000017 	ldw	r16,0(sp)
  807ae0:	dec00304 	addi	sp,sp,12
  807ae4:	f800283a 	ret
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	//TODO: same logic for leftClick
	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807ae8:	18c00117 	ldw	r3,4(r3)
void checkTxtBtnCollision(void* cursor, void* button){
	struct Range* r_cursor = ((struct Object*)((struct Cursor*)cursor)->super)->r;
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y;
  807aec:	3185883a 	add	r2,r6,r6
  807af0:	1085883a 	add	r2,r2,r2
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	//TODO: same logic for leftClick
	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807af4:	18bff016 	blt	r3,r2,807ab8 <checkTxtBtnCollision+0x50>
	struct Range* r_button = (struct Range*)((struct Button*)button)->range;

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height;
  807af8:	11c5883a 	add	r2,r2,r7
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	//TODO: same logic for leftClick
	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807afc:	01003c04 	movi	r4,240
  807b00:	2080010e 	bge	r4,r2,807b08 <checkTxtBtnCollision+0xa0>
  807b04:	2005883a 	mov	r2,r4
  807b08:	18bfeb0e 	bge	r3,r2,807ab8 <checkTxtBtnCollision+0x50>
			r_cursor->y >= y_button_start && r_cursor->y < y_button_end){
		r_button->currentlyCollided = 1;
  807b0c:	00c00044 	movi	r3,1
  807b10:	80c00515 	stw	r3,20(r16)
  807b14:	003fe906 	br	807abc <checkTxtBtnCollision+0x54>
	int y_button_end = 4 * r_button->y + r_button->height;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	//TODO: same logic for leftClick
	if (r_cursor->x >= x_button_start && r_cursor->x < x_button_end &&
  807b18:	2005883a 	mov	r2,r4
  807b1c:	28bfe60e 	bge	r5,r2,807ab8 <checkTxtBtnCollision+0x50>
  807b20:	003ff106 	br	807ae8 <checkTxtBtnCollision+0x80>
  807b24:	80c00517 	ldw	r3,20(r16)
	}
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		printf("Collision detected\n");
		((struct Button*)button)->collide(((struct Button*)button));
	}
	r_button->previouslyCollided = r_button->currentlyCollided;
  807b28:	80c00415 	stw	r3,16(r16)

	r_cursor = NULL;
	r_button = NULL;
}
  807b2c:	dfc00217 	ldw	ra,8(sp)
  807b30:	dc400117 	ldw	r17,4(sp)
  807b34:	dc000017 	ldw	r16,0(sp)
  807b38:	dec00304 	addi	sp,sp,12
  807b3c:	f800283a 	ret
		r_button->currentlyCollided = 1;
	} else {
		r_button->currentlyCollided = 0;
	}
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		printf("Collision detected\n");
  807b40:	010020b4 	movhi	r4,130
  807b44:	21010504 	addi	r4,r4,1044
  807b48:	080c5100 	call	80c510 <puts>
		((struct Button*)button)->collide(((struct Button*)button));
  807b4c:	88c00b17 	ldw	r3,44(r17)
  807b50:	8809883a 	mov	r4,r17
  807b54:	183ee83a 	callr	r3
  807b58:	80c00517 	ldw	r3,20(r16)
	}
	r_button->previouslyCollided = r_button->currentlyCollided;
  807b5c:	80c00415 	stw	r3,16(r16)

	r_cursor = NULL;
	r_button = NULL;
}
  807b60:	dfc00217 	ldw	ra,8(sp)
  807b64:	dc400117 	ldw	r17,4(sp)
  807b68:	dc000017 	ldw	r16,0(sp)
  807b6c:	dec00304 	addi	sp,sp,12
  807b70:	f800283a 	ret

00807b74 <compareRange>:
	this->currentlyCollided = 0;
	return this;
}

void compareRange(struct Range* r1, struct Range* r2, int type){
	int r2_xRange_start = 4 * r2->x; // this is text button
  807b74:	28800017 	ldw	r2,0(r5)
	this->previouslyCollided = 0;
	this->currentlyCollided = 0;
	return this;
}

void compareRange(struct Range* r1, struct Range* r2, int type){
  807b78:	defffe04 	addi	sp,sp,-8
  807b7c:	dc000015 	stw	r16,0(sp)
  807b80:	2821883a 	mov	r16,r5
	int r2_yRange_end = 4*r2->y + r2->height;
	if (r2_yRange_end > 240){
		r2_yRange_end = 240;
	}

	if (r1->x >= r2_xRange_start && r1->x < r2_xRange_end &&
  807b84:	21400017 	ldw	r5,0(r4)
	this->currentlyCollided = 0;
	return this;
}

void compareRange(struct Range* r1, struct Range* r2, int type){
	int r2_xRange_start = 4 * r2->x; // this is text button
  807b88:	1085883a 	add	r2,r2,r2
  807b8c:	1085883a 	add	r2,r2,r2
	this->previouslyCollided = 0;
	this->currentlyCollided = 0;
	return this;
}

void compareRange(struct Range* r1, struct Range* r2, int type){
  807b90:	dfc00115 	stw	ra,4(sp)
	int r2_xRange_start = 4 * r2->x; // this is text button

	int r2_xRange_end = 4*r2->x + r2->width;
  807b94:	80c00317 	ldw	r3,12(r16)
	if (r2_xRange_end > 320){
		r2_xRange_end = 320;
	}

	int r2_yRange_start = 4*r2->y;
  807b98:	81c00117 	ldw	r7,4(r16)

	int r2_yRange_end = 4*r2->y + r2->height;
  807b9c:	82000217 	ldw	r8,8(r16)
	if (r2_yRange_end > 240){
		r2_yRange_end = 240;
	}

	if (r1->x >= r2_xRange_start && r1->x < r2_xRange_end &&
  807ba0:	28800416 	blt	r5,r2,807bb4 <compareRange+0x40>
}

void compareRange(struct Range* r1, struct Range* r2, int type){
	int r2_xRange_start = 4 * r2->x; // this is text button

	int r2_xRange_end = 4*r2->x + r2->width;
  807ba4:	10c5883a 	add	r2,r2,r3
	int r2_yRange_end = 4*r2->y + r2->height;
	if (r2_yRange_end > 240){
		r2_yRange_end = 240;
	}

	if (r1->x >= r2_xRange_start && r1->x < r2_xRange_end &&
  807ba8:	00c05004 	movi	r3,320
  807bac:	18801816 	blt	r3,r2,807c10 <compareRange+0x9c>
  807bb0:	28800b16 	blt	r5,r2,807be0 <compareRange+0x6c>
		r1->y >= r2_yRange_start && r1->y < r2_yRange_end){
		//r1->currentlyCollided = 1;
		r2->currentlyCollided = 1;
	} else {
		r2->currentlyCollided = 0;
  807bb4:	80000515 	stw	zero,20(r16)
	}

	if (r2->previouslyCollided == 0 && r2->currentlyCollided == 1){
  807bb8:	80800417 	ldw	r2,16(r16)
  807bbc:	1000171e 	bne	r2,zero,807c1c <compareRange+0xa8>
  807bc0:	80c00517 	ldw	r3,20(r16)
  807bc4:	00800044 	movi	r2,1
  807bc8:	18801a26 	beq	r3,r2,807c34 <compareRange+0xc0>
		printf("Collision! Calling collide() for type %d\n", type);
	}

	r2->previouslyCollided = r2->currentlyCollided;
  807bcc:	80c00415 	stw	r3,16(r16)
}
  807bd0:	dfc00117 	ldw	ra,4(sp)
  807bd4:	dc000017 	ldw	r16,0(sp)
  807bd8:	dec00204 	addi	sp,sp,8
  807bdc:	f800283a 	ret
	int r2_yRange_end = 4*r2->y + r2->height;
	if (r2_yRange_end > 240){
		r2_yRange_end = 240;
	}

	if (r1->x >= r2_xRange_start && r1->x < r2_xRange_end &&
  807be0:	21000117 	ldw	r4,4(r4)
	int r2_xRange_end = 4*r2->x + r2->width;
	if (r2_xRange_end > 320){
		r2_xRange_end = 320;
	}

	int r2_yRange_start = 4*r2->y;
  807be4:	39c5883a 	add	r2,r7,r7
  807be8:	1085883a 	add	r2,r2,r2
	int r2_yRange_end = 4*r2->y + r2->height;
	if (r2_yRange_end > 240){
		r2_yRange_end = 240;
	}

	if (r1->x >= r2_xRange_start && r1->x < r2_xRange_end &&
  807bec:	20bff116 	blt	r4,r2,807bb4 <compareRange+0x40>
		r2_xRange_end = 320;
	}

	int r2_yRange_start = 4*r2->y;

	int r2_yRange_end = 4*r2->y + r2->height;
  807bf0:	1205883a 	add	r2,r2,r8
	if (r2_yRange_end > 240){
		r2_yRange_end = 240;
	}

	if (r1->x >= r2_xRange_start && r1->x < r2_xRange_end &&
  807bf4:	00c03c04 	movi	r3,240
  807bf8:	1880010e 	bge	r3,r2,807c00 <compareRange+0x8c>
  807bfc:	1805883a 	mov	r2,r3
  807c00:	20bfec0e 	bge	r4,r2,807bb4 <compareRange+0x40>
		r1->y >= r2_yRange_start && r1->y < r2_yRange_end){
		//r1->currentlyCollided = 1;
		r2->currentlyCollided = 1;
  807c04:	00c00044 	movi	r3,1
  807c08:	80c00515 	stw	r3,20(r16)
  807c0c:	003fea06 	br	807bb8 <compareRange+0x44>
	int r2_yRange_end = 4*r2->y + r2->height;
	if (r2_yRange_end > 240){
		r2_yRange_end = 240;
	}

	if (r1->x >= r2_xRange_start && r1->x < r2_xRange_end &&
  807c10:	1805883a 	mov	r2,r3
  807c14:	28bfe70e 	bge	r5,r2,807bb4 <compareRange+0x40>
  807c18:	003ff106 	br	807be0 <compareRange+0x6c>
  807c1c:	80c00517 	ldw	r3,20(r16)

	if (r2->previouslyCollided == 0 && r2->currentlyCollided == 1){
		printf("Collision! Calling collide() for type %d\n", type);
	}

	r2->previouslyCollided = r2->currentlyCollided;
  807c20:	80c00415 	stw	r3,16(r16)
}
  807c24:	dfc00117 	ldw	ra,4(sp)
  807c28:	dc000017 	ldw	r16,0(sp)
  807c2c:	dec00204 	addi	sp,sp,8
  807c30:	f800283a 	ret
	} else {
		r2->currentlyCollided = 0;
	}

	if (r2->previouslyCollided == 0 && r2->currentlyCollided == 1){
		printf("Collision! Calling collide() for type %d\n", type);
  807c34:	300b883a 	mov	r5,r6
  807c38:	010020b4 	movhi	r4,130
  807c3c:	21010a04 	addi	r4,r4,1064
  807c40:	080c3f80 	call	80c3f8 <printf>
  807c44:	80c00517 	ldw	r3,20(r16)
	}

	r2->previouslyCollided = r2->currentlyCollided;
  807c48:	80c00415 	stw	r3,16(r16)
}
  807c4c:	dfc00117 	ldw	ra,4(sp)
  807c50:	dc000017 	ldw	r16,0(sp)
  807c54:	dec00204 	addi	sp,sp,8
  807c58:	f800283a 	ret

00807c5c <initRange>:
 *      Author: danny
 */

#include "Range.h"

struct Range* initRange(int x, int y, int w, int h) {
  807c5c:	defffb04 	addi	sp,sp,-20
  807c60:	ddc00315 	stw	r23,12(sp)
  807c64:	202f883a 	mov	r23,r4
	struct Range* this = (struct Range*)malloc(sizeof(struct Range));
  807c68:	01000604 	movi	r4,24
 *      Author: danny
 */

#include "Range.h"

struct Range* initRange(int x, int y, int w, int h) {
  807c6c:	dd400215 	stw	r21,8(sp)
  807c70:	dcc00115 	stw	r19,4(sp)
  807c74:	dc400015 	stw	r17,0(sp)
  807c78:	3027883a 	mov	r19,r6
  807c7c:	2823883a 	mov	r17,r5
  807c80:	382b883a 	mov	r21,r7
  807c84:	dfc00415 	stw	ra,16(sp)
	struct Range* this = (struct Range*)malloc(sizeof(struct Range));
  807c88:	080bb6c0 	call	80bb6c <malloc>
	this->x = x;
  807c8c:	15c00015 	stw	r23,0(r2)
	this->y = y;
  807c90:	14400115 	stw	r17,4(r2)
	this->width = w;
  807c94:	14c00315 	stw	r19,12(r2)
	this->height = h;
  807c98:	15400215 	stw	r21,8(r2)
	this->previouslyCollided = 0;
	this->currentlyCollided = 0;
  807c9c:	10000515 	stw	zero,20(r2)
	struct Range* this = (struct Range*)malloc(sizeof(struct Range));
	this->x = x;
	this->y = y;
	this->width = w;
	this->height = h;
	this->previouslyCollided = 0;
  807ca0:	10000415 	stw	zero,16(r2)
	this->currentlyCollided = 0;
	return this;
}
  807ca4:	dfc00417 	ldw	ra,16(sp)
  807ca8:	ddc00317 	ldw	r23,12(sp)
  807cac:	dd400217 	ldw	r21,8(sp)
  807cb0:	dcc00117 	ldw	r19,4(sp)
  807cb4:	dc400017 	ldw	r17,0(sp)
  807cb8:	dec00504 	addi	sp,sp,20
  807cbc:	f800283a 	ret

00807cc0 <killSong>:
	this->isCached = false;
}

void killSong(struct Song** this) {

}
  807cc0:	f800283a 	ret

00807cc4 <setSongId>:
	} else
		strcpy(this->song_name, name);

}
void setSongId(struct Song* this, int id) {
	this->id = id;
  807cc4:	21400b15 	stw	r5,44(r4)
}
  807cc8:	f800283a 	ret

00807ccc <getLength>:
	return getSoundPositionMS(this->sound);
}

int getLength(struct Song* this) {
	return this->size;
}
  807ccc:	20800917 	ldw	r2,36(r4)
  807cd0:	f800283a 	ret

00807cd4 <getSongPosition>:
void seekSong(struct Song* this, unsigned int position) {
	seekSound( this->sound, position );
}

int getSongPosition(struct Song* this) {
	return getSoundPositionMS(this->sound);
  807cd4:	21000017 	ldw	r4,0(r4)
  807cd8:	0808f801 	jmpi	808f80 <getSoundPositionMS>

00807cdc <seekSong>:
 *
 * @param this - Song to seek
 * @param position - Position to seek to in MilliSeconds
 */
void seekSong(struct Song* this, unsigned int position) {
	seekSound( this->sound, position );
  807cdc:	21000017 	ldw	r4,0(r4)
  807ce0:	08089c81 	jmpi	8089c8 <seekSound>

00807ce4 <stopSong>:

void resumeSong(struct Song* this) {
	resumeSound(this->sound);
}

void stopSong(struct Song* this) {
  807ce4:	defffe04 	addi	sp,sp,-8
  807ce8:	dc000015 	stw	r16,0(sp)
  807cec:	2021883a 	mov	r16,r4
	printf("The music start to stop.\n");
  807cf0:	010020b4 	movhi	r4,130
  807cf4:	213ef804 	addi	r4,r4,-1056

void resumeSong(struct Song* this) {
	resumeSound(this->sound);
}

void stopSong(struct Song* this) {
  807cf8:	dfc00115 	stw	ra,4(sp)
	printf("The music start to stop.\n");
  807cfc:	080c5100 	call	80c510 <puts>
	int index;
	if(this == NULL) return;
  807d00:	80001026 	beq	r16,zero,807d44 <stopSong+0x60>
	if((index = isCurrPlaying(this->id)) < 0) return;
  807d04:	81000b17 	ldw	r4,44(r16)
  807d08:	0802b380 	call	802b38 <isCurrPlaying>
	removeCurrPlaying(index);
  807d0c:	1009883a 	mov	r4,r2

void stopSong(struct Song* this) {
	printf("The music start to stop.\n");
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
  807d10:	10000c16 	blt	r2,zero,807d44 <stopSong+0x60>
	removeCurrPlaying(index);
  807d14:	0802d000 	call	802d00 <removeCurrPlaying>
	db.curr_song_id = 0;
	stopSound(this->sound);
  807d18:	81000017 	ldw	r4,0(r16)
	printf("The music start to stop.\n");
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
	removeCurrPlaying(index);
	db.curr_song_id = 0;
  807d1c:	008020b4 	movhi	r2,130
  807d20:	1091e904 	addi	r2,r2,18340
  807d24:	10000015 	stw	zero,0(r2)
	stopSound(this->sound);
  807d28:	0808a040 	call	808a04 <stopSound>
	printf("The song is stoped.\n");
  807d2c:	010020b4 	movhi	r4,130
  807d30:	21011504 	addi	r4,r4,1108
}
  807d34:	dfc00117 	ldw	ra,4(sp)
  807d38:	dc000017 	ldw	r16,0(sp)
  807d3c:	dec00204 	addi	sp,sp,8
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
	removeCurrPlaying(index);
	db.curr_song_id = 0;
	stopSound(this->sound);
	printf("The song is stoped.\n");
  807d40:	080c5101 	jmpi	80c510 <puts>
}
  807d44:	dfc00117 	ldw	ra,4(sp)
  807d48:	dc000017 	ldw	r16,0(sp)
  807d4c:	dec00204 	addi	sp,sp,8
  807d50:	f800283a 	ret

00807d54 <resumeSong>:
	pauseSound(this->sound);
	printf("The music is paused.\n");
}

void resumeSong(struct Song* this) {
	resumeSound(this->sound);
  807d54:	21000017 	ldw	r4,0(r4)
  807d58:	08089f81 	jmpi	8089f8 <resumeSound>

00807d5c <pauseSong>:
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);

}
void pauseSong(struct Song* this) {
	printf("The music %d start to pause.\n", this->id);
  807d5c:	21400b17 	ldw	r5,44(r4)
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);

}
void pauseSong(struct Song* this) {
  807d60:	defffe04 	addi	sp,sp,-8
  807d64:	dc000015 	stw	r16,0(sp)
  807d68:	2021883a 	mov	r16,r4
	printf("The music %d start to pause.\n", this->id);
  807d6c:	010020b4 	movhi	r4,130
  807d70:	21011a04 	addi	r4,r4,1128
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);

}
void pauseSong(struct Song* this) {
  807d74:	dfc00115 	stw	ra,4(sp)
	printf("The music %d start to pause.\n", this->id);
  807d78:	080c3f80 	call	80c3f8 <printf>
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
  807d7c:	81000b17 	ldw	r4,44(r16)
  807d80:	0802b380 	call	802b38 <isCurrPlaying>
	db.isPaused = true;
	removeCurrPlaying(index);
  807d84:	1009883a 	mov	r4,r2
}
void pauseSong(struct Song* this) {
	printf("The music %d start to pause.\n", this->id);
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
  807d88:	10000d16 	blt	r2,zero,807dc0 <pauseSong+0x64>
	db.isPaused = true;
  807d8c:	00c00044 	movi	r3,1
  807d90:	008020f4 	movhi	r2,131
  807d94:	10bb0404 	addi	r2,r2,-5104
  807d98:	10c00005 	stb	r3,0(r2)
	removeCurrPlaying(index);
  807d9c:	0802d000 	call	802d00 <removeCurrPlaying>
	pauseSound(this->sound);
  807da0:	81000017 	ldw	r4,0(r16)
  807da4:	08089f00 	call	8089f0 <pauseSound>
	printf("The music is paused.\n");
  807da8:	010020b4 	movhi	r4,130
  807dac:	21012204 	addi	r4,r4,1160
}
  807db0:	dfc00117 	ldw	ra,4(sp)
  807db4:	dc000017 	ldw	r16,0(sp)
  807db8:	dec00204 	addi	sp,sp,8
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
	db.isPaused = true;
	removeCurrPlaying(index);
	pauseSound(this->sound);
	printf("The music is paused.\n");
  807dbc:	080c5101 	jmpi	80c510 <puts>
}
  807dc0:	dfc00117 	ldw	ra,4(sp)
  807dc4:	dc000017 	ldw	r16,0(sp)
  807dc8:	dec00204 	addi	sp,sp,8
  807dcc:	f800283a 	ret

00807dd0 <setSongVolume>:
void setSongId(struct Song* this, int id) {
	this->id = id;
}

void setSongVolume(struct Song* this, float volume) {
	setSoundVolume(this->sound, volume);
  807dd0:	21000017 	ldw	r4,0(r4)
  807dd4:	08089bc1 	jmpi	8089bc <setSoundVolume>

00807dd8 <setSongName>:
}

void killSong(struct Song** this) {

}
void setSongName(struct Song* this, char* name) {
  807dd8:	defffd04 	addi	sp,sp,-12
  807ddc:	dc400115 	stw	r17,4(sp)
  807de0:	dc000015 	stw	r16,0(sp)
  807de4:	dfc00215 	stw	ra,8(sp)
  807de8:	2023883a 	mov	r17,r4
  807dec:	2821883a 	mov	r16,r5
	if(this == NULL || name == NULL) return;
  807df0:	20001126 	beq	r4,zero,807e38 <setSongName+0x60>
	int size = strlen(name);
  807df4:	2809883a 	mov	r4,r5

void killSong(struct Song** this) {

}
void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
  807df8:	28000f26 	beq	r5,zero,807e38 <setSongName+0x60>
	int size = strlen(name);
  807dfc:	080ce500 	call	80ce50 <strlen>
  807e00:	00c004c4 	movi	r3,19
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
  807e04:	800b883a 	mov	r5,r16
  807e08:	89000104 	addi	r4,r17,4
  807e0c:	180d883a 	mov	r6,r3
void killSong(struct Song** this) {

}
void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  807e10:	18800716 	blt	r3,r2,807e30 <setSongName+0x58>
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
		this->song_name[SONGNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->song_name, name);
  807e14:	89000104 	addi	r4,r17,4
  807e18:	800b883a 	mov	r5,r16

}
  807e1c:	dfc00217 	ldw	ra,8(sp)
  807e20:	dc400117 	ldw	r17,4(sp)
  807e24:	dc000017 	ldw	r16,0(sp)
  807e28:	dec00304 	addi	sp,sp,12
	int size = strlen(name);
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
		this->song_name[SONGNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->song_name, name);
  807e2c:	080cdc41 	jmpi	80cdc4 <strcpy>
}
void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
  807e30:	080cf740 	call	80cf74 <strncpy>
		this->song_name[SONGNAME_LENGTH-1] = '\0';
  807e34:	880005c5 	stb	zero,23(r17)
	} else
		strcpy(this->song_name, name);

}
  807e38:	dfc00217 	ldw	ra,8(sp)
  807e3c:	dc400117 	ldw	r17,4(sp)
  807e40:	dc000017 	ldw	r16,0(sp)
  807e44:	dec00304 	addi	sp,sp,12
  807e48:	f800283a 	ret

00807e4c <unloadSong>:
	if(this == NULL || this->sound == NULL || this->sound->loading_pos >= this->sound->length) return;
	if(!loadStreamBuffer(this->sound, this->property, weight))
		alt_up_sd_card_fclose(this->property[3]);
}

void unloadSong(struct Song* this) {
  807e4c:	defffe04 	addi	sp,sp,-8
  807e50:	dc000015 	stw	r16,0(sp)
  807e54:	dfc00115 	stw	ra,4(sp)
  807e58:	2021883a 	mov	r16,r4
	if(this == NULL || this->sound == NULL) return;
  807e5c:	20000a26 	beq	r4,zero,807e88 <unloadSong+0x3c>
  807e60:	80800017 	ldw	r2,0(r16)
	printf("unloading song id: %d\n", this->id);
  807e64:	010020b4 	movhi	r4,130
  807e68:	21012804 	addi	r4,r4,1184
	if(!loadStreamBuffer(this->sound, this->property, weight))
		alt_up_sd_card_fclose(this->property[3]);
}

void unloadSong(struct Song* this) {
	if(this == NULL || this->sound == NULL) return;
  807e6c:	10000626 	beq	r2,zero,807e88 <unloadSong+0x3c>
	printf("unloading song id: %d\n", this->id);
  807e70:	81400b17 	ldw	r5,44(r16)
  807e74:	080c3f80 	call	80c3f8 <printf>
	unloadSound(this->sound);
  807e78:	81000017 	ldw	r4,0(r16)
  807e7c:	0808a200 	call	808a20 <unloadSound>
	this->sound = NULL;
	this->isCached = false;
  807e80:	80000a05 	stb	zero,40(r16)

void unloadSong(struct Song* this) {
	if(this == NULL || this->sound == NULL) return;
	printf("unloading song id: %d\n", this->id);
	unloadSound(this->sound);
	this->sound = NULL;
  807e84:	80000015 	stw	zero,0(r16)
	this->isCached = false;
}
  807e88:	dfc00117 	ldw	ra,4(sp)
  807e8c:	dc000017 	ldw	r16,0(sp)
  807e90:	dec00204 	addi	sp,sp,8
  807e94:	f800283a 	ret

00807e98 <loadStream>:
	addToMemory(this->sound, this->id);
	this->size = getSoundLengthMS(this->sound);
	this->isCached = true;
}

void loadStream(struct Song* this, int* property, int weight) {
  807e98:	defffe04 	addi	sp,sp,-8
  807e9c:	dc000015 	stw	r16,0(sp)
  807ea0:	dfc00115 	stw	ra,4(sp)
  807ea4:	2021883a 	mov	r16,r4
	if(this == NULL || this->sound == NULL || this->sound->loading_pos >= this->sound->length) return;
  807ea8:	20000626 	beq	r4,zero,807ec4 <loadStream+0x2c>
  807eac:	20800017 	ldw	r2,0(r4)
  807eb0:	10000426 	beq	r2,zero,807ec4 <loadStream+0x2c>
	if(!loadStreamBuffer(this->sound, this->property, weight))
  807eb4:	1009883a 	mov	r4,r2
	this->size = getSoundLengthMS(this->sound);
	this->isCached = true;
}

void loadStream(struct Song* this, int* property, int weight) {
	if(this == NULL || this->sound == NULL || this->sound->loading_pos >= this->sound->length) return;
  807eb8:	10c00317 	ldw	r3,12(r2)
  807ebc:	10800417 	ldw	r2,16(r2)
  807ec0:	18800436 	bltu	r3,r2,807ed4 <loadStream+0x3c>
	if(!loadStreamBuffer(this->sound, this->property, weight))
		alt_up_sd_card_fclose(this->property[3]);
}
  807ec4:	dfc00117 	ldw	ra,4(sp)
  807ec8:	dc000017 	ldw	r16,0(sp)
  807ecc:	dec00204 	addi	sp,sp,8
  807ed0:	f800283a 	ret
	this->isCached = true;
}

void loadStream(struct Song* this, int* property, int weight) {
	if(this == NULL || this->sound == NULL || this->sound->loading_pos >= this->sound->length) return;
	if(!loadStreamBuffer(this->sound, this->property, weight))
  807ed4:	81400c17 	ldw	r5,48(r16)
  807ed8:	0808e140 	call	808e14 <loadStreamBuffer>
  807edc:	10803fcc 	andi	r2,r2,255
  807ee0:	103ff81e 	bne	r2,zero,807ec4 <loadStream+0x2c>
		alt_up_sd_card_fclose(this->property[3]);
  807ee4:	80800c17 	ldw	r2,48(r16)
  807ee8:	1100030f 	ldh	r4,12(r2)
}
  807eec:	dfc00117 	ldw	ra,4(sp)
  807ef0:	dc000017 	ldw	r16,0(sp)
  807ef4:	dec00204 	addi	sp,sp,8
}

void loadStream(struct Song* this, int* property, int weight) {
	if(this == NULL || this->sound == NULL || this->sound->loading_pos >= this->sound->length) return;
	if(!loadStreamBuffer(this->sound, this->property, weight))
		alt_up_sd_card_fclose(this->property[3]);
  807ef8:	081e9901 	jmpi	81e990 <alt_up_sd_card_fclose>

00807efc <loadSong>:
	this->sound = NULL;
	this->property = NULL;
	return this;
}

void loadSong(struct Song* this) {
  807efc:	defffd04 	addi	sp,sp,-12
  807f00:	dc000015 	stw	r16,0(sp)
  807f04:	dfc00215 	stw	ra,8(sp)
  807f08:	dc400115 	stw	r17,4(sp)
  807f0c:	2021883a 	mov	r16,r4
	if(this == NULL) return;
  807f10:	20000226 	beq	r4,zero,807f1c <loadSong+0x20>
	if(this->sound != NULL)
  807f14:	20800017 	ldw	r2,0(r4)
  807f18:	10000526 	beq	r2,zero,807f30 <loadSong+0x34>
		printf("load %s failed, reloading..\n", this->song_name);
	}
	addToMemory(this->sound, this->id);
	this->size = getSoundLengthMS(this->sound);
	this->isCached = true;
}
  807f1c:	dfc00217 	ldw	ra,8(sp)
  807f20:	dc400117 	ldw	r17,4(sp)
  807f24:	dc000017 	ldw	r16,0(sp)
  807f28:	dec00304 	addi	sp,sp,12
  807f2c:	f800283a 	ret
  807f30:	24400104 	addi	r17,r4,4
  807f34:	00000106 	br	807f3c <loadSong+0x40>
void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadWavSound(this->song_name)) == NULL) {
		printf("load %s failed, reloading..\n", this->song_name);
  807f38:	080c3f80 	call	80c3f8 <printf>

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadWavSound(this->song_name)) == NULL) {
  807f3c:	8809883a 	mov	r4,r17
  807f40:	08092fc0 	call	8092fc <loadWavSound>
		printf("load %s failed, reloading..\n", this->song_name);
  807f44:	880b883a 	mov	r5,r17
  807f48:	010020b4 	movhi	r4,130
  807f4c:	21012e04 	addi	r4,r4,1208

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadWavSound(this->song_name)) == NULL) {
  807f50:	80800015 	stw	r2,0(r16)
  807f54:	103ff826 	beq	r2,zero,807f38 <loadSong+0x3c>
		printf("load %s failed, reloading..\n", this->song_name);
	}
	addToMemory(this->sound, this->id);
  807f58:	81400b17 	ldw	r5,44(r16)
  807f5c:	1009883a 	mov	r4,r2
  807f60:	08063940 	call	806394 <addToMemory>
	this->size = getSoundLengthMS(this->sound);
  807f64:	81000017 	ldw	r4,0(r16)
  807f68:	0808f5c0 	call	808f5c <getSoundLengthMS>
	this->isCached = true;
  807f6c:	00c00044 	movi	r3,1
  807f70:	80c00a05 	stb	r3,40(r16)
		return;
	while((this->sound = loadWavSound(this->song_name)) == NULL) {
		printf("load %s failed, reloading..\n", this->song_name);
	}
	addToMemory(this->sound, this->id);
	this->size = getSoundLengthMS(this->sound);
  807f74:	80800915 	stw	r2,36(r16)
	this->isCached = true;
}
  807f78:	dfc00217 	ldw	ra,8(sp)
  807f7c:	dc400117 	ldw	r17,4(sp)
  807f80:	dc000017 	ldw	r16,0(sp)
  807f84:	dec00304 	addi	sp,sp,12
  807f88:	f800283a 	ret

00807f8c <playStream>:
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
	//song_id_lock = 0;
}

void playStream(struct Song* this, float volume, int startTime, int loops) {
  807f8c:	defffa04 	addi	sp,sp,-24
  807f90:	dd000415 	stw	r20,16(sp)
  807f94:	dcc00315 	stw	r19,12(sp)
  807f98:	dc400115 	stw	r17,4(sp)
  807f9c:	dc000015 	stw	r16,0(sp)
  807fa0:	dfc00515 	stw	ra,20(sp)
  807fa4:	dc800215 	stw	r18,8(sp)
  807fa8:	2021883a 	mov	r16,r4
  807fac:	2823883a 	mov	r17,r5
  807fb0:	3027883a 	mov	r19,r6
  807fb4:	3829883a 	mov	r20,r7
	if(this == NULL) return;
  807fb8:	20000326 	beq	r4,zero,807fc8 <playStream+0x3c>
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
  807fbc:	21000b17 	ldw	r4,44(r4)
  807fc0:	0802b380 	call	802b38 <isCurrPlaying>
  807fc4:	10000816 	blt	r2,zero,807fe8 <playStream+0x5c>

	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);

}
  807fc8:	dfc00517 	ldw	ra,20(sp)
  807fcc:	dd000417 	ldw	r20,16(sp)
  807fd0:	dcc00317 	ldw	r19,12(sp)
  807fd4:	dc800217 	ldw	r18,8(sp)
  807fd8:	dc400117 	ldw	r17,4(sp)
  807fdc:	dc000017 	ldw	r16,0(sp)
  807fe0:	dec00604 	addi	sp,sp,24
  807fe4:	f800283a 	ret
	//song_id_lock = 0;
}

void playStream(struct Song* this, float volume, int startTime, int loops) {
	if(this == NULL) return;
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
  807fe8:	048020b4 	movhi	r18,130
  807fec:	9491e904 	addi	r18,r18,18340
  807ff0:	90c0a617 	ldw	r3,664(r18)
  807ff4:	00800244 	movi	r2,9
  807ff8:	10fff316 	blt	r2,r3,807fc8 <playStream+0x3c>

	this->pos = startTime;
  807ffc:	84c00815 	stw	r19,32(r16)
	this->volume = (int)volume;
  808000:	8809883a 	mov	r4,r17
  808004:	080a4a80 	call	80a4a8 <__fixsfsi>
	if(this->sound == NULL) {
  808008:	80c00017 	ldw	r3,0(r16)
void playStream(struct Song* this, float volume, int startTime, int loops) {
	if(this == NULL) return;
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;

	this->pos = startTime;
	this->volume = (int)volume;
  80800c:	80800715 	stw	r2,28(r16)
	if(this->sound == NULL) {
  808010:	18001926 	beq	r3,zero,808078 <playStream+0xec>
		this->sound = initSound(this->property[2]);
		loadStream(this, this->property, 30);
		addToMemory(this->sound, this->id);
	}

	db.curr_song_ids[db.total_songs_playing++] = this->id;
  808014:	90c0a617 	ldw	r3,664(r18)
  808018:	81400b17 	ldw	r5,44(r16)
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
  80801c:	8809883a 	mov	r4,r17
		this->sound = initSound(this->property[2]);
		loadStream(this, this->property, 30);
		addToMemory(this->sound, this->id);
	}

	db.curr_song_ids[db.total_songs_playing++] = this->id;
  808020:	18c5883a 	add	r2,r3,r3
  808024:	1085883a 	add	r2,r2,r2
  808028:	1485883a 	add	r2,r2,r18
  80802c:	18c00044 	addi	r3,r3,1
  808030:	11409b15 	stw	r5,620(r2)
  808034:	90c0a615 	stw	r3,664(r18)
	db.curr_song_id = this->id;
  808038:	80800b17 	ldw	r2,44(r16)
	playSound(this->sound, volume/100, startTime, loops);
  80803c:	0150b234 	movhi	r5,17096
		loadStream(this, this->property, 30);
		addToMemory(this->sound, this->id);
	}

	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
  808040:	90800015 	stw	r2,0(r18)
	playSound(this->sound, volume/100, startTime, loops);
  808044:	080a1340 	call	80a134 <__divsf3>
  808048:	81000017 	ldw	r4,0(r16)
  80804c:	100b883a 	mov	r5,r2
  808050:	980d883a 	mov	r6,r19
  808054:	a00f883a 	mov	r7,r20

}
  808058:	dfc00517 	ldw	ra,20(sp)
  80805c:	dd000417 	ldw	r20,16(sp)
  808060:	dcc00317 	ldw	r19,12(sp)
  808064:	dc800217 	ldw	r18,8(sp)
  808068:	dc400117 	ldw	r17,4(sp)
  80806c:	dc000017 	ldw	r16,0(sp)
  808070:	dec00604 	addi	sp,sp,24
		addToMemory(this->sound, this->id);
	}

	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
  808074:	0808f141 	jmpi	808f14 <playSound>
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;

	this->pos = startTime;
	this->volume = (int)volume;
	if(this->sound == NULL) {
		this->property = loadWavHeader(this->song_name);
  808078:	81000104 	addi	r4,r16,4
  80807c:	0808c0c0 	call	808c0c <loadWavHeader>
		if(memMgr.used_memory + this->property[2] > MAX_CACHE_MEMORY) {
  808080:	00c020f4 	movhi	r3,131
  808084:	18fb2104 	addi	r3,r3,-4988
  808088:	11400217 	ldw	r5,8(r2)
  80808c:	19000017 	ldw	r4,0(r3)
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;

	this->pos = startTime;
	this->volume = (int)volume;
	if(this->sound == NULL) {
		this->property = loadWavHeader(this->song_name);
  808090:	80800c15 	stw	r2,48(r16)
		if(memMgr.used_memory + this->property[2] > MAX_CACHE_MEMORY) {
  808094:	008003f4 	movhi	r2,15
  808098:	10909004 	addi	r2,r2,16960
  80809c:	2909883a 	add	r4,r5,r4
  8080a0:	11000e36 	bltu	r2,r4,8080dc <playStream+0x150>
			freeMem(this->property[2]);
		}
		this->sound = initSound(this->property[2]);
  8080a4:	80800c17 	ldw	r2,48(r16)
  8080a8:	11000217 	ldw	r4,8(r2)
  8080ac:	0808a640 	call	808a64 <initSound>
  8080b0:	1009883a 	mov	r4,r2
  8080b4:	80800015 	stw	r2,0(r16)
		loadStream(this, this->property, 30);
  8080b8:	81400c17 	ldw	r5,48(r16)
	this->size = getSoundLengthMS(this->sound);
	this->isCached = true;
}

void loadStream(struct Song* this, int* property, int weight) {
	if(this == NULL || this->sound == NULL || this->sound->loading_pos >= this->sound->length) return;
  8080bc:	10000326 	beq	r2,zero,8080cc <playStream+0x140>
  8080c0:	10c00317 	ldw	r3,12(r2)
  8080c4:	10800417 	ldw	r2,16(r2)
  8080c8:	18800736 	bltu	r3,r2,8080e8 <playStream+0x15c>
		if(memMgr.used_memory + this->property[2] > MAX_CACHE_MEMORY) {
			freeMem(this->property[2]);
		}
		this->sound = initSound(this->property[2]);
		loadStream(this, this->property, 30);
		addToMemory(this->sound, this->id);
  8080cc:	81000017 	ldw	r4,0(r16)
  8080d0:	81400b17 	ldw	r5,44(r16)
  8080d4:	08063940 	call	806394 <addToMemory>
  8080d8:	003fce06 	br	808014 <playStream+0x88>
	this->pos = startTime;
	this->volume = (int)volume;
	if(this->sound == NULL) {
		this->property = loadWavHeader(this->song_name);
		if(memMgr.used_memory + this->property[2] > MAX_CACHE_MEMORY) {
			freeMem(this->property[2]);
  8080dc:	2809883a 	mov	r4,r5
  8080e0:	08062580 	call	806258 <freeMem>
  8080e4:	003fef06 	br	8080a4 <playStream+0x118>
	this->isCached = true;
}

void loadStream(struct Song* this, int* property, int weight) {
	if(this == NULL || this->sound == NULL || this->sound->loading_pos >= this->sound->length) return;
	if(!loadStreamBuffer(this->sound, this->property, weight))
  8080e8:	01800784 	movi	r6,30
  8080ec:	0808e140 	call	808e14 <loadStreamBuffer>
  8080f0:	10803fcc 	andi	r2,r2,255
  8080f4:	103ff51e 	bne	r2,zero,8080cc <playStream+0x140>
		alt_up_sd_card_fclose(this->property[3]);
  8080f8:	80800c17 	ldw	r2,48(r16)
  8080fc:	1100030f 	ldh	r4,12(r2)
  808100:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
  808104:	003ff106 	br	8080cc <playStream+0x140>

00808108 <initSong>:
#include "Song.h"

#define LENGTH_OF_FADE_PERCENT 0.3
#define MAX_FADE_LENGTH 50000

struct Song* initSong(char* songname) {
  808108:	defffd04 	addi	sp,sp,-12
  80810c:	dc400115 	stw	r17,4(sp)
  808110:	2023883a 	mov	r17,r4
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
  808114:	01000d04 	movi	r4,52
#include "Song.h"

#define LENGTH_OF_FADE_PERCENT 0.3
#define MAX_FADE_LENGTH 50000

struct Song* initSong(char* songname) {
  808118:	dc000015 	stw	r16,0(sp)
  80811c:	dfc00215 	stw	ra,8(sp)
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
  808120:	080bb6c0 	call	80bb6c <malloc>
  808124:	1021883a 	mov	r16,r2

void killSong(struct Song** this) {

}
void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
  808128:	10000b26 	beq	r2,zero,808158 <initSong+0x50>
	int size = strlen(name);
  80812c:	8809883a 	mov	r4,r17

void killSong(struct Song** this) {

}
void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
  808130:	88000926 	beq	r17,zero,808158 <initSong+0x50>
	int size = strlen(name);
  808134:	080ce500 	call	80ce50 <strlen>
  808138:	00c004c4 	movi	r3,19
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
  80813c:	880b883a 	mov	r5,r17
  808140:	81000104 	addi	r4,r16,4
  808144:	180d883a 	mov	r6,r3
void killSong(struct Song** this) {

}
void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  808148:	18801716 	blt	r3,r2,8081a8 <initSong+0xa0>
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
		this->song_name[SONGNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->song_name, name);
  80814c:	880b883a 	mov	r5,r17
  808150:	81000104 	addi	r4,r16,4
  808154:	080cdc40 	call	80cdc4 <strcpy>
#define MAX_FADE_LENGTH 50000

struct Song* initSong(char* songname) {
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
	setSongName(this, songname);
	this->ext[0] = 'W';
  808158:	008015c4 	movi	r2,87
  80815c:	80800605 	stb	r2,24(r16)
	this->ext[1] = 'A';
  808160:	00c01044 	movi	r3,65
	this->ext[2] = 'V';
  808164:	00801584 	movi	r2,86

struct Song* initSong(char* songname) {
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
	setSongName(this, songname);
	this->ext[0] = 'W';
	this->ext[1] = 'A';
  808168:	80c00645 	stb	r3,25(r16)
	this->ext[2] = 'V';
  80816c:	80800685 	stb	r2,26(r16)
	this->isCached = false;
	this->pos = this->size = 0;
	this->volume = 100;
  808170:	00c01904 	movi	r3,100
	this->id = 0;
	this->sound = NULL;
	this->property = NULL;
	return this;
}
  808174:	8005883a 	mov	r2,r16
	this->ext[0] = 'W';
	this->ext[1] = 'A';
	this->ext[2] = 'V';
	this->isCached = false;
	this->pos = this->size = 0;
	this->volume = 100;
  808178:	80c00715 	stw	r3,28(r16)
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
	setSongName(this, songname);
	this->ext[0] = 'W';
	this->ext[1] = 'A';
	this->ext[2] = 'V';
	this->isCached = false;
  80817c:	80000a05 	stb	zero,40(r16)
	this->pos = this->size = 0;
  808180:	80000915 	stw	zero,36(r16)
  808184:	80000815 	stw	zero,32(r16)
	this->volume = 100;
	this->id = 0;
  808188:	80000b15 	stw	zero,44(r16)
	this->sound = NULL;
  80818c:	80000015 	stw	zero,0(r16)
	this->property = NULL;
  808190:	80000c15 	stw	zero,48(r16)
	return this;
}
  808194:	dfc00217 	ldw	ra,8(sp)
  808198:	dc400117 	ldw	r17,4(sp)
  80819c:	dc000017 	ldw	r16,0(sp)
  8081a0:	dec00304 	addi	sp,sp,12
  8081a4:	f800283a 	ret
}
void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
  8081a8:	080cf740 	call	80cf74 <strncpy>
		this->song_name[SONGNAME_LENGTH-1] = '\0';
  8081ac:	800005c5 	stb	zero,23(r16)
  8081b0:	003fe906 	br	808158 <initSong+0x50>

008081b4 <playSong>:

void setSongVolume(struct Song* this, float volume) {
	setSoundVolume(this->sound, volume);
}

void playSong(struct Song* this, float volume, int startTime, int loops) {
  8081b4:	defff804 	addi	sp,sp,-32
  8081b8:	dd800615 	stw	r22,24(sp)
  8081bc:	dd400515 	stw	r21,20(sp)
  8081c0:	dcc00315 	stw	r19,12(sp)
  8081c4:	dc000015 	stw	r16,0(sp)
  8081c8:	dfc00715 	stw	ra,28(sp)
  8081cc:	dd000415 	stw	r20,16(sp)
  8081d0:	dc800215 	stw	r18,8(sp)
  8081d4:	dc400115 	stw	r17,4(sp)
  8081d8:	2021883a 	mov	r16,r4
  8081dc:	2827883a 	mov	r19,r5
  8081e0:	302b883a 	mov	r21,r6
  8081e4:	382d883a 	mov	r22,r7
	//song_id_lock = 1;
	if(this == NULL) return;
  8081e8:	20000326 	beq	r4,zero,8081f8 <playSong+0x44>
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
  8081ec:	21000b17 	ldw	r4,44(r4)
  8081f0:	0802b380 	call	802b38 <isCurrPlaying>
  8081f4:	10000a16 	blt	r2,zero,808220 <playSong+0x6c>
	this->sound->fadeVolume = volume/100.0;
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
	//song_id_lock = 0;
}
  8081f8:	dfc00717 	ldw	ra,28(sp)
  8081fc:	dd800617 	ldw	r22,24(sp)
  808200:	dd400517 	ldw	r21,20(sp)
  808204:	dd000417 	ldw	r20,16(sp)
  808208:	dcc00317 	ldw	r19,12(sp)
  80820c:	dc800217 	ldw	r18,8(sp)
  808210:	dc400117 	ldw	r17,4(sp)
  808214:	dc000017 	ldw	r16,0(sp)
  808218:	dec00804 	addi	sp,sp,32
  80821c:	f800283a 	ret
}

void playSong(struct Song* this, float volume, int startTime, int loops) {
	//song_id_lock = 1;
	if(this == NULL) return;
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
  808220:	050020b4 	movhi	r20,130
  808224:	a511e904 	addi	r20,r20,18340
  808228:	a0c0a617 	ldw	r3,664(r20)
  80822c:	00800244 	movi	r2,9
  808230:	10fff116 	blt	r2,r3,8081f8 <playSong+0x44>
	this->pos = startTime;
  808234:	85400815 	stw	r21,32(r16)
	this->volume = (int)volume;
  808238:	9809883a 	mov	r4,r19
  80823c:	080a4a80 	call	80a4a8 <__fixsfsi>
	db.isPaused = false;
	if(this->sound == NULL)
  808240:	84800017 	ldw	r18,0(r16)
	//song_id_lock = 1;
	if(this == NULL) return;
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
	this->pos = startTime;
	this->volume = (int)volume;
	db.isPaused = false;
  808244:	00e91b14 	movui	r3,42092
  808248:	a0c7883a 	add	r3,r20,r3
void playSong(struct Song* this, float volume, int startTime, int loops) {
	//song_id_lock = 1;
	if(this == NULL) return;
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
	this->pos = startTime;
	this->volume = (int)volume;
  80824c:	80800715 	stw	r2,28(r16)
	db.isPaused = false;
  808250:	18000005 	stb	zero,0(r3)
	if(this->sound == NULL)
  808254:	90003426 	beq	r18,zero,808328 <playSong+0x174>
		loadSong(this);
	int fadeLength = (int) this->sound->length * LENGTH_OF_FADE_PERCENT;
  808258:	91000417 	ldw	r4,16(r18)
  80825c:	080af180 	call	80af18 <__floatsidf>
  808260:	020cccf4 	movhi	r8,13107
  808264:	420cccc4 	addi	r8,r8,13107
  808268:	024ff4f4 	movhi	r9,16339
  80826c:	4a4cccc4 	addi	r9,r9,13107
  808270:	180b883a 	mov	r5,r3
  808274:	480f883a 	mov	r7,r9
  808278:	1009883a 	mov	r4,r2
  80827c:	400d883a 	mov	r6,r8
  808280:	080ab540 	call	80ab54 <__muldf3>
  808284:	180b883a 	mov	r5,r3
  808288:	1009883a 	mov	r4,r2
  80828c:	080b0100 	call	80b010 <__fixdfsi>
	if(fadeLength > MAX_FADE_LENGTH) {
		fadeLength = MAX_FADE_LENGTH;
	}
	setFadeInLength(this->sound, fadeLength);
  808290:	0170d414 	movui	r5,50000
	this->pos = startTime;
	this->volume = (int)volume;
	db.isPaused = false;
	if(this->sound == NULL)
		loadSong(this);
	int fadeLength = (int) this->sound->length * LENGTH_OF_FADE_PERCENT;
  808294:	1023883a 	mov	r17,r2
	if(fadeLength > MAX_FADE_LENGTH) {
		fadeLength = MAX_FADE_LENGTH;
	}
	setFadeInLength(this->sound, fadeLength);
  808298:	2880010e 	bge	r5,r2,8082a0 <playSong+0xec>
  80829c:	2823883a 	mov	r17,r5
  8082a0:	9009883a 	mov	r4,r18
  8082a4:	880b883a 	mov	r5,r17
  8082a8:	080897c0 	call	80897c <setFadeInLength>
	setFadeOutLength(this->sound, fadeLength);
  8082ac:	81000017 	ldw	r4,0(r16)
  8082b0:	880b883a 	mov	r5,r17
  8082b4:	08089840 	call	808984 <setFadeOutLength>
	this->sound->fadeVolume = volume/100.0;
  8082b8:	9809883a 	mov	r4,r19
  8082bc:	0150b234 	movhi	r5,17096
  8082c0:	080a1340 	call	80a134 <__divsf3>
	db.curr_song_ids[db.total_songs_playing++] = this->id;
  8082c4:	a140a617 	ldw	r5,664(r20)
  8082c8:	81800b17 	ldw	r6,44(r16)
	if(fadeLength > MAX_FADE_LENGTH) {
		fadeLength = MAX_FADE_LENGTH;
	}
	setFadeInLength(this->sound, fadeLength);
	setFadeOutLength(this->sound, fadeLength);
	this->sound->fadeVolume = volume/100.0;
  8082cc:	81000017 	ldw	r4,0(r16)
	db.curr_song_ids[db.total_songs_playing++] = this->id;
  8082d0:	2947883a 	add	r3,r5,r5
  8082d4:	18c7883a 	add	r3,r3,r3
  8082d8:	1d07883a 	add	r3,r3,r20
  8082dc:	29400044 	addi	r5,r5,1
  8082e0:	19809b15 	stw	r6,620(r3)
  8082e4:	a140a615 	stw	r5,664(r20)
	db.curr_song_id = this->id;
  8082e8:	80c00b17 	ldw	r3,44(r16)
	playSound(this->sound, volume/100, startTime, loops);
  8082ec:	100b883a 	mov	r5,r2
  8082f0:	a80d883a 	mov	r6,r21
  8082f4:	b00f883a 	mov	r7,r22
	if(fadeLength > MAX_FADE_LENGTH) {
		fadeLength = MAX_FADE_LENGTH;
	}
	setFadeInLength(this->sound, fadeLength);
	setFadeOutLength(this->sound, fadeLength);
	this->sound->fadeVolume = volume/100.0;
  8082f8:	20800915 	stw	r2,36(r4)
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
  8082fc:	a0c00015 	stw	r3,0(r20)
	playSound(this->sound, volume/100, startTime, loops);
	//song_id_lock = 0;
}
  808300:	dfc00717 	ldw	ra,28(sp)
  808304:	dd800617 	ldw	r22,24(sp)
  808308:	dd400517 	ldw	r21,20(sp)
  80830c:	dd000417 	ldw	r20,16(sp)
  808310:	dcc00317 	ldw	r19,12(sp)
  808314:	dc800217 	ldw	r18,8(sp)
  808318:	dc400117 	ldw	r17,4(sp)
  80831c:	dc000017 	ldw	r16,0(sp)
  808320:	dec00804 	addi	sp,sp,32
	setFadeInLength(this->sound, fadeLength);
	setFadeOutLength(this->sound, fadeLength);
	this->sound->fadeVolume = volume/100.0;
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
  808324:	0808f141 	jmpi	808f14 <playSound>
  808328:	84400104 	addi	r17,r16,4
  80832c:	00000106 	br	808334 <playSong+0x180>
void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadWavSound(this->song_name)) == NULL) {
		printf("load %s failed, reloading..\n", this->song_name);
  808330:	080c3f80 	call	80c3f8 <printf>

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadWavSound(this->song_name)) == NULL) {
  808334:	8809883a 	mov	r4,r17
  808338:	08092fc0 	call	8092fc <loadWavSound>
		printf("load %s failed, reloading..\n", this->song_name);
  80833c:	880b883a 	mov	r5,r17
  808340:	010020b4 	movhi	r4,130
  808344:	21012e04 	addi	r4,r4,1208

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadWavSound(this->song_name)) == NULL) {
  808348:	80800015 	stw	r2,0(r16)
  80834c:	103ff826 	beq	r2,zero,808330 <playSong+0x17c>
		printf("load %s failed, reloading..\n", this->song_name);
	}
	addToMemory(this->sound, this->id);
  808350:	81400b17 	ldw	r5,44(r16)
  808354:	1009883a 	mov	r4,r2
  808358:	08063940 	call	806394 <addToMemory>
	this->size = getSoundLengthMS(this->sound);
  80835c:	81000017 	ldw	r4,0(r16)
  808360:	0808f5c0 	call	808f5c <getSoundLengthMS>
  808364:	84800017 	ldw	r18,0(r16)
  808368:	80800915 	stw	r2,36(r16)
	this->isCached = true;
  80836c:	00800044 	movi	r2,1
  808370:	80800a05 	stb	r2,40(r16)
  808374:	003fb806 	br	808258 <playSong+0xa4>

00808378 <loadSDCard>:

#include "Global.h"

bool loadSDCard(alt_up_sd_card_dev* device) {
  808378:	deffff04 	addi	sp,sp,-4
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
  80837c:	010020b4 	movhi	r4,130
  808380:	21013604 	addi	r4,r4,1240

#include "Global.h"

bool loadSDCard(alt_up_sd_card_dev* device) {
  808384:	dfc00015 	stw	ra,0(sp)
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
  808388:	081d4900 	call	81d490 <alt_up_sd_card_open_dev>
  80838c:	10000426 	beq	r2,zero,8083a0 <loadSDCard+0x28>
		if (alt_up_sd_card_is_Present()) {
  808390:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
			printf("Card connected.\n");
  808394:	010020b4 	movhi	r4,130
  808398:	21013a04 	addi	r4,r4,1256

#include "Global.h"

bool loadSDCard(alt_up_sd_card_dev* device) {
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
		if (alt_up_sd_card_is_Present()) {
  80839c:	1000041e 	bne	r2,zero,8083b0 <loadSDCard+0x38>
			printf("Card connected.\n");
			if (alt_up_sd_card_is_FAT16()) {
				printf("FAT16 file system detected.\n");
				return true;
			} else {
				printf("Unknown file system.\n");
  8083a0:	0005883a 	mov	r2,zero
			}
		}
	}
	return false;
}
  8083a4:	dfc00017 	ldw	ra,0(sp)
  8083a8:	dec00104 	addi	sp,sp,4
  8083ac:	f800283a 	ret
#include "Global.h"

bool loadSDCard(alt_up_sd_card_dev* device) {
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
		if (alt_up_sd_card_is_Present()) {
			printf("Card connected.\n");
  8083b0:	080c5100 	call	80c510 <puts>
			if (alt_up_sd_card_is_FAT16()) {
  8083b4:	081d61c0 	call	81d61c <alt_up_sd_card_is_FAT16>
				printf("FAT16 file system detected.\n");
  8083b8:	010020b4 	movhi	r4,130
  8083bc:	21013e04 	addi	r4,r4,1272

bool loadSDCard(alt_up_sd_card_dev* device) {
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
		if (alt_up_sd_card_is_Present()) {
			printf("Card connected.\n");
			if (alt_up_sd_card_is_FAT16()) {
  8083c0:	1000071e 	bne	r2,zero,8083e0 <loadSDCard+0x68>
				printf("FAT16 file system detected.\n");
				return true;
			} else {
				printf("Unknown file system.\n");
  8083c4:	010020b4 	movhi	r4,130
  8083c8:	21014504 	addi	r4,r4,1300
  8083cc:	080c5100 	call	80c510 <puts>
  8083d0:	0005883a 	mov	r2,zero
			}
		}
	}
	return false;
}
  8083d4:	dfc00017 	ldw	ra,0(sp)
  8083d8:	dec00104 	addi	sp,sp,4
  8083dc:	f800283a 	ret
bool loadSDCard(alt_up_sd_card_dev* device) {
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
		if (alt_up_sd_card_is_Present()) {
			printf("Card connected.\n");
			if (alt_up_sd_card_is_FAT16()) {
				printf("FAT16 file system detected.\n");
  8083e0:	080c5100 	call	80c510 <puts>
  8083e4:	00800044 	movi	r2,1
				printf("Unknown file system.\n");
			}
		}
	}
	return false;
}
  8083e8:	dfc00017 	ldw	ra,0(sp)
  8083ec:	dec00104 	addi	sp,sp,4
  8083f0:	f800283a 	ret

008083f4 <main>:

int main()
{
  8083f4:	deffe004 	addi	sp,sp,-128
  8083f8:	dfc01f15 	stw	ra,124(sp)
  8083fc:	dc801e15 	stw	r18,120(sp)
  808400:	dc401d15 	stw	r17,116(sp)
  808404:	dc001c15 	stw	r16,112(sp)
  808408:	00000106 	br	808410 <main+0x1c>
	//SD device initialization
	alt_up_sd_card_dev *device_reference = NULL;
	while(!loadSDCard(device_reference)) {
		printf("SD card is not connected.\n");
  80840c:	080c5100 	call	80c510 <puts>

int main()
{
	//SD device initialization
	alt_up_sd_card_dev *device_reference = NULL;
	while(!loadSDCard(device_reference)) {
  808410:	0009883a 	mov	r4,zero
  808414:	08083780 	call	808378 <loadSDCard>
  808418:	10803fcc 	andi	r2,r2,255
		printf("SD card is not connected.\n");
  80841c:	010020b4 	movhi	r4,130
  808420:	21014b04 	addi	r4,r4,1324

int main()
{
	//SD device initialization
	alt_up_sd_card_dev *device_reference = NULL;
	while(!loadSDCard(device_reference)) {
  808424:	103ff926 	beq	r2,zero,80840c <main+0x18>
		printf("SD card is not connected.\n");
	}

	initVGA();
  808428:	08052f80 	call	8052f8 <initVGA>
	initAudioDeviceController();
  80842c:	08088140 	call	808814 <initAudioDeviceController>
	initSoundMixer();
  808430:	08097740 	call	809774 <initSoundMixer>

	struct CmdScheduler* scheduler = initCmdScheduler();
  808434:	08025780 	call	802578 <initCmdScheduler>

	//Serial device initialization
	com = initRS232(scheduler);
  808438:	100b883a 	mov	r5,r2
  80843c:	d809883a 	mov	r4,sp

	initVGA();
	initAudioDeviceController();
	initSoundMixer();

	struct CmdScheduler* scheduler = initCmdScheduler();
  808440:	1025883a 	mov	r18,r2

	//Serial device initialization
	com = initRS232(scheduler);
  808444:	08072440 	call	807244 <initRS232>
  808448:	01801c04 	movi	r6,112
  80844c:	010020f4 	movhi	r4,131
  808450:	213b0504 	addi	r4,r4,-5100
  808454:	d80b883a 	mov	r5,sp
  808458:	080c2c00 	call	80c2c0 <memcpy>

	initPushKeyController();
  80845c:	0806b5c0 	call	806b5c <initPushKeyController>

	initDatabase();
  808460:	080452c0 	call	80452c <initDatabase>
	initMemory();
  808464:	080647c0 	call	80647c <initMemory>
	//sync database
	//dBTester();
	update();
  808468:	08036a40 	call	8036a4 <update>


	struct Cursor* cursor = initCursor(10, 100);
  80846c:	01000284 	movi	r4,10
  808470:	01401904 	movi	r5,100
  808474:	08027d40 	call	8027d4 <initCursor>
  808478:	1023883a 	mov	r17,r2
	//Test VGA Output
	struct Image* testImg;
	//struct Image* testImg1;
	while((testImg = loadSDImage("TEST.BMP")) == NULL);
  80847c:	010020b4 	movhi	r4,130
  808480:	21001904 	addi	r4,r4,100
  808484:	080553c0 	call	80553c <loadSDImage>
  808488:	1021883a 	mov	r16,r2
  80848c:	103ffb26 	beq	r2,zero,80847c <main+0x88>
	//while((testImg1 = loadSDImage("ART3.BMP")) == NULL);
	draw(35, 35, testImg);
  808490:	010008c4 	movi	r4,35
  808494:	200b883a 	mov	r5,r4
  808498:	100d883a 	mov	r6,r2
  80849c:	08053900 	call	805390 <draw>
	//draw(0, 20, testImg1);
	killImage(testImg);
  8084a0:	8009883a 	mov	r4,r16
  8084a4:	0805a500 	call	805a50 <killImage>
	alt_up_char_buffer_string(char_buffer, "Initialization Completed", 27, 5);
  8084a8:	008020b4 	movhi	r2,130
  8084ac:	1091c204 	addi	r2,r2,18184
  8084b0:	11000017 	ldw	r4,0(r2)
  8084b4:	01c00144 	movi	r7,5
  8084b8:	014020b4 	movhi	r5,130
  8084bc:	29401c04 	addi	r5,r5,112
  8084c0:	018006c4 	movi	r6,27
  8084c4:	081904c0 	call	81904c <alt_up_char_buffer_string>

	int i = 2;
	/*playSong(db.songs[1], 100, 0, 0);
	updateMixer();
	enableAudioDeviceController();*/
	syncPlay(1, 100, 0);
  8084c8:	01401904 	movi	r5,100
  8084cc:	000d883a 	mov	r6,zero
  8084d0:	01000044 	movi	r4,1
  8084d4:	08017ac0 	call	8017ac <syncPlay>
	float x = getCursorX(cursor);
  8084d8:	8809883a 	mov	r4,r17
  8084dc:	08025ac0 	call	8025ac <getCursorX>
  8084e0:	1009883a 	mov	r4,r2
  8084e4:	080a4100 	call	80a410 <__floatsisf>
  8084e8:	1021883a 	mov	r16,r2
	unsigned char byte1, byte2, byte3;
	while(1) {
		cmdProcessing(scheduler);
  8084ec:	9009883a 	mov	r4,r18
  8084f0:	08022a00 	call	8022a0 <cmdProcessing>
		updateMixer();
  8084f4:	08098380 	call	809838 <updateMixer>

		//i = soundTester(i);

		updateCursor(cursor, (int)x, 100);
  8084f8:	8009883a 	mov	r4,r16
  8084fc:	080a4a80 	call	80a4a8 <__fixsfsi>
  808500:	100b883a 	mov	r5,r2
  808504:	01801904 	movi	r6,100
  808508:	8809883a 	mov	r4,r17
  80850c:	080289c0 	call	80289c <updateCursor>
		x+=0.005;
  808510:	8009883a 	mov	r4,r16
  808514:	080a53c0 	call	80a53c <__extendsfdf2>
  808518:	0211ebb4 	movhi	r8,18350
  80851c:	42051ec4 	addi	r8,r8,5243
  808520:	024fdd34 	movhi	r9,16244
  808524:	4a5eb844 	addi	r9,r9,31457
  808528:	180b883a 	mov	r5,r3
  80852c:	480f883a 	mov	r7,r9
  808530:	1009883a 	mov	r4,r2
  808534:	400d883a 	mov	r6,r8
  808538:	080aae00 	call	80aae0 <__adddf3>
  80853c:	180b883a 	mov	r5,r3
  808540:	1009883a 	mov	r4,r2
  808544:	080b1200 	call	80b120 <__truncdfsf2>
		if(x >= 310)
  808548:	1009883a 	mov	r4,r2
  80854c:	0150e6f4 	movhi	r5,17307
		updateMixer();

		//i = soundTester(i);

		updateCursor(cursor, (int)x, 100);
		x+=0.005;
  808550:	1021883a 	mov	r16,r2
		if(x >= 310)
  808554:	080a3980 	call	80a398 <__gesf2>
  808558:	103fe416 	blt	r2,zero,8084ec <main+0xf8>
  80855c:	0021883a 	mov	r16,zero
  808560:	003fe206 	br	8084ec <main+0xf8>

00808564 <dBTester>:
		printf("Iteration %d\n", i);
	}*/
	//	preloadSongsToPlaylist();
	//	printf("Iteration %d\n", i);
	//}
}
  808564:	f800283a 	ret

00808568 <soundTester>:
	struct Command* cmd1 = initCmd(23, 8, paras);

	send((void*)cmd1, CMD);
}

int soundTester(int i) {
  808568:	defffe04 	addi	sp,sp,-8
  80856c:	dc000015 	stw	r16,0(sp)
  808570:	2021883a 	mov	r16,r4
	if(isCurrPlaying(i-1) < 0) {
  808574:	213fffc4 	addi	r4,r4,-1
	struct Command* cmd1 = initCmd(23, 8, paras);

	send((void*)cmd1, CMD);
}

int soundTester(int i) {
  808578:	dfc00115 	stw	ra,4(sp)
	if(isCurrPlaying(i-1) < 0) {
  80857c:	0802b380 	call	802b38 <isCurrPlaying>
		if(i > db.num_of_songs)
  808580:	010020b4 	movhi	r4,130
  808584:	2111e904 	addi	r4,r4,18340

	send((void*)cmd1, CMD);
}

int soundTester(int i) {
	if(isCurrPlaying(i-1) < 0) {
  808588:	10000516 	blt	r2,zero,8085a0 <soundTester+0x38>
		updateMixer();
		enableAudioDeviceController();
		i++;
	}
	return i;
}
  80858c:	8005883a 	mov	r2,r16
  808590:	dfc00117 	ldw	ra,4(sp)
  808594:	dc000017 	ldw	r16,0(sp)
  808598:	dec00204 	addi	sp,sp,8
  80859c:	f800283a 	ret
	send((void*)cmd1, CMD);
}

int soundTester(int i) {
	if(isCurrPlaying(i-1) < 0) {
		if(i > db.num_of_songs)
  8085a0:	2080a717 	ldw	r2,668(r4)
  8085a4:	00c00044 	movi	r3,1
  8085a8:	1400100e 	bge	r2,r16,8085ec <soundTester+0x84>
  8085ac:	04000084 	movi	r16,2
			i = 1;
		playSong(db.songs[i], 100, 0, 0);
  8085b0:	18c5883a 	add	r2,r3,r3
  8085b4:	1085883a 	add	r2,r2,r2
  8085b8:	1105883a 	add	r2,r2,r4
  8085bc:	11003617 	ldw	r4,216(r2)
  8085c0:	0150b234 	movhi	r5,17096
  8085c4:	000d883a 	mov	r6,zero
  8085c8:	000f883a 	mov	r7,zero
  8085cc:	08081b40 	call	8081b4 <playSong>
		updateMixer();
  8085d0:	08098380 	call	809838 <updateMixer>
		enableAudioDeviceController();
  8085d4:	080876c0 	call	80876c <enableAudioDeviceController>
		i++;
	}
	return i;
}
  8085d8:	8005883a 	mov	r2,r16
  8085dc:	dfc00117 	ldw	ra,4(sp)
  8085e0:	dc000017 	ldw	r16,0(sp)
  8085e4:	dec00204 	addi	sp,sp,8
  8085e8:	f800283a 	ret
	send((void*)cmd1, CMD);
}

int soundTester(int i) {
	if(isCurrPlaying(i-1) < 0) {
		if(i > db.num_of_songs)
  8085ec:	8007883a 	mov	r3,r16
  8085f0:	84000044 	addi	r16,r16,1
  8085f4:	003fee06 	br	8085b0 <soundTester+0x48>

008085f8 <cmdTester>:
		removeListFromDB(47);
		removeListFromDB(49);
		removeListFromDB(50);
	}
}
void cmdTester() {
  8085f8:	defff704 	addi	sp,sp,-36
	char* paras[8];
	paras[0] = "para1";
  8085fc:	008020b4 	movhi	r2,130
  808600:	10815204 	addi	r2,r2,1352
	paras[1] = "para21";
  808604:	00c020b4 	movhi	r3,130
  808608:	18c15404 	addi	r3,r3,1360
		removeListFromDB(50);
	}
}
void cmdTester() {
	char* paras[8];
	paras[0] = "para1";
  80860c:	d8800015 	stw	r2,0(sp)
	paras[1] = "para21";
  808610:	d8c00115 	stw	r3,4(sp)
	paras[2] = "para32";
  808614:	008020b4 	movhi	r2,130
  808618:	10815604 	addi	r2,r2,1368
	paras[3] = "para43";
  80861c:	00c020b4 	movhi	r3,130
  808620:	18c15804 	addi	r3,r3,1376
}
void cmdTester() {
	char* paras[8];
	paras[0] = "para1";
	paras[1] = "para21";
	paras[2] = "para32";
  808624:	d8800215 	stw	r2,8(sp)
	paras[3] = "para43";
  808628:	d8c00315 	stw	r3,12(sp)
	paras[4] = "para5";
  80862c:	008020b4 	movhi	r2,130
  808630:	10815a04 	addi	r2,r2,1384
	paras[5] = "para6";
  808634:	00c020b4 	movhi	r3,130
  808638:	18c15c04 	addi	r3,r3,1392
	paras[6] = "para7";
	paras[7] = "para8";
	struct Command* cmd1 = initCmd(23, 8, paras);
  80863c:	d80d883a 	mov	r6,sp
	char* paras[8];
	paras[0] = "para1";
	paras[1] = "para21";
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
  808640:	d8800415 	stw	r2,16(sp)
	paras[5] = "para6";
  808644:	d8c00515 	stw	r3,20(sp)
	paras[6] = "para7";
	paras[7] = "para8";
	struct Command* cmd1 = initCmd(23, 8, paras);
  808648:	01400204 	movi	r5,8
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
	paras[5] = "para6";
	paras[6] = "para7";
	paras[7] = "para8";
  80864c:	00c020b4 	movhi	r3,130
  808650:	18c16004 	addi	r3,r3,1408
	struct Command* cmd1 = initCmd(23, 8, paras);
  808654:	010005c4 	movi	r4,23
	paras[1] = "para21";
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
	paras[5] = "para6";
	paras[6] = "para7";
  808658:	008020b4 	movhi	r2,130
  80865c:	10815e04 	addi	r2,r2,1400
		removeListFromDB(47);
		removeListFromDB(49);
		removeListFromDB(50);
	}
}
void cmdTester() {
  808660:	dfc00815 	stw	ra,32(sp)
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
	paras[5] = "para6";
	paras[6] = "para7";
	paras[7] = "para8";
  808664:	d8c00715 	stw	r3,28(sp)
	paras[1] = "para21";
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
	paras[5] = "para6";
	paras[6] = "para7";
  808668:	d8800615 	stw	r2,24(sp)
	paras[7] = "para8";
	struct Command* cmd1 = initCmd(23, 8, paras);
  80866c:	080141c0 	call	80141c <initCmd>

	send((void*)cmd1, CMD);
  808670:	1009883a 	mov	r4,r2
  808674:	01400044 	movi	r5,1
  808678:	08071c80 	call	8071c8 <send>
}
  80867c:	dfc00817 	ldw	ra,32(sp)
  808680:	dec00904 	addi	sp,sp,36
  808684:	f800283a 	ret

00808688 <dbTester2>:
	//	preloadSongsToPlaylist();
	//	printf("Iteration %d\n", i);
	//}
}

void dbTester2() {
  808688:	defffe04 	addi	sp,sp,-8
  80868c:	dc000015 	stw	r16,0(sp)
  808690:	dfc00115 	stw	ra,4(sp)
  808694:	0021883a 	mov	r16,zero
	createSong("new song 5");
	createSong("new song 6");*/

	int i;
	for(i = 0; i < 50000; i++) {
		loadListsFromSD();
  808698:	08043440 	call	804344 <loadListsFromSD>

		removeListFromDB(1);
  80869c:	01000044 	movi	r4,1
  8086a0:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(6);
  8086a4:	01000184 	movi	r4,6
  8086a8:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(9);
  8086ac:	01000244 	movi	r4,9
  8086b0:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(12);
  8086b4:	01000304 	movi	r4,12
  8086b8:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(17);
  8086bc:	01000444 	movi	r4,17
  8086c0:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(22);
  8086c4:	01000584 	movi	r4,22
  8086c8:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(29);
  8086cc:	01000744 	movi	r4,29
  8086d0:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(33);
  8086d4:	01000844 	movi	r4,33
  8086d8:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(36);
  8086dc:	01000904 	movi	r4,36
  8086e0:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(47);
  8086e4:	01000bc4 	movi	r4,47
  8086e8:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(49);
  8086ec:	01000c44 	movi	r4,49
  8086f0:	08033280 	call	803328 <removeListFromDB>
		removeListFromDB(50);
  8086f4:	01000c84 	movi	r4,50
  8086f8:	08033280 	call	803328 <removeListFromDB>
	createSong("new song 4");
	createSong("new song 5");
	createSong("new song 6");*/

	int i;
	for(i = 0; i < 50000; i++) {
  8086fc:	84000044 	addi	r16,r16,1
  808700:	00b0d414 	movui	r2,50000
  808704:	80bfe41e 	bne	r16,r2,808698 <dbTester2+0x10>
		removeListFromDB(36);
		removeListFromDB(47);
		removeListFromDB(49);
		removeListFromDB(50);
	}
}
  808708:	dfc00117 	ldw	ra,4(sp)
  80870c:	dc000017 	ldw	r16,0(sp)
  808710:	dec00204 	addi	sp,sp,8
  808714:	f800283a 	ret

00808718 <graphicTester>:
 *      Author: danny
 */
#include "TestBot.h"

void graphicTester() {
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  808718:	008020b4 	movhi	r2,130
  80871c:	1091c304 	addi	r2,r2,18188
  808720:	11000017 	ldw	r4,0(r2)
 *  Created on: 2013-03-07
 *      Author: danny
 */
#include "TestBot.h"

void graphicTester() {
  808724:	deffff04 	addi	sp,sp,-4
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  808728:	000b883a 	mov	r5,zero
 *  Created on: 2013-03-07
 *      Author: danny
 */
#include "TestBot.h"

void graphicTester() {
  80872c:	dfc00015 	stw	ra,0(sp)
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  808730:	08194800 	call	819480 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_char_buffer_clear(char_buffer);
  808734:	008020b4 	movhi	r2,130
  808738:	1091c204 	addi	r2,r2,18184
  80873c:	11000017 	ldw	r4,0(r2)
  808740:	08191600 	call	819160 <alt_up_char_buffer_clear>
	struct Frame* mainFrame = initMainFrame();
  808744:	0804f100 	call	804f10 <initMainFrame>
  808748:	1009883a 	mov	r4,r2
	mainFrame->drawFrame(mainFrame);
  80874c:	10800717 	ldw	r2,28(r2)
}
  808750:	dfc00017 	ldw	ra,0(sp)
  808754:	dec00104 	addi	sp,sp,4

void graphicTester() {
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
	alt_up_char_buffer_clear(char_buffer);
	struct Frame* mainFrame = initMainFrame();
	mainFrame->drawFrame(mainFrame);
  808758:	1000683a 	jmp	r2

0080875c <disableAudioDeviceController>:
	alt_irq_register(AUDIO_IRQ, up_dev.audio_dev, (void*) audio_ISR);
	alt_irq_enable(AUDIO_IRQ);
}

void disableAudioDeviceController() {
	alt_up_audio_disable_write_interrupt(up_dev.audio_dev);
  80875c:	008020f4 	movhi	r2,131
  808760:	10bb2804 	addi	r2,r2,-4960
  808764:	11000117 	ldw	r4,4(r2)
  808768:	08170841 	jmpi	817084 <alt_up_audio_disable_write_interrupt>

0080876c <enableAudioDeviceController>:
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
}

void enableAudioDeviceController() {
  80876c:	defffe04 	addi	sp,sp,-8
  808770:	dc000015 	stw	r16,0(sp)
	alt_up_audio_enable_write_interrupt(up_dev.audio_dev);
  808774:	040020f4 	movhi	r16,131
  808778:	843b2804 	addi	r16,r16,-4960
  80877c:	81000117 	ldw	r4,4(r16)
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
}

void enableAudioDeviceController() {
  808780:	dfc00115 	stw	ra,4(sp)
	alt_up_audio_enable_write_interrupt(up_dev.audio_dev);
  808784:	08170380 	call	817038 <alt_up_audio_enable_write_interrupt>
	alt_irq_register(AUDIO_IRQ, up_dev.audio_dev, (void*) audio_ISR);
  808788:	81400117 	ldw	r5,4(r16)
  80878c:	01000044 	movi	r4,1
  808790:	01802034 	movhi	r6,128
  808794:	3196e504 	addi	r6,r6,23444
  808798:	08154540 	call	815454 <alt_irq_register>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80879c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8087a0:	00bfff84 	movi	r2,-2
  8087a4:	2884703a 	and	r2,r5,r2
  8087a8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  8087ac:	00c020b4 	movhi	r3,130
  8087b0:	18d1cc04 	addi	r3,r3,18224
  8087b4:	18800017 	ldw	r2,0(r3)
  8087b8:	10800094 	ori	r2,r2,2
  8087bc:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8087c0:	19000017 	ldw	r4,0(r3)
  8087c4:	200170fa 	wrctl	ienable,r4
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8087c8:	2801703a 	wrctl	status,r5
	alt_irq_enable(AUDIO_IRQ);
}
  8087cc:	dfc00117 	ldw	ra,4(sp)
  8087d0:	dc000017 	ldw	r16,0(sp)
  8087d4:	dec00204 	addi	sp,sp,8
  8087d8:	f800283a 	ret

008087dc <av_config_setup>:

/**
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
  8087dc:	defffe04 	addi	sp,sp,-8
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  8087e0:	010020b4 	movhi	r4,130
  8087e4:	21016204 	addi	r4,r4,1416

/**
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
  8087e8:	dc000015 	stw	r16,0(sp)
  8087ec:	dfc00115 	stw	ra,4(sp)
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  8087f0:	08177680 	call	817768 <alt_up_av_config_open_dev>
  8087f4:	1021883a 	mov	r16,r2
	while (!alt_up_av_config_read_ready(av_config));
  8087f8:	8009883a 	mov	r4,r16
  8087fc:	08179c40 	call	8179c4 <alt_up_av_config_read_ready>
  808800:	103ffd26 	beq	r2,zero,8087f8 <av_config_setup+0x1c>
}
  808804:	dfc00117 	ldw	ra,4(sp)
  808808:	dc000017 	ldw	r16,0(sp)
  80880c:	dec00204 	addi	sp,sp,8
  808810:	f800283a 	ret

00808814 <initAudioDeviceController>:

void initAudioDeviceController() {
  808814:	defffe04 	addi	sp,sp,-8
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  808818:	010020b4 	movhi	r4,130
  80881c:	21016204 	addi	r4,r4,1416
	while (!alt_up_av_config_read_ready(av_config));
}

void initAudioDeviceController() {
  808820:	dc000015 	stw	r16,0(sp)
  808824:	dfc00115 	stw	ra,4(sp)
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  808828:	08177680 	call	817768 <alt_up_av_config_open_dev>
  80882c:	1021883a 	mov	r16,r2
	while (!alt_up_av_config_read_ready(av_config));
  808830:	8009883a 	mov	r4,r16
  808834:	08179c40 	call	8179c4 <alt_up_av_config_read_ready>
  808838:	103ffd26 	beq	r2,zero,808830 <initAudioDeviceController+0x1c>
}

void initAudioDeviceController() {
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
  80883c:	010020b4 	movhi	r4,130
  808840:	21016a04 	addi	r4,r4,1448
  808844:	0816f5c0 	call	816f5c <alt_up_audio_open_dev>
  808848:	00c020f4 	movhi	r3,131
  80884c:	18fb2804 	addi	r3,r3,-4960
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
  808850:	1009883a 	mov	r4,r2
	while (!alt_up_av_config_read_ready(av_config));
}

void initAudioDeviceController() {
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
  808854:	18800115 	stw	r2,4(r3)
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
}
  808858:	dfc00117 	ldw	ra,4(sp)
  80885c:	dc000017 	ldw	r16,0(sp)
  808860:	dec00204 	addi	sp,sp,8
}

void initAudioDeviceController() {
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
  808864:	081714c1 	jmpi	81714c <alt_up_audio_reset_audio_core>

00808868 <convertFromMS>:
 * in the sound buffer
 */
unsigned int convertFromMS(int value) {

	return (unsigned int)(value * 32);
}
  808868:	2004917a 	slli	r2,r4,5
  80886c:	f800283a 	ret

00808870 <convertToMS>:

/**
 * Helper function to convert a value to its millisecond equivalent based on the
 * sampling rate
 */
unsigned int convertToMS(unsigned int value) {
  808870:	2100fa24 	muli	r4,r4,1000
  808874:	deffff04 	addi	sp,sp,-4
  808878:	015f4004 	movi	r5,32000
  80887c:	dfc00015 	stw	ra,0(sp)
  808880:	080b2d00 	call	80b2d0 <__udivsi3>
	return (unsigned int) ((value * 1000)/ DEFAULT_SAMPLE_RATE);
}
  808884:	dfc00017 	ldw	ra,0(sp)
  808888:	dec00104 	addi	sp,sp,4
  80888c:	f800283a 	ret

00808890 <changeBitsPerSample>:
 * Checks to see if the values need to be shifted to match given bytesPerSample
 * @param this - sound to change values of
 * @param bitsPerSampleTo - Number of bits per sample to convert to
 * @param bitsPerSampleFrom - Number of bits used for current sample
 */
void changeBitsPerSample(struct Sound* this, int bitsPerSampleTo, int bitsPerSampleFrom) {
  808890:	2011883a 	mov	r8,r4
	if (bitsPerSampleTo == bitsPerSampleFrom || this == NULL)
  808894:	29801426 	beq	r5,r6,8088e8 <changeBitsPerSample+0x58>
  808898:	20001326 	beq	r4,zero,8088e8 <changeBitsPerSample+0x58>
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  80889c:	20800417 	ldw	r2,16(r4)
void changeBitsPerSample(struct Sound* this, int bitsPerSampleTo, int bitsPerSampleFrom) {
	if (bitsPerSampleTo == bitsPerSampleFrom || this == NULL)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;
  8088a0:	298bc83a 	sub	r5,r5,r6

	for (i = 0; i < this->length; i++) {
  8088a4:	10001026 	beq	r2,zero,8088e8 <changeBitsPerSample+0x58>
  8088a8:	00800044 	movi	r2,1
  8088ac:	11400f16 	blt	r2,r5,8088ec <changeBitsPerSample+0x5c>
  8088b0:	22800617 	ldw	r10,24(r4)
  8088b4:	014bc83a 	sub	r5,zero,r5
  8088b8:	0013883a 	mov	r9,zero
  8088bc:	000f883a 	mov	r7,zero
		if( numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
  8088c0:	39c5883a 	add	r2,r7,r7
  8088c4:	1085883a 	add	r2,r2,r2
  8088c8:	1285883a 	add	r2,r2,r10
  8088cc:	10c00017 	ldw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  8088d0:	49c00044 	addi	r7,r9,1
  8088d4:	3813883a 	mov	r9,r7
		if( numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
  8088d8:	1946d83a 	srl	r3,r3,r5
  8088dc:	10c00015 	stw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  8088e0:	41000417 	ldw	r4,16(r8)
  8088e4:	393ff636 	bltu	r7,r4,8088c0 <changeBitsPerSample+0x30>
  8088e8:	f800283a 	ret
  8088ec:	22800617 	ldw	r10,24(r4)
  8088f0:	000f883a 	mov	r7,zero
  8088f4:	000d883a 	mov	r6,zero
		if( numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
  8088f8:	3185883a 	add	r2,r6,r6
  8088fc:	1085883a 	add	r2,r2,r2
  808900:	1285883a 	add	r2,r2,r10
  808904:	10c00017 	ldw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  808908:	39800044 	addi	r6,r7,1
  80890c:	300f883a 	mov	r7,r6
		if( numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
  808910:	1946983a 	sll	r3,r3,r5
  808914:	10c00015 	stw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  808918:	41000417 	ldw	r4,16(r8)
  80891c:	313ff636 	bltu	r6,r4,8088f8 <changeBitsPerSample+0x68>
  808920:	f800283a 	ret

00808924 <clearSoundBuffer>:
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	int i;
	for (i = 0; i < sound->length; i++) {
  808924:	20800417 	ldw	r2,16(r4)
  808928:	10000b26 	beq	r2,zero,808958 <clearSoundBuffer+0x34>
  80892c:	21800617 	ldw	r6,24(r4)
  808930:	000b883a 	mov	r5,zero
  808934:	0005883a 	mov	r2,zero
		sound->buffer[i] = 0;
  808938:	1085883a 	add	r2,r2,r2
  80893c:	1085883a 	add	r2,r2,r2
  808940:	1185883a 	add	r2,r2,r6
  808944:	10000015 	stw	zero,0(r2)
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	int i;
	for (i = 0; i < sound->length; i++) {
  808948:	20c00417 	ldw	r3,16(r4)
  80894c:	28800044 	addi	r2,r5,1
  808950:	100b883a 	mov	r5,r2
  808954:	10fff836 	bltu	r2,r3,808938 <clearSoundBuffer+0x14>
  808958:	f800283a 	ret

0080895c <allowFade>:
			this->loops--;
	}
}

bool allowFade(struct Sound* this) {
	return !(this->inFadePosition == 0 && this->outFadePosition == this->length);
  80895c:	20800017 	ldw	r2,0(r4)
  808960:	00c00044 	movi	r3,1
  808964:	1000031e 	bne	r2,zero,808974 <allowFade+0x18>
  808968:	20c00417 	ldw	r3,16(r4)
  80896c:	20800117 	ldw	r2,4(r4)
  808970:	10c6c03a 	cmpne	r3,r2,r3
}
  808974:	1805883a 	mov	r2,r3
  808978:	f800283a 	ret

0080897c <setFadeInLength>:
		indexToWrite++;
	}
}*/

void setFadeInLength(struct Sound* this, unsigned int inFadeLength) {
	this->inFadePosition = inFadeLength;
  80897c:	21400015 	stw	r5,0(r4)
}
  808980:	f800283a 	ret

00808984 <setFadeOutLength>:

void setFadeOutLength(struct Sound* this, unsigned int len) {
	this->outFadePosition = this->length - len;
  808984:	20800417 	ldw	r2,16(r4)
  808988:	1145c83a 	sub	r2,r2,r5
  80898c:	20800115 	stw	r2,4(r4)
}
  808990:	f800283a 	ret

00808994 <convertVolumeToInt>:

int convertVolumeToInt(float volume) {
  808994:	deffff04 	addi	sp,sp,-4
  808998:	01506034 	movhi	r5,16768
  80899c:	dfc00015 	stw	ra,0(sp)
  8089a0:	0809f540 	call	809f54 <__mulsf3>
  8089a4:	1009883a 	mov	r4,r2
  8089a8:	080a4a80 	call	80a4a8 <__fixsfsi>
	return (int) (volume * (DEFAULT_BITS_PER_SAMPLE - MIN_VOLUME_BITS)) + MIN_VOLUME_BITS;
}
  8089ac:	10800204 	addi	r2,r2,8
  8089b0:	dfc00017 	ldw	ra,0(sp)
  8089b4:	dec00104 	addi	sp,sp,4
  8089b8:	f800283a 	ret

008089bc <setSoundVolume>:
 *
 * IMPORTANT: This allows the sound to maintain all of its data
 * even if the volume is brought to 0 and then back to 1
 */
void setSoundVolume(struct Sound* this, float volume) {
	this->volume = volume;
  8089bc:	21400815 	stw	r5,32(r4)
	this->fadeVolume = volume;
  8089c0:	21400915 	stw	r5,36(r4)
}
  8089c4:	f800283a 	ret

008089c8 <seekSound>:
 *
 * @param this - The sound to change
 * @param position - The position to seek to in MilliSeconds
 */
void seekSound(struct Sound* this, unsigned int position) {
	this->position = convertFromMS(position);
  8089c8:	280a917a 	slli	r5,r5,5
  8089cc:	21400215 	stw	r5,8(r4)
}
  8089d0:	f800283a 	ret

008089d4 <updatePos>:

void updatePos(struct Sound* this) {
	this->position += 96;
  8089d4:	20800217 	ldw	r2,8(r4)
	if(this->position > this->length)
  8089d8:	20c00417 	ldw	r3,16(r4)
void seekSound(struct Sound* this, unsigned int position) {
	this->position = convertFromMS(position);
}

void updatePos(struct Sound* this) {
	this->position += 96;
  8089dc:	10801804 	addi	r2,r2,96
  8089e0:	20800215 	stw	r2,8(r4)
	if(this->position > this->length)
  8089e4:	1880012e 	bgeu	r3,r2,8089ec <updatePos+0x18>
		this->position = this->length;
  8089e8:	20c00215 	stw	r3,8(r4)
  8089ec:	f800283a 	ret

008089f0 <pauseSound>:
	sound->playing = true;
	sound->loops = loops;
}

void pauseSound(struct Sound* sound) {
	sound->playing = false;
  8089f0:	20000705 	stb	zero,28(r4)
}
  8089f4:	f800283a 	ret

008089f8 <resumeSound>:

void resumeSound(struct Sound* sound) {
	sound->playing = true;
  8089f8:	00800044 	movi	r2,1
  8089fc:	20800705 	stb	r2,28(r4)
}
  808a00:	f800283a 	ret

00808a04 <stopSound>:

void stopSound(struct Sound* sound) {
	sound->playing = false;
	sound->position = 0;
  808a04:	20000215 	stw	zero,8(r4)
void resumeSound(struct Sound* sound) {
	sound->playing = true;
}

void stopSound(struct Sound* sound) {
	sound->playing = false;
  808a08:	20000705 	stb	zero,28(r4)
	sound->position = 0;
}
  808a0c:	f800283a 	ret

00808a10 <checkEnd>:
	sound->buffer = NULL;
	free(sound);
	sound = NULL;
}

bool checkEnd(struct Sound* this) {
  808a10:	20c00417 	ldw	r3,16(r4)
  808a14:	20800217 	ldw	r2,8(r4)
	return (this->position >= this->length);
}
  808a18:	10c5403a 	cmpgeu	r2,r2,r3
  808a1c:	f800283a 	ret

00808a20 <unloadSound>:
void stopSound(struct Sound* sound) {
	sound->playing = false;
	sound->position = 0;
}

void unloadSound(struct Sound* sound) {
  808a20:	defffe04 	addi	sp,sp,-8
  808a24:	dc000015 	stw	r16,0(sp)
  808a28:	dfc00115 	stw	ra,4(sp)
  808a2c:	2021883a 	mov	r16,r4
	if(sound == NULL) return;
  808a30:	20000826 	beq	r4,zero,808a54 <unloadSound+0x34>
	free(sound->buffer);
  808a34:	21000617 	ldw	r4,24(r4)
  808a38:	080bb580 	call	80bb58 <free>
	sound->buffer = NULL;
	free(sound);
  808a3c:	8009883a 	mov	r4,r16
}

void unloadSound(struct Sound* sound) {
	if(sound == NULL) return;
	free(sound->buffer);
	sound->buffer = NULL;
  808a40:	80000615 	stw	zero,24(r16)
	free(sound);
	sound = NULL;
}
  808a44:	dfc00117 	ldw	ra,4(sp)
  808a48:	dc000017 	ldw	r16,0(sp)
  808a4c:	dec00204 	addi	sp,sp,8

void unloadSound(struct Sound* sound) {
	if(sound == NULL) return;
	free(sound->buffer);
	sound->buffer = NULL;
	free(sound);
  808a50:	080bb581 	jmpi	80bb58 <free>
	sound = NULL;
}
  808a54:	dfc00117 	ldw	ra,4(sp)
  808a58:	dc000017 	ldw	r16,0(sp)
  808a5c:	dec00204 	addi	sp,sp,8
  808a60:	f800283a 	ret

00808a64 <initSound>:
	for (i = 0; i < sound->length; i++) {
		sound->buffer[i] = 0;
	}
}

struct Sound* initSound(unsigned int length) {
  808a64:	defffd04 	addi	sp,sp,-12
  808a68:	dc400115 	stw	r17,4(sp)
  808a6c:	2023883a 	mov	r17,r4
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  808a70:	01000a04 	movi	r4,40
	for (i = 0; i < sound->length; i++) {
		sound->buffer[i] = 0;
	}
}

struct Sound* initSound(unsigned int length) {
  808a74:	dfc00215 	stw	ra,8(sp)
  808a78:	dc000015 	stw	r16,0(sp)
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  808a7c:	080bb6c0 	call	80bb6c <malloc>
	this->length = length;
	this->position = 0;
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  808a80:	8c49883a 	add	r4,r17,r17
		sound->buffer[i] = 0;
	}
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  808a84:	1021883a 	mov	r16,r2
	this->length = length;
	this->position = 0;
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  808a88:	2109883a 	add	r4,r4,r4
	}
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	this->length = length;
  808a8c:	14400415 	stw	r17,16(r2)
	this->position = 0;
  808a90:	10000215 	stw	zero,8(r2)
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  808a94:	080bb6c0 	call	80bb6c <malloc>
	//memMgr.used_memory += length;
	this->playing = false;
	this->volume = 1;
	this->fadeVolume = 1;
	this->inFadePosition = 0;
	this->outFadePosition = this->length;
  808a98:	81000417 	ldw	r4,16(r16)

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	this->length = length;
	this->position = 0;
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  808a9c:	100b883a 	mov	r5,r2
	//memMgr.used_memory += length;
	this->playing = false;
	this->volume = 1;
  808aa0:	008fe034 	movhi	r2,16256
  808aa4:	80800815 	stw	r2,32(r16)
	this->fadeVolume = 1;
  808aa8:	80800915 	stw	r2,36(r16)

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	this->length = length;
	this->position = 0;
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  808aac:	81400615 	stw	r5,24(r16)
	//memMgr.used_memory += length;
	this->playing = false;
  808ab0:	80000705 	stb	zero,28(r16)
	this->volume = 1;
	this->fadeVolume = 1;
	this->inFadePosition = 0;
  808ab4:	80000015 	stw	zero,0(r16)
	this->outFadePosition = this->length;
  808ab8:	81000115 	stw	r4,4(r16)
	this->loading_pos = 0;
  808abc:	80000315 	stw	zero,12(r16)
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	int i;
	for (i = 0; i < sound->length; i++) {
  808ac0:	20000926 	beq	r4,zero,808ae8 <initSound+0x84>
		sound->buffer[i] = 0;
  808ac4:	0007883a 	mov	r3,zero
  808ac8:	0005883a 	mov	r2,zero
  808acc:	1085883a 	add	r2,r2,r2
  808ad0:	1085883a 	add	r2,r2,r2
  808ad4:	1145883a 	add	r2,r2,r5
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	int i;
	for (i = 0; i < sound->length; i++) {
  808ad8:	18c00044 	addi	r3,r3,1
		sound->buffer[i] = 0;
  808adc:	10000015 	stw	zero,0(r2)
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	int i;
	for (i = 0; i < sound->length; i++) {
  808ae0:	1805883a 	mov	r2,r3
  808ae4:	20fff91e 	bne	r4,r3,808acc <initSound+0x68>
	this->inFadePosition = 0;
	this->outFadePosition = this->length;
	this->loading_pos = 0;
	clearSoundBuffer(this);
	return this;
}
  808ae8:	8005883a 	mov	r2,r16
  808aec:	dfc00217 	ldw	ra,8(sp)
  808af0:	dc400117 	ldw	r17,4(sp)
  808af4:	dc000017 	ldw	r16,0(sp)
  808af8:	dec00304 	addi	sp,sp,12
  808afc:	f800283a 	ret

00808b00 <readInt>:
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead) {
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
  808b00:	2945883a 	add	r2,r5,r5
  808b04:	1085883a 	add	r2,r2,r2
  808b08:	10800184 	addi	r2,r2,6
  808b0c:	00ffff04 	movi	r3,-4
}

/**
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead) {
  808b10:	defff704 	addi	sp,sp,-36
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
  808b14:	10c4703a 	and	r2,r2,r3
}

/**
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead) {
  808b18:	df000715 	stw	fp,28(sp)
  808b1c:	dd800615 	stw	r22,24(sp)
  808b20:	dd400515 	stw	r21,20(sp)
  808b24:	dcc00315 	stw	r19,12(sp)
  808b28:	dc000015 	stw	r16,0(sp)
  808b2c:	2827883a 	mov	r19,r5
  808b30:	dfc00815 	stw	ra,32(sp)
  808b34:	dd000415 	stw	r20,16(sp)
  808b38:	dc800215 	stw	r18,8(sp)
  808b3c:	dc400115 	stw	r17,4(sp)
  808b40:	d839883a 	mov	fp,sp
  808b44:	d82d883a 	mov	r22,sp
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
  808b48:	d8b7c83a 	sub	sp,sp,r2
}

/**
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead) {
  808b4c:	2021883a 	mov	r16,r4
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
	memset(bytes, 0, numBytesToRead);
  808b50:	000b883a 	mov	r5,zero
  808b54:	d809883a 	mov	r4,sp
  808b58:	980d883a 	mov	r6,r19
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead) {
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
  808b5c:	d82b883a 	mov	r21,sp
	memset(bytes, 0, numBytesToRead);
  808b60:	080c3600 	call	80c360 <memset>
	for (i = 0; i < numBytesToRead; i++) {
  808b64:	04c0270e 	bge	zero,r19,808c04 <readInt+0x104>
  808b68:	853fffcc 	andi	r20,r16,65535
  808b6c:	a520001c 	xori	r20,r20,32768
  808b70:	a5200004 	addi	r20,r20,-32768
  808b74:	0023883a 	mov	r17,zero
  808b78:	0025883a 	mov	r18,zero
  808b7c:	0021883a 	mov	r16,zero
  808b80:	00000106 	br	808b88 <readInt+0x88>
  808b84:	9c401126 	beq	r19,r17,808bcc <readInt+0xcc>
		if((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  808b88:	a009883a 	mov	r4,r20
  808b8c:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  808b90:	10bfffcc 	andi	r2,r2,65535
  808b94:	10a0001c 	xori	r2,r2,32768
			printf("read file invalid\n");
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
  808b98:	8407883a 	add	r3,r16,r16
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
	memset(bytes, 0, numBytesToRead);
	for (i = 0; i < numBytesToRead; i++) {
		if((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  808b9c:	10a00004 	addi	r2,r2,-32768
			printf("read file invalid\n");
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
  808ba0:	10c6983a 	sll	r3,r2,r3
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
	memset(bytes, 0, numBytesToRead);
	for (i = 0; i < numBytesToRead; i++) {
		if((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  808ba4:	ac09883a 	add	r4,r21,r16
int readInt(int file_pointer, int numBytesToRead) {
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
	memset(bytes, 0, numBytesToRead);
	for (i = 0; i < numBytesToRead; i++) {
  808ba8:	8c400044 	addi	r17,r17,1
  808bac:	84000104 	addi	r16,r16,4
		if((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
			printf("read file invalid\n");
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
  808bb0:	90e4b03a 	or	r18,r18,r3
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
	memset(bytes, 0, numBytesToRead);
	for (i = 0; i < numBytesToRead; i++) {
		if((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  808bb4:	20800015 	stw	r2,0(r4)
  808bb8:	103ff20e 	bge	r2,zero,808b84 <readInt+0x84>
			printf("read file invalid\n");
  808bbc:	010020b4 	movhi	r4,130
  808bc0:	21016d04 	addi	r4,r4,1460
  808bc4:	080c5100 	call	80c510 <puts>
  808bc8:	04bfffc4 	movi	r18,-1
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
	}
	return ret;
}
  808bcc:	9005883a 	mov	r2,r18
int readInt(int file_pointer, int numBytesToRead) {
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
	memset(bytes, 0, numBytesToRead);
	for (i = 0; i < numBytesToRead; i++) {
  808bd0:	b037883a 	mov	sp,r22
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
	}
	return ret;
}
  808bd4:	e037883a 	mov	sp,fp
  808bd8:	dfc00817 	ldw	ra,32(sp)
  808bdc:	df000717 	ldw	fp,28(sp)
  808be0:	dd800617 	ldw	r22,24(sp)
  808be4:	dd400517 	ldw	r21,20(sp)
  808be8:	dd000417 	ldw	r20,16(sp)
  808bec:	dcc00317 	ldw	r19,12(sp)
  808bf0:	dc800217 	ldw	r18,8(sp)
  808bf4:	dc400117 	ldw	r17,4(sp)
  808bf8:	dc000017 	ldw	r16,0(sp)
  808bfc:	dec00904 	addi	sp,sp,36
  808c00:	f800283a 	ret
int readInt(int file_pointer, int numBytesToRead) {
	int ret = 0;
	int i;
	int bytes[numBytesToRead];
	memset(bytes, 0, numBytesToRead);
	for (i = 0; i < numBytesToRead; i++) {
  808c04:	0025883a 	mov	r18,zero
  808c08:	003ff006 	br	808bcc <readInt+0xcc>

00808c0c <loadWavHeader>:
	printf("Sound loading complete\n");

	return sound;
}

int* loadWavHeader(char* filename) {
  808c0c:	defff804 	addi	sp,sp,-32
  808c10:	dc400115 	stw	r17,4(sp)
  808c14:	2023883a 	mov	r17,r4
	int index = 0;
	char temp;
	int* ret = (int*)malloc(sizeof(int)*4);
  808c18:	01000404 	movi	r4,16
	printf("Sound loading complete\n");

	return sound;
}

int* loadWavHeader(char* filename) {
  808c1c:	dfc00715 	stw	ra,28(sp)
  808c20:	dd400515 	stw	r21,20(sp)
  808c24:	dd000415 	stw	r20,16(sp)
  808c28:	dd800615 	stw	r22,24(sp)
  808c2c:	dcc00315 	stw	r19,12(sp)
  808c30:	dc800215 	stw	r18,8(sp)
  808c34:	dc000015 	stw	r16,0(sp)
	int index = 0;
	char temp;
	int* ret = (int*)malloc(sizeof(int)*4);
  808c38:	080bb6c0 	call	80bb6c <malloc>
	printf("loading sound: %s\n", filename);
  808c3c:	880b883a 	mov	r5,r17
  808c40:	010020b4 	movhi	r4,130
  808c44:	21017204 	addi	r4,r4,1480
}

int* loadWavHeader(char* filename) {
	int index = 0;
	char temp;
	int* ret = (int*)malloc(sizeof(int)*4);
  808c48:	102b883a 	mov	r21,r2
	printf("loading sound: %s\n", filename);
  808c4c:	080c3f80 	call	80c3f8 <printf>
	int file_pointer = alt_up_sd_card_fopen(filename, false);
  808c50:	8809883a 	mov	r4,r17
  808c54:	000b883a 	mov	r5,zero
  808c58:	081db140 	call	81db14 <alt_up_sd_card_fopen>
  808c5c:	153fffcc 	andi	r20,r2,65535
  808c60:	a520001c 	xori	r20,r20,32768
  808c64:	a5200004 	addi	r20,r20,-32768
	if (file_pointer < 0) {
  808c68:	a0006316 	blt	r20,zero,808df8 <loadWavHeader+0x1ec>
		alt_up_sd_card_fclose(file_pointer); //close the file
		printf("sound file open failed\n");
		return NULL;
  808c6c:	a4bfffcc 	andi	r18,r20,65535
  808c70:	94a0001c 	xori	r18,r18,32768
  808c74:	94a00004 	addi	r18,r18,-32768
  808c78:	0023883a 	mov	r17,zero
  808c7c:	04000604 	movi	r16,24
	}
	//Start reading the wav header
	while (index < SAMPLE_RATE_OFFSET) {
		temp = alt_up_sd_card_read(file_pointer);
	//	printf("%d %x\n", index, temp);
		index++;
  808c80:	8c400044 	addi	r17,r17,1
		printf("sound file open failed\n");
		return NULL;
	}
	//Start reading the wav header
	while (index < SAMPLE_RATE_OFFSET) {
		temp = alt_up_sd_card_read(file_pointer);
  808c84:	9009883a 	mov	r4,r18
  808c88:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
		alt_up_sd_card_fclose(file_pointer); //close the file
		printf("sound file open failed\n");
		return NULL;
	}
	//Start reading the wav header
	while (index < SAMPLE_RATE_OFFSET) {
  808c8c:	8c3ffc1e 	bne	r17,r16,808c80 <loadWavHeader+0x74>
		temp = alt_up_sd_card_read(file_pointer);
	//	printf("%d %x\n", index, temp);
		index++;
	}

	int sampleRate = readInt(file_pointer, 4);
  808c90:	a009883a 	mov	r4,r20
  808c94:	01400104 	movi	r5,4
  808c98:	0808b000 	call	808b00 <readInt>
	index += 4;
	printf("sample rate: %d\n", sampleRate);
  808c9c:	100b883a 	mov	r5,r2
  808ca0:	010020b4 	movhi	r4,130
  808ca4:	21017d04 	addi	r4,r4,1524
		temp = alt_up_sd_card_read(file_pointer);
	//	printf("%d %x\n", index, temp);
		index++;
	}

	int sampleRate = readInt(file_pointer, 4);
  808ca8:	1023883a 	mov	r17,r2
	index += 4;
	printf("sample rate: %d\n", sampleRate);
  808cac:	080c3f80 	call	80c3f8 <printf>
	ret[0] = sampleRate;
	while (index < BITS_PER_SAMPLE_OFFSET) {
		temp = alt_up_sd_card_read(file_pointer);
  808cb0:	9009883a 	mov	r4,r18
	}

	int sampleRate = readInt(file_pointer, 4);
	index += 4;
	printf("sample rate: %d\n", sampleRate);
	ret[0] = sampleRate;
  808cb4:	ac400015 	stw	r17,0(r21)
	while (index < BITS_PER_SAMPLE_OFFSET) {
		temp = alt_up_sd_card_read(file_pointer);
  808cb8:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  808cbc:	9009883a 	mov	r4,r18
  808cc0:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  808cc4:	9009883a 	mov	r4,r18
  808cc8:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  808ccc:	9009883a 	mov	r4,r18
  808cd0:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  808cd4:	9009883a 	mov	r4,r18
  808cd8:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  808cdc:	9009883a 	mov	r4,r18
  808ce0:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
	//	printf("%d %x\n", index, temp);
		index++;
	}

	int bits_per_sample = readInt(file_pointer, 2);
  808ce4:	01400084 	movi	r5,2
  808ce8:	a009883a 	mov	r4,r20
  808cec:	0808b000 	call	808b00 <readInt>
}

int* loadWavHeader(char* filename) {
	int index = 0;
	char temp;
	int* ret = (int*)malloc(sizeof(int)*4);
  808cf0:	a82d883a 	mov	r22,r21
		index++;
	}

	int bits_per_sample = readInt(file_pointer, 2);
	int bytes_per_sample = bits_per_sample / BITS_PER_BYTE;
	ret[1] = bits_per_sample;
  808cf4:	b0800115 	stw	r2,4(r22)
	index += 2;
	printf("bits/sample %d\n", bits_per_sample);
  808cf8:	010020b4 	movhi	r4,130
  808cfc:	21018204 	addi	r4,r4,1544
  808d00:	100b883a 	mov	r5,r2
		temp = alt_up_sd_card_read(file_pointer);
	//	printf("%d %x\n", index, temp);
		index++;
	}

	int bits_per_sample = readInt(file_pointer, 2);
  808d04:	1027883a 	mov	r19,r2
	int bytes_per_sample = bits_per_sample / BITS_PER_BYTE;
	ret[1] = bits_per_sample;
	index += 2;
	printf("bits/sample %d\n", bits_per_sample);
  808d08:	04400904 	movi	r17,36
  808d0c:	080c3f80 	call	80c3f8 <printf>
  808d10:	04000a04 	movi	r16,40
  808d14:	00000106 	br	808d1c <loadWavHeader+0x110>
	while (index < DATA_LENGTH_OFFSET) {
  808d18:	8c001a26 	beq	r17,r16,808d84 <loadWavHeader+0x178>
		if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
  808d1c:	9009883a 	mov	r4,r18
  808d20:	081dfd80 	call	81dfd8 <alt_up_sd_card_read>
  808d24:	10803fcc 	andi	r2,r2,255
  808d28:	1080201c 	xori	r2,r2,128
  808d2c:	10bfe004 	addi	r2,r2,-128
			free(ret);
			ret = NULL;
			return NULL;
		}
	//	printf("%d %x\n", index, temp);
		index++;
  808d30:	8c400044 	addi	r17,r17,1
	int bytes_per_sample = bits_per_sample / BITS_PER_BYTE;
	ret[1] = bits_per_sample;
	index += 2;
	printf("bits/sample %d\n", bits_per_sample);
	while (index < DATA_LENGTH_OFFSET) {
		if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
  808d34:	103ff80e 	bge	r2,zero,808d18 <loadWavHeader+0x10c>
			printf("read file invalid\n");
  808d38:	010020b4 	movhi	r4,130
  808d3c:	21016d04 	addi	r4,r4,1460
  808d40:	080c5100 	call	80c510 <puts>
			alt_up_sd_card_fclose(file_pointer);
  808d44:	9009883a 	mov	r4,r18
  808d48:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
			free(ret);
  808d4c:	a809883a 	mov	r4,r21
  808d50:	080bb580 	call	80bb58 <free>
  808d54:	002d883a 	mov	r22,zero
		return NULL;
	}
	printf("length: %u\n", srcLength);
	ret[3] = file_pointer;
	return ret;
}
  808d58:	b005883a 	mov	r2,r22
  808d5c:	dfc00717 	ldw	ra,28(sp)
  808d60:	dd800617 	ldw	r22,24(sp)
  808d64:	dd400517 	ldw	r21,20(sp)
  808d68:	dd000417 	ldw	r20,16(sp)
  808d6c:	dcc00317 	ldw	r19,12(sp)
  808d70:	dc800217 	ldw	r18,8(sp)
  808d74:	dc400117 	ldw	r17,4(sp)
  808d78:	dc000017 	ldw	r16,0(sp)
  808d7c:	dec00804 	addi	sp,sp,32
  808d80:	f800283a 	ret
		}
	//	printf("%d %x\n", index, temp);
		index++;
	}

	int srcLength = readInt(file_pointer, 4) / bytes_per_sample;
  808d84:	a009883a 	mov	r4,r20
  808d88:	01400104 	movi	r5,4
  808d8c:	0808b000 	call	808b00 <readInt>
  808d90:	1009883a 	mov	r4,r2
  808d94:	9805883a 	mov	r2,r19
  808d98:	98001516 	blt	r19,zero,808df0 <loadWavHeader+0x1e4>
  808d9c:	100bd0fa 	srai	r5,r2,3
  808da0:	008003c4 	movi	r2,15
  808da4:	2146b03a 	or	r3,r4,r5
  808da8:	10c00e36 	bltu	r2,r3,808de4 <loadWavHeader+0x1d8>
  808dac:	2004913a 	slli	r2,r4,4
  808db0:	00c020b4 	movhi	r3,130
  808db4:	18c33304 	addi	r3,r3,3276
  808db8:	1144b03a 	or	r2,r2,r5
  808dbc:	10c5883a 	add	r2,r2,r3
  808dc0:	11400003 	ldbu	r5,0(r2)
	ret[2] = srcLength;
	if(srcLength == -1) {
  808dc4:	00bfffc4 	movi	r2,-1
	//	printf("%d %x\n", index, temp);
		index++;
	}

	int srcLength = readInt(file_pointer, 4) / bytes_per_sample;
	ret[2] = srcLength;
  808dc8:	a9400215 	stw	r5,8(r21)
	if(srcLength == -1) {
  808dcc:	28bfda26 	beq	r5,r2,808d38 <loadWavHeader+0x12c>
		alt_up_sd_card_fclose(file_pointer);
		free(ret);
		ret = NULL;
		return NULL;
	}
	printf("length: %u\n", srcLength);
  808dd0:	010020b4 	movhi	r4,130
  808dd4:	21018604 	addi	r4,r4,1560
  808dd8:	080c3f80 	call	80c3f8 <printf>
	ret[3] = file_pointer;
  808ddc:	ad000315 	stw	r20,12(r21)
  808de0:	003fdd06 	br	808d58 <loadWavHeader+0x14c>
		}
	//	printf("%d %x\n", index, temp);
		index++;
	}

	int srcLength = readInt(file_pointer, 4) / bytes_per_sample;
  808de4:	080b2100 	call	80b210 <__divsi3>
  808de8:	100b883a 	mov	r5,r2
  808dec:	003ff506 	br	808dc4 <loadWavHeader+0x1b8>
  808df0:	988001c4 	addi	r2,r19,7
  808df4:	003fe906 	br	808d9c <loadWavHeader+0x190>
	char temp;
	int* ret = (int*)malloc(sizeof(int)*4);
	printf("loading sound: %s\n", filename);
	int file_pointer = alt_up_sd_card_fopen(filename, false);
	if (file_pointer < 0) {
		alt_up_sd_card_fclose(file_pointer); //close the file
  808df8:	a009883a 	mov	r4,r20
  808dfc:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
		printf("sound file open failed\n");
  808e00:	010020b4 	movhi	r4,130
  808e04:	21017704 	addi	r4,r4,1500
  808e08:	080c5100 	call	80c510 <puts>
  808e0c:	002d883a 	mov	r22,zero
  808e10:	003fd106 	br	808d58 <loadWavHeader+0x14c>

00808e14 <loadStreamBuffer>:
		}
	}
	return this;
}

bool loadStreamBuffer(struct Sound* this, int* property, int weight) {
  808e14:	defff904 	addi	sp,sp,-28
  808e18:	dc800215 	stw	r18,8(sp)
  808e1c:	dc000015 	stw	r16,0(sp)
  808e20:	dfc00615 	stw	ra,24(sp)
  808e24:	dd400515 	stw	r21,20(sp)
  808e28:	dd000415 	stw	r20,16(sp)
  808e2c:	dcc00315 	stw	r19,12(sp)
  808e30:	dc400115 	stw	r17,4(sp)
  808e34:	2021883a 	mov	r16,r4
  808e38:	2825883a 	mov	r18,r5
	int i;
	int size = 288;
	if(weight != 0)
  808e3c:	30002c1e 	bne	r6,zero,808ef0 <loadStreamBuffer+0xdc>
  808e40:	24400417 	ldw	r17,16(r4)
  808e44:	05404804 	movi	r21,288
		size = this->length*weight/100;
	for(i = 0; i < size; i++) {
		if(this->loading_pos < this->length) {
  808e48:	81000317 	ldw	r4,12(r16)
  808e4c:	24402f2e 	bgeu	r4,r17,808f0c <loadStreamBuffer+0xf8>
  808e50:	95000104 	addi	r20,r18,4
  808e54:	94c00304 	addi	r19,r18,12
  808e58:	0025883a 	mov	r18,zero
  808e5c:	00000a06 	br	808e88 <loadStreamBuffer+0x74>
			this->buffer[this->loading_pos] = readInt(property[3], property[1]/8);
  808e60:	99000017 	ldw	r4,0(r19)
  808e64:	280bd0fa 	srai	r5,r5,3
  808e68:	0808b000 	call	808b00 <readInt>
  808e6c:	88800015 	stw	r2,0(r17)
			this->loading_pos++;
  808e70:	80800317 	ldw	r2,12(r16)
  808e74:	11000044 	addi	r4,r2,1
  808e78:	81000315 	stw	r4,12(r16)
bool loadStreamBuffer(struct Sound* this, int* property, int weight) {
	int i;
	int size = 288;
	if(weight != 0)
		size = this->length*weight/100;
	for(i = 0; i < size; i++) {
  808e7c:	9540120e 	bge	r18,r21,808ec8 <loadStreamBuffer+0xb4>
		if(this->loading_pos < this->length) {
  808e80:	80800417 	ldw	r2,16(r16)
  808e84:	2080212e 	bgeu	r4,r2,808f0c <loadStreamBuffer+0xf8>
			this->buffer[this->loading_pos] = readInt(property[3], property[1]/8);
  808e88:	80c00617 	ldw	r3,24(r16)
  808e8c:	a1400017 	ldw	r5,0(r20)
  808e90:	2105883a 	add	r2,r4,r4
  808e94:	1085883a 	add	r2,r2,r2
bool loadStreamBuffer(struct Sound* this, int* property, int weight) {
	int i;
	int size = 288;
	if(weight != 0)
		size = this->length*weight/100;
	for(i = 0; i < size; i++) {
  808e98:	94800044 	addi	r18,r18,1
		if(this->loading_pos < this->length) {
			this->buffer[this->loading_pos] = readInt(property[3], property[1]/8);
  808e9c:	10e3883a 	add	r17,r2,r3
  808ea0:	283fef0e 	bge	r5,zero,808e60 <loadStreamBuffer+0x4c>
  808ea4:	294001c4 	addi	r5,r5,7
  808ea8:	99000017 	ldw	r4,0(r19)
  808eac:	280bd0fa 	srai	r5,r5,3
  808eb0:	0808b000 	call	808b00 <readInt>
  808eb4:	88800015 	stw	r2,0(r17)
			this->loading_pos++;
  808eb8:	80800317 	ldw	r2,12(r16)
  808ebc:	11000044 	addi	r4,r2,1
  808ec0:	81000315 	stw	r4,12(r16)
bool loadStreamBuffer(struct Sound* this, int* property, int weight) {
	int i;
	int size = 288;
	if(weight != 0)
		size = this->length*weight/100;
	for(i = 0; i < size; i++) {
  808ec4:	957fee16 	blt	r18,r21,808e80 <loadStreamBuffer+0x6c>
  808ec8:	00800044 	movi	r2,1
			this->loading_pos++;
		} else {
			return false;
		}
	} return true;
}
  808ecc:	dfc00617 	ldw	ra,24(sp)
  808ed0:	dd400517 	ldw	r21,20(sp)
  808ed4:	dd000417 	ldw	r20,16(sp)
  808ed8:	dcc00317 	ldw	r19,12(sp)
  808edc:	dc800217 	ldw	r18,8(sp)
  808ee0:	dc400117 	ldw	r17,4(sp)
  808ee4:	dc000017 	ldw	r16,0(sp)
  808ee8:	dec00704 	addi	sp,sp,28
  808eec:	f800283a 	ret

bool loadStreamBuffer(struct Sound* this, int* property, int weight) {
	int i;
	int size = 288;
	if(weight != 0)
		size = this->length*weight/100;
  808ef0:	24400417 	ldw	r17,16(r4)
  808ef4:	01401904 	movi	r5,100
  808ef8:	3449383a 	mul	r4,r6,r17
  808efc:	080b2d00 	call	80b2d0 <__udivsi3>
  808f00:	102b883a 	mov	r21,r2
	for(i = 0; i < size; i++) {
  808f04:	00bfd016 	blt	zero,r2,808e48 <loadStreamBuffer+0x34>
  808f08:	003fef06 	br	808ec8 <loadStreamBuffer+0xb4>
  808f0c:	0005883a 	mov	r2,zero
  808f10:	003fee06 	br	808ecc <loadStreamBuffer+0xb8>

00808f14 <playSound>:
 *
 * @param this - The sound to change
 * @param position - The position to seek to in MilliSeconds
 */
void seekSound(struct Sound* this, unsigned int position) {
	this->position = convertFromMS(position);
  808f14:	300c917a 	slli	r6,r6,5
 *
 * IMPORTANT: This allows the sound to maintain all of its data
 * even if the volume is brought to 0 and then back to 1
 */
void setSoundVolume(struct Sound* this, float volume) {
	this->volume = volume;
  808f18:	21400815 	stw	r5,32(r4)
}
void playSound(struct Sound* sound, float volume, int startTime, int loops) {

	seekSound(sound, startTime);
	setSoundVolume(sound, volume);
	sound->playing = true;
  808f1c:	00800044 	movi	r2,1
	sound->loops = loops;
  808f20:	21c00515 	stw	r7,20(r4)
 *
 * @param this - The sound to change
 * @param position - The position to seek to in MilliSeconds
 */
void seekSound(struct Sound* this, unsigned int position) {
	this->position = convertFromMS(position);
  808f24:	21800215 	stw	r6,8(r4)
 * IMPORTANT: This allows the sound to maintain all of its data
 * even if the volume is brought to 0 and then back to 1
 */
void setSoundVolume(struct Sound* this, float volume) {
	this->volume = volume;
	this->fadeVolume = volume;
  808f28:	21400915 	stw	r5,36(r4)
}
void playSound(struct Sound* sound, float volume, int startTime, int loops) {

	seekSound(sound, startTime);
	setSoundVolume(sound, volume);
	sound->playing = true;
  808f2c:	20800705 	stb	r2,28(r4)
	sound->loops = loops;
}
  808f30:	f800283a 	ret

00808f34 <handleSoundEnd>:
	clearSoundBuffer(this);
	return this;
}

void handleSoundEnd(struct Sound* this) {
	if (this->loops == 0) {
  808f34:	20800517 	ldw	r2,20(r4)
  808f38:	1000031e 	bne	r2,zero,808f48 <handleSoundEnd+0x14>
	sound->playing = true;
}

void stopSound(struct Sound* sound) {
	sound->playing = false;
	sound->position = 0;
  808f3c:	20000215 	stw	zero,8(r4)
void resumeSound(struct Sound* sound) {
	sound->playing = true;
}

void stopSound(struct Sound* sound) {
	sound->playing = false;
  808f40:	20000705 	stb	zero,28(r4)
  808f44:	f800283a 	ret
	if (this->loops == 0) {
		stopSound(this);
	} else {
		this->position = 0;
		if (this->loops > 0)
			this->loops--;
  808f48:	10ffffc4 	addi	r3,r2,-1

void handleSoundEnd(struct Sound* this) {
	if (this->loops == 0) {
		stopSound(this);
	} else {
		this->position = 0;
  808f4c:	20000215 	stw	zero,8(r4)
		if (this->loops > 0)
  808f50:	0080010e 	bge	zero,r2,808f58 <handleSoundEnd+0x24>
			this->loops--;
  808f54:	20c00515 	stw	r3,20(r4)
  808f58:	f800283a 	ret

00808f5c <getSoundLengthMS>:
}

/**
 * Returns the length of the sound in milliseconds
 */
unsigned int getSoundLengthMS(struct Sound* this) {
  808f5c:	21000417 	ldw	r4,16(r4)
  808f60:	deffff04 	addi	sp,sp,-4
  808f64:	015f4004 	movi	r5,32000
  808f68:	2100fa24 	muli	r4,r4,1000
  808f6c:	dfc00015 	stw	ra,0(sp)
  808f70:	080b2d00 	call	80b2d0 <__udivsi3>
	return convertToMS(this->length);
}
  808f74:	dfc00017 	ldw	ra,0(sp)
  808f78:	dec00104 	addi	sp,sp,4
  808f7c:	f800283a 	ret

00808f80 <getSoundPositionMS>:
}

/**
 * Returns the length of the sound in milliseconds
 */
unsigned int getSoundPositionMS(struct Sound* this) {
  808f80:	21000217 	ldw	r4,8(r4)
  808f84:	deffff04 	addi	sp,sp,-4
  808f88:	015f4004 	movi	r5,32000
  808f8c:	2100fa24 	muli	r4,r4,1000
  808f90:	dfc00015 	stw	ra,0(sp)
  808f94:	080b2d00 	call	80b2d0 <__udivsi3>
	return convertToMS(this->position);
}
  808f98:	dfc00017 	ldw	ra,0(sp)
  808f9c:	dec00104 	addi	sp,sp,4
  808fa0:	f800283a 	ret

00808fa4 <loadSoundBuffer>:
 * @param filePointer - current filePointer
 * @param srcLength - Length of wav file
 * @param toSampleRate - sampling rate to convert to
 * @param fromSampleRate - current sound sample rate
 */
struct Sound* loadSoundBuffer(int* property, int bytesPerSample, int srcLength, int toSampleRate, int fromSampleRate) {
  808fa4:	deffed04 	addi	sp,sp,-76
  808fa8:	dc800b15 	stw	r18,44(sp)
  808fac:	dc801317 	ldw	r18,76(sp)
  808fb0:	dc400a15 	stw	r17,40(sp)
  808fb4:	2023883a 	mov	r17,r4
	int i = 0;
	int destLength = ((float) srcLength * toSampleRate) / fromSampleRate;
  808fb8:	3809883a 	mov	r4,r7
 * @param filePointer - current filePointer
 * @param srcLength - Length of wav file
 * @param toSampleRate - sampling rate to convert to
 * @param fromSampleRate - current sound sample rate
 */
struct Sound* loadSoundBuffer(int* property, int bytesPerSample, int srcLength, int toSampleRate, int fromSampleRate) {
  808fbc:	dfc01215 	stw	ra,72(sp)
  808fc0:	d9800815 	stw	r6,32(sp)
  808fc4:	d9400715 	stw	r5,28(sp)
  808fc8:	dc000915 	stw	r16,36(sp)
  808fcc:	df001115 	stw	fp,68(sp)
  808fd0:	3821883a 	mov	r16,r7
  808fd4:	ddc01015 	stw	r23,64(sp)
  808fd8:	dd800f15 	stw	r22,60(sp)
  808fdc:	dd400e15 	stw	r21,56(sp)
  808fe0:	dd000d15 	stw	r20,52(sp)
  808fe4:	dcc00c15 	stw	r19,48(sp)
	int i = 0;
	int destLength = ((float) srcLength * toSampleRate) / fromSampleRate;
  808fe8:	080a4100 	call	80a410 <__floatsisf>
  808fec:	9009883a 	mov	r4,r18
  808ff0:	d8800615 	stw	r2,24(sp)
  808ff4:	080a4100 	call	80a410 <__floatsisf>
  808ff8:	d9000817 	ldw	r4,32(sp)
  808ffc:	d8800515 	stw	r2,20(sp)
  809000:	080a4100 	call	80a410 <__floatsisf>
  809004:	d9400617 	ldw	r5,24(sp)
  809008:	1009883a 	mov	r4,r2
  80900c:	0809f540 	call	809f54 <__mulsf3>
  809010:	d9400517 	ldw	r5,20(sp)
  809014:	1009883a 	mov	r4,r2
  809018:	080a1340 	call	80a134 <__divsf3>
  80901c:	1009883a 	mov	r4,r2
  809020:	080a4a80 	call	80a4a8 <__fixsfsi>
  809024:	d8800315 	stw	r2,12(sp)
	float x0 = 0, x1 = 0, x = 0;
	int y0 = 0, y1 = 0;
	int j = 0;
	if(memMgr.used_memory + destLength > MAX_CACHE_MEMORY) {
  809028:	008020f4 	movhi	r2,131
  80902c:	10bb2104 	addi	r2,r2,-4988
  809030:	10c00017 	ldw	r3,0(r2)
  809034:	d8800317 	ldw	r2,12(sp)
  809038:	10c7883a 	add	r3,r2,r3
  80903c:	008003f4 	movhi	r2,15
  809040:	10909004 	addi	r2,r2,16960
  809044:	10c09a36 	bltu	r2,r3,8092b0 <loadSoundBuffer+0x30c>
		sound->buffer[i] = 0;
	}
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  809048:	01000a04 	movi	r4,40
  80904c:	080bb6c0 	call	80bb6c <malloc>
	this->length = length;
	this->position = 0;
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  809050:	d8c00317 	ldw	r3,12(sp)
		sound->buffer[i] = 0;
	}
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  809054:	102d883a 	mov	r22,r2
	this->length = length;
	this->position = 0;
  809058:	10000215 	stw	zero,8(r2)
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  80905c:	18c9883a 	add	r4,r3,r3
  809060:	2109883a 	add	r4,r4,r4
	}
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	this->length = length;
  809064:	10c00415 	stw	r3,16(r2)
	this->position = 0;
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  809068:	080bb6c0 	call	80bb6c <malloc>
	//memMgr.used_memory += length;
	this->playing = false;
	this->volume = 1;
	this->fadeVolume = 1;
	this->inFadePosition = 0;
	this->outFadePosition = this->length;
  80906c:	b1000417 	ldw	r4,16(r22)

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	this->length = length;
	this->position = 0;
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  809070:	100b883a 	mov	r5,r2
	//memMgr.used_memory += length;
	this->playing = false;
	this->volume = 1;
  809074:	008fe034 	movhi	r2,16256
  809078:	b0800815 	stw	r2,32(r22)
	this->fadeVolume = 1;
  80907c:	b0800915 	stw	r2,36(r22)

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	this->length = length;
	this->position = 0;
	this->buffer = (unsigned int*) malloc(sizeof(int) * length);
  809080:	b1400615 	stw	r5,24(r22)
	//memMgr.used_memory += length;
	this->playing = false;
  809084:	b0000705 	stb	zero,28(r22)
	this->volume = 1;
	this->fadeVolume = 1;
	this->inFadePosition = 0;
  809088:	b0000015 	stw	zero,0(r22)
	this->outFadePosition = this->length;
  80908c:	b1000115 	stw	r4,4(r22)
	this->loading_pos = 0;
  809090:	b0000315 	stw	zero,12(r22)
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	int i;
	for (i = 0; i < sound->length; i++) {
  809094:	20000926 	beq	r4,zero,8090bc <loadSoundBuffer+0x118>
		sound->buffer[i] = 0;
  809098:	0007883a 	mov	r3,zero
  80909c:	0005883a 	mov	r2,zero
  8090a0:	1085883a 	add	r2,r2,r2
  8090a4:	1085883a 	add	r2,r2,r2
  8090a8:	1145883a 	add	r2,r2,r5
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	int i;
	for (i = 0; i < sound->length; i++) {
  8090ac:	18c00044 	addi	r3,r3,1
		sound->buffer[i] = 0;
  8090b0:	10000015 	stw	zero,0(r2)
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	int i;
	for (i = 0; i < sound->length; i++) {
  8090b4:	1805883a 	mov	r2,r3
  8090b8:	20fff91e 	bne	r4,r3,8090a0 <loadSoundBuffer+0xfc>
	if(memMgr.used_memory + destLength > MAX_CACHE_MEMORY) {
		freeMem(destLength);
	}
	struct Sound* this = initSound(destLength);

	if(toSampleRate != fromSampleRate) {
  8090bc:	84807f26 	beq	r16,r18,8092bc <loadSoundBuffer+0x318>
		for(i = 0; i < srcLength; i++) {
  8090c0:	d8800817 	ldw	r2,32(sp)
  8090c4:	00806d0e 	bge	zero,r2,80927c <loadSoundBuffer+0x2d8>
			if(j >= destLength) break;
  8090c8:	d8c00317 	ldw	r3,12(sp)
  8090cc:	00c06b0e 	bge	zero,r3,80927c <loadSoundBuffer+0x2d8>
  8090d0:	8c400304 	addi	r17,r17,12
  8090d4:	0039883a 	mov	fp,zero
  8090d8:	002b883a 	mov	r21,zero
  8090dc:	002f883a 	mov	r23,zero
  8090e0:	dc400015 	stw	r17,0(sp)
  8090e4:	d8000115 	stw	zero,4(sp)
  8090e8:	d8000415 	stw	zero,16(sp)
  8090ec:	00001606 	br	809148 <loadSoundBuffer+0x1a4>
			if(y1 > 0x07FFFFF) {
				y1 = y1 | 0xFF000000;
			}
			if(x <= x1) {
				if(x == x1) {
					this->buffer[j++] = y1;
  8090f0:	b0c00617 	ldw	r3,24(r22)
  8090f4:	bdc5883a 	add	r2,r23,r23
  8090f8:	1085883a 	add	r2,r2,r2
  8090fc:	10c5883a 	add	r2,r2,r3
  809100:	bdc00044 	addi	r23,r23,1
  809104:	15000015 	stw	r20,0(r2)
				} else if(x < x1) {
					this->buffer[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
					if(this->buffer[j-1] > 0x07FFFFF)
						this->buffer[j-1] &= 0x00FFFFFF;
				}
				x = j/(float)toSampleRate;
  809108:	b809883a 	mov	r4,r23
  80910c:	080a4100 	call	80a410 <__floatsisf>
  809110:	d9400617 	ldw	r5,24(sp)
  809114:	1009883a 	mov	r4,r2
  809118:	080a1340 	call	80a134 <__divsf3>
  80911c:	102b883a 	mov	r21,r2
		freeMem(destLength);
	}
	struct Sound* this = initSound(destLength);

	if(toSampleRate != fromSampleRate) {
		for(i = 0; i < srcLength; i++) {
  809120:	d8c00417 	ldw	r3,16(sp)
  809124:	d8800817 	ldw	r2,32(sp)
  809128:	18c00044 	addi	r3,r3,1
  80912c:	d8c00415 	stw	r3,16(sp)
  809130:	10c05226 	beq	r2,r3,80927c <loadSoundBuffer+0x2d8>
			}
			x0 = x1;
			y0 = y1;
		}
	} else {
		for(i = 0; i < destLength; i++) {
  809134:	d8c00217 	ldw	r3,8(sp)
	}
	struct Sound* this = initSound(destLength);

	if(toSampleRate != fromSampleRate) {
		for(i = 0; i < srcLength; i++) {
			if(j >= destLength) break;
  809138:	d8800317 	ldw	r2,12(sp)
			}
			x0 = x1;
			y0 = y1;
		}
	} else {
		for(i = 0; i < destLength; i++) {
  80913c:	dd000115 	stw	r20,4(sp)
  809140:	1839883a 	mov	fp,r3
	}
	struct Sound* this = initSound(destLength);

	if(toSampleRate != fromSampleRate) {
		for(i = 0; i < srcLength; i++) {
			if(j >= destLength) break;
  809144:	b8804d0e 	bge	r23,r2,80927c <loadSoundBuffer+0x2d8>
			x1 = i/(float)fromSampleRate;
			if((y1 = readInt(property[3], bytesPerSample)) < 0) {
  809148:	d8c00017 	ldw	r3,0(sp)
  80914c:	d9400717 	ldw	r5,28(sp)
  809150:	19000017 	ldw	r4,0(r3)
  809154:	0808b000 	call	808b00 <readInt>
  809158:	1029883a 	mov	r20,r2
  80915c:	10004216 	blt	r2,zero,809268 <loadSoundBuffer+0x2c4>
				free(this->buffer);
				free(this);
				return NULL;
			}
			if(y1 > 0x07FFFFF) {
  809160:	00802034 	movhi	r2,128
  809164:	10bfffc4 	addi	r2,r2,-1
  809168:	1500010e 	bge	r2,r20,809170 <loadSoundBuffer+0x1cc>
				y1 = y1 | 0xFF000000;
  80916c:	a53fc034 	orhi	r20,r20,65280
	struct Sound* this = initSound(destLength);

	if(toSampleRate != fromSampleRate) {
		for(i = 0; i < srcLength; i++) {
			if(j >= destLength) break;
			x1 = i/(float)fromSampleRate;
  809170:	d9000417 	ldw	r4,16(sp)
  809174:	080a4100 	call	80a410 <__floatsisf>
  809178:	d9400517 	ldw	r5,20(sp)
  80917c:	1009883a 	mov	r4,r2
  809180:	080a1340 	call	80a134 <__divsf3>
				return NULL;
			}
			if(y1 > 0x07FFFFF) {
				y1 = y1 | 0xFF000000;
			}
			if(x <= x1) {
  809184:	1009883a 	mov	r4,r2
  809188:	a80b883a 	mov	r5,r21
	struct Sound* this = initSound(destLength);

	if(toSampleRate != fromSampleRate) {
		for(i = 0; i < srcLength; i++) {
			if(j >= destLength) break;
			x1 = i/(float)fromSampleRate;
  80918c:	1027883a 	mov	r19,r2
  809190:	d8800215 	stw	r2,8(sp)
				return NULL;
			}
			if(y1 > 0x07FFFFF) {
				y1 = y1 | 0xFF000000;
			}
			if(x <= x1) {
  809194:	080a3980 	call	80a398 <__gesf2>
  809198:	103fe116 	blt	r2,zero,809120 <loadSoundBuffer+0x17c>
				if(x == x1) {
  80919c:	9809883a 	mov	r4,r19
  8091a0:	a80b883a 	mov	r5,r21
  8091a4:	080a2a80 	call	80a2a8 <__eqsf2>
  8091a8:	103fd126 	beq	r2,zero,8090f0 <loadSoundBuffer+0x14c>
					this->buffer[j++] = y1;
				} else if(x < x1) {
  8091ac:	9809883a 	mov	r4,r19
  8091b0:	a80b883a 	mov	r5,r21
  8091b4:	080a3200 	call	80a320 <__gtsf2>
  8091b8:	00bfd30e 	bge	zero,r2,809108 <loadSoundBuffer+0x164>
					this->buffer[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
  8091bc:	d8800117 	ldw	r2,4(sp)
  8091c0:	b4800617 	ldw	r18,24(r22)
  8091c4:	bde3883a 	add	r17,r23,r23
  8091c8:	a089c83a 	sub	r4,r20,r2
  8091cc:	080a4100 	call	80a410 <__floatsisf>
  8091d0:	e00b883a 	mov	r5,fp
  8091d4:	a809883a 	mov	r4,r21
  8091d8:	1021883a 	mov	r16,r2
  8091dc:	0809e800 	call	809e80 <__subsf3>
  8091e0:	100b883a 	mov	r5,r2
  8091e4:	8009883a 	mov	r4,r16
  8091e8:	0809f540 	call	809f54 <__mulsf3>
  8091ec:	9809883a 	mov	r4,r19
  8091f0:	e00b883a 	mov	r5,fp
  8091f4:	1021883a 	mov	r16,r2
  8091f8:	0809e800 	call	809e80 <__subsf3>
  8091fc:	100b883a 	mov	r5,r2
  809200:	8009883a 	mov	r4,r16
  809204:	080a1340 	call	80a134 <__divsf3>
  809208:	d9000117 	ldw	r4,4(sp)
  80920c:	1021883a 	mov	r16,r2
  809210:	bdc00044 	addi	r23,r23,1
  809214:	080a4100 	call	80a410 <__floatsisf>
  809218:	100b883a 	mov	r5,r2
  80921c:	8009883a 	mov	r4,r16
  809220:	0809ef00 	call	809ef0 <__addsf3>
  809224:	1009883a 	mov	r4,r2
  809228:	0809c2c0 	call	809c2c <__fixunssfsi>
  80922c:	8c63883a 	add	r17,r17,r17
					if(this->buffer[j-1] > 0x07FFFFF)
  809230:	bdc7883a 	add	r3,r23,r23
			}
			if(x <= x1) {
				if(x == x1) {
					this->buffer[j++] = y1;
				} else if(x < x1) {
					this->buffer[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
  809234:	8ca3883a 	add	r17,r17,r18
					if(this->buffer[j-1] > 0x07FFFFF)
  809238:	18c7883a 	add	r3,r3,r3
			}
			if(x <= x1) {
				if(x == x1) {
					this->buffer[j++] = y1;
				} else if(x < x1) {
					this->buffer[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
  80923c:	88800015 	stw	r2,0(r17)
					if(this->buffer[j-1] > 0x07FFFFF)
  809240:	90e5883a 	add	r18,r18,r3
  809244:	90ffff17 	ldw	r3,-4(r18)
  809248:	00802034 	movhi	r2,128
  80924c:	10bfffc4 	addi	r2,r2,-1
  809250:	10ffad2e 	bgeu	r2,r3,809108 <loadSoundBuffer+0x164>
						this->buffer[j-1] &= 0x00FFFFFF;
  809254:	00804034 	movhi	r2,256
  809258:	10bfffc4 	addi	r2,r2,-1
  80925c:	1884703a 	and	r2,r3,r2
  809260:	90bfff15 	stw	r2,-4(r18)
  809264:	003fa806 	br	809108 <loadSoundBuffer+0x164>
	if(toSampleRate != fromSampleRate) {
		for(i = 0; i < srcLength; i++) {
			if(j >= destLength) break;
			x1 = i/(float)fromSampleRate;
			if((y1 = readInt(property[3], bytesPerSample)) < 0) {
				free(this->buffer);
  809268:	b1000617 	ldw	r4,24(r22)
  80926c:	080bb580 	call	80bb58 <free>
				free(this);
  809270:	b009883a 	mov	r4,r22
  809274:	080bb580 	call	80bb58 <free>
  809278:	002d883a 	mov	r22,zero
				return NULL;
			}
		}
	}
	return this;
}
  80927c:	b005883a 	mov	r2,r22
  809280:	dfc01217 	ldw	ra,72(sp)
  809284:	df001117 	ldw	fp,68(sp)
  809288:	ddc01017 	ldw	r23,64(sp)
  80928c:	dd800f17 	ldw	r22,60(sp)
  809290:	dd400e17 	ldw	r21,56(sp)
  809294:	dd000d17 	ldw	r20,52(sp)
  809298:	dcc00c17 	ldw	r19,48(sp)
  80929c:	dc800b17 	ldw	r18,44(sp)
  8092a0:	dc400a17 	ldw	r17,40(sp)
  8092a4:	dc000917 	ldw	r16,36(sp)
  8092a8:	dec01304 	addi	sp,sp,76
  8092ac:	f800283a 	ret
	int destLength = ((float) srcLength * toSampleRate) / fromSampleRate;
	float x0 = 0, x1 = 0, x = 0;
	int y0 = 0, y1 = 0;
	int j = 0;
	if(memMgr.used_memory + destLength > MAX_CACHE_MEMORY) {
		freeMem(destLength);
  8092b0:	d9000317 	ldw	r4,12(sp)
  8092b4:	08062580 	call	806258 <freeMem>
  8092b8:	003f6306 	br	809048 <loadSoundBuffer+0xa4>
			}
			x0 = x1;
			y0 = y1;
		}
	} else {
		for(i = 0; i < destLength; i++) {
  8092bc:	d8800317 	ldw	r2,12(sp)
  8092c0:	00bfee0e 	bge	zero,r2,80927c <loadSoundBuffer+0x2d8>
		freeMem(destLength);
	}
	struct Sound* this = initSound(destLength);

	if(toSampleRate != fromSampleRate) {
		for(i = 0; i < srcLength; i++) {
  8092c4:	8cc00304 	addi	r19,r17,12
  8092c8:	0025883a 	mov	r18,zero
  8092cc:	0023883a 	mov	r17,zero
			x0 = x1;
			y0 = y1;
		}
	} else {
		for(i = 0; i < destLength; i++) {
			if((this->buffer[i] = readInt(property[3], bytesPerSample)) < 0) {
  8092d0:	99000017 	ldw	r4,0(r19)
  8092d4:	d9400717 	ldw	r5,28(sp)
  8092d8:	b4000617 	ldw	r16,24(r22)
			}
			x0 = x1;
			y0 = y1;
		}
	} else {
		for(i = 0; i < destLength; i++) {
  8092dc:	94800044 	addi	r18,r18,1
			if((this->buffer[i] = readInt(property[3], bytesPerSample)) < 0) {
  8092e0:	0808b000 	call	808b00 <readInt>
			}
			x0 = x1;
			y0 = y1;
		}
	} else {
		for(i = 0; i < destLength; i++) {
  8092e4:	d8c00317 	ldw	r3,12(sp)
			if((this->buffer[i] = readInt(property[3], bytesPerSample)) < 0) {
  8092e8:	8c21883a 	add	r16,r17,r16
  8092ec:	80800015 	stw	r2,0(r16)
			}
			x0 = x1;
			y0 = y1;
		}
	} else {
		for(i = 0; i < destLength; i++) {
  8092f0:	8c400104 	addi	r17,r17,4
  8092f4:	1cbff61e 	bne	r3,r18,8092d0 <loadSoundBuffer+0x32c>
  8092f8:	003fe006 	br	80927c <loadSoundBuffer+0x2d8>

008092fc <loadWavSound>:
 *
 * @param id - id of the sound to load
 * @param buffer - buffer to save the sound wave into
 * return NULL if failed to read the wave file
 */
struct Sound* loadWavSound(char * filename) {
  8092fc:	defffb04 	addi	sp,sp,-20
  809300:	dc800315 	stw	r18,12(sp)
	struct Sound* sound;
	int* property;
	SDIO_lock = 1;
  809304:	04800044 	movi	r18,1
 *
 * @param id - id of the sound to load
 * @param buffer - buffer to save the sound wave into
 * return NULL if failed to read the wave file
 */
struct Sound* loadWavSound(char * filename) {
  809308:	dc000115 	stw	r16,4(sp)
  80930c:	dfc00415 	stw	ra,16(sp)
  809310:	dc400215 	stw	r17,8(sp)
	struct Sound* sound;
	int* property;
	SDIO_lock = 1;
  809314:	d4a75915 	stw	r18,-25244(gp)

	if((property = loadWavHeader(filename)) == NULL) {
  809318:	0808c0c0 	call	808c0c <loadWavHeader>
  80931c:	1021883a 	mov	r16,r2
  809320:	10002f26 	beq	r2,zero,8093e0 <loadWavSound+0xe4>
		return NULL;
	}

	sound = loadSoundBuffer(property, property[1]/8, property[2], DEFAULT_SAMPLE_RATE, property[0]);
  809324:	11400117 	ldw	r5,4(r2)
  809328:	28003516 	blt	r5,zero,809400 <loadWavSound+0x104>
  80932c:	81800217 	ldw	r6,8(r16)
  809330:	80800017 	ldw	r2,0(r16)
  809334:	280bd0fa 	srai	r5,r5,3
  809338:	8009883a 	mov	r4,r16
  80933c:	01df4004 	movi	r7,32000
  809340:	d8800015 	stw	r2,0(sp)
  809344:	0808fa40 	call	808fa4 <loadSoundBuffer>
  809348:	1023883a 	mov	r17,r2

	if(sound == NULL) {
  80934c:	10002e26 	beq	r2,zero,809408 <loadWavSound+0x10c>
		free(property);
		property = NULL;
		return NULL;
	}

	alt_up_sd_card_fclose(property[3]);
  809350:	8100030f 	ldh	r4,12(r16)
  809354:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
	SDIO_lock = 0;
  809358:	d0275915 	stw	zero,-25244(gp)

	changeBitsPerSample(sound, DEFAULT_BITS_PER_SAMPLE, property[1]);
  80935c:	80c00117 	ldw	r3,4(r16)
 * @param this - sound to change values of
 * @param bitsPerSampleTo - Number of bits per sample to convert to
 * @param bitsPerSampleFrom - Number of bits used for current sample
 */
void changeBitsPerSample(struct Sound* this, int bitsPerSampleTo, int bitsPerSampleFrom) {
	if (bitsPerSampleTo == bitsPerSampleFrom || this == NULL)
  809360:	01000604 	movi	r4,24
  809364:	19001226 	beq	r3,r4,8093b0 <loadWavSound+0xb4>
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  809368:	88800417 	ldw	r2,16(r17)
void changeBitsPerSample(struct Sound* this, int bitsPerSampleTo, int bitsPerSampleFrom) {
	if (bitsPerSampleTo == bitsPerSampleFrom || this == NULL)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;
  80936c:	20cbc83a 	sub	r5,r4,r3

	for (i = 0; i < this->length; i++) {
  809370:	10000f26 	beq	r2,zero,8093b0 <loadWavSound+0xb4>
  809374:	91402916 	blt	r18,r5,80941c <loadWavSound+0x120>
  809378:	89c00617 	ldw	r7,24(r17)
  80937c:	0151c83a 	sub	r8,zero,r5
  809380:	000d883a 	mov	r6,zero
  809384:	000b883a 	mov	r5,zero
		if( numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
  809388:	2945883a 	add	r2,r5,r5
  80938c:	1085883a 	add	r2,r2,r2
  809390:	11c5883a 	add	r2,r2,r7
  809394:	10c00017 	ldw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  809398:	31400044 	addi	r5,r6,1
  80939c:	280d883a 	mov	r6,r5
		if( numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
  8093a0:	1a06d83a 	srl	r3,r3,r8
  8093a4:	10c00015 	stw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  8093a8:	89000417 	ldw	r4,16(r17)
  8093ac:	293ff636 	bltu	r5,r4,809388 <loadWavSound+0x8c>

	alt_up_sd_card_fclose(property[3]);
	SDIO_lock = 0;

	changeBitsPerSample(sound, DEFAULT_BITS_PER_SAMPLE, property[1]);
	free(property);
  8093b0:	8009883a 	mov	r4,r16
  8093b4:	080bb580 	call	80bb58 <free>
	property = NULL;

	printf("Sound loading complete\n");
  8093b8:	010020b4 	movhi	r4,130
  8093bc:	21018904 	addi	r4,r4,1572
  8093c0:	080c5100 	call	80c510 <puts>

	return sound;
}
  8093c4:	8805883a 	mov	r2,r17
  8093c8:	dfc00417 	ldw	ra,16(sp)
  8093cc:	dc800317 	ldw	r18,12(sp)
  8093d0:	dc400217 	ldw	r17,8(sp)
  8093d4:	dc000117 	ldw	r16,4(sp)
  8093d8:	dec00504 	addi	sp,sp,20
  8093dc:	f800283a 	ret
struct Sound* loadWavSound(char * filename) {
	struct Sound* sound;
	int* property;
	SDIO_lock = 1;

	if((property = loadWavHeader(filename)) == NULL) {
  8093e0:	0023883a 	mov	r17,zero
	property = NULL;

	printf("Sound loading complete\n");

	return sound;
}
  8093e4:	8805883a 	mov	r2,r17
  8093e8:	dfc00417 	ldw	ra,16(sp)
  8093ec:	dc800317 	ldw	r18,12(sp)
  8093f0:	dc400217 	ldw	r17,8(sp)
  8093f4:	dc000117 	ldw	r16,4(sp)
  8093f8:	dec00504 	addi	sp,sp,20
  8093fc:	f800283a 	ret

	if((property = loadWavHeader(filename)) == NULL) {
		return NULL;
	}

	sound = loadSoundBuffer(property, property[1]/8, property[2], DEFAULT_SAMPLE_RATE, property[0]);
  809400:	294001c4 	addi	r5,r5,7
  809404:	003fc906 	br	80932c <loadWavSound+0x30>

	if(sound == NULL) {
		alt_up_sd_card_fclose(property[3]);
  809408:	8100030f 	ldh	r4,12(r16)
  80940c:	081e9900 	call	81e990 <alt_up_sd_card_fclose>
		free(property);
  809410:	8009883a 	mov	r4,r16
  809414:	080bb580 	call	80bb58 <free>
  809418:	003fea06 	br	8093c4 <loadWavSound+0xc8>
  80941c:	89c00617 	ldw	r7,24(r17)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  809420:	0011883a 	mov	r8,zero
  809424:	000d883a 	mov	r6,zero
		if( numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
  809428:	3185883a 	add	r2,r6,r6
  80942c:	1085883a 	add	r2,r2,r2
  809430:	11c5883a 	add	r2,r2,r7
  809434:	10c00017 	ldw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  809438:	41800044 	addi	r6,r8,1
  80943c:	3011883a 	mov	r8,r6
		if( numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
  809440:	1946983a 	sll	r3,r3,r5
  809444:	10c00015 	stw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  809448:	89000417 	ldw	r4,16(r17)
  80944c:	313ff636 	bltu	r6,r4,809428 <loadWavSound+0x12c>
  809450:	003fd706 	br	8093b0 <loadWavSound+0xb4>

00809454 <loadToSoundBuffer>:
	}
}*/
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
  809454:	defff604 	addi	sp,sp,-40
  809458:	dd800615 	stw	r22,24(sp)
	if(soundMixer->indexSize >=299) return;
  80945c:	d5a75817 	ldw	r22,-25248(gp)
  809460:	008000b4 	movhi	r2,2
  809464:	10b0e204 	addi	r2,r2,-15480
	}
}*/
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
  809468:	dd000415 	stw	r20,16(sp)
	if(soundMixer->indexSize >=299) return;
  80946c:	b085883a 	add	r2,r22,r2
  809470:	10c00017 	ldw	r3,0(r2)
  809474:	00804a84 	movi	r2,298
	}
}*/
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
  809478:	dfc00915 	stw	ra,36(sp)
  80947c:	df000815 	stw	fp,32(sp)
  809480:	ddc00715 	stw	r23,28(sp)
  809484:	dd400515 	stw	r21,20(sp)
  809488:	dcc00315 	stw	r19,12(sp)
  80948c:	dc800215 	stw	r18,8(sp)
  809490:	dc400115 	stw	r17,4(sp)
  809494:	dc000015 	stw	r16,0(sp)
  809498:	2029883a 	mov	r20,r4
	if(soundMixer->indexSize >=299) return;
  80949c:	10c05e16 	blt	r2,r3,809618 <loadToSoundBuffer+0x1c4>
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
  8094a0:	24400217 	ldw	r17,8(r4)
  8094a4:	20800017 	ldw	r2,0(r4)
  8094a8:	1440672e 	bgeu	r2,r17,809648 <loadToSoundBuffer+0x1f4>
  8094ac:	008000b4 	movhi	r2,2
  8094b0:	10b0e104 	addi	r2,r2,-15484
  8094b4:	b0af883a 	add	r23,r22,r2
		sound->fadeVolume = sound->volume;
  8094b8:	002b883a 	mov	r21,zero
  8094bc:	07004034 	movhi	fp,256
  8094c0:	e73fffc4 	addi	fp,fp,-1
  8094c4:	00001a06 	br	809530 <loadToSoundBuffer+0xdc>
			sound->fadeVolume *= 0.9999;
		}
		//}
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  8094c8:	bc000017 	ldw	r16,0(r23)
  8094cc:	a4400917 	ldw	r17,36(r20)
  8094d0:	080a4100 	call	80a410 <__floatsisf>
  8094d4:	84001824 	muli	r16,r16,96
  8094d8:	880b883a 	mov	r5,r17
  8094dc:	1009883a 	mov	r4,r2
  8094e0:	8561883a 	add	r16,r16,r21
  8094e4:	8421883a 	add	r16,r16,r16
  8094e8:	0809f540 	call	809f54 <__mulsf3>
  8094ec:	8421883a 	add	r16,r16,r16
  8094f0:	85a1883a 	add	r16,r16,r22
  8094f4:	1009883a 	mov	r4,r2
  8094f8:	080a4a80 	call	80a4a8 <__fixsfsi>
  8094fc:	80c00017 	ldw	r3,0(r16)
  809500:	01004034 	movhi	r4,256
  809504:	2085c83a 	sub	r2,r4,r2
  809508:	1704703a 	and	r2,r2,fp
  80950c:	1887883a 	add	r3,r3,r2
  809510:	80c00015 	stw	r3,0(r16)
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		sound->position++;
  809514:	a4400217 	ldw	r17,8(r20)
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
	}
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  809518:	ad400044 	addi	r21,r21,1
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		sound->position++;
  80951c:	88800044 	addi	r2,r17,1
  809520:	1023883a 	mov	r17,r2
  809524:	a0800215 	stw	r2,8(r20)
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
	}
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  809528:	00801804 	movi	r2,96
  80952c:	a8803a26 	beq	r21,r2,809618 <loadToSoundBuffer+0x1c4>
		if(sound->position >= sound->length) break;
  809530:	a0800417 	ldw	r2,16(r20)
  809534:	8880382e 	bgeu	r17,r2,809618 <loadToSoundBuffer+0x1c4>
		//if (allowFade(sound)) {

		if (sound->position > sound->outFadePosition) {
  809538:	a0800117 	ldw	r2,4(r20)
  80953c:	14400f2e 	bgeu	r2,r17,80957c <loadToSoundBuffer+0x128>
			sound->fadeVolume *= 0.9999;
  809540:	a1000917 	ldw	r4,36(r20)
  809544:	080a53c0 	call	80a53c <__extendsfdf2>
  809548:	02123a74 	movhi	r8,18665
  80954c:	4229c784 	addi	r8,r8,-22754
  809550:	024ffc34 	movhi	r9,16368
  809554:	4a7fcb84 	addi	r9,r9,-210
  809558:	180b883a 	mov	r5,r3
  80955c:	480f883a 	mov	r7,r9
  809560:	400d883a 	mov	r6,r8
  809564:	1009883a 	mov	r4,r2
  809568:	080ab540 	call	80ab54 <__muldf3>
  80956c:	180b883a 	mov	r5,r3
  809570:	1009883a 	mov	r4,r2
  809574:	080b1200 	call	80b120 <__truncdfsf2>
  809578:	a0800915 	stw	r2,36(r20)
		}
		//}
		data = sound->buffer[sound->position];
  80957c:	a0c00617 	ldw	r3,24(r20)
  809580:	8c45883a 	add	r2,r17,r17
  809584:	1085883a 	add	r2,r2,r2
  809588:	10c5883a 	add	r2,r2,r3
  80958c:	14c00017 	ldw	r19,0(r2)
		if(data > 0x07FFFFF)
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  809590:	00804034 	movhi	r2,256
  809594:	14c9c83a 	sub	r4,r2,r19
		if (sound->position > sound->outFadePosition) {
			sound->fadeVolume *= 0.9999;
		}
		//}
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
  809598:	00802034 	movhi	r2,128
  80959c:	10bfffc4 	addi	r2,r2,-1
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  8095a0:	2708703a 	and	r4,r4,fp
		if (sound->position > sound->outFadePosition) {
			sound->fadeVolume *= 0.9999;
		}
		//}
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
  8095a4:	14ffc836 	bltu	r2,r19,8094c8 <loadToSoundBuffer+0x74>
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  8095a8:	bc000017 	ldw	r16,0(r23)
  8095ac:	a4800917 	ldw	r18,36(r20)
  8095b0:	84001824 	muli	r16,r16,96
  8095b4:	8561883a 	add	r16,r16,r21
  8095b8:	8421883a 	add	r16,r16,r16
  8095bc:	8421883a 	add	r16,r16,r16
  8095c0:	85a1883a 	add	r16,r16,r22
  8095c4:	81000017 	ldw	r4,0(r16)
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
	}
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  8095c8:	ad400044 	addi	r21,r21,1
		//}
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  8095cc:	080a5900 	call	80a590 <__floatunsisf>
  8095d0:	9809883a 	mov	r4,r19
  8095d4:	1023883a 	mov	r17,r2
  8095d8:	080a5900 	call	80a590 <__floatunsisf>
  8095dc:	1009883a 	mov	r4,r2
  8095e0:	900b883a 	mov	r5,r18
  8095e4:	0809f540 	call	809f54 <__mulsf3>
  8095e8:	100b883a 	mov	r5,r2
  8095ec:	8809883a 	mov	r4,r17
  8095f0:	0809ef00 	call	809ef0 <__addsf3>
  8095f4:	1009883a 	mov	r4,r2
  8095f8:	0809c2c0 	call	809c2c <__fixunssfsi>
  8095fc:	80800015 	stw	r2,0(r16)
		sound->position++;
  809600:	a4400217 	ldw	r17,8(r20)
  809604:	88800044 	addi	r2,r17,1
  809608:	1023883a 	mov	r17,r2
  80960c:	a0800215 	stw	r2,8(r20)
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
	}
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  809610:	00801804 	movi	r2,96
  809614:	a8bfc61e 	bne	r21,r2,809530 <loadToSoundBuffer+0xdc>
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		sound->position++;
	}
}
  809618:	dfc00917 	ldw	ra,36(sp)
  80961c:	df000817 	ldw	fp,32(sp)
  809620:	ddc00717 	ldw	r23,28(sp)
  809624:	dd800617 	ldw	r22,24(sp)
  809628:	dd400517 	ldw	r21,20(sp)
  80962c:	dd000417 	ldw	r20,16(sp)
  809630:	dcc00317 	ldw	r19,12(sp)
  809634:	dc800217 	ldw	r18,8(sp)
  809638:	dc400117 	ldw	r17,4(sp)
  80963c:	dc000017 	ldw	r16,0(sp)
  809640:	dec00a04 	addi	sp,sp,40
  809644:	f800283a 	ret
void loadToSoundBuffer(struct Sound* sound) {
	if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
  809648:	20800817 	ldw	r2,32(r4)
  80964c:	20800915 	stw	r2,36(r4)
  809650:	003f9606 	br	8094ac <loadToSoundBuffer+0x58>

00809654 <negativeToPositive>:
		}
	} else if(!db.isPaused)
		enableAudioDeviceController();
}

int negativeToPositive(int value) {
  809654:	00804034 	movhi	r2,256
  809658:	1105c83a 	sub	r2,r2,r4
	return (0xFFFFFF - (value - 1)) & 0xFFFFFF;
}
  80965c:	00c04034 	movhi	r3,256
  809660:	18ffffc4 	addi	r3,r3,-1
  809664:	10c4703a 	and	r2,r2,r3
  809668:	f800283a 	ret

0080966c <positiveToNegative>:
int positiveToNegative(int value) {
  80966c:	00804034 	movhi	r2,256
  809670:	1105c83a 	sub	r2,r2,r4
	return ((0xFFFFFF - value) + 1) & 0xFFFFFF;
}
  809674:	00c04034 	movhi	r3,256
  809678:	18ffffc4 	addi	r3,r3,-1
  80967c:	10c4703a 	and	r2,r2,r3
  809680:	f800283a 	ret

00809684 <incIndex>:
void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
}

void incIndex() {
	soundMixer->currIndex++;
  809684:	d1275817 	ldw	r4,-25248(gp)
  809688:	008000b4 	movhi	r2,2
  80968c:	10b0e004 	addi	r2,r2,-15488
  809690:	208b883a 	add	r5,r4,r2
  809694:	28c00017 	ldw	r3,0(r5)
	soundMixer->indexSize--;
  809698:	10800204 	addi	r2,r2,8
  80969c:	2089883a 	add	r4,r4,r2
void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
}

void incIndex() {
	soundMixer->currIndex++;
  8096a0:	18c00044 	addi	r3,r3,1
  8096a4:	28c00015 	stw	r3,0(r5)
	soundMixer->indexSize--;
  8096a8:	20800017 	ldw	r2,0(r4)
  8096ac:	10bfffc4 	addi	r2,r2,-1
  8096b0:	20800015 	stw	r2,0(r4)
	if(soundMixer->currIndex > 299) {
  8096b4:	28c00017 	ldw	r3,0(r5)
  8096b8:	00804ac4 	movi	r2,299
  8096bc:	10c0010e 	bge	r2,r3,8096c4 <incIndex+0x40>
		soundMixer->currIndex = 0;
  8096c0:	28000015 	stw	zero,0(r5)
	}
	if(soundMixer->indexSize <= 0)
  8096c4:	20800017 	ldw	r2,0(r4)
  8096c8:	0080010e 	bge	zero,r2,8096d0 <incIndex+0x4c>
  8096cc:	f800283a 	ret
		disableAudioDeviceController();
  8096d0:	080875c1 	jmpi	80875c <disableAudioDeviceController>

008096d4 <clearIndexBuffer>:
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  8096d4:	01806004 	movi	r6,384
  8096d8:	2185383a 	mul	r2,r4,r6
  8096dc:	d1275817 	ldw	r4,-25248(gp)
  8096e0:	000b883a 	mov	r5,zero
  8096e4:	1109883a 	add	r4,r2,r4
  8096e8:	080c3601 	jmpi	80c360 <memset>

008096ec <setGlobalVolume>:
	memset(soundMixer->empty_buffer, 0, sizeof(soundMixer->empty_buffer));
	clearSoundMixer();
}

void setGlobalVolume(float volume) {
	setSoundVolume(db.songs[db.curr_song_id]->sound, volume);
  8096ec:	018020b4 	movhi	r6,130
  8096f0:	3191e904 	addi	r6,r6,18340
  8096f4:	30800017 	ldw	r2,0(r6)
  8096f8:	200b883a 	mov	r5,r4
  8096fc:	1085883a 	add	r2,r2,r2
  809700:	1085883a 	add	r2,r2,r2
  809704:	1185883a 	add	r2,r2,r6
  809708:	10c03617 	ldw	r3,216(r2)
  80970c:	19000017 	ldw	r4,0(r3)
  809710:	08089bc1 	jmpi	8089bc <setSoundVolume>

00809714 <clearSoundMixer>:
}

void clearSoundMixer() {
	int i;
	soundMixer->cleared = true;
  809714:	d1e75817 	ldw	r7,-25248(gp)

void setGlobalVolume(float volume) {
	setSoundVolume(db.songs[db.curr_song_id]->sound, volume);
}

void clearSoundMixer() {
  809718:	defffe04 	addi	sp,sp,-8
	int i;
	soundMixer->cleared = true;
  80971c:	008000b4 	movhi	r2,2
  809720:	10b0e304 	addi	r2,r2,-15476

void setGlobalVolume(float volume) {
	setSoundVolume(db.songs[db.curr_song_id]->sound, volume);
}

void clearSoundMixer() {
  809724:	dc000015 	stw	r16,0(sp)
	int i;
	soundMixer->cleared = true;
  809728:	3885883a 	add	r2,r7,r2
  80972c:	00c00044 	movi	r3,1
  809730:	0021883a 	mov	r16,zero

void setGlobalVolume(float volume) {
	setSoundVolume(db.songs[db.curr_song_id]->sound, volume);
}

void clearSoundMixer() {
  809734:	dfc00115 	stw	ra,4(sp)
	int i;
	soundMixer->cleared = true;
  809738:	10c00005 	stb	r3,0(r2)
  80973c:	00000106 	br	809744 <clearSoundMixer+0x30>
  809740:	d1e75817 	ldw	r7,-25248(gp)
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  809744:	81006024 	muli	r4,r16,384
  809748:	000b883a 	mov	r5,zero
  80974c:	01806004 	movi	r6,384
  809750:	21c9883a 	add	r4,r4,r7
  809754:	080c3600 	call	80c360 <memset>
}

void clearSoundMixer() {
	int i;
	soundMixer->cleared = true;
	for(i = 0; i < 299; i++) {
  809758:	84000044 	addi	r16,r16,1
  80975c:	00804ac4 	movi	r2,299
  809760:	80bff71e 	bne	r16,r2,809740 <clearSoundMixer+0x2c>
		clearIndexBuffer(i);
	}
}
  809764:	dfc00117 	ldw	ra,4(sp)
  809768:	dc000017 	ldw	r16,0(sp)
  80976c:	dec00204 	addi	sp,sp,8
  809770:	f800283a 	ret

00809774 <initSoundMixer>:
#define BUFFER_LENGTH 50000

/**
 * Initializes the sound mixer to loop indefinitely
 */
void initSoundMixer() {
  809774:	defffe04 	addi	sp,sp,-8
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
  809778:	010000b4 	movhi	r4,2
  80977c:	2130e404 	addi	r4,r4,-15472
#define BUFFER_LENGTH 50000

/**
 * Initializes the sound mixer to loop indefinitely
 */
void initSoundMixer() {
  809780:	dfc00115 	stw	ra,4(sp)
  809784:	dc000015 	stw	r16,0(sp)
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
  809788:	080bb6c0 	call	80bb6c <malloc>
  80978c:	100f883a 	mov	r7,r2
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
  809790:	008000b4 	movhi	r2,2
  809794:	10b0e204 	addi	r2,r2,-15480
  809798:	3885883a 	add	r2,r7,r2
  80979c:	10000015 	stw	zero,0(r2)
  8097a0:	11000017 	ldw	r4,0(r2)
  8097a4:	00c000b4 	movhi	r3,2
  8097a8:	18f0e104 	addi	r3,r3,-15484
  8097ac:	38c7883a 	add	r3,r7,r3
  8097b0:	19000015 	stw	r4,0(r3)
  8097b4:	19400017 	ldw	r5,0(r3)
  8097b8:	008000b4 	movhi	r2,2
  8097bc:	10b0e004 	addi	r2,r2,-15488
  8097c0:	3885883a 	add	r2,r7,r2
	memset(soundMixer->empty_buffer, 0, sizeof(soundMixer->empty_buffer));
  8097c4:	010000b4 	movhi	r4,2
  8097c8:	21308004 	addi	r4,r4,-15872
/**
 * Initializes the sound mixer to loop indefinitely
 */
void initSoundMixer() {
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
  8097cc:	11400015 	stw	r5,0(r2)
	memset(soundMixer->empty_buffer, 0, sizeof(soundMixer->empty_buffer));
  8097d0:	3909883a 	add	r4,r7,r4
  8097d4:	000b883a 	mov	r5,zero
  8097d8:	01806004 	movi	r6,384

/**
 * Initializes the sound mixer to loop indefinitely
 */
void initSoundMixer() {
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
  8097dc:	d1e75815 	stw	r7,-25248(gp)
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
	memset(soundMixer->empty_buffer, 0, sizeof(soundMixer->empty_buffer));
  8097e0:	080c3600 	call	80c360 <memset>
	setSoundVolume(db.songs[db.curr_song_id]->sound, volume);
}

void clearSoundMixer() {
	int i;
	soundMixer->cleared = true;
  8097e4:	d1e75817 	ldw	r7,-25248(gp)
  8097e8:	008000b4 	movhi	r2,2
  8097ec:	10b0e304 	addi	r2,r2,-15476
  8097f0:	00c00044 	movi	r3,1
  8097f4:	3885883a 	add	r2,r7,r2
  8097f8:	0021883a 	mov	r16,zero
  8097fc:	10c00005 	stb	r3,0(r2)
  809800:	00000106 	br	809808 <initSoundMixer+0x94>
  809804:	d1e75817 	ldw	r7,-25248(gp)
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  809808:	81006024 	muli	r4,r16,384
  80980c:	000b883a 	mov	r5,zero
  809810:	01806004 	movi	r6,384
  809814:	21c9883a 	add	r4,r4,r7
  809818:	080c3600 	call	80c360 <memset>
}

void clearSoundMixer() {
	int i;
	soundMixer->cleared = true;
	for(i = 0; i < 299; i++) {
  80981c:	84000044 	addi	r16,r16,1
  809820:	00804ac4 	movi	r2,299
  809824:	80bff71e 	bne	r16,r2,809804 <initSoundMixer+0x90>
void initSoundMixer() {
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
	memset(soundMixer->empty_buffer, 0, sizeof(soundMixer->empty_buffer));
	clearSoundMixer();
}
  809828:	dfc00117 	ldw	ra,4(sp)
  80982c:	dc000017 	ldw	r16,0(sp)
  809830:	dec00204 	addi	sp,sp,8
  809834:	f800283a 	ret

00809838 <updateMixer>:
	if(soundMixer->indexSize <= 0)
		disableAudioDeviceController();
	//syncUpdatePos(db.curr_song_id, db.songs[db.curr_song_id]->sound->position);
}

void updateMixer() {
  809838:	defff304 	addi	sp,sp,-52
  80983c:	dc000315 	stw	r16,12(sp)
  809840:	dfc00c15 	stw	ra,48(sp)
  809844:	df000b15 	stw	fp,44(sp)
  809848:	ddc00a15 	stw	r23,40(sp)
  80984c:	dd800915 	stw	r22,36(sp)
  809850:	dd400815 	stw	r21,32(sp)
  809854:	dd000715 	stw	r20,28(sp)
  809858:	dcc00615 	stw	r19,24(sp)
  80985c:	dc800515 	stw	r18,20(sp)
  809860:	dc400415 	stw	r17,16(sp)
  809864:	d8000215 	stw	zero,8(sp)
  809868:	0021883a 	mov	r16,zero
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
		if(soundMixer->indexSize >=299) return;
  80986c:	d5a75817 	ldw	r22,-25248(gp)
  809870:	00c000b4 	movhi	r3,2
  809874:	18f0e204 	addi	r3,r3,-15480
  809878:	b0c5883a 	add	r2,r22,r3
  80987c:	11000017 	ldw	r4,0(r2)
  809880:	00c04a84 	movi	r3,298
  809884:	1900b816 	blt	r3,r4,809b68 <updateMixer+0x330>
		for(j = 0; j < db.total_songs_playing; j++) {
  809888:	010020b4 	movhi	r4,130
  80988c:	2111e904 	addi	r4,r4,18340
  809890:	2080a617 	ldw	r2,664(r4)
  809894:	00808b0e 	bge	zero,r2,809ac4 <updateMixer+0x28c>
  809898:	20809b04 	addi	r2,r4,620
  80989c:	d8000115 	stw	zero,4(sp)
  8098a0:	d8800015 	stw	r2,0(sp)
  8098a4:	1007883a 	mov	r3,r2
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
  8098a8:	18800017 	ldw	r2,0(r3)
  8098ac:	010020b4 	movhi	r4,130
  8098b0:	2111e904 	addi	r4,r4,18340
  8098b4:	1085883a 	add	r2,r2,r2
  8098b8:	1085883a 	add	r2,r2,r2
  8098bc:	1105883a 	add	r2,r2,r4
  8098c0:	10c03617 	ldw	r3,216(r2)
  8098c4:	19000017 	ldw	r4,0(r3)
  8098c8:	0808a100 	call	808a10 <checkEnd>
  8098cc:	10803fcc 	andi	r2,r2,255
  8098d0:	1000711e 	bne	r2,zero,809a98 <updateMixer+0x260>
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
  8098d4:	d8c00017 	ldw	r3,0(sp)
}*/
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
	if(soundMixer->indexSize >=299) return;
  8098d8:	d5a75817 	ldw	r22,-25248(gp)
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
		if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
  8098dc:	010020b4 	movhi	r4,130
  8098e0:	2111e904 	addi	r4,r4,18340
  8098e4:	18800017 	ldw	r2,0(r3)
  8098e8:	1085883a 	add	r2,r2,r2
  8098ec:	1085883a 	add	r2,r2,r2
  8098f0:	1105883a 	add	r2,r2,r4
}*/
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
	if(soundMixer->indexSize >=299) return;
  8098f4:	010000b4 	movhi	r4,2
  8098f8:	2130e204 	addi	r4,r4,-15480
  8098fc:	b107883a 	add	r3,r22,r4
  809900:	19400017 	ldw	r5,0(r3)
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
		if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
  809904:	11003617 	ldw	r4,216(r2)
}*/
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
	if(soundMixer->indexSize >=299) return;
  809908:	00804a84 	movi	r2,298
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
		if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
  80990c:	25000017 	ldw	r20,0(r4)
}*/
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
	if(soundMixer->indexSize >=299) return;
  809910:	11406016 	blt	r2,r5,809a94 <updateMixer+0x25c>
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
  809914:	a4400217 	ldw	r17,8(r20)
  809918:	a0800017 	ldw	r2,0(r20)
  80991c:	14400236 	bltu	r2,r17,809928 <updateMixer+0xf0>
		sound->fadeVolume = sound->volume;
  809920:	a0800817 	ldw	r2,32(r20)
  809924:	a0800915 	stw	r2,36(r20)
  809928:	008000b4 	movhi	r2,2
  80992c:	10b0e104 	addi	r2,r2,-15484
  809930:	b0af883a 	add	r23,r22,r2
  809934:	002b883a 	mov	r21,zero
  809938:	07004034 	movhi	fp,256
  80993c:	e73fffc4 	addi	fp,fp,-1
  809940:	00001a06 	br	8099ac <updateMixer+0x174>
			sound->fadeVolume *= 0.9999;
		}
		//}
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  809944:	bc000017 	ldw	r16,0(r23)
  809948:	a4400917 	ldw	r17,36(r20)
  80994c:	080a4100 	call	80a410 <__floatsisf>
  809950:	84001824 	muli	r16,r16,96
  809954:	880b883a 	mov	r5,r17
  809958:	1009883a 	mov	r4,r2
  80995c:	8561883a 	add	r16,r16,r21
  809960:	8421883a 	add	r16,r16,r16
  809964:	0809f540 	call	809f54 <__mulsf3>
  809968:	8421883a 	add	r16,r16,r16
  80996c:	85a1883a 	add	r16,r16,r22
  809970:	1009883a 	mov	r4,r2
  809974:	080a4a80 	call	80a4a8 <__fixsfsi>
  809978:	80c00017 	ldw	r3,0(r16)
  80997c:	01004034 	movhi	r4,256
  809980:	2085c83a 	sub	r2,r4,r2
  809984:	1704703a 	and	r2,r2,fp
  809988:	1887883a 	add	r3,r3,r2
  80998c:	80c00015 	stw	r3,0(r16)
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		sound->position++;
  809990:	a4400217 	ldw	r17,8(r20)
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
	}
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  809994:	ad400044 	addi	r21,r21,1
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		sound->position++;
  809998:	88800044 	addi	r2,r17,1
  80999c:	1023883a 	mov	r17,r2
  8099a0:	a0800215 	stw	r2,8(r20)
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
	}
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  8099a4:	00801804 	movi	r2,96
  8099a8:	a8803a26 	beq	r21,r2,809a94 <updateMixer+0x25c>
		if(sound->position >= sound->length) break;
  8099ac:	a0800417 	ldw	r2,16(r20)
  8099b0:	8880382e 	bgeu	r17,r2,809a94 <updateMixer+0x25c>
		//if (allowFade(sound)) {

		if (sound->position > sound->outFadePosition) {
  8099b4:	a0800117 	ldw	r2,4(r20)
  8099b8:	14400f2e 	bgeu	r2,r17,8099f8 <updateMixer+0x1c0>
			sound->fadeVolume *= 0.9999;
  8099bc:	a1000917 	ldw	r4,36(r20)
  8099c0:	080a53c0 	call	80a53c <__extendsfdf2>
  8099c4:	02123a74 	movhi	r8,18665
  8099c8:	4229c784 	addi	r8,r8,-22754
  8099cc:	024ffc34 	movhi	r9,16368
  8099d0:	4a7fcb84 	addi	r9,r9,-210
  8099d4:	180b883a 	mov	r5,r3
  8099d8:	480f883a 	mov	r7,r9
  8099dc:	400d883a 	mov	r6,r8
  8099e0:	1009883a 	mov	r4,r2
  8099e4:	080ab540 	call	80ab54 <__muldf3>
  8099e8:	180b883a 	mov	r5,r3
  8099ec:	1009883a 	mov	r4,r2
  8099f0:	080b1200 	call	80b120 <__truncdfsf2>
  8099f4:	a0800915 	stw	r2,36(r20)
		}
		//}
		data = sound->buffer[sound->position];
  8099f8:	a0c00617 	ldw	r3,24(r20)
  8099fc:	8c45883a 	add	r2,r17,r17
  809a00:	1085883a 	add	r2,r2,r2
  809a04:	10c5883a 	add	r2,r2,r3
  809a08:	14c00017 	ldw	r19,0(r2)
		if(data > 0x07FFFFF)
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  809a0c:	00804034 	movhi	r2,256
  809a10:	14c9c83a 	sub	r4,r2,r19
		if (sound->position > sound->outFadePosition) {
			sound->fadeVolume *= 0.9999;
		}
		//}
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
  809a14:	00802034 	movhi	r2,128
  809a18:	10bfffc4 	addi	r2,r2,-1
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  809a1c:	2708703a 	and	r4,r4,fp
		if (sound->position > sound->outFadePosition) {
			sound->fadeVolume *= 0.9999;
		}
		//}
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
  809a20:	14ffc836 	bltu	r2,r19,809944 <updateMixer+0x10c>
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  809a24:	bc000017 	ldw	r16,0(r23)
  809a28:	a4800917 	ldw	r18,36(r20)
  809a2c:	84001824 	muli	r16,r16,96
  809a30:	8561883a 	add	r16,r16,r21
  809a34:	8421883a 	add	r16,r16,r16
  809a38:	8421883a 	add	r16,r16,r16
  809a3c:	85a1883a 	add	r16,r16,r22
  809a40:	81000017 	ldw	r4,0(r16)
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
	}
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  809a44:	ad400044 	addi	r21,r21,1
		//}
		data = sound->buffer[sound->position];
		if(data > 0x07FFFFF)
			soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
		else
			soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  809a48:	080a5900 	call	80a590 <__floatunsisf>
  809a4c:	9809883a 	mov	r4,r19
  809a50:	1023883a 	mov	r17,r2
  809a54:	080a5900 	call	80a590 <__floatunsisf>
  809a58:	1009883a 	mov	r4,r2
  809a5c:	900b883a 	mov	r5,r18
  809a60:	0809f540 	call	809f54 <__mulsf3>
  809a64:	100b883a 	mov	r5,r2
  809a68:	8809883a 	mov	r4,r17
  809a6c:	0809ef00 	call	809ef0 <__addsf3>
  809a70:	1009883a 	mov	r4,r2
  809a74:	0809c2c0 	call	809c2c <__fixunssfsi>
  809a78:	80800015 	stw	r2,0(r16)
		sound->position++;
  809a7c:	a4400217 	ldw	r17,8(r20)
  809a80:	88800044 	addi	r2,r17,1
  809a84:	1023883a 	mov	r17,r2
  809a88:	a0800215 	stw	r2,8(r20)
	int i;
	unsigned int data;
	if (sound->position <= sound->inFadePosition) {
		sound->fadeVolume = sound->volume;
	}
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  809a8c:	00801804 	movi	r2,96
  809a90:	a8bfc61e 	bne	r21,r2,8099ac <updateMixer+0x174>
  809a94:	04000044 	movi	r16,1

void updateMixer() {
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
		if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
  809a98:	00c020b4 	movhi	r3,130
  809a9c:	18d1e904 	addi	r3,r3,18340
  809aa0:	d9000117 	ldw	r4,4(sp)
  809aa4:	1880a617 	ldw	r2,664(r3)
  809aa8:	d8c00017 	ldw	r3,0(sp)
  809aac:	21000044 	addi	r4,r4,1
  809ab0:	d9000115 	stw	r4,4(sp)
  809ab4:	18c00104 	addi	r3,r3,4
  809ab8:	d8c00015 	stw	r3,0(sp)
  809abc:	20bf7a16 	blt	r4,r2,8098a8 <updateMixer+0x70>
  809ac0:	d5a75817 	ldw	r22,-25248(gp)
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
				isDone = 1;
			}
		}

		if(isDone == 0)
  809ac4:	8005003a 	cmpeq	r2,r16,zero
  809ac8:	10001c1e 	bne	r2,zero,809b3c <updateMixer+0x304>
			break;

		soundMixer->indexSize++;
  809acc:	008000b4 	movhi	r2,2
  809ad0:	10b0e204 	addi	r2,r2,-15480
  809ad4:	b089883a 	add	r4,r22,r2
  809ad8:	20c00017 	ldw	r3,0(r4)

		soundMixer->endIndex++;
  809adc:	10bfff04 	addi	r2,r2,-4
  809ae0:	b08b883a 	add	r5,r22,r2
		}

		if(isDone == 0)
			break;

		soundMixer->indexSize++;
  809ae4:	18c00044 	addi	r3,r3,1
  809ae8:	20c00015 	stw	r3,0(r4)

		soundMixer->endIndex++;
  809aec:	28800017 	ldw	r2,0(r5)
  809af0:	10800044 	addi	r2,r2,1
  809af4:	28800015 	stw	r2,0(r5)
		if(soundMixer->endIndex > 299)
  809af8:	28c00017 	ldw	r3,0(r5)
  809afc:	00804ac4 	movi	r2,299
  809b00:	10c0010e 	bge	r2,r3,809b08 <updateMixer+0x2d0>
			soundMixer->endIndex = 0;
  809b04:	28000015 	stw	zero,0(r5)

		clearIndexBuffer(soundMixer->endIndex);
  809b08:	29000017 	ldw	r4,0(r5)
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  809b0c:	01806004 	movi	r6,384
	//syncUpdatePos(db.curr_song_id, db.songs[db.curr_song_id]->sound->position);
}

void updateMixer() {
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
  809b10:	d8c00217 	ldw	r3,8(sp)
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  809b14:	2189383a 	mul	r4,r4,r6
  809b18:	000b883a 	mov	r5,zero
	//syncUpdatePos(db.curr_song_id, db.songs[db.curr_song_id]->sound->position);
}

void updateMixer() {
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
  809b1c:	18c00044 	addi	r3,r3,1
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  809b20:	b109883a 	add	r4,r22,r4
	//syncUpdatePos(db.curr_song_id, db.songs[db.curr_song_id]->sound->position);
}

void updateMixer() {
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
  809b24:	d8c00215 	stw	r3,8(sp)
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  809b28:	080c3600 	call	80c360 <memset>
	//syncUpdatePos(db.curr_song_id, db.songs[db.curr_song_id]->sound->position);
}

void updateMixer() {
	int i, j, isDone = 0;
	for(i = 0; i < 80; i++) {
  809b2c:	d9000217 	ldw	r4,8(sp)
  809b30:	00c01404 	movi	r3,80
  809b34:	20ff4d1e 	bne	r4,r3,80986c <updateMixer+0x34>
  809b38:	d5a75817 	ldw	r22,-25248(gp)
			soundMixer->endIndex = 0;

		clearIndexBuffer(soundMixer->endIndex);
	}

	if(soundMixer->indexSize <= 0 && !db.isPaused) {
  809b3c:	008000b4 	movhi	r2,2
  809b40:	10b0e204 	addi	r2,r2,-15480
  809b44:	b085883a 	add	r2,r22,r2
  809b48:	10c00017 	ldw	r3,0(r2)
  809b4c:	00c01e0e 	bge	zero,r3,809bc8 <updateMixer+0x390>
		syncPause(db.curr_song_id);
		if(db.curr_playlist_id != 0) {
			syncNext(db.curr_song_id);
		}
	} else if(!db.isPaused)
  809b50:	00a91b14 	movui	r2,42092
  809b54:	010020b4 	movhi	r4,130
  809b58:	2111e904 	addi	r4,r4,18340
  809b5c:	2085883a 	add	r2,r4,r2
  809b60:	10c00003 	ldbu	r3,0(r2)
  809b64:	18000c26 	beq	r3,zero,809b98 <updateMixer+0x360>
		enableAudioDeviceController();
}
  809b68:	dfc00c17 	ldw	ra,48(sp)
  809b6c:	df000b17 	ldw	fp,44(sp)
  809b70:	ddc00a17 	ldw	r23,40(sp)
  809b74:	dd800917 	ldw	r22,36(sp)
  809b78:	dd400817 	ldw	r21,32(sp)
  809b7c:	dd000717 	ldw	r20,28(sp)
  809b80:	dcc00617 	ldw	r19,24(sp)
  809b84:	dc800517 	ldw	r18,20(sp)
  809b88:	dc400417 	ldw	r17,16(sp)
  809b8c:	dc000317 	ldw	r16,12(sp)
  809b90:	dec00d04 	addi	sp,sp,52
  809b94:	f800283a 	ret
  809b98:	dfc00c17 	ldw	ra,48(sp)
  809b9c:	df000b17 	ldw	fp,44(sp)
  809ba0:	ddc00a17 	ldw	r23,40(sp)
  809ba4:	dd800917 	ldw	r22,36(sp)
  809ba8:	dd400817 	ldw	r21,32(sp)
  809bac:	dd000717 	ldw	r20,28(sp)
  809bb0:	dcc00617 	ldw	r19,24(sp)
  809bb4:	dc800517 	ldw	r18,20(sp)
  809bb8:	dc400417 	ldw	r17,16(sp)
  809bbc:	dc000317 	ldw	r16,12(sp)
  809bc0:	dec00d04 	addi	sp,sp,52
		syncPause(db.curr_song_id);
		if(db.curr_playlist_id != 0) {
			syncNext(db.curr_song_id);
		}
	} else if(!db.isPaused)
		enableAudioDeviceController();
  809bc4:	080876c1 	jmpi	80876c <enableAudioDeviceController>
			soundMixer->endIndex = 0;

		clearIndexBuffer(soundMixer->endIndex);
	}

	if(soundMixer->indexSize <= 0 && !db.isPaused) {
  809bc8:	00c020b4 	movhi	r3,130
  809bcc:	18d1e904 	addi	r3,r3,18340
  809bd0:	00a91b14 	movui	r2,42092
  809bd4:	1885883a 	add	r2,r3,r2
  809bd8:	10c00003 	ldbu	r3,0(r2)
  809bdc:	040020b4 	movhi	r16,130
  809be0:	8411e904 	addi	r16,r16,18340
  809be4:	183fe01e 	bne	r3,zero,809b68 <updateMixer+0x330>
		syncPause(db.curr_song_id);
  809be8:	81000017 	ldw	r4,0(r16)
  809bec:	08017240 	call	801724 <syncPause>
		if(db.curr_playlist_id != 0) {
  809bf0:	80803417 	ldw	r2,208(r16)
  809bf4:	103fdc26 	beq	r2,zero,809b68 <updateMixer+0x330>
			syncNext(db.curr_song_id);
  809bf8:	81000017 	ldw	r4,0(r16)
		}
	} else if(!db.isPaused)
		enableAudioDeviceController();
}
  809bfc:	dfc00c17 	ldw	ra,48(sp)
  809c00:	df000b17 	ldw	fp,44(sp)
  809c04:	ddc00a17 	ldw	r23,40(sp)
  809c08:	dd800917 	ldw	r22,36(sp)
  809c0c:	dd400817 	ldw	r21,32(sp)
  809c10:	dd000717 	ldw	r20,28(sp)
  809c14:	dcc00617 	ldw	r19,24(sp)
  809c18:	dc800517 	ldw	r18,20(sp)
  809c1c:	dc400417 	ldw	r17,16(sp)
  809c20:	dc000317 	ldw	r16,12(sp)
  809c24:	dec00d04 	addi	sp,sp,52
	}

	if(soundMixer->indexSize <= 0 && !db.isPaused) {
		syncPause(db.curr_song_id);
		if(db.curr_playlist_id != 0) {
			syncNext(db.curr_song_id);
  809c28:	080189c1 	jmpi	80189c <syncNext>

00809c2c <__fixunssfsi>:
  809c2c:	defffd04 	addi	sp,sp,-12
  809c30:	dc000015 	stw	r16,0(sp)
  809c34:	0413c034 	movhi	r16,20224
  809c38:	800b883a 	mov	r5,r16
  809c3c:	dc400115 	stw	r17,4(sp)
  809c40:	dfc00215 	stw	ra,8(sp)
  809c44:	2023883a 	mov	r17,r4
  809c48:	080a3980 	call	80a398 <__gesf2>
  809c4c:	800b883a 	mov	r5,r16
  809c50:	8809883a 	mov	r4,r17
  809c54:	10000a16 	blt	r2,zero,809c80 <__fixunssfsi+0x54>
  809c58:	0809e800 	call	809e80 <__subsf3>
  809c5c:	1009883a 	mov	r4,r2
  809c60:	080a4a80 	call	80a4a8 <__fixsfsi>
  809c64:	00e00034 	movhi	r3,32768
  809c68:	10c5883a 	add	r2,r2,r3
  809c6c:	dfc00217 	ldw	ra,8(sp)
  809c70:	dc400117 	ldw	r17,4(sp)
  809c74:	dc000017 	ldw	r16,0(sp)
  809c78:	dec00304 	addi	sp,sp,12
  809c7c:	f800283a 	ret
  809c80:	8809883a 	mov	r4,r17
  809c84:	080a4a80 	call	80a4a8 <__fixsfsi>
  809c88:	dfc00217 	ldw	ra,8(sp)
  809c8c:	dc400117 	ldw	r17,4(sp)
  809c90:	dc000017 	ldw	r16,0(sp)
  809c94:	dec00304 	addi	sp,sp,12
  809c98:	f800283a 	ret

00809c9c <_fpadd_parts>:
  809c9c:	21c00017 	ldw	r7,0(r4)
  809ca0:	02000044 	movi	r8,1
  809ca4:	41c0332e 	bgeu	r8,r7,809d74 <_fpadd_parts+0xd8>
  809ca8:	28800017 	ldw	r2,0(r5)
  809cac:	4080462e 	bgeu	r8,r2,809dc8 <_fpadd_parts+0x12c>
  809cb0:	00c00104 	movi	r3,4
  809cb4:	38c06b26 	beq	r7,r3,809e64 <_fpadd_parts+0x1c8>
  809cb8:	10c04326 	beq	r2,r3,809dc8 <_fpadd_parts+0x12c>
  809cbc:	00c00084 	movi	r3,2
  809cc0:	10c02e26 	beq	r2,r3,809d7c <_fpadd_parts+0xe0>
  809cc4:	38c04026 	beq	r7,r3,809dc8 <_fpadd_parts+0x12c>
  809cc8:	22800217 	ldw	r10,8(r4)
  809ccc:	28c00217 	ldw	r3,8(r5)
  809cd0:	23000317 	ldw	r12,12(r4)
  809cd4:	2a400317 	ldw	r9,12(r5)
  809cd8:	50cfc83a 	sub	r7,r10,r3
  809cdc:	3817883a 	mov	r11,r7
  809ce0:	38004f16 	blt	r7,zero,809e20 <_fpadd_parts+0x184>
  809ce4:	008007c4 	movi	r2,31
  809ce8:	11c03316 	blt	r2,r7,809db8 <_fpadd_parts+0x11c>
  809cec:	02c0540e 	bge	zero,r11,809e40 <_fpadd_parts+0x1a4>
  809cf0:	41c4983a 	sll	r2,r8,r7
  809cf4:	49c6d83a 	srl	r3,r9,r7
  809cf8:	10bfffc4 	addi	r2,r2,-1
  809cfc:	4884703a 	and	r2,r9,r2
  809d00:	1004c03a 	cmpne	r2,r2,zero
  809d04:	1892b03a 	or	r9,r3,r2
  809d08:	20c00117 	ldw	r3,4(r4)
  809d0c:	28800117 	ldw	r2,4(r5)
  809d10:	18803c26 	beq	r3,r2,809e04 <_fpadd_parts+0x168>
  809d14:	18002f26 	beq	r3,zero,809dd4 <_fpadd_parts+0x138>
  809d18:	4b05c83a 	sub	r2,r9,r12
  809d1c:	10004216 	blt	r2,zero,809e28 <_fpadd_parts+0x18c>
  809d20:	32800215 	stw	r10,8(r6)
  809d24:	30800315 	stw	r2,12(r6)
  809d28:	30000115 	stw	zero,4(r6)
  809d2c:	31000317 	ldw	r4,12(r6)
  809d30:	01d00034 	movhi	r7,16384
  809d34:	39ffff84 	addi	r7,r7,-2
  809d38:	20bfffc4 	addi	r2,r4,-1
  809d3c:	2007883a 	mov	r3,r4
  809d40:	38800836 	bltu	r7,r2,809d64 <_fpadd_parts+0xc8>
  809d44:	31400217 	ldw	r5,8(r6)
  809d48:	18c9883a 	add	r4,r3,r3
  809d4c:	20bfffc4 	addi	r2,r4,-1
  809d50:	297fffc4 	addi	r5,r5,-1
  809d54:	2007883a 	mov	r3,r4
  809d58:	38bffb2e 	bgeu	r7,r2,809d48 <_fpadd_parts+0xac>
  809d5c:	31400215 	stw	r5,8(r6)
  809d60:	31000315 	stw	r4,12(r6)
  809d64:	008000c4 	movi	r2,3
  809d68:	30800015 	stw	r2,0(r6)
  809d6c:	20001b16 	blt	r4,zero,809ddc <_fpadd_parts+0x140>
  809d70:	3009883a 	mov	r4,r6
  809d74:	2005883a 	mov	r2,r4
  809d78:	f800283a 	ret
  809d7c:	38fffd1e 	bne	r7,r3,809d74 <_fpadd_parts+0xd8>
  809d80:	31c00015 	stw	r7,0(r6)
  809d84:	20800117 	ldw	r2,4(r4)
  809d88:	30800115 	stw	r2,4(r6)
  809d8c:	20c00217 	ldw	r3,8(r4)
  809d90:	30c00215 	stw	r3,8(r6)
  809d94:	20800317 	ldw	r2,12(r4)
  809d98:	30800315 	stw	r2,12(r6)
  809d9c:	20c00117 	ldw	r3,4(r4)
  809da0:	28800117 	ldw	r2,4(r5)
  809da4:	3009883a 	mov	r4,r6
  809da8:	1886703a 	and	r3,r3,r2
  809dac:	2005883a 	mov	r2,r4
  809db0:	30c00115 	stw	r3,4(r6)
  809db4:	f800283a 	ret
  809db8:	1a801716 	blt	r3,r10,809e18 <_fpadd_parts+0x17c>
  809dbc:	1815883a 	mov	r10,r3
  809dc0:	0019883a 	mov	r12,zero
  809dc4:	003fd006 	br	809d08 <_fpadd_parts+0x6c>
  809dc8:	2809883a 	mov	r4,r5
  809dcc:	2005883a 	mov	r2,r4
  809dd0:	f800283a 	ret
  809dd4:	6245c83a 	sub	r2,r12,r9
  809dd8:	003fd006 	br	809d1c <_fpadd_parts+0x80>
  809ddc:	30800217 	ldw	r2,8(r6)
  809de0:	2006d07a 	srli	r3,r4,1
  809de4:	2100004c 	andi	r4,r4,1
  809de8:	10800044 	addi	r2,r2,1
  809dec:	1906b03a 	or	r3,r3,r4
  809df0:	3009883a 	mov	r4,r6
  809df4:	30800215 	stw	r2,8(r6)
  809df8:	2005883a 	mov	r2,r4
  809dfc:	30c00315 	stw	r3,12(r6)
  809e00:	f800283a 	ret
  809e04:	4b09883a 	add	r4,r9,r12
  809e08:	30c00115 	stw	r3,4(r6)
  809e0c:	32800215 	stw	r10,8(r6)
  809e10:	31000315 	stw	r4,12(r6)
  809e14:	003fd306 	br	809d64 <_fpadd_parts+0xc8>
  809e18:	0013883a 	mov	r9,zero
  809e1c:	003fba06 	br	809d08 <_fpadd_parts+0x6c>
  809e20:	01cfc83a 	sub	r7,zero,r7
  809e24:	003faf06 	br	809ce4 <_fpadd_parts+0x48>
  809e28:	0089c83a 	sub	r4,zero,r2
  809e2c:	00800044 	movi	r2,1
  809e30:	30800115 	stw	r2,4(r6)
  809e34:	32800215 	stw	r10,8(r6)
  809e38:	31000315 	stw	r4,12(r6)
  809e3c:	003fbb06 	br	809d2c <_fpadd_parts+0x90>
  809e40:	583fb126 	beq	r11,zero,809d08 <_fpadd_parts+0x6c>
  809e44:	41c4983a 	sll	r2,r8,r7
  809e48:	61c6d83a 	srl	r3,r12,r7
  809e4c:	51d5883a 	add	r10,r10,r7
  809e50:	10bfffc4 	addi	r2,r2,-1
  809e54:	6084703a 	and	r2,r12,r2
  809e58:	1004c03a 	cmpne	r2,r2,zero
  809e5c:	1898b03a 	or	r12,r3,r2
  809e60:	003fa906 	br	809d08 <_fpadd_parts+0x6c>
  809e64:	11ffc31e 	bne	r2,r7,809d74 <_fpadd_parts+0xd8>
  809e68:	28c00117 	ldw	r3,4(r5)
  809e6c:	20800117 	ldw	r2,4(r4)
  809e70:	10ffc026 	beq	r2,r3,809d74 <_fpadd_parts+0xd8>
  809e74:	010020b4 	movhi	r4,130
  809e78:	21018f04 	addi	r4,r4,1596
  809e7c:	003fbd06 	br	809d74 <_fpadd_parts+0xd8>

00809e80 <__subsf3>:
  809e80:	deffef04 	addi	sp,sp,-68
  809e84:	dcc00f15 	stw	r19,60(sp)
  809e88:	dcc00204 	addi	r19,sp,8
  809e8c:	dc400e15 	stw	r17,56(sp)
  809e90:	d9000015 	stw	r4,0(sp)
  809e94:	d9400115 	stw	r5,4(sp)
  809e98:	d809883a 	mov	r4,sp
  809e9c:	980b883a 	mov	r5,r19
  809ea0:	dc400604 	addi	r17,sp,24
  809ea4:	dfc01015 	stw	ra,64(sp)
  809ea8:	080b5580 	call	80b558 <__unpack_f>
  809eac:	d9000104 	addi	r4,sp,4
  809eb0:	880b883a 	mov	r5,r17
  809eb4:	080b5580 	call	80b558 <__unpack_f>
  809eb8:	d8800717 	ldw	r2,28(sp)
  809ebc:	9809883a 	mov	r4,r19
  809ec0:	880b883a 	mov	r5,r17
  809ec4:	d9800a04 	addi	r6,sp,40
  809ec8:	1080005c 	xori	r2,r2,1
  809ecc:	d8800715 	stw	r2,28(sp)
  809ed0:	0809c9c0 	call	809c9c <_fpadd_parts>
  809ed4:	1009883a 	mov	r4,r2
  809ed8:	080b3f80 	call	80b3f8 <__pack_f>
  809edc:	dfc01017 	ldw	ra,64(sp)
  809ee0:	dcc00f17 	ldw	r19,60(sp)
  809ee4:	dc400e17 	ldw	r17,56(sp)
  809ee8:	dec01104 	addi	sp,sp,68
  809eec:	f800283a 	ret

00809ef0 <__addsf3>:
  809ef0:	deffef04 	addi	sp,sp,-68
  809ef4:	dcc00f15 	stw	r19,60(sp)
  809ef8:	dcc00204 	addi	r19,sp,8
  809efc:	dc400e15 	stw	r17,56(sp)
  809f00:	d9000015 	stw	r4,0(sp)
  809f04:	d9400115 	stw	r5,4(sp)
  809f08:	d809883a 	mov	r4,sp
  809f0c:	980b883a 	mov	r5,r19
  809f10:	dc400604 	addi	r17,sp,24
  809f14:	dfc01015 	stw	ra,64(sp)
  809f18:	080b5580 	call	80b558 <__unpack_f>
  809f1c:	d9000104 	addi	r4,sp,4
  809f20:	880b883a 	mov	r5,r17
  809f24:	080b5580 	call	80b558 <__unpack_f>
  809f28:	d9800a04 	addi	r6,sp,40
  809f2c:	9809883a 	mov	r4,r19
  809f30:	880b883a 	mov	r5,r17
  809f34:	0809c9c0 	call	809c9c <_fpadd_parts>
  809f38:	1009883a 	mov	r4,r2
  809f3c:	080b3f80 	call	80b3f8 <__pack_f>
  809f40:	dfc01017 	ldw	ra,64(sp)
  809f44:	dcc00f17 	ldw	r19,60(sp)
  809f48:	dc400e17 	ldw	r17,56(sp)
  809f4c:	dec01104 	addi	sp,sp,68
  809f50:	f800283a 	ret

00809f54 <__mulsf3>:
  809f54:	deffef04 	addi	sp,sp,-68
  809f58:	dc400f15 	stw	r17,60(sp)
  809f5c:	dc400204 	addi	r17,sp,8
  809f60:	dc000e15 	stw	r16,56(sp)
  809f64:	d9000015 	stw	r4,0(sp)
  809f68:	d9400115 	stw	r5,4(sp)
  809f6c:	d809883a 	mov	r4,sp
  809f70:	880b883a 	mov	r5,r17
  809f74:	dc000604 	addi	r16,sp,24
  809f78:	dfc01015 	stw	ra,64(sp)
  809f7c:	080b5580 	call	80b558 <__unpack_f>
  809f80:	d9000104 	addi	r4,sp,4
  809f84:	800b883a 	mov	r5,r16
  809f88:	080b5580 	call	80b558 <__unpack_f>
  809f8c:	d9000217 	ldw	r4,8(sp)
  809f90:	00800044 	movi	r2,1
  809f94:	01400104 	movi	r5,4
  809f98:	1100142e 	bgeu	r2,r4,809fec <__mulsf3+0x98>
  809f9c:	d8c00617 	ldw	r3,24(sp)
  809fa0:	10c0052e 	bgeu	r2,r3,809fb8 <__mulsf3+0x64>
  809fa4:	21400f26 	beq	r4,r5,809fe4 <__mulsf3+0x90>
  809fa8:	19405d26 	beq	r3,r5,80a120 <__mulsf3+0x1cc>
  809fac:	00800084 	movi	r2,2
  809fb0:	20800e26 	beq	r4,r2,809fec <__mulsf3+0x98>
  809fb4:	1880181e 	bne	r3,r2,80a018 <__mulsf3+0xc4>
  809fb8:	d8c00717 	ldw	r3,28(sp)
  809fbc:	d8800317 	ldw	r2,12(sp)
  809fc0:	8009883a 	mov	r4,r16
  809fc4:	10c4c03a 	cmpne	r2,r2,r3
  809fc8:	d8800715 	stw	r2,28(sp)
  809fcc:	080b3f80 	call	80b3f8 <__pack_f>
  809fd0:	dfc01017 	ldw	ra,64(sp)
  809fd4:	dc400f17 	ldw	r17,60(sp)
  809fd8:	dc000e17 	ldw	r16,56(sp)
  809fdc:	dec01104 	addi	sp,sp,68
  809fe0:	f800283a 	ret
  809fe4:	00800084 	movi	r2,2
  809fe8:	18804f26 	beq	r3,r2,80a128 <__mulsf3+0x1d4>
  809fec:	d8800317 	ldw	r2,12(sp)
  809ff0:	d8c00717 	ldw	r3,28(sp)
  809ff4:	8809883a 	mov	r4,r17
  809ff8:	10c4c03a 	cmpne	r2,r2,r3
  809ffc:	d8800315 	stw	r2,12(sp)
  80a000:	080b3f80 	call	80b3f8 <__pack_f>
  80a004:	dfc01017 	ldw	ra,64(sp)
  80a008:	dc400f17 	ldw	r17,60(sp)
  80a00c:	dc000e17 	ldw	r16,56(sp)
  80a010:	dec01104 	addi	sp,sp,68
  80a014:	f800283a 	ret
  80a018:	d8800517 	ldw	r2,20(sp)
  80a01c:	da000917 	ldw	r8,36(sp)
  80a020:	0013883a 	mov	r9,zero
  80a024:	0007883a 	mov	r3,zero
  80a028:	480f883a 	mov	r7,r9
  80a02c:	180b883a 	mov	r5,r3
  80a030:	400d883a 	mov	r6,r8
  80a034:	1009883a 	mov	r4,r2
  80a038:	080b2e00 	call	80b2e0 <__muldi3>
  80a03c:	da800417 	ldw	r10,16(sp)
  80a040:	d9800817 	ldw	r6,32(sp)
  80a044:	da400317 	ldw	r9,12(sp)
  80a048:	52800084 	addi	r10,r10,2
  80a04c:	3295883a 	add	r10,r6,r10
  80a050:	d9800717 	ldw	r6,28(sp)
  80a054:	180b883a 	mov	r5,r3
  80a058:	180f883a 	mov	r7,r3
  80a05c:	4992c03a 	cmpne	r9,r9,r6
  80a060:	da400b15 	stw	r9,44(sp)
  80a064:	1007883a 	mov	r3,r2
  80a068:	da800c15 	stw	r10,48(sp)
  80a06c:	2800070e 	bge	r5,zero,80a08c <__mulsf3+0x138>
  80a070:	2880004c 	andi	r2,r5,1
  80a074:	1005003a 	cmpeq	r2,r2,zero
  80a078:	500d883a 	mov	r6,r10
  80a07c:	10001e26 	beq	r2,zero,80a0f8 <__mulsf3+0x1a4>
  80a080:	380ed07a 	srli	r7,r7,1
  80a084:	31800044 	addi	r6,r6,1
  80a088:	d9800c15 	stw	r6,48(sp)
  80a08c:	01100034 	movhi	r4,16384
  80a090:	213fffc4 	addi	r4,r4,-1
  80a094:	21c00b36 	bltu	r4,r7,80a0c4 <__mulsf3+0x170>
  80a098:	d8800c17 	ldw	r2,48(sp)
  80a09c:	00000206 	br	80a0a8 <__mulsf3+0x154>
  80a0a0:	18c7883a 	add	r3,r3,r3
  80a0a4:	21c00636 	bltu	r4,r7,80a0c0 <__mulsf3+0x16c>
  80a0a8:	10bfffc4 	addi	r2,r2,-1
  80a0ac:	39cf883a 	add	r7,r7,r7
  80a0b0:	183ffb0e 	bge	r3,zero,80a0a0 <__mulsf3+0x14c>
  80a0b4:	39c00054 	ori	r7,r7,1
  80a0b8:	18c7883a 	add	r3,r3,r3
  80a0bc:	21fffa2e 	bgeu	r4,r7,80a0a8 <__mulsf3+0x154>
  80a0c0:	d8800c15 	stw	r2,48(sp)
  80a0c4:	39001fcc 	andi	r4,r7,127
  80a0c8:	00801004 	movi	r2,64
  80a0cc:	20800d26 	beq	r4,r2,80a104 <__mulsf3+0x1b0>
  80a0d0:	008000c4 	movi	r2,3
  80a0d4:	d9000a04 	addi	r4,sp,40
  80a0d8:	d9c00d15 	stw	r7,52(sp)
  80a0dc:	d8800a15 	stw	r2,40(sp)
  80a0e0:	080b3f80 	call	80b3f8 <__pack_f>
  80a0e4:	dfc01017 	ldw	ra,64(sp)
  80a0e8:	dc400f17 	ldw	r17,60(sp)
  80a0ec:	dc000e17 	ldw	r16,56(sp)
  80a0f0:	dec01104 	addi	sp,sp,68
  80a0f4:	f800283a 	ret
  80a0f8:	1804d07a 	srli	r2,r3,1
  80a0fc:	10e00034 	orhi	r3,r2,32768
  80a100:	003fdf06 	br	80a080 <__mulsf3+0x12c>
  80a104:	3880200c 	andi	r2,r7,128
  80a108:	103ff11e 	bne	r2,zero,80a0d0 <__mulsf3+0x17c>
  80a10c:	183ff026 	beq	r3,zero,80a0d0 <__mulsf3+0x17c>
  80a110:	3907883a 	add	r3,r7,r4
  80a114:	00bfe004 	movi	r2,-128
  80a118:	188e703a 	and	r7,r3,r2
  80a11c:	003fec06 	br	80a0d0 <__mulsf3+0x17c>
  80a120:	00800084 	movi	r2,2
  80a124:	20bfa41e 	bne	r4,r2,809fb8 <__mulsf3+0x64>
  80a128:	010020b4 	movhi	r4,130
  80a12c:	21018f04 	addi	r4,r4,1596
  80a130:	003fb306 	br	80a000 <__mulsf3+0xac>

0080a134 <__divsf3>:
  80a134:	defff304 	addi	sp,sp,-52
  80a138:	dc400b15 	stw	r17,44(sp)
  80a13c:	dc400204 	addi	r17,sp,8
  80a140:	dc000a15 	stw	r16,40(sp)
  80a144:	d9000015 	stw	r4,0(sp)
  80a148:	d9400115 	stw	r5,4(sp)
  80a14c:	d809883a 	mov	r4,sp
  80a150:	880b883a 	mov	r5,r17
  80a154:	dc000604 	addi	r16,sp,24
  80a158:	dfc00c15 	stw	ra,48(sp)
  80a15c:	080b5580 	call	80b558 <__unpack_f>
  80a160:	d9000104 	addi	r4,sp,4
  80a164:	800b883a 	mov	r5,r16
  80a168:	080b5580 	call	80b558 <__unpack_f>
  80a16c:	d9000217 	ldw	r4,8(sp)
  80a170:	00800044 	movi	r2,1
  80a174:	01800104 	movi	r6,4
  80a178:	11000a2e 	bgeu	r2,r4,80a1a4 <__divsf3+0x70>
  80a17c:	d9400617 	ldw	r5,24(sp)
  80a180:	1140432e 	bgeu	r2,r5,80a290 <__divsf3+0x15c>
  80a184:	d8800317 	ldw	r2,12(sp)
  80a188:	d8c00717 	ldw	r3,28(sp)
  80a18c:	10c4f03a 	xor	r2,r2,r3
  80a190:	d8800315 	stw	r2,12(sp)
  80a194:	21800226 	beq	r4,r6,80a1a0 <__divsf3+0x6c>
  80a198:	00800084 	movi	r2,2
  80a19c:	2080101e 	bne	r4,r2,80a1e0 <__divsf3+0xac>
  80a1a0:	29000726 	beq	r5,r4,80a1c0 <__divsf3+0x8c>
  80a1a4:	8809883a 	mov	r4,r17
  80a1a8:	080b3f80 	call	80b3f8 <__pack_f>
  80a1ac:	dfc00c17 	ldw	ra,48(sp)
  80a1b0:	dc400b17 	ldw	r17,44(sp)
  80a1b4:	dc000a17 	ldw	r16,40(sp)
  80a1b8:	dec00d04 	addi	sp,sp,52
  80a1bc:	f800283a 	ret
  80a1c0:	010020b4 	movhi	r4,130
  80a1c4:	21018f04 	addi	r4,r4,1596
  80a1c8:	080b3f80 	call	80b3f8 <__pack_f>
  80a1cc:	dfc00c17 	ldw	ra,48(sp)
  80a1d0:	dc400b17 	ldw	r17,44(sp)
  80a1d4:	dc000a17 	ldw	r16,40(sp)
  80a1d8:	dec00d04 	addi	sp,sp,52
  80a1dc:	f800283a 	ret
  80a1e0:	29802d26 	beq	r5,r6,80a298 <__divsf3+0x164>
  80a1e4:	28801a26 	beq	r5,r2,80a250 <__divsf3+0x11c>
  80a1e8:	d8c00417 	ldw	r3,16(sp)
  80a1ec:	d8800817 	ldw	r2,32(sp)
  80a1f0:	d9000517 	ldw	r4,20(sp)
  80a1f4:	d9800917 	ldw	r6,36(sp)
  80a1f8:	1885c83a 	sub	r2,r3,r2
  80a1fc:	d8800415 	stw	r2,16(sp)
  80a200:	2180032e 	bgeu	r4,r6,80a210 <__divsf3+0xdc>
  80a204:	10bfffc4 	addi	r2,r2,-1
  80a208:	d8800415 	stw	r2,16(sp)
  80a20c:	2109883a 	add	r4,r4,r4
  80a210:	01500034 	movhi	r5,16384
  80a214:	0007883a 	mov	r3,zero
  80a218:	0005883a 	mov	r2,zero
  80a21c:	01c007c4 	movi	r7,31
  80a220:	10800044 	addi	r2,r2,1
  80a224:	21800236 	bltu	r4,r6,80a230 <__divsf3+0xfc>
  80a228:	1946b03a 	or	r3,r3,r5
  80a22c:	2189c83a 	sub	r4,r4,r6
  80a230:	280ad07a 	srli	r5,r5,1
  80a234:	2109883a 	add	r4,r4,r4
  80a238:	11fff91e 	bne	r2,r7,80a220 <__divsf3+0xec>
  80a23c:	19401fcc 	andi	r5,r3,127
  80a240:	00801004 	movi	r2,64
  80a244:	28800a26 	beq	r5,r2,80a270 <__divsf3+0x13c>
  80a248:	d8c00515 	stw	r3,20(sp)
  80a24c:	003fd506 	br	80a1a4 <__divsf3+0x70>
  80a250:	8809883a 	mov	r4,r17
  80a254:	d9800215 	stw	r6,8(sp)
  80a258:	080b3f80 	call	80b3f8 <__pack_f>
  80a25c:	dfc00c17 	ldw	ra,48(sp)
  80a260:	dc400b17 	ldw	r17,44(sp)
  80a264:	dc000a17 	ldw	r16,40(sp)
  80a268:	dec00d04 	addi	sp,sp,52
  80a26c:	f800283a 	ret
  80a270:	1880200c 	andi	r2,r3,128
  80a274:	103ff41e 	bne	r2,zero,80a248 <__divsf3+0x114>
  80a278:	203ff326 	beq	r4,zero,80a248 <__divsf3+0x114>
  80a27c:	1947883a 	add	r3,r3,r5
  80a280:	00bfe004 	movi	r2,-128
  80a284:	1886703a 	and	r3,r3,r2
  80a288:	d8c00515 	stw	r3,20(sp)
  80a28c:	003fc506 	br	80a1a4 <__divsf3+0x70>
  80a290:	8009883a 	mov	r4,r16
  80a294:	003fc406 	br	80a1a8 <__divsf3+0x74>
  80a298:	8809883a 	mov	r4,r17
  80a29c:	d8000515 	stw	zero,20(sp)
  80a2a0:	d8000415 	stw	zero,16(sp)
  80a2a4:	003fc006 	br	80a1a8 <__divsf3+0x74>

0080a2a8 <__eqsf2>:
  80a2a8:	defff304 	addi	sp,sp,-52
  80a2ac:	dc400b15 	stw	r17,44(sp)
  80a2b0:	dc400204 	addi	r17,sp,8
  80a2b4:	dc000a15 	stw	r16,40(sp)
  80a2b8:	d9000015 	stw	r4,0(sp)
  80a2bc:	d9400115 	stw	r5,4(sp)
  80a2c0:	d809883a 	mov	r4,sp
  80a2c4:	880b883a 	mov	r5,r17
  80a2c8:	dc000604 	addi	r16,sp,24
  80a2cc:	dfc00c15 	stw	ra,48(sp)
  80a2d0:	080b5580 	call	80b558 <__unpack_f>
  80a2d4:	d9000104 	addi	r4,sp,4
  80a2d8:	800b883a 	mov	r5,r16
  80a2dc:	080b5580 	call	80b558 <__unpack_f>
  80a2e0:	d8800217 	ldw	r2,8(sp)
  80a2e4:	00c00044 	movi	r3,1
  80a2e8:	180d883a 	mov	r6,r3
  80a2ec:	1880062e 	bgeu	r3,r2,80a308 <__eqsf2+0x60>
  80a2f0:	d8800617 	ldw	r2,24(sp)
  80a2f4:	8809883a 	mov	r4,r17
  80a2f8:	800b883a 	mov	r5,r16
  80a2fc:	1880022e 	bgeu	r3,r2,80a308 <__eqsf2+0x60>
  80a300:	080b6200 	call	80b620 <__fpcmp_parts_f>
  80a304:	100d883a 	mov	r6,r2
  80a308:	3005883a 	mov	r2,r6
  80a30c:	dfc00c17 	ldw	ra,48(sp)
  80a310:	dc400b17 	ldw	r17,44(sp)
  80a314:	dc000a17 	ldw	r16,40(sp)
  80a318:	dec00d04 	addi	sp,sp,52
  80a31c:	f800283a 	ret

0080a320 <__gtsf2>:
  80a320:	defff304 	addi	sp,sp,-52
  80a324:	dc400b15 	stw	r17,44(sp)
  80a328:	dc400204 	addi	r17,sp,8
  80a32c:	dc000a15 	stw	r16,40(sp)
  80a330:	d9000015 	stw	r4,0(sp)
  80a334:	d9400115 	stw	r5,4(sp)
  80a338:	d809883a 	mov	r4,sp
  80a33c:	880b883a 	mov	r5,r17
  80a340:	dc000604 	addi	r16,sp,24
  80a344:	dfc00c15 	stw	ra,48(sp)
  80a348:	080b5580 	call	80b558 <__unpack_f>
  80a34c:	d9000104 	addi	r4,sp,4
  80a350:	800b883a 	mov	r5,r16
  80a354:	080b5580 	call	80b558 <__unpack_f>
  80a358:	d8800217 	ldw	r2,8(sp)
  80a35c:	00c00044 	movi	r3,1
  80a360:	01bfffc4 	movi	r6,-1
  80a364:	1880062e 	bgeu	r3,r2,80a380 <__gtsf2+0x60>
  80a368:	d8800617 	ldw	r2,24(sp)
  80a36c:	8809883a 	mov	r4,r17
  80a370:	800b883a 	mov	r5,r16
  80a374:	1880022e 	bgeu	r3,r2,80a380 <__gtsf2+0x60>
  80a378:	080b6200 	call	80b620 <__fpcmp_parts_f>
  80a37c:	100d883a 	mov	r6,r2
  80a380:	3005883a 	mov	r2,r6
  80a384:	dfc00c17 	ldw	ra,48(sp)
  80a388:	dc400b17 	ldw	r17,44(sp)
  80a38c:	dc000a17 	ldw	r16,40(sp)
  80a390:	dec00d04 	addi	sp,sp,52
  80a394:	f800283a 	ret

0080a398 <__gesf2>:
  80a398:	defff304 	addi	sp,sp,-52
  80a39c:	dc400b15 	stw	r17,44(sp)
  80a3a0:	dc400204 	addi	r17,sp,8
  80a3a4:	dc000a15 	stw	r16,40(sp)
  80a3a8:	d9000015 	stw	r4,0(sp)
  80a3ac:	d9400115 	stw	r5,4(sp)
  80a3b0:	d809883a 	mov	r4,sp
  80a3b4:	880b883a 	mov	r5,r17
  80a3b8:	dc000604 	addi	r16,sp,24
  80a3bc:	dfc00c15 	stw	ra,48(sp)
  80a3c0:	080b5580 	call	80b558 <__unpack_f>
  80a3c4:	d9000104 	addi	r4,sp,4
  80a3c8:	800b883a 	mov	r5,r16
  80a3cc:	080b5580 	call	80b558 <__unpack_f>
  80a3d0:	d8800217 	ldw	r2,8(sp)
  80a3d4:	00c00044 	movi	r3,1
  80a3d8:	01bfffc4 	movi	r6,-1
  80a3dc:	1880062e 	bgeu	r3,r2,80a3f8 <__gesf2+0x60>
  80a3e0:	d8800617 	ldw	r2,24(sp)
  80a3e4:	8809883a 	mov	r4,r17
  80a3e8:	800b883a 	mov	r5,r16
  80a3ec:	1880022e 	bgeu	r3,r2,80a3f8 <__gesf2+0x60>
  80a3f0:	080b6200 	call	80b620 <__fpcmp_parts_f>
  80a3f4:	100d883a 	mov	r6,r2
  80a3f8:	3005883a 	mov	r2,r6
  80a3fc:	dfc00c17 	ldw	ra,48(sp)
  80a400:	dc400b17 	ldw	r17,44(sp)
  80a404:	dc000a17 	ldw	r16,40(sp)
  80a408:	dec00d04 	addi	sp,sp,52
  80a40c:	f800283a 	ret

0080a410 <__floatsisf>:
  80a410:	2006d7fa 	srli	r3,r4,31
  80a414:	defffa04 	addi	sp,sp,-24
  80a418:	008000c4 	movi	r2,3
  80a41c:	dfc00515 	stw	ra,20(sp)
  80a420:	dc000415 	stw	r16,16(sp)
  80a424:	d8800015 	stw	r2,0(sp)
  80a428:	d8c00115 	stw	r3,4(sp)
  80a42c:	2000081e 	bne	r4,zero,80a450 <__floatsisf+0x40>
  80a430:	00800084 	movi	r2,2
  80a434:	d8800015 	stw	r2,0(sp)
  80a438:	d809883a 	mov	r4,sp
  80a43c:	080b3f80 	call	80b3f8 <__pack_f>
  80a440:	dfc00517 	ldw	ra,20(sp)
  80a444:	dc000417 	ldw	r16,16(sp)
  80a448:	dec00604 	addi	sp,sp,24
  80a44c:	f800283a 	ret
  80a450:	00800784 	movi	r2,30
  80a454:	1807003a 	cmpeq	r3,r3,zero
  80a458:	d8800215 	stw	r2,8(sp)
  80a45c:	18000e1e 	bne	r3,zero,80a498 <__floatsisf+0x88>
  80a460:	00a00034 	movhi	r2,32768
  80a464:	20800e26 	beq	r4,r2,80a4a0 <__floatsisf+0x90>
  80a468:	0121c83a 	sub	r16,zero,r4
  80a46c:	8009883a 	mov	r4,r16
  80a470:	dc000315 	stw	r16,12(sp)
  80a474:	080b3780 	call	80b378 <__clzsi2>
  80a478:	117fffc4 	addi	r5,r2,-1
  80a47c:	017fee0e 	bge	zero,r5,80a438 <__floatsisf+0x28>
  80a480:	d8800217 	ldw	r2,8(sp)
  80a484:	8146983a 	sll	r3,r16,r5
  80a488:	1145c83a 	sub	r2,r2,r5
  80a48c:	d8c00315 	stw	r3,12(sp)
  80a490:	d8800215 	stw	r2,8(sp)
  80a494:	003fe806 	br	80a438 <__floatsisf+0x28>
  80a498:	2021883a 	mov	r16,r4
  80a49c:	003ff306 	br	80a46c <__floatsisf+0x5c>
  80a4a0:	00b3c034 	movhi	r2,52992
  80a4a4:	003fe606 	br	80a440 <__floatsisf+0x30>

0080a4a8 <__fixsfsi>:
  80a4a8:	defffa04 	addi	sp,sp,-24
  80a4ac:	d9000015 	stw	r4,0(sp)
  80a4b0:	d9400104 	addi	r5,sp,4
  80a4b4:	d809883a 	mov	r4,sp
  80a4b8:	dfc00515 	stw	ra,20(sp)
  80a4bc:	080b5580 	call	80b558 <__unpack_f>
  80a4c0:	d8c00117 	ldw	r3,4(sp)
  80a4c4:	00800084 	movi	r2,2
  80a4c8:	1880041e 	bne	r3,r2,80a4dc <__fixsfsi+0x34>
  80a4cc:	0005883a 	mov	r2,zero
  80a4d0:	dfc00517 	ldw	ra,20(sp)
  80a4d4:	dec00604 	addi	sp,sp,24
  80a4d8:	f800283a 	ret
  80a4dc:	00800044 	movi	r2,1
  80a4e0:	10fffa2e 	bgeu	r2,r3,80a4cc <__fixsfsi+0x24>
  80a4e4:	00800104 	movi	r2,4
  80a4e8:	18800426 	beq	r3,r2,80a4fc <__fixsfsi+0x54>
  80a4ec:	d8800317 	ldw	r2,12(sp)
  80a4f0:	103ff616 	blt	r2,zero,80a4cc <__fixsfsi+0x24>
  80a4f4:	00c00784 	movi	r3,30
  80a4f8:	1880070e 	bge	r3,r2,80a518 <__fixsfsi+0x70>
  80a4fc:	d8800217 	ldw	r2,8(sp)
  80a500:	10000c1e 	bne	r2,zero,80a534 <__fixsfsi+0x8c>
  80a504:	00a00034 	movhi	r2,32768
  80a508:	10bfffc4 	addi	r2,r2,-1
  80a50c:	dfc00517 	ldw	ra,20(sp)
  80a510:	dec00604 	addi	sp,sp,24
  80a514:	f800283a 	ret
  80a518:	1885c83a 	sub	r2,r3,r2
  80a51c:	d9000217 	ldw	r4,8(sp)
  80a520:	d8c00417 	ldw	r3,16(sp)
  80a524:	1884d83a 	srl	r2,r3,r2
  80a528:	203fe926 	beq	r4,zero,80a4d0 <__fixsfsi+0x28>
  80a52c:	0085c83a 	sub	r2,zero,r2
  80a530:	003fe706 	br	80a4d0 <__fixsfsi+0x28>
  80a534:	00a00034 	movhi	r2,32768
  80a538:	003fe506 	br	80a4d0 <__fixsfsi+0x28>

0080a53c <__extendsfdf2>:
  80a53c:	defff904 	addi	sp,sp,-28
  80a540:	d9000115 	stw	r4,4(sp)
  80a544:	d9400204 	addi	r5,sp,8
  80a548:	d9000104 	addi	r4,sp,4
  80a54c:	dfc00615 	stw	ra,24(sp)
  80a550:	080b5580 	call	80b558 <__unpack_f>
  80a554:	d9c00517 	ldw	r7,20(sp)
  80a558:	0011883a 	mov	r8,zero
  80a55c:	400697ba 	slli	r3,r8,30
  80a560:	3812d0ba 	srli	r9,r7,2
  80a564:	380497ba 	slli	r2,r7,30
  80a568:	d9000217 	ldw	r4,8(sp)
  80a56c:	d9400317 	ldw	r5,12(sp)
  80a570:	d9800417 	ldw	r6,16(sp)
  80a574:	48c6b03a 	or	r3,r9,r3
  80a578:	100f883a 	mov	r7,r2
  80a57c:	d8c00015 	stw	r3,0(sp)
  80a580:	080b0e80 	call	80b0e8 <__make_dp>
  80a584:	dfc00617 	ldw	ra,24(sp)
  80a588:	dec00704 	addi	sp,sp,28
  80a58c:	f800283a 	ret

0080a590 <__floatunsisf>:
  80a590:	defff904 	addi	sp,sp,-28
  80a594:	dc400515 	stw	r17,20(sp)
  80a598:	dc000415 	stw	r16,16(sp)
  80a59c:	dfc00615 	stw	ra,24(sp)
  80a5a0:	04400784 	movi	r17,30
  80a5a4:	2021883a 	mov	r16,r4
  80a5a8:	d8000115 	stw	zero,4(sp)
  80a5ac:	2000091e 	bne	r4,zero,80a5d4 <__floatunsisf+0x44>
  80a5b0:	00800084 	movi	r2,2
  80a5b4:	d8800015 	stw	r2,0(sp)
  80a5b8:	d809883a 	mov	r4,sp
  80a5bc:	080b3f80 	call	80b3f8 <__pack_f>
  80a5c0:	dfc00617 	ldw	ra,24(sp)
  80a5c4:	dc400517 	ldw	r17,20(sp)
  80a5c8:	dc000417 	ldw	r16,16(sp)
  80a5cc:	dec00704 	addi	sp,sp,28
  80a5d0:	f800283a 	ret
  80a5d4:	008000c4 	movi	r2,3
  80a5d8:	d9000315 	stw	r4,12(sp)
  80a5dc:	d8800015 	stw	r2,0(sp)
  80a5e0:	dc400215 	stw	r17,8(sp)
  80a5e4:	080b3780 	call	80b378 <__clzsi2>
  80a5e8:	117fffc4 	addi	r5,r2,-1
  80a5ec:	0147c83a 	sub	r3,zero,r5
  80a5f0:	00800044 	movi	r2,1
  80a5f4:	10c4983a 	sll	r2,r2,r3
  80a5f8:	80c6d83a 	srl	r3,r16,r3
  80a5fc:	8949c83a 	sub	r4,r17,r5
  80a600:	10bfffc4 	addi	r2,r2,-1
  80a604:	8084703a 	and	r2,r16,r2
  80a608:	1004c03a 	cmpne	r2,r2,zero
  80a60c:	1886b03a 	or	r3,r3,r2
  80a610:	28000c16 	blt	r5,zero,80a644 <__floatunsisf+0xb4>
  80a614:	8144983a 	sll	r2,r16,r5
  80a618:	8947c83a 	sub	r3,r17,r5
  80a61c:	283fe626 	beq	r5,zero,80a5b8 <__floatunsisf+0x28>
  80a620:	d809883a 	mov	r4,sp
  80a624:	d8800315 	stw	r2,12(sp)
  80a628:	d8c00215 	stw	r3,8(sp)
  80a62c:	080b3f80 	call	80b3f8 <__pack_f>
  80a630:	dfc00617 	ldw	ra,24(sp)
  80a634:	dc400517 	ldw	r17,20(sp)
  80a638:	dc000417 	ldw	r16,16(sp)
  80a63c:	dec00704 	addi	sp,sp,28
  80a640:	f800283a 	ret
  80a644:	d8c00315 	stw	r3,12(sp)
  80a648:	d9000215 	stw	r4,8(sp)
  80a64c:	003fda06 	br	80a5b8 <__floatunsisf+0x28>

0080a650 <_fpadd_parts>:
  80a650:	defff804 	addi	sp,sp,-32
  80a654:	dcc00315 	stw	r19,12(sp)
  80a658:	2027883a 	mov	r19,r4
  80a65c:	21000017 	ldw	r4,0(r4)
  80a660:	00c00044 	movi	r3,1
  80a664:	dd400515 	stw	r21,20(sp)
  80a668:	dd000415 	stw	r20,16(sp)
  80a66c:	ddc00715 	stw	r23,28(sp)
  80a670:	dd800615 	stw	r22,24(sp)
  80a674:	dc800215 	stw	r18,8(sp)
  80a678:	dc400115 	stw	r17,4(sp)
  80a67c:	dc000015 	stw	r16,0(sp)
  80a680:	282b883a 	mov	r21,r5
  80a684:	3029883a 	mov	r20,r6
  80a688:	1900632e 	bgeu	r3,r4,80a818 <_fpadd_parts+0x1c8>
  80a68c:	28800017 	ldw	r2,0(r5)
  80a690:	1880812e 	bgeu	r3,r2,80a898 <_fpadd_parts+0x248>
  80a694:	00c00104 	movi	r3,4
  80a698:	20c0dc26 	beq	r4,r3,80aa0c <_fpadd_parts+0x3bc>
  80a69c:	10c07e26 	beq	r2,r3,80a898 <_fpadd_parts+0x248>
  80a6a0:	00c00084 	movi	r3,2
  80a6a4:	10c06726 	beq	r2,r3,80a844 <_fpadd_parts+0x1f4>
  80a6a8:	20c07b26 	beq	r4,r3,80a898 <_fpadd_parts+0x248>
  80a6ac:	9dc00217 	ldw	r23,8(r19)
  80a6b0:	28c00217 	ldw	r3,8(r5)
  80a6b4:	9c400317 	ldw	r17,12(r19)
  80a6b8:	2bc00317 	ldw	r15,12(r5)
  80a6bc:	b8cdc83a 	sub	r6,r23,r3
  80a6c0:	9c800417 	ldw	r18,16(r19)
  80a6c4:	2c000417 	ldw	r16,16(r5)
  80a6c8:	3009883a 	mov	r4,r6
  80a6cc:	30009716 	blt	r6,zero,80a92c <_fpadd_parts+0x2dc>
  80a6d0:	00800fc4 	movi	r2,63
  80a6d4:	11806b16 	blt	r2,r6,80a884 <_fpadd_parts+0x234>
  80a6d8:	0100a40e 	bge	zero,r4,80a96c <_fpadd_parts+0x31c>
  80a6dc:	35bff804 	addi	r22,r6,-32
  80a6e0:	b000bc16 	blt	r22,zero,80a9d4 <_fpadd_parts+0x384>
  80a6e4:	8596d83a 	srl	r11,r16,r22
  80a6e8:	0019883a 	mov	r12,zero
  80a6ec:	0013883a 	mov	r9,zero
  80a6f0:	01000044 	movi	r4,1
  80a6f4:	0015883a 	mov	r10,zero
  80a6f8:	b000be16 	blt	r22,zero,80a9f4 <_fpadd_parts+0x3a4>
  80a6fc:	2590983a 	sll	r8,r4,r22
  80a700:	000f883a 	mov	r7,zero
  80a704:	00bfffc4 	movi	r2,-1
  80a708:	3889883a 	add	r4,r7,r2
  80a70c:	408b883a 	add	r5,r8,r2
  80a710:	21cd803a 	cmpltu	r6,r4,r7
  80a714:	314b883a 	add	r5,r6,r5
  80a718:	7904703a 	and	r2,r15,r4
  80a71c:	8146703a 	and	r3,r16,r5
  80a720:	10c4b03a 	or	r2,r2,r3
  80a724:	10000226 	beq	r2,zero,80a730 <_fpadd_parts+0xe0>
  80a728:	02400044 	movi	r9,1
  80a72c:	0015883a 	mov	r10,zero
  80a730:	5a5eb03a 	or	r15,r11,r9
  80a734:	62a0b03a 	or	r16,r12,r10
  80a738:	99400117 	ldw	r5,4(r19)
  80a73c:	a8800117 	ldw	r2,4(r21)
  80a740:	28806e26 	beq	r5,r2,80a8fc <_fpadd_parts+0x2ac>
  80a744:	28006626 	beq	r5,zero,80a8e0 <_fpadd_parts+0x290>
  80a748:	7c45c83a 	sub	r2,r15,r17
  80a74c:	7889803a 	cmpltu	r4,r15,r2
  80a750:	8487c83a 	sub	r3,r16,r18
  80a754:	1909c83a 	sub	r4,r3,r4
  80a758:	100d883a 	mov	r6,r2
  80a75c:	200f883a 	mov	r7,r4
  80a760:	38007716 	blt	r7,zero,80a940 <_fpadd_parts+0x2f0>
  80a764:	a5c00215 	stw	r23,8(r20)
  80a768:	a1c00415 	stw	r7,16(r20)
  80a76c:	a0000115 	stw	zero,4(r20)
  80a770:	a1800315 	stw	r6,12(r20)
  80a774:	a2000317 	ldw	r8,12(r20)
  80a778:	a2400417 	ldw	r9,16(r20)
  80a77c:	00bfffc4 	movi	r2,-1
  80a780:	408b883a 	add	r5,r8,r2
  80a784:	2a09803a 	cmpltu	r4,r5,r8
  80a788:	488d883a 	add	r6,r9,r2
  80a78c:	01c40034 	movhi	r7,4096
  80a790:	39ffffc4 	addi	r7,r7,-1
  80a794:	218d883a 	add	r6,r4,r6
  80a798:	39801736 	bltu	r7,r6,80a7f8 <_fpadd_parts+0x1a8>
  80a79c:	31c06526 	beq	r6,r7,80a934 <_fpadd_parts+0x2e4>
  80a7a0:	a3000217 	ldw	r12,8(r20)
  80a7a4:	4209883a 	add	r4,r8,r8
  80a7a8:	00bfffc4 	movi	r2,-1
  80a7ac:	220f803a 	cmpltu	r7,r4,r8
  80a7b0:	4a4b883a 	add	r5,r9,r9
  80a7b4:	394f883a 	add	r7,r7,r5
  80a7b8:	2095883a 	add	r10,r4,r2
  80a7bc:	3897883a 	add	r11,r7,r2
  80a7c0:	510d803a 	cmpltu	r6,r10,r4
  80a7c4:	6099883a 	add	r12,r12,r2
  80a7c8:	32d7883a 	add	r11,r6,r11
  80a7cc:	00840034 	movhi	r2,4096
  80a7d0:	10bfffc4 	addi	r2,r2,-1
  80a7d4:	2011883a 	mov	r8,r4
  80a7d8:	3813883a 	mov	r9,r7
  80a7dc:	a1000315 	stw	r4,12(r20)
  80a7e0:	a1c00415 	stw	r7,16(r20)
  80a7e4:	a3000215 	stw	r12,8(r20)
  80a7e8:	12c00336 	bltu	r2,r11,80a7f8 <_fpadd_parts+0x1a8>
  80a7ec:	58bfed1e 	bne	r11,r2,80a7a4 <_fpadd_parts+0x154>
  80a7f0:	00bfff84 	movi	r2,-2
  80a7f4:	12bfeb2e 	bgeu	r2,r10,80a7a4 <_fpadd_parts+0x154>
  80a7f8:	a2800417 	ldw	r10,16(r20)
  80a7fc:	008000c4 	movi	r2,3
  80a800:	00c80034 	movhi	r3,8192
  80a804:	18ffffc4 	addi	r3,r3,-1
  80a808:	a2400317 	ldw	r9,12(r20)
  80a80c:	a0800015 	stw	r2,0(r20)
  80a810:	1a802336 	bltu	r3,r10,80a8a0 <_fpadd_parts+0x250>
  80a814:	a027883a 	mov	r19,r20
  80a818:	9805883a 	mov	r2,r19
  80a81c:	ddc00717 	ldw	r23,28(sp)
  80a820:	dd800617 	ldw	r22,24(sp)
  80a824:	dd400517 	ldw	r21,20(sp)
  80a828:	dd000417 	ldw	r20,16(sp)
  80a82c:	dcc00317 	ldw	r19,12(sp)
  80a830:	dc800217 	ldw	r18,8(sp)
  80a834:	dc400117 	ldw	r17,4(sp)
  80a838:	dc000017 	ldw	r16,0(sp)
  80a83c:	dec00804 	addi	sp,sp,32
  80a840:	f800283a 	ret
  80a844:	20fff41e 	bne	r4,r3,80a818 <_fpadd_parts+0x1c8>
  80a848:	31000015 	stw	r4,0(r6)
  80a84c:	98800117 	ldw	r2,4(r19)
  80a850:	30800115 	stw	r2,4(r6)
  80a854:	98c00217 	ldw	r3,8(r19)
  80a858:	30c00215 	stw	r3,8(r6)
  80a85c:	98800317 	ldw	r2,12(r19)
  80a860:	30800315 	stw	r2,12(r6)
  80a864:	98c00417 	ldw	r3,16(r19)
  80a868:	30c00415 	stw	r3,16(r6)
  80a86c:	98800117 	ldw	r2,4(r19)
  80a870:	28c00117 	ldw	r3,4(r5)
  80a874:	3027883a 	mov	r19,r6
  80a878:	10c4703a 	and	r2,r2,r3
  80a87c:	30800115 	stw	r2,4(r6)
  80a880:	003fe506 	br	80a818 <_fpadd_parts+0x1c8>
  80a884:	1dc02616 	blt	r3,r23,80a920 <_fpadd_parts+0x2d0>
  80a888:	0023883a 	mov	r17,zero
  80a88c:	182f883a 	mov	r23,r3
  80a890:	0025883a 	mov	r18,zero
  80a894:	003fa806 	br	80a738 <_fpadd_parts+0xe8>
  80a898:	a827883a 	mov	r19,r21
  80a89c:	003fde06 	br	80a818 <_fpadd_parts+0x1c8>
  80a8a0:	01800044 	movi	r6,1
  80a8a4:	500497fa 	slli	r2,r10,31
  80a8a8:	4808d07a 	srli	r4,r9,1
  80a8ac:	518ad83a 	srl	r5,r10,r6
  80a8b0:	a2000217 	ldw	r8,8(r20)
  80a8b4:	1108b03a 	or	r4,r2,r4
  80a8b8:	0007883a 	mov	r3,zero
  80a8bc:	4984703a 	and	r2,r9,r6
  80a8c0:	208cb03a 	or	r6,r4,r2
  80a8c4:	28ceb03a 	or	r7,r5,r3
  80a8c8:	42000044 	addi	r8,r8,1
  80a8cc:	a027883a 	mov	r19,r20
  80a8d0:	a1c00415 	stw	r7,16(r20)
  80a8d4:	a2000215 	stw	r8,8(r20)
  80a8d8:	a1800315 	stw	r6,12(r20)
  80a8dc:	003fce06 	br	80a818 <_fpadd_parts+0x1c8>
  80a8e0:	8bc5c83a 	sub	r2,r17,r15
  80a8e4:	8889803a 	cmpltu	r4,r17,r2
  80a8e8:	9407c83a 	sub	r3,r18,r16
  80a8ec:	1909c83a 	sub	r4,r3,r4
  80a8f0:	100d883a 	mov	r6,r2
  80a8f4:	200f883a 	mov	r7,r4
  80a8f8:	003f9906 	br	80a760 <_fpadd_parts+0x110>
  80a8fc:	7c45883a 	add	r2,r15,r17
  80a900:	13c9803a 	cmpltu	r4,r2,r15
  80a904:	8487883a 	add	r3,r16,r18
  80a908:	20c9883a 	add	r4,r4,r3
  80a90c:	a1400115 	stw	r5,4(r20)
  80a910:	a5c00215 	stw	r23,8(r20)
  80a914:	a0800315 	stw	r2,12(r20)
  80a918:	a1000415 	stw	r4,16(r20)
  80a91c:	003fb606 	br	80a7f8 <_fpadd_parts+0x1a8>
  80a920:	001f883a 	mov	r15,zero
  80a924:	0021883a 	mov	r16,zero
  80a928:	003f8306 	br	80a738 <_fpadd_parts+0xe8>
  80a92c:	018dc83a 	sub	r6,zero,r6
  80a930:	003f6706 	br	80a6d0 <_fpadd_parts+0x80>
  80a934:	00bfff84 	movi	r2,-2
  80a938:	117faf36 	bltu	r2,r5,80a7f8 <_fpadd_parts+0x1a8>
  80a93c:	003f9806 	br	80a7a0 <_fpadd_parts+0x150>
  80a940:	0005883a 	mov	r2,zero
  80a944:	1189c83a 	sub	r4,r2,r6
  80a948:	1105803a 	cmpltu	r2,r2,r4
  80a94c:	01cbc83a 	sub	r5,zero,r7
  80a950:	2885c83a 	sub	r2,r5,r2
  80a954:	01800044 	movi	r6,1
  80a958:	a1800115 	stw	r6,4(r20)
  80a95c:	a5c00215 	stw	r23,8(r20)
  80a960:	a1000315 	stw	r4,12(r20)
  80a964:	a0800415 	stw	r2,16(r20)
  80a968:	003f8206 	br	80a774 <_fpadd_parts+0x124>
  80a96c:	203f7226 	beq	r4,zero,80a738 <_fpadd_parts+0xe8>
  80a970:	35bff804 	addi	r22,r6,-32
  80a974:	b9af883a 	add	r23,r23,r6
  80a978:	b0003116 	blt	r22,zero,80aa40 <_fpadd_parts+0x3f0>
  80a97c:	959ad83a 	srl	r13,r18,r22
  80a980:	001d883a 	mov	r14,zero
  80a984:	000f883a 	mov	r7,zero
  80a988:	01000044 	movi	r4,1
  80a98c:	0011883a 	mov	r8,zero
  80a990:	b0002516 	blt	r22,zero,80aa28 <_fpadd_parts+0x3d8>
  80a994:	2594983a 	sll	r10,r4,r22
  80a998:	0013883a 	mov	r9,zero
  80a99c:	00bfffc4 	movi	r2,-1
  80a9a0:	4889883a 	add	r4,r9,r2
  80a9a4:	508b883a 	add	r5,r10,r2
  80a9a8:	224d803a 	cmpltu	r6,r4,r9
  80a9ac:	314b883a 	add	r5,r6,r5
  80a9b0:	8904703a 	and	r2,r17,r4
  80a9b4:	9146703a 	and	r3,r18,r5
  80a9b8:	10c4b03a 	or	r2,r2,r3
  80a9bc:	10000226 	beq	r2,zero,80a9c8 <_fpadd_parts+0x378>
  80a9c0:	01c00044 	movi	r7,1
  80a9c4:	0011883a 	mov	r8,zero
  80a9c8:	69e2b03a 	or	r17,r13,r7
  80a9cc:	7224b03a 	or	r18,r14,r8
  80a9d0:	003f5906 	br	80a738 <_fpadd_parts+0xe8>
  80a9d4:	8407883a 	add	r3,r16,r16
  80a9d8:	008007c4 	movi	r2,31
  80a9dc:	1185c83a 	sub	r2,r2,r6
  80a9e0:	1886983a 	sll	r3,r3,r2
  80a9e4:	7996d83a 	srl	r11,r15,r6
  80a9e8:	8198d83a 	srl	r12,r16,r6
  80a9ec:	1ad6b03a 	or	r11,r3,r11
  80a9f0:	003f3e06 	br	80a6ec <_fpadd_parts+0x9c>
  80a9f4:	2006d07a 	srli	r3,r4,1
  80a9f8:	008007c4 	movi	r2,31
  80a9fc:	1185c83a 	sub	r2,r2,r6
  80aa00:	1890d83a 	srl	r8,r3,r2
  80aa04:	218e983a 	sll	r7,r4,r6
  80aa08:	003f3e06 	br	80a704 <_fpadd_parts+0xb4>
  80aa0c:	113f821e 	bne	r2,r4,80a818 <_fpadd_parts+0x1c8>
  80aa10:	28c00117 	ldw	r3,4(r5)
  80aa14:	98800117 	ldw	r2,4(r19)
  80aa18:	10ff7f26 	beq	r2,r3,80a818 <_fpadd_parts+0x1c8>
  80aa1c:	04c020b4 	movhi	r19,130
  80aa20:	9cc19304 	addi	r19,r19,1612
  80aa24:	003f7c06 	br	80a818 <_fpadd_parts+0x1c8>
  80aa28:	2006d07a 	srli	r3,r4,1
  80aa2c:	008007c4 	movi	r2,31
  80aa30:	1185c83a 	sub	r2,r2,r6
  80aa34:	1894d83a 	srl	r10,r3,r2
  80aa38:	2192983a 	sll	r9,r4,r6
  80aa3c:	003fd706 	br	80a99c <_fpadd_parts+0x34c>
  80aa40:	9487883a 	add	r3,r18,r18
  80aa44:	008007c4 	movi	r2,31
  80aa48:	1185c83a 	sub	r2,r2,r6
  80aa4c:	1886983a 	sll	r3,r3,r2
  80aa50:	899ad83a 	srl	r13,r17,r6
  80aa54:	919cd83a 	srl	r14,r18,r6
  80aa58:	1b5ab03a 	or	r13,r3,r13
  80aa5c:	003fc906 	br	80a984 <_fpadd_parts+0x334>

0080aa60 <__subdf3>:
  80aa60:	deffea04 	addi	sp,sp,-88
  80aa64:	dcc01415 	stw	r19,80(sp)
  80aa68:	dcc00404 	addi	r19,sp,16
  80aa6c:	2011883a 	mov	r8,r4
  80aa70:	2813883a 	mov	r9,r5
  80aa74:	dc401315 	stw	r17,76(sp)
  80aa78:	d809883a 	mov	r4,sp
  80aa7c:	980b883a 	mov	r5,r19
  80aa80:	dc400904 	addi	r17,sp,36
  80aa84:	dfc01515 	stw	ra,84(sp)
  80aa88:	da400115 	stw	r9,4(sp)
  80aa8c:	d9c00315 	stw	r7,12(sp)
  80aa90:	da000015 	stw	r8,0(sp)
  80aa94:	d9800215 	stw	r6,8(sp)
  80aa98:	080ba080 	call	80ba08 <__unpack_d>
  80aa9c:	d9000204 	addi	r4,sp,8
  80aaa0:	880b883a 	mov	r5,r17
  80aaa4:	080ba080 	call	80ba08 <__unpack_d>
  80aaa8:	d8800a17 	ldw	r2,40(sp)
  80aaac:	880b883a 	mov	r5,r17
  80aab0:	9809883a 	mov	r4,r19
  80aab4:	d9800e04 	addi	r6,sp,56
  80aab8:	1080005c 	xori	r2,r2,1
  80aabc:	d8800a15 	stw	r2,40(sp)
  80aac0:	080a6500 	call	80a650 <_fpadd_parts>
  80aac4:	1009883a 	mov	r4,r2
  80aac8:	080b6f40 	call	80b6f4 <__pack_d>
  80aacc:	dfc01517 	ldw	ra,84(sp)
  80aad0:	dcc01417 	ldw	r19,80(sp)
  80aad4:	dc401317 	ldw	r17,76(sp)
  80aad8:	dec01604 	addi	sp,sp,88
  80aadc:	f800283a 	ret

0080aae0 <__adddf3>:
  80aae0:	deffea04 	addi	sp,sp,-88
  80aae4:	dcc01415 	stw	r19,80(sp)
  80aae8:	dcc00404 	addi	r19,sp,16
  80aaec:	2011883a 	mov	r8,r4
  80aaf0:	2813883a 	mov	r9,r5
  80aaf4:	dc401315 	stw	r17,76(sp)
  80aaf8:	d809883a 	mov	r4,sp
  80aafc:	980b883a 	mov	r5,r19
  80ab00:	dc400904 	addi	r17,sp,36
  80ab04:	dfc01515 	stw	ra,84(sp)
  80ab08:	da400115 	stw	r9,4(sp)
  80ab0c:	d9c00315 	stw	r7,12(sp)
  80ab10:	da000015 	stw	r8,0(sp)
  80ab14:	d9800215 	stw	r6,8(sp)
  80ab18:	080ba080 	call	80ba08 <__unpack_d>
  80ab1c:	d9000204 	addi	r4,sp,8
  80ab20:	880b883a 	mov	r5,r17
  80ab24:	080ba080 	call	80ba08 <__unpack_d>
  80ab28:	d9800e04 	addi	r6,sp,56
  80ab2c:	9809883a 	mov	r4,r19
  80ab30:	880b883a 	mov	r5,r17
  80ab34:	080a6500 	call	80a650 <_fpadd_parts>
  80ab38:	1009883a 	mov	r4,r2
  80ab3c:	080b6f40 	call	80b6f4 <__pack_d>
  80ab40:	dfc01517 	ldw	ra,84(sp)
  80ab44:	dcc01417 	ldw	r19,80(sp)
  80ab48:	dc401317 	ldw	r17,76(sp)
  80ab4c:	dec01604 	addi	sp,sp,88
  80ab50:	f800283a 	ret

0080ab54 <__muldf3>:
  80ab54:	deffe004 	addi	sp,sp,-128
  80ab58:	dc401815 	stw	r17,96(sp)
  80ab5c:	dc400404 	addi	r17,sp,16
  80ab60:	2011883a 	mov	r8,r4
  80ab64:	2813883a 	mov	r9,r5
  80ab68:	dc001715 	stw	r16,92(sp)
  80ab6c:	d809883a 	mov	r4,sp
  80ab70:	880b883a 	mov	r5,r17
  80ab74:	dc000904 	addi	r16,sp,36
  80ab78:	dfc01f15 	stw	ra,124(sp)
  80ab7c:	da400115 	stw	r9,4(sp)
  80ab80:	d9c00315 	stw	r7,12(sp)
  80ab84:	da000015 	stw	r8,0(sp)
  80ab88:	d9800215 	stw	r6,8(sp)
  80ab8c:	ddc01e15 	stw	r23,120(sp)
  80ab90:	dd801d15 	stw	r22,116(sp)
  80ab94:	dd401c15 	stw	r21,112(sp)
  80ab98:	dd001b15 	stw	r20,108(sp)
  80ab9c:	dcc01a15 	stw	r19,104(sp)
  80aba0:	dc801915 	stw	r18,100(sp)
  80aba4:	080ba080 	call	80ba08 <__unpack_d>
  80aba8:	d9000204 	addi	r4,sp,8
  80abac:	800b883a 	mov	r5,r16
  80abb0:	080ba080 	call	80ba08 <__unpack_d>
  80abb4:	d9000417 	ldw	r4,16(sp)
  80abb8:	00800044 	movi	r2,1
  80abbc:	1100102e 	bgeu	r2,r4,80ac00 <__muldf3+0xac>
  80abc0:	d8c00917 	ldw	r3,36(sp)
  80abc4:	10c0062e 	bgeu	r2,r3,80abe0 <__muldf3+0x8c>
  80abc8:	00800104 	movi	r2,4
  80abcc:	20800a26 	beq	r4,r2,80abf8 <__muldf3+0xa4>
  80abd0:	1880cc26 	beq	r3,r2,80af04 <__muldf3+0x3b0>
  80abd4:	00800084 	movi	r2,2
  80abd8:	20800926 	beq	r4,r2,80ac00 <__muldf3+0xac>
  80abdc:	1880191e 	bne	r3,r2,80ac44 <__muldf3+0xf0>
  80abe0:	d8c00a17 	ldw	r3,40(sp)
  80abe4:	d8800517 	ldw	r2,20(sp)
  80abe8:	8009883a 	mov	r4,r16
  80abec:	10c4c03a 	cmpne	r2,r2,r3
  80abf0:	d8800a15 	stw	r2,40(sp)
  80abf4:	00000706 	br	80ac14 <__muldf3+0xc0>
  80abf8:	00800084 	movi	r2,2
  80abfc:	1880c326 	beq	r3,r2,80af0c <__muldf3+0x3b8>
  80ac00:	d8800517 	ldw	r2,20(sp)
  80ac04:	d8c00a17 	ldw	r3,40(sp)
  80ac08:	8809883a 	mov	r4,r17
  80ac0c:	10c4c03a 	cmpne	r2,r2,r3
  80ac10:	d8800515 	stw	r2,20(sp)
  80ac14:	080b6f40 	call	80b6f4 <__pack_d>
  80ac18:	dfc01f17 	ldw	ra,124(sp)
  80ac1c:	ddc01e17 	ldw	r23,120(sp)
  80ac20:	dd801d17 	ldw	r22,116(sp)
  80ac24:	dd401c17 	ldw	r21,112(sp)
  80ac28:	dd001b17 	ldw	r20,108(sp)
  80ac2c:	dcc01a17 	ldw	r19,104(sp)
  80ac30:	dc801917 	ldw	r18,100(sp)
  80ac34:	dc401817 	ldw	r17,96(sp)
  80ac38:	dc001717 	ldw	r16,92(sp)
  80ac3c:	dec02004 	addi	sp,sp,128
  80ac40:	f800283a 	ret
  80ac44:	dd800717 	ldw	r22,28(sp)
  80ac48:	dc800c17 	ldw	r18,48(sp)
  80ac4c:	002b883a 	mov	r21,zero
  80ac50:	0023883a 	mov	r17,zero
  80ac54:	a80b883a 	mov	r5,r21
  80ac58:	b00d883a 	mov	r6,r22
  80ac5c:	880f883a 	mov	r7,r17
  80ac60:	ddc00817 	ldw	r23,32(sp)
  80ac64:	dcc00d17 	ldw	r19,52(sp)
  80ac68:	9009883a 	mov	r4,r18
  80ac6c:	080b2e00 	call	80b2e0 <__muldi3>
  80ac70:	001b883a 	mov	r13,zero
  80ac74:	680f883a 	mov	r7,r13
  80ac78:	b009883a 	mov	r4,r22
  80ac7c:	000b883a 	mov	r5,zero
  80ac80:	980d883a 	mov	r6,r19
  80ac84:	b82d883a 	mov	r22,r23
  80ac88:	002f883a 	mov	r23,zero
  80ac8c:	db401615 	stw	r13,88(sp)
  80ac90:	d8801315 	stw	r2,76(sp)
  80ac94:	d8c01415 	stw	r3,80(sp)
  80ac98:	dcc01515 	stw	r19,84(sp)
  80ac9c:	080b2e00 	call	80b2e0 <__muldi3>
  80aca0:	b00d883a 	mov	r6,r22
  80aca4:	000b883a 	mov	r5,zero
  80aca8:	9009883a 	mov	r4,r18
  80acac:	b80f883a 	mov	r7,r23
  80acb0:	1021883a 	mov	r16,r2
  80acb4:	1823883a 	mov	r17,r3
  80acb8:	080b2e00 	call	80b2e0 <__muldi3>
  80acbc:	8085883a 	add	r2,r16,r2
  80acc0:	140d803a 	cmpltu	r6,r2,r16
  80acc4:	88c7883a 	add	r3,r17,r3
  80acc8:	30cd883a 	add	r6,r6,r3
  80accc:	1029883a 	mov	r20,r2
  80acd0:	302b883a 	mov	r21,r6
  80acd4:	da801317 	ldw	r10,76(sp)
  80acd8:	dac01417 	ldw	r11,80(sp)
  80acdc:	db001517 	ldw	r12,84(sp)
  80ace0:	db401617 	ldw	r13,88(sp)
  80ace4:	3440612e 	bgeu	r6,r17,80ae6c <__muldf3+0x318>
  80ace8:	0009883a 	mov	r4,zero
  80acec:	5105883a 	add	r2,r10,r4
  80acf0:	128d803a 	cmpltu	r6,r2,r10
  80acf4:	5d07883a 	add	r3,r11,r20
  80acf8:	30cd883a 	add	r6,r6,r3
  80acfc:	0021883a 	mov	r16,zero
  80ad00:	04400044 	movi	r17,1
  80ad04:	1025883a 	mov	r18,r2
  80ad08:	3027883a 	mov	r19,r6
  80ad0c:	32c06236 	bltu	r6,r11,80ae98 <__muldf3+0x344>
  80ad10:	59807a26 	beq	r11,r6,80aefc <__muldf3+0x3a8>
  80ad14:	680b883a 	mov	r5,r13
  80ad18:	b80f883a 	mov	r7,r23
  80ad1c:	6009883a 	mov	r4,r12
  80ad20:	b00d883a 	mov	r6,r22
  80ad24:	080b2e00 	call	80b2e0 <__muldi3>
  80ad28:	1009883a 	mov	r4,r2
  80ad2c:	000f883a 	mov	r7,zero
  80ad30:	1545883a 	add	r2,r2,r21
  80ad34:	1111803a 	cmpltu	r8,r2,r4
  80ad38:	19c7883a 	add	r3,r3,r7
  80ad3c:	40c7883a 	add	r3,r8,r3
  80ad40:	88cb883a 	add	r5,r17,r3
  80ad44:	d8c00617 	ldw	r3,24(sp)
  80ad48:	8089883a 	add	r4,r16,r2
  80ad4c:	d8800b17 	ldw	r2,44(sp)
  80ad50:	18c00104 	addi	r3,r3,4
  80ad54:	240d803a 	cmpltu	r6,r4,r16
  80ad58:	10c7883a 	add	r3,r2,r3
  80ad5c:	2013883a 	mov	r9,r4
  80ad60:	d8800a17 	ldw	r2,40(sp)
  80ad64:	d9000517 	ldw	r4,20(sp)
  80ad68:	314d883a 	add	r6,r6,r5
  80ad6c:	3015883a 	mov	r10,r6
  80ad70:	2088c03a 	cmpne	r4,r4,r2
  80ad74:	00880034 	movhi	r2,8192
  80ad78:	10bfffc4 	addi	r2,r2,-1
  80ad7c:	d9000f15 	stw	r4,60(sp)
  80ad80:	d8c01015 	stw	r3,64(sp)
  80ad84:	1180162e 	bgeu	r2,r6,80ade0 <__muldf3+0x28c>
  80ad88:	1811883a 	mov	r8,r3
  80ad8c:	101f883a 	mov	r15,r2
  80ad90:	980497fa 	slli	r2,r19,31
  80ad94:	9016d07a 	srli	r11,r18,1
  80ad98:	500697fa 	slli	r3,r10,31
  80ad9c:	480cd07a 	srli	r6,r9,1
  80ada0:	500ed07a 	srli	r7,r10,1
  80ada4:	12d6b03a 	or	r11,r2,r11
  80ada8:	00800044 	movi	r2,1
  80adac:	198cb03a 	or	r6,r3,r6
  80adb0:	4888703a 	and	r4,r9,r2
  80adb4:	9818d07a 	srli	r12,r19,1
  80adb8:	001b883a 	mov	r13,zero
  80adbc:	03a00034 	movhi	r14,32768
  80adc0:	3013883a 	mov	r9,r6
  80adc4:	3815883a 	mov	r10,r7
  80adc8:	4091883a 	add	r8,r8,r2
  80adcc:	20000226 	beq	r4,zero,80add8 <__muldf3+0x284>
  80add0:	5b64b03a 	or	r18,r11,r13
  80add4:	63a6b03a 	or	r19,r12,r14
  80add8:	7abfed36 	bltu	r15,r10,80ad90 <__muldf3+0x23c>
  80addc:	da001015 	stw	r8,64(sp)
  80ade0:	00840034 	movhi	r2,4096
  80ade4:	10bfffc4 	addi	r2,r2,-1
  80ade8:	12801436 	bltu	r2,r10,80ae3c <__muldf3+0x2e8>
  80adec:	da001017 	ldw	r8,64(sp)
  80adf0:	101f883a 	mov	r15,r2
  80adf4:	4a45883a 	add	r2,r9,r9
  80adf8:	124d803a 	cmpltu	r6,r2,r9
  80adfc:	5287883a 	add	r3,r10,r10
  80ae00:	9497883a 	add	r11,r18,r18
  80ae04:	5c8f803a 	cmpltu	r7,r11,r18
  80ae08:	9cd9883a 	add	r12,r19,r19
  80ae0c:	01000044 	movi	r4,1
  80ae10:	30cd883a 	add	r6,r6,r3
  80ae14:	3b0f883a 	add	r7,r7,r12
  80ae18:	423fffc4 	addi	r8,r8,-1
  80ae1c:	1013883a 	mov	r9,r2
  80ae20:	3015883a 	mov	r10,r6
  80ae24:	111ab03a 	or	r13,r2,r4
  80ae28:	98003016 	blt	r19,zero,80aeec <__muldf3+0x398>
  80ae2c:	5825883a 	mov	r18,r11
  80ae30:	3827883a 	mov	r19,r7
  80ae34:	7abfef2e 	bgeu	r15,r10,80adf4 <__muldf3+0x2a0>
  80ae38:	da001015 	stw	r8,64(sp)
  80ae3c:	00803fc4 	movi	r2,255
  80ae40:	488e703a 	and	r7,r9,r2
  80ae44:	00802004 	movi	r2,128
  80ae48:	0007883a 	mov	r3,zero
  80ae4c:	0011883a 	mov	r8,zero
  80ae50:	38801826 	beq	r7,r2,80aeb4 <__muldf3+0x360>
  80ae54:	008000c4 	movi	r2,3
  80ae58:	d9000e04 	addi	r4,sp,56
  80ae5c:	da801215 	stw	r10,72(sp)
  80ae60:	d8800e15 	stw	r2,56(sp)
  80ae64:	da401115 	stw	r9,68(sp)
  80ae68:	003f6a06 	br	80ac14 <__muldf3+0xc0>
  80ae6c:	89802126 	beq	r17,r6,80aef4 <__muldf3+0x3a0>
  80ae70:	0009883a 	mov	r4,zero
  80ae74:	5105883a 	add	r2,r10,r4
  80ae78:	128d803a 	cmpltu	r6,r2,r10
  80ae7c:	5d07883a 	add	r3,r11,r20
  80ae80:	30cd883a 	add	r6,r6,r3
  80ae84:	0021883a 	mov	r16,zero
  80ae88:	0023883a 	mov	r17,zero
  80ae8c:	1025883a 	mov	r18,r2
  80ae90:	3027883a 	mov	r19,r6
  80ae94:	32ff9e2e 	bgeu	r6,r11,80ad10 <__muldf3+0x1bc>
  80ae98:	00800044 	movi	r2,1
  80ae9c:	8089883a 	add	r4,r16,r2
  80aea0:	240d803a 	cmpltu	r6,r4,r16
  80aea4:	344d883a 	add	r6,r6,r17
  80aea8:	2021883a 	mov	r16,r4
  80aeac:	3023883a 	mov	r17,r6
  80aeb0:	003f9806 	br	80ad14 <__muldf3+0x1c0>
  80aeb4:	403fe71e 	bne	r8,zero,80ae54 <__muldf3+0x300>
  80aeb8:	01004004 	movi	r4,256
  80aebc:	4904703a 	and	r2,r9,r4
  80aec0:	10c4b03a 	or	r2,r2,r3
  80aec4:	103fe31e 	bne	r2,zero,80ae54 <__muldf3+0x300>
  80aec8:	94c4b03a 	or	r2,r18,r19
  80aecc:	103fe126 	beq	r2,zero,80ae54 <__muldf3+0x300>
  80aed0:	49c5883a 	add	r2,r9,r7
  80aed4:	1251803a 	cmpltu	r8,r2,r9
  80aed8:	4291883a 	add	r8,r8,r10
  80aedc:	013fc004 	movi	r4,-256
  80aee0:	1112703a 	and	r9,r2,r4
  80aee4:	4015883a 	mov	r10,r8
  80aee8:	003fda06 	br	80ae54 <__muldf3+0x300>
  80aeec:	6813883a 	mov	r9,r13
  80aef0:	003fce06 	br	80ae2c <__muldf3+0x2d8>
  80aef4:	143f7c36 	bltu	r2,r16,80ace8 <__muldf3+0x194>
  80aef8:	003fdd06 	br	80ae70 <__muldf3+0x31c>
  80aefc:	12bf852e 	bgeu	r2,r10,80ad14 <__muldf3+0x1c0>
  80af00:	003fe506 	br	80ae98 <__muldf3+0x344>
  80af04:	00800084 	movi	r2,2
  80af08:	20bf351e 	bne	r4,r2,80abe0 <__muldf3+0x8c>
  80af0c:	010020b4 	movhi	r4,130
  80af10:	21019304 	addi	r4,r4,1612
  80af14:	003f3f06 	br	80ac14 <__muldf3+0xc0>

0080af18 <__floatsidf>:
  80af18:	2006d7fa 	srli	r3,r4,31
  80af1c:	defff604 	addi	sp,sp,-40
  80af20:	008000c4 	movi	r2,3
  80af24:	dfc00915 	stw	ra,36(sp)
  80af28:	dcc00815 	stw	r19,32(sp)
  80af2c:	dc800715 	stw	r18,28(sp)
  80af30:	dc400615 	stw	r17,24(sp)
  80af34:	dc000515 	stw	r16,20(sp)
  80af38:	d8800015 	stw	r2,0(sp)
  80af3c:	d8c00115 	stw	r3,4(sp)
  80af40:	20000f1e 	bne	r4,zero,80af80 <__floatsidf+0x68>
  80af44:	00800084 	movi	r2,2
  80af48:	d8800015 	stw	r2,0(sp)
  80af4c:	d809883a 	mov	r4,sp
  80af50:	080b6f40 	call	80b6f4 <__pack_d>
  80af54:	1009883a 	mov	r4,r2
  80af58:	180b883a 	mov	r5,r3
  80af5c:	2005883a 	mov	r2,r4
  80af60:	2807883a 	mov	r3,r5
  80af64:	dfc00917 	ldw	ra,36(sp)
  80af68:	dcc00817 	ldw	r19,32(sp)
  80af6c:	dc800717 	ldw	r18,28(sp)
  80af70:	dc400617 	ldw	r17,24(sp)
  80af74:	dc000517 	ldw	r16,20(sp)
  80af78:	dec00a04 	addi	sp,sp,40
  80af7c:	f800283a 	ret
  80af80:	00800f04 	movi	r2,60
  80af84:	1807003a 	cmpeq	r3,r3,zero
  80af88:	d8800215 	stw	r2,8(sp)
  80af8c:	18001126 	beq	r3,zero,80afd4 <__floatsidf+0xbc>
  80af90:	0027883a 	mov	r19,zero
  80af94:	2025883a 	mov	r18,r4
  80af98:	d9000315 	stw	r4,12(sp)
  80af9c:	dcc00415 	stw	r19,16(sp)
  80afa0:	080b3780 	call	80b378 <__clzsi2>
  80afa4:	11000744 	addi	r4,r2,29
  80afa8:	013fe80e 	bge	zero,r4,80af4c <__floatsidf+0x34>
  80afac:	10bfff44 	addi	r2,r2,-3
  80afb0:	10000c16 	blt	r2,zero,80afe4 <__floatsidf+0xcc>
  80afb4:	90a2983a 	sll	r17,r18,r2
  80afb8:	0021883a 	mov	r16,zero
  80afbc:	d8800217 	ldw	r2,8(sp)
  80afc0:	dc400415 	stw	r17,16(sp)
  80afc4:	dc000315 	stw	r16,12(sp)
  80afc8:	1105c83a 	sub	r2,r2,r4
  80afcc:	d8800215 	stw	r2,8(sp)
  80afd0:	003fde06 	br	80af4c <__floatsidf+0x34>
  80afd4:	00a00034 	movhi	r2,32768
  80afd8:	20800a26 	beq	r4,r2,80b004 <__floatsidf+0xec>
  80afdc:	0109c83a 	sub	r4,zero,r4
  80afe0:	003feb06 	br	80af90 <__floatsidf+0x78>
  80afe4:	9006d07a 	srli	r3,r18,1
  80afe8:	008007c4 	movi	r2,31
  80afec:	1105c83a 	sub	r2,r2,r4
  80aff0:	1886d83a 	srl	r3,r3,r2
  80aff4:	9922983a 	sll	r17,r19,r4
  80aff8:	9120983a 	sll	r16,r18,r4
  80affc:	1c62b03a 	or	r17,r3,r17
  80b000:	003fee06 	br	80afbc <__floatsidf+0xa4>
  80b004:	0009883a 	mov	r4,zero
  80b008:	01707834 	movhi	r5,49632
  80b00c:	003fd306 	br	80af5c <__floatsidf+0x44>

0080b010 <__fixdfsi>:
  80b010:	defff804 	addi	sp,sp,-32
  80b014:	2005883a 	mov	r2,r4
  80b018:	2807883a 	mov	r3,r5
  80b01c:	d809883a 	mov	r4,sp
  80b020:	d9400204 	addi	r5,sp,8
  80b024:	d8c00115 	stw	r3,4(sp)
  80b028:	d8800015 	stw	r2,0(sp)
  80b02c:	dfc00715 	stw	ra,28(sp)
  80b030:	080ba080 	call	80ba08 <__unpack_d>
  80b034:	d8c00217 	ldw	r3,8(sp)
  80b038:	00800084 	movi	r2,2
  80b03c:	1880051e 	bne	r3,r2,80b054 <__fixdfsi+0x44>
  80b040:	0007883a 	mov	r3,zero
  80b044:	1805883a 	mov	r2,r3
  80b048:	dfc00717 	ldw	ra,28(sp)
  80b04c:	dec00804 	addi	sp,sp,32
  80b050:	f800283a 	ret
  80b054:	00800044 	movi	r2,1
  80b058:	10fff92e 	bgeu	r2,r3,80b040 <__fixdfsi+0x30>
  80b05c:	00800104 	movi	r2,4
  80b060:	18800426 	beq	r3,r2,80b074 <__fixdfsi+0x64>
  80b064:	d8c00417 	ldw	r3,16(sp)
  80b068:	183ff516 	blt	r3,zero,80b040 <__fixdfsi+0x30>
  80b06c:	00800784 	movi	r2,30
  80b070:	10c0080e 	bge	r2,r3,80b094 <__fixdfsi+0x84>
  80b074:	d8800317 	ldw	r2,12(sp)
  80b078:	1000121e 	bne	r2,zero,80b0c4 <__fixdfsi+0xb4>
  80b07c:	00e00034 	movhi	r3,32768
  80b080:	18ffffc4 	addi	r3,r3,-1
  80b084:	1805883a 	mov	r2,r3
  80b088:	dfc00717 	ldw	ra,28(sp)
  80b08c:	dec00804 	addi	sp,sp,32
  80b090:	f800283a 	ret
  80b094:	00800f04 	movi	r2,60
  80b098:	10d1c83a 	sub	r8,r2,r3
  80b09c:	40bff804 	addi	r2,r8,-32
  80b0a0:	d9800517 	ldw	r6,20(sp)
  80b0a4:	d9c00617 	ldw	r7,24(sp)
  80b0a8:	10000816 	blt	r2,zero,80b0cc <__fixdfsi+0xbc>
  80b0ac:	3888d83a 	srl	r4,r7,r2
  80b0b0:	d8800317 	ldw	r2,12(sp)
  80b0b4:	2007883a 	mov	r3,r4
  80b0b8:	103fe226 	beq	r2,zero,80b044 <__fixdfsi+0x34>
  80b0bc:	0107c83a 	sub	r3,zero,r4
  80b0c0:	003fe006 	br	80b044 <__fixdfsi+0x34>
  80b0c4:	00e00034 	movhi	r3,32768
  80b0c8:	003fde06 	br	80b044 <__fixdfsi+0x34>
  80b0cc:	39c7883a 	add	r3,r7,r7
  80b0d0:	008007c4 	movi	r2,31
  80b0d4:	1205c83a 	sub	r2,r2,r8
  80b0d8:	1886983a 	sll	r3,r3,r2
  80b0dc:	3208d83a 	srl	r4,r6,r8
  80b0e0:	1908b03a 	or	r4,r3,r4
  80b0e4:	003ff206 	br	80b0b0 <__fixdfsi+0xa0>

0080b0e8 <__make_dp>:
  80b0e8:	defff904 	addi	sp,sp,-28
  80b0ec:	d8c00717 	ldw	r3,28(sp)
  80b0f0:	d9000015 	stw	r4,0(sp)
  80b0f4:	d809883a 	mov	r4,sp
  80b0f8:	dfc00515 	stw	ra,20(sp)
  80b0fc:	d9c00615 	stw	r7,24(sp)
  80b100:	d9400115 	stw	r5,4(sp)
  80b104:	d9800215 	stw	r6,8(sp)
  80b108:	d8c00415 	stw	r3,16(sp)
  80b10c:	d9c00315 	stw	r7,12(sp)
  80b110:	080b6f40 	call	80b6f4 <__pack_d>
  80b114:	dfc00517 	ldw	ra,20(sp)
  80b118:	dec00704 	addi	sp,sp,28
  80b11c:	f800283a 	ret

0080b120 <__truncdfsf2>:
  80b120:	defff804 	addi	sp,sp,-32
  80b124:	2005883a 	mov	r2,r4
  80b128:	2807883a 	mov	r3,r5
  80b12c:	d809883a 	mov	r4,sp
  80b130:	d9400204 	addi	r5,sp,8
  80b134:	d8c00115 	stw	r3,4(sp)
  80b138:	d8800015 	stw	r2,0(sp)
  80b13c:	dfc00715 	stw	ra,28(sp)
  80b140:	080ba080 	call	80ba08 <__unpack_d>
  80b144:	d9c00517 	ldw	r7,20(sp)
  80b148:	da000617 	ldw	r8,24(sp)
  80b14c:	02d00034 	movhi	r11,16384
  80b150:	5affffc4 	addi	r11,r11,-1
  80b154:	3812d7ba 	srli	r9,r7,30
  80b158:	401a90ba 	slli	r13,r8,2
  80b15c:	3ac4703a 	and	r2,r7,r11
  80b160:	0007883a 	mov	r3,zero
  80b164:	6a52b03a 	or	r9,r13,r9
  80b168:	10c4b03a 	or	r2,r2,r3
  80b16c:	d9000217 	ldw	r4,8(sp)
  80b170:	d9400317 	ldw	r5,12(sp)
  80b174:	d9800417 	ldw	r6,16(sp)
  80b178:	480f883a 	mov	r7,r9
  80b17c:	10000126 	beq	r2,zero,80b184 <__truncdfsf2+0x64>
  80b180:	49c00054 	ori	r7,r9,1
  80b184:	080b6c80 	call	80b6c8 <__make_fp>
  80b188:	dfc00717 	ldw	ra,28(sp)
  80b18c:	dec00804 	addi	sp,sp,32
  80b190:	f800283a 	ret

0080b194 <udivmodsi4>:
  80b194:	29001b2e 	bgeu	r5,r4,80b204 <udivmodsi4+0x70>
  80b198:	28001a16 	blt	r5,zero,80b204 <udivmodsi4+0x70>
  80b19c:	00800044 	movi	r2,1
  80b1a0:	0007883a 	mov	r3,zero
  80b1a4:	01c007c4 	movi	r7,31
  80b1a8:	00000306 	br	80b1b8 <udivmodsi4+0x24>
  80b1ac:	19c01326 	beq	r3,r7,80b1fc <udivmodsi4+0x68>
  80b1b0:	18c00044 	addi	r3,r3,1
  80b1b4:	28000416 	blt	r5,zero,80b1c8 <udivmodsi4+0x34>
  80b1b8:	294b883a 	add	r5,r5,r5
  80b1bc:	1085883a 	add	r2,r2,r2
  80b1c0:	293ffa36 	bltu	r5,r4,80b1ac <udivmodsi4+0x18>
  80b1c4:	10000d26 	beq	r2,zero,80b1fc <udivmodsi4+0x68>
  80b1c8:	0007883a 	mov	r3,zero
  80b1cc:	21400236 	bltu	r4,r5,80b1d8 <udivmodsi4+0x44>
  80b1d0:	2149c83a 	sub	r4,r4,r5
  80b1d4:	1886b03a 	or	r3,r3,r2
  80b1d8:	1004d07a 	srli	r2,r2,1
  80b1dc:	280ad07a 	srli	r5,r5,1
  80b1e0:	103ffa1e 	bne	r2,zero,80b1cc <udivmodsi4+0x38>
  80b1e4:	30000226 	beq	r6,zero,80b1f0 <udivmodsi4+0x5c>
  80b1e8:	2005883a 	mov	r2,r4
  80b1ec:	f800283a 	ret
  80b1f0:	1809883a 	mov	r4,r3
  80b1f4:	2005883a 	mov	r2,r4
  80b1f8:	f800283a 	ret
  80b1fc:	0007883a 	mov	r3,zero
  80b200:	003ff806 	br	80b1e4 <udivmodsi4+0x50>
  80b204:	00800044 	movi	r2,1
  80b208:	0007883a 	mov	r3,zero
  80b20c:	003fef06 	br	80b1cc <udivmodsi4+0x38>

0080b210 <__divsi3>:
  80b210:	defffe04 	addi	sp,sp,-8
  80b214:	dc000015 	stw	r16,0(sp)
  80b218:	dfc00115 	stw	ra,4(sp)
  80b21c:	0021883a 	mov	r16,zero
  80b220:	20000c16 	blt	r4,zero,80b254 <__divsi3+0x44>
  80b224:	000d883a 	mov	r6,zero
  80b228:	28000e16 	blt	r5,zero,80b264 <__divsi3+0x54>
  80b22c:	080b1940 	call	80b194 <udivmodsi4>
  80b230:	1007883a 	mov	r3,r2
  80b234:	8005003a 	cmpeq	r2,r16,zero
  80b238:	1000011e 	bne	r2,zero,80b240 <__divsi3+0x30>
  80b23c:	00c7c83a 	sub	r3,zero,r3
  80b240:	1805883a 	mov	r2,r3
  80b244:	dfc00117 	ldw	ra,4(sp)
  80b248:	dc000017 	ldw	r16,0(sp)
  80b24c:	dec00204 	addi	sp,sp,8
  80b250:	f800283a 	ret
  80b254:	0109c83a 	sub	r4,zero,r4
  80b258:	04000044 	movi	r16,1
  80b25c:	000d883a 	mov	r6,zero
  80b260:	283ff20e 	bge	r5,zero,80b22c <__divsi3+0x1c>
  80b264:	014bc83a 	sub	r5,zero,r5
  80b268:	8021003a 	cmpeq	r16,r16,zero
  80b26c:	003fef06 	br	80b22c <__divsi3+0x1c>

0080b270 <__modsi3>:
  80b270:	deffff04 	addi	sp,sp,-4
  80b274:	dfc00015 	stw	ra,0(sp)
  80b278:	01800044 	movi	r6,1
  80b27c:	2807883a 	mov	r3,r5
  80b280:	20000416 	blt	r4,zero,80b294 <__modsi3+0x24>
  80b284:	28000c16 	blt	r5,zero,80b2b8 <__modsi3+0x48>
  80b288:	dfc00017 	ldw	ra,0(sp)
  80b28c:	dec00104 	addi	sp,sp,4
  80b290:	080b1941 	jmpi	80b194 <udivmodsi4>
  80b294:	0109c83a 	sub	r4,zero,r4
  80b298:	28000b16 	blt	r5,zero,80b2c8 <__modsi3+0x58>
  80b29c:	180b883a 	mov	r5,r3
  80b2a0:	01800044 	movi	r6,1
  80b2a4:	080b1940 	call	80b194 <udivmodsi4>
  80b2a8:	0085c83a 	sub	r2,zero,r2
  80b2ac:	dfc00017 	ldw	ra,0(sp)
  80b2b0:	dec00104 	addi	sp,sp,4
  80b2b4:	f800283a 	ret
  80b2b8:	014bc83a 	sub	r5,zero,r5
  80b2bc:	dfc00017 	ldw	ra,0(sp)
  80b2c0:	dec00104 	addi	sp,sp,4
  80b2c4:	080b1941 	jmpi	80b194 <udivmodsi4>
  80b2c8:	0147c83a 	sub	r3,zero,r5
  80b2cc:	003ff306 	br	80b29c <__modsi3+0x2c>

0080b2d0 <__udivsi3>:
  80b2d0:	000d883a 	mov	r6,zero
  80b2d4:	080b1941 	jmpi	80b194 <udivmodsi4>

0080b2d8 <__umodsi3>:
  80b2d8:	01800044 	movi	r6,1
  80b2dc:	080b1941 	jmpi	80b194 <udivmodsi4>

0080b2e0 <__muldi3>:
  80b2e0:	2011883a 	mov	r8,r4
  80b2e4:	427fffcc 	andi	r9,r8,65535
  80b2e8:	4018d43a 	srli	r12,r8,16
  80b2ec:	32bfffcc 	andi	r10,r6,65535
  80b2f0:	3016d43a 	srli	r11,r6,16
  80b2f4:	4a85383a 	mul	r2,r9,r10
  80b2f8:	6295383a 	mul	r10,r12,r10
  80b2fc:	4ad3383a 	mul	r9,r9,r11
  80b300:	113fffcc 	andi	r4,r2,65535
  80b304:	1004d43a 	srli	r2,r2,16
  80b308:	4a93883a 	add	r9,r9,r10
  80b30c:	3807883a 	mov	r3,r7
  80b310:	1245883a 	add	r2,r2,r9
  80b314:	280f883a 	mov	r7,r5
  80b318:	180b883a 	mov	r5,r3
  80b31c:	1006943a 	slli	r3,r2,16
  80b320:	defffd04 	addi	sp,sp,-12
  80b324:	dc800215 	stw	r18,8(sp)
  80b328:	1907883a 	add	r3,r3,r4
  80b32c:	dc400115 	stw	r17,4(sp)
  80b330:	dc000015 	stw	r16,0(sp)
  80b334:	4165383a 	mul	r18,r8,r5
  80b338:	31e3383a 	mul	r17,r6,r7
  80b33c:	1012d43a 	srli	r9,r2,16
  80b340:	62d9383a 	mul	r12,r12,r11
  80b344:	181f883a 	mov	r15,r3
  80b348:	1280022e 	bgeu	r2,r10,80b354 <__muldi3+0x74>
  80b34c:	00800074 	movhi	r2,1
  80b350:	6099883a 	add	r12,r12,r2
  80b354:	624d883a 	add	r6,r12,r9
  80b358:	9187883a 	add	r3,r18,r6
  80b35c:	88c7883a 	add	r3,r17,r3
  80b360:	7805883a 	mov	r2,r15
  80b364:	dc800217 	ldw	r18,8(sp)
  80b368:	dc400117 	ldw	r17,4(sp)
  80b36c:	dc000017 	ldw	r16,0(sp)
  80b370:	dec00304 	addi	sp,sp,12
  80b374:	f800283a 	ret

0080b378 <__clzsi2>:
  80b378:	00bfffd4 	movui	r2,65535
  80b37c:	11000e36 	bltu	r2,r4,80b3b8 <__clzsi2+0x40>
  80b380:	00803fc4 	movi	r2,255
  80b384:	01400204 	movi	r5,8
  80b388:	0007883a 	mov	r3,zero
  80b38c:	11001036 	bltu	r2,r4,80b3d0 <__clzsi2+0x58>
  80b390:	000b883a 	mov	r5,zero
  80b394:	20c6d83a 	srl	r3,r4,r3
  80b398:	008020b4 	movhi	r2,130
  80b39c:	10819804 	addi	r2,r2,1632
  80b3a0:	1887883a 	add	r3,r3,r2
  80b3a4:	18800003 	ldbu	r2,0(r3)
  80b3a8:	00c00804 	movi	r3,32
  80b3ac:	2885883a 	add	r2,r5,r2
  80b3b0:	1885c83a 	sub	r2,r3,r2
  80b3b4:	f800283a 	ret
  80b3b8:	01400404 	movi	r5,16
  80b3bc:	00804034 	movhi	r2,256
  80b3c0:	10bfffc4 	addi	r2,r2,-1
  80b3c4:	2807883a 	mov	r3,r5
  80b3c8:	113ff22e 	bgeu	r2,r4,80b394 <__clzsi2+0x1c>
  80b3cc:	01400604 	movi	r5,24
  80b3d0:	2807883a 	mov	r3,r5
  80b3d4:	20c6d83a 	srl	r3,r4,r3
  80b3d8:	008020b4 	movhi	r2,130
  80b3dc:	10819804 	addi	r2,r2,1632
  80b3e0:	1887883a 	add	r3,r3,r2
  80b3e4:	18800003 	ldbu	r2,0(r3)
  80b3e8:	00c00804 	movi	r3,32
  80b3ec:	2885883a 	add	r2,r5,r2
  80b3f0:	1885c83a 	sub	r2,r3,r2
  80b3f4:	f800283a 	ret

0080b3f8 <__pack_f>:
  80b3f8:	20c00017 	ldw	r3,0(r4)
  80b3fc:	01c00044 	movi	r7,1
  80b400:	21800317 	ldw	r6,12(r4)
  80b404:	21400117 	ldw	r5,4(r4)
  80b408:	38c02d2e 	bgeu	r7,r3,80b4c0 <__pack_f+0xc8>
  80b40c:	00800104 	movi	r2,4
  80b410:	18802826 	beq	r3,r2,80b4b4 <__pack_f+0xbc>
  80b414:	00800084 	movi	r2,2
  80b418:	18800126 	beq	r3,r2,80b420 <__pack_f+0x28>
  80b41c:	3000101e 	bne	r6,zero,80b460 <__pack_f+0x68>
  80b420:	000d883a 	mov	r6,zero
  80b424:	0007883a 	mov	r3,zero
  80b428:	19003fcc 	andi	r4,r3,255
  80b42c:	200895fa 	slli	r4,r4,23
  80b430:	00c02034 	movhi	r3,128
  80b434:	18ffffc4 	addi	r3,r3,-1
  80b438:	30c6703a 	and	r3,r6,r3
  80b43c:	10a0002c 	andhi	r2,r2,32768
  80b440:	10c4b03a 	or	r2,r2,r3
  80b444:	280a97fa 	slli	r5,r5,31
  80b448:	1104b03a 	or	r2,r2,r4
  80b44c:	00e00034 	movhi	r3,32768
  80b450:	18ffffc4 	addi	r3,r3,-1
  80b454:	10c4703a 	and	r2,r2,r3
  80b458:	1144b03a 	or	r2,r2,r5
  80b45c:	f800283a 	ret
  80b460:	21000217 	ldw	r4,8(r4)
  80b464:	00bfe084 	movi	r2,-126
  80b468:	20801b16 	blt	r4,r2,80b4d8 <__pack_f+0xe0>
  80b46c:	00801fc4 	movi	r2,127
  80b470:	11001016 	blt	r2,r4,80b4b4 <__pack_f+0xbc>
  80b474:	308e703a 	and	r7,r6,r2
  80b478:	2087883a 	add	r3,r4,r2
  80b47c:	00801004 	movi	r2,64
  80b480:	38800526 	beq	r7,r2,80b498 <__pack_f+0xa0>
  80b484:	31800fc4 	addi	r6,r6,63
  80b488:	30000716 	blt	r6,zero,80b4a8 <__pack_f+0xb0>
  80b48c:	300490ba 	slli	r2,r6,2
  80b490:	100cd27a 	srli	r6,r2,9
  80b494:	003fe406 	br	80b428 <__pack_f+0x30>
  80b498:	3080200c 	andi	r2,r6,128
  80b49c:	103ffa26 	beq	r2,zero,80b488 <__pack_f+0x90>
  80b4a0:	31cd883a 	add	r6,r6,r7
  80b4a4:	003ff806 	br	80b488 <__pack_f+0x90>
  80b4a8:	300cd07a 	srli	r6,r6,1
  80b4ac:	18c00044 	addi	r3,r3,1
  80b4b0:	003ff606 	br	80b48c <__pack_f+0x94>
  80b4b4:	000d883a 	mov	r6,zero
  80b4b8:	00ffffc4 	movi	r3,-1
  80b4bc:	003fda06 	br	80b428 <__pack_f+0x30>
  80b4c0:	31800434 	orhi	r6,r6,16
  80b4c4:	00802034 	movhi	r2,128
  80b4c8:	10bfffc4 	addi	r2,r2,-1
  80b4cc:	308c703a 	and	r6,r6,r2
  80b4d0:	00ffffc4 	movi	r3,-1
  80b4d4:	003fd406 	br	80b428 <__pack_f+0x30>
  80b4d8:	1109c83a 	sub	r4,r2,r4
  80b4dc:	00800644 	movi	r2,25
  80b4e0:	11001216 	blt	r2,r4,80b52c <__pack_f+0x134>
  80b4e4:	3904983a 	sll	r2,r7,r4
  80b4e8:	3106d83a 	srl	r3,r6,r4
  80b4ec:	10bfffc4 	addi	r2,r2,-1
  80b4f0:	3084703a 	and	r2,r6,r2
  80b4f4:	1004c03a 	cmpne	r2,r2,zero
  80b4f8:	1886b03a 	or	r3,r3,r2
  80b4fc:	19001fcc 	andi	r4,r3,127
  80b500:	00801004 	movi	r2,64
  80b504:	20800c26 	beq	r4,r2,80b538 <__pack_f+0x140>
  80b508:	18c00fc4 	addi	r3,r3,63
  80b50c:	00900034 	movhi	r2,16384
  80b510:	10bfffc4 	addi	r2,r2,-1
  80b514:	180cd1fa 	srli	r6,r3,7
  80b518:	10c7803a 	cmpltu	r3,r2,r3
  80b51c:	00802034 	movhi	r2,128
  80b520:	10bfffc4 	addi	r2,r2,-1
  80b524:	308c703a 	and	r6,r6,r2
  80b528:	003fbf06 	br	80b428 <__pack_f+0x30>
  80b52c:	0007883a 	mov	r3,zero
  80b530:	000d883a 	mov	r6,zero
  80b534:	003ff906 	br	80b51c <__pack_f+0x124>
  80b538:	1880200c 	andi	r2,r3,128
  80b53c:	10000126 	beq	r2,zero,80b544 <__pack_f+0x14c>
  80b540:	1907883a 	add	r3,r3,r4
  80b544:	180cd1fa 	srli	r6,r3,7
  80b548:	00900034 	movhi	r2,16384
  80b54c:	10bfffc4 	addi	r2,r2,-1
  80b550:	10c7803a 	cmpltu	r3,r2,r3
  80b554:	003ff106 	br	80b51c <__pack_f+0x124>

0080b558 <__unpack_f>:
  80b558:	21800017 	ldw	r6,0(r4)
  80b55c:	00c02034 	movhi	r3,128
  80b560:	18ffffc4 	addi	r3,r3,-1
  80b564:	3004d5fa 	srli	r2,r6,23
  80b568:	3008d7fa 	srli	r4,r6,31
  80b56c:	30ce703a 	and	r7,r6,r3
  80b570:	10c03fcc 	andi	r3,r2,255
  80b574:	29000115 	stw	r4,4(r5)
  80b578:	1800131e 	bne	r3,zero,80b5c8 <__unpack_f+0x70>
  80b57c:	38000f26 	beq	r7,zero,80b5bc <__unpack_f+0x64>
  80b580:	380691fa 	slli	r3,r7,7
  80b584:	01bfe084 	movi	r6,-126
  80b588:	008000c4 	movi	r2,3
  80b58c:	01100034 	movhi	r4,16384
  80b590:	213fffc4 	addi	r4,r4,-1
  80b594:	28800015 	stw	r2,0(r5)
  80b598:	29800215 	stw	r6,8(r5)
  80b59c:	20c00536 	bltu	r4,r3,80b5b4 <__unpack_f+0x5c>
  80b5a0:	3005883a 	mov	r2,r6
  80b5a4:	18c7883a 	add	r3,r3,r3
  80b5a8:	10bfffc4 	addi	r2,r2,-1
  80b5ac:	20fffd2e 	bgeu	r4,r3,80b5a4 <__unpack_f+0x4c>
  80b5b0:	28800215 	stw	r2,8(r5)
  80b5b4:	28c00315 	stw	r3,12(r5)
  80b5b8:	f800283a 	ret
  80b5bc:	00800084 	movi	r2,2
  80b5c0:	28800015 	stw	r2,0(r5)
  80b5c4:	f800283a 	ret
  80b5c8:	00803fc4 	movi	r2,255
  80b5cc:	18800826 	beq	r3,r2,80b5f0 <__unpack_f+0x98>
  80b5d0:	380491fa 	slli	r2,r7,7
  80b5d4:	18ffe044 	addi	r3,r3,-127
  80b5d8:	28c00215 	stw	r3,8(r5)
  80b5dc:	10900034 	orhi	r2,r2,16384
  80b5e0:	28800315 	stw	r2,12(r5)
  80b5e4:	008000c4 	movi	r2,3
  80b5e8:	28800015 	stw	r2,0(r5)
  80b5ec:	f800283a 	ret
  80b5f0:	3800031e 	bne	r7,zero,80b600 <__unpack_f+0xa8>
  80b5f4:	00800104 	movi	r2,4
  80b5f8:	28800015 	stw	r2,0(r5)
  80b5fc:	f800283a 	ret
  80b600:	3080042c 	andhi	r2,r6,16
  80b604:	10000426 	beq	r2,zero,80b618 <__unpack_f+0xc0>
  80b608:	00800044 	movi	r2,1
  80b60c:	28800015 	stw	r2,0(r5)
  80b610:	29c00315 	stw	r7,12(r5)
  80b614:	f800283a 	ret
  80b618:	28000015 	stw	zero,0(r5)
  80b61c:	003ffc06 	br	80b610 <__unpack_f+0xb8>

0080b620 <__fpcmp_parts_f>:
  80b620:	21800017 	ldw	r6,0(r4)
  80b624:	00c00044 	movi	r3,1
  80b628:	19800a2e 	bgeu	r3,r6,80b654 <__fpcmp_parts_f+0x34>
  80b62c:	28800017 	ldw	r2,0(r5)
  80b630:	1880082e 	bgeu	r3,r2,80b654 <__fpcmp_parts_f+0x34>
  80b634:	00c00104 	movi	r3,4
  80b638:	30c01e26 	beq	r6,r3,80b6b4 <__fpcmp_parts_f+0x94>
  80b63c:	10c01a26 	beq	r2,r3,80b6a8 <__fpcmp_parts_f+0x88>
  80b640:	00c00084 	movi	r3,2
  80b644:	30c00526 	beq	r6,r3,80b65c <__fpcmp_parts_f+0x3c>
  80b648:	10c0071e 	bne	r2,r3,80b668 <__fpcmp_parts_f+0x48>
  80b64c:	20800117 	ldw	r2,4(r4)
  80b650:	1000091e 	bne	r2,zero,80b678 <__fpcmp_parts_f+0x58>
  80b654:	00800044 	movi	r2,1
  80b658:	f800283a 	ret
  80b65c:	10c0121e 	bne	r2,r3,80b6a8 <__fpcmp_parts_f+0x88>
  80b660:	0005883a 	mov	r2,zero
  80b664:	f800283a 	ret
  80b668:	20c00117 	ldw	r3,4(r4)
  80b66c:	28800117 	ldw	r2,4(r5)
  80b670:	18800326 	beq	r3,r2,80b680 <__fpcmp_parts_f+0x60>
  80b674:	183ff726 	beq	r3,zero,80b654 <__fpcmp_parts_f+0x34>
  80b678:	00bfffc4 	movi	r2,-1
  80b67c:	f800283a 	ret
  80b680:	21800217 	ldw	r6,8(r4)
  80b684:	28800217 	ldw	r2,8(r5)
  80b688:	11bffa16 	blt	r2,r6,80b674 <__fpcmp_parts_f+0x54>
  80b68c:	30800416 	blt	r6,r2,80b6a0 <__fpcmp_parts_f+0x80>
  80b690:	21000317 	ldw	r4,12(r4)
  80b694:	29400317 	ldw	r5,12(r5)
  80b698:	293ff636 	bltu	r5,r4,80b674 <__fpcmp_parts_f+0x54>
  80b69c:	217ff02e 	bgeu	r4,r5,80b660 <__fpcmp_parts_f+0x40>
  80b6a0:	183fec1e 	bne	r3,zero,80b654 <__fpcmp_parts_f+0x34>
  80b6a4:	003ff406 	br	80b678 <__fpcmp_parts_f+0x58>
  80b6a8:	28800117 	ldw	r2,4(r5)
  80b6ac:	103fe91e 	bne	r2,zero,80b654 <__fpcmp_parts_f+0x34>
  80b6b0:	003ff106 	br	80b678 <__fpcmp_parts_f+0x58>
  80b6b4:	11bfe51e 	bne	r2,r6,80b64c <__fpcmp_parts_f+0x2c>
  80b6b8:	28c00117 	ldw	r3,4(r5)
  80b6bc:	20800117 	ldw	r2,4(r4)
  80b6c0:	1885c83a 	sub	r2,r3,r2
  80b6c4:	f800283a 	ret

0080b6c8 <__make_fp>:
  80b6c8:	defffb04 	addi	sp,sp,-20
  80b6cc:	d9000015 	stw	r4,0(sp)
  80b6d0:	d809883a 	mov	r4,sp
  80b6d4:	dfc00415 	stw	ra,16(sp)
  80b6d8:	d9400115 	stw	r5,4(sp)
  80b6dc:	d9800215 	stw	r6,8(sp)
  80b6e0:	d9c00315 	stw	r7,12(sp)
  80b6e4:	080b3f80 	call	80b3f8 <__pack_f>
  80b6e8:	dfc00417 	ldw	ra,16(sp)
  80b6ec:	dec00504 	addi	sp,sp,20
  80b6f0:	f800283a 	ret

0080b6f4 <__pack_d>:
  80b6f4:	20c00017 	ldw	r3,0(r4)
  80b6f8:	defffd04 	addi	sp,sp,-12
  80b6fc:	dc000015 	stw	r16,0(sp)
  80b700:	dc800215 	stw	r18,8(sp)
  80b704:	dc400115 	stw	r17,4(sp)
  80b708:	00800044 	movi	r2,1
  80b70c:	22000317 	ldw	r8,12(r4)
  80b710:	001f883a 	mov	r15,zero
  80b714:	22400417 	ldw	r9,16(r4)
  80b718:	24000117 	ldw	r16,4(r4)
  80b71c:	10c0552e 	bgeu	r2,r3,80b874 <__pack_d+0x180>
  80b720:	00800104 	movi	r2,4
  80b724:	18804f26 	beq	r3,r2,80b864 <__pack_d+0x170>
  80b728:	00800084 	movi	r2,2
  80b72c:	18800226 	beq	r3,r2,80b738 <__pack_d+0x44>
  80b730:	4244b03a 	or	r2,r8,r9
  80b734:	10001a1e 	bne	r2,zero,80b7a0 <__pack_d+0xac>
  80b738:	000d883a 	mov	r6,zero
  80b73c:	000f883a 	mov	r7,zero
  80b740:	0011883a 	mov	r8,zero
  80b744:	00800434 	movhi	r2,16
  80b748:	10bfffc4 	addi	r2,r2,-1
  80b74c:	301d883a 	mov	r14,r6
  80b750:	3884703a 	and	r2,r7,r2
  80b754:	400a953a 	slli	r5,r8,20
  80b758:	79bffc2c 	andhi	r6,r15,65520
  80b75c:	308cb03a 	or	r6,r6,r2
  80b760:	00e00434 	movhi	r3,32784
  80b764:	18ffffc4 	addi	r3,r3,-1
  80b768:	800497fa 	slli	r2,r16,31
  80b76c:	30c6703a 	and	r3,r6,r3
  80b770:	1946b03a 	or	r3,r3,r5
  80b774:	01600034 	movhi	r5,32768
  80b778:	297fffc4 	addi	r5,r5,-1
  80b77c:	194a703a 	and	r5,r3,r5
  80b780:	288ab03a 	or	r5,r5,r2
  80b784:	2807883a 	mov	r3,r5
  80b788:	7005883a 	mov	r2,r14
  80b78c:	dc800217 	ldw	r18,8(sp)
  80b790:	dc400117 	ldw	r17,4(sp)
  80b794:	dc000017 	ldw	r16,0(sp)
  80b798:	dec00304 	addi	sp,sp,12
  80b79c:	f800283a 	ret
  80b7a0:	21000217 	ldw	r4,8(r4)
  80b7a4:	00bf0084 	movi	r2,-1022
  80b7a8:	20803f16 	blt	r4,r2,80b8a8 <__pack_d+0x1b4>
  80b7ac:	0080ffc4 	movi	r2,1023
  80b7b0:	11002c16 	blt	r2,r4,80b864 <__pack_d+0x170>
  80b7b4:	00803fc4 	movi	r2,255
  80b7b8:	408c703a 	and	r6,r8,r2
  80b7bc:	00802004 	movi	r2,128
  80b7c0:	0007883a 	mov	r3,zero
  80b7c4:	000f883a 	mov	r7,zero
  80b7c8:	2280ffc4 	addi	r10,r4,1023
  80b7cc:	30801e26 	beq	r6,r2,80b848 <__pack_d+0x154>
  80b7d0:	00801fc4 	movi	r2,127
  80b7d4:	4089883a 	add	r4,r8,r2
  80b7d8:	220d803a 	cmpltu	r6,r4,r8
  80b7dc:	324d883a 	add	r6,r6,r9
  80b7e0:	2011883a 	mov	r8,r4
  80b7e4:	3013883a 	mov	r9,r6
  80b7e8:	00880034 	movhi	r2,8192
  80b7ec:	10bfffc4 	addi	r2,r2,-1
  80b7f0:	12400d36 	bltu	r2,r9,80b828 <__pack_d+0x134>
  80b7f4:	4804963a 	slli	r2,r9,24
  80b7f8:	400cd23a 	srli	r6,r8,8
  80b7fc:	480ed23a 	srli	r7,r9,8
  80b800:	013fffc4 	movi	r4,-1
  80b804:	118cb03a 	or	r6,r2,r6
  80b808:	01400434 	movhi	r5,16
  80b80c:	297fffc4 	addi	r5,r5,-1
  80b810:	3104703a 	and	r2,r6,r4
  80b814:	3946703a 	and	r3,r7,r5
  80b818:	5201ffcc 	andi	r8,r10,2047
  80b81c:	100d883a 	mov	r6,r2
  80b820:	180f883a 	mov	r7,r3
  80b824:	003fc706 	br	80b744 <__pack_d+0x50>
  80b828:	480897fa 	slli	r4,r9,31
  80b82c:	4004d07a 	srli	r2,r8,1
  80b830:	4806d07a 	srli	r3,r9,1
  80b834:	52800044 	addi	r10,r10,1
  80b838:	2084b03a 	or	r2,r4,r2
  80b83c:	1011883a 	mov	r8,r2
  80b840:	1813883a 	mov	r9,r3
  80b844:	003feb06 	br	80b7f4 <__pack_d+0x100>
  80b848:	383fe11e 	bne	r7,zero,80b7d0 <__pack_d+0xdc>
  80b84c:	01004004 	movi	r4,256
  80b850:	4104703a 	and	r2,r8,r4
  80b854:	10c4b03a 	or	r2,r2,r3
  80b858:	103fe326 	beq	r2,zero,80b7e8 <__pack_d+0xf4>
  80b85c:	3005883a 	mov	r2,r6
  80b860:	003fdc06 	br	80b7d4 <__pack_d+0xe0>
  80b864:	000d883a 	mov	r6,zero
  80b868:	000f883a 	mov	r7,zero
  80b86c:	0201ffc4 	movi	r8,2047
  80b870:	003fb406 	br	80b744 <__pack_d+0x50>
  80b874:	0005883a 	mov	r2,zero
  80b878:	00c00234 	movhi	r3,8
  80b87c:	408cb03a 	or	r6,r8,r2
  80b880:	48ceb03a 	or	r7,r9,r3
  80b884:	013fffc4 	movi	r4,-1
  80b888:	01400434 	movhi	r5,16
  80b88c:	297fffc4 	addi	r5,r5,-1
  80b890:	3104703a 	and	r2,r6,r4
  80b894:	3946703a 	and	r3,r7,r5
  80b898:	100d883a 	mov	r6,r2
  80b89c:	180f883a 	mov	r7,r3
  80b8a0:	0201ffc4 	movi	r8,2047
  80b8a4:	003fa706 	br	80b744 <__pack_d+0x50>
  80b8a8:	1109c83a 	sub	r4,r2,r4
  80b8ac:	00800e04 	movi	r2,56
  80b8b0:	11004316 	blt	r2,r4,80b9c0 <__pack_d+0x2cc>
  80b8b4:	21fff804 	addi	r7,r4,-32
  80b8b8:	38004516 	blt	r7,zero,80b9d0 <__pack_d+0x2dc>
  80b8bc:	49d8d83a 	srl	r12,r9,r7
  80b8c0:	001b883a 	mov	r13,zero
  80b8c4:	0023883a 	mov	r17,zero
  80b8c8:	01400044 	movi	r5,1
  80b8cc:	0025883a 	mov	r18,zero
  80b8d0:	38004716 	blt	r7,zero,80b9f0 <__pack_d+0x2fc>
  80b8d4:	29d6983a 	sll	r11,r5,r7
  80b8d8:	0015883a 	mov	r10,zero
  80b8dc:	00bfffc4 	movi	r2,-1
  80b8e0:	5089883a 	add	r4,r10,r2
  80b8e4:	588b883a 	add	r5,r11,r2
  80b8e8:	228d803a 	cmpltu	r6,r4,r10
  80b8ec:	314b883a 	add	r5,r6,r5
  80b8f0:	4104703a 	and	r2,r8,r4
  80b8f4:	4946703a 	and	r3,r9,r5
  80b8f8:	10c4b03a 	or	r2,r2,r3
  80b8fc:	10000226 	beq	r2,zero,80b908 <__pack_d+0x214>
  80b900:	04400044 	movi	r17,1
  80b904:	0025883a 	mov	r18,zero
  80b908:	00803fc4 	movi	r2,255
  80b90c:	644eb03a 	or	r7,r12,r17
  80b910:	3892703a 	and	r9,r7,r2
  80b914:	00802004 	movi	r2,128
  80b918:	6c90b03a 	or	r8,r13,r18
  80b91c:	0015883a 	mov	r10,zero
  80b920:	48801626 	beq	r9,r2,80b97c <__pack_d+0x288>
  80b924:	01001fc4 	movi	r4,127
  80b928:	3905883a 	add	r2,r7,r4
  80b92c:	11cd803a 	cmpltu	r6,r2,r7
  80b930:	320d883a 	add	r6,r6,r8
  80b934:	100f883a 	mov	r7,r2
  80b938:	00840034 	movhi	r2,4096
  80b93c:	10bfffc4 	addi	r2,r2,-1
  80b940:	3011883a 	mov	r8,r6
  80b944:	0007883a 	mov	r3,zero
  80b948:	11801b36 	bltu	r2,r6,80b9b8 <__pack_d+0x2c4>
  80b94c:	4004963a 	slli	r2,r8,24
  80b950:	3808d23a 	srli	r4,r7,8
  80b954:	400ad23a 	srli	r5,r8,8
  80b958:	1813883a 	mov	r9,r3
  80b95c:	1108b03a 	or	r4,r2,r4
  80b960:	00bfffc4 	movi	r2,-1
  80b964:	00c00434 	movhi	r3,16
  80b968:	18ffffc4 	addi	r3,r3,-1
  80b96c:	208c703a 	and	r6,r4,r2
  80b970:	28ce703a 	and	r7,r5,r3
  80b974:	4a01ffcc 	andi	r8,r9,2047
  80b978:	003f7206 	br	80b744 <__pack_d+0x50>
  80b97c:	503fe91e 	bne	r10,zero,80b924 <__pack_d+0x230>
  80b980:	01004004 	movi	r4,256
  80b984:	3904703a 	and	r2,r7,r4
  80b988:	0007883a 	mov	r3,zero
  80b98c:	10c4b03a 	or	r2,r2,r3
  80b990:	10000626 	beq	r2,zero,80b9ac <__pack_d+0x2b8>
  80b994:	3a45883a 	add	r2,r7,r9
  80b998:	11cd803a 	cmpltu	r6,r2,r7
  80b99c:	320d883a 	add	r6,r6,r8
  80b9a0:	100f883a 	mov	r7,r2
  80b9a4:	3011883a 	mov	r8,r6
  80b9a8:	0007883a 	mov	r3,zero
  80b9ac:	00840034 	movhi	r2,4096
  80b9b0:	10bfffc4 	addi	r2,r2,-1
  80b9b4:	123fe52e 	bgeu	r2,r8,80b94c <__pack_d+0x258>
  80b9b8:	00c00044 	movi	r3,1
  80b9bc:	003fe306 	br	80b94c <__pack_d+0x258>
  80b9c0:	0009883a 	mov	r4,zero
  80b9c4:	0013883a 	mov	r9,zero
  80b9c8:	000b883a 	mov	r5,zero
  80b9cc:	003fe406 	br	80b960 <__pack_d+0x26c>
  80b9d0:	4a47883a 	add	r3,r9,r9
  80b9d4:	008007c4 	movi	r2,31
  80b9d8:	1105c83a 	sub	r2,r2,r4
  80b9dc:	1886983a 	sll	r3,r3,r2
  80b9e0:	4118d83a 	srl	r12,r8,r4
  80b9e4:	491ad83a 	srl	r13,r9,r4
  80b9e8:	1b18b03a 	or	r12,r3,r12
  80b9ec:	003fb506 	br	80b8c4 <__pack_d+0x1d0>
  80b9f0:	2806d07a 	srli	r3,r5,1
  80b9f4:	008007c4 	movi	r2,31
  80b9f8:	1105c83a 	sub	r2,r2,r4
  80b9fc:	1896d83a 	srl	r11,r3,r2
  80ba00:	2914983a 	sll	r10,r5,r4
  80ba04:	003fb506 	br	80b8dc <__pack_d+0x1e8>

0080ba08 <__unpack_d>:
  80ba08:	20c00117 	ldw	r3,4(r4)
  80ba0c:	22400017 	ldw	r9,0(r4)
  80ba10:	00800434 	movhi	r2,16
  80ba14:	10bfffc4 	addi	r2,r2,-1
  80ba18:	1808d53a 	srli	r4,r3,20
  80ba1c:	180cd7fa 	srli	r6,r3,31
  80ba20:	1894703a 	and	r10,r3,r2
  80ba24:	2201ffcc 	andi	r8,r4,2047
  80ba28:	281b883a 	mov	r13,r5
  80ba2c:	4817883a 	mov	r11,r9
  80ba30:	29800115 	stw	r6,4(r5)
  80ba34:	5019883a 	mov	r12,r10
  80ba38:	40001e1e 	bne	r8,zero,80bab4 <__unpack_d+0xac>
  80ba3c:	4a84b03a 	or	r2,r9,r10
  80ba40:	10001926 	beq	r2,zero,80baa8 <__unpack_d+0xa0>
  80ba44:	4804d63a 	srli	r2,r9,24
  80ba48:	500c923a 	slli	r6,r10,8
  80ba4c:	013f0084 	movi	r4,-1022
  80ba50:	00c40034 	movhi	r3,4096
  80ba54:	18ffffc4 	addi	r3,r3,-1
  80ba58:	118cb03a 	or	r6,r2,r6
  80ba5c:	008000c4 	movi	r2,3
  80ba60:	480a923a 	slli	r5,r9,8
  80ba64:	68800015 	stw	r2,0(r13)
  80ba68:	69000215 	stw	r4,8(r13)
  80ba6c:	19800b36 	bltu	r3,r6,80ba9c <__unpack_d+0x94>
  80ba70:	200f883a 	mov	r7,r4
  80ba74:	1811883a 	mov	r8,r3
  80ba78:	2945883a 	add	r2,r5,r5
  80ba7c:	1149803a 	cmpltu	r4,r2,r5
  80ba80:	3187883a 	add	r3,r6,r6
  80ba84:	20c9883a 	add	r4,r4,r3
  80ba88:	100b883a 	mov	r5,r2
  80ba8c:	200d883a 	mov	r6,r4
  80ba90:	39ffffc4 	addi	r7,r7,-1
  80ba94:	413ff82e 	bgeu	r8,r4,80ba78 <__unpack_d+0x70>
  80ba98:	69c00215 	stw	r7,8(r13)
  80ba9c:	69800415 	stw	r6,16(r13)
  80baa0:	69400315 	stw	r5,12(r13)
  80baa4:	f800283a 	ret
  80baa8:	00800084 	movi	r2,2
  80baac:	28800015 	stw	r2,0(r5)
  80bab0:	f800283a 	ret
  80bab4:	0081ffc4 	movi	r2,2047
  80bab8:	40800f26 	beq	r8,r2,80baf8 <__unpack_d+0xf0>
  80babc:	480cd63a 	srli	r6,r9,24
  80bac0:	5006923a 	slli	r3,r10,8
  80bac4:	4804923a 	slli	r2,r9,8
  80bac8:	0009883a 	mov	r4,zero
  80bacc:	30c6b03a 	or	r3,r6,r3
  80bad0:	01440034 	movhi	r5,4096
  80bad4:	110cb03a 	or	r6,r2,r4
  80bad8:	423f0044 	addi	r8,r8,-1023
  80badc:	194eb03a 	or	r7,r3,r5
  80bae0:	008000c4 	movi	r2,3
  80bae4:	69c00415 	stw	r7,16(r13)
  80bae8:	6a000215 	stw	r8,8(r13)
  80baec:	68800015 	stw	r2,0(r13)
  80baf0:	69800315 	stw	r6,12(r13)
  80baf4:	f800283a 	ret
  80baf8:	4a84b03a 	or	r2,r9,r10
  80bafc:	1000031e 	bne	r2,zero,80bb0c <__unpack_d+0x104>
  80bb00:	00800104 	movi	r2,4
  80bb04:	28800015 	stw	r2,0(r5)
  80bb08:	f800283a 	ret
  80bb0c:	0009883a 	mov	r4,zero
  80bb10:	01400234 	movhi	r5,8
  80bb14:	4904703a 	and	r2,r9,r4
  80bb18:	5146703a 	and	r3,r10,r5
  80bb1c:	10c4b03a 	or	r2,r2,r3
  80bb20:	10000526 	beq	r2,zero,80bb38 <__unpack_d+0x130>
  80bb24:	00800044 	movi	r2,1
  80bb28:	68800015 	stw	r2,0(r13)
  80bb2c:	6b000415 	stw	r12,16(r13)
  80bb30:	6ac00315 	stw	r11,12(r13)
  80bb34:	f800283a 	ret
  80bb38:	68000015 	stw	zero,0(r13)
  80bb3c:	003ffb06 	br	80bb2c <__unpack_d+0x124>

0080bb40 <_atoi_r>:
  80bb40:	000d883a 	mov	r6,zero
  80bb44:	01c00284 	movi	r7,10
  80bb48:	080d7c41 	jmpi	80d7c4 <_strtol_r>

0080bb4c <atoi>:
  80bb4c:	000b883a 	mov	r5,zero
  80bb50:	01800284 	movi	r6,10
  80bb54:	080da081 	jmpi	80da08 <strtol>

0080bb58 <free>:
  80bb58:	008020b4 	movhi	r2,130
  80bb5c:	108a6b04 	addi	r2,r2,10668
  80bb60:	200b883a 	mov	r5,r4
  80bb64:	11000017 	ldw	r4,0(r2)
  80bb68:	08118781 	jmpi	811878 <_free_r>

0080bb6c <malloc>:
  80bb6c:	008020b4 	movhi	r2,130
  80bb70:	108a6b04 	addi	r2,r2,10668
  80bb74:	200b883a 	mov	r5,r4
  80bb78:	11000017 	ldw	r4,0(r2)
  80bb7c:	080bb801 	jmpi	80bb80 <_malloc_r>

0080bb80 <_malloc_r>:
  80bb80:	defff604 	addi	sp,sp,-40
  80bb84:	28c002c4 	addi	r3,r5,11
  80bb88:	00800584 	movi	r2,22
  80bb8c:	dc800215 	stw	r18,8(sp)
  80bb90:	dfc00915 	stw	ra,36(sp)
  80bb94:	df000815 	stw	fp,32(sp)
  80bb98:	ddc00715 	stw	r23,28(sp)
  80bb9c:	dd800615 	stw	r22,24(sp)
  80bba0:	dd400515 	stw	r21,20(sp)
  80bba4:	dd000415 	stw	r20,16(sp)
  80bba8:	dcc00315 	stw	r19,12(sp)
  80bbac:	dc400115 	stw	r17,4(sp)
  80bbb0:	dc000015 	stw	r16,0(sp)
  80bbb4:	2025883a 	mov	r18,r4
  80bbb8:	10c01236 	bltu	r2,r3,80bc04 <_malloc_r+0x84>
  80bbbc:	04400404 	movi	r17,16
  80bbc0:	8940142e 	bgeu	r17,r5,80bc14 <_malloc_r+0x94>
  80bbc4:	00800304 	movi	r2,12
  80bbc8:	0007883a 	mov	r3,zero
  80bbcc:	90800015 	stw	r2,0(r18)
  80bbd0:	1805883a 	mov	r2,r3
  80bbd4:	dfc00917 	ldw	ra,36(sp)
  80bbd8:	df000817 	ldw	fp,32(sp)
  80bbdc:	ddc00717 	ldw	r23,28(sp)
  80bbe0:	dd800617 	ldw	r22,24(sp)
  80bbe4:	dd400517 	ldw	r21,20(sp)
  80bbe8:	dd000417 	ldw	r20,16(sp)
  80bbec:	dcc00317 	ldw	r19,12(sp)
  80bbf0:	dc800217 	ldw	r18,8(sp)
  80bbf4:	dc400117 	ldw	r17,4(sp)
  80bbf8:	dc000017 	ldw	r16,0(sp)
  80bbfc:	dec00a04 	addi	sp,sp,40
  80bc00:	f800283a 	ret
  80bc04:	00bffe04 	movi	r2,-8
  80bc08:	18a2703a 	and	r17,r3,r2
  80bc0c:	883fed16 	blt	r17,zero,80bbc4 <_malloc_r+0x44>
  80bc10:	897fec36 	bltu	r17,r5,80bbc4 <_malloc_r+0x44>
  80bc14:	9009883a 	mov	r4,r18
  80bc18:	08159dc0 	call	8159dc <__malloc_lock>
  80bc1c:	00807dc4 	movi	r2,503
  80bc20:	14402b2e 	bgeu	r2,r17,80bcd0 <_malloc_r+0x150>
  80bc24:	8806d27a 	srli	r3,r17,9
  80bc28:	18003f1e 	bne	r3,zero,80bd28 <_malloc_r+0x1a8>
  80bc2c:	880cd0fa 	srli	r6,r17,3
  80bc30:	300490fa 	slli	r2,r6,3
  80bc34:	02c020b4 	movhi	r11,130
  80bc38:	5ac37304 	addi	r11,r11,3532
  80bc3c:	12cb883a 	add	r5,r2,r11
  80bc40:	2c000317 	ldw	r16,12(r5)
  80bc44:	580f883a 	mov	r7,r11
  80bc48:	2c00041e 	bne	r5,r16,80bc5c <_malloc_r+0xdc>
  80bc4c:	00000a06 	br	80bc78 <_malloc_r+0xf8>
  80bc50:	1800860e 	bge	r3,zero,80be6c <_malloc_r+0x2ec>
  80bc54:	84000317 	ldw	r16,12(r16)
  80bc58:	2c000726 	beq	r5,r16,80bc78 <_malloc_r+0xf8>
  80bc5c:	80800117 	ldw	r2,4(r16)
  80bc60:	00ffff04 	movi	r3,-4
  80bc64:	10c8703a 	and	r4,r2,r3
  80bc68:	2447c83a 	sub	r3,r4,r17
  80bc6c:	008003c4 	movi	r2,15
  80bc70:	10fff70e 	bge	r2,r3,80bc50 <_malloc_r+0xd0>
  80bc74:	31bfffc4 	addi	r6,r6,-1
  80bc78:	32400044 	addi	r9,r6,1
  80bc7c:	028020b4 	movhi	r10,130
  80bc80:	52837504 	addi	r10,r10,3540
  80bc84:	54000217 	ldw	r16,8(r10)
  80bc88:	8280a026 	beq	r16,r10,80bf0c <_malloc_r+0x38c>
  80bc8c:	80800117 	ldw	r2,4(r16)
  80bc90:	00ffff04 	movi	r3,-4
  80bc94:	10ca703a 	and	r5,r2,r3
  80bc98:	2c4dc83a 	sub	r6,r5,r17
  80bc9c:	008003c4 	movi	r2,15
  80bca0:	11808316 	blt	r2,r6,80beb0 <_malloc_r+0x330>
  80bca4:	52800315 	stw	r10,12(r10)
  80bca8:	52800215 	stw	r10,8(r10)
  80bcac:	30002916 	blt	r6,zero,80bd54 <_malloc_r+0x1d4>
  80bcb0:	8147883a 	add	r3,r16,r5
  80bcb4:	18800117 	ldw	r2,4(r3)
  80bcb8:	9009883a 	mov	r4,r18
  80bcbc:	10800054 	ori	r2,r2,1
  80bcc0:	18800115 	stw	r2,4(r3)
  80bcc4:	08159fc0 	call	8159fc <__malloc_unlock>
  80bcc8:	80c00204 	addi	r3,r16,8
  80bccc:	003fc006 	br	80bbd0 <_malloc_r+0x50>
  80bcd0:	02c020b4 	movhi	r11,130
  80bcd4:	5ac37304 	addi	r11,r11,3532
  80bcd8:	8ac5883a 	add	r2,r17,r11
  80bcdc:	14000317 	ldw	r16,12(r2)
  80bce0:	580f883a 	mov	r7,r11
  80bce4:	8806d0fa 	srli	r3,r17,3
  80bce8:	14006c26 	beq	r2,r16,80be9c <_malloc_r+0x31c>
  80bcec:	80c00117 	ldw	r3,4(r16)
  80bcf0:	00bfff04 	movi	r2,-4
  80bcf4:	81800317 	ldw	r6,12(r16)
  80bcf8:	1886703a 	and	r3,r3,r2
  80bcfc:	80c7883a 	add	r3,r16,r3
  80bd00:	18800117 	ldw	r2,4(r3)
  80bd04:	81400217 	ldw	r5,8(r16)
  80bd08:	9009883a 	mov	r4,r18
  80bd0c:	10800054 	ori	r2,r2,1
  80bd10:	18800115 	stw	r2,4(r3)
  80bd14:	31400215 	stw	r5,8(r6)
  80bd18:	29800315 	stw	r6,12(r5)
  80bd1c:	08159fc0 	call	8159fc <__malloc_unlock>
  80bd20:	80c00204 	addi	r3,r16,8
  80bd24:	003faa06 	br	80bbd0 <_malloc_r+0x50>
  80bd28:	00800104 	movi	r2,4
  80bd2c:	10c0052e 	bgeu	r2,r3,80bd44 <_malloc_r+0x1c4>
  80bd30:	00800504 	movi	r2,20
  80bd34:	10c07836 	bltu	r2,r3,80bf18 <_malloc_r+0x398>
  80bd38:	198016c4 	addi	r6,r3,91
  80bd3c:	300490fa 	slli	r2,r6,3
  80bd40:	003fbc06 	br	80bc34 <_malloc_r+0xb4>
  80bd44:	8804d1ba 	srli	r2,r17,6
  80bd48:	11800e04 	addi	r6,r2,56
  80bd4c:	300490fa 	slli	r2,r6,3
  80bd50:	003fb806 	br	80bc34 <_malloc_r+0xb4>
  80bd54:	00807fc4 	movi	r2,511
  80bd58:	1140bb36 	bltu	r2,r5,80c048 <_malloc_r+0x4c8>
  80bd5c:	2806d0fa 	srli	r3,r5,3
  80bd60:	573ffe04 	addi	fp,r10,-8
  80bd64:	00800044 	movi	r2,1
  80bd68:	180890fa 	slli	r4,r3,3
  80bd6c:	1807d0ba 	srai	r3,r3,2
  80bd70:	e1c00117 	ldw	r7,4(fp)
  80bd74:	5909883a 	add	r4,r11,r4
  80bd78:	21400217 	ldw	r5,8(r4)
  80bd7c:	10c4983a 	sll	r2,r2,r3
  80bd80:	81000315 	stw	r4,12(r16)
  80bd84:	81400215 	stw	r5,8(r16)
  80bd88:	388eb03a 	or	r7,r7,r2
  80bd8c:	2c000315 	stw	r16,12(r5)
  80bd90:	24000215 	stw	r16,8(r4)
  80bd94:	e1c00115 	stw	r7,4(fp)
  80bd98:	4807883a 	mov	r3,r9
  80bd9c:	4800cd16 	blt	r9,zero,80c0d4 <_malloc_r+0x554>
  80bda0:	1807d0ba 	srai	r3,r3,2
  80bda4:	00800044 	movi	r2,1
  80bda8:	10c8983a 	sll	r4,r2,r3
  80bdac:	39004436 	bltu	r7,r4,80bec0 <_malloc_r+0x340>
  80bdb0:	21c4703a 	and	r2,r4,r7
  80bdb4:	10000a1e 	bne	r2,zero,80bde0 <_malloc_r+0x260>
  80bdb8:	2109883a 	add	r4,r4,r4
  80bdbc:	00bfff04 	movi	r2,-4
  80bdc0:	4884703a 	and	r2,r9,r2
  80bdc4:	3906703a 	and	r3,r7,r4
  80bdc8:	12400104 	addi	r9,r2,4
  80bdcc:	1800041e 	bne	r3,zero,80bde0 <_malloc_r+0x260>
  80bdd0:	2109883a 	add	r4,r4,r4
  80bdd4:	3904703a 	and	r2,r7,r4
  80bdd8:	4a400104 	addi	r9,r9,4
  80bddc:	103ffc26 	beq	r2,zero,80bdd0 <_malloc_r+0x250>
  80bde0:	480490fa 	slli	r2,r9,3
  80bde4:	4819883a 	mov	r12,r9
  80bde8:	023fff04 	movi	r8,-4
  80bdec:	589b883a 	add	r13,r11,r2
  80bdf0:	6807883a 	mov	r3,r13
  80bdf4:	014003c4 	movi	r5,15
  80bdf8:	1c000317 	ldw	r16,12(r3)
  80bdfc:	1c00041e 	bne	r3,r16,80be10 <_malloc_r+0x290>
  80be00:	0000a706 	br	80c0a0 <_malloc_r+0x520>
  80be04:	3000ab0e 	bge	r6,zero,80c0b4 <_malloc_r+0x534>
  80be08:	84000317 	ldw	r16,12(r16)
  80be0c:	1c00a426 	beq	r3,r16,80c0a0 <_malloc_r+0x520>
  80be10:	80800117 	ldw	r2,4(r16)
  80be14:	1204703a 	and	r2,r2,r8
  80be18:	144dc83a 	sub	r6,r2,r17
  80be1c:	29bff90e 	bge	r5,r6,80be04 <_malloc_r+0x284>
  80be20:	81000317 	ldw	r4,12(r16)
  80be24:	80c00217 	ldw	r3,8(r16)
  80be28:	89400054 	ori	r5,r17,1
  80be2c:	8445883a 	add	r2,r16,r17
  80be30:	20c00215 	stw	r3,8(r4)
  80be34:	19000315 	stw	r4,12(r3)
  80be38:	81400115 	stw	r5,4(r16)
  80be3c:	1187883a 	add	r3,r2,r6
  80be40:	31000054 	ori	r4,r6,1
  80be44:	50800315 	stw	r2,12(r10)
  80be48:	50800215 	stw	r2,8(r10)
  80be4c:	19800015 	stw	r6,0(r3)
  80be50:	11000115 	stw	r4,4(r2)
  80be54:	12800215 	stw	r10,8(r2)
  80be58:	12800315 	stw	r10,12(r2)
  80be5c:	9009883a 	mov	r4,r18
  80be60:	08159fc0 	call	8159fc <__malloc_unlock>
  80be64:	80c00204 	addi	r3,r16,8
  80be68:	003f5906 	br	80bbd0 <_malloc_r+0x50>
  80be6c:	8109883a 	add	r4,r16,r4
  80be70:	20800117 	ldw	r2,4(r4)
  80be74:	80c00217 	ldw	r3,8(r16)
  80be78:	81400317 	ldw	r5,12(r16)
  80be7c:	10800054 	ori	r2,r2,1
  80be80:	20800115 	stw	r2,4(r4)
  80be84:	28c00215 	stw	r3,8(r5)
  80be88:	19400315 	stw	r5,12(r3)
  80be8c:	9009883a 	mov	r4,r18
  80be90:	08159fc0 	call	8159fc <__malloc_unlock>
  80be94:	80c00204 	addi	r3,r16,8
  80be98:	003f4d06 	br	80bbd0 <_malloc_r+0x50>
  80be9c:	80800204 	addi	r2,r16,8
  80bea0:	14000317 	ldw	r16,12(r2)
  80bea4:	143f911e 	bne	r2,r16,80bcec <_malloc_r+0x16c>
  80bea8:	1a400084 	addi	r9,r3,2
  80beac:	003f7306 	br	80bc7c <_malloc_r+0xfc>
  80beb0:	88c00054 	ori	r3,r17,1
  80beb4:	8445883a 	add	r2,r16,r17
  80beb8:	80c00115 	stw	r3,4(r16)
  80bebc:	003fdf06 	br	80be3c <_malloc_r+0x2bc>
  80bec0:	e4000217 	ldw	r16,8(fp)
  80bec4:	00bfff04 	movi	r2,-4
  80bec8:	80c00117 	ldw	r3,4(r16)
  80becc:	802d883a 	mov	r22,r16
  80bed0:	18aa703a 	and	r21,r3,r2
  80bed4:	ac401636 	bltu	r21,r17,80bf30 <_malloc_r+0x3b0>
  80bed8:	ac49c83a 	sub	r4,r21,r17
  80bedc:	008003c4 	movi	r2,15
  80bee0:	1100130e 	bge	r2,r4,80bf30 <_malloc_r+0x3b0>
  80bee4:	88800054 	ori	r2,r17,1
  80bee8:	8447883a 	add	r3,r16,r17
  80beec:	80800115 	stw	r2,4(r16)
  80bef0:	20800054 	ori	r2,r4,1
  80bef4:	18800115 	stw	r2,4(r3)
  80bef8:	e0c00215 	stw	r3,8(fp)
  80befc:	9009883a 	mov	r4,r18
  80bf00:	08159fc0 	call	8159fc <__malloc_unlock>
  80bf04:	80c00204 	addi	r3,r16,8
  80bf08:	003f3106 	br	80bbd0 <_malloc_r+0x50>
  80bf0c:	39c00117 	ldw	r7,4(r7)
  80bf10:	573ffe04 	addi	fp,r10,-8
  80bf14:	003fa006 	br	80bd98 <_malloc_r+0x218>
  80bf18:	00801504 	movi	r2,84
  80bf1c:	10c06736 	bltu	r2,r3,80c0bc <_malloc_r+0x53c>
  80bf20:	8804d33a 	srli	r2,r17,12
  80bf24:	11801b84 	addi	r6,r2,110
  80bf28:	300490fa 	slli	r2,r6,3
  80bf2c:	003f4106 	br	80bc34 <_malloc_r+0xb4>
  80bf30:	d0a75d17 	ldw	r2,-25228(gp)
  80bf34:	d0e00117 	ldw	r3,-32764(gp)
  80bf38:	053fffc4 	movi	r20,-1
  80bf3c:	10800404 	addi	r2,r2,16
  80bf40:	88a7883a 	add	r19,r17,r2
  80bf44:	1d000326 	beq	r3,r20,80bf54 <_malloc_r+0x3d4>
  80bf48:	98c3ffc4 	addi	r3,r19,4095
  80bf4c:	00bc0004 	movi	r2,-4096
  80bf50:	18a6703a 	and	r19,r3,r2
  80bf54:	9009883a 	mov	r4,r18
  80bf58:	980b883a 	mov	r5,r19
  80bf5c:	080cb340 	call	80cb34 <_sbrk_r>
  80bf60:	1009883a 	mov	r4,r2
  80bf64:	15000426 	beq	r2,r20,80bf78 <_malloc_r+0x3f8>
  80bf68:	854b883a 	add	r5,r16,r21
  80bf6c:	1029883a 	mov	r20,r2
  80bf70:	11405a2e 	bgeu	r2,r5,80c0dc <_malloc_r+0x55c>
  80bf74:	87000c26 	beq	r16,fp,80bfa8 <_malloc_r+0x428>
  80bf78:	e4000217 	ldw	r16,8(fp)
  80bf7c:	80c00117 	ldw	r3,4(r16)
  80bf80:	00bfff04 	movi	r2,-4
  80bf84:	1884703a 	and	r2,r3,r2
  80bf88:	14400336 	bltu	r2,r17,80bf98 <_malloc_r+0x418>
  80bf8c:	1449c83a 	sub	r4,r2,r17
  80bf90:	008003c4 	movi	r2,15
  80bf94:	113fd316 	blt	r2,r4,80bee4 <_malloc_r+0x364>
  80bf98:	9009883a 	mov	r4,r18
  80bf9c:	08159fc0 	call	8159fc <__malloc_unlock>
  80bfa0:	0007883a 	mov	r3,zero
  80bfa4:	003f0a06 	br	80bbd0 <_malloc_r+0x50>
  80bfa8:	05c020b4 	movhi	r23,130
  80bfac:	bdd1df04 	addi	r23,r23,18300
  80bfb0:	b8800017 	ldw	r2,0(r23)
  80bfb4:	988d883a 	add	r6,r19,r2
  80bfb8:	b9800015 	stw	r6,0(r23)
  80bfbc:	d0e00117 	ldw	r3,-32764(gp)
  80bfc0:	00bfffc4 	movi	r2,-1
  80bfc4:	18808e26 	beq	r3,r2,80c200 <_malloc_r+0x680>
  80bfc8:	2145c83a 	sub	r2,r4,r5
  80bfcc:	3085883a 	add	r2,r6,r2
  80bfd0:	b8800015 	stw	r2,0(r23)
  80bfd4:	20c001cc 	andi	r3,r4,7
  80bfd8:	18005f1e 	bne	r3,zero,80c158 <_malloc_r+0x5d8>
  80bfdc:	000b883a 	mov	r5,zero
  80bfe0:	a4c5883a 	add	r2,r20,r19
  80bfe4:	1083ffcc 	andi	r2,r2,4095
  80bfe8:	00c40004 	movi	r3,4096
  80bfec:	1887c83a 	sub	r3,r3,r2
  80bff0:	28e7883a 	add	r19,r5,r3
  80bff4:	9009883a 	mov	r4,r18
  80bff8:	980b883a 	mov	r5,r19
  80bffc:	080cb340 	call	80cb34 <_sbrk_r>
  80c000:	1007883a 	mov	r3,r2
  80c004:	00bfffc4 	movi	r2,-1
  80c008:	18807a26 	beq	r3,r2,80c1f4 <_malloc_r+0x674>
  80c00c:	1d05c83a 	sub	r2,r3,r20
  80c010:	9885883a 	add	r2,r19,r2
  80c014:	10c00054 	ori	r3,r2,1
  80c018:	b8800017 	ldw	r2,0(r23)
  80c01c:	a021883a 	mov	r16,r20
  80c020:	a0c00115 	stw	r3,4(r20)
  80c024:	9885883a 	add	r2,r19,r2
  80c028:	b8800015 	stw	r2,0(r23)
  80c02c:	e5000215 	stw	r20,8(fp)
  80c030:	b7003626 	beq	r22,fp,80c10c <_malloc_r+0x58c>
  80c034:	018003c4 	movi	r6,15
  80c038:	35404b36 	bltu	r6,r21,80c168 <_malloc_r+0x5e8>
  80c03c:	00800044 	movi	r2,1
  80c040:	a0800115 	stw	r2,4(r20)
  80c044:	003fcd06 	br	80bf7c <_malloc_r+0x3fc>
  80c048:	2808d27a 	srli	r4,r5,9
  80c04c:	2000371e 	bne	r4,zero,80c12c <_malloc_r+0x5ac>
  80c050:	2808d0fa 	srli	r4,r5,3
  80c054:	200690fa 	slli	r3,r4,3
  80c058:	1ad1883a 	add	r8,r3,r11
  80c05c:	41800217 	ldw	r6,8(r8)
  80c060:	41805b26 	beq	r8,r6,80c1d0 <_malloc_r+0x650>
  80c064:	30800117 	ldw	r2,4(r6)
  80c068:	00ffff04 	movi	r3,-4
  80c06c:	10c4703a 	and	r2,r2,r3
  80c070:	2880022e 	bgeu	r5,r2,80c07c <_malloc_r+0x4fc>
  80c074:	31800217 	ldw	r6,8(r6)
  80c078:	41bffa1e 	bne	r8,r6,80c064 <_malloc_r+0x4e4>
  80c07c:	32000317 	ldw	r8,12(r6)
  80c080:	39c00117 	ldw	r7,4(r7)
  80c084:	82000315 	stw	r8,12(r16)
  80c088:	81800215 	stw	r6,8(r16)
  80c08c:	070020b4 	movhi	fp,130
  80c090:	e7037304 	addi	fp,fp,3532
  80c094:	34000315 	stw	r16,12(r6)
  80c098:	44000215 	stw	r16,8(r8)
  80c09c:	003f3e06 	br	80bd98 <_malloc_r+0x218>
  80c0a0:	63000044 	addi	r12,r12,1
  80c0a4:	608000cc 	andi	r2,r12,3
  80c0a8:	10005d26 	beq	r2,zero,80c220 <_malloc_r+0x6a0>
  80c0ac:	18c00204 	addi	r3,r3,8
  80c0b0:	003f5106 	br	80bdf8 <_malloc_r+0x278>
  80c0b4:	8089883a 	add	r4,r16,r2
  80c0b8:	003f6d06 	br	80be70 <_malloc_r+0x2f0>
  80c0bc:	00805504 	movi	r2,340
  80c0c0:	10c02036 	bltu	r2,r3,80c144 <_malloc_r+0x5c4>
  80c0c4:	8804d3fa 	srli	r2,r17,15
  80c0c8:	11801dc4 	addi	r6,r2,119
  80c0cc:	300490fa 	slli	r2,r6,3
  80c0d0:	003ed806 	br	80bc34 <_malloc_r+0xb4>
  80c0d4:	48c000c4 	addi	r3,r9,3
  80c0d8:	003f3106 	br	80bda0 <_malloc_r+0x220>
  80c0dc:	05c020b4 	movhi	r23,130
  80c0e0:	bdd1df04 	addi	r23,r23,18300
  80c0e4:	b8800017 	ldw	r2,0(r23)
  80c0e8:	988d883a 	add	r6,r19,r2
  80c0ec:	b9800015 	stw	r6,0(r23)
  80c0f0:	293fb21e 	bne	r5,r4,80bfbc <_malloc_r+0x43c>
  80c0f4:	2083ffcc 	andi	r2,r4,4095
  80c0f8:	103fb01e 	bne	r2,zero,80bfbc <_malloc_r+0x43c>
  80c0fc:	e4000217 	ldw	r16,8(fp)
  80c100:	9d45883a 	add	r2,r19,r21
  80c104:	10800054 	ori	r2,r2,1
  80c108:	80800115 	stw	r2,4(r16)
  80c10c:	b8c00017 	ldw	r3,0(r23)
  80c110:	d0a75e17 	ldw	r2,-25224(gp)
  80c114:	10c0012e 	bgeu	r2,r3,80c11c <_malloc_r+0x59c>
  80c118:	d0e75e15 	stw	r3,-25224(gp)
  80c11c:	d0a75f17 	ldw	r2,-25220(gp)
  80c120:	10ff962e 	bgeu	r2,r3,80bf7c <_malloc_r+0x3fc>
  80c124:	d0e75f15 	stw	r3,-25220(gp)
  80c128:	003f9406 	br	80bf7c <_malloc_r+0x3fc>
  80c12c:	00800104 	movi	r2,4
  80c130:	11001e36 	bltu	r2,r4,80c1ac <_malloc_r+0x62c>
  80c134:	2804d1ba 	srli	r2,r5,6
  80c138:	11000e04 	addi	r4,r2,56
  80c13c:	200690fa 	slli	r3,r4,3
  80c140:	003fc506 	br	80c058 <_malloc_r+0x4d8>
  80c144:	00815504 	movi	r2,1364
  80c148:	10c01d2e 	bgeu	r2,r3,80c1c0 <_malloc_r+0x640>
  80c14c:	01801f84 	movi	r6,126
  80c150:	0080fc04 	movi	r2,1008
  80c154:	003eb706 	br	80bc34 <_malloc_r+0xb4>
  80c158:	00800204 	movi	r2,8
  80c15c:	10cbc83a 	sub	r5,r2,r3
  80c160:	2169883a 	add	r20,r4,r5
  80c164:	003f9e06 	br	80bfe0 <_malloc_r+0x460>
  80c168:	00bffe04 	movi	r2,-8
  80c16c:	a93ffd04 	addi	r4,r21,-12
  80c170:	2088703a 	and	r4,r4,r2
  80c174:	b10b883a 	add	r5,r22,r4
  80c178:	00c00144 	movi	r3,5
  80c17c:	28c00215 	stw	r3,8(r5)
  80c180:	28c00115 	stw	r3,4(r5)
  80c184:	b0800117 	ldw	r2,4(r22)
  80c188:	1080004c 	andi	r2,r2,1
  80c18c:	2084b03a 	or	r2,r4,r2
  80c190:	b0800115 	stw	r2,4(r22)
  80c194:	313fdd2e 	bgeu	r6,r4,80c10c <_malloc_r+0x58c>
  80c198:	b1400204 	addi	r5,r22,8
  80c19c:	9009883a 	mov	r4,r18
  80c1a0:	08118780 	call	811878 <_free_r>
  80c1a4:	e4000217 	ldw	r16,8(fp)
  80c1a8:	003fd806 	br	80c10c <_malloc_r+0x58c>
  80c1ac:	00800504 	movi	r2,20
  80c1b0:	11001536 	bltu	r2,r4,80c208 <_malloc_r+0x688>
  80c1b4:	210016c4 	addi	r4,r4,91
  80c1b8:	200690fa 	slli	r3,r4,3
  80c1bc:	003fa606 	br	80c058 <_malloc_r+0x4d8>
  80c1c0:	8804d4ba 	srli	r2,r17,18
  80c1c4:	11801f04 	addi	r6,r2,124
  80c1c8:	300490fa 	slli	r2,r6,3
  80c1cc:	003e9906 	br	80bc34 <_malloc_r+0xb4>
  80c1d0:	2009d0ba 	srai	r4,r4,2
  80c1d4:	014020b4 	movhi	r5,130
  80c1d8:	29437304 	addi	r5,r5,3532
  80c1dc:	00c00044 	movi	r3,1
  80c1e0:	28800117 	ldw	r2,4(r5)
  80c1e4:	1906983a 	sll	r3,r3,r4
  80c1e8:	10c4b03a 	or	r2,r2,r3
  80c1ec:	28800115 	stw	r2,4(r5)
  80c1f0:	003fa306 	br	80c080 <_malloc_r+0x500>
  80c1f4:	0027883a 	mov	r19,zero
  80c1f8:	00c00044 	movi	r3,1
  80c1fc:	003f8606 	br	80c018 <_malloc_r+0x498>
  80c200:	d1200115 	stw	r4,-32764(gp)
  80c204:	003f7306 	br	80bfd4 <_malloc_r+0x454>
  80c208:	00801504 	movi	r2,84
  80c20c:	11001936 	bltu	r2,r4,80c274 <_malloc_r+0x6f4>
  80c210:	2804d33a 	srli	r2,r5,12
  80c214:	11001b84 	addi	r4,r2,110
  80c218:	200690fa 	slli	r3,r4,3
  80c21c:	003f8e06 	br	80c058 <_malloc_r+0x4d8>
  80c220:	480b883a 	mov	r5,r9
  80c224:	6807883a 	mov	r3,r13
  80c228:	288000cc 	andi	r2,r5,3
  80c22c:	18fffe04 	addi	r3,r3,-8
  80c230:	297fffc4 	addi	r5,r5,-1
  80c234:	10001526 	beq	r2,zero,80c28c <_malloc_r+0x70c>
  80c238:	18800217 	ldw	r2,8(r3)
  80c23c:	10fffa26 	beq	r2,r3,80c228 <_malloc_r+0x6a8>
  80c240:	2109883a 	add	r4,r4,r4
  80c244:	393f1e36 	bltu	r7,r4,80bec0 <_malloc_r+0x340>
  80c248:	203f1d26 	beq	r4,zero,80bec0 <_malloc_r+0x340>
  80c24c:	21c4703a 	and	r2,r4,r7
  80c250:	10000226 	beq	r2,zero,80c25c <_malloc_r+0x6dc>
  80c254:	6013883a 	mov	r9,r12
  80c258:	003ee106 	br	80bde0 <_malloc_r+0x260>
  80c25c:	2109883a 	add	r4,r4,r4
  80c260:	3904703a 	and	r2,r7,r4
  80c264:	63000104 	addi	r12,r12,4
  80c268:	103ffc26 	beq	r2,zero,80c25c <_malloc_r+0x6dc>
  80c26c:	6013883a 	mov	r9,r12
  80c270:	003edb06 	br	80bde0 <_malloc_r+0x260>
  80c274:	00805504 	movi	r2,340
  80c278:	11000836 	bltu	r2,r4,80c29c <_malloc_r+0x71c>
  80c27c:	2804d3fa 	srli	r2,r5,15
  80c280:	11001dc4 	addi	r4,r2,119
  80c284:	200690fa 	slli	r3,r4,3
  80c288:	003f7306 	br	80c058 <_malloc_r+0x4d8>
  80c28c:	0104303a 	nor	r2,zero,r4
  80c290:	388e703a 	and	r7,r7,r2
  80c294:	e1c00115 	stw	r7,4(fp)
  80c298:	003fe906 	br	80c240 <_malloc_r+0x6c0>
  80c29c:	00815504 	movi	r2,1364
  80c2a0:	1100032e 	bgeu	r2,r4,80c2b0 <_malloc_r+0x730>
  80c2a4:	01001f84 	movi	r4,126
  80c2a8:	00c0fc04 	movi	r3,1008
  80c2ac:	003f6a06 	br	80c058 <_malloc_r+0x4d8>
  80c2b0:	2804d4ba 	srli	r2,r5,18
  80c2b4:	11001f04 	addi	r4,r2,124
  80c2b8:	200690fa 	slli	r3,r4,3
  80c2bc:	003f6606 	br	80c058 <_malloc_r+0x4d8>

0080c2c0 <memcpy>:
  80c2c0:	01c003c4 	movi	r7,15
  80c2c4:	2007883a 	mov	r3,r4
  80c2c8:	3980032e 	bgeu	r7,r6,80c2d8 <memcpy+0x18>
  80c2cc:	2904b03a 	or	r2,r5,r4
  80c2d0:	108000cc 	andi	r2,r2,3
  80c2d4:	10000926 	beq	r2,zero,80c2fc <memcpy+0x3c>
  80c2d8:	30000626 	beq	r6,zero,80c2f4 <memcpy+0x34>
  80c2dc:	30cd883a 	add	r6,r6,r3
  80c2e0:	28800003 	ldbu	r2,0(r5)
  80c2e4:	29400044 	addi	r5,r5,1
  80c2e8:	18800005 	stb	r2,0(r3)
  80c2ec:	18c00044 	addi	r3,r3,1
  80c2f0:	30fffb1e 	bne	r6,r3,80c2e0 <memcpy+0x20>
  80c2f4:	2005883a 	mov	r2,r4
  80c2f8:	f800283a 	ret
  80c2fc:	3811883a 	mov	r8,r7
  80c300:	200f883a 	mov	r7,r4
  80c304:	28c00017 	ldw	r3,0(r5)
  80c308:	31bffc04 	addi	r6,r6,-16
  80c30c:	38c00015 	stw	r3,0(r7)
  80c310:	28800117 	ldw	r2,4(r5)
  80c314:	38800115 	stw	r2,4(r7)
  80c318:	28c00217 	ldw	r3,8(r5)
  80c31c:	38c00215 	stw	r3,8(r7)
  80c320:	28800317 	ldw	r2,12(r5)
  80c324:	29400404 	addi	r5,r5,16
  80c328:	38800315 	stw	r2,12(r7)
  80c32c:	39c00404 	addi	r7,r7,16
  80c330:	41bff436 	bltu	r8,r6,80c304 <memcpy+0x44>
  80c334:	008000c4 	movi	r2,3
  80c338:	1180072e 	bgeu	r2,r6,80c358 <memcpy+0x98>
  80c33c:	1007883a 	mov	r3,r2
  80c340:	28800017 	ldw	r2,0(r5)
  80c344:	31bfff04 	addi	r6,r6,-4
  80c348:	29400104 	addi	r5,r5,4
  80c34c:	38800015 	stw	r2,0(r7)
  80c350:	39c00104 	addi	r7,r7,4
  80c354:	19bffa36 	bltu	r3,r6,80c340 <memcpy+0x80>
  80c358:	3807883a 	mov	r3,r7
  80c35c:	003fde06 	br	80c2d8 <memcpy+0x18>

0080c360 <memset>:
  80c360:	008000c4 	movi	r2,3
  80c364:	29403fcc 	andi	r5,r5,255
  80c368:	2007883a 	mov	r3,r4
  80c36c:	1180022e 	bgeu	r2,r6,80c378 <memset+0x18>
  80c370:	2084703a 	and	r2,r4,r2
  80c374:	10000826 	beq	r2,zero,80c398 <memset+0x38>
  80c378:	30000526 	beq	r6,zero,80c390 <memset+0x30>
  80c37c:	2805883a 	mov	r2,r5
  80c380:	30cd883a 	add	r6,r6,r3
  80c384:	18800005 	stb	r2,0(r3)
  80c388:	18c00044 	addi	r3,r3,1
  80c38c:	19bffd1e 	bne	r3,r6,80c384 <memset+0x24>
  80c390:	2005883a 	mov	r2,r4
  80c394:	f800283a 	ret
  80c398:	2804923a 	slli	r2,r5,8
  80c39c:	020003c4 	movi	r8,15
  80c3a0:	200f883a 	mov	r7,r4
  80c3a4:	2884b03a 	or	r2,r5,r2
  80c3a8:	1006943a 	slli	r3,r2,16
  80c3ac:	10c6b03a 	or	r3,r2,r3
  80c3b0:	41800a2e 	bgeu	r8,r6,80c3dc <memset+0x7c>
  80c3b4:	4005883a 	mov	r2,r8
  80c3b8:	31bffc04 	addi	r6,r6,-16
  80c3bc:	38c00015 	stw	r3,0(r7)
  80c3c0:	38c00115 	stw	r3,4(r7)
  80c3c4:	38c00215 	stw	r3,8(r7)
  80c3c8:	38c00315 	stw	r3,12(r7)
  80c3cc:	39c00404 	addi	r7,r7,16
  80c3d0:	11bff936 	bltu	r2,r6,80c3b8 <memset+0x58>
  80c3d4:	008000c4 	movi	r2,3
  80c3d8:	1180052e 	bgeu	r2,r6,80c3f0 <memset+0x90>
  80c3dc:	31bfff04 	addi	r6,r6,-4
  80c3e0:	008000c4 	movi	r2,3
  80c3e4:	38c00015 	stw	r3,0(r7)
  80c3e8:	39c00104 	addi	r7,r7,4
  80c3ec:	11bffb36 	bltu	r2,r6,80c3dc <memset+0x7c>
  80c3f0:	3807883a 	mov	r3,r7
  80c3f4:	003fe006 	br	80c378 <memset+0x18>

0080c3f8 <printf>:
  80c3f8:	defffb04 	addi	sp,sp,-20
  80c3fc:	dfc00115 	stw	ra,4(sp)
  80c400:	d9400215 	stw	r5,8(sp)
  80c404:	d9800315 	stw	r6,12(sp)
  80c408:	d9c00415 	stw	r7,16(sp)
  80c40c:	008020b4 	movhi	r2,130
  80c410:	108a6b04 	addi	r2,r2,10668
  80c414:	10c00017 	ldw	r3,0(r2)
  80c418:	200b883a 	mov	r5,r4
  80c41c:	d8800204 	addi	r2,sp,8
  80c420:	19000217 	ldw	r4,8(r3)
  80c424:	100d883a 	mov	r6,r2
  80c428:	d8800015 	stw	r2,0(sp)
  80c42c:	080f9300 	call	80f930 <__vfprintf_internal>
  80c430:	dfc00117 	ldw	ra,4(sp)
  80c434:	dec00504 	addi	sp,sp,20
  80c438:	f800283a 	ret

0080c43c <_printf_r>:
  80c43c:	defffc04 	addi	sp,sp,-16
  80c440:	dfc00115 	stw	ra,4(sp)
  80c444:	d9800215 	stw	r6,8(sp)
  80c448:	d9c00315 	stw	r7,12(sp)
  80c44c:	280d883a 	mov	r6,r5
  80c450:	21400217 	ldw	r5,8(r4)
  80c454:	d8c00204 	addi	r3,sp,8
  80c458:	180f883a 	mov	r7,r3
  80c45c:	d8c00015 	stw	r3,0(sp)
  80c460:	080da840 	call	80da84 <___vfprintf_internal_r>
  80c464:	dfc00117 	ldw	ra,4(sp)
  80c468:	dec00404 	addi	sp,sp,16
  80c46c:	f800283a 	ret

0080c470 <_puts_r>:
  80c470:	defff604 	addi	sp,sp,-40
  80c474:	dc400715 	stw	r17,28(sp)
  80c478:	2023883a 	mov	r17,r4
  80c47c:	2809883a 	mov	r4,r5
  80c480:	dfc00915 	stw	ra,36(sp)
  80c484:	dcc00815 	stw	r19,32(sp)
  80c488:	2827883a 	mov	r19,r5
  80c48c:	080ce500 	call	80ce50 <strlen>
  80c490:	89400217 	ldw	r5,8(r17)
  80c494:	00c020b4 	movhi	r3,130
  80c498:	18c07c04 	addi	r3,r3,496
  80c49c:	01c00044 	movi	r7,1
  80c4a0:	12000044 	addi	r8,r2,1
  80c4a4:	d8c00515 	stw	r3,20(sp)
  80c4a8:	d9c00615 	stw	r7,24(sp)
  80c4ac:	d8c00304 	addi	r3,sp,12
  80c4b0:	01c00084 	movi	r7,2
  80c4b4:	8809883a 	mov	r4,r17
  80c4b8:	d80d883a 	mov	r6,sp
  80c4bc:	d8c00015 	stw	r3,0(sp)
  80c4c0:	dcc00315 	stw	r19,12(sp)
  80c4c4:	da000215 	stw	r8,8(sp)
  80c4c8:	d9c00115 	stw	r7,4(sp)
  80c4cc:	d8800415 	stw	r2,16(sp)
  80c4d0:	0811b8c0 	call	811b8c <__sfvwrite_r>
  80c4d4:	00ffffc4 	movi	r3,-1
  80c4d8:	10000626 	beq	r2,zero,80c4f4 <_puts_r+0x84>
  80c4dc:	1805883a 	mov	r2,r3
  80c4e0:	dfc00917 	ldw	ra,36(sp)
  80c4e4:	dcc00817 	ldw	r19,32(sp)
  80c4e8:	dc400717 	ldw	r17,28(sp)
  80c4ec:	dec00a04 	addi	sp,sp,40
  80c4f0:	f800283a 	ret
  80c4f4:	00c00284 	movi	r3,10
  80c4f8:	1805883a 	mov	r2,r3
  80c4fc:	dfc00917 	ldw	ra,36(sp)
  80c500:	dcc00817 	ldw	r19,32(sp)
  80c504:	dc400717 	ldw	r17,28(sp)
  80c508:	dec00a04 	addi	sp,sp,40
  80c50c:	f800283a 	ret

0080c510 <puts>:
  80c510:	008020b4 	movhi	r2,130
  80c514:	108a6b04 	addi	r2,r2,10668
  80c518:	200b883a 	mov	r5,r4
  80c51c:	11000017 	ldw	r4,0(r2)
  80c520:	080c4701 	jmpi	80c470 <_puts_r>

0080c524 <realloc>:
  80c524:	018020b4 	movhi	r6,130
  80c528:	318a6b04 	addi	r6,r6,10668
  80c52c:	2007883a 	mov	r3,r4
  80c530:	31000017 	ldw	r4,0(r6)
  80c534:	280d883a 	mov	r6,r5
  80c538:	180b883a 	mov	r5,r3
  80c53c:	080c5401 	jmpi	80c540 <_realloc_r>

0080c540 <_realloc_r>:
  80c540:	defff404 	addi	sp,sp,-48
  80c544:	dd800815 	stw	r22,32(sp)
  80c548:	dc800415 	stw	r18,16(sp)
  80c54c:	dc400315 	stw	r17,12(sp)
  80c550:	dfc00b15 	stw	ra,44(sp)
  80c554:	df000a15 	stw	fp,40(sp)
  80c558:	ddc00915 	stw	r23,36(sp)
  80c55c:	dd400715 	stw	r21,28(sp)
  80c560:	dd000615 	stw	r20,24(sp)
  80c564:	dcc00515 	stw	r19,20(sp)
  80c568:	dc000215 	stw	r16,8(sp)
  80c56c:	2825883a 	mov	r18,r5
  80c570:	3023883a 	mov	r17,r6
  80c574:	202d883a 	mov	r22,r4
  80c578:	2800c926 	beq	r5,zero,80c8a0 <_realloc_r+0x360>
  80c57c:	08159dc0 	call	8159dc <__malloc_lock>
  80c580:	943ffe04 	addi	r16,r18,-8
  80c584:	88c002c4 	addi	r3,r17,11
  80c588:	00800584 	movi	r2,22
  80c58c:	82000117 	ldw	r8,4(r16)
  80c590:	10c01b2e 	bgeu	r2,r3,80c600 <_realloc_r+0xc0>
  80c594:	00bffe04 	movi	r2,-8
  80c598:	188e703a 	and	r7,r3,r2
  80c59c:	3839883a 	mov	fp,r7
  80c5a0:	38001a16 	blt	r7,zero,80c60c <_realloc_r+0xcc>
  80c5a4:	e4401936 	bltu	fp,r17,80c60c <_realloc_r+0xcc>
  80c5a8:	013fff04 	movi	r4,-4
  80c5ac:	4126703a 	and	r19,r8,r4
  80c5b0:	99c02616 	blt	r19,r7,80c64c <_realloc_r+0x10c>
  80c5b4:	802b883a 	mov	r21,r16
  80c5b8:	9829883a 	mov	r20,r19
  80c5bc:	84000204 	addi	r16,r16,8
  80c5c0:	a80f883a 	mov	r7,r21
  80c5c4:	a70dc83a 	sub	r6,r20,fp
  80c5c8:	008003c4 	movi	r2,15
  80c5cc:	1180c136 	bltu	r2,r6,80c8d4 <_realloc_r+0x394>
  80c5d0:	38800117 	ldw	r2,4(r7)
  80c5d4:	a549883a 	add	r4,r20,r21
  80c5d8:	1080004c 	andi	r2,r2,1
  80c5dc:	a084b03a 	or	r2,r20,r2
  80c5e0:	38800115 	stw	r2,4(r7)
  80c5e4:	20c00117 	ldw	r3,4(r4)
  80c5e8:	18c00054 	ori	r3,r3,1
  80c5ec:	20c00115 	stw	r3,4(r4)
  80c5f0:	b009883a 	mov	r4,r22
  80c5f4:	08159fc0 	call	8159fc <__malloc_unlock>
  80c5f8:	8023883a 	mov	r17,r16
  80c5fc:	00000606 	br	80c618 <_realloc_r+0xd8>
  80c600:	01c00404 	movi	r7,16
  80c604:	3839883a 	mov	fp,r7
  80c608:	e47fe72e 	bgeu	fp,r17,80c5a8 <_realloc_r+0x68>
  80c60c:	00800304 	movi	r2,12
  80c610:	0023883a 	mov	r17,zero
  80c614:	b0800015 	stw	r2,0(r22)
  80c618:	8805883a 	mov	r2,r17
  80c61c:	dfc00b17 	ldw	ra,44(sp)
  80c620:	df000a17 	ldw	fp,40(sp)
  80c624:	ddc00917 	ldw	r23,36(sp)
  80c628:	dd800817 	ldw	r22,32(sp)
  80c62c:	dd400717 	ldw	r21,28(sp)
  80c630:	dd000617 	ldw	r20,24(sp)
  80c634:	dcc00517 	ldw	r19,20(sp)
  80c638:	dc800417 	ldw	r18,16(sp)
  80c63c:	dc400317 	ldw	r17,12(sp)
  80c640:	dc000217 	ldw	r16,8(sp)
  80c644:	dec00c04 	addi	sp,sp,48
  80c648:	f800283a 	ret
  80c64c:	008020b4 	movhi	r2,130
  80c650:	10837304 	addi	r2,r2,3532
  80c654:	12400217 	ldw	r9,8(r2)
  80c658:	84cd883a 	add	r6,r16,r19
  80c65c:	802b883a 	mov	r21,r16
  80c660:	3240b926 	beq	r6,r9,80c948 <_realloc_r+0x408>
  80c664:	31400117 	ldw	r5,4(r6)
  80c668:	00bfff84 	movi	r2,-2
  80c66c:	2884703a 	and	r2,r5,r2
  80c670:	1185883a 	add	r2,r2,r6
  80c674:	10c00117 	ldw	r3,4(r2)
  80c678:	18c0004c 	andi	r3,r3,1
  80c67c:	1807003a 	cmpeq	r3,r3,zero
  80c680:	1800a326 	beq	r3,zero,80c910 <_realloc_r+0x3d0>
  80c684:	2908703a 	and	r4,r5,r4
  80c688:	9929883a 	add	r20,r19,r4
  80c68c:	a1c0a30e 	bge	r20,r7,80c91c <_realloc_r+0x3dc>
  80c690:	4080004c 	andi	r2,r8,1
  80c694:	1000551e 	bne	r2,zero,80c7ec <_realloc_r+0x2ac>
  80c698:	80800017 	ldw	r2,0(r16)
  80c69c:	80afc83a 	sub	r23,r16,r2
  80c6a0:	b8c00117 	ldw	r3,4(r23)
  80c6a4:	00bfff04 	movi	r2,-4
  80c6a8:	1884703a 	and	r2,r3,r2
  80c6ac:	30002e26 	beq	r6,zero,80c768 <_realloc_r+0x228>
  80c6b0:	3240b926 	beq	r6,r9,80c998 <_realloc_r+0x458>
  80c6b4:	98a9883a 	add	r20,r19,r2
  80c6b8:	2509883a 	add	r4,r4,r20
  80c6bc:	d9000015 	stw	r4,0(sp)
  80c6c0:	21c02a16 	blt	r4,r7,80c76c <_realloc_r+0x22c>
  80c6c4:	30800317 	ldw	r2,12(r6)
  80c6c8:	30c00217 	ldw	r3,8(r6)
  80c6cc:	01400904 	movi	r5,36
  80c6d0:	99bfff04 	addi	r6,r19,-4
  80c6d4:	18800315 	stw	r2,12(r3)
  80c6d8:	10c00215 	stw	r3,8(r2)
  80c6dc:	b9000317 	ldw	r4,12(r23)
  80c6e0:	b8800217 	ldw	r2,8(r23)
  80c6e4:	b82b883a 	mov	r21,r23
  80c6e8:	bc000204 	addi	r16,r23,8
  80c6ec:	20800215 	stw	r2,8(r4)
  80c6f0:	11000315 	stw	r4,12(r2)
  80c6f4:	2980e436 	bltu	r5,r6,80ca88 <_realloc_r+0x548>
  80c6f8:	008004c4 	movi	r2,19
  80c6fc:	9009883a 	mov	r4,r18
  80c700:	8011883a 	mov	r8,r16
  80c704:	11800f2e 	bgeu	r2,r6,80c744 <_realloc_r+0x204>
  80c708:	90800017 	ldw	r2,0(r18)
  80c70c:	ba000404 	addi	r8,r23,16
  80c710:	91000204 	addi	r4,r18,8
  80c714:	b8800215 	stw	r2,8(r23)
  80c718:	90c00117 	ldw	r3,4(r18)
  80c71c:	008006c4 	movi	r2,27
  80c720:	b8c00315 	stw	r3,12(r23)
  80c724:	1180072e 	bgeu	r2,r6,80c744 <_realloc_r+0x204>
  80c728:	90c00217 	ldw	r3,8(r18)
  80c72c:	ba000604 	addi	r8,r23,24
  80c730:	91000404 	addi	r4,r18,16
  80c734:	b8c00415 	stw	r3,16(r23)
  80c738:	90800317 	ldw	r2,12(r18)
  80c73c:	b8800515 	stw	r2,20(r23)
  80c740:	3140e726 	beq	r6,r5,80cae0 <_realloc_r+0x5a0>
  80c744:	20800017 	ldw	r2,0(r4)
  80c748:	dd000017 	ldw	r20,0(sp)
  80c74c:	b80f883a 	mov	r7,r23
  80c750:	40800015 	stw	r2,0(r8)
  80c754:	20c00117 	ldw	r3,4(r4)
  80c758:	40c00115 	stw	r3,4(r8)
  80c75c:	20800217 	ldw	r2,8(r4)
  80c760:	40800215 	stw	r2,8(r8)
  80c764:	003f9706 	br	80c5c4 <_realloc_r+0x84>
  80c768:	98a9883a 	add	r20,r19,r2
  80c76c:	a1c01f16 	blt	r20,r7,80c7ec <_realloc_r+0x2ac>
  80c770:	b8c00317 	ldw	r3,12(r23)
  80c774:	b8800217 	ldw	r2,8(r23)
  80c778:	99bfff04 	addi	r6,r19,-4
  80c77c:	01400904 	movi	r5,36
  80c780:	b82b883a 	mov	r21,r23
  80c784:	18800215 	stw	r2,8(r3)
  80c788:	10c00315 	stw	r3,12(r2)
  80c78c:	bc000204 	addi	r16,r23,8
  80c790:	2980c336 	bltu	r5,r6,80caa0 <_realloc_r+0x560>
  80c794:	008004c4 	movi	r2,19
  80c798:	9009883a 	mov	r4,r18
  80c79c:	8011883a 	mov	r8,r16
  80c7a0:	11800f2e 	bgeu	r2,r6,80c7e0 <_realloc_r+0x2a0>
  80c7a4:	90800017 	ldw	r2,0(r18)
  80c7a8:	ba000404 	addi	r8,r23,16
  80c7ac:	91000204 	addi	r4,r18,8
  80c7b0:	b8800215 	stw	r2,8(r23)
  80c7b4:	90c00117 	ldw	r3,4(r18)
  80c7b8:	008006c4 	movi	r2,27
  80c7bc:	b8c00315 	stw	r3,12(r23)
  80c7c0:	1180072e 	bgeu	r2,r6,80c7e0 <_realloc_r+0x2a0>
  80c7c4:	90c00217 	ldw	r3,8(r18)
  80c7c8:	ba000604 	addi	r8,r23,24
  80c7cc:	91000404 	addi	r4,r18,16
  80c7d0:	b8c00415 	stw	r3,16(r23)
  80c7d4:	90800317 	ldw	r2,12(r18)
  80c7d8:	b8800515 	stw	r2,20(r23)
  80c7dc:	3140c726 	beq	r6,r5,80cafc <_realloc_r+0x5bc>
  80c7e0:	20800017 	ldw	r2,0(r4)
  80c7e4:	b80f883a 	mov	r7,r23
  80c7e8:	003fd906 	br	80c750 <_realloc_r+0x210>
  80c7ec:	880b883a 	mov	r5,r17
  80c7f0:	b009883a 	mov	r4,r22
  80c7f4:	080bb800 	call	80bb80 <_malloc_r>
  80c7f8:	1023883a 	mov	r17,r2
  80c7fc:	10002526 	beq	r2,zero,80c894 <_realloc_r+0x354>
  80c800:	80800117 	ldw	r2,4(r16)
  80c804:	00ffff84 	movi	r3,-2
  80c808:	893ffe04 	addi	r4,r17,-8
  80c80c:	10c4703a 	and	r2,r2,r3
  80c810:	8085883a 	add	r2,r16,r2
  80c814:	20809526 	beq	r4,r2,80ca6c <_realloc_r+0x52c>
  80c818:	99bfff04 	addi	r6,r19,-4
  80c81c:	01c00904 	movi	r7,36
  80c820:	39804536 	bltu	r7,r6,80c938 <_realloc_r+0x3f8>
  80c824:	008004c4 	movi	r2,19
  80c828:	9009883a 	mov	r4,r18
  80c82c:	880b883a 	mov	r5,r17
  80c830:	11800f2e 	bgeu	r2,r6,80c870 <_realloc_r+0x330>
  80c834:	90800017 	ldw	r2,0(r18)
  80c838:	89400204 	addi	r5,r17,8
  80c83c:	91000204 	addi	r4,r18,8
  80c840:	88800015 	stw	r2,0(r17)
  80c844:	90c00117 	ldw	r3,4(r18)
  80c848:	008006c4 	movi	r2,27
  80c84c:	88c00115 	stw	r3,4(r17)
  80c850:	1180072e 	bgeu	r2,r6,80c870 <_realloc_r+0x330>
  80c854:	90c00217 	ldw	r3,8(r18)
  80c858:	89400404 	addi	r5,r17,16
  80c85c:	91000404 	addi	r4,r18,16
  80c860:	88c00215 	stw	r3,8(r17)
  80c864:	90800317 	ldw	r2,12(r18)
  80c868:	88800315 	stw	r2,12(r17)
  80c86c:	31c09126 	beq	r6,r7,80cab4 <_realloc_r+0x574>
  80c870:	20800017 	ldw	r2,0(r4)
  80c874:	28800015 	stw	r2,0(r5)
  80c878:	20c00117 	ldw	r3,4(r4)
  80c87c:	28c00115 	stw	r3,4(r5)
  80c880:	20800217 	ldw	r2,8(r4)
  80c884:	28800215 	stw	r2,8(r5)
  80c888:	900b883a 	mov	r5,r18
  80c88c:	b009883a 	mov	r4,r22
  80c890:	08118780 	call	811878 <_free_r>
  80c894:	b009883a 	mov	r4,r22
  80c898:	08159fc0 	call	8159fc <__malloc_unlock>
  80c89c:	003f5e06 	br	80c618 <_realloc_r+0xd8>
  80c8a0:	300b883a 	mov	r5,r6
  80c8a4:	dfc00b17 	ldw	ra,44(sp)
  80c8a8:	df000a17 	ldw	fp,40(sp)
  80c8ac:	ddc00917 	ldw	r23,36(sp)
  80c8b0:	dd800817 	ldw	r22,32(sp)
  80c8b4:	dd400717 	ldw	r21,28(sp)
  80c8b8:	dd000617 	ldw	r20,24(sp)
  80c8bc:	dcc00517 	ldw	r19,20(sp)
  80c8c0:	dc800417 	ldw	r18,16(sp)
  80c8c4:	dc400317 	ldw	r17,12(sp)
  80c8c8:	dc000217 	ldw	r16,8(sp)
  80c8cc:	dec00c04 	addi	sp,sp,48
  80c8d0:	080bb801 	jmpi	80bb80 <_malloc_r>
  80c8d4:	38800117 	ldw	r2,4(r7)
  80c8d8:	e54b883a 	add	r5,fp,r21
  80c8dc:	31000054 	ori	r4,r6,1
  80c8e0:	1080004c 	andi	r2,r2,1
  80c8e4:	1704b03a 	or	r2,r2,fp
  80c8e8:	38800115 	stw	r2,4(r7)
  80c8ec:	29000115 	stw	r4,4(r5)
  80c8f0:	2987883a 	add	r3,r5,r6
  80c8f4:	18800117 	ldw	r2,4(r3)
  80c8f8:	29400204 	addi	r5,r5,8
  80c8fc:	b009883a 	mov	r4,r22
  80c900:	10800054 	ori	r2,r2,1
  80c904:	18800115 	stw	r2,4(r3)
  80c908:	08118780 	call	811878 <_free_r>
  80c90c:	003f3806 	br	80c5f0 <_realloc_r+0xb0>
  80c910:	000d883a 	mov	r6,zero
  80c914:	0009883a 	mov	r4,zero
  80c918:	003f5d06 	br	80c690 <_realloc_r+0x150>
  80c91c:	30c00217 	ldw	r3,8(r6)
  80c920:	30800317 	ldw	r2,12(r6)
  80c924:	800f883a 	mov	r7,r16
  80c928:	84000204 	addi	r16,r16,8
  80c92c:	10c00215 	stw	r3,8(r2)
  80c930:	18800315 	stw	r2,12(r3)
  80c934:	003f2306 	br	80c5c4 <_realloc_r+0x84>
  80c938:	8809883a 	mov	r4,r17
  80c93c:	900b883a 	mov	r5,r18
  80c940:	08125580 	call	812558 <memmove>
  80c944:	003fd006 	br	80c888 <_realloc_r+0x348>
  80c948:	30800117 	ldw	r2,4(r6)
  80c94c:	e0c00404 	addi	r3,fp,16
  80c950:	1108703a 	and	r4,r2,r4
  80c954:	9905883a 	add	r2,r19,r4
  80c958:	10ff4d16 	blt	r2,r3,80c690 <_realloc_r+0x150>
  80c95c:	1705c83a 	sub	r2,r2,fp
  80c960:	870b883a 	add	r5,r16,fp
  80c964:	10800054 	ori	r2,r2,1
  80c968:	28800115 	stw	r2,4(r5)
  80c96c:	80c00117 	ldw	r3,4(r16)
  80c970:	008020b4 	movhi	r2,130
  80c974:	10837304 	addi	r2,r2,3532
  80c978:	b009883a 	mov	r4,r22
  80c97c:	18c0004c 	andi	r3,r3,1
  80c980:	e0c6b03a 	or	r3,fp,r3
  80c984:	11400215 	stw	r5,8(r2)
  80c988:	80c00115 	stw	r3,4(r16)
  80c98c:	08159fc0 	call	8159fc <__malloc_unlock>
  80c990:	84400204 	addi	r17,r16,8
  80c994:	003f2006 	br	80c618 <_realloc_r+0xd8>
  80c998:	98a9883a 	add	r20,r19,r2
  80c99c:	2509883a 	add	r4,r4,r20
  80c9a0:	e0800404 	addi	r2,fp,16
  80c9a4:	d9000115 	stw	r4,4(sp)
  80c9a8:	20bf7016 	blt	r4,r2,80c76c <_realloc_r+0x22c>
  80c9ac:	b8c00317 	ldw	r3,12(r23)
  80c9b0:	b8800217 	ldw	r2,8(r23)
  80c9b4:	99bfff04 	addi	r6,r19,-4
  80c9b8:	01400904 	movi	r5,36
  80c9bc:	18800215 	stw	r2,8(r3)
  80c9c0:	10c00315 	stw	r3,12(r2)
  80c9c4:	bc400204 	addi	r17,r23,8
  80c9c8:	29804136 	bltu	r5,r6,80cad0 <_realloc_r+0x590>
  80c9cc:	008004c4 	movi	r2,19
  80c9d0:	9009883a 	mov	r4,r18
  80c9d4:	880f883a 	mov	r7,r17
  80c9d8:	11800f2e 	bgeu	r2,r6,80ca18 <_realloc_r+0x4d8>
  80c9dc:	90800017 	ldw	r2,0(r18)
  80c9e0:	b9c00404 	addi	r7,r23,16
  80c9e4:	91000204 	addi	r4,r18,8
  80c9e8:	b8800215 	stw	r2,8(r23)
  80c9ec:	90c00117 	ldw	r3,4(r18)
  80c9f0:	008006c4 	movi	r2,27
  80c9f4:	b8c00315 	stw	r3,12(r23)
  80c9f8:	1180072e 	bgeu	r2,r6,80ca18 <_realloc_r+0x4d8>
  80c9fc:	90c00217 	ldw	r3,8(r18)
  80ca00:	b9c00604 	addi	r7,r23,24
  80ca04:	91000404 	addi	r4,r18,16
  80ca08:	b8c00415 	stw	r3,16(r23)
  80ca0c:	90800317 	ldw	r2,12(r18)
  80ca10:	b8800515 	stw	r2,20(r23)
  80ca14:	31404026 	beq	r6,r5,80cb18 <_realloc_r+0x5d8>
  80ca18:	20800017 	ldw	r2,0(r4)
  80ca1c:	38800015 	stw	r2,0(r7)
  80ca20:	20c00117 	ldw	r3,4(r4)
  80ca24:	38c00115 	stw	r3,4(r7)
  80ca28:	20800217 	ldw	r2,8(r4)
  80ca2c:	38800215 	stw	r2,8(r7)
  80ca30:	d8c00117 	ldw	r3,4(sp)
  80ca34:	bf0b883a 	add	r5,r23,fp
  80ca38:	b009883a 	mov	r4,r22
  80ca3c:	1f05c83a 	sub	r2,r3,fp
  80ca40:	10800054 	ori	r2,r2,1
  80ca44:	28800115 	stw	r2,4(r5)
  80ca48:	b8c00117 	ldw	r3,4(r23)
  80ca4c:	008020b4 	movhi	r2,130
  80ca50:	10837304 	addi	r2,r2,3532
  80ca54:	11400215 	stw	r5,8(r2)
  80ca58:	18c0004c 	andi	r3,r3,1
  80ca5c:	e0c6b03a 	or	r3,fp,r3
  80ca60:	b8c00115 	stw	r3,4(r23)
  80ca64:	08159fc0 	call	8159fc <__malloc_unlock>
  80ca68:	003eeb06 	br	80c618 <_realloc_r+0xd8>
  80ca6c:	20800117 	ldw	r2,4(r4)
  80ca70:	00ffff04 	movi	r3,-4
  80ca74:	800f883a 	mov	r7,r16
  80ca78:	10c4703a 	and	r2,r2,r3
  80ca7c:	98a9883a 	add	r20,r19,r2
  80ca80:	84000204 	addi	r16,r16,8
  80ca84:	003ecf06 	br	80c5c4 <_realloc_r+0x84>
  80ca88:	900b883a 	mov	r5,r18
  80ca8c:	8009883a 	mov	r4,r16
  80ca90:	08125580 	call	812558 <memmove>
  80ca94:	dd000017 	ldw	r20,0(sp)
  80ca98:	b80f883a 	mov	r7,r23
  80ca9c:	003ec906 	br	80c5c4 <_realloc_r+0x84>
  80caa0:	900b883a 	mov	r5,r18
  80caa4:	8009883a 	mov	r4,r16
  80caa8:	08125580 	call	812558 <memmove>
  80caac:	b80f883a 	mov	r7,r23
  80cab0:	003ec406 	br	80c5c4 <_realloc_r+0x84>
  80cab4:	90c00417 	ldw	r3,16(r18)
  80cab8:	89400604 	addi	r5,r17,24
  80cabc:	91000604 	addi	r4,r18,24
  80cac0:	88c00415 	stw	r3,16(r17)
  80cac4:	90800517 	ldw	r2,20(r18)
  80cac8:	88800515 	stw	r2,20(r17)
  80cacc:	003f6806 	br	80c870 <_realloc_r+0x330>
  80cad0:	900b883a 	mov	r5,r18
  80cad4:	8809883a 	mov	r4,r17
  80cad8:	08125580 	call	812558 <memmove>
  80cadc:	003fd406 	br	80ca30 <_realloc_r+0x4f0>
  80cae0:	90c00417 	ldw	r3,16(r18)
  80cae4:	91000604 	addi	r4,r18,24
  80cae8:	ba000804 	addi	r8,r23,32
  80caec:	b8c00615 	stw	r3,24(r23)
  80caf0:	90800517 	ldw	r2,20(r18)
  80caf4:	b8800715 	stw	r2,28(r23)
  80caf8:	003f1206 	br	80c744 <_realloc_r+0x204>
  80cafc:	90c00417 	ldw	r3,16(r18)
  80cb00:	91000604 	addi	r4,r18,24
  80cb04:	ba000804 	addi	r8,r23,32
  80cb08:	b8c00615 	stw	r3,24(r23)
  80cb0c:	90800517 	ldw	r2,20(r18)
  80cb10:	b8800715 	stw	r2,28(r23)
  80cb14:	003f3206 	br	80c7e0 <_realloc_r+0x2a0>
  80cb18:	90c00417 	ldw	r3,16(r18)
  80cb1c:	91000604 	addi	r4,r18,24
  80cb20:	b9c00804 	addi	r7,r23,32
  80cb24:	b8c00615 	stw	r3,24(r23)
  80cb28:	90800517 	ldw	r2,20(r18)
  80cb2c:	b8800715 	stw	r2,28(r23)
  80cb30:	003fb906 	br	80ca18 <_realloc_r+0x4d8>

0080cb34 <_sbrk_r>:
  80cb34:	defffd04 	addi	sp,sp,-12
  80cb38:	dc000015 	stw	r16,0(sp)
  80cb3c:	040020b4 	movhi	r16,130
  80cb40:	8411c804 	addi	r16,r16,18208
  80cb44:	dc400115 	stw	r17,4(sp)
  80cb48:	80000015 	stw	zero,0(r16)
  80cb4c:	2023883a 	mov	r17,r4
  80cb50:	2809883a 	mov	r4,r5
  80cb54:	dfc00215 	stw	ra,8(sp)
  80cb58:	0815bfc0 	call	815bfc <sbrk>
  80cb5c:	1007883a 	mov	r3,r2
  80cb60:	00bfffc4 	movi	r2,-1
  80cb64:	18800626 	beq	r3,r2,80cb80 <_sbrk_r+0x4c>
  80cb68:	1805883a 	mov	r2,r3
  80cb6c:	dfc00217 	ldw	ra,8(sp)
  80cb70:	dc400117 	ldw	r17,4(sp)
  80cb74:	dc000017 	ldw	r16,0(sp)
  80cb78:	dec00304 	addi	sp,sp,12
  80cb7c:	f800283a 	ret
  80cb80:	80800017 	ldw	r2,0(r16)
  80cb84:	103ff826 	beq	r2,zero,80cb68 <_sbrk_r+0x34>
  80cb88:	88800015 	stw	r2,0(r17)
  80cb8c:	1805883a 	mov	r2,r3
  80cb90:	dfc00217 	ldw	ra,8(sp)
  80cb94:	dc400117 	ldw	r17,4(sp)
  80cb98:	dc000017 	ldw	r16,0(sp)
  80cb9c:	dec00304 	addi	sp,sp,12
  80cba0:	f800283a 	ret

0080cba4 <sprintf>:
  80cba4:	deffe504 	addi	sp,sp,-108
  80cba8:	2013883a 	mov	r9,r4
  80cbac:	dfc01815 	stw	ra,96(sp)
  80cbb0:	d9801915 	stw	r6,100(sp)
  80cbb4:	d9c01a15 	stw	r7,104(sp)
  80cbb8:	d8801904 	addi	r2,sp,100
  80cbbc:	d8800015 	stw	r2,0(sp)
  80cbc0:	008020b4 	movhi	r2,130
  80cbc4:	108a6b04 	addi	r2,r2,10668
  80cbc8:	11000017 	ldw	r4,0(r2)
  80cbcc:	d9c00017 	ldw	r7,0(sp)
  80cbd0:	00808204 	movi	r2,520
  80cbd4:	00e00034 	movhi	r3,32768
  80cbd8:	18ffffc4 	addi	r3,r3,-1
  80cbdc:	280d883a 	mov	r6,r5
  80cbe0:	d880040d 	sth	r2,16(sp)
  80cbe4:	d9400104 	addi	r5,sp,4
  80cbe8:	00bfffc4 	movi	r2,-1
  80cbec:	d8c00615 	stw	r3,24(sp)
  80cbf0:	d8c00315 	stw	r3,12(sp)
  80cbf4:	da400515 	stw	r9,20(sp)
  80cbf8:	d880048d 	sth	r2,18(sp)
  80cbfc:	da400115 	stw	r9,4(sp)
  80cc00:	080da840 	call	80da84 <___vfprintf_internal_r>
  80cc04:	d8c00117 	ldw	r3,4(sp)
  80cc08:	18000005 	stb	zero,0(r3)
  80cc0c:	dfc01817 	ldw	ra,96(sp)
  80cc10:	dec01b04 	addi	sp,sp,108
  80cc14:	f800283a 	ret

0080cc18 <_sprintf_r>:
  80cc18:	deffe604 	addi	sp,sp,-104
  80cc1c:	2813883a 	mov	r9,r5
  80cc20:	dfc01815 	stw	ra,96(sp)
  80cc24:	d9c01915 	stw	r7,100(sp)
  80cc28:	d8801904 	addi	r2,sp,100
  80cc2c:	d8800015 	stw	r2,0(sp)
  80cc30:	100f883a 	mov	r7,r2
  80cc34:	00808204 	movi	r2,520
  80cc38:	00e00034 	movhi	r3,32768
  80cc3c:	18ffffc4 	addi	r3,r3,-1
  80cc40:	d880040d 	sth	r2,16(sp)
  80cc44:	d9400104 	addi	r5,sp,4
  80cc48:	00bfffc4 	movi	r2,-1
  80cc4c:	d8c00615 	stw	r3,24(sp)
  80cc50:	d8c00315 	stw	r3,12(sp)
  80cc54:	da400515 	stw	r9,20(sp)
  80cc58:	d880048d 	sth	r2,18(sp)
  80cc5c:	da400115 	stw	r9,4(sp)
  80cc60:	080da840 	call	80da84 <___vfprintf_internal_r>
  80cc64:	d8c00117 	ldw	r3,4(sp)
  80cc68:	18000005 	stb	zero,0(r3)
  80cc6c:	dfc01817 	ldw	ra,96(sp)
  80cc70:	dec01a04 	addi	sp,sp,104
  80cc74:	f800283a 	ret

0080cc78 <strcat>:
  80cc78:	defffe04 	addi	sp,sp,-8
  80cc7c:	208000cc 	andi	r2,r4,3
  80cc80:	dc000015 	stw	r16,0(sp)
  80cc84:	dfc00115 	stw	ra,4(sp)
  80cc88:	2021883a 	mov	r16,r4
  80cc8c:	1000161e 	bne	r2,zero,80cce8 <strcat+0x70>
  80cc90:	20c00017 	ldw	r3,0(r4)
  80cc94:	01bfbff4 	movhi	r6,65279
  80cc98:	31bfbfc4 	addi	r6,r6,-257
  80cc9c:	02202074 	movhi	r8,32897
  80cca0:	42202004 	addi	r8,r8,-32640
  80cca4:	1985883a 	add	r2,r3,r6
  80cca8:	1204703a 	and	r2,r2,r8
  80ccac:	00c6303a 	nor	r3,zero,r3
  80ccb0:	1886703a 	and	r3,r3,r2
  80ccb4:	18000c1e 	bne	r3,zero,80cce8 <strcat+0x70>
  80ccb8:	300f883a 	mov	r7,r6
  80ccbc:	400d883a 	mov	r6,r8
  80ccc0:	21000104 	addi	r4,r4,4
  80ccc4:	20800017 	ldw	r2,0(r4)
  80ccc8:	11c7883a 	add	r3,r2,r7
  80cccc:	1986703a 	and	r3,r3,r6
  80ccd0:	0084303a 	nor	r2,zero,r2
  80ccd4:	10c4703a 	and	r2,r2,r3
  80ccd8:	103ff926 	beq	r2,zero,80ccc0 <strcat+0x48>
  80ccdc:	20800007 	ldb	r2,0(r4)
  80cce0:	10000326 	beq	r2,zero,80ccf0 <strcat+0x78>
  80cce4:	21000044 	addi	r4,r4,1
  80cce8:	20800007 	ldb	r2,0(r4)
  80ccec:	103ffd1e 	bne	r2,zero,80cce4 <strcat+0x6c>
  80ccf0:	080cdc40 	call	80cdc4 <strcpy>
  80ccf4:	8005883a 	mov	r2,r16
  80ccf8:	dfc00117 	ldw	ra,4(sp)
  80ccfc:	dc000017 	ldw	r16,0(sp)
  80cd00:	dec00204 	addi	sp,sp,8
  80cd04:	f800283a 	ret

0080cd08 <strcmp>:
  80cd08:	2144b03a 	or	r2,r4,r5
  80cd0c:	108000cc 	andi	r2,r2,3
  80cd10:	10001d1e 	bne	r2,zero,80cd88 <strcmp+0x80>
  80cd14:	200f883a 	mov	r7,r4
  80cd18:	28800017 	ldw	r2,0(r5)
  80cd1c:	21000017 	ldw	r4,0(r4)
  80cd20:	280d883a 	mov	r6,r5
  80cd24:	2080161e 	bne	r4,r2,80cd80 <strcmp+0x78>
  80cd28:	023fbff4 	movhi	r8,65279
  80cd2c:	423fbfc4 	addi	r8,r8,-257
  80cd30:	2207883a 	add	r3,r4,r8
  80cd34:	01602074 	movhi	r5,32897
  80cd38:	29602004 	addi	r5,r5,-32640
  80cd3c:	1946703a 	and	r3,r3,r5
  80cd40:	0104303a 	nor	r2,zero,r4
  80cd44:	10c4703a 	and	r2,r2,r3
  80cd48:	10001c1e 	bne	r2,zero,80cdbc <strcmp+0xb4>
  80cd4c:	4013883a 	mov	r9,r8
  80cd50:	2811883a 	mov	r8,r5
  80cd54:	00000106 	br	80cd5c <strcmp+0x54>
  80cd58:	1800181e 	bne	r3,zero,80cdbc <strcmp+0xb4>
  80cd5c:	39c00104 	addi	r7,r7,4
  80cd60:	39000017 	ldw	r4,0(r7)
  80cd64:	31800104 	addi	r6,r6,4
  80cd68:	31400017 	ldw	r5,0(r6)
  80cd6c:	2245883a 	add	r2,r4,r9
  80cd70:	1204703a 	and	r2,r2,r8
  80cd74:	0106303a 	nor	r3,zero,r4
  80cd78:	1886703a 	and	r3,r3,r2
  80cd7c:	217ff626 	beq	r4,r5,80cd58 <strcmp+0x50>
  80cd80:	3809883a 	mov	r4,r7
  80cd84:	300b883a 	mov	r5,r6
  80cd88:	20c00007 	ldb	r3,0(r4)
  80cd8c:	1800051e 	bne	r3,zero,80cda4 <strcmp+0x9c>
  80cd90:	00000606 	br	80cdac <strcmp+0xa4>
  80cd94:	21000044 	addi	r4,r4,1
  80cd98:	20c00007 	ldb	r3,0(r4)
  80cd9c:	29400044 	addi	r5,r5,1
  80cda0:	18000226 	beq	r3,zero,80cdac <strcmp+0xa4>
  80cda4:	28800007 	ldb	r2,0(r5)
  80cda8:	18bffa26 	beq	r3,r2,80cd94 <strcmp+0x8c>
  80cdac:	20c00003 	ldbu	r3,0(r4)
  80cdb0:	28800003 	ldbu	r2,0(r5)
  80cdb4:	1885c83a 	sub	r2,r3,r2
  80cdb8:	f800283a 	ret
  80cdbc:	0005883a 	mov	r2,zero
  80cdc0:	f800283a 	ret

0080cdc4 <strcpy>:
  80cdc4:	2904b03a 	or	r2,r5,r4
  80cdc8:	108000cc 	andi	r2,r2,3
  80cdcc:	10000826 	beq	r2,zero,80cdf0 <strcpy+0x2c>
  80cdd0:	2007883a 	mov	r3,r4
  80cdd4:	28800003 	ldbu	r2,0(r5)
  80cdd8:	29400044 	addi	r5,r5,1
  80cddc:	18800005 	stb	r2,0(r3)
  80cde0:	18c00044 	addi	r3,r3,1
  80cde4:	103ffb1e 	bne	r2,zero,80cdd4 <strcpy+0x10>
  80cde8:	2005883a 	mov	r2,r4
  80cdec:	f800283a 	ret
  80cdf0:	29800017 	ldw	r6,0(r5)
  80cdf4:	023fbff4 	movhi	r8,65279
  80cdf8:	423fbfc4 	addi	r8,r8,-257
  80cdfc:	02a02074 	movhi	r10,32897
  80ce00:	52a02004 	addi	r10,r10,-32640
  80ce04:	3205883a 	add	r2,r6,r8
  80ce08:	0186303a 	nor	r3,zero,r6
  80ce0c:	10c4703a 	and	r2,r2,r3
  80ce10:	1284703a 	and	r2,r2,r10
  80ce14:	200f883a 	mov	r7,r4
  80ce18:	10000b1e 	bne	r2,zero,80ce48 <strcpy+0x84>
  80ce1c:	4013883a 	mov	r9,r8
  80ce20:	5011883a 	mov	r8,r10
  80ce24:	39800015 	stw	r6,0(r7)
  80ce28:	29400104 	addi	r5,r5,4
  80ce2c:	29800017 	ldw	r6,0(r5)
  80ce30:	39c00104 	addi	r7,r7,4
  80ce34:	3245883a 	add	r2,r6,r9
  80ce38:	0186303a 	nor	r3,zero,r6
  80ce3c:	10c4703a 	and	r2,r2,r3
  80ce40:	1204703a 	and	r2,r2,r8
  80ce44:	103ff726 	beq	r2,zero,80ce24 <strcpy+0x60>
  80ce48:	3807883a 	mov	r3,r7
  80ce4c:	003fe106 	br	80cdd4 <strcpy+0x10>

0080ce50 <strlen>:
  80ce50:	208000cc 	andi	r2,r4,3
  80ce54:	2011883a 	mov	r8,r4
  80ce58:	1000161e 	bne	r2,zero,80ceb4 <strlen+0x64>
  80ce5c:	20c00017 	ldw	r3,0(r4)
  80ce60:	017fbff4 	movhi	r5,65279
  80ce64:	297fbfc4 	addi	r5,r5,-257
  80ce68:	01e02074 	movhi	r7,32897
  80ce6c:	39e02004 	addi	r7,r7,-32640
  80ce70:	1945883a 	add	r2,r3,r5
  80ce74:	11c4703a 	and	r2,r2,r7
  80ce78:	00c6303a 	nor	r3,zero,r3
  80ce7c:	1886703a 	and	r3,r3,r2
  80ce80:	18000c1e 	bne	r3,zero,80ceb4 <strlen+0x64>
  80ce84:	280d883a 	mov	r6,r5
  80ce88:	380b883a 	mov	r5,r7
  80ce8c:	21000104 	addi	r4,r4,4
  80ce90:	20800017 	ldw	r2,0(r4)
  80ce94:	1187883a 	add	r3,r2,r6
  80ce98:	1946703a 	and	r3,r3,r5
  80ce9c:	0084303a 	nor	r2,zero,r2
  80cea0:	10c4703a 	and	r2,r2,r3
  80cea4:	103ff926 	beq	r2,zero,80ce8c <strlen+0x3c>
  80cea8:	20800007 	ldb	r2,0(r4)
  80ceac:	10000326 	beq	r2,zero,80cebc <strlen+0x6c>
  80ceb0:	21000044 	addi	r4,r4,1
  80ceb4:	20800007 	ldb	r2,0(r4)
  80ceb8:	103ffd1e 	bne	r2,zero,80ceb0 <strlen+0x60>
  80cebc:	2205c83a 	sub	r2,r4,r8
  80cec0:	f800283a 	ret

0080cec4 <strncat>:
  80cec4:	208000cc 	andi	r2,r4,3
  80cec8:	10001426 	beq	r2,zero,80cf1c <strncat+0x58>
  80cecc:	2007883a 	mov	r3,r4
  80ced0:	00000106 	br	80ced8 <strncat+0x14>
  80ced4:	18c00044 	addi	r3,r3,1
  80ced8:	18800007 	ldb	r2,0(r3)
  80cedc:	103ffd1e 	bne	r2,zero,80ced4 <strncat+0x10>
  80cee0:	31bfffc4 	addi	r6,r6,-1
  80cee4:	00bfffc4 	movi	r2,-1
  80cee8:	30800a26 	beq	r6,r2,80cf14 <strncat+0x50>
  80ceec:	28800003 	ldbu	r2,0(r5)
  80cef0:	29400044 	addi	r5,r5,1
  80cef4:	18800005 	stb	r2,0(r3)
  80cef8:	10000626 	beq	r2,zero,80cf14 <strncat+0x50>
  80cefc:	18c00044 	addi	r3,r3,1
  80cf00:	303ff71e 	bne	r6,zero,80cee0 <strncat+0x1c>
  80cf04:	31bfffc4 	addi	r6,r6,-1
  80cf08:	00bfffc4 	movi	r2,-1
  80cf0c:	18000005 	stb	zero,0(r3)
  80cf10:	30bff61e 	bne	r6,r2,80ceec <strncat+0x28>
  80cf14:	2005883a 	mov	r2,r4
  80cf18:	f800283a 	ret
  80cf1c:	20c00017 	ldw	r3,0(r4)
  80cf20:	023fbff4 	movhi	r8,65279
  80cf24:	423fbfc4 	addi	r8,r8,-257
  80cf28:	02a02074 	movhi	r10,32897
  80cf2c:	52a02004 	addi	r10,r10,-32640
  80cf30:	1a05883a 	add	r2,r3,r8
  80cf34:	1284703a 	and	r2,r2,r10
  80cf38:	00c6303a 	nor	r3,zero,r3
  80cf3c:	1886703a 	and	r3,r3,r2
  80cf40:	200f883a 	mov	r7,r4
  80cf44:	1800091e 	bne	r3,zero,80cf6c <strncat+0xa8>
  80cf48:	4013883a 	mov	r9,r8
  80cf4c:	5011883a 	mov	r8,r10
  80cf50:	39c00104 	addi	r7,r7,4
  80cf54:	38800017 	ldw	r2,0(r7)
  80cf58:	1247883a 	add	r3,r2,r9
  80cf5c:	1a06703a 	and	r3,r3,r8
  80cf60:	0084303a 	nor	r2,zero,r2
  80cf64:	10c4703a 	and	r2,r2,r3
  80cf68:	103ff926 	beq	r2,zero,80cf50 <strncat+0x8c>
  80cf6c:	3807883a 	mov	r3,r7
  80cf70:	003fd906 	br	80ced8 <strncat+0x14>

0080cf74 <strncpy>:
  80cf74:	2904b03a 	or	r2,r5,r4
  80cf78:	108000cc 	andi	r2,r2,3
  80cf7c:	00c000c4 	movi	r3,3
  80cf80:	1000291e 	bne	r2,zero,80d028 <strncpy+0xb4>
  80cf84:	1980282e 	bgeu	r3,r6,80d028 <strncpy+0xb4>
  80cf88:	1817883a 	mov	r11,r3
  80cf8c:	2011883a 	mov	r8,r4
  80cf90:	02bfbff4 	movhi	r10,65279
  80cf94:	52bfbfc4 	addi	r10,r10,-257
  80cf98:	02602074 	movhi	r9,32897
  80cf9c:	4a602004 	addi	r9,r9,-32640
  80cfa0:	29c00017 	ldw	r7,0(r5)
  80cfa4:	3a85883a 	add	r2,r7,r10
  80cfa8:	01c6303a 	nor	r3,zero,r7
  80cfac:	10c4703a 	and	r2,r2,r3
  80cfb0:	1244703a 	and	r2,r2,r9
  80cfb4:	1000051e 	bne	r2,zero,80cfcc <strncpy+0x58>
  80cfb8:	31bfff04 	addi	r6,r6,-4
  80cfbc:	41c00015 	stw	r7,0(r8)
  80cfc0:	29400104 	addi	r5,r5,4
  80cfc4:	42000104 	addi	r8,r8,4
  80cfc8:	59bff536 	bltu	r11,r6,80cfa0 <strncpy+0x2c>
  80cfcc:	400f883a 	mov	r7,r8
  80cfd0:	30001326 	beq	r6,zero,80d020 <strncpy+0xac>
  80cfd4:	28800003 	ldbu	r2,0(r5)
  80cfd8:	31bfffc4 	addi	r6,r6,-1
  80cfdc:	38c00044 	addi	r3,r7,1
  80cfe0:	38800005 	stb	r2,0(r7)
  80cfe4:	10000826 	beq	r2,zero,80d008 <strncpy+0x94>
  80cfe8:	29400044 	addi	r5,r5,1
  80cfec:	30000c26 	beq	r6,zero,80d020 <strncpy+0xac>
  80cff0:	28800003 	ldbu	r2,0(r5)
  80cff4:	31bfffc4 	addi	r6,r6,-1
  80cff8:	29400044 	addi	r5,r5,1
  80cffc:	18800005 	stb	r2,0(r3)
  80d000:	18c00044 	addi	r3,r3,1
  80d004:	103ff91e 	bne	r2,zero,80cfec <strncpy+0x78>
  80d008:	30000526 	beq	r6,zero,80d020 <strncpy+0xac>
  80d00c:	1805883a 	mov	r2,r3
  80d010:	30cd883a 	add	r6,r6,r3
  80d014:	10000005 	stb	zero,0(r2)
  80d018:	10800044 	addi	r2,r2,1
  80d01c:	30bffd1e 	bne	r6,r2,80d014 <strncpy+0xa0>
  80d020:	2005883a 	mov	r2,r4
  80d024:	f800283a 	ret
  80d028:	200f883a 	mov	r7,r4
  80d02c:	003fe806 	br	80cfd0 <strncpy+0x5c>

0080d030 <critical_factorization>:
  80d030:	03000044 	movi	r12,1
  80d034:	6013883a 	mov	r9,r12
  80d038:	037fffc4 	movi	r13,-1
  80d03c:	0011883a 	mov	r8,zero
  80d040:	6905883a 	add	r2,r13,r4
  80d044:	424f883a 	add	r7,r8,r9
  80d048:	1245883a 	add	r2,r2,r9
  80d04c:	21c7883a 	add	r3,r4,r7
  80d050:	39400b2e 	bgeu	r7,r5,80d080 <critical_factorization+0x50>
  80d054:	18c00003 	ldbu	r3,0(r3)
  80d058:	10800003 	ldbu	r2,0(r2)
  80d05c:	1880232e 	bgeu	r3,r2,80d0ec <critical_factorization+0xbc>
  80d060:	3b59c83a 	sub	r12,r7,r13
  80d064:	02400044 	movi	r9,1
  80d068:	3811883a 	mov	r8,r7
  80d06c:	6905883a 	add	r2,r13,r4
  80d070:	424f883a 	add	r7,r8,r9
  80d074:	1245883a 	add	r2,r2,r9
  80d078:	21c7883a 	add	r3,r4,r7
  80d07c:	397ff536 	bltu	r7,r5,80d054 <critical_factorization+0x24>
  80d080:	02c00044 	movi	r11,1
  80d084:	5815883a 	mov	r10,r11
  80d088:	027fffc4 	movi	r9,-1
  80d08c:	0011883a 	mov	r8,zero
  80d090:	4905883a 	add	r2,r9,r4
  80d094:	428f883a 	add	r7,r8,r10
  80d098:	33000015 	stw	r12,0(r6)
  80d09c:	1285883a 	add	r2,r2,r10
  80d0a0:	3907883a 	add	r3,r7,r4
  80d0a4:	39400b2e 	bgeu	r7,r5,80d0d4 <critical_factorization+0xa4>
  80d0a8:	18c00003 	ldbu	r3,0(r3)
  80d0ac:	10800003 	ldbu	r2,0(r2)
  80d0b0:	10c01a2e 	bgeu	r2,r3,80d11c <critical_factorization+0xec>
  80d0b4:	3a57c83a 	sub	r11,r7,r9
  80d0b8:	02800044 	movi	r10,1
  80d0bc:	3811883a 	mov	r8,r7
  80d0c0:	4905883a 	add	r2,r9,r4
  80d0c4:	428f883a 	add	r7,r8,r10
  80d0c8:	1285883a 	add	r2,r2,r10
  80d0cc:	3907883a 	add	r3,r7,r4
  80d0d0:	397ff536 	bltu	r7,r5,80d0a8 <critical_factorization+0x78>
  80d0d4:	48c00044 	addi	r3,r9,1
  80d0d8:	68800044 	addi	r2,r13,1
  80d0dc:	18800236 	bltu	r3,r2,80d0e8 <critical_factorization+0xb8>
  80d0e0:	32c00015 	stw	r11,0(r6)
  80d0e4:	1805883a 	mov	r2,r3
  80d0e8:	f800283a 	ret
  80d0ec:	18800626 	beq	r3,r2,80d108 <critical_factorization+0xd8>
  80d0f0:	03000044 	movi	r12,1
  80d0f4:	430f883a 	add	r7,r8,r12
  80d0f8:	401b883a 	mov	r13,r8
  80d0fc:	6013883a 	mov	r9,r12
  80d100:	3811883a 	mov	r8,r7
  80d104:	003fd906 	br	80d06c <critical_factorization+0x3c>
  80d108:	4b001026 	beq	r9,r12,80d14c <critical_factorization+0x11c>
  80d10c:	400f883a 	mov	r7,r8
  80d110:	4a400044 	addi	r9,r9,1
  80d114:	3811883a 	mov	r8,r7
  80d118:	003fd406 	br	80d06c <critical_factorization+0x3c>
  80d11c:	18800626 	beq	r3,r2,80d138 <critical_factorization+0x108>
  80d120:	02c00044 	movi	r11,1
  80d124:	42cf883a 	add	r7,r8,r11
  80d128:	4013883a 	mov	r9,r8
  80d12c:	5815883a 	mov	r10,r11
  80d130:	3811883a 	mov	r8,r7
  80d134:	003fe206 	br	80d0c0 <critical_factorization+0x90>
  80d138:	52c00726 	beq	r10,r11,80d158 <critical_factorization+0x128>
  80d13c:	400f883a 	mov	r7,r8
  80d140:	52800044 	addi	r10,r10,1
  80d144:	3811883a 	mov	r8,r7
  80d148:	003fdd06 	br	80d0c0 <critical_factorization+0x90>
  80d14c:	02400044 	movi	r9,1
  80d150:	3811883a 	mov	r8,r7
  80d154:	003fc506 	br	80d06c <critical_factorization+0x3c>
  80d158:	02800044 	movi	r10,1
  80d15c:	3811883a 	mov	r8,r7
  80d160:	003fd706 	br	80d0c0 <critical_factorization+0x90>

0080d164 <strstr>:
  80d164:	defef404 	addi	sp,sp,-1072
  80d168:	dd810815 	stw	r22,1056(sp)
  80d16c:	dc410315 	stw	r17,1036(sp)
  80d170:	dfc10b15 	stw	ra,1068(sp)
  80d174:	df010a15 	stw	fp,1064(sp)
  80d178:	ddc10915 	stw	r23,1060(sp)
  80d17c:	dd410715 	stw	r21,1052(sp)
  80d180:	dd010615 	stw	r20,1048(sp)
  80d184:	dcc10515 	stw	r19,1044(sp)
  80d188:	dc810415 	stw	r18,1040(sp)
  80d18c:	dc010215 	stw	r16,1032(sp)
  80d190:	2023883a 	mov	r17,r4
  80d194:	21000007 	ldb	r4,0(r4)
  80d198:	282d883a 	mov	r22,r5
  80d19c:	2000d026 	beq	r4,zero,80d4e0 <strstr+0x37c>
  80d1a0:	28800007 	ldb	r2,0(r5)
  80d1a4:	10001026 	beq	r2,zero,80d1e8 <strstr+0x84>
  80d1a8:	2821883a 	mov	r16,r5
  80d1ac:	8807883a 	mov	r3,r17
  80d1b0:	01400044 	movi	r5,1
  80d1b4:	00000206 	br	80d1c0 <strstr+0x5c>
  80d1b8:	80800007 	ldb	r2,0(r16)
  80d1bc:	10000826 	beq	r2,zero,80d1e0 <strstr+0x7c>
  80d1c0:	18c00044 	addi	r3,r3,1
  80d1c4:	2085003a 	cmpeq	r2,r4,r2
  80d1c8:	19000007 	ldb	r4,0(r3)
  80d1cc:	288a703a 	and	r5,r5,r2
  80d1d0:	84000044 	addi	r16,r16,1
  80d1d4:	203ff81e 	bne	r4,zero,80d1b8 <strstr+0x54>
  80d1d8:	80800007 	ldb	r2,0(r16)
  80d1dc:	1000611e 	bne	r2,zero,80d364 <strstr+0x200>
  80d1e0:	2805003a 	cmpeq	r2,r5,zero
  80d1e4:	10000e1e 	bne	r2,zero,80d220 <strstr+0xbc>
  80d1e8:	8825883a 	mov	r18,r17
  80d1ec:	9005883a 	mov	r2,r18
  80d1f0:	dfc10b17 	ldw	ra,1068(sp)
  80d1f4:	df010a17 	ldw	fp,1064(sp)
  80d1f8:	ddc10917 	ldw	r23,1060(sp)
  80d1fc:	dd810817 	ldw	r22,1056(sp)
  80d200:	dd410717 	ldw	r21,1052(sp)
  80d204:	dd010617 	ldw	r20,1048(sp)
  80d208:	dcc10517 	ldw	r19,1044(sp)
  80d20c:	dc810417 	ldw	r18,1040(sp)
  80d210:	dc410317 	ldw	r17,1036(sp)
  80d214:	dc010217 	ldw	r16,1032(sp)
  80d218:	dec10c04 	addi	sp,sp,1072
  80d21c:	f800283a 	ret
  80d220:	b1400007 	ldb	r5,0(r22)
  80d224:	89000044 	addi	r4,r17,1
  80d228:	04c00044 	movi	r19,1
  80d22c:	08137e80 	call	8137e8 <strchr>
  80d230:	1025883a 	mov	r18,r2
  80d234:	103fed26 	beq	r2,zero,80d1ec <strstr+0x88>
  80d238:	85a1c83a 	sub	r16,r16,r22
  80d23c:	84ffeb26 	beq	r16,r19,80d1ec <strstr+0x88>
  80d240:	8c09883a 	add	r4,r17,r16
  80d244:	2080492e 	bgeu	r4,r2,80d36c <strstr+0x208>
  80d248:	9829883a 	mov	r20,r19
  80d24c:	008007c4 	movi	r2,31
  80d250:	14004836 	bltu	r2,r16,80d374 <strstr+0x210>
  80d254:	b009883a 	mov	r4,r22
  80d258:	800b883a 	mov	r5,r16
  80d25c:	d80d883a 	mov	r6,sp
  80d260:	080d0300 	call	80d030 <critical_factorization>
  80d264:	d9400017 	ldw	r5,0(sp)
  80d268:	b009883a 	mov	r4,r22
  80d26c:	100d883a 	mov	r6,r2
  80d270:	b14b883a 	add	r5,r22,r5
  80d274:	1027883a 	mov	r19,r2
  80d278:	08124e40 	call	8124e4 <memcmp>
  80d27c:	1000b526 	beq	r2,zero,80d554 <strstr+0x3f0>
  80d280:	84efc83a 	sub	r23,r16,r19
  80d284:	9805883a 	mov	r2,r19
  80d288:	9dc0012e 	bgeu	r19,r23,80d290 <strstr+0x12c>
  80d28c:	b805883a 	mov	r2,r23
  80d290:	10800044 	addi	r2,r2,1
  80d294:	002b883a 	mov	r21,zero
  80d298:	d8800015 	stw	r2,0(sp)
  80d29c:	ac23883a 	add	r17,r21,r16
  80d2a0:	8d0dc83a 	sub	r6,r17,r20
  80d2a4:	9509883a 	add	r4,r18,r20
  80d2a8:	000b883a 	mov	r5,zero
  80d2ac:	08124000 	call	812400 <memchr>
  80d2b0:	10002c1e 	bne	r2,zero,80d364 <strstr+0x200>
  80d2b4:	88002b26 	beq	r17,zero,80d364 <strstr+0x200>
  80d2b8:	9c00122e 	bgeu	r19,r16,80d304 <strstr+0x1a0>
  80d2bc:	acc5883a 	add	r2,r21,r19
  80d2c0:	908b883a 	add	r5,r18,r2
  80d2c4:	b4c9883a 	add	r4,r22,r19
  80d2c8:	20c00003 	ldbu	r3,0(r4)
  80d2cc:	28800003 	ldbu	r2,0(r5)
  80d2d0:	1881331e 	bne	r3,r2,80d7a0 <strstr+0x63c>
  80d2d4:	200d883a 	mov	r6,r4
  80d2d8:	29400044 	addi	r5,r5,1
  80d2dc:	9809883a 	mov	r4,r19
  80d2e0:	9dcf883a 	add	r7,r19,r23
  80d2e4:	00000506 	br	80d2fc <strstr+0x198>
  80d2e8:	30c00043 	ldbu	r3,1(r6)
  80d2ec:	28800003 	ldbu	r2,0(r5)
  80d2f0:	31800044 	addi	r6,r6,1
  80d2f4:	29400044 	addi	r5,r5,1
  80d2f8:	10c1161e 	bne	r2,r3,80d754 <strstr+0x5f0>
  80d2fc:	21000044 	addi	r4,r4,1
  80d300:	21fff91e 	bne	r4,r7,80d2e8 <strstr+0x184>
  80d304:	01ffffc4 	movi	r7,-1
  80d308:	99cd883a 	add	r6,r19,r7
  80d30c:	31c12726 	beq	r6,r7,80d7ac <strstr+0x648>
  80d310:	ac91883a 	add	r8,r21,r18
  80d314:	b187883a 	add	r3,r22,r6
  80d318:	4189883a 	add	r4,r8,r6
  80d31c:	19400003 	ldbu	r5,0(r3)
  80d320:	20800003 	ldbu	r2,0(r4)
  80d324:	2881141e 	bne	r5,r2,80d778 <strstr+0x614>
  80d328:	acc5883a 	add	r2,r21,r19
  80d32c:	9085883a 	add	r2,r18,r2
  80d330:	b4c7883a 	add	r3,r22,r19
  80d334:	197fff84 	addi	r5,r3,-2
  80d338:	113fff84 	addi	r4,r2,-2
  80d33c:	00000506 	br	80d354 <strstr+0x1f0>
  80d340:	28c00003 	ldbu	r3,0(r5)
  80d344:	20800003 	ldbu	r2,0(r4)
  80d348:	297fffc4 	addi	r5,r5,-1
  80d34c:	213fffc4 	addi	r4,r4,-1
  80d350:	10c1091e 	bne	r2,r3,80d778 <strstr+0x614>
  80d354:	31bfffc4 	addi	r6,r6,-1
  80d358:	31fff91e 	bne	r6,r7,80d340 <strstr+0x1dc>
  80d35c:	4025883a 	mov	r18,r8
  80d360:	003fa206 	br	80d1ec <strstr+0x88>
  80d364:	0025883a 	mov	r18,zero
  80d368:	003fa006 	br	80d1ec <strstr+0x88>
  80d36c:	20a9c83a 	sub	r20,r4,r2
  80d370:	003fb606 	br	80d24c <strstr+0xe8>
  80d374:	b009883a 	mov	r4,r22
  80d378:	800b883a 	mov	r5,r16
  80d37c:	d80d883a 	mov	r6,sp
  80d380:	080d0300 	call	80d030 <critical_factorization>
  80d384:	102b883a 	mov	r21,r2
  80d388:	d8c10104 	addi	r3,sp,1028
  80d38c:	d8800104 	addi	r2,sp,4
  80d390:	14000015 	stw	r16,0(r2)
  80d394:	10800104 	addi	r2,r2,4
  80d398:	10fffd1e 	bne	r2,r3,80d390 <strstr+0x22c>
  80d39c:	84ffffc4 	addi	r19,r16,-1
  80d3a0:	b009883a 	mov	r4,r22
  80d3a4:	9807883a 	mov	r3,r19
  80d3a8:	017fffc4 	movi	r5,-1
  80d3ac:	20800003 	ldbu	r2,0(r4)
  80d3b0:	21000044 	addi	r4,r4,1
  80d3b4:	1085883a 	add	r2,r2,r2
  80d3b8:	1085883a 	add	r2,r2,r2
  80d3bc:	16c5883a 	add	r2,r2,sp
  80d3c0:	10c00115 	stw	r3,4(r2)
  80d3c4:	18ffffc4 	addi	r3,r3,-1
  80d3c8:	197ff81e 	bne	r3,r5,80d3ac <strstr+0x248>
  80d3cc:	d9400017 	ldw	r5,0(sp)
  80d3d0:	b009883a 	mov	r4,r22
  80d3d4:	a80d883a 	mov	r6,r21
  80d3d8:	b14b883a 	add	r5,r22,r5
  80d3dc:	08124e40 	call	8124e4 <memcmp>
  80d3e0:	10004226 	beq	r2,zero,80d4ec <strstr+0x388>
  80d3e4:	8547c83a 	sub	r3,r16,r21
  80d3e8:	a805883a 	mov	r2,r21
  80d3ec:	a8c0012e 	bgeu	r21,r3,80d3f4 <strstr+0x290>
  80d3f0:	1805883a 	mov	r2,r3
  80d3f4:	10800044 	addi	r2,r2,1
  80d3f8:	002f883a 	mov	r23,zero
  80d3fc:	b579883a 	add	fp,r22,r21
  80d400:	d8800015 	stw	r2,0(sp)
  80d404:	bc23883a 	add	r17,r23,r16
  80d408:	8d0dc83a 	sub	r6,r17,r20
  80d40c:	9509883a 	add	r4,r18,r20
  80d410:	000b883a 	mov	r5,zero
  80d414:	08124000 	call	812400 <memchr>
  80d418:	103fd21e 	bne	r2,zero,80d364 <strstr+0x200>
  80d41c:	883fd126 	beq	r17,zero,80d364 <strstr+0x200>
  80d420:	9447883a 	add	r3,r18,r17
  80d424:	18bfffc3 	ldbu	r2,-1(r3)
  80d428:	1085883a 	add	r2,r2,r2
  80d42c:	1085883a 	add	r2,r2,r2
  80d430:	16c5883a 	add	r2,r2,sp
  80d434:	10800117 	ldw	r2,4(r2)
  80d438:	1000b61e 	bne	r2,zero,80d714 <strstr+0x5b0>
  80d43c:	acc0102e 	bgeu	r21,r19,80d480 <strstr+0x31c>
  80d440:	bd45883a 	add	r2,r23,r21
  80d444:	9089883a 	add	r4,r18,r2
  80d448:	20c00003 	ldbu	r3,0(r4)
  80d44c:	e0800003 	ldbu	r2,0(fp)
  80d450:	1880af1e 	bne	r3,r2,80d710 <strstr+0x5ac>
  80d454:	21800044 	addi	r6,r4,1
  80d458:	e00b883a 	mov	r5,fp
  80d45c:	a809883a 	mov	r4,r21
  80d460:	00000506 	br	80d478 <strstr+0x314>
  80d464:	28c00043 	ldbu	r3,1(r5)
  80d468:	30800003 	ldbu	r2,0(r6)
  80d46c:	29400044 	addi	r5,r5,1
  80d470:	31800044 	addi	r6,r6,1
  80d474:	10c0bc1e 	bne	r2,r3,80d768 <strstr+0x604>
  80d478:	21000044 	addi	r4,r4,1
  80d47c:	24fff936 	bltu	r4,r19,80d464 <strstr+0x300>
  80d480:	01ffffc4 	movi	r7,-1
  80d484:	a9cd883a 	add	r6,r21,r7
  80d488:	31c0cb26 	beq	r6,r7,80d7b8 <strstr+0x654>
  80d48c:	bc91883a 	add	r8,r23,r18
  80d490:	b187883a 	add	r3,r22,r6
  80d494:	4189883a 	add	r4,r8,r6
  80d498:	19400003 	ldbu	r5,0(r3)
  80d49c:	20800003 	ldbu	r2,0(r4)
  80d4a0:	2880b91e 	bne	r5,r2,80d788 <strstr+0x624>
  80d4a4:	bd45883a 	add	r2,r23,r21
  80d4a8:	9085883a 	add	r2,r18,r2
  80d4ac:	b547883a 	add	r3,r22,r21
  80d4b0:	197fff84 	addi	r5,r3,-2
  80d4b4:	113fff84 	addi	r4,r2,-2
  80d4b8:	00000506 	br	80d4d0 <strstr+0x36c>
  80d4bc:	28c00003 	ldbu	r3,0(r5)
  80d4c0:	20800003 	ldbu	r2,0(r4)
  80d4c4:	297fffc4 	addi	r5,r5,-1
  80d4c8:	213fffc4 	addi	r4,r4,-1
  80d4cc:	10c0ae1e 	bne	r2,r3,80d788 <strstr+0x624>
  80d4d0:	31bfffc4 	addi	r6,r6,-1
  80d4d4:	31fff91e 	bne	r6,r7,80d4bc <strstr+0x358>
  80d4d8:	4025883a 	mov	r18,r8
  80d4dc:	003f4306 	br	80d1ec <strstr+0x88>
  80d4e0:	2821883a 	mov	r16,r5
  80d4e4:	01400044 	movi	r5,1
  80d4e8:	003f3b06 	br	80d1d8 <strstr+0x74>
  80d4ec:	a8bfffc4 	addi	r2,r21,-1
  80d4f0:	002f883a 	mov	r23,zero
  80d4f4:	0039883a 	mov	fp,zero
  80d4f8:	d8810115 	stw	r2,1028(sp)
  80d4fc:	bc23883a 	add	r17,r23,r16
  80d500:	8d0dc83a 	sub	r6,r17,r20
  80d504:	9509883a 	add	r4,r18,r20
  80d508:	000b883a 	mov	r5,zero
  80d50c:	08124000 	call	812400 <memchr>
  80d510:	103f941e 	bne	r2,zero,80d364 <strstr+0x200>
  80d514:	883f9326 	beq	r17,zero,80d364 <strstr+0x200>
  80d518:	9447883a 	add	r3,r18,r17
  80d51c:	18bfffc3 	ldbu	r2,-1(r3)
  80d520:	1085883a 	add	r2,r2,r2
  80d524:	1085883a 	add	r2,r2,r2
  80d528:	16c5883a 	add	r2,r2,sp
  80d52c:	10800117 	ldw	r2,4(r2)
  80d530:	10004526 	beq	r2,zero,80d648 <strstr+0x4e4>
  80d534:	e0000426 	beq	fp,zero,80d548 <strstr+0x3e4>
  80d538:	d8c00017 	ldw	r3,0(sp)
  80d53c:	10c0022e 	bgeu	r2,r3,80d548 <strstr+0x3e4>
  80d540:	80c5c83a 	sub	r2,r16,r3
  80d544:	0039883a 	mov	fp,zero
  80d548:	b8af883a 	add	r23,r23,r2
  80d54c:	8829883a 	mov	r20,r17
  80d550:	003fea06 	br	80d4fc <strstr+0x398>
  80d554:	002f883a 	mov	r23,zero
  80d558:	0023883a 	mov	r17,zero
  80d55c:	9f3fffc4 	addi	fp,r19,-1
  80d560:	bc2b883a 	add	r21,r23,r16
  80d564:	ad0dc83a 	sub	r6,r21,r20
  80d568:	9509883a 	add	r4,r18,r20
  80d56c:	000b883a 	mov	r5,zero
  80d570:	08124000 	call	812400 <memchr>
  80d574:	103f7b1e 	bne	r2,zero,80d364 <strstr+0x200>
  80d578:	a83f7a26 	beq	r21,zero,80d364 <strstr+0x200>
  80d57c:	880b883a 	mov	r5,r17
  80d580:	8cc0012e 	bgeu	r17,r19,80d588 <strstr+0x424>
  80d584:	980b883a 	mov	r5,r19
  80d588:	2c00112e 	bgeu	r5,r16,80d5d0 <strstr+0x46c>
  80d58c:	b945883a 	add	r2,r23,r5
  80d590:	908f883a 	add	r7,r18,r2
  80d594:	b149883a 	add	r4,r22,r5
  80d598:	20c00003 	ldbu	r3,0(r4)
  80d59c:	38800003 	ldbu	r2,0(r7)
  80d5a0:	1880551e 	bne	r3,r2,80d6f8 <strstr+0x594>
  80d5a4:	200d883a 	mov	r6,r4
  80d5a8:	39000044 	addi	r4,r7,1
  80d5ac:	800f883a 	mov	r7,r16
  80d5b0:	00000506 	br	80d5c8 <strstr+0x464>
  80d5b4:	30c00043 	ldbu	r3,1(r6)
  80d5b8:	20800003 	ldbu	r2,0(r4)
  80d5bc:	31800044 	addi	r6,r6,1
  80d5c0:	21000044 	addi	r4,r4,1
  80d5c4:	10c04c1e 	bne	r2,r3,80d6f8 <strstr+0x594>
  80d5c8:	29400044 	addi	r5,r5,1
  80d5cc:	29fff91e 	bne	r5,r7,80d5b4 <strstr+0x450>
  80d5d0:	980f883a 	mov	r7,r19
  80d5d4:	8cc0152e 	bgeu	r17,r19,80d62c <strstr+0x4c8>
  80d5d8:	bc85883a 	add	r2,r23,r18
  80d5dc:	1705883a 	add	r2,r2,fp
  80d5e0:	b707883a 	add	r3,r22,fp
  80d5e4:	19400003 	ldbu	r5,0(r3)
  80d5e8:	11000003 	ldbu	r4,0(r2)
  80d5ec:	29000f1e 	bne	r5,r4,80d62c <strstr+0x4c8>
  80d5f0:	bcc5883a 	add	r2,r23,r19
  80d5f4:	9085883a 	add	r2,r18,r2
  80d5f8:	9d87883a 	add	r3,r19,r22
  80d5fc:	e00f883a 	mov	r7,fp
  80d600:	19bfff84 	addi	r6,r3,-2
  80d604:	117fff84 	addi	r5,r2,-2
  80d608:	89c0082e 	bgeu	r17,r7,80d62c <strstr+0x4c8>
  80d60c:	30c00003 	ldbu	r3,0(r6)
  80d610:	28800003 	ldbu	r2,0(r5)
  80d614:	31bfffc4 	addi	r6,r6,-1
  80d618:	297fffc4 	addi	r5,r5,-1
  80d61c:	393fffc4 	addi	r4,r7,-1
  80d620:	10c0021e 	bne	r2,r3,80d62c <strstr+0x4c8>
  80d624:	200f883a 	mov	r7,r4
  80d628:	89fff836 	bltu	r17,r7,80d60c <strstr+0x4a8>
  80d62c:	88800044 	addi	r2,r17,1
  80d630:	38805936 	bltu	r7,r2,80d798 <strstr+0x634>
  80d634:	d8800017 	ldw	r2,0(sp)
  80d638:	a829883a 	mov	r20,r21
  80d63c:	b8af883a 	add	r23,r23,r2
  80d640:	80a3c83a 	sub	r17,r16,r2
  80d644:	003fc606 	br	80d560 <strstr+0x3fc>
  80d648:	e00d883a 	mov	r6,fp
  80d64c:	e540012e 	bgeu	fp,r21,80d654 <strstr+0x4f0>
  80d650:	a80d883a 	mov	r6,r21
  80d654:	34c0102e 	bgeu	r6,r19,80d698 <strstr+0x534>
  80d658:	b985883a 	add	r2,r23,r6
  80d65c:	908f883a 	add	r7,r18,r2
  80d660:	b189883a 	add	r4,r22,r6
  80d664:	20c00003 	ldbu	r3,0(r4)
  80d668:	38800003 	ldbu	r2,0(r7)
  80d66c:	1880331e 	bne	r3,r2,80d73c <strstr+0x5d8>
  80d670:	200b883a 	mov	r5,r4
  80d674:	39000044 	addi	r4,r7,1
  80d678:	00000506 	br	80d690 <strstr+0x52c>
  80d67c:	28c00043 	ldbu	r3,1(r5)
  80d680:	20800003 	ldbu	r2,0(r4)
  80d684:	29400044 	addi	r5,r5,1
  80d688:	21000044 	addi	r4,r4,1
  80d68c:	10c02b1e 	bne	r2,r3,80d73c <strstr+0x5d8>
  80d690:	31800044 	addi	r6,r6,1
  80d694:	34fff936 	bltu	r6,r19,80d67c <strstr+0x518>
  80d698:	a80f883a 	mov	r7,r21
  80d69c:	e540202e 	bgeu	fp,r21,80d720 <strstr+0x5bc>
  80d6a0:	d8c10117 	ldw	r3,1028(sp)
  80d6a4:	bc85883a 	add	r2,r23,r18
  80d6a8:	10c5883a 	add	r2,r2,r3
  80d6ac:	1d87883a 	add	r3,r3,r22
  80d6b0:	19400003 	ldbu	r5,0(r3)
  80d6b4:	11000003 	ldbu	r4,0(r2)
  80d6b8:	2900191e 	bne	r5,r4,80d720 <strstr+0x5bc>
  80d6bc:	bd45883a 	add	r2,r23,r21
  80d6c0:	d9c10117 	ldw	r7,1028(sp)
  80d6c4:	9085883a 	add	r2,r18,r2
  80d6c8:	b547883a 	add	r3,r22,r21
  80d6cc:	19bfff84 	addi	r6,r3,-2
  80d6d0:	117fff84 	addi	r5,r2,-2
  80d6d4:	e1c0122e 	bgeu	fp,r7,80d720 <strstr+0x5bc>
  80d6d8:	30c00003 	ldbu	r3,0(r6)
  80d6dc:	28800003 	ldbu	r2,0(r5)
  80d6e0:	31bfffc4 	addi	r6,r6,-1
  80d6e4:	297fffc4 	addi	r5,r5,-1
  80d6e8:	393fffc4 	addi	r4,r7,-1
  80d6ec:	10c00c1e 	bne	r2,r3,80d720 <strstr+0x5bc>
  80d6f0:	200f883a 	mov	r7,r4
  80d6f4:	003ff706 	br	80d6d4 <strstr+0x570>
  80d6f8:	2cc5c83a 	sub	r2,r5,r19
  80d6fc:	10800044 	addi	r2,r2,1
  80d700:	b8af883a 	add	r23,r23,r2
  80d704:	0023883a 	mov	r17,zero
  80d708:	a829883a 	mov	r20,r21
  80d70c:	003f9406 	br	80d560 <strstr+0x3fc>
  80d710:	00800044 	movi	r2,1
  80d714:	b8af883a 	add	r23,r23,r2
  80d718:	8829883a 	mov	r20,r17
  80d71c:	003f3906 	br	80d404 <strstr+0x2a0>
  80d720:	e0800044 	addi	r2,fp,1
  80d724:	38801c36 	bltu	r7,r2,80d798 <strstr+0x634>
  80d728:	d8800017 	ldw	r2,0(sp)
  80d72c:	8829883a 	mov	r20,r17
  80d730:	b8af883a 	add	r23,r23,r2
  80d734:	80b9c83a 	sub	fp,r16,r2
  80d738:	003f7006 	br	80d4fc <strstr+0x398>
  80d73c:	3545c83a 	sub	r2,r6,r21
  80d740:	10800044 	addi	r2,r2,1
  80d744:	b8af883a 	add	r23,r23,r2
  80d748:	0039883a 	mov	fp,zero
  80d74c:	8829883a 	mov	r20,r17
  80d750:	003f6a06 	br	80d4fc <strstr+0x398>
  80d754:	24c5c83a 	sub	r2,r4,r19
  80d758:	10800044 	addi	r2,r2,1
  80d75c:	a8ab883a 	add	r21,r21,r2
  80d760:	8829883a 	mov	r20,r17
  80d764:	003ecd06 	br	80d29c <strstr+0x138>
  80d768:	2545c83a 	sub	r2,r4,r21
  80d76c:	10800044 	addi	r2,r2,1
  80d770:	b8af883a 	add	r23,r23,r2
  80d774:	003fe806 	br	80d718 <strstr+0x5b4>
  80d778:	d8800017 	ldw	r2,0(sp)
  80d77c:	8829883a 	mov	r20,r17
  80d780:	a8ab883a 	add	r21,r21,r2
  80d784:	003ec506 	br	80d29c <strstr+0x138>
  80d788:	d8800017 	ldw	r2,0(sp)
  80d78c:	8829883a 	mov	r20,r17
  80d790:	b8af883a 	add	r23,r23,r2
  80d794:	003f1b06 	br	80d404 <strstr+0x2a0>
  80d798:	95e5883a 	add	r18,r18,r23
  80d79c:	003e9306 	br	80d1ec <strstr+0x88>
  80d7a0:	00800044 	movi	r2,1
  80d7a4:	a8ab883a 	add	r21,r21,r2
  80d7a8:	003fed06 	br	80d760 <strstr+0x5fc>
  80d7ac:	ac91883a 	add	r8,r21,r18
  80d7b0:	4025883a 	mov	r18,r8
  80d7b4:	003e8d06 	br	80d1ec <strstr+0x88>
  80d7b8:	bc91883a 	add	r8,r23,r18
  80d7bc:	4025883a 	mov	r18,r8
  80d7c0:	003e8a06 	br	80d1ec <strstr+0x88>

0080d7c4 <_strtol_r>:
  80d7c4:	defff304 	addi	sp,sp,-52
  80d7c8:	008020b4 	movhi	r2,130
  80d7cc:	108a6a04 	addi	r2,r2,10664
  80d7d0:	dcc00615 	stw	r19,24(sp)
  80d7d4:	14c00017 	ldw	r19,0(r2)
  80d7d8:	ddc00a15 	stw	r23,40(sp)
  80d7dc:	dc000315 	stw	r16,12(sp)
  80d7e0:	dfc00c15 	stw	ra,48(sp)
  80d7e4:	df000b15 	stw	fp,44(sp)
  80d7e8:	dd800915 	stw	r22,36(sp)
  80d7ec:	dd400815 	stw	r21,32(sp)
  80d7f0:	dd000715 	stw	r20,28(sp)
  80d7f4:	dc800515 	stw	r18,20(sp)
  80d7f8:	dc400415 	stw	r17,16(sp)
  80d7fc:	282f883a 	mov	r23,r5
  80d800:	d9000015 	stw	r4,0(sp)
  80d804:	d9800115 	stw	r6,4(sp)
  80d808:	2821883a 	mov	r16,r5
  80d80c:	84400007 	ldb	r17,0(r16)
  80d810:	84000044 	addi	r16,r16,1
  80d814:	9c47883a 	add	r3,r19,r17
  80d818:	18800003 	ldbu	r2,0(r3)
  80d81c:	1080020c 	andi	r2,r2,8
  80d820:	103ffa1e 	bne	r2,zero,80d80c <_strtol_r+0x48>
  80d824:	00800b44 	movi	r2,45
  80d828:	88805c26 	beq	r17,r2,80d99c <_strtol_r+0x1d8>
  80d82c:	00800ac4 	movi	r2,43
  80d830:	88805726 	beq	r17,r2,80d990 <_strtol_r+0x1cc>
  80d834:	0039883a 	mov	fp,zero
  80d838:	3807003a 	cmpeq	r3,r7,zero
  80d83c:	1800431e 	bne	r3,zero,80d94c <_strtol_r+0x188>
  80d840:	00800404 	movi	r2,16
  80d844:	38804126 	beq	r7,r2,80d94c <_strtol_r+0x188>
  80d848:	3829883a 	mov	r20,r7
  80d84c:	e02cc03a 	cmpne	r22,fp,zero
  80d850:	b0004b1e 	bne	r22,zero,80d980 <_strtol_r+0x1bc>
  80d854:	04a00034 	movhi	r18,32768
  80d858:	94bfffc4 	addi	r18,r18,-1
  80d85c:	9009883a 	mov	r4,r18
  80d860:	a00b883a 	mov	r5,r20
  80d864:	d9c00215 	stw	r7,8(sp)
  80d868:	080b2d80 	call	80b2d8 <__umodsi3>
  80d86c:	9009883a 	mov	r4,r18
  80d870:	a00b883a 	mov	r5,r20
  80d874:	102b883a 	mov	r21,r2
  80d878:	080b2d00 	call	80b2d0 <__udivsi3>
  80d87c:	1011883a 	mov	r8,r2
  80d880:	9c45883a 	add	r2,r19,r17
  80d884:	11000003 	ldbu	r4,0(r2)
  80d888:	000b883a 	mov	r5,zero
  80d88c:	000d883a 	mov	r6,zero
  80d890:	20c0010c 	andi	r3,r4,4
  80d894:	d9c00217 	ldw	r7,8(sp)
  80d898:	18000e26 	beq	r3,zero,80d8d4 <_strtol_r+0x110>
  80d89c:	88fff404 	addi	r3,r17,-48
  80d8a0:	19c0140e 	bge	r3,r7,80d8f4 <_strtol_r+0x130>
  80d8a4:	30003116 	blt	r6,zero,80d96c <_strtol_r+0x1a8>
  80d8a8:	41403036 	bltu	r8,r5,80d96c <_strtol_r+0x1a8>
  80d8ac:	2a002e26 	beq	r5,r8,80d968 <_strtol_r+0x1a4>
  80d8b0:	2d05383a 	mul	r2,r5,r20
  80d8b4:	01800044 	movi	r6,1
  80d8b8:	10cb883a 	add	r5,r2,r3
  80d8bc:	84400007 	ldb	r17,0(r16)
  80d8c0:	84000044 	addi	r16,r16,1
  80d8c4:	9c45883a 	add	r2,r19,r17
  80d8c8:	11000003 	ldbu	r4,0(r2)
  80d8cc:	20c0010c 	andi	r3,r4,4
  80d8d0:	183ff21e 	bne	r3,zero,80d89c <_strtol_r+0xd8>
  80d8d4:	208000cc 	andi	r2,r4,3
  80d8d8:	10000626 	beq	r2,zero,80d8f4 <_strtol_r+0x130>
  80d8dc:	2080004c 	andi	r2,r4,1
  80d8e0:	1005003a 	cmpeq	r2,r2,zero
  80d8e4:	1000231e 	bne	r2,zero,80d974 <_strtol_r+0x1b0>
  80d8e8:	00800dc4 	movi	r2,55
  80d8ec:	8887c83a 	sub	r3,r17,r2
  80d8f0:	19ffec16 	blt	r3,r7,80d8a4 <_strtol_r+0xe0>
  80d8f4:	30002d16 	blt	r6,zero,80d9ac <_strtol_r+0x1e8>
  80d8f8:	b000231e 	bne	r22,zero,80d988 <_strtol_r+0x1c4>
  80d8fc:	2807883a 	mov	r3,r5
  80d900:	d8800117 	ldw	r2,4(sp)
  80d904:	10000426 	beq	r2,zero,80d918 <_strtol_r+0x154>
  80d908:	30000126 	beq	r6,zero,80d910 <_strtol_r+0x14c>
  80d90c:	85ffffc4 	addi	r23,r16,-1
  80d910:	d9000117 	ldw	r4,4(sp)
  80d914:	25c00015 	stw	r23,0(r4)
  80d918:	1805883a 	mov	r2,r3
  80d91c:	dfc00c17 	ldw	ra,48(sp)
  80d920:	df000b17 	ldw	fp,44(sp)
  80d924:	ddc00a17 	ldw	r23,40(sp)
  80d928:	dd800917 	ldw	r22,36(sp)
  80d92c:	dd400817 	ldw	r21,32(sp)
  80d930:	dd000717 	ldw	r20,28(sp)
  80d934:	dcc00617 	ldw	r19,24(sp)
  80d938:	dc800517 	ldw	r18,20(sp)
  80d93c:	dc400417 	ldw	r17,16(sp)
  80d940:	dc000317 	ldw	r16,12(sp)
  80d944:	dec00d04 	addi	sp,sp,52
  80d948:	f800283a 	ret
  80d94c:	00800c04 	movi	r2,48
  80d950:	88801d26 	beq	r17,r2,80d9c8 <_strtol_r+0x204>
  80d954:	183fbc26 	beq	r3,zero,80d848 <_strtol_r+0x84>
  80d958:	00800c04 	movi	r2,48
  80d95c:	88802726 	beq	r17,r2,80d9fc <_strtol_r+0x238>
  80d960:	01c00284 	movi	r7,10
  80d964:	003fb806 	br	80d848 <_strtol_r+0x84>
  80d968:	a8ffd10e 	bge	r21,r3,80d8b0 <_strtol_r+0xec>
  80d96c:	01bfffc4 	movi	r6,-1
  80d970:	003fd206 	br	80d8bc <_strtol_r+0xf8>
  80d974:	008015c4 	movi	r2,87
  80d978:	8887c83a 	sub	r3,r17,r2
  80d97c:	003fdc06 	br	80d8f0 <_strtol_r+0x12c>
  80d980:	04a00034 	movhi	r18,32768
  80d984:	003fb506 	br	80d85c <_strtol_r+0x98>
  80d988:	0147c83a 	sub	r3,zero,r5
  80d98c:	003fdc06 	br	80d900 <_strtol_r+0x13c>
  80d990:	84400007 	ldb	r17,0(r16)
  80d994:	84000044 	addi	r16,r16,1
  80d998:	003fa606 	br	80d834 <_strtol_r+0x70>
  80d99c:	84400007 	ldb	r17,0(r16)
  80d9a0:	07000044 	movi	fp,1
  80d9a4:	84000044 	addi	r16,r16,1
  80d9a8:	003fa306 	br	80d838 <_strtol_r+0x74>
  80d9ac:	e005003a 	cmpeq	r2,fp,zero
  80d9b0:	10000f1e 	bne	r2,zero,80d9f0 <_strtol_r+0x22c>
  80d9b4:	00e00034 	movhi	r3,32768
  80d9b8:	d9000017 	ldw	r4,0(sp)
  80d9bc:	00800884 	movi	r2,34
  80d9c0:	20800015 	stw	r2,0(r4)
  80d9c4:	003fce06 	br	80d900 <_strtol_r+0x13c>
  80d9c8:	81000007 	ldb	r4,0(r16)
  80d9cc:	00801e04 	movi	r2,120
  80d9d0:	20800226 	beq	r4,r2,80d9dc <_strtol_r+0x218>
  80d9d4:	00801604 	movi	r2,88
  80d9d8:	20bfde1e 	bne	r4,r2,80d954 <_strtol_r+0x190>
  80d9dc:	84400047 	ldb	r17,1(r16)
  80d9e0:	01c00404 	movi	r7,16
  80d9e4:	84000084 	addi	r16,r16,2
  80d9e8:	3829883a 	mov	r20,r7
  80d9ec:	003f9706 	br	80d84c <_strtol_r+0x88>
  80d9f0:	00e00034 	movhi	r3,32768
  80d9f4:	18ffffc4 	addi	r3,r3,-1
  80d9f8:	003fef06 	br	80d9b8 <_strtol_r+0x1f4>
  80d9fc:	01c00204 	movi	r7,8
  80da00:	3829883a 	mov	r20,r7
  80da04:	003f9106 	br	80d84c <_strtol_r+0x88>

0080da08 <strtol>:
  80da08:	008020b4 	movhi	r2,130
  80da0c:	108a6b04 	addi	r2,r2,10668
  80da10:	2013883a 	mov	r9,r4
  80da14:	11000017 	ldw	r4,0(r2)
  80da18:	2805883a 	mov	r2,r5
  80da1c:	300f883a 	mov	r7,r6
  80da20:	480b883a 	mov	r5,r9
  80da24:	100d883a 	mov	r6,r2
  80da28:	080d7c41 	jmpi	80d7c4 <_strtol_r>

0080da2c <__sprint_r>:
  80da2c:	30800217 	ldw	r2,8(r6)
  80da30:	defffe04 	addi	sp,sp,-8
  80da34:	dc000015 	stw	r16,0(sp)
  80da38:	dfc00115 	stw	ra,4(sp)
  80da3c:	3021883a 	mov	r16,r6
  80da40:	0007883a 	mov	r3,zero
  80da44:	1000061e 	bne	r2,zero,80da60 <__sprint_r+0x34>
  80da48:	1805883a 	mov	r2,r3
  80da4c:	30000115 	stw	zero,4(r6)
  80da50:	dfc00117 	ldw	ra,4(sp)
  80da54:	dc000017 	ldw	r16,0(sp)
  80da58:	dec00204 	addi	sp,sp,8
  80da5c:	f800283a 	ret
  80da60:	0811b8c0 	call	811b8c <__sfvwrite_r>
  80da64:	1007883a 	mov	r3,r2
  80da68:	1805883a 	mov	r2,r3
  80da6c:	80000115 	stw	zero,4(r16)
  80da70:	80000215 	stw	zero,8(r16)
  80da74:	dfc00117 	ldw	ra,4(sp)
  80da78:	dc000017 	ldw	r16,0(sp)
  80da7c:	dec00204 	addi	sp,sp,8
  80da80:	f800283a 	ret

0080da84 <___vfprintf_internal_r>:
  80da84:	defea404 	addi	sp,sp,-1392
  80da88:	dd815815 	stw	r22,1376(sp)
  80da8c:	dc015215 	stw	r16,1352(sp)
  80da90:	d9c15115 	stw	r7,1348(sp)
  80da94:	dfc15b15 	stw	ra,1388(sp)
  80da98:	df015a15 	stw	fp,1384(sp)
  80da9c:	ddc15915 	stw	r23,1380(sp)
  80daa0:	dd415715 	stw	r21,1372(sp)
  80daa4:	dd015615 	stw	r20,1368(sp)
  80daa8:	dcc15515 	stw	r19,1364(sp)
  80daac:	dc815415 	stw	r18,1360(sp)
  80dab0:	dc415315 	stw	r17,1356(sp)
  80dab4:	282d883a 	mov	r22,r5
  80dab8:	3021883a 	mov	r16,r6
  80dabc:	d9014f15 	stw	r4,1340(sp)
  80dac0:	08121b00 	call	8121b0 <_localeconv_r>
  80dac4:	10800017 	ldw	r2,0(r2)
  80dac8:	d9c15117 	ldw	r7,1348(sp)
  80dacc:	d8814915 	stw	r2,1316(sp)
  80dad0:	d8814f17 	ldw	r2,1340(sp)
  80dad4:	10000226 	beq	r2,zero,80dae0 <___vfprintf_internal_r+0x5c>
  80dad8:	10800e17 	ldw	r2,56(r2)
  80dadc:	10020d26 	beq	r2,zero,80e314 <___vfprintf_internal_r+0x890>
  80dae0:	b080030b 	ldhu	r2,12(r22)
  80dae4:	1080020c 	andi	r2,r2,8
  80dae8:	10020e26 	beq	r2,zero,80e324 <___vfprintf_internal_r+0x8a0>
  80daec:	b0800417 	ldw	r2,16(r22)
  80daf0:	10020c26 	beq	r2,zero,80e324 <___vfprintf_internal_r+0x8a0>
  80daf4:	b200030b 	ldhu	r8,12(r22)
  80daf8:	00800284 	movi	r2,10
  80dafc:	40c0068c 	andi	r3,r8,26
  80db00:	18802f1e 	bne	r3,r2,80dbc0 <___vfprintf_internal_r+0x13c>
  80db04:	b080038f 	ldh	r2,14(r22)
  80db08:	10002d16 	blt	r2,zero,80dbc0 <___vfprintf_internal_r+0x13c>
  80db0c:	b240038b 	ldhu	r9,14(r22)
  80db10:	b2800717 	ldw	r10,28(r22)
  80db14:	b2c00917 	ldw	r11,36(r22)
  80db18:	d9014f17 	ldw	r4,1340(sp)
  80db1c:	dc402904 	addi	r17,sp,164
  80db20:	d8804004 	addi	r2,sp,256
  80db24:	00c10004 	movi	r3,1024
  80db28:	423fff4c 	andi	r8,r8,65533
  80db2c:	800d883a 	mov	r6,r16
  80db30:	880b883a 	mov	r5,r17
  80db34:	da002c0d 	sth	r8,176(sp)
  80db38:	da402c8d 	sth	r9,178(sp)
  80db3c:	da803015 	stw	r10,192(sp)
  80db40:	dac03215 	stw	r11,200(sp)
  80db44:	d8802d15 	stw	r2,180(sp)
  80db48:	d8c02e15 	stw	r3,184(sp)
  80db4c:	d8802915 	stw	r2,164(sp)
  80db50:	d8c02b15 	stw	r3,172(sp)
  80db54:	d8002f15 	stw	zero,188(sp)
  80db58:	080da840 	call	80da84 <___vfprintf_internal_r>
  80db5c:	d8814b15 	stw	r2,1324(sp)
  80db60:	10000416 	blt	r2,zero,80db74 <___vfprintf_internal_r+0xf0>
  80db64:	d9014f17 	ldw	r4,1340(sp)
  80db68:	880b883a 	mov	r5,r17
  80db6c:	081125c0 	call	81125c <_fflush_r>
  80db70:	1002321e 	bne	r2,zero,80e43c <___vfprintf_internal_r+0x9b8>
  80db74:	d8802c0b 	ldhu	r2,176(sp)
  80db78:	1080100c 	andi	r2,r2,64
  80db7c:	10000326 	beq	r2,zero,80db8c <___vfprintf_internal_r+0x108>
  80db80:	b080030b 	ldhu	r2,12(r22)
  80db84:	10801014 	ori	r2,r2,64
  80db88:	b080030d 	sth	r2,12(r22)
  80db8c:	d8814b17 	ldw	r2,1324(sp)
  80db90:	dfc15b17 	ldw	ra,1388(sp)
  80db94:	df015a17 	ldw	fp,1384(sp)
  80db98:	ddc15917 	ldw	r23,1380(sp)
  80db9c:	dd815817 	ldw	r22,1376(sp)
  80dba0:	dd415717 	ldw	r21,1372(sp)
  80dba4:	dd015617 	ldw	r20,1368(sp)
  80dba8:	dcc15517 	ldw	r19,1364(sp)
  80dbac:	dc815417 	ldw	r18,1360(sp)
  80dbb0:	dc415317 	ldw	r17,1356(sp)
  80dbb4:	dc015217 	ldw	r16,1352(sp)
  80dbb8:	dec15c04 	addi	sp,sp,1392
  80dbbc:	f800283a 	ret
  80dbc0:	0005883a 	mov	r2,zero
  80dbc4:	0007883a 	mov	r3,zero
  80dbc8:	dd401904 	addi	r21,sp,100
  80dbcc:	d8814215 	stw	r2,1288(sp)
  80dbd0:	802f883a 	mov	r23,r16
  80dbd4:	d8c14315 	stw	r3,1292(sp)
  80dbd8:	d8014b15 	stw	zero,1324(sp)
  80dbdc:	d8014815 	stw	zero,1312(sp)
  80dbe0:	d8014415 	stw	zero,1296(sp)
  80dbe4:	d8014715 	stw	zero,1308(sp)
  80dbe8:	dd400c15 	stw	r21,48(sp)
  80dbec:	d8000e15 	stw	zero,56(sp)
  80dbf0:	d8000d15 	stw	zero,52(sp)
  80dbf4:	b8800007 	ldb	r2,0(r23)
  80dbf8:	10001926 	beq	r2,zero,80dc60 <___vfprintf_internal_r+0x1dc>
  80dbfc:	00c00944 	movi	r3,37
  80dc00:	10c01726 	beq	r2,r3,80dc60 <___vfprintf_internal_r+0x1dc>
  80dc04:	b821883a 	mov	r16,r23
  80dc08:	00000106 	br	80dc10 <___vfprintf_internal_r+0x18c>
  80dc0c:	10c00326 	beq	r2,r3,80dc1c <___vfprintf_internal_r+0x198>
  80dc10:	84000044 	addi	r16,r16,1
  80dc14:	80800007 	ldb	r2,0(r16)
  80dc18:	103ffc1e 	bne	r2,zero,80dc0c <___vfprintf_internal_r+0x188>
  80dc1c:	85e7c83a 	sub	r19,r16,r23
  80dc20:	98000e26 	beq	r19,zero,80dc5c <___vfprintf_internal_r+0x1d8>
  80dc24:	dc800e17 	ldw	r18,56(sp)
  80dc28:	dc400d17 	ldw	r17,52(sp)
  80dc2c:	008001c4 	movi	r2,7
  80dc30:	94e5883a 	add	r18,r18,r19
  80dc34:	8c400044 	addi	r17,r17,1
  80dc38:	adc00015 	stw	r23,0(r21)
  80dc3c:	dc800e15 	stw	r18,56(sp)
  80dc40:	acc00115 	stw	r19,4(r21)
  80dc44:	dc400d15 	stw	r17,52(sp)
  80dc48:	14428b16 	blt	r2,r17,80e678 <___vfprintf_internal_r+0xbf4>
  80dc4c:	ad400204 	addi	r21,r21,8
  80dc50:	d9014b17 	ldw	r4,1324(sp)
  80dc54:	24c9883a 	add	r4,r4,r19
  80dc58:	d9014b15 	stw	r4,1324(sp)
  80dc5c:	802f883a 	mov	r23,r16
  80dc60:	b8800007 	ldb	r2,0(r23)
  80dc64:	10013c26 	beq	r2,zero,80e158 <___vfprintf_internal_r+0x6d4>
  80dc68:	bdc00044 	addi	r23,r23,1
  80dc6c:	d8000405 	stb	zero,16(sp)
  80dc70:	b8c00007 	ldb	r3,0(r23)
  80dc74:	04ffffc4 	movi	r19,-1
  80dc78:	d8014c15 	stw	zero,1328(sp)
  80dc7c:	d8014a15 	stw	zero,1320(sp)
  80dc80:	d8c14d15 	stw	r3,1332(sp)
  80dc84:	bdc00044 	addi	r23,r23,1
  80dc88:	d9414d17 	ldw	r5,1332(sp)
  80dc8c:	00801604 	movi	r2,88
  80dc90:	28fff804 	addi	r3,r5,-32
  80dc94:	10c06036 	bltu	r2,r3,80de18 <___vfprintf_internal_r+0x394>
  80dc98:	18c5883a 	add	r2,r3,r3
  80dc9c:	1085883a 	add	r2,r2,r2
  80dca0:	00c02074 	movhi	r3,129
  80dca4:	18f72d04 	addi	r3,r3,-9036
  80dca8:	10c5883a 	add	r2,r2,r3
  80dcac:	11000017 	ldw	r4,0(r2)
  80dcb0:	2000683a 	jmp	r4
  80dcb4:	0080ec28 	cmpgeui	r2,zero,944
  80dcb8:	0080de18 	cmpnei	r2,zero,888
  80dcbc:	0080de18 	cmpnei	r2,zero,888
  80dcc0:	0080ec14 	movui	r2,944
  80dcc4:	0080de18 	cmpnei	r2,zero,888
  80dcc8:	0080de18 	cmpnei	r2,zero,888
  80dccc:	0080de18 	cmpnei	r2,zero,888
  80dcd0:	0080de18 	cmpnei	r2,zero,888
  80dcd4:	0080de18 	cmpnei	r2,zero,888
  80dcd8:	0080de18 	cmpnei	r2,zero,888
  80dcdc:	0080e9f4 	movhi	r2,935
  80dce0:	0080ec04 	movi	r2,944
  80dce4:	0080de18 	cmpnei	r2,zero,888
  80dce8:	0080ea0c 	andi	r2,zero,936
  80dcec:	0080eca0 	cmpeqi	r2,zero,946
  80dcf0:	0080de18 	cmpnei	r2,zero,888
  80dcf4:	0080ec8c 	andi	r2,zero,946
  80dcf8:	0080ec54 	movui	r2,945
  80dcfc:	0080ec54 	movui	r2,945
  80dd00:	0080ec54 	movui	r2,945
  80dd04:	0080ec54 	movui	r2,945
  80dd08:	0080ec54 	movui	r2,945
  80dd0c:	0080ec54 	movui	r2,945
  80dd10:	0080ec54 	movui	r2,945
  80dd14:	0080ec54 	movui	r2,945
  80dd18:	0080ec54 	movui	r2,945
  80dd1c:	0080de18 	cmpnei	r2,zero,888
  80dd20:	0080de18 	cmpnei	r2,zero,888
  80dd24:	0080de18 	cmpnei	r2,zero,888
  80dd28:	0080de18 	cmpnei	r2,zero,888
  80dd2c:	0080de18 	cmpnei	r2,zero,888
  80dd30:	0080de18 	cmpnei	r2,zero,888
  80dd34:	0080de18 	cmpnei	r2,zero,888
  80dd38:	0080de18 	cmpnei	r2,zero,888
  80dd3c:	0080de18 	cmpnei	r2,zero,888
  80dd40:	0080de18 	cmpnei	r2,zero,888
  80dd44:	0080e470 	cmpltui	r2,zero,913
  80dd48:	0080eadc 	xori	r2,zero,939
  80dd4c:	0080de18 	cmpnei	r2,zero,888
  80dd50:	0080eadc 	xori	r2,zero,939
  80dd54:	0080de18 	cmpnei	r2,zero,888
  80dd58:	0080de18 	cmpnei	r2,zero,888
  80dd5c:	0080de18 	cmpnei	r2,zero,888
  80dd60:	0080de18 	cmpnei	r2,zero,888
  80dd64:	0080ec40 	call	80ec4 <__alt_mem_sdram-0x77f13c>
  80dd68:	0080de18 	cmpnei	r2,zero,888
  80dd6c:	0080de18 	cmpnei	r2,zero,888
  80dd70:	0080e524 	muli	r2,zero,916
  80dd74:	0080de18 	cmpnei	r2,zero,888
  80dd78:	0080de18 	cmpnei	r2,zero,888
  80dd7c:	0080de18 	cmpnei	r2,zero,888
  80dd80:	0080de18 	cmpnei	r2,zero,888
  80dd84:	0080de18 	cmpnei	r2,zero,888
  80dd88:	0080e570 	cmpltui	r2,zero,917
  80dd8c:	0080de18 	cmpnei	r2,zero,888
  80dd90:	0080de18 	cmpnei	r2,zero,888
  80dd94:	0080eb90 	cmplti	r2,zero,942
  80dd98:	0080de18 	cmpnei	r2,zero,888
  80dd9c:	0080de18 	cmpnei	r2,zero,888
  80dda0:	0080de18 	cmpnei	r2,zero,888
  80dda4:	0080de18 	cmpnei	r2,zero,888
  80dda8:	0080de18 	cmpnei	r2,zero,888
  80ddac:	0080de18 	cmpnei	r2,zero,888
  80ddb0:	0080de18 	cmpnei	r2,zero,888
  80ddb4:	0080de18 	cmpnei	r2,zero,888
  80ddb8:	0080de18 	cmpnei	r2,zero,888
  80ddbc:	0080de18 	cmpnei	r2,zero,888
  80ddc0:	0080eb64 	muli	r2,zero,941
  80ddc4:	0080e47c 	xorhi	r2,zero,913
  80ddc8:	0080eadc 	xori	r2,zero,939
  80ddcc:	0080eadc 	xori	r2,zero,939
  80ddd0:	0080eadc 	xori	r2,zero,939
  80ddd4:	0080eac8 	cmpgei	r2,zero,939
  80ddd8:	0080e47c 	xorhi	r2,zero,913
  80dddc:	0080de18 	cmpnei	r2,zero,888
  80dde0:	0080de18 	cmpnei	r2,zero,888
  80dde4:	0080ea50 	cmplti	r2,zero,937
  80dde8:	0080de18 	cmpnei	r2,zero,888
  80ddec:	0080ea20 	cmpeqi	r2,zero,936
  80ddf0:	0080e530 	cmpltui	r2,zero,916
  80ddf4:	0080ea80 	call	80ea8 <__alt_mem_sdram-0x77f158>
  80ddf8:	0080ea6c 	andhi	r2,zero,937
  80ddfc:	0080de18 	cmpnei	r2,zero,888
  80de00:	0080ecfc 	xorhi	r2,zero,947
  80de04:	0080de18 	cmpnei	r2,zero,888
  80de08:	0080e57c 	xorhi	r2,zero,917
  80de0c:	0080de18 	cmpnei	r2,zero,888
  80de10:	0080de18 	cmpnei	r2,zero,888
  80de14:	0080ebf4 	movhi	r2,943
  80de18:	d9014d17 	ldw	r4,1332(sp)
  80de1c:	2000ce26 	beq	r4,zero,80e158 <___vfprintf_internal_r+0x6d4>
  80de20:	01400044 	movi	r5,1
  80de24:	d9800f04 	addi	r6,sp,60
  80de28:	d9c14015 	stw	r7,1280(sp)
  80de2c:	d9414515 	stw	r5,1300(sp)
  80de30:	d9814115 	stw	r6,1284(sp)
  80de34:	280f883a 	mov	r7,r5
  80de38:	d9000f05 	stb	r4,60(sp)
  80de3c:	d8000405 	stb	zero,16(sp)
  80de40:	d8014615 	stw	zero,1304(sp)
  80de44:	d8c14c17 	ldw	r3,1328(sp)
  80de48:	1880008c 	andi	r2,r3,2
  80de4c:	1005003a 	cmpeq	r2,r2,zero
  80de50:	d8815015 	stw	r2,1344(sp)
  80de54:	1000031e 	bne	r2,zero,80de64 <___vfprintf_internal_r+0x3e0>
  80de58:	d9014517 	ldw	r4,1300(sp)
  80de5c:	21000084 	addi	r4,r4,2
  80de60:	d9014515 	stw	r4,1300(sp)
  80de64:	d9414c17 	ldw	r5,1328(sp)
  80de68:	2940210c 	andi	r5,r5,132
  80de6c:	d9414e15 	stw	r5,1336(sp)
  80de70:	28002d1e 	bne	r5,zero,80df28 <___vfprintf_internal_r+0x4a4>
  80de74:	d9814a17 	ldw	r6,1320(sp)
  80de78:	d8814517 	ldw	r2,1300(sp)
  80de7c:	30a1c83a 	sub	r16,r6,r2
  80de80:	0400290e 	bge	zero,r16,80df28 <___vfprintf_internal_r+0x4a4>
  80de84:	00800404 	movi	r2,16
  80de88:	1404580e 	bge	r2,r16,80efec <___vfprintf_internal_r+0x1568>
  80de8c:	dc800e17 	ldw	r18,56(sp)
  80de90:	dc400d17 	ldw	r17,52(sp)
  80de94:	1027883a 	mov	r19,r2
  80de98:	070020b4 	movhi	fp,130
  80de9c:	e701f284 	addi	fp,fp,1994
  80dea0:	050001c4 	movi	r20,7
  80dea4:	00000306 	br	80deb4 <___vfprintf_internal_r+0x430>
  80dea8:	843ffc04 	addi	r16,r16,-16
  80deac:	ad400204 	addi	r21,r21,8
  80deb0:	9c00130e 	bge	r19,r16,80df00 <___vfprintf_internal_r+0x47c>
  80deb4:	94800404 	addi	r18,r18,16
  80deb8:	8c400044 	addi	r17,r17,1
  80debc:	af000015 	stw	fp,0(r21)
  80dec0:	acc00115 	stw	r19,4(r21)
  80dec4:	dc800e15 	stw	r18,56(sp)
  80dec8:	dc400d15 	stw	r17,52(sp)
  80decc:	a47ff60e 	bge	r20,r17,80dea8 <___vfprintf_internal_r+0x424>
  80ded0:	d9014f17 	ldw	r4,1340(sp)
  80ded4:	b00b883a 	mov	r5,r22
  80ded8:	d9800c04 	addi	r6,sp,48
  80dedc:	d9c15115 	stw	r7,1348(sp)
  80dee0:	080da2c0 	call	80da2c <__sprint_r>
  80dee4:	d9c15117 	ldw	r7,1348(sp)
  80dee8:	10009e1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80deec:	843ffc04 	addi	r16,r16,-16
  80def0:	dc800e17 	ldw	r18,56(sp)
  80def4:	dc400d17 	ldw	r17,52(sp)
  80def8:	dd401904 	addi	r21,sp,100
  80defc:	9c3fed16 	blt	r19,r16,80deb4 <___vfprintf_internal_r+0x430>
  80df00:	9425883a 	add	r18,r18,r16
  80df04:	8c400044 	addi	r17,r17,1
  80df08:	008001c4 	movi	r2,7
  80df0c:	af000015 	stw	fp,0(r21)
  80df10:	ac000115 	stw	r16,4(r21)
  80df14:	dc800e15 	stw	r18,56(sp)
  80df18:	dc400d15 	stw	r17,52(sp)
  80df1c:	1441f516 	blt	r2,r17,80e6f4 <___vfprintf_internal_r+0xc70>
  80df20:	ad400204 	addi	r21,r21,8
  80df24:	00000206 	br	80df30 <___vfprintf_internal_r+0x4ac>
  80df28:	dc800e17 	ldw	r18,56(sp)
  80df2c:	dc400d17 	ldw	r17,52(sp)
  80df30:	d8800407 	ldb	r2,16(sp)
  80df34:	10000b26 	beq	r2,zero,80df64 <___vfprintf_internal_r+0x4e0>
  80df38:	00800044 	movi	r2,1
  80df3c:	94800044 	addi	r18,r18,1
  80df40:	8c400044 	addi	r17,r17,1
  80df44:	a8800115 	stw	r2,4(r21)
  80df48:	d8c00404 	addi	r3,sp,16
  80df4c:	008001c4 	movi	r2,7
  80df50:	a8c00015 	stw	r3,0(r21)
  80df54:	dc800e15 	stw	r18,56(sp)
  80df58:	dc400d15 	stw	r17,52(sp)
  80df5c:	1441da16 	blt	r2,r17,80e6c8 <___vfprintf_internal_r+0xc44>
  80df60:	ad400204 	addi	r21,r21,8
  80df64:	d9015017 	ldw	r4,1344(sp)
  80df68:	20000b1e 	bne	r4,zero,80df98 <___vfprintf_internal_r+0x514>
  80df6c:	d8800444 	addi	r2,sp,17
  80df70:	94800084 	addi	r18,r18,2
  80df74:	8c400044 	addi	r17,r17,1
  80df78:	a8800015 	stw	r2,0(r21)
  80df7c:	00c00084 	movi	r3,2
  80df80:	008001c4 	movi	r2,7
  80df84:	a8c00115 	stw	r3,4(r21)
  80df88:	dc800e15 	stw	r18,56(sp)
  80df8c:	dc400d15 	stw	r17,52(sp)
  80df90:	1441c216 	blt	r2,r17,80e69c <___vfprintf_internal_r+0xc18>
  80df94:	ad400204 	addi	r21,r21,8
  80df98:	d9414e17 	ldw	r5,1336(sp)
  80df9c:	00802004 	movi	r2,128
  80dfa0:	2880b126 	beq	r5,r2,80e268 <___vfprintf_internal_r+0x7e4>
  80dfa4:	d8c14617 	ldw	r3,1304(sp)
  80dfa8:	19e1c83a 	sub	r16,r3,r7
  80dfac:	0400260e 	bge	zero,r16,80e048 <___vfprintf_internal_r+0x5c4>
  80dfb0:	00800404 	movi	r2,16
  80dfb4:	1403c90e 	bge	r2,r16,80eedc <___vfprintf_internal_r+0x1458>
  80dfb8:	1027883a 	mov	r19,r2
  80dfbc:	070020b4 	movhi	fp,130
  80dfc0:	e701ee84 	addi	fp,fp,1978
  80dfc4:	050001c4 	movi	r20,7
  80dfc8:	00000306 	br	80dfd8 <___vfprintf_internal_r+0x554>
  80dfcc:	843ffc04 	addi	r16,r16,-16
  80dfd0:	ad400204 	addi	r21,r21,8
  80dfd4:	9c00130e 	bge	r19,r16,80e024 <___vfprintf_internal_r+0x5a0>
  80dfd8:	94800404 	addi	r18,r18,16
  80dfdc:	8c400044 	addi	r17,r17,1
  80dfe0:	af000015 	stw	fp,0(r21)
  80dfe4:	acc00115 	stw	r19,4(r21)
  80dfe8:	dc800e15 	stw	r18,56(sp)
  80dfec:	dc400d15 	stw	r17,52(sp)
  80dff0:	a47ff60e 	bge	r20,r17,80dfcc <___vfprintf_internal_r+0x548>
  80dff4:	d9014f17 	ldw	r4,1340(sp)
  80dff8:	b00b883a 	mov	r5,r22
  80dffc:	d9800c04 	addi	r6,sp,48
  80e000:	d9c15115 	stw	r7,1348(sp)
  80e004:	080da2c0 	call	80da2c <__sprint_r>
  80e008:	d9c15117 	ldw	r7,1348(sp)
  80e00c:	1000551e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e010:	843ffc04 	addi	r16,r16,-16
  80e014:	dc800e17 	ldw	r18,56(sp)
  80e018:	dc400d17 	ldw	r17,52(sp)
  80e01c:	dd401904 	addi	r21,sp,100
  80e020:	9c3fed16 	blt	r19,r16,80dfd8 <___vfprintf_internal_r+0x554>
  80e024:	9425883a 	add	r18,r18,r16
  80e028:	8c400044 	addi	r17,r17,1
  80e02c:	008001c4 	movi	r2,7
  80e030:	af000015 	stw	fp,0(r21)
  80e034:	ac000115 	stw	r16,4(r21)
  80e038:	dc800e15 	stw	r18,56(sp)
  80e03c:	dc400d15 	stw	r17,52(sp)
  80e040:	14418216 	blt	r2,r17,80e64c <___vfprintf_internal_r+0xbc8>
  80e044:	ad400204 	addi	r21,r21,8
  80e048:	d9014c17 	ldw	r4,1328(sp)
  80e04c:	2080400c 	andi	r2,r4,256
  80e050:	10004a1e 	bne	r2,zero,80e17c <___vfprintf_internal_r+0x6f8>
  80e054:	d9414117 	ldw	r5,1284(sp)
  80e058:	91e5883a 	add	r18,r18,r7
  80e05c:	8c400044 	addi	r17,r17,1
  80e060:	008001c4 	movi	r2,7
  80e064:	a9400015 	stw	r5,0(r21)
  80e068:	a9c00115 	stw	r7,4(r21)
  80e06c:	dc800e15 	stw	r18,56(sp)
  80e070:	dc400d15 	stw	r17,52(sp)
  80e074:	14416716 	blt	r2,r17,80e614 <___vfprintf_internal_r+0xb90>
  80e078:	a8c00204 	addi	r3,r21,8
  80e07c:	d9814c17 	ldw	r6,1328(sp)
  80e080:	3080010c 	andi	r2,r6,4
  80e084:	10002826 	beq	r2,zero,80e128 <___vfprintf_internal_r+0x6a4>
  80e088:	d8814a17 	ldw	r2,1320(sp)
  80e08c:	d9014517 	ldw	r4,1300(sp)
  80e090:	1121c83a 	sub	r16,r2,r4
  80e094:	0400240e 	bge	zero,r16,80e128 <___vfprintf_internal_r+0x6a4>
  80e098:	00800404 	movi	r2,16
  80e09c:	14044f0e 	bge	r2,r16,80f1dc <___vfprintf_internal_r+0x1758>
  80e0a0:	dc400d17 	ldw	r17,52(sp)
  80e0a4:	1027883a 	mov	r19,r2
  80e0a8:	070020b4 	movhi	fp,130
  80e0ac:	e701f284 	addi	fp,fp,1994
  80e0b0:	050001c4 	movi	r20,7
  80e0b4:	00000306 	br	80e0c4 <___vfprintf_internal_r+0x640>
  80e0b8:	843ffc04 	addi	r16,r16,-16
  80e0bc:	18c00204 	addi	r3,r3,8
  80e0c0:	9c00110e 	bge	r19,r16,80e108 <___vfprintf_internal_r+0x684>
  80e0c4:	94800404 	addi	r18,r18,16
  80e0c8:	8c400044 	addi	r17,r17,1
  80e0cc:	1f000015 	stw	fp,0(r3)
  80e0d0:	1cc00115 	stw	r19,4(r3)
  80e0d4:	dc800e15 	stw	r18,56(sp)
  80e0d8:	dc400d15 	stw	r17,52(sp)
  80e0dc:	a47ff60e 	bge	r20,r17,80e0b8 <___vfprintf_internal_r+0x634>
  80e0e0:	d9014f17 	ldw	r4,1340(sp)
  80e0e4:	b00b883a 	mov	r5,r22
  80e0e8:	d9800c04 	addi	r6,sp,48
  80e0ec:	080da2c0 	call	80da2c <__sprint_r>
  80e0f0:	10001c1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e0f4:	843ffc04 	addi	r16,r16,-16
  80e0f8:	dc800e17 	ldw	r18,56(sp)
  80e0fc:	dc400d17 	ldw	r17,52(sp)
  80e100:	d8c01904 	addi	r3,sp,100
  80e104:	9c3fef16 	blt	r19,r16,80e0c4 <___vfprintf_internal_r+0x640>
  80e108:	9425883a 	add	r18,r18,r16
  80e10c:	8c400044 	addi	r17,r17,1
  80e110:	008001c4 	movi	r2,7
  80e114:	1f000015 	stw	fp,0(r3)
  80e118:	1c000115 	stw	r16,4(r3)
  80e11c:	dc800e15 	stw	r18,56(sp)
  80e120:	dc400d15 	stw	r17,52(sp)
  80e124:	1440cb16 	blt	r2,r17,80e454 <___vfprintf_internal_r+0x9d0>
  80e128:	d8814a17 	ldw	r2,1320(sp)
  80e12c:	d9414517 	ldw	r5,1300(sp)
  80e130:	1140010e 	bge	r2,r5,80e138 <___vfprintf_internal_r+0x6b4>
  80e134:	2805883a 	mov	r2,r5
  80e138:	d9814b17 	ldw	r6,1324(sp)
  80e13c:	308d883a 	add	r6,r6,r2
  80e140:	d9814b15 	stw	r6,1324(sp)
  80e144:	90013b1e 	bne	r18,zero,80e634 <___vfprintf_internal_r+0xbb0>
  80e148:	d9c14017 	ldw	r7,1280(sp)
  80e14c:	dd401904 	addi	r21,sp,100
  80e150:	d8000d15 	stw	zero,52(sp)
  80e154:	003ea706 	br	80dbf4 <___vfprintf_internal_r+0x170>
  80e158:	d8800e17 	ldw	r2,56(sp)
  80e15c:	10053f1e 	bne	r2,zero,80f65c <___vfprintf_internal_r+0x1bd8>
  80e160:	d8000d15 	stw	zero,52(sp)
  80e164:	b080030b 	ldhu	r2,12(r22)
  80e168:	1080100c 	andi	r2,r2,64
  80e16c:	103e8726 	beq	r2,zero,80db8c <___vfprintf_internal_r+0x108>
  80e170:	00bfffc4 	movi	r2,-1
  80e174:	d8814b15 	stw	r2,1324(sp)
  80e178:	003e8406 	br	80db8c <___vfprintf_internal_r+0x108>
  80e17c:	d9814d17 	ldw	r6,1332(sp)
  80e180:	00801944 	movi	r2,101
  80e184:	11806e16 	blt	r2,r6,80e340 <___vfprintf_internal_r+0x8bc>
  80e188:	d9414717 	ldw	r5,1308(sp)
  80e18c:	00c00044 	movi	r3,1
  80e190:	1943430e 	bge	r3,r5,80eea0 <___vfprintf_internal_r+0x141c>
  80e194:	d8814117 	ldw	r2,1284(sp)
  80e198:	94800044 	addi	r18,r18,1
  80e19c:	8c400044 	addi	r17,r17,1
  80e1a0:	a8800015 	stw	r2,0(r21)
  80e1a4:	008001c4 	movi	r2,7
  80e1a8:	a8c00115 	stw	r3,4(r21)
  80e1ac:	dc800e15 	stw	r18,56(sp)
  80e1b0:	dc400d15 	stw	r17,52(sp)
  80e1b4:	1441ca16 	blt	r2,r17,80e8e0 <___vfprintf_internal_r+0xe5c>
  80e1b8:	a8c00204 	addi	r3,r21,8
  80e1bc:	d9014917 	ldw	r4,1316(sp)
  80e1c0:	00800044 	movi	r2,1
  80e1c4:	94800044 	addi	r18,r18,1
  80e1c8:	8c400044 	addi	r17,r17,1
  80e1cc:	18800115 	stw	r2,4(r3)
  80e1d0:	008001c4 	movi	r2,7
  80e1d4:	19000015 	stw	r4,0(r3)
  80e1d8:	dc800e15 	stw	r18,56(sp)
  80e1dc:	dc400d15 	stw	r17,52(sp)
  80e1e0:	1441b616 	blt	r2,r17,80e8bc <___vfprintf_internal_r+0xe38>
  80e1e4:	1cc00204 	addi	r19,r3,8
  80e1e8:	d9014217 	ldw	r4,1288(sp)
  80e1ec:	d9414317 	ldw	r5,1292(sp)
  80e1f0:	000d883a 	mov	r6,zero
  80e1f4:	000f883a 	mov	r7,zero
  80e1f8:	0814bc80 	call	814bc8 <__nedf2>
  80e1fc:	10017426 	beq	r2,zero,80e7d0 <___vfprintf_internal_r+0xd4c>
  80e200:	d9414717 	ldw	r5,1308(sp)
  80e204:	d9814117 	ldw	r6,1284(sp)
  80e208:	8c400044 	addi	r17,r17,1
  80e20c:	2c85883a 	add	r2,r5,r18
  80e210:	14bfffc4 	addi	r18,r2,-1
  80e214:	28bfffc4 	addi	r2,r5,-1
  80e218:	30c00044 	addi	r3,r6,1
  80e21c:	98800115 	stw	r2,4(r19)
  80e220:	008001c4 	movi	r2,7
  80e224:	98c00015 	stw	r3,0(r19)
  80e228:	dc800e15 	stw	r18,56(sp)
  80e22c:	dc400d15 	stw	r17,52(sp)
  80e230:	14418e16 	blt	r2,r17,80e86c <___vfprintf_internal_r+0xde8>
  80e234:	9cc00204 	addi	r19,r19,8
  80e238:	d9414817 	ldw	r5,1312(sp)
  80e23c:	d8800804 	addi	r2,sp,32
  80e240:	8c400044 	addi	r17,r17,1
  80e244:	9165883a 	add	r18,r18,r5
  80e248:	98800015 	stw	r2,0(r19)
  80e24c:	008001c4 	movi	r2,7
  80e250:	99400115 	stw	r5,4(r19)
  80e254:	dc800e15 	stw	r18,56(sp)
  80e258:	dc400d15 	stw	r17,52(sp)
  80e25c:	1440ed16 	blt	r2,r17,80e614 <___vfprintf_internal_r+0xb90>
  80e260:	98c00204 	addi	r3,r19,8
  80e264:	003f8506 	br	80e07c <___vfprintf_internal_r+0x5f8>
  80e268:	d9814a17 	ldw	r6,1320(sp)
  80e26c:	d8814517 	ldw	r2,1300(sp)
  80e270:	30a1c83a 	sub	r16,r6,r2
  80e274:	043f4b0e 	bge	zero,r16,80dfa4 <___vfprintf_internal_r+0x520>
  80e278:	00800404 	movi	r2,16
  80e27c:	1404340e 	bge	r2,r16,80f350 <___vfprintf_internal_r+0x18cc>
  80e280:	1027883a 	mov	r19,r2
  80e284:	070020b4 	movhi	fp,130
  80e288:	e701ee84 	addi	fp,fp,1978
  80e28c:	050001c4 	movi	r20,7
  80e290:	00000306 	br	80e2a0 <___vfprintf_internal_r+0x81c>
  80e294:	843ffc04 	addi	r16,r16,-16
  80e298:	ad400204 	addi	r21,r21,8
  80e29c:	9c00130e 	bge	r19,r16,80e2ec <___vfprintf_internal_r+0x868>
  80e2a0:	94800404 	addi	r18,r18,16
  80e2a4:	8c400044 	addi	r17,r17,1
  80e2a8:	af000015 	stw	fp,0(r21)
  80e2ac:	acc00115 	stw	r19,4(r21)
  80e2b0:	dc800e15 	stw	r18,56(sp)
  80e2b4:	dc400d15 	stw	r17,52(sp)
  80e2b8:	a47ff60e 	bge	r20,r17,80e294 <___vfprintf_internal_r+0x810>
  80e2bc:	d9014f17 	ldw	r4,1340(sp)
  80e2c0:	b00b883a 	mov	r5,r22
  80e2c4:	d9800c04 	addi	r6,sp,48
  80e2c8:	d9c15115 	stw	r7,1348(sp)
  80e2cc:	080da2c0 	call	80da2c <__sprint_r>
  80e2d0:	d9c15117 	ldw	r7,1348(sp)
  80e2d4:	103fa31e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e2d8:	843ffc04 	addi	r16,r16,-16
  80e2dc:	dc800e17 	ldw	r18,56(sp)
  80e2e0:	dc400d17 	ldw	r17,52(sp)
  80e2e4:	dd401904 	addi	r21,sp,100
  80e2e8:	9c3fed16 	blt	r19,r16,80e2a0 <___vfprintf_internal_r+0x81c>
  80e2ec:	9425883a 	add	r18,r18,r16
  80e2f0:	8c400044 	addi	r17,r17,1
  80e2f4:	008001c4 	movi	r2,7
  80e2f8:	af000015 	stw	fp,0(r21)
  80e2fc:	ac000115 	stw	r16,4(r21)
  80e300:	dc800e15 	stw	r18,56(sp)
  80e304:	dc400d15 	stw	r17,52(sp)
  80e308:	14416116 	blt	r2,r17,80e890 <___vfprintf_internal_r+0xe0c>
  80e30c:	ad400204 	addi	r21,r21,8
  80e310:	003f2406 	br	80dfa4 <___vfprintf_internal_r+0x520>
  80e314:	d9014f17 	ldw	r4,1340(sp)
  80e318:	08114f40 	call	8114f4 <__sinit>
  80e31c:	d9c15117 	ldw	r7,1348(sp)
  80e320:	003def06 	br	80dae0 <___vfprintf_internal_r+0x5c>
  80e324:	d9014f17 	ldw	r4,1340(sp)
  80e328:	b00b883a 	mov	r5,r22
  80e32c:	d9c15115 	stw	r7,1348(sp)
  80e330:	080f9540 	call	80f954 <__swsetup_r>
  80e334:	d9c15117 	ldw	r7,1348(sp)
  80e338:	103dee26 	beq	r2,zero,80daf4 <___vfprintf_internal_r+0x70>
  80e33c:	003f8c06 	br	80e170 <___vfprintf_internal_r+0x6ec>
  80e340:	d9014217 	ldw	r4,1288(sp)
  80e344:	d9414317 	ldw	r5,1292(sp)
  80e348:	000d883a 	mov	r6,zero
  80e34c:	000f883a 	mov	r7,zero
  80e350:	0814b400 	call	814b40 <__eqdf2>
  80e354:	1000f21e 	bne	r2,zero,80e720 <___vfprintf_internal_r+0xc9c>
  80e358:	008020b4 	movhi	r2,130
  80e35c:	10bfbb04 	addi	r2,r2,-276
  80e360:	94800044 	addi	r18,r18,1
  80e364:	8c400044 	addi	r17,r17,1
  80e368:	a8800015 	stw	r2,0(r21)
  80e36c:	00c00044 	movi	r3,1
  80e370:	008001c4 	movi	r2,7
  80e374:	a8c00115 	stw	r3,4(r21)
  80e378:	dc800e15 	stw	r18,56(sp)
  80e37c:	dc400d15 	stw	r17,52(sp)
  80e380:	1442fa16 	blt	r2,r17,80ef6c <___vfprintf_internal_r+0x14e8>
  80e384:	a8c00204 	addi	r3,r21,8
  80e388:	d8800517 	ldw	r2,20(sp)
  80e38c:	d9014717 	ldw	r4,1308(sp)
  80e390:	11015c0e 	bge	r2,r4,80e904 <___vfprintf_internal_r+0xe80>
  80e394:	dc400d17 	ldw	r17,52(sp)
  80e398:	d9814917 	ldw	r6,1316(sp)
  80e39c:	00800044 	movi	r2,1
  80e3a0:	94800044 	addi	r18,r18,1
  80e3a4:	8c400044 	addi	r17,r17,1
  80e3a8:	18800115 	stw	r2,4(r3)
  80e3ac:	008001c4 	movi	r2,7
  80e3b0:	19800015 	stw	r6,0(r3)
  80e3b4:	dc800e15 	stw	r18,56(sp)
  80e3b8:	dc400d15 	stw	r17,52(sp)
  80e3bc:	14431016 	blt	r2,r17,80f000 <___vfprintf_internal_r+0x157c>
  80e3c0:	18c00204 	addi	r3,r3,8
  80e3c4:	d8814717 	ldw	r2,1308(sp)
  80e3c8:	143fffc4 	addi	r16,r2,-1
  80e3cc:	043f2b0e 	bge	zero,r16,80e07c <___vfprintf_internal_r+0x5f8>
  80e3d0:	00800404 	movi	r2,16
  80e3d4:	1402a20e 	bge	r2,r16,80ee60 <___vfprintf_internal_r+0x13dc>
  80e3d8:	dc400d17 	ldw	r17,52(sp)
  80e3dc:	1027883a 	mov	r19,r2
  80e3e0:	070020b4 	movhi	fp,130
  80e3e4:	e701ee84 	addi	fp,fp,1978
  80e3e8:	050001c4 	movi	r20,7
  80e3ec:	00000306 	br	80e3fc <___vfprintf_internal_r+0x978>
  80e3f0:	18c00204 	addi	r3,r3,8
  80e3f4:	843ffc04 	addi	r16,r16,-16
  80e3f8:	9c029c0e 	bge	r19,r16,80ee6c <___vfprintf_internal_r+0x13e8>
  80e3fc:	94800404 	addi	r18,r18,16
  80e400:	8c400044 	addi	r17,r17,1
  80e404:	1f000015 	stw	fp,0(r3)
  80e408:	1cc00115 	stw	r19,4(r3)
  80e40c:	dc800e15 	stw	r18,56(sp)
  80e410:	dc400d15 	stw	r17,52(sp)
  80e414:	a47ff60e 	bge	r20,r17,80e3f0 <___vfprintf_internal_r+0x96c>
  80e418:	d9014f17 	ldw	r4,1340(sp)
  80e41c:	b00b883a 	mov	r5,r22
  80e420:	d9800c04 	addi	r6,sp,48
  80e424:	080da2c0 	call	80da2c <__sprint_r>
  80e428:	103f4e1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e42c:	dc800e17 	ldw	r18,56(sp)
  80e430:	dc400d17 	ldw	r17,52(sp)
  80e434:	d8c01904 	addi	r3,sp,100
  80e438:	003fee06 	br	80e3f4 <___vfprintf_internal_r+0x970>
  80e43c:	d8802c0b 	ldhu	r2,176(sp)
  80e440:	00ffffc4 	movi	r3,-1
  80e444:	d8c14b15 	stw	r3,1324(sp)
  80e448:	1080100c 	andi	r2,r2,64
  80e44c:	103dcc1e 	bne	r2,zero,80db80 <___vfprintf_internal_r+0xfc>
  80e450:	003dce06 	br	80db8c <___vfprintf_internal_r+0x108>
  80e454:	d9014f17 	ldw	r4,1340(sp)
  80e458:	b00b883a 	mov	r5,r22
  80e45c:	d9800c04 	addi	r6,sp,48
  80e460:	080da2c0 	call	80da2c <__sprint_r>
  80e464:	103f3f1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e468:	dc800e17 	ldw	r18,56(sp)
  80e46c:	003f2e06 	br	80e128 <___vfprintf_internal_r+0x6a4>
  80e470:	d9414c17 	ldw	r5,1328(sp)
  80e474:	29400414 	ori	r5,r5,16
  80e478:	d9414c15 	stw	r5,1328(sp)
  80e47c:	d9814c17 	ldw	r6,1328(sp)
  80e480:	3080080c 	andi	r2,r6,32
  80e484:	10014f1e 	bne	r2,zero,80e9c4 <___vfprintf_internal_r+0xf40>
  80e488:	d8c14c17 	ldw	r3,1328(sp)
  80e48c:	1880040c 	andi	r2,r3,16
  80e490:	1002ea1e 	bne	r2,zero,80f03c <___vfprintf_internal_r+0x15b8>
  80e494:	d9014c17 	ldw	r4,1328(sp)
  80e498:	2080100c 	andi	r2,r4,64
  80e49c:	1002e726 	beq	r2,zero,80f03c <___vfprintf_internal_r+0x15b8>
  80e4a0:	3880000f 	ldh	r2,0(r7)
  80e4a4:	39c00104 	addi	r7,r7,4
  80e4a8:	d9c14015 	stw	r7,1280(sp)
  80e4ac:	1023d7fa 	srai	r17,r2,31
  80e4b0:	1021883a 	mov	r16,r2
  80e4b4:	88037216 	blt	r17,zero,80f280 <___vfprintf_internal_r+0x17fc>
  80e4b8:	01000044 	movi	r4,1
  80e4bc:	98000416 	blt	r19,zero,80e4d0 <___vfprintf_internal_r+0xa4c>
  80e4c0:	d8c14c17 	ldw	r3,1328(sp)
  80e4c4:	00bfdfc4 	movi	r2,-129
  80e4c8:	1886703a 	and	r3,r3,r2
  80e4cc:	d8c14c15 	stw	r3,1328(sp)
  80e4d0:	8444b03a 	or	r2,r16,r17
  80e4d4:	1002261e 	bne	r2,zero,80ed70 <___vfprintf_internal_r+0x12ec>
  80e4d8:	9802251e 	bne	r19,zero,80ed70 <___vfprintf_internal_r+0x12ec>
  80e4dc:	20803fcc 	andi	r2,r4,255
  80e4e0:	10029b26 	beq	r2,zero,80ef50 <___vfprintf_internal_r+0x14cc>
  80e4e4:	d8c01904 	addi	r3,sp,100
  80e4e8:	dd000f04 	addi	r20,sp,60
  80e4ec:	d8c14115 	stw	r3,1284(sp)
  80e4f0:	d8c14117 	ldw	r3,1284(sp)
  80e4f4:	dcc14515 	stw	r19,1300(sp)
  80e4f8:	a0c5c83a 	sub	r2,r20,r3
  80e4fc:	11c00a04 	addi	r7,r2,40
  80e500:	99c0010e 	bge	r19,r7,80e508 <___vfprintf_internal_r+0xa84>
  80e504:	d9c14515 	stw	r7,1300(sp)
  80e508:	dcc14615 	stw	r19,1304(sp)
  80e50c:	d8800407 	ldb	r2,16(sp)
  80e510:	103e4c26 	beq	r2,zero,80de44 <___vfprintf_internal_r+0x3c0>
  80e514:	d8814517 	ldw	r2,1300(sp)
  80e518:	10800044 	addi	r2,r2,1
  80e51c:	d8814515 	stw	r2,1300(sp)
  80e520:	003e4806 	br	80de44 <___vfprintf_internal_r+0x3c0>
  80e524:	d9814c17 	ldw	r6,1328(sp)
  80e528:	31800414 	ori	r6,r6,16
  80e52c:	d9814c15 	stw	r6,1328(sp)
  80e530:	d8c14c17 	ldw	r3,1328(sp)
  80e534:	1880080c 	andi	r2,r3,32
  80e538:	1001271e 	bne	r2,zero,80e9d8 <___vfprintf_internal_r+0xf54>
  80e53c:	d9414c17 	ldw	r5,1328(sp)
  80e540:	2880040c 	andi	r2,r5,16
  80e544:	1002b61e 	bne	r2,zero,80f020 <___vfprintf_internal_r+0x159c>
  80e548:	d9814c17 	ldw	r6,1328(sp)
  80e54c:	3080100c 	andi	r2,r6,64
  80e550:	1002b326 	beq	r2,zero,80f020 <___vfprintf_internal_r+0x159c>
  80e554:	3c00000b 	ldhu	r16,0(r7)
  80e558:	0009883a 	mov	r4,zero
  80e55c:	39c00104 	addi	r7,r7,4
  80e560:	0023883a 	mov	r17,zero
  80e564:	d9c14015 	stw	r7,1280(sp)
  80e568:	d8000405 	stb	zero,16(sp)
  80e56c:	003fd306 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80e570:	d9014c17 	ldw	r4,1328(sp)
  80e574:	21000414 	ori	r4,r4,16
  80e578:	d9014c15 	stw	r4,1328(sp)
  80e57c:	d9414c17 	ldw	r5,1328(sp)
  80e580:	2880080c 	andi	r2,r5,32
  80e584:	1001081e 	bne	r2,zero,80e9a8 <___vfprintf_internal_r+0xf24>
  80e588:	d8c14c17 	ldw	r3,1328(sp)
  80e58c:	1880040c 	andi	r2,r3,16
  80e590:	1002b01e 	bne	r2,zero,80f054 <___vfprintf_internal_r+0x15d0>
  80e594:	d9014c17 	ldw	r4,1328(sp)
  80e598:	2080100c 	andi	r2,r4,64
  80e59c:	1002ad26 	beq	r2,zero,80f054 <___vfprintf_internal_r+0x15d0>
  80e5a0:	3c00000b 	ldhu	r16,0(r7)
  80e5a4:	01000044 	movi	r4,1
  80e5a8:	39c00104 	addi	r7,r7,4
  80e5ac:	0023883a 	mov	r17,zero
  80e5b0:	d9c14015 	stw	r7,1280(sp)
  80e5b4:	d8000405 	stb	zero,16(sp)
  80e5b8:	003fc006 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80e5bc:	d9014f17 	ldw	r4,1340(sp)
  80e5c0:	b00b883a 	mov	r5,r22
  80e5c4:	d9800c04 	addi	r6,sp,48
  80e5c8:	080da2c0 	call	80da2c <__sprint_r>
  80e5cc:	103ee51e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e5d0:	dc800e17 	ldw	r18,56(sp)
  80e5d4:	d8c01904 	addi	r3,sp,100
  80e5d8:	d9814c17 	ldw	r6,1328(sp)
  80e5dc:	3080004c 	andi	r2,r6,1
  80e5e0:	1005003a 	cmpeq	r2,r2,zero
  80e5e4:	103ea51e 	bne	r2,zero,80e07c <___vfprintf_internal_r+0x5f8>
  80e5e8:	00800044 	movi	r2,1
  80e5ec:	dc400d17 	ldw	r17,52(sp)
  80e5f0:	18800115 	stw	r2,4(r3)
  80e5f4:	d8814917 	ldw	r2,1316(sp)
  80e5f8:	94800044 	addi	r18,r18,1
  80e5fc:	8c400044 	addi	r17,r17,1
  80e600:	18800015 	stw	r2,0(r3)
  80e604:	008001c4 	movi	r2,7
  80e608:	dc800e15 	stw	r18,56(sp)
  80e60c:	dc400d15 	stw	r17,52(sp)
  80e610:	14421e0e 	bge	r2,r17,80ee8c <___vfprintf_internal_r+0x1408>
  80e614:	d9014f17 	ldw	r4,1340(sp)
  80e618:	b00b883a 	mov	r5,r22
  80e61c:	d9800c04 	addi	r6,sp,48
  80e620:	080da2c0 	call	80da2c <__sprint_r>
  80e624:	103ecf1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e628:	dc800e17 	ldw	r18,56(sp)
  80e62c:	d8c01904 	addi	r3,sp,100
  80e630:	003e9206 	br	80e07c <___vfprintf_internal_r+0x5f8>
  80e634:	d9014f17 	ldw	r4,1340(sp)
  80e638:	b00b883a 	mov	r5,r22
  80e63c:	d9800c04 	addi	r6,sp,48
  80e640:	080da2c0 	call	80da2c <__sprint_r>
  80e644:	103ec026 	beq	r2,zero,80e148 <___vfprintf_internal_r+0x6c4>
  80e648:	003ec606 	br	80e164 <___vfprintf_internal_r+0x6e0>
  80e64c:	d9014f17 	ldw	r4,1340(sp)
  80e650:	b00b883a 	mov	r5,r22
  80e654:	d9800c04 	addi	r6,sp,48
  80e658:	d9c15115 	stw	r7,1348(sp)
  80e65c:	080da2c0 	call	80da2c <__sprint_r>
  80e660:	d9c15117 	ldw	r7,1348(sp)
  80e664:	103ebf1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e668:	dc800e17 	ldw	r18,56(sp)
  80e66c:	dc400d17 	ldw	r17,52(sp)
  80e670:	dd401904 	addi	r21,sp,100
  80e674:	003e7406 	br	80e048 <___vfprintf_internal_r+0x5c4>
  80e678:	d9014f17 	ldw	r4,1340(sp)
  80e67c:	b00b883a 	mov	r5,r22
  80e680:	d9800c04 	addi	r6,sp,48
  80e684:	d9c15115 	stw	r7,1348(sp)
  80e688:	080da2c0 	call	80da2c <__sprint_r>
  80e68c:	d9c15117 	ldw	r7,1348(sp)
  80e690:	103eb41e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e694:	dd401904 	addi	r21,sp,100
  80e698:	003d6d06 	br	80dc50 <___vfprintf_internal_r+0x1cc>
  80e69c:	d9014f17 	ldw	r4,1340(sp)
  80e6a0:	b00b883a 	mov	r5,r22
  80e6a4:	d9800c04 	addi	r6,sp,48
  80e6a8:	d9c15115 	stw	r7,1348(sp)
  80e6ac:	080da2c0 	call	80da2c <__sprint_r>
  80e6b0:	d9c15117 	ldw	r7,1348(sp)
  80e6b4:	103eab1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e6b8:	dc800e17 	ldw	r18,56(sp)
  80e6bc:	dc400d17 	ldw	r17,52(sp)
  80e6c0:	dd401904 	addi	r21,sp,100
  80e6c4:	003e3406 	br	80df98 <___vfprintf_internal_r+0x514>
  80e6c8:	d9014f17 	ldw	r4,1340(sp)
  80e6cc:	b00b883a 	mov	r5,r22
  80e6d0:	d9800c04 	addi	r6,sp,48
  80e6d4:	d9c15115 	stw	r7,1348(sp)
  80e6d8:	080da2c0 	call	80da2c <__sprint_r>
  80e6dc:	d9c15117 	ldw	r7,1348(sp)
  80e6e0:	103ea01e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e6e4:	dc800e17 	ldw	r18,56(sp)
  80e6e8:	dc400d17 	ldw	r17,52(sp)
  80e6ec:	dd401904 	addi	r21,sp,100
  80e6f0:	003e1c06 	br	80df64 <___vfprintf_internal_r+0x4e0>
  80e6f4:	d9014f17 	ldw	r4,1340(sp)
  80e6f8:	b00b883a 	mov	r5,r22
  80e6fc:	d9800c04 	addi	r6,sp,48
  80e700:	d9c15115 	stw	r7,1348(sp)
  80e704:	080da2c0 	call	80da2c <__sprint_r>
  80e708:	d9c15117 	ldw	r7,1348(sp)
  80e70c:	103e951e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e710:	dc800e17 	ldw	r18,56(sp)
  80e714:	dc400d17 	ldw	r17,52(sp)
  80e718:	dd401904 	addi	r21,sp,100
  80e71c:	003e0406 	br	80df30 <___vfprintf_internal_r+0x4ac>
  80e720:	d9000517 	ldw	r4,20(sp)
  80e724:	0102520e 	bge	zero,r4,80f070 <___vfprintf_internal_r+0x15ec>
  80e728:	d9814717 	ldw	r6,1308(sp)
  80e72c:	21807a16 	blt	r4,r6,80e918 <___vfprintf_internal_r+0xe94>
  80e730:	d8814117 	ldw	r2,1284(sp)
  80e734:	91a5883a 	add	r18,r18,r6
  80e738:	8c400044 	addi	r17,r17,1
  80e73c:	a8800015 	stw	r2,0(r21)
  80e740:	008001c4 	movi	r2,7
  80e744:	a9800115 	stw	r6,4(r21)
  80e748:	dc800e15 	stw	r18,56(sp)
  80e74c:	dc400d15 	stw	r17,52(sp)
  80e750:	1442f616 	blt	r2,r17,80f32c <___vfprintf_internal_r+0x18a8>
  80e754:	a8c00204 	addi	r3,r21,8
  80e758:	d9414717 	ldw	r5,1308(sp)
  80e75c:	2161c83a 	sub	r16,r4,r5
  80e760:	043f9d0e 	bge	zero,r16,80e5d8 <___vfprintf_internal_r+0xb54>
  80e764:	00800404 	movi	r2,16
  80e768:	1402130e 	bge	r2,r16,80efb8 <___vfprintf_internal_r+0x1534>
  80e76c:	dc400d17 	ldw	r17,52(sp)
  80e770:	1027883a 	mov	r19,r2
  80e774:	070020b4 	movhi	fp,130
  80e778:	e701ee84 	addi	fp,fp,1978
  80e77c:	050001c4 	movi	r20,7
  80e780:	00000306 	br	80e790 <___vfprintf_internal_r+0xd0c>
  80e784:	18c00204 	addi	r3,r3,8
  80e788:	843ffc04 	addi	r16,r16,-16
  80e78c:	9c020d0e 	bge	r19,r16,80efc4 <___vfprintf_internal_r+0x1540>
  80e790:	94800404 	addi	r18,r18,16
  80e794:	8c400044 	addi	r17,r17,1
  80e798:	1f000015 	stw	fp,0(r3)
  80e79c:	1cc00115 	stw	r19,4(r3)
  80e7a0:	dc800e15 	stw	r18,56(sp)
  80e7a4:	dc400d15 	stw	r17,52(sp)
  80e7a8:	a47ff60e 	bge	r20,r17,80e784 <___vfprintf_internal_r+0xd00>
  80e7ac:	d9014f17 	ldw	r4,1340(sp)
  80e7b0:	b00b883a 	mov	r5,r22
  80e7b4:	d9800c04 	addi	r6,sp,48
  80e7b8:	080da2c0 	call	80da2c <__sprint_r>
  80e7bc:	103e691e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e7c0:	dc800e17 	ldw	r18,56(sp)
  80e7c4:	dc400d17 	ldw	r17,52(sp)
  80e7c8:	d8c01904 	addi	r3,sp,100
  80e7cc:	003fee06 	br	80e788 <___vfprintf_internal_r+0xd04>
  80e7d0:	d8814717 	ldw	r2,1308(sp)
  80e7d4:	143fffc4 	addi	r16,r2,-1
  80e7d8:	043e970e 	bge	zero,r16,80e238 <___vfprintf_internal_r+0x7b4>
  80e7dc:	00800404 	movi	r2,16
  80e7e0:	1400180e 	bge	r2,r16,80e844 <___vfprintf_internal_r+0xdc0>
  80e7e4:	1029883a 	mov	r20,r2
  80e7e8:	070020b4 	movhi	fp,130
  80e7ec:	e701ee84 	addi	fp,fp,1978
  80e7f0:	054001c4 	movi	r21,7
  80e7f4:	00000306 	br	80e804 <___vfprintf_internal_r+0xd80>
  80e7f8:	9cc00204 	addi	r19,r19,8
  80e7fc:	843ffc04 	addi	r16,r16,-16
  80e800:	a400120e 	bge	r20,r16,80e84c <___vfprintf_internal_r+0xdc8>
  80e804:	94800404 	addi	r18,r18,16
  80e808:	8c400044 	addi	r17,r17,1
  80e80c:	9f000015 	stw	fp,0(r19)
  80e810:	9d000115 	stw	r20,4(r19)
  80e814:	dc800e15 	stw	r18,56(sp)
  80e818:	dc400d15 	stw	r17,52(sp)
  80e81c:	ac7ff60e 	bge	r21,r17,80e7f8 <___vfprintf_internal_r+0xd74>
  80e820:	d9014f17 	ldw	r4,1340(sp)
  80e824:	b00b883a 	mov	r5,r22
  80e828:	d9800c04 	addi	r6,sp,48
  80e82c:	080da2c0 	call	80da2c <__sprint_r>
  80e830:	103e4c1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e834:	dc800e17 	ldw	r18,56(sp)
  80e838:	dc400d17 	ldw	r17,52(sp)
  80e83c:	dcc01904 	addi	r19,sp,100
  80e840:	003fee06 	br	80e7fc <___vfprintf_internal_r+0xd78>
  80e844:	070020b4 	movhi	fp,130
  80e848:	e701ee84 	addi	fp,fp,1978
  80e84c:	9425883a 	add	r18,r18,r16
  80e850:	8c400044 	addi	r17,r17,1
  80e854:	008001c4 	movi	r2,7
  80e858:	9f000015 	stw	fp,0(r19)
  80e85c:	9c000115 	stw	r16,4(r19)
  80e860:	dc800e15 	stw	r18,56(sp)
  80e864:	dc400d15 	stw	r17,52(sp)
  80e868:	147e720e 	bge	r2,r17,80e234 <___vfprintf_internal_r+0x7b0>
  80e86c:	d9014f17 	ldw	r4,1340(sp)
  80e870:	b00b883a 	mov	r5,r22
  80e874:	d9800c04 	addi	r6,sp,48
  80e878:	080da2c0 	call	80da2c <__sprint_r>
  80e87c:	103e391e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e880:	dc800e17 	ldw	r18,56(sp)
  80e884:	dc400d17 	ldw	r17,52(sp)
  80e888:	dcc01904 	addi	r19,sp,100
  80e88c:	003e6a06 	br	80e238 <___vfprintf_internal_r+0x7b4>
  80e890:	d9014f17 	ldw	r4,1340(sp)
  80e894:	b00b883a 	mov	r5,r22
  80e898:	d9800c04 	addi	r6,sp,48
  80e89c:	d9c15115 	stw	r7,1348(sp)
  80e8a0:	080da2c0 	call	80da2c <__sprint_r>
  80e8a4:	d9c15117 	ldw	r7,1348(sp)
  80e8a8:	103e2e1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e8ac:	dc800e17 	ldw	r18,56(sp)
  80e8b0:	dc400d17 	ldw	r17,52(sp)
  80e8b4:	dd401904 	addi	r21,sp,100
  80e8b8:	003dba06 	br	80dfa4 <___vfprintf_internal_r+0x520>
  80e8bc:	d9014f17 	ldw	r4,1340(sp)
  80e8c0:	b00b883a 	mov	r5,r22
  80e8c4:	d9800c04 	addi	r6,sp,48
  80e8c8:	080da2c0 	call	80da2c <__sprint_r>
  80e8cc:	103e251e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e8d0:	dc800e17 	ldw	r18,56(sp)
  80e8d4:	dc400d17 	ldw	r17,52(sp)
  80e8d8:	dcc01904 	addi	r19,sp,100
  80e8dc:	003e4206 	br	80e1e8 <___vfprintf_internal_r+0x764>
  80e8e0:	d9014f17 	ldw	r4,1340(sp)
  80e8e4:	b00b883a 	mov	r5,r22
  80e8e8:	d9800c04 	addi	r6,sp,48
  80e8ec:	080da2c0 	call	80da2c <__sprint_r>
  80e8f0:	103e1c1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80e8f4:	dc800e17 	ldw	r18,56(sp)
  80e8f8:	dc400d17 	ldw	r17,52(sp)
  80e8fc:	d8c01904 	addi	r3,sp,100
  80e900:	003e2e06 	br	80e1bc <___vfprintf_internal_r+0x738>
  80e904:	d9414c17 	ldw	r5,1328(sp)
  80e908:	2880004c 	andi	r2,r5,1
  80e90c:	1005003a 	cmpeq	r2,r2,zero
  80e910:	103dda1e 	bne	r2,zero,80e07c <___vfprintf_internal_r+0x5f8>
  80e914:	003e9f06 	br	80e394 <___vfprintf_internal_r+0x910>
  80e918:	d8c14117 	ldw	r3,1284(sp)
  80e91c:	9125883a 	add	r18,r18,r4
  80e920:	8c400044 	addi	r17,r17,1
  80e924:	008001c4 	movi	r2,7
  80e928:	a8c00015 	stw	r3,0(r21)
  80e92c:	a9000115 	stw	r4,4(r21)
  80e930:	dc800e15 	stw	r18,56(sp)
  80e934:	dc400d15 	stw	r17,52(sp)
  80e938:	14426616 	blt	r2,r17,80f2d4 <___vfprintf_internal_r+0x1850>
  80e93c:	a8c00204 	addi	r3,r21,8
  80e940:	d9414917 	ldw	r5,1316(sp)
  80e944:	00800044 	movi	r2,1
  80e948:	94800044 	addi	r18,r18,1
  80e94c:	8c400044 	addi	r17,r17,1
  80e950:	18800115 	stw	r2,4(r3)
  80e954:	008001c4 	movi	r2,7
  80e958:	19400015 	stw	r5,0(r3)
  80e95c:	dc800e15 	stw	r18,56(sp)
  80e960:	dc400d15 	stw	r17,52(sp)
  80e964:	2021883a 	mov	r16,r4
  80e968:	14425016 	blt	r2,r17,80f2ac <___vfprintf_internal_r+0x1828>
  80e96c:	19400204 	addi	r5,r3,8
  80e970:	d9814717 	ldw	r6,1308(sp)
  80e974:	8c400044 	addi	r17,r17,1
  80e978:	dc400d15 	stw	r17,52(sp)
  80e97c:	3107c83a 	sub	r3,r6,r4
  80e980:	d9014117 	ldw	r4,1284(sp)
  80e984:	90e5883a 	add	r18,r18,r3
  80e988:	28c00115 	stw	r3,4(r5)
  80e98c:	8105883a 	add	r2,r16,r4
  80e990:	28800015 	stw	r2,0(r5)
  80e994:	008001c4 	movi	r2,7
  80e998:	dc800e15 	stw	r18,56(sp)
  80e99c:	147f1d16 	blt	r2,r17,80e614 <___vfprintf_internal_r+0xb90>
  80e9a0:	28c00204 	addi	r3,r5,8
  80e9a4:	003db506 	br	80e07c <___vfprintf_internal_r+0x5f8>
  80e9a8:	3c000017 	ldw	r16,0(r7)
  80e9ac:	3c400117 	ldw	r17,4(r7)
  80e9b0:	39800204 	addi	r6,r7,8
  80e9b4:	01000044 	movi	r4,1
  80e9b8:	d9814015 	stw	r6,1280(sp)
  80e9bc:	d8000405 	stb	zero,16(sp)
  80e9c0:	003ebe06 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80e9c4:	3c000017 	ldw	r16,0(r7)
  80e9c8:	3c400117 	ldw	r17,4(r7)
  80e9cc:	38800204 	addi	r2,r7,8
  80e9d0:	d8814015 	stw	r2,1280(sp)
  80e9d4:	003eb706 	br	80e4b4 <___vfprintf_internal_r+0xa30>
  80e9d8:	3c000017 	ldw	r16,0(r7)
  80e9dc:	3c400117 	ldw	r17,4(r7)
  80e9e0:	39000204 	addi	r4,r7,8
  80e9e4:	d9014015 	stw	r4,1280(sp)
  80e9e8:	0009883a 	mov	r4,zero
  80e9ec:	d8000405 	stb	zero,16(sp)
  80e9f0:	003eb206 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80e9f4:	38c00017 	ldw	r3,0(r7)
  80e9f8:	39c00104 	addi	r7,r7,4
  80e9fc:	d8c14a15 	stw	r3,1320(sp)
  80ea00:	1800d10e 	bge	r3,zero,80ed48 <___vfprintf_internal_r+0x12c4>
  80ea04:	00c7c83a 	sub	r3,zero,r3
  80ea08:	d8c14a15 	stw	r3,1320(sp)
  80ea0c:	d9014c17 	ldw	r4,1328(sp)
  80ea10:	b8c00007 	ldb	r3,0(r23)
  80ea14:	21000114 	ori	r4,r4,4
  80ea18:	d9014c15 	stw	r4,1328(sp)
  80ea1c:	003c9806 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80ea20:	d9814c17 	ldw	r6,1328(sp)
  80ea24:	3080080c 	andi	r2,r6,32
  80ea28:	1001f026 	beq	r2,zero,80f1ec <___vfprintf_internal_r+0x1768>
  80ea2c:	d9014b17 	ldw	r4,1324(sp)
  80ea30:	38800017 	ldw	r2,0(r7)
  80ea34:	39c00104 	addi	r7,r7,4
  80ea38:	d9c14015 	stw	r7,1280(sp)
  80ea3c:	2007d7fa 	srai	r3,r4,31
  80ea40:	d9c14017 	ldw	r7,1280(sp)
  80ea44:	11000015 	stw	r4,0(r2)
  80ea48:	10c00115 	stw	r3,4(r2)
  80ea4c:	003c6906 	br	80dbf4 <___vfprintf_internal_r+0x170>
  80ea50:	b8c00007 	ldb	r3,0(r23)
  80ea54:	00801b04 	movi	r2,108
  80ea58:	18824f26 	beq	r3,r2,80f398 <___vfprintf_internal_r+0x1914>
  80ea5c:	d9414c17 	ldw	r5,1328(sp)
  80ea60:	29400414 	ori	r5,r5,16
  80ea64:	d9414c15 	stw	r5,1328(sp)
  80ea68:	003c8506 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80ea6c:	d9814c17 	ldw	r6,1328(sp)
  80ea70:	b8c00007 	ldb	r3,0(r23)
  80ea74:	31800814 	ori	r6,r6,32
  80ea78:	d9814c15 	stw	r6,1328(sp)
  80ea7c:	003c8006 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80ea80:	d8814c17 	ldw	r2,1328(sp)
  80ea84:	3c000017 	ldw	r16,0(r7)
  80ea88:	00c01e04 	movi	r3,120
  80ea8c:	10800094 	ori	r2,r2,2
  80ea90:	d8814c15 	stw	r2,1328(sp)
  80ea94:	39c00104 	addi	r7,r7,4
  80ea98:	014020b4 	movhi	r5,130
  80ea9c:	2941d804 	addi	r5,r5,1888
  80eaa0:	00800c04 	movi	r2,48
  80eaa4:	0023883a 	mov	r17,zero
  80eaa8:	01000084 	movi	r4,2
  80eaac:	d9c14015 	stw	r7,1280(sp)
  80eab0:	d8c14d15 	stw	r3,1332(sp)
  80eab4:	d9414415 	stw	r5,1296(sp)
  80eab8:	d8800445 	stb	r2,17(sp)
  80eabc:	d8c00485 	stb	r3,18(sp)
  80eac0:	d8000405 	stb	zero,16(sp)
  80eac4:	003e7d06 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80eac8:	d8814c17 	ldw	r2,1328(sp)
  80eacc:	b8c00007 	ldb	r3,0(r23)
  80ead0:	10801014 	ori	r2,r2,64
  80ead4:	d8814c15 	stw	r2,1328(sp)
  80ead8:	003c6906 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80eadc:	d9414c17 	ldw	r5,1328(sp)
  80eae0:	2880020c 	andi	r2,r5,8
  80eae4:	1001df26 	beq	r2,zero,80f264 <___vfprintf_internal_r+0x17e0>
  80eae8:	39800017 	ldw	r6,0(r7)
  80eaec:	38800204 	addi	r2,r7,8
  80eaf0:	d8814015 	stw	r2,1280(sp)
  80eaf4:	d9814215 	stw	r6,1288(sp)
  80eaf8:	39c00117 	ldw	r7,4(r7)
  80eafc:	d9c14315 	stw	r7,1292(sp)
  80eb00:	d9014217 	ldw	r4,1288(sp)
  80eb04:	d9414317 	ldw	r5,1292(sp)
  80eb08:	081362c0 	call	81362c <__isinfd>
  80eb0c:	10021726 	beq	r2,zero,80f36c <___vfprintf_internal_r+0x18e8>
  80eb10:	d9014217 	ldw	r4,1288(sp)
  80eb14:	d9414317 	ldw	r5,1292(sp)
  80eb18:	000d883a 	mov	r6,zero
  80eb1c:	000f883a 	mov	r7,zero
  80eb20:	0814d600 	call	814d60 <__ltdf2>
  80eb24:	1002ca16 	blt	r2,zero,80f650 <___vfprintf_internal_r+0x1bcc>
  80eb28:	d9414d17 	ldw	r5,1332(sp)
  80eb2c:	008011c4 	movi	r2,71
  80eb30:	11420a16 	blt	r2,r5,80f35c <___vfprintf_internal_r+0x18d8>
  80eb34:	018020b4 	movhi	r6,130
  80eb38:	3181dd04 	addi	r6,r6,1908
  80eb3c:	d9814115 	stw	r6,1284(sp)
  80eb40:	d9014c17 	ldw	r4,1328(sp)
  80eb44:	00c000c4 	movi	r3,3
  80eb48:	00bfdfc4 	movi	r2,-129
  80eb4c:	2088703a 	and	r4,r4,r2
  80eb50:	180f883a 	mov	r7,r3
  80eb54:	d8c14515 	stw	r3,1300(sp)
  80eb58:	d9014c15 	stw	r4,1328(sp)
  80eb5c:	d8014615 	stw	zero,1304(sp)
  80eb60:	003e6a06 	br	80e50c <___vfprintf_internal_r+0xa88>
  80eb64:	38800017 	ldw	r2,0(r7)
  80eb68:	00c00044 	movi	r3,1
  80eb6c:	39c00104 	addi	r7,r7,4
  80eb70:	d9c14015 	stw	r7,1280(sp)
  80eb74:	d9000f04 	addi	r4,sp,60
  80eb78:	180f883a 	mov	r7,r3
  80eb7c:	d8c14515 	stw	r3,1300(sp)
  80eb80:	d9014115 	stw	r4,1284(sp)
  80eb84:	d8800f05 	stb	r2,60(sp)
  80eb88:	d8000405 	stb	zero,16(sp)
  80eb8c:	003cac06 	br	80de40 <___vfprintf_internal_r+0x3bc>
  80eb90:	014020b4 	movhi	r5,130
  80eb94:	2941e304 	addi	r5,r5,1932
  80eb98:	d9414415 	stw	r5,1296(sp)
  80eb9c:	d9814c17 	ldw	r6,1328(sp)
  80eba0:	3080080c 	andi	r2,r6,32
  80eba4:	1000f926 	beq	r2,zero,80ef8c <___vfprintf_internal_r+0x1508>
  80eba8:	3c000017 	ldw	r16,0(r7)
  80ebac:	3c400117 	ldw	r17,4(r7)
  80ebb0:	38800204 	addi	r2,r7,8
  80ebb4:	d8814015 	stw	r2,1280(sp)
  80ebb8:	d9414c17 	ldw	r5,1328(sp)
  80ebbc:	2880004c 	andi	r2,r5,1
  80ebc0:	1005003a 	cmpeq	r2,r2,zero
  80ebc4:	1000b31e 	bne	r2,zero,80ee94 <___vfprintf_internal_r+0x1410>
  80ebc8:	8444b03a 	or	r2,r16,r17
  80ebcc:	1000b126 	beq	r2,zero,80ee94 <___vfprintf_internal_r+0x1410>
  80ebd0:	d9814d17 	ldw	r6,1332(sp)
  80ebd4:	29400094 	ori	r5,r5,2
  80ebd8:	00800c04 	movi	r2,48
  80ebdc:	01000084 	movi	r4,2
  80ebe0:	d9414c15 	stw	r5,1328(sp)
  80ebe4:	d8800445 	stb	r2,17(sp)
  80ebe8:	d9800485 	stb	r6,18(sp)
  80ebec:	d8000405 	stb	zero,16(sp)
  80ebf0:	003e3206 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80ebf4:	018020b4 	movhi	r6,130
  80ebf8:	3181d804 	addi	r6,r6,1888
  80ebfc:	d9814415 	stw	r6,1296(sp)
  80ec00:	003fe606 	br	80eb9c <___vfprintf_internal_r+0x1118>
  80ec04:	00800ac4 	movi	r2,43
  80ec08:	d8800405 	stb	r2,16(sp)
  80ec0c:	b8c00007 	ldb	r3,0(r23)
  80ec10:	003c1b06 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80ec14:	d8814c17 	ldw	r2,1328(sp)
  80ec18:	b8c00007 	ldb	r3,0(r23)
  80ec1c:	10800054 	ori	r2,r2,1
  80ec20:	d8814c15 	stw	r2,1328(sp)
  80ec24:	003c1606 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80ec28:	d8800407 	ldb	r2,16(sp)
  80ec2c:	1000461e 	bne	r2,zero,80ed48 <___vfprintf_internal_r+0x12c4>
  80ec30:	00800804 	movi	r2,32
  80ec34:	d8800405 	stb	r2,16(sp)
  80ec38:	b8c00007 	ldb	r3,0(r23)
  80ec3c:	003c1006 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80ec40:	d9814c17 	ldw	r6,1328(sp)
  80ec44:	b8c00007 	ldb	r3,0(r23)
  80ec48:	31800214 	ori	r6,r6,8
  80ec4c:	d9814c15 	stw	r6,1328(sp)
  80ec50:	003c0b06 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80ec54:	0007883a 	mov	r3,zero
  80ec58:	01000244 	movi	r4,9
  80ec5c:	188002a4 	muli	r2,r3,10
  80ec60:	b8c00007 	ldb	r3,0(r23)
  80ec64:	d9814d17 	ldw	r6,1332(sp)
  80ec68:	bdc00044 	addi	r23,r23,1
  80ec6c:	d8c14d15 	stw	r3,1332(sp)
  80ec70:	d9414d17 	ldw	r5,1332(sp)
  80ec74:	3085883a 	add	r2,r6,r2
  80ec78:	10fff404 	addi	r3,r2,-48
  80ec7c:	28bff404 	addi	r2,r5,-48
  80ec80:	20bff62e 	bgeu	r4,r2,80ec5c <___vfprintf_internal_r+0x11d8>
  80ec84:	d8c14a15 	stw	r3,1320(sp)
  80ec88:	003bff06 	br	80dc88 <___vfprintf_internal_r+0x204>
  80ec8c:	d9414c17 	ldw	r5,1328(sp)
  80ec90:	b8c00007 	ldb	r3,0(r23)
  80ec94:	29402014 	ori	r5,r5,128
  80ec98:	d9414c15 	stw	r5,1328(sp)
  80ec9c:	003bf806 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80eca0:	b8c00007 	ldb	r3,0(r23)
  80eca4:	00800a84 	movi	r2,42
  80eca8:	bdc00044 	addi	r23,r23,1
  80ecac:	18831526 	beq	r3,r2,80f904 <___vfprintf_internal_r+0x1e80>
  80ecb0:	d8c14d15 	stw	r3,1332(sp)
  80ecb4:	18bff404 	addi	r2,r3,-48
  80ecb8:	00c00244 	movi	r3,9
  80ecbc:	18827836 	bltu	r3,r2,80f6a0 <___vfprintf_internal_r+0x1c1c>
  80ecc0:	000d883a 	mov	r6,zero
  80ecc4:	308002a4 	muli	r2,r6,10
  80ecc8:	b9800007 	ldb	r6,0(r23)
  80eccc:	d9414d17 	ldw	r5,1332(sp)
  80ecd0:	bdc00044 	addi	r23,r23,1
  80ecd4:	d9814d15 	stw	r6,1332(sp)
  80ecd8:	d9014d17 	ldw	r4,1332(sp)
  80ecdc:	1145883a 	add	r2,r2,r5
  80ece0:	11bff404 	addi	r6,r2,-48
  80ece4:	20bff404 	addi	r2,r4,-48
  80ece8:	18bff62e 	bgeu	r3,r2,80ecc4 <___vfprintf_internal_r+0x1240>
  80ecec:	3027883a 	mov	r19,r6
  80ecf0:	303be50e 	bge	r6,zero,80dc88 <___vfprintf_internal_r+0x204>
  80ecf4:	04ffffc4 	movi	r19,-1
  80ecf8:	003be306 	br	80dc88 <___vfprintf_internal_r+0x204>
  80ecfc:	d8000405 	stb	zero,16(sp)
  80ed00:	39800017 	ldw	r6,0(r7)
  80ed04:	39c00104 	addi	r7,r7,4
  80ed08:	d9c14015 	stw	r7,1280(sp)
  80ed0c:	d9814115 	stw	r6,1284(sp)
  80ed10:	3001c926 	beq	r6,zero,80f438 <___vfprintf_internal_r+0x19b4>
  80ed14:	98000e16 	blt	r19,zero,80ed50 <___vfprintf_internal_r+0x12cc>
  80ed18:	d9014117 	ldw	r4,1284(sp)
  80ed1c:	000b883a 	mov	r5,zero
  80ed20:	980d883a 	mov	r6,r19
  80ed24:	08124000 	call	812400 <memchr>
  80ed28:	10025926 	beq	r2,zero,80f690 <___vfprintf_internal_r+0x1c0c>
  80ed2c:	d8c14117 	ldw	r3,1284(sp)
  80ed30:	10cfc83a 	sub	r7,r2,r3
  80ed34:	99c19e16 	blt	r19,r7,80f3b0 <___vfprintf_internal_r+0x192c>
  80ed38:	d9c14515 	stw	r7,1300(sp)
  80ed3c:	38000916 	blt	r7,zero,80ed64 <___vfprintf_internal_r+0x12e0>
  80ed40:	d8014615 	stw	zero,1304(sp)
  80ed44:	003df106 	br	80e50c <___vfprintf_internal_r+0xa88>
  80ed48:	b8c00007 	ldb	r3,0(r23)
  80ed4c:	003bcc06 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80ed50:	d9014117 	ldw	r4,1284(sp)
  80ed54:	080ce500 	call	80ce50 <strlen>
  80ed58:	d8814515 	stw	r2,1300(sp)
  80ed5c:	100f883a 	mov	r7,r2
  80ed60:	103ff70e 	bge	r2,zero,80ed40 <___vfprintf_internal_r+0x12bc>
  80ed64:	d8014515 	stw	zero,1300(sp)
  80ed68:	d8014615 	stw	zero,1304(sp)
  80ed6c:	003de706 	br	80e50c <___vfprintf_internal_r+0xa88>
  80ed70:	20c03fcc 	andi	r3,r4,255
  80ed74:	00800044 	movi	r2,1
  80ed78:	18802d26 	beq	r3,r2,80ee30 <___vfprintf_internal_r+0x13ac>
  80ed7c:	18800e36 	bltu	r3,r2,80edb8 <___vfprintf_internal_r+0x1334>
  80ed80:	00800084 	movi	r2,2
  80ed84:	1880fa26 	beq	r3,r2,80f170 <___vfprintf_internal_r+0x16ec>
  80ed88:	010020b4 	movhi	r4,130
  80ed8c:	2101e804 	addi	r4,r4,1952
  80ed90:	080ce500 	call	80ce50 <strlen>
  80ed94:	100f883a 	mov	r7,r2
  80ed98:	dcc14515 	stw	r19,1300(sp)
  80ed9c:	9880010e 	bge	r19,r2,80eda4 <___vfprintf_internal_r+0x1320>
  80eda0:	d8814515 	stw	r2,1300(sp)
  80eda4:	008020b4 	movhi	r2,130
  80eda8:	1081e804 	addi	r2,r2,1952
  80edac:	dcc14615 	stw	r19,1304(sp)
  80edb0:	d8814115 	stw	r2,1284(sp)
  80edb4:	003dd506 	br	80e50c <___vfprintf_internal_r+0xa88>
  80edb8:	d9401904 	addi	r5,sp,100
  80edbc:	dd000f04 	addi	r20,sp,60
  80edc0:	d9414115 	stw	r5,1284(sp)
  80edc4:	880a977a 	slli	r5,r17,29
  80edc8:	d9814117 	ldw	r6,1284(sp)
  80edcc:	8004d0fa 	srli	r2,r16,3
  80edd0:	8806d0fa 	srli	r3,r17,3
  80edd4:	810001cc 	andi	r4,r16,7
  80edd8:	2884b03a 	or	r2,r5,r2
  80eddc:	31bfffc4 	addi	r6,r6,-1
  80ede0:	21000c04 	addi	r4,r4,48
  80ede4:	d9814115 	stw	r6,1284(sp)
  80ede8:	10cab03a 	or	r5,r2,r3
  80edec:	31000005 	stb	r4,0(r6)
  80edf0:	1021883a 	mov	r16,r2
  80edf4:	1823883a 	mov	r17,r3
  80edf8:	283ff21e 	bne	r5,zero,80edc4 <___vfprintf_internal_r+0x1340>
  80edfc:	d8c14c17 	ldw	r3,1328(sp)
  80ee00:	1880004c 	andi	r2,r3,1
  80ee04:	1005003a 	cmpeq	r2,r2,zero
  80ee08:	103db91e 	bne	r2,zero,80e4f0 <___vfprintf_internal_r+0xa6c>
  80ee0c:	20803fcc 	andi	r2,r4,255
  80ee10:	1080201c 	xori	r2,r2,128
  80ee14:	10bfe004 	addi	r2,r2,-128
  80ee18:	00c00c04 	movi	r3,48
  80ee1c:	10fdb426 	beq	r2,r3,80e4f0 <___vfprintf_internal_r+0xa6c>
  80ee20:	31bfffc4 	addi	r6,r6,-1
  80ee24:	d9814115 	stw	r6,1284(sp)
  80ee28:	30c00005 	stb	r3,0(r6)
  80ee2c:	003db006 	br	80e4f0 <___vfprintf_internal_r+0xa6c>
  80ee30:	88800068 	cmpgeui	r2,r17,1
  80ee34:	10002c1e 	bne	r2,zero,80eee8 <___vfprintf_internal_r+0x1464>
  80ee38:	8800021e 	bne	r17,zero,80ee44 <___vfprintf_internal_r+0x13c0>
  80ee3c:	00800244 	movi	r2,9
  80ee40:	14002936 	bltu	r2,r16,80eee8 <___vfprintf_internal_r+0x1464>
  80ee44:	d90018c4 	addi	r4,sp,99
  80ee48:	dd000f04 	addi	r20,sp,60
  80ee4c:	d9014115 	stw	r4,1284(sp)
  80ee50:	d9014117 	ldw	r4,1284(sp)
  80ee54:	80800c04 	addi	r2,r16,48
  80ee58:	20800005 	stb	r2,0(r4)
  80ee5c:	003da406 	br	80e4f0 <___vfprintf_internal_r+0xa6c>
  80ee60:	dc400d17 	ldw	r17,52(sp)
  80ee64:	070020b4 	movhi	fp,130
  80ee68:	e701ee84 	addi	fp,fp,1978
  80ee6c:	9425883a 	add	r18,r18,r16
  80ee70:	8c400044 	addi	r17,r17,1
  80ee74:	008001c4 	movi	r2,7
  80ee78:	1f000015 	stw	fp,0(r3)
  80ee7c:	1c000115 	stw	r16,4(r3)
  80ee80:	dc800e15 	stw	r18,56(sp)
  80ee84:	dc400d15 	stw	r17,52(sp)
  80ee88:	147de216 	blt	r2,r17,80e614 <___vfprintf_internal_r+0xb90>
  80ee8c:	18c00204 	addi	r3,r3,8
  80ee90:	003c7a06 	br	80e07c <___vfprintf_internal_r+0x5f8>
  80ee94:	01000084 	movi	r4,2
  80ee98:	d8000405 	stb	zero,16(sp)
  80ee9c:	003d8706 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80eea0:	d9814c17 	ldw	r6,1328(sp)
  80eea4:	30c4703a 	and	r2,r6,r3
  80eea8:	1005003a 	cmpeq	r2,r2,zero
  80eeac:	103cb926 	beq	r2,zero,80e194 <___vfprintf_internal_r+0x710>
  80eeb0:	d9014117 	ldw	r4,1284(sp)
  80eeb4:	94800044 	addi	r18,r18,1
  80eeb8:	8c400044 	addi	r17,r17,1
  80eebc:	008001c4 	movi	r2,7
  80eec0:	a9000015 	stw	r4,0(r21)
  80eec4:	a8c00115 	stw	r3,4(r21)
  80eec8:	dc800e15 	stw	r18,56(sp)
  80eecc:	dc400d15 	stw	r17,52(sp)
  80eed0:	147e6616 	blt	r2,r17,80e86c <___vfprintf_internal_r+0xde8>
  80eed4:	acc00204 	addi	r19,r21,8
  80eed8:	003cd706 	br	80e238 <___vfprintf_internal_r+0x7b4>
  80eedc:	070020b4 	movhi	fp,130
  80eee0:	e701ee84 	addi	fp,fp,1978
  80eee4:	003c4f06 	br	80e024 <___vfprintf_internal_r+0x5a0>
  80eee8:	dd000f04 	addi	r20,sp,60
  80eeec:	dc801904 	addi	r18,sp,100
  80eef0:	8009883a 	mov	r4,r16
  80eef4:	880b883a 	mov	r5,r17
  80eef8:	01800284 	movi	r6,10
  80eefc:	000f883a 	mov	r7,zero
  80ef00:	08143380 	call	814338 <__umoddi3>
  80ef04:	12000c04 	addi	r8,r2,48
  80ef08:	94bfffc4 	addi	r18,r18,-1
  80ef0c:	8009883a 	mov	r4,r16
  80ef10:	880b883a 	mov	r5,r17
  80ef14:	01800284 	movi	r6,10
  80ef18:	000f883a 	mov	r7,zero
  80ef1c:	92000005 	stb	r8,0(r18)
  80ef20:	0813d5c0 	call	813d5c <__udivdi3>
  80ef24:	1009883a 	mov	r4,r2
  80ef28:	1021883a 	mov	r16,r2
  80ef2c:	18800068 	cmpgeui	r2,r3,1
  80ef30:	1823883a 	mov	r17,r3
  80ef34:	103fee1e 	bne	r2,zero,80eef0 <___vfprintf_internal_r+0x146c>
  80ef38:	1800021e 	bne	r3,zero,80ef44 <___vfprintf_internal_r+0x14c0>
  80ef3c:	00800244 	movi	r2,9
  80ef40:	113feb36 	bltu	r2,r4,80eef0 <___vfprintf_internal_r+0x146c>
  80ef44:	94bfffc4 	addi	r18,r18,-1
  80ef48:	dc814115 	stw	r18,1284(sp)
  80ef4c:	003fc006 	br	80ee50 <___vfprintf_internal_r+0x13cc>
  80ef50:	d9014c17 	ldw	r4,1328(sp)
  80ef54:	2080004c 	andi	r2,r4,1
  80ef58:	10009a1e 	bne	r2,zero,80f1c4 <___vfprintf_internal_r+0x1740>
  80ef5c:	d9401904 	addi	r5,sp,100
  80ef60:	dd000f04 	addi	r20,sp,60
  80ef64:	d9414115 	stw	r5,1284(sp)
  80ef68:	003d6106 	br	80e4f0 <___vfprintf_internal_r+0xa6c>
  80ef6c:	d9014f17 	ldw	r4,1340(sp)
  80ef70:	b00b883a 	mov	r5,r22
  80ef74:	d9800c04 	addi	r6,sp,48
  80ef78:	080da2c0 	call	80da2c <__sprint_r>
  80ef7c:	103c791e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80ef80:	dc800e17 	ldw	r18,56(sp)
  80ef84:	d8c01904 	addi	r3,sp,100
  80ef88:	003cff06 	br	80e388 <___vfprintf_internal_r+0x904>
  80ef8c:	d8c14c17 	ldw	r3,1328(sp)
  80ef90:	1880040c 	andi	r2,r3,16
  80ef94:	1000711e 	bne	r2,zero,80f15c <___vfprintf_internal_r+0x16d8>
  80ef98:	d9014c17 	ldw	r4,1328(sp)
  80ef9c:	2080100c 	andi	r2,r4,64
  80efa0:	10006e26 	beq	r2,zero,80f15c <___vfprintf_internal_r+0x16d8>
  80efa4:	3c00000b 	ldhu	r16,0(r7)
  80efa8:	0023883a 	mov	r17,zero
  80efac:	39c00104 	addi	r7,r7,4
  80efb0:	d9c14015 	stw	r7,1280(sp)
  80efb4:	003f0006 	br	80ebb8 <___vfprintf_internal_r+0x1134>
  80efb8:	dc400d17 	ldw	r17,52(sp)
  80efbc:	070020b4 	movhi	fp,130
  80efc0:	e701ee84 	addi	fp,fp,1978
  80efc4:	9425883a 	add	r18,r18,r16
  80efc8:	8c400044 	addi	r17,r17,1
  80efcc:	008001c4 	movi	r2,7
  80efd0:	1f000015 	stw	fp,0(r3)
  80efd4:	1c000115 	stw	r16,4(r3)
  80efd8:	dc800e15 	stw	r18,56(sp)
  80efdc:	dc400d15 	stw	r17,52(sp)
  80efe0:	147d7616 	blt	r2,r17,80e5bc <___vfprintf_internal_r+0xb38>
  80efe4:	18c00204 	addi	r3,r3,8
  80efe8:	003d7b06 	br	80e5d8 <___vfprintf_internal_r+0xb54>
  80efec:	dc800e17 	ldw	r18,56(sp)
  80eff0:	dc400d17 	ldw	r17,52(sp)
  80eff4:	070020b4 	movhi	fp,130
  80eff8:	e701f284 	addi	fp,fp,1994
  80effc:	003bc006 	br	80df00 <___vfprintf_internal_r+0x47c>
  80f000:	d9014f17 	ldw	r4,1340(sp)
  80f004:	b00b883a 	mov	r5,r22
  80f008:	d9800c04 	addi	r6,sp,48
  80f00c:	080da2c0 	call	80da2c <__sprint_r>
  80f010:	103c541e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f014:	dc800e17 	ldw	r18,56(sp)
  80f018:	d8c01904 	addi	r3,sp,100
  80f01c:	003ce906 	br	80e3c4 <___vfprintf_internal_r+0x940>
  80f020:	3c000017 	ldw	r16,0(r7)
  80f024:	0009883a 	mov	r4,zero
  80f028:	39c00104 	addi	r7,r7,4
  80f02c:	0023883a 	mov	r17,zero
  80f030:	d9c14015 	stw	r7,1280(sp)
  80f034:	d8000405 	stb	zero,16(sp)
  80f038:	003d2006 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80f03c:	38800017 	ldw	r2,0(r7)
  80f040:	39c00104 	addi	r7,r7,4
  80f044:	d9c14015 	stw	r7,1280(sp)
  80f048:	1023d7fa 	srai	r17,r2,31
  80f04c:	1021883a 	mov	r16,r2
  80f050:	003d1806 	br	80e4b4 <___vfprintf_internal_r+0xa30>
  80f054:	3c000017 	ldw	r16,0(r7)
  80f058:	01000044 	movi	r4,1
  80f05c:	39c00104 	addi	r7,r7,4
  80f060:	0023883a 	mov	r17,zero
  80f064:	d9c14015 	stw	r7,1280(sp)
  80f068:	d8000405 	stb	zero,16(sp)
  80f06c:	003d1306 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80f070:	008020b4 	movhi	r2,130
  80f074:	10bfbb04 	addi	r2,r2,-276
  80f078:	94800044 	addi	r18,r18,1
  80f07c:	8c400044 	addi	r17,r17,1
  80f080:	a8800015 	stw	r2,0(r21)
  80f084:	00c00044 	movi	r3,1
  80f088:	008001c4 	movi	r2,7
  80f08c:	a8c00115 	stw	r3,4(r21)
  80f090:	dc800e15 	stw	r18,56(sp)
  80f094:	dc400d15 	stw	r17,52(sp)
  80f098:	1440ca16 	blt	r2,r17,80f3c4 <___vfprintf_internal_r+0x1940>
  80f09c:	a8c00204 	addi	r3,r21,8
  80f0a0:	2000061e 	bne	r4,zero,80f0bc <___vfprintf_internal_r+0x1638>
  80f0a4:	d9414717 	ldw	r5,1308(sp)
  80f0a8:	2800041e 	bne	r5,zero,80f0bc <___vfprintf_internal_r+0x1638>
  80f0ac:	d9814c17 	ldw	r6,1328(sp)
  80f0b0:	3080004c 	andi	r2,r6,1
  80f0b4:	1005003a 	cmpeq	r2,r2,zero
  80f0b8:	103bf01e 	bne	r2,zero,80e07c <___vfprintf_internal_r+0x5f8>
  80f0bc:	00800044 	movi	r2,1
  80f0c0:	dc400d17 	ldw	r17,52(sp)
  80f0c4:	18800115 	stw	r2,4(r3)
  80f0c8:	d8814917 	ldw	r2,1316(sp)
  80f0cc:	94800044 	addi	r18,r18,1
  80f0d0:	8c400044 	addi	r17,r17,1
  80f0d4:	18800015 	stw	r2,0(r3)
  80f0d8:	008001c4 	movi	r2,7
  80f0dc:	dc800e15 	stw	r18,56(sp)
  80f0e0:	dc400d15 	stw	r17,52(sp)
  80f0e4:	1440ca16 	blt	r2,r17,80f410 <___vfprintf_internal_r+0x198c>
  80f0e8:	18c00204 	addi	r3,r3,8
  80f0ec:	0121c83a 	sub	r16,zero,r4
  80f0f0:	0400500e 	bge	zero,r16,80f234 <___vfprintf_internal_r+0x17b0>
  80f0f4:	00800404 	movi	r2,16
  80f0f8:	1400800e 	bge	r2,r16,80f2fc <___vfprintf_internal_r+0x1878>
  80f0fc:	1027883a 	mov	r19,r2
  80f100:	070020b4 	movhi	fp,130
  80f104:	e701ee84 	addi	fp,fp,1978
  80f108:	050001c4 	movi	r20,7
  80f10c:	00000306 	br	80f11c <___vfprintf_internal_r+0x1698>
  80f110:	18c00204 	addi	r3,r3,8
  80f114:	843ffc04 	addi	r16,r16,-16
  80f118:	9c007a0e 	bge	r19,r16,80f304 <___vfprintf_internal_r+0x1880>
  80f11c:	94800404 	addi	r18,r18,16
  80f120:	8c400044 	addi	r17,r17,1
  80f124:	1f000015 	stw	fp,0(r3)
  80f128:	1cc00115 	stw	r19,4(r3)
  80f12c:	dc800e15 	stw	r18,56(sp)
  80f130:	dc400d15 	stw	r17,52(sp)
  80f134:	a47ff60e 	bge	r20,r17,80f110 <___vfprintf_internal_r+0x168c>
  80f138:	d9014f17 	ldw	r4,1340(sp)
  80f13c:	b00b883a 	mov	r5,r22
  80f140:	d9800c04 	addi	r6,sp,48
  80f144:	080da2c0 	call	80da2c <__sprint_r>
  80f148:	103c061e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f14c:	dc800e17 	ldw	r18,56(sp)
  80f150:	dc400d17 	ldw	r17,52(sp)
  80f154:	d8c01904 	addi	r3,sp,100
  80f158:	003fee06 	br	80f114 <___vfprintf_internal_r+0x1690>
  80f15c:	3c000017 	ldw	r16,0(r7)
  80f160:	0023883a 	mov	r17,zero
  80f164:	39c00104 	addi	r7,r7,4
  80f168:	d9c14015 	stw	r7,1280(sp)
  80f16c:	003e9206 	br	80ebb8 <___vfprintf_internal_r+0x1134>
  80f170:	d9401904 	addi	r5,sp,100
  80f174:	dd000f04 	addi	r20,sp,60
  80f178:	d9414115 	stw	r5,1284(sp)
  80f17c:	d9814417 	ldw	r6,1296(sp)
  80f180:	880a973a 	slli	r5,r17,28
  80f184:	8004d13a 	srli	r2,r16,4
  80f188:	810003cc 	andi	r4,r16,15
  80f18c:	3109883a 	add	r4,r6,r4
  80f190:	2884b03a 	or	r2,r5,r2
  80f194:	21400003 	ldbu	r5,0(r4)
  80f198:	d9014117 	ldw	r4,1284(sp)
  80f19c:	8806d13a 	srli	r3,r17,4
  80f1a0:	1021883a 	mov	r16,r2
  80f1a4:	213fffc4 	addi	r4,r4,-1
  80f1a8:	d9014115 	stw	r4,1284(sp)
  80f1ac:	d9814117 	ldw	r6,1284(sp)
  80f1b0:	10c8b03a 	or	r4,r2,r3
  80f1b4:	1823883a 	mov	r17,r3
  80f1b8:	31400005 	stb	r5,0(r6)
  80f1bc:	203fef1e 	bne	r4,zero,80f17c <___vfprintf_internal_r+0x16f8>
  80f1c0:	003ccb06 	br	80e4f0 <___vfprintf_internal_r+0xa6c>
  80f1c4:	00800c04 	movi	r2,48
  80f1c8:	d98018c4 	addi	r6,sp,99
  80f1cc:	dd000f04 	addi	r20,sp,60
  80f1d0:	d88018c5 	stb	r2,99(sp)
  80f1d4:	d9814115 	stw	r6,1284(sp)
  80f1d8:	003cc506 	br	80e4f0 <___vfprintf_internal_r+0xa6c>
  80f1dc:	dc400d17 	ldw	r17,52(sp)
  80f1e0:	070020b4 	movhi	fp,130
  80f1e4:	e701f284 	addi	fp,fp,1994
  80f1e8:	003bc706 	br	80e108 <___vfprintf_internal_r+0x684>
  80f1ec:	d9414c17 	ldw	r5,1328(sp)
  80f1f0:	2880040c 	andi	r2,r5,16
  80f1f4:	10007c26 	beq	r2,zero,80f3e8 <___vfprintf_internal_r+0x1964>
  80f1f8:	38800017 	ldw	r2,0(r7)
  80f1fc:	39c00104 	addi	r7,r7,4
  80f200:	d9c14015 	stw	r7,1280(sp)
  80f204:	d9814b17 	ldw	r6,1324(sp)
  80f208:	d9c14017 	ldw	r7,1280(sp)
  80f20c:	11800015 	stw	r6,0(r2)
  80f210:	003a7806 	br	80dbf4 <___vfprintf_internal_r+0x170>
  80f214:	d9014f17 	ldw	r4,1340(sp)
  80f218:	b00b883a 	mov	r5,r22
  80f21c:	d9800c04 	addi	r6,sp,48
  80f220:	080da2c0 	call	80da2c <__sprint_r>
  80f224:	103bcf1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f228:	dc800e17 	ldw	r18,56(sp)
  80f22c:	dc400d17 	ldw	r17,52(sp)
  80f230:	d8c01904 	addi	r3,sp,100
  80f234:	d9014717 	ldw	r4,1308(sp)
  80f238:	d9414117 	ldw	r5,1284(sp)
  80f23c:	8c400044 	addi	r17,r17,1
  80f240:	9125883a 	add	r18,r18,r4
  80f244:	008001c4 	movi	r2,7
  80f248:	19400015 	stw	r5,0(r3)
  80f24c:	19000115 	stw	r4,4(r3)
  80f250:	dc800e15 	stw	r18,56(sp)
  80f254:	dc400d15 	stw	r17,52(sp)
  80f258:	147cee16 	blt	r2,r17,80e614 <___vfprintf_internal_r+0xb90>
  80f25c:	18c00204 	addi	r3,r3,8
  80f260:	003b8606 	br	80e07c <___vfprintf_internal_r+0x5f8>
  80f264:	38c00017 	ldw	r3,0(r7)
  80f268:	39000204 	addi	r4,r7,8
  80f26c:	d9014015 	stw	r4,1280(sp)
  80f270:	d8c14215 	stw	r3,1288(sp)
  80f274:	39c00117 	ldw	r7,4(r7)
  80f278:	d9c14315 	stw	r7,1292(sp)
  80f27c:	003e2006 	br	80eb00 <___vfprintf_internal_r+0x107c>
  80f280:	0005883a 	mov	r2,zero
  80f284:	1409c83a 	sub	r4,r2,r16
  80f288:	1105803a 	cmpltu	r2,r2,r4
  80f28c:	044bc83a 	sub	r5,zero,r17
  80f290:	2885c83a 	sub	r2,r5,r2
  80f294:	2021883a 	mov	r16,r4
  80f298:	1023883a 	mov	r17,r2
  80f29c:	01000044 	movi	r4,1
  80f2a0:	00800b44 	movi	r2,45
  80f2a4:	d8800405 	stb	r2,16(sp)
  80f2a8:	003c8406 	br	80e4bc <___vfprintf_internal_r+0xa38>
  80f2ac:	d9014f17 	ldw	r4,1340(sp)
  80f2b0:	b00b883a 	mov	r5,r22
  80f2b4:	d9800c04 	addi	r6,sp,48
  80f2b8:	080da2c0 	call	80da2c <__sprint_r>
  80f2bc:	103ba91e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f2c0:	dc800e17 	ldw	r18,56(sp)
  80f2c4:	dc400d17 	ldw	r17,52(sp)
  80f2c8:	d9000517 	ldw	r4,20(sp)
  80f2cc:	d9401904 	addi	r5,sp,100
  80f2d0:	003da706 	br	80e970 <___vfprintf_internal_r+0xeec>
  80f2d4:	d9014f17 	ldw	r4,1340(sp)
  80f2d8:	b00b883a 	mov	r5,r22
  80f2dc:	d9800c04 	addi	r6,sp,48
  80f2e0:	080da2c0 	call	80da2c <__sprint_r>
  80f2e4:	103b9f1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f2e8:	dc800e17 	ldw	r18,56(sp)
  80f2ec:	dc400d17 	ldw	r17,52(sp)
  80f2f0:	d9000517 	ldw	r4,20(sp)
  80f2f4:	d8c01904 	addi	r3,sp,100
  80f2f8:	003d9106 	br	80e940 <___vfprintf_internal_r+0xebc>
  80f2fc:	070020b4 	movhi	fp,130
  80f300:	e701ee84 	addi	fp,fp,1978
  80f304:	9425883a 	add	r18,r18,r16
  80f308:	8c400044 	addi	r17,r17,1
  80f30c:	008001c4 	movi	r2,7
  80f310:	1f000015 	stw	fp,0(r3)
  80f314:	1c000115 	stw	r16,4(r3)
  80f318:	dc800e15 	stw	r18,56(sp)
  80f31c:	dc400d15 	stw	r17,52(sp)
  80f320:	147fbc16 	blt	r2,r17,80f214 <___vfprintf_internal_r+0x1790>
  80f324:	18c00204 	addi	r3,r3,8
  80f328:	003fc206 	br	80f234 <___vfprintf_internal_r+0x17b0>
  80f32c:	d9014f17 	ldw	r4,1340(sp)
  80f330:	b00b883a 	mov	r5,r22
  80f334:	d9800c04 	addi	r6,sp,48
  80f338:	080da2c0 	call	80da2c <__sprint_r>
  80f33c:	103b891e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f340:	dc800e17 	ldw	r18,56(sp)
  80f344:	d9000517 	ldw	r4,20(sp)
  80f348:	d8c01904 	addi	r3,sp,100
  80f34c:	003d0206 	br	80e758 <___vfprintf_internal_r+0xcd4>
  80f350:	070020b4 	movhi	fp,130
  80f354:	e701ee84 	addi	fp,fp,1978
  80f358:	003be406 	br	80e2ec <___vfprintf_internal_r+0x868>
  80f35c:	008020b4 	movhi	r2,130
  80f360:	1081de04 	addi	r2,r2,1912
  80f364:	d8814115 	stw	r2,1284(sp)
  80f368:	003df506 	br	80eb40 <___vfprintf_internal_r+0x10bc>
  80f36c:	d9014217 	ldw	r4,1288(sp)
  80f370:	d9414317 	ldw	r5,1292(sp)
  80f374:	081366c0 	call	81366c <__isnand>
  80f378:	10003926 	beq	r2,zero,80f460 <___vfprintf_internal_r+0x19dc>
  80f37c:	d9414d17 	ldw	r5,1332(sp)
  80f380:	008011c4 	movi	r2,71
  80f384:	1140ce16 	blt	r2,r5,80f6c0 <___vfprintf_internal_r+0x1c3c>
  80f388:	018020b4 	movhi	r6,130
  80f38c:	3181df04 	addi	r6,r6,1916
  80f390:	d9814115 	stw	r6,1284(sp)
  80f394:	003dea06 	br	80eb40 <___vfprintf_internal_r+0x10bc>
  80f398:	d9014c17 	ldw	r4,1328(sp)
  80f39c:	bdc00044 	addi	r23,r23,1
  80f3a0:	b8c00007 	ldb	r3,0(r23)
  80f3a4:	21000814 	ori	r4,r4,32
  80f3a8:	d9014c15 	stw	r4,1328(sp)
  80f3ac:	003a3406 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80f3b0:	dcc14515 	stw	r19,1300(sp)
  80f3b4:	98011016 	blt	r19,zero,80f7f8 <___vfprintf_internal_r+0x1d74>
  80f3b8:	980f883a 	mov	r7,r19
  80f3bc:	d8014615 	stw	zero,1304(sp)
  80f3c0:	003c5206 	br	80e50c <___vfprintf_internal_r+0xa88>
  80f3c4:	d9014f17 	ldw	r4,1340(sp)
  80f3c8:	b00b883a 	mov	r5,r22
  80f3cc:	d9800c04 	addi	r6,sp,48
  80f3d0:	080da2c0 	call	80da2c <__sprint_r>
  80f3d4:	103b631e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f3d8:	dc800e17 	ldw	r18,56(sp)
  80f3dc:	d9000517 	ldw	r4,20(sp)
  80f3e0:	d8c01904 	addi	r3,sp,100
  80f3e4:	003f2e06 	br	80f0a0 <___vfprintf_internal_r+0x161c>
  80f3e8:	d8c14c17 	ldw	r3,1328(sp)
  80f3ec:	1880100c 	andi	r2,r3,64
  80f3f0:	1000a026 	beq	r2,zero,80f674 <___vfprintf_internal_r+0x1bf0>
  80f3f4:	38800017 	ldw	r2,0(r7)
  80f3f8:	39c00104 	addi	r7,r7,4
  80f3fc:	d9c14015 	stw	r7,1280(sp)
  80f400:	d9014b17 	ldw	r4,1324(sp)
  80f404:	d9c14017 	ldw	r7,1280(sp)
  80f408:	1100000d 	sth	r4,0(r2)
  80f40c:	0039f906 	br	80dbf4 <___vfprintf_internal_r+0x170>
  80f410:	d9014f17 	ldw	r4,1340(sp)
  80f414:	b00b883a 	mov	r5,r22
  80f418:	d9800c04 	addi	r6,sp,48
  80f41c:	080da2c0 	call	80da2c <__sprint_r>
  80f420:	103b501e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f424:	dc800e17 	ldw	r18,56(sp)
  80f428:	dc400d17 	ldw	r17,52(sp)
  80f42c:	d9000517 	ldw	r4,20(sp)
  80f430:	d8c01904 	addi	r3,sp,100
  80f434:	003f2d06 	br	80f0ec <___vfprintf_internal_r+0x1668>
  80f438:	00800184 	movi	r2,6
  80f43c:	14c09a36 	bltu	r2,r19,80f6a8 <___vfprintf_internal_r+0x1c24>
  80f440:	dcc14515 	stw	r19,1300(sp)
  80f444:	9800010e 	bge	r19,zero,80f44c <___vfprintf_internal_r+0x19c8>
  80f448:	d8014515 	stw	zero,1300(sp)
  80f44c:	008020b4 	movhi	r2,130
  80f450:	1081e104 	addi	r2,r2,1924
  80f454:	980f883a 	mov	r7,r19
  80f458:	d8814115 	stw	r2,1284(sp)
  80f45c:	003a7806 	br	80de40 <___vfprintf_internal_r+0x3bc>
  80f460:	00bfffc4 	movi	r2,-1
  80f464:	9880e226 	beq	r19,r2,80f7f0 <___vfprintf_internal_r+0x1d6c>
  80f468:	d9414d17 	ldw	r5,1332(sp)
  80f46c:	008019c4 	movi	r2,103
  80f470:	2880dc26 	beq	r5,r2,80f7e4 <___vfprintf_internal_r+0x1d60>
  80f474:	008011c4 	movi	r2,71
  80f478:	2880da26 	beq	r5,r2,80f7e4 <___vfprintf_internal_r+0x1d60>
  80f47c:	d9414c17 	ldw	r5,1328(sp)
  80f480:	d9014317 	ldw	r4,1292(sp)
  80f484:	d9814217 	ldw	r6,1288(sp)
  80f488:	29404014 	ori	r5,r5,256
  80f48c:	d9414c15 	stw	r5,1328(sp)
  80f490:	2000cc16 	blt	r4,zero,80f7c4 <___vfprintf_internal_r+0x1d40>
  80f494:	3021883a 	mov	r16,r6
  80f498:	2023883a 	mov	r17,r4
  80f49c:	0039883a 	mov	fp,zero
  80f4a0:	d9414d17 	ldw	r5,1332(sp)
  80f4a4:	00801984 	movi	r2,102
  80f4a8:	2880b726 	beq	r5,r2,80f788 <___vfprintf_internal_r+0x1d04>
  80f4ac:	00801184 	movi	r2,70
  80f4b0:	2880b526 	beq	r5,r2,80f788 <___vfprintf_internal_r+0x1d04>
  80f4b4:	00801944 	movi	r2,101
  80f4b8:	2880c826 	beq	r5,r2,80f7dc <___vfprintf_internal_r+0x1d58>
  80f4bc:	00801144 	movi	r2,69
  80f4c0:	2880c626 	beq	r5,r2,80f7dc <___vfprintf_internal_r+0x1d58>
  80f4c4:	9829883a 	mov	r20,r19
  80f4c8:	d9014f17 	ldw	r4,1340(sp)
  80f4cc:	d8800504 	addi	r2,sp,20
  80f4d0:	880d883a 	mov	r6,r17
  80f4d4:	d8800115 	stw	r2,4(sp)
  80f4d8:	d8c00604 	addi	r3,sp,24
  80f4dc:	d8800704 	addi	r2,sp,28
  80f4e0:	800b883a 	mov	r5,r16
  80f4e4:	01c00084 	movi	r7,2
  80f4e8:	d8c00215 	stw	r3,8(sp)
  80f4ec:	d8800315 	stw	r2,12(sp)
  80f4f0:	dd000015 	stw	r20,0(sp)
  80f4f4:	080fca80 	call	80fca8 <_dtoa_r>
  80f4f8:	d9814d17 	ldw	r6,1332(sp)
  80f4fc:	d8814115 	stw	r2,1284(sp)
  80f500:	008019c4 	movi	r2,103
  80f504:	30809526 	beq	r6,r2,80f75c <___vfprintf_internal_r+0x1cd8>
  80f508:	d8c14d17 	ldw	r3,1332(sp)
  80f50c:	008011c4 	movi	r2,71
  80f510:	18809226 	beq	r3,r2,80f75c <___vfprintf_internal_r+0x1cd8>
  80f514:	d9414117 	ldw	r5,1284(sp)
  80f518:	d9814d17 	ldw	r6,1332(sp)
  80f51c:	00801984 	movi	r2,102
  80f520:	2d25883a 	add	r18,r5,r20
  80f524:	30808626 	beq	r6,r2,80f740 <___vfprintf_internal_r+0x1cbc>
  80f528:	00801184 	movi	r2,70
  80f52c:	30808426 	beq	r6,r2,80f740 <___vfprintf_internal_r+0x1cbc>
  80f530:	000d883a 	mov	r6,zero
  80f534:	000f883a 	mov	r7,zero
  80f538:	880b883a 	mov	r5,r17
  80f53c:	8009883a 	mov	r4,r16
  80f540:	0814b400 	call	814b40 <__eqdf2>
  80f544:	1000751e 	bne	r2,zero,80f71c <___vfprintf_internal_r+0x1c98>
  80f548:	9005883a 	mov	r2,r18
  80f54c:	dc800715 	stw	r18,28(sp)
  80f550:	d9014117 	ldw	r4,1284(sp)
  80f554:	d9414d17 	ldw	r5,1332(sp)
  80f558:	00c019c4 	movi	r3,103
  80f55c:	1125c83a 	sub	r18,r2,r4
  80f560:	28c06826 	beq	r5,r3,80f704 <___vfprintf_internal_r+0x1c80>
  80f564:	008011c4 	movi	r2,71
  80f568:	28806626 	beq	r5,r2,80f704 <___vfprintf_internal_r+0x1c80>
  80f56c:	d9000517 	ldw	r4,20(sp)
  80f570:	d8c14d17 	ldw	r3,1332(sp)
  80f574:	00801944 	movi	r2,101
  80f578:	10c05516 	blt	r2,r3,80f6d0 <___vfprintf_internal_r+0x1c4c>
  80f57c:	213fffc4 	addi	r4,r4,-1
  80f580:	d9000515 	stw	r4,20(sp)
  80f584:	d8c00805 	stb	r3,32(sp)
  80f588:	2021883a 	mov	r16,r4
  80f58c:	2000c116 	blt	r4,zero,80f894 <___vfprintf_internal_r+0x1e10>
  80f590:	00800ac4 	movi	r2,43
  80f594:	d8800845 	stb	r2,33(sp)
  80f598:	00800244 	movi	r2,9
  80f59c:	1400af0e 	bge	r2,r16,80f85c <___vfprintf_internal_r+0x1dd8>
  80f5a0:	1027883a 	mov	r19,r2
  80f5a4:	dc400b84 	addi	r17,sp,46
  80f5a8:	8009883a 	mov	r4,r16
  80f5ac:	01400284 	movi	r5,10
  80f5b0:	080b2700 	call	80b270 <__modsi3>
  80f5b4:	10800c04 	addi	r2,r2,48
  80f5b8:	8c7fffc4 	addi	r17,r17,-1
  80f5bc:	8009883a 	mov	r4,r16
  80f5c0:	01400284 	movi	r5,10
  80f5c4:	88800005 	stb	r2,0(r17)
  80f5c8:	080b2100 	call	80b210 <__divsi3>
  80f5cc:	1021883a 	mov	r16,r2
  80f5d0:	98bff516 	blt	r19,r2,80f5a8 <___vfprintf_internal_r+0x1b24>
  80f5d4:	10c00c04 	addi	r3,r2,48
  80f5d8:	d88009c4 	addi	r2,sp,39
  80f5dc:	108001c4 	addi	r2,r2,7
  80f5e0:	897fffc4 	addi	r5,r17,-1
  80f5e4:	88ffffc5 	stb	r3,-1(r17)
  80f5e8:	2880a72e 	bgeu	r5,r2,80f888 <___vfprintf_internal_r+0x1e04>
  80f5ec:	1009883a 	mov	r4,r2
  80f5f0:	d9800804 	addi	r6,sp,32
  80f5f4:	d8c00884 	addi	r3,sp,34
  80f5f8:	28800003 	ldbu	r2,0(r5)
  80f5fc:	29400044 	addi	r5,r5,1
  80f600:	18800005 	stb	r2,0(r3)
  80f604:	18c00044 	addi	r3,r3,1
  80f608:	293ffb36 	bltu	r5,r4,80f5f8 <___vfprintf_internal_r+0x1b74>
  80f60c:	1987c83a 	sub	r3,r3,r6
  80f610:	00800044 	movi	r2,1
  80f614:	d8c14815 	stw	r3,1312(sp)
  80f618:	90cf883a 	add	r7,r18,r3
  80f61c:	1480960e 	bge	r2,r18,80f878 <___vfprintf_internal_r+0x1df4>
  80f620:	39c00044 	addi	r7,r7,1
  80f624:	d9c14515 	stw	r7,1300(sp)
  80f628:	38003416 	blt	r7,zero,80f6fc <___vfprintf_internal_r+0x1c78>
  80f62c:	e0803fcc 	andi	r2,fp,255
  80f630:	1080201c 	xori	r2,r2,128
  80f634:	10bfe004 	addi	r2,r2,-128
  80f638:	10004e26 	beq	r2,zero,80f774 <___vfprintf_internal_r+0x1cf0>
  80f63c:	00800b44 	movi	r2,45
  80f640:	dc814715 	stw	r18,1308(sp)
  80f644:	d8014615 	stw	zero,1304(sp)
  80f648:	d8800405 	stb	r2,16(sp)
  80f64c:	003bb106 	br	80e514 <___vfprintf_internal_r+0xa90>
  80f650:	00800b44 	movi	r2,45
  80f654:	d8800405 	stb	r2,16(sp)
  80f658:	003d3306 	br	80eb28 <___vfprintf_internal_r+0x10a4>
  80f65c:	d9014f17 	ldw	r4,1340(sp)
  80f660:	b00b883a 	mov	r5,r22
  80f664:	d9800c04 	addi	r6,sp,48
  80f668:	080da2c0 	call	80da2c <__sprint_r>
  80f66c:	103abd1e 	bne	r2,zero,80e164 <___vfprintf_internal_r+0x6e0>
  80f670:	003abb06 	br	80e160 <___vfprintf_internal_r+0x6dc>
  80f674:	38800017 	ldw	r2,0(r7)
  80f678:	39c00104 	addi	r7,r7,4
  80f67c:	d9c14015 	stw	r7,1280(sp)
  80f680:	d9414b17 	ldw	r5,1324(sp)
  80f684:	d9c14017 	ldw	r7,1280(sp)
  80f688:	11400015 	stw	r5,0(r2)
  80f68c:	00395906 	br	80dbf4 <___vfprintf_internal_r+0x170>
  80f690:	980f883a 	mov	r7,r19
  80f694:	dcc14515 	stw	r19,1300(sp)
  80f698:	d8014615 	stw	zero,1304(sp)
  80f69c:	003b9b06 	br	80e50c <___vfprintf_internal_r+0xa88>
  80f6a0:	0027883a 	mov	r19,zero
  80f6a4:	00397806 	br	80dc88 <___vfprintf_internal_r+0x204>
  80f6a8:	00c020b4 	movhi	r3,130
  80f6ac:	18c1e104 	addi	r3,r3,1924
  80f6b0:	100f883a 	mov	r7,r2
  80f6b4:	d8814515 	stw	r2,1300(sp)
  80f6b8:	d8c14115 	stw	r3,1284(sp)
  80f6bc:	0039e006 	br	80de40 <___vfprintf_internal_r+0x3bc>
  80f6c0:	008020b4 	movhi	r2,130
  80f6c4:	1081e004 	addi	r2,r2,1920
  80f6c8:	d8814115 	stw	r2,1284(sp)
  80f6cc:	003d1c06 	br	80eb40 <___vfprintf_internal_r+0x10bc>
  80f6d0:	d9414d17 	ldw	r5,1332(sp)
  80f6d4:	00801984 	movi	r2,102
  80f6d8:	28804926 	beq	r5,r2,80f800 <___vfprintf_internal_r+0x1d7c>
  80f6dc:	200f883a 	mov	r7,r4
  80f6e0:	24805716 	blt	r4,r18,80f840 <___vfprintf_internal_r+0x1dbc>
  80f6e4:	d9414c17 	ldw	r5,1328(sp)
  80f6e8:	2880004c 	andi	r2,r5,1
  80f6ec:	10000126 	beq	r2,zero,80f6f4 <___vfprintf_internal_r+0x1c70>
  80f6f0:	21c00044 	addi	r7,r4,1
  80f6f4:	d9c14515 	stw	r7,1300(sp)
  80f6f8:	383fcc0e 	bge	r7,zero,80f62c <___vfprintf_internal_r+0x1ba8>
  80f6fc:	d8014515 	stw	zero,1300(sp)
  80f700:	003fca06 	br	80f62c <___vfprintf_internal_r+0x1ba8>
  80f704:	d9000517 	ldw	r4,20(sp)
  80f708:	00bfff04 	movi	r2,-4
  80f70c:	1100480e 	bge	r2,r4,80f830 <___vfprintf_internal_r+0x1dac>
  80f710:	99004716 	blt	r19,r4,80f830 <___vfprintf_internal_r+0x1dac>
  80f714:	d8c14d15 	stw	r3,1332(sp)
  80f718:	003ff006 	br	80f6dc <___vfprintf_internal_r+0x1c58>
  80f71c:	d8800717 	ldw	r2,28(sp)
  80f720:	14bf8b2e 	bgeu	r2,r18,80f550 <___vfprintf_internal_r+0x1acc>
  80f724:	9007883a 	mov	r3,r18
  80f728:	01000c04 	movi	r4,48
  80f72c:	11000005 	stb	r4,0(r2)
  80f730:	10800044 	addi	r2,r2,1
  80f734:	d8800715 	stw	r2,28(sp)
  80f738:	18bffc1e 	bne	r3,r2,80f72c <___vfprintf_internal_r+0x1ca8>
  80f73c:	003f8406 	br	80f550 <___vfprintf_internal_r+0x1acc>
  80f740:	d8814117 	ldw	r2,1284(sp)
  80f744:	10c00007 	ldb	r3,0(r2)
  80f748:	00800c04 	movi	r2,48
  80f74c:	18805b26 	beq	r3,r2,80f8bc <___vfprintf_internal_r+0x1e38>
  80f750:	d9000517 	ldw	r4,20(sp)
  80f754:	9125883a 	add	r18,r18,r4
  80f758:	003f7506 	br	80f530 <___vfprintf_internal_r+0x1aac>
  80f75c:	d9014c17 	ldw	r4,1328(sp)
  80f760:	2080004c 	andi	r2,r4,1
  80f764:	1005003a 	cmpeq	r2,r2,zero
  80f768:	103f6a26 	beq	r2,zero,80f514 <___vfprintf_internal_r+0x1a90>
  80f76c:	d8800717 	ldw	r2,28(sp)
  80f770:	003f7706 	br	80f550 <___vfprintf_internal_r+0x1acc>
  80f774:	d9c14515 	stw	r7,1300(sp)
  80f778:	38004d16 	blt	r7,zero,80f8b0 <___vfprintf_internal_r+0x1e2c>
  80f77c:	dc814715 	stw	r18,1308(sp)
  80f780:	d8014615 	stw	zero,1304(sp)
  80f784:	003b6106 	br	80e50c <___vfprintf_internal_r+0xa88>
  80f788:	d9014f17 	ldw	r4,1340(sp)
  80f78c:	d8800504 	addi	r2,sp,20
  80f790:	d8800115 	stw	r2,4(sp)
  80f794:	d8c00604 	addi	r3,sp,24
  80f798:	d8800704 	addi	r2,sp,28
  80f79c:	800b883a 	mov	r5,r16
  80f7a0:	880d883a 	mov	r6,r17
  80f7a4:	01c000c4 	movi	r7,3
  80f7a8:	d8c00215 	stw	r3,8(sp)
  80f7ac:	d8800315 	stw	r2,12(sp)
  80f7b0:	dcc00015 	stw	r19,0(sp)
  80f7b4:	9829883a 	mov	r20,r19
  80f7b8:	080fca80 	call	80fca8 <_dtoa_r>
  80f7bc:	d8814115 	stw	r2,1284(sp)
  80f7c0:	003f5106 	br	80f508 <___vfprintf_internal_r+0x1a84>
  80f7c4:	d8c14217 	ldw	r3,1288(sp)
  80f7c8:	d9014317 	ldw	r4,1292(sp)
  80f7cc:	07000b44 	movi	fp,45
  80f7d0:	1821883a 	mov	r16,r3
  80f7d4:	2460003c 	xorhi	r17,r4,32768
  80f7d8:	003f3106 	br	80f4a0 <___vfprintf_internal_r+0x1a1c>
  80f7dc:	9d000044 	addi	r20,r19,1
  80f7e0:	003f3906 	br	80f4c8 <___vfprintf_internal_r+0x1a44>
  80f7e4:	983f251e 	bne	r19,zero,80f47c <___vfprintf_internal_r+0x19f8>
  80f7e8:	04c00044 	movi	r19,1
  80f7ec:	003f2306 	br	80f47c <___vfprintf_internal_r+0x19f8>
  80f7f0:	04c00184 	movi	r19,6
  80f7f4:	003f2106 	br	80f47c <___vfprintf_internal_r+0x19f8>
  80f7f8:	d8014515 	stw	zero,1300(sp)
  80f7fc:	003eee06 	br	80f3b8 <___vfprintf_internal_r+0x1934>
  80f800:	200f883a 	mov	r7,r4
  80f804:	0100370e 	bge	zero,r4,80f8e4 <___vfprintf_internal_r+0x1e60>
  80f808:	9800031e 	bne	r19,zero,80f818 <___vfprintf_internal_r+0x1d94>
  80f80c:	d9814c17 	ldw	r6,1328(sp)
  80f810:	3080004c 	andi	r2,r6,1
  80f814:	103fb726 	beq	r2,zero,80f6f4 <___vfprintf_internal_r+0x1c70>
  80f818:	20800044 	addi	r2,r4,1
  80f81c:	98a7883a 	add	r19,r19,r2
  80f820:	dcc14515 	stw	r19,1300(sp)
  80f824:	980f883a 	mov	r7,r19
  80f828:	983f800e 	bge	r19,zero,80f62c <___vfprintf_internal_r+0x1ba8>
  80f82c:	003fb306 	br	80f6fc <___vfprintf_internal_r+0x1c78>
  80f830:	d9814d17 	ldw	r6,1332(sp)
  80f834:	31bfff84 	addi	r6,r6,-2
  80f838:	d9814d15 	stw	r6,1332(sp)
  80f83c:	003f4c06 	br	80f570 <___vfprintf_internal_r+0x1aec>
  80f840:	0100180e 	bge	zero,r4,80f8a4 <___vfprintf_internal_r+0x1e20>
  80f844:	00800044 	movi	r2,1
  80f848:	1485883a 	add	r2,r2,r18
  80f84c:	d8814515 	stw	r2,1300(sp)
  80f850:	100f883a 	mov	r7,r2
  80f854:	103f750e 	bge	r2,zero,80f62c <___vfprintf_internal_r+0x1ba8>
  80f858:	003fa806 	br	80f6fc <___vfprintf_internal_r+0x1c78>
  80f85c:	80c00c04 	addi	r3,r16,48
  80f860:	00800c04 	movi	r2,48
  80f864:	d8c008c5 	stb	r3,35(sp)
  80f868:	d9800804 	addi	r6,sp,32
  80f86c:	d8c00904 	addi	r3,sp,36
  80f870:	d8800885 	stb	r2,34(sp)
  80f874:	003f6506 	br	80f60c <___vfprintf_internal_r+0x1b88>
  80f878:	d9014c17 	ldw	r4,1328(sp)
  80f87c:	2084703a 	and	r2,r4,r2
  80f880:	103f9c26 	beq	r2,zero,80f6f4 <___vfprintf_internal_r+0x1c70>
  80f884:	003f6606 	br	80f620 <___vfprintf_internal_r+0x1b9c>
  80f888:	d9800804 	addi	r6,sp,32
  80f88c:	d8c00884 	addi	r3,sp,34
  80f890:	003f5e06 	br	80f60c <___vfprintf_internal_r+0x1b88>
  80f894:	00800b44 	movi	r2,45
  80f898:	0121c83a 	sub	r16,zero,r4
  80f89c:	d8800845 	stb	r2,33(sp)
  80f8a0:	003f3d06 	br	80f598 <___vfprintf_internal_r+0x1b14>
  80f8a4:	00800084 	movi	r2,2
  80f8a8:	1105c83a 	sub	r2,r2,r4
  80f8ac:	003fe606 	br	80f848 <___vfprintf_internal_r+0x1dc4>
  80f8b0:	d8014515 	stw	zero,1300(sp)
  80f8b4:	dc814715 	stw	r18,1308(sp)
  80f8b8:	003fb106 	br	80f780 <___vfprintf_internal_r+0x1cfc>
  80f8bc:	000d883a 	mov	r6,zero
  80f8c0:	000f883a 	mov	r7,zero
  80f8c4:	8009883a 	mov	r4,r16
  80f8c8:	880b883a 	mov	r5,r17
  80f8cc:	0814bc80 	call	814bc8 <__nedf2>
  80f8d0:	103f9f26 	beq	r2,zero,80f750 <___vfprintf_internal_r+0x1ccc>
  80f8d4:	00800044 	movi	r2,1
  80f8d8:	1509c83a 	sub	r4,r2,r20
  80f8dc:	d9000515 	stw	r4,20(sp)
  80f8e0:	003f9b06 	br	80f750 <___vfprintf_internal_r+0x1ccc>
  80f8e4:	98000d1e 	bne	r19,zero,80f91c <___vfprintf_internal_r+0x1e98>
  80f8e8:	d8c14c17 	ldw	r3,1328(sp)
  80f8ec:	1880004c 	andi	r2,r3,1
  80f8f0:	10000a1e 	bne	r2,zero,80f91c <___vfprintf_internal_r+0x1e98>
  80f8f4:	01000044 	movi	r4,1
  80f8f8:	200f883a 	mov	r7,r4
  80f8fc:	d9014515 	stw	r4,1300(sp)
  80f900:	003f4a06 	br	80f62c <___vfprintf_internal_r+0x1ba8>
  80f904:	3cc00017 	ldw	r19,0(r7)
  80f908:	39c00104 	addi	r7,r7,4
  80f90c:	983d0e0e 	bge	r19,zero,80ed48 <___vfprintf_internal_r+0x12c4>
  80f910:	b8c00007 	ldb	r3,0(r23)
  80f914:	04ffffc4 	movi	r19,-1
  80f918:	0038d906 	br	80dc80 <___vfprintf_internal_r+0x1fc>
  80f91c:	9cc00084 	addi	r19,r19,2
  80f920:	dcc14515 	stw	r19,1300(sp)
  80f924:	980f883a 	mov	r7,r19
  80f928:	983f400e 	bge	r19,zero,80f62c <___vfprintf_internal_r+0x1ba8>
  80f92c:	003f7306 	br	80f6fc <___vfprintf_internal_r+0x1c78>

0080f930 <__vfprintf_internal>:
  80f930:	008020b4 	movhi	r2,130
  80f934:	108a6b04 	addi	r2,r2,10668
  80f938:	2013883a 	mov	r9,r4
  80f93c:	11000017 	ldw	r4,0(r2)
  80f940:	2805883a 	mov	r2,r5
  80f944:	300f883a 	mov	r7,r6
  80f948:	480b883a 	mov	r5,r9
  80f94c:	100d883a 	mov	r6,r2
  80f950:	080da841 	jmpi	80da84 <___vfprintf_internal_r>

0080f954 <__swsetup_r>:
  80f954:	008020b4 	movhi	r2,130
  80f958:	108a6b04 	addi	r2,r2,10668
  80f95c:	10c00017 	ldw	r3,0(r2)
  80f960:	defffd04 	addi	sp,sp,-12
  80f964:	dc400115 	stw	r17,4(sp)
  80f968:	dc000015 	stw	r16,0(sp)
  80f96c:	dfc00215 	stw	ra,8(sp)
  80f970:	2023883a 	mov	r17,r4
  80f974:	2821883a 	mov	r16,r5
  80f978:	18000226 	beq	r3,zero,80f984 <__swsetup_r+0x30>
  80f97c:	18800e17 	ldw	r2,56(r3)
  80f980:	10001f26 	beq	r2,zero,80fa00 <__swsetup_r+0xac>
  80f984:	8100030b 	ldhu	r4,12(r16)
  80f988:	2080020c 	andi	r2,r4,8
  80f98c:	10002826 	beq	r2,zero,80fa30 <__swsetup_r+0xdc>
  80f990:	81400417 	ldw	r5,16(r16)
  80f994:	28001d26 	beq	r5,zero,80fa0c <__swsetup_r+0xb8>
  80f998:	2080004c 	andi	r2,r4,1
  80f99c:	1005003a 	cmpeq	r2,r2,zero
  80f9a0:	10000b26 	beq	r2,zero,80f9d0 <__swsetup_r+0x7c>
  80f9a4:	2080008c 	andi	r2,r4,2
  80f9a8:	10001226 	beq	r2,zero,80f9f4 <__swsetup_r+0xa0>
  80f9ac:	0005883a 	mov	r2,zero
  80f9b0:	80800215 	stw	r2,8(r16)
  80f9b4:	28000b26 	beq	r5,zero,80f9e4 <__swsetup_r+0x90>
  80f9b8:	0005883a 	mov	r2,zero
  80f9bc:	dfc00217 	ldw	ra,8(sp)
  80f9c0:	dc400117 	ldw	r17,4(sp)
  80f9c4:	dc000017 	ldw	r16,0(sp)
  80f9c8:	dec00304 	addi	sp,sp,12
  80f9cc:	f800283a 	ret
  80f9d0:	80800517 	ldw	r2,20(r16)
  80f9d4:	80000215 	stw	zero,8(r16)
  80f9d8:	0085c83a 	sub	r2,zero,r2
  80f9dc:	80800615 	stw	r2,24(r16)
  80f9e0:	283ff51e 	bne	r5,zero,80f9b8 <__swsetup_r+0x64>
  80f9e4:	2080200c 	andi	r2,r4,128
  80f9e8:	103ff326 	beq	r2,zero,80f9b8 <__swsetup_r+0x64>
  80f9ec:	00bfffc4 	movi	r2,-1
  80f9f0:	003ff206 	br	80f9bc <__swsetup_r+0x68>
  80f9f4:	80800517 	ldw	r2,20(r16)
  80f9f8:	80800215 	stw	r2,8(r16)
  80f9fc:	003fed06 	br	80f9b4 <__swsetup_r+0x60>
  80fa00:	1809883a 	mov	r4,r3
  80fa04:	08114f40 	call	8114f4 <__sinit>
  80fa08:	003fde06 	br	80f984 <__swsetup_r+0x30>
  80fa0c:	20c0a00c 	andi	r3,r4,640
  80fa10:	00808004 	movi	r2,512
  80fa14:	18bfe026 	beq	r3,r2,80f998 <__swsetup_r+0x44>
  80fa18:	8809883a 	mov	r4,r17
  80fa1c:	800b883a 	mov	r5,r16
  80fa20:	081226c0 	call	81226c <__smakebuf_r>
  80fa24:	8100030b 	ldhu	r4,12(r16)
  80fa28:	81400417 	ldw	r5,16(r16)
  80fa2c:	003fda06 	br	80f998 <__swsetup_r+0x44>
  80fa30:	2080040c 	andi	r2,r4,16
  80fa34:	103fed26 	beq	r2,zero,80f9ec <__swsetup_r+0x98>
  80fa38:	2080010c 	andi	r2,r4,4
  80fa3c:	10001226 	beq	r2,zero,80fa88 <__swsetup_r+0x134>
  80fa40:	81400c17 	ldw	r5,48(r16)
  80fa44:	28000526 	beq	r5,zero,80fa5c <__swsetup_r+0x108>
  80fa48:	80801004 	addi	r2,r16,64
  80fa4c:	28800226 	beq	r5,r2,80fa58 <__swsetup_r+0x104>
  80fa50:	8809883a 	mov	r4,r17
  80fa54:	08118780 	call	811878 <_free_r>
  80fa58:	80000c15 	stw	zero,48(r16)
  80fa5c:	8080030b 	ldhu	r2,12(r16)
  80fa60:	81400417 	ldw	r5,16(r16)
  80fa64:	80000115 	stw	zero,4(r16)
  80fa68:	10bff6cc 	andi	r2,r2,65499
  80fa6c:	8080030d 	sth	r2,12(r16)
  80fa70:	81400015 	stw	r5,0(r16)
  80fa74:	8080030b 	ldhu	r2,12(r16)
  80fa78:	10800214 	ori	r2,r2,8
  80fa7c:	113fffcc 	andi	r4,r2,65535
  80fa80:	8080030d 	sth	r2,12(r16)
  80fa84:	003fc306 	br	80f994 <__swsetup_r+0x40>
  80fa88:	81400417 	ldw	r5,16(r16)
  80fa8c:	003ff906 	br	80fa74 <__swsetup_r+0x120>

0080fa90 <quorem>:
  80fa90:	28c00417 	ldw	r3,16(r5)
  80fa94:	20800417 	ldw	r2,16(r4)
  80fa98:	defff604 	addi	sp,sp,-40
  80fa9c:	ddc00715 	stw	r23,28(sp)
  80faa0:	dd400515 	stw	r21,20(sp)
  80faa4:	dfc00915 	stw	ra,36(sp)
  80faa8:	df000815 	stw	fp,32(sp)
  80faac:	dd800615 	stw	r22,24(sp)
  80fab0:	dd000415 	stw	r20,16(sp)
  80fab4:	dcc00315 	stw	r19,12(sp)
  80fab8:	dc800215 	stw	r18,8(sp)
  80fabc:	dc400115 	stw	r17,4(sp)
  80fac0:	dc000015 	stw	r16,0(sp)
  80fac4:	202f883a 	mov	r23,r4
  80fac8:	282b883a 	mov	r21,r5
  80facc:	10c07416 	blt	r2,r3,80fca0 <quorem+0x210>
  80fad0:	1c7fffc4 	addi	r17,r3,-1
  80fad4:	8c45883a 	add	r2,r17,r17
  80fad8:	1085883a 	add	r2,r2,r2
  80fadc:	2c000504 	addi	r16,r5,20
  80fae0:	24c00504 	addi	r19,r4,20
  80fae4:	14ed883a 	add	r22,r2,r19
  80fae8:	80a5883a 	add	r18,r16,r2
  80faec:	b7000017 	ldw	fp,0(r22)
  80faf0:	91400017 	ldw	r5,0(r18)
  80faf4:	e009883a 	mov	r4,fp
  80faf8:	29400044 	addi	r5,r5,1
  80fafc:	080b2d00 	call	80b2d0 <__udivsi3>
  80fb00:	1029883a 	mov	r20,r2
  80fb04:	10003c1e 	bne	r2,zero,80fbf8 <quorem+0x168>
  80fb08:	a80b883a 	mov	r5,r21
  80fb0c:	b809883a 	mov	r4,r23
  80fb10:	08127940 	call	812794 <__mcmp>
  80fb14:	10002b16 	blt	r2,zero,80fbc4 <quorem+0x134>
  80fb18:	a5000044 	addi	r20,r20,1
  80fb1c:	980f883a 	mov	r7,r19
  80fb20:	0011883a 	mov	r8,zero
  80fb24:	0009883a 	mov	r4,zero
  80fb28:	81400017 	ldw	r5,0(r16)
  80fb2c:	38c00017 	ldw	r3,0(r7)
  80fb30:	84000104 	addi	r16,r16,4
  80fb34:	28bfffcc 	andi	r2,r5,65535
  80fb38:	2085883a 	add	r2,r4,r2
  80fb3c:	11bfffcc 	andi	r6,r2,65535
  80fb40:	193fffcc 	andi	r4,r3,65535
  80fb44:	1004d43a 	srli	r2,r2,16
  80fb48:	280ad43a 	srli	r5,r5,16
  80fb4c:	2189c83a 	sub	r4,r4,r6
  80fb50:	2209883a 	add	r4,r4,r8
  80fb54:	1806d43a 	srli	r3,r3,16
  80fb58:	288b883a 	add	r5,r5,r2
  80fb5c:	200dd43a 	srai	r6,r4,16
  80fb60:	28bfffcc 	andi	r2,r5,65535
  80fb64:	1887c83a 	sub	r3,r3,r2
  80fb68:	1987883a 	add	r3,r3,r6
  80fb6c:	3900000d 	sth	r4,0(r7)
  80fb70:	38c0008d 	sth	r3,2(r7)
  80fb74:	2808d43a 	srli	r4,r5,16
  80fb78:	39c00104 	addi	r7,r7,4
  80fb7c:	1811d43a 	srai	r8,r3,16
  80fb80:	943fe92e 	bgeu	r18,r16,80fb28 <quorem+0x98>
  80fb84:	8c45883a 	add	r2,r17,r17
  80fb88:	1085883a 	add	r2,r2,r2
  80fb8c:	9885883a 	add	r2,r19,r2
  80fb90:	10c00017 	ldw	r3,0(r2)
  80fb94:	18000b1e 	bne	r3,zero,80fbc4 <quorem+0x134>
  80fb98:	113fff04 	addi	r4,r2,-4
  80fb9c:	9900082e 	bgeu	r19,r4,80fbc0 <quorem+0x130>
  80fba0:	10bfff17 	ldw	r2,-4(r2)
  80fba4:	10000326 	beq	r2,zero,80fbb4 <quorem+0x124>
  80fba8:	00000506 	br	80fbc0 <quorem+0x130>
  80fbac:	20800017 	ldw	r2,0(r4)
  80fbb0:	1000031e 	bne	r2,zero,80fbc0 <quorem+0x130>
  80fbb4:	213fff04 	addi	r4,r4,-4
  80fbb8:	8c7fffc4 	addi	r17,r17,-1
  80fbbc:	993ffb36 	bltu	r19,r4,80fbac <quorem+0x11c>
  80fbc0:	bc400415 	stw	r17,16(r23)
  80fbc4:	a005883a 	mov	r2,r20
  80fbc8:	dfc00917 	ldw	ra,36(sp)
  80fbcc:	df000817 	ldw	fp,32(sp)
  80fbd0:	ddc00717 	ldw	r23,28(sp)
  80fbd4:	dd800617 	ldw	r22,24(sp)
  80fbd8:	dd400517 	ldw	r21,20(sp)
  80fbdc:	dd000417 	ldw	r20,16(sp)
  80fbe0:	dcc00317 	ldw	r19,12(sp)
  80fbe4:	dc800217 	ldw	r18,8(sp)
  80fbe8:	dc400117 	ldw	r17,4(sp)
  80fbec:	dc000017 	ldw	r16,0(sp)
  80fbf0:	dec00a04 	addi	sp,sp,40
  80fbf4:	f800283a 	ret
  80fbf8:	980f883a 	mov	r7,r19
  80fbfc:	8011883a 	mov	r8,r16
  80fc00:	0013883a 	mov	r9,zero
  80fc04:	000d883a 	mov	r6,zero
  80fc08:	40c00017 	ldw	r3,0(r8)
  80fc0c:	39000017 	ldw	r4,0(r7)
  80fc10:	42000104 	addi	r8,r8,4
  80fc14:	18bfffcc 	andi	r2,r3,65535
  80fc18:	a085383a 	mul	r2,r20,r2
  80fc1c:	1806d43a 	srli	r3,r3,16
  80fc20:	217fffcc 	andi	r5,r4,65535
  80fc24:	3085883a 	add	r2,r6,r2
  80fc28:	11bfffcc 	andi	r6,r2,65535
  80fc2c:	a0c7383a 	mul	r3,r20,r3
  80fc30:	1004d43a 	srli	r2,r2,16
  80fc34:	298bc83a 	sub	r5,r5,r6
  80fc38:	2a4b883a 	add	r5,r5,r9
  80fc3c:	2008d43a 	srli	r4,r4,16
  80fc40:	1887883a 	add	r3,r3,r2
  80fc44:	280dd43a 	srai	r6,r5,16
  80fc48:	18bfffcc 	andi	r2,r3,65535
  80fc4c:	2089c83a 	sub	r4,r4,r2
  80fc50:	2189883a 	add	r4,r4,r6
  80fc54:	3900008d 	sth	r4,2(r7)
  80fc58:	3940000d 	sth	r5,0(r7)
  80fc5c:	180cd43a 	srli	r6,r3,16
  80fc60:	39c00104 	addi	r7,r7,4
  80fc64:	2013d43a 	srai	r9,r4,16
  80fc68:	923fe72e 	bgeu	r18,r8,80fc08 <quorem+0x178>
  80fc6c:	e03fa61e 	bne	fp,zero,80fb08 <quorem+0x78>
  80fc70:	b0ffff04 	addi	r3,r22,-4
  80fc74:	98c0082e 	bgeu	r19,r3,80fc98 <quorem+0x208>
  80fc78:	b0bfff17 	ldw	r2,-4(r22)
  80fc7c:	10000326 	beq	r2,zero,80fc8c <quorem+0x1fc>
  80fc80:	00000506 	br	80fc98 <quorem+0x208>
  80fc84:	18800017 	ldw	r2,0(r3)
  80fc88:	1000031e 	bne	r2,zero,80fc98 <quorem+0x208>
  80fc8c:	18ffff04 	addi	r3,r3,-4
  80fc90:	8c7fffc4 	addi	r17,r17,-1
  80fc94:	98fffb36 	bltu	r19,r3,80fc84 <quorem+0x1f4>
  80fc98:	bc400415 	stw	r17,16(r23)
  80fc9c:	003f9a06 	br	80fb08 <quorem+0x78>
  80fca0:	0005883a 	mov	r2,zero
  80fca4:	003fc806 	br	80fbc8 <quorem+0x138>

0080fca8 <_dtoa_r>:
  80fca8:	22001017 	ldw	r8,64(r4)
  80fcac:	deffda04 	addi	sp,sp,-152
  80fcb0:	dd402115 	stw	r21,132(sp)
  80fcb4:	dd002015 	stw	r20,128(sp)
  80fcb8:	dc801e15 	stw	r18,120(sp)
  80fcbc:	dc401d15 	stw	r17,116(sp)
  80fcc0:	dfc02515 	stw	ra,148(sp)
  80fcc4:	df002415 	stw	fp,144(sp)
  80fcc8:	ddc02315 	stw	r23,140(sp)
  80fccc:	dd802215 	stw	r22,136(sp)
  80fcd0:	dcc01f15 	stw	r19,124(sp)
  80fcd4:	dc001c15 	stw	r16,112(sp)
  80fcd8:	d9001615 	stw	r4,88(sp)
  80fcdc:	3023883a 	mov	r17,r6
  80fce0:	2829883a 	mov	r20,r5
  80fce4:	d9c01715 	stw	r7,92(sp)
  80fce8:	dc802817 	ldw	r18,160(sp)
  80fcec:	302b883a 	mov	r21,r6
  80fcf0:	40000a26 	beq	r8,zero,80fd1c <_dtoa_r+0x74>
  80fcf4:	20801117 	ldw	r2,68(r4)
  80fcf8:	400b883a 	mov	r5,r8
  80fcfc:	40800115 	stw	r2,4(r8)
  80fd00:	20c01117 	ldw	r3,68(r4)
  80fd04:	00800044 	movi	r2,1
  80fd08:	10c4983a 	sll	r2,r2,r3
  80fd0c:	40800215 	stw	r2,8(r8)
  80fd10:	08126380 	call	812638 <_Bfree>
  80fd14:	d8c01617 	ldw	r3,88(sp)
  80fd18:	18001015 	stw	zero,64(r3)
  80fd1c:	8800a316 	blt	r17,zero,80ffac <_dtoa_r+0x304>
  80fd20:	90000015 	stw	zero,0(r18)
  80fd24:	a8dffc2c 	andhi	r3,r21,32752
  80fd28:	009ffc34 	movhi	r2,32752
  80fd2c:	18809126 	beq	r3,r2,80ff74 <_dtoa_r+0x2cc>
  80fd30:	000d883a 	mov	r6,zero
  80fd34:	000f883a 	mov	r7,zero
  80fd38:	a009883a 	mov	r4,r20
  80fd3c:	a80b883a 	mov	r5,r21
  80fd40:	dd001215 	stw	r20,72(sp)
  80fd44:	dd401315 	stw	r21,76(sp)
  80fd48:	0814bc80 	call	814bc8 <__nedf2>
  80fd4c:	1000171e 	bne	r2,zero,80fdac <_dtoa_r+0x104>
  80fd50:	d9802717 	ldw	r6,156(sp)
  80fd54:	00800044 	movi	r2,1
  80fd58:	30800015 	stw	r2,0(r6)
  80fd5c:	d8802917 	ldw	r2,164(sp)
  80fd60:	10029b26 	beq	r2,zero,8107d0 <_dtoa_r+0xb28>
  80fd64:	d9002917 	ldw	r4,164(sp)
  80fd68:	008020b4 	movhi	r2,130
  80fd6c:	10bfbb44 	addi	r2,r2,-275
  80fd70:	10ffffc4 	addi	r3,r2,-1
  80fd74:	20800015 	stw	r2,0(r4)
  80fd78:	1805883a 	mov	r2,r3
  80fd7c:	dfc02517 	ldw	ra,148(sp)
  80fd80:	df002417 	ldw	fp,144(sp)
  80fd84:	ddc02317 	ldw	r23,140(sp)
  80fd88:	dd802217 	ldw	r22,136(sp)
  80fd8c:	dd402117 	ldw	r21,132(sp)
  80fd90:	dd002017 	ldw	r20,128(sp)
  80fd94:	dcc01f17 	ldw	r19,124(sp)
  80fd98:	dc801e17 	ldw	r18,120(sp)
  80fd9c:	dc401d17 	ldw	r17,116(sp)
  80fda0:	dc001c17 	ldw	r16,112(sp)
  80fda4:	dec02604 	addi	sp,sp,152
  80fda8:	f800283a 	ret
  80fdac:	d9001617 	ldw	r4,88(sp)
  80fdb0:	d9401217 	ldw	r5,72(sp)
  80fdb4:	d8800104 	addi	r2,sp,4
  80fdb8:	a80d883a 	mov	r6,r21
  80fdbc:	d9c00204 	addi	r7,sp,8
  80fdc0:	d8800015 	stw	r2,0(sp)
  80fdc4:	0812c740 	call	812c74 <__d2b>
  80fdc8:	d8800715 	stw	r2,28(sp)
  80fdcc:	a804d53a 	srli	r2,r21,20
  80fdd0:	1101ffcc 	andi	r4,r2,2047
  80fdd4:	20008626 	beq	r4,zero,80fff0 <_dtoa_r+0x348>
  80fdd8:	d8c01217 	ldw	r3,72(sp)
  80fddc:	00800434 	movhi	r2,16
  80fde0:	10bfffc4 	addi	r2,r2,-1
  80fde4:	ddc00117 	ldw	r23,4(sp)
  80fde8:	a884703a 	and	r2,r21,r2
  80fdec:	1811883a 	mov	r8,r3
  80fdf0:	124ffc34 	orhi	r9,r2,16368
  80fdf4:	25bf0044 	addi	r22,r4,-1023
  80fdf8:	d8000815 	stw	zero,32(sp)
  80fdfc:	0005883a 	mov	r2,zero
  80fe00:	00cffe34 	movhi	r3,16376
  80fe04:	480b883a 	mov	r5,r9
  80fe08:	4009883a 	mov	r4,r8
  80fe0c:	180f883a 	mov	r7,r3
  80fe10:	100d883a 	mov	r6,r2
  80fe14:	080aa600 	call	80aa60 <__subdf3>
  80fe18:	0218dbf4 	movhi	r8,25455
  80fe1c:	4210d844 	addi	r8,r8,17249
  80fe20:	024ff4f4 	movhi	r9,16339
  80fe24:	4a61e9c4 	addi	r9,r9,-30809
  80fe28:	480f883a 	mov	r7,r9
  80fe2c:	400d883a 	mov	r6,r8
  80fe30:	180b883a 	mov	r5,r3
  80fe34:	1009883a 	mov	r4,r2
  80fe38:	080ab540 	call	80ab54 <__muldf3>
  80fe3c:	0222d874 	movhi	r8,35681
  80fe40:	42322cc4 	addi	r8,r8,-14157
  80fe44:	024ff1f4 	movhi	r9,16327
  80fe48:	4a628a04 	addi	r9,r9,-30168
  80fe4c:	480f883a 	mov	r7,r9
  80fe50:	400d883a 	mov	r6,r8
  80fe54:	180b883a 	mov	r5,r3
  80fe58:	1009883a 	mov	r4,r2
  80fe5c:	080aae00 	call	80aae0 <__adddf3>
  80fe60:	b009883a 	mov	r4,r22
  80fe64:	1021883a 	mov	r16,r2
  80fe68:	1823883a 	mov	r17,r3
  80fe6c:	080af180 	call	80af18 <__floatsidf>
  80fe70:	021427f4 	movhi	r8,20639
  80fe74:	421e7ec4 	addi	r8,r8,31227
  80fe78:	024ff4f4 	movhi	r9,16339
  80fe7c:	4a5104c4 	addi	r9,r9,17427
  80fe80:	480f883a 	mov	r7,r9
  80fe84:	400d883a 	mov	r6,r8
  80fe88:	180b883a 	mov	r5,r3
  80fe8c:	1009883a 	mov	r4,r2
  80fe90:	080ab540 	call	80ab54 <__muldf3>
  80fe94:	180f883a 	mov	r7,r3
  80fe98:	880b883a 	mov	r5,r17
  80fe9c:	100d883a 	mov	r6,r2
  80fea0:	8009883a 	mov	r4,r16
  80fea4:	080aae00 	call	80aae0 <__adddf3>
  80fea8:	1009883a 	mov	r4,r2
  80feac:	180b883a 	mov	r5,r3
  80feb0:	1021883a 	mov	r16,r2
  80feb4:	1823883a 	mov	r17,r3
  80feb8:	080b0100 	call	80b010 <__fixdfsi>
  80febc:	000d883a 	mov	r6,zero
  80fec0:	000f883a 	mov	r7,zero
  80fec4:	8009883a 	mov	r4,r16
  80fec8:	880b883a 	mov	r5,r17
  80fecc:	d8800d15 	stw	r2,52(sp)
  80fed0:	0814d600 	call	814d60 <__ltdf2>
  80fed4:	10031716 	blt	r2,zero,810b34 <_dtoa_r+0xe8c>
  80fed8:	d8c00d17 	ldw	r3,52(sp)
  80fedc:	00800584 	movi	r2,22
  80fee0:	10c1482e 	bgeu	r2,r3,810404 <_dtoa_r+0x75c>
  80fee4:	01000044 	movi	r4,1
  80fee8:	d9000c15 	stw	r4,48(sp)
  80feec:	bd85c83a 	sub	r2,r23,r22
  80fef0:	11bfffc4 	addi	r6,r2,-1
  80fef4:	30030b16 	blt	r6,zero,810b24 <_dtoa_r+0xe7c>
  80fef8:	d9800a15 	stw	r6,40(sp)
  80fefc:	d8001115 	stw	zero,68(sp)
  80ff00:	d8c00d17 	ldw	r3,52(sp)
  80ff04:	1802ff16 	blt	r3,zero,810b04 <_dtoa_r+0xe5c>
  80ff08:	d9000a17 	ldw	r4,40(sp)
  80ff0c:	d8c00915 	stw	r3,36(sp)
  80ff10:	d8001015 	stw	zero,64(sp)
  80ff14:	20c9883a 	add	r4,r4,r3
  80ff18:	d9000a15 	stw	r4,40(sp)
  80ff1c:	d9001717 	ldw	r4,92(sp)
  80ff20:	00800244 	movi	r2,9
  80ff24:	11004636 	bltu	r2,r4,810040 <_dtoa_r+0x398>
  80ff28:	00800144 	movi	r2,5
  80ff2c:	11020416 	blt	r2,r4,810740 <_dtoa_r+0xa98>
  80ff30:	04400044 	movi	r17,1
  80ff34:	d8c01717 	ldw	r3,92(sp)
  80ff38:	00800144 	movi	r2,5
  80ff3c:	10c1ed36 	bltu	r2,r3,8106f4 <_dtoa_r+0xa4c>
  80ff40:	18c5883a 	add	r2,r3,r3
  80ff44:	1085883a 	add	r2,r2,r2
  80ff48:	00c02074 	movhi	r3,129
  80ff4c:	18ffd704 	addi	r3,r3,-164
  80ff50:	10c5883a 	add	r2,r2,r3
  80ff54:	11000017 	ldw	r4,0(r2)
  80ff58:	2000683a 	jmp	r4
  80ff5c:	00810048 	cmpgei	r2,zero,1025
  80ff60:	00810048 	cmpgei	r2,zero,1025
  80ff64:	00810a48 	cmpgei	r2,zero,1065
  80ff68:	00810a20 	cmpeqi	r2,zero,1064
  80ff6c:	00810a64 	muli	r2,zero,1065
  80ff70:	00810a70 	cmpltui	r2,zero,1065
  80ff74:	d9002717 	ldw	r4,156(sp)
  80ff78:	0089c3c4 	movi	r2,9999
  80ff7c:	20800015 	stw	r2,0(r4)
  80ff80:	a0001026 	beq	r20,zero,80ffc4 <_dtoa_r+0x31c>
  80ff84:	00c020b4 	movhi	r3,130
  80ff88:	18c29a04 	addi	r3,r3,2664
  80ff8c:	d9802917 	ldw	r6,164(sp)
  80ff90:	303f7926 	beq	r6,zero,80fd78 <_dtoa_r+0xd0>
  80ff94:	188000c7 	ldb	r2,3(r3)
  80ff98:	190000c4 	addi	r4,r3,3
  80ff9c:	1000101e 	bne	r2,zero,80ffe0 <_dtoa_r+0x338>
  80ffa0:	d8802917 	ldw	r2,164(sp)
  80ffa4:	11000015 	stw	r4,0(r2)
  80ffa8:	003f7306 	br	80fd78 <_dtoa_r+0xd0>
  80ffac:	00a00034 	movhi	r2,32768
  80ffb0:	10bfffc4 	addi	r2,r2,-1
  80ffb4:	00c00044 	movi	r3,1
  80ffb8:	88aa703a 	and	r21,r17,r2
  80ffbc:	90c00015 	stw	r3,0(r18)
  80ffc0:	003f5806 	br	80fd24 <_dtoa_r+0x7c>
  80ffc4:	00800434 	movhi	r2,16
  80ffc8:	10bfffc4 	addi	r2,r2,-1
  80ffcc:	a884703a 	and	r2,r21,r2
  80ffd0:	103fec1e 	bne	r2,zero,80ff84 <_dtoa_r+0x2dc>
  80ffd4:	00c020b4 	movhi	r3,130
  80ffd8:	18c29704 	addi	r3,r3,2652
  80ffdc:	003feb06 	br	80ff8c <_dtoa_r+0x2e4>
  80ffe0:	d8802917 	ldw	r2,164(sp)
  80ffe4:	19000204 	addi	r4,r3,8
  80ffe8:	11000015 	stw	r4,0(r2)
  80ffec:	003f6206 	br	80fd78 <_dtoa_r+0xd0>
  80fff0:	ddc00117 	ldw	r23,4(sp)
  80fff4:	d8800217 	ldw	r2,8(sp)
  80fff8:	01000804 	movi	r4,32
  80fffc:	b8c10c84 	addi	r3,r23,1074
  810000:	18a3883a 	add	r17,r3,r2
  810004:	2441b80e 	bge	r4,r17,8106e8 <_dtoa_r+0xa40>
  810008:	00c01004 	movi	r3,64
  81000c:	1c47c83a 	sub	r3,r3,r17
  810010:	88bff804 	addi	r2,r17,-32
  810014:	a8c6983a 	sll	r3,r21,r3
  810018:	a084d83a 	srl	r2,r20,r2
  81001c:	1888b03a 	or	r4,r3,r2
  810020:	0814de80 	call	814de8 <__floatunsidf>
  810024:	1011883a 	mov	r8,r2
  810028:	00bf8434 	movhi	r2,65040
  81002c:	01000044 	movi	r4,1
  810030:	10d3883a 	add	r9,r2,r3
  810034:	8dbef344 	addi	r22,r17,-1075
  810038:	d9000815 	stw	r4,32(sp)
  81003c:	003f6f06 	br	80fdfc <_dtoa_r+0x154>
  810040:	d8001715 	stw	zero,92(sp)
  810044:	04400044 	movi	r17,1
  810048:	00bfffc4 	movi	r2,-1
  81004c:	00c00044 	movi	r3,1
  810050:	d8800e15 	stw	r2,56(sp)
  810054:	d8002615 	stw	zero,152(sp)
  810058:	d8800f15 	stw	r2,60(sp)
  81005c:	d8c00b15 	stw	r3,44(sp)
  810060:	1021883a 	mov	r16,r2
  810064:	d8801617 	ldw	r2,88(sp)
  810068:	10001115 	stw	zero,68(r2)
  81006c:	d8801617 	ldw	r2,88(sp)
  810070:	11401117 	ldw	r5,68(r2)
  810074:	1009883a 	mov	r4,r2
  810078:	0812bb80 	call	812bb8 <_Balloc>
  81007c:	d8c01617 	ldw	r3,88(sp)
  810080:	d8800515 	stw	r2,20(sp)
  810084:	18801015 	stw	r2,64(r3)
  810088:	00800384 	movi	r2,14
  81008c:	14006836 	bltu	r2,r16,810230 <_dtoa_r+0x588>
  810090:	8805003a 	cmpeq	r2,r17,zero
  810094:	1000661e 	bne	r2,zero,810230 <_dtoa_r+0x588>
  810098:	d9000d17 	ldw	r4,52(sp)
  81009c:	0102300e 	bge	zero,r4,810960 <_dtoa_r+0xcb8>
  8100a0:	208003cc 	andi	r2,r4,15
  8100a4:	100490fa 	slli	r2,r2,3
  8100a8:	2025d13a 	srai	r18,r4,4
  8100ac:	00c020b4 	movhi	r3,130
  8100b0:	18c2ab04 	addi	r3,r3,2732
  8100b4:	10c5883a 	add	r2,r2,r3
  8100b8:	90c0040c 	andi	r3,r18,16
  8100bc:	14000017 	ldw	r16,0(r2)
  8100c0:	14400117 	ldw	r17,4(r2)
  8100c4:	18036a1e 	bne	r3,zero,810e70 <_dtoa_r+0x11c8>
  8100c8:	05800084 	movi	r22,2
  8100cc:	90001026 	beq	r18,zero,810110 <_dtoa_r+0x468>
  8100d0:	04c020b4 	movhi	r19,130
  8100d4:	9cc2dd04 	addi	r19,r19,2932
  8100d8:	9080004c 	andi	r2,r18,1
  8100dc:	1005003a 	cmpeq	r2,r2,zero
  8100e0:	1000081e 	bne	r2,zero,810104 <_dtoa_r+0x45c>
  8100e4:	99800017 	ldw	r6,0(r19)
  8100e8:	99c00117 	ldw	r7,4(r19)
  8100ec:	880b883a 	mov	r5,r17
  8100f0:	8009883a 	mov	r4,r16
  8100f4:	080ab540 	call	80ab54 <__muldf3>
  8100f8:	1021883a 	mov	r16,r2
  8100fc:	b5800044 	addi	r22,r22,1
  810100:	1823883a 	mov	r17,r3
  810104:	9025d07a 	srai	r18,r18,1
  810108:	9cc00204 	addi	r19,r19,8
  81010c:	903ff21e 	bne	r18,zero,8100d8 <_dtoa_r+0x430>
  810110:	a80b883a 	mov	r5,r21
  810114:	a009883a 	mov	r4,r20
  810118:	880f883a 	mov	r7,r17
  81011c:	800d883a 	mov	r6,r16
  810120:	08148e80 	call	8148e8 <__divdf3>
  810124:	1029883a 	mov	r20,r2
  810128:	182b883a 	mov	r21,r3
  81012c:	d8c00c17 	ldw	r3,48(sp)
  810130:	1805003a 	cmpeq	r2,r3,zero
  810134:	1000081e 	bne	r2,zero,810158 <_dtoa_r+0x4b0>
  810138:	0005883a 	mov	r2,zero
  81013c:	00cffc34 	movhi	r3,16368
  810140:	180f883a 	mov	r7,r3
  810144:	a009883a 	mov	r4,r20
  810148:	a80b883a 	mov	r5,r21
  81014c:	100d883a 	mov	r6,r2
  810150:	0814d600 	call	814d60 <__ltdf2>
  810154:	1003fe16 	blt	r2,zero,811150 <_dtoa_r+0x14a8>
  810158:	b009883a 	mov	r4,r22
  81015c:	080af180 	call	80af18 <__floatsidf>
  810160:	180b883a 	mov	r5,r3
  810164:	1009883a 	mov	r4,r2
  810168:	a00d883a 	mov	r6,r20
  81016c:	a80f883a 	mov	r7,r21
  810170:	080ab540 	call	80ab54 <__muldf3>
  810174:	0011883a 	mov	r8,zero
  810178:	02500734 	movhi	r9,16412
  81017c:	1009883a 	mov	r4,r2
  810180:	180b883a 	mov	r5,r3
  810184:	480f883a 	mov	r7,r9
  810188:	400d883a 	mov	r6,r8
  81018c:	080aae00 	call	80aae0 <__adddf3>
  810190:	d9000f17 	ldw	r4,60(sp)
  810194:	102d883a 	mov	r22,r2
  810198:	00bf3034 	movhi	r2,64704
  81019c:	18b9883a 	add	fp,r3,r2
  8101a0:	e02f883a 	mov	r23,fp
  8101a4:	20028f1e 	bne	r4,zero,810be4 <_dtoa_r+0xf3c>
  8101a8:	0005883a 	mov	r2,zero
  8101ac:	00d00534 	movhi	r3,16404
  8101b0:	a009883a 	mov	r4,r20
  8101b4:	a80b883a 	mov	r5,r21
  8101b8:	180f883a 	mov	r7,r3
  8101bc:	100d883a 	mov	r6,r2
  8101c0:	080aa600 	call	80aa60 <__subdf3>
  8101c4:	1009883a 	mov	r4,r2
  8101c8:	e00f883a 	mov	r7,fp
  8101cc:	180b883a 	mov	r5,r3
  8101d0:	b00d883a 	mov	r6,r22
  8101d4:	1025883a 	mov	r18,r2
  8101d8:	1827883a 	mov	r19,r3
  8101dc:	0814c500 	call	814c50 <__gtdf2>
  8101e0:	00834f16 	blt	zero,r2,810f20 <_dtoa_r+0x1278>
  8101e4:	e0e0003c 	xorhi	r3,fp,32768
  8101e8:	9009883a 	mov	r4,r18
  8101ec:	980b883a 	mov	r5,r19
  8101f0:	180f883a 	mov	r7,r3
  8101f4:	b00d883a 	mov	r6,r22
  8101f8:	0814d600 	call	814d60 <__ltdf2>
  8101fc:	1000080e 	bge	r2,zero,810220 <_dtoa_r+0x578>
  810200:	0027883a 	mov	r19,zero
  810204:	0025883a 	mov	r18,zero
  810208:	d8802617 	ldw	r2,152(sp)
  81020c:	df000517 	ldw	fp,20(sp)
  810210:	d8000615 	stw	zero,24(sp)
  810214:	0084303a 	nor	r2,zero,r2
  810218:	d8800d15 	stw	r2,52(sp)
  81021c:	00019b06 	br	81088c <_dtoa_r+0xbe4>
  810220:	d9801217 	ldw	r6,72(sp)
  810224:	d8801317 	ldw	r2,76(sp)
  810228:	3029883a 	mov	r20,r6
  81022c:	102b883a 	mov	r21,r2
  810230:	d8c00217 	ldw	r3,8(sp)
  810234:	18008516 	blt	r3,zero,81044c <_dtoa_r+0x7a4>
  810238:	d9000d17 	ldw	r4,52(sp)
  81023c:	00800384 	movi	r2,14
  810240:	11008216 	blt	r2,r4,81044c <_dtoa_r+0x7a4>
  810244:	200490fa 	slli	r2,r4,3
  810248:	d9802617 	ldw	r6,152(sp)
  81024c:	00c020b4 	movhi	r3,130
  810250:	18c2ab04 	addi	r3,r3,2732
  810254:	10c5883a 	add	r2,r2,r3
  810258:	14800017 	ldw	r18,0(r2)
  81025c:	14c00117 	ldw	r19,4(r2)
  810260:	30031e16 	blt	r6,zero,810edc <_dtoa_r+0x1234>
  810264:	d9000517 	ldw	r4,20(sp)
  810268:	d8c00f17 	ldw	r3,60(sp)
  81026c:	a823883a 	mov	r17,r21
  810270:	a021883a 	mov	r16,r20
  810274:	192b883a 	add	r21,r3,r4
  810278:	2039883a 	mov	fp,r4
  81027c:	00000f06 	br	8102bc <_dtoa_r+0x614>
  810280:	0005883a 	mov	r2,zero
  810284:	00d00934 	movhi	r3,16420
  810288:	5009883a 	mov	r4,r10
  81028c:	580b883a 	mov	r5,r11
  810290:	180f883a 	mov	r7,r3
  810294:	100d883a 	mov	r6,r2
  810298:	080ab540 	call	80ab54 <__muldf3>
  81029c:	180b883a 	mov	r5,r3
  8102a0:	000d883a 	mov	r6,zero
  8102a4:	000f883a 	mov	r7,zero
  8102a8:	1009883a 	mov	r4,r2
  8102ac:	1021883a 	mov	r16,r2
  8102b0:	1823883a 	mov	r17,r3
  8102b4:	0814bc80 	call	814bc8 <__nedf2>
  8102b8:	10004526 	beq	r2,zero,8103d0 <_dtoa_r+0x728>
  8102bc:	900d883a 	mov	r6,r18
  8102c0:	980f883a 	mov	r7,r19
  8102c4:	8009883a 	mov	r4,r16
  8102c8:	880b883a 	mov	r5,r17
  8102cc:	08148e80 	call	8148e8 <__divdf3>
  8102d0:	180b883a 	mov	r5,r3
  8102d4:	1009883a 	mov	r4,r2
  8102d8:	080b0100 	call	80b010 <__fixdfsi>
  8102dc:	1009883a 	mov	r4,r2
  8102e0:	1029883a 	mov	r20,r2
  8102e4:	080af180 	call	80af18 <__floatsidf>
  8102e8:	180f883a 	mov	r7,r3
  8102ec:	9009883a 	mov	r4,r18
  8102f0:	980b883a 	mov	r5,r19
  8102f4:	100d883a 	mov	r6,r2
  8102f8:	080ab540 	call	80ab54 <__muldf3>
  8102fc:	180f883a 	mov	r7,r3
  810300:	880b883a 	mov	r5,r17
  810304:	8009883a 	mov	r4,r16
  810308:	100d883a 	mov	r6,r2
  81030c:	080aa600 	call	80aa60 <__subdf3>
  810310:	1015883a 	mov	r10,r2
  810314:	a0800c04 	addi	r2,r20,48
  810318:	e0800005 	stb	r2,0(fp)
  81031c:	e7000044 	addi	fp,fp,1
  810320:	1817883a 	mov	r11,r3
  810324:	e57fd61e 	bne	fp,r21,810280 <_dtoa_r+0x5d8>
  810328:	500d883a 	mov	r6,r10
  81032c:	180f883a 	mov	r7,r3
  810330:	5009883a 	mov	r4,r10
  810334:	180b883a 	mov	r5,r3
  810338:	080aae00 	call	80aae0 <__adddf3>
  81033c:	100d883a 	mov	r6,r2
  810340:	9009883a 	mov	r4,r18
  810344:	980b883a 	mov	r5,r19
  810348:	180f883a 	mov	r7,r3
  81034c:	1021883a 	mov	r16,r2
  810350:	1823883a 	mov	r17,r3
  810354:	0814d600 	call	814d60 <__ltdf2>
  810358:	10000816 	blt	r2,zero,81037c <_dtoa_r+0x6d4>
  81035c:	980b883a 	mov	r5,r19
  810360:	800d883a 	mov	r6,r16
  810364:	880f883a 	mov	r7,r17
  810368:	9009883a 	mov	r4,r18
  81036c:	0814b400 	call	814b40 <__eqdf2>
  810370:	1000171e 	bne	r2,zero,8103d0 <_dtoa_r+0x728>
  810374:	a080004c 	andi	r2,r20,1
  810378:	10001526 	beq	r2,zero,8103d0 <_dtoa_r+0x728>
  81037c:	d8800d17 	ldw	r2,52(sp)
  810380:	d8800415 	stw	r2,16(sp)
  810384:	e009883a 	mov	r4,fp
  810388:	213fffc4 	addi	r4,r4,-1
  81038c:	20c00007 	ldb	r3,0(r4)
  810390:	00800e44 	movi	r2,57
  810394:	1880081e 	bne	r3,r2,8103b8 <_dtoa_r+0x710>
  810398:	d8800517 	ldw	r2,20(sp)
  81039c:	113ffa1e 	bne	r2,r4,810388 <_dtoa_r+0x6e0>
  8103a0:	d8c00417 	ldw	r3,16(sp)
  8103a4:	d9800517 	ldw	r6,20(sp)
  8103a8:	00800c04 	movi	r2,48
  8103ac:	18c00044 	addi	r3,r3,1
  8103b0:	d8c00415 	stw	r3,16(sp)
  8103b4:	30800005 	stb	r2,0(r6)
  8103b8:	20800003 	ldbu	r2,0(r4)
  8103bc:	d8c00417 	ldw	r3,16(sp)
  8103c0:	27000044 	addi	fp,r4,1
  8103c4:	10800044 	addi	r2,r2,1
  8103c8:	d8c00d15 	stw	r3,52(sp)
  8103cc:	20800005 	stb	r2,0(r4)
  8103d0:	d9001617 	ldw	r4,88(sp)
  8103d4:	d9400717 	ldw	r5,28(sp)
  8103d8:	08126380 	call	812638 <_Bfree>
  8103dc:	e0000005 	stb	zero,0(fp)
  8103e0:	d9800d17 	ldw	r6,52(sp)
  8103e4:	d8c02717 	ldw	r3,156(sp)
  8103e8:	d9002917 	ldw	r4,164(sp)
  8103ec:	30800044 	addi	r2,r6,1
  8103f0:	18800015 	stw	r2,0(r3)
  8103f4:	20029c26 	beq	r4,zero,810e68 <_dtoa_r+0x11c0>
  8103f8:	d8c00517 	ldw	r3,20(sp)
  8103fc:	27000015 	stw	fp,0(r4)
  810400:	003e5d06 	br	80fd78 <_dtoa_r+0xd0>
  810404:	d9800d17 	ldw	r6,52(sp)
  810408:	00c020b4 	movhi	r3,130
  81040c:	18c2ab04 	addi	r3,r3,2732
  810410:	d9001217 	ldw	r4,72(sp)
  810414:	300490fa 	slli	r2,r6,3
  810418:	d9401317 	ldw	r5,76(sp)
  81041c:	10c5883a 	add	r2,r2,r3
  810420:	12000017 	ldw	r8,0(r2)
  810424:	12400117 	ldw	r9,4(r2)
  810428:	400d883a 	mov	r6,r8
  81042c:	480f883a 	mov	r7,r9
  810430:	0814d600 	call	814d60 <__ltdf2>
  810434:	1000030e 	bge	r2,zero,810444 <_dtoa_r+0x79c>
  810438:	d8800d17 	ldw	r2,52(sp)
  81043c:	10bfffc4 	addi	r2,r2,-1
  810440:	d8800d15 	stw	r2,52(sp)
  810444:	d8000c15 	stw	zero,48(sp)
  810448:	003ea806 	br	80feec <_dtoa_r+0x244>
  81044c:	d9000b17 	ldw	r4,44(sp)
  810450:	202cc03a 	cmpne	r22,r4,zero
  810454:	b000c71e 	bne	r22,zero,810774 <_dtoa_r+0xacc>
  810458:	dc001117 	ldw	r16,68(sp)
  81045c:	dc801017 	ldw	r18,64(sp)
  810460:	0027883a 	mov	r19,zero
  810464:	04000b0e 	bge	zero,r16,810494 <_dtoa_r+0x7ec>
  810468:	d8c00a17 	ldw	r3,40(sp)
  81046c:	00c0090e 	bge	zero,r3,810494 <_dtoa_r+0x7ec>
  810470:	8005883a 	mov	r2,r16
  810474:	1c011316 	blt	r3,r16,8108c4 <_dtoa_r+0xc1c>
  810478:	d9000a17 	ldw	r4,40(sp)
  81047c:	d9801117 	ldw	r6,68(sp)
  810480:	80a1c83a 	sub	r16,r16,r2
  810484:	2089c83a 	sub	r4,r4,r2
  810488:	308dc83a 	sub	r6,r6,r2
  81048c:	d9000a15 	stw	r4,40(sp)
  810490:	d9801115 	stw	r6,68(sp)
  810494:	d8801017 	ldw	r2,64(sp)
  810498:	0080150e 	bge	zero,r2,8104f0 <_dtoa_r+0x848>
  81049c:	d8c00b17 	ldw	r3,44(sp)
  8104a0:	1805003a 	cmpeq	r2,r3,zero
  8104a4:	1001c91e 	bne	r2,zero,810bcc <_dtoa_r+0xf24>
  8104a8:	04800e0e 	bge	zero,r18,8104e4 <_dtoa_r+0x83c>
  8104ac:	d9001617 	ldw	r4,88(sp)
  8104b0:	980b883a 	mov	r5,r19
  8104b4:	900d883a 	mov	r6,r18
  8104b8:	08133ec0 	call	8133ec <__pow5mult>
  8104bc:	d9001617 	ldw	r4,88(sp)
  8104c0:	d9800717 	ldw	r6,28(sp)
  8104c4:	100b883a 	mov	r5,r2
  8104c8:	1027883a 	mov	r19,r2
  8104cc:	08130c80 	call	8130c8 <__multiply>
  8104d0:	d9001617 	ldw	r4,88(sp)
  8104d4:	d9400717 	ldw	r5,28(sp)
  8104d8:	1023883a 	mov	r17,r2
  8104dc:	08126380 	call	812638 <_Bfree>
  8104e0:	dc400715 	stw	r17,28(sp)
  8104e4:	d9001017 	ldw	r4,64(sp)
  8104e8:	248dc83a 	sub	r6,r4,r18
  8104ec:	30010e1e 	bne	r6,zero,810928 <_dtoa_r+0xc80>
  8104f0:	d9001617 	ldw	r4,88(sp)
  8104f4:	04400044 	movi	r17,1
  8104f8:	880b883a 	mov	r5,r17
  8104fc:	08132b00 	call	8132b0 <__i2b>
  810500:	d9800917 	ldw	r6,36(sp)
  810504:	1025883a 	mov	r18,r2
  810508:	0180040e 	bge	zero,r6,81051c <_dtoa_r+0x874>
  81050c:	d9001617 	ldw	r4,88(sp)
  810510:	100b883a 	mov	r5,r2
  810514:	08133ec0 	call	8133ec <__pow5mult>
  810518:	1025883a 	mov	r18,r2
  81051c:	d8801717 	ldw	r2,92(sp)
  810520:	8880f30e 	bge	r17,r2,8108f0 <_dtoa_r+0xc48>
  810524:	0023883a 	mov	r17,zero
  810528:	d9800917 	ldw	r6,36(sp)
  81052c:	30019e1e 	bne	r6,zero,810ba8 <_dtoa_r+0xf00>
  810530:	00c00044 	movi	r3,1
  810534:	d9000a17 	ldw	r4,40(sp)
  810538:	20c5883a 	add	r2,r4,r3
  81053c:	10c007cc 	andi	r3,r2,31
  810540:	1800841e 	bne	r3,zero,810754 <_dtoa_r+0xaac>
  810544:	00800704 	movi	r2,28
  810548:	d9000a17 	ldw	r4,40(sp)
  81054c:	d9801117 	ldw	r6,68(sp)
  810550:	80a1883a 	add	r16,r16,r2
  810554:	2089883a 	add	r4,r4,r2
  810558:	308d883a 	add	r6,r6,r2
  81055c:	d9000a15 	stw	r4,40(sp)
  810560:	d9801115 	stw	r6,68(sp)
  810564:	d8801117 	ldw	r2,68(sp)
  810568:	0080050e 	bge	zero,r2,810580 <_dtoa_r+0x8d8>
  81056c:	d9400717 	ldw	r5,28(sp)
  810570:	d9001617 	ldw	r4,88(sp)
  810574:	100d883a 	mov	r6,r2
  810578:	0812f7c0 	call	812f7c <__lshift>
  81057c:	d8800715 	stw	r2,28(sp)
  810580:	d8c00a17 	ldw	r3,40(sp)
  810584:	00c0050e 	bge	zero,r3,81059c <_dtoa_r+0x8f4>
  810588:	d9001617 	ldw	r4,88(sp)
  81058c:	900b883a 	mov	r5,r18
  810590:	180d883a 	mov	r6,r3
  810594:	0812f7c0 	call	812f7c <__lshift>
  810598:	1025883a 	mov	r18,r2
  81059c:	d9000c17 	ldw	r4,48(sp)
  8105a0:	2005003a 	cmpeq	r2,r4,zero
  8105a4:	10016f26 	beq	r2,zero,810b64 <_dtoa_r+0xebc>
  8105a8:	d9000f17 	ldw	r4,60(sp)
  8105ac:	0102170e 	bge	zero,r4,810e0c <_dtoa_r+0x1164>
  8105b0:	d9800b17 	ldw	r6,44(sp)
  8105b4:	3005003a 	cmpeq	r2,r6,zero
  8105b8:	1000881e 	bne	r2,zero,8107dc <_dtoa_r+0xb34>
  8105bc:	0400050e 	bge	zero,r16,8105d4 <_dtoa_r+0x92c>
  8105c0:	d9001617 	ldw	r4,88(sp)
  8105c4:	980b883a 	mov	r5,r19
  8105c8:	800d883a 	mov	r6,r16
  8105cc:	0812f7c0 	call	812f7c <__lshift>
  8105d0:	1027883a 	mov	r19,r2
  8105d4:	8804c03a 	cmpne	r2,r17,zero
  8105d8:	1002541e 	bne	r2,zero,810f2c <_dtoa_r+0x1284>
  8105dc:	980b883a 	mov	r5,r19
  8105e0:	dd800517 	ldw	r22,20(sp)
  8105e4:	dcc00615 	stw	r19,24(sp)
  8105e8:	a700004c 	andi	fp,r20,1
  8105ec:	2827883a 	mov	r19,r5
  8105f0:	d9000717 	ldw	r4,28(sp)
  8105f4:	900b883a 	mov	r5,r18
  8105f8:	080fa900 	call	80fa90 <quorem>
  8105fc:	d9000717 	ldw	r4,28(sp)
  810600:	d9400617 	ldw	r5,24(sp)
  810604:	1023883a 	mov	r17,r2
  810608:	8dc00c04 	addi	r23,r17,48
  81060c:	08127940 	call	812794 <__mcmp>
  810610:	d9001617 	ldw	r4,88(sp)
  810614:	900b883a 	mov	r5,r18
  810618:	980d883a 	mov	r6,r19
  81061c:	1029883a 	mov	r20,r2
  810620:	0812df00 	call	812df0 <__mdiff>
  810624:	102b883a 	mov	r21,r2
  810628:	10800317 	ldw	r2,12(r2)
  81062c:	1001281e 	bne	r2,zero,810ad0 <_dtoa_r+0xe28>
  810630:	d9000717 	ldw	r4,28(sp)
  810634:	a80b883a 	mov	r5,r21
  810638:	08127940 	call	812794 <__mcmp>
  81063c:	d9001617 	ldw	r4,88(sp)
  810640:	1021883a 	mov	r16,r2
  810644:	a80b883a 	mov	r5,r21
  810648:	08126380 	call	812638 <_Bfree>
  81064c:	8000041e 	bne	r16,zero,810660 <_dtoa_r+0x9b8>
  810650:	d8801717 	ldw	r2,92(sp)
  810654:	1000021e 	bne	r2,zero,810660 <_dtoa_r+0x9b8>
  810658:	e004c03a 	cmpne	r2,fp,zero
  81065c:	10011726 	beq	r2,zero,810abc <_dtoa_r+0xe14>
  810660:	a0010616 	blt	r20,zero,810a7c <_dtoa_r+0xdd4>
  810664:	a000041e 	bne	r20,zero,810678 <_dtoa_r+0x9d0>
  810668:	d8c01717 	ldw	r3,92(sp)
  81066c:	1800021e 	bne	r3,zero,810678 <_dtoa_r+0x9d0>
  810670:	e004c03a 	cmpne	r2,fp,zero
  810674:	10010126 	beq	r2,zero,810a7c <_dtoa_r+0xdd4>
  810678:	04023d16 	blt	zero,r16,810f70 <_dtoa_r+0x12c8>
  81067c:	b5c00005 	stb	r23,0(r22)
  810680:	d9800517 	ldw	r6,20(sp)
  810684:	d9000f17 	ldw	r4,60(sp)
  810688:	b5800044 	addi	r22,r22,1
  81068c:	3105883a 	add	r2,r6,r4
  810690:	b0806526 	beq	r22,r2,810828 <_dtoa_r+0xb80>
  810694:	d9400717 	ldw	r5,28(sp)
  810698:	d9001617 	ldw	r4,88(sp)
  81069c:	01800284 	movi	r6,10
  8106a0:	000f883a 	mov	r7,zero
  8106a4:	08132ec0 	call	8132ec <__multadd>
  8106a8:	d8800715 	stw	r2,28(sp)
  8106ac:	d8800617 	ldw	r2,24(sp)
  8106b0:	14c10c26 	beq	r2,r19,810ae4 <_dtoa_r+0xe3c>
  8106b4:	d9400617 	ldw	r5,24(sp)
  8106b8:	d9001617 	ldw	r4,88(sp)
  8106bc:	01800284 	movi	r6,10
  8106c0:	000f883a 	mov	r7,zero
  8106c4:	08132ec0 	call	8132ec <__multadd>
  8106c8:	d9001617 	ldw	r4,88(sp)
  8106cc:	980b883a 	mov	r5,r19
  8106d0:	01800284 	movi	r6,10
  8106d4:	000f883a 	mov	r7,zero
  8106d8:	d8800615 	stw	r2,24(sp)
  8106dc:	08132ec0 	call	8132ec <__multadd>
  8106e0:	1027883a 	mov	r19,r2
  8106e4:	003fc206 	br	8105f0 <_dtoa_r+0x948>
  8106e8:	2445c83a 	sub	r2,r4,r17
  8106ec:	a088983a 	sll	r4,r20,r2
  8106f0:	003e4b06 	br	810020 <_dtoa_r+0x378>
  8106f4:	01bfffc4 	movi	r6,-1
  8106f8:	00800044 	movi	r2,1
  8106fc:	d9800e15 	stw	r6,56(sp)
  810700:	d9800f15 	stw	r6,60(sp)
  810704:	d8800b15 	stw	r2,44(sp)
  810708:	d8c01617 	ldw	r3,88(sp)
  81070c:	008005c4 	movi	r2,23
  810710:	18001115 	stw	zero,68(r3)
  810714:	1580082e 	bgeu	r2,r22,810738 <_dtoa_r+0xa90>
  810718:	00c00104 	movi	r3,4
  81071c:	0009883a 	mov	r4,zero
  810720:	18c7883a 	add	r3,r3,r3
  810724:	18800504 	addi	r2,r3,20
  810728:	21000044 	addi	r4,r4,1
  81072c:	b0bffc2e 	bgeu	r22,r2,810720 <_dtoa_r+0xa78>
  810730:	d9801617 	ldw	r6,88(sp)
  810734:	31001115 	stw	r4,68(r6)
  810738:	dc000f17 	ldw	r16,60(sp)
  81073c:	003e4b06 	br	81006c <_dtoa_r+0x3c4>
  810740:	d9801717 	ldw	r6,92(sp)
  810744:	0023883a 	mov	r17,zero
  810748:	31bfff04 	addi	r6,r6,-4
  81074c:	d9801715 	stw	r6,92(sp)
  810750:	003df806 	br	80ff34 <_dtoa_r+0x28c>
  810754:	00800804 	movi	r2,32
  810758:	10c9c83a 	sub	r4,r2,r3
  81075c:	00c00104 	movi	r3,4
  810760:	19005a16 	blt	r3,r4,8108cc <_dtoa_r+0xc24>
  810764:	008000c4 	movi	r2,3
  810768:	113f7e16 	blt	r2,r4,810564 <_dtoa_r+0x8bc>
  81076c:	20800704 	addi	r2,r4,28
  810770:	003f7506 	br	810548 <_dtoa_r+0x8a0>
  810774:	d9801717 	ldw	r6,92(sp)
  810778:	00800044 	movi	r2,1
  81077c:	1180a10e 	bge	r2,r6,810a04 <_dtoa_r+0xd5c>
  810780:	d9800f17 	ldw	r6,60(sp)
  810784:	d8c01017 	ldw	r3,64(sp)
  810788:	30bfffc4 	addi	r2,r6,-1
  81078c:	1881c616 	blt	r3,r2,810ea8 <_dtoa_r+0x1200>
  810790:	18a5c83a 	sub	r18,r3,r2
  810794:	d8800f17 	ldw	r2,60(sp)
  810798:	10026216 	blt	r2,zero,811124 <_dtoa_r+0x147c>
  81079c:	dc001117 	ldw	r16,68(sp)
  8107a0:	1007883a 	mov	r3,r2
  8107a4:	d9800a17 	ldw	r6,40(sp)
  8107a8:	d8801117 	ldw	r2,68(sp)
  8107ac:	d9001617 	ldw	r4,88(sp)
  8107b0:	30cd883a 	add	r6,r6,r3
  8107b4:	10c5883a 	add	r2,r2,r3
  8107b8:	01400044 	movi	r5,1
  8107bc:	d9800a15 	stw	r6,40(sp)
  8107c0:	d8801115 	stw	r2,68(sp)
  8107c4:	08132b00 	call	8132b0 <__i2b>
  8107c8:	1027883a 	mov	r19,r2
  8107cc:	003f2506 	br	810464 <_dtoa_r+0x7bc>
  8107d0:	00c020b4 	movhi	r3,130
  8107d4:	18ffbb04 	addi	r3,r3,-276
  8107d8:	003d6706 	br	80fd78 <_dtoa_r+0xd0>
  8107dc:	dd800517 	ldw	r22,20(sp)
  8107e0:	04000044 	movi	r16,1
  8107e4:	00000706 	br	810804 <_dtoa_r+0xb5c>
  8107e8:	d9400717 	ldw	r5,28(sp)
  8107ec:	d9001617 	ldw	r4,88(sp)
  8107f0:	01800284 	movi	r6,10
  8107f4:	000f883a 	mov	r7,zero
  8107f8:	08132ec0 	call	8132ec <__multadd>
  8107fc:	d8800715 	stw	r2,28(sp)
  810800:	84000044 	addi	r16,r16,1
  810804:	d9000717 	ldw	r4,28(sp)
  810808:	900b883a 	mov	r5,r18
  81080c:	080fa900 	call	80fa90 <quorem>
  810810:	15c00c04 	addi	r23,r2,48
  810814:	b5c00005 	stb	r23,0(r22)
  810818:	d8c00f17 	ldw	r3,60(sp)
  81081c:	b5800044 	addi	r22,r22,1
  810820:	80fff116 	blt	r16,r3,8107e8 <_dtoa_r+0xb40>
  810824:	d8000615 	stw	zero,24(sp)
  810828:	d9400717 	ldw	r5,28(sp)
  81082c:	d9001617 	ldw	r4,88(sp)
  810830:	01800044 	movi	r6,1
  810834:	0812f7c0 	call	812f7c <__lshift>
  810838:	1009883a 	mov	r4,r2
  81083c:	900b883a 	mov	r5,r18
  810840:	d8800715 	stw	r2,28(sp)
  810844:	08127940 	call	812794 <__mcmp>
  810848:	00803c0e 	bge	zero,r2,81093c <_dtoa_r+0xc94>
  81084c:	b009883a 	mov	r4,r22
  810850:	213fffc4 	addi	r4,r4,-1
  810854:	21400003 	ldbu	r5,0(r4)
  810858:	00800e44 	movi	r2,57
  81085c:	28c03fcc 	andi	r3,r5,255
  810860:	18c0201c 	xori	r3,r3,128
  810864:	18ffe004 	addi	r3,r3,-128
  810868:	1881981e 	bne	r3,r2,810ecc <_dtoa_r+0x1224>
  81086c:	d9800517 	ldw	r6,20(sp)
  810870:	21bff71e 	bne	r4,r6,810850 <_dtoa_r+0xba8>
  810874:	d8800d17 	ldw	r2,52(sp)
  810878:	37000044 	addi	fp,r6,1
  81087c:	10800044 	addi	r2,r2,1
  810880:	d8800d15 	stw	r2,52(sp)
  810884:	00800c44 	movi	r2,49
  810888:	30800005 	stb	r2,0(r6)
  81088c:	d9001617 	ldw	r4,88(sp)
  810890:	900b883a 	mov	r5,r18
  810894:	08126380 	call	812638 <_Bfree>
  810898:	983ecd26 	beq	r19,zero,8103d0 <_dtoa_r+0x728>
  81089c:	d8c00617 	ldw	r3,24(sp)
  8108a0:	18000426 	beq	r3,zero,8108b4 <_dtoa_r+0xc0c>
  8108a4:	1cc00326 	beq	r3,r19,8108b4 <_dtoa_r+0xc0c>
  8108a8:	d9001617 	ldw	r4,88(sp)
  8108ac:	180b883a 	mov	r5,r3
  8108b0:	08126380 	call	812638 <_Bfree>
  8108b4:	d9001617 	ldw	r4,88(sp)
  8108b8:	980b883a 	mov	r5,r19
  8108bc:	08126380 	call	812638 <_Bfree>
  8108c0:	003ec306 	br	8103d0 <_dtoa_r+0x728>
  8108c4:	1805883a 	mov	r2,r3
  8108c8:	003eeb06 	br	810478 <_dtoa_r+0x7d0>
  8108cc:	d9800a17 	ldw	r6,40(sp)
  8108d0:	d8c01117 	ldw	r3,68(sp)
  8108d4:	20bfff04 	addi	r2,r4,-4
  8108d8:	308d883a 	add	r6,r6,r2
  8108dc:	1887883a 	add	r3,r3,r2
  8108e0:	80a1883a 	add	r16,r16,r2
  8108e4:	d9800a15 	stw	r6,40(sp)
  8108e8:	d8c01115 	stw	r3,68(sp)
  8108ec:	003f1d06 	br	810564 <_dtoa_r+0x8bc>
  8108f0:	a03f0c1e 	bne	r20,zero,810524 <_dtoa_r+0x87c>
  8108f4:	00800434 	movhi	r2,16
  8108f8:	10bfffc4 	addi	r2,r2,-1
  8108fc:	a884703a 	and	r2,r21,r2
  810900:	103f081e 	bne	r2,zero,810524 <_dtoa_r+0x87c>
  810904:	a89ffc2c 	andhi	r2,r21,32752
  810908:	103f0626 	beq	r2,zero,810524 <_dtoa_r+0x87c>
  81090c:	d8c01117 	ldw	r3,68(sp)
  810910:	d9000a17 	ldw	r4,40(sp)
  810914:	18c00044 	addi	r3,r3,1
  810918:	21000044 	addi	r4,r4,1
  81091c:	d8c01115 	stw	r3,68(sp)
  810920:	d9000a15 	stw	r4,40(sp)
  810924:	003f0006 	br	810528 <_dtoa_r+0x880>
  810928:	d9400717 	ldw	r5,28(sp)
  81092c:	d9001617 	ldw	r4,88(sp)
  810930:	08133ec0 	call	8133ec <__pow5mult>
  810934:	d8800715 	stw	r2,28(sp)
  810938:	003eed06 	br	8104f0 <_dtoa_r+0x848>
  81093c:	1000021e 	bne	r2,zero,810948 <_dtoa_r+0xca0>
  810940:	b880004c 	andi	r2,r23,1
  810944:	103fc11e 	bne	r2,zero,81084c <_dtoa_r+0xba4>
  810948:	b5bfffc4 	addi	r22,r22,-1
  81094c:	b0c00007 	ldb	r3,0(r22)
  810950:	00800c04 	movi	r2,48
  810954:	18bffc26 	beq	r3,r2,810948 <_dtoa_r+0xca0>
  810958:	b7000044 	addi	fp,r22,1
  81095c:	003fcb06 	br	81088c <_dtoa_r+0xbe4>
  810960:	d9800d17 	ldw	r6,52(sp)
  810964:	018fc83a 	sub	r7,zero,r6
  810968:	3801f726 	beq	r7,zero,811148 <_dtoa_r+0x14a0>
  81096c:	398003cc 	andi	r6,r7,15
  810970:	300c90fa 	slli	r6,r6,3
  810974:	014020b4 	movhi	r5,130
  810978:	2942ab04 	addi	r5,r5,2732
  81097c:	d9001217 	ldw	r4,72(sp)
  810980:	314d883a 	add	r6,r6,r5
  810984:	30c00117 	ldw	r3,4(r6)
  810988:	30800017 	ldw	r2,0(r6)
  81098c:	d9401317 	ldw	r5,76(sp)
  810990:	3821d13a 	srai	r16,r7,4
  810994:	100d883a 	mov	r6,r2
  810998:	180f883a 	mov	r7,r3
  81099c:	080ab540 	call	80ab54 <__muldf3>
  8109a0:	1011883a 	mov	r8,r2
  8109a4:	1813883a 	mov	r9,r3
  8109a8:	1029883a 	mov	r20,r2
  8109ac:	182b883a 	mov	r21,r3
  8109b0:	8001e526 	beq	r16,zero,811148 <_dtoa_r+0x14a0>
  8109b4:	05800084 	movi	r22,2
  8109b8:	044020b4 	movhi	r17,130
  8109bc:	8c42dd04 	addi	r17,r17,2932
  8109c0:	8080004c 	andi	r2,r16,1
  8109c4:	1005003a 	cmpeq	r2,r2,zero
  8109c8:	1000081e 	bne	r2,zero,8109ec <_dtoa_r+0xd44>
  8109cc:	89800017 	ldw	r6,0(r17)
  8109d0:	89c00117 	ldw	r7,4(r17)
  8109d4:	480b883a 	mov	r5,r9
  8109d8:	4009883a 	mov	r4,r8
  8109dc:	080ab540 	call	80ab54 <__muldf3>
  8109e0:	1011883a 	mov	r8,r2
  8109e4:	b5800044 	addi	r22,r22,1
  8109e8:	1813883a 	mov	r9,r3
  8109ec:	8021d07a 	srai	r16,r16,1
  8109f0:	8c400204 	addi	r17,r17,8
  8109f4:	803ff21e 	bne	r16,zero,8109c0 <_dtoa_r+0xd18>
  8109f8:	4029883a 	mov	r20,r8
  8109fc:	482b883a 	mov	r21,r9
  810a00:	003dca06 	br	81012c <_dtoa_r+0x484>
  810a04:	d9000817 	ldw	r4,32(sp)
  810a08:	2005003a 	cmpeq	r2,r4,zero
  810a0c:	1001f61e 	bne	r2,zero,8111e8 <_dtoa_r+0x1540>
  810a10:	dc001117 	ldw	r16,68(sp)
  810a14:	dc801017 	ldw	r18,64(sp)
  810a18:	18c10cc4 	addi	r3,r3,1075
  810a1c:	003f6106 	br	8107a4 <_dtoa_r+0xafc>
  810a20:	d8000b15 	stw	zero,44(sp)
  810a24:	d9802617 	ldw	r6,152(sp)
  810a28:	d8c00d17 	ldw	r3,52(sp)
  810a2c:	30800044 	addi	r2,r6,1
  810a30:	18ad883a 	add	r22,r3,r2
  810a34:	b13fffc4 	addi	r4,r22,-1
  810a38:	d9000e15 	stw	r4,56(sp)
  810a3c:	0581f60e 	bge	zero,r22,811218 <_dtoa_r+0x1570>
  810a40:	dd800f15 	stw	r22,60(sp)
  810a44:	003f3006 	br	810708 <_dtoa_r+0xa60>
  810a48:	d8000b15 	stw	zero,44(sp)
  810a4c:	d9002617 	ldw	r4,152(sp)
  810a50:	0101eb0e 	bge	zero,r4,811200 <_dtoa_r+0x1558>
  810a54:	202d883a 	mov	r22,r4
  810a58:	d9000e15 	stw	r4,56(sp)
  810a5c:	d9000f15 	stw	r4,60(sp)
  810a60:	003f2906 	br	810708 <_dtoa_r+0xa60>
  810a64:	01800044 	movi	r6,1
  810a68:	d9800b15 	stw	r6,44(sp)
  810a6c:	003ff706 	br	810a4c <_dtoa_r+0xda4>
  810a70:	01000044 	movi	r4,1
  810a74:	d9000b15 	stw	r4,44(sp)
  810a78:	003fea06 	br	810a24 <_dtoa_r+0xd7c>
  810a7c:	04000c0e 	bge	zero,r16,810ab0 <_dtoa_r+0xe08>
  810a80:	d9400717 	ldw	r5,28(sp)
  810a84:	d9001617 	ldw	r4,88(sp)
  810a88:	01800044 	movi	r6,1
  810a8c:	0812f7c0 	call	812f7c <__lshift>
  810a90:	1009883a 	mov	r4,r2
  810a94:	900b883a 	mov	r5,r18
  810a98:	d8800715 	stw	r2,28(sp)
  810a9c:	08127940 	call	812794 <__mcmp>
  810aa0:	0081e00e 	bge	zero,r2,811224 <_dtoa_r+0x157c>
  810aa4:	bdc00044 	addi	r23,r23,1
  810aa8:	00800e84 	movi	r2,58
  810aac:	b881a226 	beq	r23,r2,811138 <_dtoa_r+0x1490>
  810ab0:	b7000044 	addi	fp,r22,1
  810ab4:	b5c00005 	stb	r23,0(r22)
  810ab8:	003f7406 	br	81088c <_dtoa_r+0xbe4>
  810abc:	00800e44 	movi	r2,57
  810ac0:	b8819d26 	beq	r23,r2,811138 <_dtoa_r+0x1490>
  810ac4:	053ffa0e 	bge	zero,r20,810ab0 <_dtoa_r+0xe08>
  810ac8:	8dc00c44 	addi	r23,r17,49
  810acc:	003ff806 	br	810ab0 <_dtoa_r+0xe08>
  810ad0:	d9001617 	ldw	r4,88(sp)
  810ad4:	a80b883a 	mov	r5,r21
  810ad8:	04000044 	movi	r16,1
  810adc:	08126380 	call	812638 <_Bfree>
  810ae0:	003edf06 	br	810660 <_dtoa_r+0x9b8>
  810ae4:	d9001617 	ldw	r4,88(sp)
  810ae8:	980b883a 	mov	r5,r19
  810aec:	01800284 	movi	r6,10
  810af0:	000f883a 	mov	r7,zero
  810af4:	08132ec0 	call	8132ec <__multadd>
  810af8:	1027883a 	mov	r19,r2
  810afc:	d8800615 	stw	r2,24(sp)
  810b00:	003ebb06 	br	8105f0 <_dtoa_r+0x948>
  810b04:	d9801117 	ldw	r6,68(sp)
  810b08:	d8800d17 	ldw	r2,52(sp)
  810b0c:	d8000915 	stw	zero,36(sp)
  810b10:	308dc83a 	sub	r6,r6,r2
  810b14:	0087c83a 	sub	r3,zero,r2
  810b18:	d9801115 	stw	r6,68(sp)
  810b1c:	d8c01015 	stw	r3,64(sp)
  810b20:	003cfe06 	br	80ff1c <_dtoa_r+0x274>
  810b24:	018dc83a 	sub	r6,zero,r6
  810b28:	d9801115 	stw	r6,68(sp)
  810b2c:	d8000a15 	stw	zero,40(sp)
  810b30:	003cf306 	br	80ff00 <_dtoa_r+0x258>
  810b34:	d9000d17 	ldw	r4,52(sp)
  810b38:	080af180 	call	80af18 <__floatsidf>
  810b3c:	880b883a 	mov	r5,r17
  810b40:	8009883a 	mov	r4,r16
  810b44:	180f883a 	mov	r7,r3
  810b48:	100d883a 	mov	r6,r2
  810b4c:	0814bc80 	call	814bc8 <__nedf2>
  810b50:	103ce126 	beq	r2,zero,80fed8 <_dtoa_r+0x230>
  810b54:	d9800d17 	ldw	r6,52(sp)
  810b58:	31bfffc4 	addi	r6,r6,-1
  810b5c:	d9800d15 	stw	r6,52(sp)
  810b60:	003cdd06 	br	80fed8 <_dtoa_r+0x230>
  810b64:	d9000717 	ldw	r4,28(sp)
  810b68:	900b883a 	mov	r5,r18
  810b6c:	08127940 	call	812794 <__mcmp>
  810b70:	103e8d0e 	bge	r2,zero,8105a8 <_dtoa_r+0x900>
  810b74:	d9400717 	ldw	r5,28(sp)
  810b78:	d9001617 	ldw	r4,88(sp)
  810b7c:	01800284 	movi	r6,10
  810b80:	000f883a 	mov	r7,zero
  810b84:	08132ec0 	call	8132ec <__multadd>
  810b88:	d9800d17 	ldw	r6,52(sp)
  810b8c:	d8800715 	stw	r2,28(sp)
  810b90:	31bfffc4 	addi	r6,r6,-1
  810b94:	d9800d15 	stw	r6,52(sp)
  810b98:	b001a71e 	bne	r22,zero,811238 <_dtoa_r+0x1590>
  810b9c:	d8800e17 	ldw	r2,56(sp)
  810ba0:	d8800f15 	stw	r2,60(sp)
  810ba4:	003e8006 	br	8105a8 <_dtoa_r+0x900>
  810ba8:	90800417 	ldw	r2,16(r18)
  810bac:	1085883a 	add	r2,r2,r2
  810bb0:	1085883a 	add	r2,r2,r2
  810bb4:	1485883a 	add	r2,r2,r18
  810bb8:	11000417 	ldw	r4,16(r2)
  810bbc:	08126600 	call	812660 <__hi0bits>
  810bc0:	00c00804 	movi	r3,32
  810bc4:	1887c83a 	sub	r3,r3,r2
  810bc8:	003e5a06 	br	810534 <_dtoa_r+0x88c>
  810bcc:	d9400717 	ldw	r5,28(sp)
  810bd0:	d9801017 	ldw	r6,64(sp)
  810bd4:	d9001617 	ldw	r4,88(sp)
  810bd8:	08133ec0 	call	8133ec <__pow5mult>
  810bdc:	d8800715 	stw	r2,28(sp)
  810be0:	003e4306 	br	8104f0 <_dtoa_r+0x848>
  810be4:	d9800f17 	ldw	r6,60(sp)
  810be8:	d8800d17 	ldw	r2,52(sp)
  810bec:	d9800315 	stw	r6,12(sp)
  810bf0:	d8800415 	stw	r2,16(sp)
  810bf4:	d8c00b17 	ldw	r3,44(sp)
  810bf8:	1805003a 	cmpeq	r2,r3,zero
  810bfc:	1000e21e 	bne	r2,zero,810f88 <_dtoa_r+0x12e0>
  810c00:	d9000317 	ldw	r4,12(sp)
  810c04:	0005883a 	mov	r2,zero
  810c08:	00cff834 	movhi	r3,16352
  810c0c:	200c90fa 	slli	r6,r4,3
  810c10:	010020b4 	movhi	r4,130
  810c14:	2102ab04 	addi	r4,r4,2732
  810c18:	180b883a 	mov	r5,r3
  810c1c:	310d883a 	add	r6,r6,r4
  810c20:	327fff17 	ldw	r9,-4(r6)
  810c24:	323ffe17 	ldw	r8,-8(r6)
  810c28:	1009883a 	mov	r4,r2
  810c2c:	480f883a 	mov	r7,r9
  810c30:	400d883a 	mov	r6,r8
  810c34:	08148e80 	call	8148e8 <__divdf3>
  810c38:	180b883a 	mov	r5,r3
  810c3c:	b00d883a 	mov	r6,r22
  810c40:	b80f883a 	mov	r7,r23
  810c44:	1009883a 	mov	r4,r2
  810c48:	080aa600 	call	80aa60 <__subdf3>
  810c4c:	a80b883a 	mov	r5,r21
  810c50:	a009883a 	mov	r4,r20
  810c54:	d8c01915 	stw	r3,100(sp)
  810c58:	d8801815 	stw	r2,96(sp)
  810c5c:	080b0100 	call	80b010 <__fixdfsi>
  810c60:	1009883a 	mov	r4,r2
  810c64:	1027883a 	mov	r19,r2
  810c68:	080af180 	call	80af18 <__floatsidf>
  810c6c:	a80b883a 	mov	r5,r21
  810c70:	a009883a 	mov	r4,r20
  810c74:	180f883a 	mov	r7,r3
  810c78:	100d883a 	mov	r6,r2
  810c7c:	080aa600 	call	80aa60 <__subdf3>
  810c80:	d9801817 	ldw	r6,96(sp)
  810c84:	1823883a 	mov	r17,r3
  810c88:	d8801415 	stw	r2,80(sp)
  810c8c:	302d883a 	mov	r22,r6
  810c90:	d9800517 	ldw	r6,20(sp)
  810c94:	9cc00c04 	addi	r19,r19,48
  810c98:	dc401515 	stw	r17,84(sp)
  810c9c:	d8c01917 	ldw	r3,100(sp)
  810ca0:	34c00005 	stb	r19,0(r6)
  810ca4:	d8800517 	ldw	r2,20(sp)
  810ca8:	d9401917 	ldw	r5,100(sp)
  810cac:	d9801417 	ldw	r6,80(sp)
  810cb0:	b009883a 	mov	r4,r22
  810cb4:	880f883a 	mov	r7,r17
  810cb8:	182f883a 	mov	r23,r3
  810cbc:	17000044 	addi	fp,r2,1
  810cc0:	0814c500 	call	814c50 <__gtdf2>
  810cc4:	00804e16 	blt	zero,r2,810e00 <_dtoa_r+0x1158>
  810cc8:	d9801417 	ldw	r6,80(sp)
  810ccc:	0005883a 	mov	r2,zero
  810cd0:	00cffc34 	movhi	r3,16368
  810cd4:	180b883a 	mov	r5,r3
  810cd8:	880f883a 	mov	r7,r17
  810cdc:	1009883a 	mov	r4,r2
  810ce0:	080aa600 	call	80aa60 <__subdf3>
  810ce4:	d9401917 	ldw	r5,100(sp)
  810ce8:	180f883a 	mov	r7,r3
  810cec:	b009883a 	mov	r4,r22
  810cf0:	100d883a 	mov	r6,r2
  810cf4:	0814c500 	call	814c50 <__gtdf2>
  810cf8:	00bda216 	blt	zero,r2,810384 <_dtoa_r+0x6dc>
  810cfc:	d8c00317 	ldw	r3,12(sp)
  810d00:	00800044 	movi	r2,1
  810d04:	10c01216 	blt	r2,r3,810d50 <_dtoa_r+0x10a8>
  810d08:	003d4506 	br	810220 <_dtoa_r+0x578>
  810d0c:	d9801417 	ldw	r6,80(sp)
  810d10:	0005883a 	mov	r2,zero
  810d14:	00cffc34 	movhi	r3,16368
  810d18:	180b883a 	mov	r5,r3
  810d1c:	880f883a 	mov	r7,r17
  810d20:	1009883a 	mov	r4,r2
  810d24:	080aa600 	call	80aa60 <__subdf3>
  810d28:	d9c01b17 	ldw	r7,108(sp)
  810d2c:	180b883a 	mov	r5,r3
  810d30:	1009883a 	mov	r4,r2
  810d34:	b00d883a 	mov	r6,r22
  810d38:	0814d600 	call	814d60 <__ltdf2>
  810d3c:	103d9116 	blt	r2,zero,810384 <_dtoa_r+0x6dc>
  810d40:	d9800517 	ldw	r6,20(sp)
  810d44:	d9000317 	ldw	r4,12(sp)
  810d48:	3105883a 	add	r2,r6,r4
  810d4c:	e0bd3426 	beq	fp,r2,810220 <_dtoa_r+0x578>
  810d50:	04500934 	movhi	r17,16420
  810d54:	0021883a 	mov	r16,zero
  810d58:	b80b883a 	mov	r5,r23
  810d5c:	b009883a 	mov	r4,r22
  810d60:	800d883a 	mov	r6,r16
  810d64:	880f883a 	mov	r7,r17
  810d68:	080ab540 	call	80ab54 <__muldf3>
  810d6c:	d9401517 	ldw	r5,84(sp)
  810d70:	d9001417 	ldw	r4,80(sp)
  810d74:	880f883a 	mov	r7,r17
  810d78:	000d883a 	mov	r6,zero
  810d7c:	d8801a15 	stw	r2,104(sp)
  810d80:	d8c01b15 	stw	r3,108(sp)
  810d84:	080ab540 	call	80ab54 <__muldf3>
  810d88:	180b883a 	mov	r5,r3
  810d8c:	1009883a 	mov	r4,r2
  810d90:	1823883a 	mov	r17,r3
  810d94:	1021883a 	mov	r16,r2
  810d98:	080b0100 	call	80b010 <__fixdfsi>
  810d9c:	1009883a 	mov	r4,r2
  810da0:	102b883a 	mov	r21,r2
  810da4:	080af180 	call	80af18 <__floatsidf>
  810da8:	880b883a 	mov	r5,r17
  810dac:	8009883a 	mov	r4,r16
  810db0:	180f883a 	mov	r7,r3
  810db4:	100d883a 	mov	r6,r2
  810db8:	080aa600 	call	80aa60 <__subdf3>
  810dbc:	1021883a 	mov	r16,r2
  810dc0:	d9001b17 	ldw	r4,108(sp)
  810dc4:	1823883a 	mov	r17,r3
  810dc8:	dc001415 	stw	r16,80(sp)
  810dcc:	ad400c04 	addi	r21,r21,48
  810dd0:	dc401515 	stw	r17,84(sp)
  810dd4:	d8801a17 	ldw	r2,104(sp)
  810dd8:	e5400005 	stb	r21,0(fp)
  810ddc:	202f883a 	mov	r23,r4
  810de0:	d9c01b17 	ldw	r7,108(sp)
  810de4:	d9001417 	ldw	r4,80(sp)
  810de8:	880b883a 	mov	r5,r17
  810dec:	100d883a 	mov	r6,r2
  810df0:	102d883a 	mov	r22,r2
  810df4:	e7000044 	addi	fp,fp,1
  810df8:	0814d600 	call	814d60 <__ltdf2>
  810dfc:	103fc30e 	bge	r2,zero,810d0c <_dtoa_r+0x1064>
  810e00:	d9000417 	ldw	r4,16(sp)
  810e04:	d9000d15 	stw	r4,52(sp)
  810e08:	003d7106 	br	8103d0 <_dtoa_r+0x728>
  810e0c:	d9801717 	ldw	r6,92(sp)
  810e10:	00800084 	movi	r2,2
  810e14:	11bde60e 	bge	r2,r6,8105b0 <_dtoa_r+0x908>
  810e18:	203cfb1e 	bne	r4,zero,810208 <_dtoa_r+0x560>
  810e1c:	d9001617 	ldw	r4,88(sp)
  810e20:	900b883a 	mov	r5,r18
  810e24:	01800144 	movi	r6,5
  810e28:	000f883a 	mov	r7,zero
  810e2c:	08132ec0 	call	8132ec <__multadd>
  810e30:	d9000717 	ldw	r4,28(sp)
  810e34:	100b883a 	mov	r5,r2
  810e38:	1025883a 	mov	r18,r2
  810e3c:	08127940 	call	812794 <__mcmp>
  810e40:	00bcf10e 	bge	zero,r2,810208 <_dtoa_r+0x560>
  810e44:	d8c00d17 	ldw	r3,52(sp)
  810e48:	d9000517 	ldw	r4,20(sp)
  810e4c:	d8000615 	stw	zero,24(sp)
  810e50:	18c00044 	addi	r3,r3,1
  810e54:	d8c00d15 	stw	r3,52(sp)
  810e58:	00800c44 	movi	r2,49
  810e5c:	27000044 	addi	fp,r4,1
  810e60:	20800005 	stb	r2,0(r4)
  810e64:	003e8906 	br	81088c <_dtoa_r+0xbe4>
  810e68:	d8c00517 	ldw	r3,20(sp)
  810e6c:	003bc206 	br	80fd78 <_dtoa_r+0xd0>
  810e70:	018020b4 	movhi	r6,130
  810e74:	3182dd04 	addi	r6,r6,2932
  810e78:	30c00917 	ldw	r3,36(r6)
  810e7c:	30800817 	ldw	r2,32(r6)
  810e80:	d9001217 	ldw	r4,72(sp)
  810e84:	d9401317 	ldw	r5,76(sp)
  810e88:	180f883a 	mov	r7,r3
  810e8c:	100d883a 	mov	r6,r2
  810e90:	08148e80 	call	8148e8 <__divdf3>
  810e94:	948003cc 	andi	r18,r18,15
  810e98:	058000c4 	movi	r22,3
  810e9c:	1029883a 	mov	r20,r2
  810ea0:	182b883a 	mov	r21,r3
  810ea4:	003c8906 	br	8100cc <_dtoa_r+0x424>
  810ea8:	d9001017 	ldw	r4,64(sp)
  810eac:	d9800917 	ldw	r6,36(sp)
  810eb0:	0025883a 	mov	r18,zero
  810eb4:	1105c83a 	sub	r2,r2,r4
  810eb8:	2089883a 	add	r4,r4,r2
  810ebc:	308d883a 	add	r6,r6,r2
  810ec0:	d9001015 	stw	r4,64(sp)
  810ec4:	d9800915 	stw	r6,36(sp)
  810ec8:	003e3206 	br	810794 <_dtoa_r+0xaec>
  810ecc:	28800044 	addi	r2,r5,1
  810ed0:	27000044 	addi	fp,r4,1
  810ed4:	20800005 	stb	r2,0(r4)
  810ed8:	003e6c06 	br	81088c <_dtoa_r+0xbe4>
  810edc:	d8800f17 	ldw	r2,60(sp)
  810ee0:	00bce016 	blt	zero,r2,810264 <_dtoa_r+0x5bc>
  810ee4:	d9800f17 	ldw	r6,60(sp)
  810ee8:	303cc51e 	bne	r6,zero,810200 <_dtoa_r+0x558>
  810eec:	0005883a 	mov	r2,zero
  810ef0:	00d00534 	movhi	r3,16404
  810ef4:	980b883a 	mov	r5,r19
  810ef8:	180f883a 	mov	r7,r3
  810efc:	9009883a 	mov	r4,r18
  810f00:	100d883a 	mov	r6,r2
  810f04:	080ab540 	call	80ab54 <__muldf3>
  810f08:	180b883a 	mov	r5,r3
  810f0c:	a80f883a 	mov	r7,r21
  810f10:	1009883a 	mov	r4,r2
  810f14:	a00d883a 	mov	r6,r20
  810f18:	0814cd80 	call	814cd8 <__gedf2>
  810f1c:	103cb80e 	bge	r2,zero,810200 <_dtoa_r+0x558>
  810f20:	0027883a 	mov	r19,zero
  810f24:	0025883a 	mov	r18,zero
  810f28:	003fc606 	br	810e44 <_dtoa_r+0x119c>
  810f2c:	99400117 	ldw	r5,4(r19)
  810f30:	d9001617 	ldw	r4,88(sp)
  810f34:	0812bb80 	call	812bb8 <_Balloc>
  810f38:	99800417 	ldw	r6,16(r19)
  810f3c:	11000304 	addi	r4,r2,12
  810f40:	99400304 	addi	r5,r19,12
  810f44:	318d883a 	add	r6,r6,r6
  810f48:	318d883a 	add	r6,r6,r6
  810f4c:	31800204 	addi	r6,r6,8
  810f50:	1023883a 	mov	r17,r2
  810f54:	080c2c00 	call	80c2c0 <memcpy>
  810f58:	d9001617 	ldw	r4,88(sp)
  810f5c:	880b883a 	mov	r5,r17
  810f60:	01800044 	movi	r6,1
  810f64:	0812f7c0 	call	812f7c <__lshift>
  810f68:	100b883a 	mov	r5,r2
  810f6c:	003d9c06 	br	8105e0 <_dtoa_r+0x938>
  810f70:	00800e44 	movi	r2,57
  810f74:	b8807026 	beq	r23,r2,811138 <_dtoa_r+0x1490>
  810f78:	b8800044 	addi	r2,r23,1
  810f7c:	b7000044 	addi	fp,r22,1
  810f80:	b0800005 	stb	r2,0(r22)
  810f84:	003e4106 	br	81088c <_dtoa_r+0xbe4>
  810f88:	d8800317 	ldw	r2,12(sp)
  810f8c:	018020b4 	movhi	r6,130
  810f90:	3182ab04 	addi	r6,r6,2732
  810f94:	b009883a 	mov	r4,r22
  810f98:	100e90fa 	slli	r7,r2,3
  810f9c:	b80b883a 	mov	r5,r23
  810fa0:	398f883a 	add	r7,r7,r6
  810fa4:	38bffe17 	ldw	r2,-8(r7)
  810fa8:	d9800517 	ldw	r6,20(sp)
  810fac:	38ffff17 	ldw	r3,-4(r7)
  810fb0:	37000044 	addi	fp,r6,1
  810fb4:	180f883a 	mov	r7,r3
  810fb8:	100d883a 	mov	r6,r2
  810fbc:	080ab540 	call	80ab54 <__muldf3>
  810fc0:	a80b883a 	mov	r5,r21
  810fc4:	a009883a 	mov	r4,r20
  810fc8:	182f883a 	mov	r23,r3
  810fcc:	102d883a 	mov	r22,r2
  810fd0:	080b0100 	call	80b010 <__fixdfsi>
  810fd4:	1009883a 	mov	r4,r2
  810fd8:	1027883a 	mov	r19,r2
  810fdc:	080af180 	call	80af18 <__floatsidf>
  810fe0:	a80b883a 	mov	r5,r21
  810fe4:	a009883a 	mov	r4,r20
  810fe8:	180f883a 	mov	r7,r3
  810fec:	100d883a 	mov	r6,r2
  810ff0:	080aa600 	call	80aa60 <__subdf3>
  810ff4:	180b883a 	mov	r5,r3
  810ff8:	d8c00517 	ldw	r3,20(sp)
  810ffc:	9cc00c04 	addi	r19,r19,48
  811000:	1009883a 	mov	r4,r2
  811004:	1cc00005 	stb	r19,0(r3)
  811008:	2021883a 	mov	r16,r4
  81100c:	d9000317 	ldw	r4,12(sp)
  811010:	00800044 	movi	r2,1
  811014:	2823883a 	mov	r17,r5
  811018:	20802226 	beq	r4,r2,8110a4 <_dtoa_r+0x13fc>
  81101c:	1029883a 	mov	r20,r2
  811020:	0005883a 	mov	r2,zero
  811024:	00d00934 	movhi	r3,16420
  811028:	180f883a 	mov	r7,r3
  81102c:	100d883a 	mov	r6,r2
  811030:	880b883a 	mov	r5,r17
  811034:	8009883a 	mov	r4,r16
  811038:	080ab540 	call	80ab54 <__muldf3>
  81103c:	180b883a 	mov	r5,r3
  811040:	1009883a 	mov	r4,r2
  811044:	1823883a 	mov	r17,r3
  811048:	1021883a 	mov	r16,r2
  81104c:	080b0100 	call	80b010 <__fixdfsi>
  811050:	1009883a 	mov	r4,r2
  811054:	102b883a 	mov	r21,r2
  811058:	080af180 	call	80af18 <__floatsidf>
  81105c:	880b883a 	mov	r5,r17
  811060:	8009883a 	mov	r4,r16
  811064:	180f883a 	mov	r7,r3
  811068:	100d883a 	mov	r6,r2
  81106c:	080aa600 	call	80aa60 <__subdf3>
  811070:	180b883a 	mov	r5,r3
  811074:	d8c00517 	ldw	r3,20(sp)
  811078:	1009883a 	mov	r4,r2
  81107c:	ad400c04 	addi	r21,r21,48
  811080:	1d05883a 	add	r2,r3,r20
  811084:	15400005 	stb	r21,0(r2)
  811088:	2021883a 	mov	r16,r4
  81108c:	d9000317 	ldw	r4,12(sp)
  811090:	a5000044 	addi	r20,r20,1
  811094:	2823883a 	mov	r17,r5
  811098:	a13fe11e 	bne	r20,r4,811020 <_dtoa_r+0x1378>
  81109c:	e505883a 	add	r2,fp,r20
  8110a0:	173fffc4 	addi	fp,r2,-1
  8110a4:	0025883a 	mov	r18,zero
  8110a8:	04cff834 	movhi	r19,16352
  8110ac:	b009883a 	mov	r4,r22
  8110b0:	b80b883a 	mov	r5,r23
  8110b4:	900d883a 	mov	r6,r18
  8110b8:	980f883a 	mov	r7,r19
  8110bc:	080aae00 	call	80aae0 <__adddf3>
  8110c0:	180b883a 	mov	r5,r3
  8110c4:	1009883a 	mov	r4,r2
  8110c8:	800d883a 	mov	r6,r16
  8110cc:	880f883a 	mov	r7,r17
  8110d0:	0814d600 	call	814d60 <__ltdf2>
  8110d4:	103cab16 	blt	r2,zero,810384 <_dtoa_r+0x6dc>
  8110d8:	0009883a 	mov	r4,zero
  8110dc:	980b883a 	mov	r5,r19
  8110e0:	b80f883a 	mov	r7,r23
  8110e4:	b00d883a 	mov	r6,r22
  8110e8:	080aa600 	call	80aa60 <__subdf3>
  8110ec:	180b883a 	mov	r5,r3
  8110f0:	880f883a 	mov	r7,r17
  8110f4:	1009883a 	mov	r4,r2
  8110f8:	800d883a 	mov	r6,r16
  8110fc:	0814c500 	call	814c50 <__gtdf2>
  811100:	00bc470e 	bge	zero,r2,810220 <_dtoa_r+0x578>
  811104:	00c00c04 	movi	r3,48
  811108:	e73fffc4 	addi	fp,fp,-1
  81110c:	e0800007 	ldb	r2,0(fp)
  811110:	10fffd26 	beq	r2,r3,811108 <_dtoa_r+0x1460>
  811114:	d9800417 	ldw	r6,16(sp)
  811118:	e7000044 	addi	fp,fp,1
  81111c:	d9800d15 	stw	r6,52(sp)
  811120:	003cab06 	br	8103d0 <_dtoa_r+0x728>
  811124:	d8c00f17 	ldw	r3,60(sp)
  811128:	d9001117 	ldw	r4,68(sp)
  81112c:	20e1c83a 	sub	r16,r4,r3
  811130:	0007883a 	mov	r3,zero
  811134:	003d9b06 	br	8107a4 <_dtoa_r+0xafc>
  811138:	00800e44 	movi	r2,57
  81113c:	b0800005 	stb	r2,0(r22)
  811140:	b5800044 	addi	r22,r22,1
  811144:	003dc106 	br	81084c <_dtoa_r+0xba4>
  811148:	05800084 	movi	r22,2
  81114c:	003bf706 	br	81012c <_dtoa_r+0x484>
  811150:	d9000f17 	ldw	r4,60(sp)
  811154:	013c000e 	bge	zero,r4,810158 <_dtoa_r+0x4b0>
  811158:	d9800e17 	ldw	r6,56(sp)
  81115c:	01bc300e 	bge	zero,r6,810220 <_dtoa_r+0x578>
  811160:	0005883a 	mov	r2,zero
  811164:	00d00934 	movhi	r3,16420
  811168:	a80b883a 	mov	r5,r21
  81116c:	180f883a 	mov	r7,r3
  811170:	a009883a 	mov	r4,r20
  811174:	100d883a 	mov	r6,r2
  811178:	080ab540 	call	80ab54 <__muldf3>
  81117c:	b1000044 	addi	r4,r22,1
  811180:	1021883a 	mov	r16,r2
  811184:	1823883a 	mov	r17,r3
  811188:	080af180 	call	80af18 <__floatsidf>
  81118c:	880b883a 	mov	r5,r17
  811190:	8009883a 	mov	r4,r16
  811194:	180f883a 	mov	r7,r3
  811198:	100d883a 	mov	r6,r2
  81119c:	080ab540 	call	80ab54 <__muldf3>
  8111a0:	0011883a 	mov	r8,zero
  8111a4:	02500734 	movhi	r9,16412
  8111a8:	180b883a 	mov	r5,r3
  8111ac:	480f883a 	mov	r7,r9
  8111b0:	1009883a 	mov	r4,r2
  8111b4:	400d883a 	mov	r6,r8
  8111b8:	080aae00 	call	80aae0 <__adddf3>
  8111bc:	102d883a 	mov	r22,r2
  8111c0:	00bf3034 	movhi	r2,64704
  8111c4:	10ef883a 	add	r23,r2,r3
  8111c8:	d8800d17 	ldw	r2,52(sp)
  8111cc:	d8c00e17 	ldw	r3,56(sp)
  8111d0:	8029883a 	mov	r20,r16
  8111d4:	10bfffc4 	addi	r2,r2,-1
  8111d8:	882b883a 	mov	r21,r17
  8111dc:	d8800415 	stw	r2,16(sp)
  8111e0:	d8c00315 	stw	r3,12(sp)
  8111e4:	003e8306 	br	810bf4 <_dtoa_r+0xf4c>
  8111e8:	d8800117 	ldw	r2,4(sp)
  8111ec:	dc001117 	ldw	r16,68(sp)
  8111f0:	dc801017 	ldw	r18,64(sp)
  8111f4:	00c00d84 	movi	r3,54
  8111f8:	1887c83a 	sub	r3,r3,r2
  8111fc:	003d6906 	br	8107a4 <_dtoa_r+0xafc>
  811200:	01800044 	movi	r6,1
  811204:	3021883a 	mov	r16,r6
  811208:	d9800f15 	stw	r6,60(sp)
  81120c:	d9802615 	stw	r6,152(sp)
  811210:	d9800e15 	stw	r6,56(sp)
  811214:	003b9306 	br	810064 <_dtoa_r+0x3bc>
  811218:	b021883a 	mov	r16,r22
  81121c:	dd800f15 	stw	r22,60(sp)
  811220:	003b9006 	br	810064 <_dtoa_r+0x3bc>
  811224:	103e221e 	bne	r2,zero,810ab0 <_dtoa_r+0xe08>
  811228:	b880004c 	andi	r2,r23,1
  81122c:	1005003a 	cmpeq	r2,r2,zero
  811230:	103e1f1e 	bne	r2,zero,810ab0 <_dtoa_r+0xe08>
  811234:	003e1b06 	br	810aa4 <_dtoa_r+0xdfc>
  811238:	d9001617 	ldw	r4,88(sp)
  81123c:	980b883a 	mov	r5,r19
  811240:	01800284 	movi	r6,10
  811244:	000f883a 	mov	r7,zero
  811248:	08132ec0 	call	8132ec <__multadd>
  81124c:	d8c00e17 	ldw	r3,56(sp)
  811250:	1027883a 	mov	r19,r2
  811254:	d8c00f15 	stw	r3,60(sp)
  811258:	003cd306 	br	8105a8 <_dtoa_r+0x900>

0081125c <_fflush_r>:
  81125c:	defffb04 	addi	sp,sp,-20
  811260:	dcc00315 	stw	r19,12(sp)
  811264:	dc800215 	stw	r18,8(sp)
  811268:	dfc00415 	stw	ra,16(sp)
  81126c:	dc400115 	stw	r17,4(sp)
  811270:	dc000015 	stw	r16,0(sp)
  811274:	2027883a 	mov	r19,r4
  811278:	2825883a 	mov	r18,r5
  81127c:	20000226 	beq	r4,zero,811288 <_fflush_r+0x2c>
  811280:	20800e17 	ldw	r2,56(r4)
  811284:	10005626 	beq	r2,zero,8113e0 <_fflush_r+0x184>
  811288:	9100030b 	ldhu	r4,12(r18)
  81128c:	20ffffcc 	andi	r3,r4,65535
  811290:	18e0001c 	xori	r3,r3,32768
  811294:	18e00004 	addi	r3,r3,-32768
  811298:	1880020c 	andi	r2,r3,8
  81129c:	1000261e 	bne	r2,zero,811338 <_fflush_r+0xdc>
  8112a0:	90c00117 	ldw	r3,4(r18)
  8112a4:	20820014 	ori	r2,r4,2048
  8112a8:	9080030d 	sth	r2,12(r18)
  8112ac:	1009883a 	mov	r4,r2
  8112b0:	00c0400e 	bge	zero,r3,8113b4 <_fflush_r+0x158>
  8112b4:	92000a17 	ldw	r8,40(r18)
  8112b8:	40004026 	beq	r8,zero,8113bc <_fflush_r+0x160>
  8112bc:	2084000c 	andi	r2,r4,4096
  8112c0:	10005326 	beq	r2,zero,811410 <_fflush_r+0x1b4>
  8112c4:	94001417 	ldw	r16,80(r18)
  8112c8:	9080030b 	ldhu	r2,12(r18)
  8112cc:	1080010c 	andi	r2,r2,4
  8112d0:	1000481e 	bne	r2,zero,8113f4 <_fflush_r+0x198>
  8112d4:	91400717 	ldw	r5,28(r18)
  8112d8:	9809883a 	mov	r4,r19
  8112dc:	800d883a 	mov	r6,r16
  8112e0:	000f883a 	mov	r7,zero
  8112e4:	403ee83a 	callr	r8
  8112e8:	8080261e 	bne	r16,r2,811384 <_fflush_r+0x128>
  8112ec:	9080030b 	ldhu	r2,12(r18)
  8112f0:	91000417 	ldw	r4,16(r18)
  8112f4:	90000115 	stw	zero,4(r18)
  8112f8:	10bdffcc 	andi	r2,r2,63487
  8112fc:	10ffffcc 	andi	r3,r2,65535
  811300:	18c4000c 	andi	r3,r3,4096
  811304:	9080030d 	sth	r2,12(r18)
  811308:	91000015 	stw	r4,0(r18)
  81130c:	18002b26 	beq	r3,zero,8113bc <_fflush_r+0x160>
  811310:	0007883a 	mov	r3,zero
  811314:	1805883a 	mov	r2,r3
  811318:	94001415 	stw	r16,80(r18)
  81131c:	dfc00417 	ldw	ra,16(sp)
  811320:	dcc00317 	ldw	r19,12(sp)
  811324:	dc800217 	ldw	r18,8(sp)
  811328:	dc400117 	ldw	r17,4(sp)
  81132c:	dc000017 	ldw	r16,0(sp)
  811330:	dec00504 	addi	sp,sp,20
  811334:	f800283a 	ret
  811338:	94400417 	ldw	r17,16(r18)
  81133c:	88001f26 	beq	r17,zero,8113bc <_fflush_r+0x160>
  811340:	90800017 	ldw	r2,0(r18)
  811344:	18c000cc 	andi	r3,r3,3
  811348:	94400015 	stw	r17,0(r18)
  81134c:	1461c83a 	sub	r16,r2,r17
  811350:	18002526 	beq	r3,zero,8113e8 <_fflush_r+0x18c>
  811354:	0005883a 	mov	r2,zero
  811358:	90800215 	stw	r2,8(r18)
  81135c:	0400170e 	bge	zero,r16,8113bc <_fflush_r+0x160>
  811360:	90c00917 	ldw	r3,36(r18)
  811364:	91400717 	ldw	r5,28(r18)
  811368:	880d883a 	mov	r6,r17
  81136c:	800f883a 	mov	r7,r16
  811370:	9809883a 	mov	r4,r19
  811374:	183ee83a 	callr	r3
  811378:	88a3883a 	add	r17,r17,r2
  81137c:	80a1c83a 	sub	r16,r16,r2
  811380:	00bff616 	blt	zero,r2,81135c <_fflush_r+0x100>
  811384:	9080030b 	ldhu	r2,12(r18)
  811388:	00ffffc4 	movi	r3,-1
  81138c:	10801014 	ori	r2,r2,64
  811390:	9080030d 	sth	r2,12(r18)
  811394:	1805883a 	mov	r2,r3
  811398:	dfc00417 	ldw	ra,16(sp)
  81139c:	dcc00317 	ldw	r19,12(sp)
  8113a0:	dc800217 	ldw	r18,8(sp)
  8113a4:	dc400117 	ldw	r17,4(sp)
  8113a8:	dc000017 	ldw	r16,0(sp)
  8113ac:	dec00504 	addi	sp,sp,20
  8113b0:	f800283a 	ret
  8113b4:	90800f17 	ldw	r2,60(r18)
  8113b8:	00bfbe16 	blt	zero,r2,8112b4 <_fflush_r+0x58>
  8113bc:	0007883a 	mov	r3,zero
  8113c0:	1805883a 	mov	r2,r3
  8113c4:	dfc00417 	ldw	ra,16(sp)
  8113c8:	dcc00317 	ldw	r19,12(sp)
  8113cc:	dc800217 	ldw	r18,8(sp)
  8113d0:	dc400117 	ldw	r17,4(sp)
  8113d4:	dc000017 	ldw	r16,0(sp)
  8113d8:	dec00504 	addi	sp,sp,20
  8113dc:	f800283a 	ret
  8113e0:	08114f40 	call	8114f4 <__sinit>
  8113e4:	003fa806 	br	811288 <_fflush_r+0x2c>
  8113e8:	90800517 	ldw	r2,20(r18)
  8113ec:	90800215 	stw	r2,8(r18)
  8113f0:	003fda06 	br	81135c <_fflush_r+0x100>
  8113f4:	90800117 	ldw	r2,4(r18)
  8113f8:	90c00c17 	ldw	r3,48(r18)
  8113fc:	80a1c83a 	sub	r16,r16,r2
  811400:	183fb426 	beq	r3,zero,8112d4 <_fflush_r+0x78>
  811404:	90800f17 	ldw	r2,60(r18)
  811408:	80a1c83a 	sub	r16,r16,r2
  81140c:	003fb106 	br	8112d4 <_fflush_r+0x78>
  811410:	91400717 	ldw	r5,28(r18)
  811414:	9809883a 	mov	r4,r19
  811418:	000d883a 	mov	r6,zero
  81141c:	01c00044 	movi	r7,1
  811420:	403ee83a 	callr	r8
  811424:	1021883a 	mov	r16,r2
  811428:	00bfffc4 	movi	r2,-1
  81142c:	80800226 	beq	r16,r2,811438 <_fflush_r+0x1dc>
  811430:	92000a17 	ldw	r8,40(r18)
  811434:	003fa406 	br	8112c8 <_fflush_r+0x6c>
  811438:	98c00017 	ldw	r3,0(r19)
  81143c:	00800744 	movi	r2,29
  811440:	18bfde26 	beq	r3,r2,8113bc <_fflush_r+0x160>
  811444:	9080030b 	ldhu	r2,12(r18)
  811448:	8007883a 	mov	r3,r16
  81144c:	10801014 	ori	r2,r2,64
  811450:	9080030d 	sth	r2,12(r18)
  811454:	003fcf06 	br	811394 <_fflush_r+0x138>

00811458 <fflush>:
  811458:	01402074 	movhi	r5,129
  81145c:	29449704 	addi	r5,r5,4700
  811460:	2007883a 	mov	r3,r4
  811464:	20000526 	beq	r4,zero,81147c <fflush+0x24>
  811468:	008020b4 	movhi	r2,130
  81146c:	108a6b04 	addi	r2,r2,10668
  811470:	11000017 	ldw	r4,0(r2)
  811474:	180b883a 	mov	r5,r3
  811478:	081125c1 	jmpi	81125c <_fflush_r>
  81147c:	008020b4 	movhi	r2,130
  811480:	108a6c04 	addi	r2,r2,10672
  811484:	11000017 	ldw	r4,0(r2)
  811488:	08120281 	jmpi	812028 <_fwalk_reent>

0081148c <std>:
  81148c:	00802074 	movhi	r2,129
  811490:	108da704 	addi	r2,r2,13980
  811494:	20800b15 	stw	r2,44(r4)
  811498:	00802074 	movhi	r2,129
  81149c:	108de204 	addi	r2,r2,14216
  8114a0:	20800815 	stw	r2,32(r4)
  8114a4:	00c02074 	movhi	r3,129
  8114a8:	18cdc304 	addi	r3,r3,14092
  8114ac:	00802074 	movhi	r2,129
  8114b0:	108da904 	addi	r2,r2,13988
  8114b4:	2140030d 	sth	r5,12(r4)
  8114b8:	2180038d 	sth	r6,14(r4)
  8114bc:	20c00915 	stw	r3,36(r4)
  8114c0:	20800a15 	stw	r2,40(r4)
  8114c4:	20000015 	stw	zero,0(r4)
  8114c8:	20000115 	stw	zero,4(r4)
  8114cc:	20000215 	stw	zero,8(r4)
  8114d0:	20000415 	stw	zero,16(r4)
  8114d4:	20000515 	stw	zero,20(r4)
  8114d8:	20000615 	stw	zero,24(r4)
  8114dc:	21000715 	stw	r4,28(r4)
  8114e0:	f800283a 	ret

008114e4 <__sfp_lock_acquire>:
  8114e4:	f800283a 	ret

008114e8 <__sfp_lock_release>:
  8114e8:	f800283a 	ret

008114ec <__sinit_lock_acquire>:
  8114ec:	f800283a 	ret

008114f0 <__sinit_lock_release>:
  8114f0:	f800283a 	ret

008114f4 <__sinit>:
  8114f4:	20800e17 	ldw	r2,56(r4)
  8114f8:	defffd04 	addi	sp,sp,-12
  8114fc:	dc400115 	stw	r17,4(sp)
  811500:	dc000015 	stw	r16,0(sp)
  811504:	dfc00215 	stw	ra,8(sp)
  811508:	04400044 	movi	r17,1
  81150c:	01400104 	movi	r5,4
  811510:	000d883a 	mov	r6,zero
  811514:	2021883a 	mov	r16,r4
  811518:	2200bb04 	addi	r8,r4,748
  81151c:	200f883a 	mov	r7,r4
  811520:	10000526 	beq	r2,zero,811538 <__sinit+0x44>
  811524:	dfc00217 	ldw	ra,8(sp)
  811528:	dc400117 	ldw	r17,4(sp)
  81152c:	dc000017 	ldw	r16,0(sp)
  811530:	dec00304 	addi	sp,sp,12
  811534:	f800283a 	ret
  811538:	21000117 	ldw	r4,4(r4)
  81153c:	00802074 	movhi	r2,129
  811540:	10857604 	addi	r2,r2,5592
  811544:	00c000c4 	movi	r3,3
  811548:	80800f15 	stw	r2,60(r16)
  81154c:	80c0b915 	stw	r3,740(r16)
  811550:	8200ba15 	stw	r8,744(r16)
  811554:	84400e15 	stw	r17,56(r16)
  811558:	8000b815 	stw	zero,736(r16)
  81155c:	081148c0 	call	81148c <std>
  811560:	81000217 	ldw	r4,8(r16)
  811564:	880d883a 	mov	r6,r17
  811568:	800f883a 	mov	r7,r16
  81156c:	01400284 	movi	r5,10
  811570:	081148c0 	call	81148c <std>
  811574:	81000317 	ldw	r4,12(r16)
  811578:	800f883a 	mov	r7,r16
  81157c:	01400484 	movi	r5,18
  811580:	01800084 	movi	r6,2
  811584:	dfc00217 	ldw	ra,8(sp)
  811588:	dc400117 	ldw	r17,4(sp)
  81158c:	dc000017 	ldw	r16,0(sp)
  811590:	dec00304 	addi	sp,sp,12
  811594:	081148c1 	jmpi	81148c <std>

00811598 <__fp_lock>:
  811598:	0005883a 	mov	r2,zero
  81159c:	f800283a 	ret

008115a0 <__fp_unlock>:
  8115a0:	0005883a 	mov	r2,zero
  8115a4:	f800283a 	ret

008115a8 <__fp_unlock_all>:
  8115a8:	008020b4 	movhi	r2,130
  8115ac:	108a6b04 	addi	r2,r2,10668
  8115b0:	11000017 	ldw	r4,0(r2)
  8115b4:	01402074 	movhi	r5,129
  8115b8:	29456804 	addi	r5,r5,5536
  8115bc:	08120f01 	jmpi	8120f0 <_fwalk>

008115c0 <__fp_lock_all>:
  8115c0:	008020b4 	movhi	r2,130
  8115c4:	108a6b04 	addi	r2,r2,10668
  8115c8:	11000017 	ldw	r4,0(r2)
  8115cc:	01402074 	movhi	r5,129
  8115d0:	29456604 	addi	r5,r5,5528
  8115d4:	08120f01 	jmpi	8120f0 <_fwalk>

008115d8 <_cleanup_r>:
  8115d8:	01402074 	movhi	r5,129
  8115dc:	294edd04 	addi	r5,r5,15220
  8115e0:	08120f01 	jmpi	8120f0 <_fwalk>

008115e4 <_cleanup>:
  8115e4:	008020b4 	movhi	r2,130
  8115e8:	108a6c04 	addi	r2,r2,10672
  8115ec:	11000017 	ldw	r4,0(r2)
  8115f0:	08115d81 	jmpi	8115d8 <_cleanup_r>

008115f4 <__sfmoreglue>:
  8115f4:	defffc04 	addi	sp,sp,-16
  8115f8:	dc400115 	stw	r17,4(sp)
  8115fc:	2c401724 	muli	r17,r5,92
  811600:	dc800215 	stw	r18,8(sp)
  811604:	2825883a 	mov	r18,r5
  811608:	89400304 	addi	r5,r17,12
  81160c:	dc000015 	stw	r16,0(sp)
  811610:	dfc00315 	stw	ra,12(sp)
  811614:	080bb800 	call	80bb80 <_malloc_r>
  811618:	0021883a 	mov	r16,zero
  81161c:	880d883a 	mov	r6,r17
  811620:	000b883a 	mov	r5,zero
  811624:	10000626 	beq	r2,zero,811640 <__sfmoreglue+0x4c>
  811628:	11000304 	addi	r4,r2,12
  81162c:	14800115 	stw	r18,4(r2)
  811630:	10000015 	stw	zero,0(r2)
  811634:	11000215 	stw	r4,8(r2)
  811638:	1021883a 	mov	r16,r2
  81163c:	080c3600 	call	80c360 <memset>
  811640:	8005883a 	mov	r2,r16
  811644:	dfc00317 	ldw	ra,12(sp)
  811648:	dc800217 	ldw	r18,8(sp)
  81164c:	dc400117 	ldw	r17,4(sp)
  811650:	dc000017 	ldw	r16,0(sp)
  811654:	dec00404 	addi	sp,sp,16
  811658:	f800283a 	ret

0081165c <__sfp>:
  81165c:	defffd04 	addi	sp,sp,-12
  811660:	008020b4 	movhi	r2,130
  811664:	108a6c04 	addi	r2,r2,10672
  811668:	dc000015 	stw	r16,0(sp)
  81166c:	14000017 	ldw	r16,0(r2)
  811670:	dc400115 	stw	r17,4(sp)
  811674:	dfc00215 	stw	ra,8(sp)
  811678:	80800e17 	ldw	r2,56(r16)
  81167c:	2023883a 	mov	r17,r4
  811680:	10002626 	beq	r2,zero,81171c <__sfp+0xc0>
  811684:	8400b804 	addi	r16,r16,736
  811688:	80800117 	ldw	r2,4(r16)
  81168c:	81000217 	ldw	r4,8(r16)
  811690:	10ffffc4 	addi	r3,r2,-1
  811694:	18000916 	blt	r3,zero,8116bc <__sfp+0x60>
  811698:	2080030f 	ldh	r2,12(r4)
  81169c:	10000b26 	beq	r2,zero,8116cc <__sfp+0x70>
  8116a0:	017fffc4 	movi	r5,-1
  8116a4:	00000206 	br	8116b0 <__sfp+0x54>
  8116a8:	2080030f 	ldh	r2,12(r4)
  8116ac:	10000726 	beq	r2,zero,8116cc <__sfp+0x70>
  8116b0:	18ffffc4 	addi	r3,r3,-1
  8116b4:	21001704 	addi	r4,r4,92
  8116b8:	197ffb1e 	bne	r3,r5,8116a8 <__sfp+0x4c>
  8116bc:	80800017 	ldw	r2,0(r16)
  8116c0:	10001926 	beq	r2,zero,811728 <__sfp+0xcc>
  8116c4:	1021883a 	mov	r16,r2
  8116c8:	003fef06 	br	811688 <__sfp+0x2c>
  8116cc:	00bfffc4 	movi	r2,-1
  8116d0:	00c00044 	movi	r3,1
  8116d4:	2080038d 	sth	r2,14(r4)
  8116d8:	20c0030d 	sth	r3,12(r4)
  8116dc:	20000015 	stw	zero,0(r4)
  8116e0:	20000215 	stw	zero,8(r4)
  8116e4:	20000115 	stw	zero,4(r4)
  8116e8:	20000415 	stw	zero,16(r4)
  8116ec:	20000515 	stw	zero,20(r4)
  8116f0:	20000615 	stw	zero,24(r4)
  8116f4:	20000c15 	stw	zero,48(r4)
  8116f8:	20000d15 	stw	zero,52(r4)
  8116fc:	20001115 	stw	zero,68(r4)
  811700:	20001215 	stw	zero,72(r4)
  811704:	2005883a 	mov	r2,r4
  811708:	dfc00217 	ldw	ra,8(sp)
  81170c:	dc400117 	ldw	r17,4(sp)
  811710:	dc000017 	ldw	r16,0(sp)
  811714:	dec00304 	addi	sp,sp,12
  811718:	f800283a 	ret
  81171c:	8009883a 	mov	r4,r16
  811720:	08114f40 	call	8114f4 <__sinit>
  811724:	003fd706 	br	811684 <__sfp+0x28>
  811728:	8809883a 	mov	r4,r17
  81172c:	01400104 	movi	r5,4
  811730:	08115f40 	call	8115f4 <__sfmoreglue>
  811734:	80800015 	stw	r2,0(r16)
  811738:	103fe21e 	bne	r2,zero,8116c4 <__sfp+0x68>
  81173c:	00800304 	movi	r2,12
  811740:	0009883a 	mov	r4,zero
  811744:	88800015 	stw	r2,0(r17)
  811748:	003fee06 	br	811704 <__sfp+0xa8>

0081174c <_malloc_trim_r>:
  81174c:	defffb04 	addi	sp,sp,-20
  811750:	dcc00315 	stw	r19,12(sp)
  811754:	04c020b4 	movhi	r19,130
  811758:	9cc37304 	addi	r19,r19,3532
  81175c:	dc800215 	stw	r18,8(sp)
  811760:	dc400115 	stw	r17,4(sp)
  811764:	dc000015 	stw	r16,0(sp)
  811768:	2823883a 	mov	r17,r5
  81176c:	2025883a 	mov	r18,r4
  811770:	dfc00415 	stw	ra,16(sp)
  811774:	08159dc0 	call	8159dc <__malloc_lock>
  811778:	98800217 	ldw	r2,8(r19)
  81177c:	9009883a 	mov	r4,r18
  811780:	000b883a 	mov	r5,zero
  811784:	10c00117 	ldw	r3,4(r2)
  811788:	00bfff04 	movi	r2,-4
  81178c:	18a0703a 	and	r16,r3,r2
  811790:	8463c83a 	sub	r17,r16,r17
  811794:	8c43fbc4 	addi	r17,r17,4079
  811798:	8822d33a 	srli	r17,r17,12
  81179c:	0083ffc4 	movi	r2,4095
  8117a0:	8c7fffc4 	addi	r17,r17,-1
  8117a4:	8822933a 	slli	r17,r17,12
  8117a8:	1440060e 	bge	r2,r17,8117c4 <_malloc_trim_r+0x78>
  8117ac:	080cb340 	call	80cb34 <_sbrk_r>
  8117b0:	98c00217 	ldw	r3,8(r19)
  8117b4:	9009883a 	mov	r4,r18
  8117b8:	044bc83a 	sub	r5,zero,r17
  8117bc:	80c7883a 	add	r3,r16,r3
  8117c0:	10c00926 	beq	r2,r3,8117e8 <_malloc_trim_r+0x9c>
  8117c4:	08159fc0 	call	8159fc <__malloc_unlock>
  8117c8:	0005883a 	mov	r2,zero
  8117cc:	dfc00417 	ldw	ra,16(sp)
  8117d0:	dcc00317 	ldw	r19,12(sp)
  8117d4:	dc800217 	ldw	r18,8(sp)
  8117d8:	dc400117 	ldw	r17,4(sp)
  8117dc:	dc000017 	ldw	r16,0(sp)
  8117e0:	dec00504 	addi	sp,sp,20
  8117e4:	f800283a 	ret
  8117e8:	9009883a 	mov	r4,r18
  8117ec:	080cb340 	call	80cb34 <_sbrk_r>
  8117f0:	844dc83a 	sub	r6,r16,r17
  8117f4:	00ffffc4 	movi	r3,-1
  8117f8:	9009883a 	mov	r4,r18
  8117fc:	000b883a 	mov	r5,zero
  811800:	01c020b4 	movhi	r7,130
  811804:	39d1df04 	addi	r7,r7,18300
  811808:	31800054 	ori	r6,r6,1
  81180c:	10c00926 	beq	r2,r3,811834 <_malloc_trim_r+0xe8>
  811810:	38800017 	ldw	r2,0(r7)
  811814:	98c00217 	ldw	r3,8(r19)
  811818:	9009883a 	mov	r4,r18
  81181c:	1445c83a 	sub	r2,r2,r17
  811820:	38800015 	stw	r2,0(r7)
  811824:	19800115 	stw	r6,4(r3)
  811828:	08159fc0 	call	8159fc <__malloc_unlock>
  81182c:	00800044 	movi	r2,1
  811830:	003fe606 	br	8117cc <_malloc_trim_r+0x80>
  811834:	080cb340 	call	80cb34 <_sbrk_r>
  811838:	99800217 	ldw	r6,8(r19)
  81183c:	100f883a 	mov	r7,r2
  811840:	9009883a 	mov	r4,r18
  811844:	1187c83a 	sub	r3,r2,r6
  811848:	008003c4 	movi	r2,15
  81184c:	19400054 	ori	r5,r3,1
  811850:	10ffdc0e 	bge	r2,r3,8117c4 <_malloc_trim_r+0x78>
  811854:	008020b4 	movhi	r2,130
  811858:	108a6904 	addi	r2,r2,10660
  81185c:	10c00017 	ldw	r3,0(r2)
  811860:	008020b4 	movhi	r2,130
  811864:	1091df04 	addi	r2,r2,18300
  811868:	31400115 	stw	r5,4(r6)
  81186c:	38c7c83a 	sub	r3,r7,r3
  811870:	10c00015 	stw	r3,0(r2)
  811874:	003fd306 	br	8117c4 <_malloc_trim_r+0x78>

00811878 <_free_r>:
  811878:	defffd04 	addi	sp,sp,-12
  81187c:	dc400115 	stw	r17,4(sp)
  811880:	dc000015 	stw	r16,0(sp)
  811884:	dfc00215 	stw	ra,8(sp)
  811888:	2821883a 	mov	r16,r5
  81188c:	2023883a 	mov	r17,r4
  811890:	28005a26 	beq	r5,zero,8119fc <_free_r+0x184>
  811894:	08159dc0 	call	8159dc <__malloc_lock>
  811898:	823ffe04 	addi	r8,r16,-8
  81189c:	41400117 	ldw	r5,4(r8)
  8118a0:	00bfff84 	movi	r2,-2
  8118a4:	028020b4 	movhi	r10,130
  8118a8:	52837304 	addi	r10,r10,3532
  8118ac:	288e703a 	and	r7,r5,r2
  8118b0:	41cd883a 	add	r6,r8,r7
  8118b4:	30c00117 	ldw	r3,4(r6)
  8118b8:	51000217 	ldw	r4,8(r10)
  8118bc:	00bfff04 	movi	r2,-4
  8118c0:	1892703a 	and	r9,r3,r2
  8118c4:	5017883a 	mov	r11,r10
  8118c8:	31006726 	beq	r6,r4,811a68 <_free_r+0x1f0>
  8118cc:	2880004c 	andi	r2,r5,1
  8118d0:	1005003a 	cmpeq	r2,r2,zero
  8118d4:	32400115 	stw	r9,4(r6)
  8118d8:	10001a1e 	bne	r2,zero,811944 <_free_r+0xcc>
  8118dc:	000b883a 	mov	r5,zero
  8118e0:	3247883a 	add	r3,r6,r9
  8118e4:	18800117 	ldw	r2,4(r3)
  8118e8:	1080004c 	andi	r2,r2,1
  8118ec:	1000231e 	bne	r2,zero,81197c <_free_r+0x104>
  8118f0:	280ac03a 	cmpne	r5,r5,zero
  8118f4:	3a4f883a 	add	r7,r7,r9
  8118f8:	2800451e 	bne	r5,zero,811a10 <_free_r+0x198>
  8118fc:	31000217 	ldw	r4,8(r6)
  811900:	008020b4 	movhi	r2,130
  811904:	10837504 	addi	r2,r2,3540
  811908:	20807b26 	beq	r4,r2,811af8 <_free_r+0x280>
  81190c:	30800317 	ldw	r2,12(r6)
  811910:	3a07883a 	add	r3,r7,r8
  811914:	19c00015 	stw	r7,0(r3)
  811918:	11000215 	stw	r4,8(r2)
  81191c:	20800315 	stw	r2,12(r4)
  811920:	38800054 	ori	r2,r7,1
  811924:	40800115 	stw	r2,4(r8)
  811928:	28001a26 	beq	r5,zero,811994 <_free_r+0x11c>
  81192c:	8809883a 	mov	r4,r17
  811930:	dfc00217 	ldw	ra,8(sp)
  811934:	dc400117 	ldw	r17,4(sp)
  811938:	dc000017 	ldw	r16,0(sp)
  81193c:	dec00304 	addi	sp,sp,12
  811940:	08159fc1 	jmpi	8159fc <__malloc_unlock>
  811944:	80bffe17 	ldw	r2,-8(r16)
  811948:	50c00204 	addi	r3,r10,8
  81194c:	4091c83a 	sub	r8,r8,r2
  811950:	41000217 	ldw	r4,8(r8)
  811954:	388f883a 	add	r7,r7,r2
  811958:	20c06126 	beq	r4,r3,811ae0 <_free_r+0x268>
  81195c:	40800317 	ldw	r2,12(r8)
  811960:	3247883a 	add	r3,r6,r9
  811964:	000b883a 	mov	r5,zero
  811968:	11000215 	stw	r4,8(r2)
  81196c:	20800315 	stw	r2,12(r4)
  811970:	18800117 	ldw	r2,4(r3)
  811974:	1080004c 	andi	r2,r2,1
  811978:	103fdd26 	beq	r2,zero,8118f0 <_free_r+0x78>
  81197c:	38800054 	ori	r2,r7,1
  811980:	3a07883a 	add	r3,r7,r8
  811984:	280ac03a 	cmpne	r5,r5,zero
  811988:	40800115 	stw	r2,4(r8)
  81198c:	19c00015 	stw	r7,0(r3)
  811990:	283fe61e 	bne	r5,zero,81192c <_free_r+0xb4>
  811994:	00807fc4 	movi	r2,511
  811998:	11c01f2e 	bgeu	r2,r7,811a18 <_free_r+0x1a0>
  81199c:	3806d27a 	srli	r3,r7,9
  8119a0:	1800481e 	bne	r3,zero,811ac4 <_free_r+0x24c>
  8119a4:	3804d0fa 	srli	r2,r7,3
  8119a8:	100690fa 	slli	r3,r2,3
  8119ac:	1acd883a 	add	r6,r3,r11
  8119b0:	31400217 	ldw	r5,8(r6)
  8119b4:	31405926 	beq	r6,r5,811b1c <_free_r+0x2a4>
  8119b8:	28800117 	ldw	r2,4(r5)
  8119bc:	00ffff04 	movi	r3,-4
  8119c0:	10c4703a 	and	r2,r2,r3
  8119c4:	3880022e 	bgeu	r7,r2,8119d0 <_free_r+0x158>
  8119c8:	29400217 	ldw	r5,8(r5)
  8119cc:	317ffa1e 	bne	r6,r5,8119b8 <_free_r+0x140>
  8119d0:	29800317 	ldw	r6,12(r5)
  8119d4:	41800315 	stw	r6,12(r8)
  8119d8:	41400215 	stw	r5,8(r8)
  8119dc:	8809883a 	mov	r4,r17
  8119e0:	2a000315 	stw	r8,12(r5)
  8119e4:	32000215 	stw	r8,8(r6)
  8119e8:	dfc00217 	ldw	ra,8(sp)
  8119ec:	dc400117 	ldw	r17,4(sp)
  8119f0:	dc000017 	ldw	r16,0(sp)
  8119f4:	dec00304 	addi	sp,sp,12
  8119f8:	08159fc1 	jmpi	8159fc <__malloc_unlock>
  8119fc:	dfc00217 	ldw	ra,8(sp)
  811a00:	dc400117 	ldw	r17,4(sp)
  811a04:	dc000017 	ldw	r16,0(sp)
  811a08:	dec00304 	addi	sp,sp,12
  811a0c:	f800283a 	ret
  811a10:	31000217 	ldw	r4,8(r6)
  811a14:	003fbd06 	br	81190c <_free_r+0x94>
  811a18:	3806d0fa 	srli	r3,r7,3
  811a1c:	00800044 	movi	r2,1
  811a20:	51400117 	ldw	r5,4(r10)
  811a24:	180890fa 	slli	r4,r3,3
  811a28:	1807d0ba 	srai	r3,r3,2
  811a2c:	22c9883a 	add	r4,r4,r11
  811a30:	21800217 	ldw	r6,8(r4)
  811a34:	10c4983a 	sll	r2,r2,r3
  811a38:	41000315 	stw	r4,12(r8)
  811a3c:	41800215 	stw	r6,8(r8)
  811a40:	288ab03a 	or	r5,r5,r2
  811a44:	22000215 	stw	r8,8(r4)
  811a48:	8809883a 	mov	r4,r17
  811a4c:	51400115 	stw	r5,4(r10)
  811a50:	32000315 	stw	r8,12(r6)
  811a54:	dfc00217 	ldw	ra,8(sp)
  811a58:	dc400117 	ldw	r17,4(sp)
  811a5c:	dc000017 	ldw	r16,0(sp)
  811a60:	dec00304 	addi	sp,sp,12
  811a64:	08159fc1 	jmpi	8159fc <__malloc_unlock>
  811a68:	2880004c 	andi	r2,r5,1
  811a6c:	3a4d883a 	add	r6,r7,r9
  811a70:	1000071e 	bne	r2,zero,811a90 <_free_r+0x218>
  811a74:	80bffe17 	ldw	r2,-8(r16)
  811a78:	4091c83a 	sub	r8,r8,r2
  811a7c:	41000317 	ldw	r4,12(r8)
  811a80:	40c00217 	ldw	r3,8(r8)
  811a84:	308d883a 	add	r6,r6,r2
  811a88:	20c00215 	stw	r3,8(r4)
  811a8c:	19000315 	stw	r4,12(r3)
  811a90:	008020b4 	movhi	r2,130
  811a94:	108a6804 	addi	r2,r2,10656
  811a98:	11000017 	ldw	r4,0(r2)
  811a9c:	30c00054 	ori	r3,r6,1
  811aa0:	52000215 	stw	r8,8(r10)
  811aa4:	40c00115 	stw	r3,4(r8)
  811aa8:	313fa036 	bltu	r6,r4,81192c <_free_r+0xb4>
  811aac:	008020b4 	movhi	r2,130
  811ab0:	1091c504 	addi	r2,r2,18196
  811ab4:	11400017 	ldw	r5,0(r2)
  811ab8:	8809883a 	mov	r4,r17
  811abc:	081174c0 	call	81174c <_malloc_trim_r>
  811ac0:	003f9a06 	br	81192c <_free_r+0xb4>
  811ac4:	00800104 	movi	r2,4
  811ac8:	10c0072e 	bgeu	r2,r3,811ae8 <_free_r+0x270>
  811acc:	00800504 	movi	r2,20
  811ad0:	10c01936 	bltu	r2,r3,811b38 <_free_r+0x2c0>
  811ad4:	188016c4 	addi	r2,r3,91
  811ad8:	100690fa 	slli	r3,r2,3
  811adc:	003fb306 	br	8119ac <_free_r+0x134>
  811ae0:	01400044 	movi	r5,1
  811ae4:	003f7e06 	br	8118e0 <_free_r+0x68>
  811ae8:	3804d1ba 	srli	r2,r7,6
  811aec:	10800e04 	addi	r2,r2,56
  811af0:	100690fa 	slli	r3,r2,3
  811af4:	003fad06 	br	8119ac <_free_r+0x134>
  811af8:	22000315 	stw	r8,12(r4)
  811afc:	22000215 	stw	r8,8(r4)
  811b00:	3a05883a 	add	r2,r7,r8
  811b04:	38c00054 	ori	r3,r7,1
  811b08:	11c00015 	stw	r7,0(r2)
  811b0c:	41000215 	stw	r4,8(r8)
  811b10:	40c00115 	stw	r3,4(r8)
  811b14:	41000315 	stw	r4,12(r8)
  811b18:	003f8406 	br	81192c <_free_r+0xb4>
  811b1c:	1005d0ba 	srai	r2,r2,2
  811b20:	00c00044 	movi	r3,1
  811b24:	51000117 	ldw	r4,4(r10)
  811b28:	1886983a 	sll	r3,r3,r2
  811b2c:	20c8b03a 	or	r4,r4,r3
  811b30:	51000115 	stw	r4,4(r10)
  811b34:	003fa706 	br	8119d4 <_free_r+0x15c>
  811b38:	00801504 	movi	r2,84
  811b3c:	10c00436 	bltu	r2,r3,811b50 <_free_r+0x2d8>
  811b40:	3804d33a 	srli	r2,r7,12
  811b44:	10801b84 	addi	r2,r2,110
  811b48:	100690fa 	slli	r3,r2,3
  811b4c:	003f9706 	br	8119ac <_free_r+0x134>
  811b50:	00805504 	movi	r2,340
  811b54:	10c00436 	bltu	r2,r3,811b68 <_free_r+0x2f0>
  811b58:	3804d3fa 	srli	r2,r7,15
  811b5c:	10801dc4 	addi	r2,r2,119
  811b60:	100690fa 	slli	r3,r2,3
  811b64:	003f9106 	br	8119ac <_free_r+0x134>
  811b68:	00815504 	movi	r2,1364
  811b6c:	10c0032e 	bgeu	r2,r3,811b7c <_free_r+0x304>
  811b70:	00801f84 	movi	r2,126
  811b74:	00c0fc04 	movi	r3,1008
  811b78:	003f8c06 	br	8119ac <_free_r+0x134>
  811b7c:	3804d4ba 	srli	r2,r7,18
  811b80:	10801f04 	addi	r2,r2,124
  811b84:	100690fa 	slli	r3,r2,3
  811b88:	003f8806 	br	8119ac <_free_r+0x134>

00811b8c <__sfvwrite_r>:
  811b8c:	30800217 	ldw	r2,8(r6)
  811b90:	defff504 	addi	sp,sp,-44
  811b94:	df000915 	stw	fp,36(sp)
  811b98:	dd800715 	stw	r22,28(sp)
  811b9c:	dc800315 	stw	r18,12(sp)
  811ba0:	dfc00a15 	stw	ra,40(sp)
  811ba4:	ddc00815 	stw	r23,32(sp)
  811ba8:	dd400615 	stw	r21,24(sp)
  811bac:	dd000515 	stw	r20,20(sp)
  811bb0:	dcc00415 	stw	r19,16(sp)
  811bb4:	dc400215 	stw	r17,8(sp)
  811bb8:	dc000115 	stw	r16,4(sp)
  811bbc:	302d883a 	mov	r22,r6
  811bc0:	2039883a 	mov	fp,r4
  811bc4:	2825883a 	mov	r18,r5
  811bc8:	10001c26 	beq	r2,zero,811c3c <__sfvwrite_r+0xb0>
  811bcc:	29c0030b 	ldhu	r7,12(r5)
  811bd0:	3880020c 	andi	r2,r7,8
  811bd4:	10002726 	beq	r2,zero,811c74 <__sfvwrite_r+0xe8>
  811bd8:	28800417 	ldw	r2,16(r5)
  811bdc:	10002526 	beq	r2,zero,811c74 <__sfvwrite_r+0xe8>
  811be0:	3880008c 	andi	r2,r7,2
  811be4:	b5400017 	ldw	r21,0(r22)
  811be8:	10002826 	beq	r2,zero,811c8c <__sfvwrite_r+0x100>
  811bec:	0021883a 	mov	r16,zero
  811bf0:	0023883a 	mov	r17,zero
  811bf4:	880d883a 	mov	r6,r17
  811bf8:	e009883a 	mov	r4,fp
  811bfc:	00810004 	movi	r2,1024
  811c00:	80006e26 	beq	r16,zero,811dbc <__sfvwrite_r+0x230>
  811c04:	800f883a 	mov	r7,r16
  811c08:	91400717 	ldw	r5,28(r18)
  811c0c:	1400012e 	bgeu	r2,r16,811c14 <__sfvwrite_r+0x88>
  811c10:	100f883a 	mov	r7,r2
  811c14:	90c00917 	ldw	r3,36(r18)
  811c18:	183ee83a 	callr	r3
  811c1c:	1007883a 	mov	r3,r2
  811c20:	80a1c83a 	sub	r16,r16,r2
  811c24:	88a3883a 	add	r17,r17,r2
  811c28:	00806d0e 	bge	zero,r2,811de0 <__sfvwrite_r+0x254>
  811c2c:	b0800217 	ldw	r2,8(r22)
  811c30:	10c5c83a 	sub	r2,r2,r3
  811c34:	b0800215 	stw	r2,8(r22)
  811c38:	103fee1e 	bne	r2,zero,811bf4 <__sfvwrite_r+0x68>
  811c3c:	0009883a 	mov	r4,zero
  811c40:	2005883a 	mov	r2,r4
  811c44:	dfc00a17 	ldw	ra,40(sp)
  811c48:	df000917 	ldw	fp,36(sp)
  811c4c:	ddc00817 	ldw	r23,32(sp)
  811c50:	dd800717 	ldw	r22,28(sp)
  811c54:	dd400617 	ldw	r21,24(sp)
  811c58:	dd000517 	ldw	r20,20(sp)
  811c5c:	dcc00417 	ldw	r19,16(sp)
  811c60:	dc800317 	ldw	r18,12(sp)
  811c64:	dc400217 	ldw	r17,8(sp)
  811c68:	dc000117 	ldw	r16,4(sp)
  811c6c:	dec00b04 	addi	sp,sp,44
  811c70:	f800283a 	ret
  811c74:	080f9540 	call	80f954 <__swsetup_r>
  811c78:	1000e41e 	bne	r2,zero,81200c <__sfvwrite_r+0x480>
  811c7c:	91c0030b 	ldhu	r7,12(r18)
  811c80:	b5400017 	ldw	r21,0(r22)
  811c84:	3880008c 	andi	r2,r7,2
  811c88:	103fd81e 	bne	r2,zero,811bec <__sfvwrite_r+0x60>
  811c8c:	3880004c 	andi	r2,r7,1
  811c90:	1005003a 	cmpeq	r2,r2,zero
  811c94:	10005726 	beq	r2,zero,811df4 <__sfvwrite_r+0x268>
  811c98:	0029883a 	mov	r20,zero
  811c9c:	002f883a 	mov	r23,zero
  811ca0:	a0004226 	beq	r20,zero,811dac <__sfvwrite_r+0x220>
  811ca4:	3880800c 	andi	r2,r7,512
  811ca8:	94000217 	ldw	r16,8(r18)
  811cac:	10008b26 	beq	r2,zero,811edc <__sfvwrite_r+0x350>
  811cb0:	800d883a 	mov	r6,r16
  811cb4:	a400a536 	bltu	r20,r16,811f4c <__sfvwrite_r+0x3c0>
  811cb8:	3881200c 	andi	r2,r7,1152
  811cbc:	10002726 	beq	r2,zero,811d5c <__sfvwrite_r+0x1d0>
  811cc0:	90800517 	ldw	r2,20(r18)
  811cc4:	92000417 	ldw	r8,16(r18)
  811cc8:	91400017 	ldw	r5,0(r18)
  811ccc:	1087883a 	add	r3,r2,r2
  811cd0:	1887883a 	add	r3,r3,r2
  811cd4:	1808d7fa 	srli	r4,r3,31
  811cd8:	2a21c83a 	sub	r16,r5,r8
  811cdc:	80800044 	addi	r2,r16,1
  811ce0:	20c9883a 	add	r4,r4,r3
  811ce4:	2027d07a 	srai	r19,r4,1
  811ce8:	a085883a 	add	r2,r20,r2
  811cec:	980d883a 	mov	r6,r19
  811cf0:	9880022e 	bgeu	r19,r2,811cfc <__sfvwrite_r+0x170>
  811cf4:	1027883a 	mov	r19,r2
  811cf8:	100d883a 	mov	r6,r2
  811cfc:	3881000c 	andi	r2,r7,1024
  811d00:	1000b826 	beq	r2,zero,811fe4 <__sfvwrite_r+0x458>
  811d04:	300b883a 	mov	r5,r6
  811d08:	e009883a 	mov	r4,fp
  811d0c:	080bb800 	call	80bb80 <_malloc_r>
  811d10:	10003126 	beq	r2,zero,811dd8 <__sfvwrite_r+0x24c>
  811d14:	91400417 	ldw	r5,16(r18)
  811d18:	1009883a 	mov	r4,r2
  811d1c:	800d883a 	mov	r6,r16
  811d20:	1023883a 	mov	r17,r2
  811d24:	080c2c00 	call	80c2c0 <memcpy>
  811d28:	90c0030b 	ldhu	r3,12(r18)
  811d2c:	00beffc4 	movi	r2,-1025
  811d30:	1886703a 	and	r3,r3,r2
  811d34:	18c02014 	ori	r3,r3,128
  811d38:	90c0030d 	sth	r3,12(r18)
  811d3c:	9c07c83a 	sub	r3,r19,r16
  811d40:	8c05883a 	add	r2,r17,r16
  811d44:	a00d883a 	mov	r6,r20
  811d48:	a021883a 	mov	r16,r20
  811d4c:	90800015 	stw	r2,0(r18)
  811d50:	90c00215 	stw	r3,8(r18)
  811d54:	94400415 	stw	r17,16(r18)
  811d58:	94c00515 	stw	r19,20(r18)
  811d5c:	91000017 	ldw	r4,0(r18)
  811d60:	b80b883a 	mov	r5,r23
  811d64:	a023883a 	mov	r17,r20
  811d68:	08125580 	call	812558 <memmove>
  811d6c:	90c00217 	ldw	r3,8(r18)
  811d70:	90800017 	ldw	r2,0(r18)
  811d74:	a027883a 	mov	r19,r20
  811d78:	1c07c83a 	sub	r3,r3,r16
  811d7c:	1405883a 	add	r2,r2,r16
  811d80:	90c00215 	stw	r3,8(r18)
  811d84:	a021883a 	mov	r16,r20
  811d88:	90800015 	stw	r2,0(r18)
  811d8c:	b0800217 	ldw	r2,8(r22)
  811d90:	1405c83a 	sub	r2,r2,r16
  811d94:	b0800215 	stw	r2,8(r22)
  811d98:	103fa826 	beq	r2,zero,811c3c <__sfvwrite_r+0xb0>
  811d9c:	a469c83a 	sub	r20,r20,r17
  811da0:	91c0030b 	ldhu	r7,12(r18)
  811da4:	bcef883a 	add	r23,r23,r19
  811da8:	a03fbe1e 	bne	r20,zero,811ca4 <__sfvwrite_r+0x118>
  811dac:	adc00017 	ldw	r23,0(r21)
  811db0:	ad000117 	ldw	r20,4(r21)
  811db4:	ad400204 	addi	r21,r21,8
  811db8:	003fb906 	br	811ca0 <__sfvwrite_r+0x114>
  811dbc:	ac400017 	ldw	r17,0(r21)
  811dc0:	ac000117 	ldw	r16,4(r21)
  811dc4:	ad400204 	addi	r21,r21,8
  811dc8:	003f8a06 	br	811bf4 <__sfvwrite_r+0x68>
  811dcc:	91400417 	ldw	r5,16(r18)
  811dd0:	e009883a 	mov	r4,fp
  811dd4:	08118780 	call	811878 <_free_r>
  811dd8:	00800304 	movi	r2,12
  811ddc:	e0800015 	stw	r2,0(fp)
  811de0:	9080030b 	ldhu	r2,12(r18)
  811de4:	013fffc4 	movi	r4,-1
  811de8:	10801014 	ori	r2,r2,64
  811dec:	9080030d 	sth	r2,12(r18)
  811df0:	003f9306 	br	811c40 <__sfvwrite_r+0xb4>
  811df4:	0027883a 	mov	r19,zero
  811df8:	002f883a 	mov	r23,zero
  811dfc:	d8000015 	stw	zero,0(sp)
  811e00:	0029883a 	mov	r20,zero
  811e04:	98001e26 	beq	r19,zero,811e80 <__sfvwrite_r+0x2f4>
  811e08:	d8c00017 	ldw	r3,0(sp)
  811e0c:	1804c03a 	cmpne	r2,r3,zero
  811e10:	10005e26 	beq	r2,zero,811f8c <__sfvwrite_r+0x400>
  811e14:	9821883a 	mov	r16,r19
  811e18:	a4c0012e 	bgeu	r20,r19,811e20 <__sfvwrite_r+0x294>
  811e1c:	a021883a 	mov	r16,r20
  811e20:	91000017 	ldw	r4,0(r18)
  811e24:	90800417 	ldw	r2,16(r18)
  811e28:	91800217 	ldw	r6,8(r18)
  811e2c:	91c00517 	ldw	r7,20(r18)
  811e30:	1100022e 	bgeu	r2,r4,811e3c <__sfvwrite_r+0x2b0>
  811e34:	31e3883a 	add	r17,r6,r7
  811e38:	8c001616 	blt	r17,r16,811e94 <__sfvwrite_r+0x308>
  811e3c:	81c03816 	blt	r16,r7,811f20 <__sfvwrite_r+0x394>
  811e40:	90c00917 	ldw	r3,36(r18)
  811e44:	91400717 	ldw	r5,28(r18)
  811e48:	e009883a 	mov	r4,fp
  811e4c:	b80d883a 	mov	r6,r23
  811e50:	183ee83a 	callr	r3
  811e54:	1023883a 	mov	r17,r2
  811e58:	00bfe10e 	bge	zero,r2,811de0 <__sfvwrite_r+0x254>
  811e5c:	a469c83a 	sub	r20,r20,r17
  811e60:	a0001826 	beq	r20,zero,811ec4 <__sfvwrite_r+0x338>
  811e64:	b0800217 	ldw	r2,8(r22)
  811e68:	1445c83a 	sub	r2,r2,r17
  811e6c:	b0800215 	stw	r2,8(r22)
  811e70:	103f7226 	beq	r2,zero,811c3c <__sfvwrite_r+0xb0>
  811e74:	9c67c83a 	sub	r19,r19,r17
  811e78:	bc6f883a 	add	r23,r23,r17
  811e7c:	983fe21e 	bne	r19,zero,811e08 <__sfvwrite_r+0x27c>
  811e80:	adc00017 	ldw	r23,0(r21)
  811e84:	acc00117 	ldw	r19,4(r21)
  811e88:	ad400204 	addi	r21,r21,8
  811e8c:	d8000015 	stw	zero,0(sp)
  811e90:	003fdc06 	br	811e04 <__sfvwrite_r+0x278>
  811e94:	b80b883a 	mov	r5,r23
  811e98:	880d883a 	mov	r6,r17
  811e9c:	08125580 	call	812558 <memmove>
  811ea0:	90c00017 	ldw	r3,0(r18)
  811ea4:	e009883a 	mov	r4,fp
  811ea8:	900b883a 	mov	r5,r18
  811eac:	1c47883a 	add	r3,r3,r17
  811eb0:	90c00015 	stw	r3,0(r18)
  811eb4:	081125c0 	call	81125c <_fflush_r>
  811eb8:	103fc91e 	bne	r2,zero,811de0 <__sfvwrite_r+0x254>
  811ebc:	a469c83a 	sub	r20,r20,r17
  811ec0:	a03fe81e 	bne	r20,zero,811e64 <__sfvwrite_r+0x2d8>
  811ec4:	e009883a 	mov	r4,fp
  811ec8:	900b883a 	mov	r5,r18
  811ecc:	081125c0 	call	81125c <_fflush_r>
  811ed0:	103fc31e 	bne	r2,zero,811de0 <__sfvwrite_r+0x254>
  811ed4:	d8000015 	stw	zero,0(sp)
  811ed8:	003fe206 	br	811e64 <__sfvwrite_r+0x2d8>
  811edc:	91000017 	ldw	r4,0(r18)
  811ee0:	90800417 	ldw	r2,16(r18)
  811ee4:	1100022e 	bgeu	r2,r4,811ef0 <__sfvwrite_r+0x364>
  811ee8:	8023883a 	mov	r17,r16
  811eec:	85003136 	bltu	r16,r20,811fb4 <__sfvwrite_r+0x428>
  811ef0:	91c00517 	ldw	r7,20(r18)
  811ef4:	a1c01836 	bltu	r20,r7,811f58 <__sfvwrite_r+0x3cc>
  811ef8:	90c00917 	ldw	r3,36(r18)
  811efc:	91400717 	ldw	r5,28(r18)
  811f00:	e009883a 	mov	r4,fp
  811f04:	b80d883a 	mov	r6,r23
  811f08:	183ee83a 	callr	r3
  811f0c:	1021883a 	mov	r16,r2
  811f10:	00bfb30e 	bge	zero,r2,811de0 <__sfvwrite_r+0x254>
  811f14:	1023883a 	mov	r17,r2
  811f18:	1027883a 	mov	r19,r2
  811f1c:	003f9b06 	br	811d8c <__sfvwrite_r+0x200>
  811f20:	b80b883a 	mov	r5,r23
  811f24:	800d883a 	mov	r6,r16
  811f28:	08125580 	call	812558 <memmove>
  811f2c:	90c00217 	ldw	r3,8(r18)
  811f30:	90800017 	ldw	r2,0(r18)
  811f34:	8023883a 	mov	r17,r16
  811f38:	1c07c83a 	sub	r3,r3,r16
  811f3c:	1405883a 	add	r2,r2,r16
  811f40:	90c00215 	stw	r3,8(r18)
  811f44:	90800015 	stw	r2,0(r18)
  811f48:	003fc406 	br	811e5c <__sfvwrite_r+0x2d0>
  811f4c:	a00d883a 	mov	r6,r20
  811f50:	a021883a 	mov	r16,r20
  811f54:	003f8106 	br	811d5c <__sfvwrite_r+0x1d0>
  811f58:	b80b883a 	mov	r5,r23
  811f5c:	a00d883a 	mov	r6,r20
  811f60:	08125580 	call	812558 <memmove>
  811f64:	90c00217 	ldw	r3,8(r18)
  811f68:	90800017 	ldw	r2,0(r18)
  811f6c:	a021883a 	mov	r16,r20
  811f70:	1d07c83a 	sub	r3,r3,r20
  811f74:	1505883a 	add	r2,r2,r20
  811f78:	a023883a 	mov	r17,r20
  811f7c:	a027883a 	mov	r19,r20
  811f80:	90c00215 	stw	r3,8(r18)
  811f84:	90800015 	stw	r2,0(r18)
  811f88:	003f8006 	br	811d8c <__sfvwrite_r+0x200>
  811f8c:	b809883a 	mov	r4,r23
  811f90:	01400284 	movi	r5,10
  811f94:	980d883a 	mov	r6,r19
  811f98:	08124000 	call	812400 <memchr>
  811f9c:	10001726 	beq	r2,zero,811ffc <__sfvwrite_r+0x470>
  811fa0:	15c5c83a 	sub	r2,r2,r23
  811fa4:	15000044 	addi	r20,r2,1
  811fa8:	00800044 	movi	r2,1
  811fac:	d8800015 	stw	r2,0(sp)
  811fb0:	003f9806 	br	811e14 <__sfvwrite_r+0x288>
  811fb4:	b80b883a 	mov	r5,r23
  811fb8:	800d883a 	mov	r6,r16
  811fbc:	08125580 	call	812558 <memmove>
  811fc0:	90c00017 	ldw	r3,0(r18)
  811fc4:	e009883a 	mov	r4,fp
  811fc8:	900b883a 	mov	r5,r18
  811fcc:	1c07883a 	add	r3,r3,r16
  811fd0:	90c00015 	stw	r3,0(r18)
  811fd4:	8027883a 	mov	r19,r16
  811fd8:	081125c0 	call	81125c <_fflush_r>
  811fdc:	103f6b26 	beq	r2,zero,811d8c <__sfvwrite_r+0x200>
  811fe0:	003f7f06 	br	811de0 <__sfvwrite_r+0x254>
  811fe4:	400b883a 	mov	r5,r8
  811fe8:	e009883a 	mov	r4,fp
  811fec:	080c5400 	call	80c540 <_realloc_r>
  811ff0:	103f7626 	beq	r2,zero,811dcc <__sfvwrite_r+0x240>
  811ff4:	1023883a 	mov	r17,r2
  811ff8:	003f5006 	br	811d3c <__sfvwrite_r+0x1b0>
  811ffc:	00c00044 	movi	r3,1
  812000:	9d000044 	addi	r20,r19,1
  812004:	d8c00015 	stw	r3,0(sp)
  812008:	003f8206 	br	811e14 <__sfvwrite_r+0x288>
  81200c:	9080030b 	ldhu	r2,12(r18)
  812010:	00c00244 	movi	r3,9
  812014:	013fffc4 	movi	r4,-1
  812018:	10801014 	ori	r2,r2,64
  81201c:	9080030d 	sth	r2,12(r18)
  812020:	e0c00015 	stw	r3,0(fp)
  812024:	003f0606 	br	811c40 <__sfvwrite_r+0xb4>

00812028 <_fwalk_reent>:
  812028:	defff704 	addi	sp,sp,-36
  81202c:	dcc00315 	stw	r19,12(sp)
  812030:	24c0b804 	addi	r19,r4,736
  812034:	dd800615 	stw	r22,24(sp)
  812038:	dd400515 	stw	r21,20(sp)
  81203c:	dfc00815 	stw	ra,32(sp)
  812040:	ddc00715 	stw	r23,28(sp)
  812044:	dd000415 	stw	r20,16(sp)
  812048:	dc800215 	stw	r18,8(sp)
  81204c:	dc400115 	stw	r17,4(sp)
  812050:	dc000015 	stw	r16,0(sp)
  812054:	202b883a 	mov	r21,r4
  812058:	282d883a 	mov	r22,r5
  81205c:	08114e40 	call	8114e4 <__sfp_lock_acquire>
  812060:	98002126 	beq	r19,zero,8120e8 <_fwalk_reent+0xc0>
  812064:	002f883a 	mov	r23,zero
  812068:	9c800117 	ldw	r18,4(r19)
  81206c:	9c000217 	ldw	r16,8(r19)
  812070:	90bfffc4 	addi	r2,r18,-1
  812074:	10000d16 	blt	r2,zero,8120ac <_fwalk_reent+0x84>
  812078:	0023883a 	mov	r17,zero
  81207c:	053fffc4 	movi	r20,-1
  812080:	8080030f 	ldh	r2,12(r16)
  812084:	8c400044 	addi	r17,r17,1
  812088:	10000626 	beq	r2,zero,8120a4 <_fwalk_reent+0x7c>
  81208c:	8080038f 	ldh	r2,14(r16)
  812090:	800b883a 	mov	r5,r16
  812094:	a809883a 	mov	r4,r21
  812098:	15000226 	beq	r2,r20,8120a4 <_fwalk_reent+0x7c>
  81209c:	b03ee83a 	callr	r22
  8120a0:	b8aeb03a 	or	r23,r23,r2
  8120a4:	84001704 	addi	r16,r16,92
  8120a8:	947ff51e 	bne	r18,r17,812080 <_fwalk_reent+0x58>
  8120ac:	9cc00017 	ldw	r19,0(r19)
  8120b0:	983fed1e 	bne	r19,zero,812068 <_fwalk_reent+0x40>
  8120b4:	08114e80 	call	8114e8 <__sfp_lock_release>
  8120b8:	b805883a 	mov	r2,r23
  8120bc:	dfc00817 	ldw	ra,32(sp)
  8120c0:	ddc00717 	ldw	r23,28(sp)
  8120c4:	dd800617 	ldw	r22,24(sp)
  8120c8:	dd400517 	ldw	r21,20(sp)
  8120cc:	dd000417 	ldw	r20,16(sp)
  8120d0:	dcc00317 	ldw	r19,12(sp)
  8120d4:	dc800217 	ldw	r18,8(sp)
  8120d8:	dc400117 	ldw	r17,4(sp)
  8120dc:	dc000017 	ldw	r16,0(sp)
  8120e0:	dec00904 	addi	sp,sp,36
  8120e4:	f800283a 	ret
  8120e8:	002f883a 	mov	r23,zero
  8120ec:	003ff106 	br	8120b4 <_fwalk_reent+0x8c>

008120f0 <_fwalk>:
  8120f0:	defff804 	addi	sp,sp,-32
  8120f4:	dcc00315 	stw	r19,12(sp)
  8120f8:	24c0b804 	addi	r19,r4,736
  8120fc:	dd400515 	stw	r21,20(sp)
  812100:	dfc00715 	stw	ra,28(sp)
  812104:	dd800615 	stw	r22,24(sp)
  812108:	dd000415 	stw	r20,16(sp)
  81210c:	dc800215 	stw	r18,8(sp)
  812110:	dc400115 	stw	r17,4(sp)
  812114:	dc000015 	stw	r16,0(sp)
  812118:	282b883a 	mov	r21,r5
  81211c:	08114e40 	call	8114e4 <__sfp_lock_acquire>
  812120:	98001f26 	beq	r19,zero,8121a0 <_fwalk+0xb0>
  812124:	002d883a 	mov	r22,zero
  812128:	9c800117 	ldw	r18,4(r19)
  81212c:	9c000217 	ldw	r16,8(r19)
  812130:	90bfffc4 	addi	r2,r18,-1
  812134:	10000c16 	blt	r2,zero,812168 <_fwalk+0x78>
  812138:	0023883a 	mov	r17,zero
  81213c:	053fffc4 	movi	r20,-1
  812140:	8080030f 	ldh	r2,12(r16)
  812144:	8c400044 	addi	r17,r17,1
  812148:	10000526 	beq	r2,zero,812160 <_fwalk+0x70>
  81214c:	8080038f 	ldh	r2,14(r16)
  812150:	8009883a 	mov	r4,r16
  812154:	15000226 	beq	r2,r20,812160 <_fwalk+0x70>
  812158:	a83ee83a 	callr	r21
  81215c:	b0acb03a 	or	r22,r22,r2
  812160:	84001704 	addi	r16,r16,92
  812164:	947ff61e 	bne	r18,r17,812140 <_fwalk+0x50>
  812168:	9cc00017 	ldw	r19,0(r19)
  81216c:	983fee1e 	bne	r19,zero,812128 <_fwalk+0x38>
  812170:	08114e80 	call	8114e8 <__sfp_lock_release>
  812174:	b005883a 	mov	r2,r22
  812178:	dfc00717 	ldw	ra,28(sp)
  81217c:	dd800617 	ldw	r22,24(sp)
  812180:	dd400517 	ldw	r21,20(sp)
  812184:	dd000417 	ldw	r20,16(sp)
  812188:	dcc00317 	ldw	r19,12(sp)
  81218c:	dc800217 	ldw	r18,8(sp)
  812190:	dc400117 	ldw	r17,4(sp)
  812194:	dc000017 	ldw	r16,0(sp)
  812198:	dec00804 	addi	sp,sp,32
  81219c:	f800283a 	ret
  8121a0:	002d883a 	mov	r22,zero
  8121a4:	003ff206 	br	812170 <_fwalk+0x80>

008121a8 <__locale_charset>:
  8121a8:	d0a00617 	ldw	r2,-32744(gp)
  8121ac:	f800283a 	ret

008121b0 <_localeconv_r>:
  8121b0:	008020b4 	movhi	r2,130
  8121b4:	10829f04 	addi	r2,r2,2684
  8121b8:	f800283a 	ret

008121bc <localeconv>:
  8121bc:	008020b4 	movhi	r2,130
  8121c0:	108a6b04 	addi	r2,r2,10668
  8121c4:	11000017 	ldw	r4,0(r2)
  8121c8:	08121b01 	jmpi	8121b0 <_localeconv_r>

008121cc <_setlocale_r>:
  8121cc:	defffc04 	addi	sp,sp,-16
  8121d0:	00c020b4 	movhi	r3,130
  8121d4:	18c29b04 	addi	r3,r3,2668
  8121d8:	dc800215 	stw	r18,8(sp)
  8121dc:	dc400115 	stw	r17,4(sp)
  8121e0:	dc000015 	stw	r16,0(sp)
  8121e4:	2023883a 	mov	r17,r4
  8121e8:	2825883a 	mov	r18,r5
  8121ec:	dfc00315 	stw	ra,12(sp)
  8121f0:	3021883a 	mov	r16,r6
  8121f4:	3009883a 	mov	r4,r6
  8121f8:	180b883a 	mov	r5,r3
  8121fc:	30000926 	beq	r6,zero,812224 <_setlocale_r+0x58>
  812200:	080cd080 	call	80cd08 <strcmp>
  812204:	8009883a 	mov	r4,r16
  812208:	014020b4 	movhi	r5,130
  81220c:	29413504 	addi	r5,r5,1236
  812210:	10000b1e 	bne	r2,zero,812240 <_setlocale_r+0x74>
  812214:	8c000d15 	stw	r16,52(r17)
  812218:	8c800c15 	stw	r18,48(r17)
  81221c:	00c020b4 	movhi	r3,130
  812220:	18c29b04 	addi	r3,r3,2668
  812224:	1805883a 	mov	r2,r3
  812228:	dfc00317 	ldw	ra,12(sp)
  81222c:	dc800217 	ldw	r18,8(sp)
  812230:	dc400117 	ldw	r17,4(sp)
  812234:	dc000017 	ldw	r16,0(sp)
  812238:	dec00404 	addi	sp,sp,16
  81223c:	f800283a 	ret
  812240:	080cd080 	call	80cd08 <strcmp>
  812244:	0007883a 	mov	r3,zero
  812248:	103ff226 	beq	r2,zero,812214 <_setlocale_r+0x48>
  81224c:	003ff506 	br	812224 <_setlocale_r+0x58>

00812250 <setlocale>:
  812250:	018020b4 	movhi	r6,130
  812254:	318a6b04 	addi	r6,r6,10668
  812258:	2007883a 	mov	r3,r4
  81225c:	31000017 	ldw	r4,0(r6)
  812260:	280d883a 	mov	r6,r5
  812264:	180b883a 	mov	r5,r3
  812268:	08121cc1 	jmpi	8121cc <_setlocale_r>

0081226c <__smakebuf_r>:
  81226c:	2880030b 	ldhu	r2,12(r5)
  812270:	deffed04 	addi	sp,sp,-76
  812274:	dc401015 	stw	r17,64(sp)
  812278:	1080008c 	andi	r2,r2,2
  81227c:	dc000f15 	stw	r16,60(sp)
  812280:	dfc01215 	stw	ra,72(sp)
  812284:	dc801115 	stw	r18,68(sp)
  812288:	2821883a 	mov	r16,r5
  81228c:	2023883a 	mov	r17,r4
  812290:	10000b26 	beq	r2,zero,8122c0 <__smakebuf_r+0x54>
  812294:	28c010c4 	addi	r3,r5,67
  812298:	00800044 	movi	r2,1
  81229c:	28800515 	stw	r2,20(r5)
  8122a0:	28c00415 	stw	r3,16(r5)
  8122a4:	28c00015 	stw	r3,0(r5)
  8122a8:	dfc01217 	ldw	ra,72(sp)
  8122ac:	dc801117 	ldw	r18,68(sp)
  8122b0:	dc401017 	ldw	r17,64(sp)
  8122b4:	dc000f17 	ldw	r16,60(sp)
  8122b8:	dec01304 	addi	sp,sp,76
  8122bc:	f800283a 	ret
  8122c0:	2940038f 	ldh	r5,14(r5)
  8122c4:	28002116 	blt	r5,zero,81234c <__smakebuf_r+0xe0>
  8122c8:	d80d883a 	mov	r6,sp
  8122cc:	0813b880 	call	813b88 <_fstat_r>
  8122d0:	10001e16 	blt	r2,zero,81234c <__smakebuf_r+0xe0>
  8122d4:	d8800117 	ldw	r2,4(sp)
  8122d8:	00e00014 	movui	r3,32768
  8122dc:	113c000c 	andi	r4,r2,61440
  8122e0:	20c03126 	beq	r4,r3,8123a8 <__smakebuf_r+0x13c>
  8122e4:	8080030b 	ldhu	r2,12(r16)
  8122e8:	00c80004 	movi	r3,8192
  8122ec:	10820014 	ori	r2,r2,2048
  8122f0:	8080030d 	sth	r2,12(r16)
  8122f4:	20c01e26 	beq	r4,r3,812370 <__smakebuf_r+0x104>
  8122f8:	04810004 	movi	r18,1024
  8122fc:	8809883a 	mov	r4,r17
  812300:	900b883a 	mov	r5,r18
  812304:	080bb800 	call	80bb80 <_malloc_r>
  812308:	1009883a 	mov	r4,r2
  81230c:	10003126 	beq	r2,zero,8123d4 <__smakebuf_r+0x168>
  812310:	80c0030b 	ldhu	r3,12(r16)
  812314:	00802074 	movhi	r2,129
  812318:	10857604 	addi	r2,r2,5592
  81231c:	88800f15 	stw	r2,60(r17)
  812320:	18c02014 	ori	r3,r3,128
  812324:	84800515 	stw	r18,20(r16)
  812328:	80c0030d 	sth	r3,12(r16)
  81232c:	81000415 	stw	r4,16(r16)
  812330:	81000015 	stw	r4,0(r16)
  812334:	dfc01217 	ldw	ra,72(sp)
  812338:	dc801117 	ldw	r18,68(sp)
  81233c:	dc401017 	ldw	r17,64(sp)
  812340:	dc000f17 	ldw	r16,60(sp)
  812344:	dec01304 	addi	sp,sp,76
  812348:	f800283a 	ret
  81234c:	80c0030b 	ldhu	r3,12(r16)
  812350:	1880200c 	andi	r2,r3,128
  812354:	10000426 	beq	r2,zero,812368 <__smakebuf_r+0xfc>
  812358:	04801004 	movi	r18,64
  81235c:	18820014 	ori	r2,r3,2048
  812360:	8080030d 	sth	r2,12(r16)
  812364:	003fe506 	br	8122fc <__smakebuf_r+0x90>
  812368:	04810004 	movi	r18,1024
  81236c:	003ffb06 	br	81235c <__smakebuf_r+0xf0>
  812370:	8140038f 	ldh	r5,14(r16)
  812374:	8809883a 	mov	r4,r17
  812378:	0813bfc0 	call	813bfc <_isatty_r>
  81237c:	103fde26 	beq	r2,zero,8122f8 <__smakebuf_r+0x8c>
  812380:	8080030b 	ldhu	r2,12(r16)
  812384:	80c010c4 	addi	r3,r16,67
  812388:	04810004 	movi	r18,1024
  81238c:	10800054 	ori	r2,r2,1
  812390:	8080030d 	sth	r2,12(r16)
  812394:	00800044 	movi	r2,1
  812398:	80c00415 	stw	r3,16(r16)
  81239c:	80800515 	stw	r2,20(r16)
  8123a0:	80c00015 	stw	r3,0(r16)
  8123a4:	003fd506 	br	8122fc <__smakebuf_r+0x90>
  8123a8:	80c00a17 	ldw	r3,40(r16)
  8123ac:	00802074 	movhi	r2,129
  8123b0:	108da904 	addi	r2,r2,13988
  8123b4:	18bfcb1e 	bne	r3,r2,8122e4 <__smakebuf_r+0x78>
  8123b8:	8080030b 	ldhu	r2,12(r16)
  8123bc:	00c10004 	movi	r3,1024
  8123c0:	1825883a 	mov	r18,r3
  8123c4:	10c4b03a 	or	r2,r2,r3
  8123c8:	8080030d 	sth	r2,12(r16)
  8123cc:	80c01315 	stw	r3,76(r16)
  8123d0:	003fca06 	br	8122fc <__smakebuf_r+0x90>
  8123d4:	8100030b 	ldhu	r4,12(r16)
  8123d8:	2080800c 	andi	r2,r4,512
  8123dc:	103fb21e 	bne	r2,zero,8122a8 <__smakebuf_r+0x3c>
  8123e0:	80c010c4 	addi	r3,r16,67
  8123e4:	21000094 	ori	r4,r4,2
  8123e8:	00800044 	movi	r2,1
  8123ec:	80800515 	stw	r2,20(r16)
  8123f0:	8100030d 	sth	r4,12(r16)
  8123f4:	80c00415 	stw	r3,16(r16)
  8123f8:	80c00015 	stw	r3,0(r16)
  8123fc:	003faa06 	br	8122a8 <__smakebuf_r+0x3c>

00812400 <memchr>:
  812400:	008000c4 	movi	r2,3
  812404:	29403fcc 	andi	r5,r5,255
  812408:	2007883a 	mov	r3,r4
  81240c:	1180022e 	bgeu	r2,r6,812418 <memchr+0x18>
  812410:	2084703a 	and	r2,r4,r2
  812414:	10000b26 	beq	r2,zero,812444 <memchr+0x44>
  812418:	313fffc4 	addi	r4,r6,-1
  81241c:	3000051e 	bne	r6,zero,812434 <memchr+0x34>
  812420:	00002c06 	br	8124d4 <memchr+0xd4>
  812424:	213fffc4 	addi	r4,r4,-1
  812428:	00bfffc4 	movi	r2,-1
  81242c:	18c00044 	addi	r3,r3,1
  812430:	20802826 	beq	r4,r2,8124d4 <memchr+0xd4>
  812434:	18800003 	ldbu	r2,0(r3)
  812438:	28bffa1e 	bne	r5,r2,812424 <memchr+0x24>
  81243c:	1805883a 	mov	r2,r3
  812440:	f800283a 	ret
  812444:	0011883a 	mov	r8,zero
  812448:	0007883a 	mov	r3,zero
  81244c:	01c00104 	movi	r7,4
  812450:	4004923a 	slli	r2,r8,8
  812454:	18c00044 	addi	r3,r3,1
  812458:	1151883a 	add	r8,r2,r5
  81245c:	19fffc1e 	bne	r3,r7,812450 <memchr+0x50>
  812460:	02bfbff4 	movhi	r10,65279
  812464:	52bfbfc4 	addi	r10,r10,-257
  812468:	02602074 	movhi	r9,32897
  81246c:	4a602004 	addi	r9,r9,-32640
  812470:	02c000c4 	movi	r11,3
  812474:	20800017 	ldw	r2,0(r4)
  812478:	31bfff04 	addi	r6,r6,-4
  81247c:	200f883a 	mov	r7,r4
  812480:	1204f03a 	xor	r2,r2,r8
  812484:	1287883a 	add	r3,r2,r10
  812488:	1a46703a 	and	r3,r3,r9
  81248c:	0084303a 	nor	r2,zero,r2
  812490:	10c4703a 	and	r2,r2,r3
  812494:	10000b26 	beq	r2,zero,8124c4 <memchr+0xc4>
  812498:	20800003 	ldbu	r2,0(r4)
  81249c:	28800f26 	beq	r5,r2,8124dc <memchr+0xdc>
  8124a0:	20800043 	ldbu	r2,1(r4)
  8124a4:	21c00044 	addi	r7,r4,1
  8124a8:	28800c26 	beq	r5,r2,8124dc <memchr+0xdc>
  8124ac:	20800083 	ldbu	r2,2(r4)
  8124b0:	21c00084 	addi	r7,r4,2
  8124b4:	28800926 	beq	r5,r2,8124dc <memchr+0xdc>
  8124b8:	208000c3 	ldbu	r2,3(r4)
  8124bc:	21c000c4 	addi	r7,r4,3
  8124c0:	28800626 	beq	r5,r2,8124dc <memchr+0xdc>
  8124c4:	21000104 	addi	r4,r4,4
  8124c8:	59bfea36 	bltu	r11,r6,812474 <memchr+0x74>
  8124cc:	2007883a 	mov	r3,r4
  8124d0:	003fd106 	br	812418 <memchr+0x18>
  8124d4:	0005883a 	mov	r2,zero
  8124d8:	f800283a 	ret
  8124dc:	3805883a 	mov	r2,r7
  8124e0:	f800283a 	ret

008124e4 <memcmp>:
  8124e4:	00c000c4 	movi	r3,3
  8124e8:	1980032e 	bgeu	r3,r6,8124f8 <memcmp+0x14>
  8124ec:	2144b03a 	or	r2,r4,r5
  8124f0:	10c4703a 	and	r2,r2,r3
  8124f4:	10000f26 	beq	r2,zero,812534 <memcmp+0x50>
  8124f8:	31ffffc4 	addi	r7,r6,-1
  8124fc:	3000061e 	bne	r6,zero,812518 <memcmp+0x34>
  812500:	00000a06 	br	81252c <memcmp+0x48>
  812504:	39ffffc4 	addi	r7,r7,-1
  812508:	00bfffc4 	movi	r2,-1
  81250c:	21000044 	addi	r4,r4,1
  812510:	29400044 	addi	r5,r5,1
  812514:	38800526 	beq	r7,r2,81252c <memcmp+0x48>
  812518:	20c00003 	ldbu	r3,0(r4)
  81251c:	28800003 	ldbu	r2,0(r5)
  812520:	18bff826 	beq	r3,r2,812504 <memcmp+0x20>
  812524:	1885c83a 	sub	r2,r3,r2
  812528:	f800283a 	ret
  81252c:	0005883a 	mov	r2,zero
  812530:	f800283a 	ret
  812534:	180f883a 	mov	r7,r3
  812538:	20c00017 	ldw	r3,0(r4)
  81253c:	28800017 	ldw	r2,0(r5)
  812540:	18bfed1e 	bne	r3,r2,8124f8 <memcmp+0x14>
  812544:	31bfff04 	addi	r6,r6,-4
  812548:	21000104 	addi	r4,r4,4
  81254c:	29400104 	addi	r5,r5,4
  812550:	39bff936 	bltu	r7,r6,812538 <memcmp+0x54>
  812554:	003fe806 	br	8124f8 <memcmp+0x14>

00812558 <memmove>:
  812558:	2807883a 	mov	r3,r5
  81255c:	2011883a 	mov	r8,r4
  812560:	29000c2e 	bgeu	r5,r4,812594 <memmove+0x3c>
  812564:	298f883a 	add	r7,r5,r6
  812568:	21c00a2e 	bgeu	r4,r7,812594 <memmove+0x3c>
  81256c:	30000726 	beq	r6,zero,81258c <memmove+0x34>
  812570:	2187883a 	add	r3,r4,r6
  812574:	198dc83a 	sub	r6,r3,r6
  812578:	39ffffc4 	addi	r7,r7,-1
  81257c:	38800003 	ldbu	r2,0(r7)
  812580:	18ffffc4 	addi	r3,r3,-1
  812584:	18800005 	stb	r2,0(r3)
  812588:	19bffb1e 	bne	r3,r6,812578 <memmove+0x20>
  81258c:	2005883a 	mov	r2,r4
  812590:	f800283a 	ret
  812594:	01c003c4 	movi	r7,15
  812598:	39800a36 	bltu	r7,r6,8125c4 <memmove+0x6c>
  81259c:	303ffb26 	beq	r6,zero,81258c <memmove+0x34>
  8125a0:	400f883a 	mov	r7,r8
  8125a4:	320d883a 	add	r6,r6,r8
  8125a8:	28800003 	ldbu	r2,0(r5)
  8125ac:	29400044 	addi	r5,r5,1
  8125b0:	38800005 	stb	r2,0(r7)
  8125b4:	39c00044 	addi	r7,r7,1
  8125b8:	39bffb1e 	bne	r7,r6,8125a8 <memmove+0x50>
  8125bc:	2005883a 	mov	r2,r4
  8125c0:	f800283a 	ret
  8125c4:	1904b03a 	or	r2,r3,r4
  8125c8:	108000cc 	andi	r2,r2,3
  8125cc:	103ff31e 	bne	r2,zero,81259c <memmove+0x44>
  8125d0:	3811883a 	mov	r8,r7
  8125d4:	180b883a 	mov	r5,r3
  8125d8:	200f883a 	mov	r7,r4
  8125dc:	28c00017 	ldw	r3,0(r5)
  8125e0:	31bffc04 	addi	r6,r6,-16
  8125e4:	38c00015 	stw	r3,0(r7)
  8125e8:	28800117 	ldw	r2,4(r5)
  8125ec:	38800115 	stw	r2,4(r7)
  8125f0:	28c00217 	ldw	r3,8(r5)
  8125f4:	38c00215 	stw	r3,8(r7)
  8125f8:	28800317 	ldw	r2,12(r5)
  8125fc:	29400404 	addi	r5,r5,16
  812600:	38800315 	stw	r2,12(r7)
  812604:	39c00404 	addi	r7,r7,16
  812608:	41bff436 	bltu	r8,r6,8125dc <memmove+0x84>
  81260c:	008000c4 	movi	r2,3
  812610:	1180072e 	bgeu	r2,r6,812630 <memmove+0xd8>
  812614:	1007883a 	mov	r3,r2
  812618:	28800017 	ldw	r2,0(r5)
  81261c:	31bfff04 	addi	r6,r6,-4
  812620:	29400104 	addi	r5,r5,4
  812624:	38800015 	stw	r2,0(r7)
  812628:	39c00104 	addi	r7,r7,4
  81262c:	19bffa36 	bltu	r3,r6,812618 <memmove+0xc0>
  812630:	3811883a 	mov	r8,r7
  812634:	003fd906 	br	81259c <memmove+0x44>

00812638 <_Bfree>:
  812638:	28000826 	beq	r5,zero,81265c <_Bfree+0x24>
  81263c:	28800117 	ldw	r2,4(r5)
  812640:	21001317 	ldw	r4,76(r4)
  812644:	1085883a 	add	r2,r2,r2
  812648:	1085883a 	add	r2,r2,r2
  81264c:	1105883a 	add	r2,r2,r4
  812650:	10c00017 	ldw	r3,0(r2)
  812654:	28c00015 	stw	r3,0(r5)
  812658:	11400015 	stw	r5,0(r2)
  81265c:	f800283a 	ret

00812660 <__hi0bits>:
  812660:	20bfffec 	andhi	r2,r4,65535
  812664:	10001426 	beq	r2,zero,8126b8 <__hi0bits+0x58>
  812668:	0007883a 	mov	r3,zero
  81266c:	20bfc02c 	andhi	r2,r4,65280
  812670:	1000021e 	bne	r2,zero,81267c <__hi0bits+0x1c>
  812674:	2008923a 	slli	r4,r4,8
  812678:	18c00204 	addi	r3,r3,8
  81267c:	20bc002c 	andhi	r2,r4,61440
  812680:	1000021e 	bne	r2,zero,81268c <__hi0bits+0x2c>
  812684:	2008913a 	slli	r4,r4,4
  812688:	18c00104 	addi	r3,r3,4
  81268c:	20b0002c 	andhi	r2,r4,49152
  812690:	1000031e 	bne	r2,zero,8126a0 <__hi0bits+0x40>
  812694:	2105883a 	add	r2,r4,r4
  812698:	18c00084 	addi	r3,r3,2
  81269c:	1089883a 	add	r4,r2,r2
  8126a0:	20000316 	blt	r4,zero,8126b0 <__hi0bits+0x50>
  8126a4:	2090002c 	andhi	r2,r4,16384
  8126a8:	10000626 	beq	r2,zero,8126c4 <__hi0bits+0x64>
  8126ac:	18c00044 	addi	r3,r3,1
  8126b0:	1805883a 	mov	r2,r3
  8126b4:	f800283a 	ret
  8126b8:	2008943a 	slli	r4,r4,16
  8126bc:	00c00404 	movi	r3,16
  8126c0:	003fea06 	br	81266c <__hi0bits+0xc>
  8126c4:	00c00804 	movi	r3,32
  8126c8:	1805883a 	mov	r2,r3
  8126cc:	f800283a 	ret

008126d0 <__lo0bits>:
  8126d0:	20c00017 	ldw	r3,0(r4)
  8126d4:	188001cc 	andi	r2,r3,7
  8126d8:	10000a26 	beq	r2,zero,812704 <__lo0bits+0x34>
  8126dc:	1880004c 	andi	r2,r3,1
  8126e0:	1005003a 	cmpeq	r2,r2,zero
  8126e4:	10002126 	beq	r2,zero,81276c <__lo0bits+0x9c>
  8126e8:	1880008c 	andi	r2,r3,2
  8126ec:	1000251e 	bne	r2,zero,812784 <__lo0bits+0xb4>
  8126f0:	1804d0ba 	srli	r2,r3,2
  8126f4:	01400084 	movi	r5,2
  8126f8:	20800015 	stw	r2,0(r4)
  8126fc:	2805883a 	mov	r2,r5
  812700:	f800283a 	ret
  812704:	18bfffcc 	andi	r2,r3,65535
  812708:	10001526 	beq	r2,zero,812760 <__lo0bits+0x90>
  81270c:	000b883a 	mov	r5,zero
  812710:	18803fcc 	andi	r2,r3,255
  812714:	1000021e 	bne	r2,zero,812720 <__lo0bits+0x50>
  812718:	1806d23a 	srli	r3,r3,8
  81271c:	29400204 	addi	r5,r5,8
  812720:	188003cc 	andi	r2,r3,15
  812724:	1000021e 	bne	r2,zero,812730 <__lo0bits+0x60>
  812728:	1806d13a 	srli	r3,r3,4
  81272c:	29400104 	addi	r5,r5,4
  812730:	188000cc 	andi	r2,r3,3
  812734:	1000021e 	bne	r2,zero,812740 <__lo0bits+0x70>
  812738:	1806d0ba 	srli	r3,r3,2
  81273c:	29400084 	addi	r5,r5,2
  812740:	1880004c 	andi	r2,r3,1
  812744:	1000031e 	bne	r2,zero,812754 <__lo0bits+0x84>
  812748:	1806d07a 	srli	r3,r3,1
  81274c:	18000a26 	beq	r3,zero,812778 <__lo0bits+0xa8>
  812750:	29400044 	addi	r5,r5,1
  812754:	2805883a 	mov	r2,r5
  812758:	20c00015 	stw	r3,0(r4)
  81275c:	f800283a 	ret
  812760:	1806d43a 	srli	r3,r3,16
  812764:	01400404 	movi	r5,16
  812768:	003fe906 	br	812710 <__lo0bits+0x40>
  81276c:	000b883a 	mov	r5,zero
  812770:	2805883a 	mov	r2,r5
  812774:	f800283a 	ret
  812778:	01400804 	movi	r5,32
  81277c:	2805883a 	mov	r2,r5
  812780:	f800283a 	ret
  812784:	1804d07a 	srli	r2,r3,1
  812788:	01400044 	movi	r5,1
  81278c:	20800015 	stw	r2,0(r4)
  812790:	003fda06 	br	8126fc <__lo0bits+0x2c>

00812794 <__mcmp>:
  812794:	20800417 	ldw	r2,16(r4)
  812798:	28c00417 	ldw	r3,16(r5)
  81279c:	10cfc83a 	sub	r7,r2,r3
  8127a0:	38000c1e 	bne	r7,zero,8127d4 <__mcmp+0x40>
  8127a4:	18c5883a 	add	r2,r3,r3
  8127a8:	1085883a 	add	r2,r2,r2
  8127ac:	10c00504 	addi	r3,r2,20
  8127b0:	21000504 	addi	r4,r4,20
  8127b4:	28cb883a 	add	r5,r5,r3
  8127b8:	2085883a 	add	r2,r4,r2
  8127bc:	10bfff04 	addi	r2,r2,-4
  8127c0:	297fff04 	addi	r5,r5,-4
  8127c4:	11800017 	ldw	r6,0(r2)
  8127c8:	28c00017 	ldw	r3,0(r5)
  8127cc:	30c0031e 	bne	r6,r3,8127dc <__mcmp+0x48>
  8127d0:	20bffa36 	bltu	r4,r2,8127bc <__mcmp+0x28>
  8127d4:	3805883a 	mov	r2,r7
  8127d8:	f800283a 	ret
  8127dc:	30c00336 	bltu	r6,r3,8127ec <__mcmp+0x58>
  8127e0:	01c00044 	movi	r7,1
  8127e4:	3805883a 	mov	r2,r7
  8127e8:	f800283a 	ret
  8127ec:	01ffffc4 	movi	r7,-1
  8127f0:	003ff806 	br	8127d4 <__mcmp+0x40>

008127f4 <__ulp>:
  8127f4:	295ffc2c 	andhi	r5,r5,32752
  8127f8:	013f3034 	movhi	r4,64704
  8127fc:	290b883a 	add	r5,r5,r4
  812800:	0145c83a 	sub	r2,zero,r5
  812804:	1007d53a 	srai	r3,r2,20
  812808:	000d883a 	mov	r6,zero
  81280c:	0140040e 	bge	zero,r5,812820 <__ulp+0x2c>
  812810:	280f883a 	mov	r7,r5
  812814:	3807883a 	mov	r3,r7
  812818:	3005883a 	mov	r2,r6
  81281c:	f800283a 	ret
  812820:	008004c4 	movi	r2,19
  812824:	193ffb04 	addi	r4,r3,-20
  812828:	10c00c0e 	bge	r2,r3,81285c <__ulp+0x68>
  81282c:	008007c4 	movi	r2,31
  812830:	1107c83a 	sub	r3,r2,r4
  812834:	00800784 	movi	r2,30
  812838:	01400044 	movi	r5,1
  81283c:	11000216 	blt	r2,r4,812848 <__ulp+0x54>
  812840:	00800044 	movi	r2,1
  812844:	10ca983a 	sll	r5,r2,r3
  812848:	000f883a 	mov	r7,zero
  81284c:	280d883a 	mov	r6,r5
  812850:	3807883a 	mov	r3,r7
  812854:	3005883a 	mov	r2,r6
  812858:	f800283a 	ret
  81285c:	00800234 	movhi	r2,8
  812860:	10cfd83a 	sra	r7,r2,r3
  812864:	000d883a 	mov	r6,zero
  812868:	3005883a 	mov	r2,r6
  81286c:	3807883a 	mov	r3,r7
  812870:	f800283a 	ret

00812874 <__b2d>:
  812874:	20800417 	ldw	r2,16(r4)
  812878:	defff904 	addi	sp,sp,-28
  81287c:	dd000415 	stw	r20,16(sp)
  812880:	1085883a 	add	r2,r2,r2
  812884:	25000504 	addi	r20,r4,20
  812888:	1085883a 	add	r2,r2,r2
  81288c:	dc000015 	stw	r16,0(sp)
  812890:	a0a1883a 	add	r16,r20,r2
  812894:	dd400515 	stw	r21,20(sp)
  812898:	857fff17 	ldw	r21,-4(r16)
  81289c:	dc400115 	stw	r17,4(sp)
  8128a0:	dfc00615 	stw	ra,24(sp)
  8128a4:	a809883a 	mov	r4,r21
  8128a8:	2823883a 	mov	r17,r5
  8128ac:	dcc00315 	stw	r19,12(sp)
  8128b0:	dc800215 	stw	r18,8(sp)
  8128b4:	08126600 	call	812660 <__hi0bits>
  8128b8:	100b883a 	mov	r5,r2
  8128bc:	00800804 	movi	r2,32
  8128c0:	1145c83a 	sub	r2,r2,r5
  8128c4:	88800015 	stw	r2,0(r17)
  8128c8:	00800284 	movi	r2,10
  8128cc:	80ffff04 	addi	r3,r16,-4
  8128d0:	11401416 	blt	r2,r5,812924 <__b2d+0xb0>
  8128d4:	008002c4 	movi	r2,11
  8128d8:	1149c83a 	sub	r4,r2,r5
  8128dc:	a0c02736 	bltu	r20,r3,81297c <__b2d+0x108>
  8128e0:	000d883a 	mov	r6,zero
  8128e4:	28800544 	addi	r2,r5,21
  8128e8:	a906d83a 	srl	r3,r21,r4
  8128ec:	a884983a 	sll	r2,r21,r2
  8128f0:	1ccffc34 	orhi	r19,r3,16368
  8128f4:	11a4b03a 	or	r18,r2,r6
  8128f8:	9005883a 	mov	r2,r18
  8128fc:	9807883a 	mov	r3,r19
  812900:	dfc00617 	ldw	ra,24(sp)
  812904:	dd400517 	ldw	r21,20(sp)
  812908:	dd000417 	ldw	r20,16(sp)
  81290c:	dcc00317 	ldw	r19,12(sp)
  812910:	dc800217 	ldw	r18,8(sp)
  812914:	dc400117 	ldw	r17,4(sp)
  812918:	dc000017 	ldw	r16,0(sp)
  81291c:	dec00704 	addi	sp,sp,28
  812920:	f800283a 	ret
  812924:	a0c00e36 	bltu	r20,r3,812960 <__b2d+0xec>
  812928:	293ffd44 	addi	r4,r5,-11
  81292c:	000d883a 	mov	r6,zero
  812930:	20000f26 	beq	r4,zero,812970 <__b2d+0xfc>
  812934:	00800804 	movi	r2,32
  812938:	110bc83a 	sub	r5,r2,r4
  81293c:	a0c01236 	bltu	r20,r3,812988 <__b2d+0x114>
  812940:	000f883a 	mov	r7,zero
  812944:	a904983a 	sll	r2,r21,r4
  812948:	3146d83a 	srl	r3,r6,r5
  81294c:	3108983a 	sll	r4,r6,r4
  812950:	108ffc34 	orhi	r2,r2,16368
  812954:	18a6b03a 	or	r19,r3,r2
  812958:	3924b03a 	or	r18,r7,r4
  81295c:	003fe606 	br	8128f8 <__b2d+0x84>
  812960:	293ffd44 	addi	r4,r5,-11
  812964:	81bffe17 	ldw	r6,-8(r16)
  812968:	80fffe04 	addi	r3,r16,-8
  81296c:	203ff11e 	bne	r4,zero,812934 <__b2d+0xc0>
  812970:	accffc34 	orhi	r19,r21,16368
  812974:	3025883a 	mov	r18,r6
  812978:	003fdf06 	br	8128f8 <__b2d+0x84>
  81297c:	18bfff17 	ldw	r2,-4(r3)
  812980:	110cd83a 	srl	r6,r2,r4
  812984:	003fd706 	br	8128e4 <__b2d+0x70>
  812988:	18bfff17 	ldw	r2,-4(r3)
  81298c:	114ed83a 	srl	r7,r2,r5
  812990:	003fec06 	br	812944 <__b2d+0xd0>

00812994 <__ratio>:
  812994:	defff904 	addi	sp,sp,-28
  812998:	dc400215 	stw	r17,8(sp)
  81299c:	2823883a 	mov	r17,r5
  8129a0:	d80b883a 	mov	r5,sp
  8129a4:	dfc00615 	stw	ra,24(sp)
  8129a8:	dd000515 	stw	r20,20(sp)
  8129ac:	dcc00415 	stw	r19,16(sp)
  8129b0:	dc800315 	stw	r18,12(sp)
  8129b4:	2025883a 	mov	r18,r4
  8129b8:	08128740 	call	812874 <__b2d>
  8129bc:	8809883a 	mov	r4,r17
  8129c0:	d9400104 	addi	r5,sp,4
  8129c4:	1027883a 	mov	r19,r2
  8129c8:	1829883a 	mov	r20,r3
  8129cc:	08128740 	call	812874 <__b2d>
  8129d0:	89000417 	ldw	r4,16(r17)
  8129d4:	91c00417 	ldw	r7,16(r18)
  8129d8:	d9800117 	ldw	r6,4(sp)
  8129dc:	180b883a 	mov	r5,r3
  8129e0:	390fc83a 	sub	r7,r7,r4
  8129e4:	1009883a 	mov	r4,r2
  8129e8:	d8800017 	ldw	r2,0(sp)
  8129ec:	380e917a 	slli	r7,r7,5
  8129f0:	2011883a 	mov	r8,r4
  8129f4:	1185c83a 	sub	r2,r2,r6
  8129f8:	11c5883a 	add	r2,r2,r7
  8129fc:	1006953a 	slli	r3,r2,20
  812a00:	2813883a 	mov	r9,r5
  812a04:	00800d0e 	bge	zero,r2,812a3c <__ratio+0xa8>
  812a08:	1d29883a 	add	r20,r3,r20
  812a0c:	a00b883a 	mov	r5,r20
  812a10:	480f883a 	mov	r7,r9
  812a14:	9809883a 	mov	r4,r19
  812a18:	400d883a 	mov	r6,r8
  812a1c:	08148e80 	call	8148e8 <__divdf3>
  812a20:	dfc00617 	ldw	ra,24(sp)
  812a24:	dd000517 	ldw	r20,20(sp)
  812a28:	dcc00417 	ldw	r19,16(sp)
  812a2c:	dc800317 	ldw	r18,12(sp)
  812a30:	dc400217 	ldw	r17,8(sp)
  812a34:	dec00704 	addi	sp,sp,28
  812a38:	f800283a 	ret
  812a3c:	28d3c83a 	sub	r9,r5,r3
  812a40:	003ff206 	br	812a0c <__ratio+0x78>

00812a44 <_mprec_log10>:
  812a44:	defffe04 	addi	sp,sp,-8
  812a48:	008005c4 	movi	r2,23
  812a4c:	dc000015 	stw	r16,0(sp)
  812a50:	dfc00115 	stw	ra,4(sp)
  812a54:	2021883a 	mov	r16,r4
  812a58:	11000c16 	blt	r2,r4,812a8c <_mprec_log10+0x48>
  812a5c:	200490fa 	slli	r2,r4,3
  812a60:	00c020b4 	movhi	r3,130
  812a64:	18c2ab04 	addi	r3,r3,2732
  812a68:	10c5883a 	add	r2,r2,r3
  812a6c:	12400117 	ldw	r9,4(r2)
  812a70:	12000017 	ldw	r8,0(r2)
  812a74:	4807883a 	mov	r3,r9
  812a78:	4005883a 	mov	r2,r8
  812a7c:	dfc00117 	ldw	ra,4(sp)
  812a80:	dc000017 	ldw	r16,0(sp)
  812a84:	dec00204 	addi	sp,sp,8
  812a88:	f800283a 	ret
  812a8c:	0011883a 	mov	r8,zero
  812a90:	024ffc34 	movhi	r9,16368
  812a94:	0005883a 	mov	r2,zero
  812a98:	00d00934 	movhi	r3,16420
  812a9c:	480b883a 	mov	r5,r9
  812aa0:	4009883a 	mov	r4,r8
  812aa4:	180f883a 	mov	r7,r3
  812aa8:	100d883a 	mov	r6,r2
  812aac:	080ab540 	call	80ab54 <__muldf3>
  812ab0:	843fffc4 	addi	r16,r16,-1
  812ab4:	1011883a 	mov	r8,r2
  812ab8:	1813883a 	mov	r9,r3
  812abc:	803ff51e 	bne	r16,zero,812a94 <_mprec_log10+0x50>
  812ac0:	4005883a 	mov	r2,r8
  812ac4:	4807883a 	mov	r3,r9
  812ac8:	dfc00117 	ldw	ra,4(sp)
  812acc:	dc000017 	ldw	r16,0(sp)
  812ad0:	dec00204 	addi	sp,sp,8
  812ad4:	f800283a 	ret

00812ad8 <__copybits>:
  812ad8:	297fffc4 	addi	r5,r5,-1
  812adc:	30800417 	ldw	r2,16(r6)
  812ae0:	280bd17a 	srai	r5,r5,5
  812ae4:	31800504 	addi	r6,r6,20
  812ae8:	1085883a 	add	r2,r2,r2
  812aec:	294b883a 	add	r5,r5,r5
  812af0:	294b883a 	add	r5,r5,r5
  812af4:	1085883a 	add	r2,r2,r2
  812af8:	290b883a 	add	r5,r5,r4
  812afc:	3087883a 	add	r3,r6,r2
  812b00:	29400104 	addi	r5,r5,4
  812b04:	30c0052e 	bgeu	r6,r3,812b1c <__copybits+0x44>
  812b08:	30800017 	ldw	r2,0(r6)
  812b0c:	31800104 	addi	r6,r6,4
  812b10:	20800015 	stw	r2,0(r4)
  812b14:	21000104 	addi	r4,r4,4
  812b18:	30fffb36 	bltu	r6,r3,812b08 <__copybits+0x30>
  812b1c:	2140032e 	bgeu	r4,r5,812b2c <__copybits+0x54>
  812b20:	20000015 	stw	zero,0(r4)
  812b24:	21000104 	addi	r4,r4,4
  812b28:	217ffd36 	bltu	r4,r5,812b20 <__copybits+0x48>
  812b2c:	f800283a 	ret

00812b30 <__any_on>:
  812b30:	20800417 	ldw	r2,16(r4)
  812b34:	2807d17a 	srai	r3,r5,5
  812b38:	21000504 	addi	r4,r4,20
  812b3c:	10c00d0e 	bge	r2,r3,812b74 <__any_on+0x44>
  812b40:	1085883a 	add	r2,r2,r2
  812b44:	1085883a 	add	r2,r2,r2
  812b48:	208d883a 	add	r6,r4,r2
  812b4c:	2180182e 	bgeu	r4,r6,812bb0 <__any_on+0x80>
  812b50:	30bfff17 	ldw	r2,-4(r6)
  812b54:	30ffff04 	addi	r3,r6,-4
  812b58:	1000041e 	bne	r2,zero,812b6c <__any_on+0x3c>
  812b5c:	20c0142e 	bgeu	r4,r3,812bb0 <__any_on+0x80>
  812b60:	18ffff04 	addi	r3,r3,-4
  812b64:	18800017 	ldw	r2,0(r3)
  812b68:	103ffc26 	beq	r2,zero,812b5c <__any_on+0x2c>
  812b6c:	00800044 	movi	r2,1
  812b70:	f800283a 	ret
  812b74:	18800a0e 	bge	r3,r2,812ba0 <__any_on+0x70>
  812b78:	294007cc 	andi	r5,r5,31
  812b7c:	28000826 	beq	r5,zero,812ba0 <__any_on+0x70>
  812b80:	18c5883a 	add	r2,r3,r3
  812b84:	1085883a 	add	r2,r2,r2
  812b88:	208d883a 	add	r6,r4,r2
  812b8c:	30c00017 	ldw	r3,0(r6)
  812b90:	1944d83a 	srl	r2,r3,r5
  812b94:	1144983a 	sll	r2,r2,r5
  812b98:	18bff41e 	bne	r3,r2,812b6c <__any_on+0x3c>
  812b9c:	003feb06 	br	812b4c <__any_on+0x1c>
  812ba0:	18c5883a 	add	r2,r3,r3
  812ba4:	1085883a 	add	r2,r2,r2
  812ba8:	208d883a 	add	r6,r4,r2
  812bac:	003fe706 	br	812b4c <__any_on+0x1c>
  812bb0:	0005883a 	mov	r2,zero
  812bb4:	f800283a 	ret

00812bb8 <_Balloc>:
  812bb8:	20c01317 	ldw	r3,76(r4)
  812bbc:	defffb04 	addi	sp,sp,-20
  812bc0:	dcc00315 	stw	r19,12(sp)
  812bc4:	dc800215 	stw	r18,8(sp)
  812bc8:	dfc00415 	stw	ra,16(sp)
  812bcc:	2825883a 	mov	r18,r5
  812bd0:	dc400115 	stw	r17,4(sp)
  812bd4:	dc000015 	stw	r16,0(sp)
  812bd8:	2027883a 	mov	r19,r4
  812bdc:	01800404 	movi	r6,16
  812be0:	01400104 	movi	r5,4
  812be4:	18001726 	beq	r3,zero,812c44 <_Balloc+0x8c>
  812be8:	01400044 	movi	r5,1
  812bec:	9485883a 	add	r2,r18,r18
  812bf0:	2ca2983a 	sll	r17,r5,r18
  812bf4:	1085883a 	add	r2,r2,r2
  812bf8:	10c7883a 	add	r3,r2,r3
  812bfc:	1c000017 	ldw	r16,0(r3)
  812c00:	8c4d883a 	add	r6,r17,r17
  812c04:	318d883a 	add	r6,r6,r6
  812c08:	9809883a 	mov	r4,r19
  812c0c:	31800504 	addi	r6,r6,20
  812c10:	80001226 	beq	r16,zero,812c5c <_Balloc+0xa4>
  812c14:	80800017 	ldw	r2,0(r16)
  812c18:	18800015 	stw	r2,0(r3)
  812c1c:	80000415 	stw	zero,16(r16)
  812c20:	80000315 	stw	zero,12(r16)
  812c24:	8005883a 	mov	r2,r16
  812c28:	dfc00417 	ldw	ra,16(sp)
  812c2c:	dcc00317 	ldw	r19,12(sp)
  812c30:	dc800217 	ldw	r18,8(sp)
  812c34:	dc400117 	ldw	r17,4(sp)
  812c38:	dc000017 	ldw	r16,0(sp)
  812c3c:	dec00504 	addi	sp,sp,20
  812c40:	f800283a 	ret
  812c44:	08139400 	call	813940 <_calloc_r>
  812c48:	1007883a 	mov	r3,r2
  812c4c:	0021883a 	mov	r16,zero
  812c50:	98801315 	stw	r2,76(r19)
  812c54:	103fe41e 	bne	r2,zero,812be8 <_Balloc+0x30>
  812c58:	003ff206 	br	812c24 <_Balloc+0x6c>
  812c5c:	08139400 	call	813940 <_calloc_r>
  812c60:	103ff026 	beq	r2,zero,812c24 <_Balloc+0x6c>
  812c64:	1021883a 	mov	r16,r2
  812c68:	14800115 	stw	r18,4(r2)
  812c6c:	14400215 	stw	r17,8(r2)
  812c70:	003fea06 	br	812c1c <_Balloc+0x64>

00812c74 <__d2b>:
  812c74:	defff504 	addi	sp,sp,-44
  812c78:	dcc00515 	stw	r19,20(sp)
  812c7c:	04c00044 	movi	r19,1
  812c80:	dc000215 	stw	r16,8(sp)
  812c84:	2821883a 	mov	r16,r5
  812c88:	980b883a 	mov	r5,r19
  812c8c:	ddc00915 	stw	r23,36(sp)
  812c90:	dd800815 	stw	r22,32(sp)
  812c94:	dd400715 	stw	r21,28(sp)
  812c98:	dd000615 	stw	r20,24(sp)
  812c9c:	dc800415 	stw	r18,16(sp)
  812ca0:	dc400315 	stw	r17,12(sp)
  812ca4:	dfc00a15 	stw	ra,40(sp)
  812ca8:	3023883a 	mov	r17,r6
  812cac:	382d883a 	mov	r22,r7
  812cb0:	ddc00b17 	ldw	r23,44(sp)
  812cb4:	0812bb80 	call	812bb8 <_Balloc>
  812cb8:	1025883a 	mov	r18,r2
  812cbc:	00a00034 	movhi	r2,32768
  812cc0:	10bfffc4 	addi	r2,r2,-1
  812cc4:	8888703a 	and	r4,r17,r2
  812cc8:	202ad53a 	srli	r21,r4,20
  812ccc:	00800434 	movhi	r2,16
  812cd0:	10bfffc4 	addi	r2,r2,-1
  812cd4:	8886703a 	and	r3,r17,r2
  812cd8:	a829003a 	cmpeq	r20,r21,zero
  812cdc:	800b883a 	mov	r5,r16
  812ce0:	d8c00115 	stw	r3,4(sp)
  812ce4:	94000504 	addi	r16,r18,20
  812ce8:	a000021e 	bne	r20,zero,812cf4 <__d2b+0x80>
  812cec:	18c00434 	orhi	r3,r3,16
  812cf0:	d8c00115 	stw	r3,4(sp)
  812cf4:	28002726 	beq	r5,zero,812d94 <__d2b+0x120>
  812cf8:	d809883a 	mov	r4,sp
  812cfc:	d9400015 	stw	r5,0(sp)
  812d00:	08126d00 	call	8126d0 <__lo0bits>
  812d04:	100d883a 	mov	r6,r2
  812d08:	10003526 	beq	r2,zero,812de0 <__d2b+0x16c>
  812d0c:	d8c00117 	ldw	r3,4(sp)
  812d10:	00800804 	movi	r2,32
  812d14:	1185c83a 	sub	r2,r2,r6
  812d18:	d9000017 	ldw	r4,0(sp)
  812d1c:	1886983a 	sll	r3,r3,r2
  812d20:	1906b03a 	or	r3,r3,r4
  812d24:	90c00515 	stw	r3,20(r18)
  812d28:	d8c00117 	ldw	r3,4(sp)
  812d2c:	1986d83a 	srl	r3,r3,r6
  812d30:	d8c00115 	stw	r3,4(sp)
  812d34:	180b003a 	cmpeq	r5,r3,zero
  812d38:	00800084 	movi	r2,2
  812d3c:	114bc83a 	sub	r5,r2,r5
  812d40:	80c00115 	stw	r3,4(r16)
  812d44:	91400415 	stw	r5,16(r18)
  812d48:	a0001a1e 	bne	r20,zero,812db4 <__d2b+0x140>
  812d4c:	3545883a 	add	r2,r6,r21
  812d50:	10bef344 	addi	r2,r2,-1075
  812d54:	00c00d44 	movi	r3,53
  812d58:	b0800015 	stw	r2,0(r22)
  812d5c:	1987c83a 	sub	r3,r3,r6
  812d60:	b8c00015 	stw	r3,0(r23)
  812d64:	9005883a 	mov	r2,r18
  812d68:	dfc00a17 	ldw	ra,40(sp)
  812d6c:	ddc00917 	ldw	r23,36(sp)
  812d70:	dd800817 	ldw	r22,32(sp)
  812d74:	dd400717 	ldw	r21,28(sp)
  812d78:	dd000617 	ldw	r20,24(sp)
  812d7c:	dcc00517 	ldw	r19,20(sp)
  812d80:	dc800417 	ldw	r18,16(sp)
  812d84:	dc400317 	ldw	r17,12(sp)
  812d88:	dc000217 	ldw	r16,8(sp)
  812d8c:	dec00b04 	addi	sp,sp,44
  812d90:	f800283a 	ret
  812d94:	d9000104 	addi	r4,sp,4
  812d98:	08126d00 	call	8126d0 <__lo0bits>
  812d9c:	11800804 	addi	r6,r2,32
  812da0:	d8800117 	ldw	r2,4(sp)
  812da4:	94c00415 	stw	r19,16(r18)
  812da8:	980b883a 	mov	r5,r19
  812dac:	90800515 	stw	r2,20(r18)
  812db0:	a03fe626 	beq	r20,zero,812d4c <__d2b+0xd8>
  812db4:	2945883a 	add	r2,r5,r5
  812db8:	1085883a 	add	r2,r2,r2
  812dbc:	1405883a 	add	r2,r2,r16
  812dc0:	113fff17 	ldw	r4,-4(r2)
  812dc4:	30fef384 	addi	r3,r6,-1074
  812dc8:	2820917a 	slli	r16,r5,5
  812dcc:	b0c00015 	stw	r3,0(r22)
  812dd0:	08126600 	call	812660 <__hi0bits>
  812dd4:	80a1c83a 	sub	r16,r16,r2
  812dd8:	bc000015 	stw	r16,0(r23)
  812ddc:	003fe106 	br	812d64 <__d2b+0xf0>
  812de0:	d8800017 	ldw	r2,0(sp)
  812de4:	90800515 	stw	r2,20(r18)
  812de8:	d8c00117 	ldw	r3,4(sp)
  812dec:	003fd106 	br	812d34 <__d2b+0xc0>

00812df0 <__mdiff>:
  812df0:	defffb04 	addi	sp,sp,-20
  812df4:	dc000015 	stw	r16,0(sp)
  812df8:	2821883a 	mov	r16,r5
  812dfc:	dc800215 	stw	r18,8(sp)
  812e00:	300b883a 	mov	r5,r6
  812e04:	2025883a 	mov	r18,r4
  812e08:	8009883a 	mov	r4,r16
  812e0c:	dc400115 	stw	r17,4(sp)
  812e10:	dfc00415 	stw	ra,16(sp)
  812e14:	dcc00315 	stw	r19,12(sp)
  812e18:	3023883a 	mov	r17,r6
  812e1c:	08127940 	call	812794 <__mcmp>
  812e20:	10004226 	beq	r2,zero,812f2c <__mdiff+0x13c>
  812e24:	10005016 	blt	r2,zero,812f68 <__mdiff+0x178>
  812e28:	0027883a 	mov	r19,zero
  812e2c:	81400117 	ldw	r5,4(r16)
  812e30:	9009883a 	mov	r4,r18
  812e34:	0812bb80 	call	812bb8 <_Balloc>
  812e38:	1019883a 	mov	r12,r2
  812e3c:	82800417 	ldw	r10,16(r16)
  812e40:	88800417 	ldw	r2,16(r17)
  812e44:	81800504 	addi	r6,r16,20
  812e48:	5287883a 	add	r3,r10,r10
  812e4c:	1085883a 	add	r2,r2,r2
  812e50:	18c7883a 	add	r3,r3,r3
  812e54:	1085883a 	add	r2,r2,r2
  812e58:	8a000504 	addi	r8,r17,20
  812e5c:	64c00315 	stw	r19,12(r12)
  812e60:	30db883a 	add	r13,r6,r3
  812e64:	4097883a 	add	r11,r8,r2
  812e68:	61c00504 	addi	r7,r12,20
  812e6c:	0013883a 	mov	r9,zero
  812e70:	31000017 	ldw	r4,0(r6)
  812e74:	41400017 	ldw	r5,0(r8)
  812e78:	42000104 	addi	r8,r8,4
  812e7c:	20bfffcc 	andi	r2,r4,65535
  812e80:	28ffffcc 	andi	r3,r5,65535
  812e84:	10c5c83a 	sub	r2,r2,r3
  812e88:	1245883a 	add	r2,r2,r9
  812e8c:	2008d43a 	srli	r4,r4,16
  812e90:	280ad43a 	srli	r5,r5,16
  812e94:	1007d43a 	srai	r3,r2,16
  812e98:	3880000d 	sth	r2,0(r7)
  812e9c:	2149c83a 	sub	r4,r4,r5
  812ea0:	20c9883a 	add	r4,r4,r3
  812ea4:	3900008d 	sth	r4,2(r7)
  812ea8:	31800104 	addi	r6,r6,4
  812eac:	39c00104 	addi	r7,r7,4
  812eb0:	2013d43a 	srai	r9,r4,16
  812eb4:	42ffee36 	bltu	r8,r11,812e70 <__mdiff+0x80>
  812eb8:	33400c2e 	bgeu	r6,r13,812eec <__mdiff+0xfc>
  812ebc:	30800017 	ldw	r2,0(r6)
  812ec0:	31800104 	addi	r6,r6,4
  812ec4:	10ffffcc 	andi	r3,r2,65535
  812ec8:	1a47883a 	add	r3,r3,r9
  812ecc:	1004d43a 	srli	r2,r2,16
  812ed0:	1809d43a 	srai	r4,r3,16
  812ed4:	38c0000d 	sth	r3,0(r7)
  812ed8:	1105883a 	add	r2,r2,r4
  812edc:	3880008d 	sth	r2,2(r7)
  812ee0:	1013d43a 	srai	r9,r2,16
  812ee4:	39c00104 	addi	r7,r7,4
  812ee8:	337ff436 	bltu	r6,r13,812ebc <__mdiff+0xcc>
  812eec:	38bfff17 	ldw	r2,-4(r7)
  812ef0:	38ffff04 	addi	r3,r7,-4
  812ef4:	1000041e 	bne	r2,zero,812f08 <__mdiff+0x118>
  812ef8:	18ffff04 	addi	r3,r3,-4
  812efc:	18800017 	ldw	r2,0(r3)
  812f00:	52bfffc4 	addi	r10,r10,-1
  812f04:	103ffc26 	beq	r2,zero,812ef8 <__mdiff+0x108>
  812f08:	6005883a 	mov	r2,r12
  812f0c:	62800415 	stw	r10,16(r12)
  812f10:	dfc00417 	ldw	ra,16(sp)
  812f14:	dcc00317 	ldw	r19,12(sp)
  812f18:	dc800217 	ldw	r18,8(sp)
  812f1c:	dc400117 	ldw	r17,4(sp)
  812f20:	dc000017 	ldw	r16,0(sp)
  812f24:	dec00504 	addi	sp,sp,20
  812f28:	f800283a 	ret
  812f2c:	9009883a 	mov	r4,r18
  812f30:	000b883a 	mov	r5,zero
  812f34:	0812bb80 	call	812bb8 <_Balloc>
  812f38:	1019883a 	mov	r12,r2
  812f3c:	00800044 	movi	r2,1
  812f40:	60800415 	stw	r2,16(r12)
  812f44:	6005883a 	mov	r2,r12
  812f48:	60000515 	stw	zero,20(r12)
  812f4c:	dfc00417 	ldw	ra,16(sp)
  812f50:	dcc00317 	ldw	r19,12(sp)
  812f54:	dc800217 	ldw	r18,8(sp)
  812f58:	dc400117 	ldw	r17,4(sp)
  812f5c:	dc000017 	ldw	r16,0(sp)
  812f60:	dec00504 	addi	sp,sp,20
  812f64:	f800283a 	ret
  812f68:	880d883a 	mov	r6,r17
  812f6c:	04c00044 	movi	r19,1
  812f70:	8023883a 	mov	r17,r16
  812f74:	3021883a 	mov	r16,r6
  812f78:	003fac06 	br	812e2c <__mdiff+0x3c>

00812f7c <__lshift>:
  812f7c:	defff904 	addi	sp,sp,-28
  812f80:	28800417 	ldw	r2,16(r5)
  812f84:	dc000015 	stw	r16,0(sp)
  812f88:	3021d17a 	srai	r16,r6,5
  812f8c:	28c00217 	ldw	r3,8(r5)
  812f90:	10800044 	addi	r2,r2,1
  812f94:	dc400115 	stw	r17,4(sp)
  812f98:	80a3883a 	add	r17,r16,r2
  812f9c:	dd400515 	stw	r21,20(sp)
  812fa0:	dd000415 	stw	r20,16(sp)
  812fa4:	dc800215 	stw	r18,8(sp)
  812fa8:	dfc00615 	stw	ra,24(sp)
  812fac:	2825883a 	mov	r18,r5
  812fb0:	dcc00315 	stw	r19,12(sp)
  812fb4:	3029883a 	mov	r20,r6
  812fb8:	202b883a 	mov	r21,r4
  812fbc:	29400117 	ldw	r5,4(r5)
  812fc0:	1c40030e 	bge	r3,r17,812fd0 <__lshift+0x54>
  812fc4:	18c7883a 	add	r3,r3,r3
  812fc8:	29400044 	addi	r5,r5,1
  812fcc:	1c7ffd16 	blt	r3,r17,812fc4 <__lshift+0x48>
  812fd0:	a809883a 	mov	r4,r21
  812fd4:	0812bb80 	call	812bb8 <_Balloc>
  812fd8:	1027883a 	mov	r19,r2
  812fdc:	11400504 	addi	r5,r2,20
  812fe0:	0400090e 	bge	zero,r16,813008 <__lshift+0x8c>
  812fe4:	2805883a 	mov	r2,r5
  812fe8:	0007883a 	mov	r3,zero
  812fec:	18c00044 	addi	r3,r3,1
  812ff0:	10000015 	stw	zero,0(r2)
  812ff4:	10800104 	addi	r2,r2,4
  812ff8:	80fffc1e 	bne	r16,r3,812fec <__lshift+0x70>
  812ffc:	8405883a 	add	r2,r16,r16
  813000:	1085883a 	add	r2,r2,r2
  813004:	288b883a 	add	r5,r5,r2
  813008:	90800417 	ldw	r2,16(r18)
  81300c:	91000504 	addi	r4,r18,20
  813010:	a18007cc 	andi	r6,r20,31
  813014:	1085883a 	add	r2,r2,r2
  813018:	1085883a 	add	r2,r2,r2
  81301c:	208f883a 	add	r7,r4,r2
  813020:	30001e26 	beq	r6,zero,81309c <__lshift+0x120>
  813024:	00800804 	movi	r2,32
  813028:	1191c83a 	sub	r8,r2,r6
  81302c:	0007883a 	mov	r3,zero
  813030:	20800017 	ldw	r2,0(r4)
  813034:	1184983a 	sll	r2,r2,r6
  813038:	1884b03a 	or	r2,r3,r2
  81303c:	28800015 	stw	r2,0(r5)
  813040:	20c00017 	ldw	r3,0(r4)
  813044:	21000104 	addi	r4,r4,4
  813048:	29400104 	addi	r5,r5,4
  81304c:	1a06d83a 	srl	r3,r3,r8
  813050:	21fff736 	bltu	r4,r7,813030 <__lshift+0xb4>
  813054:	28c00015 	stw	r3,0(r5)
  813058:	18000126 	beq	r3,zero,813060 <__lshift+0xe4>
  81305c:	8c400044 	addi	r17,r17,1
  813060:	88bfffc4 	addi	r2,r17,-1
  813064:	98800415 	stw	r2,16(r19)
  813068:	a809883a 	mov	r4,r21
  81306c:	900b883a 	mov	r5,r18
  813070:	08126380 	call	812638 <_Bfree>
  813074:	9805883a 	mov	r2,r19
  813078:	dfc00617 	ldw	ra,24(sp)
  81307c:	dd400517 	ldw	r21,20(sp)
  813080:	dd000417 	ldw	r20,16(sp)
  813084:	dcc00317 	ldw	r19,12(sp)
  813088:	dc800217 	ldw	r18,8(sp)
  81308c:	dc400117 	ldw	r17,4(sp)
  813090:	dc000017 	ldw	r16,0(sp)
  813094:	dec00704 	addi	sp,sp,28
  813098:	f800283a 	ret
  81309c:	20800017 	ldw	r2,0(r4)
  8130a0:	21000104 	addi	r4,r4,4
  8130a4:	28800015 	stw	r2,0(r5)
  8130a8:	29400104 	addi	r5,r5,4
  8130ac:	21ffec2e 	bgeu	r4,r7,813060 <__lshift+0xe4>
  8130b0:	20800017 	ldw	r2,0(r4)
  8130b4:	21000104 	addi	r4,r4,4
  8130b8:	28800015 	stw	r2,0(r5)
  8130bc:	29400104 	addi	r5,r5,4
  8130c0:	21fff636 	bltu	r4,r7,81309c <__lshift+0x120>
  8130c4:	003fe606 	br	813060 <__lshift+0xe4>

008130c8 <__multiply>:
  8130c8:	defff904 	addi	sp,sp,-28
  8130cc:	dcc00315 	stw	r19,12(sp)
  8130d0:	dc800215 	stw	r18,8(sp)
  8130d4:	2cc00417 	ldw	r19,16(r5)
  8130d8:	34800417 	ldw	r18,16(r6)
  8130dc:	dd000415 	stw	r20,16(sp)
  8130e0:	dc400115 	stw	r17,4(sp)
  8130e4:	dfc00615 	stw	ra,24(sp)
  8130e8:	dd400515 	stw	r21,20(sp)
  8130ec:	dc000015 	stw	r16,0(sp)
  8130f0:	2823883a 	mov	r17,r5
  8130f4:	3029883a 	mov	r20,r6
  8130f8:	9c80040e 	bge	r19,r18,81310c <__multiply+0x44>
  8130fc:	9027883a 	mov	r19,r18
  813100:	2c800417 	ldw	r18,16(r5)
  813104:	2829883a 	mov	r20,r5
  813108:	3023883a 	mov	r17,r6
  81310c:	88800217 	ldw	r2,8(r17)
  813110:	9ca1883a 	add	r16,r19,r18
  813114:	89400117 	ldw	r5,4(r17)
  813118:	1400010e 	bge	r2,r16,813120 <__multiply+0x58>
  81311c:	29400044 	addi	r5,r5,1
  813120:	0812bb80 	call	812bb8 <_Balloc>
  813124:	102b883a 	mov	r21,r2
  813128:	8405883a 	add	r2,r16,r16
  81312c:	1085883a 	add	r2,r2,r2
  813130:	a9000504 	addi	r4,r21,20
  813134:	209d883a 	add	r14,r4,r2
  813138:	2380042e 	bgeu	r4,r14,81314c <__multiply+0x84>
  81313c:	2005883a 	mov	r2,r4
  813140:	10000015 	stw	zero,0(r2)
  813144:	10800104 	addi	r2,r2,4
  813148:	13bffd36 	bltu	r2,r14,813140 <__multiply+0x78>
  81314c:	9485883a 	add	r2,r18,r18
  813150:	9cc7883a 	add	r3,r19,r19
  813154:	a1800504 	addi	r6,r20,20
  813158:	1085883a 	add	r2,r2,r2
  81315c:	8b400504 	addi	r13,r17,20
  813160:	18c7883a 	add	r3,r3,r3
  813164:	309f883a 	add	r15,r6,r2
  813168:	68d7883a 	add	r11,r13,r3
  81316c:	33c03b2e 	bgeu	r6,r15,81325c <__multiply+0x194>
  813170:	2019883a 	mov	r12,r4
  813174:	30800017 	ldw	r2,0(r6)
  813178:	127fffcc 	andi	r9,r2,65535
  81317c:	48001826 	beq	r9,zero,8131e0 <__multiply+0x118>
  813180:	6811883a 	mov	r8,r13
  813184:	600f883a 	mov	r7,r12
  813188:	0015883a 	mov	r10,zero
  81318c:	40c00017 	ldw	r3,0(r8)
  813190:	39400017 	ldw	r5,0(r7)
  813194:	42000104 	addi	r8,r8,4
  813198:	193fffcc 	andi	r4,r3,65535
  81319c:	4909383a 	mul	r4,r9,r4
  8131a0:	1806d43a 	srli	r3,r3,16
  8131a4:	28bfffcc 	andi	r2,r5,65535
  8131a8:	5085883a 	add	r2,r10,r2
  8131ac:	2089883a 	add	r4,r4,r2
  8131b0:	48c7383a 	mul	r3,r9,r3
  8131b4:	280ad43a 	srli	r5,r5,16
  8131b8:	2004d43a 	srli	r2,r4,16
  8131bc:	3900000d 	sth	r4,0(r7)
  8131c0:	1947883a 	add	r3,r3,r5
  8131c4:	10c5883a 	add	r2,r2,r3
  8131c8:	3880008d 	sth	r2,2(r7)
  8131cc:	1014d43a 	srli	r10,r2,16
  8131d0:	39c00104 	addi	r7,r7,4
  8131d4:	42ffed36 	bltu	r8,r11,81318c <__multiply+0xc4>
  8131d8:	3a800015 	stw	r10,0(r7)
  8131dc:	30800017 	ldw	r2,0(r6)
  8131e0:	1012d43a 	srli	r9,r2,16
  8131e4:	48001926 	beq	r9,zero,81324c <__multiply+0x184>
  8131e8:	60800017 	ldw	r2,0(r12)
  8131ec:	6811883a 	mov	r8,r13
  8131f0:	600f883a 	mov	r7,r12
  8131f4:	0015883a 	mov	r10,zero
  8131f8:	100b883a 	mov	r5,r2
  8131fc:	41000017 	ldw	r4,0(r8)
  813200:	2806d43a 	srli	r3,r5,16
  813204:	3880000d 	sth	r2,0(r7)
  813208:	20bfffcc 	andi	r2,r4,65535
  81320c:	4885383a 	mul	r2,r9,r2
  813210:	50c7883a 	add	r3,r10,r3
  813214:	2008d43a 	srli	r4,r4,16
  813218:	10c5883a 	add	r2,r2,r3
  81321c:	3880008d 	sth	r2,2(r7)
  813220:	39c00104 	addi	r7,r7,4
  813224:	39400017 	ldw	r5,0(r7)
  813228:	4909383a 	mul	r4,r9,r4
  81322c:	1004d43a 	srli	r2,r2,16
  813230:	28ffffcc 	andi	r3,r5,65535
  813234:	20c9883a 	add	r4,r4,r3
  813238:	1105883a 	add	r2,r2,r4
  81323c:	42000104 	addi	r8,r8,4
  813240:	1014d43a 	srli	r10,r2,16
  813244:	42ffed36 	bltu	r8,r11,8131fc <__multiply+0x134>
  813248:	38800015 	stw	r2,0(r7)
  81324c:	31800104 	addi	r6,r6,4
  813250:	33c0022e 	bgeu	r6,r15,81325c <__multiply+0x194>
  813254:	63000104 	addi	r12,r12,4
  813258:	003fc606 	br	813174 <__multiply+0xac>
  81325c:	0400090e 	bge	zero,r16,813284 <__multiply+0x1bc>
  813260:	70bfff17 	ldw	r2,-4(r14)
  813264:	70ffff04 	addi	r3,r14,-4
  813268:	10000326 	beq	r2,zero,813278 <__multiply+0x1b0>
  81326c:	00000506 	br	813284 <__multiply+0x1bc>
  813270:	18800017 	ldw	r2,0(r3)
  813274:	1000031e 	bne	r2,zero,813284 <__multiply+0x1bc>
  813278:	843fffc4 	addi	r16,r16,-1
  81327c:	18ffff04 	addi	r3,r3,-4
  813280:	803ffb1e 	bne	r16,zero,813270 <__multiply+0x1a8>
  813284:	a805883a 	mov	r2,r21
  813288:	ac000415 	stw	r16,16(r21)
  81328c:	dfc00617 	ldw	ra,24(sp)
  813290:	dd400517 	ldw	r21,20(sp)
  813294:	dd000417 	ldw	r20,16(sp)
  813298:	dcc00317 	ldw	r19,12(sp)
  81329c:	dc800217 	ldw	r18,8(sp)
  8132a0:	dc400117 	ldw	r17,4(sp)
  8132a4:	dc000017 	ldw	r16,0(sp)
  8132a8:	dec00704 	addi	sp,sp,28
  8132ac:	f800283a 	ret

008132b0 <__i2b>:
  8132b0:	defffd04 	addi	sp,sp,-12
  8132b4:	dc000015 	stw	r16,0(sp)
  8132b8:	04000044 	movi	r16,1
  8132bc:	dc800115 	stw	r18,4(sp)
  8132c0:	2825883a 	mov	r18,r5
  8132c4:	800b883a 	mov	r5,r16
  8132c8:	dfc00215 	stw	ra,8(sp)
  8132cc:	0812bb80 	call	812bb8 <_Balloc>
  8132d0:	14000415 	stw	r16,16(r2)
  8132d4:	14800515 	stw	r18,20(r2)
  8132d8:	dfc00217 	ldw	ra,8(sp)
  8132dc:	dc800117 	ldw	r18,4(sp)
  8132e0:	dc000017 	ldw	r16,0(sp)
  8132e4:	dec00304 	addi	sp,sp,12
  8132e8:	f800283a 	ret

008132ec <__multadd>:
  8132ec:	defffa04 	addi	sp,sp,-24
  8132f0:	dc800215 	stw	r18,8(sp)
  8132f4:	2c800417 	ldw	r18,16(r5)
  8132f8:	dd000415 	stw	r20,16(sp)
  8132fc:	dcc00315 	stw	r19,12(sp)
  813300:	dc000015 	stw	r16,0(sp)
  813304:	dfc00515 	stw	ra,20(sp)
  813308:	3821883a 	mov	r16,r7
  81330c:	dc400115 	stw	r17,4(sp)
  813310:	2827883a 	mov	r19,r5
  813314:	2029883a 	mov	r20,r4
  813318:	2a000504 	addi	r8,r5,20
  81331c:	000f883a 	mov	r7,zero
  813320:	40800017 	ldw	r2,0(r8)
  813324:	39c00044 	addi	r7,r7,1
  813328:	10ffffcc 	andi	r3,r2,65535
  81332c:	1987383a 	mul	r3,r3,r6
  813330:	1004d43a 	srli	r2,r2,16
  813334:	1c07883a 	add	r3,r3,r16
  813338:	180ad43a 	srli	r5,r3,16
  81333c:	1185383a 	mul	r2,r2,r6
  813340:	18ffffcc 	andi	r3,r3,65535
  813344:	1145883a 	add	r2,r2,r5
  813348:	1008943a 	slli	r4,r2,16
  81334c:	1020d43a 	srli	r16,r2,16
  813350:	20c9883a 	add	r4,r4,r3
  813354:	41000015 	stw	r4,0(r8)
  813358:	42000104 	addi	r8,r8,4
  81335c:	3cbff016 	blt	r7,r18,813320 <__multadd+0x34>
  813360:	80000826 	beq	r16,zero,813384 <__multadd+0x98>
  813364:	98800217 	ldw	r2,8(r19)
  813368:	90800f0e 	bge	r18,r2,8133a8 <__multadd+0xbc>
  81336c:	9485883a 	add	r2,r18,r18
  813370:	1085883a 	add	r2,r2,r2
  813374:	14c5883a 	add	r2,r2,r19
  813378:	90c00044 	addi	r3,r18,1
  81337c:	14000515 	stw	r16,20(r2)
  813380:	98c00415 	stw	r3,16(r19)
  813384:	9805883a 	mov	r2,r19
  813388:	dfc00517 	ldw	ra,20(sp)
  81338c:	dd000417 	ldw	r20,16(sp)
  813390:	dcc00317 	ldw	r19,12(sp)
  813394:	dc800217 	ldw	r18,8(sp)
  813398:	dc400117 	ldw	r17,4(sp)
  81339c:	dc000017 	ldw	r16,0(sp)
  8133a0:	dec00604 	addi	sp,sp,24
  8133a4:	f800283a 	ret
  8133a8:	99400117 	ldw	r5,4(r19)
  8133ac:	a009883a 	mov	r4,r20
  8133b0:	29400044 	addi	r5,r5,1
  8133b4:	0812bb80 	call	812bb8 <_Balloc>
  8133b8:	99800417 	ldw	r6,16(r19)
  8133bc:	99400304 	addi	r5,r19,12
  8133c0:	11000304 	addi	r4,r2,12
  8133c4:	318d883a 	add	r6,r6,r6
  8133c8:	318d883a 	add	r6,r6,r6
  8133cc:	31800204 	addi	r6,r6,8
  8133d0:	1023883a 	mov	r17,r2
  8133d4:	080c2c00 	call	80c2c0 <memcpy>
  8133d8:	980b883a 	mov	r5,r19
  8133dc:	a009883a 	mov	r4,r20
  8133e0:	08126380 	call	812638 <_Bfree>
  8133e4:	8827883a 	mov	r19,r17
  8133e8:	003fe006 	br	81336c <__multadd+0x80>

008133ec <__pow5mult>:
  8133ec:	defffa04 	addi	sp,sp,-24
  8133f0:	308000cc 	andi	r2,r6,3
  8133f4:	dd000415 	stw	r20,16(sp)
  8133f8:	dcc00315 	stw	r19,12(sp)
  8133fc:	dc000015 	stw	r16,0(sp)
  813400:	dfc00515 	stw	ra,20(sp)
  813404:	dc800215 	stw	r18,8(sp)
  813408:	dc400115 	stw	r17,4(sp)
  81340c:	3021883a 	mov	r16,r6
  813410:	2027883a 	mov	r19,r4
  813414:	2829883a 	mov	r20,r5
  813418:	10002b1e 	bne	r2,zero,8134c8 <__pow5mult+0xdc>
  81341c:	8025d0ba 	srai	r18,r16,2
  813420:	90001b26 	beq	r18,zero,813490 <__pow5mult+0xa4>
  813424:	9c001217 	ldw	r16,72(r19)
  813428:	8000081e 	bne	r16,zero,81344c <__pow5mult+0x60>
  81342c:	00003006 	br	8134f0 <__pow5mult+0x104>
  813430:	800b883a 	mov	r5,r16
  813434:	800d883a 	mov	r6,r16
  813438:	9809883a 	mov	r4,r19
  81343c:	90001426 	beq	r18,zero,813490 <__pow5mult+0xa4>
  813440:	80800017 	ldw	r2,0(r16)
  813444:	10001b26 	beq	r2,zero,8134b4 <__pow5mult+0xc8>
  813448:	1021883a 	mov	r16,r2
  81344c:	9080004c 	andi	r2,r18,1
  813450:	1005003a 	cmpeq	r2,r2,zero
  813454:	9025d07a 	srai	r18,r18,1
  813458:	800d883a 	mov	r6,r16
  81345c:	9809883a 	mov	r4,r19
  813460:	a00b883a 	mov	r5,r20
  813464:	103ff21e 	bne	r2,zero,813430 <__pow5mult+0x44>
  813468:	08130c80 	call	8130c8 <__multiply>
  81346c:	a00b883a 	mov	r5,r20
  813470:	9809883a 	mov	r4,r19
  813474:	1023883a 	mov	r17,r2
  813478:	08126380 	call	812638 <_Bfree>
  81347c:	8829883a 	mov	r20,r17
  813480:	800b883a 	mov	r5,r16
  813484:	800d883a 	mov	r6,r16
  813488:	9809883a 	mov	r4,r19
  81348c:	903fec1e 	bne	r18,zero,813440 <__pow5mult+0x54>
  813490:	a005883a 	mov	r2,r20
  813494:	dfc00517 	ldw	ra,20(sp)
  813498:	dd000417 	ldw	r20,16(sp)
  81349c:	dcc00317 	ldw	r19,12(sp)
  8134a0:	dc800217 	ldw	r18,8(sp)
  8134a4:	dc400117 	ldw	r17,4(sp)
  8134a8:	dc000017 	ldw	r16,0(sp)
  8134ac:	dec00604 	addi	sp,sp,24
  8134b0:	f800283a 	ret
  8134b4:	08130c80 	call	8130c8 <__multiply>
  8134b8:	80800015 	stw	r2,0(r16)
  8134bc:	1021883a 	mov	r16,r2
  8134c0:	10000015 	stw	zero,0(r2)
  8134c4:	003fe106 	br	81344c <__pow5mult+0x60>
  8134c8:	1085883a 	add	r2,r2,r2
  8134cc:	00c020b4 	movhi	r3,130
  8134d0:	18c2f104 	addi	r3,r3,3012
  8134d4:	1085883a 	add	r2,r2,r2
  8134d8:	10c5883a 	add	r2,r2,r3
  8134dc:	11bfff17 	ldw	r6,-4(r2)
  8134e0:	000f883a 	mov	r7,zero
  8134e4:	08132ec0 	call	8132ec <__multadd>
  8134e8:	1029883a 	mov	r20,r2
  8134ec:	003fcb06 	br	81341c <__pow5mult+0x30>
  8134f0:	9809883a 	mov	r4,r19
  8134f4:	01409c44 	movi	r5,625
  8134f8:	08132b00 	call	8132b0 <__i2b>
  8134fc:	98801215 	stw	r2,72(r19)
  813500:	1021883a 	mov	r16,r2
  813504:	10000015 	stw	zero,0(r2)
  813508:	003fd006 	br	81344c <__pow5mult+0x60>

0081350c <__s2b>:
  81350c:	defff904 	addi	sp,sp,-28
  813510:	dcc00315 	stw	r19,12(sp)
  813514:	dc800215 	stw	r18,8(sp)
  813518:	2827883a 	mov	r19,r5
  81351c:	2025883a 	mov	r18,r4
  813520:	01400244 	movi	r5,9
  813524:	39000204 	addi	r4,r7,8
  813528:	dd000415 	stw	r20,16(sp)
  81352c:	dc400115 	stw	r17,4(sp)
  813530:	dfc00615 	stw	ra,24(sp)
  813534:	dd400515 	stw	r21,20(sp)
  813538:	dc000015 	stw	r16,0(sp)
  81353c:	3829883a 	mov	r20,r7
  813540:	3023883a 	mov	r17,r6
  813544:	080b2100 	call	80b210 <__divsi3>
  813548:	00c00044 	movi	r3,1
  81354c:	1880350e 	bge	r3,r2,813624 <__s2b+0x118>
  813550:	000b883a 	mov	r5,zero
  813554:	18c7883a 	add	r3,r3,r3
  813558:	29400044 	addi	r5,r5,1
  81355c:	18bffd16 	blt	r3,r2,813554 <__s2b+0x48>
  813560:	9009883a 	mov	r4,r18
  813564:	0812bb80 	call	812bb8 <_Balloc>
  813568:	1011883a 	mov	r8,r2
  81356c:	d8800717 	ldw	r2,28(sp)
  813570:	00c00044 	movi	r3,1
  813574:	01800244 	movi	r6,9
  813578:	40800515 	stw	r2,20(r8)
  81357c:	40c00415 	stw	r3,16(r8)
  813580:	3440260e 	bge	r6,r17,81361c <__s2b+0x110>
  813584:	3021883a 	mov	r16,r6
  813588:	99ab883a 	add	r21,r19,r6
  81358c:	9c05883a 	add	r2,r19,r16
  813590:	11c00007 	ldb	r7,0(r2)
  813594:	400b883a 	mov	r5,r8
  813598:	9009883a 	mov	r4,r18
  81359c:	39fff404 	addi	r7,r7,-48
  8135a0:	01800284 	movi	r6,10
  8135a4:	08132ec0 	call	8132ec <__multadd>
  8135a8:	84000044 	addi	r16,r16,1
  8135ac:	1011883a 	mov	r8,r2
  8135b0:	8c3ff61e 	bne	r17,r16,81358c <__s2b+0x80>
  8135b4:	ac45883a 	add	r2,r21,r17
  8135b8:	117ffe04 	addi	r5,r2,-8
  8135bc:	880d883a 	mov	r6,r17
  8135c0:	35000c0e 	bge	r6,r20,8135f4 <__s2b+0xe8>
  8135c4:	a185c83a 	sub	r2,r20,r6
  8135c8:	2821883a 	mov	r16,r5
  8135cc:	28a3883a 	add	r17,r5,r2
  8135d0:	81c00007 	ldb	r7,0(r16)
  8135d4:	400b883a 	mov	r5,r8
  8135d8:	9009883a 	mov	r4,r18
  8135dc:	39fff404 	addi	r7,r7,-48
  8135e0:	01800284 	movi	r6,10
  8135e4:	08132ec0 	call	8132ec <__multadd>
  8135e8:	84000044 	addi	r16,r16,1
  8135ec:	1011883a 	mov	r8,r2
  8135f0:	847ff71e 	bne	r16,r17,8135d0 <__s2b+0xc4>
  8135f4:	4005883a 	mov	r2,r8
  8135f8:	dfc00617 	ldw	ra,24(sp)
  8135fc:	dd400517 	ldw	r21,20(sp)
  813600:	dd000417 	ldw	r20,16(sp)
  813604:	dcc00317 	ldw	r19,12(sp)
  813608:	dc800217 	ldw	r18,8(sp)
  81360c:	dc400117 	ldw	r17,4(sp)
  813610:	dc000017 	ldw	r16,0(sp)
  813614:	dec00704 	addi	sp,sp,28
  813618:	f800283a 	ret
  81361c:	99400284 	addi	r5,r19,10
  813620:	003fe706 	br	8135c0 <__s2b+0xb4>
  813624:	000b883a 	mov	r5,zero
  813628:	003fcd06 	br	813560 <__s2b+0x54>

0081362c <__isinfd>:
  81362c:	200d883a 	mov	r6,r4
  813630:	0109c83a 	sub	r4,zero,r4
  813634:	2188b03a 	or	r4,r4,r6
  813638:	2008d7fa 	srli	r4,r4,31
  81363c:	00a00034 	movhi	r2,32768
  813640:	10bfffc4 	addi	r2,r2,-1
  813644:	1144703a 	and	r2,r2,r5
  813648:	2088b03a 	or	r4,r4,r2
  81364c:	009ffc34 	movhi	r2,32752
  813650:	1105c83a 	sub	r2,r2,r4
  813654:	0087c83a 	sub	r3,zero,r2
  813658:	10c4b03a 	or	r2,r2,r3
  81365c:	1004d7fa 	srli	r2,r2,31
  813660:	00c00044 	movi	r3,1
  813664:	1885c83a 	sub	r2,r3,r2
  813668:	f800283a 	ret

0081366c <__isnand>:
  81366c:	200d883a 	mov	r6,r4
  813670:	0109c83a 	sub	r4,zero,r4
  813674:	2188b03a 	or	r4,r4,r6
  813678:	2008d7fa 	srli	r4,r4,31
  81367c:	00a00034 	movhi	r2,32768
  813680:	10bfffc4 	addi	r2,r2,-1
  813684:	1144703a 	and	r2,r2,r5
  813688:	2088b03a 	or	r4,r4,r2
  81368c:	009ffc34 	movhi	r2,32752
  813690:	1105c83a 	sub	r2,r2,r4
  813694:	1004d7fa 	srli	r2,r2,31
  813698:	f800283a 	ret

0081369c <__sclose>:
  81369c:	2940038f 	ldh	r5,14(r5)
  8136a0:	08139f41 	jmpi	8139f4 <_close_r>

008136a4 <__sseek>:
  8136a4:	defffe04 	addi	sp,sp,-8
  8136a8:	dc000015 	stw	r16,0(sp)
  8136ac:	2821883a 	mov	r16,r5
  8136b0:	2940038f 	ldh	r5,14(r5)
  8136b4:	dfc00115 	stw	ra,4(sp)
  8136b8:	0813c6c0 	call	813c6c <_lseek_r>
  8136bc:	1007883a 	mov	r3,r2
  8136c0:	00bfffc4 	movi	r2,-1
  8136c4:	18800926 	beq	r3,r2,8136ec <__sseek+0x48>
  8136c8:	8080030b 	ldhu	r2,12(r16)
  8136cc:	80c01415 	stw	r3,80(r16)
  8136d0:	10840014 	ori	r2,r2,4096
  8136d4:	8080030d 	sth	r2,12(r16)
  8136d8:	1805883a 	mov	r2,r3
  8136dc:	dfc00117 	ldw	ra,4(sp)
  8136e0:	dc000017 	ldw	r16,0(sp)
  8136e4:	dec00204 	addi	sp,sp,8
  8136e8:	f800283a 	ret
  8136ec:	8080030b 	ldhu	r2,12(r16)
  8136f0:	10bbffcc 	andi	r2,r2,61439
  8136f4:	8080030d 	sth	r2,12(r16)
  8136f8:	1805883a 	mov	r2,r3
  8136fc:	dfc00117 	ldw	ra,4(sp)
  813700:	dc000017 	ldw	r16,0(sp)
  813704:	dec00204 	addi	sp,sp,8
  813708:	f800283a 	ret

0081370c <__swrite>:
  81370c:	2880030b 	ldhu	r2,12(r5)
  813710:	defffb04 	addi	sp,sp,-20
  813714:	dcc00315 	stw	r19,12(sp)
  813718:	1080400c 	andi	r2,r2,256
  81371c:	dc800215 	stw	r18,8(sp)
  813720:	dc400115 	stw	r17,4(sp)
  813724:	dc000015 	stw	r16,0(sp)
  813728:	3027883a 	mov	r19,r6
  81372c:	3825883a 	mov	r18,r7
  813730:	dfc00415 	stw	ra,16(sp)
  813734:	2821883a 	mov	r16,r5
  813738:	000d883a 	mov	r6,zero
  81373c:	01c00084 	movi	r7,2
  813740:	2023883a 	mov	r17,r4
  813744:	10000226 	beq	r2,zero,813750 <__swrite+0x44>
  813748:	2940038f 	ldh	r5,14(r5)
  81374c:	0813c6c0 	call	813c6c <_lseek_r>
  813750:	8080030b 	ldhu	r2,12(r16)
  813754:	8140038f 	ldh	r5,14(r16)
  813758:	8809883a 	mov	r4,r17
  81375c:	10bbffcc 	andi	r2,r2,61439
  813760:	980d883a 	mov	r6,r19
  813764:	900f883a 	mov	r7,r18
  813768:	8080030d 	sth	r2,12(r16)
  81376c:	dfc00417 	ldw	ra,16(sp)
  813770:	dcc00317 	ldw	r19,12(sp)
  813774:	dc800217 	ldw	r18,8(sp)
  813778:	dc400117 	ldw	r17,4(sp)
  81377c:	dc000017 	ldw	r16,0(sp)
  813780:	dec00504 	addi	sp,sp,20
  813784:	08138c81 	jmpi	8138c8 <_write_r>

00813788 <__sread>:
  813788:	defffe04 	addi	sp,sp,-8
  81378c:	dc000015 	stw	r16,0(sp)
  813790:	2821883a 	mov	r16,r5
  813794:	2940038f 	ldh	r5,14(r5)
  813798:	dfc00115 	stw	ra,4(sp)
  81379c:	0813ce40 	call	813ce4 <_read_r>
  8137a0:	1007883a 	mov	r3,r2
  8137a4:	10000816 	blt	r2,zero,8137c8 <__sread+0x40>
  8137a8:	80801417 	ldw	r2,80(r16)
  8137ac:	10c5883a 	add	r2,r2,r3
  8137b0:	80801415 	stw	r2,80(r16)
  8137b4:	1805883a 	mov	r2,r3
  8137b8:	dfc00117 	ldw	ra,4(sp)
  8137bc:	dc000017 	ldw	r16,0(sp)
  8137c0:	dec00204 	addi	sp,sp,8
  8137c4:	f800283a 	ret
  8137c8:	8080030b 	ldhu	r2,12(r16)
  8137cc:	10bbffcc 	andi	r2,r2,61439
  8137d0:	8080030d 	sth	r2,12(r16)
  8137d4:	1805883a 	mov	r2,r3
  8137d8:	dfc00117 	ldw	ra,4(sp)
  8137dc:	dc000017 	ldw	r16,0(sp)
  8137e0:	dec00204 	addi	sp,sp,8
  8137e4:	f800283a 	ret

008137e8 <strchr>:
  8137e8:	208000cc 	andi	r2,r4,3
  8137ec:	2007883a 	mov	r3,r4
  8137f0:	1000311e 	bne	r2,zero,8138b8 <strchr+0xd0>
  8137f4:	29c03fcc 	andi	r7,r5,255
  8137f8:	0015883a 	mov	r10,zero
  8137fc:	0007883a 	mov	r3,zero
  813800:	01400104 	movi	r5,4
  813804:	5004923a 	slli	r2,r10,8
  813808:	18c00044 	addi	r3,r3,1
  81380c:	3894b03a 	or	r10,r7,r2
  813810:	197ffc1e 	bne	r3,r5,813804 <strchr+0x1c>
  813814:	200d883a 	mov	r6,r4
  813818:	21000017 	ldw	r4,0(r4)
  81381c:	017fbff4 	movhi	r5,65279
  813820:	297fbfc4 	addi	r5,r5,-257
  813824:	02202074 	movhi	r8,32897
  813828:	42202004 	addi	r8,r8,-32640
  81382c:	2145883a 	add	r2,r4,r5
  813830:	1204703a 	and	r2,r2,r8
  813834:	0106303a 	nor	r3,zero,r4
  813838:	10c4703a 	and	r2,r2,r3
  81383c:	1000151e 	bne	r2,zero,813894 <strchr+0xac>
  813840:	2284f03a 	xor	r2,r4,r10
  813844:	1147883a 	add	r3,r2,r5
  813848:	1a06703a 	and	r3,r3,r8
  81384c:	0084303a 	nor	r2,zero,r2
  813850:	10c4703a 	and	r2,r2,r3
  813854:	10000f1e 	bne	r2,zero,813894 <strchr+0xac>
  813858:	2813883a 	mov	r9,r5
  81385c:	00000106 	br	813864 <strchr+0x7c>
  813860:	18000c1e 	bne	r3,zero,813894 <strchr+0xac>
  813864:	31800104 	addi	r6,r6,4
  813868:	30800017 	ldw	r2,0(r6)
  81386c:	1286f03a 	xor	r3,r2,r10
  813870:	124b883a 	add	r5,r2,r9
  813874:	1a49883a 	add	r4,r3,r9
  813878:	2a0a703a 	and	r5,r5,r8
  81387c:	0084303a 	nor	r2,zero,r2
  813880:	2208703a 	and	r4,r4,r8
  813884:	00c6303a 	nor	r3,zero,r3
  813888:	1144703a 	and	r2,r2,r5
  81388c:	1906703a 	and	r3,r3,r4
  813890:	103ff326 	beq	r2,zero,813860 <strchr+0x78>
  813894:	3007883a 	mov	r3,r6
  813898:	00000206 	br	8138a4 <strchr+0xbc>
  81389c:	38800426 	beq	r7,r2,8138b0 <strchr+0xc8>
  8138a0:	18c00044 	addi	r3,r3,1
  8138a4:	18800003 	ldbu	r2,0(r3)
  8138a8:	103ffc1e 	bne	r2,zero,81389c <strchr+0xb4>
  8138ac:	3800041e 	bne	r7,zero,8138c0 <strchr+0xd8>
  8138b0:	1805883a 	mov	r2,r3
  8138b4:	f800283a 	ret
  8138b8:	29c03fcc 	andi	r7,r5,255
  8138bc:	003ff906 	br	8138a4 <strchr+0xbc>
  8138c0:	0005883a 	mov	r2,zero
  8138c4:	f800283a 	ret

008138c8 <_write_r>:
  8138c8:	defffd04 	addi	sp,sp,-12
  8138cc:	dc000015 	stw	r16,0(sp)
  8138d0:	040020b4 	movhi	r16,130
  8138d4:	8411c804 	addi	r16,r16,18208
  8138d8:	dc400115 	stw	r17,4(sp)
  8138dc:	80000015 	stw	zero,0(r16)
  8138e0:	2023883a 	mov	r17,r4
  8138e4:	2809883a 	mov	r4,r5
  8138e8:	300b883a 	mov	r5,r6
  8138ec:	380d883a 	mov	r6,r7
  8138f0:	dfc00215 	stw	ra,8(sp)
  8138f4:	0815e5c0 	call	815e5c <write>
  8138f8:	1007883a 	mov	r3,r2
  8138fc:	00bfffc4 	movi	r2,-1
  813900:	18800626 	beq	r3,r2,81391c <_write_r+0x54>
  813904:	1805883a 	mov	r2,r3
  813908:	dfc00217 	ldw	ra,8(sp)
  81390c:	dc400117 	ldw	r17,4(sp)
  813910:	dc000017 	ldw	r16,0(sp)
  813914:	dec00304 	addi	sp,sp,12
  813918:	f800283a 	ret
  81391c:	80800017 	ldw	r2,0(r16)
  813920:	103ff826 	beq	r2,zero,813904 <_write_r+0x3c>
  813924:	88800015 	stw	r2,0(r17)
  813928:	1805883a 	mov	r2,r3
  81392c:	dfc00217 	ldw	ra,8(sp)
  813930:	dc400117 	ldw	r17,4(sp)
  813934:	dc000017 	ldw	r16,0(sp)
  813938:	dec00304 	addi	sp,sp,12
  81393c:	f800283a 	ret

00813940 <_calloc_r>:
  813940:	298b383a 	mul	r5,r5,r6
  813944:	defffe04 	addi	sp,sp,-8
  813948:	dc000015 	stw	r16,0(sp)
  81394c:	dfc00115 	stw	ra,4(sp)
  813950:	080bb800 	call	80bb80 <_malloc_r>
  813954:	1021883a 	mov	r16,r2
  813958:	01c00904 	movi	r7,36
  81395c:	10000d26 	beq	r2,zero,813994 <_calloc_r+0x54>
  813960:	10ffff17 	ldw	r3,-4(r2)
  813964:	1009883a 	mov	r4,r2
  813968:	00bfff04 	movi	r2,-4
  81396c:	1886703a 	and	r3,r3,r2
  813970:	1887883a 	add	r3,r3,r2
  813974:	180d883a 	mov	r6,r3
  813978:	000b883a 	mov	r5,zero
  81397c:	38c01736 	bltu	r7,r3,8139dc <_calloc_r+0x9c>
  813980:	008004c4 	movi	r2,19
  813984:	10c00836 	bltu	r2,r3,8139a8 <_calloc_r+0x68>
  813988:	20000215 	stw	zero,8(r4)
  81398c:	20000015 	stw	zero,0(r4)
  813990:	20000115 	stw	zero,4(r4)
  813994:	8005883a 	mov	r2,r16
  813998:	dfc00117 	ldw	ra,4(sp)
  81399c:	dc000017 	ldw	r16,0(sp)
  8139a0:	dec00204 	addi	sp,sp,8
  8139a4:	f800283a 	ret
  8139a8:	008006c4 	movi	r2,27
  8139ac:	80000015 	stw	zero,0(r16)
  8139b0:	80000115 	stw	zero,4(r16)
  8139b4:	81000204 	addi	r4,r16,8
  8139b8:	10fff32e 	bgeu	r2,r3,813988 <_calloc_r+0x48>
  8139bc:	80000215 	stw	zero,8(r16)
  8139c0:	80000315 	stw	zero,12(r16)
  8139c4:	81000404 	addi	r4,r16,16
  8139c8:	19ffef1e 	bne	r3,r7,813988 <_calloc_r+0x48>
  8139cc:	81000604 	addi	r4,r16,24
  8139d0:	80000415 	stw	zero,16(r16)
  8139d4:	80000515 	stw	zero,20(r16)
  8139d8:	003feb06 	br	813988 <_calloc_r+0x48>
  8139dc:	080c3600 	call	80c360 <memset>
  8139e0:	8005883a 	mov	r2,r16
  8139e4:	dfc00117 	ldw	ra,4(sp)
  8139e8:	dc000017 	ldw	r16,0(sp)
  8139ec:	dec00204 	addi	sp,sp,8
  8139f0:	f800283a 	ret

008139f4 <_close_r>:
  8139f4:	defffd04 	addi	sp,sp,-12
  8139f8:	dc000015 	stw	r16,0(sp)
  8139fc:	040020b4 	movhi	r16,130
  813a00:	8411c804 	addi	r16,r16,18208
  813a04:	dc400115 	stw	r17,4(sp)
  813a08:	80000015 	stw	zero,0(r16)
  813a0c:	2023883a 	mov	r17,r4
  813a10:	2809883a 	mov	r4,r5
  813a14:	dfc00215 	stw	ra,8(sp)
  813a18:	08151980 	call	815198 <close>
  813a1c:	1007883a 	mov	r3,r2
  813a20:	00bfffc4 	movi	r2,-1
  813a24:	18800626 	beq	r3,r2,813a40 <_close_r+0x4c>
  813a28:	1805883a 	mov	r2,r3
  813a2c:	dfc00217 	ldw	ra,8(sp)
  813a30:	dc400117 	ldw	r17,4(sp)
  813a34:	dc000017 	ldw	r16,0(sp)
  813a38:	dec00304 	addi	sp,sp,12
  813a3c:	f800283a 	ret
  813a40:	80800017 	ldw	r2,0(r16)
  813a44:	103ff826 	beq	r2,zero,813a28 <_close_r+0x34>
  813a48:	88800015 	stw	r2,0(r17)
  813a4c:	1805883a 	mov	r2,r3
  813a50:	dfc00217 	ldw	ra,8(sp)
  813a54:	dc400117 	ldw	r17,4(sp)
  813a58:	dc000017 	ldw	r16,0(sp)
  813a5c:	dec00304 	addi	sp,sp,12
  813a60:	f800283a 	ret

00813a64 <_fclose_r>:
  813a64:	defffc04 	addi	sp,sp,-16
  813a68:	dc400115 	stw	r17,4(sp)
  813a6c:	dc000015 	stw	r16,0(sp)
  813a70:	dfc00315 	stw	ra,12(sp)
  813a74:	dc800215 	stw	r18,8(sp)
  813a78:	2821883a 	mov	r16,r5
  813a7c:	2023883a 	mov	r17,r4
  813a80:	28002926 	beq	r5,zero,813b28 <_fclose_r+0xc4>
  813a84:	08114e40 	call	8114e4 <__sfp_lock_acquire>
  813a88:	88000226 	beq	r17,zero,813a94 <_fclose_r+0x30>
  813a8c:	88800e17 	ldw	r2,56(r17)
  813a90:	10002d26 	beq	r2,zero,813b48 <_fclose_r+0xe4>
  813a94:	8080030f 	ldh	r2,12(r16)
  813a98:	10002226 	beq	r2,zero,813b24 <_fclose_r+0xc0>
  813a9c:	8809883a 	mov	r4,r17
  813aa0:	800b883a 	mov	r5,r16
  813aa4:	081125c0 	call	81125c <_fflush_r>
  813aa8:	1025883a 	mov	r18,r2
  813aac:	80800b17 	ldw	r2,44(r16)
  813ab0:	10000426 	beq	r2,zero,813ac4 <_fclose_r+0x60>
  813ab4:	81400717 	ldw	r5,28(r16)
  813ab8:	8809883a 	mov	r4,r17
  813abc:	103ee83a 	callr	r2
  813ac0:	10002a16 	blt	r2,zero,813b6c <_fclose_r+0x108>
  813ac4:	8080030b 	ldhu	r2,12(r16)
  813ac8:	1080200c 	andi	r2,r2,128
  813acc:	1000231e 	bne	r2,zero,813b5c <_fclose_r+0xf8>
  813ad0:	81400c17 	ldw	r5,48(r16)
  813ad4:	28000526 	beq	r5,zero,813aec <_fclose_r+0x88>
  813ad8:	80801004 	addi	r2,r16,64
  813adc:	28800226 	beq	r5,r2,813ae8 <_fclose_r+0x84>
  813ae0:	8809883a 	mov	r4,r17
  813ae4:	08118780 	call	811878 <_free_r>
  813ae8:	80000c15 	stw	zero,48(r16)
  813aec:	81401117 	ldw	r5,68(r16)
  813af0:	28000326 	beq	r5,zero,813b00 <_fclose_r+0x9c>
  813af4:	8809883a 	mov	r4,r17
  813af8:	08118780 	call	811878 <_free_r>
  813afc:	80001115 	stw	zero,68(r16)
  813b00:	8000030d 	sth	zero,12(r16)
  813b04:	08114e80 	call	8114e8 <__sfp_lock_release>
  813b08:	9005883a 	mov	r2,r18
  813b0c:	dfc00317 	ldw	ra,12(sp)
  813b10:	dc800217 	ldw	r18,8(sp)
  813b14:	dc400117 	ldw	r17,4(sp)
  813b18:	dc000017 	ldw	r16,0(sp)
  813b1c:	dec00404 	addi	sp,sp,16
  813b20:	f800283a 	ret
  813b24:	08114e80 	call	8114e8 <__sfp_lock_release>
  813b28:	0025883a 	mov	r18,zero
  813b2c:	9005883a 	mov	r2,r18
  813b30:	dfc00317 	ldw	ra,12(sp)
  813b34:	dc800217 	ldw	r18,8(sp)
  813b38:	dc400117 	ldw	r17,4(sp)
  813b3c:	dc000017 	ldw	r16,0(sp)
  813b40:	dec00404 	addi	sp,sp,16
  813b44:	f800283a 	ret
  813b48:	8809883a 	mov	r4,r17
  813b4c:	08114f40 	call	8114f4 <__sinit>
  813b50:	8080030f 	ldh	r2,12(r16)
  813b54:	103fd11e 	bne	r2,zero,813a9c <_fclose_r+0x38>
  813b58:	003ff206 	br	813b24 <_fclose_r+0xc0>
  813b5c:	81400417 	ldw	r5,16(r16)
  813b60:	8809883a 	mov	r4,r17
  813b64:	08118780 	call	811878 <_free_r>
  813b68:	003fd906 	br	813ad0 <_fclose_r+0x6c>
  813b6c:	04bfffc4 	movi	r18,-1
  813b70:	003fd406 	br	813ac4 <_fclose_r+0x60>

00813b74 <fclose>:
  813b74:	008020b4 	movhi	r2,130
  813b78:	108a6b04 	addi	r2,r2,10668
  813b7c:	200b883a 	mov	r5,r4
  813b80:	11000017 	ldw	r4,0(r2)
  813b84:	0813a641 	jmpi	813a64 <_fclose_r>

00813b88 <_fstat_r>:
  813b88:	defffd04 	addi	sp,sp,-12
  813b8c:	dc000015 	stw	r16,0(sp)
  813b90:	040020b4 	movhi	r16,130
  813b94:	8411c804 	addi	r16,r16,18208
  813b98:	dc400115 	stw	r17,4(sp)
  813b9c:	80000015 	stw	zero,0(r16)
  813ba0:	2023883a 	mov	r17,r4
  813ba4:	2809883a 	mov	r4,r5
  813ba8:	300b883a 	mov	r5,r6
  813bac:	dfc00215 	stw	ra,8(sp)
  813bb0:	08153200 	call	815320 <fstat>
  813bb4:	1007883a 	mov	r3,r2
  813bb8:	00bfffc4 	movi	r2,-1
  813bbc:	18800626 	beq	r3,r2,813bd8 <_fstat_r+0x50>
  813bc0:	1805883a 	mov	r2,r3
  813bc4:	dfc00217 	ldw	ra,8(sp)
  813bc8:	dc400117 	ldw	r17,4(sp)
  813bcc:	dc000017 	ldw	r16,0(sp)
  813bd0:	dec00304 	addi	sp,sp,12
  813bd4:	f800283a 	ret
  813bd8:	80800017 	ldw	r2,0(r16)
  813bdc:	103ff826 	beq	r2,zero,813bc0 <_fstat_r+0x38>
  813be0:	88800015 	stw	r2,0(r17)
  813be4:	1805883a 	mov	r2,r3
  813be8:	dfc00217 	ldw	ra,8(sp)
  813bec:	dc400117 	ldw	r17,4(sp)
  813bf0:	dc000017 	ldw	r16,0(sp)
  813bf4:	dec00304 	addi	sp,sp,12
  813bf8:	f800283a 	ret

00813bfc <_isatty_r>:
  813bfc:	defffd04 	addi	sp,sp,-12
  813c00:	dc000015 	stw	r16,0(sp)
  813c04:	040020b4 	movhi	r16,130
  813c08:	8411c804 	addi	r16,r16,18208
  813c0c:	dc400115 	stw	r17,4(sp)
  813c10:	80000015 	stw	zero,0(r16)
  813c14:	2023883a 	mov	r17,r4
  813c18:	2809883a 	mov	r4,r5
  813c1c:	dfc00215 	stw	ra,8(sp)
  813c20:	08156140 	call	815614 <isatty>
  813c24:	1007883a 	mov	r3,r2
  813c28:	00bfffc4 	movi	r2,-1
  813c2c:	18800626 	beq	r3,r2,813c48 <_isatty_r+0x4c>
  813c30:	1805883a 	mov	r2,r3
  813c34:	dfc00217 	ldw	ra,8(sp)
  813c38:	dc400117 	ldw	r17,4(sp)
  813c3c:	dc000017 	ldw	r16,0(sp)
  813c40:	dec00304 	addi	sp,sp,12
  813c44:	f800283a 	ret
  813c48:	80800017 	ldw	r2,0(r16)
  813c4c:	103ff826 	beq	r2,zero,813c30 <_isatty_r+0x34>
  813c50:	88800015 	stw	r2,0(r17)
  813c54:	1805883a 	mov	r2,r3
  813c58:	dfc00217 	ldw	ra,8(sp)
  813c5c:	dc400117 	ldw	r17,4(sp)
  813c60:	dc000017 	ldw	r16,0(sp)
  813c64:	dec00304 	addi	sp,sp,12
  813c68:	f800283a 	ret

00813c6c <_lseek_r>:
  813c6c:	defffd04 	addi	sp,sp,-12
  813c70:	dc000015 	stw	r16,0(sp)
  813c74:	040020b4 	movhi	r16,130
  813c78:	8411c804 	addi	r16,r16,18208
  813c7c:	dc400115 	stw	r17,4(sp)
  813c80:	80000015 	stw	zero,0(r16)
  813c84:	2023883a 	mov	r17,r4
  813c88:	2809883a 	mov	r4,r5
  813c8c:	300b883a 	mov	r5,r6
  813c90:	380d883a 	mov	r6,r7
  813c94:	dfc00215 	stw	ra,8(sp)
  813c98:	08158200 	call	815820 <lseek>
  813c9c:	1007883a 	mov	r3,r2
  813ca0:	00bfffc4 	movi	r2,-1
  813ca4:	18800626 	beq	r3,r2,813cc0 <_lseek_r+0x54>
  813ca8:	1805883a 	mov	r2,r3
  813cac:	dfc00217 	ldw	ra,8(sp)
  813cb0:	dc400117 	ldw	r17,4(sp)
  813cb4:	dc000017 	ldw	r16,0(sp)
  813cb8:	dec00304 	addi	sp,sp,12
  813cbc:	f800283a 	ret
  813cc0:	80800017 	ldw	r2,0(r16)
  813cc4:	103ff826 	beq	r2,zero,813ca8 <_lseek_r+0x3c>
  813cc8:	88800015 	stw	r2,0(r17)
  813ccc:	1805883a 	mov	r2,r3
  813cd0:	dfc00217 	ldw	ra,8(sp)
  813cd4:	dc400117 	ldw	r17,4(sp)
  813cd8:	dc000017 	ldw	r16,0(sp)
  813cdc:	dec00304 	addi	sp,sp,12
  813ce0:	f800283a 	ret

00813ce4 <_read_r>:
  813ce4:	defffd04 	addi	sp,sp,-12
  813ce8:	dc000015 	stw	r16,0(sp)
  813cec:	040020b4 	movhi	r16,130
  813cf0:	8411c804 	addi	r16,r16,18208
  813cf4:	dc400115 	stw	r17,4(sp)
  813cf8:	80000015 	stw	zero,0(r16)
  813cfc:	2023883a 	mov	r17,r4
  813d00:	2809883a 	mov	r4,r5
  813d04:	300b883a 	mov	r5,r6
  813d08:	380d883a 	mov	r6,r7
  813d0c:	dfc00215 	stw	ra,8(sp)
  813d10:	0815a1c0 	call	815a1c <read>
  813d14:	1007883a 	mov	r3,r2
  813d18:	00bfffc4 	movi	r2,-1
  813d1c:	18800626 	beq	r3,r2,813d38 <_read_r+0x54>
  813d20:	1805883a 	mov	r2,r3
  813d24:	dfc00217 	ldw	ra,8(sp)
  813d28:	dc400117 	ldw	r17,4(sp)
  813d2c:	dc000017 	ldw	r16,0(sp)
  813d30:	dec00304 	addi	sp,sp,12
  813d34:	f800283a 	ret
  813d38:	80800017 	ldw	r2,0(r16)
  813d3c:	103ff826 	beq	r2,zero,813d20 <_read_r+0x3c>
  813d40:	88800015 	stw	r2,0(r17)
  813d44:	1805883a 	mov	r2,r3
  813d48:	dfc00217 	ldw	ra,8(sp)
  813d4c:	dc400117 	ldw	r17,4(sp)
  813d50:	dc000017 	ldw	r16,0(sp)
  813d54:	dec00304 	addi	sp,sp,12
  813d58:	f800283a 	ret

00813d5c <__udivdi3>:
  813d5c:	defff004 	addi	sp,sp,-64
  813d60:	2005883a 	mov	r2,r4
  813d64:	3011883a 	mov	r8,r6
  813d68:	df000e15 	stw	fp,56(sp)
  813d6c:	dd000a15 	stw	r20,40(sp)
  813d70:	dc000615 	stw	r16,24(sp)
  813d74:	dfc00f15 	stw	ra,60(sp)
  813d78:	ddc00d15 	stw	r23,52(sp)
  813d7c:	dd800c15 	stw	r22,48(sp)
  813d80:	dd400b15 	stw	r21,44(sp)
  813d84:	dcc00915 	stw	r19,36(sp)
  813d88:	dc800815 	stw	r18,32(sp)
  813d8c:	dc400715 	stw	r17,28(sp)
  813d90:	4021883a 	mov	r16,r8
  813d94:	1039883a 	mov	fp,r2
  813d98:	2829883a 	mov	r20,r5
  813d9c:	38003b1e 	bne	r7,zero,813e8c <__udivdi3+0x130>
  813da0:	2a005c36 	bltu	r5,r8,813f14 <__udivdi3+0x1b8>
  813da4:	4000a626 	beq	r8,zero,814040 <__udivdi3+0x2e4>
  813da8:	00bfffd4 	movui	r2,65535
  813dac:	14009e36 	bltu	r2,r16,814028 <__udivdi3+0x2cc>
  813db0:	00803fc4 	movi	r2,255
  813db4:	14013d36 	bltu	r2,r16,8142ac <__udivdi3+0x550>
  813db8:	000b883a 	mov	r5,zero
  813dbc:	0005883a 	mov	r2,zero
  813dc0:	8084d83a 	srl	r2,r16,r2
  813dc4:	010020b4 	movhi	r4,130
  813dc8:	21019804 	addi	r4,r4,1632
  813dcc:	01800804 	movi	r6,32
  813dd0:	1105883a 	add	r2,r2,r4
  813dd4:	10c00003 	ldbu	r3,0(r2)
  813dd8:	28c7883a 	add	r3,r5,r3
  813ddc:	30edc83a 	sub	r22,r6,r3
  813de0:	b000ee1e 	bne	r22,zero,81419c <__udivdi3+0x440>
  813de4:	802ad43a 	srli	r21,r16,16
  813de8:	00800044 	movi	r2,1
  813dec:	a423c83a 	sub	r17,r20,r16
  813df0:	85ffffcc 	andi	r23,r16,65535
  813df4:	d8800315 	stw	r2,12(sp)
  813df8:	8809883a 	mov	r4,r17
  813dfc:	a80b883a 	mov	r5,r21
  813e00:	080b2d00 	call	80b2d0 <__udivsi3>
  813e04:	8809883a 	mov	r4,r17
  813e08:	a80b883a 	mov	r5,r21
  813e0c:	102d883a 	mov	r22,r2
  813e10:	080b2d80 	call	80b2d8 <__umodsi3>
  813e14:	1004943a 	slli	r2,r2,16
  813e18:	e006d43a 	srli	r3,fp,16
  813e1c:	bda3383a 	mul	r17,r23,r22
  813e20:	10c4b03a 	or	r2,r2,r3
  813e24:	1440042e 	bgeu	r2,r17,813e38 <__udivdi3+0xdc>
  813e28:	1405883a 	add	r2,r2,r16
  813e2c:	b5bfffc4 	addi	r22,r22,-1
  813e30:	14000136 	bltu	r2,r16,813e38 <__udivdi3+0xdc>
  813e34:	14413d36 	bltu	r2,r17,81432c <__udivdi3+0x5d0>
  813e38:	1463c83a 	sub	r17,r2,r17
  813e3c:	8809883a 	mov	r4,r17
  813e40:	a80b883a 	mov	r5,r21
  813e44:	080b2d00 	call	80b2d0 <__udivsi3>
  813e48:	8809883a 	mov	r4,r17
  813e4c:	a80b883a 	mov	r5,r21
  813e50:	1029883a 	mov	r20,r2
  813e54:	080b2d80 	call	80b2d8 <__umodsi3>
  813e58:	1004943a 	slli	r2,r2,16
  813e5c:	bd09383a 	mul	r4,r23,r20
  813e60:	e0ffffcc 	andi	r3,fp,65535
  813e64:	10c4b03a 	or	r2,r2,r3
  813e68:	1100042e 	bgeu	r2,r4,813e7c <__udivdi3+0x120>
  813e6c:	8085883a 	add	r2,r16,r2
  813e70:	a53fffc4 	addi	r20,r20,-1
  813e74:	14000136 	bltu	r2,r16,813e7c <__udivdi3+0x120>
  813e78:	11012036 	bltu	r2,r4,8142fc <__udivdi3+0x5a0>
  813e7c:	b004943a 	slli	r2,r22,16
  813e80:	d9000317 	ldw	r4,12(sp)
  813e84:	a084b03a 	or	r2,r20,r2
  813e88:	00001506 	br	813ee0 <__udivdi3+0x184>
  813e8c:	380d883a 	mov	r6,r7
  813e90:	29c06236 	bltu	r5,r7,81401c <__udivdi3+0x2c0>
  813e94:	00bfffd4 	movui	r2,65535
  813e98:	11c05a36 	bltu	r2,r7,814004 <__udivdi3+0x2a8>
  813e9c:	00803fc4 	movi	r2,255
  813ea0:	11c0fc36 	bltu	r2,r7,814294 <__udivdi3+0x538>
  813ea4:	000b883a 	mov	r5,zero
  813ea8:	0005883a 	mov	r2,zero
  813eac:	3084d83a 	srl	r2,r6,r2
  813eb0:	010020b4 	movhi	r4,130
  813eb4:	21019804 	addi	r4,r4,1632
  813eb8:	01c00804 	movi	r7,32
  813ebc:	1105883a 	add	r2,r2,r4
  813ec0:	10c00003 	ldbu	r3,0(r2)
  813ec4:	28c7883a 	add	r3,r5,r3
  813ec8:	38efc83a 	sub	r23,r7,r3
  813ecc:	b800691e 	bne	r23,zero,814074 <__udivdi3+0x318>
  813ed0:	35000136 	bltu	r6,r20,813ed8 <__udivdi3+0x17c>
  813ed4:	e4005136 	bltu	fp,r16,81401c <__udivdi3+0x2c0>
  813ed8:	00800044 	movi	r2,1
  813edc:	0009883a 	mov	r4,zero
  813ee0:	2007883a 	mov	r3,r4
  813ee4:	dfc00f17 	ldw	ra,60(sp)
  813ee8:	df000e17 	ldw	fp,56(sp)
  813eec:	ddc00d17 	ldw	r23,52(sp)
  813ef0:	dd800c17 	ldw	r22,48(sp)
  813ef4:	dd400b17 	ldw	r21,44(sp)
  813ef8:	dd000a17 	ldw	r20,40(sp)
  813efc:	dcc00917 	ldw	r19,36(sp)
  813f00:	dc800817 	ldw	r18,32(sp)
  813f04:	dc400717 	ldw	r17,28(sp)
  813f08:	dc000617 	ldw	r16,24(sp)
  813f0c:	dec01004 	addi	sp,sp,64
  813f10:	f800283a 	ret
  813f14:	00bfffd4 	movui	r2,65535
  813f18:	12005036 	bltu	r2,r8,81405c <__udivdi3+0x300>
  813f1c:	00803fc4 	movi	r2,255
  813f20:	1200e836 	bltu	r2,r8,8142c4 <__udivdi3+0x568>
  813f24:	000b883a 	mov	r5,zero
  813f28:	0005883a 	mov	r2,zero
  813f2c:	8084d83a 	srl	r2,r16,r2
  813f30:	010020b4 	movhi	r4,130
  813f34:	21019804 	addi	r4,r4,1632
  813f38:	01800804 	movi	r6,32
  813f3c:	1105883a 	add	r2,r2,r4
  813f40:	10c00003 	ldbu	r3,0(r2)
  813f44:	28c7883a 	add	r3,r5,r3
  813f48:	30cbc83a 	sub	r5,r6,r3
  813f4c:	28000626 	beq	r5,zero,813f68 <__udivdi3+0x20c>
  813f50:	3145c83a 	sub	r2,r6,r5
  813f54:	e084d83a 	srl	r2,fp,r2
  813f58:	a146983a 	sll	r3,r20,r5
  813f5c:	e178983a 	sll	fp,fp,r5
  813f60:	8160983a 	sll	r16,r16,r5
  813f64:	18a8b03a 	or	r20,r3,r2
  813f68:	802ad43a 	srli	r21,r16,16
  813f6c:	a009883a 	mov	r4,r20
  813f70:	85ffffcc 	andi	r23,r16,65535
  813f74:	a80b883a 	mov	r5,r21
  813f78:	080b2d00 	call	80b2d0 <__udivsi3>
  813f7c:	a009883a 	mov	r4,r20
  813f80:	a80b883a 	mov	r5,r21
  813f84:	102d883a 	mov	r22,r2
  813f88:	080b2d80 	call	80b2d8 <__umodsi3>
  813f8c:	1004943a 	slli	r2,r2,16
  813f90:	e006d43a 	srli	r3,fp,16
  813f94:	bda3383a 	mul	r17,r23,r22
  813f98:	10c4b03a 	or	r2,r2,r3
  813f9c:	1440042e 	bgeu	r2,r17,813fb0 <__udivdi3+0x254>
  813fa0:	1405883a 	add	r2,r2,r16
  813fa4:	b5bfffc4 	addi	r22,r22,-1
  813fa8:	14000136 	bltu	r2,r16,813fb0 <__udivdi3+0x254>
  813fac:	1440d536 	bltu	r2,r17,814304 <__udivdi3+0x5a8>
  813fb0:	1463c83a 	sub	r17,r2,r17
  813fb4:	8809883a 	mov	r4,r17
  813fb8:	a80b883a 	mov	r5,r21
  813fbc:	080b2d00 	call	80b2d0 <__udivsi3>
  813fc0:	8809883a 	mov	r4,r17
  813fc4:	a80b883a 	mov	r5,r21
  813fc8:	1029883a 	mov	r20,r2
  813fcc:	080b2d80 	call	80b2d8 <__umodsi3>
  813fd0:	1004943a 	slli	r2,r2,16
  813fd4:	bd09383a 	mul	r4,r23,r20
  813fd8:	e0ffffcc 	andi	r3,fp,65535
  813fdc:	10c4b03a 	or	r2,r2,r3
  813fe0:	1100042e 	bgeu	r2,r4,813ff4 <__udivdi3+0x298>
  813fe4:	8085883a 	add	r2,r16,r2
  813fe8:	a53fffc4 	addi	r20,r20,-1
  813fec:	14000136 	bltu	r2,r16,813ff4 <__udivdi3+0x298>
  813ff0:	1100c736 	bltu	r2,r4,814310 <__udivdi3+0x5b4>
  813ff4:	b004943a 	slli	r2,r22,16
  813ff8:	0009883a 	mov	r4,zero
  813ffc:	a084b03a 	or	r2,r20,r2
  814000:	003fb706 	br	813ee0 <__udivdi3+0x184>
  814004:	00804034 	movhi	r2,256
  814008:	10bfffc4 	addi	r2,r2,-1
  81400c:	11c0a436 	bltu	r2,r7,8142a0 <__udivdi3+0x544>
  814010:	01400404 	movi	r5,16
  814014:	2805883a 	mov	r2,r5
  814018:	003fa406 	br	813eac <__udivdi3+0x150>
  81401c:	0005883a 	mov	r2,zero
  814020:	0009883a 	mov	r4,zero
  814024:	003fae06 	br	813ee0 <__udivdi3+0x184>
  814028:	00804034 	movhi	r2,256
  81402c:	10bfffc4 	addi	r2,r2,-1
  814030:	1400a136 	bltu	r2,r16,8142b8 <__udivdi3+0x55c>
  814034:	01400404 	movi	r5,16
  814038:	2805883a 	mov	r2,r5
  81403c:	003f6006 	br	813dc0 <__udivdi3+0x64>
  814040:	01000044 	movi	r4,1
  814044:	000b883a 	mov	r5,zero
  814048:	080b2d00 	call	80b2d0 <__udivsi3>
  81404c:	1021883a 	mov	r16,r2
  814050:	00bfffd4 	movui	r2,65535
  814054:	143ff436 	bltu	r2,r16,814028 <__udivdi3+0x2cc>
  814058:	003f5506 	br	813db0 <__udivdi3+0x54>
  81405c:	00804034 	movhi	r2,256
  814060:	10bfffc4 	addi	r2,r2,-1
  814064:	12009a36 	bltu	r2,r8,8142d0 <__udivdi3+0x574>
  814068:	01400404 	movi	r5,16
  81406c:	2805883a 	mov	r2,r5
  814070:	003fae06 	br	813f2c <__udivdi3+0x1d0>
  814074:	3dc5c83a 	sub	r2,r7,r23
  814078:	35c8983a 	sll	r4,r6,r23
  81407c:	8086d83a 	srl	r3,r16,r2
  814080:	a0a2d83a 	srl	r17,r20,r2
  814084:	e084d83a 	srl	r2,fp,r2
  814088:	20eab03a 	or	r21,r4,r3
  81408c:	a82cd43a 	srli	r22,r21,16
  814090:	a5c6983a 	sll	r3,r20,r23
  814094:	8809883a 	mov	r4,r17
  814098:	b00b883a 	mov	r5,r22
  81409c:	1886b03a 	or	r3,r3,r2
  8140a0:	d8c00215 	stw	r3,8(sp)
  8140a4:	080b2d00 	call	80b2d0 <__udivsi3>
  8140a8:	8809883a 	mov	r4,r17
  8140ac:	b00b883a 	mov	r5,r22
  8140b0:	1029883a 	mov	r20,r2
  8140b4:	080b2d80 	call	80b2d8 <__umodsi3>
  8140b8:	a8ffffcc 	andi	r3,r21,65535
  8140bc:	d8c00515 	stw	r3,20(sp)
  8140c0:	d9000217 	ldw	r4,8(sp)
  8140c4:	d9400517 	ldw	r5,20(sp)
  8140c8:	1004943a 	slli	r2,r2,16
  8140cc:	2006d43a 	srli	r3,r4,16
  8140d0:	85e0983a 	sll	r16,r16,r23
  8140d4:	2d23383a 	mul	r17,r5,r20
  8140d8:	10c4b03a 	or	r2,r2,r3
  8140dc:	dc000015 	stw	r16,0(sp)
  8140e0:	1440032e 	bgeu	r2,r17,8140f0 <__udivdi3+0x394>
  8140e4:	1545883a 	add	r2,r2,r21
  8140e8:	a53fffc4 	addi	r20,r20,-1
  8140ec:	15407f2e 	bgeu	r2,r21,8142ec <__udivdi3+0x590>
  8140f0:	1463c83a 	sub	r17,r2,r17
  8140f4:	8809883a 	mov	r4,r17
  8140f8:	b00b883a 	mov	r5,r22
  8140fc:	080b2d00 	call	80b2d0 <__udivsi3>
  814100:	8809883a 	mov	r4,r17
  814104:	b00b883a 	mov	r5,r22
  814108:	1021883a 	mov	r16,r2
  81410c:	080b2d80 	call	80b2d8 <__umodsi3>
  814110:	d8c00517 	ldw	r3,20(sp)
  814114:	d9000217 	ldw	r4,8(sp)
  814118:	1004943a 	slli	r2,r2,16
  81411c:	1c0f383a 	mul	r7,r3,r16
  814120:	20ffffcc 	andi	r3,r4,65535
  814124:	10e2b03a 	or	r17,r2,r3
  814128:	89c0032e 	bgeu	r17,r7,814138 <__udivdi3+0x3dc>
  81412c:	8d63883a 	add	r17,r17,r21
  814130:	843fffc4 	addi	r16,r16,-1
  814134:	8d40692e 	bgeu	r17,r21,8142dc <__udivdi3+0x580>
  814138:	a008943a 	slli	r4,r20,16
  81413c:	d9400017 	ldw	r5,0(sp)
  814140:	89e3c83a 	sub	r17,r17,r7
  814144:	8110b03a 	or	r8,r16,r4
  814148:	280cd43a 	srli	r6,r5,16
  81414c:	28ffffcc 	andi	r3,r5,65535
  814150:	40bfffcc 	andi	r2,r8,65535
  814154:	400ad43a 	srli	r5,r8,16
  814158:	10d3383a 	mul	r9,r2,r3
  81415c:	1185383a 	mul	r2,r2,r6
  814160:	28c7383a 	mul	r3,r5,r3
  814164:	4808d43a 	srli	r4,r9,16
  814168:	298b383a 	mul	r5,r5,r6
  81416c:	10c5883a 	add	r2,r2,r3
  814170:	2089883a 	add	r4,r4,r2
  814174:	20c0022e 	bgeu	r4,r3,814180 <__udivdi3+0x424>
  814178:	00800074 	movhi	r2,1
  81417c:	288b883a 	add	r5,r5,r2
  814180:	2004d43a 	srli	r2,r4,16
  814184:	288b883a 	add	r5,r5,r2
  814188:	89403f36 	bltu	r17,r5,814288 <__udivdi3+0x52c>
  81418c:	89403926 	beq	r17,r5,814274 <__udivdi3+0x518>
  814190:	4005883a 	mov	r2,r8
  814194:	0009883a 	mov	r4,zero
  814198:	003f5106 	br	813ee0 <__udivdi3+0x184>
  81419c:	85a0983a 	sll	r16,r16,r22
  8141a0:	3585c83a 	sub	r2,r6,r22
  8141a4:	a0a2d83a 	srl	r17,r20,r2
  8141a8:	802ad43a 	srli	r21,r16,16
  8141ac:	e084d83a 	srl	r2,fp,r2
  8141b0:	a586983a 	sll	r3,r20,r22
  8141b4:	8809883a 	mov	r4,r17
  8141b8:	a80b883a 	mov	r5,r21
  8141bc:	1886b03a 	or	r3,r3,r2
  8141c0:	d8c00115 	stw	r3,4(sp)
  8141c4:	080b2d00 	call	80b2d0 <__udivsi3>
  8141c8:	8809883a 	mov	r4,r17
  8141cc:	a80b883a 	mov	r5,r21
  8141d0:	d8800415 	stw	r2,16(sp)
  8141d4:	080b2d80 	call	80b2d8 <__umodsi3>
  8141d8:	d9000117 	ldw	r4,4(sp)
  8141dc:	d9400417 	ldw	r5,16(sp)
  8141e0:	1004943a 	slli	r2,r2,16
  8141e4:	85ffffcc 	andi	r23,r16,65535
  8141e8:	2006d43a 	srli	r3,r4,16
  8141ec:	b963383a 	mul	r17,r23,r5
  8141f0:	10c4b03a 	or	r2,r2,r3
  8141f4:	1440042e 	bgeu	r2,r17,814208 <__udivdi3+0x4ac>
  8141f8:	297fffc4 	addi	r5,r5,-1
  8141fc:	1405883a 	add	r2,r2,r16
  814200:	d9400415 	stw	r5,16(sp)
  814204:	1400442e 	bgeu	r2,r16,814318 <__udivdi3+0x5bc>
  814208:	1463c83a 	sub	r17,r2,r17
  81420c:	8809883a 	mov	r4,r17
  814210:	a80b883a 	mov	r5,r21
  814214:	080b2d00 	call	80b2d0 <__udivsi3>
  814218:	8809883a 	mov	r4,r17
  81421c:	a80b883a 	mov	r5,r21
  814220:	1029883a 	mov	r20,r2
  814224:	080b2d80 	call	80b2d8 <__umodsi3>
  814228:	d9400117 	ldw	r5,4(sp)
  81422c:	1004943a 	slli	r2,r2,16
  814230:	bd09383a 	mul	r4,r23,r20
  814234:	28ffffcc 	andi	r3,r5,65535
  814238:	10c6b03a 	or	r3,r2,r3
  81423c:	1900062e 	bgeu	r3,r4,814258 <__udivdi3+0x4fc>
  814240:	1c07883a 	add	r3,r3,r16
  814244:	a53fffc4 	addi	r20,r20,-1
  814248:	1c000336 	bltu	r3,r16,814258 <__udivdi3+0x4fc>
  81424c:	1900022e 	bgeu	r3,r4,814258 <__udivdi3+0x4fc>
  814250:	a53fffc4 	addi	r20,r20,-1
  814254:	1c07883a 	add	r3,r3,r16
  814258:	d9400417 	ldw	r5,16(sp)
  81425c:	e5b8983a 	sll	fp,fp,r22
  814260:	1923c83a 	sub	r17,r3,r4
  814264:	2804943a 	slli	r2,r5,16
  814268:	a0a8b03a 	or	r20,r20,r2
  81426c:	dd000315 	stw	r20,12(sp)
  814270:	003ee106 	br	813df8 <__udivdi3+0x9c>
  814274:	2004943a 	slli	r2,r4,16
  814278:	e5c8983a 	sll	r4,fp,r23
  81427c:	48ffffcc 	andi	r3,r9,65535
  814280:	10c5883a 	add	r2,r2,r3
  814284:	20bfc22e 	bgeu	r4,r2,814190 <__udivdi3+0x434>
  814288:	40bfffc4 	addi	r2,r8,-1
  81428c:	0009883a 	mov	r4,zero
  814290:	003f1306 	br	813ee0 <__udivdi3+0x184>
  814294:	01400204 	movi	r5,8
  814298:	2805883a 	mov	r2,r5
  81429c:	003f0306 	br	813eac <__udivdi3+0x150>
  8142a0:	01400604 	movi	r5,24
  8142a4:	2805883a 	mov	r2,r5
  8142a8:	003f0006 	br	813eac <__udivdi3+0x150>
  8142ac:	01400204 	movi	r5,8
  8142b0:	2805883a 	mov	r2,r5
  8142b4:	003ec206 	br	813dc0 <__udivdi3+0x64>
  8142b8:	01400604 	movi	r5,24
  8142bc:	2805883a 	mov	r2,r5
  8142c0:	003ebf06 	br	813dc0 <__udivdi3+0x64>
  8142c4:	01400204 	movi	r5,8
  8142c8:	2805883a 	mov	r2,r5
  8142cc:	003f1706 	br	813f2c <__udivdi3+0x1d0>
  8142d0:	01400604 	movi	r5,24
  8142d4:	2805883a 	mov	r2,r5
  8142d8:	003f1406 	br	813f2c <__udivdi3+0x1d0>
  8142dc:	89ff962e 	bgeu	r17,r7,814138 <__udivdi3+0x3dc>
  8142e0:	8d63883a 	add	r17,r17,r21
  8142e4:	843fffc4 	addi	r16,r16,-1
  8142e8:	003f9306 	br	814138 <__udivdi3+0x3dc>
  8142ec:	147f802e 	bgeu	r2,r17,8140f0 <__udivdi3+0x394>
  8142f0:	a53fffc4 	addi	r20,r20,-1
  8142f4:	1545883a 	add	r2,r2,r21
  8142f8:	003f7d06 	br	8140f0 <__udivdi3+0x394>
  8142fc:	a53fffc4 	addi	r20,r20,-1
  814300:	003ede06 	br	813e7c <__udivdi3+0x120>
  814304:	b5bfffc4 	addi	r22,r22,-1
  814308:	1405883a 	add	r2,r2,r16
  81430c:	003f2806 	br	813fb0 <__udivdi3+0x254>
  814310:	a53fffc4 	addi	r20,r20,-1
  814314:	003f3706 	br	813ff4 <__udivdi3+0x298>
  814318:	147fbb2e 	bgeu	r2,r17,814208 <__udivdi3+0x4ac>
  81431c:	297fffc4 	addi	r5,r5,-1
  814320:	1405883a 	add	r2,r2,r16
  814324:	d9400415 	stw	r5,16(sp)
  814328:	003fb706 	br	814208 <__udivdi3+0x4ac>
  81432c:	b5bfffc4 	addi	r22,r22,-1
  814330:	1405883a 	add	r2,r2,r16
  814334:	003ec006 	br	813e38 <__udivdi3+0xdc>

00814338 <__umoddi3>:
  814338:	defff104 	addi	sp,sp,-60
  81433c:	dd800b15 	stw	r22,44(sp)
  814340:	dd000915 	stw	r20,36(sp)
  814344:	dc000515 	stw	r16,20(sp)
  814348:	dfc00e15 	stw	ra,56(sp)
  81434c:	df000d15 	stw	fp,52(sp)
  814350:	ddc00c15 	stw	r23,48(sp)
  814354:	dd400a15 	stw	r21,40(sp)
  814358:	dcc00815 	stw	r19,32(sp)
  81435c:	dc800715 	stw	r18,28(sp)
  814360:	dc400615 	stw	r17,24(sp)
  814364:	3021883a 	mov	r16,r6
  814368:	202d883a 	mov	r22,r4
  81436c:	2829883a 	mov	r20,r5
  814370:	38002b1e 	bne	r7,zero,814420 <__umoddi3+0xe8>
  814374:	29805036 	bltu	r5,r6,8144b8 <__umoddi3+0x180>
  814378:	30008a26 	beq	r6,zero,8145a4 <__umoddi3+0x26c>
  81437c:	00bfffd4 	movui	r2,65535
  814380:	14008236 	bltu	r2,r16,81458c <__umoddi3+0x254>
  814384:	00803fc4 	movi	r2,255
  814388:	14013636 	bltu	r2,r16,814864 <__umoddi3+0x52c>
  81438c:	000b883a 	mov	r5,zero
  814390:	0005883a 	mov	r2,zero
  814394:	8084d83a 	srl	r2,r16,r2
  814398:	010020b4 	movhi	r4,130
  81439c:	21019804 	addi	r4,r4,1632
  8143a0:	01800804 	movi	r6,32
  8143a4:	1105883a 	add	r2,r2,r4
  8143a8:	10c00003 	ldbu	r3,0(r2)
  8143ac:	28c7883a 	add	r3,r5,r3
  8143b0:	30efc83a 	sub	r23,r6,r3
  8143b4:	b800941e 	bne	r23,zero,814608 <__umoddi3+0x2d0>
  8143b8:	802ad43a 	srli	r21,r16,16
  8143bc:	a423c83a 	sub	r17,r20,r16
  8143c0:	0039883a 	mov	fp,zero
  8143c4:	853fffcc 	andi	r20,r16,65535
  8143c8:	8809883a 	mov	r4,r17
  8143cc:	a80b883a 	mov	r5,r21
  8143d0:	080b2d00 	call	80b2d0 <__udivsi3>
  8143d4:	8809883a 	mov	r4,r17
  8143d8:	a80b883a 	mov	r5,r21
  8143dc:	a0a3383a 	mul	r17,r20,r2
  8143e0:	080b2d80 	call	80b2d8 <__umodsi3>
  8143e4:	1004943a 	slli	r2,r2,16
  8143e8:	b006d43a 	srli	r3,r22,16
  8143ec:	10c4b03a 	or	r2,r2,r3
  8143f0:	1440032e 	bgeu	r2,r17,814400 <__umoddi3+0xc8>
  8143f4:	1405883a 	add	r2,r2,r16
  8143f8:	14000136 	bltu	r2,r16,814400 <__umoddi3+0xc8>
  8143fc:	14413536 	bltu	r2,r17,8148d4 <__umoddi3+0x59c>
  814400:	1463c83a 	sub	r17,r2,r17
  814404:	8809883a 	mov	r4,r17
  814408:	a80b883a 	mov	r5,r21
  81440c:	080b2d00 	call	80b2d0 <__udivsi3>
  814410:	8809883a 	mov	r4,r17
  814414:	a0a3383a 	mul	r17,r20,r2
  814418:	a80b883a 	mov	r5,r21
  81441c:	00004d06 	br	814554 <__umoddi3+0x21c>
  814420:	380d883a 	mov	r6,r7
  814424:	29c0102e 	bgeu	r5,r7,814468 <__umoddi3+0x130>
  814428:	2011883a 	mov	r8,r4
  81442c:	2813883a 	mov	r9,r5
  814430:	4005883a 	mov	r2,r8
  814434:	4807883a 	mov	r3,r9
  814438:	dfc00e17 	ldw	ra,56(sp)
  81443c:	df000d17 	ldw	fp,52(sp)
  814440:	ddc00c17 	ldw	r23,48(sp)
  814444:	dd800b17 	ldw	r22,44(sp)
  814448:	dd400a17 	ldw	r21,40(sp)
  81444c:	dd000917 	ldw	r20,36(sp)
  814450:	dcc00817 	ldw	r19,32(sp)
  814454:	dc800717 	ldw	r18,28(sp)
  814458:	dc400617 	ldw	r17,24(sp)
  81445c:	dc000517 	ldw	r16,20(sp)
  814460:	dec00f04 	addi	sp,sp,60
  814464:	f800283a 	ret
  814468:	00bfffd4 	movui	r2,65535
  81446c:	11c05a36 	bltu	r2,r7,8145d8 <__umoddi3+0x2a0>
  814470:	00803fc4 	movi	r2,255
  814474:	11c0fe36 	bltu	r2,r7,814870 <__umoddi3+0x538>
  814478:	000b883a 	mov	r5,zero
  81447c:	0005883a 	mov	r2,zero
  814480:	3084d83a 	srl	r2,r6,r2
  814484:	010020b4 	movhi	r4,130
  814488:	21019804 	addi	r4,r4,1632
  81448c:	01c00804 	movi	r7,32
  814490:	1105883a 	add	r2,r2,r4
  814494:	10c00003 	ldbu	r3,0(r2)
  814498:	28c7883a 	add	r3,r5,r3
  81449c:	38ebc83a 	sub	r21,r7,r3
  8144a0:	a800851e 	bne	r21,zero,8146b8 <__umoddi3+0x380>
  8144a4:	35005236 	bltu	r6,r20,8145f0 <__umoddi3+0x2b8>
  8144a8:	b400512e 	bgeu	r22,r16,8145f0 <__umoddi3+0x2b8>
  8144ac:	b011883a 	mov	r8,r22
  8144b0:	a013883a 	mov	r9,r20
  8144b4:	003fde06 	br	814430 <__umoddi3+0xf8>
  8144b8:	00bfffd4 	movui	r2,65535
  8144bc:	11804036 	bltu	r2,r6,8145c0 <__umoddi3+0x288>
  8144c0:	00803fc4 	movi	r2,255
  8144c4:	1180ed36 	bltu	r2,r6,81487c <__umoddi3+0x544>
  8144c8:	000b883a 	mov	r5,zero
  8144cc:	0005883a 	mov	r2,zero
  8144d0:	8084d83a 	srl	r2,r16,r2
  8144d4:	010020b4 	movhi	r4,130
  8144d8:	21019804 	addi	r4,r4,1632
  8144dc:	01800804 	movi	r6,32
  8144e0:	1105883a 	add	r2,r2,r4
  8144e4:	10c00003 	ldbu	r3,0(r2)
  8144e8:	28c7883a 	add	r3,r5,r3
  8144ec:	30c7c83a 	sub	r3,r6,r3
  8144f0:	1800bf1e 	bne	r3,zero,8147f0 <__umoddi3+0x4b8>
  8144f4:	0039883a 	mov	fp,zero
  8144f8:	802ad43a 	srli	r21,r16,16
  8144fc:	a009883a 	mov	r4,r20
  814500:	85ffffcc 	andi	r23,r16,65535
  814504:	a80b883a 	mov	r5,r21
  814508:	080b2d00 	call	80b2d0 <__udivsi3>
  81450c:	a009883a 	mov	r4,r20
  814510:	a80b883a 	mov	r5,r21
  814514:	b8a3383a 	mul	r17,r23,r2
  814518:	080b2d80 	call	80b2d8 <__umodsi3>
  81451c:	1004943a 	slli	r2,r2,16
  814520:	b006d43a 	srli	r3,r22,16
  814524:	10c4b03a 	or	r2,r2,r3
  814528:	1440032e 	bgeu	r2,r17,814538 <__umoddi3+0x200>
  81452c:	1405883a 	add	r2,r2,r16
  814530:	14000136 	bltu	r2,r16,814538 <__umoddi3+0x200>
  814534:	1440e536 	bltu	r2,r17,8148cc <__umoddi3+0x594>
  814538:	1463c83a 	sub	r17,r2,r17
  81453c:	8809883a 	mov	r4,r17
  814540:	a80b883a 	mov	r5,r21
  814544:	080b2d00 	call	80b2d0 <__udivsi3>
  814548:	8809883a 	mov	r4,r17
  81454c:	b8a3383a 	mul	r17,r23,r2
  814550:	a80b883a 	mov	r5,r21
  814554:	080b2d80 	call	80b2d8 <__umodsi3>
  814558:	1004943a 	slli	r2,r2,16
  81455c:	b0ffffcc 	andi	r3,r22,65535
  814560:	10c4b03a 	or	r2,r2,r3
  814564:	1440042e 	bgeu	r2,r17,814578 <__umoddi3+0x240>
  814568:	1405883a 	add	r2,r2,r16
  81456c:	14000236 	bltu	r2,r16,814578 <__umoddi3+0x240>
  814570:	1440012e 	bgeu	r2,r17,814578 <__umoddi3+0x240>
  814574:	1405883a 	add	r2,r2,r16
  814578:	1445c83a 	sub	r2,r2,r17
  81457c:	1724d83a 	srl	r18,r2,fp
  814580:	0013883a 	mov	r9,zero
  814584:	9011883a 	mov	r8,r18
  814588:	003fa906 	br	814430 <__umoddi3+0xf8>
  81458c:	00804034 	movhi	r2,256
  814590:	10bfffc4 	addi	r2,r2,-1
  814594:	1400b036 	bltu	r2,r16,814858 <__umoddi3+0x520>
  814598:	01400404 	movi	r5,16
  81459c:	2805883a 	mov	r2,r5
  8145a0:	003f7c06 	br	814394 <__umoddi3+0x5c>
  8145a4:	01000044 	movi	r4,1
  8145a8:	000b883a 	mov	r5,zero
  8145ac:	080b2d00 	call	80b2d0 <__udivsi3>
  8145b0:	1021883a 	mov	r16,r2
  8145b4:	00bfffd4 	movui	r2,65535
  8145b8:	143ff436 	bltu	r2,r16,81458c <__umoddi3+0x254>
  8145bc:	003f7106 	br	814384 <__umoddi3+0x4c>
  8145c0:	00804034 	movhi	r2,256
  8145c4:	10bfffc4 	addi	r2,r2,-1
  8145c8:	1180af36 	bltu	r2,r6,814888 <__umoddi3+0x550>
  8145cc:	01400404 	movi	r5,16
  8145d0:	2805883a 	mov	r2,r5
  8145d4:	003fbe06 	br	8144d0 <__umoddi3+0x198>
  8145d8:	00804034 	movhi	r2,256
  8145dc:	10bfffc4 	addi	r2,r2,-1
  8145e0:	11c0ac36 	bltu	r2,r7,814894 <__umoddi3+0x55c>
  8145e4:	01400404 	movi	r5,16
  8145e8:	2805883a 	mov	r2,r5
  8145ec:	003fa406 	br	814480 <__umoddi3+0x148>
  8145f0:	b409c83a 	sub	r4,r22,r16
  8145f4:	b105803a 	cmpltu	r2,r22,r4
  8145f8:	a187c83a 	sub	r3,r20,r6
  8145fc:	18a9c83a 	sub	r20,r3,r2
  814600:	202d883a 	mov	r22,r4
  814604:	003fa906 	br	8144ac <__umoddi3+0x174>
  814608:	85e0983a 	sll	r16,r16,r23
  81460c:	35c5c83a 	sub	r2,r6,r23
  814610:	a0a2d83a 	srl	r17,r20,r2
  814614:	802ad43a 	srli	r21,r16,16
  814618:	b084d83a 	srl	r2,r22,r2
  81461c:	a5c6983a 	sll	r3,r20,r23
  814620:	8809883a 	mov	r4,r17
  814624:	a80b883a 	mov	r5,r21
  814628:	1886b03a 	or	r3,r3,r2
  81462c:	d8c00115 	stw	r3,4(sp)
  814630:	853fffcc 	andi	r20,r16,65535
  814634:	080b2d00 	call	80b2d0 <__udivsi3>
  814638:	8809883a 	mov	r4,r17
  81463c:	a80b883a 	mov	r5,r21
  814640:	a0a3383a 	mul	r17,r20,r2
  814644:	080b2d80 	call	80b2d8 <__umodsi3>
  814648:	d9000117 	ldw	r4,4(sp)
  81464c:	1004943a 	slli	r2,r2,16
  814650:	b839883a 	mov	fp,r23
  814654:	2006d43a 	srli	r3,r4,16
  814658:	10c4b03a 	or	r2,r2,r3
  81465c:	1440022e 	bgeu	r2,r17,814668 <__umoddi3+0x330>
  814660:	1405883a 	add	r2,r2,r16
  814664:	1400962e 	bgeu	r2,r16,8148c0 <__umoddi3+0x588>
  814668:	1463c83a 	sub	r17,r2,r17
  81466c:	8809883a 	mov	r4,r17
  814670:	a80b883a 	mov	r5,r21
  814674:	080b2d00 	call	80b2d0 <__udivsi3>
  814678:	8809883a 	mov	r4,r17
  81467c:	a80b883a 	mov	r5,r21
  814680:	a0a3383a 	mul	r17,r20,r2
  814684:	080b2d80 	call	80b2d8 <__umodsi3>
  814688:	d9400117 	ldw	r5,4(sp)
  81468c:	1004943a 	slli	r2,r2,16
  814690:	28ffffcc 	andi	r3,r5,65535
  814694:	10c4b03a 	or	r2,r2,r3
  814698:	1440042e 	bgeu	r2,r17,8146ac <__umoddi3+0x374>
  81469c:	1405883a 	add	r2,r2,r16
  8146a0:	14000236 	bltu	r2,r16,8146ac <__umoddi3+0x374>
  8146a4:	1440012e 	bgeu	r2,r17,8146ac <__umoddi3+0x374>
  8146a8:	1405883a 	add	r2,r2,r16
  8146ac:	b5ec983a 	sll	r22,r22,r23
  8146b0:	1463c83a 	sub	r17,r2,r17
  8146b4:	003f4406 	br	8143c8 <__umoddi3+0x90>
  8146b8:	3d4fc83a 	sub	r7,r7,r21
  8146bc:	3546983a 	sll	r3,r6,r21
  8146c0:	81c4d83a 	srl	r2,r16,r7
  8146c4:	a1e2d83a 	srl	r17,r20,r7
  8146c8:	a54c983a 	sll	r6,r20,r21
  8146cc:	18aeb03a 	or	r23,r3,r2
  8146d0:	b828d43a 	srli	r20,r23,16
  8146d4:	b1c4d83a 	srl	r2,r22,r7
  8146d8:	8809883a 	mov	r4,r17
  8146dc:	a00b883a 	mov	r5,r20
  8146e0:	308cb03a 	or	r6,r6,r2
  8146e4:	d9c00315 	stw	r7,12(sp)
  8146e8:	d9800215 	stw	r6,8(sp)
  8146ec:	080b2d00 	call	80b2d0 <__udivsi3>
  8146f0:	8809883a 	mov	r4,r17
  8146f4:	a00b883a 	mov	r5,r20
  8146f8:	1039883a 	mov	fp,r2
  8146fc:	080b2d80 	call	80b2d8 <__umodsi3>
  814700:	b8ffffcc 	andi	r3,r23,65535
  814704:	d8c00415 	stw	r3,16(sp)
  814708:	d9000217 	ldw	r4,8(sp)
  81470c:	d9400417 	ldw	r5,16(sp)
  814710:	1004943a 	slli	r2,r2,16
  814714:	2006d43a 	srli	r3,r4,16
  814718:	8560983a 	sll	r16,r16,r21
  81471c:	2f23383a 	mul	r17,r5,fp
  814720:	10c4b03a 	or	r2,r2,r3
  814724:	dc000015 	stw	r16,0(sp)
  814728:	b56c983a 	sll	r22,r22,r21
  81472c:	1440032e 	bgeu	r2,r17,81473c <__umoddi3+0x404>
  814730:	15c5883a 	add	r2,r2,r23
  814734:	e73fffc4 	addi	fp,fp,-1
  814738:	15c05d2e 	bgeu	r2,r23,8148b0 <__umoddi3+0x578>
  81473c:	1463c83a 	sub	r17,r2,r17
  814740:	8809883a 	mov	r4,r17
  814744:	a00b883a 	mov	r5,r20
  814748:	080b2d00 	call	80b2d0 <__udivsi3>
  81474c:	8809883a 	mov	r4,r17
  814750:	a00b883a 	mov	r5,r20
  814754:	1021883a 	mov	r16,r2
  814758:	080b2d80 	call	80b2d8 <__umodsi3>
  81475c:	d8c00417 	ldw	r3,16(sp)
  814760:	d9000217 	ldw	r4,8(sp)
  814764:	1004943a 	slli	r2,r2,16
  814768:	1c23383a 	mul	r17,r3,r16
  81476c:	20ffffcc 	andi	r3,r4,65535
  814770:	10ceb03a 	or	r7,r2,r3
  814774:	3c40032e 	bgeu	r7,r17,814784 <__umoddi3+0x44c>
  814778:	3dcf883a 	add	r7,r7,r23
  81477c:	843fffc4 	addi	r16,r16,-1
  814780:	3dc0472e 	bgeu	r7,r23,8148a0 <__umoddi3+0x568>
  814784:	e004943a 	slli	r2,fp,16
  814788:	d9400017 	ldw	r5,0(sp)
  81478c:	3c4fc83a 	sub	r7,r7,r17
  814790:	8084b03a 	or	r2,r16,r2
  814794:	28ffffcc 	andi	r3,r5,65535
  814798:	280cd43a 	srli	r6,r5,16
  81479c:	100ad43a 	srli	r5,r2,16
  8147a0:	10bfffcc 	andi	r2,r2,65535
  8147a4:	10d1383a 	mul	r8,r2,r3
  8147a8:	28c7383a 	mul	r3,r5,r3
  8147ac:	1185383a 	mul	r2,r2,r6
  8147b0:	4008d43a 	srli	r4,r8,16
  8147b4:	298b383a 	mul	r5,r5,r6
  8147b8:	10c5883a 	add	r2,r2,r3
  8147bc:	2089883a 	add	r4,r4,r2
  8147c0:	20c0022e 	bgeu	r4,r3,8147cc <__umoddi3+0x494>
  8147c4:	00800074 	movhi	r2,1
  8147c8:	288b883a 	add	r5,r5,r2
  8147cc:	2004d43a 	srli	r2,r4,16
  8147d0:	2008943a 	slli	r4,r4,16
  8147d4:	40ffffcc 	andi	r3,r8,65535
  8147d8:	288b883a 	add	r5,r5,r2
  8147dc:	20c9883a 	add	r4,r4,r3
  8147e0:	39400b36 	bltu	r7,r5,814810 <__umoddi3+0x4d8>
  8147e4:	39403d26 	beq	r7,r5,8148dc <__umoddi3+0x5a4>
  8147e8:	394bc83a 	sub	r5,r7,r5
  8147ec:	00000f06 	br	81482c <__umoddi3+0x4f4>
  8147f0:	30c5c83a 	sub	r2,r6,r3
  8147f4:	1839883a 	mov	fp,r3
  8147f8:	b084d83a 	srl	r2,r22,r2
  8147fc:	a0c6983a 	sll	r3,r20,r3
  814800:	8720983a 	sll	r16,r16,fp
  814804:	b72c983a 	sll	r22,r22,fp
  814808:	18a8b03a 	or	r20,r3,r2
  81480c:	003f3a06 	br	8144f8 <__umoddi3+0x1c0>
  814810:	d8c00017 	ldw	r3,0(sp)
  814814:	20c5c83a 	sub	r2,r4,r3
  814818:	2089803a 	cmpltu	r4,r4,r2
  81481c:	2dc7c83a 	sub	r3,r5,r23
  814820:	1907c83a 	sub	r3,r3,r4
  814824:	38cbc83a 	sub	r5,r7,r3
  814828:	1009883a 	mov	r4,r2
  81482c:	b105c83a 	sub	r2,r22,r4
  814830:	b087803a 	cmpltu	r3,r22,r2
  814834:	28c7c83a 	sub	r3,r5,r3
  814838:	d9400317 	ldw	r5,12(sp)
  81483c:	1544d83a 	srl	r2,r2,r21
  814840:	1948983a 	sll	r4,r3,r5
  814844:	1d46d83a 	srl	r3,r3,r21
  814848:	20a4b03a 	or	r18,r4,r2
  81484c:	9011883a 	mov	r8,r18
  814850:	1813883a 	mov	r9,r3
  814854:	003ef606 	br	814430 <__umoddi3+0xf8>
  814858:	01400604 	movi	r5,24
  81485c:	2805883a 	mov	r2,r5
  814860:	003ecc06 	br	814394 <__umoddi3+0x5c>
  814864:	01400204 	movi	r5,8
  814868:	2805883a 	mov	r2,r5
  81486c:	003ec906 	br	814394 <__umoddi3+0x5c>
  814870:	01400204 	movi	r5,8
  814874:	2805883a 	mov	r2,r5
  814878:	003f0106 	br	814480 <__umoddi3+0x148>
  81487c:	01400204 	movi	r5,8
  814880:	2805883a 	mov	r2,r5
  814884:	003f1206 	br	8144d0 <__umoddi3+0x198>
  814888:	01400604 	movi	r5,24
  81488c:	2805883a 	mov	r2,r5
  814890:	003f0f06 	br	8144d0 <__umoddi3+0x198>
  814894:	01400604 	movi	r5,24
  814898:	2805883a 	mov	r2,r5
  81489c:	003ef806 	br	814480 <__umoddi3+0x148>
  8148a0:	3c7fb82e 	bgeu	r7,r17,814784 <__umoddi3+0x44c>
  8148a4:	843fffc4 	addi	r16,r16,-1
  8148a8:	3dcf883a 	add	r7,r7,r23
  8148ac:	003fb506 	br	814784 <__umoddi3+0x44c>
  8148b0:	147fa22e 	bgeu	r2,r17,81473c <__umoddi3+0x404>
  8148b4:	e73fffc4 	addi	fp,fp,-1
  8148b8:	15c5883a 	add	r2,r2,r23
  8148bc:	003f9f06 	br	81473c <__umoddi3+0x404>
  8148c0:	147f692e 	bgeu	r2,r17,814668 <__umoddi3+0x330>
  8148c4:	1405883a 	add	r2,r2,r16
  8148c8:	003f6706 	br	814668 <__umoddi3+0x330>
  8148cc:	1405883a 	add	r2,r2,r16
  8148d0:	003f1906 	br	814538 <__umoddi3+0x200>
  8148d4:	1405883a 	add	r2,r2,r16
  8148d8:	003ec906 	br	814400 <__umoddi3+0xc8>
  8148dc:	b13fcc36 	bltu	r22,r4,814810 <__umoddi3+0x4d8>
  8148e0:	000b883a 	mov	r5,zero
  8148e4:	003fd106 	br	81482c <__umoddi3+0x4f4>

008148e8 <__divdf3>:
  8148e8:	deffed04 	addi	sp,sp,-76
  8148ec:	dcc01115 	stw	r19,68(sp)
  8148f0:	dcc00404 	addi	r19,sp,16
  8148f4:	2011883a 	mov	r8,r4
  8148f8:	2813883a 	mov	r9,r5
  8148fc:	dc000e15 	stw	r16,56(sp)
  814900:	d809883a 	mov	r4,sp
  814904:	980b883a 	mov	r5,r19
  814908:	dc000904 	addi	r16,sp,36
  81490c:	dfc01215 	stw	ra,72(sp)
  814910:	da400115 	stw	r9,4(sp)
  814914:	d9c00315 	stw	r7,12(sp)
  814918:	da000015 	stw	r8,0(sp)
  81491c:	d9800215 	stw	r6,8(sp)
  814920:	dc801015 	stw	r18,64(sp)
  814924:	dc400f15 	stw	r17,60(sp)
  814928:	080ba080 	call	80ba08 <__unpack_d>
  81492c:	d9000204 	addi	r4,sp,8
  814930:	800b883a 	mov	r5,r16
  814934:	080ba080 	call	80ba08 <__unpack_d>
  814938:	d9000417 	ldw	r4,16(sp)
  81493c:	00800044 	movi	r2,1
  814940:	11000b2e 	bgeu	r2,r4,814970 <__divdf3+0x88>
  814944:	d9400917 	ldw	r5,36(sp)
  814948:	1140762e 	bgeu	r2,r5,814b24 <__divdf3+0x23c>
  81494c:	d8800517 	ldw	r2,20(sp)
  814950:	d8c00a17 	ldw	r3,40(sp)
  814954:	01800104 	movi	r6,4
  814958:	10c4f03a 	xor	r2,r2,r3
  81495c:	d8800515 	stw	r2,20(sp)
  814960:	21800226 	beq	r4,r6,81496c <__divdf3+0x84>
  814964:	00800084 	movi	r2,2
  814968:	2080141e 	bne	r4,r2,8149bc <__divdf3+0xd4>
  81496c:	29000926 	beq	r5,r4,814994 <__divdf3+0xac>
  814970:	9809883a 	mov	r4,r19
  814974:	080b6f40 	call	80b6f4 <__pack_d>
  814978:	dfc01217 	ldw	ra,72(sp)
  81497c:	dcc01117 	ldw	r19,68(sp)
  814980:	dc801017 	ldw	r18,64(sp)
  814984:	dc400f17 	ldw	r17,60(sp)
  814988:	dc000e17 	ldw	r16,56(sp)
  81498c:	dec01304 	addi	sp,sp,76
  814990:	f800283a 	ret
  814994:	010020b4 	movhi	r4,130
  814998:	21019304 	addi	r4,r4,1612
  81499c:	080b6f40 	call	80b6f4 <__pack_d>
  8149a0:	dfc01217 	ldw	ra,72(sp)
  8149a4:	dcc01117 	ldw	r19,68(sp)
  8149a8:	dc801017 	ldw	r18,64(sp)
  8149ac:	dc400f17 	ldw	r17,60(sp)
  8149b0:	dc000e17 	ldw	r16,56(sp)
  8149b4:	dec01304 	addi	sp,sp,76
  8149b8:	f800283a 	ret
  8149bc:	29805b26 	beq	r5,r6,814b2c <__divdf3+0x244>
  8149c0:	28802d26 	beq	r5,r2,814a78 <__divdf3+0x190>
  8149c4:	d8c00617 	ldw	r3,24(sp)
  8149c8:	d8800b17 	ldw	r2,44(sp)
  8149cc:	d9c00817 	ldw	r7,32(sp)
  8149d0:	dc400d17 	ldw	r17,52(sp)
  8149d4:	188bc83a 	sub	r5,r3,r2
  8149d8:	d9800717 	ldw	r6,28(sp)
  8149dc:	dc000c17 	ldw	r16,48(sp)
  8149e0:	d9400615 	stw	r5,24(sp)
  8149e4:	3c403836 	bltu	r7,r17,814ac8 <__divdf3+0x1e0>
  8149e8:	89c03626 	beq	r17,r7,814ac4 <__divdf3+0x1dc>
  8149ec:	0015883a 	mov	r10,zero
  8149f0:	001d883a 	mov	r14,zero
  8149f4:	02c40034 	movhi	r11,4096
  8149f8:	001f883a 	mov	r15,zero
  8149fc:	003f883a 	mov	ra,zero
  814a00:	04800f44 	movi	r18,61
  814a04:	00000f06 	br	814a44 <__divdf3+0x15c>
  814a08:	601d883a 	mov	r14,r12
  814a0c:	681f883a 	mov	r15,r13
  814a10:	400d883a 	mov	r6,r8
  814a14:	100f883a 	mov	r7,r2
  814a18:	3191883a 	add	r8,r6,r6
  814a1c:	5808d07a 	srli	r4,r11,1
  814a20:	4185803a 	cmpltu	r2,r8,r6
  814a24:	39d3883a 	add	r9,r7,r7
  814a28:	28c6b03a 	or	r3,r5,r3
  814a2c:	1245883a 	add	r2,r2,r9
  814a30:	1815883a 	mov	r10,r3
  814a34:	2017883a 	mov	r11,r4
  814a38:	400d883a 	mov	r6,r8
  814a3c:	100f883a 	mov	r7,r2
  814a40:	fc801726 	beq	ra,r18,814aa0 <__divdf3+0x1b8>
  814a44:	580a97fa 	slli	r5,r11,31
  814a48:	5006d07a 	srli	r3,r10,1
  814a4c:	ffc00044 	addi	ra,ra,1
  814a50:	3c7ff136 	bltu	r7,r17,814a18 <__divdf3+0x130>
  814a54:	3411c83a 	sub	r8,r6,r16
  814a58:	3205803a 	cmpltu	r2,r6,r8
  814a5c:	3c53c83a 	sub	r9,r7,r17
  814a60:	7298b03a 	or	r12,r14,r10
  814a64:	7adab03a 	or	r13,r15,r11
  814a68:	4885c83a 	sub	r2,r9,r2
  814a6c:	89ffe61e 	bne	r17,r7,814a08 <__divdf3+0x120>
  814a70:	343fe936 	bltu	r6,r16,814a18 <__divdf3+0x130>
  814a74:	003fe406 	br	814a08 <__divdf3+0x120>
  814a78:	9809883a 	mov	r4,r19
  814a7c:	d9800415 	stw	r6,16(sp)
  814a80:	080b6f40 	call	80b6f4 <__pack_d>
  814a84:	dfc01217 	ldw	ra,72(sp)
  814a88:	dcc01117 	ldw	r19,68(sp)
  814a8c:	dc801017 	ldw	r18,64(sp)
  814a90:	dc400f17 	ldw	r17,60(sp)
  814a94:	dc000e17 	ldw	r16,56(sp)
  814a98:	dec01304 	addi	sp,sp,76
  814a9c:	f800283a 	ret
  814aa0:	00803fc4 	movi	r2,255
  814aa4:	7090703a 	and	r8,r14,r2
  814aa8:	00802004 	movi	r2,128
  814aac:	0007883a 	mov	r3,zero
  814ab0:	0013883a 	mov	r9,zero
  814ab4:	40800d26 	beq	r8,r2,814aec <__divdf3+0x204>
  814ab8:	dbc00815 	stw	r15,32(sp)
  814abc:	db800715 	stw	r14,28(sp)
  814ac0:	003fab06 	br	814970 <__divdf3+0x88>
  814ac4:	343fc92e 	bgeu	r6,r16,8149ec <__divdf3+0x104>
  814ac8:	3185883a 	add	r2,r6,r6
  814acc:	1189803a 	cmpltu	r4,r2,r6
  814ad0:	39c7883a 	add	r3,r7,r7
  814ad4:	20c9883a 	add	r4,r4,r3
  814ad8:	297fffc4 	addi	r5,r5,-1
  814adc:	100d883a 	mov	r6,r2
  814ae0:	200f883a 	mov	r7,r4
  814ae4:	d9400615 	stw	r5,24(sp)
  814ae8:	003fc006 	br	8149ec <__divdf3+0x104>
  814aec:	483ff21e 	bne	r9,zero,814ab8 <__divdf3+0x1d0>
  814af0:	01004004 	movi	r4,256
  814af4:	7104703a 	and	r2,r14,r4
  814af8:	10c4b03a 	or	r2,r2,r3
  814afc:	103fee1e 	bne	r2,zero,814ab8 <__divdf3+0x1d0>
  814b00:	31c4b03a 	or	r2,r6,r7
  814b04:	103fec26 	beq	r2,zero,814ab8 <__divdf3+0x1d0>
  814b08:	7205883a 	add	r2,r14,r8
  814b0c:	1391803a 	cmpltu	r8,r2,r14
  814b10:	43d1883a 	add	r8,r8,r15
  814b14:	013fc004 	movi	r4,-256
  814b18:	111c703a 	and	r14,r2,r4
  814b1c:	401f883a 	mov	r15,r8
  814b20:	003fe506 	br	814ab8 <__divdf3+0x1d0>
  814b24:	8009883a 	mov	r4,r16
  814b28:	003f9206 	br	814974 <__divdf3+0x8c>
  814b2c:	9809883a 	mov	r4,r19
  814b30:	d8000715 	stw	zero,28(sp)
  814b34:	d8000815 	stw	zero,32(sp)
  814b38:	d8000615 	stw	zero,24(sp)
  814b3c:	003f8d06 	br	814974 <__divdf3+0x8c>

00814b40 <__eqdf2>:
  814b40:	deffef04 	addi	sp,sp,-68
  814b44:	dc400f15 	stw	r17,60(sp)
  814b48:	dc400404 	addi	r17,sp,16
  814b4c:	2005883a 	mov	r2,r4
  814b50:	2807883a 	mov	r3,r5
  814b54:	dc000e15 	stw	r16,56(sp)
  814b58:	d809883a 	mov	r4,sp
  814b5c:	880b883a 	mov	r5,r17
  814b60:	dc000904 	addi	r16,sp,36
  814b64:	d8c00115 	stw	r3,4(sp)
  814b68:	d8800015 	stw	r2,0(sp)
  814b6c:	d9800215 	stw	r6,8(sp)
  814b70:	dfc01015 	stw	ra,64(sp)
  814b74:	d9c00315 	stw	r7,12(sp)
  814b78:	080ba080 	call	80ba08 <__unpack_d>
  814b7c:	d9000204 	addi	r4,sp,8
  814b80:	800b883a 	mov	r5,r16
  814b84:	080ba080 	call	80ba08 <__unpack_d>
  814b88:	d8800417 	ldw	r2,16(sp)
  814b8c:	00c00044 	movi	r3,1
  814b90:	180d883a 	mov	r6,r3
  814b94:	1880062e 	bgeu	r3,r2,814bb0 <__eqdf2+0x70>
  814b98:	d8800917 	ldw	r2,36(sp)
  814b9c:	8809883a 	mov	r4,r17
  814ba0:	800b883a 	mov	r5,r16
  814ba4:	1880022e 	bgeu	r3,r2,814bb0 <__eqdf2+0x70>
  814ba8:	0814f7c0 	call	814f7c <__fpcmp_parts_d>
  814bac:	100d883a 	mov	r6,r2
  814bb0:	3005883a 	mov	r2,r6
  814bb4:	dfc01017 	ldw	ra,64(sp)
  814bb8:	dc400f17 	ldw	r17,60(sp)
  814bbc:	dc000e17 	ldw	r16,56(sp)
  814bc0:	dec01104 	addi	sp,sp,68
  814bc4:	f800283a 	ret

00814bc8 <__nedf2>:
  814bc8:	deffef04 	addi	sp,sp,-68
  814bcc:	dc400f15 	stw	r17,60(sp)
  814bd0:	dc400404 	addi	r17,sp,16
  814bd4:	2005883a 	mov	r2,r4
  814bd8:	2807883a 	mov	r3,r5
  814bdc:	dc000e15 	stw	r16,56(sp)
  814be0:	d809883a 	mov	r4,sp
  814be4:	880b883a 	mov	r5,r17
  814be8:	dc000904 	addi	r16,sp,36
  814bec:	d8c00115 	stw	r3,4(sp)
  814bf0:	d8800015 	stw	r2,0(sp)
  814bf4:	d9800215 	stw	r6,8(sp)
  814bf8:	dfc01015 	stw	ra,64(sp)
  814bfc:	d9c00315 	stw	r7,12(sp)
  814c00:	080ba080 	call	80ba08 <__unpack_d>
  814c04:	d9000204 	addi	r4,sp,8
  814c08:	800b883a 	mov	r5,r16
  814c0c:	080ba080 	call	80ba08 <__unpack_d>
  814c10:	d8800417 	ldw	r2,16(sp)
  814c14:	00c00044 	movi	r3,1
  814c18:	180d883a 	mov	r6,r3
  814c1c:	1880062e 	bgeu	r3,r2,814c38 <__nedf2+0x70>
  814c20:	d8800917 	ldw	r2,36(sp)
  814c24:	8809883a 	mov	r4,r17
  814c28:	800b883a 	mov	r5,r16
  814c2c:	1880022e 	bgeu	r3,r2,814c38 <__nedf2+0x70>
  814c30:	0814f7c0 	call	814f7c <__fpcmp_parts_d>
  814c34:	100d883a 	mov	r6,r2
  814c38:	3005883a 	mov	r2,r6
  814c3c:	dfc01017 	ldw	ra,64(sp)
  814c40:	dc400f17 	ldw	r17,60(sp)
  814c44:	dc000e17 	ldw	r16,56(sp)
  814c48:	dec01104 	addi	sp,sp,68
  814c4c:	f800283a 	ret

00814c50 <__gtdf2>:
  814c50:	deffef04 	addi	sp,sp,-68
  814c54:	dc400f15 	stw	r17,60(sp)
  814c58:	dc400404 	addi	r17,sp,16
  814c5c:	2005883a 	mov	r2,r4
  814c60:	2807883a 	mov	r3,r5
  814c64:	dc000e15 	stw	r16,56(sp)
  814c68:	d809883a 	mov	r4,sp
  814c6c:	880b883a 	mov	r5,r17
  814c70:	dc000904 	addi	r16,sp,36
  814c74:	d8c00115 	stw	r3,4(sp)
  814c78:	d8800015 	stw	r2,0(sp)
  814c7c:	d9800215 	stw	r6,8(sp)
  814c80:	dfc01015 	stw	ra,64(sp)
  814c84:	d9c00315 	stw	r7,12(sp)
  814c88:	080ba080 	call	80ba08 <__unpack_d>
  814c8c:	d9000204 	addi	r4,sp,8
  814c90:	800b883a 	mov	r5,r16
  814c94:	080ba080 	call	80ba08 <__unpack_d>
  814c98:	d8800417 	ldw	r2,16(sp)
  814c9c:	00c00044 	movi	r3,1
  814ca0:	01bfffc4 	movi	r6,-1
  814ca4:	1880062e 	bgeu	r3,r2,814cc0 <__gtdf2+0x70>
  814ca8:	d8800917 	ldw	r2,36(sp)
  814cac:	8809883a 	mov	r4,r17
  814cb0:	800b883a 	mov	r5,r16
  814cb4:	1880022e 	bgeu	r3,r2,814cc0 <__gtdf2+0x70>
  814cb8:	0814f7c0 	call	814f7c <__fpcmp_parts_d>
  814cbc:	100d883a 	mov	r6,r2
  814cc0:	3005883a 	mov	r2,r6
  814cc4:	dfc01017 	ldw	ra,64(sp)
  814cc8:	dc400f17 	ldw	r17,60(sp)
  814ccc:	dc000e17 	ldw	r16,56(sp)
  814cd0:	dec01104 	addi	sp,sp,68
  814cd4:	f800283a 	ret

00814cd8 <__gedf2>:
  814cd8:	deffef04 	addi	sp,sp,-68
  814cdc:	dc400f15 	stw	r17,60(sp)
  814ce0:	dc400404 	addi	r17,sp,16
  814ce4:	2005883a 	mov	r2,r4
  814ce8:	2807883a 	mov	r3,r5
  814cec:	dc000e15 	stw	r16,56(sp)
  814cf0:	d809883a 	mov	r4,sp
  814cf4:	880b883a 	mov	r5,r17
  814cf8:	dc000904 	addi	r16,sp,36
  814cfc:	d8c00115 	stw	r3,4(sp)
  814d00:	d8800015 	stw	r2,0(sp)
  814d04:	d9800215 	stw	r6,8(sp)
  814d08:	dfc01015 	stw	ra,64(sp)
  814d0c:	d9c00315 	stw	r7,12(sp)
  814d10:	080ba080 	call	80ba08 <__unpack_d>
  814d14:	d9000204 	addi	r4,sp,8
  814d18:	800b883a 	mov	r5,r16
  814d1c:	080ba080 	call	80ba08 <__unpack_d>
  814d20:	d8800417 	ldw	r2,16(sp)
  814d24:	00c00044 	movi	r3,1
  814d28:	01bfffc4 	movi	r6,-1
  814d2c:	1880062e 	bgeu	r3,r2,814d48 <__gedf2+0x70>
  814d30:	d8800917 	ldw	r2,36(sp)
  814d34:	8809883a 	mov	r4,r17
  814d38:	800b883a 	mov	r5,r16
  814d3c:	1880022e 	bgeu	r3,r2,814d48 <__gedf2+0x70>
  814d40:	0814f7c0 	call	814f7c <__fpcmp_parts_d>
  814d44:	100d883a 	mov	r6,r2
  814d48:	3005883a 	mov	r2,r6
  814d4c:	dfc01017 	ldw	ra,64(sp)
  814d50:	dc400f17 	ldw	r17,60(sp)
  814d54:	dc000e17 	ldw	r16,56(sp)
  814d58:	dec01104 	addi	sp,sp,68
  814d5c:	f800283a 	ret

00814d60 <__ltdf2>:
  814d60:	deffef04 	addi	sp,sp,-68
  814d64:	dc400f15 	stw	r17,60(sp)
  814d68:	dc400404 	addi	r17,sp,16
  814d6c:	2005883a 	mov	r2,r4
  814d70:	2807883a 	mov	r3,r5
  814d74:	dc000e15 	stw	r16,56(sp)
  814d78:	d809883a 	mov	r4,sp
  814d7c:	880b883a 	mov	r5,r17
  814d80:	dc000904 	addi	r16,sp,36
  814d84:	d8c00115 	stw	r3,4(sp)
  814d88:	d8800015 	stw	r2,0(sp)
  814d8c:	d9800215 	stw	r6,8(sp)
  814d90:	dfc01015 	stw	ra,64(sp)
  814d94:	d9c00315 	stw	r7,12(sp)
  814d98:	080ba080 	call	80ba08 <__unpack_d>
  814d9c:	d9000204 	addi	r4,sp,8
  814da0:	800b883a 	mov	r5,r16
  814da4:	080ba080 	call	80ba08 <__unpack_d>
  814da8:	d8800417 	ldw	r2,16(sp)
  814dac:	00c00044 	movi	r3,1
  814db0:	180d883a 	mov	r6,r3
  814db4:	1880062e 	bgeu	r3,r2,814dd0 <__ltdf2+0x70>
  814db8:	d8800917 	ldw	r2,36(sp)
  814dbc:	8809883a 	mov	r4,r17
  814dc0:	800b883a 	mov	r5,r16
  814dc4:	1880022e 	bgeu	r3,r2,814dd0 <__ltdf2+0x70>
  814dc8:	0814f7c0 	call	814f7c <__fpcmp_parts_d>
  814dcc:	100d883a 	mov	r6,r2
  814dd0:	3005883a 	mov	r2,r6
  814dd4:	dfc01017 	ldw	ra,64(sp)
  814dd8:	dc400f17 	ldw	r17,60(sp)
  814ddc:	dc000e17 	ldw	r16,56(sp)
  814de0:	dec01104 	addi	sp,sp,68
  814de4:	f800283a 	ret

00814de8 <__floatunsidf>:
  814de8:	defff204 	addi	sp,sp,-56
  814dec:	dfc00d15 	stw	ra,52(sp)
  814df0:	ddc00c15 	stw	r23,48(sp)
  814df4:	dd800b15 	stw	r22,44(sp)
  814df8:	dd400a15 	stw	r21,40(sp)
  814dfc:	dd000915 	stw	r20,36(sp)
  814e00:	dcc00815 	stw	r19,32(sp)
  814e04:	dc800715 	stw	r18,28(sp)
  814e08:	dc400615 	stw	r17,24(sp)
  814e0c:	dc000515 	stw	r16,20(sp)
  814e10:	d8000115 	stw	zero,4(sp)
  814e14:	20000f1e 	bne	r4,zero,814e54 <__floatunsidf+0x6c>
  814e18:	00800084 	movi	r2,2
  814e1c:	d8800015 	stw	r2,0(sp)
  814e20:	d809883a 	mov	r4,sp
  814e24:	080b6f40 	call	80b6f4 <__pack_d>
  814e28:	dfc00d17 	ldw	ra,52(sp)
  814e2c:	ddc00c17 	ldw	r23,48(sp)
  814e30:	dd800b17 	ldw	r22,44(sp)
  814e34:	dd400a17 	ldw	r21,40(sp)
  814e38:	dd000917 	ldw	r20,36(sp)
  814e3c:	dcc00817 	ldw	r19,32(sp)
  814e40:	dc800717 	ldw	r18,28(sp)
  814e44:	dc400617 	ldw	r17,24(sp)
  814e48:	dc000517 	ldw	r16,20(sp)
  814e4c:	dec00e04 	addi	sp,sp,56
  814e50:	f800283a 	ret
  814e54:	008000c4 	movi	r2,3
  814e58:	00c00f04 	movi	r3,60
  814e5c:	002f883a 	mov	r23,zero
  814e60:	202d883a 	mov	r22,r4
  814e64:	d8800015 	stw	r2,0(sp)
  814e68:	d8c00215 	stw	r3,8(sp)
  814e6c:	d9000315 	stw	r4,12(sp)
  814e70:	ddc00415 	stw	r23,16(sp)
  814e74:	080b3780 	call	80b378 <__clzsi2>
  814e78:	12400744 	addi	r9,r2,29
  814e7c:	48000b16 	blt	r9,zero,814eac <__floatunsidf+0xc4>
  814e80:	483fe726 	beq	r9,zero,814e20 <__floatunsidf+0x38>
  814e84:	10bfff44 	addi	r2,r2,-3
  814e88:	10002e16 	blt	r2,zero,814f44 <__floatunsidf+0x15c>
  814e8c:	b0a2983a 	sll	r17,r22,r2
  814e90:	0021883a 	mov	r16,zero
  814e94:	d8800217 	ldw	r2,8(sp)
  814e98:	dc400415 	stw	r17,16(sp)
  814e9c:	dc000315 	stw	r16,12(sp)
  814ea0:	1245c83a 	sub	r2,r2,r9
  814ea4:	d8800215 	stw	r2,8(sp)
  814ea8:	003fdd06 	br	814e20 <__floatunsidf+0x38>
  814eac:	0255c83a 	sub	r10,zero,r9
  814eb0:	51bff804 	addi	r6,r10,-32
  814eb4:	30001b16 	blt	r6,zero,814f24 <__floatunsidf+0x13c>
  814eb8:	b9a8d83a 	srl	r20,r23,r6
  814ebc:	002b883a 	mov	r21,zero
  814ec0:	000f883a 	mov	r7,zero
  814ec4:	01000044 	movi	r4,1
  814ec8:	0011883a 	mov	r8,zero
  814ecc:	30002516 	blt	r6,zero,814f64 <__floatunsidf+0x17c>
  814ed0:	21a6983a 	sll	r19,r4,r6
  814ed4:	0025883a 	mov	r18,zero
  814ed8:	00bfffc4 	movi	r2,-1
  814edc:	9089883a 	add	r4,r18,r2
  814ee0:	988b883a 	add	r5,r19,r2
  814ee4:	248d803a 	cmpltu	r6,r4,r18
  814ee8:	314b883a 	add	r5,r6,r5
  814eec:	b104703a 	and	r2,r22,r4
  814ef0:	b946703a 	and	r3,r23,r5
  814ef4:	10c4b03a 	or	r2,r2,r3
  814ef8:	10000226 	beq	r2,zero,814f04 <__floatunsidf+0x11c>
  814efc:	01c00044 	movi	r7,1
  814f00:	0011883a 	mov	r8,zero
  814f04:	d9000217 	ldw	r4,8(sp)
  814f08:	a1c4b03a 	or	r2,r20,r7
  814f0c:	aa06b03a 	or	r3,r21,r8
  814f10:	2249c83a 	sub	r4,r4,r9
  814f14:	d8c00415 	stw	r3,16(sp)
  814f18:	d9000215 	stw	r4,8(sp)
  814f1c:	d8800315 	stw	r2,12(sp)
  814f20:	003fbf06 	br	814e20 <__floatunsidf+0x38>
  814f24:	bdc7883a 	add	r3,r23,r23
  814f28:	008007c4 	movi	r2,31
  814f2c:	1285c83a 	sub	r2,r2,r10
  814f30:	1886983a 	sll	r3,r3,r2
  814f34:	b2a8d83a 	srl	r20,r22,r10
  814f38:	baaad83a 	srl	r21,r23,r10
  814f3c:	1d28b03a 	or	r20,r3,r20
  814f40:	003fdf06 	br	814ec0 <__floatunsidf+0xd8>
  814f44:	b006d07a 	srli	r3,r22,1
  814f48:	008007c4 	movi	r2,31
  814f4c:	1245c83a 	sub	r2,r2,r9
  814f50:	1886d83a 	srl	r3,r3,r2
  814f54:	ba62983a 	sll	r17,r23,r9
  814f58:	b260983a 	sll	r16,r22,r9
  814f5c:	1c62b03a 	or	r17,r3,r17
  814f60:	003fcc06 	br	814e94 <__floatunsidf+0xac>
  814f64:	2006d07a 	srli	r3,r4,1
  814f68:	008007c4 	movi	r2,31
  814f6c:	1285c83a 	sub	r2,r2,r10
  814f70:	18a6d83a 	srl	r19,r3,r2
  814f74:	22a4983a 	sll	r18,r4,r10
  814f78:	003fd706 	br	814ed8 <__floatunsidf+0xf0>

00814f7c <__fpcmp_parts_d>:
  814f7c:	21800017 	ldw	r6,0(r4)
  814f80:	00c00044 	movi	r3,1
  814f84:	19800a2e 	bgeu	r3,r6,814fb0 <__fpcmp_parts_d+0x34>
  814f88:	28800017 	ldw	r2,0(r5)
  814f8c:	1880082e 	bgeu	r3,r2,814fb0 <__fpcmp_parts_d+0x34>
  814f90:	00c00104 	movi	r3,4
  814f94:	30c02626 	beq	r6,r3,815030 <__fpcmp_parts_d+0xb4>
  814f98:	10c02226 	beq	r2,r3,815024 <__fpcmp_parts_d+0xa8>
  814f9c:	00c00084 	movi	r3,2
  814fa0:	30c00526 	beq	r6,r3,814fb8 <__fpcmp_parts_d+0x3c>
  814fa4:	10c0071e 	bne	r2,r3,814fc4 <__fpcmp_parts_d+0x48>
  814fa8:	20800117 	ldw	r2,4(r4)
  814fac:	1000091e 	bne	r2,zero,814fd4 <__fpcmp_parts_d+0x58>
  814fb0:	00800044 	movi	r2,1
  814fb4:	f800283a 	ret
  814fb8:	10c01a1e 	bne	r2,r3,815024 <__fpcmp_parts_d+0xa8>
  814fbc:	0005883a 	mov	r2,zero
  814fc0:	f800283a 	ret
  814fc4:	22000117 	ldw	r8,4(r4)
  814fc8:	28800117 	ldw	r2,4(r5)
  814fcc:	40800326 	beq	r8,r2,814fdc <__fpcmp_parts_d+0x60>
  814fd0:	403ff726 	beq	r8,zero,814fb0 <__fpcmp_parts_d+0x34>
  814fd4:	00bfffc4 	movi	r2,-1
  814fd8:	f800283a 	ret
  814fdc:	20c00217 	ldw	r3,8(r4)
  814fe0:	28800217 	ldw	r2,8(r5)
  814fe4:	10fffa16 	blt	r2,r3,814fd0 <__fpcmp_parts_d+0x54>
  814fe8:	18800916 	blt	r3,r2,815010 <__fpcmp_parts_d+0x94>
  814fec:	21c00417 	ldw	r7,16(r4)
  814ff0:	28c00417 	ldw	r3,16(r5)
  814ff4:	21800317 	ldw	r6,12(r4)
  814ff8:	28800317 	ldw	r2,12(r5)
  814ffc:	19fff436 	bltu	r3,r7,814fd0 <__fpcmp_parts_d+0x54>
  815000:	38c00526 	beq	r7,r3,815018 <__fpcmp_parts_d+0x9c>
  815004:	38c00236 	bltu	r7,r3,815010 <__fpcmp_parts_d+0x94>
  815008:	19ffec1e 	bne	r3,r7,814fbc <__fpcmp_parts_d+0x40>
  81500c:	30bfeb2e 	bgeu	r6,r2,814fbc <__fpcmp_parts_d+0x40>
  815010:	403fe71e 	bne	r8,zero,814fb0 <__fpcmp_parts_d+0x34>
  815014:	003fef06 	br	814fd4 <__fpcmp_parts_d+0x58>
  815018:	11bffa2e 	bgeu	r2,r6,815004 <__fpcmp_parts_d+0x88>
  81501c:	403fe426 	beq	r8,zero,814fb0 <__fpcmp_parts_d+0x34>
  815020:	003fec06 	br	814fd4 <__fpcmp_parts_d+0x58>
  815024:	28800117 	ldw	r2,4(r5)
  815028:	103fe11e 	bne	r2,zero,814fb0 <__fpcmp_parts_d+0x34>
  81502c:	003fe906 	br	814fd4 <__fpcmp_parts_d+0x58>
  815030:	11bfdd1e 	bne	r2,r6,814fa8 <__fpcmp_parts_d+0x2c>
  815034:	28c00117 	ldw	r3,4(r5)
  815038:	20800117 	ldw	r2,4(r4)
  81503c:	1885c83a 	sub	r2,r3,r2
  815040:	f800283a 	ret

00815044 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  815044:	defff404 	addi	sp,sp,-48
  815048:	df000b15 	stw	fp,44(sp)
  81504c:	df000b04 	addi	fp,sp,44
  815050:	e13ffb15 	stw	r4,-20(fp)
  815054:	e17ffc15 	stw	r5,-16(fp)
  815058:	e1bffd15 	stw	r6,-12(fp)
  81505c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  815060:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  815064:	008020b4 	movhi	r2,130
  815068:	1091d004 	addi	r2,r2,18240
  81506c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  815070:	1005003a 	cmpeq	r2,r2,zero
  815074:	1000411e 	bne	r2,zero,81517c <alt_alarm_start+0x138>
  {
    if (alarm)
  815078:	e0bffb17 	ldw	r2,-20(fp)
  81507c:	1005003a 	cmpeq	r2,r2,zero
  815080:	10003b1e 	bne	r2,zero,815170 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  815084:	e0fffb17 	ldw	r3,-20(fp)
  815088:	e0bffd17 	ldw	r2,-12(fp)
  81508c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  815090:	e0fffb17 	ldw	r3,-20(fp)
  815094:	e0bffe17 	ldw	r2,-8(fp)
  815098:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81509c:	0005303a 	rdctl	r2,status
  8150a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8150a4:	e0fff817 	ldw	r3,-32(fp)
  8150a8:	00bfff84 	movi	r2,-2
  8150ac:	1884703a 	and	r2,r3,r2
  8150b0:	1001703a 	wrctl	status,r2
  
  return context;
  8150b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8150b8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8150bc:	008020b4 	movhi	r2,130
  8150c0:	1091d104 	addi	r2,r2,18244
  8150c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8150c8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8150cc:	e0fffc17 	ldw	r3,-16(fp)
  8150d0:	e0bff917 	ldw	r2,-28(fp)
  8150d4:	1885883a 	add	r2,r3,r2
  8150d8:	10c00044 	addi	r3,r2,1
  8150dc:	e0bffb17 	ldw	r2,-20(fp)
  8150e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8150e4:	e0bffb17 	ldw	r2,-20(fp)
  8150e8:	10c00217 	ldw	r3,8(r2)
  8150ec:	e0bff917 	ldw	r2,-28(fp)
  8150f0:	1880042e 	bgeu	r3,r2,815104 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8150f4:	e0fffb17 	ldw	r3,-20(fp)
  8150f8:	00800044 	movi	r2,1
  8150fc:	18800405 	stb	r2,16(r3)
  815100:	00000206 	br	81510c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  815104:	e0bffb17 	ldw	r2,-20(fp)
  815108:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81510c:	e0fffb17 	ldw	r3,-20(fp)
  815110:	008020b4 	movhi	r2,130
  815114:	108a7704 	addi	r2,r2,10716
  815118:	e0bff615 	stw	r2,-40(fp)
  81511c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  815120:	e0fff717 	ldw	r3,-36(fp)
  815124:	e0bff617 	ldw	r2,-40(fp)
  815128:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81512c:	e0bff617 	ldw	r2,-40(fp)
  815130:	10c00017 	ldw	r3,0(r2)
  815134:	e0bff717 	ldw	r2,-36(fp)
  815138:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81513c:	e0bff617 	ldw	r2,-40(fp)
  815140:	10c00017 	ldw	r3,0(r2)
  815144:	e0bff717 	ldw	r2,-36(fp)
  815148:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81514c:	e0fff617 	ldw	r3,-40(fp)
  815150:	e0bff717 	ldw	r2,-36(fp)
  815154:	18800015 	stw	r2,0(r3)
  815158:	e0bffa17 	ldw	r2,-24(fp)
  81515c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815160:	e0bff517 	ldw	r2,-44(fp)
  815164:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  815168:	e03fff15 	stw	zero,-4(fp)
  81516c:	00000506 	br	815184 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  815170:	00bffa84 	movi	r2,-22
  815174:	e0bfff15 	stw	r2,-4(fp)
  815178:	00000206 	br	815184 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81517c:	00bfde84 	movi	r2,-134
  815180:	e0bfff15 	stw	r2,-4(fp)
  815184:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  815188:	e037883a 	mov	sp,fp
  81518c:	df000017 	ldw	fp,0(sp)
  815190:	dec00104 	addi	sp,sp,4
  815194:	f800283a 	ret

00815198 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  815198:	defff804 	addi	sp,sp,-32
  81519c:	dfc00715 	stw	ra,28(sp)
  8151a0:	df000615 	stw	fp,24(sp)
  8151a4:	df000604 	addi	fp,sp,24
  8151a8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8151ac:	e0bffc17 	ldw	r2,-16(fp)
  8151b0:	1004803a 	cmplt	r2,r2,zero
  8151b4:	1000081e 	bne	r2,zero,8151d8 <close+0x40>
  8151b8:	e0bffc17 	ldw	r2,-16(fp)
  8151bc:	10800324 	muli	r2,r2,12
  8151c0:	1007883a 	mov	r3,r2
  8151c4:	008020b4 	movhi	r2,130
  8151c8:	10858204 	addi	r2,r2,5640
  8151cc:	1887883a 	add	r3,r3,r2
  8151d0:	e0ffff15 	stw	r3,-4(fp)
  8151d4:	00000106 	br	8151dc <close+0x44>
  8151d8:	e03fff15 	stw	zero,-4(fp)
  8151dc:	e0bfff17 	ldw	r2,-4(fp)
  8151e0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8151e4:	e0bffb17 	ldw	r2,-20(fp)
  8151e8:	1005003a 	cmpeq	r2,r2,zero
  8151ec:	10001d1e 	bne	r2,zero,815264 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8151f0:	e0bffb17 	ldw	r2,-20(fp)
  8151f4:	10800017 	ldw	r2,0(r2)
  8151f8:	10800417 	ldw	r2,16(r2)
  8151fc:	1005003a 	cmpeq	r2,r2,zero
  815200:	1000071e 	bne	r2,zero,815220 <close+0x88>
  815204:	e0bffb17 	ldw	r2,-20(fp)
  815208:	10800017 	ldw	r2,0(r2)
  81520c:	10800417 	ldw	r2,16(r2)
  815210:	e13ffb17 	ldw	r4,-20(fp)
  815214:	103ee83a 	callr	r2
  815218:	e0bffe15 	stw	r2,-8(fp)
  81521c:	00000106 	br	815224 <close+0x8c>
  815220:	e03ffe15 	stw	zero,-8(fp)
  815224:	e0bffe17 	ldw	r2,-8(fp)
  815228:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  81522c:	e13ffc17 	ldw	r4,-16(fp)
  815230:	0815b9c0 	call	815b9c <alt_release_fd>
    if (rval < 0)
  815234:	e0bffa17 	ldw	r2,-24(fp)
  815238:	1004403a 	cmpge	r2,r2,zero
  81523c:	1000071e 	bne	r2,zero,81525c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  815240:	08152940 	call	815294 <alt_get_errno>
  815244:	e0fffa17 	ldw	r3,-24(fp)
  815248:	00c7c83a 	sub	r3,zero,r3
  81524c:	10c00015 	stw	r3,0(r2)
      return -1;
  815250:	00bfffc4 	movi	r2,-1
  815254:	e0bffd15 	stw	r2,-12(fp)
  815258:	00000806 	br	81527c <close+0xe4>
    }
    return 0;
  81525c:	e03ffd15 	stw	zero,-12(fp)
  815260:	00000606 	br	81527c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  815264:	08152940 	call	815294 <alt_get_errno>
  815268:	1007883a 	mov	r3,r2
  81526c:	00801444 	movi	r2,81
  815270:	18800015 	stw	r2,0(r3)
    return -1;
  815274:	00bfffc4 	movi	r2,-1
  815278:	e0bffd15 	stw	r2,-12(fp)
  81527c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  815280:	e037883a 	mov	sp,fp
  815284:	dfc00117 	ldw	ra,4(sp)
  815288:	df000017 	ldw	fp,0(sp)
  81528c:	dec00204 	addi	sp,sp,8
  815290:	f800283a 	ret

00815294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815294:	defffd04 	addi	sp,sp,-12
  815298:	dfc00215 	stw	ra,8(sp)
  81529c:	df000115 	stw	fp,4(sp)
  8152a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8152a4:	008020b4 	movhi	r2,130
  8152a8:	108a7404 	addi	r2,r2,10704
  8152ac:	10800017 	ldw	r2,0(r2)
  8152b0:	1005003a 	cmpeq	r2,r2,zero
  8152b4:	1000061e 	bne	r2,zero,8152d0 <alt_get_errno+0x3c>
  8152b8:	008020b4 	movhi	r2,130
  8152bc:	108a7404 	addi	r2,r2,10704
  8152c0:	10800017 	ldw	r2,0(r2)
  8152c4:	103ee83a 	callr	r2
  8152c8:	e0bfff15 	stw	r2,-4(fp)
  8152cc:	00000306 	br	8152dc <alt_get_errno+0x48>
  8152d0:	008020b4 	movhi	r2,130
  8152d4:	1091c804 	addi	r2,r2,18208
  8152d8:	e0bfff15 	stw	r2,-4(fp)
  8152dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8152e0:	e037883a 	mov	sp,fp
  8152e4:	dfc00117 	ldw	ra,4(sp)
  8152e8:	df000017 	ldw	fp,0(sp)
  8152ec:	dec00204 	addi	sp,sp,8
  8152f0:	f800283a 	ret

008152f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8152f4:	defffc04 	addi	sp,sp,-16
  8152f8:	df000315 	stw	fp,12(sp)
  8152fc:	df000304 	addi	fp,sp,12
  815300:	e13ffd15 	stw	r4,-12(fp)
  815304:	e17ffe15 	stw	r5,-8(fp)
  815308:	e1bfff15 	stw	r6,-4(fp)
  return len;
  81530c:	e0bfff17 	ldw	r2,-4(fp)
}
  815310:	e037883a 	mov	sp,fp
  815314:	df000017 	ldw	fp,0(sp)
  815318:	dec00104 	addi	sp,sp,4
  81531c:	f800283a 	ret

00815320 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  815320:	defff904 	addi	sp,sp,-28
  815324:	dfc00615 	stw	ra,24(sp)
  815328:	df000515 	stw	fp,20(sp)
  81532c:	df000504 	addi	fp,sp,20
  815330:	e13ffc15 	stw	r4,-16(fp)
  815334:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815338:	e0bffc17 	ldw	r2,-16(fp)
  81533c:	1004803a 	cmplt	r2,r2,zero
  815340:	1000081e 	bne	r2,zero,815364 <fstat+0x44>
  815344:	e0bffc17 	ldw	r2,-16(fp)
  815348:	10800324 	muli	r2,r2,12
  81534c:	1007883a 	mov	r3,r2
  815350:	008020b4 	movhi	r2,130
  815354:	10858204 	addi	r2,r2,5640
  815358:	1887883a 	add	r3,r3,r2
  81535c:	e0ffff15 	stw	r3,-4(fp)
  815360:	00000106 	br	815368 <fstat+0x48>
  815364:	e03fff15 	stw	zero,-4(fp)
  815368:	e0bfff17 	ldw	r2,-4(fp)
  81536c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  815370:	e0bffb17 	ldw	r2,-20(fp)
  815374:	1005003a 	cmpeq	r2,r2,zero
  815378:	1000121e 	bne	r2,zero,8153c4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  81537c:	e0bffb17 	ldw	r2,-20(fp)
  815380:	10800017 	ldw	r2,0(r2)
  815384:	10800817 	ldw	r2,32(r2)
  815388:	1005003a 	cmpeq	r2,r2,zero
  81538c:	1000081e 	bne	r2,zero,8153b0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  815390:	e0bffb17 	ldw	r2,-20(fp)
  815394:	10800017 	ldw	r2,0(r2)
  815398:	10800817 	ldw	r2,32(r2)
  81539c:	e13ffb17 	ldw	r4,-20(fp)
  8153a0:	e17ffd17 	ldw	r5,-12(fp)
  8153a4:	103ee83a 	callr	r2
  8153a8:	e0bffe15 	stw	r2,-8(fp)
  8153ac:	00000b06 	br	8153dc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8153b0:	e0fffd17 	ldw	r3,-12(fp)
  8153b4:	00880004 	movi	r2,8192
  8153b8:	18800115 	stw	r2,4(r3)
      return 0;
  8153bc:	e03ffe15 	stw	zero,-8(fp)
  8153c0:	00000606 	br	8153dc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8153c4:	08153f40 	call	8153f4 <alt_get_errno>
  8153c8:	1007883a 	mov	r3,r2
  8153cc:	00801444 	movi	r2,81
  8153d0:	18800015 	stw	r2,0(r3)
    return -1;
  8153d4:	00bfffc4 	movi	r2,-1
  8153d8:	e0bffe15 	stw	r2,-8(fp)
  8153dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8153e0:	e037883a 	mov	sp,fp
  8153e4:	dfc00117 	ldw	ra,4(sp)
  8153e8:	df000017 	ldw	fp,0(sp)
  8153ec:	dec00204 	addi	sp,sp,8
  8153f0:	f800283a 	ret

008153f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8153f4:	defffd04 	addi	sp,sp,-12
  8153f8:	dfc00215 	stw	ra,8(sp)
  8153fc:	df000115 	stw	fp,4(sp)
  815400:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815404:	008020b4 	movhi	r2,130
  815408:	108a7404 	addi	r2,r2,10704
  81540c:	10800017 	ldw	r2,0(r2)
  815410:	1005003a 	cmpeq	r2,r2,zero
  815414:	1000061e 	bne	r2,zero,815430 <alt_get_errno+0x3c>
  815418:	008020b4 	movhi	r2,130
  81541c:	108a7404 	addi	r2,r2,10704
  815420:	10800017 	ldw	r2,0(r2)
  815424:	103ee83a 	callr	r2
  815428:	e0bfff15 	stw	r2,-4(fp)
  81542c:	00000306 	br	81543c <alt_get_errno+0x48>
  815430:	008020b4 	movhi	r2,130
  815434:	1091c804 	addi	r2,r2,18208
  815438:	e0bfff15 	stw	r2,-4(fp)
  81543c:	e0bfff17 	ldw	r2,-4(fp)
}
  815440:	e037883a 	mov	sp,fp
  815444:	dfc00117 	ldw	ra,4(sp)
  815448:	df000017 	ldw	fp,0(sp)
  81544c:	dec00204 	addi	sp,sp,8
  815450:	f800283a 	ret

00815454 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  815454:	deffef04 	addi	sp,sp,-68
  815458:	df001015 	stw	fp,64(sp)
  81545c:	df001004 	addi	fp,sp,64
  815460:	e13ffc15 	stw	r4,-16(fp)
  815464:	e17ffd15 	stw	r5,-12(fp)
  815468:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  81546c:	00bffa84 	movi	r2,-22
  815470:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  815474:	e0bffc17 	ldw	r2,-16(fp)
  815478:	10800828 	cmpgeui	r2,r2,32
  81547c:	1000601e 	bne	r2,zero,815600 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815480:	0005303a 	rdctl	r2,status
  815484:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815488:	e0fff917 	ldw	r3,-28(fp)
  81548c:	00bfff84 	movi	r2,-2
  815490:	1884703a 	and	r2,r3,r2
  815494:	1001703a 	wrctl	status,r2
  
  return context;
  815498:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81549c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  8154a0:	e0bffc17 	ldw	r2,-16(fp)
  8154a4:	00c020f4 	movhi	r3,131
  8154a8:	18fc8b04 	addi	r3,r3,-3540
  8154ac:	100490fa 	slli	r2,r2,3
  8154b0:	10c7883a 	add	r3,r2,r3
  8154b4:	e0bffe17 	ldw	r2,-8(fp)
  8154b8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  8154bc:	e0bffc17 	ldw	r2,-16(fp)
  8154c0:	00c020f4 	movhi	r3,131
  8154c4:	18fc8b04 	addi	r3,r3,-3540
  8154c8:	100490fa 	slli	r2,r2,3
  8154cc:	10c5883a 	add	r2,r2,r3
  8154d0:	10c00104 	addi	r3,r2,4
  8154d4:	e0bffd17 	ldw	r2,-12(fp)
  8154d8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8154dc:	e0bffe17 	ldw	r2,-8(fp)
  8154e0:	1005003a 	cmpeq	r2,r2,zero
  8154e4:	1000201e 	bne	r2,zero,815568 <alt_irq_register+0x114>
  8154e8:	e0bffc17 	ldw	r2,-16(fp)
  8154ec:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8154f0:	0005303a 	rdctl	r2,status
  8154f4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8154f8:	e0fff617 	ldw	r3,-40(fp)
  8154fc:	00bfff84 	movi	r2,-2
  815500:	1884703a 	and	r2,r3,r2
  815504:	1001703a 	wrctl	status,r2
  
  return context;
  815508:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81550c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  815510:	e0fff717 	ldw	r3,-36(fp)
  815514:	00800044 	movi	r2,1
  815518:	10c4983a 	sll	r2,r2,r3
  81551c:	1007883a 	mov	r3,r2
  815520:	008020b4 	movhi	r2,130
  815524:	1091cc04 	addi	r2,r2,18224
  815528:	10800017 	ldw	r2,0(r2)
  81552c:	1886b03a 	or	r3,r3,r2
  815530:	008020b4 	movhi	r2,130
  815534:	1091cc04 	addi	r2,r2,18224
  815538:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81553c:	008020b4 	movhi	r2,130
  815540:	1091cc04 	addi	r2,r2,18224
  815544:	10800017 	ldw	r2,0(r2)
  815548:	100170fa 	wrctl	ienable,r2
  81554c:	e0bff817 	ldw	r2,-32(fp)
  815550:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815554:	e0bff517 	ldw	r2,-44(fp)
  815558:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81555c:	0005883a 	mov	r2,zero
  815560:	e0bfff15 	stw	r2,-4(fp)
  815564:	00002006 	br	8155e8 <alt_irq_register+0x194>
  815568:	e0bffc17 	ldw	r2,-16(fp)
  81556c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815570:	0005303a 	rdctl	r2,status
  815574:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815578:	e0fff217 	ldw	r3,-56(fp)
  81557c:	00bfff84 	movi	r2,-2
  815580:	1884703a 	and	r2,r3,r2
  815584:	1001703a 	wrctl	status,r2
  
  return context;
  815588:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81558c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  815590:	e0fff317 	ldw	r3,-52(fp)
  815594:	00800044 	movi	r2,1
  815598:	10c4983a 	sll	r2,r2,r3
  81559c:	0084303a 	nor	r2,zero,r2
  8155a0:	1007883a 	mov	r3,r2
  8155a4:	008020b4 	movhi	r2,130
  8155a8:	1091cc04 	addi	r2,r2,18224
  8155ac:	10800017 	ldw	r2,0(r2)
  8155b0:	1886703a 	and	r3,r3,r2
  8155b4:	008020b4 	movhi	r2,130
  8155b8:	1091cc04 	addi	r2,r2,18224
  8155bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8155c0:	008020b4 	movhi	r2,130
  8155c4:	1091cc04 	addi	r2,r2,18224
  8155c8:	10800017 	ldw	r2,0(r2)
  8155cc:	100170fa 	wrctl	ienable,r2
  8155d0:	e0bff417 	ldw	r2,-48(fp)
  8155d4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8155d8:	e0bff117 	ldw	r2,-60(fp)
  8155dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8155e0:	0005883a 	mov	r2,zero
  8155e4:	e0bfff15 	stw	r2,-4(fp)
  8155e8:	e0bfff17 	ldw	r2,-4(fp)
  8155ec:	e0bffb15 	stw	r2,-20(fp)
  8155f0:	e0bffa17 	ldw	r2,-24(fp)
  8155f4:	e0bff015 	stw	r2,-64(fp)
  8155f8:	e0bff017 	ldw	r2,-64(fp)
  8155fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  815600:	e0bffb17 	ldw	r2,-20(fp)
}
  815604:	e037883a 	mov	sp,fp
  815608:	df000017 	ldw	fp,0(sp)
  81560c:	dec00104 	addi	sp,sp,4
  815610:	f800283a 	ret

00815614 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  815614:	deffeb04 	addi	sp,sp,-84
  815618:	dfc01415 	stw	ra,80(sp)
  81561c:	df001315 	stw	fp,76(sp)
  815620:	df001304 	addi	fp,sp,76
  815624:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815628:	e0bffd17 	ldw	r2,-12(fp)
  81562c:	1004803a 	cmplt	r2,r2,zero
  815630:	1000081e 	bne	r2,zero,815654 <isatty+0x40>
  815634:	e0bffd17 	ldw	r2,-12(fp)
  815638:	10800324 	muli	r2,r2,12
  81563c:	1007883a 	mov	r3,r2
  815640:	008020b4 	movhi	r2,130
  815644:	10858204 	addi	r2,r2,5640
  815648:	1887883a 	add	r3,r3,r2
  81564c:	e0ffff15 	stw	r3,-4(fp)
  815650:	00000106 	br	815658 <isatty+0x44>
  815654:	e03fff15 	stw	zero,-4(fp)
  815658:	e0bfff17 	ldw	r2,-4(fp)
  81565c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  815660:	e0bfed17 	ldw	r2,-76(fp)
  815664:	1005003a 	cmpeq	r2,r2,zero
  815668:	10000f1e 	bne	r2,zero,8156a8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  81566c:	e0bfed17 	ldw	r2,-76(fp)
  815670:	10800017 	ldw	r2,0(r2)
  815674:	10800817 	ldw	r2,32(r2)
  815678:	1004c03a 	cmpne	r2,r2,zero
  81567c:	1000031e 	bne	r2,zero,81568c <isatty+0x78>
    {
      return 1;
  815680:	00800044 	movi	r2,1
  815684:	e0bffe15 	stw	r2,-8(fp)
  815688:	00000c06 	br	8156bc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81568c:	e17fee04 	addi	r5,fp,-72
  815690:	e13ffd17 	ldw	r4,-12(fp)
  815694:	08153200 	call	815320 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  815698:	e0bfef17 	ldw	r2,-68(fp)
  81569c:	10880020 	cmpeqi	r2,r2,8192
  8156a0:	e0bffe15 	stw	r2,-8(fp)
  8156a4:	00000506 	br	8156bc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8156a8:	08156d40 	call	8156d4 <alt_get_errno>
  8156ac:	1007883a 	mov	r3,r2
  8156b0:	00801444 	movi	r2,81
  8156b4:	18800015 	stw	r2,0(r3)
    return 0;
  8156b8:	e03ffe15 	stw	zero,-8(fp)
  8156bc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8156c0:	e037883a 	mov	sp,fp
  8156c4:	dfc00117 	ldw	ra,4(sp)
  8156c8:	df000017 	ldw	fp,0(sp)
  8156cc:	dec00204 	addi	sp,sp,8
  8156d0:	f800283a 	ret

008156d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8156d4:	defffd04 	addi	sp,sp,-12
  8156d8:	dfc00215 	stw	ra,8(sp)
  8156dc:	df000115 	stw	fp,4(sp)
  8156e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8156e4:	008020b4 	movhi	r2,130
  8156e8:	108a7404 	addi	r2,r2,10704
  8156ec:	10800017 	ldw	r2,0(r2)
  8156f0:	1005003a 	cmpeq	r2,r2,zero
  8156f4:	1000061e 	bne	r2,zero,815710 <alt_get_errno+0x3c>
  8156f8:	008020b4 	movhi	r2,130
  8156fc:	108a7404 	addi	r2,r2,10704
  815700:	10800017 	ldw	r2,0(r2)
  815704:	103ee83a 	callr	r2
  815708:	e0bfff15 	stw	r2,-4(fp)
  81570c:	00000306 	br	81571c <alt_get_errno+0x48>
  815710:	008020b4 	movhi	r2,130
  815714:	1091c804 	addi	r2,r2,18208
  815718:	e0bfff15 	stw	r2,-4(fp)
  81571c:	e0bfff17 	ldw	r2,-4(fp)
}
  815720:	e037883a 	mov	sp,fp
  815724:	dfc00117 	ldw	ra,4(sp)
  815728:	df000017 	ldw	fp,0(sp)
  81572c:	dec00204 	addi	sp,sp,8
  815730:	f800283a 	ret

00815734 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  815734:	defffe04 	addi	sp,sp,-8
  815738:	dfc00115 	stw	ra,4(sp)
  81573c:	df000015 	stw	fp,0(sp)
  815740:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  815744:	010020b4 	movhi	r4,130
  815748:	210a7904 	addi	r4,r4,10724
  81574c:	014020b4 	movhi	r5,130
  815750:	29433304 	addi	r5,r5,3276
  815754:	018020b4 	movhi	r6,130
  815758:	318a7904 	addi	r6,r6,10724
  81575c:	08157b40 	call	8157b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  815760:	01002034 	movhi	r4,128
  815764:	21000804 	addi	r4,r4,32
  815768:	01402034 	movhi	r5,128
  81576c:	29400804 	addi	r5,r5,32
  815770:	01802034 	movhi	r6,128
  815774:	31806e04 	addi	r6,r6,440
  815778:	08157b40 	call	8157b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  81577c:	010020b4 	movhi	r4,130
  815780:	213e9604 	addi	r4,r4,-1448
  815784:	014020b4 	movhi	r5,130
  815788:	297e9604 	addi	r5,r5,-1448
  81578c:	018020b4 	movhi	r6,130
  815790:	31833304 	addi	r6,r6,3276
  815794:	08157b40 	call	8157b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  815798:	081ece80 	call	81ece8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  81579c:	081ef9c0 	call	81ef9c <alt_icache_flush_all>
}
  8157a0:	e037883a 	mov	sp,fp
  8157a4:	dfc00117 	ldw	ra,4(sp)
  8157a8:	df000017 	ldw	fp,0(sp)
  8157ac:	dec00204 	addi	sp,sp,8
  8157b0:	f800283a 	ret

008157b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8157b4:	defffc04 	addi	sp,sp,-16
  8157b8:	df000315 	stw	fp,12(sp)
  8157bc:	df000304 	addi	fp,sp,12
  8157c0:	e13ffd15 	stw	r4,-12(fp)
  8157c4:	e17ffe15 	stw	r5,-8(fp)
  8157c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8157cc:	e0fffe17 	ldw	r3,-8(fp)
  8157d0:	e0bffd17 	ldw	r2,-12(fp)
  8157d4:	18800e26 	beq	r3,r2,815810 <alt_load_section+0x5c>
  {
    while( to != end )
  8157d8:	00000a06 	br	815804 <alt_load_section+0x50>
    {
      *to++ = *from++;
  8157dc:	e0bffd17 	ldw	r2,-12(fp)
  8157e0:	10c00017 	ldw	r3,0(r2)
  8157e4:	e0bffe17 	ldw	r2,-8(fp)
  8157e8:	10c00015 	stw	r3,0(r2)
  8157ec:	e0bffe17 	ldw	r2,-8(fp)
  8157f0:	10800104 	addi	r2,r2,4
  8157f4:	e0bffe15 	stw	r2,-8(fp)
  8157f8:	e0bffd17 	ldw	r2,-12(fp)
  8157fc:	10800104 	addi	r2,r2,4
  815800:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  815804:	e0fffe17 	ldw	r3,-8(fp)
  815808:	e0bfff17 	ldw	r2,-4(fp)
  81580c:	18bff31e 	bne	r3,r2,8157dc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  815810:	e037883a 	mov	sp,fp
  815814:	df000017 	ldw	fp,0(sp)
  815818:	dec00104 	addi	sp,sp,4
  81581c:	f800283a 	ret

00815820 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  815820:	defff804 	addi	sp,sp,-32
  815824:	dfc00715 	stw	ra,28(sp)
  815828:	df000615 	stw	fp,24(sp)
  81582c:	df000604 	addi	fp,sp,24
  815830:	e13ffc15 	stw	r4,-16(fp)
  815834:	e17ffd15 	stw	r5,-12(fp)
  815838:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  81583c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815840:	e0bffc17 	ldw	r2,-16(fp)
  815844:	1004803a 	cmplt	r2,r2,zero
  815848:	1000081e 	bne	r2,zero,81586c <lseek+0x4c>
  81584c:	e0bffc17 	ldw	r2,-16(fp)
  815850:	10800324 	muli	r2,r2,12
  815854:	1007883a 	mov	r3,r2
  815858:	008020b4 	movhi	r2,130
  81585c:	10858204 	addi	r2,r2,5640
  815860:	1887883a 	add	r3,r3,r2
  815864:	e0ffff15 	stw	r3,-4(fp)
  815868:	00000106 	br	815870 <lseek+0x50>
  81586c:	e03fff15 	stw	zero,-4(fp)
  815870:	e0bfff17 	ldw	r2,-4(fp)
  815874:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  815878:	e0bffb17 	ldw	r2,-20(fp)
  81587c:	1005003a 	cmpeq	r2,r2,zero
  815880:	1000111e 	bne	r2,zero,8158c8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  815884:	e0bffb17 	ldw	r2,-20(fp)
  815888:	10800017 	ldw	r2,0(r2)
  81588c:	10800717 	ldw	r2,28(r2)
  815890:	1005003a 	cmpeq	r2,r2,zero
  815894:	1000091e 	bne	r2,zero,8158bc <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  815898:	e0bffb17 	ldw	r2,-20(fp)
  81589c:	10800017 	ldw	r2,0(r2)
  8158a0:	10800717 	ldw	r2,28(r2)
  8158a4:	e13ffb17 	ldw	r4,-20(fp)
  8158a8:	e17ffd17 	ldw	r5,-12(fp)
  8158ac:	e1bffe17 	ldw	r6,-8(fp)
  8158b0:	103ee83a 	callr	r2
  8158b4:	e0bffa15 	stw	r2,-24(fp)
  8158b8:	00000506 	br	8158d0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8158bc:	00bfde84 	movi	r2,-134
  8158c0:	e0bffa15 	stw	r2,-24(fp)
  8158c4:	00000206 	br	8158d0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  8158c8:	00bfebc4 	movi	r2,-81
  8158cc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8158d0:	e0bffa17 	ldw	r2,-24(fp)
  8158d4:	1004403a 	cmpge	r2,r2,zero
  8158d8:	1000071e 	bne	r2,zero,8158f8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  8158dc:	08159100 	call	815910 <alt_get_errno>
  8158e0:	1007883a 	mov	r3,r2
  8158e4:	e0bffa17 	ldw	r2,-24(fp)
  8158e8:	0085c83a 	sub	r2,zero,r2
  8158ec:	18800015 	stw	r2,0(r3)
    rc = -1;
  8158f0:	00bfffc4 	movi	r2,-1
  8158f4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  8158f8:	e0bffa17 	ldw	r2,-24(fp)
}
  8158fc:	e037883a 	mov	sp,fp
  815900:	dfc00117 	ldw	ra,4(sp)
  815904:	df000017 	ldw	fp,0(sp)
  815908:	dec00204 	addi	sp,sp,8
  81590c:	f800283a 	ret

00815910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815910:	defffd04 	addi	sp,sp,-12
  815914:	dfc00215 	stw	ra,8(sp)
  815918:	df000115 	stw	fp,4(sp)
  81591c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815920:	008020b4 	movhi	r2,130
  815924:	108a7404 	addi	r2,r2,10704
  815928:	10800017 	ldw	r2,0(r2)
  81592c:	1005003a 	cmpeq	r2,r2,zero
  815930:	1000061e 	bne	r2,zero,81594c <alt_get_errno+0x3c>
  815934:	008020b4 	movhi	r2,130
  815938:	108a7404 	addi	r2,r2,10704
  81593c:	10800017 	ldw	r2,0(r2)
  815940:	103ee83a 	callr	r2
  815944:	e0bfff15 	stw	r2,-4(fp)
  815948:	00000306 	br	815958 <alt_get_errno+0x48>
  81594c:	008020b4 	movhi	r2,130
  815950:	1091c804 	addi	r2,r2,18208
  815954:	e0bfff15 	stw	r2,-4(fp)
  815958:	e0bfff17 	ldw	r2,-4(fp)
}
  81595c:	e037883a 	mov	sp,fp
  815960:	dfc00117 	ldw	ra,4(sp)
  815964:	df000017 	ldw	fp,0(sp)
  815968:	dec00204 	addi	sp,sp,8
  81596c:	f800283a 	ret

00815970 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  815970:	defffd04 	addi	sp,sp,-12
  815974:	dfc00215 	stw	ra,8(sp)
  815978:	df000115 	stw	fp,4(sp)
  81597c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  815980:	0009883a 	mov	r4,zero
  815984:	0815fdc0 	call	815fdc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  815988:	08160100 	call	816010 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81598c:	010020b4 	movhi	r4,130
  815990:	2102f704 	addi	r4,r4,3036
  815994:	014020b4 	movhi	r5,130
  815998:	2942f704 	addi	r5,r5,3036
  81599c:	018020b4 	movhi	r6,130
  8159a0:	3182f704 	addi	r6,r6,3036
  8159a4:	081f0900 	call	81f090 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8159a8:	081ee400 	call	81ee40 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8159ac:	010020b4 	movhi	r4,130
  8159b0:	213ba904 	addi	r4,r4,-4444
  8159b4:	081f6540 	call	81f654 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8159b8:	d1276517 	ldw	r4,-25196(gp)
  8159bc:	d1676617 	ldw	r5,-25192(gp)
  8159c0:	d1a76717 	ldw	r6,-25188(gp)
  8159c4:	08083f40 	call	8083f4 <main>
  8159c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8159cc:	01000044 	movi	r4,1
  8159d0:	08151980 	call	815198 <close>
  exit (result);
  8159d4:	e13fff17 	ldw	r4,-4(fp)
  8159d8:	081f6680 	call	81f668 <exit>

008159dc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8159dc:	defffe04 	addi	sp,sp,-8
  8159e0:	df000115 	stw	fp,4(sp)
  8159e4:	df000104 	addi	fp,sp,4
  8159e8:	e13fff15 	stw	r4,-4(fp)
}
  8159ec:	e037883a 	mov	sp,fp
  8159f0:	df000017 	ldw	fp,0(sp)
  8159f4:	dec00104 	addi	sp,sp,4
  8159f8:	f800283a 	ret

008159fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8159fc:	defffe04 	addi	sp,sp,-8
  815a00:	df000115 	stw	fp,4(sp)
  815a04:	df000104 	addi	fp,sp,4
  815a08:	e13fff15 	stw	r4,-4(fp)
}
  815a0c:	e037883a 	mov	sp,fp
  815a10:	df000017 	ldw	fp,0(sp)
  815a14:	dec00104 	addi	sp,sp,4
  815a18:	f800283a 	ret

00815a1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  815a1c:	defff704 	addi	sp,sp,-36
  815a20:	dfc00815 	stw	ra,32(sp)
  815a24:	df000715 	stw	fp,28(sp)
  815a28:	df000704 	addi	fp,sp,28
  815a2c:	e13ffb15 	stw	r4,-20(fp)
  815a30:	e17ffc15 	stw	r5,-16(fp)
  815a34:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815a38:	e0bffb17 	ldw	r2,-20(fp)
  815a3c:	1004803a 	cmplt	r2,r2,zero
  815a40:	1000081e 	bne	r2,zero,815a64 <read+0x48>
  815a44:	e0bffb17 	ldw	r2,-20(fp)
  815a48:	10800324 	muli	r2,r2,12
  815a4c:	1007883a 	mov	r3,r2
  815a50:	008020b4 	movhi	r2,130
  815a54:	10858204 	addi	r2,r2,5640
  815a58:	1887883a 	add	r3,r3,r2
  815a5c:	e0ffff15 	stw	r3,-4(fp)
  815a60:	00000106 	br	815a68 <read+0x4c>
  815a64:	e03fff15 	stw	zero,-4(fp)
  815a68:	e0bfff17 	ldw	r2,-4(fp)
  815a6c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  815a70:	e0bffa17 	ldw	r2,-24(fp)
  815a74:	1005003a 	cmpeq	r2,r2,zero
  815a78:	1000241e 	bne	r2,zero,815b0c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  815a7c:	e0bffa17 	ldw	r2,-24(fp)
  815a80:	10800217 	ldw	r2,8(r2)
  815a84:	108000cc 	andi	r2,r2,3
  815a88:	10800060 	cmpeqi	r2,r2,1
  815a8c:	10001a1e 	bne	r2,zero,815af8 <read+0xdc>
  815a90:	e0bffa17 	ldw	r2,-24(fp)
  815a94:	10800017 	ldw	r2,0(r2)
  815a98:	10800517 	ldw	r2,20(r2)
  815a9c:	1005003a 	cmpeq	r2,r2,zero
  815aa0:	1000151e 	bne	r2,zero,815af8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  815aa4:	e0bffa17 	ldw	r2,-24(fp)
  815aa8:	10800017 	ldw	r2,0(r2)
  815aac:	10800517 	ldw	r2,20(r2)
  815ab0:	e17ffc17 	ldw	r5,-16(fp)
  815ab4:	e1bffd17 	ldw	r6,-12(fp)
  815ab8:	e13ffa17 	ldw	r4,-24(fp)
  815abc:	103ee83a 	callr	r2
  815ac0:	e0bff915 	stw	r2,-28(fp)
  815ac4:	e0bff917 	ldw	r2,-28(fp)
  815ac8:	1004403a 	cmpge	r2,r2,zero
  815acc:	1000071e 	bne	r2,zero,815aec <read+0xd0>
        {
          ALT_ERRNO = -rval;
  815ad0:	0815b3c0 	call	815b3c <alt_get_errno>
  815ad4:	e0fff917 	ldw	r3,-28(fp)
  815ad8:	00c7c83a 	sub	r3,zero,r3
  815adc:	10c00015 	stw	r3,0(r2)
          return -1;
  815ae0:	00bfffc4 	movi	r2,-1
  815ae4:	e0bffe15 	stw	r2,-8(fp)
  815ae8:	00000e06 	br	815b24 <read+0x108>
        }
        return rval;
  815aec:	e0bff917 	ldw	r2,-28(fp)
  815af0:	e0bffe15 	stw	r2,-8(fp)
  815af4:	00000b06 	br	815b24 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  815af8:	0815b3c0 	call	815b3c <alt_get_errno>
  815afc:	1007883a 	mov	r3,r2
  815b00:	00800344 	movi	r2,13
  815b04:	18800015 	stw	r2,0(r3)
  815b08:	00000406 	br	815b1c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  815b0c:	0815b3c0 	call	815b3c <alt_get_errno>
  815b10:	1007883a 	mov	r3,r2
  815b14:	00801444 	movi	r2,81
  815b18:	18800015 	stw	r2,0(r3)
  }
  return -1;
  815b1c:	00bfffc4 	movi	r2,-1
  815b20:	e0bffe15 	stw	r2,-8(fp)
  815b24:	e0bffe17 	ldw	r2,-8(fp)
}
  815b28:	e037883a 	mov	sp,fp
  815b2c:	dfc00117 	ldw	ra,4(sp)
  815b30:	df000017 	ldw	fp,0(sp)
  815b34:	dec00204 	addi	sp,sp,8
  815b38:	f800283a 	ret

00815b3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815b3c:	defffd04 	addi	sp,sp,-12
  815b40:	dfc00215 	stw	ra,8(sp)
  815b44:	df000115 	stw	fp,4(sp)
  815b48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815b4c:	008020b4 	movhi	r2,130
  815b50:	108a7404 	addi	r2,r2,10704
  815b54:	10800017 	ldw	r2,0(r2)
  815b58:	1005003a 	cmpeq	r2,r2,zero
  815b5c:	1000061e 	bne	r2,zero,815b78 <alt_get_errno+0x3c>
  815b60:	008020b4 	movhi	r2,130
  815b64:	108a7404 	addi	r2,r2,10704
  815b68:	10800017 	ldw	r2,0(r2)
  815b6c:	103ee83a 	callr	r2
  815b70:	e0bfff15 	stw	r2,-4(fp)
  815b74:	00000306 	br	815b84 <alt_get_errno+0x48>
  815b78:	008020b4 	movhi	r2,130
  815b7c:	1091c804 	addi	r2,r2,18208
  815b80:	e0bfff15 	stw	r2,-4(fp)
  815b84:	e0bfff17 	ldw	r2,-4(fp)
}
  815b88:	e037883a 	mov	sp,fp
  815b8c:	dfc00117 	ldw	ra,4(sp)
  815b90:	df000017 	ldw	fp,0(sp)
  815b94:	dec00204 	addi	sp,sp,8
  815b98:	f800283a 	ret

00815b9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  815b9c:	defffe04 	addi	sp,sp,-8
  815ba0:	df000115 	stw	fp,4(sp)
  815ba4:	df000104 	addi	fp,sp,4
  815ba8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  815bac:	e0bfff17 	ldw	r2,-4(fp)
  815bb0:	108000d0 	cmplti	r2,r2,3
  815bb4:	10000d1e 	bne	r2,zero,815bec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  815bb8:	e0bfff17 	ldw	r2,-4(fp)
  815bbc:	00c020b4 	movhi	r3,130
  815bc0:	18c58204 	addi	r3,r3,5640
  815bc4:	10800324 	muli	r2,r2,12
  815bc8:	10c5883a 	add	r2,r2,r3
  815bcc:	10800204 	addi	r2,r2,8
  815bd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  815bd4:	e0bfff17 	ldw	r2,-4(fp)
  815bd8:	00c020b4 	movhi	r3,130
  815bdc:	18c58204 	addi	r3,r3,5640
  815be0:	10800324 	muli	r2,r2,12
  815be4:	10c5883a 	add	r2,r2,r3
  815be8:	10000015 	stw	zero,0(r2)
  }
}
  815bec:	e037883a 	mov	sp,fp
  815bf0:	df000017 	ldw	fp,0(sp)
  815bf4:	dec00104 	addi	sp,sp,4
  815bf8:	f800283a 	ret

00815bfc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  815bfc:	defff804 	addi	sp,sp,-32
  815c00:	df000715 	stw	fp,28(sp)
  815c04:	df000704 	addi	fp,sp,28
  815c08:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815c0c:	0005303a 	rdctl	r2,status
  815c10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815c14:	e0fffb17 	ldw	r3,-20(fp)
  815c18:	00bfff84 	movi	r2,-2
  815c1c:	1884703a 	and	r2,r3,r2
  815c20:	1001703a 	wrctl	status,r2
  
  return context;
  815c24:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  815c28:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  815c2c:	d0a00e17 	ldw	r2,-32712(gp)
  815c30:	10c000c4 	addi	r3,r2,3
  815c34:	00bfff04 	movi	r2,-4
  815c38:	1884703a 	and	r2,r3,r2
  815c3c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  815c40:	d0e00e17 	ldw	r3,-32712(gp)
  815c44:	e0bffe17 	ldw	r2,-8(fp)
  815c48:	1887883a 	add	r3,r3,r2
  815c4c:	00804034 	movhi	r2,256
  815c50:	10800004 	addi	r2,r2,0
  815c54:	10c0072e 	bgeu	r2,r3,815c74 <sbrk+0x78>
  815c58:	e0bffd17 	ldw	r2,-12(fp)
  815c5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815c60:	e0bffa17 	ldw	r2,-24(fp)
  815c64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  815c68:	00bfffc4 	movi	r2,-1
  815c6c:	e0bfff15 	stw	r2,-4(fp)
  815c70:	00000c06 	br	815ca4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  815c74:	d0a00e17 	ldw	r2,-32712(gp)
  815c78:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  815c7c:	d0e00e17 	ldw	r3,-32712(gp)
  815c80:	e0bffe17 	ldw	r2,-8(fp)
  815c84:	1885883a 	add	r2,r3,r2
  815c88:	d0a00e15 	stw	r2,-32712(gp)
  815c8c:	e0bffd17 	ldw	r2,-12(fp)
  815c90:	e0bff915 	stw	r2,-28(fp)
  815c94:	e0bff917 	ldw	r2,-28(fp)
  815c98:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  815c9c:	e0bffc17 	ldw	r2,-16(fp)
  815ca0:	e0bfff15 	stw	r2,-4(fp)
  815ca4:	e0bfff17 	ldw	r2,-4(fp)
} 
  815ca8:	e037883a 	mov	sp,fp
  815cac:	df000017 	ldw	fp,0(sp)
  815cb0:	dec00104 	addi	sp,sp,4
  815cb4:	f800283a 	ret

00815cb8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  815cb8:	defffa04 	addi	sp,sp,-24
  815cbc:	df000515 	stw	fp,20(sp)
  815cc0:	df000504 	addi	fp,sp,20
  815cc4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815cc8:	0005303a 	rdctl	r2,status
  815ccc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815cd0:	e0fffd17 	ldw	r3,-12(fp)
  815cd4:	00bfff84 	movi	r2,-2
  815cd8:	1884703a 	and	r2,r3,r2
  815cdc:	1001703a 	wrctl	status,r2
  
  return context;
  815ce0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  815ce4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  815ce8:	e0bfff17 	ldw	r2,-4(fp)
  815cec:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  815cf0:	e0bffc17 	ldw	r2,-16(fp)
  815cf4:	10c00017 	ldw	r3,0(r2)
  815cf8:	e0bffc17 	ldw	r2,-16(fp)
  815cfc:	10800117 	ldw	r2,4(r2)
  815d00:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  815d04:	e0bffc17 	ldw	r2,-16(fp)
  815d08:	10c00117 	ldw	r3,4(r2)
  815d0c:	e0bffc17 	ldw	r2,-16(fp)
  815d10:	10800017 	ldw	r2,0(r2)
  815d14:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  815d18:	e0fffc17 	ldw	r3,-16(fp)
  815d1c:	e0bffc17 	ldw	r2,-16(fp)
  815d20:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  815d24:	e0fffc17 	ldw	r3,-16(fp)
  815d28:	e0bffc17 	ldw	r2,-16(fp)
  815d2c:	18800015 	stw	r2,0(r3)
  815d30:	e0bffe17 	ldw	r2,-8(fp)
  815d34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815d38:	e0bffb17 	ldw	r2,-20(fp)
  815d3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  815d40:	e037883a 	mov	sp,fp
  815d44:	df000017 	ldw	fp,0(sp)
  815d48:	dec00104 	addi	sp,sp,4
  815d4c:	f800283a 	ret

00815d50 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  815d50:	defffb04 	addi	sp,sp,-20
  815d54:	dfc00415 	stw	ra,16(sp)
  815d58:	df000315 	stw	fp,12(sp)
  815d5c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  815d60:	d0a00f17 	ldw	r2,-32708(gp)
  815d64:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  815d68:	d0a76917 	ldw	r2,-25180(gp)
  815d6c:	10800044 	addi	r2,r2,1
  815d70:	d0a76915 	stw	r2,-25180(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  815d74:	00003106 	br	815e3c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  815d78:	e0bffe17 	ldw	r2,-8(fp)
  815d7c:	10800017 	ldw	r2,0(r2)
  815d80:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  815d84:	e0bffe17 	ldw	r2,-8(fp)
  815d88:	10800403 	ldbu	r2,16(r2)
  815d8c:	10803fcc 	andi	r2,r2,255
  815d90:	1005003a 	cmpeq	r2,r2,zero
  815d94:	1000051e 	bne	r2,zero,815dac <alt_tick+0x5c>
  815d98:	d0a76917 	ldw	r2,-25180(gp)
  815d9c:	1004c03a 	cmpne	r2,r2,zero
  815da0:	1000021e 	bne	r2,zero,815dac <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  815da4:	e0bffe17 	ldw	r2,-8(fp)
  815da8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  815dac:	e0bffe17 	ldw	r2,-8(fp)
  815db0:	10c00217 	ldw	r3,8(r2)
  815db4:	d0a76917 	ldw	r2,-25180(gp)
  815db8:	10c01e36 	bltu	r2,r3,815e34 <alt_tick+0xe4>
  815dbc:	e0bffe17 	ldw	r2,-8(fp)
  815dc0:	10800403 	ldbu	r2,16(r2)
  815dc4:	10803fcc 	andi	r2,r2,255
  815dc8:	1004c03a 	cmpne	r2,r2,zero
  815dcc:	1000191e 	bne	r2,zero,815e34 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  815dd0:	e0bffe17 	ldw	r2,-8(fp)
  815dd4:	10c00317 	ldw	r3,12(r2)
  815dd8:	e0bffe17 	ldw	r2,-8(fp)
  815ddc:	11000517 	ldw	r4,20(r2)
  815de0:	183ee83a 	callr	r3
  815de4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  815de8:	e0bffd17 	ldw	r2,-12(fp)
  815dec:	1004c03a 	cmpne	r2,r2,zero
  815df0:	1000031e 	bne	r2,zero,815e00 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  815df4:	e13ffe17 	ldw	r4,-8(fp)
  815df8:	0815cb80 	call	815cb8 <alt_alarm_stop>
  815dfc:	00000d06 	br	815e34 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  815e00:	e0bffe17 	ldw	r2,-8(fp)
  815e04:	10c00217 	ldw	r3,8(r2)
  815e08:	e0bffd17 	ldw	r2,-12(fp)
  815e0c:	1887883a 	add	r3,r3,r2
  815e10:	e0bffe17 	ldw	r2,-8(fp)
  815e14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  815e18:	e0bffe17 	ldw	r2,-8(fp)
  815e1c:	10c00217 	ldw	r3,8(r2)
  815e20:	d0a76917 	ldw	r2,-25180(gp)
  815e24:	1880032e 	bgeu	r3,r2,815e34 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  815e28:	e0fffe17 	ldw	r3,-8(fp)
  815e2c:	00800044 	movi	r2,1
  815e30:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  815e34:	e0bfff17 	ldw	r2,-4(fp)
  815e38:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  815e3c:	d0e00f04 	addi	r3,gp,-32708
  815e40:	e0bffe17 	ldw	r2,-8(fp)
  815e44:	10ffcc1e 	bne	r2,r3,815d78 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  815e48:	e037883a 	mov	sp,fp
  815e4c:	dfc00117 	ldw	ra,4(sp)
  815e50:	df000017 	ldw	fp,0(sp)
  815e54:	dec00204 	addi	sp,sp,8
  815e58:	f800283a 	ret

00815e5c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  815e5c:	defff704 	addi	sp,sp,-36
  815e60:	dfc00815 	stw	ra,32(sp)
  815e64:	df000715 	stw	fp,28(sp)
  815e68:	df000704 	addi	fp,sp,28
  815e6c:	e13ffb15 	stw	r4,-20(fp)
  815e70:	e17ffc15 	stw	r5,-16(fp)
  815e74:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815e78:	e0bffb17 	ldw	r2,-20(fp)
  815e7c:	1004803a 	cmplt	r2,r2,zero
  815e80:	1000081e 	bne	r2,zero,815ea4 <write+0x48>
  815e84:	e0bffb17 	ldw	r2,-20(fp)
  815e88:	10800324 	muli	r2,r2,12
  815e8c:	1007883a 	mov	r3,r2
  815e90:	008020b4 	movhi	r2,130
  815e94:	10858204 	addi	r2,r2,5640
  815e98:	1887883a 	add	r3,r3,r2
  815e9c:	e0ffff15 	stw	r3,-4(fp)
  815ea0:	00000106 	br	815ea8 <write+0x4c>
  815ea4:	e03fff15 	stw	zero,-4(fp)
  815ea8:	e0bfff17 	ldw	r2,-4(fp)
  815eac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  815eb0:	e0bffa17 	ldw	r2,-24(fp)
  815eb4:	1005003a 	cmpeq	r2,r2,zero
  815eb8:	1000241e 	bne	r2,zero,815f4c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  815ebc:	e0bffa17 	ldw	r2,-24(fp)
  815ec0:	10800217 	ldw	r2,8(r2)
  815ec4:	108000cc 	andi	r2,r2,3
  815ec8:	1005003a 	cmpeq	r2,r2,zero
  815ecc:	10001a1e 	bne	r2,zero,815f38 <write+0xdc>
  815ed0:	e0bffa17 	ldw	r2,-24(fp)
  815ed4:	10800017 	ldw	r2,0(r2)
  815ed8:	10800617 	ldw	r2,24(r2)
  815edc:	1005003a 	cmpeq	r2,r2,zero
  815ee0:	1000151e 	bne	r2,zero,815f38 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  815ee4:	e0bffa17 	ldw	r2,-24(fp)
  815ee8:	10800017 	ldw	r2,0(r2)
  815eec:	10800617 	ldw	r2,24(r2)
  815ef0:	e17ffc17 	ldw	r5,-16(fp)
  815ef4:	e1bffd17 	ldw	r6,-12(fp)
  815ef8:	e13ffa17 	ldw	r4,-24(fp)
  815efc:	103ee83a 	callr	r2
  815f00:	e0bff915 	stw	r2,-28(fp)
  815f04:	e0bff917 	ldw	r2,-28(fp)
  815f08:	1004403a 	cmpge	r2,r2,zero
  815f0c:	1000071e 	bne	r2,zero,815f2c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  815f10:	0815f7c0 	call	815f7c <alt_get_errno>
  815f14:	e0fff917 	ldw	r3,-28(fp)
  815f18:	00c7c83a 	sub	r3,zero,r3
  815f1c:	10c00015 	stw	r3,0(r2)
        return -1;
  815f20:	00bfffc4 	movi	r2,-1
  815f24:	e0bffe15 	stw	r2,-8(fp)
  815f28:	00000e06 	br	815f64 <write+0x108>
      }
      return rval;
  815f2c:	e0bff917 	ldw	r2,-28(fp)
  815f30:	e0bffe15 	stw	r2,-8(fp)
  815f34:	00000b06 	br	815f64 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  815f38:	0815f7c0 	call	815f7c <alt_get_errno>
  815f3c:	1007883a 	mov	r3,r2
  815f40:	00800344 	movi	r2,13
  815f44:	18800015 	stw	r2,0(r3)
  815f48:	00000406 	br	815f5c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  815f4c:	0815f7c0 	call	815f7c <alt_get_errno>
  815f50:	1007883a 	mov	r3,r2
  815f54:	00801444 	movi	r2,81
  815f58:	18800015 	stw	r2,0(r3)
  }
  return -1;
  815f5c:	00bfffc4 	movi	r2,-1
  815f60:	e0bffe15 	stw	r2,-8(fp)
  815f64:	e0bffe17 	ldw	r2,-8(fp)
}
  815f68:	e037883a 	mov	sp,fp
  815f6c:	dfc00117 	ldw	ra,4(sp)
  815f70:	df000017 	ldw	fp,0(sp)
  815f74:	dec00204 	addi	sp,sp,8
  815f78:	f800283a 	ret

00815f7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815f7c:	defffd04 	addi	sp,sp,-12
  815f80:	dfc00215 	stw	ra,8(sp)
  815f84:	df000115 	stw	fp,4(sp)
  815f88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815f8c:	008020b4 	movhi	r2,130
  815f90:	108a7404 	addi	r2,r2,10704
  815f94:	10800017 	ldw	r2,0(r2)
  815f98:	1005003a 	cmpeq	r2,r2,zero
  815f9c:	1000061e 	bne	r2,zero,815fb8 <alt_get_errno+0x3c>
  815fa0:	008020b4 	movhi	r2,130
  815fa4:	108a7404 	addi	r2,r2,10704
  815fa8:	10800017 	ldw	r2,0(r2)
  815fac:	103ee83a 	callr	r2
  815fb0:	e0bfff15 	stw	r2,-4(fp)
  815fb4:	00000306 	br	815fc4 <alt_get_errno+0x48>
  815fb8:	008020b4 	movhi	r2,130
  815fbc:	1091c804 	addi	r2,r2,18208
  815fc0:	e0bfff15 	stw	r2,-4(fp)
  815fc4:	e0bfff17 	ldw	r2,-4(fp)
}
  815fc8:	e037883a 	mov	sp,fp
  815fcc:	dfc00117 	ldw	ra,4(sp)
  815fd0:	df000017 	ldw	fp,0(sp)
  815fd4:	dec00204 	addi	sp,sp,8
  815fd8:	f800283a 	ret

00815fdc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  815fdc:	defffd04 	addi	sp,sp,-12
  815fe0:	dfc00215 	stw	ra,8(sp)
  815fe4:	df000115 	stw	fp,4(sp)
  815fe8:	df000104 	addi	fp,sp,4
  815fec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
  815ff0:	081f3cc0 	call	81f3cc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  815ff4:	00800044 	movi	r2,1
  815ff8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  815ffc:	e037883a 	mov	sp,fp
  816000:	dfc00117 	ldw	ra,4(sp)
  816004:	df000017 	ldw	fp,0(sp)
  816008:	dec00204 	addi	sp,sp,8
  81600c:	f800283a 	ret

00816010 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  816010:	defffd04 	addi	sp,sp,-12
  816014:	dfc00215 	stw	ra,8(sp)
  816018:	df000115 	stw	fp,4(sp)
  81601c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  816020:	01004234 	movhi	r4,264
  816024:	210d0004 	addi	r4,r4,13312
  816028:	000b883a 	mov	r5,zero
  81602c:	000d883a 	mov	r6,zero
  816030:	01c0fa04 	movi	r7,1000
  816034:	0816ed40 	call	816ed4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  816038:	010020b4 	movhi	r4,130
  81603c:	2105ec04 	addi	r4,r4,6064
  816040:	000b883a 	mov	r5,zero
  816044:	01800104 	movi	r6,4
  816048:	08165000 	call	816500 <altera_avalon_jtag_uart_init>
  81604c:	010020b4 	movhi	r4,130
  816050:	2105e204 	addi	r4,r4,6024
  816054:	08163800 	call	816380 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  816058:	010020b4 	movhi	r4,130
  81605c:	2109fa04 	addi	r4,r4,10216
  816060:	08163800 	call	816380 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
  816064:	010020b4 	movhi	r4,130
  816068:	210a0604 	addi	r4,r4,10264
  81606c:	08163800 	call	816380 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  816070:	010020b4 	movhi	r4,130
  816074:	210a1204 	addi	r4,r4,10312
  816078:	0817fa00 	call	817fa0 <alt_up_character_lcd_init>
  81607c:	010020b4 	movhi	r4,130
  816080:	210a1204 	addi	r4,r4,10312
  816084:	08163800 	call	816380 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
  816088:	010020b4 	movhi	r4,130
  81608c:	210a1d04 	addi	r4,r4,10356
  816090:	081854c0 	call	81854c <alt_up_ps2_init>
  816094:	010020b4 	movhi	r4,130
  816098:	210a1d04 	addi	r4,r4,10356
  81609c:	08163800 	call	816380 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  8160a0:	010020b4 	movhi	r4,130
  8160a4:	210a2b04 	addi	r4,r4,10412
  8160a8:	08163800 	call	816380 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  8160ac:	008020b4 	movhi	r2,130
  8160b0:	108a3604 	addi	r2,r2,10456
  8160b4:	10800a17 	ldw	r2,40(r2)
  8160b8:	10800104 	addi	r2,r2,4
  8160bc:	10800017 	ldw	r2,0(r2)
  8160c0:	10ffffcc 	andi	r3,r2,65535
  8160c4:	008020b4 	movhi	r2,130
  8160c8:	108a3604 	addi	r2,r2,10456
  8160cc:	10c00c15 	stw	r3,48(r2)
  8160d0:	008020b4 	movhi	r2,130
  8160d4:	108a3604 	addi	r2,r2,10456
  8160d8:	10800a17 	ldw	r2,40(r2)
  8160dc:	10800104 	addi	r2,r2,4
  8160e0:	10800017 	ldw	r2,0(r2)
  8160e4:	1005d43a 	srai	r2,r2,16
  8160e8:	10ffffcc 	andi	r3,r2,65535
  8160ec:	008020b4 	movhi	r2,130
  8160f0:	108a3604 	addi	r2,r2,10456
  8160f4:	10c00d15 	stw	r3,52(r2)
  8160f8:	008020b4 	movhi	r2,130
  8160fc:	108a3604 	addi	r2,r2,10456
  816100:	10800c17 	ldw	r2,48(r2)
  816104:	10801068 	cmpgeui	r2,r2,65
  816108:	1000081e 	bne	r2,zero,81612c <alt_sys_init+0x11c>
  81610c:	00c020b4 	movhi	r3,130
  816110:	18ca3604 	addi	r3,r3,10456
  816114:	00800fc4 	movi	r2,63
  816118:	18800f15 	stw	r2,60(r3)
  81611c:	00c020b4 	movhi	r3,130
  816120:	18ca3604 	addi	r3,r3,10456
  816124:	00800184 	movi	r2,6
  816128:	18801015 	stw	r2,64(r3)
  81612c:	008020b4 	movhi	r2,130
  816130:	108a3604 	addi	r2,r2,10456
  816134:	10800d17 	ldw	r2,52(r2)
  816138:	10800868 	cmpgeui	r2,r2,33
  81613c:	1000041e 	bne	r2,zero,816150 <alt_sys_init+0x140>
  816140:	00c020b4 	movhi	r3,130
  816144:	18ca3604 	addi	r3,r3,10456
  816148:	008007c4 	movi	r2,31
  81614c:	18801115 	stw	r2,68(r3)
  816150:	010020b4 	movhi	r4,130
  816154:	210a3604 	addi	r4,r4,10456
  816158:	0818eb80 	call	818eb8 <alt_up_char_buffer_init>
  81615c:	010020b4 	movhi	r4,130
  816160:	210a3604 	addi	r4,r4,10456
  816164:	08163800 	call	816380 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA_0, pixel_buffer_dma_0);
  816168:	008020b4 	movhi	r2,130
  81616c:	108a4804 	addi	r2,r2,10528
  816170:	10800a17 	ldw	r2,40(r2)
  816174:	10800017 	ldw	r2,0(r2)
  816178:	1007883a 	mov	r3,r2
  81617c:	008020b4 	movhi	r2,130
  816180:	108a4804 	addi	r2,r2,10528
  816184:	10c00b15 	stw	r3,44(r2)
  816188:	008020b4 	movhi	r2,130
  81618c:	108a4804 	addi	r2,r2,10528
  816190:	10800a17 	ldw	r2,40(r2)
  816194:	10800104 	addi	r2,r2,4
  816198:	10800017 	ldw	r2,0(r2)
  81619c:	1007883a 	mov	r3,r2
  8161a0:	008020b4 	movhi	r2,130
  8161a4:	108a4804 	addi	r2,r2,10528
  8161a8:	10c00c15 	stw	r3,48(r2)
  8161ac:	008020b4 	movhi	r2,130
  8161b0:	108a4804 	addi	r2,r2,10528
  8161b4:	10800a17 	ldw	r2,40(r2)
  8161b8:	10800204 	addi	r2,r2,8
  8161bc:	10800017 	ldw	r2,0(r2)
  8161c0:	10ffffcc 	andi	r3,r2,65535
  8161c4:	008020b4 	movhi	r2,130
  8161c8:	108a4804 	addi	r2,r2,10528
  8161cc:	10c00f15 	stw	r3,60(r2)
  8161d0:	008020b4 	movhi	r2,130
  8161d4:	108a4804 	addi	r2,r2,10528
  8161d8:	10800a17 	ldw	r2,40(r2)
  8161dc:	10800204 	addi	r2,r2,8
  8161e0:	10800017 	ldw	r2,0(r2)
  8161e4:	1005d43a 	srai	r2,r2,16
  8161e8:	10ffffcc 	andi	r3,r2,65535
  8161ec:	008020b4 	movhi	r2,130
  8161f0:	108a4804 	addi	r2,r2,10528
  8161f4:	10c01015 	stw	r3,64(r2)
  8161f8:	008020b4 	movhi	r2,130
  8161fc:	108a4804 	addi	r2,r2,10528
  816200:	10800a17 	ldw	r2,40(r2)
  816204:	10800304 	addi	r2,r2,12
  816208:	10800017 	ldw	r2,0(r2)
  81620c:	1005d07a 	srai	r2,r2,1
  816210:	10c0004c 	andi	r3,r2,1
  816214:	008020b4 	movhi	r2,130
  816218:	108a4804 	addi	r2,r2,10528
  81621c:	10c00d15 	stw	r3,52(r2)
  816220:	008020b4 	movhi	r2,130
  816224:	108a4804 	addi	r2,r2,10528
  816228:	10800a17 	ldw	r2,40(r2)
  81622c:	10800304 	addi	r2,r2,12
  816230:	10800017 	ldw	r2,0(r2)
  816234:	1005d13a 	srai	r2,r2,4
  816238:	10c003cc 	andi	r3,r2,15
  81623c:	008020b4 	movhi	r2,130
  816240:	108a4804 	addi	r2,r2,10528
  816244:	10c00e15 	stw	r3,56(r2)
  816248:	008020b4 	movhi	r2,130
  81624c:	108a4804 	addi	r2,r2,10528
  816250:	10800a17 	ldw	r2,40(r2)
  816254:	10800304 	addi	r2,r2,12
  816258:	10800017 	ldw	r2,0(r2)
  81625c:	1005d43a 	srai	r2,r2,16
  816260:	1007883a 	mov	r3,r2
  816264:	00bfffc4 	movi	r2,-1
  816268:	1884703a 	and	r2,r3,r2
  81626c:	e0bfff45 	stb	r2,-3(fp)
  816270:	008020b4 	movhi	r2,130
  816274:	108a4804 	addi	r2,r2,10528
  816278:	10800a17 	ldw	r2,40(r2)
  81627c:	10800304 	addi	r2,r2,12
  816280:	10800017 	ldw	r2,0(r2)
  816284:	1005d63a 	srai	r2,r2,24
  816288:	1007883a 	mov	r3,r2
  81628c:	00bfffc4 	movi	r2,-1
  816290:	1884703a 	and	r2,r3,r2
  816294:	e0bfff05 	stb	r2,-4(fp)
  816298:	008020b4 	movhi	r2,130
  81629c:	108a4804 	addi	r2,r2,10528
  8162a0:	10800e17 	ldw	r2,56(r2)
  8162a4:	10800058 	cmpnei	r2,r2,1
  8162a8:	1000041e 	bne	r2,zero,8162bc <alt_sys_init+0x2ac>
  8162ac:	008020b4 	movhi	r2,130
  8162b0:	108a4804 	addi	r2,r2,10528
  8162b4:	10001115 	stw	zero,68(r2)
  8162b8:	00000e06 	br	8162f4 <alt_sys_init+0x2e4>
  8162bc:	008020b4 	movhi	r2,130
  8162c0:	108a4804 	addi	r2,r2,10528
  8162c4:	10800e17 	ldw	r2,56(r2)
  8162c8:	10800098 	cmpnei	r2,r2,2
  8162cc:	1000051e 	bne	r2,zero,8162e4 <alt_sys_init+0x2d4>
  8162d0:	00c020b4 	movhi	r3,130
  8162d4:	18ca4804 	addi	r3,r3,10528
  8162d8:	00800044 	movi	r2,1
  8162dc:	18801115 	stw	r2,68(r3)
  8162e0:	00000406 	br	8162f4 <alt_sys_init+0x2e4>
  8162e4:	00c020b4 	movhi	r3,130
  8162e8:	18ca4804 	addi	r3,r3,10528
  8162ec:	00800084 	movi	r2,2
  8162f0:	18801115 	stw	r2,68(r3)
  8162f4:	e0ffff43 	ldbu	r3,-3(fp)
  8162f8:	00800804 	movi	r2,32
  8162fc:	10c7c83a 	sub	r3,r2,r3
  816300:	00bfffc4 	movi	r2,-1
  816304:	10c6d83a 	srl	r3,r2,r3
  816308:	008020b4 	movhi	r2,130
  81630c:	108a4804 	addi	r2,r2,10528
  816310:	10c01215 	stw	r3,72(r2)
  816314:	e0ffff43 	ldbu	r3,-3(fp)
  816318:	008020b4 	movhi	r2,130
  81631c:	108a4804 	addi	r2,r2,10528
  816320:	10801117 	ldw	r2,68(r2)
  816324:	1887883a 	add	r3,r3,r2
  816328:	008020b4 	movhi	r2,130
  81632c:	108a4804 	addi	r2,r2,10528
  816330:	10c01315 	stw	r3,76(r2)
  816334:	e0ffff03 	ldbu	r3,-4(fp)
  816338:	00800804 	movi	r2,32
  81633c:	10c7c83a 	sub	r3,r2,r3
  816340:	00bfffc4 	movi	r2,-1
  816344:	10c6d83a 	srl	r3,r2,r3
  816348:	008020b4 	movhi	r2,130
  81634c:	108a4804 	addi	r2,r2,10528
  816350:	10c01415 	stw	r3,80(r2)
  816354:	010020b4 	movhi	r4,130
  816358:	210a4804 	addi	r4,r4,10528
  81635c:	08163800 	call	816380 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
  816360:	010020b4 	movhi	r4,130
  816364:	210a5d04 	addi	r4,r4,10612
  816368:	08163800 	call	816380 <alt_dev_reg>
}
  81636c:	e037883a 	mov	sp,fp
  816370:	dfc00117 	ldw	ra,4(sp)
  816374:	df000017 	ldw	fp,0(sp)
  816378:	dec00204 	addi	sp,sp,8
  81637c:	f800283a 	ret

00816380 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  816380:	defffd04 	addi	sp,sp,-12
  816384:	dfc00215 	stw	ra,8(sp)
  816388:	df000115 	stw	fp,4(sp)
  81638c:	df000104 	addi	fp,sp,4
  816390:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  816394:	e13fff17 	ldw	r4,-4(fp)
  816398:	014020b4 	movhi	r5,130
  81639c:	294a7104 	addi	r5,r5,10692
  8163a0:	081ed2c0 	call	81ed2c <alt_dev_llist_insert>
}
  8163a4:	e037883a 	mov	sp,fp
  8163a8:	dfc00117 	ldw	ra,4(sp)
  8163ac:	df000017 	ldw	fp,0(sp)
  8163b0:	dec00204 	addi	sp,sp,8
  8163b4:	f800283a 	ret

008163b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8163b8:	defffa04 	addi	sp,sp,-24
  8163bc:	dfc00515 	stw	ra,20(sp)
  8163c0:	df000415 	stw	fp,16(sp)
  8163c4:	df000404 	addi	fp,sp,16
  8163c8:	e13ffd15 	stw	r4,-12(fp)
  8163cc:	e17ffe15 	stw	r5,-8(fp)
  8163d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8163d4:	e0bffd17 	ldw	r2,-12(fp)
  8163d8:	10800017 	ldw	r2,0(r2)
  8163dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8163e0:	e0bffc17 	ldw	r2,-16(fp)
  8163e4:	11000a04 	addi	r4,r2,40
  8163e8:	e0bffd17 	ldw	r2,-12(fp)
  8163ec:	11c00217 	ldw	r7,8(r2)
  8163f0:	e17ffe17 	ldw	r5,-8(fp)
  8163f4:	e1bfff17 	ldw	r6,-4(fp)
  8163f8:	08169fc0 	call	8169fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8163fc:	e037883a 	mov	sp,fp
  816400:	dfc00117 	ldw	ra,4(sp)
  816404:	df000017 	ldw	fp,0(sp)
  816408:	dec00204 	addi	sp,sp,8
  81640c:	f800283a 	ret

00816410 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  816410:	defffa04 	addi	sp,sp,-24
  816414:	dfc00515 	stw	ra,20(sp)
  816418:	df000415 	stw	fp,16(sp)
  81641c:	df000404 	addi	fp,sp,16
  816420:	e13ffd15 	stw	r4,-12(fp)
  816424:	e17ffe15 	stw	r5,-8(fp)
  816428:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81642c:	e0bffd17 	ldw	r2,-12(fp)
  816430:	10800017 	ldw	r2,0(r2)
  816434:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  816438:	e0bffc17 	ldw	r2,-16(fp)
  81643c:	11000a04 	addi	r4,r2,40
  816440:	e0bffd17 	ldw	r2,-12(fp)
  816444:	11c00217 	ldw	r7,8(r2)
  816448:	e17ffe17 	ldw	r5,-8(fp)
  81644c:	e1bfff17 	ldw	r6,-4(fp)
  816450:	0816c200 	call	816c20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  816454:	e037883a 	mov	sp,fp
  816458:	dfc00117 	ldw	ra,4(sp)
  81645c:	df000017 	ldw	fp,0(sp)
  816460:	dec00204 	addi	sp,sp,8
  816464:	f800283a 	ret

00816468 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  816468:	defffc04 	addi	sp,sp,-16
  81646c:	dfc00315 	stw	ra,12(sp)
  816470:	df000215 	stw	fp,8(sp)
  816474:	df000204 	addi	fp,sp,8
  816478:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81647c:	e0bfff17 	ldw	r2,-4(fp)
  816480:	10800017 	ldw	r2,0(r2)
  816484:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  816488:	e0bffe17 	ldw	r2,-8(fp)
  81648c:	11000a04 	addi	r4,r2,40
  816490:	e0bfff17 	ldw	r2,-4(fp)
  816494:	11400217 	ldw	r5,8(r2)
  816498:	08168940 	call	816894 <altera_avalon_jtag_uart_close>
}
  81649c:	e037883a 	mov	sp,fp
  8164a0:	dfc00117 	ldw	ra,4(sp)
  8164a4:	df000017 	ldw	fp,0(sp)
  8164a8:	dec00204 	addi	sp,sp,8
  8164ac:	f800283a 	ret

008164b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8164b0:	defffa04 	addi	sp,sp,-24
  8164b4:	dfc00515 	stw	ra,20(sp)
  8164b8:	df000415 	stw	fp,16(sp)
  8164bc:	df000404 	addi	fp,sp,16
  8164c0:	e13ffd15 	stw	r4,-12(fp)
  8164c4:	e17ffe15 	stw	r5,-8(fp)
  8164c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8164cc:	e0bffd17 	ldw	r2,-12(fp)
  8164d0:	10800017 	ldw	r2,0(r2)
  8164d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8164d8:	e0bffc17 	ldw	r2,-16(fp)
  8164dc:	11000a04 	addi	r4,r2,40
  8164e0:	e17ffe17 	ldw	r5,-8(fp)
  8164e4:	e1bfff17 	ldw	r6,-4(fp)
  8164e8:	08169080 	call	816908 <altera_avalon_jtag_uart_ioctl>
}
  8164ec:	e037883a 	mov	sp,fp
  8164f0:	dfc00117 	ldw	ra,4(sp)
  8164f4:	df000017 	ldw	fp,0(sp)
  8164f8:	dec00204 	addi	sp,sp,8
  8164fc:	f800283a 	ret

00816500 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  816500:	defffb04 	addi	sp,sp,-20
  816504:	dfc00415 	stw	ra,16(sp)
  816508:	df000315 	stw	fp,12(sp)
  81650c:	df000304 	addi	fp,sp,12
  816510:	e13ffd15 	stw	r4,-12(fp)
  816514:	e17ffe15 	stw	r5,-8(fp)
  816518:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81651c:	e0fffd17 	ldw	r3,-12(fp)
  816520:	00800044 	movi	r2,1
  816524:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  816528:	e0bffd17 	ldw	r2,-12(fp)
  81652c:	10800017 	ldw	r2,0(r2)
  816530:	11000104 	addi	r4,r2,4
  816534:	e0bffd17 	ldw	r2,-12(fp)
  816538:	10800817 	ldw	r2,32(r2)
  81653c:	1007883a 	mov	r3,r2
  816540:	2005883a 	mov	r2,r4
  816544:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  816548:	e13fff17 	ldw	r4,-4(fp)
  81654c:	e17ffd17 	ldw	r5,-12(fp)
  816550:	01802074 	movhi	r6,129
  816554:	31996e04 	addi	r6,r6,26040
  816558:	08154540 	call	815454 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  81655c:	e0bffd17 	ldw	r2,-12(fp)
  816560:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  816564:	e0bffd17 	ldw	r2,-12(fp)
  816568:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81656c:	008020b4 	movhi	r2,130
  816570:	1091d004 	addi	r2,r2,18240
  816574:	10800017 	ldw	r2,0(r2)
  816578:	100b883a 	mov	r5,r2
  81657c:	01802074 	movhi	r6,129
  816580:	3199f904 	addi	r6,r6,26596
  816584:	e1fffd17 	ldw	r7,-12(fp)
  816588:	08150440 	call	815044 <alt_alarm_start>
  81658c:	1004403a 	cmpge	r2,r2,zero
  816590:	1000041e 	bne	r2,zero,8165a4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  816594:	e0fffd17 	ldw	r3,-12(fp)
  816598:	00a00034 	movhi	r2,32768
  81659c:	10bfffc4 	addi	r2,r2,-1
  8165a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8165a4:	e037883a 	mov	sp,fp
  8165a8:	dfc00117 	ldw	ra,4(sp)
  8165ac:	df000017 	ldw	fp,0(sp)
  8165b0:	dec00204 	addi	sp,sp,8
  8165b4:	f800283a 	ret

008165b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8165b8:	defff704 	addi	sp,sp,-36
  8165bc:	df000815 	stw	fp,32(sp)
  8165c0:	df000804 	addi	fp,sp,32
  8165c4:	e13ffe15 	stw	r4,-8(fp)
  8165c8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8165cc:	e0bffe17 	ldw	r2,-8(fp)
  8165d0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  8165d4:	e0bffd17 	ldw	r2,-12(fp)
  8165d8:	10800017 	ldw	r2,0(r2)
  8165dc:	e0bffc15 	stw	r2,-16(fp)
  8165e0:	00000006 	br	8165e4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8165e4:	e0bffc17 	ldw	r2,-16(fp)
  8165e8:	10800104 	addi	r2,r2,4
  8165ec:	10800037 	ldwio	r2,0(r2)
  8165f0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8165f4:	e0bffb17 	ldw	r2,-20(fp)
  8165f8:	1080c00c 	andi	r2,r2,768
  8165fc:	1005003a 	cmpeq	r2,r2,zero
  816600:	1000741e 	bne	r2,zero,8167d4 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  816604:	e0bffb17 	ldw	r2,-20(fp)
  816608:	1080400c 	andi	r2,r2,256
  81660c:	1005003a 	cmpeq	r2,r2,zero
  816610:	1000351e 	bne	r2,zero,8166e8 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  816614:	00800074 	movhi	r2,1
  816618:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81661c:	e0bffd17 	ldw	r2,-12(fp)
  816620:	10800a17 	ldw	r2,40(r2)
  816624:	10800044 	addi	r2,r2,1
  816628:	1081ffcc 	andi	r2,r2,2047
  81662c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  816630:	e0bffd17 	ldw	r2,-12(fp)
  816634:	10c00b17 	ldw	r3,44(r2)
  816638:	e0bff917 	ldw	r2,-28(fp)
  81663c:	18801626 	beq	r3,r2,816698 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  816640:	e0bffc17 	ldw	r2,-16(fp)
  816644:	10800037 	ldwio	r2,0(r2)
  816648:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  81664c:	e0bffa17 	ldw	r2,-24(fp)
  816650:	10a0000c 	andi	r2,r2,32768
  816654:	1005003a 	cmpeq	r2,r2,zero
  816658:	10000f1e 	bne	r2,zero,816698 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81665c:	e0bffd17 	ldw	r2,-12(fp)
  816660:	10c00a17 	ldw	r3,40(r2)
  816664:	e0bffa17 	ldw	r2,-24(fp)
  816668:	1009883a 	mov	r4,r2
  81666c:	e0bffd17 	ldw	r2,-12(fp)
  816670:	1885883a 	add	r2,r3,r2
  816674:	10800e04 	addi	r2,r2,56
  816678:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81667c:	e0bffd17 	ldw	r2,-12(fp)
  816680:	10800a17 	ldw	r2,40(r2)
  816684:	10800044 	addi	r2,r2,1
  816688:	10c1ffcc 	andi	r3,r2,2047
  81668c:	e0bffd17 	ldw	r2,-12(fp)
  816690:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  816694:	003fe106 	br	81661c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  816698:	e0bffa17 	ldw	r2,-24(fp)
  81669c:	10bfffec 	andhi	r2,r2,65535
  8166a0:	1005003a 	cmpeq	r2,r2,zero
  8166a4:	1000101e 	bne	r2,zero,8166e8 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8166a8:	e0bffd17 	ldw	r2,-12(fp)
  8166ac:	10c00817 	ldw	r3,32(r2)
  8166b0:	00bfff84 	movi	r2,-2
  8166b4:	1886703a 	and	r3,r3,r2
  8166b8:	e0bffd17 	ldw	r2,-12(fp)
  8166bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8166c0:	e0bffc17 	ldw	r2,-16(fp)
  8166c4:	11000104 	addi	r4,r2,4
  8166c8:	e0bffd17 	ldw	r2,-12(fp)
  8166cc:	10800817 	ldw	r2,32(r2)
  8166d0:	1007883a 	mov	r3,r2
  8166d4:	2005883a 	mov	r2,r4
  8166d8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8166dc:	e0bffc17 	ldw	r2,-16(fp)
  8166e0:	10800104 	addi	r2,r2,4
  8166e4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8166e8:	e0bffb17 	ldw	r2,-20(fp)
  8166ec:	1080800c 	andi	r2,r2,512
  8166f0:	1005003a 	cmpeq	r2,r2,zero
  8166f4:	103fbb1e 	bne	r2,zero,8165e4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8166f8:	e0bffb17 	ldw	r2,-20(fp)
  8166fc:	10bfffec 	andhi	r2,r2,65535
  816700:	1004d43a 	srli	r2,r2,16
  816704:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  816708:	00001506 	br	816760 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81670c:	e13ffc17 	ldw	r4,-16(fp)
  816710:	e0bffd17 	ldw	r2,-12(fp)
  816714:	10c00d17 	ldw	r3,52(r2)
  816718:	e0bffd17 	ldw	r2,-12(fp)
  81671c:	1885883a 	add	r2,r3,r2
  816720:	10820e04 	addi	r2,r2,2104
  816724:	10800003 	ldbu	r2,0(r2)
  816728:	10c03fcc 	andi	r3,r2,255
  81672c:	18c0201c 	xori	r3,r3,128
  816730:	18ffe004 	addi	r3,r3,-128
  816734:	2005883a 	mov	r2,r4
  816738:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81673c:	e0bffd17 	ldw	r2,-12(fp)
  816740:	10800d17 	ldw	r2,52(r2)
  816744:	10800044 	addi	r2,r2,1
  816748:	10c1ffcc 	andi	r3,r2,2047
  81674c:	e0bffd17 	ldw	r2,-12(fp)
  816750:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  816754:	e0bff817 	ldw	r2,-32(fp)
  816758:	10bfffc4 	addi	r2,r2,-1
  81675c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  816760:	e0bff817 	ldw	r2,-32(fp)
  816764:	1005003a 	cmpeq	r2,r2,zero
  816768:	1000051e 	bne	r2,zero,816780 <altera_avalon_jtag_uart_irq+0x1c8>
  81676c:	e0bffd17 	ldw	r2,-12(fp)
  816770:	10c00d17 	ldw	r3,52(r2)
  816774:	e0bffd17 	ldw	r2,-12(fp)
  816778:	10800c17 	ldw	r2,48(r2)
  81677c:	18bfe31e 	bne	r3,r2,81670c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  816780:	e0bff817 	ldw	r2,-32(fp)
  816784:	1005003a 	cmpeq	r2,r2,zero
  816788:	103f961e 	bne	r2,zero,8165e4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81678c:	e0bffd17 	ldw	r2,-12(fp)
  816790:	10c00817 	ldw	r3,32(r2)
  816794:	00bfff44 	movi	r2,-3
  816798:	1886703a 	and	r3,r3,r2
  81679c:	e0bffd17 	ldw	r2,-12(fp)
  8167a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8167a4:	e0bffd17 	ldw	r2,-12(fp)
  8167a8:	10800017 	ldw	r2,0(r2)
  8167ac:	11000104 	addi	r4,r2,4
  8167b0:	e0bffd17 	ldw	r2,-12(fp)
  8167b4:	10800817 	ldw	r2,32(r2)
  8167b8:	1007883a 	mov	r3,r2
  8167bc:	2005883a 	mov	r2,r4
  8167c0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8167c4:	e0bffc17 	ldw	r2,-16(fp)
  8167c8:	10800104 	addi	r2,r2,4
  8167cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8167d0:	003f8406 	br	8165e4 <altera_avalon_jtag_uart_irq+0x2c>
}
  8167d4:	e037883a 	mov	sp,fp
  8167d8:	df000017 	ldw	fp,0(sp)
  8167dc:	dec00104 	addi	sp,sp,4
  8167e0:	f800283a 	ret

008167e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8167e4:	defffc04 	addi	sp,sp,-16
  8167e8:	df000315 	stw	fp,12(sp)
  8167ec:	df000304 	addi	fp,sp,12
  8167f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8167f4:	e0bfff17 	ldw	r2,-4(fp)
  8167f8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8167fc:	e0bffe17 	ldw	r2,-8(fp)
  816800:	10800017 	ldw	r2,0(r2)
  816804:	10800104 	addi	r2,r2,4
  816808:	10800037 	ldwio	r2,0(r2)
  81680c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  816810:	e0bffd17 	ldw	r2,-12(fp)
  816814:	1081000c 	andi	r2,r2,1024
  816818:	1005003a 	cmpeq	r2,r2,zero
  81681c:	10000c1e 	bne	r2,zero,816850 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  816820:	e0bffe17 	ldw	r2,-8(fp)
  816824:	10800017 	ldw	r2,0(r2)
  816828:	11000104 	addi	r4,r2,4
  81682c:	e0bffe17 	ldw	r2,-8(fp)
  816830:	10800817 	ldw	r2,32(r2)
  816834:	10810014 	ori	r2,r2,1024
  816838:	1007883a 	mov	r3,r2
  81683c:	2005883a 	mov	r2,r4
  816840:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  816844:	e0bffe17 	ldw	r2,-8(fp)
  816848:	10000915 	stw	zero,36(r2)
  81684c:	00000a06 	br	816878 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  816850:	e0bffe17 	ldw	r2,-8(fp)
  816854:	10c00917 	ldw	r3,36(r2)
  816858:	00a00034 	movhi	r2,32768
  81685c:	10bfff04 	addi	r2,r2,-4
  816860:	10c00536 	bltu	r2,r3,816878 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  816864:	e0bffe17 	ldw	r2,-8(fp)
  816868:	10800917 	ldw	r2,36(r2)
  81686c:	10c00044 	addi	r3,r2,1
  816870:	e0bffe17 	ldw	r2,-8(fp)
  816874:	10c00915 	stw	r3,36(r2)
  816878:	008020b4 	movhi	r2,130
  81687c:	1091d004 	addi	r2,r2,18240
  816880:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  816884:	e037883a 	mov	sp,fp
  816888:	df000017 	ldw	fp,0(sp)
  81688c:	dec00104 	addi	sp,sp,4
  816890:	f800283a 	ret

00816894 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  816894:	defffc04 	addi	sp,sp,-16
  816898:	df000315 	stw	fp,12(sp)
  81689c:	df000304 	addi	fp,sp,12
  8168a0:	e13ffd15 	stw	r4,-12(fp)
  8168a4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8168a8:	00000706 	br	8168c8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8168ac:	e0bffe17 	ldw	r2,-8(fp)
  8168b0:	1090000c 	andi	r2,r2,16384
  8168b4:	1005003a 	cmpeq	r2,r2,zero
  8168b8:	1000031e 	bne	r2,zero,8168c8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  8168bc:	00bffd44 	movi	r2,-11
  8168c0:	e0bfff15 	stw	r2,-4(fp)
  8168c4:	00000b06 	br	8168f4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8168c8:	e0bffd17 	ldw	r2,-12(fp)
  8168cc:	10c00d17 	ldw	r3,52(r2)
  8168d0:	e0bffd17 	ldw	r2,-12(fp)
  8168d4:	10800c17 	ldw	r2,48(r2)
  8168d8:	18800526 	beq	r3,r2,8168f0 <altera_avalon_jtag_uart_close+0x5c>
  8168dc:	e0bffd17 	ldw	r2,-12(fp)
  8168e0:	10c00917 	ldw	r3,36(r2)
  8168e4:	e0bffd17 	ldw	r2,-12(fp)
  8168e8:	10800117 	ldw	r2,4(r2)
  8168ec:	18bfef36 	bltu	r3,r2,8168ac <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8168f0:	e03fff15 	stw	zero,-4(fp)
  8168f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8168f8:	e037883a 	mov	sp,fp
  8168fc:	df000017 	ldw	fp,0(sp)
  816900:	dec00104 	addi	sp,sp,4
  816904:	f800283a 	ret

00816908 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  816908:	defff804 	addi	sp,sp,-32
  81690c:	df000715 	stw	fp,28(sp)
  816910:	df000704 	addi	fp,sp,28
  816914:	e13ffb15 	stw	r4,-20(fp)
  816918:	e17ffc15 	stw	r5,-16(fp)
  81691c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  816920:	00bff9c4 	movi	r2,-25
  816924:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  816928:	e0bffc17 	ldw	r2,-16(fp)
  81692c:	e0bfff15 	stw	r2,-4(fp)
  816930:	e0ffff17 	ldw	r3,-4(fp)
  816934:	189a8060 	cmpeqi	r2,r3,27137
  816938:	1000041e 	bne	r2,zero,81694c <altera_avalon_jtag_uart_ioctl+0x44>
  81693c:	e0ffff17 	ldw	r3,-4(fp)
  816940:	189a80a0 	cmpeqi	r2,r3,27138
  816944:	10001b1e 	bne	r2,zero,8169b4 <altera_avalon_jtag_uart_ioctl+0xac>
  816948:	00002706 	br	8169e8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81694c:	e0bffb17 	ldw	r2,-20(fp)
  816950:	10c00117 	ldw	r3,4(r2)
  816954:	00a00034 	movhi	r2,32768
  816958:	10bfffc4 	addi	r2,r2,-1
  81695c:	18802226 	beq	r3,r2,8169e8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  816960:	e0bffd17 	ldw	r2,-12(fp)
  816964:	10800017 	ldw	r2,0(r2)
  816968:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81696c:	e0bff917 	ldw	r2,-28(fp)
  816970:	10800090 	cmplti	r2,r2,2
  816974:	1000071e 	bne	r2,zero,816994 <altera_avalon_jtag_uart_ioctl+0x8c>
  816978:	e0fff917 	ldw	r3,-28(fp)
  81697c:	00a00034 	movhi	r2,32768
  816980:	10bfffc4 	addi	r2,r2,-1
  816984:	18800326 	beq	r3,r2,816994 <altera_avalon_jtag_uart_ioctl+0x8c>
  816988:	e0bff917 	ldw	r2,-28(fp)
  81698c:	e0bffe15 	stw	r2,-8(fp)
  816990:	00000306 	br	8169a0 <altera_avalon_jtag_uart_ioctl+0x98>
  816994:	00e00034 	movhi	r3,32768
  816998:	18ffff84 	addi	r3,r3,-2
  81699c:	e0fffe15 	stw	r3,-8(fp)
  8169a0:	e0bffb17 	ldw	r2,-20(fp)
  8169a4:	e0fffe17 	ldw	r3,-8(fp)
  8169a8:	10c00115 	stw	r3,4(r2)
      rc = 0;
  8169ac:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  8169b0:	00000d06 	br	8169e8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8169b4:	e0bffb17 	ldw	r2,-20(fp)
  8169b8:	10c00117 	ldw	r3,4(r2)
  8169bc:	00a00034 	movhi	r2,32768
  8169c0:	10bfffc4 	addi	r2,r2,-1
  8169c4:	18800826 	beq	r3,r2,8169e8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8169c8:	e13ffd17 	ldw	r4,-12(fp)
  8169cc:	e0bffb17 	ldw	r2,-20(fp)
  8169d0:	10c00917 	ldw	r3,36(r2)
  8169d4:	e0bffb17 	ldw	r2,-20(fp)
  8169d8:	10800117 	ldw	r2,4(r2)
  8169dc:	1885803a 	cmpltu	r2,r3,r2
  8169e0:	20800015 	stw	r2,0(r4)
      rc = 0;
  8169e4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8169e8:	e0bffa17 	ldw	r2,-24(fp)
}
  8169ec:	e037883a 	mov	sp,fp
  8169f0:	df000017 	ldw	fp,0(sp)
  8169f4:	dec00104 	addi	sp,sp,4
  8169f8:	f800283a 	ret

008169fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8169fc:	defff204 	addi	sp,sp,-56
  816a00:	dfc00d15 	stw	ra,52(sp)
  816a04:	df000c15 	stw	fp,48(sp)
  816a08:	df000c04 	addi	fp,sp,48
  816a0c:	e13ffb15 	stw	r4,-20(fp)
  816a10:	e17ffc15 	stw	r5,-16(fp)
  816a14:	e1bffd15 	stw	r6,-12(fp)
  816a18:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  816a1c:	e0bffc17 	ldw	r2,-16(fp)
  816a20:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  816a24:	00004806 	br	816b48 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  816a28:	e0bffb17 	ldw	r2,-20(fp)
  816a2c:	10800a17 	ldw	r2,40(r2)
  816a30:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  816a34:	e0bffb17 	ldw	r2,-20(fp)
  816a38:	10800b17 	ldw	r2,44(r2)
  816a3c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  816a40:	e0fff717 	ldw	r3,-36(fp)
  816a44:	e0bff617 	ldw	r2,-40(fp)
  816a48:	18800536 	bltu	r3,r2,816a60 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  816a4c:	e0bff717 	ldw	r2,-36(fp)
  816a50:	e0fff617 	ldw	r3,-40(fp)
  816a54:	10c5c83a 	sub	r2,r2,r3
  816a58:	e0bff815 	stw	r2,-32(fp)
  816a5c:	00000406 	br	816a70 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  816a60:	00820004 	movi	r2,2048
  816a64:	e0fff617 	ldw	r3,-40(fp)
  816a68:	10c5c83a 	sub	r2,r2,r3
  816a6c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  816a70:	e0bff817 	ldw	r2,-32(fp)
  816a74:	1005003a 	cmpeq	r2,r2,zero
  816a78:	10001f1e 	bne	r2,zero,816af8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  816a7c:	e0fffd17 	ldw	r3,-12(fp)
  816a80:	e0bff817 	ldw	r2,-32(fp)
  816a84:	1880022e 	bgeu	r3,r2,816a90 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  816a88:	e0bffd17 	ldw	r2,-12(fp)
  816a8c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  816a90:	e0bffb17 	ldw	r2,-20(fp)
  816a94:	10c00e04 	addi	r3,r2,56
  816a98:	e0bff617 	ldw	r2,-40(fp)
  816a9c:	1887883a 	add	r3,r3,r2
  816aa0:	e0bffa17 	ldw	r2,-24(fp)
  816aa4:	1009883a 	mov	r4,r2
  816aa8:	180b883a 	mov	r5,r3
  816aac:	e1bff817 	ldw	r6,-32(fp)
  816ab0:	080c2c00 	call	80c2c0 <memcpy>
      ptr   += n;
  816ab4:	e0fff817 	ldw	r3,-32(fp)
  816ab8:	e0bffa17 	ldw	r2,-24(fp)
  816abc:	10c5883a 	add	r2,r2,r3
  816ac0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  816ac4:	e0fffd17 	ldw	r3,-12(fp)
  816ac8:	e0bff817 	ldw	r2,-32(fp)
  816acc:	1885c83a 	sub	r2,r3,r2
  816ad0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816ad4:	e0fff617 	ldw	r3,-40(fp)
  816ad8:	e0bff817 	ldw	r2,-32(fp)
  816adc:	1885883a 	add	r2,r3,r2
  816ae0:	10c1ffcc 	andi	r3,r2,2047
  816ae4:	e0bffb17 	ldw	r2,-20(fp)
  816ae8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  816aec:	e0bffd17 	ldw	r2,-12(fp)
  816af0:	10800048 	cmpgei	r2,r2,1
  816af4:	103fcc1e 	bne	r2,zero,816a28 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  816af8:	e0fffa17 	ldw	r3,-24(fp)
  816afc:	e0bffc17 	ldw	r2,-16(fp)
  816b00:	1880141e 	bne	r3,r2,816b54 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  816b04:	e0bffe17 	ldw	r2,-8(fp)
  816b08:	1090000c 	andi	r2,r2,16384
  816b0c:	1004c03a 	cmpne	r2,r2,zero
  816b10:	1000101e 	bne	r2,zero,816b54 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  816b14:	e0bffb17 	ldw	r2,-20(fp)
  816b18:	10c00a17 	ldw	r3,40(r2)
  816b1c:	e0bff717 	ldw	r2,-36(fp)
  816b20:	1880051e 	bne	r3,r2,816b38 <altera_avalon_jtag_uart_read+0x13c>
  816b24:	e0bffb17 	ldw	r2,-20(fp)
  816b28:	10c00917 	ldw	r3,36(r2)
  816b2c:	e0bffb17 	ldw	r2,-20(fp)
  816b30:	10800117 	ldw	r2,4(r2)
  816b34:	18bff736 	bltu	r3,r2,816b14 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  816b38:	e0bffb17 	ldw	r2,-20(fp)
  816b3c:	10c00a17 	ldw	r3,40(r2)
  816b40:	e0bff717 	ldw	r2,-36(fp)
  816b44:	18800326 	beq	r3,r2,816b54 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  816b48:	e0bffd17 	ldw	r2,-12(fp)
  816b4c:	10800048 	cmpgei	r2,r2,1
  816b50:	103fb51e 	bne	r2,zero,816a28 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  816b54:	e0fffa17 	ldw	r3,-24(fp)
  816b58:	e0bffc17 	ldw	r2,-16(fp)
  816b5c:	18801926 	beq	r3,r2,816bc4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816b60:	0005303a 	rdctl	r2,status
  816b64:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816b68:	e0fff517 	ldw	r3,-44(fp)
  816b6c:	00bfff84 	movi	r2,-2
  816b70:	1884703a 	and	r2,r3,r2
  816b74:	1001703a 	wrctl	status,r2
  
  return context;
  816b78:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  816b7c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  816b80:	e0bffb17 	ldw	r2,-20(fp)
  816b84:	10800817 	ldw	r2,32(r2)
  816b88:	10c00054 	ori	r3,r2,1
  816b8c:	e0bffb17 	ldw	r2,-20(fp)
  816b90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  816b94:	e0bffb17 	ldw	r2,-20(fp)
  816b98:	10800017 	ldw	r2,0(r2)
  816b9c:	11000104 	addi	r4,r2,4
  816ba0:	e0bffb17 	ldw	r2,-20(fp)
  816ba4:	10800817 	ldw	r2,32(r2)
  816ba8:	1007883a 	mov	r3,r2
  816bac:	2005883a 	mov	r2,r4
  816bb0:	10c00035 	stwio	r3,0(r2)
  816bb4:	e0bff917 	ldw	r2,-28(fp)
  816bb8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816bbc:	e0bff417 	ldw	r2,-48(fp)
  816bc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  816bc4:	e0fffa17 	ldw	r3,-24(fp)
  816bc8:	e0bffc17 	ldw	r2,-16(fp)
  816bcc:	18800526 	beq	r3,r2,816be4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  816bd0:	e0fffa17 	ldw	r3,-24(fp)
  816bd4:	e0bffc17 	ldw	r2,-16(fp)
  816bd8:	1887c83a 	sub	r3,r3,r2
  816bdc:	e0ffff15 	stw	r3,-4(fp)
  816be0:	00000906 	br	816c08 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  816be4:	e0bffe17 	ldw	r2,-8(fp)
  816be8:	1090000c 	andi	r2,r2,16384
  816bec:	1005003a 	cmpeq	r2,r2,zero
  816bf0:	1000031e 	bne	r2,zero,816c00 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  816bf4:	00bffd44 	movi	r2,-11
  816bf8:	e0bfff15 	stw	r2,-4(fp)
  816bfc:	00000206 	br	816c08 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  816c00:	00bffec4 	movi	r2,-5
  816c04:	e0bfff15 	stw	r2,-4(fp)
  816c08:	e0bfff17 	ldw	r2,-4(fp)
}
  816c0c:	e037883a 	mov	sp,fp
  816c10:	dfc00117 	ldw	ra,4(sp)
  816c14:	df000017 	ldw	fp,0(sp)
  816c18:	dec00204 	addi	sp,sp,8
  816c1c:	f800283a 	ret

00816c20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  816c20:	defff204 	addi	sp,sp,-56
  816c24:	dfc00d15 	stw	ra,52(sp)
  816c28:	df000c15 	stw	fp,48(sp)
  816c2c:	df000c04 	addi	fp,sp,48
  816c30:	e13ffb15 	stw	r4,-20(fp)
  816c34:	e17ffc15 	stw	r5,-16(fp)
  816c38:	e1bffd15 	stw	r6,-12(fp)
  816c3c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  816c40:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  816c44:	e0bffc17 	ldw	r2,-16(fp)
  816c48:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  816c4c:	00003a06 	br	816d38 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  816c50:	e0bffb17 	ldw	r2,-20(fp)
  816c54:	10800c17 	ldw	r2,48(r2)
  816c58:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  816c5c:	e0bffb17 	ldw	r2,-20(fp)
  816c60:	10800d17 	ldw	r2,52(r2)
  816c64:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  816c68:	e0fffa17 	ldw	r3,-24(fp)
  816c6c:	e0bff917 	ldw	r2,-28(fp)
  816c70:	1880062e 	bgeu	r3,r2,816c8c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  816c74:	e0fff917 	ldw	r3,-28(fp)
  816c78:	e0bffa17 	ldw	r2,-24(fp)
  816c7c:	1885c83a 	sub	r2,r3,r2
  816c80:	10bfffc4 	addi	r2,r2,-1
  816c84:	e0bff815 	stw	r2,-32(fp)
  816c88:	00000c06 	br	816cbc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  816c8c:	e0bff917 	ldw	r2,-28(fp)
  816c90:	1005003a 	cmpeq	r2,r2,zero
  816c94:	1000051e 	bne	r2,zero,816cac <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  816c98:	00820004 	movi	r2,2048
  816c9c:	e0fffa17 	ldw	r3,-24(fp)
  816ca0:	10c5c83a 	sub	r2,r2,r3
  816ca4:	e0bff815 	stw	r2,-32(fp)
  816ca8:	00000406 	br	816cbc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  816cac:	0081ffc4 	movi	r2,2047
  816cb0:	e0fffa17 	ldw	r3,-24(fp)
  816cb4:	10c5c83a 	sub	r2,r2,r3
  816cb8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  816cbc:	e0bff817 	ldw	r2,-32(fp)
  816cc0:	1005003a 	cmpeq	r2,r2,zero
  816cc4:	10001f1e 	bne	r2,zero,816d44 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  816cc8:	e0fffd17 	ldw	r3,-12(fp)
  816ccc:	e0bff817 	ldw	r2,-32(fp)
  816cd0:	1880022e 	bgeu	r3,r2,816cdc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  816cd4:	e0bffd17 	ldw	r2,-12(fp)
  816cd8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  816cdc:	e0bffb17 	ldw	r2,-20(fp)
  816ce0:	10c20e04 	addi	r3,r2,2104
  816ce4:	e0bffa17 	ldw	r2,-24(fp)
  816ce8:	1885883a 	add	r2,r3,r2
  816cec:	e0fffc17 	ldw	r3,-16(fp)
  816cf0:	1009883a 	mov	r4,r2
  816cf4:	180b883a 	mov	r5,r3
  816cf8:	e1bff817 	ldw	r6,-32(fp)
  816cfc:	080c2c00 	call	80c2c0 <memcpy>
      ptr   += n;
  816d00:	e0fff817 	ldw	r3,-32(fp)
  816d04:	e0bffc17 	ldw	r2,-16(fp)
  816d08:	10c5883a 	add	r2,r2,r3
  816d0c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  816d10:	e0fffd17 	ldw	r3,-12(fp)
  816d14:	e0bff817 	ldw	r2,-32(fp)
  816d18:	1885c83a 	sub	r2,r3,r2
  816d1c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816d20:	e0fffa17 	ldw	r3,-24(fp)
  816d24:	e0bff817 	ldw	r2,-32(fp)
  816d28:	1885883a 	add	r2,r3,r2
  816d2c:	10c1ffcc 	andi	r3,r2,2047
  816d30:	e0bffb17 	ldw	r2,-20(fp)
  816d34:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  816d38:	e0bffd17 	ldw	r2,-12(fp)
  816d3c:	10800048 	cmpgei	r2,r2,1
  816d40:	103fc31e 	bne	r2,zero,816c50 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816d44:	0005303a 	rdctl	r2,status
  816d48:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816d4c:	e0fff517 	ldw	r3,-44(fp)
  816d50:	00bfff84 	movi	r2,-2
  816d54:	1884703a 	and	r2,r3,r2
  816d58:	1001703a 	wrctl	status,r2
  
  return context;
  816d5c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  816d60:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  816d64:	e0bffb17 	ldw	r2,-20(fp)
  816d68:	10800817 	ldw	r2,32(r2)
  816d6c:	10c00094 	ori	r3,r2,2
  816d70:	e0bffb17 	ldw	r2,-20(fp)
  816d74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  816d78:	e0bffb17 	ldw	r2,-20(fp)
  816d7c:	10800017 	ldw	r2,0(r2)
  816d80:	11000104 	addi	r4,r2,4
  816d84:	e0bffb17 	ldw	r2,-20(fp)
  816d88:	10800817 	ldw	r2,32(r2)
  816d8c:	1007883a 	mov	r3,r2
  816d90:	2005883a 	mov	r2,r4
  816d94:	10c00035 	stwio	r3,0(r2)
  816d98:	e0bff717 	ldw	r2,-36(fp)
  816d9c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816da0:	e0bff417 	ldw	r2,-48(fp)
  816da4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  816da8:	e0bffd17 	ldw	r2,-12(fp)
  816dac:	10800050 	cmplti	r2,r2,1
  816db0:	1000111e 	bne	r2,zero,816df8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  816db4:	e0bffe17 	ldw	r2,-8(fp)
  816db8:	1090000c 	andi	r2,r2,16384
  816dbc:	1004c03a 	cmpne	r2,r2,zero
  816dc0:	1000101e 	bne	r2,zero,816e04 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  816dc4:	e0bffb17 	ldw	r2,-20(fp)
  816dc8:	10c00d17 	ldw	r3,52(r2)
  816dcc:	e0bff917 	ldw	r2,-28(fp)
  816dd0:	1880051e 	bne	r3,r2,816de8 <altera_avalon_jtag_uart_write+0x1c8>
  816dd4:	e0bffb17 	ldw	r2,-20(fp)
  816dd8:	10c00917 	ldw	r3,36(r2)
  816ddc:	e0bffb17 	ldw	r2,-20(fp)
  816de0:	10800117 	ldw	r2,4(r2)
  816de4:	18bff736 	bltu	r3,r2,816dc4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  816de8:	e0bffb17 	ldw	r2,-20(fp)
  816dec:	10c00d17 	ldw	r3,52(r2)
  816df0:	e0bff917 	ldw	r2,-28(fp)
  816df4:	18800326 	beq	r3,r2,816e04 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  816df8:	e0bffd17 	ldw	r2,-12(fp)
  816dfc:	10800048 	cmpgei	r2,r2,1
  816e00:	103fcd1e 	bne	r2,zero,816d38 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  816e04:	e0fffc17 	ldw	r3,-16(fp)
  816e08:	e0bff617 	ldw	r2,-40(fp)
  816e0c:	18800526 	beq	r3,r2,816e24 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  816e10:	e0fffc17 	ldw	r3,-16(fp)
  816e14:	e0bff617 	ldw	r2,-40(fp)
  816e18:	1887c83a 	sub	r3,r3,r2
  816e1c:	e0ffff15 	stw	r3,-4(fp)
  816e20:	00000906 	br	816e48 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  816e24:	e0bffe17 	ldw	r2,-8(fp)
  816e28:	1090000c 	andi	r2,r2,16384
  816e2c:	1005003a 	cmpeq	r2,r2,zero
  816e30:	1000031e 	bne	r2,zero,816e40 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  816e34:	00bffd44 	movi	r2,-11
  816e38:	e0bfff15 	stw	r2,-4(fp)
  816e3c:	00000206 	br	816e48 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  816e40:	00bffec4 	movi	r2,-5
  816e44:	e0bfff15 	stw	r2,-4(fp)
  816e48:	e0bfff17 	ldw	r2,-4(fp)
}
  816e4c:	e037883a 	mov	sp,fp
  816e50:	dfc00117 	ldw	ra,4(sp)
  816e54:	df000017 	ldw	fp,0(sp)
  816e58:	dec00204 	addi	sp,sp,8
  816e5c:	f800283a 	ret

00816e60 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  816e60:	defff904 	addi	sp,sp,-28
  816e64:	dfc00615 	stw	ra,24(sp)
  816e68:	df000515 	stw	fp,20(sp)
  816e6c:	df000504 	addi	fp,sp,20
  816e70:	e13ffe15 	stw	r4,-8(fp)
  816e74:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  816e78:	e0bffe17 	ldw	r2,-8(fp)
  816e7c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  816e80:	e0bffe17 	ldw	r2,-8(fp)
  816e84:	10800104 	addi	r2,r2,4
  816e88:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816e8c:	0005303a 	rdctl	r2,status
  816e90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816e94:	e0fffc17 	ldw	r3,-16(fp)
  816e98:	00bfff84 	movi	r2,-2
  816e9c:	1884703a 	and	r2,r3,r2
  816ea0:	1001703a 	wrctl	status,r2
  
  return context;
  816ea4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  816ea8:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  816eac:	0815d500 	call	815d50 <alt_tick>
  816eb0:	e0bffd17 	ldw	r2,-12(fp)
  816eb4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816eb8:	e0bffb17 	ldw	r2,-20(fp)
  816ebc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  816ec0:	e037883a 	mov	sp,fp
  816ec4:	dfc00117 	ldw	ra,4(sp)
  816ec8:	df000017 	ldw	fp,0(sp)
  816ecc:	dec00204 	addi	sp,sp,8
  816ed0:	f800283a 	ret

00816ed4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  816ed4:	defff904 	addi	sp,sp,-28
  816ed8:	dfc00615 	stw	ra,24(sp)
  816edc:	df000515 	stw	fp,20(sp)
  816ee0:	df000504 	addi	fp,sp,20
  816ee4:	e13ffc15 	stw	r4,-16(fp)
  816ee8:	e17ffd15 	stw	r5,-12(fp)
  816eec:	e1bffe15 	stw	r6,-8(fp)
  816ef0:	e1ffff15 	stw	r7,-4(fp)
  816ef4:	e0bfff17 	ldw	r2,-4(fp)
  816ef8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  816efc:	008020b4 	movhi	r2,130
  816f00:	1091d004 	addi	r2,r2,18240
  816f04:	10800017 	ldw	r2,0(r2)
  816f08:	1004c03a 	cmpne	r2,r2,zero
  816f0c:	1000041e 	bne	r2,zero,816f20 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  816f10:	00c020b4 	movhi	r3,130
  816f14:	18d1d004 	addi	r3,r3,18240
  816f18:	e0bffb17 	ldw	r2,-20(fp)
  816f1c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  816f20:	e0bffc17 	ldw	r2,-16(fp)
  816f24:	10800104 	addi	r2,r2,4
  816f28:	1007883a 	mov	r3,r2
  816f2c:	008001c4 	movi	r2,7
  816f30:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  816f34:	e13ffe17 	ldw	r4,-8(fp)
  816f38:	e17ffc17 	ldw	r5,-16(fp)
  816f3c:	01802074 	movhi	r6,129
  816f40:	319b9804 	addi	r6,r6,28256
  816f44:	08154540 	call	815454 <alt_irq_register>
#endif  
}
  816f48:	e037883a 	mov	sp,fp
  816f4c:	dfc00117 	ldw	ra,4(sp)
  816f50:	df000017 	ldw	fp,0(sp)
  816f54:	dec00204 	addi	sp,sp,8
  816f58:	f800283a 	ret

00816f5c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  816f5c:	defffc04 	addi	sp,sp,-16
  816f60:	dfc00315 	stw	ra,12(sp)
  816f64:	df000215 	stw	fp,8(sp)
  816f68:	df000204 	addi	fp,sp,8
  816f6c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  816f70:	e13fff17 	ldw	r4,-4(fp)
  816f74:	014020b4 	movhi	r5,130
  816f78:	294a7104 	addi	r5,r5,10692
  816f7c:	081ef080 	call	81ef08 <alt_find_dev>
  816f80:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  816f84:	e0bffe17 	ldw	r2,-8(fp)
}
  816f88:	e037883a 	mov	sp,fp
  816f8c:	dfc00117 	ldw	ra,4(sp)
  816f90:	df000017 	ldw	fp,0(sp)
  816f94:	dec00204 	addi	sp,sp,8
  816f98:	f800283a 	ret

00816f9c <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  816f9c:	defffd04 	addi	sp,sp,-12
  816fa0:	df000215 	stw	fp,8(sp)
  816fa4:	df000204 	addi	fp,sp,8
  816fa8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  816fac:	e0bfff17 	ldw	r2,-4(fp)
  816fb0:	10800a17 	ldw	r2,40(r2)
  816fb4:	10800037 	ldwio	r2,0(r2)
  816fb8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  816fbc:	e0bffe17 	ldw	r2,-8(fp)
  816fc0:	10800054 	ori	r2,r2,1
  816fc4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  816fc8:	e0bfff17 	ldw	r2,-4(fp)
  816fcc:	10800a17 	ldw	r2,40(r2)
  816fd0:	e0fffe17 	ldw	r3,-8(fp)
  816fd4:	10c00035 	stwio	r3,0(r2)
}
  816fd8:	e037883a 	mov	sp,fp
  816fdc:	df000017 	ldw	fp,0(sp)
  816fe0:	dec00104 	addi	sp,sp,4
  816fe4:	f800283a 	ret

00816fe8 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  816fe8:	defffd04 	addi	sp,sp,-12
  816fec:	df000215 	stw	fp,8(sp)
  816ff0:	df000204 	addi	fp,sp,8
  816ff4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  816ff8:	e0bfff17 	ldw	r2,-4(fp)
  816ffc:	10800a17 	ldw	r2,40(r2)
  817000:	10800037 	ldwio	r2,0(r2)
  817004:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  817008:	e0fffe17 	ldw	r3,-8(fp)
  81700c:	00bfff84 	movi	r2,-2
  817010:	1884703a 	and	r2,r3,r2
  817014:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  817018:	e0bfff17 	ldw	r2,-4(fp)
  81701c:	10800a17 	ldw	r2,40(r2)
  817020:	e0fffe17 	ldw	r3,-8(fp)
  817024:	10c00035 	stwio	r3,0(r2)
}
  817028:	e037883a 	mov	sp,fp
  81702c:	df000017 	ldw	fp,0(sp)
  817030:	dec00104 	addi	sp,sp,4
  817034:	f800283a 	ret

00817038 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  817038:	defffd04 	addi	sp,sp,-12
  81703c:	df000215 	stw	fp,8(sp)
  817040:	df000204 	addi	fp,sp,8
  817044:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  817048:	e0bfff17 	ldw	r2,-4(fp)
  81704c:	10800a17 	ldw	r2,40(r2)
  817050:	10800037 	ldwio	r2,0(r2)
  817054:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  817058:	e0bffe17 	ldw	r2,-8(fp)
  81705c:	10800094 	ori	r2,r2,2
  817060:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  817064:	e0bfff17 	ldw	r2,-4(fp)
  817068:	10800a17 	ldw	r2,40(r2)
  81706c:	e0fffe17 	ldw	r3,-8(fp)
  817070:	10c00035 	stwio	r3,0(r2)
}
  817074:	e037883a 	mov	sp,fp
  817078:	df000017 	ldw	fp,0(sp)
  81707c:	dec00104 	addi	sp,sp,4
  817080:	f800283a 	ret

00817084 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  817084:	defffd04 	addi	sp,sp,-12
  817088:	df000215 	stw	fp,8(sp)
  81708c:	df000204 	addi	fp,sp,8
  817090:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  817094:	e0bfff17 	ldw	r2,-4(fp)
  817098:	10800a17 	ldw	r2,40(r2)
  81709c:	10800037 	ldwio	r2,0(r2)
  8170a0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  8170a4:	e0fffe17 	ldw	r3,-8(fp)
  8170a8:	00bfff44 	movi	r2,-3
  8170ac:	1884703a 	and	r2,r3,r2
  8170b0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8170b4:	e0bfff17 	ldw	r2,-4(fp)
  8170b8:	10800a17 	ldw	r2,40(r2)
  8170bc:	e0fffe17 	ldw	r3,-8(fp)
  8170c0:	10c00035 	stwio	r3,0(r2)
}
  8170c4:	e037883a 	mov	sp,fp
  8170c8:	df000017 	ldw	fp,0(sp)
  8170cc:	dec00104 	addi	sp,sp,4
  8170d0:	f800283a 	ret

008170d4 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  8170d4:	defffd04 	addi	sp,sp,-12
  8170d8:	df000215 	stw	fp,8(sp)
  8170dc:	df000204 	addi	fp,sp,8
  8170e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8170e4:	e0bfff17 	ldw	r2,-4(fp)
  8170e8:	10800a17 	ldw	r2,40(r2)
  8170ec:	10800037 	ldwio	r2,0(r2)
  8170f0:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  8170f4:	e0bffe17 	ldw	r2,-8(fp)
  8170f8:	1080400c 	andi	r2,r2,256
  8170fc:	1004c03a 	cmpne	r2,r2,zero
}
  817100:	e037883a 	mov	sp,fp
  817104:	df000017 	ldw	fp,0(sp)
  817108:	dec00104 	addi	sp,sp,4
  81710c:	f800283a 	ret

00817110 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  817110:	defffd04 	addi	sp,sp,-12
  817114:	df000215 	stw	fp,8(sp)
  817118:	df000204 	addi	fp,sp,8
  81711c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  817120:	e0bfff17 	ldw	r2,-4(fp)
  817124:	10800a17 	ldw	r2,40(r2)
  817128:	10800037 	ldwio	r2,0(r2)
  81712c:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  817130:	e0bffe17 	ldw	r2,-8(fp)
  817134:	1080800c 	andi	r2,r2,512
  817138:	1004c03a 	cmpne	r2,r2,zero
}
  81713c:	e037883a 	mov	sp,fp
  817140:	df000017 	ldw	fp,0(sp)
  817144:	dec00104 	addi	sp,sp,4
  817148:	f800283a 	ret

0081714c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  81714c:	defffd04 	addi	sp,sp,-12
  817150:	df000215 	stw	fp,8(sp)
  817154:	df000204 	addi	fp,sp,8
  817158:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81715c:	e0bfff17 	ldw	r2,-4(fp)
  817160:	10800a17 	ldw	r2,40(r2)
  817164:	10800037 	ldwio	r2,0(r2)
  817168:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  81716c:	e0bffe17 	ldw	r2,-8(fp)
  817170:	10800114 	ori	r2,r2,4
  817174:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  817178:	e0bffe17 	ldw	r2,-8(fp)
  81717c:	10800214 	ori	r2,r2,8
  817180:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  817184:	e0bfff17 	ldw	r2,-4(fp)
  817188:	10800a17 	ldw	r2,40(r2)
  81718c:	e0fffe17 	ldw	r3,-8(fp)
  817190:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  817194:	e0fffe17 	ldw	r3,-8(fp)
  817198:	00bffec4 	movi	r2,-5
  81719c:	1884703a 	and	r2,r3,r2
  8171a0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  8171a4:	e0fffe17 	ldw	r3,-8(fp)
  8171a8:	00bffdc4 	movi	r2,-9
  8171ac:	1884703a 	and	r2,r3,r2
  8171b0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8171b4:	e0bfff17 	ldw	r2,-4(fp)
  8171b8:	10800a17 	ldw	r2,40(r2)
  8171bc:	e0fffe17 	ldw	r3,-8(fp)
  8171c0:	10c00035 	stwio	r3,0(r2)
}
  8171c4:	e037883a 	mov	sp,fp
  8171c8:	df000017 	ldw	fp,0(sp)
  8171cc:	dec00104 	addi	sp,sp,4
  8171d0:	f800283a 	ret

008171d4 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  8171d4:	defffb04 	addi	sp,sp,-20
  8171d8:	df000415 	stw	fp,16(sp)
  8171dc:	df000404 	addi	fp,sp,16
  8171e0:	e13ffd15 	stw	r4,-12(fp)
  8171e4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8171e8:	e0bffd17 	ldw	r2,-12(fp)
  8171ec:	10800a17 	ldw	r2,40(r2)
  8171f0:	10800104 	addi	r2,r2,4
  8171f4:	10800037 	ldwio	r2,0(r2)
  8171f8:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8171fc:	e0bffe17 	ldw	r2,-8(fp)
  817200:	1004c03a 	cmpne	r2,r2,zero
  817204:	1000051e 	bne	r2,zero,81721c <alt_up_audio_read_fifo_avail+0x48>
  817208:	e0bffc17 	ldw	r2,-16(fp)
  81720c:	10bfc00c 	andi	r2,r2,65280
  817210:	1004d23a 	srli	r2,r2,8
  817214:	e0bfff15 	stw	r2,-4(fp)
  817218:	00000306 	br	817228 <alt_up_audio_read_fifo_avail+0x54>
  81721c:	e0bffc17 	ldw	r2,-16(fp)
  817220:	10803fcc 	andi	r2,r2,255
  817224:	e0bfff15 	stw	r2,-4(fp)
  817228:	e0bfff17 	ldw	r2,-4(fp)
  81722c:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  817230:	e0bffc17 	ldw	r2,-16(fp)
}
  817234:	e037883a 	mov	sp,fp
  817238:	df000017 	ldw	fp,0(sp)
  81723c:	dec00104 	addi	sp,sp,4
  817240:	f800283a 	ret

00817244 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  817244:	defff904 	addi	sp,sp,-28
  817248:	dfc00615 	stw	ra,24(sp)
  81724c:	df000515 	stw	fp,20(sp)
  817250:	df000504 	addi	fp,sp,20
  817254:	e13ffc15 	stw	r4,-16(fp)
  817258:	e17ffd15 	stw	r5,-12(fp)
  81725c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  817260:	e13ffc17 	ldw	r4,-16(fp)
  817264:	01400044 	movi	r5,1
  817268:	08171d40 	call	8171d4 <alt_up_audio_read_fifo_avail>
  81726c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  817270:	e0bffb17 	ldw	r2,-20(fp)
  817274:	10801868 	cmpgeui	r2,r2,97
  817278:	1000021e 	bne	r2,zero,817284 <alt_up_audio_record_r+0x40>
		return 0;
  81727c:	e03fff15 	stw	zero,-4(fp)
  817280:	00000606 	br	81729c <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  817284:	e13ffc17 	ldw	r4,-16(fp)
  817288:	e17ffd17 	ldw	r5,-12(fp)
  81728c:	e1bffe17 	ldw	r6,-8(fp)
  817290:	01c00044 	movi	r7,1
  817294:	08174780 	call	817478 <alt_up_audio_read_fifo>
  817298:	e0bfff15 	stw	r2,-4(fp)
  81729c:	e0bfff17 	ldw	r2,-4(fp)
}
  8172a0:	e037883a 	mov	sp,fp
  8172a4:	dfc00117 	ldw	ra,4(sp)
  8172a8:	df000017 	ldw	fp,0(sp)
  8172ac:	dec00204 	addi	sp,sp,8
  8172b0:	f800283a 	ret

008172b4 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8172b4:	defff904 	addi	sp,sp,-28
  8172b8:	dfc00615 	stw	ra,24(sp)
  8172bc:	df000515 	stw	fp,20(sp)
  8172c0:	df000504 	addi	fp,sp,20
  8172c4:	e13ffc15 	stw	r4,-16(fp)
  8172c8:	e17ffd15 	stw	r5,-12(fp)
  8172cc:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  8172d0:	e13ffc17 	ldw	r4,-16(fp)
  8172d4:	000b883a 	mov	r5,zero
  8172d8:	08171d40 	call	8171d4 <alt_up_audio_read_fifo_avail>
  8172dc:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  8172e0:	e0bffb17 	ldw	r2,-20(fp)
  8172e4:	10801868 	cmpgeui	r2,r2,97
  8172e8:	1000021e 	bne	r2,zero,8172f4 <alt_up_audio_record_l+0x40>
		return 0;
  8172ec:	e03fff15 	stw	zero,-4(fp)
  8172f0:	00000606 	br	81730c <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  8172f4:	e13ffc17 	ldw	r4,-16(fp)
  8172f8:	e17ffd17 	ldw	r5,-12(fp)
  8172fc:	e1bffe17 	ldw	r6,-8(fp)
  817300:	000f883a 	mov	r7,zero
  817304:	08174780 	call	817478 <alt_up_audio_read_fifo>
  817308:	e0bfff15 	stw	r2,-4(fp)
  81730c:	e0bfff17 	ldw	r2,-4(fp)
}
  817310:	e037883a 	mov	sp,fp
  817314:	dfc00117 	ldw	ra,4(sp)
  817318:	df000017 	ldw	fp,0(sp)
  81731c:	dec00204 	addi	sp,sp,8
  817320:	f800283a 	ret

00817324 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  817324:	defffb04 	addi	sp,sp,-20
  817328:	df000415 	stw	fp,16(sp)
  81732c:	df000404 	addi	fp,sp,16
  817330:	e13ffd15 	stw	r4,-12(fp)
  817334:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  817338:	e0bffd17 	ldw	r2,-12(fp)
  81733c:	10800a17 	ldw	r2,40(r2)
  817340:	10800104 	addi	r2,r2,4
  817344:	10800037 	ldwio	r2,0(r2)
  817348:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81734c:	e0bffe17 	ldw	r2,-8(fp)
  817350:	1004c03a 	cmpne	r2,r2,zero
  817354:	1000051e 	bne	r2,zero,81736c <alt_up_audio_write_fifo_space+0x48>
  817358:	e0bffc17 	ldw	r2,-16(fp)
  81735c:	10bfc02c 	andhi	r2,r2,65280
  817360:	1004d63a 	srli	r2,r2,24
  817364:	e0bfff15 	stw	r2,-4(fp)
  817368:	00000406 	br	81737c <alt_up_audio_write_fifo_space+0x58>
  81736c:	e0bffc17 	ldw	r2,-16(fp)
  817370:	10803fec 	andhi	r2,r2,255
  817374:	1004d43a 	srli	r2,r2,16
  817378:	e0bfff15 	stw	r2,-4(fp)
  81737c:	e0bfff17 	ldw	r2,-4(fp)
  817380:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  817384:	e0bffc17 	ldw	r2,-16(fp)
}
  817388:	e037883a 	mov	sp,fp
  81738c:	df000017 	ldw	fp,0(sp)
  817390:	dec00104 	addi	sp,sp,4
  817394:	f800283a 	ret

00817398 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  817398:	defff904 	addi	sp,sp,-28
  81739c:	dfc00615 	stw	ra,24(sp)
  8173a0:	df000515 	stw	fp,20(sp)
  8173a4:	df000504 	addi	fp,sp,20
  8173a8:	e13ffc15 	stw	r4,-16(fp)
  8173ac:	e17ffd15 	stw	r5,-12(fp)
  8173b0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  8173b4:	e13ffc17 	ldw	r4,-16(fp)
  8173b8:	01400044 	movi	r5,1
  8173bc:	08173240 	call	817324 <alt_up_audio_write_fifo_space>
  8173c0:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  8173c4:	e0bffb17 	ldw	r2,-20(fp)
  8173c8:	10801868 	cmpgeui	r2,r2,97
  8173cc:	1000021e 	bne	r2,zero,8173d8 <alt_up_audio_play_r+0x40>
		return 0;
  8173d0:	e03fff15 	stw	zero,-4(fp)
  8173d4:	00000606 	br	8173f0 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8173d8:	e13ffc17 	ldw	r4,-16(fp)
  8173dc:	e17ffd17 	ldw	r5,-12(fp)
  8173e0:	e1bffe17 	ldw	r6,-8(fp)
  8173e4:	01c00044 	movi	r7,1
  8173e8:	081757c0 	call	81757c <alt_up_audio_write_fifo>
  8173ec:	e0bfff15 	stw	r2,-4(fp)
  8173f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8173f4:	e037883a 	mov	sp,fp
  8173f8:	dfc00117 	ldw	ra,4(sp)
  8173fc:	df000017 	ldw	fp,0(sp)
  817400:	dec00204 	addi	sp,sp,8
  817404:	f800283a 	ret

00817408 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  817408:	defff904 	addi	sp,sp,-28
  81740c:	dfc00615 	stw	ra,24(sp)
  817410:	df000515 	stw	fp,20(sp)
  817414:	df000504 	addi	fp,sp,20
  817418:	e13ffc15 	stw	r4,-16(fp)
  81741c:	e17ffd15 	stw	r5,-12(fp)
  817420:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  817424:	e13ffc17 	ldw	r4,-16(fp)
  817428:	000b883a 	mov	r5,zero
  81742c:	08173240 	call	817324 <alt_up_audio_write_fifo_space>
  817430:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  817434:	e0bffb17 	ldw	r2,-20(fp)
  817438:	10801868 	cmpgeui	r2,r2,97
  81743c:	1000021e 	bne	r2,zero,817448 <alt_up_audio_play_l+0x40>
		return 0;
  817440:	e03fff15 	stw	zero,-4(fp)
  817444:	00000606 	br	817460 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  817448:	e13ffc17 	ldw	r4,-16(fp)
  81744c:	e17ffd17 	ldw	r5,-12(fp)
  817450:	e1bffe17 	ldw	r6,-8(fp)
  817454:	000f883a 	mov	r7,zero
  817458:	081757c0 	call	81757c <alt_up_audio_write_fifo>
  81745c:	e0bfff15 	stw	r2,-4(fp)
  817460:	e0bfff17 	ldw	r2,-4(fp)
}
  817464:	e037883a 	mov	sp,fp
  817468:	dfc00117 	ldw	ra,4(sp)
  81746c:	df000017 	ldw	fp,0(sp)
  817470:	dec00204 	addi	sp,sp,8
  817474:	f800283a 	ret

00817478 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  817478:	defff604 	addi	sp,sp,-40
  81747c:	df000915 	stw	fp,36(sp)
  817480:	df000904 	addi	fp,sp,36
  817484:	e13ff915 	stw	r4,-28(fp)
  817488:	e17ffa15 	stw	r5,-24(fp)
  81748c:	e1bffb15 	stw	r6,-20(fp)
  817490:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  817494:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  817498:	00003006 	br	81755c <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81749c:	e0bff917 	ldw	r2,-28(fp)
  8174a0:	10800a17 	ldw	r2,40(r2)
  8174a4:	10800104 	addi	r2,r2,4
  8174a8:	10800037 	ldwio	r2,0(r2)
  8174ac:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8174b0:	e0bffc17 	ldw	r2,-16(fp)
  8174b4:	1004c03a 	cmpne	r2,r2,zero
  8174b8:	1000051e 	bne	r2,zero,8174d0 <alt_up_audio_read_fifo+0x58>
  8174bc:	e0bff817 	ldw	r2,-32(fp)
  8174c0:	10bfc00c 	andi	r2,r2,65280
  8174c4:	1004d23a 	srli	r2,r2,8
  8174c8:	e0bfff15 	stw	r2,-4(fp)
  8174cc:	00000306 	br	8174dc <alt_up_audio_read_fifo+0x64>
  8174d0:	e0bff817 	ldw	r2,-32(fp)
  8174d4:	10803fcc 	andi	r2,r2,255
  8174d8:	e0bfff15 	stw	r2,-4(fp)
  8174dc:	e0bfff17 	ldw	r2,-4(fp)
  8174e0:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  8174e4:	e0bff817 	ldw	r2,-32(fp)
  8174e8:	1005003a 	cmpeq	r2,r2,zero
  8174ec:	10001e1e 	bne	r2,zero,817568 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  8174f0:	e0bff717 	ldw	r2,-36(fp)
  8174f4:	1085883a 	add	r2,r2,r2
  8174f8:	1085883a 	add	r2,r2,r2
  8174fc:	1007883a 	mov	r3,r2
  817500:	e0bffa17 	ldw	r2,-24(fp)
  817504:	1887883a 	add	r3,r3,r2
  817508:	e0fffe15 	stw	r3,-8(fp)
  81750c:	e0bffc17 	ldw	r2,-16(fp)
  817510:	1004c03a 	cmpne	r2,r2,zero
  817514:	1000061e 	bne	r2,zero,817530 <alt_up_audio_read_fifo+0xb8>
  817518:	e0bff917 	ldw	r2,-28(fp)
  81751c:	10800a17 	ldw	r2,40(r2)
  817520:	10800204 	addi	r2,r2,8
  817524:	10800037 	ldwio	r2,0(r2)
  817528:	e0bffd15 	stw	r2,-12(fp)
  81752c:	00000506 	br	817544 <alt_up_audio_read_fifo+0xcc>
  817530:	e0bff917 	ldw	r2,-28(fp)
  817534:	10800a17 	ldw	r2,40(r2)
  817538:	10800304 	addi	r2,r2,12
  81753c:	10800037 	ldwio	r2,0(r2)
  817540:	e0bffd15 	stw	r2,-12(fp)
  817544:	e0fffd17 	ldw	r3,-12(fp)
  817548:	e0bffe17 	ldw	r2,-8(fp)
  81754c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  817550:	e0bff717 	ldw	r2,-36(fp)
  817554:	10800044 	addi	r2,r2,1
  817558:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  81755c:	e0fff717 	ldw	r3,-36(fp)
  817560:	e0bffb17 	ldw	r2,-20(fp)
  817564:	18bfcd16 	blt	r3,r2,81749c <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  817568:	e0bff717 	ldw	r2,-36(fp)
}
  81756c:	e037883a 	mov	sp,fp
  817570:	df000017 	ldw	fp,0(sp)
  817574:	dec00104 	addi	sp,sp,4
  817578:	f800283a 	ret

0081757c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  81757c:	defff804 	addi	sp,sp,-32
  817580:	df000715 	stw	fp,28(sp)
  817584:	df000704 	addi	fp,sp,28
  817588:	e13ffb15 	stw	r4,-20(fp)
  81758c:	e17ffc15 	stw	r5,-16(fp)
  817590:	e1bffd15 	stw	r6,-12(fp)
  817594:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  817598:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  81759c:	00003a06 	br	817688 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8175a0:	e0bffb17 	ldw	r2,-20(fp)
  8175a4:	10800a17 	ldw	r2,40(r2)
  8175a8:	10800104 	addi	r2,r2,4
  8175ac:	10800037 	ldwio	r2,0(r2)
  8175b0:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8175b4:	e0bffe17 	ldw	r2,-8(fp)
  8175b8:	1004c03a 	cmpne	r2,r2,zero
  8175bc:	1000051e 	bne	r2,zero,8175d4 <alt_up_audio_write_fifo+0x58>
  8175c0:	e0bffa17 	ldw	r2,-24(fp)
  8175c4:	10bfc02c 	andhi	r2,r2,65280
  8175c8:	1004d63a 	srli	r2,r2,24
  8175cc:	e0bfff15 	stw	r2,-4(fp)
  8175d0:	00000406 	br	8175e4 <alt_up_audio_write_fifo+0x68>
  8175d4:	e0bffa17 	ldw	r2,-24(fp)
  8175d8:	10803fec 	andhi	r2,r2,255
  8175dc:	1004d43a 	srli	r2,r2,16
  8175e0:	e0bfff15 	stw	r2,-4(fp)
  8175e4:	e0bfff17 	ldw	r2,-4(fp)
  8175e8:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  8175ec:	e0bffa17 	ldw	r2,-24(fp)
  8175f0:	1005003a 	cmpeq	r2,r2,zero
  8175f4:	1000271e 	bne	r2,zero,817694 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  8175f8:	e0bffe17 	ldw	r2,-8(fp)
  8175fc:	1004c03a 	cmpne	r2,r2,zero
  817600:	1000111e 	bne	r2,zero,817648 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  817604:	e0bffb17 	ldw	r2,-20(fp)
  817608:	10800a17 	ldw	r2,40(r2)
  81760c:	11000204 	addi	r4,r2,8
  817610:	e0bff917 	ldw	r2,-28(fp)
  817614:	1085883a 	add	r2,r2,r2
  817618:	1085883a 	add	r2,r2,r2
  81761c:	1007883a 	mov	r3,r2
  817620:	e0bffc17 	ldw	r2,-16(fp)
  817624:	1885883a 	add	r2,r3,r2
  817628:	10800017 	ldw	r2,0(r2)
  81762c:	1007883a 	mov	r3,r2
  817630:	e0bff917 	ldw	r2,-28(fp)
  817634:	10800044 	addi	r2,r2,1
  817638:	e0bff915 	stw	r2,-28(fp)
  81763c:	2005883a 	mov	r2,r4
  817640:	10c00035 	stwio	r3,0(r2)
  817644:	00001006 	br	817688 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  817648:	e0bffb17 	ldw	r2,-20(fp)
  81764c:	10800a17 	ldw	r2,40(r2)
  817650:	11000304 	addi	r4,r2,12
  817654:	e0bff917 	ldw	r2,-28(fp)
  817658:	1085883a 	add	r2,r2,r2
  81765c:	1085883a 	add	r2,r2,r2
  817660:	1007883a 	mov	r3,r2
  817664:	e0bffc17 	ldw	r2,-16(fp)
  817668:	1885883a 	add	r2,r3,r2
  81766c:	10800017 	ldw	r2,0(r2)
  817670:	1007883a 	mov	r3,r2
  817674:	e0bff917 	ldw	r2,-28(fp)
  817678:	10800044 	addi	r2,r2,1
  81767c:	e0bff915 	stw	r2,-28(fp)
  817680:	2005883a 	mov	r2,r4
  817684:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  817688:	e0fff917 	ldw	r3,-28(fp)
  81768c:	e0bffd17 	ldw	r2,-12(fp)
  817690:	18bfc316 	blt	r3,r2,8175a0 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  817694:	e0bff917 	ldw	r2,-28(fp)
}
  817698:	e037883a 	mov	sp,fp
  81769c:	df000017 	ldw	fp,0(sp)
  8176a0:	dec00104 	addi	sp,sp,4
  8176a4:	f800283a 	ret

008176a8 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  8176a8:	defffc04 	addi	sp,sp,-16
  8176ac:	df000315 	stw	fp,12(sp)
  8176b0:	df000304 	addi	fp,sp,12
  8176b4:	e13ffd15 	stw	r4,-12(fp)
  8176b8:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  8176bc:	e0bffe17 	ldw	r2,-8(fp)
  8176c0:	1004c03a 	cmpne	r2,r2,zero
  8176c4:	1000061e 	bne	r2,zero,8176e0 <alt_up_audio_read_fifo_head+0x38>
  8176c8:	e0bffd17 	ldw	r2,-12(fp)
  8176cc:	10800a17 	ldw	r2,40(r2)
  8176d0:	10800204 	addi	r2,r2,8
  8176d4:	10800037 	ldwio	r2,0(r2)
  8176d8:	e0bfff15 	stw	r2,-4(fp)
  8176dc:	00000506 	br	8176f4 <alt_up_audio_read_fifo_head+0x4c>
  8176e0:	e0bffd17 	ldw	r2,-12(fp)
  8176e4:	10800a17 	ldw	r2,40(r2)
  8176e8:	10800304 	addi	r2,r2,12
  8176ec:	10800037 	ldwio	r2,0(r2)
  8176f0:	e0bfff15 	stw	r2,-4(fp)
  8176f4:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  8176f8:	e037883a 	mov	sp,fp
  8176fc:	df000017 	ldw	fp,0(sp)
  817700:	dec00104 	addi	sp,sp,4
  817704:	f800283a 	ret

00817708 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  817708:	defffc04 	addi	sp,sp,-16
  81770c:	df000315 	stw	fp,12(sp)
  817710:	df000304 	addi	fp,sp,12
  817714:	e13ffd15 	stw	r4,-12(fp)
  817718:	e17ffe15 	stw	r5,-8(fp)
  81771c:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  817720:	e0bfff17 	ldw	r2,-4(fp)
  817724:	1004c03a 	cmpne	r2,r2,zero
  817728:	1000061e 	bne	r2,zero,817744 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  81772c:	e0bffd17 	ldw	r2,-12(fp)
  817730:	10800a17 	ldw	r2,40(r2)
  817734:	10800204 	addi	r2,r2,8
  817738:	e0fffe17 	ldw	r3,-8(fp)
  81773c:	10c00035 	stwio	r3,0(r2)
  817740:	00000506 	br	817758 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  817744:	e0bffd17 	ldw	r2,-12(fp)
  817748:	10800a17 	ldw	r2,40(r2)
  81774c:	10800304 	addi	r2,r2,12
  817750:	e0fffe17 	ldw	r3,-8(fp)
  817754:	10c00035 	stwio	r3,0(r2)
}
  817758:	e037883a 	mov	sp,fp
  81775c:	df000017 	ldw	fp,0(sp)
  817760:	dec00104 	addi	sp,sp,4
  817764:	f800283a 	ret

00817768 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  817768:	defffc04 	addi	sp,sp,-16
  81776c:	dfc00315 	stw	ra,12(sp)
  817770:	df000215 	stw	fp,8(sp)
  817774:	df000204 	addi	fp,sp,8
  817778:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  81777c:	e13fff17 	ldw	r4,-4(fp)
  817780:	014020b4 	movhi	r5,130
  817784:	294a7104 	addi	r5,r5,10692
  817788:	081ef080 	call	81ef08 <alt_find_dev>
  81778c:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  817790:	e0bffe17 	ldw	r2,-8(fp)
  817794:	10800a17 	ldw	r2,40(r2)
  817798:	10800104 	addi	r2,r2,4
  81779c:	10800037 	ldwio	r2,0(r2)
  8177a0:	10803fec 	andhi	r2,r2,255
  8177a4:	1005d43a 	srai	r2,r2,16
  8177a8:	1007883a 	mov	r3,r2
  8177ac:	e0bffe17 	ldw	r2,-8(fp)
  8177b0:	10c00b15 	stw	r3,44(r2)

  return dev;
  8177b4:	e0bffe17 	ldw	r2,-8(fp)
}
  8177b8:	e037883a 	mov	sp,fp
  8177bc:	dfc00117 	ldw	ra,4(sp)
  8177c0:	df000017 	ldw	fp,0(sp)
  8177c4:	dec00204 	addi	sp,sp,8
  8177c8:	f800283a 	ret

008177cc <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8177cc:	defffc04 	addi	sp,sp,-16
  8177d0:	df000315 	stw	fp,12(sp)
  8177d4:	df000304 	addi	fp,sp,12
  8177d8:	e13ffd15 	stw	r4,-12(fp)
  8177dc:	e17ffe15 	stw	r5,-8(fp)
  8177e0:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  8177e4:	e0bffd17 	ldw	r2,-12(fp)
  8177e8:	10800a17 	ldw	r2,40(r2)
  8177ec:	11000204 	addi	r4,r2,8
  8177f0:	e0bffe17 	ldw	r2,-8(fp)
  8177f4:	10c03fcc 	andi	r3,r2,255
  8177f8:	2005883a 	mov	r2,r4
  8177fc:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  817800:	e0bffd17 	ldw	r2,-12(fp)
  817804:	10800a17 	ldw	r2,40(r2)
  817808:	11000304 	addi	r4,r2,12
  81780c:	e0bfff17 	ldw	r2,-4(fp)
  817810:	10ffffcc 	andi	r3,r2,65535
  817814:	2005883a 	mov	r2,r4
  817818:	10c00035 	stwio	r3,0(r2)

	return 0;
  81781c:	0005883a 	mov	r2,zero
}
  817820:	e037883a 	mov	sp,fp
  817824:	df000017 	ldw	fp,0(sp)
  817828:	dec00104 	addi	sp,sp,4
  81782c:	f800283a 	ret

00817830 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  817830:	defffa04 	addi	sp,sp,-24
  817834:	dfc00515 	stw	ra,20(sp)
  817838:	df000415 	stw	fp,16(sp)
  81783c:	df000404 	addi	fp,sp,16
  817840:	e13ffc15 	stw	r4,-16(fp)
  817844:	e17ffd15 	stw	r5,-12(fp)
  817848:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  81784c:	e0bffc17 	ldw	r2,-16(fp)
  817850:	10800a17 	ldw	r2,40(r2)
  817854:	11000204 	addi	r4,r2,8
  817858:	e0bffd17 	ldw	r2,-12(fp)
  81785c:	10c03fcc 	andi	r3,r2,255
  817860:	2005883a 	mov	r2,r4
  817864:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  817868:	e0bffc17 	ldw	r2,-16(fp)
  81786c:	10800a17 	ldw	r2,40(r2)
  817870:	10800304 	addi	r2,r2,12
  817874:	10800037 	ldwio	r2,0(r2)
  817878:	1007883a 	mov	r3,r2
  81787c:	e0bffe17 	ldw	r2,-8(fp)
  817880:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  817884:	e13ffc17 	ldw	r4,-16(fp)
  817888:	081795c0 	call	81795c <alt_up_av_config_read_acknowledge>
  81788c:	1005003a 	cmpeq	r2,r2,zero
  817890:	1000031e 	bne	r2,zero,8178a0 <alt_up_av_config_read_data+0x70>
		return -1;
  817894:	00bfffc4 	movi	r2,-1
  817898:	e0bfff15 	stw	r2,-4(fp)
  81789c:	00000106 	br	8178a4 <alt_up_av_config_read_data+0x74>

	return 0;
  8178a0:	e03fff15 	stw	zero,-4(fp)
  8178a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8178a8:	e037883a 	mov	sp,fp
  8178ac:	dfc00117 	ldw	ra,4(sp)
  8178b0:	df000017 	ldw	fp,0(sp)
  8178b4:	dec00204 	addi	sp,sp,8
  8178b8:	f800283a 	ret

008178bc <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  8178bc:	defffe04 	addi	sp,sp,-8
  8178c0:	df000115 	stw	fp,4(sp)
  8178c4:	df000104 	addi	fp,sp,4
  8178c8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  8178cc:	e0bfff17 	ldw	r2,-4(fp)
  8178d0:	10800a17 	ldw	r2,40(r2)
  8178d4:	1007883a 	mov	r3,r2
  8178d8:	00800044 	movi	r2,1
  8178dc:	18800025 	stbio	r2,0(r3)
	return 0;
  8178e0:	0005883a 	mov	r2,zero
}
  8178e4:	e037883a 	mov	sp,fp
  8178e8:	df000017 	ldw	fp,0(sp)
  8178ec:	dec00104 	addi	sp,sp,4
  8178f0:	f800283a 	ret

008178f4 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  8178f4:	defffe04 	addi	sp,sp,-8
  8178f8:	df000115 	stw	fp,4(sp)
  8178fc:	df000104 	addi	fp,sp,4
  817900:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  817904:	e0bfff17 	ldw	r2,-4(fp)
  817908:	10800a17 	ldw	r2,40(r2)
  81790c:	1007883a 	mov	r3,r2
  817910:	00800084 	movi	r2,2
  817914:	18800025 	stbio	r2,0(r3)
	return 0;
  817918:	0005883a 	mov	r2,zero
}
  81791c:	e037883a 	mov	sp,fp
  817920:	df000017 	ldw	fp,0(sp)
  817924:	dec00104 	addi	sp,sp,4
  817928:	f800283a 	ret

0081792c <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  81792c:	defffe04 	addi	sp,sp,-8
  817930:	df000115 	stw	fp,4(sp)
  817934:	df000104 	addi	fp,sp,4
  817938:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  81793c:	e0bfff17 	ldw	r2,-4(fp)
  817940:	10800a17 	ldw	r2,40(r2)
  817944:	10000025 	stbio	zero,0(r2)
	return 0;
  817948:	0005883a 	mov	r2,zero
}
  81794c:	e037883a 	mov	sp,fp
  817950:	df000017 	ldw	fp,0(sp)
  817954:	dec00104 	addi	sp,sp,4
  817958:	f800283a 	ret

0081795c <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  81795c:	defffd04 	addi	sp,sp,-12
  817960:	df000215 	stw	fp,8(sp)
  817964:	df000204 	addi	fp,sp,8
  817968:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  81796c:	e0bffe17 	ldw	r2,-8(fp)
  817970:	10800a17 	ldw	r2,40(r2)
  817974:	10800104 	addi	r2,r2,4
  817978:	10800037 	ldwio	r2,0(r2)
  81797c:	1080008c 	andi	r2,r2,2
  817980:	1005d07a 	srai	r2,r2,1
  817984:	1005003a 	cmpeq	r2,r2,zero
  817988:	1000071e 	bne	r2,zero,8179a8 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  81798c:	e0bffe17 	ldw	r2,-8(fp)
  817990:	10800a17 	ldw	r2,40(r2)
  817994:	10800104 	addi	r2,r2,4
  817998:	10800037 	ldwio	r2,0(r2)
  81799c:	1080004c 	andi	r2,r2,1
  8179a0:	e0bfff15 	stw	r2,-4(fp)
  8179a4:	00000206 	br	8179b0 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  8179a8:	00bfffc4 	movi	r2,-1
  8179ac:	e0bfff15 	stw	r2,-4(fp)
  8179b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8179b4:	e037883a 	mov	sp,fp
  8179b8:	df000017 	ldw	fp,0(sp)
  8179bc:	dec00104 	addi	sp,sp,4
  8179c0:	f800283a 	ret

008179c4 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  8179c4:	defffe04 	addi	sp,sp,-8
  8179c8:	df000115 	stw	fp,4(sp)
  8179cc:	df000104 	addi	fp,sp,4
  8179d0:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  8179d4:	e0bfff17 	ldw	r2,-4(fp)
  8179d8:	10800a17 	ldw	r2,40(r2)
  8179dc:	10800104 	addi	r2,r2,4
  8179e0:	10800037 	ldwio	r2,0(r2)
  8179e4:	1080008c 	andi	r2,r2,2
  8179e8:	1005d07a 	srai	r2,r2,1
}
  8179ec:	e037883a 	mov	sp,fp
  8179f0:	df000017 	ldw	fp,0(sp)
  8179f4:	dec00104 	addi	sp,sp,4
  8179f8:	f800283a 	ret

008179fc <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8179fc:	defff904 	addi	sp,sp,-28
  817a00:	dfc00615 	stw	ra,24(sp)
  817a04:	df000515 	stw	fp,20(sp)
  817a08:	df000504 	addi	fp,sp,20
  817a0c:	e13ffc15 	stw	r4,-16(fp)
  817a10:	e17ffd15 	stw	r5,-12(fp)
  817a14:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  817a18:	e0bffc17 	ldw	r2,-16(fp)
  817a1c:	10800b17 	ldw	r2,44(r2)
  817a20:	10800060 	cmpeqi	r2,r2,1
  817a24:	10000f1e 	bne	r2,zero,817a64 <alt_up_av_config_write_audio_cfg_register+0x68>
  817a28:	e0bffc17 	ldw	r2,-16(fp)
  817a2c:	10800b17 	ldw	r2,44(r2)
  817a30:	108000a0 	cmpeqi	r2,r2,2
  817a34:	10000b1e 	bne	r2,zero,817a64 <alt_up_av_config_write_audio_cfg_register+0x68>
  817a38:	e0bffc17 	ldw	r2,-16(fp)
  817a3c:	10800b17 	ldw	r2,44(r2)
  817a40:	108000e0 	cmpeqi	r2,r2,3
  817a44:	1000071e 	bne	r2,zero,817a64 <alt_up_av_config_write_audio_cfg_register+0x68>
  817a48:	e0bffc17 	ldw	r2,-16(fp)
  817a4c:	10800b17 	ldw	r2,44(r2)
  817a50:	10800120 	cmpeqi	r2,r2,4
  817a54:	1000031e 	bne	r2,zero,817a64 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  817a58:	00bffa84 	movi	r2,-22
  817a5c:	e0bfff15 	stw	r2,-4(fp)
  817a60:	00000b06 	br	817a90 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  817a64:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  817a68:	e0bffc17 	ldw	r2,-16(fp)
  817a6c:	10800a17 	ldw	r2,40(r2)
  817a70:	10800084 	addi	r2,r2,2
  817a74:	e0fffb17 	ldw	r3,-20(fp)
  817a78:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  817a7c:	e13ffc17 	ldw	r4,-16(fp)
  817a80:	e17ffd17 	ldw	r5,-12(fp)
  817a84:	e1bffe17 	ldw	r6,-8(fp)
  817a88:	08177cc0 	call	8177cc <alt_up_av_config_write_data>
  817a8c:	e0bfff15 	stw	r2,-4(fp)
  817a90:	e0bfff17 	ldw	r2,-4(fp)
}
  817a94:	e037883a 	mov	sp,fp
  817a98:	dfc00117 	ldw	ra,4(sp)
  817a9c:	df000017 	ldw	fp,0(sp)
  817aa0:	dec00204 	addi	sp,sp,8
  817aa4:	f800283a 	ret

00817aa8 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  817aa8:	defff904 	addi	sp,sp,-28
  817aac:	dfc00615 	stw	ra,24(sp)
  817ab0:	df000515 	stw	fp,20(sp)
  817ab4:	df000504 	addi	fp,sp,20
  817ab8:	e13ffb15 	stw	r4,-20(fp)
  817abc:	e17ffc15 	stw	r5,-16(fp)
  817ac0:	e1bffd15 	stw	r6,-12(fp)
  817ac4:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  817ac8:	e0bffb17 	ldw	r2,-20(fp)
  817acc:	10800b17 	ldw	r2,44(r2)
  817ad0:	108000a0 	cmpeqi	r2,r2,2
  817ad4:	10000b1e 	bne	r2,zero,817b04 <alt_up_av_config_read_video_cfg_register+0x5c>
  817ad8:	e0bffb17 	ldw	r2,-20(fp)
  817adc:	10800b17 	ldw	r2,44(r2)
  817ae0:	108000e0 	cmpeqi	r2,r2,3
  817ae4:	1000071e 	bne	r2,zero,817b04 <alt_up_av_config_read_video_cfg_register+0x5c>
  817ae8:	e0bffb17 	ldw	r2,-20(fp)
  817aec:	10800b17 	ldw	r2,44(r2)
  817af0:	10800120 	cmpeqi	r2,r2,4
  817af4:	1000031e 	bne	r2,zero,817b04 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  817af8:	00bffa84 	movi	r2,-22
  817afc:	e0bfff15 	stw	r2,-4(fp)
  817b00:	00002106 	br	817b88 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  817b04:	e0bffb17 	ldw	r2,-20(fp)
  817b08:	10800b17 	ldw	r2,44(r2)
  817b0c:	108000a0 	cmpeqi	r2,r2,2
  817b10:	1000041e 	bne	r2,zero,817b24 <alt_up_av_config_read_video_cfg_register+0x7c>
  817b14:	e0bffb17 	ldw	r2,-20(fp)
  817b18:	10800b17 	ldw	r2,44(r2)
  817b1c:	10800118 	cmpnei	r2,r2,4
  817b20:	1000061e 	bne	r2,zero,817b3c <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  817b24:	e0bffe17 	ldw	r2,-8(fp)
  817b28:	10800060 	cmpeqi	r2,r2,1
  817b2c:	10000c1e 	bne	r2,zero,817b60 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  817b30:	00bffa84 	movi	r2,-22
  817b34:	e0bfff15 	stw	r2,-4(fp)
  817b38:	00001306 	br	817b88 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  817b3c:	e0bffe17 	ldw	r2,-8(fp)
  817b40:	10800060 	cmpeqi	r2,r2,1
  817b44:	1000061e 	bne	r2,zero,817b60 <alt_up_av_config_read_video_cfg_register+0xb8>
  817b48:	e0bffe17 	ldw	r2,-8(fp)
  817b4c:	108000a0 	cmpeqi	r2,r2,2
  817b50:	1000031e 	bne	r2,zero,817b60 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  817b54:	00bffa84 	movi	r2,-22
  817b58:	e0bfff15 	stw	r2,-4(fp)
  817b5c:	00000a06 	br	817b88 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  817b60:	e0bffb17 	ldw	r2,-20(fp)
  817b64:	10800a17 	ldw	r2,40(r2)
  817b68:	10800084 	addi	r2,r2,2
  817b6c:	e0fffe17 	ldw	r3,-8(fp)
  817b70:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  817b74:	e13ffb17 	ldw	r4,-20(fp)
  817b78:	e17ffc17 	ldw	r5,-16(fp)
  817b7c:	e1bffd17 	ldw	r6,-12(fp)
  817b80:	08178300 	call	817830 <alt_up_av_config_read_data>
  817b84:	e0bfff15 	stw	r2,-4(fp)
  817b88:	e0bfff17 	ldw	r2,-4(fp)
}
  817b8c:	e037883a 	mov	sp,fp
  817b90:	dfc00117 	ldw	ra,4(sp)
  817b94:	df000017 	ldw	fp,0(sp)
  817b98:	dec00204 	addi	sp,sp,8
  817b9c:	f800283a 	ret

00817ba0 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  817ba0:	defff904 	addi	sp,sp,-28
  817ba4:	dfc00615 	stw	ra,24(sp)
  817ba8:	df000515 	stw	fp,20(sp)
  817bac:	df000504 	addi	fp,sp,20
  817bb0:	e13ffb15 	stw	r4,-20(fp)
  817bb4:	e17ffc15 	stw	r5,-16(fp)
  817bb8:	e1bffd15 	stw	r6,-12(fp)
  817bbc:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  817bc0:	e0bffb17 	ldw	r2,-20(fp)
  817bc4:	10800b17 	ldw	r2,44(r2)
  817bc8:	108000a0 	cmpeqi	r2,r2,2
  817bcc:	10000b1e 	bne	r2,zero,817bfc <alt_up_av_config_write_video_cfg_register+0x5c>
  817bd0:	e0bffb17 	ldw	r2,-20(fp)
  817bd4:	10800b17 	ldw	r2,44(r2)
  817bd8:	108000e0 	cmpeqi	r2,r2,3
  817bdc:	1000071e 	bne	r2,zero,817bfc <alt_up_av_config_write_video_cfg_register+0x5c>
  817be0:	e0bffb17 	ldw	r2,-20(fp)
  817be4:	10800b17 	ldw	r2,44(r2)
  817be8:	10800120 	cmpeqi	r2,r2,4
  817bec:	1000031e 	bne	r2,zero,817bfc <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  817bf0:	00bffa84 	movi	r2,-22
  817bf4:	e0bfff15 	stw	r2,-4(fp)
  817bf8:	00002106 	br	817c80 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  817bfc:	e0bffb17 	ldw	r2,-20(fp)
  817c00:	10800b17 	ldw	r2,44(r2)
  817c04:	108000a0 	cmpeqi	r2,r2,2
  817c08:	1000041e 	bne	r2,zero,817c1c <alt_up_av_config_write_video_cfg_register+0x7c>
  817c0c:	e0bffb17 	ldw	r2,-20(fp)
  817c10:	10800b17 	ldw	r2,44(r2)
  817c14:	10800118 	cmpnei	r2,r2,4
  817c18:	1000061e 	bne	r2,zero,817c34 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  817c1c:	e0bffe17 	ldw	r2,-8(fp)
  817c20:	10800060 	cmpeqi	r2,r2,1
  817c24:	10000c1e 	bne	r2,zero,817c58 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  817c28:	00bffa84 	movi	r2,-22
  817c2c:	e0bfff15 	stw	r2,-4(fp)
  817c30:	00001306 	br	817c80 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  817c34:	e0bffe17 	ldw	r2,-8(fp)
  817c38:	10800060 	cmpeqi	r2,r2,1
  817c3c:	1000061e 	bne	r2,zero,817c58 <alt_up_av_config_write_video_cfg_register+0xb8>
  817c40:	e0bffe17 	ldw	r2,-8(fp)
  817c44:	108000a0 	cmpeqi	r2,r2,2
  817c48:	1000031e 	bne	r2,zero,817c58 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  817c4c:	00bffa84 	movi	r2,-22
  817c50:	e0bfff15 	stw	r2,-4(fp)
  817c54:	00000a06 	br	817c80 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  817c58:	e0bffb17 	ldw	r2,-20(fp)
  817c5c:	10800a17 	ldw	r2,40(r2)
  817c60:	10800084 	addi	r2,r2,2
  817c64:	e0fffe17 	ldw	r3,-8(fp)
  817c68:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  817c6c:	e13ffb17 	ldw	r4,-20(fp)
  817c70:	e17ffc17 	ldw	r5,-16(fp)
  817c74:	e1bffd17 	ldw	r6,-12(fp)
  817c78:	08177cc0 	call	8177cc <alt_up_av_config_write_data>
  817c7c:	e0bfff15 	stw	r2,-4(fp)
  817c80:	e0bfff17 	ldw	r2,-4(fp)
}
  817c84:	e037883a 	mov	sp,fp
  817c88:	dfc00117 	ldw	ra,4(sp)
  817c8c:	df000017 	ldw	fp,0(sp)
  817c90:	dec00204 	addi	sp,sp,8
  817c94:	f800283a 	ret

00817c98 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  817c98:	defffa04 	addi	sp,sp,-24
  817c9c:	dfc00515 	stw	ra,20(sp)
  817ca0:	df000415 	stw	fp,16(sp)
  817ca4:	df000404 	addi	fp,sp,16
  817ca8:	e13ffc15 	stw	r4,-16(fp)
  817cac:	e17ffd15 	stw	r5,-12(fp)
  817cb0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  817cb4:	e0bffc17 	ldw	r2,-16(fp)
  817cb8:	10800b17 	ldw	r2,44(r2)
  817cbc:	10800220 	cmpeqi	r2,r2,8
  817cc0:	1000031e 	bne	r2,zero,817cd0 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  817cc4:	00bffa84 	movi	r2,-22
  817cc8:	e0bfff15 	stw	r2,-4(fp)
  817ccc:	00000506 	br	817ce4 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  817cd0:	e13ffc17 	ldw	r4,-16(fp)
  817cd4:	e17ffd17 	ldw	r5,-12(fp)
  817cd8:	e1bffe17 	ldw	r6,-8(fp)
  817cdc:	08178300 	call	817830 <alt_up_av_config_read_data>
  817ce0:	e0bfff15 	stw	r2,-4(fp)
  817ce4:	e0bfff17 	ldw	r2,-4(fp)
}
  817ce8:	e037883a 	mov	sp,fp
  817cec:	dfc00117 	ldw	ra,4(sp)
  817cf0:	df000017 	ldw	fp,0(sp)
  817cf4:	dec00204 	addi	sp,sp,8
  817cf8:	f800283a 	ret

00817cfc <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  817cfc:	defffa04 	addi	sp,sp,-24
  817d00:	dfc00515 	stw	ra,20(sp)
  817d04:	df000415 	stw	fp,16(sp)
  817d08:	df000404 	addi	fp,sp,16
  817d0c:	e13ffc15 	stw	r4,-16(fp)
  817d10:	e17ffd15 	stw	r5,-12(fp)
  817d14:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  817d18:	e0bffc17 	ldw	r2,-16(fp)
  817d1c:	10800b17 	ldw	r2,44(r2)
  817d20:	10800220 	cmpeqi	r2,r2,8
  817d24:	1000031e 	bne	r2,zero,817d34 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  817d28:	00bffa84 	movi	r2,-22
  817d2c:	e0bfff15 	stw	r2,-4(fp)
  817d30:	00000506 	br	817d48 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  817d34:	e13ffc17 	ldw	r4,-16(fp)
  817d38:	e17ffd17 	ldw	r5,-12(fp)
  817d3c:	e1bffe17 	ldw	r6,-8(fp)
  817d40:	08177cc0 	call	8177cc <alt_up_av_config_write_data>
  817d44:	e0bfff15 	stw	r2,-4(fp)
  817d48:	e0bfff17 	ldw	r2,-4(fp)
}
  817d4c:	e037883a 	mov	sp,fp
  817d50:	dfc00117 	ldw	ra,4(sp)
  817d54:	df000017 	ldw	fp,0(sp)
  817d58:	dec00204 	addi	sp,sp,8
  817d5c:	f800283a 	ret

00817d60 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  817d60:	defffa04 	addi	sp,sp,-24
  817d64:	dfc00515 	stw	ra,20(sp)
  817d68:	df000415 	stw	fp,16(sp)
  817d6c:	df000404 	addi	fp,sp,16
  817d70:	e13ffc15 	stw	r4,-16(fp)
  817d74:	e17ffd15 	stw	r5,-12(fp)
  817d78:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  817d7c:	e0bffc17 	ldw	r2,-16(fp)
  817d80:	10800b17 	ldw	r2,44(r2)
  817d84:	10800260 	cmpeqi	r2,r2,9
  817d88:	1000031e 	bne	r2,zero,817d98 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  817d8c:	00bffa84 	movi	r2,-22
  817d90:	e0bfff15 	stw	r2,-4(fp)
  817d94:	00000506 	br	817dac <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  817d98:	e13ffc17 	ldw	r4,-16(fp)
  817d9c:	e17ffd17 	ldw	r5,-12(fp)
  817da0:	e1bffe17 	ldw	r6,-8(fp)
  817da4:	08178300 	call	817830 <alt_up_av_config_read_data>
  817da8:	e0bfff15 	stw	r2,-4(fp)
  817dac:	e0bfff17 	ldw	r2,-4(fp)
}
  817db0:	e037883a 	mov	sp,fp
  817db4:	dfc00117 	ldw	ra,4(sp)
  817db8:	df000017 	ldw	fp,0(sp)
  817dbc:	dec00204 	addi	sp,sp,8
  817dc0:	f800283a 	ret

00817dc4 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  817dc4:	defffa04 	addi	sp,sp,-24
  817dc8:	dfc00515 	stw	ra,20(sp)
  817dcc:	df000415 	stw	fp,16(sp)
  817dd0:	df000404 	addi	fp,sp,16
  817dd4:	e13ffc15 	stw	r4,-16(fp)
  817dd8:	e17ffd15 	stw	r5,-12(fp)
  817ddc:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  817de0:	e0bffc17 	ldw	r2,-16(fp)
  817de4:	10800b17 	ldw	r2,44(r2)
  817de8:	10800260 	cmpeqi	r2,r2,9
  817dec:	1000031e 	bne	r2,zero,817dfc <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  817df0:	00bffa84 	movi	r2,-22
  817df4:	e0bfff15 	stw	r2,-4(fp)
  817df8:	00000506 	br	817e10 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  817dfc:	e13ffc17 	ldw	r4,-16(fp)
  817e00:	e17ffd17 	ldw	r5,-12(fp)
  817e04:	e1bffe17 	ldw	r6,-8(fp)
  817e08:	08177cc0 	call	8177cc <alt_up_av_config_write_data>
  817e0c:	e0bfff15 	stw	r2,-4(fp)
  817e10:	e0bfff17 	ldw	r2,-4(fp)
}
  817e14:	e037883a 	mov	sp,fp
  817e18:	dfc00117 	ldw	ra,4(sp)
  817e1c:	df000017 	ldw	fp,0(sp)
  817e20:	dec00204 	addi	sp,sp,8
  817e24:	f800283a 	ret

00817e28 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  817e28:	defffa04 	addi	sp,sp,-24
  817e2c:	dfc00515 	stw	ra,20(sp)
  817e30:	df000415 	stw	fp,16(sp)
  817e34:	df000404 	addi	fp,sp,16
  817e38:	e13ffc15 	stw	r4,-16(fp)
  817e3c:	e17ffd15 	stw	r5,-12(fp)
  817e40:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  817e44:	e0bffc17 	ldw	r2,-16(fp)
  817e48:	10800b17 	ldw	r2,44(r2)
  817e4c:	108002a0 	cmpeqi	r2,r2,10
  817e50:	1000031e 	bne	r2,zero,817e60 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  817e54:	00bffa84 	movi	r2,-22
  817e58:	e0bfff15 	stw	r2,-4(fp)
  817e5c:	00000506 	br	817e74 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  817e60:	e13ffc17 	ldw	r4,-16(fp)
  817e64:	e17ffd17 	ldw	r5,-12(fp)
  817e68:	e1bffe17 	ldw	r6,-8(fp)
  817e6c:	08178300 	call	817830 <alt_up_av_config_read_data>
  817e70:	e0bfff15 	stw	r2,-4(fp)
  817e74:	e0bfff17 	ldw	r2,-4(fp)
}
  817e78:	e037883a 	mov	sp,fp
  817e7c:	dfc00117 	ldw	ra,4(sp)
  817e80:	df000017 	ldw	fp,0(sp)
  817e84:	dec00204 	addi	sp,sp,8
  817e88:	f800283a 	ret

00817e8c <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  817e8c:	defffa04 	addi	sp,sp,-24
  817e90:	dfc00515 	stw	ra,20(sp)
  817e94:	df000415 	stw	fp,16(sp)
  817e98:	df000404 	addi	fp,sp,16
  817e9c:	e13ffc15 	stw	r4,-16(fp)
  817ea0:	e17ffd15 	stw	r5,-12(fp)
  817ea4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  817ea8:	e0bffc17 	ldw	r2,-16(fp)
  817eac:	10800b17 	ldw	r2,44(r2)
  817eb0:	108002a0 	cmpeqi	r2,r2,10
  817eb4:	1000031e 	bne	r2,zero,817ec4 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  817eb8:	00bffa84 	movi	r2,-22
  817ebc:	e0bfff15 	stw	r2,-4(fp)
  817ec0:	00000506 	br	817ed8 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  817ec4:	e13ffc17 	ldw	r4,-16(fp)
  817ec8:	e17ffd17 	ldw	r5,-12(fp)
  817ecc:	e1bffe17 	ldw	r6,-8(fp)
  817ed0:	08177cc0 	call	8177cc <alt_up_av_config_write_data>
  817ed4:	e0bfff15 	stw	r2,-4(fp)
  817ed8:	e0bfff17 	ldw	r2,-4(fp)
}
  817edc:	e037883a 	mov	sp,fp
  817ee0:	dfc00117 	ldw	ra,4(sp)
  817ee4:	df000017 	ldw	fp,0(sp)
  817ee8:	dec00204 	addi	sp,sp,8
  817eec:	f800283a 	ret

00817ef0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  817ef0:	defffc04 	addi	sp,sp,-16
  817ef4:	df000315 	stw	fp,12(sp)
  817ef8:	df000304 	addi	fp,sp,12
  817efc:	e13ffe15 	stw	r4,-8(fp)
  817f00:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  817f04:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  817f08:	e0bfff17 	ldw	r2,-4(fp)
  817f0c:	1004c03a 	cmpne	r2,r2,zero
  817f10:	1000061e 	bne	r2,zero,817f2c <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  817f14:	e0bffe17 	ldw	r2,-8(fp)
  817f18:	1007883a 	mov	r3,r2
  817f1c:	e0bffd03 	ldbu	r2,-12(fp)
  817f20:	10c4b03a 	or	r2,r2,r3
  817f24:	e0bffd05 	stb	r2,-12(fp)
  817f28:	00000806 	br	817f4c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  817f2c:	e0bffe17 	ldw	r2,-8(fp)
  817f30:	1007883a 	mov	r3,r2
  817f34:	e0bffd03 	ldbu	r2,-12(fp)
  817f38:	10c4b03a 	or	r2,r2,r3
  817f3c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  817f40:	e0bffd03 	ldbu	r2,-12(fp)
  817f44:	10801014 	ori	r2,r2,64
  817f48:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  817f4c:	e0fffd03 	ldbu	r3,-12(fp)
  817f50:	00bfe004 	movi	r2,-128
  817f54:	1884b03a 	or	r2,r3,r2
  817f58:	10803fcc 	andi	r2,r2,255
}
  817f5c:	e037883a 	mov	sp,fp
  817f60:	df000017 	ldw	fp,0(sp)
  817f64:	dec00104 	addi	sp,sp,4
  817f68:	f800283a 	ret

00817f6c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  817f6c:	defffd04 	addi	sp,sp,-12
  817f70:	df000215 	stw	fp,8(sp)
  817f74:	df000204 	addi	fp,sp,8
  817f78:	e13ffe15 	stw	r4,-8(fp)
  817f7c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  817f80:	e0bffe17 	ldw	r2,-8(fp)
  817f84:	10800a17 	ldw	r2,40(r2)
  817f88:	e0ffff03 	ldbu	r3,-4(fp)
  817f8c:	10c00025 	stbio	r3,0(r2)
}
  817f90:	e037883a 	mov	sp,fp
  817f94:	df000017 	ldw	fp,0(sp)
  817f98:	dec00104 	addi	sp,sp,4
  817f9c:	f800283a 	ret

00817fa0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  817fa0:	defffe04 	addi	sp,sp,-8
  817fa4:	df000115 	stw	fp,4(sp)
  817fa8:	df000104 	addi	fp,sp,4
  817fac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  817fb0:	e0bfff17 	ldw	r2,-4(fp)
  817fb4:	10800a17 	ldw	r2,40(r2)
  817fb8:	1007883a 	mov	r3,r2
  817fbc:	00800044 	movi	r2,1
  817fc0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  817fc4:	e037883a 	mov	sp,fp
  817fc8:	df000017 	ldw	fp,0(sp)
  817fcc:	dec00104 	addi	sp,sp,4
  817fd0:	f800283a 	ret

00817fd4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  817fd4:	defffc04 	addi	sp,sp,-16
  817fd8:	dfc00315 	stw	ra,12(sp)
  817fdc:	df000215 	stw	fp,8(sp)
  817fe0:	df000204 	addi	fp,sp,8
  817fe4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  817fe8:	e13fff17 	ldw	r4,-4(fp)
  817fec:	014020b4 	movhi	r5,130
  817ff0:	294a7104 	addi	r5,r5,10692
  817ff4:	081ef080 	call	81ef08 <alt_find_dev>
  817ff8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  817ffc:	e0bffe17 	ldw	r2,-8(fp)
}
  818000:	e037883a 	mov	sp,fp
  818004:	dfc00117 	ldw	ra,4(sp)
  818008:	df000017 	ldw	fp,0(sp)
  81800c:	dec00204 	addi	sp,sp,8
  818010:	f800283a 	ret

00818014 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  818014:	defffb04 	addi	sp,sp,-20
  818018:	df000415 	stw	fp,16(sp)
  81801c:	df000404 	addi	fp,sp,16
  818020:	e13ffd15 	stw	r4,-12(fp)
  818024:	e17ffe15 	stw	r5,-8(fp)
  818028:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  81802c:	e03ffc15 	stw	zero,-16(fp)
  818030:	00000f06 	br	818070 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  818034:	e0bffd17 	ldw	r2,-12(fp)
  818038:	10800a17 	ldw	r2,40(r2)
  81803c:	11000044 	addi	r4,r2,1
  818040:	e0fffc17 	ldw	r3,-16(fp)
  818044:	e0bffe17 	ldw	r2,-8(fp)
  818048:	1885883a 	add	r2,r3,r2
  81804c:	10800003 	ldbu	r2,0(r2)
  818050:	10c03fcc 	andi	r3,r2,255
  818054:	18c0201c 	xori	r3,r3,128
  818058:	18ffe004 	addi	r3,r3,-128
  81805c:	2005883a 	mov	r2,r4
  818060:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  818064:	e0bffc17 	ldw	r2,-16(fp)
  818068:	10800044 	addi	r2,r2,1
  81806c:	e0bffc15 	stw	r2,-16(fp)
  818070:	e0fffc17 	ldw	r3,-16(fp)
  818074:	e0bfff17 	ldw	r2,-4(fp)
  818078:	18bfee36 	bltu	r3,r2,818034 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  81807c:	e037883a 	mov	sp,fp
  818080:	df000017 	ldw	fp,0(sp)
  818084:	dec00104 	addi	sp,sp,4
  818088:	f800283a 	ret

0081808c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  81808c:	defffd04 	addi	sp,sp,-12
  818090:	df000215 	stw	fp,8(sp)
  818094:	df000204 	addi	fp,sp,8
  818098:	e13ffe15 	stw	r4,-8(fp)
  81809c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  8180a0:	00000d06 	br	8180d8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  8180a4:	e0bffe17 	ldw	r2,-8(fp)
  8180a8:	10800a17 	ldw	r2,40(r2)
  8180ac:	11000044 	addi	r4,r2,1
  8180b0:	e0bfff17 	ldw	r2,-4(fp)
  8180b4:	10800003 	ldbu	r2,0(r2)
  8180b8:	10c03fcc 	andi	r3,r2,255
  8180bc:	18c0201c 	xori	r3,r3,128
  8180c0:	18ffe004 	addi	r3,r3,-128
  8180c4:	2005883a 	mov	r2,r4
  8180c8:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8180cc:	e0bfff17 	ldw	r2,-4(fp)
  8180d0:	10800044 	addi	r2,r2,1
  8180d4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8180d8:	e0bfff17 	ldw	r2,-4(fp)
  8180dc:	10800003 	ldbu	r2,0(r2)
  8180e0:	10803fcc 	andi	r2,r2,255
  8180e4:	1080201c 	xori	r2,r2,128
  8180e8:	10bfe004 	addi	r2,r2,-128
  8180ec:	1004c03a 	cmpne	r2,r2,zero
  8180f0:	103fec1e 	bne	r2,zero,8180a4 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8180f4:	e037883a 	mov	sp,fp
  8180f8:	df000017 	ldw	fp,0(sp)
  8180fc:	dec00104 	addi	sp,sp,4
  818100:	f800283a 	ret

00818104 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  818104:	defffb04 	addi	sp,sp,-20
  818108:	dfc00415 	stw	ra,16(sp)
  81810c:	df000315 	stw	fp,12(sp)
  818110:	df000304 	addi	fp,sp,12
  818114:	e13ffd15 	stw	r4,-12(fp)
  818118:	e17ffe15 	stw	r5,-8(fp)
  81811c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  818120:	e0bffd17 	ldw	r2,-12(fp)
  818124:	10800017 	ldw	r2,0(r2)
  818128:	1009883a 	mov	r4,r2
  81812c:	e1bfff17 	ldw	r6,-4(fp)
  818130:	e17ffe17 	ldw	r5,-8(fp)
  818134:	08180140 	call	818014 <alt_up_character_lcd_write>
	return 0;
  818138:	0005883a 	mov	r2,zero
}
  81813c:	e037883a 	mov	sp,fp
  818140:	dfc00117 	ldw	ra,4(sp)
  818144:	df000017 	ldw	fp,0(sp)
  818148:	dec00204 	addi	sp,sp,8
  81814c:	f800283a 	ret

00818150 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  818150:	defff904 	addi	sp,sp,-28
  818154:	dfc00615 	stw	ra,24(sp)
  818158:	df000515 	stw	fp,20(sp)
  81815c:	df000504 	addi	fp,sp,20
  818160:	e13ffc15 	stw	r4,-16(fp)
  818164:	e17ffd15 	stw	r5,-12(fp)
  818168:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  81816c:	e0bffd17 	ldw	r2,-12(fp)
  818170:	10800a28 	cmpgeui	r2,r2,40
  818174:	1000031e 	bne	r2,zero,818184 <alt_up_character_lcd_set_cursor_pos+0x34>
  818178:	e0bffe17 	ldw	r2,-8(fp)
  81817c:	108000b0 	cmpltui	r2,r2,2
  818180:	1000031e 	bne	r2,zero,818190 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  818184:	00bfffc4 	movi	r2,-1
  818188:	e0bfff15 	stw	r2,-4(fp)
  81818c:	00000806 	br	8181b0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  818190:	e13ffd17 	ldw	r4,-12(fp)
  818194:	e17ffe17 	ldw	r5,-8(fp)
  818198:	0817ef00 	call	817ef0 <get_DDRAM_addr>
  81819c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  8181a0:	e17ffb03 	ldbu	r5,-20(fp)
  8181a4:	e13ffc17 	ldw	r4,-16(fp)
  8181a8:	0817f6c0 	call	817f6c <alt_up_character_lcd_send_cmd>
	return 0;
  8181ac:	e03fff15 	stw	zero,-4(fp)
  8181b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8181b4:	e037883a 	mov	sp,fp
  8181b8:	dfc00117 	ldw	ra,4(sp)
  8181bc:	df000017 	ldw	fp,0(sp)
  8181c0:	dec00204 	addi	sp,sp,8
  8181c4:	f800283a 	ret

008181c8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8181c8:	defff904 	addi	sp,sp,-28
  8181cc:	dfc00615 	stw	ra,24(sp)
  8181d0:	df000515 	stw	fp,20(sp)
  8181d4:	df000504 	addi	fp,sp,20
  8181d8:	e13ffc15 	stw	r4,-16(fp)
  8181dc:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8181e0:	e0bffd17 	ldw	r2,-12(fp)
  8181e4:	1005003a 	cmpeq	r2,r2,zero
  8181e8:	10001e1e 	bne	r2,zero,818264 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  8181ec:	e0bffd17 	ldw	r2,-12(fp)
  8181f0:	10800050 	cmplti	r2,r2,1
  8181f4:	1000031e 	bne	r2,zero,818204 <alt_up_character_lcd_shift_cursor+0x3c>
  8181f8:	00800504 	movi	r2,20
  8181fc:	e0bfff05 	stb	r2,-4(fp)
  818200:	00000206 	br	81820c <alt_up_character_lcd_shift_cursor+0x44>
  818204:	00c00404 	movi	r3,16
  818208:	e0ffff05 	stb	r3,-4(fp)
  81820c:	e0bfff03 	ldbu	r2,-4(fp)
  818210:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  818214:	e0fffd17 	ldw	r3,-12(fp)
  818218:	e0fffe15 	stw	r3,-8(fp)
  81821c:	e0fffe17 	ldw	r3,-8(fp)
  818220:	1804403a 	cmpge	r2,r3,zero
  818224:	1000031e 	bne	r2,zero,818234 <alt_up_character_lcd_shift_cursor+0x6c>
  818228:	e0bffe17 	ldw	r2,-8(fp)
  81822c:	0085c83a 	sub	r2,zero,r2
  818230:	e0bffe15 	stw	r2,-8(fp)
  818234:	e0fffe17 	ldw	r3,-8(fp)
  818238:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  81823c:	00000306 	br	81824c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  818240:	e17ffb43 	ldbu	r5,-19(fp)
  818244:	e13ffc17 	ldw	r4,-16(fp)
  818248:	0817f6c0 	call	817f6c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  81824c:	e0bffb03 	ldbu	r2,-20(fp)
  818250:	10bfffc4 	addi	r2,r2,-1
  818254:	e0bffb05 	stb	r2,-20(fp)
  818258:	e0bffb03 	ldbu	r2,-20(fp)
  81825c:	10803fd8 	cmpnei	r2,r2,255
  818260:	103ff71e 	bne	r2,zero,818240 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  818264:	e037883a 	mov	sp,fp
  818268:	dfc00117 	ldw	ra,4(sp)
  81826c:	df000017 	ldw	fp,0(sp)
  818270:	dec00204 	addi	sp,sp,8
  818274:	f800283a 	ret

00818278 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  818278:	defff904 	addi	sp,sp,-28
  81827c:	dfc00615 	stw	ra,24(sp)
  818280:	df000515 	stw	fp,20(sp)
  818284:	df000504 	addi	fp,sp,20
  818288:	e13ffc15 	stw	r4,-16(fp)
  81828c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  818290:	e0bffd17 	ldw	r2,-12(fp)
  818294:	1005003a 	cmpeq	r2,r2,zero
  818298:	10001e1e 	bne	r2,zero,818314 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  81829c:	e0bffd17 	ldw	r2,-12(fp)
  8182a0:	10800050 	cmplti	r2,r2,1
  8182a4:	1000031e 	bne	r2,zero,8182b4 <alt_up_character_lcd_shift_display+0x3c>
  8182a8:	00800704 	movi	r2,28
  8182ac:	e0bfff05 	stb	r2,-4(fp)
  8182b0:	00000206 	br	8182bc <alt_up_character_lcd_shift_display+0x44>
  8182b4:	00c00604 	movi	r3,24
  8182b8:	e0ffff05 	stb	r3,-4(fp)
  8182bc:	e0bfff03 	ldbu	r2,-4(fp)
  8182c0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8182c4:	e0fffd17 	ldw	r3,-12(fp)
  8182c8:	e0fffe15 	stw	r3,-8(fp)
  8182cc:	e0fffe17 	ldw	r3,-8(fp)
  8182d0:	1804403a 	cmpge	r2,r3,zero
  8182d4:	1000031e 	bne	r2,zero,8182e4 <alt_up_character_lcd_shift_display+0x6c>
  8182d8:	e0bffe17 	ldw	r2,-8(fp)
  8182dc:	0085c83a 	sub	r2,zero,r2
  8182e0:	e0bffe15 	stw	r2,-8(fp)
  8182e4:	e0fffe17 	ldw	r3,-8(fp)
  8182e8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8182ec:	00000306 	br	8182fc <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8182f0:	e17ffb43 	ldbu	r5,-19(fp)
  8182f4:	e13ffc17 	ldw	r4,-16(fp)
  8182f8:	0817f6c0 	call	817f6c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8182fc:	e0bffb03 	ldbu	r2,-20(fp)
  818300:	10bfffc4 	addi	r2,r2,-1
  818304:	e0bffb05 	stb	r2,-20(fp)
  818308:	e0bffb03 	ldbu	r2,-20(fp)
  81830c:	10803fd8 	cmpnei	r2,r2,255
  818310:	103ff71e 	bne	r2,zero,8182f0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  818314:	e037883a 	mov	sp,fp
  818318:	dfc00117 	ldw	ra,4(sp)
  81831c:	df000017 	ldw	fp,0(sp)
  818320:	dec00204 	addi	sp,sp,8
  818324:	f800283a 	ret

00818328 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  818328:	defff904 	addi	sp,sp,-28
  81832c:	dfc00615 	stw	ra,24(sp)
  818330:	df000515 	stw	fp,20(sp)
  818334:	df000504 	addi	fp,sp,20
  818338:	e13ffc15 	stw	r4,-16(fp)
  81833c:	e17ffd15 	stw	r5,-12(fp)
  818340:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  818344:	e0bffd17 	ldw	r2,-12(fp)
  818348:	10800a28 	cmpgeui	r2,r2,40
  81834c:	1000031e 	bne	r2,zero,81835c <alt_up_character_lcd_erase_pos+0x34>
  818350:	e0bffe17 	ldw	r2,-8(fp)
  818354:	108000b0 	cmpltui	r2,r2,2
  818358:	1000031e 	bne	r2,zero,818368 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  81835c:	00bfffc4 	movi	r2,-1
  818360:	e0bfff15 	stw	r2,-4(fp)
  818364:	00000e06 	br	8183a0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  818368:	e13ffd17 	ldw	r4,-12(fp)
  81836c:	e17ffe17 	ldw	r5,-8(fp)
  818370:	0817ef00 	call	817ef0 <get_DDRAM_addr>
  818374:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  818378:	e17ffb03 	ldbu	r5,-20(fp)
  81837c:	e13ffc17 	ldw	r4,-16(fp)
  818380:	0817f6c0 	call	817f6c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  818384:	e0bffc17 	ldw	r2,-16(fp)
  818388:	10800a17 	ldw	r2,40(r2)
  81838c:	10800044 	addi	r2,r2,1
  818390:	1007883a 	mov	r3,r2
  818394:	00800084 	movi	r2,2
  818398:	18800025 	stbio	r2,0(r3)
	return 0;
  81839c:	e03fff15 	stw	zero,-4(fp)
  8183a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8183a4:	e037883a 	mov	sp,fp
  8183a8:	dfc00117 	ldw	ra,4(sp)
  8183ac:	df000017 	ldw	fp,0(sp)
  8183b0:	dec00204 	addi	sp,sp,8
  8183b4:	f800283a 	ret

008183b8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8183b8:	defffd04 	addi	sp,sp,-12
  8183bc:	dfc00215 	stw	ra,8(sp)
  8183c0:	df000115 	stw	fp,4(sp)
  8183c4:	df000104 	addi	fp,sp,4
  8183c8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8183cc:	e13fff17 	ldw	r4,-4(fp)
  8183d0:	01400304 	movi	r5,12
  8183d4:	0817f6c0 	call	817f6c <alt_up_character_lcd_send_cmd>
}
  8183d8:	e037883a 	mov	sp,fp
  8183dc:	dfc00117 	ldw	ra,4(sp)
  8183e0:	df000017 	ldw	fp,0(sp)
  8183e4:	dec00204 	addi	sp,sp,8
  8183e8:	f800283a 	ret

008183ec <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8183ec:	defffd04 	addi	sp,sp,-12
  8183f0:	dfc00215 	stw	ra,8(sp)
  8183f4:	df000115 	stw	fp,4(sp)
  8183f8:	df000104 	addi	fp,sp,4
  8183fc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  818400:	e13fff17 	ldw	r4,-4(fp)
  818404:	014003c4 	movi	r5,15
  818408:	0817f6c0 	call	817f6c <alt_up_character_lcd_send_cmd>
}
  81840c:	e037883a 	mov	sp,fp
  818410:	dfc00117 	ldw	ra,4(sp)
  818414:	df000017 	ldw	fp,0(sp)
  818418:	dec00204 	addi	sp,sp,8
  81841c:	f800283a 	ret

00818420 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
  818420:	defffd04 	addi	sp,sp,-12
  818424:	df000215 	stw	fp,8(sp)
  818428:	df000204 	addi	fp,sp,8
  81842c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
  818430:	e0bfff17 	ldw	r2,-4(fp)
  818434:	1080400c 	andi	r2,r2,256
  818438:	1004d23a 	srli	r2,r2,8
  81843c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
  818440:	e0bffe03 	ldbu	r2,-8(fp)
}
  818444:	e037883a 	mov	sp,fp
  818448:	df000017 	ldw	fp,0(sp)
  81844c:	dec00104 	addi	sp,sp,4
  818450:	f800283a 	ret

00818454 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
  818454:	defffd04 	addi	sp,sp,-12
  818458:	df000215 	stw	fp,8(sp)
  81845c:	df000204 	addi	fp,sp,8
  818460:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
  818464:	e0bfff17 	ldw	r2,-4(fp)
  818468:	1080004c 	andi	r2,r2,1
  81846c:	e0bffe05 	stb	r2,-8(fp)
	return re;
  818470:	e0bffe03 	ldbu	r2,-8(fp)
}
  818474:	e037883a 	mov	sp,fp
  818478:	df000017 	ldw	fp,0(sp)
  81847c:	dec00104 	addi	sp,sp,4
  818480:	f800283a 	ret

00818484 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
  818484:	defffd04 	addi	sp,sp,-12
  818488:	df000215 	stw	fp,8(sp)
  81848c:	df000204 	addi	fp,sp,8
  818490:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
  818494:	e0bfff17 	ldw	r2,-4(fp)
  818498:	1081000c 	andi	r2,r2,1024
  81849c:	1004d2ba 	srli	r2,r2,10
  8184a0:	e0bffe05 	stb	r2,-8(fp)
	return re;
  8184a4:	e0bffe03 	ldbu	r2,-8(fp)
}
  8184a8:	e037883a 	mov	sp,fp
  8184ac:	df000017 	ldw	fp,0(sp)
  8184b0:	dec00104 	addi	sp,sp,4
  8184b4:	f800283a 	ret

008184b8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
  8184b8:	defffd04 	addi	sp,sp,-12
  8184bc:	df000215 	stw	fp,8(sp)
  8184c0:	df000204 	addi	fp,sp,8
  8184c4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
  8184c8:	e0bfff17 	ldw	r2,-4(fp)
  8184cc:	10bfffec 	andhi	r2,r2,65535
  8184d0:	1004d43a 	srli	r2,r2,16
  8184d4:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
  8184d8:	e0bffe0b 	ldhu	r2,-8(fp)
}
  8184dc:	e037883a 	mov	sp,fp
  8184e0:	df000017 	ldw	fp,0(sp)
  8184e4:	dec00104 	addi	sp,sp,4
  8184e8:	f800283a 	ret

008184ec <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
  8184ec:	defffd04 	addi	sp,sp,-12
  8184f0:	df000215 	stw	fp,8(sp)
  8184f4:	df000204 	addi	fp,sp,8
  8184f8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
  8184fc:	e0bfff17 	ldw	r2,-4(fp)
  818500:	10a0000c 	andi	r2,r2,32768
  818504:	1004d3fa 	srli	r2,r2,15
  818508:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
  81850c:	e0bffe03 	ldbu	r2,-8(fp)
}
  818510:	e037883a 	mov	sp,fp
  818514:	df000017 	ldw	fp,0(sp)
  818518:	dec00104 	addi	sp,sp,4
  81851c:	f800283a 	ret

00818520 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
  818520:	defffd04 	addi	sp,sp,-12
  818524:	df000215 	stw	fp,8(sp)
  818528:	df000204 	addi	fp,sp,8
  81852c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
  818530:	e0bfff17 	ldw	r2,-4(fp)
  818534:	e0bffe05 	stb	r2,-8(fp)
	return data;
  818538:	e0bffe03 	ldbu	r2,-8(fp)
}
  81853c:	e037883a 	mov	sp,fp
  818540:	df000017 	ldw	fp,0(sp)
  818544:	dec00104 	addi	sp,sp,4
  818548:	f800283a 	ret

0081854c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
  81854c:	defffb04 	addi	sp,sp,-20
  818550:	dfc00415 	stw	ra,16(sp)
  818554:	df000315 	stw	fp,12(sp)
  818558:	df000304 	addi	fp,sp,12
  81855c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
  818560:	e13fff17 	ldw	r4,-4(fp)
  818564:	01403fc4 	movi	r5,255
  818568:	08187ac0 	call	8187ac <alt_up_ps2_write_data_byte_with_ack>
  81856c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
  818570:	e0bffd17 	ldw	r2,-12(fp)
  818574:	1004c03a 	cmpne	r2,r2,zero
  818578:	1000221e 	bne	r2,zero,818604 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
  81857c:	e17ffe04 	addi	r5,fp,-8
  818580:	e13fff17 	ldw	r4,-4(fp)
  818584:	08188180 	call	818818 <alt_up_ps2_read_data_byte_timeout>
  818588:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
  81858c:	e0bffd17 	ldw	r2,-12(fp)
  818590:	1004c03a 	cmpne	r2,r2,zero
  818594:	10001b1e 	bne	r2,zero,818604 <alt_up_ps2_init+0xb8>
  818598:	e0bffe03 	ldbu	r2,-8(fp)
  81859c:	10803fcc 	andi	r2,r2,255
  8185a0:	10802a98 	cmpnei	r2,r2,170
  8185a4:	1000171e 	bne	r2,zero,818604 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
  8185a8:	e17ffe04 	addi	r5,fp,-8
  8185ac:	e13fff17 	ldw	r4,-4(fp)
  8185b0:	08188180 	call	818818 <alt_up_ps2_read_data_byte_timeout>
  8185b4:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
  8185b8:	e0bffd17 	ldw	r2,-12(fp)
  8185bc:	10bfe318 	cmpnei	r2,r2,-116
  8185c0:	1000041e 	bne	r2,zero,8185d4 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
  8185c4:	e0ffff17 	ldw	r3,-4(fp)
  8185c8:	00800044 	movi	r2,1
  8185cc:	18800d15 	stw	r2,52(r3)
  8185d0:	00000c06 	br	818604 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
  8185d4:	e0bffd17 	ldw	r2,-12(fp)
  8185d8:	1004c03a 	cmpne	r2,r2,zero
  8185dc:	1000091e 	bne	r2,zero,818604 <alt_up_ps2_init+0xb8>
  8185e0:	e0bffe03 	ldbu	r2,-8(fp)
  8185e4:	10803fcc 	andi	r2,r2,255
  8185e8:	1004c03a 	cmpne	r2,r2,zero
  8185ec:	1000051e 	bne	r2,zero,818604 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
  8185f0:	e0bfff17 	ldw	r2,-4(fp)
  8185f4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
  8185f8:	e13fff17 	ldw	r4,-4(fp)
  8185fc:	01403d04 	movi	r5,244
  818600:	08186c40 	call	8186c4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
  818604:	e037883a 	mov	sp,fp
  818608:	dfc00117 	ldw	ra,4(sp)
  81860c:	df000017 	ldw	fp,0(sp)
  818610:	dec00204 	addi	sp,sp,8
  818614:	f800283a 	ret

00818618 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
  818618:	defffd04 	addi	sp,sp,-12
  81861c:	df000215 	stw	fp,8(sp)
  818620:	df000204 	addi	fp,sp,8
  818624:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  818628:	e0bfff17 	ldw	r2,-4(fp)
  81862c:	10800a17 	ldw	r2,40(r2)
  818630:	10800104 	addi	r2,r2,4
  818634:	10800037 	ldwio	r2,0(r2)
  818638:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
  81863c:	e0bffe17 	ldw	r2,-8(fp)
  818640:	10800054 	ori	r2,r2,1
  818644:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  818648:	e0bfff17 	ldw	r2,-4(fp)
  81864c:	10800a17 	ldw	r2,40(r2)
  818650:	10800104 	addi	r2,r2,4
  818654:	e0fffe17 	ldw	r3,-8(fp)
  818658:	10c00035 	stwio	r3,0(r2)
}
  81865c:	e037883a 	mov	sp,fp
  818660:	df000017 	ldw	fp,0(sp)
  818664:	dec00104 	addi	sp,sp,4
  818668:	f800283a 	ret

0081866c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
  81866c:	defffd04 	addi	sp,sp,-12
  818670:	df000215 	stw	fp,8(sp)
  818674:	df000204 	addi	fp,sp,8
  818678:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  81867c:	e0bfff17 	ldw	r2,-4(fp)
  818680:	10800a17 	ldw	r2,40(r2)
  818684:	10800104 	addi	r2,r2,4
  818688:	10800037 	ldwio	r2,0(r2)
  81868c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
  818690:	e0fffe17 	ldw	r3,-8(fp)
  818694:	00bfff84 	movi	r2,-2
  818698:	1884703a 	and	r2,r3,r2
  81869c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  8186a0:	e0bfff17 	ldw	r2,-4(fp)
  8186a4:	10800a17 	ldw	r2,40(r2)
  8186a8:	10800104 	addi	r2,r2,4
  8186ac:	e0fffe17 	ldw	r3,-8(fp)
  8186b0:	10c00035 	stwio	r3,0(r2)
}
  8186b4:	e037883a 	mov	sp,fp
  8186b8:	df000017 	ldw	fp,0(sp)
  8186bc:	dec00104 	addi	sp,sp,4
  8186c0:	f800283a 	ret

008186c4 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
  8186c4:	defffa04 	addi	sp,sp,-24
  8186c8:	dfc00515 	stw	ra,20(sp)
  8186cc:	df000415 	stw	fp,16(sp)
  8186d0:	df000404 	addi	fp,sp,16
  8186d4:	e13ffd15 	stw	r4,-12(fp)
  8186d8:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  8186dc:	e0bffd17 	ldw	r2,-12(fp)
  8186e0:	10800a17 	ldw	r2,40(r2)
  8186e4:	e0fffe03 	ldbu	r3,-8(fp)
  8186e8:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  8186ec:	e0bffd17 	ldw	r2,-12(fp)
  8186f0:	10800a17 	ldw	r2,40(r2)
  8186f4:	10800104 	addi	r2,r2,4
  8186f8:	10800037 	ldwio	r2,0(r2)
  8186fc:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
  818700:	e13ffc17 	ldw	r4,-16(fp)
  818704:	08184840 	call	818484 <read_CE_bit>
  818708:	10803fcc 	andi	r2,r2,255
  81870c:	1005003a 	cmpeq	r2,r2,zero
  818710:	1000031e 	bne	r2,zero,818720 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
  818714:	00bffec4 	movi	r2,-5
  818718:	e0bfff15 	stw	r2,-4(fp)
  81871c:	00000106 	br	818724 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
  818720:	e03fff15 	stw	zero,-4(fp)
  818724:	e0bfff17 	ldw	r2,-4(fp)
}
  818728:	e037883a 	mov	sp,fp
  81872c:	dfc00117 	ldw	ra,4(sp)
  818730:	df000017 	ldw	fp,0(sp)
  818734:	dec00204 	addi	sp,sp,8
  818738:	f800283a 	ret

0081873c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
  81873c:	defffb04 	addi	sp,sp,-20
  818740:	dfc00415 	stw	ra,16(sp)
  818744:	df000315 	stw	fp,12(sp)
  818748:	df000304 	addi	fp,sp,12
  81874c:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
  818750:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
  818754:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
  818758:	e17ffd44 	addi	r5,fp,-11
  81875c:	e13ffe17 	ldw	r4,-8(fp)
  818760:	08188180 	call	818818 <alt_up_ps2_read_data_byte_timeout>
  818764:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
  818768:	e0bffd03 	ldbu	r2,-12(fp)
  81876c:	1004c03a 	cmpne	r2,r2,zero
  818770:	1000061e 	bne	r2,zero,81878c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
  818774:	e0bffd43 	ldbu	r2,-11(fp)
  818778:	10803fcc 	andi	r2,r2,255
  81877c:	10803e98 	cmpnei	r2,r2,250
  818780:	103ff51e 	bne	r2,zero,818758 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
  818784:	e03fff15 	stw	zero,-4(fp)
  818788:	00000206 	br	818794 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
  81878c:	e0bffd03 	ldbu	r2,-12(fp)
  818790:	e0bfff15 	stw	r2,-4(fp)
  818794:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
  818798:	e037883a 	mov	sp,fp
  81879c:	dfc00117 	ldw	ra,4(sp)
  8187a0:	df000017 	ldw	fp,0(sp)
  8187a4:	dec00204 	addi	sp,sp,8
  8187a8:	f800283a 	ret

008187ac <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
  8187ac:	defff904 	addi	sp,sp,-28
  8187b0:	dfc00615 	stw	ra,24(sp)
  8187b4:	df000515 	stw	fp,20(sp)
  8187b8:	df000504 	addi	fp,sp,20
  8187bc:	e13ffd15 	stw	r4,-12(fp)
  8187c0:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
  8187c4:	e17ffe03 	ldbu	r5,-8(fp)
  8187c8:	e13ffd17 	ldw	r4,-12(fp)
  8187cc:	08186c40 	call	8186c4 <alt_up_ps2_write_data_byte>
  8187d0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
  8187d4:	e0bffc17 	ldw	r2,-16(fp)
  8187d8:	1005003a 	cmpeq	r2,r2,zero
  8187dc:	1000031e 	bne	r2,zero,8187ec <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
  8187e0:	e0bffc17 	ldw	r2,-16(fp)
  8187e4:	e0bfff15 	stw	r2,-4(fp)
  8187e8:	00000506 	br	818800 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
  8187ec:	e13ffd17 	ldw	r4,-12(fp)
  8187f0:	081873c0 	call	81873c <alt_up_ps2_wait_for_ack>
  8187f4:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
  8187f8:	e0bffb17 	ldw	r2,-20(fp)
  8187fc:	e0bfff15 	stw	r2,-4(fp)
  818800:	e0bfff17 	ldw	r2,-4(fp)
}
  818804:	e037883a 	mov	sp,fp
  818808:	dfc00117 	ldw	ra,4(sp)
  81880c:	df000017 	ldw	fp,0(sp)
  818810:	dec00204 	addi	sp,sp,8
  818814:	f800283a 	ret

00818818 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  818818:	defff904 	addi	sp,sp,-28
  81881c:	dfc00615 	stw	ra,24(sp)
  818820:	df000515 	stw	fp,20(sp)
  818824:	df000504 	addi	fp,sp,20
  818828:	e13ffd15 	stw	r4,-12(fp)
  81882c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
  818830:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
  818834:	e03ffb15 	stw	zero,-20(fp)
  818838:	00000006 	br	81883c <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
  81883c:	e0bffb17 	ldw	r2,-20(fp)
  818840:	10800044 	addi	r2,r2,1
  818844:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  818848:	e0bffd17 	ldw	r2,-12(fp)
  81884c:	10800a17 	ldw	r2,40(r2)
  818850:	10800037 	ldwio	r2,0(r2)
  818854:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
  818858:	e13ffc17 	ldw	r4,-16(fp)
  81885c:	08184ec0 	call	8184ec <read_data_valid>
  818860:	10803fcc 	andi	r2,r2,255
  818864:	1005003a 	cmpeq	r2,r2,zero
  818868:	1000071e 	bne	r2,zero,818888 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
  81886c:	e13ffc17 	ldw	r4,-16(fp)
  818870:	08185200 	call	818520 <read_data_byte>
  818874:	1007883a 	mov	r3,r2
  818878:	e0bffe17 	ldw	r2,-8(fp)
  81887c:	10c00005 	stb	r3,0(r2)
			return 0;
  818880:	e03fff15 	stw	zero,-4(fp)
  818884:	00000a06 	br	8188b0 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  818888:	e0bffd17 	ldw	r2,-12(fp)
  81888c:	10800c17 	ldw	r2,48(r2)
  818890:	1005003a 	cmpeq	r2,r2,zero
  818894:	103fe91e 	bne	r2,zero,81883c <alt_up_ps2_read_data_byte_timeout+0x24>
  818898:	e0bffd17 	ldw	r2,-12(fp)
  81889c:	10c00c17 	ldw	r3,48(r2)
  8188a0:	e0bffb17 	ldw	r2,-20(fp)
  8188a4:	18bfe52e 	bgeu	r3,r2,81883c <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
  8188a8:	00bfe304 	movi	r2,-116
  8188ac:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
  8188b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8188b4:	e037883a 	mov	sp,fp
  8188b8:	dfc00117 	ldw	ra,4(sp)
  8188bc:	df000017 	ldw	fp,0(sp)
  8188c0:	dec00204 	addi	sp,sp,8
  8188c4:	f800283a 	ret

008188c8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  8188c8:	defffa04 	addi	sp,sp,-24
  8188cc:	dfc00515 	stw	ra,20(sp)
  8188d0:	df000415 	stw	fp,16(sp)
  8188d4:	df000404 	addi	fp,sp,16
  8188d8:	e13ffd15 	stw	r4,-12(fp)
  8188dc:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
  8188e0:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  8188e4:	e0bffd17 	ldw	r2,-12(fp)
  8188e8:	10800a17 	ldw	r2,40(r2)
  8188ec:	10800037 	ldwio	r2,0(r2)
  8188f0:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
  8188f4:	e13ffc17 	ldw	r4,-16(fp)
  8188f8:	08184ec0 	call	8184ec <read_data_valid>
  8188fc:	10803fcc 	andi	r2,r2,255
  818900:	1005003a 	cmpeq	r2,r2,zero
  818904:	1000071e 	bne	r2,zero,818924 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
  818908:	e13ffc17 	ldw	r4,-16(fp)
  81890c:	08185200 	call	818520 <read_data_byte>
  818910:	1007883a 	mov	r3,r2
  818914:	e0bffe17 	ldw	r2,-8(fp)
  818918:	10c00005 	stb	r3,0(r2)
		return 0;
  81891c:	e03fff15 	stw	zero,-4(fp)
  818920:	00000206 	br	81892c <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
  818924:	00bfffc4 	movi	r2,-1
  818928:	e0bfff15 	stw	r2,-4(fp)
  81892c:	e0bfff17 	ldw	r2,-4(fp)
}
  818930:	e037883a 	mov	sp,fp
  818934:	dfc00117 	ldw	ra,4(sp)
  818938:	df000017 	ldw	fp,0(sp)
  81893c:	dec00204 	addi	sp,sp,8
  818940:	f800283a 	ret

00818944 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
  818944:	defffb04 	addi	sp,sp,-20
  818948:	dfc00415 	stw	ra,16(sp)
  81894c:	df000315 	stw	fp,12(sp)
  818950:	df000304 	addi	fp,sp,12
  818954:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
  818958:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
  81895c:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  818960:	e0bfff17 	ldw	r2,-4(fp)
  818964:	10800a17 	ldw	r2,40(r2)
  818968:	10800037 	ldwio	r2,0(r2)
  81896c:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
  818970:	e13ffd17 	ldw	r4,-12(fp)
  818974:	08184b80 	call	8184b8 <read_num_bytes_available>
  818978:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
  81897c:	e0bffe0b 	ldhu	r2,-8(fp)
  818980:	1004c03a 	cmpne	r2,r2,zero
  818984:	103ff61e 	bne	r2,zero,818960 <alt_up_ps2_clear_fifo+0x1c>
}
  818988:	e037883a 	mov	sp,fp
  81898c:	dfc00117 	ldw	ra,4(sp)
  818990:	df000017 	ldw	fp,0(sp)
  818994:	dec00204 	addi	sp,sp,8
  818998:	f800283a 	ret

0081899c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
  81899c:	defff704 	addi	sp,sp,-36
  8189a0:	dfc00815 	stw	ra,32(sp)
  8189a4:	df000715 	stw	fp,28(sp)
  8189a8:	df000704 	addi	fp,sp,28
  8189ac:	e13ffc15 	stw	r4,-16(fp)
  8189b0:	e17ffd15 	stw	r5,-12(fp)
  8189b4:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  8189b8:	e0bffc17 	ldw	r2,-16(fp)
  8189bc:	10800017 	ldw	r2,0(r2)
  8189c0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
  8189c4:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
  8189c8:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
  8189cc:	e0fff917 	ldw	r3,-28(fp)
  8189d0:	e0bffe17 	ldw	r2,-8(fp)
  8189d4:	18bffd16 	blt	r3,r2,8189cc <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
  8189d8:	e17ffd17 	ldw	r5,-12(fp)
  8189dc:	e0bffd17 	ldw	r2,-12(fp)
  8189e0:	10800044 	addi	r2,r2,1
  8189e4:	e0bffd15 	stw	r2,-12(fp)
  8189e8:	e13ffb17 	ldw	r4,-20(fp)
  8189ec:	08188180 	call	818818 <alt_up_ps2_read_data_byte_timeout>
  8189f0:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
  8189f4:	e0bffa17 	ldw	r2,-24(fp)
  8189f8:	1005003a 	cmpeq	r2,r2,zero
  8189fc:	1000031e 	bne	r2,zero,818a0c <alt_up_ps2_read_fd+0x70>
			return count;
  818a00:	e0bff917 	ldw	r2,-28(fp)
  818a04:	e0bfff15 	stw	r2,-4(fp)
  818a08:	00000506 	br	818a20 <alt_up_ps2_read_fd+0x84>
		count++;
  818a0c:	e0bff917 	ldw	r2,-28(fp)
  818a10:	10800044 	addi	r2,r2,1
  818a14:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
  818a18:	e0bff917 	ldw	r2,-28(fp)
  818a1c:	e0bfff15 	stw	r2,-4(fp)
  818a20:	e0bfff17 	ldw	r2,-4(fp)
}
  818a24:	e037883a 	mov	sp,fp
  818a28:	dfc00117 	ldw	ra,4(sp)
  818a2c:	df000017 	ldw	fp,0(sp)
  818a30:	dec00204 	addi	sp,sp,8
  818a34:	f800283a 	ret

00818a38 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
  818a38:	defff704 	addi	sp,sp,-36
  818a3c:	dfc00815 	stw	ra,32(sp)
  818a40:	df000715 	stw	fp,28(sp)
  818a44:	df000704 	addi	fp,sp,28
  818a48:	e13ffc15 	stw	r4,-16(fp)
  818a4c:	e17ffd15 	stw	r5,-12(fp)
  818a50:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  818a54:	e0bffc17 	ldw	r2,-16(fp)
  818a58:	10800017 	ldw	r2,0(r2)
  818a5c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
  818a60:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
  818a64:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
  818a68:	00001206 	br	818ab4 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
  818a6c:	e0bffd17 	ldw	r2,-12(fp)
  818a70:	10800003 	ldbu	r2,0(r2)
  818a74:	11403fcc 	andi	r5,r2,255
  818a78:	e0bffd17 	ldw	r2,-12(fp)
  818a7c:	10800044 	addi	r2,r2,1
  818a80:	e0bffd15 	stw	r2,-12(fp)
  818a84:	e13ffb17 	ldw	r4,-20(fp)
  818a88:	08186c40 	call	8186c4 <alt_up_ps2_write_data_byte>
  818a8c:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
  818a90:	e0bffa17 	ldw	r2,-24(fp)
  818a94:	1005003a 	cmpeq	r2,r2,zero
  818a98:	1000031e 	bne	r2,zero,818aa8 <alt_up_ps2_write_fd+0x70>
			return count;
  818a9c:	e0bff917 	ldw	r2,-28(fp)
  818aa0:	e0bfff15 	stw	r2,-4(fp)
  818aa4:	00000806 	br	818ac8 <alt_up_ps2_write_fd+0x90>
		count++;
  818aa8:	e0bff917 	ldw	r2,-28(fp)
  818aac:	10800044 	addi	r2,r2,1
  818ab0:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
  818ab4:	e0fff917 	ldw	r3,-28(fp)
  818ab8:	e0bffe17 	ldw	r2,-8(fp)
  818abc:	18bfeb16 	blt	r3,r2,818a6c <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
  818ac0:	e0bff917 	ldw	r2,-28(fp)
  818ac4:	e0bfff15 	stw	r2,-4(fp)
  818ac8:	e0bfff17 	ldw	r2,-4(fp)
}
  818acc:	e037883a 	mov	sp,fp
  818ad0:	dfc00117 	ldw	ra,4(sp)
  818ad4:	df000017 	ldw	fp,0(sp)
  818ad8:	dec00204 	addi	sp,sp,8
  818adc:	f800283a 	ret

00818ae0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
  818ae0:	defffc04 	addi	sp,sp,-16
  818ae4:	dfc00315 	stw	ra,12(sp)
  818ae8:	df000215 	stw	fp,8(sp)
  818aec:	df000204 	addi	fp,sp,8
  818af0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
  818af4:	e13fff17 	ldw	r4,-4(fp)
  818af8:	014020b4 	movhi	r5,130
  818afc:	294a7104 	addi	r5,r5,10692
  818b00:	081ef080 	call	81ef08 <alt_find_dev>
  818b04:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  818b08:	e0bffe17 	ldw	r2,-8(fp)
}
  818b0c:	e037883a 	mov	sp,fp
  818b10:	dfc00117 	ldw	ra,4(sp)
  818b14:	df000017 	ldw	fp,0(sp)
  818b18:	dec00204 	addi	sp,sp,8
  818b1c:	f800283a 	ret

00818b20 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  818b20:	defffd04 	addi	sp,sp,-12
  818b24:	df000215 	stw	fp,8(sp)
  818b28:	df000204 	addi	fp,sp,8
  818b2c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  818b30:	e0bfff17 	ldw	r2,-4(fp)
  818b34:	10800a17 	ldw	r2,40(r2)
  818b38:	10800104 	addi	r2,r2,4
  818b3c:	10800037 	ldwio	r2,0(r2)
  818b40:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  818b44:	e0bffe17 	ldw	r2,-8(fp)
  818b48:	10800054 	ori	r2,r2,1
  818b4c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  818b50:	e0bfff17 	ldw	r2,-4(fp)
  818b54:	10800a17 	ldw	r2,40(r2)
  818b58:	10800104 	addi	r2,r2,4
  818b5c:	e0fffe17 	ldw	r3,-8(fp)
  818b60:	10c00035 	stwio	r3,0(r2)
}
  818b64:	e037883a 	mov	sp,fp
  818b68:	df000017 	ldw	fp,0(sp)
  818b6c:	dec00104 	addi	sp,sp,4
  818b70:	f800283a 	ret

00818b74 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  818b74:	defffd04 	addi	sp,sp,-12
  818b78:	df000215 	stw	fp,8(sp)
  818b7c:	df000204 	addi	fp,sp,8
  818b80:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  818b84:	e0bfff17 	ldw	r2,-4(fp)
  818b88:	10800a17 	ldw	r2,40(r2)
  818b8c:	10800104 	addi	r2,r2,4
  818b90:	10800037 	ldwio	r2,0(r2)
  818b94:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  818b98:	e0fffe17 	ldw	r3,-8(fp)
  818b9c:	00bfff84 	movi	r2,-2
  818ba0:	1884703a 	and	r2,r3,r2
  818ba4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  818ba8:	e0bfff17 	ldw	r2,-4(fp)
  818bac:	10800a17 	ldw	r2,40(r2)
  818bb0:	10800104 	addi	r2,r2,4
  818bb4:	e0fffe17 	ldw	r3,-8(fp)
  818bb8:	10c00035 	stwio	r3,0(r2)
}
  818bbc:	e037883a 	mov	sp,fp
  818bc0:	df000017 	ldw	fp,0(sp)
  818bc4:	dec00104 	addi	sp,sp,4
  818bc8:	f800283a 	ret

00818bcc <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  818bcc:	defffd04 	addi	sp,sp,-12
  818bd0:	df000215 	stw	fp,8(sp)
  818bd4:	df000204 	addi	fp,sp,8
  818bd8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  818bdc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  818be0:	e0bfff17 	ldw	r2,-4(fp)
  818be4:	10800a17 	ldw	r2,40(r2)
  818be8:	10800084 	addi	r2,r2,2
  818bec:	1080002b 	ldhuio	r2,0(r2)
  818bf0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  818bf4:	e0bffe0b 	ldhu	r2,-8(fp)
}
  818bf8:	e037883a 	mov	sp,fp
  818bfc:	df000017 	ldw	fp,0(sp)
  818c00:	dec00104 	addi	sp,sp,4
  818c04:	f800283a 	ret

00818c08 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  818c08:	defffd04 	addi	sp,sp,-12
  818c0c:	df000215 	stw	fp,8(sp)
  818c10:	df000204 	addi	fp,sp,8
  818c14:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  818c18:	e0bfff17 	ldw	r2,-4(fp)
  818c1c:	10800a17 	ldw	r2,40(r2)
  818c20:	10800104 	addi	r2,r2,4
  818c24:	10800037 	ldwio	r2,0(r2)
  818c28:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  818c2c:	e0bffe17 	ldw	r2,-8(fp)
  818c30:	10bfffec 	andhi	r2,r2,65535
  818c34:	1004d43a 	srli	r2,r2,16
}
  818c38:	e037883a 	mov	sp,fp
  818c3c:	df000017 	ldw	fp,0(sp)
  818c40:	dec00104 	addi	sp,sp,4
  818c44:	f800283a 	ret

00818c48 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  818c48:	defffc04 	addi	sp,sp,-16
  818c4c:	df000315 	stw	fp,12(sp)
  818c50:	df000304 	addi	fp,sp,12
  818c54:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  818c58:	e0bffe17 	ldw	r2,-8(fp)
  818c5c:	1080800c 	andi	r2,r2,512
  818c60:	1004d27a 	srli	r2,r2,9
  818c64:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  818c68:	e0bffd17 	ldw	r2,-12(fp)
  818c6c:	1005003a 	cmpeq	r2,r2,zero
  818c70:	1000031e 	bne	r2,zero,818c80 <alt_up_rs232_check_parity+0x38>
  818c74:	00bfffc4 	movi	r2,-1
  818c78:	e0bfff15 	stw	r2,-4(fp)
  818c7c:	00000106 	br	818c84 <alt_up_rs232_check_parity+0x3c>
  818c80:	e03fff15 	stw	zero,-4(fp)
  818c84:	e0bfff17 	ldw	r2,-4(fp)
}
  818c88:	e037883a 	mov	sp,fp
  818c8c:	df000017 	ldw	fp,0(sp)
  818c90:	dec00104 	addi	sp,sp,4
  818c94:	f800283a 	ret

00818c98 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  818c98:	defffc04 	addi	sp,sp,-16
  818c9c:	df000315 	stw	fp,12(sp)
  818ca0:	df000304 	addi	fp,sp,12
  818ca4:	e13ffe15 	stw	r4,-8(fp)
  818ca8:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  818cac:	e0bffe17 	ldw	r2,-8(fp)
  818cb0:	10800a17 	ldw	r2,40(r2)
  818cb4:	10800037 	ldwio	r2,0(r2)
  818cb8:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  818cbc:	e0bffe17 	ldw	r2,-8(fp)
  818cc0:	10800a17 	ldw	r2,40(r2)
  818cc4:	e0ffff03 	ldbu	r3,-4(fp)
  818cc8:	10c00035 	stwio	r3,0(r2)
	return 0;
  818ccc:	0005883a 	mov	r2,zero
}
  818cd0:	e037883a 	mov	sp,fp
  818cd4:	df000017 	ldw	fp,0(sp)
  818cd8:	dec00104 	addi	sp,sp,4
  818cdc:	f800283a 	ret

00818ce0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  818ce0:	defffa04 	addi	sp,sp,-24
  818ce4:	dfc00515 	stw	ra,20(sp)
  818ce8:	df000415 	stw	fp,16(sp)
  818cec:	df000404 	addi	fp,sp,16
  818cf0:	e13ffd15 	stw	r4,-12(fp)
  818cf4:	e17ffe15 	stw	r5,-8(fp)
  818cf8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  818cfc:	e0bffd17 	ldw	r2,-12(fp)
  818d00:	10800a17 	ldw	r2,40(r2)
  818d04:	10800037 	ldwio	r2,0(r2)
  818d08:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  818d0c:	e0bffc17 	ldw	r2,-16(fp)
  818d10:	1007883a 	mov	r3,r2
  818d14:	e0bffe17 	ldw	r2,-8(fp)
  818d18:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  818d1c:	e13ffc17 	ldw	r4,-16(fp)
  818d20:	0818c480 	call	818c48 <alt_up_rs232_check_parity>
  818d24:	1007883a 	mov	r3,r2
  818d28:	e0bfff17 	ldw	r2,-4(fp)
  818d2c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  818d30:	e0bffc17 	ldw	r2,-16(fp)
  818d34:	10a0000c 	andi	r2,r2,32768
  818d38:	1004d3fa 	srli	r2,r2,15
  818d3c:	10bfffc4 	addi	r2,r2,-1
}
  818d40:	e037883a 	mov	sp,fp
  818d44:	dfc00117 	ldw	ra,4(sp)
  818d48:	df000017 	ldw	fp,0(sp)
  818d4c:	dec00204 	addi	sp,sp,8
  818d50:	f800283a 	ret

00818d54 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  818d54:	defff804 	addi	sp,sp,-32
  818d58:	dfc00715 	stw	ra,28(sp)
  818d5c:	df000615 	stw	fp,24(sp)
  818d60:	df000604 	addi	fp,sp,24
  818d64:	e13ffd15 	stw	r4,-12(fp)
  818d68:	e17ffe15 	stw	r5,-8(fp)
  818d6c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  818d70:	e0bffd17 	ldw	r2,-12(fp)
  818d74:	10800017 	ldw	r2,0(r2)
  818d78:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  818d7c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  818d80:	00000c06 	br	818db4 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  818d84:	e17ffe17 	ldw	r5,-8(fp)
  818d88:	e0bffe17 	ldw	r2,-8(fp)
  818d8c:	10800044 	addi	r2,r2,1
  818d90:	e0bffe15 	stw	r2,-8(fp)
  818d94:	e1bffc04 	addi	r6,fp,-16
  818d98:	e13ffb17 	ldw	r4,-20(fp)
  818d9c:	0818ce00 	call	818ce0 <alt_up_rs232_read_data>
  818da0:	1004c03a 	cmpne	r2,r2,zero
  818da4:	1000091e 	bne	r2,zero,818dcc <alt_up_rs232_read_fd+0x78>
			count++;
  818da8:	e0bffa17 	ldw	r2,-24(fp)
  818dac:	10800044 	addi	r2,r2,1
  818db0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  818db4:	e0bfff17 	ldw	r2,-4(fp)
  818db8:	10bfffc4 	addi	r2,r2,-1
  818dbc:	e0bfff15 	stw	r2,-4(fp)
  818dc0:	e0bfff17 	ldw	r2,-4(fp)
  818dc4:	10bfffd8 	cmpnei	r2,r2,-1
  818dc8:	103fee1e 	bne	r2,zero,818d84 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  818dcc:	e0bffa17 	ldw	r2,-24(fp)
}
  818dd0:	e037883a 	mov	sp,fp
  818dd4:	dfc00117 	ldw	ra,4(sp)
  818dd8:	df000017 	ldw	fp,0(sp)
  818ddc:	dec00204 	addi	sp,sp,8
  818de0:	f800283a 	ret

00818de4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  818de4:	defff904 	addi	sp,sp,-28
  818de8:	dfc00615 	stw	ra,24(sp)
  818dec:	df000515 	stw	fp,20(sp)
  818df0:	df000504 	addi	fp,sp,20
  818df4:	e13ffd15 	stw	r4,-12(fp)
  818df8:	e17ffe15 	stw	r5,-8(fp)
  818dfc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  818e00:	e0bffd17 	ldw	r2,-12(fp)
  818e04:	10800017 	ldw	r2,0(r2)
  818e08:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  818e0c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  818e10:	00000d06 	br	818e48 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  818e14:	e0bffe17 	ldw	r2,-8(fp)
  818e18:	10800003 	ldbu	r2,0(r2)
  818e1c:	11403fcc 	andi	r5,r2,255
  818e20:	e13ffc17 	ldw	r4,-16(fp)
  818e24:	0818c980 	call	818c98 <alt_up_rs232_write_data>
  818e28:	1004c03a 	cmpne	r2,r2,zero
  818e2c:	10000c1e 	bne	r2,zero,818e60 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  818e30:	e0bffb17 	ldw	r2,-20(fp)
  818e34:	10800044 	addi	r2,r2,1
  818e38:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  818e3c:	e0bffe17 	ldw	r2,-8(fp)
  818e40:	10800044 	addi	r2,r2,1
  818e44:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  818e48:	e0bfff17 	ldw	r2,-4(fp)
  818e4c:	10bfffc4 	addi	r2,r2,-1
  818e50:	e0bfff15 	stw	r2,-4(fp)
  818e54:	e0bfff17 	ldw	r2,-4(fp)
  818e58:	10bfffd8 	cmpnei	r2,r2,-1
  818e5c:	103fed1e 	bne	r2,zero,818e14 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  818e60:	e0bffb17 	ldw	r2,-20(fp)
}
  818e64:	e037883a 	mov	sp,fp
  818e68:	dfc00117 	ldw	ra,4(sp)
  818e6c:	df000017 	ldw	fp,0(sp)
  818e70:	dec00204 	addi	sp,sp,8
  818e74:	f800283a 	ret

00818e78 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  818e78:	defffc04 	addi	sp,sp,-16
  818e7c:	dfc00315 	stw	ra,12(sp)
  818e80:	df000215 	stw	fp,8(sp)
  818e84:	df000204 	addi	fp,sp,8
  818e88:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  818e8c:	e13fff17 	ldw	r4,-4(fp)
  818e90:	014020b4 	movhi	r5,130
  818e94:	294a7104 	addi	r5,r5,10692
  818e98:	081ef080 	call	81ef08 <alt_find_dev>
  818e9c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  818ea0:	e0bffe17 	ldw	r2,-8(fp)
}
  818ea4:	e037883a 	mov	sp,fp
  818ea8:	dfc00117 	ldw	ra,4(sp)
  818eac:	df000017 	ldw	fp,0(sp)
  818eb0:	dec00204 	addi	sp,sp,8
  818eb4:	f800283a 	ret

00818eb8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  818eb8:	defffc04 	addi	sp,sp,-16
  818ebc:	dfc00315 	stw	ra,12(sp)
  818ec0:	df000215 	stw	fp,8(sp)
  818ec4:	df000204 	addi	fp,sp,8
  818ec8:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  818ecc:	e0bfff17 	ldw	r2,-4(fp)
  818ed0:	10800217 	ldw	r2,8(r2)
  818ed4:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  818ed8:	00000c06 	br	818f0c <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  818edc:	e13ffe17 	ldw	r4,-8(fp)
  818ee0:	014020b4 	movhi	r5,130
  818ee4:	29432c04 	addi	r5,r5,3248
  818ee8:	080cd080 	call	80cd08 <strcmp>
  818eec:	1004c03a 	cmpne	r2,r2,zero
  818ef0:	1000031e 	bne	r2,zero,818f00 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  818ef4:	e0bffe17 	ldw	r2,-8(fp)
  818ef8:	10000005 	stb	zero,0(r2)
			break;
  818efc:	00000a06 	br	818f28 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  818f00:	e0bffe17 	ldw	r2,-8(fp)
  818f04:	10800044 	addi	r2,r2,1
  818f08:	e0bffe15 	stw	r2,-8(fp)
  818f0c:	e0bffe17 	ldw	r2,-8(fp)
  818f10:	10800003 	ldbu	r2,0(r2)
  818f14:	10803fcc 	andi	r2,r2,255
  818f18:	1080201c 	xori	r2,r2,128
  818f1c:	10bfe004 	addi	r2,r2,-128
  818f20:	1004c03a 	cmpne	r2,r2,zero
  818f24:	103fed1e 	bne	r2,zero,818edc <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  818f28:	e037883a 	mov	sp,fp
  818f2c:	dfc00117 	ldw	ra,4(sp)
  818f30:	df000017 	ldw	fp,0(sp)
  818f34:	dec00204 	addi	sp,sp,8
  818f38:	f800283a 	ret

00818f3c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  818f3c:	defffc04 	addi	sp,sp,-16
  818f40:	dfc00315 	stw	ra,12(sp)
  818f44:	df000215 	stw	fp,8(sp)
  818f48:	df000204 	addi	fp,sp,8
  818f4c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  818f50:	e13fff17 	ldw	r4,-4(fp)
  818f54:	014020b4 	movhi	r5,130
  818f58:	294a7104 	addi	r5,r5,10692
  818f5c:	081ef080 	call	81ef08 <alt_find_dev>
  818f60:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  818f64:	e0bffe17 	ldw	r2,-8(fp)
}
  818f68:	e037883a 	mov	sp,fp
  818f6c:	dfc00117 	ldw	ra,4(sp)
  818f70:	df000017 	ldw	fp,0(sp)
  818f74:	dec00204 	addi	sp,sp,8
  818f78:	f800283a 	ret

00818f7c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  818f7c:	defff904 	addi	sp,sp,-28
  818f80:	df000615 	stw	fp,24(sp)
  818f84:	df000604 	addi	fp,sp,24
  818f88:	e13ffb15 	stw	r4,-20(fp)
  818f8c:	e1bffd15 	stw	r6,-12(fp)
  818f90:	e1fffe15 	stw	r7,-8(fp)
  818f94:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  818f98:	e0bffb17 	ldw	r2,-20(fp)
  818f9c:	10c00c17 	ldw	r3,48(r2)
  818fa0:	e0bffd17 	ldw	r2,-12(fp)
  818fa4:	10c0042e 	bgeu	r2,r3,818fb8 <alt_up_char_buffer_draw+0x3c>
  818fa8:	e0bffb17 	ldw	r2,-20(fp)
  818fac:	10c00d17 	ldw	r3,52(r2)
  818fb0:	e0bffe17 	ldw	r2,-8(fp)
  818fb4:	10c00336 	bltu	r2,r3,818fc4 <alt_up_char_buffer_draw+0x48>
		return -1;
  818fb8:	00bfffc4 	movi	r2,-1
  818fbc:	e0bfff15 	stw	r2,-4(fp)
  818fc0:	00001d06 	br	819038 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  818fc4:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  818fc8:	e0bffb17 	ldw	r2,-20(fp)
  818fcc:	10c00f17 	ldw	r3,60(r2)
  818fd0:	e0bffd17 	ldw	r2,-12(fp)
  818fd4:	1886703a 	and	r3,r3,r2
  818fd8:	e0bffb17 	ldw	r2,-20(fp)
  818fdc:	10800e17 	ldw	r2,56(r2)
  818fe0:	1886983a 	sll	r3,r3,r2
  818fe4:	e0bffa17 	ldw	r2,-24(fp)
  818fe8:	10c4b03a 	or	r2,r2,r3
  818fec:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  818ff0:	e0bffb17 	ldw	r2,-20(fp)
  818ff4:	10c01117 	ldw	r3,68(r2)
  818ff8:	e0bffe17 	ldw	r2,-8(fp)
  818ffc:	1886703a 	and	r3,r3,r2
  819000:	e0bffb17 	ldw	r2,-20(fp)
  819004:	10801017 	ldw	r2,64(r2)
  819008:	1886983a 	sll	r3,r3,r2
  81900c:	e0bffa17 	ldw	r2,-24(fp)
  819010:	10c4b03a 	or	r2,r2,r3
  819014:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  819018:	e0bffb17 	ldw	r2,-20(fp)
  81901c:	10800b17 	ldw	r2,44(r2)
  819020:	1007883a 	mov	r3,r2
  819024:	e0bffa17 	ldw	r2,-24(fp)
  819028:	1885883a 	add	r2,r3,r2
  81902c:	e0fffc03 	ldbu	r3,-16(fp)
  819030:	10c00025 	stbio	r3,0(r2)

	return 0;
  819034:	e03fff15 	stw	zero,-4(fp)
  819038:	e0bfff17 	ldw	r2,-4(fp)
}
  81903c:	e037883a 	mov	sp,fp
  819040:	df000017 	ldw	fp,0(sp)
  819044:	dec00104 	addi	sp,sp,4
  819048:	f800283a 	ret

0081904c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  81904c:	defff904 	addi	sp,sp,-28
  819050:	df000615 	stw	fp,24(sp)
  819054:	df000604 	addi	fp,sp,24
  819058:	e13ffb15 	stw	r4,-20(fp)
  81905c:	e17ffc15 	stw	r5,-16(fp)
  819060:	e1bffd15 	stw	r6,-12(fp)
  819064:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  819068:	e0bffb17 	ldw	r2,-20(fp)
  81906c:	10c00c17 	ldw	r3,48(r2)
  819070:	e0bffd17 	ldw	r2,-12(fp)
  819074:	10c0042e 	bgeu	r2,r3,819088 <alt_up_char_buffer_string+0x3c>
  819078:	e0bffb17 	ldw	r2,-20(fp)
  81907c:	10c00d17 	ldw	r3,52(r2)
  819080:	e0bffe17 	ldw	r2,-8(fp)
  819084:	10c00336 	bltu	r2,r3,819094 <alt_up_char_buffer_string+0x48>
		return -1;
  819088:	00bfffc4 	movi	r2,-1
  81908c:	e0bfff15 	stw	r2,-4(fp)
  819090:	00002e06 	br	81914c <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  819094:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  819098:	e0bffb17 	ldw	r2,-20(fp)
  81909c:	10801017 	ldw	r2,64(r2)
  8190a0:	1007883a 	mov	r3,r2
  8190a4:	e0bffe17 	ldw	r2,-8(fp)
  8190a8:	10c6983a 	sll	r3,r2,r3
  8190ac:	e0bffd17 	ldw	r2,-12(fp)
  8190b0:	1885883a 	add	r2,r3,r2
  8190b4:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  8190b8:	00001c06 	br	81912c <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  8190bc:	e0bffb17 	ldw	r2,-20(fp)
  8190c0:	10800b17 	ldw	r2,44(r2)
  8190c4:	1007883a 	mov	r3,r2
  8190c8:	e0bffa17 	ldw	r2,-24(fp)
  8190cc:	1889883a 	add	r4,r3,r2
  8190d0:	e0bffc17 	ldw	r2,-16(fp)
  8190d4:	10800003 	ldbu	r2,0(r2)
  8190d8:	10c03fcc 	andi	r3,r2,255
  8190dc:	18c0201c 	xori	r3,r3,128
  8190e0:	18ffe004 	addi	r3,r3,-128
  8190e4:	2005883a 	mov	r2,r4
  8190e8:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8190ec:	e0bffc17 	ldw	r2,-16(fp)
  8190f0:	10800044 	addi	r2,r2,1
  8190f4:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  8190f8:	e0bffd17 	ldw	r2,-12(fp)
  8190fc:	10800044 	addi	r2,r2,1
  819100:	e0bffd15 	stw	r2,-12(fp)
  819104:	e0bffb17 	ldw	r2,-20(fp)
  819108:	10c00c17 	ldw	r3,48(r2)
  81910c:	e0bffd17 	ldw	r2,-12(fp)
  819110:	10c00336 	bltu	r2,r3,819120 <alt_up_char_buffer_string+0xd4>
			return -1;
  819114:	00bfffc4 	movi	r2,-1
  819118:	e0bfff15 	stw	r2,-4(fp)
  81911c:	00000b06 	br	81914c <alt_up_char_buffer_string+0x100>
		++offset;
  819120:	e0bffa17 	ldw	r2,-24(fp)
  819124:	10800044 	addi	r2,r2,1
  819128:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  81912c:	e0bffc17 	ldw	r2,-16(fp)
  819130:	10800003 	ldbu	r2,0(r2)
  819134:	10803fcc 	andi	r2,r2,255
  819138:	1080201c 	xori	r2,r2,128
  81913c:	10bfe004 	addi	r2,r2,-128
  819140:	1004c03a 	cmpne	r2,r2,zero
  819144:	103fdd1e 	bne	r2,zero,8190bc <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  819148:	e03fff15 	stw	zero,-4(fp)
  81914c:	e0bfff17 	ldw	r2,-4(fp)
}
  819150:	e037883a 	mov	sp,fp
  819154:	df000017 	ldw	fp,0(sp)
  819158:	dec00104 	addi	sp,sp,4
  81915c:	f800283a 	ret

00819160 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  819160:	defffe04 	addi	sp,sp,-8
  819164:	df000115 	stw	fp,4(sp)
  819168:	df000104 	addi	fp,sp,4
  81916c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  819170:	e0bfff17 	ldw	r2,-4(fp)
  819174:	10800a17 	ldw	r2,40(r2)
  819178:	10800084 	addi	r2,r2,2
  81917c:	1007883a 	mov	r3,r2
  819180:	00800044 	movi	r2,1
  819184:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  819188:	e0bfff17 	ldw	r2,-4(fp)
  81918c:	10800a17 	ldw	r2,40(r2)
  819190:	10800084 	addi	r2,r2,2
  819194:	10800023 	ldbuio	r2,0(r2)
  819198:	1080004c 	andi	r2,r2,1
  81919c:	10803fcc 	andi	r2,r2,255
  8191a0:	1004c03a 	cmpne	r2,r2,zero
  8191a4:	103ff81e 	bne	r2,zero,819188 <alt_up_char_buffer_clear+0x28>
	return 0;
  8191a8:	0005883a 	mov	r2,zero
}
  8191ac:	e037883a 	mov	sp,fp
  8191b0:	df000017 	ldw	fp,0(sp)
  8191b4:	dec00104 	addi	sp,sp,4
  8191b8:	f800283a 	ret

008191bc <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  8191bc:	defffc04 	addi	sp,sp,-16
  8191c0:	dfc00315 	stw	ra,12(sp)
  8191c4:	df000215 	stw	fp,8(sp)
  8191c8:	df000204 	addi	fp,sp,8
  8191cc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  8191d0:	e13fff17 	ldw	r4,-4(fp)
  8191d4:	014020b4 	movhi	r5,130
  8191d8:	294a7104 	addi	r5,r5,10692
  8191dc:	081ef080 	call	81ef08 <alt_find_dev>
  8191e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8191e4:	e0bffe17 	ldw	r2,-8(fp)
}
  8191e8:	e037883a 	mov	sp,fp
  8191ec:	dfc00117 	ldw	ra,4(sp)
  8191f0:	df000017 	ldw	fp,0(sp)
  8191f4:	dec00204 	addi	sp,sp,8
  8191f8:	f800283a 	ret

008191fc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  8191fc:	defff904 	addi	sp,sp,-28
  819200:	df000615 	stw	fp,24(sp)
  819204:	df000604 	addi	fp,sp,24
  819208:	e13ffb15 	stw	r4,-20(fp)
  81920c:	e17ffc15 	stw	r5,-16(fp)
  819210:	e1bffd15 	stw	r6,-12(fp)
  819214:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  819218:	e0bffb17 	ldw	r2,-20(fp)
  81921c:	10c00f17 	ldw	r3,60(r2)
  819220:	e0bffd17 	ldw	r2,-12(fp)
  819224:	10c0042e 	bgeu	r2,r3,819238 <alt_up_pixel_buffer_dma_draw+0x3c>
  819228:	e0bffb17 	ldw	r2,-20(fp)
  81922c:	10c01017 	ldw	r3,64(r2)
  819230:	e0bffe17 	ldw	r2,-8(fp)
  819234:	10c00336 	bltu	r2,r3,819244 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  819238:	00bfffc4 	movi	r2,-1
  81923c:	e0bfff15 	stw	r2,-4(fp)
  819240:	00005106 	br	819388 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  819244:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  819248:	e0bffb17 	ldw	r2,-20(fp)
  81924c:	10800d17 	ldw	r2,52(r2)
  819250:	1004c03a 	cmpne	r2,r2,zero
  819254:	1000151e 	bne	r2,zero,8192ac <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  819258:	e0bffb17 	ldw	r2,-20(fp)
  81925c:	10c01217 	ldw	r3,72(r2)
  819260:	e0bffd17 	ldw	r2,-12(fp)
  819264:	1886703a 	and	r3,r3,r2
  819268:	e0bffb17 	ldw	r2,-20(fp)
  81926c:	10801117 	ldw	r2,68(r2)
  819270:	1886983a 	sll	r3,r3,r2
  819274:	e0bffa17 	ldw	r2,-24(fp)
  819278:	10c4b03a 	or	r2,r2,r3
  81927c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  819280:	e0bffb17 	ldw	r2,-20(fp)
  819284:	10c01417 	ldw	r3,80(r2)
  819288:	e0bffe17 	ldw	r2,-8(fp)
  81928c:	1886703a 	and	r3,r3,r2
  819290:	e0bffb17 	ldw	r2,-20(fp)
  819294:	10801317 	ldw	r2,76(r2)
  819298:	1886983a 	sll	r3,r3,r2
  81929c:	e0bffa17 	ldw	r2,-24(fp)
  8192a0:	10c4b03a 	or	r2,r2,r3
  8192a4:	e0bffa15 	stw	r2,-24(fp)
  8192a8:	00001706 	br	819308 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  8192ac:	e0bffb17 	ldw	r2,-20(fp)
  8192b0:	10c01217 	ldw	r3,72(r2)
  8192b4:	e0bffd17 	ldw	r2,-12(fp)
  8192b8:	1886703a 	and	r3,r3,r2
  8192bc:	e0bffb17 	ldw	r2,-20(fp)
  8192c0:	10801117 	ldw	r2,68(r2)
  8192c4:	1886983a 	sll	r3,r3,r2
  8192c8:	e0bffa17 	ldw	r2,-24(fp)
  8192cc:	10c5883a 	add	r2,r2,r3
  8192d0:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  8192d4:	e0bffb17 	ldw	r2,-20(fp)
  8192d8:	10c01417 	ldw	r3,80(r2)
  8192dc:	e0bffe17 	ldw	r2,-8(fp)
  8192e0:	1886703a 	and	r3,r3,r2
  8192e4:	e0bffb17 	ldw	r2,-20(fp)
  8192e8:	10800f17 	ldw	r2,60(r2)
  8192ec:	1887383a 	mul	r3,r3,r2
  8192f0:	e0bffb17 	ldw	r2,-20(fp)
  8192f4:	10801117 	ldw	r2,68(r2)
  8192f8:	1886983a 	sll	r3,r3,r2
  8192fc:	e0bffa17 	ldw	r2,-24(fp)
  819300:	10c5883a 	add	r2,r2,r3
  819304:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  819308:	e0bffb17 	ldw	r2,-20(fp)
  81930c:	10800e17 	ldw	r2,56(r2)
  819310:	10800058 	cmpnei	r2,r2,1
  819314:	1000081e 	bne	r2,zero,819338 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  819318:	e0bffb17 	ldw	r2,-20(fp)
  81931c:	10800c17 	ldw	r2,48(r2)
  819320:	1007883a 	mov	r3,r2
  819324:	e0bffa17 	ldw	r2,-24(fp)
  819328:	1885883a 	add	r2,r3,r2
  81932c:	e0fffc17 	ldw	r3,-16(fp)
  819330:	10c00025 	stbio	r3,0(r2)
  819334:	00001306 	br	819384 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  819338:	e0bffb17 	ldw	r2,-20(fp)
  81933c:	10800e17 	ldw	r2,56(r2)
  819340:	10800098 	cmpnei	r2,r2,2
  819344:	1000081e 	bne	r2,zero,819368 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  819348:	e0bffb17 	ldw	r2,-20(fp)
  81934c:	10800c17 	ldw	r2,48(r2)
  819350:	1007883a 	mov	r3,r2
  819354:	e0bffa17 	ldw	r2,-24(fp)
  819358:	1885883a 	add	r2,r3,r2
  81935c:	e0fffc17 	ldw	r3,-16(fp)
  819360:	10c0002d 	sthio	r3,0(r2)
  819364:	00000706 	br	819384 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  819368:	e0bffb17 	ldw	r2,-20(fp)
  81936c:	10800c17 	ldw	r2,48(r2)
  819370:	1007883a 	mov	r3,r2
  819374:	e0bffa17 	ldw	r2,-24(fp)
  819378:	1885883a 	add	r2,r3,r2
  81937c:	e0fffc17 	ldw	r3,-16(fp)
  819380:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  819384:	e03fff15 	stw	zero,-4(fp)
  819388:	e0bfff17 	ldw	r2,-4(fp)
}
  81938c:	e037883a 	mov	sp,fp
  819390:	df000017 	ldw	fp,0(sp)
  819394:	dec00104 	addi	sp,sp,4
  819398:	f800283a 	ret

0081939c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  81939c:	defffd04 	addi	sp,sp,-12
  8193a0:	df000215 	stw	fp,8(sp)
  8193a4:	df000204 	addi	fp,sp,8
  8193a8:	e13ffe15 	stw	r4,-8(fp)
  8193ac:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  8193b0:	e0bffe17 	ldw	r2,-8(fp)
  8193b4:	10800a17 	ldw	r2,40(r2)
  8193b8:	10800104 	addi	r2,r2,4
  8193bc:	e0ffff17 	ldw	r3,-4(fp)
  8193c0:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  8193c4:	e0bffe17 	ldw	r2,-8(fp)
  8193c8:	10800a17 	ldw	r2,40(r2)
  8193cc:	10800104 	addi	r2,r2,4
  8193d0:	10800037 	ldwio	r2,0(r2)
  8193d4:	1007883a 	mov	r3,r2
  8193d8:	e0bffe17 	ldw	r2,-8(fp)
  8193dc:	10c00c15 	stw	r3,48(r2)
	return 0;
  8193e0:	0005883a 	mov	r2,zero
}
  8193e4:	e037883a 	mov	sp,fp
  8193e8:	df000017 	ldw	fp,0(sp)
  8193ec:	dec00104 	addi	sp,sp,4
  8193f0:	f800283a 	ret

008193f4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  8193f4:	defffe04 	addi	sp,sp,-8
  8193f8:	df000115 	stw	fp,4(sp)
  8193fc:	df000104 	addi	fp,sp,4
  819400:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  819404:	e0bfff17 	ldw	r2,-4(fp)
  819408:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  81940c:	e0bfff17 	ldw	r2,-4(fp)
  819410:	10800a17 	ldw	r2,40(r2)
  819414:	1007883a 	mov	r3,r2
  819418:	00800044 	movi	r2,1
  81941c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  819420:	e0bfff17 	ldw	r2,-4(fp)
  819424:	10c00b17 	ldw	r3,44(r2)
  819428:	e0bfff17 	ldw	r2,-4(fp)
  81942c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  819430:	e0bfff17 	ldw	r2,-4(fp)
  819434:	11000b15 	stw	r4,44(r2)
	return 0;
  819438:	0005883a 	mov	r2,zero
}
  81943c:	e037883a 	mov	sp,fp
  819440:	df000017 	ldw	fp,0(sp)
  819444:	dec00104 	addi	sp,sp,4
  819448:	f800283a 	ret

0081944c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  81944c:	defffe04 	addi	sp,sp,-8
  819450:	df000115 	stw	fp,4(sp)
  819454:	df000104 	addi	fp,sp,4
  819458:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  81945c:	e0bfff17 	ldw	r2,-4(fp)
  819460:	10800a17 	ldw	r2,40(r2)
  819464:	10800304 	addi	r2,r2,12
  819468:	10800037 	ldwio	r2,0(r2)
  81946c:	1080004c 	andi	r2,r2,1
}
  819470:	e037883a 	mov	sp,fp
  819474:	df000017 	ldw	fp,0(sp)
  819478:	dec00104 	addi	sp,sp,4
  81947c:	f800283a 	ret

00819480 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  819480:	defff604 	addi	sp,sp,-40
  819484:	df000915 	stw	fp,36(sp)
  819488:	df000904 	addi	fp,sp,36
  81948c:	e13ff715 	stw	r4,-36(fp)
  819490:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  819494:	e0bff817 	ldw	r2,-32(fp)
  819498:	10800058 	cmpnei	r2,r2,1
  81949c:	1000041e 	bne	r2,zero,8194b0 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  8194a0:	e0bff717 	ldw	r2,-36(fp)
  8194a4:	10800c17 	ldw	r2,48(r2)
  8194a8:	e0bfff15 	stw	r2,-4(fp)
  8194ac:	00000306 	br	8194bc <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  8194b0:	e0bff717 	ldw	r2,-36(fp)
  8194b4:	10800b17 	ldw	r2,44(r2)
  8194b8:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  8194bc:	e0bff717 	ldw	r2,-36(fp)
  8194c0:	10800f17 	ldw	r2,60(r2)
  8194c4:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8194c8:	e0bff717 	ldw	r2,-36(fp)
  8194cc:	10800e17 	ldw	r2,56(r2)
  8194d0:	10800098 	cmpnei	r2,r2,2
  8194d4:	1000051e 	bne	r2,zero,8194ec <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  8194d8:	e0fffe17 	ldw	r3,-8(fp)
  8194dc:	e0fffe17 	ldw	r3,-8(fp)
  8194e0:	18c5883a 	add	r2,r3,r3
  8194e4:	e0bffe15 	stw	r2,-8(fp)
  8194e8:	00000506 	br	819500 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  8194ec:	e13ffe17 	ldw	r4,-8(fp)
  8194f0:	e13ffe17 	ldw	r4,-8(fp)
  8194f4:	2105883a 	add	r2,r4,r4
  8194f8:	1085883a 	add	r2,r2,r2
  8194fc:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  819500:	e0bff717 	ldw	r2,-36(fp)
  819504:	10801017 	ldw	r2,64(r2)
  819508:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  81950c:	e0bff717 	ldw	r2,-36(fp)
  819510:	10800d17 	ldw	r2,52(r2)
  819514:	1004c03a 	cmpne	r2,r2,zero
  819518:	10001e1e 	bne	r2,zero,819594 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  81951c:	e0bff717 	ldw	r2,-36(fp)
  819520:	10801317 	ldw	r2,76(r2)
  819524:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  819528:	e03ffb15 	stw	zero,-20(fp)
  81952c:	00001506 	br	819584 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  819530:	e03ffc15 	stw	zero,-16(fp)
  819534:	00000706 	br	819554 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  819538:	e0ffff17 	ldw	r3,-4(fp)
  81953c:	e0bffc17 	ldw	r2,-16(fp)
  819540:	1885883a 	add	r2,r3,r2
  819544:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  819548:	e0bffc17 	ldw	r2,-16(fp)
  81954c:	10800104 	addi	r2,r2,4
  819550:	e0bffc15 	stw	r2,-16(fp)
  819554:	e0fffc17 	ldw	r3,-16(fp)
  819558:	e13ffe17 	ldw	r4,-8(fp)
  81955c:	193ff636 	bltu	r3,r4,819538 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  819560:	e0fffa17 	ldw	r3,-24(fp)
  819564:	00800044 	movi	r2,1
  819568:	10c4983a 	sll	r2,r2,r3
  81956c:	e0ffff17 	ldw	r3,-4(fp)
  819570:	1887883a 	add	r3,r3,r2
  819574:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  819578:	e13ffb17 	ldw	r4,-20(fp)
  81957c:	21000044 	addi	r4,r4,1
  819580:	e13ffb15 	stw	r4,-20(fp)
  819584:	e0bffb17 	ldw	r2,-20(fp)
  819588:	e0fffd17 	ldw	r3,-12(fp)
  81958c:	10ffe836 	bltu	r2,r3,819530 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  819590:	00001006 	br	8195d4 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  819594:	e13ffd17 	ldw	r4,-12(fp)
  819598:	e0bffe17 	ldw	r2,-8(fp)
  81959c:	2089383a 	mul	r4,r4,r2
  8195a0:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  8195a4:	e03ff915 	stw	zero,-28(fp)
  8195a8:	00000706 	br	8195c8 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  8195ac:	e0ffff17 	ldw	r3,-4(fp)
  8195b0:	e0bff917 	ldw	r2,-28(fp)
  8195b4:	1885883a 	add	r2,r3,r2
  8195b8:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  8195bc:	e0fff917 	ldw	r3,-28(fp)
  8195c0:	18c00104 	addi	r3,r3,4
  8195c4:	e0fff915 	stw	r3,-28(fp)
  8195c8:	e0bff917 	ldw	r2,-28(fp)
  8195cc:	e13ffd17 	ldw	r4,-12(fp)
  8195d0:	113ff636 	bltu	r2,r4,8195ac <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  8195d4:	e037883a 	mov	sp,fp
  8195d8:	df000017 	ldw	fp,0(sp)
  8195dc:	dec00104 	addi	sp,sp,4
  8195e0:	f800283a 	ret

008195e4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  8195e4:	deffed04 	addi	sp,sp,-76
  8195e8:	df001215 	stw	fp,72(sp)
  8195ec:	df001204 	addi	fp,sp,72
  8195f0:	e13fee15 	stw	r4,-72(fp)
  8195f4:	e17fef15 	stw	r5,-68(fp)
  8195f8:	e1bff015 	stw	r6,-64(fp)
  8195fc:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  819600:	e0bfee17 	ldw	r2,-72(fp)
  819604:	10800f17 	ldw	r2,60(r2)
  819608:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  81960c:	e0bfee17 	ldw	r2,-72(fp)
  819610:	10801017 	ldw	r2,64(r2)
  819614:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  819618:	e0bfef17 	ldw	r2,-68(fp)
  81961c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  819620:	e0fff117 	ldw	r3,-60(fp)
  819624:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  819628:	e13ff017 	ldw	r4,-64(fp)
  81962c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  819630:	e0800117 	ldw	r2,4(fp)
  819634:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  819638:	e0c00217 	ldw	r3,8(fp)
  81963c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  819640:	e13ffa17 	ldw	r4,-24(fp)
  819644:	e0bffb17 	ldw	r2,-20(fp)
  819648:	2080062e 	bgeu	r4,r2,819664 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  81964c:	e0fffb17 	ldw	r3,-20(fp)
  819650:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  819654:	e13ffa17 	ldw	r4,-24(fp)
  819658:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  81965c:	e0bffc17 	ldw	r2,-16(fp)
  819660:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  819664:	e0fff817 	ldw	r3,-32(fp)
  819668:	e13ff917 	ldw	r4,-28(fp)
  81966c:	1900062e 	bgeu	r3,r4,819688 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  819670:	e0bff917 	ldw	r2,-28(fp)
  819674:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  819678:	e0fff817 	ldw	r3,-32(fp)
  81967c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  819680:	e13ffc17 	ldw	r4,-16(fp)
  819684:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  819688:	e0bffb17 	ldw	r2,-20(fp)
  81968c:	e0fffe17 	ldw	r3,-8(fp)
  819690:	10c10d2e 	bgeu	r2,r3,819ac8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  819694:	e13ff917 	ldw	r4,-28(fp)
  819698:	e0bffd17 	ldw	r2,-12(fp)
  81969c:	20800136 	bltu	r4,r2,8196a4 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  8196a0:	00010906 	br	819ac8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  8196a4:	e0fffa17 	ldw	r3,-24(fp)
  8196a8:	e13ffe17 	ldw	r4,-8(fp)
  8196ac:	19000336 	bltu	r3,r4,8196bc <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  8196b0:	e0bffe17 	ldw	r2,-8(fp)
  8196b4:	10bfffc4 	addi	r2,r2,-1
  8196b8:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  8196bc:	e0fff817 	ldw	r3,-32(fp)
  8196c0:	e13ffd17 	ldw	r4,-12(fp)
  8196c4:	19000336 	bltu	r3,r4,8196d4 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  8196c8:	e0bffd17 	ldw	r2,-12(fp)
  8196cc:	10bfffc4 	addi	r2,r2,-1
  8196d0:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  8196d4:	e0800317 	ldw	r2,12(fp)
  8196d8:	10800058 	cmpnei	r2,r2,1
  8196dc:	1000041e 	bne	r2,zero,8196f0 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  8196e0:	e0bfee17 	ldw	r2,-72(fp)
  8196e4:	10800c17 	ldw	r2,48(r2)
  8196e8:	e0bfff15 	stw	r2,-4(fp)
  8196ec:	00000306 	br	8196fc <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  8196f0:	e0bfee17 	ldw	r2,-72(fp)
  8196f4:	10800b17 	ldw	r2,44(r2)
  8196f8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8196fc:	e0bfee17 	ldw	r2,-72(fp)
  819700:	10800d17 	ldw	r2,52(r2)
  819704:	1004c03a 	cmpne	r2,r2,zero
  819708:	1000721e 	bne	r2,zero,8198d4 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  81970c:	e0bfee17 	ldw	r2,-72(fp)
  819710:	10801317 	ldw	r2,76(r2)
  819714:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  819718:	e0bff417 	ldw	r2,-48(fp)
  81971c:	e0fff917 	ldw	r3,-28(fp)
  819720:	1884983a 	sll	r2,r3,r2
  819724:	e13fff17 	ldw	r4,-4(fp)
  819728:	2089883a 	add	r4,r4,r2
  81972c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  819730:	e0bfee17 	ldw	r2,-72(fp)
  819734:	10800e17 	ldw	r2,56(r2)
  819738:	10800058 	cmpnei	r2,r2,1
  81973c:	10001e1e 	bne	r2,zero,8197b8 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  819740:	e0bff917 	ldw	r2,-28(fp)
  819744:	e0bff515 	stw	r2,-44(fp)
  819748:	00001706 	br	8197a8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  81974c:	e0fffb17 	ldw	r3,-20(fp)
  819750:	e0fff615 	stw	r3,-40(fp)
  819754:	00000806 	br	819778 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  819758:	e0ffff17 	ldw	r3,-4(fp)
  81975c:	e0bff617 	ldw	r2,-40(fp)
  819760:	1885883a 	add	r2,r3,r2
  819764:	e0fff717 	ldw	r3,-36(fp)
  819768:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  81976c:	e13ff617 	ldw	r4,-40(fp)
  819770:	21000044 	addi	r4,r4,1
  819774:	e13ff615 	stw	r4,-40(fp)
  819778:	e0bffa17 	ldw	r2,-24(fp)
  81977c:	e0fff617 	ldw	r3,-40(fp)
  819780:	10fff52e 	bgeu	r2,r3,819758 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  819784:	e0fff417 	ldw	r3,-48(fp)
  819788:	00800044 	movi	r2,1
  81978c:	10c4983a 	sll	r2,r2,r3
  819790:	e13fff17 	ldw	r4,-4(fp)
  819794:	2089883a 	add	r4,r4,r2
  819798:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  81979c:	e0bff517 	ldw	r2,-44(fp)
  8197a0:	10800044 	addi	r2,r2,1
  8197a4:	e0bff515 	stw	r2,-44(fp)
  8197a8:	e0fff817 	ldw	r3,-32(fp)
  8197ac:	e13ff517 	ldw	r4,-44(fp)
  8197b0:	193fe62e 	bgeu	r3,r4,81974c <alt_up_pixel_buffer_dma_draw_box+0x168>
  8197b4:	0000c406 	br	819ac8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8197b8:	e0bfee17 	ldw	r2,-72(fp)
  8197bc:	10800e17 	ldw	r2,56(r2)
  8197c0:	10800098 	cmpnei	r2,r2,2
  8197c4:	1000211e 	bne	r2,zero,81984c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  8197c8:	e0bff917 	ldw	r2,-28(fp)
  8197cc:	e0bff515 	stw	r2,-44(fp)
  8197d0:	00001a06 	br	81983c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  8197d4:	e0fffb17 	ldw	r3,-20(fp)
  8197d8:	e0fff615 	stw	r3,-40(fp)
  8197dc:	00000b06 	br	81980c <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  8197e0:	e13ff617 	ldw	r4,-40(fp)
  8197e4:	e13ff617 	ldw	r4,-40(fp)
  8197e8:	2105883a 	add	r2,r4,r4
  8197ec:	1007883a 	mov	r3,r2
  8197f0:	e0bfff17 	ldw	r2,-4(fp)
  8197f4:	1885883a 	add	r2,r3,r2
  8197f8:	e0fff717 	ldw	r3,-36(fp)
  8197fc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  819800:	e0bff617 	ldw	r2,-40(fp)
  819804:	10800044 	addi	r2,r2,1
  819808:	e0bff615 	stw	r2,-40(fp)
  81980c:	e0fffa17 	ldw	r3,-24(fp)
  819810:	e13ff617 	ldw	r4,-40(fp)
  819814:	193ff22e 	bgeu	r3,r4,8197e0 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  819818:	e0fff417 	ldw	r3,-48(fp)
  81981c:	00800044 	movi	r2,1
  819820:	10c4983a 	sll	r2,r2,r3
  819824:	e0ffff17 	ldw	r3,-4(fp)
  819828:	1887883a 	add	r3,r3,r2
  81982c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  819830:	e13ff517 	ldw	r4,-44(fp)
  819834:	21000044 	addi	r4,r4,1
  819838:	e13ff515 	stw	r4,-44(fp)
  81983c:	e0bff817 	ldw	r2,-32(fp)
  819840:	e0fff517 	ldw	r3,-44(fp)
  819844:	10ffe32e 	bgeu	r2,r3,8197d4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  819848:	00009f06 	br	819ac8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  81984c:	e13ff917 	ldw	r4,-28(fp)
  819850:	e13ff515 	stw	r4,-44(fp)
  819854:	00001b06 	br	8198c4 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  819858:	e0bffb17 	ldw	r2,-20(fp)
  81985c:	e0bff615 	stw	r2,-40(fp)
  819860:	00000c06 	br	819894 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  819864:	e0fff617 	ldw	r3,-40(fp)
  819868:	e0fff617 	ldw	r3,-40(fp)
  81986c:	18c5883a 	add	r2,r3,r3
  819870:	1085883a 	add	r2,r2,r2
  819874:	1007883a 	mov	r3,r2
  819878:	e0bfff17 	ldw	r2,-4(fp)
  81987c:	1885883a 	add	r2,r3,r2
  819880:	e0fff717 	ldw	r3,-36(fp)
  819884:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  819888:	e13ff617 	ldw	r4,-40(fp)
  81988c:	21000044 	addi	r4,r4,1
  819890:	e13ff615 	stw	r4,-40(fp)
  819894:	e0bffa17 	ldw	r2,-24(fp)
  819898:	e0fff617 	ldw	r3,-40(fp)
  81989c:	10fff12e 	bgeu	r2,r3,819864 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  8198a0:	e0fff417 	ldw	r3,-48(fp)
  8198a4:	00800044 	movi	r2,1
  8198a8:	10c4983a 	sll	r2,r2,r3
  8198ac:	e13fff17 	ldw	r4,-4(fp)
  8198b0:	2089883a 	add	r4,r4,r2
  8198b4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8198b8:	e0bff517 	ldw	r2,-44(fp)
  8198bc:	10800044 	addi	r2,r2,1
  8198c0:	e0bff515 	stw	r2,-44(fp)
  8198c4:	e0fff817 	ldw	r3,-32(fp)
  8198c8:	e13ff517 	ldw	r4,-44(fp)
  8198cc:	193fe22e 	bgeu	r3,r4,819858 <alt_up_pixel_buffer_dma_draw_box+0x274>
  8198d0:	00007d06 	br	819ac8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8198d4:	e0bfee17 	ldw	r2,-72(fp)
  8198d8:	10800e17 	ldw	r2,56(r2)
  8198dc:	10800058 	cmpnei	r2,r2,1
  8198e0:	1000221e 	bne	r2,zero,81996c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  8198e4:	e0fff917 	ldw	r3,-28(fp)
  8198e8:	e13ffe17 	ldw	r4,-8(fp)
  8198ec:	1905383a 	mul	r2,r3,r4
  8198f0:	e0ffff17 	ldw	r3,-4(fp)
  8198f4:	1887883a 	add	r3,r3,r2
  8198f8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8198fc:	e13ff917 	ldw	r4,-28(fp)
  819900:	e13ff215 	stw	r4,-56(fp)
  819904:	00001506 	br	81995c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  819908:	e0bffb17 	ldw	r2,-20(fp)
  81990c:	e0bff315 	stw	r2,-52(fp)
  819910:	00000806 	br	819934 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  819914:	e0ffff17 	ldw	r3,-4(fp)
  819918:	e0bff317 	ldw	r2,-52(fp)
  81991c:	1885883a 	add	r2,r3,r2
  819920:	e0fff717 	ldw	r3,-36(fp)
  819924:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  819928:	e0fff317 	ldw	r3,-52(fp)
  81992c:	18c00044 	addi	r3,r3,1
  819930:	e0fff315 	stw	r3,-52(fp)
  819934:	e13ffa17 	ldw	r4,-24(fp)
  819938:	e0bff317 	ldw	r2,-52(fp)
  81993c:	20bff52e 	bgeu	r4,r2,819914 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  819940:	e0ffff17 	ldw	r3,-4(fp)
  819944:	e13ffe17 	ldw	r4,-8(fp)
  819948:	1907883a 	add	r3,r3,r4
  81994c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  819950:	e0bff217 	ldw	r2,-56(fp)
  819954:	10800044 	addi	r2,r2,1
  819958:	e0bff215 	stw	r2,-56(fp)
  81995c:	e0fff817 	ldw	r3,-32(fp)
  819960:	e13ff217 	ldw	r4,-56(fp)
  819964:	193fe82e 	bgeu	r3,r4,819908 <alt_up_pixel_buffer_dma_draw_box+0x324>
  819968:	00005706 	br	819ac8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  81996c:	e0bfee17 	ldw	r2,-72(fp)
  819970:	10800e17 	ldw	r2,56(r2)
  819974:	10800098 	cmpnei	r2,r2,2
  819978:	1000291e 	bne	r2,zero,819a20 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  81997c:	e0fffe17 	ldw	r3,-8(fp)
  819980:	e0fffe17 	ldw	r3,-8(fp)
  819984:	18c5883a 	add	r2,r3,r3
  819988:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  81998c:	e13ff917 	ldw	r4,-28(fp)
  819990:	e0fffe17 	ldw	r3,-8(fp)
  819994:	20c5383a 	mul	r2,r4,r3
  819998:	e13fff17 	ldw	r4,-4(fp)
  81999c:	2089883a 	add	r4,r4,r2
  8199a0:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8199a4:	e0bff917 	ldw	r2,-28(fp)
  8199a8:	e0bff215 	stw	r2,-56(fp)
  8199ac:	00001806 	br	819a10 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  8199b0:	e0fffb17 	ldw	r3,-20(fp)
  8199b4:	e0fff315 	stw	r3,-52(fp)
  8199b8:	00000b06 	br	8199e8 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  8199bc:	e13ff317 	ldw	r4,-52(fp)
  8199c0:	e13ff317 	ldw	r4,-52(fp)
  8199c4:	2105883a 	add	r2,r4,r4
  8199c8:	1007883a 	mov	r3,r2
  8199cc:	e0bfff17 	ldw	r2,-4(fp)
  8199d0:	1885883a 	add	r2,r3,r2
  8199d4:	e0fff717 	ldw	r3,-36(fp)
  8199d8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8199dc:	e0bff317 	ldw	r2,-52(fp)
  8199e0:	10800044 	addi	r2,r2,1
  8199e4:	e0bff315 	stw	r2,-52(fp)
  8199e8:	e0fffa17 	ldw	r3,-24(fp)
  8199ec:	e13ff317 	ldw	r4,-52(fp)
  8199f0:	193ff22e 	bgeu	r3,r4,8199bc <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  8199f4:	e0bfff17 	ldw	r2,-4(fp)
  8199f8:	e0fffe17 	ldw	r3,-8(fp)
  8199fc:	10c5883a 	add	r2,r2,r3
  819a00:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  819a04:	e13ff217 	ldw	r4,-56(fp)
  819a08:	21000044 	addi	r4,r4,1
  819a0c:	e13ff215 	stw	r4,-56(fp)
  819a10:	e0bff817 	ldw	r2,-32(fp)
  819a14:	e0fff217 	ldw	r3,-56(fp)
  819a18:	10ffe52e 	bgeu	r2,r3,8199b0 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  819a1c:	00002a06 	br	819ac8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  819a20:	e13ffe17 	ldw	r4,-8(fp)
  819a24:	e13ffe17 	ldw	r4,-8(fp)
  819a28:	2105883a 	add	r2,r4,r4
  819a2c:	1085883a 	add	r2,r2,r2
  819a30:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  819a34:	e0fff917 	ldw	r3,-28(fp)
  819a38:	e13ffe17 	ldw	r4,-8(fp)
  819a3c:	1905383a 	mul	r2,r3,r4
  819a40:	e0ffff17 	ldw	r3,-4(fp)
  819a44:	1887883a 	add	r3,r3,r2
  819a48:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  819a4c:	e13ff917 	ldw	r4,-28(fp)
  819a50:	e13ff215 	stw	r4,-56(fp)
  819a54:	00001906 	br	819abc <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  819a58:	e0bffb17 	ldw	r2,-20(fp)
  819a5c:	e0bff315 	stw	r2,-52(fp)
  819a60:	00000c06 	br	819a94 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  819a64:	e0fff317 	ldw	r3,-52(fp)
  819a68:	e0fff317 	ldw	r3,-52(fp)
  819a6c:	18c5883a 	add	r2,r3,r3
  819a70:	1085883a 	add	r2,r2,r2
  819a74:	1007883a 	mov	r3,r2
  819a78:	e0bfff17 	ldw	r2,-4(fp)
  819a7c:	1885883a 	add	r2,r3,r2
  819a80:	e0fff717 	ldw	r3,-36(fp)
  819a84:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  819a88:	e13ff317 	ldw	r4,-52(fp)
  819a8c:	21000044 	addi	r4,r4,1
  819a90:	e13ff315 	stw	r4,-52(fp)
  819a94:	e0bffa17 	ldw	r2,-24(fp)
  819a98:	e0fff317 	ldw	r3,-52(fp)
  819a9c:	10fff12e 	bgeu	r2,r3,819a64 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  819aa0:	e13fff17 	ldw	r4,-4(fp)
  819aa4:	e0bffe17 	ldw	r2,-8(fp)
  819aa8:	2089883a 	add	r4,r4,r2
  819aac:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  819ab0:	e0fff217 	ldw	r3,-56(fp)
  819ab4:	18c00044 	addi	r3,r3,1
  819ab8:	e0fff215 	stw	r3,-56(fp)
  819abc:	e13ff817 	ldw	r4,-32(fp)
  819ac0:	e0bff217 	ldw	r2,-56(fp)
  819ac4:	20bfe42e 	bgeu	r4,r2,819a58 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  819ac8:	e037883a 	mov	sp,fp
  819acc:	df000017 	ldw	fp,0(sp)
  819ad0:	dec00104 	addi	sp,sp,4
  819ad4:	f800283a 	ret

00819ad8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  819ad8:	defff204 	addi	sp,sp,-56
  819adc:	df000d15 	stw	fp,52(sp)
  819ae0:	df000d04 	addi	fp,sp,52
  819ae4:	e13ff315 	stw	r4,-52(fp)
  819ae8:	e17ff415 	stw	r5,-48(fp)
  819aec:	e1bff515 	stw	r6,-44(fp)
  819af0:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  819af4:	e0bff317 	ldw	r2,-52(fp)
  819af8:	10800f17 	ldw	r2,60(r2)
  819afc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  819b00:	e0bff317 	ldw	r2,-52(fp)
  819b04:	10801017 	ldw	r2,64(r2)
  819b08:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  819b0c:	e0bff417 	ldw	r2,-48(fp)
  819b10:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  819b14:	e0fff517 	ldw	r3,-44(fp)
  819b18:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  819b1c:	e13ff617 	ldw	r4,-40(fp)
  819b20:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  819b24:	e0800117 	ldw	r2,4(fp)
  819b28:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  819b2c:	e0fffb17 	ldw	r3,-20(fp)
  819b30:	e13ffc17 	ldw	r4,-16(fp)
  819b34:	1900042e 	bgeu	r3,r4,819b48 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  819b38:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  819b3c:	e0fffb17 	ldw	r3,-20(fp)
  819b40:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  819b44:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  819b48:	e13ffc17 	ldw	r4,-16(fp)
  819b4c:	e0bffe17 	ldw	r2,-8(fp)
  819b50:	2080b12e 	bgeu	r4,r2,819e18 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  819b54:	e0fffa17 	ldw	r3,-24(fp)
  819b58:	e13ffd17 	ldw	r4,-12(fp)
  819b5c:	19000136 	bltu	r3,r4,819b64 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  819b60:	0000ad06 	br	819e18 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  819b64:	e0bffb17 	ldw	r2,-20(fp)
  819b68:	e0fffe17 	ldw	r3,-8(fp)
  819b6c:	10c00336 	bltu	r2,r3,819b7c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  819b70:	e13ffe17 	ldw	r4,-8(fp)
  819b74:	213fffc4 	addi	r4,r4,-1
  819b78:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  819b7c:	e0800217 	ldw	r2,8(fp)
  819b80:	10800058 	cmpnei	r2,r2,1
  819b84:	1000041e 	bne	r2,zero,819b98 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  819b88:	e0bff317 	ldw	r2,-52(fp)
  819b8c:	10800c17 	ldw	r2,48(r2)
  819b90:	e0bfff15 	stw	r2,-4(fp)
  819b94:	00000306 	br	819ba4 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  819b98:	e0bff317 	ldw	r2,-52(fp)
  819b9c:	10800b17 	ldw	r2,44(r2)
  819ba0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  819ba4:	e0bff317 	ldw	r2,-52(fp)
  819ba8:	10800d17 	ldw	r2,52(r2)
  819bac:	1004c03a 	cmpne	r2,r2,zero
  819bb0:	1000431e 	bne	r2,zero,819cc0 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  819bb4:	e0bff317 	ldw	r2,-52(fp)
  819bb8:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  819bbc:	e0fffa17 	ldw	r3,-24(fp)
  819bc0:	1884983a 	sll	r2,r3,r2
  819bc4:	e13fff17 	ldw	r4,-4(fp)
  819bc8:	2089883a 	add	r4,r4,r2
  819bcc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  819bd0:	e0bff317 	ldw	r2,-52(fp)
  819bd4:	10800e17 	ldw	r2,56(r2)
  819bd8:	10800058 	cmpnei	r2,r2,1
  819bdc:	10000f1e 	bne	r2,zero,819c1c <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  819be0:	e0bffc17 	ldw	r2,-16(fp)
  819be4:	e0bff815 	stw	r2,-32(fp)
  819be8:	00000806 	br	819c0c <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  819bec:	e0ffff17 	ldw	r3,-4(fp)
  819bf0:	e0bff817 	ldw	r2,-32(fp)
  819bf4:	1885883a 	add	r2,r3,r2
  819bf8:	e0fff917 	ldw	r3,-28(fp)
  819bfc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  819c00:	e0fff817 	ldw	r3,-32(fp)
  819c04:	18c00044 	addi	r3,r3,1
  819c08:	e0fff815 	stw	r3,-32(fp)
  819c0c:	e13ffb17 	ldw	r4,-20(fp)
  819c10:	e0bff817 	ldw	r2,-32(fp)
  819c14:	20bff52e 	bgeu	r4,r2,819bec <alt_up_pixel_buffer_dma_draw_hline+0x114>
  819c18:	00007f06 	br	819e18 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  819c1c:	e0bff317 	ldw	r2,-52(fp)
  819c20:	10800e17 	ldw	r2,56(r2)
  819c24:	10800098 	cmpnei	r2,r2,2
  819c28:	1000121e 	bne	r2,zero,819c74 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  819c2c:	e0fffc17 	ldw	r3,-16(fp)
  819c30:	e0fff815 	stw	r3,-32(fp)
  819c34:	00000b06 	br	819c64 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  819c38:	e13ff817 	ldw	r4,-32(fp)
  819c3c:	e13ff817 	ldw	r4,-32(fp)
  819c40:	2105883a 	add	r2,r4,r4
  819c44:	1007883a 	mov	r3,r2
  819c48:	e0bfff17 	ldw	r2,-4(fp)
  819c4c:	1885883a 	add	r2,r3,r2
  819c50:	e0fff917 	ldw	r3,-28(fp)
  819c54:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  819c58:	e0bff817 	ldw	r2,-32(fp)
  819c5c:	10800044 	addi	r2,r2,1
  819c60:	e0bff815 	stw	r2,-32(fp)
  819c64:	e0fffb17 	ldw	r3,-20(fp)
  819c68:	e13ff817 	ldw	r4,-32(fp)
  819c6c:	193ff22e 	bgeu	r3,r4,819c38 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  819c70:	00006906 	br	819e18 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  819c74:	e0bffc17 	ldw	r2,-16(fp)
  819c78:	e0bff815 	stw	r2,-32(fp)
  819c7c:	00000c06 	br	819cb0 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  819c80:	e0fff817 	ldw	r3,-32(fp)
  819c84:	e0fff817 	ldw	r3,-32(fp)
  819c88:	18c5883a 	add	r2,r3,r3
  819c8c:	1085883a 	add	r2,r2,r2
  819c90:	1007883a 	mov	r3,r2
  819c94:	e0bfff17 	ldw	r2,-4(fp)
  819c98:	1885883a 	add	r2,r3,r2
  819c9c:	e0fff917 	ldw	r3,-28(fp)
  819ca0:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  819ca4:	e13ff817 	ldw	r4,-32(fp)
  819ca8:	21000044 	addi	r4,r4,1
  819cac:	e13ff815 	stw	r4,-32(fp)
  819cb0:	e0bffb17 	ldw	r2,-20(fp)
  819cb4:	e0fff817 	ldw	r3,-32(fp)
  819cb8:	10fff12e 	bgeu	r2,r3,819c80 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  819cbc:	00005606 	br	819e18 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  819cc0:	e0bff317 	ldw	r2,-52(fp)
  819cc4:	10800e17 	ldw	r2,56(r2)
  819cc8:	10800058 	cmpnei	r2,r2,1
  819ccc:	1000151e 	bne	r2,zero,819d24 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  819cd0:	e13ffa17 	ldw	r4,-24(fp)
  819cd4:	e0fffe17 	ldw	r3,-8(fp)
  819cd8:	20c5383a 	mul	r2,r4,r3
  819cdc:	e13fff17 	ldw	r4,-4(fp)
  819ce0:	2089883a 	add	r4,r4,r2
  819ce4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  819ce8:	e0bffc17 	ldw	r2,-16(fp)
  819cec:	e0bff715 	stw	r2,-36(fp)
  819cf0:	00000806 	br	819d14 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  819cf4:	e0ffff17 	ldw	r3,-4(fp)
  819cf8:	e0bff717 	ldw	r2,-36(fp)
  819cfc:	1885883a 	add	r2,r3,r2
  819d00:	e0fff917 	ldw	r3,-28(fp)
  819d04:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  819d08:	e0fff717 	ldw	r3,-36(fp)
  819d0c:	18c00044 	addi	r3,r3,1
  819d10:	e0fff715 	stw	r3,-36(fp)
  819d14:	e13ffb17 	ldw	r4,-20(fp)
  819d18:	e0bff717 	ldw	r2,-36(fp)
  819d1c:	20bff52e 	bgeu	r4,r2,819cf4 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  819d20:	00003d06 	br	819e18 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  819d24:	e0bff317 	ldw	r2,-52(fp)
  819d28:	10800e17 	ldw	r2,56(r2)
  819d2c:	10800098 	cmpnei	r2,r2,2
  819d30:	10001c1e 	bne	r2,zero,819da4 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  819d34:	e0fffe17 	ldw	r3,-8(fp)
  819d38:	e0fffe17 	ldw	r3,-8(fp)
  819d3c:	18c5883a 	add	r2,r3,r3
  819d40:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  819d44:	e13ffa17 	ldw	r4,-24(fp)
  819d48:	e0fffe17 	ldw	r3,-8(fp)
  819d4c:	20c5383a 	mul	r2,r4,r3
  819d50:	e13fff17 	ldw	r4,-4(fp)
  819d54:	2089883a 	add	r4,r4,r2
  819d58:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  819d5c:	e0bffc17 	ldw	r2,-16(fp)
  819d60:	e0bff715 	stw	r2,-36(fp)
  819d64:	00000b06 	br	819d94 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  819d68:	e0fff717 	ldw	r3,-36(fp)
  819d6c:	e0fff717 	ldw	r3,-36(fp)
  819d70:	18c5883a 	add	r2,r3,r3
  819d74:	1007883a 	mov	r3,r2
  819d78:	e0bfff17 	ldw	r2,-4(fp)
  819d7c:	1885883a 	add	r2,r3,r2
  819d80:	e0fff917 	ldw	r3,-28(fp)
  819d84:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  819d88:	e13ff717 	ldw	r4,-36(fp)
  819d8c:	21000044 	addi	r4,r4,1
  819d90:	e13ff715 	stw	r4,-36(fp)
  819d94:	e0bffb17 	ldw	r2,-20(fp)
  819d98:	e0fff717 	ldw	r3,-36(fp)
  819d9c:	10fff22e 	bgeu	r2,r3,819d68 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  819da0:	00001d06 	br	819e18 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  819da4:	e13ffe17 	ldw	r4,-8(fp)
  819da8:	e13ffe17 	ldw	r4,-8(fp)
  819dac:	2105883a 	add	r2,r4,r4
  819db0:	1085883a 	add	r2,r2,r2
  819db4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  819db8:	e0fffa17 	ldw	r3,-24(fp)
  819dbc:	e13ffe17 	ldw	r4,-8(fp)
  819dc0:	1905383a 	mul	r2,r3,r4
  819dc4:	e0ffff17 	ldw	r3,-4(fp)
  819dc8:	1887883a 	add	r3,r3,r2
  819dcc:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  819dd0:	e13ffc17 	ldw	r4,-16(fp)
  819dd4:	e13ff715 	stw	r4,-36(fp)
  819dd8:	00000c06 	br	819e0c <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  819ddc:	e0fff717 	ldw	r3,-36(fp)
  819de0:	e0fff717 	ldw	r3,-36(fp)
  819de4:	18c5883a 	add	r2,r3,r3
  819de8:	1085883a 	add	r2,r2,r2
  819dec:	1007883a 	mov	r3,r2
  819df0:	e0bfff17 	ldw	r2,-4(fp)
  819df4:	1885883a 	add	r2,r3,r2
  819df8:	e0fff917 	ldw	r3,-28(fp)
  819dfc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  819e00:	e13ff717 	ldw	r4,-36(fp)
  819e04:	21000044 	addi	r4,r4,1
  819e08:	e13ff715 	stw	r4,-36(fp)
  819e0c:	e0bffb17 	ldw	r2,-20(fp)
  819e10:	e0fff717 	ldw	r3,-36(fp)
  819e14:	10fff12e 	bgeu	r2,r3,819ddc <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  819e18:	e037883a 	mov	sp,fp
  819e1c:	df000017 	ldw	fp,0(sp)
  819e20:	dec00104 	addi	sp,sp,4
  819e24:	f800283a 	ret

00819e28 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  819e28:	defff104 	addi	sp,sp,-60
  819e2c:	df000e15 	stw	fp,56(sp)
  819e30:	df000e04 	addi	fp,sp,56
  819e34:	e13ff215 	stw	r4,-56(fp)
  819e38:	e17ff315 	stw	r5,-52(fp)
  819e3c:	e1bff415 	stw	r6,-48(fp)
  819e40:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  819e44:	e0bff217 	ldw	r2,-56(fp)
  819e48:	10800f17 	ldw	r2,60(r2)
  819e4c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  819e50:	e0bff217 	ldw	r2,-56(fp)
  819e54:	10801017 	ldw	r2,64(r2)
  819e58:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  819e5c:	e0bff317 	ldw	r2,-52(fp)
  819e60:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  819e64:	e0fff417 	ldw	r3,-48(fp)
  819e68:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  819e6c:	e13ff517 	ldw	r4,-44(fp)
  819e70:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  819e74:	e0800117 	ldw	r2,4(fp)
  819e78:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  819e7c:	e0fffa17 	ldw	r3,-24(fp)
  819e80:	e13ffb17 	ldw	r4,-20(fp)
  819e84:	1900042e 	bgeu	r3,r4,819e98 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  819e88:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  819e8c:	e0fffa17 	ldw	r3,-24(fp)
  819e90:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  819e94:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  819e98:	e13ffc17 	ldw	r4,-16(fp)
  819e9c:	e0bffe17 	ldw	r2,-8(fp)
  819ea0:	2080d12e 	bgeu	r4,r2,81a1e8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  819ea4:	e0fffb17 	ldw	r3,-20(fp)
  819ea8:	e13ffd17 	ldw	r4,-12(fp)
  819eac:	19000136 	bltu	r3,r4,819eb4 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  819eb0:	0000cd06 	br	81a1e8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  819eb4:	e0bffa17 	ldw	r2,-24(fp)
  819eb8:	e0fffd17 	ldw	r3,-12(fp)
  819ebc:	10c00336 	bltu	r2,r3,819ecc <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  819ec0:	e13ffd17 	ldw	r4,-12(fp)
  819ec4:	213fffc4 	addi	r4,r4,-1
  819ec8:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  819ecc:	e0800217 	ldw	r2,8(fp)
  819ed0:	10800058 	cmpnei	r2,r2,1
  819ed4:	1000041e 	bne	r2,zero,819ee8 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  819ed8:	e0bff217 	ldw	r2,-56(fp)
  819edc:	10800c17 	ldw	r2,48(r2)
  819ee0:	e0bfff15 	stw	r2,-4(fp)
  819ee4:	00000306 	br	819ef4 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  819ee8:	e0bff217 	ldw	r2,-56(fp)
  819eec:	10800b17 	ldw	r2,44(r2)
  819ef0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  819ef4:	e0bff217 	ldw	r2,-56(fp)
  819ef8:	10800d17 	ldw	r2,52(r2)
  819efc:	1004c03a 	cmpne	r2,r2,zero
  819f00:	1000571e 	bne	r2,zero,81a060 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  819f04:	e0bff217 	ldw	r2,-56(fp)
  819f08:	10801317 	ldw	r2,76(r2)
  819f0c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  819f10:	e0bff717 	ldw	r2,-36(fp)
  819f14:	e0fffb17 	ldw	r3,-20(fp)
  819f18:	1884983a 	sll	r2,r3,r2
  819f1c:	e13fff17 	ldw	r4,-4(fp)
  819f20:	2089883a 	add	r4,r4,r2
  819f24:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  819f28:	e0bff217 	ldw	r2,-56(fp)
  819f2c:	10800e17 	ldw	r2,56(r2)
  819f30:	10800058 	cmpnei	r2,r2,1
  819f34:	1000151e 	bne	r2,zero,819f8c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  819f38:	e0bffb17 	ldw	r2,-20(fp)
  819f3c:	e0bff815 	stw	r2,-32(fp)
  819f40:	00000e06 	br	819f7c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  819f44:	e0ffff17 	ldw	r3,-4(fp)
  819f48:	e0bffc17 	ldw	r2,-16(fp)
  819f4c:	1885883a 	add	r2,r3,r2
  819f50:	e0fff917 	ldw	r3,-28(fp)
  819f54:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  819f58:	e0fff717 	ldw	r3,-36(fp)
  819f5c:	00800044 	movi	r2,1
  819f60:	10c4983a 	sll	r2,r2,r3
  819f64:	e0ffff17 	ldw	r3,-4(fp)
  819f68:	1887883a 	add	r3,r3,r2
  819f6c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  819f70:	e13ff817 	ldw	r4,-32(fp)
  819f74:	21000044 	addi	r4,r4,1
  819f78:	e13ff815 	stw	r4,-32(fp)
  819f7c:	e0bffa17 	ldw	r2,-24(fp)
  819f80:	e0fff817 	ldw	r3,-32(fp)
  819f84:	10ffef2e 	bgeu	r2,r3,819f44 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  819f88:	00009706 	br	81a1e8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  819f8c:	e0bff217 	ldw	r2,-56(fp)
  819f90:	10800e17 	ldw	r2,56(r2)
  819f94:	10800098 	cmpnei	r2,r2,2
  819f98:	1000181e 	bne	r2,zero,819ffc <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  819f9c:	e13ffb17 	ldw	r4,-20(fp)
  819fa0:	e13ff815 	stw	r4,-32(fp)
  819fa4:	00001106 	br	819fec <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  819fa8:	e0fffc17 	ldw	r3,-16(fp)
  819fac:	e0fffc17 	ldw	r3,-16(fp)
  819fb0:	18c5883a 	add	r2,r3,r3
  819fb4:	1007883a 	mov	r3,r2
  819fb8:	e0bfff17 	ldw	r2,-4(fp)
  819fbc:	1885883a 	add	r2,r3,r2
  819fc0:	e0fff917 	ldw	r3,-28(fp)
  819fc4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  819fc8:	e0fff717 	ldw	r3,-36(fp)
  819fcc:	00800044 	movi	r2,1
  819fd0:	10c4983a 	sll	r2,r2,r3
  819fd4:	e13fff17 	ldw	r4,-4(fp)
  819fd8:	2089883a 	add	r4,r4,r2
  819fdc:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  819fe0:	e0bff817 	ldw	r2,-32(fp)
  819fe4:	10800044 	addi	r2,r2,1
  819fe8:	e0bff815 	stw	r2,-32(fp)
  819fec:	e0fffa17 	ldw	r3,-24(fp)
  819ff0:	e13ff817 	ldw	r4,-32(fp)
  819ff4:	193fec2e 	bgeu	r3,r4,819fa8 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  819ff8:	00007b06 	br	81a1e8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  819ffc:	e0bffb17 	ldw	r2,-20(fp)
  81a000:	e0bff815 	stw	r2,-32(fp)
  81a004:	00001206 	br	81a050 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  81a008:	e0fffc17 	ldw	r3,-16(fp)
  81a00c:	e0fffc17 	ldw	r3,-16(fp)
  81a010:	18c5883a 	add	r2,r3,r3
  81a014:	1085883a 	add	r2,r2,r2
  81a018:	1007883a 	mov	r3,r2
  81a01c:	e0bfff17 	ldw	r2,-4(fp)
  81a020:	1885883a 	add	r2,r3,r2
  81a024:	e0fff917 	ldw	r3,-28(fp)
  81a028:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  81a02c:	e0fff717 	ldw	r3,-36(fp)
  81a030:	00800044 	movi	r2,1
  81a034:	10c4983a 	sll	r2,r2,r3
  81a038:	e13fff17 	ldw	r4,-4(fp)
  81a03c:	2089883a 	add	r4,r4,r2
  81a040:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  81a044:	e0bff817 	ldw	r2,-32(fp)
  81a048:	10800044 	addi	r2,r2,1
  81a04c:	e0bff815 	stw	r2,-32(fp)
  81a050:	e0fffa17 	ldw	r3,-24(fp)
  81a054:	e13ff817 	ldw	r4,-32(fp)
  81a058:	193feb2e 	bgeu	r3,r4,81a008 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  81a05c:	00006206 	br	81a1e8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  81a060:	e0bff217 	ldw	r2,-56(fp)
  81a064:	10800e17 	ldw	r2,56(r2)
  81a068:	10800058 	cmpnei	r2,r2,1
  81a06c:	1000191e 	bne	r2,zero,81a0d4 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  81a070:	e0fffb17 	ldw	r3,-20(fp)
  81a074:	e13ffe17 	ldw	r4,-8(fp)
  81a078:	1905383a 	mul	r2,r3,r4
  81a07c:	e0ffff17 	ldw	r3,-4(fp)
  81a080:	1887883a 	add	r3,r3,r2
  81a084:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  81a088:	e13ffb17 	ldw	r4,-20(fp)
  81a08c:	e13ff615 	stw	r4,-40(fp)
  81a090:	00000c06 	br	81a0c4 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  81a094:	e0ffff17 	ldw	r3,-4(fp)
  81a098:	e0bffc17 	ldw	r2,-16(fp)
  81a09c:	1885883a 	add	r2,r3,r2
  81a0a0:	e0fff917 	ldw	r3,-28(fp)
  81a0a4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  81a0a8:	e0bfff17 	ldw	r2,-4(fp)
  81a0ac:	e0fffe17 	ldw	r3,-8(fp)
  81a0b0:	10c5883a 	add	r2,r2,r3
  81a0b4:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  81a0b8:	e13ff617 	ldw	r4,-40(fp)
  81a0bc:	21000044 	addi	r4,r4,1
  81a0c0:	e13ff615 	stw	r4,-40(fp)
  81a0c4:	e0bffa17 	ldw	r2,-24(fp)
  81a0c8:	e0fff617 	ldw	r3,-40(fp)
  81a0cc:	10fff12e 	bgeu	r2,r3,81a094 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  81a0d0:	00004506 	br	81a1e8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  81a0d4:	e0bff217 	ldw	r2,-56(fp)
  81a0d8:	10800e17 	ldw	r2,56(r2)
  81a0dc:	10800098 	cmpnei	r2,r2,2
  81a0e0:	1000201e 	bne	r2,zero,81a164 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  81a0e4:	e13ffe17 	ldw	r4,-8(fp)
  81a0e8:	e13ffe17 	ldw	r4,-8(fp)
  81a0ec:	2105883a 	add	r2,r4,r4
  81a0f0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  81a0f4:	e0fffb17 	ldw	r3,-20(fp)
  81a0f8:	e13ffe17 	ldw	r4,-8(fp)
  81a0fc:	1905383a 	mul	r2,r3,r4
  81a100:	e0ffff17 	ldw	r3,-4(fp)
  81a104:	1887883a 	add	r3,r3,r2
  81a108:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  81a10c:	e13ffb17 	ldw	r4,-20(fp)
  81a110:	e13ff615 	stw	r4,-40(fp)
  81a114:	00000f06 	br	81a154 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  81a118:	e0fffc17 	ldw	r3,-16(fp)
  81a11c:	e0fffc17 	ldw	r3,-16(fp)
  81a120:	18c5883a 	add	r2,r3,r3
  81a124:	1007883a 	mov	r3,r2
  81a128:	e0bfff17 	ldw	r2,-4(fp)
  81a12c:	1885883a 	add	r2,r3,r2
  81a130:	e0fff917 	ldw	r3,-28(fp)
  81a134:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  81a138:	e13fff17 	ldw	r4,-4(fp)
  81a13c:	e0bffe17 	ldw	r2,-8(fp)
  81a140:	2089883a 	add	r4,r4,r2
  81a144:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  81a148:	e0fff617 	ldw	r3,-40(fp)
  81a14c:	18c00044 	addi	r3,r3,1
  81a150:	e0fff615 	stw	r3,-40(fp)
  81a154:	e13ffa17 	ldw	r4,-24(fp)
  81a158:	e0bff617 	ldw	r2,-40(fp)
  81a15c:	20bfee2e 	bgeu	r4,r2,81a118 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  81a160:	00002106 	br	81a1e8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  81a164:	e0fffe17 	ldw	r3,-8(fp)
  81a168:	e0fffe17 	ldw	r3,-8(fp)
  81a16c:	18c5883a 	add	r2,r3,r3
  81a170:	1085883a 	add	r2,r2,r2
  81a174:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  81a178:	e13ffb17 	ldw	r4,-20(fp)
  81a17c:	e0fffe17 	ldw	r3,-8(fp)
  81a180:	20c5383a 	mul	r2,r4,r3
  81a184:	e13fff17 	ldw	r4,-4(fp)
  81a188:	2089883a 	add	r4,r4,r2
  81a18c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  81a190:	e0bffb17 	ldw	r2,-20(fp)
  81a194:	e0bff615 	stw	r2,-40(fp)
  81a198:	00001006 	br	81a1dc <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  81a19c:	e0fffc17 	ldw	r3,-16(fp)
  81a1a0:	e0fffc17 	ldw	r3,-16(fp)
  81a1a4:	18c5883a 	add	r2,r3,r3
  81a1a8:	1085883a 	add	r2,r2,r2
  81a1ac:	1007883a 	mov	r3,r2
  81a1b0:	e0bfff17 	ldw	r2,-4(fp)
  81a1b4:	1885883a 	add	r2,r3,r2
  81a1b8:	e0fff917 	ldw	r3,-28(fp)
  81a1bc:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  81a1c0:	e13fff17 	ldw	r4,-4(fp)
  81a1c4:	e0bffe17 	ldw	r2,-8(fp)
  81a1c8:	2089883a 	add	r4,r4,r2
  81a1cc:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  81a1d0:	e0fff617 	ldw	r3,-40(fp)
  81a1d4:	18c00044 	addi	r3,r3,1
  81a1d8:	e0fff615 	stw	r3,-40(fp)
  81a1dc:	e13ffa17 	ldw	r4,-24(fp)
  81a1e0:	e0bff617 	ldw	r2,-40(fp)
  81a1e4:	20bfed2e 	bgeu	r4,r2,81a19c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  81a1e8:	e037883a 	mov	sp,fp
  81a1ec:	df000017 	ldw	fp,0(sp)
  81a1f0:	dec00104 	addi	sp,sp,4
  81a1f4:	f800283a 	ret

0081a1f8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  81a1f8:	defff804 	addi	sp,sp,-32
  81a1fc:	dfc00715 	stw	ra,28(sp)
  81a200:	df000615 	stw	fp,24(sp)
  81a204:	df000604 	addi	fp,sp,24
  81a208:	e13ffc15 	stw	r4,-16(fp)
  81a20c:	e17ffd15 	stw	r5,-12(fp)
  81a210:	e1bffe15 	stw	r6,-8(fp)
  81a214:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  81a218:	e0800317 	ldw	r2,12(fp)
  81a21c:	d8800015 	stw	r2,0(sp)
  81a220:	e0800417 	ldw	r2,16(fp)
  81a224:	d8800115 	stw	r2,4(sp)
  81a228:	e13ffc17 	ldw	r4,-16(fp)
  81a22c:	e17ffd17 	ldw	r5,-12(fp)
  81a230:	e1bfff17 	ldw	r6,-4(fp)
  81a234:	e1fffe17 	ldw	r7,-8(fp)
  81a238:	0819ad80 	call	819ad8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  81a23c:	e0800317 	ldw	r2,12(fp)
  81a240:	d8800015 	stw	r2,0(sp)
  81a244:	e0800417 	ldw	r2,16(fp)
  81a248:	d8800115 	stw	r2,4(sp)
  81a24c:	e13ffc17 	ldw	r4,-16(fp)
  81a250:	e17ffd17 	ldw	r5,-12(fp)
  81a254:	e1bfff17 	ldw	r6,-4(fp)
  81a258:	e1c00217 	ldw	r7,8(fp)
  81a25c:	0819ad80 	call	819ad8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  81a260:	e0800317 	ldw	r2,12(fp)
  81a264:	d8800015 	stw	r2,0(sp)
  81a268:	e0800417 	ldw	r2,16(fp)
  81a26c:	d8800115 	stw	r2,4(sp)
  81a270:	e13ffc17 	ldw	r4,-16(fp)
  81a274:	e17ffd17 	ldw	r5,-12(fp)
  81a278:	e1bffe17 	ldw	r6,-8(fp)
  81a27c:	e1c00217 	ldw	r7,8(fp)
  81a280:	0819e280 	call	819e28 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  81a284:	e0800317 	ldw	r2,12(fp)
  81a288:	d8800015 	stw	r2,0(sp)
  81a28c:	e0800417 	ldw	r2,16(fp)
  81a290:	d8800115 	stw	r2,4(sp)
  81a294:	e13ffc17 	ldw	r4,-16(fp)
  81a298:	e17fff17 	ldw	r5,-4(fp)
  81a29c:	e1bffe17 	ldw	r6,-8(fp)
  81a2a0:	e1c00217 	ldw	r7,8(fp)
  81a2a4:	0819e280 	call	819e28 <alt_up_pixel_buffer_dma_draw_vline>
}
  81a2a8:	e037883a 	mov	sp,fp
  81a2ac:	dfc00117 	ldw	ra,4(sp)
  81a2b0:	df000017 	ldw	fp,0(sp)
  81a2b4:	dec00204 	addi	sp,sp,8
  81a2b8:	f800283a 	ret

0081a2bc <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  81a2bc:	defffb04 	addi	sp,sp,-20
  81a2c0:	df000415 	stw	fp,16(sp)
  81a2c4:	df000404 	addi	fp,sp,16
  81a2c8:	e13ffc15 	stw	r4,-16(fp)
  81a2cc:	e17ffd15 	stw	r5,-12(fp)
  81a2d0:	e1bffe15 	stw	r6,-8(fp)
  81a2d4:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  81a2d8:	e0c00217 	ldw	r3,8(fp)
  81a2dc:	1804c03a 	cmpne	r2,r3,zero
  81a2e0:	10000b1e 	bne	r2,zero,81a310 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  81a2e4:	e13ffd17 	ldw	r4,-12(fp)
  81a2e8:	e0ffff17 	ldw	r3,-4(fp)
  81a2ec:	20c5383a 	mul	r2,r4,r3
  81a2f0:	e13ffe17 	ldw	r4,-8(fp)
  81a2f4:	1105883a 	add	r2,r2,r4
  81a2f8:	1007883a 	mov	r3,r2
  81a2fc:	e0bffc17 	ldw	r2,-16(fp)
  81a300:	1885883a 	add	r2,r3,r2
  81a304:	e0c00117 	ldw	r3,4(fp)
  81a308:	10c00025 	stbio	r3,0(r2)
  81a30c:	00001b06 	br	81a37c <helper_plot_pixel+0xc0>
	else if (mode == 1)
  81a310:	e1000217 	ldw	r4,8(fp)
  81a314:	20800058 	cmpnei	r2,r4,1
  81a318:	10000c1e 	bne	r2,zero,81a34c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  81a31c:	e0fffd17 	ldw	r3,-12(fp)
  81a320:	e13fff17 	ldw	r4,-4(fp)
  81a324:	1905383a 	mul	r2,r3,r4
  81a328:	e0fffe17 	ldw	r3,-8(fp)
  81a32c:	10c5883a 	add	r2,r2,r3
  81a330:	1085883a 	add	r2,r2,r2
  81a334:	1007883a 	mov	r3,r2
  81a338:	e0bffc17 	ldw	r2,-16(fp)
  81a33c:	1885883a 	add	r2,r3,r2
  81a340:	e1000117 	ldw	r4,4(fp)
  81a344:	1100002d 	sthio	r4,0(r2)
  81a348:	00000c06 	br	81a37c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  81a34c:	e0fffd17 	ldw	r3,-12(fp)
  81a350:	e13fff17 	ldw	r4,-4(fp)
  81a354:	1905383a 	mul	r2,r3,r4
  81a358:	e0fffe17 	ldw	r3,-8(fp)
  81a35c:	10c5883a 	add	r2,r2,r3
  81a360:	1085883a 	add	r2,r2,r2
  81a364:	1085883a 	add	r2,r2,r2
  81a368:	1007883a 	mov	r3,r2
  81a36c:	e0bffc17 	ldw	r2,-16(fp)
  81a370:	1885883a 	add	r2,r3,r2
  81a374:	e1000117 	ldw	r4,4(fp)
  81a378:	11000035 	stwio	r4,0(r2)
}
  81a37c:	e037883a 	mov	sp,fp
  81a380:	df000017 	ldw	fp,0(sp)
  81a384:	dec00104 	addi	sp,sp,4
  81a388:	f800283a 	ret

0081a38c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  81a38c:	deffe404 	addi	sp,sp,-112
  81a390:	dfc01b15 	stw	ra,108(sp)
  81a394:	df001a15 	stw	fp,104(sp)
  81a398:	df001a04 	addi	fp,sp,104
  81a39c:	e13fe815 	stw	r4,-96(fp)
  81a3a0:	e17fe915 	stw	r5,-92(fp)
  81a3a4:	e1bfea15 	stw	r6,-88(fp)
  81a3a8:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  81a3ac:	e0bfe917 	ldw	r2,-92(fp)
  81a3b0:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  81a3b4:	e0ffea17 	ldw	r3,-88(fp)
  81a3b8:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  81a3bc:	e13feb17 	ldw	r4,-84(fp)
  81a3c0:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  81a3c4:	e0800217 	ldw	r2,8(fp)
  81a3c8:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  81a3cc:	e0fff717 	ldw	r3,-36(fp)
  81a3d0:	e13ff917 	ldw	r4,-28(fp)
  81a3d4:	1905c83a 	sub	r2,r3,r4
  81a3d8:	e0bfff15 	stw	r2,-4(fp)
  81a3dc:	e0ffff17 	ldw	r3,-4(fp)
  81a3e0:	1804403a 	cmpge	r2,r3,zero
  81a3e4:	1000031e 	bne	r2,zero,81a3f4 <alt_up_pixel_buffer_dma_draw_line+0x68>
  81a3e8:	e13fff17 	ldw	r4,-4(fp)
  81a3ec:	0109c83a 	sub	r4,zero,r4
  81a3f0:	e13fff15 	stw	r4,-4(fp)
  81a3f4:	e0fff817 	ldw	r3,-32(fp)
  81a3f8:	e13ffa17 	ldw	r4,-24(fp)
  81a3fc:	1905c83a 	sub	r2,r3,r4
  81a400:	e0bffe15 	stw	r2,-8(fp)
  81a404:	e0fffe17 	ldw	r3,-8(fp)
  81a408:	1804403a 	cmpge	r2,r3,zero
  81a40c:	1000031e 	bne	r2,zero,81a41c <alt_up_pixel_buffer_dma_draw_line+0x90>
  81a410:	e13ffe17 	ldw	r4,-8(fp)
  81a414:	0109c83a 	sub	r4,zero,r4
  81a418:	e13ffe15 	stw	r4,-8(fp)
  81a41c:	e0fffe17 	ldw	r3,-8(fp)
  81a420:	e13fff17 	ldw	r4,-4(fp)
  81a424:	1904803a 	cmplt	r2,r3,r4
  81a428:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  81a42c:	e0bfe817 	ldw	r2,-96(fp)
  81a430:	10800e17 	ldw	r2,56(r2)
  81a434:	10800060 	cmpeqi	r2,r2,1
  81a438:	10000c1e 	bne	r2,zero,81a46c <alt_up_pixel_buffer_dma_draw_line+0xe0>
  81a43c:	e0bfe817 	ldw	r2,-96(fp)
  81a440:	10800e17 	ldw	r2,56(r2)
  81a444:	10800098 	cmpnei	r2,r2,2
  81a448:	1000031e 	bne	r2,zero,81a458 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  81a44c:	00800044 	movi	r2,1
  81a450:	e0bffc15 	stw	r2,-16(fp)
  81a454:	00000206 	br	81a460 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  81a458:	00c00084 	movi	r3,2
  81a45c:	e0fffc15 	stw	r3,-16(fp)
  81a460:	e13ffc17 	ldw	r4,-16(fp)
  81a464:	e13ffd15 	stw	r4,-12(fp)
  81a468:	00000106 	br	81a470 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  81a46c:	e03ffd15 	stw	zero,-12(fp)
  81a470:	e0bffd17 	ldw	r2,-12(fp)
  81a474:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  81a478:	e0c00317 	ldw	r3,12(fp)
  81a47c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  81a480:	e0bfe817 	ldw	r2,-96(fp)
  81a484:	10800d17 	ldw	r2,52(r2)
  81a488:	1004c03a 	cmpne	r2,r2,zero
  81a48c:	1000091e 	bne	r2,zero,81a4b4 <alt_up_pixel_buffer_dma_draw_line+0x128>
  81a490:	e0bfe817 	ldw	r2,-96(fp)
  81a494:	10c01317 	ldw	r3,76(r2)
  81a498:	e0bfef17 	ldw	r2,-68(fp)
  81a49c:	1885c83a 	sub	r2,r3,r2
  81a4a0:	1007883a 	mov	r3,r2
  81a4a4:	00800044 	movi	r2,1
  81a4a8:	10c4983a 	sll	r2,r2,r3
  81a4ac:	e0bffb15 	stw	r2,-20(fp)
  81a4b0:	00000306 	br	81a4c0 <alt_up_pixel_buffer_dma_draw_line+0x134>
  81a4b4:	e0bfe817 	ldw	r2,-96(fp)
  81a4b8:	10800f17 	ldw	r2,60(r2)
  81a4bc:	e0bffb15 	stw	r2,-20(fp)
  81a4c0:	e13ffb17 	ldw	r4,-20(fp)
  81a4c4:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  81a4c8:	e0800417 	ldw	r2,16(fp)
  81a4cc:	10800058 	cmpnei	r2,r2,1
  81a4d0:	1000041e 	bne	r2,zero,81a4e4 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  81a4d4:	e0bfe817 	ldw	r2,-96(fp)
  81a4d8:	10800c17 	ldw	r2,48(r2)
  81a4dc:	e0bfed15 	stw	r2,-76(fp)
  81a4e0:	00000306 	br	81a4f0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  81a4e4:	e0bfe817 	ldw	r2,-96(fp)
  81a4e8:	10800b17 	ldw	r2,44(r2)
  81a4ec:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  81a4f0:	e0fff603 	ldbu	r3,-40(fp)
  81a4f4:	18803fcc 	andi	r2,r3,255
  81a4f8:	1080201c 	xori	r2,r2,128
  81a4fc:	10bfe004 	addi	r2,r2,-128
  81a500:	10800050 	cmplti	r2,r2,1
  81a504:	10000c1e 	bne	r2,zero,81a538 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  81a508:	e13ffa17 	ldw	r4,-24(fp)
  81a50c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  81a510:	e0bff917 	ldw	r2,-28(fp)
  81a514:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  81a518:	e0fff317 	ldw	r3,-52(fp)
  81a51c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  81a520:	e13ff817 	ldw	r4,-32(fp)
  81a524:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  81a528:	e0bff717 	ldw	r2,-36(fp)
  81a52c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  81a530:	e0fff317 	ldw	r3,-52(fp)
  81a534:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  81a538:	e13ff817 	ldw	r4,-32(fp)
  81a53c:	e0bffa17 	ldw	r2,-24(fp)
  81a540:	20800c0e 	bge	r4,r2,81a574 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  81a544:	e0fffa17 	ldw	r3,-24(fp)
  81a548:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  81a54c:	e13ff817 	ldw	r4,-32(fp)
  81a550:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  81a554:	e0bff317 	ldw	r2,-52(fp)
  81a558:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  81a55c:	e0fff917 	ldw	r3,-28(fp)
  81a560:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  81a564:	e13ff717 	ldw	r4,-36(fp)
  81a568:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  81a56c:	e0bff317 	ldw	r2,-52(fp)
  81a570:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  81a574:	e0fff817 	ldw	r3,-32(fp)
  81a578:	e13ffa17 	ldw	r4,-24(fp)
  81a57c:	1907c83a 	sub	r3,r3,r4
  81a580:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  81a584:	e0fff717 	ldw	r3,-36(fp)
  81a588:	e13ff917 	ldw	r4,-28(fp)
  81a58c:	1905c83a 	sub	r2,r3,r4
  81a590:	e0bff415 	stw	r2,-48(fp)
  81a594:	e0fff417 	ldw	r3,-48(fp)
  81a598:	1804403a 	cmpge	r2,r3,zero
  81a59c:	1000031e 	bne	r2,zero,81a5ac <alt_up_pixel_buffer_dma_draw_line+0x220>
  81a5a0:	e13ff417 	ldw	r4,-48(fp)
  81a5a4:	0109c83a 	sub	r4,zero,r4
  81a5a8:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  81a5ac:	e0fff517 	ldw	r3,-44(fp)
  81a5b0:	1804d7fa 	srli	r2,r3,31
  81a5b4:	e13ff517 	ldw	r4,-44(fp)
  81a5b8:	1105883a 	add	r2,r2,r4
  81a5bc:	1005d07a 	srai	r2,r2,1
  81a5c0:	0085c83a 	sub	r2,zero,r2
  81a5c4:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  81a5c8:	e0bff917 	ldw	r2,-28(fp)
  81a5cc:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  81a5d0:	e0fff917 	ldw	r3,-28(fp)
  81a5d4:	e13ff717 	ldw	r4,-36(fp)
  81a5d8:	1900030e 	bge	r3,r4,81a5e8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  81a5dc:	00800044 	movi	r2,1
  81a5e0:	e0bff215 	stw	r2,-56(fp)
  81a5e4:	00000206 	br	81a5f0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  81a5e8:	00ffffc4 	movi	r3,-1
  81a5ec:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  81a5f0:	e13ff603 	ldbu	r4,-40(fp)
  81a5f4:	20803fcc 	andi	r2,r4,255
  81a5f8:	1080201c 	xori	r2,r2,128
  81a5fc:	10bfe004 	addi	r2,r2,-128
  81a600:	10800058 	cmpnei	r2,r2,1
  81a604:	1000221e 	bne	r2,zero,81a690 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  81a608:	e0bffa17 	ldw	r2,-24(fp)
  81a60c:	e0bff115 	stw	r2,-60(fp)
  81a610:	00001b06 	br	81a680 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  81a614:	e0ffee17 	ldw	r3,-72(fp)
  81a618:	d8c00015 	stw	r3,0(sp)
  81a61c:	e13fef17 	ldw	r4,-68(fp)
  81a620:	d9000115 	stw	r4,4(sp)
  81a624:	e13fed17 	ldw	r4,-76(fp)
  81a628:	e17fec17 	ldw	r5,-80(fp)
  81a62c:	e1bff017 	ldw	r6,-64(fp)
  81a630:	e1fff117 	ldw	r7,-60(fp)
  81a634:	081a2bc0 	call	81a2bc <helper_plot_pixel>
			error = error + deltay;
  81a638:	e0bff317 	ldw	r2,-52(fp)
  81a63c:	e0fff417 	ldw	r3,-48(fp)
  81a640:	10c5883a 	add	r2,r2,r3
  81a644:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  81a648:	e13ff317 	ldw	r4,-52(fp)
  81a64c:	20800050 	cmplti	r2,r4,1
  81a650:	1000081e 	bne	r2,zero,81a674 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  81a654:	e0bff017 	ldw	r2,-64(fp)
  81a658:	e0fff217 	ldw	r3,-56(fp)
  81a65c:	10c5883a 	add	r2,r2,r3
  81a660:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  81a664:	e13ff317 	ldw	r4,-52(fp)
  81a668:	e0bff517 	ldw	r2,-44(fp)
  81a66c:	2089c83a 	sub	r4,r4,r2
  81a670:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  81a674:	e0fff117 	ldw	r3,-60(fp)
  81a678:	18c00044 	addi	r3,r3,1
  81a67c:	e0fff115 	stw	r3,-60(fp)
  81a680:	e13ff817 	ldw	r4,-32(fp)
  81a684:	e0bff117 	ldw	r2,-60(fp)
  81a688:	20bfe20e 	bge	r4,r2,81a614 <alt_up_pixel_buffer_dma_draw_line+0x288>
  81a68c:	00002106 	br	81a714 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  81a690:	e0fffa17 	ldw	r3,-24(fp)
  81a694:	e0fff115 	stw	r3,-60(fp)
  81a698:	00001b06 	br	81a708 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  81a69c:	e13fee17 	ldw	r4,-72(fp)
  81a6a0:	d9000015 	stw	r4,0(sp)
  81a6a4:	e0bfef17 	ldw	r2,-68(fp)
  81a6a8:	d8800115 	stw	r2,4(sp)
  81a6ac:	e13fed17 	ldw	r4,-76(fp)
  81a6b0:	e17fec17 	ldw	r5,-80(fp)
  81a6b4:	e1bff117 	ldw	r6,-60(fp)
  81a6b8:	e1fff017 	ldw	r7,-64(fp)
  81a6bc:	081a2bc0 	call	81a2bc <helper_plot_pixel>
			error = error + deltay;
  81a6c0:	e0fff317 	ldw	r3,-52(fp)
  81a6c4:	e13ff417 	ldw	r4,-48(fp)
  81a6c8:	1907883a 	add	r3,r3,r4
  81a6cc:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  81a6d0:	e0fff317 	ldw	r3,-52(fp)
  81a6d4:	18800050 	cmplti	r2,r3,1
  81a6d8:	1000081e 	bne	r2,zero,81a6fc <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  81a6dc:	e13ff017 	ldw	r4,-64(fp)
  81a6e0:	e0bff217 	ldw	r2,-56(fp)
  81a6e4:	2089883a 	add	r4,r4,r2
  81a6e8:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  81a6ec:	e0fff317 	ldw	r3,-52(fp)
  81a6f0:	e13ff517 	ldw	r4,-44(fp)
  81a6f4:	1907c83a 	sub	r3,r3,r4
  81a6f8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  81a6fc:	e0bff117 	ldw	r2,-60(fp)
  81a700:	10800044 	addi	r2,r2,1
  81a704:	e0bff115 	stw	r2,-60(fp)
  81a708:	e0fff817 	ldw	r3,-32(fp)
  81a70c:	e13ff117 	ldw	r4,-60(fp)
  81a710:	193fe20e 	bge	r3,r4,81a69c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  81a714:	e037883a 	mov	sp,fp
  81a718:	dfc00117 	ldw	ra,4(sp)
  81a71c:	df000017 	ldw	fp,0(sp)
  81a720:	dec00204 	addi	sp,sp,8
  81a724:	f800283a 	ret

0081a728 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  81a728:	defffa04 	addi	sp,sp,-24
  81a72c:	dfc00515 	stw	ra,20(sp)
  81a730:	df000415 	stw	fp,16(sp)
  81a734:	df000404 	addi	fp,sp,16
  81a738:	e13ffe15 	stw	r4,-8(fp)
  81a73c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  81a740:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
  81a744:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81a748:	1005003a 	cmpeq	r2,r2,zero
  81a74c:	1000221e 	bne	r2,zero,81a7d8 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
  81a750:	00803fc4 	movi	r2,255
  81a754:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81a758:	d0a77017 	ldw	r2,-25152(gp)
  81a75c:	1009883a 	mov	r4,r2
  81a760:	e0fffe17 	ldw	r3,-8(fp)
  81a764:	e0bfff17 	ldw	r2,-4(fp)
  81a768:	1885883a 	add	r2,r3,r2
  81a76c:	1006927a 	slli	r3,r2,9
  81a770:	2005883a 	mov	r2,r4
  81a774:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  81a778:	d0a76f17 	ldw	r2,-25156(gp)
  81a77c:	1007883a 	mov	r3,r2
  81a780:	00800604 	movi	r2,24
  81a784:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81a788:	d0a76c17 	ldw	r2,-25168(gp)
  81a78c:	1080002b 	ldhuio	r2,0(r2)
  81a790:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
  81a794:	e0bffc0b 	ldhu	r2,-16(fp)
  81a798:	10bfffcc 	andi	r2,r2,65535
  81a79c:	1080010c 	andi	r2,r2,4
  81a7a0:	1004c03a 	cmpne	r2,r2,zero
  81a7a4:	103ff81e 	bne	r2,zero,81a788 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  81a7a8:	e0bffc0b 	ldhu	r2,-16(fp)
  81a7ac:	10bfffcc 	andi	r2,r2,65535
  81a7b0:	1080040c 	andi	r2,r2,16
  81a7b4:	1004c03a 	cmpne	r2,r2,zero
  81a7b8:	1000071e 	bne	r2,zero,81a7d8 <Write_Sector_Data+0xb0>
			result = true;
  81a7bc:	00800044 	movi	r2,1
  81a7c0:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
  81a7c4:	d0277515 	stw	zero,-25132(gp)
			current_sector_index = sector_index + partition_offset;
  81a7c8:	e0fffe17 	ldw	r3,-8(fp)
  81a7cc:	e0bfff17 	ldw	r2,-4(fp)
  81a7d0:	1885883a 	add	r2,r3,r2
  81a7d4:	d0a77615 	stw	r2,-25128(gp)
		}
	}
	return result;
  81a7d8:	e0bffd17 	ldw	r2,-12(fp)
}
  81a7dc:	e037883a 	mov	sp,fp
  81a7e0:	dfc00117 	ldw	ra,4(sp)
  81a7e4:	df000017 	ldw	fp,0(sp)
  81a7e8:	dec00204 	addi	sp,sp,8
  81a7ec:	f800283a 	ret

0081a7f0 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  81a7f0:	defffd04 	addi	sp,sp,-12
  81a7f4:	dfc00215 	stw	ra,8(sp)
  81a7f8:	df000115 	stw	fp,4(sp)
  81a7fc:	df000104 	addi	fp,sp,4
	bool result = true;
  81a800:	00800044 	movi	r2,1
  81a804:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
  81a808:	d0a77517 	ldw	r2,-25132(gp)
  81a80c:	1005003a 	cmpeq	r2,r2,zero
  81a810:	1000051e 	bne	r2,zero,81a828 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
  81a814:	d0a77617 	ldw	r2,-25128(gp)
  81a818:	1009883a 	mov	r4,r2
  81a81c:	000b883a 	mov	r5,zero
  81a820:	081a7280 	call	81a728 <Write_Sector_Data>
  81a824:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
  81a828:	e0bfff17 	ldw	r2,-4(fp)
}
  81a82c:	e037883a 	mov	sp,fp
  81a830:	dfc00117 	ldw	ra,4(sp)
  81a834:	df000017 	ldw	fp,0(sp)
  81a838:	dec00204 	addi	sp,sp,8
  81a83c:	f800283a 	ret

0081a840 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  81a840:	defff904 	addi	sp,sp,-28
  81a844:	dfc00615 	stw	ra,24(sp)
  81a848:	df000515 	stw	fp,20(sp)
  81a84c:	df000504 	addi	fp,sp,20
  81a850:	e13ffd15 	stw	r4,-12(fp)
  81a854:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  81a858:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  81a85c:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81a860:	1005003a 	cmpeq	r2,r2,zero
  81a864:	10002d1e 	bne	r2,zero,81a91c <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
  81a868:	00803fc4 	movi	r2,255
  81a86c:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  81a870:	d0a77517 	ldw	r2,-25132(gp)
  81a874:	1005003a 	cmpeq	r2,r2,zero
  81a878:	1000081e 	bne	r2,zero,81a89c <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  81a87c:	d0a77617 	ldw	r2,-25128(gp)
  81a880:	1009883a 	mov	r4,r2
  81a884:	000b883a 	mov	r5,zero
  81a888:	081a7280 	call	81a728 <Write_Sector_Data>
  81a88c:	1004c03a 	cmpne	r2,r2,zero
  81a890:	1000021e 	bne	r2,zero,81a89c <Read_Sector_Data+0x5c>
				return false;
  81a894:	e03fff15 	stw	zero,-4(fp)
  81a898:	00002206 	br	81a924 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81a89c:	d0a77017 	ldw	r2,-25152(gp)
  81a8a0:	1009883a 	mov	r4,r2
  81a8a4:	e0fffd17 	ldw	r3,-12(fp)
  81a8a8:	e0bffe17 	ldw	r2,-8(fp)
  81a8ac:	1885883a 	add	r2,r3,r2
  81a8b0:	1006927a 	slli	r3,r2,9
  81a8b4:	2005883a 	mov	r2,r4
  81a8b8:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  81a8bc:	d0a76f17 	ldw	r2,-25156(gp)
  81a8c0:	1007883a 	mov	r3,r2
  81a8c4:	00800444 	movi	r2,17
  81a8c8:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81a8cc:	d0a76c17 	ldw	r2,-25168(gp)
  81a8d0:	1080002b 	ldhuio	r2,0(r2)
  81a8d4:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  81a8d8:	e0bffb0b 	ldhu	r2,-20(fp)
  81a8dc:	10bfffcc 	andi	r2,r2,65535
  81a8e0:	1080010c 	andi	r2,r2,4
  81a8e4:	1004c03a 	cmpne	r2,r2,zero
  81a8e8:	103ff81e 	bne	r2,zero,81a8cc <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  81a8ec:	e0bffb0b 	ldhu	r2,-20(fp)
  81a8f0:	10bfffcc 	andi	r2,r2,65535
  81a8f4:	1080040c 	andi	r2,r2,16
  81a8f8:	1004c03a 	cmpne	r2,r2,zero
  81a8fc:	1000071e 	bne	r2,zero,81a91c <Read_Sector_Data+0xdc>
			result = true;
  81a900:	00800044 	movi	r2,1
  81a904:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  81a908:	d0277515 	stw	zero,-25132(gp)
			current_sector_index = sector_index + partition_offset;
  81a90c:	e0fffd17 	ldw	r3,-12(fp)
  81a910:	e0bffe17 	ldw	r2,-8(fp)
  81a914:	1885883a 	add	r2,r3,r2
  81a918:	d0a77615 	stw	r2,-25128(gp)
		}
	}
	return result;
  81a91c:	e0bffc17 	ldw	r2,-16(fp)
  81a920:	e0bfff15 	stw	r2,-4(fp)
  81a924:	e0bfff17 	ldw	r2,-4(fp)
}
  81a928:	e037883a 	mov	sp,fp
  81a92c:	dfc00117 	ldw	ra,4(sp)
  81a930:	df000017 	ldw	fp,0(sp)
  81a934:	dec00204 	addi	sp,sp,8
  81a938:	f800283a 	ret

0081a93c <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  81a93c:	defffa04 	addi	sp,sp,-24
  81a940:	dfc00515 	stw	ra,20(sp)
  81a944:	df000415 	stw	fp,16(sp)
  81a948:	df000404 	addi	fp,sp,16
  81a94c:	e13ffd15 	stw	r4,-12(fp)
  81a950:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  81a954:	e0bffd17 	ldw	r2,-12(fp)
  81a958:	1006d23a 	srli	r3,r2,8
  81a95c:	d0a77217 	ldw	r2,-25144(gp)
  81a960:	1885883a 	add	r2,r3,r2
  81a964:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  81a968:	008020f4 	movhi	r2,131
  81a96c:	10bb3604 	addi	r2,r2,-4904
  81a970:	10c01117 	ldw	r3,68(r2)
  81a974:	e0bffc17 	ldw	r2,-16(fp)
  81a978:	10c5883a 	add	r2,r2,r3
  81a97c:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
  81a980:	d0e77617 	ldw	r3,-25128(gp)
  81a984:	e0bffc17 	ldw	r2,-16(fp)
  81a988:	10c00726 	beq	r2,r3,81a9a8 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  81a98c:	e13ffc17 	ldw	r4,-16(fp)
  81a990:	000b883a 	mov	r5,zero
  81a994:	081a8400 	call	81a840 <Read_Sector_Data>
  81a998:	1004c03a 	cmpne	r2,r2,zero
  81a99c:	1000021e 	bne	r2,zero,81a9a8 <get_cluster_flag+0x6c>
			return false;
  81a9a0:	e03fff15 	stw	zero,-4(fp)
  81a9a4:	00000d06 	br	81a9dc <get_cluster_flag+0xa0>
		}
	}
	*flag
  81a9a8:	d0a77417 	ldw	r2,-25136(gp)
  81a9ac:	10800a17 	ldw	r2,40(r2)
  81a9b0:	1007883a 	mov	r3,r2
  81a9b4:	e0bffd17 	ldw	r2,-12(fp)
  81a9b8:	10803fcc 	andi	r2,r2,255
  81a9bc:	1085883a 	add	r2,r2,r2
  81a9c0:	1885883a 	add	r2,r3,r2
  81a9c4:	1080002b 	ldhuio	r2,0(r2)
  81a9c8:	1007883a 	mov	r3,r2
  81a9cc:	e0bffe17 	ldw	r2,-8(fp)
  81a9d0:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
  81a9d4:	00800044 	movi	r2,1
  81a9d8:	e0bfff15 	stw	r2,-4(fp)
  81a9dc:	e0bfff17 	ldw	r2,-4(fp)
}
  81a9e0:	e037883a 	mov	sp,fp
  81a9e4:	dfc00117 	ldw	ra,4(sp)
  81a9e8:	df000017 	ldw	fp,0(sp)
  81a9ec:	dec00204 	addi	sp,sp,8
  81a9f0:	f800283a 	ret

0081a9f4 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  81a9f4:	defff904 	addi	sp,sp,-28
  81a9f8:	dfc00615 	stw	ra,24(sp)
  81a9fc:	df000515 	stw	fp,20(sp)
  81aa00:	df000504 	addi	fp,sp,20
  81aa04:	e13ffc15 	stw	r4,-16(fp)
  81aa08:	e1bffe15 	stw	r6,-8(fp)
  81aa0c:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  81aa10:	e0bffc17 	ldw	r2,-16(fp)
  81aa14:	1006d23a 	srli	r3,r2,8
  81aa18:	d0a77217 	ldw	r2,-25144(gp)
  81aa1c:	1885883a 	add	r2,r3,r2
  81aa20:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
  81aa24:	e0bffe17 	ldw	r2,-8(fp)
  81aa28:	1005003a 	cmpeq	r2,r2,zero
  81aa2c:	1000071e 	bne	r2,zero,81aa4c <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  81aa30:	008020f4 	movhi	r2,131
  81aa34:	10bb3604 	addi	r2,r2,-4904
  81aa38:	10c01117 	ldw	r3,68(r2)
  81aa3c:	e0bffb17 	ldw	r2,-20(fp)
  81aa40:	10c5883a 	add	r2,r2,r3
  81aa44:	e0bffb15 	stw	r2,-20(fp)
  81aa48:	00000606 	br	81aa64 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  81aa4c:	008020f4 	movhi	r2,131
  81aa50:	10bb3604 	addi	r2,r2,-4904
  81aa54:	10c01217 	ldw	r3,72(r2)
  81aa58:	e0bffb17 	ldw	r2,-20(fp)
  81aa5c:	10c5883a 	add	r2,r2,r3
  81aa60:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
  81aa64:	d0e77617 	ldw	r3,-25128(gp)
  81aa68:	e0bffb17 	ldw	r2,-20(fp)
  81aa6c:	10c00726 	beq	r2,r3,81aa8c <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
  81aa70:	e13ffb17 	ldw	r4,-20(fp)
  81aa74:	000b883a 	mov	r5,zero
  81aa78:	081a8400 	call	81a840 <Read_Sector_Data>
  81aa7c:	1004c03a 	cmpne	r2,r2,zero
  81aa80:	1000021e 	bne	r2,zero,81aa8c <mark_cluster+0x98>
			return false;
  81aa84:	e03fff15 	stw	zero,-4(fp)
  81aa88:	00000d06 	br	81aac0 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  81aa8c:	d0a77417 	ldw	r2,-25136(gp)
  81aa90:	10800a17 	ldw	r2,40(r2)
  81aa94:	1007883a 	mov	r3,r2
  81aa98:	e0bffc17 	ldw	r2,-16(fp)
  81aa9c:	10803fcc 	andi	r2,r2,255
  81aaa0:	1085883a 	add	r2,r2,r2
  81aaa4:	1885883a 	add	r2,r3,r2
  81aaa8:	e0fffd0f 	ldh	r3,-12(fp)
  81aaac:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  81aab0:	00800044 	movi	r2,1
  81aab4:	d0a77515 	stw	r2,-25132(gp)
	return true;
  81aab8:	00800044 	movi	r2,1
  81aabc:	e0bfff15 	stw	r2,-4(fp)
  81aac0:	e0bfff17 	ldw	r2,-4(fp)
}
  81aac4:	e037883a 	mov	sp,fp
  81aac8:	dfc00117 	ldw	ra,4(sp)
  81aacc:	df000017 	ldw	fp,0(sp)
  81aad0:	dec00204 	addi	sp,sp,8
  81aad4:	f800283a 	ret

0081aad8 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  81aad8:	defff704 	addi	sp,sp,-36
  81aadc:	dfc00815 	stw	ra,32(sp)
  81aae0:	df000715 	stw	fp,28(sp)
  81aae4:	df000704 	addi	fp,sp,28
	bool result = false;
  81aae8:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  81aaec:	0009883a 	mov	r4,zero
  81aaf0:	000b883a 	mov	r5,zero
  81aaf4:	081ec580 	call	81ec58 <Read_Sector_Data_Attempt_CRC>
  81aaf8:	1005003a 	cmpeq	r2,r2,zero
  81aafc:	10005c1e 	bne	r2,zero,81ac70 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  81ab00:	d0a77417 	ldw	r2,-25136(gp)
  81ab04:	10800a17 	ldw	r2,40(r2)
  81ab08:	10807f84 	addi	r2,r2,510
  81ab0c:	1080002b 	ldhuio	r2,0(r2)
  81ab10:	10bfffcc 	andi	r2,r2,65535
  81ab14:	10a0001c 	xori	r2,r2,32768
  81ab18:	10a00004 	addi	r2,r2,-32768
  81ab1c:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  81ab20:	e0bffd17 	ldw	r2,-12(fp)
  81ab24:	10ffffcc 	andi	r3,r2,65535
  81ab28:	00aa9554 	movui	r2,43605
  81ab2c:	1880501e 	bne	r3,r2,81ac70 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  81ab30:	e03ffe15 	stw	zero,-8(fp)
  81ab34:	00004b06 	br	81ac64 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
  81ab38:	e0bffe17 	ldw	r2,-8(fp)
  81ab3c:	1004913a 	slli	r2,r2,4
  81ab40:	10806f84 	addi	r2,r2,446
  81ab44:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
  81ab48:	d0a77417 	ldw	r2,-25136(gp)
  81ab4c:	10800a17 	ldw	r2,40(r2)
  81ab50:	1007883a 	mov	r3,r2
  81ab54:	e0bffa17 	ldw	r2,-24(fp)
  81ab58:	1885883a 	add	r2,r3,r2
  81ab5c:	10800104 	addi	r2,r2,4
  81ab60:	10800023 	ldbuio	r2,0(r2)
  81ab64:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  81ab68:	e0bff907 	ldb	r2,-28(fp)
  81ab6c:	10800060 	cmpeqi	r2,r2,1
  81ab70:	1000091e 	bne	r2,zero,81ab98 <Check_for_Master_Boot_Record+0xc0>
  81ab74:	e0bff907 	ldb	r2,-28(fp)
  81ab78:	10800120 	cmpeqi	r2,r2,4
  81ab7c:	1000061e 	bne	r2,zero,81ab98 <Check_for_Master_Boot_Record+0xc0>
  81ab80:	e0bff907 	ldb	r2,-28(fp)
  81ab84:	108001a0 	cmpeqi	r2,r2,6
  81ab88:	1000031e 	bne	r2,zero,81ab98 <Check_for_Master_Boot_Record+0xc0>
  81ab8c:	e0bff907 	ldb	r2,-28(fp)
  81ab90:	10800398 	cmpnei	r2,r2,14
  81ab94:	1000301e 	bne	r2,zero,81ac58 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
  81ab98:	d0a77417 	ldw	r2,-25136(gp)
  81ab9c:	10800a17 	ldw	r2,40(r2)
  81aba0:	1007883a 	mov	r3,r2
  81aba4:	e0bffa17 	ldw	r2,-24(fp)
  81aba8:	1885883a 	add	r2,r3,r2
  81abac:	10800284 	addi	r2,r2,10
  81abb0:	1080002b 	ldhuio	r2,0(r2)
  81abb4:	10bfffcc 	andi	r2,r2,65535
  81abb8:	1008943a 	slli	r4,r2,16
  81abbc:	d0a77417 	ldw	r2,-25136(gp)
  81abc0:	10800a17 	ldw	r2,40(r2)
  81abc4:	1007883a 	mov	r3,r2
  81abc8:	e0bffa17 	ldw	r2,-24(fp)
  81abcc:	1885883a 	add	r2,r3,r2
  81abd0:	10800204 	addi	r2,r2,8
  81abd4:	1080002b 	ldhuio	r2,0(r2)
  81abd8:	10bfffcc 	andi	r2,r2,65535
  81abdc:	2084b03a 	or	r2,r4,r2
  81abe0:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  81abe4:	d0a77417 	ldw	r2,-25136(gp)
  81abe8:	10800a17 	ldw	r2,40(r2)
  81abec:	1007883a 	mov	r3,r2
  81abf0:	e0bffa17 	ldw	r2,-24(fp)
  81abf4:	1885883a 	add	r2,r3,r2
  81abf8:	10800384 	addi	r2,r2,14
  81abfc:	1080002b 	ldhuio	r2,0(r2)
  81ac00:	10bfffcc 	andi	r2,r2,65535
  81ac04:	1008943a 	slli	r4,r2,16
  81ac08:	d0a77417 	ldw	r2,-25136(gp)
  81ac0c:	10800a17 	ldw	r2,40(r2)
  81ac10:	1007883a 	mov	r3,r2
  81ac14:	e0bffa17 	ldw	r2,-24(fp)
  81ac18:	1885883a 	add	r2,r3,r2
  81ac1c:	10800304 	addi	r2,r2,12
  81ac20:	1080002b 	ldhuio	r2,0(r2)
  81ac24:	10bfffcc 	andi	r2,r2,65535
  81ac28:	2084b03a 	or	r2,r4,r2
  81ac2c:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  81ac30:	e0bffb17 	ldw	r2,-20(fp)
  81ac34:	10800050 	cmplti	r2,r2,1
  81ac38:	1000071e 	bne	r2,zero,81ac58 <Check_for_Master_Boot_Record+0x180>
						result = true;
  81ac3c:	00800044 	movi	r2,1
  81ac40:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  81ac44:	e0bffb17 	ldw	r2,-20(fp)
  81ac48:	d0a77315 	stw	r2,-25140(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  81ac4c:	e0bffc17 	ldw	r2,-16(fp)
  81ac50:	d0a77215 	stw	r2,-25144(gp)
						break;
  81ac54:	00000606 	br	81ac70 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  81ac58:	e0bffe17 	ldw	r2,-8(fp)
  81ac5c:	10800044 	addi	r2,r2,1
  81ac60:	e0bffe15 	stw	r2,-8(fp)
  81ac64:	e0bffe17 	ldw	r2,-8(fp)
  81ac68:	10800110 	cmplti	r2,r2,4
  81ac6c:	103fb21e 	bne	r2,zero,81ab38 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  81ac70:	e0bfff17 	ldw	r2,-4(fp)
}
  81ac74:	e037883a 	mov	sp,fp
  81ac78:	dfc00117 	ldw	ra,4(sp)
  81ac7c:	df000017 	ldw	fp,0(sp)
  81ac80:	dec00204 	addi	sp,sp,8
  81ac84:	f800283a 	ret

0081ac88 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  81ac88:	defff804 	addi	sp,sp,-32
  81ac8c:	dfc00715 	stw	ra,28(sp)
  81ac90:	df000615 	stw	fp,24(sp)
  81ac94:	df000604 	addi	fp,sp,24
  81ac98:	e13ffc15 	stw	r4,-16(fp)
  81ac9c:	e17ffd15 	stw	r5,-12(fp)
  81aca0:	e1bffe15 	stw	r6,-8(fp)
  81aca4:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  81aca8:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  81acac:	e0bffc17 	ldw	r2,-16(fp)
  81acb0:	108007cc 	andi	r2,r2,31
  81acb4:	1004c03a 	cmpne	r2,r2,zero
  81acb8:	10008e1e 	bne	r2,zero,81aef4 <Read_File_Record_At_Offset+0x26c>
  81acbc:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81acc0:	1005003a 	cmpeq	r2,r2,zero
  81acc4:	10008b1e 	bne	r2,zero,81aef4 <Read_File_Record_At_Offset+0x26c>
  81acc8:	d0a76b17 	ldw	r2,-25172(gp)
  81accc:	1005003a 	cmpeq	r2,r2,zero
  81acd0:	1000881e 	bne	r2,zero,81aef4 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  81acd4:	e03ffa15 	stw	zero,-24(fp)
  81acd8:	00001006 	br	81ad1c <Read_File_Record_At_Offset+0x94>
			record->name[counter]
  81acdc:	e17ffa17 	ldw	r5,-24(fp)
  81ace0:	d0a77417 	ldw	r2,-25136(gp)
  81ace4:	10800a17 	ldw	r2,40(r2)
  81ace8:	1009883a 	mov	r4,r2
  81acec:	e0fffc17 	ldw	r3,-16(fp)
  81acf0:	e0bffa17 	ldw	r2,-24(fp)
  81acf4:	1885883a 	add	r2,r3,r2
  81acf8:	2085883a 	add	r2,r4,r2
  81acfc:	10800023 	ldbuio	r2,0(r2)
  81ad00:	1007883a 	mov	r3,r2
  81ad04:	e0bffd17 	ldw	r2,-12(fp)
  81ad08:	1145883a 	add	r2,r2,r5
  81ad0c:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  81ad10:	e0bffa17 	ldw	r2,-24(fp)
  81ad14:	10800044 	addi	r2,r2,1
  81ad18:	e0bffa15 	stw	r2,-24(fp)
  81ad1c:	e0bffa17 	ldw	r2,-24(fp)
  81ad20:	10800210 	cmplti	r2,r2,8
  81ad24:	103fed1e 	bne	r2,zero,81acdc <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  81ad28:	e03ffa15 	stw	zero,-24(fp)
  81ad2c:	00001206 	br	81ad78 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
  81ad30:	e17ffa17 	ldw	r5,-24(fp)
  81ad34:	d0a77417 	ldw	r2,-25136(gp)
  81ad38:	10800a17 	ldw	r2,40(r2)
  81ad3c:	1009883a 	mov	r4,r2
  81ad40:	e0fffc17 	ldw	r3,-16(fp)
  81ad44:	e0bffa17 	ldw	r2,-24(fp)
  81ad48:	1885883a 	add	r2,r3,r2
  81ad4c:	2085883a 	add	r2,r4,r2
  81ad50:	10800204 	addi	r2,r2,8
  81ad54:	10800023 	ldbuio	r2,0(r2)
  81ad58:	1007883a 	mov	r3,r2
  81ad5c:	e0bffd17 	ldw	r2,-12(fp)
  81ad60:	2885883a 	add	r2,r5,r2
  81ad64:	10800204 	addi	r2,r2,8
  81ad68:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  81ad6c:	e0bffa17 	ldw	r2,-24(fp)
  81ad70:	10800044 	addi	r2,r2,1
  81ad74:	e0bffa15 	stw	r2,-24(fp)
  81ad78:	e0bffa17 	ldw	r2,-24(fp)
  81ad7c:	108000d0 	cmplti	r2,r2,3
  81ad80:	103feb1e 	bne	r2,zero,81ad30 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  81ad84:	d0a77417 	ldw	r2,-25136(gp)
  81ad88:	10800a17 	ldw	r2,40(r2)
  81ad8c:	1007883a 	mov	r3,r2
  81ad90:	e0bffc17 	ldw	r2,-16(fp)
  81ad94:	1885883a 	add	r2,r3,r2
  81ad98:	108002c4 	addi	r2,r2,11
  81ad9c:	10800023 	ldbuio	r2,0(r2)
  81ada0:	1007883a 	mov	r3,r2
  81ada4:	e0bffd17 	ldw	r2,-12(fp)
  81ada8:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  81adac:	d0a77417 	ldw	r2,-25136(gp)
  81adb0:	10800a17 	ldw	r2,40(r2)
  81adb4:	1007883a 	mov	r3,r2
  81adb8:	e0bffc17 	ldw	r2,-16(fp)
  81adbc:	1885883a 	add	r2,r3,r2
  81adc0:	10800384 	addi	r2,r2,14
  81adc4:	1080002b 	ldhuio	r2,0(r2)
  81adc8:	1007883a 	mov	r3,r2
  81adcc:	e0bffd17 	ldw	r2,-12(fp)
  81add0:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  81add4:	d0a77417 	ldw	r2,-25136(gp)
  81add8:	10800a17 	ldw	r2,40(r2)
  81addc:	1007883a 	mov	r3,r2
  81ade0:	e0bffc17 	ldw	r2,-16(fp)
  81ade4:	1885883a 	add	r2,r3,r2
  81ade8:	10800404 	addi	r2,r2,16
  81adec:	1080002b 	ldhuio	r2,0(r2)
  81adf0:	1007883a 	mov	r3,r2
  81adf4:	e0bffd17 	ldw	r2,-12(fp)
  81adf8:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  81adfc:	d0a77417 	ldw	r2,-25136(gp)
  81ae00:	10800a17 	ldw	r2,40(r2)
  81ae04:	1007883a 	mov	r3,r2
  81ae08:	e0bffc17 	ldw	r2,-16(fp)
  81ae0c:	1885883a 	add	r2,r3,r2
  81ae10:	10800484 	addi	r2,r2,18
  81ae14:	1080002b 	ldhuio	r2,0(r2)
  81ae18:	1007883a 	mov	r3,r2
  81ae1c:	e0bffd17 	ldw	r2,-12(fp)
  81ae20:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  81ae24:	d0a77417 	ldw	r2,-25136(gp)
  81ae28:	10800a17 	ldw	r2,40(r2)
  81ae2c:	1007883a 	mov	r3,r2
  81ae30:	e0bffc17 	ldw	r2,-16(fp)
  81ae34:	1885883a 	add	r2,r3,r2
  81ae38:	10800584 	addi	r2,r2,22
  81ae3c:	1080002b 	ldhuio	r2,0(r2)
  81ae40:	1007883a 	mov	r3,r2
  81ae44:	e0bffd17 	ldw	r2,-12(fp)
  81ae48:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  81ae4c:	d0a77417 	ldw	r2,-25136(gp)
  81ae50:	10800a17 	ldw	r2,40(r2)
  81ae54:	1007883a 	mov	r3,r2
  81ae58:	e0bffc17 	ldw	r2,-16(fp)
  81ae5c:	1885883a 	add	r2,r3,r2
  81ae60:	10800604 	addi	r2,r2,24
  81ae64:	1080002b 	ldhuio	r2,0(r2)
  81ae68:	1007883a 	mov	r3,r2
  81ae6c:	e0bffd17 	ldw	r2,-12(fp)
  81ae70:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  81ae74:	d0a77417 	ldw	r2,-25136(gp)
  81ae78:	10800a17 	ldw	r2,40(r2)
  81ae7c:	1007883a 	mov	r3,r2
  81ae80:	e0bffc17 	ldw	r2,-16(fp)
  81ae84:	1885883a 	add	r2,r3,r2
  81ae88:	10800684 	addi	r2,r2,26
  81ae8c:	1080002b 	ldhuio	r2,0(r2)
  81ae90:	1007883a 	mov	r3,r2
  81ae94:	e0bffd17 	ldw	r2,-12(fp)
  81ae98:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  81ae9c:	d0a77417 	ldw	r2,-25136(gp)
  81aea0:	10800a17 	ldw	r2,40(r2)
  81aea4:	1007883a 	mov	r3,r2
  81aea8:	e0bffc17 	ldw	r2,-16(fp)
  81aeac:	1885883a 	add	r2,r3,r2
  81aeb0:	10800704 	addi	r2,r2,28
  81aeb4:	10800037 	ldwio	r2,0(r2)
  81aeb8:	1007883a 	mov	r3,r2
  81aebc:	e0bffd17 	ldw	r2,-12(fp)
  81aec0:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  81aec4:	e0fffd17 	ldw	r3,-12(fp)
  81aec8:	e0bffe17 	ldw	r2,-8(fp)
  81aecc:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  81aed0:	e0fffd17 	ldw	r3,-12(fp)
  81aed4:	e0bfff17 	ldw	r2,-4(fp)
  81aed8:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  81aedc:	e0bffc17 	ldw	r2,-16(fp)
  81aee0:	1007883a 	mov	r3,r2
  81aee4:	e0bffd17 	ldw	r2,-12(fp)
  81aee8:	10c00c0d 	sth	r3,48(r2)
		result = true;
  81aeec:	00800044 	movi	r2,1
  81aef0:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  81aef4:	e0bffb17 	ldw	r2,-20(fp)
}
  81aef8:	e037883a 	mov	sp,fp
  81aefc:	dfc00117 	ldw	ra,4(sp)
  81af00:	df000017 	ldw	fp,0(sp)
  81af04:	dec00204 	addi	sp,sp,8
  81af08:	f800283a 	ret

0081af0c <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  81af0c:	defff904 	addi	sp,sp,-28
  81af10:	dfc00615 	stw	ra,24(sp)
  81af14:	df000515 	stw	fp,20(sp)
  81af18:	df000504 	addi	fp,sp,20
  81af1c:	e13ffe15 	stw	r4,-8(fp)
  81af20:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  81af24:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  81af28:	e0bffe17 	ldw	r2,-8(fp)
  81af2c:	108007cc 	andi	r2,r2,31
  81af30:	1004c03a 	cmpne	r2,r2,zero
  81af34:	10009d1e 	bne	r2,zero,81b1ac <Write_File_Record_At_Offset+0x2a0>
  81af38:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81af3c:	1005003a 	cmpeq	r2,r2,zero
  81af40:	10009a1e 	bne	r2,zero,81b1ac <Write_File_Record_At_Offset+0x2a0>
  81af44:	d0a76b17 	ldw	r2,-25172(gp)
  81af48:	1005003a 	cmpeq	r2,r2,zero
  81af4c:	1000971e 	bne	r2,zero,81b1ac <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  81af50:	e03ffc15 	stw	zero,-16(fp)
  81af54:	00001e06 	br	81afd0 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
  81af58:	e0bffc17 	ldw	r2,-16(fp)
  81af5c:	10c00044 	addi	r3,r2,1
  81af60:	e0bfff17 	ldw	r2,-4(fp)
  81af64:	10c5883a 	add	r2,r2,r3
  81af68:	10800003 	ldbu	r2,0(r2)
  81af6c:	10803fcc 	andi	r2,r2,255
  81af70:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
  81af74:	e0bffb0f 	ldh	r2,-20(fp)
  81af78:	1004923a 	slli	r2,r2,8
  81af7c:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
  81af80:	e0fffc17 	ldw	r3,-16(fp)
  81af84:	e0bfff17 	ldw	r2,-4(fp)
  81af88:	10c5883a 	add	r2,r2,r3
  81af8c:	10800003 	ldbu	r2,0(r2)
  81af90:	10c03fcc 	andi	r3,r2,255
  81af94:	e0bffb0b 	ldhu	r2,-20(fp)
  81af98:	10c4b03a 	or	r2,r2,r3
  81af9c:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  81afa0:	d0a77417 	ldw	r2,-25136(gp)
  81afa4:	10800a17 	ldw	r2,40(r2)
  81afa8:	1009883a 	mov	r4,r2
  81afac:	e0fffe17 	ldw	r3,-8(fp)
  81afb0:	e0bffc17 	ldw	r2,-16(fp)
  81afb4:	1885883a 	add	r2,r3,r2
  81afb8:	2085883a 	add	r2,r4,r2
  81afbc:	e0fffb0f 	ldh	r3,-20(fp)
  81afc0:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  81afc4:	e0bffc17 	ldw	r2,-16(fp)
  81afc8:	10800084 	addi	r2,r2,2
  81afcc:	e0bffc15 	stw	r2,-16(fp)
  81afd0:	e0bffc17 	ldw	r2,-16(fp)
  81afd4:	10800210 	cmplti	r2,r2,8
  81afd8:	103fdf1e 	bne	r2,zero,81af58 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  81afdc:	e03ffc15 	stw	zero,-16(fp)
  81afe0:	00001306 	br	81b030 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  81afe4:	d0a77417 	ldw	r2,-25136(gp)
  81afe8:	10800a17 	ldw	r2,40(r2)
  81afec:	1009883a 	mov	r4,r2
  81aff0:	e0fffe17 	ldw	r3,-8(fp)
  81aff4:	e0bffc17 	ldw	r2,-16(fp)
  81aff8:	1885883a 	add	r2,r3,r2
  81affc:	2085883a 	add	r2,r4,r2
  81b000:	11000204 	addi	r4,r2,8
  81b004:	e0fffc17 	ldw	r3,-16(fp)
  81b008:	e0bfff17 	ldw	r2,-4(fp)
  81b00c:	1885883a 	add	r2,r3,r2
  81b010:	10800204 	addi	r2,r2,8
  81b014:	10800003 	ldbu	r2,0(r2)
  81b018:	10c03fcc 	andi	r3,r2,255
  81b01c:	2005883a 	mov	r2,r4
  81b020:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  81b024:	e0bffc17 	ldw	r2,-16(fp)
  81b028:	10800044 	addi	r2,r2,1
  81b02c:	e0bffc15 	stw	r2,-16(fp)
  81b030:	e0bffc17 	ldw	r2,-16(fp)
  81b034:	108000d0 	cmplti	r2,r2,3
  81b038:	103fea1e 	bne	r2,zero,81afe4 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  81b03c:	d0a77417 	ldw	r2,-25136(gp)
  81b040:	10800a17 	ldw	r2,40(r2)
  81b044:	1007883a 	mov	r3,r2
  81b048:	e0bffe17 	ldw	r2,-8(fp)
  81b04c:	1885883a 	add	r2,r3,r2
  81b050:	110002c4 	addi	r4,r2,11
  81b054:	e0bfff17 	ldw	r2,-4(fp)
  81b058:	108002c3 	ldbu	r2,11(r2)
  81b05c:	10c03fcc 	andi	r3,r2,255
  81b060:	2005883a 	mov	r2,r4
  81b064:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  81b068:	d0a77417 	ldw	r2,-25136(gp)
  81b06c:	10800a17 	ldw	r2,40(r2)
  81b070:	1007883a 	mov	r3,r2
  81b074:	e0bffe17 	ldw	r2,-8(fp)
  81b078:	1885883a 	add	r2,r3,r2
  81b07c:	11000384 	addi	r4,r2,14
  81b080:	e0bfff17 	ldw	r2,-4(fp)
  81b084:	1080030b 	ldhu	r2,12(r2)
  81b088:	10ffffcc 	andi	r3,r2,65535
  81b08c:	2005883a 	mov	r2,r4
  81b090:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  81b094:	d0a77417 	ldw	r2,-25136(gp)
  81b098:	10800a17 	ldw	r2,40(r2)
  81b09c:	1007883a 	mov	r3,r2
  81b0a0:	e0bffe17 	ldw	r2,-8(fp)
  81b0a4:	1885883a 	add	r2,r3,r2
  81b0a8:	11000404 	addi	r4,r2,16
  81b0ac:	e0bfff17 	ldw	r2,-4(fp)
  81b0b0:	1080038b 	ldhu	r2,14(r2)
  81b0b4:	10ffffcc 	andi	r3,r2,65535
  81b0b8:	2005883a 	mov	r2,r4
  81b0bc:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  81b0c0:	d0a77417 	ldw	r2,-25136(gp)
  81b0c4:	10800a17 	ldw	r2,40(r2)
  81b0c8:	1007883a 	mov	r3,r2
  81b0cc:	e0bffe17 	ldw	r2,-8(fp)
  81b0d0:	1885883a 	add	r2,r3,r2
  81b0d4:	11000484 	addi	r4,r2,18
  81b0d8:	e0bfff17 	ldw	r2,-4(fp)
  81b0dc:	1080040b 	ldhu	r2,16(r2)
  81b0e0:	10ffffcc 	andi	r3,r2,65535
  81b0e4:	2005883a 	mov	r2,r4
  81b0e8:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  81b0ec:	d0a77417 	ldw	r2,-25136(gp)
  81b0f0:	10800a17 	ldw	r2,40(r2)
  81b0f4:	1007883a 	mov	r3,r2
  81b0f8:	e0bffe17 	ldw	r2,-8(fp)
  81b0fc:	1885883a 	add	r2,r3,r2
  81b100:	11000584 	addi	r4,r2,22
  81b104:	e0bfff17 	ldw	r2,-4(fp)
  81b108:	1080048b 	ldhu	r2,18(r2)
  81b10c:	10ffffcc 	andi	r3,r2,65535
  81b110:	2005883a 	mov	r2,r4
  81b114:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  81b118:	d0a77417 	ldw	r2,-25136(gp)
  81b11c:	10800a17 	ldw	r2,40(r2)
  81b120:	1007883a 	mov	r3,r2
  81b124:	e0bffe17 	ldw	r2,-8(fp)
  81b128:	1885883a 	add	r2,r3,r2
  81b12c:	11000604 	addi	r4,r2,24
  81b130:	e0bfff17 	ldw	r2,-4(fp)
  81b134:	1080050b 	ldhu	r2,20(r2)
  81b138:	10ffffcc 	andi	r3,r2,65535
  81b13c:	2005883a 	mov	r2,r4
  81b140:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  81b144:	d0a77417 	ldw	r2,-25136(gp)
  81b148:	10800a17 	ldw	r2,40(r2)
  81b14c:	1007883a 	mov	r3,r2
  81b150:	e0bffe17 	ldw	r2,-8(fp)
  81b154:	1885883a 	add	r2,r3,r2
  81b158:	11000684 	addi	r4,r2,26
  81b15c:	e0bfff17 	ldw	r2,-4(fp)
  81b160:	1080058b 	ldhu	r2,22(r2)
  81b164:	10ffffcc 	andi	r3,r2,65535
  81b168:	2005883a 	mov	r2,r4
  81b16c:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  81b170:	d0a77417 	ldw	r2,-25136(gp)
  81b174:	10800a17 	ldw	r2,40(r2)
  81b178:	1007883a 	mov	r3,r2
  81b17c:	e0bffe17 	ldw	r2,-8(fp)
  81b180:	1885883a 	add	r2,r3,r2
  81b184:	11000704 	addi	r4,r2,28
  81b188:	e0bfff17 	ldw	r2,-4(fp)
  81b18c:	10800617 	ldw	r2,24(r2)
  81b190:	1007883a 	mov	r3,r2
  81b194:	2005883a 	mov	r2,r4
  81b198:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
  81b19c:	00800044 	movi	r2,1
  81b1a0:	d0a77515 	stw	r2,-25132(gp)
		result = true;
  81b1a4:	00800044 	movi	r2,1
  81b1a8:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
  81b1ac:	e0bffd17 	ldw	r2,-12(fp)
}
  81b1b0:	e037883a 	mov	sp,fp
  81b1b4:	dfc00117 	ldw	ra,4(sp)
  81b1b8:	df000017 	ldw	fp,0(sp)
  81b1bc:	dec00204 	addi	sp,sp,8
  81b1c0:	f800283a 	ret

0081b1c4 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  81b1c4:	defff804 	addi	sp,sp,-32
  81b1c8:	dfc00715 	stw	ra,28(sp)
  81b1cc:	df000615 	stw	fp,24(sp)
  81b1d0:	dc000515 	stw	r16,20(sp)
  81b1d4:	df000504 	addi	fp,sp,20
  81b1d8:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  81b1dc:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  81b1e0:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
  81b1e4:	0009883a 	mov	r4,zero
  81b1e8:	e17fff17 	ldw	r5,-4(fp)
  81b1ec:	081ec580 	call	81ec58 <Read_Sector_Data_Attempt_CRC>
  81b1f0:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  81b1f4:	d0a77417 	ldw	r2,-25136(gp)
  81b1f8:	10800a17 	ldw	r2,40(r2)
  81b1fc:	10807f84 	addi	r2,r2,510
  81b200:	1080002b 	ldhuio	r2,0(r2)
  81b204:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  81b208:	e0bffc0f 	ldh	r2,-16(fp)
  81b20c:	10ffffcc 	andi	r3,r2,65535
  81b210:	00aa9554 	movui	r2,43605
  81b214:	1881751e 	bne	r3,r2,81b7ec <Check_for_DOS_FAT+0x628>
  81b218:	e0bffe17 	ldw	r2,-8(fp)
  81b21c:	1005003a 	cmpeq	r2,r2,zero
  81b220:	1001721e 	bne	r2,zero,81b7ec <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
  81b224:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
  81b228:	d0a77417 	ldw	r2,-25136(gp)
  81b22c:	10800a17 	ldw	r2,40(r2)
  81b230:	10800023 	ldbuio	r2,0(r2)
  81b234:	1007883a 	mov	r3,r2
  81b238:	008020f4 	movhi	r2,131
  81b23c:	10bb3604 	addi	r2,r2,-4904
  81b240:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  81b244:	d0a77417 	ldw	r2,-25136(gp)
  81b248:	10800a17 	ldw	r2,40(r2)
  81b24c:	10800044 	addi	r2,r2,1
  81b250:	10800023 	ldbuio	r2,0(r2)
  81b254:	1007883a 	mov	r3,r2
  81b258:	008020f4 	movhi	r2,131
  81b25c:	10bb3604 	addi	r2,r2,-4904
  81b260:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  81b264:	d0a77417 	ldw	r2,-25136(gp)
  81b268:	10800a17 	ldw	r2,40(r2)
  81b26c:	10800084 	addi	r2,r2,2
  81b270:	10800023 	ldbuio	r2,0(r2)
  81b274:	1007883a 	mov	r3,r2
  81b278:	008020f4 	movhi	r2,131
  81b27c:	10bb3604 	addi	r2,r2,-4904
  81b280:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  81b284:	e03ffd15 	stw	zero,-12(fp)
  81b288:	00001006 	br	81b2cc <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
  81b28c:	e13ffd17 	ldw	r4,-12(fp)
  81b290:	d0a77417 	ldw	r2,-25136(gp)
  81b294:	10800a17 	ldw	r2,40(r2)
  81b298:	1007883a 	mov	r3,r2
  81b29c:	e0bffd17 	ldw	r2,-12(fp)
  81b2a0:	1885883a 	add	r2,r3,r2
  81b2a4:	108000c4 	addi	r2,r2,3
  81b2a8:	10800023 	ldbuio	r2,0(r2)
  81b2ac:	1007883a 	mov	r3,r2
  81b2b0:	008020f4 	movhi	r2,131
  81b2b4:	10bb3604 	addi	r2,r2,-4904
  81b2b8:	1105883a 	add	r2,r2,r4
  81b2bc:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  81b2c0:	e0bffd17 	ldw	r2,-12(fp)
  81b2c4:	10800044 	addi	r2,r2,1
  81b2c8:	e0bffd15 	stw	r2,-12(fp)
  81b2cc:	e0bffd17 	ldw	r2,-12(fp)
  81b2d0:	10800210 	cmplti	r2,r2,8
  81b2d4:	103fed1e 	bne	r2,zero,81b28c <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  81b2d8:	d0a77417 	ldw	r2,-25136(gp)
  81b2dc:	10800a17 	ldw	r2,40(r2)
  81b2e0:	10800304 	addi	r2,r2,12
  81b2e4:	10800023 	ldbuio	r2,0(r2)
  81b2e8:	10803fcc 	andi	r2,r2,255
  81b2ec:	1004923a 	slli	r2,r2,8
  81b2f0:	1007883a 	mov	r3,r2
  81b2f4:	d0a77417 	ldw	r2,-25136(gp)
  81b2f8:	10800a17 	ldw	r2,40(r2)
  81b2fc:	108002c4 	addi	r2,r2,11
  81b300:	10800023 	ldbuio	r2,0(r2)
  81b304:	10803fcc 	andi	r2,r2,255
  81b308:	1080201c 	xori	r2,r2,128
  81b30c:	10bfe004 	addi	r2,r2,-128
  81b310:	1884b03a 	or	r2,r3,r2
  81b314:	1007883a 	mov	r3,r2
  81b318:	008020f4 	movhi	r2,131
  81b31c:	10bb3604 	addi	r2,r2,-4904
  81b320:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  81b324:	d0a77417 	ldw	r2,-25136(gp)
  81b328:	10800a17 	ldw	r2,40(r2)
  81b32c:	10800344 	addi	r2,r2,13
  81b330:	10800023 	ldbuio	r2,0(r2)
  81b334:	1007883a 	mov	r3,r2
  81b338:	008020f4 	movhi	r2,131
  81b33c:	10bb3604 	addi	r2,r2,-4904
  81b340:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  81b344:	d0a77417 	ldw	r2,-25136(gp)
  81b348:	10800a17 	ldw	r2,40(r2)
  81b34c:	10800384 	addi	r2,r2,14
  81b350:	1080002b 	ldhuio	r2,0(r2)
  81b354:	1007883a 	mov	r3,r2
  81b358:	008020f4 	movhi	r2,131
  81b35c:	10bb3604 	addi	r2,r2,-4904
  81b360:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  81b364:	d0a77417 	ldw	r2,-25136(gp)
  81b368:	10800a17 	ldw	r2,40(r2)
  81b36c:	10800404 	addi	r2,r2,16
  81b370:	10800023 	ldbuio	r2,0(r2)
  81b374:	1007883a 	mov	r3,r2
  81b378:	008020f4 	movhi	r2,131
  81b37c:	10bb3604 	addi	r2,r2,-4904
  81b380:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  81b384:	d0a77417 	ldw	r2,-25136(gp)
  81b388:	10800a17 	ldw	r2,40(r2)
  81b38c:	10800484 	addi	r2,r2,18
  81b390:	10800023 	ldbuio	r2,0(r2)
  81b394:	10803fcc 	andi	r2,r2,255
  81b398:	1004923a 	slli	r2,r2,8
  81b39c:	1007883a 	mov	r3,r2
  81b3a0:	d0a77417 	ldw	r2,-25136(gp)
  81b3a4:	10800a17 	ldw	r2,40(r2)
  81b3a8:	10800444 	addi	r2,r2,17
  81b3ac:	10800023 	ldbuio	r2,0(r2)
  81b3b0:	10803fcc 	andi	r2,r2,255
  81b3b4:	1884b03a 	or	r2,r3,r2
  81b3b8:	1007883a 	mov	r3,r2
  81b3bc:	008020f4 	movhi	r2,131
  81b3c0:	10bb3604 	addi	r2,r2,-4904
  81b3c4:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  81b3c8:	d0a77417 	ldw	r2,-25136(gp)
  81b3cc:	10800a17 	ldw	r2,40(r2)
  81b3d0:	10800504 	addi	r2,r2,20
  81b3d4:	10800023 	ldbuio	r2,0(r2)
  81b3d8:	10803fcc 	andi	r2,r2,255
  81b3dc:	1004923a 	slli	r2,r2,8
  81b3e0:	1007883a 	mov	r3,r2
  81b3e4:	d0a77417 	ldw	r2,-25136(gp)
  81b3e8:	10800a17 	ldw	r2,40(r2)
  81b3ec:	108004c4 	addi	r2,r2,19
  81b3f0:	10800023 	ldbuio	r2,0(r2)
  81b3f4:	10803fcc 	andi	r2,r2,255
  81b3f8:	1884b03a 	or	r2,r3,r2
  81b3fc:	1007883a 	mov	r3,r2
  81b400:	008020f4 	movhi	r2,131
  81b404:	10bb3604 	addi	r2,r2,-4904
  81b408:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  81b40c:	d0a77417 	ldw	r2,-25136(gp)
  81b410:	10800a17 	ldw	r2,40(r2)
  81b414:	10800544 	addi	r2,r2,21
  81b418:	10800023 	ldbuio	r2,0(r2)
  81b41c:	1007883a 	mov	r3,r2
  81b420:	008020f4 	movhi	r2,131
  81b424:	10bb3604 	addi	r2,r2,-4904
  81b428:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  81b42c:	d0a77417 	ldw	r2,-25136(gp)
  81b430:	10800a17 	ldw	r2,40(r2)
  81b434:	10800584 	addi	r2,r2,22
  81b438:	1080002b 	ldhuio	r2,0(r2)
  81b43c:	1007883a 	mov	r3,r2
  81b440:	008020f4 	movhi	r2,131
  81b444:	10bb3604 	addi	r2,r2,-4904
  81b448:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  81b44c:	d0a77417 	ldw	r2,-25136(gp)
  81b450:	10800a17 	ldw	r2,40(r2)
  81b454:	10800604 	addi	r2,r2,24
  81b458:	1080002b 	ldhuio	r2,0(r2)
  81b45c:	1007883a 	mov	r3,r2
  81b460:	008020f4 	movhi	r2,131
  81b464:	10bb3604 	addi	r2,r2,-4904
  81b468:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  81b46c:	d0a77417 	ldw	r2,-25136(gp)
  81b470:	10800a17 	ldw	r2,40(r2)
  81b474:	10800684 	addi	r2,r2,26
  81b478:	1080002b 	ldhuio	r2,0(r2)
  81b47c:	1007883a 	mov	r3,r2
  81b480:	008020f4 	movhi	r2,131
  81b484:	10bb3604 	addi	r2,r2,-4904
  81b488:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  81b48c:	d0a77417 	ldw	r2,-25136(gp)
  81b490:	10800a17 	ldw	r2,40(r2)
  81b494:	10800704 	addi	r2,r2,28
  81b498:	10800037 	ldwio	r2,0(r2)
  81b49c:	1007883a 	mov	r3,r2
  81b4a0:	008020f4 	movhi	r2,131
  81b4a4:	10bb3604 	addi	r2,r2,-4904
  81b4a8:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  81b4ac:	d0a77417 	ldw	r2,-25136(gp)
  81b4b0:	10800a17 	ldw	r2,40(r2)
  81b4b4:	10800804 	addi	r2,r2,32
  81b4b8:	10800037 	ldwio	r2,0(r2)
  81b4bc:	1007883a 	mov	r3,r2
  81b4c0:	008020f4 	movhi	r2,131
  81b4c4:	10bb3604 	addi	r2,r2,-4904
  81b4c8:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  81b4cc:	d0a77417 	ldw	r2,-25136(gp)
  81b4d0:	10800a17 	ldw	r2,40(r2)
  81b4d4:	10800904 	addi	r2,r2,36
  81b4d8:	10800023 	ldbuio	r2,0(r2)
  81b4dc:	1007883a 	mov	r3,r2
  81b4e0:	008020f4 	movhi	r2,131
  81b4e4:	10bb3604 	addi	r2,r2,-4904
  81b4e8:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  81b4ec:	d0a77417 	ldw	r2,-25136(gp)
  81b4f0:	10800a17 	ldw	r2,40(r2)
  81b4f4:	10800944 	addi	r2,r2,37
  81b4f8:	10800023 	ldbuio	r2,0(r2)
  81b4fc:	1007883a 	mov	r3,r2
  81b500:	008020f4 	movhi	r2,131
  81b504:	10bb3604 	addi	r2,r2,-4904
  81b508:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  81b50c:	d0a77417 	ldw	r2,-25136(gp)
  81b510:	10800a17 	ldw	r2,40(r2)
  81b514:	10800984 	addi	r2,r2,38
  81b518:	10800023 	ldbuio	r2,0(r2)
  81b51c:	1007883a 	mov	r3,r2
  81b520:	008020f4 	movhi	r2,131
  81b524:	10bb3604 	addi	r2,r2,-4904
  81b528:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  81b52c:	008020f4 	movhi	r2,131
  81b530:	10bb3604 	addi	r2,r2,-4904
  81b534:	1080040b 	ldhu	r2,16(r2)
  81b538:	10ffffcc 	andi	r3,r2,65535
  81b53c:	008020f4 	movhi	r2,131
  81b540:	10bb3604 	addi	r2,r2,-4904
  81b544:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  81b548:	008020f4 	movhi	r2,131
  81b54c:	10bb3604 	addi	r2,r2,-4904
  81b550:	10c01117 	ldw	r3,68(r2)
  81b554:	008020f4 	movhi	r2,131
  81b558:	10bb3604 	addi	r2,r2,-4904
  81b55c:	1080068b 	ldhu	r2,26(r2)
  81b560:	10bfffcc 	andi	r2,r2,65535
  81b564:	1887883a 	add	r3,r3,r2
  81b568:	008020f4 	movhi	r2,131
  81b56c:	10bb3604 	addi	r2,r2,-4904
  81b570:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  81b574:	008020f4 	movhi	r2,131
  81b578:	10bb3604 	addi	r2,r2,-4904
  81b57c:	10c01217 	ldw	r3,72(r2)
  81b580:	008020f4 	movhi	r2,131
  81b584:	10bb3604 	addi	r2,r2,-4904
  81b588:	1080068b 	ldhu	r2,26(r2)
  81b58c:	10bfffcc 	andi	r2,r2,65535
  81b590:	1887883a 	add	r3,r3,r2
  81b594:	008020f4 	movhi	r2,131
  81b598:	10bb3604 	addi	r2,r2,-4904
  81b59c:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  81b5a0:	008020f4 	movhi	r2,131
  81b5a4:	10bb3604 	addi	r2,r2,-4904
  81b5a8:	14001317 	ldw	r16,76(r2)
  81b5ac:	008020f4 	movhi	r2,131
  81b5b0:	10bb3604 	addi	r2,r2,-4904
  81b5b4:	1080050b 	ldhu	r2,20(r2)
  81b5b8:	10bfffcc 	andi	r2,r2,65535
  81b5bc:	1008917a 	slli	r4,r2,5
  81b5c0:	008020f4 	movhi	r2,131
  81b5c4:	10bb3604 	addi	r2,r2,-4904
  81b5c8:	1080030b 	ldhu	r2,12(r2)
  81b5cc:	117fffcc 	andi	r5,r2,65535
  81b5d0:	080b2100 	call	80b210 <__divsi3>
  81b5d4:	8087883a 	add	r3,r16,r2
  81b5d8:	008020f4 	movhi	r2,131
  81b5dc:	10bb3604 	addi	r2,r2,-4904
  81b5e0:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  81b5e4:	008020f4 	movhi	r2,131
  81b5e8:	10bb3604 	addi	r2,r2,-4904
  81b5ec:	1080058b 	ldhu	r2,22(r2)
  81b5f0:	10bfffcc 	andi	r2,r2,65535
  81b5f4:	1005003a 	cmpeq	r2,r2,zero
  81b5f8:	10000b1e 	bne	r2,zero,81b628 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  81b5fc:	008020f4 	movhi	r2,131
  81b600:	10bb3604 	addi	r2,r2,-4904
  81b604:	1080058b 	ldhu	r2,22(r2)
  81b608:	113fffcc 	andi	r4,r2,65535
  81b60c:	008020f4 	movhi	r2,131
  81b610:	10bb3604 	addi	r2,r2,-4904
  81b614:	10800383 	ldbu	r2,14(r2)
  81b618:	11403fcc 	andi	r5,r2,255
  81b61c:	080b2100 	call	80b210 <__divsi3>
  81b620:	e0bffb15 	stw	r2,-20(fp)
  81b624:	00000906 	br	81b64c <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  81b628:	008020f4 	movhi	r2,131
  81b62c:	10bb3604 	addi	r2,r2,-4904
  81b630:	11000917 	ldw	r4,36(r2)
  81b634:	008020f4 	movhi	r2,131
  81b638:	10bb3604 	addi	r2,r2,-4904
  81b63c:	10800383 	ldbu	r2,14(r2)
  81b640:	11403fcc 	andi	r5,r2,255
  81b644:	080b2d00 	call	80b2d0 <__udivsi3>
  81b648:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  81b64c:	e0bffb17 	ldw	r2,-20(fp)
  81b650:	1083fdc8 	cmpgei	r2,r2,4087
  81b654:	1000051e 	bne	r2,zero,81b66c <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
  81b658:	00c020f4 	movhi	r3,131
  81b65c:	18fb3604 	addi	r3,r3,-4904
  81b660:	00800304 	movi	r2,12
  81b664:	18801085 	stb	r2,66(r3)
  81b668:	00000c06 	br	81b69c <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
  81b66c:	e0fffb17 	ldw	r3,-20(fp)
  81b670:	00bffb54 	movui	r2,65517
  81b674:	10c00516 	blt	r2,r3,81b68c <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
  81b678:	00c020f4 	movhi	r3,131
  81b67c:	18fb3604 	addi	r3,r3,-4904
  81b680:	00800404 	movi	r2,16
  81b684:	18801085 	stb	r2,66(r3)
  81b688:	00000406 	br	81b69c <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  81b68c:	00c020f4 	movhi	r3,131
  81b690:	18fb3604 	addi	r3,r3,-4904
  81b694:	00800804 	movi	r2,32
  81b698:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
  81b69c:	e03ffd15 	stw	zero,-12(fp)
  81b6a0:	00001106 	br	81b6e8 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
  81b6a4:	e13ffd17 	ldw	r4,-12(fp)
  81b6a8:	d0a77417 	ldw	r2,-25136(gp)
  81b6ac:	10800a17 	ldw	r2,40(r2)
  81b6b0:	1007883a 	mov	r3,r2
  81b6b4:	e0bffd17 	ldw	r2,-12(fp)
  81b6b8:	1885883a 	add	r2,r3,r2
  81b6bc:	108009c4 	addi	r2,r2,39
  81b6c0:	10800023 	ldbuio	r2,0(r2)
  81b6c4:	1007883a 	mov	r3,r2
  81b6c8:	008020f4 	movhi	r2,131
  81b6cc:	10bb3604 	addi	r2,r2,-4904
  81b6d0:	2085883a 	add	r2,r4,r2
  81b6d4:	10800a04 	addi	r2,r2,40
  81b6d8:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
  81b6dc:	e0bffd17 	ldw	r2,-12(fp)
  81b6e0:	10800044 	addi	r2,r2,1
  81b6e4:	e0bffd15 	stw	r2,-12(fp)
  81b6e8:	e0bffd17 	ldw	r2,-12(fp)
  81b6ec:	10800110 	cmplti	r2,r2,4
  81b6f0:	103fec1e 	bne	r2,zero,81b6a4 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  81b6f4:	e03ffd15 	stw	zero,-12(fp)
  81b6f8:	00001106 	br	81b740 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
  81b6fc:	e13ffd17 	ldw	r4,-12(fp)
  81b700:	d0a77417 	ldw	r2,-25136(gp)
  81b704:	10800a17 	ldw	r2,40(r2)
  81b708:	1007883a 	mov	r3,r2
  81b70c:	e0bffd17 	ldw	r2,-12(fp)
  81b710:	1885883a 	add	r2,r3,r2
  81b714:	10800ac4 	addi	r2,r2,43
  81b718:	10800023 	ldbuio	r2,0(r2)
  81b71c:	1007883a 	mov	r3,r2
  81b720:	008020f4 	movhi	r2,131
  81b724:	10bb3604 	addi	r2,r2,-4904
  81b728:	2085883a 	add	r2,r4,r2
  81b72c:	10800b04 	addi	r2,r2,44
  81b730:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  81b734:	e0bffd17 	ldw	r2,-12(fp)
  81b738:	10800044 	addi	r2,r2,1
  81b73c:	e0bffd15 	stw	r2,-12(fp)
  81b740:	e0bffd17 	ldw	r2,-12(fp)
  81b744:	108002d0 	cmplti	r2,r2,11
  81b748:	103fec1e 	bne	r2,zero,81b6fc <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  81b74c:	e03ffd15 	stw	zero,-12(fp)
  81b750:	00001106 	br	81b798 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
  81b754:	e13ffd17 	ldw	r4,-12(fp)
  81b758:	d0a77417 	ldw	r2,-25136(gp)
  81b75c:	10800a17 	ldw	r2,40(r2)
  81b760:	1007883a 	mov	r3,r2
  81b764:	e0bffd17 	ldw	r2,-12(fp)
  81b768:	1885883a 	add	r2,r3,r2
  81b76c:	10800d84 	addi	r2,r2,54
  81b770:	10800023 	ldbuio	r2,0(r2)
  81b774:	1007883a 	mov	r3,r2
  81b778:	008020f4 	movhi	r2,131
  81b77c:	10bb3604 	addi	r2,r2,-4904
  81b780:	2085883a 	add	r2,r4,r2
  81b784:	10800e04 	addi	r2,r2,56
  81b788:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  81b78c:	e0bffd17 	ldw	r2,-12(fp)
  81b790:	10800044 	addi	r2,r2,1
  81b794:	e0bffd15 	stw	r2,-12(fp)
  81b798:	e0bffd17 	ldw	r2,-12(fp)
  81b79c:	10800210 	cmplti	r2,r2,8
  81b7a0:	103fec1e 	bne	r2,zero,81b754 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  81b7a4:	e03ffd15 	stw	zero,-12(fp)
  81b7a8:	00000a06 	br	81b7d4 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
  81b7ac:	e0bffd17 	ldw	r2,-12(fp)
  81b7b0:	00c020f4 	movhi	r3,131
  81b7b4:	18fb4b04 	addi	r3,r3,-4820
  81b7b8:	100491ba 	slli	r2,r2,6
  81b7bc:	10c5883a 	add	r2,r2,r3
  81b7c0:	10800f04 	addi	r2,r2,60
  81b7c4:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  81b7c8:	e0bffd17 	ldw	r2,-12(fp)
  81b7cc:	10800044 	addi	r2,r2,1
  81b7d0:	e0bffd15 	stw	r2,-12(fp)
  81b7d4:	e0bffd17 	ldw	r2,-12(fp)
  81b7d8:	10800510 	cmplti	r2,r2,20
  81b7dc:	103ff31e 	bne	r2,zero,81b7ac <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
  81b7e0:	00800044 	movi	r2,1
  81b7e4:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  81b7e8:	00000106 	br	81b7f0 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
  81b7ec:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
  81b7f0:	e0bffe17 	ldw	r2,-8(fp)
}
  81b7f4:	e037883a 	mov	sp,fp
  81b7f8:	dfc00217 	ldw	ra,8(sp)
  81b7fc:	df000117 	ldw	fp,4(sp)
  81b800:	dc000017 	ldw	r16,0(sp)
  81b804:	dec00304 	addi	sp,sp,12
  81b808:	f800283a 	ret

0081b80c <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  81b80c:	defffc04 	addi	sp,sp,-16
  81b810:	dfc00315 	stw	ra,12(sp)
  81b814:	df000215 	stw	fp,8(sp)
  81b818:	df000204 	addi	fp,sp,8
	bool result = false;
  81b81c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  81b820:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81b824:	1005003a 	cmpeq	r2,r2,zero
  81b828:	1000331e 	bne	r2,zero,81b8f8 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
  81b82c:	0009883a 	mov	r4,zero
  81b830:	000b883a 	mov	r5,zero
  81b834:	081ec580 	call	81ec58 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
  81b838:	d0a76e17 	ldw	r2,-25160(gp)
  81b83c:	1080000b 	ldhu	r2,0(r2)
  81b840:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  81b844:	d0277215 	stw	zero,-25144(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  81b848:	d0277315 	stw	zero,-25140(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  81b84c:	e0bffe0f 	ldh	r2,-8(fp)
  81b850:	1004803a 	cmplt	r2,r2,zero
  81b854:	1000281e 	bne	r2,zero,81b8f8 <Look_for_FAT16+0xec>
  81b858:	e0bffe0b 	ldhu	r2,-8(fp)
  81b85c:	10bfffcc 	andi	r2,r2,65535
  81b860:	1083000c 	andi	r2,r2,3072
  81b864:	10830020 	cmpeqi	r2,r2,3072
  81b868:	1000231e 	bne	r2,zero,81b8f8 <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  81b86c:	e0bffe0b 	ldhu	r2,-8(fp)
  81b870:	10bfffcc 	andi	r2,r2,65535
  81b874:	1083000c 	andi	r2,r2,3072
  81b878:	10810018 	cmpnei	r2,r2,1024
  81b87c:	1000031e 	bne	r2,zero,81b88c <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  81b880:	0009883a 	mov	r4,zero
  81b884:	081b1c40 	call	81b1c4 <Check_for_DOS_FAT>
  81b888:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  81b88c:	e0bffe0b 	ldhu	r2,-8(fp)
  81b890:	10bfffcc 	andi	r2,r2,65535
  81b894:	1083000c 	andi	r2,r2,3072
  81b898:	1004c03a 	cmpne	r2,r2,zero
  81b89c:	1000061e 	bne	r2,zero,81b8b8 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  81b8a0:	081aad80 	call	81aad8 <Check_for_Master_Boot_Record>
  81b8a4:	1005003a 	cmpeq	r2,r2,zero
  81b8a8:	1000031e 	bne	r2,zero,81b8b8 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
  81b8ac:	d1277217 	ldw	r4,-25144(gp)
  81b8b0:	081b1c40 	call	81b1c4 <Check_for_DOS_FAT>
  81b8b4:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  81b8b8:	e0bfff17 	ldw	r2,-4(fp)
  81b8bc:	10800058 	cmpnei	r2,r2,1
  81b8c0:	10000d1e 	bne	r2,zero,81b8f8 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  81b8c4:	008020f4 	movhi	r2,131
  81b8c8:	10bb3604 	addi	r2,r2,-4904
  81b8cc:	10801083 	ldbu	r2,66(r2)
  81b8d0:	10803fcc 	andi	r2,r2,255
  81b8d4:	10800420 	cmpeqi	r2,r2,16
  81b8d8:	1000021e 	bne	r2,zero,81b8e4 <Look_for_FAT16+0xd8>
					result = false;
  81b8dc:	e03fff15 	stw	zero,-4(fp)
  81b8e0:	00000506 	br	81b8f8 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
  81b8e4:	008020f4 	movhi	r2,131
  81b8e8:	10bb3604 	addi	r2,r2,-4904
  81b8ec:	1080058b 	ldhu	r2,22(r2)
  81b8f0:	10bfffcc 	andi	r2,r2,65535
  81b8f4:	d0a77315 	stw	r2,-25140(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
  81b8f8:	e0bfff17 	ldw	r2,-4(fp)
}
  81b8fc:	e037883a 	mov	sp,fp
  81b900:	dfc00117 	ldw	ra,4(sp)
  81b904:	df000017 	ldw	fp,0(sp)
  81b908:	dec00204 	addi	sp,sp,8
  81b90c:	f800283a 	ret

0081b910 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  81b910:	defffb04 	addi	sp,sp,-20
  81b914:	dfc00415 	stw	ra,16(sp)
  81b918:	df000315 	stw	fp,12(sp)
  81b91c:	df000304 	addi	fp,sp,12
  81b920:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
  81b924:	e13fff17 	ldw	r4,-4(fp)
  81b928:	080ce500 	call	80ce50 <strlen>
  81b92c:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  81b930:	e03ffe15 	stw	zero,-8(fp)
  81b934:	00002206 	br	81b9c0 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  81b938:	e0bffe17 	ldw	r2,-8(fp)
  81b93c:	1007883a 	mov	r3,r2
  81b940:	e0bfff17 	ldw	r2,-4(fp)
  81b944:	1885883a 	add	r2,r3,r2
  81b948:	10800003 	ldbu	r2,0(r2)
  81b94c:	10803fcc 	andi	r2,r2,255
  81b950:	1080201c 	xori	r2,r2,128
  81b954:	10bfe004 	addi	r2,r2,-128
  81b958:	10801850 	cmplti	r2,r2,97
  81b95c:	1000151e 	bne	r2,zero,81b9b4 <filename_to_upper_case+0xa4>
  81b960:	e0bffe17 	ldw	r2,-8(fp)
  81b964:	1007883a 	mov	r3,r2
  81b968:	e0bfff17 	ldw	r2,-4(fp)
  81b96c:	1885883a 	add	r2,r3,r2
  81b970:	10800003 	ldbu	r2,0(r2)
  81b974:	10803fcc 	andi	r2,r2,255
  81b978:	1080201c 	xori	r2,r2,128
  81b97c:	10bfe004 	addi	r2,r2,-128
  81b980:	10801ec8 	cmpgei	r2,r2,123
  81b984:	10000b1e 	bne	r2,zero,81b9b4 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
  81b988:	e0bffe17 	ldw	r2,-8(fp)
  81b98c:	1007883a 	mov	r3,r2
  81b990:	e0bfff17 	ldw	r2,-4(fp)
  81b994:	1889883a 	add	r4,r3,r2
  81b998:	e0bffe17 	ldw	r2,-8(fp)
  81b99c:	1007883a 	mov	r3,r2
  81b9a0:	e0bfff17 	ldw	r2,-4(fp)
  81b9a4:	1885883a 	add	r2,r3,r2
  81b9a8:	10800003 	ldbu	r2,0(r2)
  81b9ac:	10bff804 	addi	r2,r2,-32
  81b9b0:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  81b9b4:	e0bffe17 	ldw	r2,-8(fp)
  81b9b8:	10800044 	addi	r2,r2,1
  81b9bc:	e0bffe15 	stw	r2,-8(fp)
  81b9c0:	e0fffe17 	ldw	r3,-8(fp)
  81b9c4:	e0bffd17 	ldw	r2,-12(fp)
  81b9c8:	18bfdb16 	blt	r3,r2,81b938 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  81b9cc:	e037883a 	mov	sp,fp
  81b9d0:	dfc00117 	ldw	ra,4(sp)
  81b9d4:	df000017 	ldw	fp,0(sp)
  81b9d8:	dec00204 	addi	sp,sp,8
  81b9dc:	f800283a 	ret

0081b9e0 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  81b9e0:	defff804 	addi	sp,sp,-32
  81b9e4:	dfc00715 	stw	ra,28(sp)
  81b9e8:	df000615 	stw	fp,24(sp)
  81b9ec:	df000604 	addi	fp,sp,24
  81b9f0:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
  81b9f4:	e13fff17 	ldw	r4,-4(fp)
  81b9f8:	080ce500 	call	80ce50 <strlen>
  81b9fc:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
  81ba00:	00bfffc4 	movi	r2,-1
  81ba04:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
  81ba08:	00bfffc4 	movi	r2,-1
  81ba0c:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
  81ba10:	00800044 	movi	r2,1
  81ba14:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
  81ba18:	e03ffd15 	stw	zero,-12(fp)
  81ba1c:	00007606 	br	81bbf8 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  81ba20:	e0bffd17 	ldw	r2,-12(fp)
  81ba24:	1007883a 	mov	r3,r2
  81ba28:	e0bfff17 	ldw	r2,-4(fp)
  81ba2c:	1885883a 	add	r2,r3,r2
  81ba30:	10800003 	ldbu	r2,0(r2)
  81ba34:	10803fcc 	andi	r2,r2,255
  81ba38:	1080201c 	xori	r2,r2,128
  81ba3c:	10bfe004 	addi	r2,r2,-128
  81ba40:	10800820 	cmpeqi	r2,r2,32
  81ba44:	1000431e 	bne	r2,zero,81bb54 <check_file_name_for_FAT16_compliance+0x174>
  81ba48:	e0bffd17 	ldw	r2,-12(fp)
  81ba4c:	10ffffc4 	addi	r3,r2,-1
  81ba50:	e0bffc17 	ldw	r2,-16(fp)
  81ba54:	1880141e 	bne	r3,r2,81baa8 <check_file_name_for_FAT16_compliance+0xc8>
  81ba58:	e0bffd17 	ldw	r2,-12(fp)
  81ba5c:	1007883a 	mov	r3,r2
  81ba60:	e0bfff17 	ldw	r2,-4(fp)
  81ba64:	1885883a 	add	r2,r3,r2
  81ba68:	10800003 	ldbu	r2,0(r2)
  81ba6c:	10803fcc 	andi	r2,r2,255
  81ba70:	1080201c 	xori	r2,r2,128
  81ba74:	10bfe004 	addi	r2,r2,-128
  81ba78:	10801720 	cmpeqi	r2,r2,92
  81ba7c:	1000351e 	bne	r2,zero,81bb54 <check_file_name_for_FAT16_compliance+0x174>
  81ba80:	e0bffd17 	ldw	r2,-12(fp)
  81ba84:	1007883a 	mov	r3,r2
  81ba88:	e0bfff17 	ldw	r2,-4(fp)
  81ba8c:	1885883a 	add	r2,r3,r2
  81ba90:	10800003 	ldbu	r2,0(r2)
  81ba94:	10803fcc 	andi	r2,r2,255
  81ba98:	1080201c 	xori	r2,r2,128
  81ba9c:	10bfe004 	addi	r2,r2,-128
  81baa0:	10800be0 	cmpeqi	r2,r2,47
  81baa4:	10002b1e 	bne	r2,zero,81bb54 <check_file_name_for_FAT16_compliance+0x174>
  81baa8:	e0fffd17 	ldw	r3,-12(fp)
  81baac:	e0bffb17 	ldw	r2,-20(fp)
  81bab0:	1885c83a 	sub	r2,r3,r2
  81bab4:	10800258 	cmpnei	r2,r2,9
  81bab8:	10000a1e 	bne	r2,zero,81bae4 <check_file_name_for_FAT16_compliance+0x104>
  81babc:	e0bffd17 	ldw	r2,-12(fp)
  81bac0:	1007883a 	mov	r3,r2
  81bac4:	e0bfff17 	ldw	r2,-4(fp)
  81bac8:	1885883a 	add	r2,r3,r2
  81bacc:	10800003 	ldbu	r2,0(r2)
  81bad0:	10803fcc 	andi	r2,r2,255
  81bad4:	1080201c 	xori	r2,r2,128
  81bad8:	10bfe004 	addi	r2,r2,-128
  81badc:	10800b98 	cmpnei	r2,r2,46
  81bae0:	10001c1e 	bne	r2,zero,81bb54 <check_file_name_for_FAT16_compliance+0x174>
  81bae4:	e0fffc17 	ldw	r3,-16(fp)
  81bae8:	e0bffb17 	ldw	r2,-20(fp)
  81baec:	18801b26 	beq	r3,r2,81bb5c <check_file_name_for_FAT16_compliance+0x17c>
  81baf0:	e0fffd17 	ldw	r3,-12(fp)
  81baf4:	e0bffb17 	ldw	r2,-20(fp)
  81baf8:	1885c83a 	sub	r2,r3,r2
  81bafc:	10800110 	cmplti	r2,r2,4
  81bb00:	1000161e 	bne	r2,zero,81bb5c <check_file_name_for_FAT16_compliance+0x17c>
  81bb04:	e0bffd17 	ldw	r2,-12(fp)
  81bb08:	1007883a 	mov	r3,r2
  81bb0c:	e0bfff17 	ldw	r2,-4(fp)
  81bb10:	1885883a 	add	r2,r3,r2
  81bb14:	10800003 	ldbu	r2,0(r2)
  81bb18:	10803fcc 	andi	r2,r2,255
  81bb1c:	1080201c 	xori	r2,r2,128
  81bb20:	10bfe004 	addi	r2,r2,-128
  81bb24:	10801720 	cmpeqi	r2,r2,92
  81bb28:	10000c1e 	bne	r2,zero,81bb5c <check_file_name_for_FAT16_compliance+0x17c>
  81bb2c:	e0bffd17 	ldw	r2,-12(fp)
  81bb30:	1007883a 	mov	r3,r2
  81bb34:	e0bfff17 	ldw	r2,-4(fp)
  81bb38:	1885883a 	add	r2,r3,r2
  81bb3c:	10800003 	ldbu	r2,0(r2)
  81bb40:	10803fcc 	andi	r2,r2,255
  81bb44:	1080201c 	xori	r2,r2,128
  81bb48:	10bfe004 	addi	r2,r2,-128
  81bb4c:	10800be0 	cmpeqi	r2,r2,47
  81bb50:	1000021e 	bne	r2,zero,81bb5c <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
  81bb54:	e03ffa15 	stw	zero,-24(fp)
			break;
  81bb58:	00002a06 	br	81bc04 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  81bb5c:	e0bffd17 	ldw	r2,-12(fp)
  81bb60:	1007883a 	mov	r3,r2
  81bb64:	e0bfff17 	ldw	r2,-4(fp)
  81bb68:	1885883a 	add	r2,r3,r2
  81bb6c:	10800003 	ldbu	r2,0(r2)
  81bb70:	10803fcc 	andi	r2,r2,255
  81bb74:	1080201c 	xori	r2,r2,128
  81bb78:	10bfe004 	addi	r2,r2,-128
  81bb7c:	10801720 	cmpeqi	r2,r2,92
  81bb80:	10000a1e 	bne	r2,zero,81bbac <check_file_name_for_FAT16_compliance+0x1cc>
  81bb84:	e0bffd17 	ldw	r2,-12(fp)
  81bb88:	1007883a 	mov	r3,r2
  81bb8c:	e0bfff17 	ldw	r2,-4(fp)
  81bb90:	1885883a 	add	r2,r3,r2
  81bb94:	10800003 	ldbu	r2,0(r2)
  81bb98:	10803fcc 	andi	r2,r2,255
  81bb9c:	1080201c 	xori	r2,r2,128
  81bba0:	10bfe004 	addi	r2,r2,-128
  81bba4:	10800bd8 	cmpnei	r2,r2,47
  81bba8:	1000041e 	bne	r2,zero,81bbbc <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
  81bbac:	e0bffd17 	ldw	r2,-12(fp)
  81bbb0:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
  81bbb4:	e0bffd17 	ldw	r2,-12(fp)
  81bbb8:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
  81bbbc:	e0bffd17 	ldw	r2,-12(fp)
  81bbc0:	1007883a 	mov	r3,r2
  81bbc4:	e0bfff17 	ldw	r2,-4(fp)
  81bbc8:	1885883a 	add	r2,r3,r2
  81bbcc:	10800003 	ldbu	r2,0(r2)
  81bbd0:	10803fcc 	andi	r2,r2,255
  81bbd4:	1080201c 	xori	r2,r2,128
  81bbd8:	10bfe004 	addi	r2,r2,-128
  81bbdc:	10800b98 	cmpnei	r2,r2,46
  81bbe0:	1000021e 	bne	r2,zero,81bbec <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
  81bbe4:	e0bffd17 	ldw	r2,-12(fp)
  81bbe8:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  81bbec:	e0bffd17 	ldw	r2,-12(fp)
  81bbf0:	10800044 	addi	r2,r2,1
  81bbf4:	e0bffd15 	stw	r2,-12(fp)
  81bbf8:	e0fffd17 	ldw	r3,-12(fp)
  81bbfc:	e0bffe17 	ldw	r2,-8(fp)
  81bc00:	18bf8716 	blt	r3,r2,81ba20 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  81bc04:	e0fffe17 	ldw	r3,-8(fp)
  81bc08:	e0bfff17 	ldw	r2,-4(fp)
  81bc0c:	1885883a 	add	r2,r3,r2
  81bc10:	10bfffc4 	addi	r2,r2,-1
  81bc14:	10800003 	ldbu	r2,0(r2)
  81bc18:	10803fcc 	andi	r2,r2,255
  81bc1c:	1080201c 	xori	r2,r2,128
  81bc20:	10bfe004 	addi	r2,r2,-128
  81bc24:	10801720 	cmpeqi	r2,r2,92
  81bc28:	10000a1e 	bne	r2,zero,81bc54 <check_file_name_for_FAT16_compliance+0x274>
  81bc2c:	e0fffe17 	ldw	r3,-8(fp)
  81bc30:	e0bfff17 	ldw	r2,-4(fp)
  81bc34:	1885883a 	add	r2,r3,r2
  81bc38:	10bfffc4 	addi	r2,r2,-1
  81bc3c:	10800003 	ldbu	r2,0(r2)
  81bc40:	10803fcc 	andi	r2,r2,255
  81bc44:	1080201c 	xori	r2,r2,128
  81bc48:	10bfe004 	addi	r2,r2,-128
  81bc4c:	10800bd8 	cmpnei	r2,r2,47
  81bc50:	1000011e 	bne	r2,zero,81bc58 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
  81bc54:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
  81bc58:	e0bffa17 	ldw	r2,-24(fp)
}
  81bc5c:	e037883a 	mov	sp,fp
  81bc60:	dfc00117 	ldw	ra,4(sp)
  81bc64:	df000017 	ldw	fp,0(sp)
  81bc68:	dec00204 	addi	sp,sp,8
  81bc6c:	f800283a 	ret

0081bc70 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  81bc70:	defffb04 	addi	sp,sp,-20
  81bc74:	dfc00415 	stw	ra,16(sp)
  81bc78:	df000315 	stw	fp,12(sp)
  81bc7c:	df000304 	addi	fp,sp,12
  81bc80:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
  81bc84:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
  81bc88:	e13fff17 	ldw	r4,-4(fp)
  81bc8c:	080ce500 	call	80ce50 <strlen>
  81bc90:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  81bc94:	e03ffe15 	stw	zero,-8(fp)
  81bc98:	00001706 	br	81bcf8 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
  81bc9c:	e0bffe17 	ldw	r2,-8(fp)
  81bca0:	1007883a 	mov	r3,r2
  81bca4:	e0bfff17 	ldw	r2,-4(fp)
  81bca8:	1885883a 	add	r2,r3,r2
  81bcac:	10800003 	ldbu	r2,0(r2)
  81bcb0:	10803fcc 	andi	r2,r2,255
  81bcb4:	1080201c 	xori	r2,r2,128
  81bcb8:	10bfe004 	addi	r2,r2,-128
  81bcbc:	10801720 	cmpeqi	r2,r2,92
  81bcc0:	1000101e 	bne	r2,zero,81bd04 <get_dir_divider_location+0x94>
  81bcc4:	e0bffe17 	ldw	r2,-8(fp)
  81bcc8:	1007883a 	mov	r3,r2
  81bccc:	e0bfff17 	ldw	r2,-4(fp)
  81bcd0:	1885883a 	add	r2,r3,r2
  81bcd4:	10800003 	ldbu	r2,0(r2)
  81bcd8:	10803fcc 	andi	r2,r2,255
  81bcdc:	1080201c 	xori	r2,r2,128
  81bce0:	10bfe004 	addi	r2,r2,-128
  81bce4:	10800be0 	cmpeqi	r2,r2,47
  81bce8:	1000061e 	bne	r2,zero,81bd04 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  81bcec:	e0bffe17 	ldw	r2,-8(fp)
  81bcf0:	10800044 	addi	r2,r2,1
  81bcf4:	e0bffe15 	stw	r2,-8(fp)
  81bcf8:	e0fffe17 	ldw	r3,-8(fp)
  81bcfc:	e0bffd17 	ldw	r2,-12(fp)
  81bd00:	18bfe616 	blt	r3,r2,81bc9c <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  81bd04:	e0fffe17 	ldw	r3,-8(fp)
  81bd08:	e0bffd17 	ldw	r2,-12(fp)
  81bd0c:	1880021e 	bne	r3,r2,81bd18 <get_dir_divider_location+0xa8>
		index = -1;
  81bd10:	00bfffc4 	movi	r2,-1
  81bd14:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
  81bd18:	e0bffe17 	ldw	r2,-8(fp)
}
  81bd1c:	e037883a 	mov	sp,fp
  81bd20:	dfc00117 	ldw	ra,4(sp)
  81bd24:	df000017 	ldw	fp,0(sp)
  81bd28:	dec00204 	addi	sp,sp,8
  81bd2c:	f800283a 	ret

0081bd30 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  81bd30:	defff604 	addi	sp,sp,-40
  81bd34:	df000915 	stw	fp,36(sp)
  81bd38:	df000904 	addi	fp,sp,36
  81bd3c:	e13ff915 	stw	r4,-28(fp)
  81bd40:	e17ffa15 	stw	r5,-24(fp)
  81bd44:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
  81bd48:	00800044 	movi	r2,1
  81bd4c:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
  81bd50:	e03ff715 	stw	zero,-36(fp)
  81bd54:	00005006 	br	81be98 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
  81bd58:	e0fff717 	ldw	r3,-36(fp)
  81bd5c:	e0bff917 	ldw	r2,-28(fp)
  81bd60:	10c5883a 	add	r2,r2,r3
  81bd64:	10800003 	ldbu	r2,0(r2)
  81bd68:	10803fcc 	andi	r2,r2,255
  81bd6c:	10801870 	cmpltui	r2,r2,97
  81bd70:	1000111e 	bne	r2,zero,81bdb8 <match_file_record_to_name_ext+0x88>
  81bd74:	e0fff717 	ldw	r3,-36(fp)
  81bd78:	e0bff917 	ldw	r2,-28(fp)
  81bd7c:	10c5883a 	add	r2,r2,r3
  81bd80:	10800003 	ldbu	r2,0(r2)
  81bd84:	10803fcc 	andi	r2,r2,255
  81bd88:	10801ee8 	cmpgeui	r2,r2,123
  81bd8c:	10000a1e 	bne	r2,zero,81bdb8 <match_file_record_to_name_ext+0x88>
  81bd90:	e0fff717 	ldw	r3,-36(fp)
  81bd94:	e0bff917 	ldw	r2,-28(fp)
  81bd98:	10c5883a 	add	r2,r2,r3
  81bd9c:	10800003 	ldbu	r2,0(r2)
  81bda0:	10bff804 	addi	r2,r2,-32
  81bda4:	10803fcc 	andi	r2,r2,255
  81bda8:	1080201c 	xori	r2,r2,128
  81bdac:	10bfe004 	addi	r2,r2,-128
  81bdb0:	e0bfff15 	stw	r2,-4(fp)
  81bdb4:	00000806 	br	81bdd8 <match_file_record_to_name_ext+0xa8>
  81bdb8:	e0fff717 	ldw	r3,-36(fp)
  81bdbc:	e0bff917 	ldw	r2,-28(fp)
  81bdc0:	10c5883a 	add	r2,r2,r3
  81bdc4:	10800003 	ldbu	r2,0(r2)
  81bdc8:	10803fcc 	andi	r2,r2,255
  81bdcc:	1080201c 	xori	r2,r2,128
  81bdd0:	10bfe004 	addi	r2,r2,-128
  81bdd4:	e0bfff15 	stw	r2,-4(fp)
  81bdd8:	e0bff717 	ldw	r2,-36(fp)
  81bddc:	1007883a 	mov	r3,r2
  81bde0:	e0bffa17 	ldw	r2,-24(fp)
  81bde4:	1885883a 	add	r2,r3,r2
  81bde8:	10800003 	ldbu	r2,0(r2)
  81bdec:	10803fcc 	andi	r2,r2,255
  81bdf0:	1080201c 	xori	r2,r2,128
  81bdf4:	10bfe004 	addi	r2,r2,-128
  81bdf8:	10801850 	cmplti	r2,r2,97
  81bdfc:	1000151e 	bne	r2,zero,81be54 <match_file_record_to_name_ext+0x124>
  81be00:	e0bff717 	ldw	r2,-36(fp)
  81be04:	1007883a 	mov	r3,r2
  81be08:	e0bffa17 	ldw	r2,-24(fp)
  81be0c:	1885883a 	add	r2,r3,r2
  81be10:	10800003 	ldbu	r2,0(r2)
  81be14:	10803fcc 	andi	r2,r2,255
  81be18:	1080201c 	xori	r2,r2,128
  81be1c:	10bfe004 	addi	r2,r2,-128
  81be20:	10801ec8 	cmpgei	r2,r2,123
  81be24:	10000b1e 	bne	r2,zero,81be54 <match_file_record_to_name_ext+0x124>
  81be28:	e0bff717 	ldw	r2,-36(fp)
  81be2c:	1007883a 	mov	r3,r2
  81be30:	e0bffa17 	ldw	r2,-24(fp)
  81be34:	1885883a 	add	r2,r3,r2
  81be38:	10800003 	ldbu	r2,0(r2)
  81be3c:	10bff804 	addi	r2,r2,-32
  81be40:	10803fcc 	andi	r2,r2,255
  81be44:	1080201c 	xori	r2,r2,128
  81be48:	10bfe004 	addi	r2,r2,-128
  81be4c:	e0bffe15 	stw	r2,-8(fp)
  81be50:	00000906 	br	81be78 <match_file_record_to_name_ext+0x148>
  81be54:	e0bff717 	ldw	r2,-36(fp)
  81be58:	1007883a 	mov	r3,r2
  81be5c:	e0bffa17 	ldw	r2,-24(fp)
  81be60:	1885883a 	add	r2,r3,r2
  81be64:	10800003 	ldbu	r2,0(r2)
  81be68:	10803fcc 	andi	r2,r2,255
  81be6c:	1080201c 	xori	r2,r2,128
  81be70:	10bfe004 	addi	r2,r2,-128
  81be74:	e0bffe15 	stw	r2,-8(fp)
  81be78:	e0bfff17 	ldw	r2,-4(fp)
  81be7c:	e0fffe17 	ldw	r3,-8(fp)
  81be80:	10c00226 	beq	r2,r3,81be8c <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
  81be84:	e03ff815 	stw	zero,-32(fp)
			break;
  81be88:	00000606 	br	81bea4 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
  81be8c:	e0bff717 	ldw	r2,-36(fp)
  81be90:	10800044 	addi	r2,r2,1
  81be94:	e0bff715 	stw	r2,-36(fp)
  81be98:	e0bff717 	ldw	r2,-36(fp)
  81be9c:	10800210 	cmplti	r2,r2,8
  81bea0:	103fad1e 	bne	r2,zero,81bd58 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  81bea4:	e03ff715 	stw	zero,-36(fp)
  81bea8:	00005406 	br	81bffc <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
  81beac:	e0fff717 	ldw	r3,-36(fp)
  81beb0:	e0bff917 	ldw	r2,-28(fp)
  81beb4:	1885883a 	add	r2,r3,r2
  81beb8:	10800204 	addi	r2,r2,8
  81bebc:	10800003 	ldbu	r2,0(r2)
  81bec0:	10803fcc 	andi	r2,r2,255
  81bec4:	10801870 	cmpltui	r2,r2,97
  81bec8:	1000131e 	bne	r2,zero,81bf18 <match_file_record_to_name_ext+0x1e8>
  81becc:	e0fff717 	ldw	r3,-36(fp)
  81bed0:	e0bff917 	ldw	r2,-28(fp)
  81bed4:	1885883a 	add	r2,r3,r2
  81bed8:	10800204 	addi	r2,r2,8
  81bedc:	10800003 	ldbu	r2,0(r2)
  81bee0:	10803fcc 	andi	r2,r2,255
  81bee4:	10801ee8 	cmpgeui	r2,r2,123
  81bee8:	10000b1e 	bne	r2,zero,81bf18 <match_file_record_to_name_ext+0x1e8>
  81beec:	e0fff717 	ldw	r3,-36(fp)
  81bef0:	e0bff917 	ldw	r2,-28(fp)
  81bef4:	1885883a 	add	r2,r3,r2
  81bef8:	10800204 	addi	r2,r2,8
  81befc:	10800003 	ldbu	r2,0(r2)
  81bf00:	10bff804 	addi	r2,r2,-32
  81bf04:	10803fcc 	andi	r2,r2,255
  81bf08:	1080201c 	xori	r2,r2,128
  81bf0c:	10bfe004 	addi	r2,r2,-128
  81bf10:	e0bffd15 	stw	r2,-12(fp)
  81bf14:	00000906 	br	81bf3c <match_file_record_to_name_ext+0x20c>
  81bf18:	e0fff717 	ldw	r3,-36(fp)
  81bf1c:	e0bff917 	ldw	r2,-28(fp)
  81bf20:	1885883a 	add	r2,r3,r2
  81bf24:	10800204 	addi	r2,r2,8
  81bf28:	10800003 	ldbu	r2,0(r2)
  81bf2c:	10803fcc 	andi	r2,r2,255
  81bf30:	1080201c 	xori	r2,r2,128
  81bf34:	10bfe004 	addi	r2,r2,-128
  81bf38:	e0bffd15 	stw	r2,-12(fp)
  81bf3c:	e0bff717 	ldw	r2,-36(fp)
  81bf40:	1007883a 	mov	r3,r2
  81bf44:	e0bffb17 	ldw	r2,-20(fp)
  81bf48:	1885883a 	add	r2,r3,r2
  81bf4c:	10800003 	ldbu	r2,0(r2)
  81bf50:	10803fcc 	andi	r2,r2,255
  81bf54:	1080201c 	xori	r2,r2,128
  81bf58:	10bfe004 	addi	r2,r2,-128
  81bf5c:	10801850 	cmplti	r2,r2,97
  81bf60:	1000151e 	bne	r2,zero,81bfb8 <match_file_record_to_name_ext+0x288>
  81bf64:	e0bff717 	ldw	r2,-36(fp)
  81bf68:	1007883a 	mov	r3,r2
  81bf6c:	e0bffb17 	ldw	r2,-20(fp)
  81bf70:	1885883a 	add	r2,r3,r2
  81bf74:	10800003 	ldbu	r2,0(r2)
  81bf78:	10803fcc 	andi	r2,r2,255
  81bf7c:	1080201c 	xori	r2,r2,128
  81bf80:	10bfe004 	addi	r2,r2,-128
  81bf84:	10801ec8 	cmpgei	r2,r2,123
  81bf88:	10000b1e 	bne	r2,zero,81bfb8 <match_file_record_to_name_ext+0x288>
  81bf8c:	e0bff717 	ldw	r2,-36(fp)
  81bf90:	1007883a 	mov	r3,r2
  81bf94:	e0bffb17 	ldw	r2,-20(fp)
  81bf98:	1885883a 	add	r2,r3,r2
  81bf9c:	10800003 	ldbu	r2,0(r2)
  81bfa0:	10bff804 	addi	r2,r2,-32
  81bfa4:	10803fcc 	andi	r2,r2,255
  81bfa8:	1080201c 	xori	r2,r2,128
  81bfac:	10bfe004 	addi	r2,r2,-128
  81bfb0:	e0bffc15 	stw	r2,-16(fp)
  81bfb4:	00000906 	br	81bfdc <match_file_record_to_name_ext+0x2ac>
  81bfb8:	e0bff717 	ldw	r2,-36(fp)
  81bfbc:	1007883a 	mov	r3,r2
  81bfc0:	e0bffb17 	ldw	r2,-20(fp)
  81bfc4:	1885883a 	add	r2,r3,r2
  81bfc8:	10800003 	ldbu	r2,0(r2)
  81bfcc:	10803fcc 	andi	r2,r2,255
  81bfd0:	1080201c 	xori	r2,r2,128
  81bfd4:	10bfe004 	addi	r2,r2,-128
  81bfd8:	e0bffc15 	stw	r2,-16(fp)
  81bfdc:	e0bffd17 	ldw	r2,-12(fp)
  81bfe0:	e0fffc17 	ldw	r3,-16(fp)
  81bfe4:	10c00226 	beq	r2,r3,81bff0 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
  81bfe8:	e03ff815 	stw	zero,-32(fp)
			break;
  81bfec:	00000606 	br	81c008 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  81bff0:	e0bff717 	ldw	r2,-36(fp)
  81bff4:	10800044 	addi	r2,r2,1
  81bff8:	e0bff715 	stw	r2,-36(fp)
  81bffc:	e0bff717 	ldw	r2,-36(fp)
  81c000:	108000d0 	cmplti	r2,r2,3
  81c004:	103fa91e 	bne	r2,zero,81beac <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
  81c008:	e0bff817 	ldw	r2,-32(fp)
}
  81c00c:	e037883a 	mov	sp,fp
  81c010:	df000017 	ldw	fp,0(sp)
  81c014:	dec00104 	addi	sp,sp,4
  81c018:	f800283a 	ret

0081c01c <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  81c01c:	deffe604 	addi	sp,sp,-104
  81c020:	dfc01915 	stw	ra,100(sp)
  81c024:	df001815 	stw	fp,96(sp)
  81c028:	df001804 	addi	fp,sp,96
  81c02c:	e13ffc15 	stw	r4,-16(fp)
  81c030:	e17ffd15 	stw	r5,-12(fp)
  81c034:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
  81c038:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
  81c03c:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
  81c040:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
  81c044:	e13ffc17 	ldw	r4,-16(fp)
  81c048:	081bc700 	call	81bc70 <get_dir_divider_location>
  81c04c:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
  81c050:	00012206 	br	81c4dc <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  81c054:	00800804 	movi	r2,32
  81c058:	e0bff805 	stb	r2,-32(fp)
  81c05c:	00800804 	movi	r2,32
  81c060:	e0bff845 	stb	r2,-31(fp)
  81c064:	00800804 	movi	r2,32
  81c068:	e0bff885 	stb	r2,-30(fp)
  81c06c:	00800804 	movi	r2,32
  81c070:	e0bff8c5 	stb	r2,-29(fp)
  81c074:	00800804 	movi	r2,32
  81c078:	e0bff905 	stb	r2,-28(fp)
  81c07c:	00800804 	movi	r2,32
  81c080:	e0bff945 	stb	r2,-27(fp)
  81c084:	00800804 	movi	r2,32
  81c088:	e0bff985 	stb	r2,-26(fp)
  81c08c:	00800804 	movi	r2,32
  81c090:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
  81c094:	00800804 	movi	r2,32
  81c098:	e0bffa05 	stb	r2,-24(fp)
  81c09c:	00800804 	movi	r2,32
  81c0a0:	e0bffa45 	stb	r2,-23(fp)
  81c0a4:	00800804 	movi	r2,32
  81c0a8:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
  81c0ac:	00bfffc4 	movi	r2,-1
  81c0b0:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
  81c0b4:	e0bff617 	ldw	r2,-40(fp)
  81c0b8:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  81c0bc:	e03ff415 	stw	zero,-48(fp)
  81c0c0:	00002e06 	br	81c17c <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
  81c0c4:	e0fff417 	ldw	r3,-48(fp)
  81c0c8:	e0bff317 	ldw	r2,-52(fp)
  81c0cc:	1885883a 	add	r2,r3,r2
  81c0d0:	1007883a 	mov	r3,r2
  81c0d4:	e0bffc17 	ldw	r2,-16(fp)
  81c0d8:	1885883a 	add	r2,r3,r2
  81c0dc:	10800003 	ldbu	r2,0(r2)
  81c0e0:	10803fcc 	andi	r2,r2,255
  81c0e4:	1080201c 	xori	r2,r2,128
  81c0e8:	10bfe004 	addi	r2,r2,-128
  81c0ec:	10800b98 	cmpnei	r2,r2,46
  81c0f0:	1000031e 	bne	r2,zero,81c100 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
  81c0f4:	e0bff417 	ldw	r2,-48(fp)
  81c0f8:	e0bff215 	stw	r2,-56(fp)
  81c0fc:	00001c06 	br	81c170 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
  81c100:	e0bff217 	ldw	r2,-56(fp)
  81c104:	1004403a 	cmpge	r2,r2,zero
  81c108:	10000c1e 	bne	r2,zero,81c13c <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
  81c10c:	e13ff417 	ldw	r4,-48(fp)
  81c110:	e0fff417 	ldw	r3,-48(fp)
  81c114:	e0bff317 	ldw	r2,-52(fp)
  81c118:	1885883a 	add	r2,r3,r2
  81c11c:	1007883a 	mov	r3,r2
  81c120:	e0bffc17 	ldw	r2,-16(fp)
  81c124:	1885883a 	add	r2,r3,r2
  81c128:	10c00003 	ldbu	r3,0(r2)
  81c12c:	e0bff804 	addi	r2,fp,-32
  81c130:	1105883a 	add	r2,r2,r4
  81c134:	10c00005 	stb	r3,0(r2)
  81c138:	00000d06 	br	81c170 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
  81c13c:	e0fff417 	ldw	r3,-48(fp)
  81c140:	e0bff217 	ldw	r2,-56(fp)
  81c144:	1889c83a 	sub	r4,r3,r2
  81c148:	e0fff417 	ldw	r3,-48(fp)
  81c14c:	e0bff317 	ldw	r2,-52(fp)
  81c150:	1885883a 	add	r2,r3,r2
  81c154:	1007883a 	mov	r3,r2
  81c158:	e0bffc17 	ldw	r2,-16(fp)
  81c15c:	1885883a 	add	r2,r3,r2
  81c160:	10c00003 	ldbu	r3,0(r2)
  81c164:	e0bffa04 	addi	r2,fp,-24
  81c168:	1105883a 	add	r2,r2,r4
  81c16c:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  81c170:	e0bff417 	ldw	r2,-48(fp)
  81c174:	10800044 	addi	r2,r2,1
  81c178:	e0bff415 	stw	r2,-48(fp)
  81c17c:	e0fff417 	ldw	r3,-48(fp)
  81c180:	e0bff517 	ldw	r2,-44(fp)
  81c184:	18bfcf16 	blt	r3,r2,81c0c4 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  81c188:	e0bff617 	ldw	r2,-40(fp)
  81c18c:	1004c03a 	cmpne	r2,r2,zero
  81c190:	1000551e 	bne	r2,zero,81c2e8 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  81c194:	008020f4 	movhi	r2,131
  81c198:	10bb3604 	addi	r2,r2,-4904
  81c19c:	1080050b 	ldhu	r2,20(r2)
  81c1a0:	10bfffcc 	andi	r2,r2,65535
  81c1a4:	1008917a 	slli	r4,r2,5
  81c1a8:	008020f4 	movhi	r2,131
  81c1ac:	10bb3604 	addi	r2,r2,-4904
  81c1b0:	1080030b 	ldhu	r2,12(r2)
  81c1b4:	117fffcc 	andi	r5,r2,65535
  81c1b8:	080b2100 	call	80b210 <__divsi3>
  81c1bc:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81c1c0:	e03fef15 	stw	zero,-68(fp)
  81c1c4:	00003806 	br	81c2a8 <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
  81c1c8:	008020f4 	movhi	r2,131
  81c1cc:	10bb3604 	addi	r2,r2,-4904
  81c1d0:	10c01317 	ldw	r3,76(r2)
  81c1d4:	e0bfef17 	ldw	r2,-68(fp)
  81c1d8:	1885883a 	add	r2,r3,r2
  81c1dc:	1009883a 	mov	r4,r2
  81c1e0:	d1677217 	ldw	r5,-25144(gp)
  81c1e4:	081a8400 	call	81a840 <Read_Sector_Data>
  81c1e8:	1005003a 	cmpeq	r2,r2,zero
  81c1ec:	1000311e 	bne	r2,zero,81c2b4 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  81c1f0:	e03fee15 	stw	zero,-72(fp)
  81c1f4:	00002306 	br	81c284 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  81c1f8:	e0bfee17 	ldw	r2,-72(fp)
  81c1fc:	1008917a 	slli	r4,r2,5
  81c200:	e1ffef17 	ldw	r7,-68(fp)
  81c204:	e17ffe17 	ldw	r5,-8(fp)
  81c208:	000d883a 	mov	r6,zero
  81c20c:	081ac880 	call	81ac88 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  81c210:	e0bffe17 	ldw	r2,-8(fp)
  81c214:	10800003 	ldbu	r2,0(r2)
  81c218:	10803fcc 	andi	r2,r2,255
  81c21c:	10803960 	cmpeqi	r2,r2,229
  81c220:	1000151e 	bne	r2,zero,81c278 <get_home_directory_cluster_for_file+0x25c>
  81c224:	e0bffe17 	ldw	r2,-8(fp)
  81c228:	10800003 	ldbu	r2,0(r2)
  81c22c:	10803fcc 	andi	r2,r2,255
  81c230:	1005003a 	cmpeq	r2,r2,zero
  81c234:	1000101e 	bne	r2,zero,81c278 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  81c238:	e17ff804 	addi	r5,fp,-32
  81c23c:	e1bffa04 	addi	r6,fp,-24
  81c240:	e13ffe17 	ldw	r4,-8(fp)
  81c244:	081bd300 	call	81bd30 <match_file_record_to_name_ext>
  81c248:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
  81c24c:	e0bfed17 	ldw	r2,-76(fp)
  81c250:	1005003a 	cmpeq	r2,r2,zero
  81c254:	1000081e 	bne	r2,zero,81c278 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
  81c258:	e0bffe17 	ldw	r2,-8(fp)
  81c25c:	1080058b 	ldhu	r2,22(r2)
  81c260:	10bfffcc 	andi	r2,r2,65535
  81c264:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  81c268:	e0fffe17 	ldw	r3,-8(fp)
  81c26c:	00800044 	movi	r2,1
  81c270:	18800a15 	stw	r2,40(r3)
								break;
  81c274:	00000606 	br	81c290 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  81c278:	e0bfee17 	ldw	r2,-72(fp)
  81c27c:	10800044 	addi	r2,r2,1
  81c280:	e0bfee15 	stw	r2,-72(fp)
  81c284:	e0bfee17 	ldw	r2,-72(fp)
  81c288:	10800410 	cmplti	r2,r2,16
  81c28c:	103fda1e 	bne	r2,zero,81c1f8 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  81c290:	e0fff117 	ldw	r3,-60(fp)
  81c294:	e0bff617 	ldw	r2,-40(fp)
  81c298:	1880061e 	bne	r3,r2,81c2b4 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81c29c:	e0bfef17 	ldw	r2,-68(fp)
  81c2a0:	10800044 	addi	r2,r2,1
  81c2a4:	e0bfef15 	stw	r2,-68(fp)
  81c2a8:	e0ffef17 	ldw	r3,-68(fp)
  81c2ac:	e0bff017 	ldw	r2,-64(fp)
  81c2b0:	18bfc516 	blt	r3,r2,81c1c8 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
  81c2b4:	e0fff117 	ldw	r3,-60(fp)
  81c2b8:	e0bff617 	ldw	r2,-40(fp)
  81c2bc:	18800826 	beq	r3,r2,81c2e0 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  81c2c0:	e0bff117 	ldw	r2,-60(fp)
  81c2c4:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  81c2c8:	e0fff317 	ldw	r3,-52(fp)
  81c2cc:	e0bff517 	ldw	r2,-44(fp)
  81c2d0:	1885883a 	add	r2,r3,r2
  81c2d4:	10800044 	addi	r2,r2,1
  81c2d8:	e0bff315 	stw	r2,-52(fp)
  81c2dc:	00007406 	br	81c4b0 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  81c2e0:	e03fff15 	stw	zero,-4(fp)
  81c2e4:	00008c06 	br	81c518 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
  81c2e8:	e0bff617 	ldw	r2,-40(fp)
  81c2ec:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  81c2f0:	e0bfec17 	ldw	r2,-80(fp)
  81c2f4:	10ffff84 	addi	r3,r2,-2
  81c2f8:	008020f4 	movhi	r2,131
  81c2fc:	10bb3604 	addi	r2,r2,-4904
  81c300:	10800383 	ldbu	r2,14(r2)
  81c304:	10803fcc 	andi	r2,r2,255
  81c308:	1885383a 	mul	r2,r3,r2
  81c30c:	1007883a 	mov	r3,r2
  81c310:	008020f4 	movhi	r2,131
  81c314:	10bb3604 	addi	r2,r2,-4904
  81c318:	10801417 	ldw	r2,80(r2)
  81c31c:	1885883a 	add	r2,r3,r2
  81c320:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
  81c324:	e03fea15 	stw	zero,-88(fp)
  81c328:	00003206 	br	81c3f4 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  81c32c:	e0ffea17 	ldw	r3,-88(fp)
  81c330:	e0bfeb17 	ldw	r2,-84(fp)
  81c334:	1889883a 	add	r4,r3,r2
  81c338:	d1677217 	ldw	r5,-25144(gp)
  81c33c:	081a8400 	call	81a840 <Read_Sector_Data>
  81c340:	1005003a 	cmpeq	r2,r2,zero
  81c344:	1000311e 	bne	r2,zero,81c40c <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  81c348:	e03fe915 	stw	zero,-92(fp)
  81c34c:	00002006 	br	81c3d0 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  81c350:	e0bfe917 	ldw	r2,-92(fp)
  81c354:	1008917a 	slli	r4,r2,5
  81c358:	e1bfec17 	ldw	r6,-80(fp)
  81c35c:	e1ffea17 	ldw	r7,-88(fp)
  81c360:	e17ffe17 	ldw	r5,-8(fp)
  81c364:	081ac880 	call	81ac88 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  81c368:	e0bffe17 	ldw	r2,-8(fp)
  81c36c:	10800003 	ldbu	r2,0(r2)
  81c370:	10803fcc 	andi	r2,r2,255
  81c374:	10803960 	cmpeqi	r2,r2,229
  81c378:	1000121e 	bne	r2,zero,81c3c4 <get_home_directory_cluster_for_file+0x3a8>
  81c37c:	e0bffe17 	ldw	r2,-8(fp)
  81c380:	10800003 	ldbu	r2,0(r2)
  81c384:	10803fcc 	andi	r2,r2,255
  81c388:	1005003a 	cmpeq	r2,r2,zero
  81c38c:	10000d1e 	bne	r2,zero,81c3c4 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
  81c390:	e17ff804 	addi	r5,fp,-32
  81c394:	e1bffa04 	addi	r6,fp,-24
  81c398:	e13ffe17 	ldw	r4,-8(fp)
  81c39c:	081bd300 	call	81bd30 <match_file_record_to_name_ext>
  81c3a0:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
  81c3a4:	e0bfe817 	ldw	r2,-96(fp)
  81c3a8:	1005003a 	cmpeq	r2,r2,zero
  81c3ac:	1000051e 	bne	r2,zero,81c3c4 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
  81c3b0:	e0bffe17 	ldw	r2,-8(fp)
  81c3b4:	1080058b 	ldhu	r2,22(r2)
  81c3b8:	10bfffcc 	andi	r2,r2,65535
  81c3bc:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
  81c3c0:	00000606 	br	81c3dc <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  81c3c4:	e0bfe917 	ldw	r2,-92(fp)
  81c3c8:	10800044 	addi	r2,r2,1
  81c3cc:	e0bfe915 	stw	r2,-92(fp)
  81c3d0:	e0bfe917 	ldw	r2,-92(fp)
  81c3d4:	10800410 	cmplti	r2,r2,16
  81c3d8:	103fdd1e 	bne	r2,zero,81c350 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  81c3dc:	e0fff117 	ldw	r3,-60(fp)
  81c3e0:	e0bff617 	ldw	r2,-40(fp)
  81c3e4:	1880091e 	bne	r3,r2,81c40c <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  81c3e8:	e0bfea17 	ldw	r2,-88(fp)
  81c3ec:	10800044 	addi	r2,r2,1
  81c3f0:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  81c3f4:	008020f4 	movhi	r2,131
  81c3f8:	10bb3604 	addi	r2,r2,-4904
  81c3fc:	10800383 	ldbu	r2,14(r2)
  81c400:	10c03fcc 	andi	r3,r2,255
  81c404:	e0bfea17 	ldw	r2,-88(fp)
  81c408:	10ffc816 	blt	r2,r3,81c32c <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  81c40c:	e0fff117 	ldw	r3,-60(fp)
  81c410:	e0bff617 	ldw	r2,-40(fp)
  81c414:	1880131e 	bne	r3,r2,81c464 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
  81c418:	e13ff117 	ldw	r4,-60(fp)
  81c41c:	e17ffb04 	addi	r5,fp,-20
  81c420:	081a93c0 	call	81a93c <get_cluster_flag>
  81c424:	1005003a 	cmpeq	r2,r2,zero
  81c428:	10000c1e 	bne	r2,zero,81c45c <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  81c42c:	e0bffb0b 	ldhu	r2,-20(fp)
  81c430:	10bfffcc 	andi	r2,r2,65535
  81c434:	10fffe0c 	andi	r3,r2,65528
  81c438:	00bffe14 	movui	r2,65528
  81c43c:	1880021e 	bne	r3,r2,81c448 <get_home_directory_cluster_for_file+0x42c>
							return false;
  81c440:	e03fff15 	stw	zero,-4(fp)
  81c444:	00003406 	br	81c518 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  81c448:	e0bffb0b 	ldhu	r2,-20(fp)
  81c44c:	10bfffcc 	andi	r2,r2,65535
  81c450:	10bffe0c 	andi	r2,r2,65528
  81c454:	e0bff115 	stw	r2,-60(fp)
  81c458:	00000206 	br	81c464 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
  81c45c:	e03fff15 	stw	zero,-4(fp)
  81c460:	00002d06 	br	81c518 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  81c464:	e0ffec17 	ldw	r3,-80(fp)
  81c468:	00bffdd4 	movui	r2,65527
  81c46c:	10c00316 	blt	r2,r3,81c47c <get_home_directory_cluster_for_file+0x460>
  81c470:	e0fff117 	ldw	r3,-60(fp)
  81c474:	e0bff617 	ldw	r2,-40(fp)
  81c478:	18bf9d26 	beq	r3,r2,81c2f0 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
  81c47c:	e0fff117 	ldw	r3,-60(fp)
  81c480:	e0bff617 	ldw	r2,-40(fp)
  81c484:	18800826 	beq	r3,r2,81c4a8 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  81c488:	e0bff117 	ldw	r2,-60(fp)
  81c48c:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  81c490:	e0fff317 	ldw	r3,-52(fp)
  81c494:	e0bff517 	ldw	r2,-44(fp)
  81c498:	1885883a 	add	r2,r3,r2
  81c49c:	10800044 	addi	r2,r2,1
  81c4a0:	e0bff315 	stw	r2,-52(fp)
  81c4a4:	00000206 	br	81c4b0 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  81c4a8:	e03fff15 	stw	zero,-4(fp)
  81c4ac:	00001a06 	br	81c518 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  81c4b0:	e0bff317 	ldw	r2,-52(fp)
  81c4b4:	1007883a 	mov	r3,r2
  81c4b8:	e0bffc17 	ldw	r2,-16(fp)
  81c4bc:	1889883a 	add	r4,r3,r2
  81c4c0:	081bc700 	call	81bc70 <get_dir_divider_location>
  81c4c4:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
  81c4c8:	e0bff517 	ldw	r2,-44(fp)
  81c4cc:	1004403a 	cmpge	r2,r2,zero
  81c4d0:	1000021e 	bne	r2,zero,81c4dc <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
  81c4d4:	00800044 	movi	r2,1
  81c4d8:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  81c4dc:	e0bff517 	ldw	r2,-44(fp)
  81c4e0:	10800048 	cmpgei	r2,r2,1
  81c4e4:	103edb1e 	bne	r2,zero,81c054 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  81c4e8:	e0fffd17 	ldw	r3,-12(fp)
  81c4ec:	e0bff617 	ldw	r2,-40(fp)
  81c4f0:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
  81c4f4:	e0bff617 	ldw	r2,-40(fp)
  81c4f8:	1004c03a 	cmpne	r2,r2,zero
  81c4fc:	1000041e 	bne	r2,zero,81c510 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  81c500:	e0bffe17 	ldw	r2,-8(fp)
  81c504:	10000a15 	stw	zero,40(r2)
		result = true;
  81c508:	00800044 	movi	r2,1
  81c50c:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
  81c510:	e0bff717 	ldw	r2,-36(fp)
  81c514:	e0bfff15 	stw	r2,-4(fp)
  81c518:	e0bfff17 	ldw	r2,-4(fp)
}
  81c51c:	e037883a 	mov	sp,fp
  81c520:	dfc00117 	ldw	ra,4(sp)
  81c524:	df000017 	ldw	fp,0(sp)
  81c528:	dec00204 	addi	sp,sp,8
  81c52c:	f800283a 	ret

0081c530 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  81c530:	deffe704 	addi	sp,sp,-100
  81c534:	dfc01815 	stw	ra,96(sp)
  81c538:	df001715 	stw	fp,92(sp)
  81c53c:	df001704 	addi	fp,sp,92
  81c540:	e13ffc15 	stw	r4,-16(fp)
  81c544:	e17ffd15 	stw	r5,-12(fp)
  81c548:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
  81c54c:	e13ffd17 	ldw	r4,-12(fp)
  81c550:	081bc700 	call	81bc70 <get_dir_divider_location>
  81c554:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
  81c558:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  81c55c:	00800804 	movi	r2,32
  81c560:	e0bff805 	stb	r2,-32(fp)
  81c564:	00800804 	movi	r2,32
  81c568:	e0bff845 	stb	r2,-31(fp)
  81c56c:	00800804 	movi	r2,32
  81c570:	e0bff885 	stb	r2,-30(fp)
  81c574:	00800804 	movi	r2,32
  81c578:	e0bff8c5 	stb	r2,-29(fp)
  81c57c:	00800804 	movi	r2,32
  81c580:	e0bff905 	stb	r2,-28(fp)
  81c584:	00800804 	movi	r2,32
  81c588:	e0bff945 	stb	r2,-27(fp)
  81c58c:	00800804 	movi	r2,32
  81c590:	e0bff985 	stb	r2,-26(fp)
  81c594:	00800804 	movi	r2,32
  81c598:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
  81c59c:	00800804 	movi	r2,32
  81c5a0:	e0bffa05 	stb	r2,-24(fp)
  81c5a4:	00800804 	movi	r2,32
  81c5a8:	e0bffa45 	stb	r2,-23(fp)
  81c5ac:	00800804 	movi	r2,32
  81c5b0:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
  81c5b4:	00bfffc4 	movi	r2,-1
  81c5b8:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
  81c5bc:	e0bffc17 	ldw	r2,-16(fp)
  81c5c0:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
  81c5c4:	e13ffd17 	ldw	r4,-12(fp)
  81c5c8:	080ce500 	call	80ce50 <strlen>
  81c5cc:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
  81c5d0:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
  81c5d4:	00000b06 	br	81c604 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
  81c5d8:	e0fff617 	ldw	r3,-40(fp)
  81c5dc:	e0bff717 	ldw	r2,-36(fp)
  81c5e0:	1885883a 	add	r2,r3,r2
  81c5e4:	10800044 	addi	r2,r2,1
  81c5e8:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  81c5ec:	e0bff617 	ldw	r2,-40(fp)
  81c5f0:	1007883a 	mov	r3,r2
  81c5f4:	e0bffd17 	ldw	r2,-12(fp)
  81c5f8:	1889883a 	add	r4,r3,r2
  81c5fc:	081bc700 	call	81bc70 <get_dir_divider_location>
  81c600:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  81c604:	e0bff717 	ldw	r2,-36(fp)
  81c608:	10800048 	cmpgei	r2,r2,1
  81c60c:	103ff21e 	bne	r2,zero,81c5d8 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  81c610:	e0bff617 	ldw	r2,-40(fp)
  81c614:	e0bff315 	stw	r2,-52(fp)
  81c618:	00002b06 	br	81c6c8 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
  81c61c:	e0bff317 	ldw	r2,-52(fp)
  81c620:	1007883a 	mov	r3,r2
  81c624:	e0bffd17 	ldw	r2,-12(fp)
  81c628:	1885883a 	add	r2,r3,r2
  81c62c:	10800003 	ldbu	r2,0(r2)
  81c630:	10803fcc 	andi	r2,r2,255
  81c634:	1080201c 	xori	r2,r2,128
  81c638:	10bfe004 	addi	r2,r2,-128
  81c63c:	10800b98 	cmpnei	r2,r2,46
  81c640:	1000031e 	bne	r2,zero,81c650 <find_file_in_directory+0x120>
			ext_index = index;
  81c644:	e0bff317 	ldw	r2,-52(fp)
  81c648:	e0bff515 	stw	r2,-44(fp)
  81c64c:	00001b06 	br	81c6bc <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
  81c650:	e0bff517 	ldw	r2,-44(fp)
  81c654:	1004403a 	cmpge	r2,r2,zero
  81c658:	10000c1e 	bne	r2,zero,81c68c <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
  81c65c:	e0fff317 	ldw	r3,-52(fp)
  81c660:	e0bff617 	ldw	r2,-40(fp)
  81c664:	1889c83a 	sub	r4,r3,r2
  81c668:	e0bff317 	ldw	r2,-52(fp)
  81c66c:	1007883a 	mov	r3,r2
  81c670:	e0bffd17 	ldw	r2,-12(fp)
  81c674:	1885883a 	add	r2,r3,r2
  81c678:	10c00003 	ldbu	r3,0(r2)
  81c67c:	e0bff804 	addi	r2,fp,-32
  81c680:	1105883a 	add	r2,r2,r4
  81c684:	10c00005 	stb	r3,0(r2)
  81c688:	00000c06 	br	81c6bc <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
  81c68c:	e0fff317 	ldw	r3,-52(fp)
  81c690:	e0bff517 	ldw	r2,-44(fp)
  81c694:	1885c83a 	sub	r2,r3,r2
  81c698:	113fffc4 	addi	r4,r2,-1
  81c69c:	e0bff317 	ldw	r2,-52(fp)
  81c6a0:	1007883a 	mov	r3,r2
  81c6a4:	e0bffd17 	ldw	r2,-12(fp)
  81c6a8:	1885883a 	add	r2,r3,r2
  81c6ac:	10c00003 	ldbu	r3,0(r2)
  81c6b0:	e0bffa04 	addi	r2,fp,-24
  81c6b4:	1105883a 	add	r2,r2,r4
  81c6b8:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  81c6bc:	e0bff317 	ldw	r2,-52(fp)
  81c6c0:	10800044 	addi	r2,r2,1
  81c6c4:	e0bff315 	stw	r2,-52(fp)
  81c6c8:	e0fff317 	ldw	r3,-52(fp)
  81c6cc:	e0bff217 	ldw	r2,-56(fp)
  81c6d0:	18bfd216 	blt	r3,r2,81c61c <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  81c6d4:	e0bffc17 	ldw	r2,-16(fp)
  81c6d8:	1004c03a 	cmpne	r2,r2,zero
  81c6dc:	1000441e 	bne	r2,zero,81c7f0 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  81c6e0:	008020f4 	movhi	r2,131
  81c6e4:	10bb3604 	addi	r2,r2,-4904
  81c6e8:	1080050b 	ldhu	r2,20(r2)
  81c6ec:	10bfffcc 	andi	r2,r2,65535
  81c6f0:	1008917a 	slli	r4,r2,5
  81c6f4:	008020f4 	movhi	r2,131
  81c6f8:	10bb3604 	addi	r2,r2,-4904
  81c6fc:	1080030b 	ldhu	r2,12(r2)
  81c700:	117fffcc 	andi	r5,r2,65535
  81c704:	080b2100 	call	80b210 <__divsi3>
  81c708:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81c70c:	e03fef15 	stw	zero,-68(fp)
  81c710:	00003306 	br	81c7e0 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
  81c714:	008020f4 	movhi	r2,131
  81c718:	10bb3604 	addi	r2,r2,-4904
  81c71c:	10c01317 	ldw	r3,76(r2)
  81c720:	e0bfef17 	ldw	r2,-68(fp)
  81c724:	1885883a 	add	r2,r3,r2
  81c728:	1009883a 	mov	r4,r2
  81c72c:	d1677217 	ldw	r5,-25144(gp)
  81c730:	081a8400 	call	81a840 <Read_Sector_Data>
  81c734:	1005003a 	cmpeq	r2,r2,zero
  81c738:	10008e1e 	bne	r2,zero,81c974 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  81c73c:	e03fee15 	stw	zero,-72(fp)
  81c740:	00001e06 	br	81c7bc <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  81c744:	e0bfee17 	ldw	r2,-72(fp)
  81c748:	1008917a 	slli	r4,r2,5
  81c74c:	e1ffef17 	ldw	r7,-68(fp)
  81c750:	e17ffe17 	ldw	r5,-8(fp)
  81c754:	000d883a 	mov	r6,zero
  81c758:	081ac880 	call	81ac88 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  81c75c:	e0bffe17 	ldw	r2,-8(fp)
  81c760:	10800003 	ldbu	r2,0(r2)
  81c764:	10803fcc 	andi	r2,r2,255
  81c768:	10803960 	cmpeqi	r2,r2,229
  81c76c:	1000101e 	bne	r2,zero,81c7b0 <find_file_in_directory+0x280>
  81c770:	e0bffe17 	ldw	r2,-8(fp)
  81c774:	10800003 	ldbu	r2,0(r2)
  81c778:	10803fcc 	andi	r2,r2,255
  81c77c:	1005003a 	cmpeq	r2,r2,zero
  81c780:	10000b1e 	bne	r2,zero,81c7b0 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
  81c784:	e17ff804 	addi	r5,fp,-32
  81c788:	e1bffa04 	addi	r6,fp,-24
  81c78c:	e13ffe17 	ldw	r4,-8(fp)
  81c790:	081bd300 	call	81bd30 <match_file_record_to_name_ext>
  81c794:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
  81c798:	e0bfed17 	ldw	r2,-76(fp)
  81c79c:	1005003a 	cmpeq	r2,r2,zero
  81c7a0:	1000031e 	bne	r2,zero,81c7b0 <find_file_in_directory+0x280>
							result = true;
  81c7a4:	00800044 	movi	r2,1
  81c7a8:	e0bff115 	stw	r2,-60(fp)
							break;
  81c7ac:	00000606 	br	81c7c8 <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  81c7b0:	e0bfee17 	ldw	r2,-72(fp)
  81c7b4:	10800044 	addi	r2,r2,1
  81c7b8:	e0bfee15 	stw	r2,-72(fp)
  81c7bc:	e0bfee17 	ldw	r2,-72(fp)
  81c7c0:	10800410 	cmplti	r2,r2,16
  81c7c4:	103fdf1e 	bne	r2,zero,81c744 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
  81c7c8:	e0bff117 	ldw	r2,-60(fp)
  81c7cc:	1004c03a 	cmpne	r2,r2,zero
  81c7d0:	1000681e 	bne	r2,zero,81c974 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81c7d4:	e0bfef17 	ldw	r2,-68(fp)
  81c7d8:	10800044 	addi	r2,r2,1
  81c7dc:	e0bfef15 	stw	r2,-68(fp)
  81c7e0:	e0ffef17 	ldw	r3,-68(fp)
  81c7e4:	e0bff017 	ldw	r2,-64(fp)
  81c7e8:	18bfca16 	blt	r3,r2,81c714 <find_file_in_directory+0x1e4>
  81c7ec:	00006106 	br	81c974 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  81c7f0:	e0bff417 	ldw	r2,-48(fp)
  81c7f4:	10ffff84 	addi	r3,r2,-2
  81c7f8:	008020f4 	movhi	r2,131
  81c7fc:	10bb3604 	addi	r2,r2,-4904
  81c800:	10800383 	ldbu	r2,14(r2)
  81c804:	10803fcc 	andi	r2,r2,255
  81c808:	1885383a 	mul	r2,r3,r2
  81c80c:	1007883a 	mov	r3,r2
  81c810:	008020f4 	movhi	r2,131
  81c814:	10bb3604 	addi	r2,r2,-4904
  81c818:	10801417 	ldw	r2,80(r2)
  81c81c:	1885883a 	add	r2,r3,r2
  81c820:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
  81c824:	e03feb15 	stw	zero,-84(fp)
  81c828:	00003006 	br	81c8ec <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  81c82c:	e0ffeb17 	ldw	r3,-84(fp)
  81c830:	e0bfec17 	ldw	r2,-80(fp)
  81c834:	1889883a 	add	r4,r3,r2
  81c838:	d1677217 	ldw	r5,-25144(gp)
  81c83c:	081a8400 	call	81a840 <Read_Sector_Data>
  81c840:	1005003a 	cmpeq	r2,r2,zero
  81c844:	10002f1e 	bne	r2,zero,81c904 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  81c848:	e03fea15 	stw	zero,-88(fp)
  81c84c:	00001e06 	br	81c8c8 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  81c850:	e0bfea17 	ldw	r2,-88(fp)
  81c854:	1008917a 	slli	r4,r2,5
  81c858:	e1bff417 	ldw	r6,-48(fp)
  81c85c:	e1ffeb17 	ldw	r7,-84(fp)
  81c860:	e17ffe17 	ldw	r5,-8(fp)
  81c864:	081ac880 	call	81ac88 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  81c868:	e0bffe17 	ldw	r2,-8(fp)
  81c86c:	10800003 	ldbu	r2,0(r2)
  81c870:	10803fcc 	andi	r2,r2,255
  81c874:	10803960 	cmpeqi	r2,r2,229
  81c878:	1000101e 	bne	r2,zero,81c8bc <find_file_in_directory+0x38c>
  81c87c:	e0bffe17 	ldw	r2,-8(fp)
  81c880:	10800003 	ldbu	r2,0(r2)
  81c884:	10803fcc 	andi	r2,r2,255
  81c888:	1005003a 	cmpeq	r2,r2,zero
  81c88c:	10000b1e 	bne	r2,zero,81c8bc <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  81c890:	e17ff804 	addi	r5,fp,-32
  81c894:	e1bffa04 	addi	r6,fp,-24
  81c898:	e13ffe17 	ldw	r4,-8(fp)
  81c89c:	081bd300 	call	81bd30 <match_file_record_to_name_ext>
  81c8a0:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
  81c8a4:	e0bfe917 	ldw	r2,-92(fp)
  81c8a8:	1005003a 	cmpeq	r2,r2,zero
  81c8ac:	1000031e 	bne	r2,zero,81c8bc <find_file_in_directory+0x38c>
								result = true;
  81c8b0:	00800044 	movi	r2,1
  81c8b4:	e0bff115 	stw	r2,-60(fp)
								break;
  81c8b8:	00000606 	br	81c8d4 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  81c8bc:	e0bfea17 	ldw	r2,-88(fp)
  81c8c0:	10800044 	addi	r2,r2,1
  81c8c4:	e0bfea15 	stw	r2,-88(fp)
  81c8c8:	e0bfea17 	ldw	r2,-88(fp)
  81c8cc:	10800410 	cmplti	r2,r2,16
  81c8d0:	103fdf1e 	bne	r2,zero,81c850 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
  81c8d4:	e0bff117 	ldw	r2,-60(fp)
  81c8d8:	1004c03a 	cmpne	r2,r2,zero
  81c8dc:	1000091e 	bne	r2,zero,81c904 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  81c8e0:	e0bfeb17 	ldw	r2,-84(fp)
  81c8e4:	10800044 	addi	r2,r2,1
  81c8e8:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  81c8ec:	008020f4 	movhi	r2,131
  81c8f0:	10bb3604 	addi	r2,r2,-4904
  81c8f4:	10800383 	ldbu	r2,14(r2)
  81c8f8:	10c03fcc 	andi	r3,r2,255
  81c8fc:	e0bfeb17 	ldw	r2,-84(fp)
  81c900:	10ffca16 	blt	r2,r3,81c82c <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  81c904:	e0bff117 	ldw	r2,-60(fp)
  81c908:	1004c03a 	cmpne	r2,r2,zero
  81c90c:	1000131e 	bne	r2,zero,81c95c <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
  81c910:	e13ff417 	ldw	r4,-48(fp)
  81c914:	e17ffb04 	addi	r5,fp,-20
  81c918:	081a93c0 	call	81a93c <get_cluster_flag>
  81c91c:	1005003a 	cmpeq	r2,r2,zero
  81c920:	10000c1e 	bne	r2,zero,81c954 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  81c924:	e0bffb0b 	ldhu	r2,-20(fp)
  81c928:	10bfffcc 	andi	r2,r2,65535
  81c92c:	10fffe0c 	andi	r3,r2,65528
  81c930:	00bffe14 	movui	r2,65528
  81c934:	1880021e 	bne	r3,r2,81c940 <find_file_in_directory+0x410>
						return false;
  81c938:	e03fff15 	stw	zero,-4(fp)
  81c93c:	00000f06 	br	81c97c <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  81c940:	e0bffb0b 	ldhu	r2,-20(fp)
  81c944:	10bfffcc 	andi	r2,r2,65535
  81c948:	10bffe0c 	andi	r2,r2,65528
  81c94c:	e0bff415 	stw	r2,-48(fp)
  81c950:	00000206 	br	81c95c <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
  81c954:	e03fff15 	stw	zero,-4(fp)
  81c958:	00000806 	br	81c97c <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  81c95c:	e0fff417 	ldw	r3,-48(fp)
  81c960:	00bffdd4 	movui	r2,65527
  81c964:	10c00316 	blt	r2,r3,81c974 <find_file_in_directory+0x444>
  81c968:	e0bff117 	ldw	r2,-60(fp)
  81c96c:	1005003a 	cmpeq	r2,r2,zero
  81c970:	103f9f1e 	bne	r2,zero,81c7f0 <find_file_in_directory+0x2c0>
	}

	return result;
  81c974:	e0bff117 	ldw	r2,-60(fp)
  81c978:	e0bfff15 	stw	r2,-4(fp)
  81c97c:	e0bfff17 	ldw	r2,-4(fp)
}
  81c980:	e037883a 	mov	sp,fp
  81c984:	dfc00117 	ldw	ra,4(sp)
  81c988:	df000017 	ldw	fp,0(sp)
  81c98c:	dec00204 	addi	sp,sp,8
  81c990:	f800283a 	ret

0081c994 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  81c994:	defff504 	addi	sp,sp,-44
  81c998:	dfc00a15 	stw	ra,40(sp)
  81c99c:	df000915 	stw	fp,36(sp)
  81c9a0:	df000904 	addi	fp,sp,36
  81c9a4:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  81c9a8:	008020f4 	movhi	r2,131
  81c9ac:	10bb3604 	addi	r2,r2,-4904
  81c9b0:	10801117 	ldw	r2,68(r2)
  81c9b4:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
  81c9b8:	00800084 	movi	r2,2
  81c9bc:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
  81c9c0:	00bfffc4 	movi	r2,-1
  81c9c4:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
  81c9c8:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  81c9cc:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  81c9d0:	008020f4 	movhi	r2,131
  81c9d4:	10bb3604 	addi	r2,r2,-4904
  81c9d8:	10801417 	ldw	r2,80(r2)
  81c9dc:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  81c9e0:	008020f4 	movhi	r2,131
  81c9e4:	10bb3604 	addi	r2,r2,-4904
  81c9e8:	1080058b 	ldhu	r2,22(r2)
  81c9ec:	10bfffcc 	andi	r2,r2,65535
  81c9f0:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
  81c9f4:	008020f4 	movhi	r2,131
  81c9f8:	10bb3604 	addi	r2,r2,-4904
  81c9fc:	10800917 	ldw	r2,36(r2)
  81ca00:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
  81ca04:	e0fff817 	ldw	r3,-32(fp)
  81ca08:	e0bff717 	ldw	r2,-36(fp)
  81ca0c:	10c00b2e 	bgeu	r2,r3,81ca3c <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
  81ca10:	e0fff817 	ldw	r3,-32(fp)
  81ca14:	e0bff917 	ldw	r2,-28(fp)
  81ca18:	1889c83a 	sub	r4,r3,r2
  81ca1c:	008020f4 	movhi	r2,131
  81ca20:	10bb3604 	addi	r2,r2,-4904
  81ca24:	10800383 	ldbu	r2,14(r2)
  81ca28:	11403fcc 	andi	r5,r2,255
  81ca2c:	080b2d00 	call	80b2d0 <__udivsi3>
  81ca30:	10800044 	addi	r2,r2,1
  81ca34:	e0bffa15 	stw	r2,-24(fp)
  81ca38:	00002906 	br	81cae0 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
  81ca3c:	e0fff717 	ldw	r3,-36(fp)
  81ca40:	e0bff917 	ldw	r2,-28(fp)
  81ca44:	1889c83a 	sub	r4,r3,r2
  81ca48:	008020f4 	movhi	r2,131
  81ca4c:	10bb3604 	addi	r2,r2,-4904
  81ca50:	10800383 	ldbu	r2,14(r2)
  81ca54:	11403fcc 	andi	r5,r2,255
  81ca58:	080b2d00 	call	80b2d0 <__udivsi3>
  81ca5c:	10800044 	addi	r2,r2,1
  81ca60:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  81ca64:	00001e06 	br	81cae0 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  81ca68:	e13ffe17 	ldw	r4,-8(fp)
  81ca6c:	d1677217 	ldw	r5,-25144(gp)
  81ca70:	081a8400 	call	81a840 <Read_Sector_Data>
  81ca74:	1005003a 	cmpeq	r2,r2,zero
  81ca78:	1000131e 	bne	r2,zero,81cac8 <find_first_empty_cluster+0x134>
			do {
				cluster
  81ca7c:	d0a77417 	ldw	r2,-25136(gp)
  81ca80:	10800a17 	ldw	r2,40(r2)
  81ca84:	1007883a 	mov	r3,r2
  81ca88:	e0bffd17 	ldw	r2,-12(fp)
  81ca8c:	10803fcc 	andi	r2,r2,255
  81ca90:	1085883a 	add	r2,r2,r2
  81ca94:	1885883a 	add	r2,r3,r2
  81ca98:	1080002b 	ldhuio	r2,0(r2)
  81ca9c:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  81caa0:	e0bffc0f 	ldh	r2,-16(fp)
  81caa4:	1005003a 	cmpeq	r2,r2,zero
  81caa8:	1000071e 	bne	r2,zero,81cac8 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  81caac:	e0bffd17 	ldw	r2,-12(fp)
  81cab0:	10800044 	addi	r2,r2,1
  81cab4:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
  81cab8:	e0bffd17 	ldw	r2,-12(fp)
  81cabc:	10803fcc 	andi	r2,r2,255
  81cac0:	1004c03a 	cmpne	r2,r2,zero
  81cac4:	103fed1e 	bne	r2,zero,81ca7c <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
  81cac8:	e0bffc0f 	ldh	r2,-16(fp)
  81cacc:	1005003a 	cmpeq	r2,r2,zero
  81cad0:	1000081e 	bne	r2,zero,81caf4 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
  81cad4:	e0bffe17 	ldw	r2,-8(fp)
  81cad8:	10800044 	addi	r2,r2,1
  81cadc:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  81cae0:	008020f4 	movhi	r2,131
  81cae4:	10bb3604 	addi	r2,r2,-4904
  81cae8:	10c01217 	ldw	r3,72(r2)
  81caec:	e0bffe17 	ldw	r2,-8(fp)
  81caf0:	18bfdd1e 	bne	r3,r2,81ca68 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  81caf4:	e0bffc0f 	ldh	r2,-16(fp)
  81caf8:	1004c03a 	cmpne	r2,r2,zero
  81cafc:	1000081e 	bne	r2,zero,81cb20 <find_first_empty_cluster+0x18c>
  81cb00:	e0fffc0f 	ldh	r3,-16(fp)
  81cb04:	e0bffa17 	ldw	r2,-24(fp)
  81cb08:	10c00536 	bltu	r2,r3,81cb20 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
  81cb0c:	e0bfff17 	ldw	r2,-4(fp)
  81cb10:	e0fffd17 	ldw	r3,-12(fp)
  81cb14:	10c00015 	stw	r3,0(r2)
		result = true;
  81cb18:	00800044 	movi	r2,1
  81cb1c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  81cb20:	e0bffb17 	ldw	r2,-20(fp)
}
  81cb24:	e037883a 	mov	sp,fp
  81cb28:	dfc00117 	ldw	ra,4(sp)
  81cb2c:	df000017 	ldw	fp,0(sp)
  81cb30:	dec00204 	addi	sp,sp,8
  81cb34:	f800283a 	ret

0081cb38 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  81cb38:	defff404 	addi	sp,sp,-48
  81cb3c:	dfc00b15 	stw	ra,44(sp)
  81cb40:	df000a15 	stw	fp,40(sp)
  81cb44:	df000a04 	addi	fp,sp,40
  81cb48:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
  81cb4c:	00bfffc4 	movi	r2,-1
  81cb50:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
  81cb54:	e0bffe17 	ldw	r2,-8(fp)
  81cb58:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  81cb5c:	e0bffa17 	ldw	r2,-24(fp)
  81cb60:	10ffff84 	addi	r3,r2,-2
  81cb64:	008020f4 	movhi	r2,131
  81cb68:	10bb3604 	addi	r2,r2,-4904
  81cb6c:	10800383 	ldbu	r2,14(r2)
  81cb70:	10803fcc 	andi	r2,r2,255
  81cb74:	1885383a 	mul	r2,r3,r2
  81cb78:	1007883a 	mov	r3,r2
  81cb7c:	008020f4 	movhi	r2,131
  81cb80:	10bb3604 	addi	r2,r2,-4904
  81cb84:	10801417 	ldw	r2,80(r2)
  81cb88:	1885883a 	add	r2,r3,r2
  81cb8c:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
  81cb90:	e03ff815 	stw	zero,-32(fp)
  81cb94:	00002c06 	br	81cc48 <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  81cb98:	e0fff817 	ldw	r3,-32(fp)
  81cb9c:	e0bff917 	ldw	r2,-28(fp)
  81cba0:	1889883a 	add	r4,r3,r2
  81cba4:	d1677217 	ldw	r5,-25144(gp)
  81cba8:	081a8400 	call	81a840 <Read_Sector_Data>
  81cbac:	1005003a 	cmpeq	r2,r2,zero
  81cbb0:	10002b1e 	bne	r2,zero,81cc60 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  81cbb4:	e03ff715 	stw	zero,-36(fp)
  81cbb8:	00001d06 	br	81cc30 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
  81cbbc:	d0a77417 	ldw	r2,-25136(gp)
  81cbc0:	10800a17 	ldw	r2,40(r2)
  81cbc4:	1007883a 	mov	r3,r2
  81cbc8:	e0bff717 	ldw	r2,-36(fp)
  81cbcc:	1004917a 	slli	r2,r2,5
  81cbd0:	1885883a 	add	r2,r3,r2
  81cbd4:	10800023 	ldbuio	r2,0(r2)
  81cbd8:	10803fcc 	andi	r2,r2,255
  81cbdc:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  81cbe0:	e0bff60b 	ldhu	r2,-40(fp)
  81cbe4:	10803960 	cmpeqi	r2,r2,229
  81cbe8:	1000031e 	bne	r2,zero,81cbf8 <find_first_empty_record_in_a_subdirectory+0xc0>
  81cbec:	e0bff60b 	ldhu	r2,-40(fp)
  81cbf0:	1004c03a 	cmpne	r2,r2,zero
  81cbf4:	10000b1e 	bne	r2,zero,81cc24 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
  81cbf8:	e0bff817 	ldw	r2,-32(fp)
  81cbfc:	1006913a 	slli	r3,r2,4
  81cc00:	e0bff717 	ldw	r2,-36(fp)
  81cc04:	1885883a 	add	r2,r3,r2
  81cc08:	1006943a 	slli	r3,r2,16
  81cc0c:	e0bffa17 	ldw	r2,-24(fp)
  81cc10:	1884b03a 	or	r2,r3,r2
  81cc14:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
  81cc18:	e0bffb17 	ldw	r2,-20(fp)
  81cc1c:	e0bfff15 	stw	r2,-4(fp)
  81cc20:	00005206 	br	81cd6c <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  81cc24:	e0bff717 	ldw	r2,-36(fp)
  81cc28:	10800044 	addi	r2,r2,1
  81cc2c:	e0bff715 	stw	r2,-36(fp)
  81cc30:	e0bff717 	ldw	r2,-36(fp)
  81cc34:	10800410 	cmplti	r2,r2,16
  81cc38:	103fe01e 	bne	r2,zero,81cbbc <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  81cc3c:	e0bff817 	ldw	r2,-32(fp)
  81cc40:	10800044 	addi	r2,r2,1
  81cc44:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  81cc48:	008020f4 	movhi	r2,131
  81cc4c:	10bb3604 	addi	r2,r2,-4904
  81cc50:	10800383 	ldbu	r2,14(r2)
  81cc54:	10c03fcc 	andi	r3,r2,255
  81cc58:	e0bff817 	ldw	r2,-32(fp)
  81cc5c:	10ffce16 	blt	r2,r3,81cb98 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  81cc60:	e0bffb17 	ldw	r2,-20(fp)
  81cc64:	1004403a 	cmpge	r2,r2,zero
  81cc68:	1000381e 	bne	r2,zero,81cd4c <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
  81cc6c:	e13ffa17 	ldw	r4,-24(fp)
  81cc70:	e17ffc04 	addi	r5,fp,-16
  81cc74:	081a93c0 	call	81a93c <get_cluster_flag>
  81cc78:	1005003a 	cmpeq	r2,r2,zero
  81cc7c:	1000311e 	bne	r2,zero,81cd44 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  81cc80:	e0bffc0b 	ldhu	r2,-16(fp)
  81cc84:	10bfffcc 	andi	r2,r2,65535
  81cc88:	10fffe0c 	andi	r3,r2,65528
  81cc8c:	00bffe14 	movui	r2,65528
  81cc90:	18802e1e 	bne	r3,r2,81cd4c <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
  81cc94:	e13ffd04 	addi	r4,fp,-12
  81cc98:	081c9940 	call	81c994 <find_first_empty_cluster>
  81cc9c:	1005003a 	cmpeq	r2,r2,zero
  81cca0:	1000231e 	bne	r2,zero,81cd30 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  81cca4:	e13ffa17 	ldw	r4,-24(fp)
  81cca8:	e0bffd17 	ldw	r2,-12(fp)
  81ccac:	117fffcc 	andi	r5,r2,65535
  81ccb0:	2960001c 	xori	r5,r5,32768
  81ccb4:	29600004 	addi	r5,r5,-32768
  81ccb8:	01800044 	movi	r6,1
  81ccbc:	081a9f40 	call	81a9f4 <mark_cluster>
  81ccc0:	1005003a 	cmpeq	r2,r2,zero
  81ccc4:	10001a1e 	bne	r2,zero,81cd30 <find_first_empty_record_in_a_subdirectory+0x1f8>
  81ccc8:	e0bffd17 	ldw	r2,-12(fp)
  81cccc:	1009883a 	mov	r4,r2
  81ccd0:	017fffc4 	movi	r5,-1
  81ccd4:	01800044 	movi	r6,1
  81ccd8:	081a9f40 	call	81a9f4 <mark_cluster>
  81ccdc:	1005003a 	cmpeq	r2,r2,zero
  81cce0:	1000131e 	bne	r2,zero,81cd30 <find_first_empty_record_in_a_subdirectory+0x1f8>
  81cce4:	e13ffa17 	ldw	r4,-24(fp)
  81cce8:	e0bffd17 	ldw	r2,-12(fp)
  81ccec:	117fffcc 	andi	r5,r2,65535
  81ccf0:	2960001c 	xori	r5,r5,32768
  81ccf4:	29600004 	addi	r5,r5,-32768
  81ccf8:	000d883a 	mov	r6,zero
  81ccfc:	081a9f40 	call	81a9f4 <mark_cluster>
  81cd00:	1005003a 	cmpeq	r2,r2,zero
  81cd04:	10000a1e 	bne	r2,zero,81cd30 <find_first_empty_record_in_a_subdirectory+0x1f8>
  81cd08:	e0bffd17 	ldw	r2,-12(fp)
  81cd0c:	1009883a 	mov	r4,r2
  81cd10:	017fffc4 	movi	r5,-1
  81cd14:	000d883a 	mov	r6,zero
  81cd18:	081a9f40 	call	81a9f4 <mark_cluster>
  81cd1c:	1005003a 	cmpeq	r2,r2,zero
  81cd20:	1000031e 	bne	r2,zero,81cd30 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
  81cd24:	081a7f00 	call	81a7f0 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  81cd28:	e0bffd17 	ldw	r2,-12(fp)
  81cd2c:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  81cd30:	e0bffc0b 	ldhu	r2,-16(fp)
  81cd34:	10bfffcc 	andi	r2,r2,65535
  81cd38:	10bffe0c 	andi	r2,r2,65528
  81cd3c:	e0bffa15 	stw	r2,-24(fp)
  81cd40:	00000206 	br	81cd4c <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
  81cd44:	00bfffc4 	movi	r2,-1
  81cd48:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  81cd4c:	e0fffa17 	ldw	r3,-24(fp)
  81cd50:	00bffdd4 	movui	r2,65527
  81cd54:	10c00316 	blt	r2,r3,81cd64 <find_first_empty_record_in_a_subdirectory+0x22c>
  81cd58:	e0bffb17 	ldw	r2,-20(fp)
  81cd5c:	10bfffe0 	cmpeqi	r2,r2,-1
  81cd60:	103f7e1e 	bne	r2,zero,81cb5c <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
  81cd64:	e0bffb17 	ldw	r2,-20(fp)
  81cd68:	e0bfff15 	stw	r2,-4(fp)
  81cd6c:	e0bfff17 	ldw	r2,-4(fp)
}
  81cd70:	e037883a 	mov	sp,fp
  81cd74:	dfc00117 	ldw	ra,4(sp)
  81cd78:	df000017 	ldw	fp,0(sp)
  81cd7c:	dec00204 	addi	sp,sp,8
  81cd80:	f800283a 	ret

0081cd84 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  81cd84:	defff804 	addi	sp,sp,-32
  81cd88:	dfc00715 	stw	ra,28(sp)
  81cd8c:	df000615 	stw	fp,24(sp)
  81cd90:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  81cd94:	008020f4 	movhi	r2,131
  81cd98:	10bb3604 	addi	r2,r2,-4904
  81cd9c:	1080050b 	ldhu	r2,20(r2)
  81cda0:	10bfffcc 	andi	r2,r2,65535
  81cda4:	1008917a 	slli	r4,r2,5
  81cda8:	008020f4 	movhi	r2,131
  81cdac:	10bb3604 	addi	r2,r2,-4904
  81cdb0:	1080030b 	ldhu	r2,12(r2)
  81cdb4:	117fffcc 	andi	r5,r2,65535
  81cdb8:	080b2100 	call	80b210 <__divsi3>
  81cdbc:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
  81cdc0:	00bfffc4 	movi	r2,-1
  81cdc4:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81cdc8:	e03ffd15 	stw	zero,-12(fp)
  81cdcc:	00002d06 	br	81ce84 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
  81cdd0:	008020f4 	movhi	r2,131
  81cdd4:	10bb3604 	addi	r2,r2,-4904
  81cdd8:	10c01317 	ldw	r3,76(r2)
  81cddc:	e0bffd17 	ldw	r2,-12(fp)
  81cde0:	1885883a 	add	r2,r3,r2
  81cde4:	1009883a 	mov	r4,r2
  81cde8:	d1677217 	ldw	r5,-25144(gp)
  81cdec:	081a8400 	call	81a840 <Read_Sector_Data>
  81cdf0:	1005003a 	cmpeq	r2,r2,zero
  81cdf4:	1000261e 	bne	r2,zero,81ce90 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  81cdf8:	e03ffb15 	stw	zero,-20(fp)
  81cdfc:	00001b06 	br	81ce6c <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  81ce00:	d0a77417 	ldw	r2,-25136(gp)
  81ce04:	10800a17 	ldw	r2,40(r2)
  81ce08:	1007883a 	mov	r3,r2
  81ce0c:	e0bffb17 	ldw	r2,-20(fp)
  81ce10:	1004917a 	slli	r2,r2,5
  81ce14:	1885883a 	add	r2,r3,r2
  81ce18:	10800023 	ldbuio	r2,0(r2)
  81ce1c:	10803fcc 	andi	r2,r2,255
  81ce20:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  81ce24:	e0bffa0b 	ldhu	r2,-24(fp)
  81ce28:	10803960 	cmpeqi	r2,r2,229
  81ce2c:	1000031e 	bne	r2,zero,81ce3c <find_first_empty_record_in_root_directory+0xb8>
  81ce30:	e0bffa0b 	ldhu	r2,-24(fp)
  81ce34:	1004c03a 	cmpne	r2,r2,zero
  81ce38:	1000091e 	bne	r2,zero,81ce60 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
  81ce3c:	e0bffd17 	ldw	r2,-12(fp)
  81ce40:	1006913a 	slli	r3,r2,4
  81ce44:	e0bffb17 	ldw	r2,-20(fp)
  81ce48:	1885883a 	add	r2,r3,r2
  81ce4c:	1004943a 	slli	r2,r2,16
  81ce50:	e0bffc15 	stw	r2,-16(fp)
					return result;
  81ce54:	e0bffc17 	ldw	r2,-16(fp)
  81ce58:	e0bfff15 	stw	r2,-4(fp)
  81ce5c:	00000e06 	br	81ce98 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  81ce60:	e0bffb17 	ldw	r2,-20(fp)
  81ce64:	10800044 	addi	r2,r2,1
  81ce68:	e0bffb15 	stw	r2,-20(fp)
  81ce6c:	e0bffb17 	ldw	r2,-20(fp)
  81ce70:	10800410 	cmplti	r2,r2,16
  81ce74:	103fe21e 	bne	r2,zero,81ce00 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81ce78:	e0bffd17 	ldw	r2,-12(fp)
  81ce7c:	10800044 	addi	r2,r2,1
  81ce80:	e0bffd15 	stw	r2,-12(fp)
  81ce84:	e0fffd17 	ldw	r3,-12(fp)
  81ce88:	e0bffe17 	ldw	r2,-8(fp)
  81ce8c:	18bfd016 	blt	r3,r2,81cdd0 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
  81ce90:	e0bffc17 	ldw	r2,-16(fp)
  81ce94:	e0bfff15 	stw	r2,-4(fp)
  81ce98:	e0bfff17 	ldw	r2,-4(fp)
}
  81ce9c:	e037883a 	mov	sp,fp
  81cea0:	dfc00117 	ldw	ra,4(sp)
  81cea4:	df000017 	ldw	fp,0(sp)
  81cea8:	dec00204 	addi	sp,sp,8
  81ceac:	f800283a 	ret

0081ceb0 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
  81ceb0:	defffa04 	addi	sp,sp,-24
  81ceb4:	df000515 	stw	fp,20(sp)
  81ceb8:	df000504 	addi	fp,sp,20
  81cebc:	e13ffd15 	stw	r4,-12(fp)
  81cec0:	e17ffe15 	stw	r5,-8(fp)
  81cec4:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
  81cec8:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
  81cecc:	e03ffc15 	stw	zero,-16(fp)
  81ced0:	00002b06 	br	81cf80 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
  81ced4:	e0bffb17 	ldw	r2,-20(fp)
  81ced8:	1007883a 	mov	r3,r2
  81cedc:	e0bffd17 	ldw	r2,-12(fp)
  81cee0:	1885883a 	add	r2,r3,r2
  81cee4:	10800003 	ldbu	r2,0(r2)
  81cee8:	10803fcc 	andi	r2,r2,255
  81ceec:	1080201c 	xori	r2,r2,128
  81cef0:	10bfe004 	addi	r2,r2,-128
  81cef4:	10800ba0 	cmpeqi	r2,r2,46
  81cef8:	1000181e 	bne	r2,zero,81cf5c <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
  81cefc:	e0bffc17 	ldw	r2,-16(fp)
  81cf00:	1007883a 	mov	r3,r2
  81cf04:	e0bffe17 	ldw	r2,-8(fp)
  81cf08:	1889883a 	add	r4,r3,r2
  81cf0c:	e0bffb17 	ldw	r2,-20(fp)
  81cf10:	1007883a 	mov	r3,r2
  81cf14:	e0bffd17 	ldw	r2,-12(fp)
  81cf18:	1885883a 	add	r2,r3,r2
  81cf1c:	10800003 	ldbu	r2,0(r2)
  81cf20:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
  81cf24:	e0bffb17 	ldw	r2,-20(fp)
  81cf28:	1007883a 	mov	r3,r2
  81cf2c:	e0bffd17 	ldw	r2,-12(fp)
  81cf30:	1885883a 	add	r2,r3,r2
  81cf34:	10800003 	ldbu	r2,0(r2)
  81cf38:	10803fcc 	andi	r2,r2,255
  81cf3c:	1080201c 	xori	r2,r2,128
  81cf40:	10bfe004 	addi	r2,r2,-128
  81cf44:	1005003a 	cmpeq	r2,r2,zero
  81cf48:	10000a1e 	bne	r2,zero,81cf74 <convert_filename_to_name_extension+0xc4>
				local++;
  81cf4c:	e0bffb17 	ldw	r2,-20(fp)
  81cf50:	10800044 	addi	r2,r2,1
  81cf54:	e0bffb15 	stw	r2,-20(fp)
  81cf58:	00000606 	br	81cf74 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
  81cf5c:	e0bffc17 	ldw	r2,-16(fp)
  81cf60:	1007883a 	mov	r3,r2
  81cf64:	e0bffe17 	ldw	r2,-8(fp)
  81cf68:	1887883a 	add	r3,r3,r2
  81cf6c:	00800804 	movi	r2,32
  81cf70:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
  81cf74:	e0bffc17 	ldw	r2,-16(fp)
  81cf78:	10800044 	addi	r2,r2,1
  81cf7c:	e0bffc15 	stw	r2,-16(fp)
  81cf80:	e0bffc17 	ldw	r2,-16(fp)
  81cf84:	10800210 	cmplti	r2,r2,8
  81cf88:	103fd21e 	bne	r2,zero,81ced4 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  81cf8c:	e0bffb17 	ldw	r2,-20(fp)
  81cf90:	1007883a 	mov	r3,r2
  81cf94:	e0bffd17 	ldw	r2,-12(fp)
  81cf98:	1885883a 	add	r2,r3,r2
  81cf9c:	10800003 	ldbu	r2,0(r2)
  81cfa0:	10803fcc 	andi	r2,r2,255
  81cfa4:	1080201c 	xori	r2,r2,128
  81cfa8:	10bfe004 	addi	r2,r2,-128
  81cfac:	10800b98 	cmpnei	r2,r2,46
  81cfb0:	1000031e 	bne	r2,zero,81cfc0 <convert_filename_to_name_extension+0x110>
		local++;
  81cfb4:	e0bffb17 	ldw	r2,-20(fp)
  81cfb8:	10800044 	addi	r2,r2,1
  81cfbc:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
  81cfc0:	e03ffc15 	stw	zero,-16(fp)
  81cfc4:	00002106 	br	81d04c <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
  81cfc8:	e0bffb17 	ldw	r2,-20(fp)
  81cfcc:	1007883a 	mov	r3,r2
  81cfd0:	e0bffd17 	ldw	r2,-12(fp)
  81cfd4:	1885883a 	add	r2,r3,r2
  81cfd8:	10800003 	ldbu	r2,0(r2)
  81cfdc:	10803fcc 	andi	r2,r2,255
  81cfe0:	1080201c 	xori	r2,r2,128
  81cfe4:	10bfe004 	addi	r2,r2,-128
  81cfe8:	1005003a 	cmpeq	r2,r2,zero
  81cfec:	10000e1e 	bne	r2,zero,81d028 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
  81cff0:	e0bffc17 	ldw	r2,-16(fp)
  81cff4:	1007883a 	mov	r3,r2
  81cff8:	e0bfff17 	ldw	r2,-4(fp)
  81cffc:	1889883a 	add	r4,r3,r2
  81d000:	e0bffb17 	ldw	r2,-20(fp)
  81d004:	1007883a 	mov	r3,r2
  81d008:	e0bffd17 	ldw	r2,-12(fp)
  81d00c:	1885883a 	add	r2,r3,r2
  81d010:	10800003 	ldbu	r2,0(r2)
  81d014:	20800005 	stb	r2,0(r4)
			local++;
  81d018:	e0bffb17 	ldw	r2,-20(fp)
  81d01c:	10800044 	addi	r2,r2,1
  81d020:	e0bffb15 	stw	r2,-20(fp)
  81d024:	00000606 	br	81d040 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
  81d028:	e0bffc17 	ldw	r2,-16(fp)
  81d02c:	1007883a 	mov	r3,r2
  81d030:	e0bfff17 	ldw	r2,-4(fp)
  81d034:	1887883a 	add	r3,r3,r2
  81d038:	00800804 	movi	r2,32
  81d03c:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
  81d040:	e0bffc17 	ldw	r2,-16(fp)
  81d044:	10800044 	addi	r2,r2,1
  81d048:	e0bffc15 	stw	r2,-16(fp)
  81d04c:	e0bffc17 	ldw	r2,-16(fp)
  81d050:	108000d0 	cmplti	r2,r2,3
  81d054:	103fdc1e 	bne	r2,zero,81cfc8 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
  81d058:	e037883a 	mov	sp,fp
  81d05c:	df000017 	ldw	fp,0(sp)
  81d060:	dec00104 	addi	sp,sp,4
  81d064:	f800283a 	ret

0081d068 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  81d068:	defff304 	addi	sp,sp,-52
  81d06c:	dfc00c15 	stw	ra,48(sp)
  81d070:	df000b15 	stw	fp,44(sp)
  81d074:	df000b04 	addi	fp,sp,44
  81d078:	e13ffb15 	stw	r4,-20(fp)
  81d07c:	e17ffc15 	stw	r5,-16(fp)
  81d080:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
  81d084:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
  81d088:	e13ffa04 	addi	r4,fp,-24
  81d08c:	081c9940 	call	81c994 <find_first_empty_cluster>
  81d090:	1005003a 	cmpeq	r2,r2,zero
  81d094:	1000a31e 	bne	r2,zero,81d324 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  81d098:	e0bffd17 	ldw	r2,-12(fp)
  81d09c:	10800a17 	ldw	r2,40(r2)
  81d0a0:	1004c03a 	cmpne	r2,r2,zero
  81d0a4:	1000031e 	bne	r2,zero,81d0b4 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
  81d0a8:	081cd840 	call	81cd84 <find_first_empty_record_in_root_directory>
  81d0ac:	e0bff815 	stw	r2,-32(fp)
  81d0b0:	00000506 	br	81d0c8 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  81d0b4:	e0bffd17 	ldw	r2,-12(fp)
  81d0b8:	1080058b 	ldhu	r2,22(r2)
  81d0bc:	113fffcc 	andi	r4,r2,65535
  81d0c0:	081cb380 	call	81cb38 <find_first_empty_record_in_a_subdirectory>
  81d0c4:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  81d0c8:	e0bff817 	ldw	r2,-32(fp)
  81d0cc:	1004803a 	cmplt	r2,r2,zero
  81d0d0:	1000941e 	bne	r2,zero,81d324 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
  81d0d4:	e13ffb17 	ldw	r4,-20(fp)
  81d0d8:	081bc700 	call	81bc70 <get_dir_divider_location>
  81d0dc:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
  81d0e0:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
  81d0e4:	00000b06 	br	81d114 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
  81d0e8:	e0fff517 	ldw	r3,-44(fp)
  81d0ec:	e0bff617 	ldw	r2,-40(fp)
  81d0f0:	1885883a 	add	r2,r3,r2
  81d0f4:	10800044 	addi	r2,r2,1
  81d0f8:	e0bff515 	stw	r2,-44(fp)
				location
  81d0fc:	e0bff517 	ldw	r2,-44(fp)
  81d100:	1007883a 	mov	r3,r2
  81d104:	e0bffb17 	ldw	r2,-20(fp)
  81d108:	1889883a 	add	r4,r3,r2
  81d10c:	081bc700 	call	81bc70 <get_dir_divider_location>
  81d110:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  81d114:	e0bff617 	ldw	r2,-40(fp)
  81d118:	10800048 	cmpgei	r2,r2,1
  81d11c:	103ff21e 	bne	r2,zero,81d0e8 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  81d120:	e0bff517 	ldw	r2,-44(fp)
  81d124:	1007883a 	mov	r3,r2
  81d128:	e0bffb17 	ldw	r2,-20(fp)
  81d12c:	1889883a 	add	r4,r3,r2
  81d130:	e0bffc17 	ldw	r2,-16(fp)
  81d134:	100b883a 	mov	r5,r2
  81d138:	e0bffc17 	ldw	r2,-16(fp)
  81d13c:	10800204 	addi	r2,r2,8
  81d140:	100d883a 	mov	r6,r2
  81d144:	081ceb00 	call	81ceb0 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  81d148:	e0bffc17 	ldw	r2,-16(fp)
  81d14c:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
  81d150:	e0bffc17 	ldw	r2,-16(fp)
  81d154:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
  81d158:	e0bffc17 	ldw	r2,-16(fp)
  81d15c:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
  81d160:	e0bffc17 	ldw	r2,-16(fp)
  81d164:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
  81d168:	e0bffc17 	ldw	r2,-16(fp)
  81d16c:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
  81d170:	e0bffc17 	ldw	r2,-16(fp)
  81d174:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
  81d178:	e0bffa17 	ldw	r2,-24(fp)
  81d17c:	1007883a 	mov	r3,r2
  81d180:	e0bffc17 	ldw	r2,-16(fp)
  81d184:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
  81d188:	e0bffc17 	ldw	r2,-16(fp)
  81d18c:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
  81d190:	e0fffa17 	ldw	r3,-24(fp)
  81d194:	e0bffc17 	ldw	r2,-16(fp)
  81d198:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
  81d19c:	e0bffc17 	ldw	r2,-16(fp)
  81d1a0:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
  81d1a4:	e0bffc17 	ldw	r2,-16(fp)
  81d1a8:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  81d1ac:	e0bff817 	ldw	r2,-32(fp)
  81d1b0:	10ffffcc 	andi	r3,r2,65535
  81d1b4:	e0bffc17 	ldw	r2,-16(fp)
  81d1b8:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  81d1bc:	e0bff817 	ldw	r2,-32(fp)
  81d1c0:	1005d43a 	srai	r2,r2,16
  81d1c4:	10bfffcc 	andi	r2,r2,65535
  81d1c8:	e0bfff15 	stw	r2,-4(fp)
  81d1cc:	e0ffff17 	ldw	r3,-4(fp)
  81d1d0:	1804403a 	cmpge	r2,r3,zero
  81d1d4:	1000031e 	bne	r2,zero,81d1e4 <create_file+0x17c>
  81d1d8:	e0bfff17 	ldw	r2,-4(fp)
  81d1dc:	108003c4 	addi	r2,r2,15
  81d1e0:	e0bfff15 	stw	r2,-4(fp)
  81d1e4:	e0ffff17 	ldw	r3,-4(fp)
  81d1e8:	1805d13a 	srai	r2,r3,4
  81d1ec:	1007883a 	mov	r3,r2
  81d1f0:	e0bffc17 	ldw	r2,-16(fp)
  81d1f4:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  81d1f8:	e0bff817 	ldw	r2,-32(fp)
  81d1fc:	1005d43a 	srai	r2,r2,16
  81d200:	108003cc 	andi	r2,r2,15
  81d204:	1004917a 	slli	r2,r2,5
  81d208:	1007883a 	mov	r3,r2
  81d20c:	e0bffc17 	ldw	r2,-16(fp)
  81d210:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  81d214:	e0bffd17 	ldw	r2,-12(fp)
  81d218:	1080058b 	ldhu	r2,22(r2)
  81d21c:	10ffffcc 	andi	r3,r2,65535
  81d220:	e0bffc17 	ldw	r2,-16(fp)
  81d224:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
  81d228:	e0fffc17 	ldw	r3,-16(fp)
  81d22c:	00800044 	movi	r2,1
  81d230:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
  81d234:	e0fffc17 	ldw	r3,-16(fp)
  81d238:	00800044 	movi	r2,1
  81d23c:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
  81d240:	e0bffc17 	ldw	r2,-16(fp)
  81d244:	10800a17 	ldw	r2,40(r2)
  81d248:	1004c03a 	cmpne	r2,r2,zero
  81d24c:	1000081e 	bne	r2,zero,81d270 <create_file+0x208>
  81d250:	008020f4 	movhi	r2,131
  81d254:	10bb3604 	addi	r2,r2,-4904
  81d258:	10c01317 	ldw	r3,76(r2)
  81d25c:	e0bffc17 	ldw	r2,-16(fp)
  81d260:	10800b17 	ldw	r2,44(r2)
  81d264:	1887883a 	add	r3,r3,r2
  81d268:	e0fffe15 	stw	r3,-8(fp)
  81d26c:	00001006 	br	81d2b0 <create_file+0x248>
  81d270:	008020f4 	movhi	r2,131
  81d274:	10bb3604 	addi	r2,r2,-4904
  81d278:	11001417 	ldw	r4,80(r2)
  81d27c:	e0bffc17 	ldw	r2,-16(fp)
  81d280:	10800a17 	ldw	r2,40(r2)
  81d284:	10ffff84 	addi	r3,r2,-2
  81d288:	008020f4 	movhi	r2,131
  81d28c:	10bb3604 	addi	r2,r2,-4904
  81d290:	10800383 	ldbu	r2,14(r2)
  81d294:	10803fcc 	andi	r2,r2,255
  81d298:	1885383a 	mul	r2,r3,r2
  81d29c:	2087883a 	add	r3,r4,r2
  81d2a0:	e0bffc17 	ldw	r2,-16(fp)
  81d2a4:	10800b17 	ldw	r2,44(r2)
  81d2a8:	1887883a 	add	r3,r3,r2
  81d2ac:	e0fffe15 	stw	r3,-8(fp)
  81d2b0:	e0bffe17 	ldw	r2,-8(fp)
  81d2b4:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  81d2b8:	e13ff717 	ldw	r4,-36(fp)
  81d2bc:	d1677217 	ldw	r5,-25144(gp)
  81d2c0:	081a8400 	call	81a840 <Read_Sector_Data>
  81d2c4:	1005003a 	cmpeq	r2,r2,zero
  81d2c8:	1000161e 	bne	r2,zero,81d324 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  81d2cc:	e0bffc17 	ldw	r2,-16(fp)
  81d2d0:	10800c0b 	ldhu	r2,48(r2)
  81d2d4:	113fffcc 	andi	r4,r2,65535
  81d2d8:	2120001c 	xori	r4,r4,32768
  81d2dc:	21200004 	addi	r4,r4,-32768
  81d2e0:	e17ffc17 	ldw	r5,-16(fp)
  81d2e4:	081af0c0 	call	81af0c <Write_File_Record_At_Offset>
  81d2e8:	1005003a 	cmpeq	r2,r2,zero
  81d2ec:	10000d1e 	bne	r2,zero,81d324 <create_file+0x2bc>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
  81d2f0:	081a7f00 	call	81a7f0 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
  81d2f4:	e13ffa17 	ldw	r4,-24(fp)
  81d2f8:	017fffc4 	movi	r5,-1
  81d2fc:	01800044 	movi	r6,1
  81d300:	081a9f40 	call	81a9f4 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
  81d304:	e13ffa17 	ldw	r4,-24(fp)
  81d308:	017fffc4 	movi	r5,-1
  81d30c:	000d883a 	mov	r6,zero
  81d310:	081a9f40 	call	81a9f4 <mark_cluster>
  81d314:	1005003a 	cmpeq	r2,r2,zero
  81d318:	1000021e 	bne	r2,zero,81d324 <create_file+0x2bc>
							false)) {
						result = true;
  81d31c:	00800044 	movi	r2,1
  81d320:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
  81d324:	e0bff917 	ldw	r2,-28(fp)
}
  81d328:	e037883a 	mov	sp,fp
  81d32c:	dfc00117 	ldw	ra,4(sp)
  81d330:	df000017 	ldw	fp,0(sp)
  81d334:	dec00204 	addi	sp,sp,8
  81d338:	f800283a 	ret

0081d33c <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
  81d33c:	defffb04 	addi	sp,sp,-20
  81d340:	df000415 	stw	fp,16(sp)
  81d344:	df000404 	addi	fp,sp,16
  81d348:	e13ffe15 	stw	r4,-8(fp)
  81d34c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  81d350:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  81d354:	e03ffd15 	stw	zero,-12(fp)
  81d358:	00001606 	br	81d3b4 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
  81d35c:	e0fffd17 	ldw	r3,-12(fp)
  81d360:	e0bffe17 	ldw	r2,-8(fp)
  81d364:	10c5883a 	add	r2,r2,r3
  81d368:	10800003 	ldbu	r2,0(r2)
  81d36c:	10803fcc 	andi	r2,r2,255
  81d370:	10800820 	cmpeqi	r2,r2,32
  81d374:	10000c1e 	bne	r2,zero,81d3a8 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
  81d378:	e0bffc17 	ldw	r2,-16(fp)
  81d37c:	1007883a 	mov	r3,r2
  81d380:	e0bfff17 	ldw	r2,-4(fp)
  81d384:	1889883a 	add	r4,r3,r2
  81d388:	e0fffd17 	ldw	r3,-12(fp)
  81d38c:	e0bffe17 	ldw	r2,-8(fp)
  81d390:	10c5883a 	add	r2,r2,r3
  81d394:	10800003 	ldbu	r2,0(r2)
  81d398:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  81d39c:	e0bffc17 	ldw	r2,-16(fp)
  81d3a0:	10800044 	addi	r2,r2,1
  81d3a4:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  81d3a8:	e0bffd17 	ldw	r2,-12(fp)
  81d3ac:	10800044 	addi	r2,r2,1
  81d3b0:	e0bffd15 	stw	r2,-12(fp)
  81d3b4:	e0bffd17 	ldw	r2,-12(fp)
  81d3b8:	10800210 	cmplti	r2,r2,8
  81d3bc:	103fe71e 	bne	r2,zero,81d35c <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
  81d3c0:	e0bffe17 	ldw	r2,-8(fp)
  81d3c4:	10800203 	ldbu	r2,8(r2)
  81d3c8:	10803fcc 	andi	r2,r2,255
  81d3cc:	10800820 	cmpeqi	r2,r2,32
  81d3d0:	1000261e 	bne	r2,zero,81d46c <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
  81d3d4:	e0bffc17 	ldw	r2,-16(fp)
  81d3d8:	1007883a 	mov	r3,r2
  81d3dc:	e0bfff17 	ldw	r2,-4(fp)
  81d3e0:	1887883a 	add	r3,r3,r2
  81d3e4:	00800b84 	movi	r2,46
  81d3e8:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  81d3ec:	e0bffc17 	ldw	r2,-16(fp)
  81d3f0:	10800044 	addi	r2,r2,1
  81d3f4:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
  81d3f8:	e03ffd15 	stw	zero,-12(fp)
  81d3fc:	00001806 	br	81d460 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
  81d400:	e0fffd17 	ldw	r3,-12(fp)
  81d404:	e0bffe17 	ldw	r2,-8(fp)
  81d408:	1885883a 	add	r2,r3,r2
  81d40c:	10800204 	addi	r2,r2,8
  81d410:	10800003 	ldbu	r2,0(r2)
  81d414:	10803fcc 	andi	r2,r2,255
  81d418:	10800820 	cmpeqi	r2,r2,32
  81d41c:	10000d1e 	bne	r2,zero,81d454 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
  81d420:	e0bffc17 	ldw	r2,-16(fp)
  81d424:	1007883a 	mov	r3,r2
  81d428:	e0bfff17 	ldw	r2,-4(fp)
  81d42c:	1889883a 	add	r4,r3,r2
  81d430:	e0fffd17 	ldw	r3,-12(fp)
  81d434:	e0bffe17 	ldw	r2,-8(fp)
  81d438:	1885883a 	add	r2,r3,r2
  81d43c:	10800204 	addi	r2,r2,8
  81d440:	10800003 	ldbu	r2,0(r2)
  81d444:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  81d448:	e0bffc17 	ldw	r2,-16(fp)
  81d44c:	10800044 	addi	r2,r2,1
  81d450:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
  81d454:	e0bffd17 	ldw	r2,-12(fp)
  81d458:	10800044 	addi	r2,r2,1
  81d45c:	e0bffd15 	stw	r2,-12(fp)
  81d460:	e0bffd17 	ldw	r2,-12(fp)
  81d464:	108000d0 	cmplti	r2,r2,3
  81d468:	103fe51e 	bne	r2,zero,81d400 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  81d46c:	e0bffc17 	ldw	r2,-16(fp)
  81d470:	1007883a 	mov	r3,r2
  81d474:	e0bfff17 	ldw	r2,-4(fp)
  81d478:	1885883a 	add	r2,r3,r2
  81d47c:	10000005 	stb	zero,0(r2)
}
  81d480:	e037883a 	mov	sp,fp
  81d484:	df000017 	ldw	fp,0(sp)
  81d488:	dec00104 	addi	sp,sp,4
  81d48c:	f800283a 	ret

0081d490 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  81d490:	defffc04 	addi	sp,sp,-16
  81d494:	dfc00315 	stw	ra,12(sp)
  81d498:	df000215 	stw	fp,8(sp)
  81d49c:	df000204 	addi	fp,sp,8
  81d4a0:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  81d4a4:	e13fff17 	ldw	r4,-4(fp)
  81d4a8:	014020b4 	movhi	r5,130
  81d4ac:	294a7104 	addi	r5,r5,10692
  81d4b0:	081ef080 	call	81ef08 <alt_find_dev>
  81d4b4:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
  81d4b8:	e0bffe17 	ldw	r2,-8(fp)
  81d4bc:	1005003a 	cmpeq	r2,r2,zero
  81d4c0:	10001e1e 	bne	r2,zero,81d53c <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  81d4c4:	e0bffe17 	ldw	r2,-8(fp)
  81d4c8:	10800a17 	ldw	r2,40(r2)
  81d4cc:	10808d04 	addi	r2,r2,564
  81d4d0:	d0a76c15 	stw	r2,-25168(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  81d4d4:	e0bffe17 	ldw	r2,-8(fp)
  81d4d8:	10800a17 	ldw	r2,40(r2)
  81d4dc:	10808904 	addi	r2,r2,548
  81d4e0:	d0a76d15 	stw	r2,-25164(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  81d4e4:	e0bffe17 	ldw	r2,-8(fp)
  81d4e8:	10800a17 	ldw	r2,40(r2)
  81d4ec:	10808404 	addi	r2,r2,528
  81d4f0:	d0a76e15 	stw	r2,-25160(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  81d4f4:	e0bffe17 	ldw	r2,-8(fp)
  81d4f8:	10800a17 	ldw	r2,40(r2)
  81d4fc:	10808c04 	addi	r2,r2,560
  81d500:	d0a76f15 	stw	r2,-25156(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  81d504:	e0bffe17 	ldw	r2,-8(fp)
  81d508:	10800a17 	ldw	r2,40(r2)
  81d50c:	10808b04 	addi	r2,r2,556
  81d510:	d0a77015 	stw	r2,-25152(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  81d514:	e0bffe17 	ldw	r2,-8(fp)
  81d518:	10800a17 	ldw	r2,40(r2)
  81d51c:	d0a77115 	stw	r2,-25148(gp)
		device_pointer = dev;
  81d520:	e0bffe17 	ldw	r2,-8(fp)
  81d524:	d0a77415 	stw	r2,-25136(gp)
		initialized = false;
  81d528:	d0276a15 	stw	zero,-25176(gp)
		is_sd_card_formated_as_FAT16 = false;
  81d52c:	d0276b15 	stw	zero,-25172(gp)
		search_data.valid = false;
  81d530:	008020f4 	movhi	r2,131
  81d534:	10bb3104 	addi	r2,r2,-4924
  81d538:	10000415 	stw	zero,16(r2)
	}
	return dev;
  81d53c:	e0bffe17 	ldw	r2,-8(fp)
}
  81d540:	e037883a 	mov	sp,fp
  81d544:	dfc00117 	ldw	ra,4(sp)
  81d548:	df000017 	ldw	fp,0(sp)
  81d54c:	dec00204 	addi	sp,sp,8
  81d550:	f800283a 	ret

0081d554 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  81d554:	defffd04 	addi	sp,sp,-12
  81d558:	df000215 	stw	fp,8(sp)
  81d55c:	df000204 	addi	fp,sp,8
	bool result = false;
  81d560:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  81d564:	d0a77417 	ldw	r2,-25136(gp)
  81d568:	1005003a 	cmpeq	r2,r2,zero
  81d56c:	1000081e 	bne	r2,zero,81d590 <alt_up_sd_card_is_Present+0x3c>
  81d570:	d0a76c17 	ldw	r2,-25168(gp)
  81d574:	1080002b 	ldhuio	r2,0(r2)
  81d578:	1080008c 	andi	r2,r2,2
  81d57c:	1005003a 	cmpeq	r2,r2,zero
  81d580:	1000031e 	bne	r2,zero,81d590 <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
  81d584:	00800044 	movi	r2,1
  81d588:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  81d58c:	00001e06 	br	81d608 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  81d590:	d0a76a17 	ldw	r2,-25176(gp)
  81d594:	10800058 	cmpnei	r2,r2,1
  81d598:	10001b1e 	bne	r2,zero,81d608 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
  81d59c:	d0276a15 	stw	zero,-25176(gp)
		search_data.valid = false;
  81d5a0:	008020f4 	movhi	r2,131
  81d5a4:	10bb3104 	addi	r2,r2,-4924
  81d5a8:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  81d5ac:	d0276b15 	stw	zero,-25172(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  81d5b0:	e03ffe15 	stw	zero,-8(fp)
  81d5b4:	00001106 	br	81d5fc <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
  81d5b8:	e0bffe17 	ldw	r2,-8(fp)
  81d5bc:	00c020f4 	movhi	r3,131
  81d5c0:	18fb4b04 	addi	r3,r3,-4820
  81d5c4:	100491ba 	slli	r2,r2,6
  81d5c8:	10c5883a 	add	r2,r2,r3
  81d5cc:	10800f04 	addi	r2,r2,60
  81d5d0:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  81d5d4:	e0bffe17 	ldw	r2,-8(fp)
  81d5d8:	00c020f4 	movhi	r3,131
  81d5dc:	18fb4b04 	addi	r3,r3,-4820
  81d5e0:	100491ba 	slli	r2,r2,6
  81d5e4:	10c5883a 	add	r2,r2,r3
  81d5e8:	10800e04 	addi	r2,r2,56
  81d5ec:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  81d5f0:	e0bffe17 	ldw	r2,-8(fp)
  81d5f4:	10800044 	addi	r2,r2,1
  81d5f8:	e0bffe15 	stw	r2,-8(fp)
  81d5fc:	e0bffe17 	ldw	r2,-8(fp)
  81d600:	10800510 	cmplti	r2,r2,20
  81d604:	103fec1e 	bne	r2,zero,81d5b8 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
  81d608:	e0bfff17 	ldw	r2,-4(fp)
}
  81d60c:	e037883a 	mov	sp,fp
  81d610:	df000017 	ldw	fp,0(sp)
  81d614:	dec00104 	addi	sp,sp,4
  81d618:	f800283a 	ret

0081d61c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  81d61c:	defffd04 	addi	sp,sp,-12
  81d620:	dfc00215 	stw	ra,8(sp)
  81d624:	df000115 	stw	fp,4(sp)
  81d628:	df000104 	addi	fp,sp,4
	bool result = false;
  81d62c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  81d630:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81d634:	1005003a 	cmpeq	r2,r2,zero
  81d638:	10000d1e 	bne	r2,zero,81d670 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  81d63c:	d0a76a17 	ldw	r2,-25176(gp)
  81d640:	1004c03a 	cmpne	r2,r2,zero
  81d644:	1000071e 	bne	r2,zero,81d664 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  81d648:	081b80c0 	call	81b80c <Look_for_FAT16>
  81d64c:	d0a76b15 	stw	r2,-25172(gp)
			initialized = is_sd_card_formated_as_FAT16;
  81d650:	d0a76b17 	ldw	r2,-25172(gp)
  81d654:	d0a76a15 	stw	r2,-25176(gp)
			search_data.valid = false;
  81d658:	008020f4 	movhi	r2,131
  81d65c:	10bb3104 	addi	r2,r2,-4924
  81d660:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  81d664:	d0a76b17 	ldw	r2,-25172(gp)
  81d668:	e0bfff15 	stw	r2,-4(fp)
  81d66c:	00000206 	br	81d678 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  81d670:	d0276a15 	stw	zero,-25176(gp)
		is_sd_card_formated_as_FAT16 = false;
  81d674:	d0276b15 	stw	zero,-25172(gp)
	}

	return result;
  81d678:	e0bfff17 	ldw	r2,-4(fp)
}
  81d67c:	e037883a 	mov	sp,fp
  81d680:	dfc00117 	ldw	ra,4(sp)
  81d684:	df000017 	ldw	fp,0(sp)
  81d688:	dec00204 	addi	sp,sp,8
  81d68c:	f800283a 	ret

0081d690 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  81d690:	deffea04 	addi	sp,sp,-88
  81d694:	dfc01515 	stw	ra,84(sp)
  81d698:	df001415 	stw	fp,80(sp)
  81d69c:	df001404 	addi	fp,sp,80
  81d6a0:	e13ffe15 	stw	r4,-8(fp)
  81d6a4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  81d6a8:	00800084 	movi	r2,2
  81d6ac:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81d6b0:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81d6b4:	1005003a 	cmpeq	r2,r2,zero
  81d6b8:	1000241e 	bne	r2,zero,81d74c <alt_up_sd_card_find_first+0xbc>
  81d6bc:	d0a76b17 	ldw	r2,-25172(gp)
  81d6c0:	1005003a 	cmpeq	r2,r2,zero
  81d6c4:	1000211e 	bne	r2,zero,81d74c <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  81d6c8:	e17fed04 	addi	r5,fp,-76
  81d6cc:	e1bfee04 	addi	r6,fp,-72
  81d6d0:	e13ffe17 	ldw	r4,-8(fp)
  81d6d4:	081c01c0 	call	81c01c <get_home_directory_cluster_for_file>
  81d6d8:	1005003a 	cmpeq	r2,r2,zero
  81d6dc:	1000191e 	bne	r2,zero,81d744 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  81d6e0:	e0bfed17 	ldw	r2,-76(fp)
  81d6e4:	1007883a 	mov	r3,r2
  81d6e8:	008020f4 	movhi	r2,131
  81d6ec:	10bb3104 	addi	r2,r2,-4924
  81d6f0:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  81d6f4:	e0bfed17 	ldw	r2,-76(fp)
  81d6f8:	1007883a 	mov	r3,r2
  81d6fc:	008020f4 	movhi	r2,131
  81d700:	10bb3104 	addi	r2,r2,-4924
  81d704:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  81d708:	008020f4 	movhi	r2,131
  81d70c:	10bb3104 	addi	r2,r2,-4924
  81d710:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  81d714:	00c020f4 	movhi	r3,131
  81d718:	18fb3104 	addi	r3,r3,-4924
  81d71c:	00bfffc4 	movi	r2,-1
  81d720:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  81d724:	00c020f4 	movhi	r3,131
  81d728:	18fb3104 	addi	r3,r3,-4924
  81d72c:	00800044 	movi	r2,1
  81d730:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  81d734:	e13fff17 	ldw	r4,-4(fp)
  81d738:	081d7640 	call	81d764 <alt_up_sd_card_find_next>
  81d73c:	e0bfec0d 	sth	r2,-80(fp)
  81d740:	00000206 	br	81d74c <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
  81d744:	00800044 	movi	r2,1
  81d748:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  81d74c:	e0bfec0f 	ldh	r2,-80(fp)
}
  81d750:	e037883a 	mov	sp,fp
  81d754:	dfc00117 	ldw	ra,4(sp)
  81d758:	df000017 	ldw	fp,0(sp)
  81d75c:	dec00204 	addi	sp,sp,8
  81d760:	f800283a 	ret

0081d764 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  81d764:	deffe404 	addi	sp,sp,-112
  81d768:	dfc01b15 	stw	ra,108(sp)
  81d76c:	df001a15 	stw	fp,104(sp)
  81d770:	df001a04 	addi	fp,sp,104
  81d774:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  81d778:	00800084 	movi	r2,2
  81d77c:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81d780:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81d784:	1005003a 	cmpeq	r2,r2,zero
  81d788:	1000da1e 	bne	r2,zero,81daf4 <alt_up_sd_card_find_next+0x390>
  81d78c:	d0a76b17 	ldw	r2,-25172(gp)
  81d790:	1005003a 	cmpeq	r2,r2,zero
  81d794:	1000d71e 	bne	r2,zero,81daf4 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
  81d798:	008020f4 	movhi	r2,131
  81d79c:	10bb3104 	addi	r2,r2,-4924
  81d7a0:	10800417 	ldw	r2,16(r2)
  81d7a4:	1005003a 	cmpeq	r2,r2,zero
  81d7a8:	1000d01e 	bne	r2,zero,81daec <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  81d7ac:	008020f4 	movhi	r2,131
  81d7b0:	10bb3104 	addi	r2,r2,-4924
  81d7b4:	10800117 	ldw	r2,4(r2)
  81d7b8:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
  81d7bc:	e0bfec17 	ldw	r2,-80(fp)
  81d7c0:	1004c03a 	cmpne	r2,r2,zero
  81d7c4:	1000511e 	bne	r2,zero,81d90c <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  81d7c8:	008020f4 	movhi	r2,131
  81d7cc:	10bb3604 	addi	r2,r2,-4904
  81d7d0:	1080050b 	ldhu	r2,20(r2)
  81d7d4:	10bfffcc 	andi	r2,r2,65535
  81d7d8:	1008917a 	slli	r4,r2,5
  81d7dc:	008020f4 	movhi	r2,131
  81d7e0:	10bb3604 	addi	r2,r2,-4904
  81d7e4:	1080030b 	ldhu	r2,12(r2)
  81d7e8:	117fffcc 	andi	r5,r2,65535
  81d7ec:	080b2100 	call	80b210 <__divsi3>
  81d7f0:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  81d7f4:	008020f4 	movhi	r2,131
  81d7f8:	10bb3104 	addi	r2,r2,-4924
  81d7fc:	10800217 	ldw	r2,8(r2)
  81d800:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
  81d804:	008020f4 	movhi	r2,131
  81d808:	10bb3104 	addi	r2,r2,-4924
  81d80c:	1080030b 	ldhu	r2,12(r2)
  81d810:	10bfffcc 	andi	r2,r2,65535
  81d814:	10a0001c 	xori	r2,r2,32768
  81d818:	10a00004 	addi	r2,r2,-32768
  81d81c:	10800044 	addi	r2,r2,1
  81d820:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  81d824:	00003306 	br	81d8f4 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
  81d828:	008020f4 	movhi	r2,131
  81d82c:	10bb3604 	addi	r2,r2,-4904
  81d830:	10c01317 	ldw	r3,76(r2)
  81d834:	e0bfea17 	ldw	r2,-88(fp)
  81d838:	1885883a 	add	r2,r3,r2
  81d83c:	1009883a 	mov	r4,r2
  81d840:	d1677217 	ldw	r5,-25144(gp)
  81d844:	081a8400 	call	81a840 <Read_Sector_Data>
  81d848:	1005003a 	cmpeq	r2,r2,zero
  81d84c:	10002c1e 	bne	r2,zero,81d900 <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  81d850:	00002106 	br	81d8d8 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
  81d854:	e0bfe917 	ldw	r2,-92(fp)
  81d858:	1008917a 	slli	r4,r2,5
  81d85c:	e1ffea17 	ldw	r7,-88(fp)
  81d860:	e17fee04 	addi	r5,fp,-72
  81d864:	000d883a 	mov	r6,zero
  81d868:	081ac880 	call	81ac88 <Read_File_Record_At_Offset>
  81d86c:	1005003a 	cmpeq	r2,r2,zero
  81d870:	1000161e 	bne	r2,zero,81d8cc <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  81d874:	e0bfee03 	ldbu	r2,-72(fp)
  81d878:	10803fcc 	andi	r2,r2,255
  81d87c:	1005003a 	cmpeq	r2,r2,zero
  81d880:	1000121e 	bne	r2,zero,81d8cc <alt_up_sd_card_find_next+0x168>
  81d884:	e0bfee03 	ldbu	r2,-72(fp)
  81d888:	10803fcc 	andi	r2,r2,255
  81d88c:	10803960 	cmpeqi	r2,r2,229
  81d890:	10000e1e 	bne	r2,zero,81d8cc <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  81d894:	e0bfe917 	ldw	r2,-92(fp)
  81d898:	1007883a 	mov	r3,r2
  81d89c:	008020f4 	movhi	r2,131
  81d8a0:	10bb3104 	addi	r2,r2,-4924
  81d8a4:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
  81d8a8:	e0ffea17 	ldw	r3,-88(fp)
  81d8ac:	008020f4 	movhi	r2,131
  81d8b0:	10bb3104 	addi	r2,r2,-4924
  81d8b4:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
  81d8b8:	e13fee04 	addi	r4,fp,-72
  81d8bc:	e17ffe17 	ldw	r5,-8(fp)
  81d8c0:	081d33c0 	call	81d33c <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
  81d8c4:	e03fff15 	stw	zero,-4(fp)
  81d8c8:	00008c06 	br	81dafc <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  81d8cc:	e0bfe917 	ldw	r2,-92(fp)
  81d8d0:	10800044 	addi	r2,r2,1
  81d8d4:	e0bfe915 	stw	r2,-92(fp)
  81d8d8:	e0bfe917 	ldw	r2,-92(fp)
  81d8dc:	10800410 	cmplti	r2,r2,16
  81d8e0:	103fdc1e 	bne	r2,zero,81d854 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  81d8e4:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  81d8e8:	e0bfea17 	ldw	r2,-88(fp)
  81d8ec:	10800044 	addi	r2,r2,1
  81d8f0:	e0bfea15 	stw	r2,-88(fp)
  81d8f4:	e0ffea17 	ldw	r3,-88(fp)
  81d8f8:	e0bfeb17 	ldw	r2,-84(fp)
  81d8fc:	18bfca16 	blt	r3,r2,81d828 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
  81d900:	00bfffc4 	movi	r2,-1
  81d904:	e0bfed0d 	sth	r2,-76(fp)
  81d908:	00007a06 	br	81daf4 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  81d90c:	008020f4 	movhi	r2,131
  81d910:	10bb3104 	addi	r2,r2,-4924
  81d914:	1080030b 	ldhu	r2,12(r2)
  81d918:	10bfffcc 	andi	r2,r2,65535
  81d91c:	10a0001c 	xori	r2,r2,32768
  81d920:	10a00004 	addi	r2,r2,-32768
  81d924:	10800044 	addi	r2,r2,1
  81d928:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  81d92c:	e0bfec17 	ldw	r2,-80(fp)
  81d930:	10ffff84 	addi	r3,r2,-2
  81d934:	008020f4 	movhi	r2,131
  81d938:	10bb3604 	addi	r2,r2,-4904
  81d93c:	10800383 	ldbu	r2,14(r2)
  81d940:	10803fcc 	andi	r2,r2,255
  81d944:	1885383a 	mul	r2,r3,r2
  81d948:	1007883a 	mov	r3,r2
  81d94c:	008020f4 	movhi	r2,131
  81d950:	10bb3604 	addi	r2,r2,-4904
  81d954:	10801417 	ldw	r2,80(r2)
  81d958:	1885883a 	add	r2,r3,r2
  81d95c:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  81d960:	008020f4 	movhi	r2,131
  81d964:	10bb3104 	addi	r2,r2,-4924
  81d968:	10800217 	ldw	r2,8(r2)
  81d96c:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  81d970:	00003406 	br	81da44 <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
  81d974:	e0ffe617 	ldw	r3,-104(fp)
  81d978:	e0bfe717 	ldw	r2,-100(fp)
  81d97c:	1889883a 	add	r4,r3,r2
  81d980:	d1677217 	ldw	r5,-25144(gp)
  81d984:	081a8400 	call	81a840 <Read_Sector_Data>
  81d988:	1005003a 	cmpeq	r2,r2,zero
  81d98c:	1000331e 	bne	r2,zero,81da5c <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  81d990:	00002506 	br	81da28 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
  81d994:	e0bfe817 	ldw	r2,-96(fp)
  81d998:	1008917a 	slli	r4,r2,5
  81d99c:	e1bfec17 	ldw	r6,-80(fp)
  81d9a0:	e1ffe617 	ldw	r7,-104(fp)
  81d9a4:	e17fee04 	addi	r5,fp,-72
  81d9a8:	081ac880 	call	81ac88 <Read_File_Record_At_Offset>
  81d9ac:	1005003a 	cmpeq	r2,r2,zero
  81d9b0:	10001a1e 	bne	r2,zero,81da1c <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  81d9b4:	e0bfee03 	ldbu	r2,-72(fp)
  81d9b8:	10803fcc 	andi	r2,r2,255
  81d9bc:	1005003a 	cmpeq	r2,r2,zero
  81d9c0:	1000161e 	bne	r2,zero,81da1c <alt_up_sd_card_find_next+0x2b8>
  81d9c4:	e0bfee03 	ldbu	r2,-72(fp)
  81d9c8:	10803fcc 	andi	r2,r2,255
  81d9cc:	10803960 	cmpeqi	r2,r2,229
  81d9d0:	1000121e 	bne	r2,zero,81da1c <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  81d9d4:	e0ffec17 	ldw	r3,-80(fp)
  81d9d8:	008020f4 	movhi	r2,131
  81d9dc:	10bb3104 	addi	r2,r2,-4924
  81d9e0:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
  81d9e4:	e0bfe817 	ldw	r2,-96(fp)
  81d9e8:	1007883a 	mov	r3,r2
  81d9ec:	008020f4 	movhi	r2,131
  81d9f0:	10bb3104 	addi	r2,r2,-4924
  81d9f4:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
  81d9f8:	e0ffe617 	ldw	r3,-104(fp)
  81d9fc:	008020f4 	movhi	r2,131
  81da00:	10bb3104 	addi	r2,r2,-4924
  81da04:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
  81da08:	e13fee04 	addi	r4,fp,-72
  81da0c:	e17ffe17 	ldw	r5,-8(fp)
  81da10:	081d33c0 	call	81d33c <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
  81da14:	e03fff15 	stw	zero,-4(fp)
  81da18:	00003806 	br	81dafc <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  81da1c:	e0bfe817 	ldw	r2,-96(fp)
  81da20:	10800044 	addi	r2,r2,1
  81da24:	e0bfe815 	stw	r2,-96(fp)
  81da28:	e0bfe817 	ldw	r2,-96(fp)
  81da2c:	10800410 	cmplti	r2,r2,16
  81da30:	103fd81e 	bne	r2,zero,81d994 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  81da34:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  81da38:	e0bfe617 	ldw	r2,-104(fp)
  81da3c:	10800044 	addi	r2,r2,1
  81da40:	e0bfe615 	stw	r2,-104(fp)
  81da44:	008020f4 	movhi	r2,131
  81da48:	10bb3604 	addi	r2,r2,-4904
  81da4c:	10800383 	ldbu	r2,14(r2)
  81da50:	10c03fcc 	andi	r3,r2,255
  81da54:	e0bfe617 	ldw	r2,-104(fp)
  81da58:	10ffc616 	blt	r2,r3,81d974 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  81da5c:	008020f4 	movhi	r2,131
  81da60:	10bb3604 	addi	r2,r2,-4904
  81da64:	10800383 	ldbu	r2,14(r2)
  81da68:	10c03fcc 	andi	r3,r2,255
  81da6c:	e0bfe617 	ldw	r2,-104(fp)
  81da70:	10c01a16 	blt	r2,r3,81dadc <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
  81da74:	e13fec17 	ldw	r4,-80(fp)
  81da78:	e17fed84 	addi	r5,fp,-74
  81da7c:	081a93c0 	call	81a93c <get_cluster_flag>
  81da80:	1005003a 	cmpeq	r2,r2,zero
  81da84:	1000131e 	bne	r2,zero,81dad4 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  81da88:	e0bfed8b 	ldhu	r2,-74(fp)
  81da8c:	10bfffcc 	andi	r2,r2,65535
  81da90:	10a0001c 	xori	r2,r2,32768
  81da94:	10a00004 	addi	r2,r2,-32768
  81da98:	10fffe0c 	andi	r3,r2,65528
  81da9c:	00bffe14 	movui	r2,65528
  81daa0:	1880051e 	bne	r3,r2,81dab8 <alt_up_sd_card_find_next+0x354>
								result = -1;
  81daa4:	00bfffc4 	movi	r2,-1
  81daa8:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  81daac:	008020f4 	movhi	r2,131
  81dab0:	10bb3104 	addi	r2,r2,-4924
  81dab4:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  81dab8:	e0bfed8b 	ldhu	r2,-74(fp)
  81dabc:	10bfffcc 	andi	r2,r2,65535
  81dac0:	10a0001c 	xori	r2,r2,32768
  81dac4:	10a00004 	addi	r2,r2,-32768
  81dac8:	10bffe0c 	andi	r2,r2,65528
  81dacc:	e0bfec15 	stw	r2,-80(fp)
  81dad0:	00000206 	br	81dadc <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
  81dad4:	00bfffc4 	movi	r2,-1
  81dad8:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  81dadc:	e0ffec17 	ldw	r3,-80(fp)
  81dae0:	00bffdd4 	movui	r2,65527
  81dae4:	10ff910e 	bge	r2,r3,81d92c <alt_up_sd_card_find_next+0x1c8>
  81dae8:	00000206 	br	81daf4 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
  81daec:	008000c4 	movi	r2,3
  81daf0:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  81daf4:	e0bfed0f 	ldh	r2,-76(fp)
  81daf8:	e0bfff15 	stw	r2,-4(fp)
  81dafc:	e0bfff17 	ldw	r2,-4(fp)
}
  81db00:	e037883a 	mov	sp,fp
  81db04:	dfc00117 	ldw	ra,4(sp)
  81db08:	df000017 	ldw	fp,0(sp)
  81db0c:	dec00204 	addi	sp,sp,8
  81db10:	f800283a 	ret

0081db14 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  81db14:	deffe804 	addi	sp,sp,-96
  81db18:	dfc01715 	stw	ra,92(sp)
  81db1c:	df001615 	stw	fp,88(sp)
  81db20:	df001604 	addi	fp,sp,88
  81db24:	e13ffd15 	stw	r4,-12(fp)
  81db28:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  81db2c:	00bfffc4 	movi	r2,-1
  81db30:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81db34:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81db38:	1005003a 	cmpeq	r2,r2,zero
  81db3c:	1000d71e 	bne	r2,zero,81de9c <alt_up_sd_card_fopen+0x388>
  81db40:	d0a76b17 	ldw	r2,-25172(gp)
  81db44:	1005003a 	cmpeq	r2,r2,zero
  81db48:	1000d41e 	bne	r2,zero,81de9c <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
  81db4c:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
  81db50:	e13ffd17 	ldw	r4,-12(fp)
  81db54:	081b9100 	call	81b910 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
  81db58:	e13ffd17 	ldw	r4,-12(fp)
  81db5c:	081b9e00 	call	81b9e0 <check_file_name_for_FAT16_compliance>
  81db60:	1005003a 	cmpeq	r2,r2,zero
  81db64:	1000cd1e 	bne	r2,zero,81de9c <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  81db68:	e17fec04 	addi	r5,fp,-80
  81db6c:	e1bfed04 	addi	r6,fp,-76
  81db70:	e13ffd17 	ldw	r4,-12(fp)
  81db74:	081c01c0 	call	81c01c <get_home_directory_cluster_for_file>
  81db78:	1004c03a 	cmpne	r2,r2,zero
  81db7c:	1000031e 	bne	r2,zero,81db8c <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
  81db80:	e0bfeb0f 	ldh	r2,-84(fp)
  81db84:	e0bfff15 	stw	r2,-4(fp)
  81db88:	0000c606 	br	81dea4 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  81db8c:	e03fea15 	stw	zero,-88(fp)
  81db90:	00000f06 	br	81dbd0 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
  81db94:	e0bfea17 	ldw	r2,-88(fp)
  81db98:	00c020f4 	movhi	r3,131
  81db9c:	18fb4b04 	addi	r3,r3,-4820
  81dba0:	100491ba 	slli	r2,r2,6
  81dba4:	10c5883a 	add	r2,r2,r3
  81dba8:	10800f04 	addi	r2,r2,60
  81dbac:	10800017 	ldw	r2,0(r2)
  81dbb0:	1004c03a 	cmpne	r2,r2,zero
  81dbb4:	1000031e 	bne	r2,zero,81dbc4 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
  81dbb8:	e0bfea17 	ldw	r2,-88(fp)
  81dbbc:	e0bfeb0d 	sth	r2,-84(fp)
					break;
  81dbc0:	00000606 	br	81dbdc <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  81dbc4:	e0bfea17 	ldw	r2,-88(fp)
  81dbc8:	10800044 	addi	r2,r2,1
  81dbcc:	e0bfea15 	stw	r2,-88(fp)
  81dbd0:	e0bfea17 	ldw	r2,-88(fp)
  81dbd4:	10800510 	cmplti	r2,r2,20
  81dbd8:	103fee1e 	bne	r2,zero,81db94 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  81dbdc:	e0bfeb0f 	ldh	r2,-84(fp)
  81dbe0:	1004803a 	cmplt	r2,r2,zero
  81dbe4:	1000ad1e 	bne	r2,zero,81de9c <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  81dbe8:	e0bfec17 	ldw	r2,-80(fp)
  81dbec:	1009883a 	mov	r4,r2
  81dbf0:	e0bfeb0f 	ldh	r2,-84(fp)
  81dbf4:	100491ba 	slli	r2,r2,6
  81dbf8:	1007883a 	mov	r3,r2
  81dbfc:	008020f4 	movhi	r2,131
  81dc00:	10bb4b04 	addi	r2,r2,-4820
  81dc04:	188d883a 	add	r6,r3,r2
  81dc08:	e17ffd17 	ldw	r5,-12(fp)
  81dc0c:	081c5300 	call	81c530 <find_file_in_directory>
  81dc10:	1005003a 	cmpeq	r2,r2,zero
  81dc14:	10007d1e 	bne	r2,zero,81de0c <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
  81dc18:	e0bffe17 	ldw	r2,-8(fp)
  81dc1c:	1005003a 	cmpeq	r2,r2,zero
  81dc20:	1000031e 	bne	r2,zero,81dc30 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
  81dc24:	00bfffc4 	movi	r2,-1
  81dc28:	e0bfff15 	stw	r2,-4(fp)
  81dc2c:	00009d06 	br	81dea4 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
  81dc30:	e17feb0f 	ldh	r5,-84(fp)
  81dc34:	e0bfeb0f 	ldh	r2,-84(fp)
  81dc38:	00c020f4 	movhi	r3,131
  81dc3c:	18fb4b04 	addi	r3,r3,-4820
  81dc40:	100491ba 	slli	r2,r2,6
  81dc44:	10c5883a 	add	r2,r2,r3
  81dc48:	10800504 	addi	r2,r2,20
  81dc4c:	1080008b 	ldhu	r2,2(r2)
  81dc50:	113fffcc 	andi	r4,r2,65535
  81dc54:	00c020f4 	movhi	r3,131
  81dc58:	18fb4b04 	addi	r3,r3,-4820
  81dc5c:	280491ba 	slli	r2,r5,6
  81dc60:	10c5883a 	add	r2,r2,r3
  81dc64:	10800704 	addi	r2,r2,28
  81dc68:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  81dc6c:	e0bfeb0f 	ldh	r2,-84(fp)
  81dc70:	00c020f4 	movhi	r3,131
  81dc74:	18fb4b04 	addi	r3,r3,-4820
  81dc78:	100491ba 	slli	r2,r2,6
  81dc7c:	10c5883a 	add	r2,r2,r3
  81dc80:	10800804 	addi	r2,r2,32
  81dc84:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  81dc88:	e0bfeb0f 	ldh	r2,-84(fp)
  81dc8c:	00c020f4 	movhi	r3,131
  81dc90:	18fb4b04 	addi	r3,r3,-4820
  81dc94:	100491ba 	slli	r2,r2,6
  81dc98:	10c5883a 	add	r2,r2,r3
  81dc9c:	10800904 	addi	r2,r2,36
  81dca0:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
  81dca4:	e0bfeb0f 	ldh	r2,-84(fp)
  81dca8:	00c020f4 	movhi	r3,131
  81dcac:	18fb4b04 	addi	r3,r3,-4820
  81dcb0:	100491ba 	slli	r2,r2,6
  81dcb4:	10c5883a 	add	r2,r2,r3
  81dcb8:	10c00f04 	addi	r3,r2,60
  81dcbc:	00800044 	movi	r2,1
  81dcc0:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
  81dcc4:	e0bfeb0f 	ldh	r2,-84(fp)
  81dcc8:	00c020f4 	movhi	r3,131
  81dccc:	18fb4b04 	addi	r3,r3,-4820
  81dcd0:	100491ba 	slli	r2,r2,6
  81dcd4:	10c5883a 	add	r2,r2,r3
  81dcd8:	10800e04 	addi	r2,r2,56
  81dcdc:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  81dce0:	e03fea15 	stw	zero,-88(fp)
  81dce4:	00004506 	br	81ddfc <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
  81dce8:	e0ffeb0f 	ldh	r3,-84(fp)
  81dcec:	e0bfea17 	ldw	r2,-88(fp)
  81dcf0:	18803f26 	beq	r3,r2,81ddf0 <alt_up_sd_card_fopen+0x2dc>
  81dcf4:	e0bfea17 	ldw	r2,-88(fp)
  81dcf8:	00c020f4 	movhi	r3,131
  81dcfc:	18fb4b04 	addi	r3,r3,-4820
  81dd00:	100491ba 	slli	r2,r2,6
  81dd04:	10c5883a 	add	r2,r2,r3
  81dd08:	10800f04 	addi	r2,r2,60
  81dd0c:	10800017 	ldw	r2,0(r2)
  81dd10:	10800058 	cmpnei	r2,r2,1
  81dd14:	1000361e 	bne	r2,zero,81ddf0 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  81dd18:	e0bfeb0f 	ldh	r2,-84(fp)
  81dd1c:	00c020f4 	movhi	r3,131
  81dd20:	18fb4b04 	addi	r3,r3,-4820
  81dd24:	100491ba 	slli	r2,r2,6
  81dd28:	10c5883a 	add	r2,r2,r3
  81dd2c:	10800a04 	addi	r2,r2,40
  81dd30:	11000017 	ldw	r4,0(r2)
  81dd34:	e0bfea17 	ldw	r2,-88(fp)
  81dd38:	00c020f4 	movhi	r3,131
  81dd3c:	18fb4b04 	addi	r3,r3,-4820
  81dd40:	100491ba 	slli	r2,r2,6
  81dd44:	10c5883a 	add	r2,r2,r3
  81dd48:	10800a04 	addi	r2,r2,40
  81dd4c:	10800017 	ldw	r2,0(r2)
  81dd50:	2080271e 	bne	r4,r2,81ddf0 <alt_up_sd_card_fopen+0x2dc>
  81dd54:	e0bfeb0f 	ldh	r2,-84(fp)
  81dd58:	00c020f4 	movhi	r3,131
  81dd5c:	18fb4b04 	addi	r3,r3,-4820
  81dd60:	100491ba 	slli	r2,r2,6
  81dd64:	10c5883a 	add	r2,r2,r3
  81dd68:	10800b04 	addi	r2,r2,44
  81dd6c:	11000017 	ldw	r4,0(r2)
  81dd70:	e0bfea17 	ldw	r2,-88(fp)
  81dd74:	00c020f4 	movhi	r3,131
  81dd78:	18fb4b04 	addi	r3,r3,-4820
  81dd7c:	100491ba 	slli	r2,r2,6
  81dd80:	10c5883a 	add	r2,r2,r3
  81dd84:	10800b04 	addi	r2,r2,44
  81dd88:	10800017 	ldw	r2,0(r2)
  81dd8c:	2080181e 	bne	r4,r2,81ddf0 <alt_up_sd_card_fopen+0x2dc>
  81dd90:	e0bfeb0f 	ldh	r2,-84(fp)
  81dd94:	00c020f4 	movhi	r3,131
  81dd98:	18fb4b04 	addi	r3,r3,-4820
  81dd9c:	100491ba 	slli	r2,r2,6
  81dda0:	10c5883a 	add	r2,r2,r3
  81dda4:	10800c04 	addi	r2,r2,48
  81dda8:	1100000b 	ldhu	r4,0(r2)
  81ddac:	e0bfea17 	ldw	r2,-88(fp)
  81ddb0:	00c020f4 	movhi	r3,131
  81ddb4:	18fb4b04 	addi	r3,r3,-4820
  81ddb8:	100491ba 	slli	r2,r2,6
  81ddbc:	10c5883a 	add	r2,r2,r3
  81ddc0:	10800c04 	addi	r2,r2,48
  81ddc4:	1080000b 	ldhu	r2,0(r2)
  81ddc8:	20ffffcc 	andi	r3,r4,65535
  81ddcc:	18e0001c 	xori	r3,r3,32768
  81ddd0:	18e00004 	addi	r3,r3,-32768
  81ddd4:	10bfffcc 	andi	r2,r2,65535
  81ddd8:	10a0001c 	xori	r2,r2,32768
  81dddc:	10a00004 	addi	r2,r2,-32768
  81dde0:	1880031e 	bne	r3,r2,81ddf0 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
  81dde4:	00bfff84 	movi	r2,-2
  81dde8:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  81ddec:	00002b06 	br	81de9c <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  81ddf0:	e0bfea17 	ldw	r2,-88(fp)
  81ddf4:	10800044 	addi	r2,r2,1
  81ddf8:	e0bfea15 	stw	r2,-88(fp)
  81ddfc:	e0bfea17 	ldw	r2,-88(fp)
  81de00:	10800510 	cmplti	r2,r2,20
  81de04:	103fb81e 	bne	r2,zero,81dce8 <alt_up_sd_card_fopen+0x1d4>
  81de08:	00002406 	br	81de9c <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
  81de0c:	e0bffe17 	ldw	r2,-8(fp)
  81de10:	1005003a 	cmpeq	r2,r2,zero
  81de14:	10001f1e 	bne	r2,zero,81de94 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  81de18:	e0bfeb0f 	ldh	r2,-84(fp)
  81de1c:	100491ba 	slli	r2,r2,6
  81de20:	1007883a 	mov	r3,r2
  81de24:	008020f4 	movhi	r2,131
  81de28:	10bb4b04 	addi	r2,r2,-4820
  81de2c:	188b883a 	add	r5,r3,r2
  81de30:	e1bfed04 	addi	r6,fp,-76
  81de34:	e13ffd17 	ldw	r4,-12(fp)
  81de38:	081d0680 	call	81d068 <create_file>
  81de3c:	1005003a 	cmpeq	r2,r2,zero
  81de40:	1000111e 	bne	r2,zero,81de88 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  81de44:	e0bfeb0f 	ldh	r2,-84(fp)
  81de48:	00c020f4 	movhi	r3,131
  81de4c:	18fb4b04 	addi	r3,r3,-4820
  81de50:	100491ba 	slli	r2,r2,6
  81de54:	10c5883a 	add	r2,r2,r3
  81de58:	10c00f04 	addi	r3,r2,60
  81de5c:	00800044 	movi	r2,1
  81de60:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
  81de64:	e0bfeb0f 	ldh	r2,-84(fp)
  81de68:	00c020f4 	movhi	r3,131
  81de6c:	18fb4b04 	addi	r3,r3,-4820
  81de70:	100491ba 	slli	r2,r2,6
  81de74:	10c5883a 	add	r2,r2,r3
  81de78:	10c00e04 	addi	r3,r2,56
  81de7c:	00800044 	movi	r2,1
  81de80:	18800015 	stw	r2,0(r3)
  81de84:	00000506 	br	81de9c <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
  81de88:	00bfffc4 	movi	r2,-1
  81de8c:	e0bfeb0d 	sth	r2,-84(fp)
  81de90:	00000206 	br	81de9c <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
  81de94:	00bfffc4 	movi	r2,-1
  81de98:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
  81de9c:	e0bfeb0f 	ldh	r2,-84(fp)
  81dea0:	e0bfff15 	stw	r2,-4(fp)
  81dea4:	e0bfff17 	ldw	r2,-4(fp)
}
  81dea8:	e037883a 	mov	sp,fp
  81deac:	dfc00117 	ldw	ra,4(sp)
  81deb0:	df000017 	ldw	fp,0(sp)
  81deb4:	dec00204 	addi	sp,sp,8
  81deb8:	f800283a 	ret

0081debc <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  81debc:	defffd04 	addi	sp,sp,-12
  81dec0:	df000215 	stw	fp,8(sp)
  81dec4:	df000204 	addi	fp,sp,8
  81dec8:	e13ffe0d 	sth	r4,-8(fp)
  81decc:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81ded0:	e0bffe0f 	ldh	r2,-8(fp)
  81ded4:	1004803a 	cmplt	r2,r2,zero
  81ded8:	1000181e 	bne	r2,zero,81df3c <alt_up_sd_card_set_attributes+0x80>
  81dedc:	e0bffe0f 	ldh	r2,-8(fp)
  81dee0:	10800508 	cmpgei	r2,r2,20
  81dee4:	1000151e 	bne	r2,zero,81df3c <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
  81dee8:	e0bffe0f 	ldh	r2,-8(fp)
  81deec:	00c020f4 	movhi	r3,131
  81def0:	18fb4b04 	addi	r3,r3,-4820
  81def4:	100491ba 	slli	r2,r2,6
  81def8:	10c5883a 	add	r2,r2,r3
  81defc:	10800f04 	addi	r2,r2,60
  81df00:	10800017 	ldw	r2,0(r2)
  81df04:	1005003a 	cmpeq	r2,r2,zero
  81df08:	10000c1e 	bne	r2,zero,81df3c <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
  81df0c:	e17ffe0f 	ldh	r5,-8(fp)
  81df10:	e0bfff0b 	ldhu	r2,-4(fp)
  81df14:	1007883a 	mov	r3,r2
  81df18:	00bfffc4 	movi	r2,-1
  81df1c:	1884703a 	and	r2,r3,r2
  81df20:	1009883a 	mov	r4,r2
  81df24:	00c020f4 	movhi	r3,131
  81df28:	18fb4b04 	addi	r3,r3,-4820
  81df2c:	280491ba 	slli	r2,r5,6
  81df30:	10c5883a 	add	r2,r2,r3
  81df34:	10800204 	addi	r2,r2,8
  81df38:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
  81df3c:	e037883a 	mov	sp,fp
  81df40:	df000017 	ldw	fp,0(sp)
  81df44:	dec00104 	addi	sp,sp,4
  81df48:	f800283a 	ret

0081df4c <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  81df4c:	defffd04 	addi	sp,sp,-12
  81df50:	df000215 	stw	fp,8(sp)
  81df54:	df000204 	addi	fp,sp,8
  81df58:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  81df5c:	00bfffc4 	movi	r2,-1
  81df60:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81df64:	e0bfff0f 	ldh	r2,-4(fp)
  81df68:	1004803a 	cmplt	r2,r2,zero
  81df6c:	1000151e 	bne	r2,zero,81dfc4 <alt_up_sd_card_get_attributes+0x78>
  81df70:	e0bfff0f 	ldh	r2,-4(fp)
  81df74:	10800508 	cmpgei	r2,r2,20
  81df78:	1000121e 	bne	r2,zero,81dfc4 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
  81df7c:	e0bfff0f 	ldh	r2,-4(fp)
  81df80:	00c020f4 	movhi	r3,131
  81df84:	18fb4b04 	addi	r3,r3,-4820
  81df88:	100491ba 	slli	r2,r2,6
  81df8c:	10c5883a 	add	r2,r2,r3
  81df90:	10800f04 	addi	r2,r2,60
  81df94:	10800017 	ldw	r2,0(r2)
  81df98:	1005003a 	cmpeq	r2,r2,zero
  81df9c:	1000091e 	bne	r2,zero,81dfc4 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
  81dfa0:	e0bfff0f 	ldh	r2,-4(fp)
  81dfa4:	00c020f4 	movhi	r3,131
  81dfa8:	18fb4b04 	addi	r3,r3,-4820
  81dfac:	100491ba 	slli	r2,r2,6
  81dfb0:	10c5883a 	add	r2,r2,r3
  81dfb4:	10800204 	addi	r2,r2,8
  81dfb8:	108000c3 	ldbu	r2,3(r2)
  81dfbc:	10803fcc 	andi	r2,r2,255
  81dfc0:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  81dfc4:	e0bffe0f 	ldh	r2,-8(fp)
}
  81dfc8:	e037883a 	mov	sp,fp
  81dfcc:	df000017 	ldw	fp,0(sp)
  81dfd0:	dec00104 	addi	sp,sp,4
  81dfd4:	f800283a 	ret

0081dfd8 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  81dfd8:	defffa04 	addi	sp,sp,-24
  81dfdc:	dfc00515 	stw	ra,20(sp)
  81dfe0:	df000415 	stw	fp,16(sp)
  81dfe4:	df000404 	addi	fp,sp,16
  81dfe8:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
  81dfec:	00bfffc4 	movi	r2,-1
  81dff0:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81dff4:	e0bffe0f 	ldh	r2,-8(fp)
  81dff8:	1004803a 	cmplt	r2,r2,zero
  81dffc:	1000d31e 	bne	r2,zero,81e34c <alt_up_sd_card_read+0x374>
  81e000:	e0bffe0f 	ldh	r2,-8(fp)
  81e004:	10800508 	cmpgei	r2,r2,20
  81e008:	1000d01e 	bne	r2,zero,81e34c <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
  81e00c:	e0bffe0f 	ldh	r2,-8(fp)
  81e010:	00c020f4 	movhi	r3,131
  81e014:	18fb4b04 	addi	r3,r3,-4820
  81e018:	100491ba 	slli	r2,r2,6
  81e01c:	10c5883a 	add	r2,r2,r3
  81e020:	10800f04 	addi	r2,r2,60
  81e024:	10800017 	ldw	r2,0(r2)
  81e028:	1005003a 	cmpeq	r2,r2,zero
  81e02c:	1000c71e 	bne	r2,zero,81e34c <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
  81e030:	e0bffe0f 	ldh	r2,-8(fp)
  81e034:	00c020f4 	movhi	r3,131
  81e038:	18fb4b04 	addi	r3,r3,-4820
  81e03c:	100491ba 	slli	r2,r2,6
  81e040:	10c5883a 	add	r2,r2,r3
  81e044:	10800904 	addi	r2,r2,36
  81e048:	11000017 	ldw	r4,0(r2)
  81e04c:	e0bffe0f 	ldh	r2,-8(fp)
  81e050:	00c020f4 	movhi	r3,131
  81e054:	18fb4b04 	addi	r3,r3,-4820
  81e058:	100491ba 	slli	r2,r2,6
  81e05c:	10c5883a 	add	r2,r2,r3
  81e060:	10800604 	addi	r2,r2,24
  81e064:	10800017 	ldw	r2,0(r2)
  81e068:	2080b82e 	bgeu	r4,r2,81e34c <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  81e06c:	008020f4 	movhi	r2,131
  81e070:	10bb3604 	addi	r2,r2,-4904
  81e074:	11001417 	ldw	r4,80(r2)
  81e078:	e0bffe0f 	ldh	r2,-8(fp)
  81e07c:	00c020f4 	movhi	r3,131
  81e080:	18fb4b04 	addi	r3,r3,-4820
  81e084:	100491ba 	slli	r2,r2,6
  81e088:	10c5883a 	add	r2,r2,r3
  81e08c:	10800704 	addi	r2,r2,28
  81e090:	10800017 	ldw	r2,0(r2)
  81e094:	10ffff84 	addi	r3,r2,-2
  81e098:	008020f4 	movhi	r2,131
  81e09c:	10bb3604 	addi	r2,r2,-4904
  81e0a0:	10800383 	ldbu	r2,14(r2)
  81e0a4:	10803fcc 	andi	r2,r2,255
  81e0a8:	1885383a 	mul	r2,r3,r2
  81e0ac:	2089883a 	add	r4,r4,r2
  81e0b0:	e0bffe0f 	ldh	r2,-8(fp)
  81e0b4:	00c020f4 	movhi	r3,131
  81e0b8:	18fb4b04 	addi	r3,r3,-4820
  81e0bc:	100491ba 	slli	r2,r2,6
  81e0c0:	10c5883a 	add	r2,r2,r3
  81e0c4:	10800804 	addi	r2,r2,32
  81e0c8:	10800017 	ldw	r2,0(r2)
  81e0cc:	2085883a 	add	r2,r4,r2
  81e0d0:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
  81e0d4:	e0bffe0f 	ldh	r2,-8(fp)
  81e0d8:	00c020f4 	movhi	r3,131
  81e0dc:	18fb4b04 	addi	r3,r3,-4820
  81e0e0:	100491ba 	slli	r2,r2,6
  81e0e4:	10c5883a 	add	r2,r2,r3
  81e0e8:	10800904 	addi	r2,r2,36
  81e0ec:	10800017 	ldw	r2,0(r2)
  81e0f0:	1005003a 	cmpeq	r2,r2,zero
  81e0f4:	10006a1e 	bne	r2,zero,81e2a0 <alt_up_sd_card_read+0x2c8>
  81e0f8:	e0bffe0f 	ldh	r2,-8(fp)
  81e0fc:	00c020f4 	movhi	r3,131
  81e100:	18fb4b04 	addi	r3,r3,-4820
  81e104:	100491ba 	slli	r2,r2,6
  81e108:	10c5883a 	add	r2,r2,r3
  81e10c:	10800904 	addi	r2,r2,36
  81e110:	10800017 	ldw	r2,0(r2)
  81e114:	10807fcc 	andi	r2,r2,511
  81e118:	1004c03a 	cmpne	r2,r2,zero
  81e11c:	1000601e 	bne	r2,zero,81e2a0 <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  81e120:	e0bffe0f 	ldh	r2,-8(fp)
  81e124:	00c020f4 	movhi	r3,131
  81e128:	18fb4b04 	addi	r3,r3,-4820
  81e12c:	100491ba 	slli	r2,r2,6
  81e130:	10c5883a 	add	r2,r2,r3
  81e134:	10800804 	addi	r2,r2,32
  81e138:	10c00017 	ldw	r3,0(r2)
  81e13c:	008020f4 	movhi	r2,131
  81e140:	10bb3604 	addi	r2,r2,-4904
  81e144:	10800383 	ldbu	r2,14(r2)
  81e148:	10803fcc 	andi	r2,r2,255
  81e14c:	10bfffc4 	addi	r2,r2,-1
  81e150:	1880411e 	bne	r3,r2,81e258 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  81e154:	e0bffe0f 	ldh	r2,-8(fp)
  81e158:	00c020f4 	movhi	r3,131
  81e15c:	18fb4b04 	addi	r3,r3,-4820
  81e160:	100491ba 	slli	r2,r2,6
  81e164:	10c5883a 	add	r2,r2,r3
  81e168:	10800704 	addi	r2,r2,28
  81e16c:	11000017 	ldw	r4,0(r2)
  81e170:	e17ffd84 	addi	r5,fp,-10
  81e174:	081a93c0 	call	81a93c <get_cluster_flag>
  81e178:	1005003a 	cmpeq	r2,r2,zero
  81e17c:	1000331e 	bne	r2,zero,81e24c <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  81e180:	e0bffd8b 	ldhu	r2,-10(fp)
  81e184:	10bfffcc 	andi	r2,r2,65535
  81e188:	10fffe0c 	andi	r3,r2,65528
  81e18c:	00bffe14 	movui	r2,65528
  81e190:	1880031e 	bne	r3,r2,81e1a0 <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
  81e194:	00bfffc4 	movi	r2,-1
  81e198:	e0bfff15 	stw	r2,-4(fp)
  81e19c:	00006d06 	br	81e354 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index
  81e1a0:	e13ffe0f 	ldh	r4,-8(fp)
  81e1a4:	e0bffd8b 	ldhu	r2,-10(fp)
  81e1a8:	117fffcc 	andi	r5,r2,65535
  81e1ac:	00c020f4 	movhi	r3,131
  81e1b0:	18fb4b04 	addi	r3,r3,-4820
  81e1b4:	200491ba 	slli	r2,r4,6
  81e1b8:	10c5883a 	add	r2,r2,r3
  81e1bc:	10800704 	addi	r2,r2,28
  81e1c0:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  81e1c4:	e0bffe0f 	ldh	r2,-8(fp)
  81e1c8:	00c020f4 	movhi	r3,131
  81e1cc:	18fb4b04 	addi	r3,r3,-4820
  81e1d0:	100491ba 	slli	r2,r2,6
  81e1d4:	10c5883a 	add	r2,r2,r3
  81e1d8:	10800804 	addi	r2,r2,32
  81e1dc:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  81e1e0:	008020f4 	movhi	r2,131
  81e1e4:	10bb3604 	addi	r2,r2,-4904
  81e1e8:	11001417 	ldw	r4,80(r2)
  81e1ec:	e0bffe0f 	ldh	r2,-8(fp)
  81e1f0:	00c020f4 	movhi	r3,131
  81e1f4:	18fb4b04 	addi	r3,r3,-4820
  81e1f8:	100491ba 	slli	r2,r2,6
  81e1fc:	10c5883a 	add	r2,r2,r3
  81e200:	10800704 	addi	r2,r2,28
  81e204:	10800017 	ldw	r2,0(r2)
  81e208:	10ffff84 	addi	r3,r2,-2
  81e20c:	008020f4 	movhi	r2,131
  81e210:	10bb3604 	addi	r2,r2,-4904
  81e214:	10800383 	ldbu	r2,14(r2)
  81e218:	10803fcc 	andi	r2,r2,255
  81e21c:	1885383a 	mul	r2,r3,r2
  81e220:	2089883a 	add	r4,r4,r2
  81e224:	e0bffe0f 	ldh	r2,-8(fp)
  81e228:	00c020f4 	movhi	r3,131
  81e22c:	18fb4b04 	addi	r3,r3,-4820
  81e230:	100491ba 	slli	r2,r2,6
  81e234:	10c5883a 	add	r2,r2,r3
  81e238:	10800804 	addi	r2,r2,32
  81e23c:	10800017 	ldw	r2,0(r2)
  81e240:	2085883a 	add	r2,r4,r2
  81e244:	e0bffc15 	stw	r2,-16(fp)
  81e248:	00001506 	br	81e2a0 <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
  81e24c:	00bfff84 	movi	r2,-2
  81e250:	e0bfff15 	stw	r2,-4(fp)
  81e254:	00003f06 	br	81e354 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  81e258:	e17ffe0f 	ldh	r5,-8(fp)
  81e25c:	e0bffe0f 	ldh	r2,-8(fp)
  81e260:	00c020f4 	movhi	r3,131
  81e264:	18fb4b04 	addi	r3,r3,-4820
  81e268:	100491ba 	slli	r2,r2,6
  81e26c:	10c5883a 	add	r2,r2,r3
  81e270:	10800804 	addi	r2,r2,32
  81e274:	10800017 	ldw	r2,0(r2)
  81e278:	11000044 	addi	r4,r2,1
  81e27c:	00c020f4 	movhi	r3,131
  81e280:	18fb4b04 	addi	r3,r3,-4820
  81e284:	280491ba 	slli	r2,r5,6
  81e288:	10c5883a 	add	r2,r2,r3
  81e28c:	10800804 	addi	r2,r2,32
  81e290:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  81e294:	e0bffc17 	ldw	r2,-16(fp)
  81e298:	10800044 	addi	r2,r2,1
  81e29c:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  81e2a0:	d0e77217 	ldw	r3,-25144(gp)
  81e2a4:	e0bffc17 	ldw	r2,-16(fp)
  81e2a8:	1885883a 	add	r2,r3,r2
  81e2ac:	1007883a 	mov	r3,r2
  81e2b0:	d0a77617 	ldw	r2,-25128(gp)
  81e2b4:	18800826 	beq	r3,r2,81e2d8 <alt_up_sd_card_read+0x300>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  81e2b8:	d1677217 	ldw	r5,-25144(gp)
  81e2bc:	e13ffc17 	ldw	r4,-16(fp)
  81e2c0:	081a8400 	call	81a840 <Read_Sector_Data>
  81e2c4:	1004c03a 	cmpne	r2,r2,zero
  81e2c8:	1000031e 	bne	r2,zero,81e2d8 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
  81e2cc:	00bfff84 	movi	r2,-2
  81e2d0:	e0bfff15 	stw	r2,-4(fp)
  81e2d4:	00001f06 	br	81e354 <alt_up_sd_card_read+0x37c>
					}
				}

				ch
  81e2d8:	e0bffe0f 	ldh	r2,-8(fp)
  81e2dc:	00c020f4 	movhi	r3,131
  81e2e0:	18fb4b04 	addi	r3,r3,-4820
  81e2e4:	100491ba 	slli	r2,r2,6
  81e2e8:	10c5883a 	add	r2,r2,r3
  81e2ec:	10800904 	addi	r2,r2,36
  81e2f0:	10800017 	ldw	r2,0(r2)
  81e2f4:	10807fcc 	andi	r2,r2,511
  81e2f8:	1007883a 	mov	r3,r2
  81e2fc:	d0a77117 	ldw	r2,-25148(gp)
  81e300:	1885883a 	add	r2,r3,r2
  81e304:	10800023 	ldbuio	r2,0(r2)
  81e308:	10803fcc 	andi	r2,r2,255
  81e30c:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  81e310:	e17ffe0f 	ldh	r5,-8(fp)
  81e314:	e0bffe0f 	ldh	r2,-8(fp)
  81e318:	00c020f4 	movhi	r3,131
  81e31c:	18fb4b04 	addi	r3,r3,-4820
  81e320:	100491ba 	slli	r2,r2,6
  81e324:	10c5883a 	add	r2,r2,r3
  81e328:	10800904 	addi	r2,r2,36
  81e32c:	10800017 	ldw	r2,0(r2)
  81e330:	11000044 	addi	r4,r2,1
  81e334:	00c020f4 	movhi	r3,131
  81e338:	18fb4b04 	addi	r3,r3,-4820
  81e33c:	280491ba 	slli	r2,r5,6
  81e340:	10c5883a 	add	r2,r2,r3
  81e344:	10800904 	addi	r2,r2,36
  81e348:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
  81e34c:	e0bffd0f 	ldh	r2,-12(fp)
  81e350:	e0bfff15 	stw	r2,-4(fp)
  81e354:	e0bfff17 	ldw	r2,-4(fp)
}
  81e358:	e037883a 	mov	sp,fp
  81e35c:	dfc00117 	ldw	ra,4(sp)
  81e360:	df000017 	ldw	fp,0(sp)
  81e364:	dec00204 	addi	sp,sp,8
  81e368:	f800283a 	ret

0081e36c <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  81e36c:	defff504 	addi	sp,sp,-44
  81e370:	dfc00a15 	stw	ra,40(sp)
  81e374:	df000915 	stw	fp,36(sp)
  81e378:	dc000815 	stw	r16,32(sp)
  81e37c:	df000804 	addi	fp,sp,32
  81e380:	e13ffd0d 	sth	r4,-12(fp)
  81e384:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
  81e388:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81e38c:	e0bffd0f 	ldh	r2,-12(fp)
  81e390:	1004803a 	cmplt	r2,r2,zero
  81e394:	1001751e 	bne	r2,zero,81e96c <alt_up_sd_card_write+0x600>
  81e398:	e0bffd0f 	ldh	r2,-12(fp)
  81e39c:	10800508 	cmpgei	r2,r2,20
  81e3a0:	1001721e 	bne	r2,zero,81e96c <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
  81e3a4:	e0bffd0f 	ldh	r2,-12(fp)
  81e3a8:	00c020f4 	movhi	r3,131
  81e3ac:	18fb4b04 	addi	r3,r3,-4820
  81e3b0:	100491ba 	slli	r2,r2,6
  81e3b4:	10c5883a 	add	r2,r2,r3
  81e3b8:	10800f04 	addi	r2,r2,60
  81e3bc:	10800017 	ldw	r2,0(r2)
  81e3c0:	1005003a 	cmpeq	r2,r2,zero
  81e3c4:	1001691e 	bne	r2,zero,81e96c <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  81e3c8:	008020f4 	movhi	r2,131
  81e3cc:	10bb3604 	addi	r2,r2,-4904
  81e3d0:	11001417 	ldw	r4,80(r2)
  81e3d4:	e0bffd0f 	ldh	r2,-12(fp)
  81e3d8:	00c020f4 	movhi	r3,131
  81e3dc:	18fb4b04 	addi	r3,r3,-4820
  81e3e0:	100491ba 	slli	r2,r2,6
  81e3e4:	10c5883a 	add	r2,r2,r3
  81e3e8:	10800704 	addi	r2,r2,28
  81e3ec:	10800017 	ldw	r2,0(r2)
  81e3f0:	10ffff84 	addi	r3,r2,-2
  81e3f4:	008020f4 	movhi	r2,131
  81e3f8:	10bb3604 	addi	r2,r2,-4904
  81e3fc:	10800383 	ldbu	r2,14(r2)
  81e400:	10803fcc 	andi	r2,r2,255
  81e404:	1885383a 	mul	r2,r3,r2
  81e408:	2089883a 	add	r4,r4,r2
  81e40c:	e0bffd0f 	ldh	r2,-12(fp)
  81e410:	00c020f4 	movhi	r3,131
  81e414:	18fb4b04 	addi	r3,r3,-4820
  81e418:	100491ba 	slli	r2,r2,6
  81e41c:	10c5883a 	add	r2,r2,r3
  81e420:	10800804 	addi	r2,r2,32
  81e424:	10800017 	ldw	r2,0(r2)
  81e428:	2085883a 	add	r2,r4,r2
  81e42c:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  81e430:	e0bffd0f 	ldh	r2,-12(fp)
  81e434:	00c020f4 	movhi	r3,131
  81e438:	18fb4b04 	addi	r3,r3,-4820
  81e43c:	100491ba 	slli	r2,r2,6
  81e440:	10c5883a 	add	r2,r2,r3
  81e444:	10800904 	addi	r2,r2,36
  81e448:	11000017 	ldw	r4,0(r2)
  81e44c:	008020f4 	movhi	r2,131
  81e450:	10bb3604 	addi	r2,r2,-4904
  81e454:	1080030b 	ldhu	r2,12(r2)
  81e458:	117fffcc 	andi	r5,r2,65535
  81e45c:	080b2d80 	call	80b2d8 <__umodsi3>
  81e460:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
  81e464:	e0bffd0f 	ldh	r2,-12(fp)
  81e468:	00c020f4 	movhi	r3,131
  81e46c:	18fb4b04 	addi	r3,r3,-4820
  81e470:	100491ba 	slli	r2,r2,6
  81e474:	10c5883a 	add	r2,r2,r3
  81e478:	10800904 	addi	r2,r2,36
  81e47c:	11000017 	ldw	r4,0(r2)
  81e480:	e0bffd0f 	ldh	r2,-12(fp)
  81e484:	00c020f4 	movhi	r3,131
  81e488:	18fb4b04 	addi	r3,r3,-4820
  81e48c:	100491ba 	slli	r2,r2,6
  81e490:	10c5883a 	add	r2,r2,r3
  81e494:	10800604 	addi	r2,r2,24
  81e498:	10800017 	ldw	r2,0(r2)
  81e49c:	2080682e 	bgeu	r4,r2,81e640 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  81e4a0:	e0bffd0f 	ldh	r2,-12(fp)
  81e4a4:	00c020f4 	movhi	r3,131
  81e4a8:	18fb4b04 	addi	r3,r3,-4820
  81e4ac:	100491ba 	slli	r2,r2,6
  81e4b0:	10c5883a 	add	r2,r2,r3
  81e4b4:	10800904 	addi	r2,r2,36
  81e4b8:	10800017 	ldw	r2,0(r2)
  81e4bc:	1005003a 	cmpeq	r2,r2,zero
  81e4c0:	1000de1e 	bne	r2,zero,81e83c <alt_up_sd_card_write+0x4d0>
  81e4c4:	e0bff80f 	ldh	r2,-32(fp)
  81e4c8:	1004c03a 	cmpne	r2,r2,zero
  81e4cc:	1000db1e 	bne	r2,zero,81e83c <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  81e4d0:	e0bffd0f 	ldh	r2,-12(fp)
  81e4d4:	00c020f4 	movhi	r3,131
  81e4d8:	18fb4b04 	addi	r3,r3,-4820
  81e4dc:	100491ba 	slli	r2,r2,6
  81e4e0:	10c5883a 	add	r2,r2,r3
  81e4e4:	10800804 	addi	r2,r2,32
  81e4e8:	10c00017 	ldw	r3,0(r2)
  81e4ec:	008020f4 	movhi	r2,131
  81e4f0:	10bb3604 	addi	r2,r2,-4904
  81e4f4:	10800383 	ldbu	r2,14(r2)
  81e4f8:	10803fcc 	andi	r2,r2,255
  81e4fc:	10bfffc4 	addi	r2,r2,-1
  81e500:	18803c1e 	bne	r3,r2,81e5f4 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  81e504:	e0bffd0f 	ldh	r2,-12(fp)
  81e508:	00c020f4 	movhi	r3,131
  81e50c:	18fb4b04 	addi	r3,r3,-4820
  81e510:	100491ba 	slli	r2,r2,6
  81e514:	10c5883a 	add	r2,r2,r3
  81e518:	10800704 	addi	r2,r2,28
  81e51c:	11000017 	ldw	r4,0(r2)
  81e520:	e17ffb04 	addi	r5,fp,-20
  81e524:	081a93c0 	call	81a93c <get_cluster_flag>
  81e528:	1005003a 	cmpeq	r2,r2,zero
  81e52c:	10002f1e 	bne	r2,zero,81e5ec <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  81e530:	e0bffb0b 	ldhu	r2,-20(fp)
  81e534:	10ffffcc 	andi	r3,r2,65535
  81e538:	00bffdd4 	movui	r2,65527
  81e53c:	10c0bf36 	bltu	r2,r3,81e83c <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
  81e540:	e13ffd0f 	ldh	r4,-12(fp)
  81e544:	e0bffb0b 	ldhu	r2,-20(fp)
  81e548:	117fffcc 	andi	r5,r2,65535
  81e54c:	00c020f4 	movhi	r3,131
  81e550:	18fb4b04 	addi	r3,r3,-4820
  81e554:	200491ba 	slli	r2,r4,6
  81e558:	10c5883a 	add	r2,r2,r3
  81e55c:	10800704 	addi	r2,r2,28
  81e560:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  81e564:	e0bffd0f 	ldh	r2,-12(fp)
  81e568:	00c020f4 	movhi	r3,131
  81e56c:	18fb4b04 	addi	r3,r3,-4820
  81e570:	100491ba 	slli	r2,r2,6
  81e574:	10c5883a 	add	r2,r2,r3
  81e578:	10800804 	addi	r2,r2,32
  81e57c:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  81e580:	008020f4 	movhi	r2,131
  81e584:	10bb3604 	addi	r2,r2,-4904
  81e588:	11001417 	ldw	r4,80(r2)
  81e58c:	e0bffd0f 	ldh	r2,-12(fp)
  81e590:	00c020f4 	movhi	r3,131
  81e594:	18fb4b04 	addi	r3,r3,-4820
  81e598:	100491ba 	slli	r2,r2,6
  81e59c:	10c5883a 	add	r2,r2,r3
  81e5a0:	10800704 	addi	r2,r2,28
  81e5a4:	10800017 	ldw	r2,0(r2)
  81e5a8:	10ffff84 	addi	r3,r2,-2
  81e5ac:	008020f4 	movhi	r2,131
  81e5b0:	10bb3604 	addi	r2,r2,-4904
  81e5b4:	10800383 	ldbu	r2,14(r2)
  81e5b8:	10803fcc 	andi	r2,r2,255
  81e5bc:	1885383a 	mul	r2,r3,r2
  81e5c0:	2089883a 	add	r4,r4,r2
  81e5c4:	e0bffd0f 	ldh	r2,-12(fp)
  81e5c8:	00c020f4 	movhi	r3,131
  81e5cc:	18fb4b04 	addi	r3,r3,-4820
  81e5d0:	100491ba 	slli	r2,r2,6
  81e5d4:	10c5883a 	add	r2,r2,r3
  81e5d8:	10800804 	addi	r2,r2,32
  81e5dc:	10800017 	ldw	r2,0(r2)
  81e5e0:	2085883a 	add	r2,r4,r2
  81e5e4:	e0bff915 	stw	r2,-28(fp)
  81e5e8:	00009406 	br	81e83c <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
  81e5ec:	e03fff15 	stw	zero,-4(fp)
  81e5f0:	0000e006 	br	81e974 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  81e5f4:	e17ffd0f 	ldh	r5,-12(fp)
  81e5f8:	e0bffd0f 	ldh	r2,-12(fp)
  81e5fc:	00c020f4 	movhi	r3,131
  81e600:	18fb4b04 	addi	r3,r3,-4820
  81e604:	100491ba 	slli	r2,r2,6
  81e608:	10c5883a 	add	r2,r2,r3
  81e60c:	10800804 	addi	r2,r2,32
  81e610:	10800017 	ldw	r2,0(r2)
  81e614:	11000044 	addi	r4,r2,1
  81e618:	00c020f4 	movhi	r3,131
  81e61c:	18fb4b04 	addi	r3,r3,-4820
  81e620:	280491ba 	slli	r2,r5,6
  81e624:	10c5883a 	add	r2,r2,r3
  81e628:	10800804 	addi	r2,r2,32
  81e62c:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  81e630:	e0bff917 	ldw	r2,-28(fp)
  81e634:	10800044 	addi	r2,r2,1
  81e638:	e0bff915 	stw	r2,-28(fp)
  81e63c:	00007f06 	br	81e83c <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  81e640:	e0bffd0f 	ldh	r2,-12(fp)
  81e644:	00c020f4 	movhi	r3,131
  81e648:	18fb4b04 	addi	r3,r3,-4820
  81e64c:	100491ba 	slli	r2,r2,6
  81e650:	10c5883a 	add	r2,r2,r3
  81e654:	10800904 	addi	r2,r2,36
  81e658:	10800017 	ldw	r2,0(r2)
  81e65c:	1005003a 	cmpeq	r2,r2,zero
  81e660:	1000761e 	bne	r2,zero,81e83c <alt_up_sd_card_write+0x4d0>
  81e664:	e0bff80f 	ldh	r2,-32(fp)
  81e668:	1004c03a 	cmpne	r2,r2,zero
  81e66c:	1000731e 	bne	r2,zero,81e83c <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  81e670:	e0bffd0f 	ldh	r2,-12(fp)
  81e674:	00c020f4 	movhi	r3,131
  81e678:	18fb4b04 	addi	r3,r3,-4820
  81e67c:	100491ba 	slli	r2,r2,6
  81e680:	10c5883a 	add	r2,r2,r3
  81e684:	10800804 	addi	r2,r2,32
  81e688:	10c00017 	ldw	r3,0(r2)
  81e68c:	008020f4 	movhi	r2,131
  81e690:	10bb3604 	addi	r2,r2,-4904
  81e694:	10800383 	ldbu	r2,14(r2)
  81e698:	10803fcc 	andi	r2,r2,255
  81e69c:	10bfffc4 	addi	r2,r2,-1
  81e6a0:	1880381e 	bne	r3,r2,81e784 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
  81e6a4:	e13ffc04 	addi	r4,fp,-16
  81e6a8:	081c9940 	call	81c994 <find_first_empty_cluster>
  81e6ac:	1005003a 	cmpeq	r2,r2,zero
  81e6b0:	1000321e 	bne	r2,zero,81e77c <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  81e6b4:	e0bffd0f 	ldh	r2,-12(fp)
  81e6b8:	00c020f4 	movhi	r3,131
  81e6bc:	18fb4b04 	addi	r3,r3,-4820
  81e6c0:	100491ba 	slli	r2,r2,6
  81e6c4:	10c5883a 	add	r2,r2,r3
  81e6c8:	10800704 	addi	r2,r2,28
  81e6cc:	11000017 	ldw	r4,0(r2)
  81e6d0:	e0bffc17 	ldw	r2,-16(fp)
  81e6d4:	117fffcc 	andi	r5,r2,65535
  81e6d8:	2960001c 	xori	r5,r5,32768
  81e6dc:	29600004 	addi	r5,r5,-32768
  81e6e0:	01800044 	movi	r6,1
  81e6e4:	081a9f40 	call	81a9f4 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
  81e6e8:	e13ffc17 	ldw	r4,-16(fp)
  81e6ec:	017fffc4 	movi	r5,-1
  81e6f0:	01800044 	movi	r6,1
  81e6f4:	081a9f40 	call	81a9f4 <mark_cluster>
							mark_cluster(
  81e6f8:	e0bffd0f 	ldh	r2,-12(fp)
  81e6fc:	00c020f4 	movhi	r3,131
  81e700:	18fb4b04 	addi	r3,r3,-4820
  81e704:	100491ba 	slli	r2,r2,6
  81e708:	10c5883a 	add	r2,r2,r3
  81e70c:	10800704 	addi	r2,r2,28
  81e710:	11000017 	ldw	r4,0(r2)
  81e714:	e0bffc17 	ldw	r2,-16(fp)
  81e718:	117fffcc 	andi	r5,r2,65535
  81e71c:	2960001c 	xori	r5,r5,32768
  81e720:	29600004 	addi	r5,r5,-32768
  81e724:	000d883a 	mov	r6,zero
  81e728:	081a9f40 	call	81a9f4 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
  81e72c:	e13ffc17 	ldw	r4,-16(fp)
  81e730:	017fffc4 	movi	r5,-1
  81e734:	000d883a 	mov	r6,zero
  81e738:	081a9f40 	call	81a9f4 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  81e73c:	e0bffd0f 	ldh	r2,-12(fp)
  81e740:	e13ffc17 	ldw	r4,-16(fp)
  81e744:	00c020f4 	movhi	r3,131
  81e748:	18fb4b04 	addi	r3,r3,-4820
  81e74c:	100491ba 	slli	r2,r2,6
  81e750:	10c5883a 	add	r2,r2,r3
  81e754:	10800704 	addi	r2,r2,28
  81e758:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  81e75c:	e0bffd0f 	ldh	r2,-12(fp)
  81e760:	00c020f4 	movhi	r3,131
  81e764:	18fb4b04 	addi	r3,r3,-4820
  81e768:	100491ba 	slli	r2,r2,6
  81e76c:	10c5883a 	add	r2,r2,r3
  81e770:	10800804 	addi	r2,r2,32
  81e774:	10000015 	stw	zero,0(r2)
  81e778:	00001606 	br	81e7d4 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
  81e77c:	e03fff15 	stw	zero,-4(fp)
  81e780:	00007c06 	br	81e974 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  81e784:	e43ffd0f 	ldh	r16,-12(fp)
  81e788:	e0bffd0f 	ldh	r2,-12(fp)
  81e78c:	00c020f4 	movhi	r3,131
  81e790:	18fb4b04 	addi	r3,r3,-4820
  81e794:	100491ba 	slli	r2,r2,6
  81e798:	10c5883a 	add	r2,r2,r3
  81e79c:	10800904 	addi	r2,r2,36
  81e7a0:	11000017 	ldw	r4,0(r2)
  81e7a4:	008020f4 	movhi	r2,131
  81e7a8:	10bb3604 	addi	r2,r2,-4904
  81e7ac:	1080030b 	ldhu	r2,12(r2)
  81e7b0:	117fffcc 	andi	r5,r2,65535
  81e7b4:	080b2d00 	call	80b2d0 <__udivsi3>
  81e7b8:	1009883a 	mov	r4,r2
  81e7bc:	00c020f4 	movhi	r3,131
  81e7c0:	18fb4b04 	addi	r3,r3,-4820
  81e7c4:	800491ba 	slli	r2,r16,6
  81e7c8:	10c5883a 	add	r2,r2,r3
  81e7cc:	10800804 	addi	r2,r2,32
  81e7d0:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  81e7d4:	008020f4 	movhi	r2,131
  81e7d8:	10bb3604 	addi	r2,r2,-4904
  81e7dc:	11001417 	ldw	r4,80(r2)
  81e7e0:	e0bffd0f 	ldh	r2,-12(fp)
  81e7e4:	00c020f4 	movhi	r3,131
  81e7e8:	18fb4b04 	addi	r3,r3,-4820
  81e7ec:	100491ba 	slli	r2,r2,6
  81e7f0:	10c5883a 	add	r2,r2,r3
  81e7f4:	10800704 	addi	r2,r2,28
  81e7f8:	10800017 	ldw	r2,0(r2)
  81e7fc:	10ffff84 	addi	r3,r2,-2
  81e800:	008020f4 	movhi	r2,131
  81e804:	10bb3604 	addi	r2,r2,-4904
  81e808:	10800383 	ldbu	r2,14(r2)
  81e80c:	10803fcc 	andi	r2,r2,255
  81e810:	1885383a 	mul	r2,r3,r2
  81e814:	2089883a 	add	r4,r4,r2
  81e818:	e0bffd0f 	ldh	r2,-12(fp)
  81e81c:	00c020f4 	movhi	r3,131
  81e820:	18fb4b04 	addi	r3,r3,-4820
  81e824:	100491ba 	slli	r2,r2,6
  81e828:	10c5883a 	add	r2,r2,r3
  81e82c:	10800804 	addi	r2,r2,32
  81e830:	10800017 	ldw	r2,0(r2)
  81e834:	2085883a 	add	r2,r4,r2
  81e838:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  81e83c:	d0e77217 	ldw	r3,-25144(gp)
  81e840:	e0bff917 	ldw	r2,-28(fp)
  81e844:	1885883a 	add	r2,r3,r2
  81e848:	1007883a 	mov	r3,r2
  81e84c:	d0a77617 	ldw	r2,-25128(gp)
  81e850:	18800726 	beq	r3,r2,81e870 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  81e854:	d1677217 	ldw	r5,-25144(gp)
  81e858:	e13ff917 	ldw	r4,-28(fp)
  81e85c:	081a8400 	call	81a840 <Read_Sector_Data>
  81e860:	1004c03a 	cmpne	r2,r2,zero
  81e864:	1000021e 	bne	r2,zero,81e870 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
  81e868:	e03fff15 	stw	zero,-4(fp)
  81e86c:	00004106 	br	81e974 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  81e870:	e0bff80f 	ldh	r2,-32(fp)
  81e874:	1007883a 	mov	r3,r2
  81e878:	d0a77117 	ldw	r2,-25148(gp)
  81e87c:	1885883a 	add	r2,r3,r2
  81e880:	e0fffe07 	ldb	r3,-8(fp)
  81e884:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
  81e888:	e17ffd0f 	ldh	r5,-12(fp)
  81e88c:	e0bffd0f 	ldh	r2,-12(fp)
  81e890:	00c020f4 	movhi	r3,131
  81e894:	18fb4b04 	addi	r3,r3,-4820
  81e898:	100491ba 	slli	r2,r2,6
  81e89c:	10c5883a 	add	r2,r2,r3
  81e8a0:	10800904 	addi	r2,r2,36
  81e8a4:	10800017 	ldw	r2,0(r2)
  81e8a8:	11000044 	addi	r4,r2,1
  81e8ac:	00c020f4 	movhi	r3,131
  81e8b0:	18fb4b04 	addi	r3,r3,-4820
  81e8b4:	280491ba 	slli	r2,r5,6
  81e8b8:	10c5883a 	add	r2,r2,r3
  81e8bc:	10800904 	addi	r2,r2,36
  81e8c0:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  81e8c4:	e0bffd0f 	ldh	r2,-12(fp)
  81e8c8:	00c020f4 	movhi	r3,131
  81e8cc:	18fb4b04 	addi	r3,r3,-4820
  81e8d0:	100491ba 	slli	r2,r2,6
  81e8d4:	10c5883a 	add	r2,r2,r3
  81e8d8:	10800904 	addi	r2,r2,36
  81e8dc:	11000017 	ldw	r4,0(r2)
  81e8e0:	e0bffd0f 	ldh	r2,-12(fp)
  81e8e4:	00c020f4 	movhi	r3,131
  81e8e8:	18fb4b04 	addi	r3,r3,-4820
  81e8ec:	100491ba 	slli	r2,r2,6
  81e8f0:	10c5883a 	add	r2,r2,r3
  81e8f4:	10800604 	addi	r2,r2,24
  81e8f8:	10800017 	ldw	r2,0(r2)
  81e8fc:	20801736 	bltu	r4,r2,81e95c <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  81e900:	e17ffd0f 	ldh	r5,-12(fp)
  81e904:	e0bffd0f 	ldh	r2,-12(fp)
  81e908:	00c020f4 	movhi	r3,131
  81e90c:	18fb4b04 	addi	r3,r3,-4820
  81e910:	100491ba 	slli	r2,r2,6
  81e914:	10c5883a 	add	r2,r2,r3
  81e918:	10800604 	addi	r2,r2,24
  81e91c:	10800017 	ldw	r2,0(r2)
  81e920:	11000044 	addi	r4,r2,1
  81e924:	00c020f4 	movhi	r3,131
  81e928:	18fb4b04 	addi	r3,r3,-4820
  81e92c:	280491ba 	slli	r2,r5,6
  81e930:	10c5883a 	add	r2,r2,r3
  81e934:	10800604 	addi	r2,r2,24
  81e938:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  81e93c:	e0bffd0f 	ldh	r2,-12(fp)
  81e940:	00c020f4 	movhi	r3,131
  81e944:	18fb4b04 	addi	r3,r3,-4820
  81e948:	100491ba 	slli	r2,r2,6
  81e94c:	10c5883a 	add	r2,r2,r3
  81e950:	10c00e04 	addi	r3,r2,56
  81e954:	00800044 	movi	r2,1
  81e958:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  81e95c:	00800044 	movi	r2,1
  81e960:	d0a77515 	stw	r2,-25132(gp)
			result = true;
  81e964:	00800044 	movi	r2,1
  81e968:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
  81e96c:	e0bffa17 	ldw	r2,-24(fp)
  81e970:	e0bfff15 	stw	r2,-4(fp)
  81e974:	e0bfff17 	ldw	r2,-4(fp)
}
  81e978:	e037883a 	mov	sp,fp
  81e97c:	dfc00217 	ldw	ra,8(sp)
  81e980:	df000117 	ldw	fp,4(sp)
  81e984:	dc000017 	ldw	r16,0(sp)
  81e988:	dec00304 	addi	sp,sp,12
  81e98c:	f800283a 	ret

0081e990 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  81e990:	defffb04 	addi	sp,sp,-20
  81e994:	dfc00415 	stw	ra,16(sp)
  81e998:	df000315 	stw	fp,12(sp)
  81e99c:	df000304 	addi	fp,sp,12
  81e9a0:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
  81e9a4:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81e9a8:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81e9ac:	1005003a 	cmpeq	r2,r2,zero
  81e9b0:	1000641e 	bne	r2,zero,81eb44 <alt_up_sd_card_fclose+0x1b4>
  81e9b4:	d0a76b17 	ldw	r2,-25172(gp)
  81e9b8:	1005003a 	cmpeq	r2,r2,zero
  81e9bc:	1000611e 	bne	r2,zero,81eb44 <alt_up_sd_card_fclose+0x1b4>
		if (active_files[file_handle].in_use) {
  81e9c0:	e0bfff0f 	ldh	r2,-4(fp)
  81e9c4:	00c020f4 	movhi	r3,131
  81e9c8:	18fb4b04 	addi	r3,r3,-4820
  81e9cc:	100491ba 	slli	r2,r2,6
  81e9d0:	10c5883a 	add	r2,r2,r3
  81e9d4:	10800f04 	addi	r2,r2,60
  81e9d8:	10800017 	ldw	r2,0(r2)
  81e9dc:	1005003a 	cmpeq	r2,r2,zero
  81e9e0:	1000581e 	bne	r2,zero,81eb44 <alt_up_sd_card_fclose+0x1b4>
			if (active_files[file_handle].modified) {
  81e9e4:	e0bfff0f 	ldh	r2,-4(fp)
  81e9e8:	00c020f4 	movhi	r3,131
  81e9ec:	18fb4b04 	addi	r3,r3,-4820
  81e9f0:	100491ba 	slli	r2,r2,6
  81e9f4:	10c5883a 	add	r2,r2,r3
  81e9f8:	10800e04 	addi	r2,r2,56
  81e9fc:	10800017 	ldw	r2,0(r2)
  81ea00:	1005003a 	cmpeq	r2,r2,zero
  81ea04:	1000461e 	bne	r2,zero,81eb20 <alt_up_sd_card_fclose+0x190>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  81ea08:	e0bfff0f 	ldh	r2,-4(fp)
  81ea0c:	00c020f4 	movhi	r3,131
  81ea10:	18fb4b04 	addi	r3,r3,-4820
  81ea14:	100491ba 	slli	r2,r2,6
  81ea18:	10c5883a 	add	r2,r2,r3
  81ea1c:	10800b04 	addi	r2,r2,44
  81ea20:	10800017 	ldw	r2,0(r2)
  81ea24:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
  81ea28:	e0bfff0f 	ldh	r2,-4(fp)
  81ea2c:	00c020f4 	movhi	r3,131
  81ea30:	18fb4b04 	addi	r3,r3,-4820
  81ea34:	100491ba 	slli	r2,r2,6
  81ea38:	10c5883a 	add	r2,r2,r3
  81ea3c:	10800a04 	addi	r2,r2,40
  81ea40:	10800017 	ldw	r2,0(r2)
  81ea44:	1004c03a 	cmpne	r2,r2,zero
  81ea48:	1000071e 	bne	r2,zero,81ea68 <alt_up_sd_card_fclose+0xd8>
					record_sector = record_sector
  81ea4c:	008020f4 	movhi	r2,131
  81ea50:	10bb3604 	addi	r2,r2,-4904
  81ea54:	10c01317 	ldw	r3,76(r2)
  81ea58:	e0bffd17 	ldw	r2,-12(fp)
  81ea5c:	10c5883a 	add	r2,r2,r3
  81ea60:	e0bffd15 	stw	r2,-12(fp)
  81ea64:	00001406 	br	81eab8 <alt_up_sd_card_fclose+0x128>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  81ea68:	008020f4 	movhi	r2,131
  81ea6c:	10bb3604 	addi	r2,r2,-4904
  81ea70:	10c01417 	ldw	r3,80(r2)
  81ea74:	e0bffd17 	ldw	r2,-12(fp)
  81ea78:	1889883a 	add	r4,r3,r2
  81ea7c:	e0bfff0f 	ldh	r2,-4(fp)
  81ea80:	00c020f4 	movhi	r3,131
  81ea84:	18fb4b04 	addi	r3,r3,-4820
  81ea88:	100491ba 	slli	r2,r2,6
  81ea8c:	10c5883a 	add	r2,r2,r3
  81ea90:	10800a04 	addi	r2,r2,40
  81ea94:	10800017 	ldw	r2,0(r2)
  81ea98:	10ffff84 	addi	r3,r2,-2
  81ea9c:	008020f4 	movhi	r2,131
  81eaa0:	10bb3604 	addi	r2,r2,-4904
  81eaa4:	10800383 	ldbu	r2,14(r2)
  81eaa8:	10803fcc 	andi	r2,r2,255
  81eaac:	1885383a 	mul	r2,r3,r2
  81eab0:	2085883a 	add	r2,r4,r2
  81eab4:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  81eab8:	e13ffd17 	ldw	r4,-12(fp)
  81eabc:	d1677217 	ldw	r5,-25144(gp)
  81eac0:	081a8400 	call	81a840 <Read_Sector_Data>
  81eac4:	1005003a 	cmpeq	r2,r2,zero
  81eac8:	1000151e 	bne	r2,zero,81eb20 <alt_up_sd_card_fclose+0x190>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  81eacc:	e0bfff0f 	ldh	r2,-4(fp)
  81ead0:	00c020f4 	movhi	r3,131
  81ead4:	18fb4b04 	addi	r3,r3,-4820
  81ead8:	100491ba 	slli	r2,r2,6
  81eadc:	10c5883a 	add	r2,r2,r3
  81eae0:	10800c04 	addi	r2,r2,48
  81eae4:	1080000b 	ldhu	r2,0(r2)
  81eae8:	113fffcc 	andi	r4,r2,65535
  81eaec:	2120001c 	xori	r4,r4,32768
  81eaf0:	21200004 	addi	r4,r4,-32768
  81eaf4:	e0bfff0f 	ldh	r2,-4(fp)
  81eaf8:	100491ba 	slli	r2,r2,6
  81eafc:	1007883a 	mov	r3,r2
  81eb00:	008020f4 	movhi	r2,131
  81eb04:	10bb4b04 	addi	r2,r2,-4820
  81eb08:	188b883a 	add	r5,r3,r2
  81eb0c:	081af0c0 	call	81af0c <Write_File_Record_At_Offset>
  81eb10:	1005003a 	cmpeq	r2,r2,zero
  81eb14:	1000021e 	bne	r2,zero,81eb20 <alt_up_sd_card_fclose+0x190>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  81eb18:	081a7f00 	call	81a7f0 <Save_Modified_Sector>
  81eb1c:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  81eb20:	e0bfff0f 	ldh	r2,-4(fp)
  81eb24:	00c020f4 	movhi	r3,131
  81eb28:	18fb4b04 	addi	r3,r3,-4820
  81eb2c:	100491ba 	slli	r2,r2,6
  81eb30:	10c5883a 	add	r2,r2,r3
  81eb34:	10800f04 	addi	r2,r2,60
  81eb38:	10000015 	stw	zero,0(r2)
			result = true;
  81eb3c:	00800044 	movi	r2,1
  81eb40:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
  81eb44:	e0bffe17 	ldw	r2,-8(fp)
}
  81eb48:	e037883a 	mov	sp,fp
  81eb4c:	dfc00117 	ldw	ra,4(sp)
  81eb50:	df000017 	ldw	fp,0(sp)
  81eb54:	dec00204 	addi	sp,sp,8
  81eb58:	f800283a 	ret

0081eb5c <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  81eb5c:	defff904 	addi	sp,sp,-28
  81eb60:	dfc00615 	stw	ra,24(sp)
  81eb64:	df000515 	stw	fp,20(sp)
  81eb68:	df000504 	addi	fp,sp,20
  81eb6c:	e13ffd15 	stw	r4,-12(fp)
  81eb70:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  81eb74:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  81eb78:	081d5540 	call	81d554 <alt_up_sd_card_is_Present>
  81eb7c:	1005003a 	cmpeq	r2,r2,zero
  81eb80:	10002d1e 	bne	r2,zero,81ec38 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
  81eb84:	00803fc4 	movi	r2,255
  81eb88:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  81eb8c:	d0a77517 	ldw	r2,-25132(gp)
  81eb90:	1005003a 	cmpeq	r2,r2,zero
  81eb94:	1000081e 	bne	r2,zero,81ebb8 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  81eb98:	d0a77617 	ldw	r2,-25128(gp)
  81eb9c:	1009883a 	mov	r4,r2
  81eba0:	000b883a 	mov	r5,zero
  81eba4:	081a7280 	call	81a728 <Write_Sector_Data>
  81eba8:	1004c03a 	cmpne	r2,r2,zero
  81ebac:	1000021e 	bne	r2,zero,81ebb8 <Read_Sector_Data_CRC+0x5c>
				return false;
  81ebb0:	e03fff15 	stw	zero,-4(fp)
  81ebb4:	00002206 	br	81ec40 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81ebb8:	d0a77017 	ldw	r2,-25152(gp)
  81ebbc:	1009883a 	mov	r4,r2
  81ebc0:	e0fffd17 	ldw	r3,-12(fp)
  81ebc4:	e0bffe17 	ldw	r2,-8(fp)
  81ebc8:	1885883a 	add	r2,r3,r2
  81ebcc:	1006927a 	slli	r3,r2,9
  81ebd0:	2005883a 	mov	r2,r4
  81ebd4:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  81ebd8:	d0a76f17 	ldw	r2,-25156(gp)
  81ebdc:	1007883a 	mov	r3,r2
  81ebe0:	00800444 	movi	r2,17
  81ebe4:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81ebe8:	d0a76c17 	ldw	r2,-25168(gp)
  81ebec:	1080002b 	ldhuio	r2,0(r2)
  81ebf0:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  81ebf4:	e0bffb0b 	ldhu	r2,-20(fp)
  81ebf8:	10bfffcc 	andi	r2,r2,65535
  81ebfc:	1080010c 	andi	r2,r2,4
  81ec00:	1004c03a 	cmpne	r2,r2,zero
  81ec04:	103ff81e 	bne	r2,zero,81ebe8 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  81ec08:	e0bffb0b 	ldhu	r2,-20(fp)
  81ec0c:	10bfffcc 	andi	r2,r2,65535
  81ec10:	10800c0c 	andi	r2,r2,48
  81ec14:	1004c03a 	cmpne	r2,r2,zero
  81ec18:	1000071e 	bne	r2,zero,81ec38 <Read_Sector_Data_CRC+0xdc>
			result = true;
  81ec1c:	00800044 	movi	r2,1
  81ec20:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  81ec24:	d0277515 	stw	zero,-25132(gp)
			current_sector_index = sector_index + partition_offset;
  81ec28:	e0fffd17 	ldw	r3,-12(fp)
  81ec2c:	e0bffe17 	ldw	r2,-8(fp)
  81ec30:	1885883a 	add	r2,r3,r2
  81ec34:	d0a77615 	stw	r2,-25128(gp)
		}
	}
	return result;
  81ec38:	e0bffc17 	ldw	r2,-16(fp)
  81ec3c:	e0bfff15 	stw	r2,-4(fp)
  81ec40:	e0bfff17 	ldw	r2,-4(fp)
}
  81ec44:	e037883a 	mov	sp,fp
  81ec48:	dfc00117 	ldw	ra,4(sp)
  81ec4c:	df000017 	ldw	fp,0(sp)
  81ec50:	dec00204 	addi	sp,sp,8
  81ec54:	f800283a 	ret

0081ec58 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  81ec58:	defff804 	addi	sp,sp,-32
  81ec5c:	dfc00715 	stw	ra,28(sp)
  81ec60:	df000615 	stw	fp,24(sp)
  81ec64:	df000604 	addi	fp,sp,24
  81ec68:	e13ffd15 	stw	r4,-12(fp)
  81ec6c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
  81ec70:	00801904 	movi	r2,100
  81ec74:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
  81ec78:	e03ffc15 	stw	zero,-16(fp)
  81ec7c:	00000d06 	br	81ecb4 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  81ec80:	e13ffd17 	ldw	r4,-12(fp)
  81ec84:	e17ffe17 	ldw	r5,-8(fp)
  81ec88:	081eb5c0 	call	81eb5c <Read_Sector_Data_CRC>
  81ec8c:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
  81ec90:	e0bffb17 	ldw	r2,-20(fp)
  81ec94:	1005003a 	cmpeq	r2,r2,zero
  81ec98:	1000031e 	bne	r2,zero,81eca8 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
  81ec9c:	00800044 	movi	r2,1
  81eca0:	e0bfff15 	stw	r2,-4(fp)
  81eca4:	00000a06 	br	81ecd0 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  81eca8:	e0bffc17 	ldw	r2,-16(fp)
  81ecac:	10800044 	addi	r2,r2,1
  81ecb0:	e0bffc15 	stw	r2,-16(fp)
  81ecb4:	e0fffc17 	ldw	r3,-16(fp)
  81ecb8:	e0bffa17 	ldw	r2,-24(fp)
  81ecbc:	18bff016 	blt	r3,r2,81ec80 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  81ecc0:	e13ffd17 	ldw	r4,-12(fp)
  81ecc4:	e17ffe17 	ldw	r5,-8(fp)
  81ecc8:	081a8400 	call	81a840 <Read_Sector_Data>
  81eccc:	e0bfff15 	stw	r2,-4(fp)
  81ecd0:	e0bfff17 	ldw	r2,-4(fp)
}
  81ecd4:	e037883a 	mov	sp,fp
  81ecd8:	dfc00117 	ldw	ra,4(sp)
  81ecdc:	df000017 	ldw	fp,0(sp)
  81ece0:	dec00204 	addi	sp,sp,8
  81ece4:	f800283a 	ret

0081ece8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81ece8:	defffe04 	addi	sp,sp,-8
  81ecec:	df000115 	stw	fp,4(sp)
  81ecf0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81ecf4:	e03fff15 	stw	zero,-4(fp)
  81ecf8:	00000506 	br	81ed10 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81ecfc:	e0bfff17 	ldw	r2,-4(fp)
  81ed00:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81ed04:	e0bfff17 	ldw	r2,-4(fp)
  81ed08:	10800804 	addi	r2,r2,32
  81ed0c:	e0bfff15 	stw	r2,-4(fp)
  81ed10:	e0bfff17 	ldw	r2,-4(fp)
  81ed14:	10900030 	cmpltui	r2,r2,16384
  81ed18:	103ff81e 	bne	r2,zero,81ecfc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81ed1c:	e037883a 	mov	sp,fp
  81ed20:	df000017 	ldw	fp,0(sp)
  81ed24:	dec00104 	addi	sp,sp,4
  81ed28:	f800283a 	ret

0081ed2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81ed2c:	defff904 	addi	sp,sp,-28
  81ed30:	dfc00615 	stw	ra,24(sp)
  81ed34:	df000515 	stw	fp,20(sp)
  81ed38:	df000504 	addi	fp,sp,20
  81ed3c:	e13ffd15 	stw	r4,-12(fp)
  81ed40:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81ed44:	e0bffd17 	ldw	r2,-12(fp)
  81ed48:	1005003a 	cmpeq	r2,r2,zero
  81ed4c:	1000041e 	bne	r2,zero,81ed60 <alt_dev_llist_insert+0x34>
  81ed50:	e0bffd17 	ldw	r2,-12(fp)
  81ed54:	10800217 	ldw	r2,8(r2)
  81ed58:	1004c03a 	cmpne	r2,r2,zero
  81ed5c:	1000071e 	bne	r2,zero,81ed7c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81ed60:	081ede00 	call	81ede0 <alt_get_errno>
  81ed64:	1007883a 	mov	r3,r2
  81ed68:	00800584 	movi	r2,22
  81ed6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81ed70:	00bffa84 	movi	r2,-22
  81ed74:	e0bfff15 	stw	r2,-4(fp)
  81ed78:	00001306 	br	81edc8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81ed7c:	e0fffd17 	ldw	r3,-12(fp)
  81ed80:	e0bffe17 	ldw	r2,-8(fp)
  81ed84:	e0bffb15 	stw	r2,-20(fp)
  81ed88:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81ed8c:	e0fffc17 	ldw	r3,-16(fp)
  81ed90:	e0bffb17 	ldw	r2,-20(fp)
  81ed94:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81ed98:	e0bffb17 	ldw	r2,-20(fp)
  81ed9c:	10c00017 	ldw	r3,0(r2)
  81eda0:	e0bffc17 	ldw	r2,-16(fp)
  81eda4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81eda8:	e0bffb17 	ldw	r2,-20(fp)
  81edac:	10c00017 	ldw	r3,0(r2)
  81edb0:	e0bffc17 	ldw	r2,-16(fp)
  81edb4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81edb8:	e0fffb17 	ldw	r3,-20(fp)
  81edbc:	e0bffc17 	ldw	r2,-16(fp)
  81edc0:	18800015 	stw	r2,0(r3)

  return 0;  
  81edc4:	e03fff15 	stw	zero,-4(fp)
  81edc8:	e0bfff17 	ldw	r2,-4(fp)
}
  81edcc:	e037883a 	mov	sp,fp
  81edd0:	dfc00117 	ldw	ra,4(sp)
  81edd4:	df000017 	ldw	fp,0(sp)
  81edd8:	dec00204 	addi	sp,sp,8
  81eddc:	f800283a 	ret

0081ede0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81ede0:	defffd04 	addi	sp,sp,-12
  81ede4:	dfc00215 	stw	ra,8(sp)
  81ede8:	df000115 	stw	fp,4(sp)
  81edec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81edf0:	008020b4 	movhi	r2,130
  81edf4:	108a7404 	addi	r2,r2,10704
  81edf8:	10800017 	ldw	r2,0(r2)
  81edfc:	1005003a 	cmpeq	r2,r2,zero
  81ee00:	1000061e 	bne	r2,zero,81ee1c <alt_get_errno+0x3c>
  81ee04:	008020b4 	movhi	r2,130
  81ee08:	108a7404 	addi	r2,r2,10704
  81ee0c:	10800017 	ldw	r2,0(r2)
  81ee10:	103ee83a 	callr	r2
  81ee14:	e0bfff15 	stw	r2,-4(fp)
  81ee18:	00000306 	br	81ee28 <alt_get_errno+0x48>
  81ee1c:	008020b4 	movhi	r2,130
  81ee20:	1091c804 	addi	r2,r2,18208
  81ee24:	e0bfff15 	stw	r2,-4(fp)
  81ee28:	e0bfff17 	ldw	r2,-4(fp)
}
  81ee2c:	e037883a 	mov	sp,fp
  81ee30:	dfc00117 	ldw	ra,4(sp)
  81ee34:	df000017 	ldw	fp,0(sp)
  81ee38:	dec00204 	addi	sp,sp,8
  81ee3c:	f800283a 	ret

0081ee40 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81ee40:	defffd04 	addi	sp,sp,-12
  81ee44:	dfc00215 	stw	ra,8(sp)
  81ee48:	df000115 	stw	fp,4(sp)
  81ee4c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81ee50:	00bfff04 	movi	r2,-4
  81ee54:	00c020b4 	movhi	r3,130
  81ee58:	18fe9604 	addi	r3,r3,-1448
  81ee5c:	1885883a 	add	r2,r3,r2
  81ee60:	e0bfff15 	stw	r2,-4(fp)
  81ee64:	00000606 	br	81ee80 <_do_ctors+0x40>
        (*ctor) (); 
  81ee68:	e0bfff17 	ldw	r2,-4(fp)
  81ee6c:	10800017 	ldw	r2,0(r2)
  81ee70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81ee74:	e0bfff17 	ldw	r2,-4(fp)
  81ee78:	10bfff04 	addi	r2,r2,-4
  81ee7c:	e0bfff15 	stw	r2,-4(fp)
  81ee80:	e0ffff17 	ldw	r3,-4(fp)
  81ee84:	008020b4 	movhi	r2,130
  81ee88:	10be9504 	addi	r2,r2,-1452
  81ee8c:	18bff62e 	bgeu	r3,r2,81ee68 <_do_ctors+0x28>
        (*ctor) (); 
}
  81ee90:	e037883a 	mov	sp,fp
  81ee94:	dfc00117 	ldw	ra,4(sp)
  81ee98:	df000017 	ldw	fp,0(sp)
  81ee9c:	dec00204 	addi	sp,sp,8
  81eea0:	f800283a 	ret

0081eea4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81eea4:	defffd04 	addi	sp,sp,-12
  81eea8:	dfc00215 	stw	ra,8(sp)
  81eeac:	df000115 	stw	fp,4(sp)
  81eeb0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81eeb4:	00bfff04 	movi	r2,-4
  81eeb8:	00c020b4 	movhi	r3,130
  81eebc:	18fe9604 	addi	r3,r3,-1448
  81eec0:	1885883a 	add	r2,r3,r2
  81eec4:	e0bfff15 	stw	r2,-4(fp)
  81eec8:	00000606 	br	81eee4 <_do_dtors+0x40>
        (*dtor) (); 
  81eecc:	e0bfff17 	ldw	r2,-4(fp)
  81eed0:	10800017 	ldw	r2,0(r2)
  81eed4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81eed8:	e0bfff17 	ldw	r2,-4(fp)
  81eedc:	10bfff04 	addi	r2,r2,-4
  81eee0:	e0bfff15 	stw	r2,-4(fp)
  81eee4:	e0ffff17 	ldw	r3,-4(fp)
  81eee8:	008020b4 	movhi	r2,130
  81eeec:	10be9604 	addi	r2,r2,-1448
  81eef0:	18bff62e 	bgeu	r3,r2,81eecc <_do_dtors+0x28>
        (*dtor) (); 
}
  81eef4:	e037883a 	mov	sp,fp
  81eef8:	dfc00117 	ldw	ra,4(sp)
  81eefc:	df000017 	ldw	fp,0(sp)
  81ef00:	dec00204 	addi	sp,sp,8
  81ef04:	f800283a 	ret

0081ef08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81ef08:	defff904 	addi	sp,sp,-28
  81ef0c:	dfc00615 	stw	ra,24(sp)
  81ef10:	df000515 	stw	fp,20(sp)
  81ef14:	df000504 	addi	fp,sp,20
  81ef18:	e13ffd15 	stw	r4,-12(fp)
  81ef1c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81ef20:	e0bffe17 	ldw	r2,-8(fp)
  81ef24:	10800017 	ldw	r2,0(r2)
  81ef28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81ef2c:	e13ffd17 	ldw	r4,-12(fp)
  81ef30:	080ce500 	call	80ce50 <strlen>
  81ef34:	10800044 	addi	r2,r2,1
  81ef38:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81ef3c:	00000d06 	br	81ef74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81ef40:	e0bffc17 	ldw	r2,-16(fp)
  81ef44:	11000217 	ldw	r4,8(r2)
  81ef48:	e1bffb17 	ldw	r6,-20(fp)
  81ef4c:	e17ffd17 	ldw	r5,-12(fp)
  81ef50:	08124e40 	call	8124e4 <memcmp>
  81ef54:	1004c03a 	cmpne	r2,r2,zero
  81ef58:	1000031e 	bne	r2,zero,81ef68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81ef5c:	e0bffc17 	ldw	r2,-16(fp)
  81ef60:	e0bfff15 	stw	r2,-4(fp)
  81ef64:	00000706 	br	81ef84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81ef68:	e0bffc17 	ldw	r2,-16(fp)
  81ef6c:	10800017 	ldw	r2,0(r2)
  81ef70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81ef74:	e0fffe17 	ldw	r3,-8(fp)
  81ef78:	e0bffc17 	ldw	r2,-16(fp)
  81ef7c:	10fff01e 	bne	r2,r3,81ef40 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81ef80:	e03fff15 	stw	zero,-4(fp)
  81ef84:	e0bfff17 	ldw	r2,-4(fp)
}
  81ef88:	e037883a 	mov	sp,fp
  81ef8c:	dfc00117 	ldw	ra,4(sp)
  81ef90:	df000017 	ldw	fp,0(sp)
  81ef94:	dec00204 	addi	sp,sp,8
  81ef98:	f800283a 	ret

0081ef9c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81ef9c:	defffe04 	addi	sp,sp,-8
  81efa0:	dfc00115 	stw	ra,4(sp)
  81efa4:	df000015 	stw	fp,0(sp)
  81efa8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81efac:	0009883a 	mov	r4,zero
  81efb0:	01480004 	movi	r5,8192
  81efb4:	081f5c40 	call	81f5c4 <alt_icache_flush>
#endif
}
  81efb8:	e037883a 	mov	sp,fp
  81efbc:	dfc00117 	ldw	ra,4(sp)
  81efc0:	df000017 	ldw	fp,0(sp)
  81efc4:	dec00204 	addi	sp,sp,8
  81efc8:	f800283a 	ret

0081efcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81efcc:	defff904 	addi	sp,sp,-28
  81efd0:	dfc00615 	stw	ra,24(sp)
  81efd4:	df000515 	stw	fp,20(sp)
  81efd8:	df000504 	addi	fp,sp,20
  81efdc:	e13ffc15 	stw	r4,-16(fp)
  81efe0:	e17ffd15 	stw	r5,-12(fp)
  81efe4:	e1bffe15 	stw	r6,-8(fp)
  81efe8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81efec:	e13ffd17 	ldw	r4,-12(fp)
  81eff0:	e17ffe17 	ldw	r5,-8(fp)
  81eff4:	e1bfff17 	ldw	r6,-4(fp)
  81eff8:	081f1e40 	call	81f1e4 <open>
  81effc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81f000:	e0bffb17 	ldw	r2,-20(fp)
  81f004:	1004803a 	cmplt	r2,r2,zero
  81f008:	10001c1e 	bne	r2,zero,81f07c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81f00c:	e0bffb17 	ldw	r2,-20(fp)
  81f010:	00c020b4 	movhi	r3,130
  81f014:	18c58204 	addi	r3,r3,5640
  81f018:	10800324 	muli	r2,r2,12
  81f01c:	10c5883a 	add	r2,r2,r3
  81f020:	10c00017 	ldw	r3,0(r2)
  81f024:	e0bffc17 	ldw	r2,-16(fp)
  81f028:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81f02c:	e0bffb17 	ldw	r2,-20(fp)
  81f030:	00c020b4 	movhi	r3,130
  81f034:	18c58204 	addi	r3,r3,5640
  81f038:	10800324 	muli	r2,r2,12
  81f03c:	10c5883a 	add	r2,r2,r3
  81f040:	10800104 	addi	r2,r2,4
  81f044:	10c00017 	ldw	r3,0(r2)
  81f048:	e0bffc17 	ldw	r2,-16(fp)
  81f04c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81f050:	e0bffb17 	ldw	r2,-20(fp)
  81f054:	00c020b4 	movhi	r3,130
  81f058:	18c58204 	addi	r3,r3,5640
  81f05c:	10800324 	muli	r2,r2,12
  81f060:	10c5883a 	add	r2,r2,r3
  81f064:	10800204 	addi	r2,r2,8
  81f068:	10c00017 	ldw	r3,0(r2)
  81f06c:	e0bffc17 	ldw	r2,-16(fp)
  81f070:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81f074:	e13ffb17 	ldw	r4,-20(fp)
  81f078:	0815b9c0 	call	815b9c <alt_release_fd>
  }
} 
  81f07c:	e037883a 	mov	sp,fp
  81f080:	dfc00117 	ldw	ra,4(sp)
  81f084:	df000017 	ldw	fp,0(sp)
  81f088:	dec00204 	addi	sp,sp,8
  81f08c:	f800283a 	ret

0081f090 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81f090:	defffb04 	addi	sp,sp,-20
  81f094:	dfc00415 	stw	ra,16(sp)
  81f098:	df000315 	stw	fp,12(sp)
  81f09c:	df000304 	addi	fp,sp,12
  81f0a0:	e13ffd15 	stw	r4,-12(fp)
  81f0a4:	e17ffe15 	stw	r5,-8(fp)
  81f0a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81f0ac:	010020b4 	movhi	r4,130
  81f0b0:	21058504 	addi	r4,r4,5652
  81f0b4:	e17ffd17 	ldw	r5,-12(fp)
  81f0b8:	01800044 	movi	r6,1
  81f0bc:	01c07fc4 	movi	r7,511
  81f0c0:	081efcc0 	call	81efcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81f0c4:	010020b4 	movhi	r4,130
  81f0c8:	21058204 	addi	r4,r4,5640
  81f0cc:	e17ffe17 	ldw	r5,-8(fp)
  81f0d0:	000d883a 	mov	r6,zero
  81f0d4:	01c07fc4 	movi	r7,511
  81f0d8:	081efcc0 	call	81efcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81f0dc:	010020b4 	movhi	r4,130
  81f0e0:	21058804 	addi	r4,r4,5664
  81f0e4:	e17fff17 	ldw	r5,-4(fp)
  81f0e8:	01800044 	movi	r6,1
  81f0ec:	01c07fc4 	movi	r7,511
  81f0f0:	081efcc0 	call	81efcc <alt_open_fd>
}  
  81f0f4:	e037883a 	mov	sp,fp
  81f0f8:	dfc00117 	ldw	ra,4(sp)
  81f0fc:	df000017 	ldw	fp,0(sp)
  81f100:	dec00204 	addi	sp,sp,8
  81f104:	f800283a 	ret

0081f108 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81f108:	defffc04 	addi	sp,sp,-16
  81f10c:	df000315 	stw	fp,12(sp)
  81f110:	df000304 	addi	fp,sp,12
  81f114:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81f118:	e0bffe17 	ldw	r2,-8(fp)
  81f11c:	10800217 	ldw	r2,8(r2)
  81f120:	10d00034 	orhi	r3,r2,16384
  81f124:	e0bffe17 	ldw	r2,-8(fp)
  81f128:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81f12c:	e03ffd15 	stw	zero,-12(fp)
  81f130:	00002006 	br	81f1b4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81f134:	e0bffd17 	ldw	r2,-12(fp)
  81f138:	00c020b4 	movhi	r3,130
  81f13c:	18c58204 	addi	r3,r3,5640
  81f140:	10800324 	muli	r2,r2,12
  81f144:	10c5883a 	add	r2,r2,r3
  81f148:	10c00017 	ldw	r3,0(r2)
  81f14c:	e0bffe17 	ldw	r2,-8(fp)
  81f150:	10800017 	ldw	r2,0(r2)
  81f154:	1880141e 	bne	r3,r2,81f1a8 <alt_file_locked+0xa0>
  81f158:	e0bffd17 	ldw	r2,-12(fp)
  81f15c:	00c020b4 	movhi	r3,130
  81f160:	18c58204 	addi	r3,r3,5640
  81f164:	10800324 	muli	r2,r2,12
  81f168:	10c5883a 	add	r2,r2,r3
  81f16c:	10800204 	addi	r2,r2,8
  81f170:	10800017 	ldw	r2,0(r2)
  81f174:	1004403a 	cmpge	r2,r2,zero
  81f178:	10000b1e 	bne	r2,zero,81f1a8 <alt_file_locked+0xa0>
  81f17c:	e0bffd17 	ldw	r2,-12(fp)
  81f180:	10800324 	muli	r2,r2,12
  81f184:	1007883a 	mov	r3,r2
  81f188:	008020b4 	movhi	r2,130
  81f18c:	10858204 	addi	r2,r2,5640
  81f190:	1887883a 	add	r3,r3,r2
  81f194:	e0bffe17 	ldw	r2,-8(fp)
  81f198:	18800326 	beq	r3,r2,81f1a8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81f19c:	00bffcc4 	movi	r2,-13
  81f1a0:	e0bfff15 	stw	r2,-4(fp)
  81f1a4:	00000a06 	br	81f1d0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81f1a8:	e0bffd17 	ldw	r2,-12(fp)
  81f1ac:	10800044 	addi	r2,r2,1
  81f1b0:	e0bffd15 	stw	r2,-12(fp)
  81f1b4:	008020b4 	movhi	r2,130
  81f1b8:	108a7304 	addi	r2,r2,10700
  81f1bc:	10800017 	ldw	r2,0(r2)
  81f1c0:	1007883a 	mov	r3,r2
  81f1c4:	e0bffd17 	ldw	r2,-12(fp)
  81f1c8:	18bfda2e 	bgeu	r3,r2,81f134 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81f1cc:	e03fff15 	stw	zero,-4(fp)
  81f1d0:	e0bfff17 	ldw	r2,-4(fp)
}
  81f1d4:	e037883a 	mov	sp,fp
  81f1d8:	df000017 	ldw	fp,0(sp)
  81f1dc:	dec00104 	addi	sp,sp,4
  81f1e0:	f800283a 	ret

0081f1e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81f1e4:	defff404 	addi	sp,sp,-48
  81f1e8:	dfc00b15 	stw	ra,44(sp)
  81f1ec:	df000a15 	stw	fp,40(sp)
  81f1f0:	df000a04 	addi	fp,sp,40
  81f1f4:	e13ffb15 	stw	r4,-20(fp)
  81f1f8:	e17ffc15 	stw	r5,-16(fp)
  81f1fc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81f200:	00bfffc4 	movi	r2,-1
  81f204:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81f208:	00bffb44 	movi	r2,-19
  81f20c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81f210:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81f214:	e13ffb17 	ldw	r4,-20(fp)
  81f218:	014020b4 	movhi	r5,130
  81f21c:	294a7104 	addi	r5,r5,10692
  81f220:	081ef080 	call	81ef08 <alt_find_dev>
  81f224:	e0bffa15 	stw	r2,-24(fp)
  81f228:	e0bffa17 	ldw	r2,-24(fp)
  81f22c:	1004c03a 	cmpne	r2,r2,zero
  81f230:	1000051e 	bne	r2,zero,81f248 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81f234:	e13ffb17 	ldw	r4,-20(fp)
  81f238:	081f3ec0 	call	81f3ec <alt_find_file>
  81f23c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81f240:	00800044 	movi	r2,1
  81f244:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81f248:	e0bffa17 	ldw	r2,-24(fp)
  81f24c:	1005003a 	cmpeq	r2,r2,zero
  81f250:	1000301e 	bne	r2,zero,81f314 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81f254:	e13ffa17 	ldw	r4,-24(fp)
  81f258:	081f50c0 	call	81f50c <alt_get_fd>
  81f25c:	e0bff815 	stw	r2,-32(fp)
  81f260:	e0bff817 	ldw	r2,-32(fp)
  81f264:	1004403a 	cmpge	r2,r2,zero
  81f268:	1000031e 	bne	r2,zero,81f278 <open+0x94>
    {
      status = index;
  81f26c:	e0bff817 	ldw	r2,-32(fp)
  81f270:	e0bff715 	stw	r2,-36(fp)
  81f274:	00002906 	br	81f31c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81f278:	e0bff817 	ldw	r2,-32(fp)
  81f27c:	10800324 	muli	r2,r2,12
  81f280:	1007883a 	mov	r3,r2
  81f284:	008020b4 	movhi	r2,130
  81f288:	10858204 	addi	r2,r2,5640
  81f28c:	1885883a 	add	r2,r3,r2
  81f290:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81f294:	e0fffc17 	ldw	r3,-16(fp)
  81f298:	00900034 	movhi	r2,16384
  81f29c:	10bfffc4 	addi	r2,r2,-1
  81f2a0:	1886703a 	and	r3,r3,r2
  81f2a4:	e0bff917 	ldw	r2,-28(fp)
  81f2a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81f2ac:	e0bff617 	ldw	r2,-40(fp)
  81f2b0:	1004c03a 	cmpne	r2,r2,zero
  81f2b4:	1000061e 	bne	r2,zero,81f2d0 <open+0xec>
  81f2b8:	e13ff917 	ldw	r4,-28(fp)
  81f2bc:	081f1080 	call	81f108 <alt_file_locked>
  81f2c0:	e0bff715 	stw	r2,-36(fp)
  81f2c4:	e0bff717 	ldw	r2,-36(fp)
  81f2c8:	1004803a 	cmplt	r2,r2,zero
  81f2cc:	1000131e 	bne	r2,zero,81f31c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81f2d0:	e0bffa17 	ldw	r2,-24(fp)
  81f2d4:	10800317 	ldw	r2,12(r2)
  81f2d8:	1005003a 	cmpeq	r2,r2,zero
  81f2dc:	1000091e 	bne	r2,zero,81f304 <open+0x120>
  81f2e0:	e0bffa17 	ldw	r2,-24(fp)
  81f2e4:	10800317 	ldw	r2,12(r2)
  81f2e8:	e13ff917 	ldw	r4,-28(fp)
  81f2ec:	e17ffb17 	ldw	r5,-20(fp)
  81f2f0:	e1bffc17 	ldw	r6,-16(fp)
  81f2f4:	e1fffd17 	ldw	r7,-12(fp)
  81f2f8:	103ee83a 	callr	r2
  81f2fc:	e0bfff15 	stw	r2,-4(fp)
  81f300:	00000106 	br	81f308 <open+0x124>
  81f304:	e03fff15 	stw	zero,-4(fp)
  81f308:	e0bfff17 	ldw	r2,-4(fp)
  81f30c:	e0bff715 	stw	r2,-36(fp)
  81f310:	00000206 	br	81f31c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81f314:	00bffb44 	movi	r2,-19
  81f318:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81f31c:	e0bff717 	ldw	r2,-36(fp)
  81f320:	1004403a 	cmpge	r2,r2,zero
  81f324:	1000091e 	bne	r2,zero,81f34c <open+0x168>
  {
    alt_release_fd (index);  
  81f328:	e13ff817 	ldw	r4,-32(fp)
  81f32c:	0815b9c0 	call	815b9c <alt_release_fd>
    ALT_ERRNO = -status;
  81f330:	081f36c0 	call	81f36c <alt_get_errno>
  81f334:	e0fff717 	ldw	r3,-36(fp)
  81f338:	00c7c83a 	sub	r3,zero,r3
  81f33c:	10c00015 	stw	r3,0(r2)
    return -1;
  81f340:	00bfffc4 	movi	r2,-1
  81f344:	e0bffe15 	stw	r2,-8(fp)
  81f348:	00000206 	br	81f354 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81f34c:	e0bff817 	ldw	r2,-32(fp)
  81f350:	e0bffe15 	stw	r2,-8(fp)
  81f354:	e0bffe17 	ldw	r2,-8(fp)
}
  81f358:	e037883a 	mov	sp,fp
  81f35c:	dfc00117 	ldw	ra,4(sp)
  81f360:	df000017 	ldw	fp,0(sp)
  81f364:	dec00204 	addi	sp,sp,8
  81f368:	f800283a 	ret

0081f36c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81f36c:	defffd04 	addi	sp,sp,-12
  81f370:	dfc00215 	stw	ra,8(sp)
  81f374:	df000115 	stw	fp,4(sp)
  81f378:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81f37c:	008020b4 	movhi	r2,130
  81f380:	108a7404 	addi	r2,r2,10704
  81f384:	10800017 	ldw	r2,0(r2)
  81f388:	1005003a 	cmpeq	r2,r2,zero
  81f38c:	1000061e 	bne	r2,zero,81f3a8 <alt_get_errno+0x3c>
  81f390:	008020b4 	movhi	r2,130
  81f394:	108a7404 	addi	r2,r2,10704
  81f398:	10800017 	ldw	r2,0(r2)
  81f39c:	103ee83a 	callr	r2
  81f3a0:	e0bfff15 	stw	r2,-4(fp)
  81f3a4:	00000306 	br	81f3b4 <alt_get_errno+0x48>
  81f3a8:	008020b4 	movhi	r2,130
  81f3ac:	1091c804 	addi	r2,r2,18208
  81f3b0:	e0bfff15 	stw	r2,-4(fp)
  81f3b4:	e0bfff17 	ldw	r2,-4(fp)
}
  81f3b8:	e037883a 	mov	sp,fp
  81f3bc:	dfc00117 	ldw	ra,4(sp)
  81f3c0:	df000017 	ldw	fp,0(sp)
  81f3c4:	dec00204 	addi	sp,sp,8
  81f3c8:	f800283a 	ret

0081f3cc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81f3cc:	deffff04 	addi	sp,sp,-4
  81f3d0:	df000015 	stw	fp,0(sp)
  81f3d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81f3d8:	000170fa 	wrctl	ienable,zero
}
  81f3dc:	e037883a 	mov	sp,fp
  81f3e0:	df000017 	ldw	fp,0(sp)
  81f3e4:	dec00104 	addi	sp,sp,4
  81f3e8:	f800283a 	ret

0081f3ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81f3ec:	defffa04 	addi	sp,sp,-24
  81f3f0:	dfc00515 	stw	ra,20(sp)
  81f3f4:	df000415 	stw	fp,16(sp)
  81f3f8:	df000404 	addi	fp,sp,16
  81f3fc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81f400:	008020b4 	movhi	r2,130
  81f404:	108a6f04 	addi	r2,r2,10684
  81f408:	10800017 	ldw	r2,0(r2)
  81f40c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81f410:	00003306 	br	81f4e0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81f414:	e0bffd17 	ldw	r2,-12(fp)
  81f418:	11000217 	ldw	r4,8(r2)
  81f41c:	080ce500 	call	80ce50 <strlen>
  81f420:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81f424:	e0bffd17 	ldw	r2,-12(fp)
  81f428:	10c00217 	ldw	r3,8(r2)
  81f42c:	e0bffc17 	ldw	r2,-16(fp)
  81f430:	1885883a 	add	r2,r3,r2
  81f434:	10bfffc4 	addi	r2,r2,-1
  81f438:	10800003 	ldbu	r2,0(r2)
  81f43c:	10803fcc 	andi	r2,r2,255
  81f440:	1080201c 	xori	r2,r2,128
  81f444:	10bfe004 	addi	r2,r2,-128
  81f448:	10800bd8 	cmpnei	r2,r2,47
  81f44c:	1000031e 	bne	r2,zero,81f45c <alt_find_file+0x70>
    {
      len -= 1;
  81f450:	e0bffc17 	ldw	r2,-16(fp)
  81f454:	10bfffc4 	addi	r2,r2,-1
  81f458:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81f45c:	e0bffc17 	ldw	r2,-16(fp)
  81f460:	1007883a 	mov	r3,r2
  81f464:	e0bffe17 	ldw	r2,-8(fp)
  81f468:	1885883a 	add	r2,r3,r2
  81f46c:	10800003 	ldbu	r2,0(r2)
  81f470:	10803fcc 	andi	r2,r2,255
  81f474:	1080201c 	xori	r2,r2,128
  81f478:	10bfe004 	addi	r2,r2,-128
  81f47c:	10800be0 	cmpeqi	r2,r2,47
  81f480:	10000a1e 	bne	r2,zero,81f4ac <alt_find_file+0xc0>
  81f484:	e0bffc17 	ldw	r2,-16(fp)
  81f488:	1007883a 	mov	r3,r2
  81f48c:	e0bffe17 	ldw	r2,-8(fp)
  81f490:	1885883a 	add	r2,r3,r2
  81f494:	10800003 	ldbu	r2,0(r2)
  81f498:	10803fcc 	andi	r2,r2,255
  81f49c:	1080201c 	xori	r2,r2,128
  81f4a0:	10bfe004 	addi	r2,r2,-128
  81f4a4:	1004c03a 	cmpne	r2,r2,zero
  81f4a8:	10000a1e 	bne	r2,zero,81f4d4 <alt_find_file+0xe8>
  81f4ac:	e0bffd17 	ldw	r2,-12(fp)
  81f4b0:	11000217 	ldw	r4,8(r2)
  81f4b4:	e1bffc17 	ldw	r6,-16(fp)
  81f4b8:	e17ffe17 	ldw	r5,-8(fp)
  81f4bc:	08124e40 	call	8124e4 <memcmp>
  81f4c0:	1004c03a 	cmpne	r2,r2,zero
  81f4c4:	1000031e 	bne	r2,zero,81f4d4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81f4c8:	e0bffd17 	ldw	r2,-12(fp)
  81f4cc:	e0bfff15 	stw	r2,-4(fp)
  81f4d0:	00000806 	br	81f4f4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81f4d4:	e0bffd17 	ldw	r2,-12(fp)
  81f4d8:	10800017 	ldw	r2,0(r2)
  81f4dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81f4e0:	00c020b4 	movhi	r3,130
  81f4e4:	18ca6f04 	addi	r3,r3,10684
  81f4e8:	e0bffd17 	ldw	r2,-12(fp)
  81f4ec:	10ffc91e 	bne	r2,r3,81f414 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81f4f0:	e03fff15 	stw	zero,-4(fp)
  81f4f4:	e0bfff17 	ldw	r2,-4(fp)
}
  81f4f8:	e037883a 	mov	sp,fp
  81f4fc:	dfc00117 	ldw	ra,4(sp)
  81f500:	df000017 	ldw	fp,0(sp)
  81f504:	dec00204 	addi	sp,sp,8
  81f508:	f800283a 	ret

0081f50c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81f50c:	defffc04 	addi	sp,sp,-16
  81f510:	df000315 	stw	fp,12(sp)
  81f514:	df000304 	addi	fp,sp,12
  81f518:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81f51c:	00bffa04 	movi	r2,-24
  81f520:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81f524:	e03ffe15 	stw	zero,-8(fp)
  81f528:	00001e06 	br	81f5a4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  81f52c:	e0bffe17 	ldw	r2,-8(fp)
  81f530:	00c020b4 	movhi	r3,130
  81f534:	18c58204 	addi	r3,r3,5640
  81f538:	10800324 	muli	r2,r2,12
  81f53c:	10c5883a 	add	r2,r2,r3
  81f540:	10800017 	ldw	r2,0(r2)
  81f544:	1004c03a 	cmpne	r2,r2,zero
  81f548:	1000131e 	bne	r2,zero,81f598 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  81f54c:	e0bffe17 	ldw	r2,-8(fp)
  81f550:	00c020b4 	movhi	r3,130
  81f554:	18c58204 	addi	r3,r3,5640
  81f558:	10800324 	muli	r2,r2,12
  81f55c:	10c7883a 	add	r3,r2,r3
  81f560:	e0bfff17 	ldw	r2,-4(fp)
  81f564:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81f568:	008020b4 	movhi	r2,130
  81f56c:	108a7304 	addi	r2,r2,10700
  81f570:	10c00017 	ldw	r3,0(r2)
  81f574:	e0bffe17 	ldw	r2,-8(fp)
  81f578:	1880040e 	bge	r3,r2,81f58c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  81f57c:	00c020b4 	movhi	r3,130
  81f580:	18ca7304 	addi	r3,r3,10700
  81f584:	e0bffe17 	ldw	r2,-8(fp)
  81f588:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81f58c:	e0bffe17 	ldw	r2,-8(fp)
  81f590:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81f594:	00000606 	br	81f5b0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81f598:	e0bffe17 	ldw	r2,-8(fp)
  81f59c:	10800044 	addi	r2,r2,1
  81f5a0:	e0bffe15 	stw	r2,-8(fp)
  81f5a4:	e0bffe17 	ldw	r2,-8(fp)
  81f5a8:	10800810 	cmplti	r2,r2,32
  81f5ac:	103fdf1e 	bne	r2,zero,81f52c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81f5b0:	e0bffd17 	ldw	r2,-12(fp)
}
  81f5b4:	e037883a 	mov	sp,fp
  81f5b8:	df000017 	ldw	fp,0(sp)
  81f5bc:	dec00104 	addi	sp,sp,4
  81f5c0:	f800283a 	ret

0081f5c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81f5c4:	defffb04 	addi	sp,sp,-20
  81f5c8:	df000415 	stw	fp,16(sp)
  81f5cc:	df000404 	addi	fp,sp,16
  81f5d0:	e13ffe15 	stw	r4,-8(fp)
  81f5d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81f5d8:	e0bfff17 	ldw	r2,-4(fp)
  81f5dc:	10880070 	cmpltui	r2,r2,8193
  81f5e0:	1000021e 	bne	r2,zero,81f5ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81f5e4:	00880004 	movi	r2,8192
  81f5e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81f5ec:	e0fffe17 	ldw	r3,-8(fp)
  81f5f0:	e0bfff17 	ldw	r2,-4(fp)
  81f5f4:	1885883a 	add	r2,r3,r2
  81f5f8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81f5fc:	e0bffe17 	ldw	r2,-8(fp)
  81f600:	e0bffd15 	stw	r2,-12(fp)
  81f604:	00000506 	br	81f61c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81f608:	e0bffd17 	ldw	r2,-12(fp)
  81f60c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81f610:	e0bffd17 	ldw	r2,-12(fp)
  81f614:	10800804 	addi	r2,r2,32
  81f618:	e0bffd15 	stw	r2,-12(fp)
  81f61c:	e0fffd17 	ldw	r3,-12(fp)
  81f620:	e0bffc17 	ldw	r2,-16(fp)
  81f624:	18bff836 	bltu	r3,r2,81f608 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81f628:	e0bffe17 	ldw	r2,-8(fp)
  81f62c:	108007cc 	andi	r2,r2,31
  81f630:	1005003a 	cmpeq	r2,r2,zero
  81f634:	1000021e 	bne	r2,zero,81f640 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81f638:	e0bffd17 	ldw	r2,-12(fp)
  81f63c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81f640:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81f644:	e037883a 	mov	sp,fp
  81f648:	df000017 	ldw	fp,0(sp)
  81f64c:	dec00104 	addi	sp,sp,4
  81f650:	f800283a 	ret

0081f654 <atexit>:
  81f654:	200b883a 	mov	r5,r4
  81f658:	000d883a 	mov	r6,zero
  81f65c:	0009883a 	mov	r4,zero
  81f660:	000f883a 	mov	r7,zero
  81f664:	081f6a01 	jmpi	81f6a0 <__register_exitproc>

0081f668 <exit>:
  81f668:	defffe04 	addi	sp,sp,-8
  81f66c:	000b883a 	mov	r5,zero
  81f670:	dc000015 	stw	r16,0(sp)
  81f674:	dfc00115 	stw	ra,4(sp)
  81f678:	2021883a 	mov	r16,r4
  81f67c:	081f7d80 	call	81f7d8 <__call_exitprocs>
  81f680:	008020b4 	movhi	r2,130
  81f684:	108a6c04 	addi	r2,r2,10672
  81f688:	11000017 	ldw	r4,0(r2)
  81f68c:	20800f17 	ldw	r2,60(r4)
  81f690:	10000126 	beq	r2,zero,81f698 <exit+0x30>
  81f694:	103ee83a 	callr	r2
  81f698:	8009883a 	mov	r4,r16
  81f69c:	081f9c80 	call	81f9c8 <_exit>

0081f6a0 <__register_exitproc>:
  81f6a0:	defffa04 	addi	sp,sp,-24
  81f6a4:	008020b4 	movhi	r2,130
  81f6a8:	108a6c04 	addi	r2,r2,10672
  81f6ac:	dc000015 	stw	r16,0(sp)
  81f6b0:	14000017 	ldw	r16,0(r2)
  81f6b4:	dd000415 	stw	r20,16(sp)
  81f6b8:	2829883a 	mov	r20,r5
  81f6bc:	81405217 	ldw	r5,328(r16)
  81f6c0:	dcc00315 	stw	r19,12(sp)
  81f6c4:	dc800215 	stw	r18,8(sp)
  81f6c8:	dc400115 	stw	r17,4(sp)
  81f6cc:	dfc00515 	stw	ra,20(sp)
  81f6d0:	2023883a 	mov	r17,r4
  81f6d4:	3027883a 	mov	r19,r6
  81f6d8:	3825883a 	mov	r18,r7
  81f6dc:	28002526 	beq	r5,zero,81f774 <__register_exitproc+0xd4>
  81f6e0:	29000117 	ldw	r4,4(r5)
  81f6e4:	008007c4 	movi	r2,31
  81f6e8:	11002716 	blt	r2,r4,81f788 <__register_exitproc+0xe8>
  81f6ec:	8800101e 	bne	r17,zero,81f730 <__register_exitproc+0x90>
  81f6f0:	2105883a 	add	r2,r4,r4
  81f6f4:	1085883a 	add	r2,r2,r2
  81f6f8:	20c00044 	addi	r3,r4,1
  81f6fc:	1145883a 	add	r2,r2,r5
  81f700:	0009883a 	mov	r4,zero
  81f704:	15000215 	stw	r20,8(r2)
  81f708:	28c00115 	stw	r3,4(r5)
  81f70c:	2005883a 	mov	r2,r4
  81f710:	dfc00517 	ldw	ra,20(sp)
  81f714:	dd000417 	ldw	r20,16(sp)
  81f718:	dcc00317 	ldw	r19,12(sp)
  81f71c:	dc800217 	ldw	r18,8(sp)
  81f720:	dc400117 	ldw	r17,4(sp)
  81f724:	dc000017 	ldw	r16,0(sp)
  81f728:	dec00604 	addi	sp,sp,24
  81f72c:	f800283a 	ret
  81f730:	29802204 	addi	r6,r5,136
  81f734:	00800044 	movi	r2,1
  81f738:	110e983a 	sll	r7,r2,r4
  81f73c:	30c04017 	ldw	r3,256(r6)
  81f740:	2105883a 	add	r2,r4,r4
  81f744:	1085883a 	add	r2,r2,r2
  81f748:	1185883a 	add	r2,r2,r6
  81f74c:	19c6b03a 	or	r3,r3,r7
  81f750:	14802015 	stw	r18,128(r2)
  81f754:	14c00015 	stw	r19,0(r2)
  81f758:	00800084 	movi	r2,2
  81f75c:	30c04015 	stw	r3,256(r6)
  81f760:	88bfe31e 	bne	r17,r2,81f6f0 <__register_exitproc+0x50>
  81f764:	30804117 	ldw	r2,260(r6)
  81f768:	11c4b03a 	or	r2,r2,r7
  81f76c:	30804115 	stw	r2,260(r6)
  81f770:	003fdf06 	br	81f6f0 <__register_exitproc+0x50>
  81f774:	008020f4 	movhi	r2,131
  81f778:	10bccb04 	addi	r2,r2,-3284
  81f77c:	100b883a 	mov	r5,r2
  81f780:	80805215 	stw	r2,328(r16)
  81f784:	003fd606 	br	81f6e0 <__register_exitproc+0x40>
  81f788:	00802074 	movhi	r2,129
  81f78c:	10aedb04 	addi	r2,r2,-17556
  81f790:	1000021e 	bne	r2,zero,81f79c <__register_exitproc+0xfc>
  81f794:	013fffc4 	movi	r4,-1
  81f798:	003fdc06 	br	81f70c <__register_exitproc+0x6c>
  81f79c:	01006404 	movi	r4,400
  81f7a0:	103ee83a 	callr	r2
  81f7a4:	1007883a 	mov	r3,r2
  81f7a8:	103ffa26 	beq	r2,zero,81f794 <__register_exitproc+0xf4>
  81f7ac:	80805217 	ldw	r2,328(r16)
  81f7b0:	180b883a 	mov	r5,r3
  81f7b4:	18000115 	stw	zero,4(r3)
  81f7b8:	18800015 	stw	r2,0(r3)
  81f7bc:	80c05215 	stw	r3,328(r16)
  81f7c0:	18006215 	stw	zero,392(r3)
  81f7c4:	18006315 	stw	zero,396(r3)
  81f7c8:	0009883a 	mov	r4,zero
  81f7cc:	883fc826 	beq	r17,zero,81f6f0 <__register_exitproc+0x50>
  81f7d0:	003fd706 	br	81f730 <__register_exitproc+0x90>

0081f7d4 <register_fini>:
  81f7d4:	f800283a 	ret

0081f7d8 <__call_exitprocs>:
  81f7d8:	008020b4 	movhi	r2,130
  81f7dc:	108a6c04 	addi	r2,r2,10672
  81f7e0:	10800017 	ldw	r2,0(r2)
  81f7e4:	defff304 	addi	sp,sp,-52
  81f7e8:	df000b15 	stw	fp,44(sp)
  81f7ec:	d8800115 	stw	r2,4(sp)
  81f7f0:	00802074 	movhi	r2,129
  81f7f4:	10aed604 	addi	r2,r2,-17576
  81f7f8:	1005003a 	cmpeq	r2,r2,zero
  81f7fc:	d8800215 	stw	r2,8(sp)
  81f800:	d8800117 	ldw	r2,4(sp)
  81f804:	dd400815 	stw	r21,32(sp)
  81f808:	dd000715 	stw	r20,28(sp)
  81f80c:	10805204 	addi	r2,r2,328
  81f810:	dfc00c15 	stw	ra,48(sp)
  81f814:	ddc00a15 	stw	r23,40(sp)
  81f818:	dd800915 	stw	r22,36(sp)
  81f81c:	dcc00615 	stw	r19,24(sp)
  81f820:	dc800515 	stw	r18,20(sp)
  81f824:	dc400415 	stw	r17,16(sp)
  81f828:	dc000315 	stw	r16,12(sp)
  81f82c:	282b883a 	mov	r21,r5
  81f830:	2039883a 	mov	fp,r4
  81f834:	d8800015 	stw	r2,0(sp)
  81f838:	2829003a 	cmpeq	r20,r5,zero
  81f83c:	d8800117 	ldw	r2,4(sp)
  81f840:	14405217 	ldw	r17,328(r2)
  81f844:	88001026 	beq	r17,zero,81f888 <__call_exitprocs+0xb0>
  81f848:	ddc00017 	ldw	r23,0(sp)
  81f84c:	88800117 	ldw	r2,4(r17)
  81f850:	8c802204 	addi	r18,r17,136
  81f854:	143fffc4 	addi	r16,r2,-1
  81f858:	80000916 	blt	r16,zero,81f880 <__call_exitprocs+0xa8>
  81f85c:	05bfffc4 	movi	r22,-1
  81f860:	a000151e 	bne	r20,zero,81f8b8 <__call_exitprocs+0xe0>
  81f864:	8409883a 	add	r4,r16,r16
  81f868:	2105883a 	add	r2,r4,r4
  81f86c:	1485883a 	add	r2,r2,r18
  81f870:	10c02017 	ldw	r3,128(r2)
  81f874:	a8c01126 	beq	r21,r3,81f8bc <__call_exitprocs+0xe4>
  81f878:	843fffc4 	addi	r16,r16,-1
  81f87c:	85bff81e 	bne	r16,r22,81f860 <__call_exitprocs+0x88>
  81f880:	d8800217 	ldw	r2,8(sp)
  81f884:	10003126 	beq	r2,zero,81f94c <__call_exitprocs+0x174>
  81f888:	dfc00c17 	ldw	ra,48(sp)
  81f88c:	df000b17 	ldw	fp,44(sp)
  81f890:	ddc00a17 	ldw	r23,40(sp)
  81f894:	dd800917 	ldw	r22,36(sp)
  81f898:	dd400817 	ldw	r21,32(sp)
  81f89c:	dd000717 	ldw	r20,28(sp)
  81f8a0:	dcc00617 	ldw	r19,24(sp)
  81f8a4:	dc800517 	ldw	r18,20(sp)
  81f8a8:	dc400417 	ldw	r17,16(sp)
  81f8ac:	dc000317 	ldw	r16,12(sp)
  81f8b0:	dec00d04 	addi	sp,sp,52
  81f8b4:	f800283a 	ret
  81f8b8:	8409883a 	add	r4,r16,r16
  81f8bc:	88c00117 	ldw	r3,4(r17)
  81f8c0:	2105883a 	add	r2,r4,r4
  81f8c4:	1445883a 	add	r2,r2,r17
  81f8c8:	18ffffc4 	addi	r3,r3,-1
  81f8cc:	11800217 	ldw	r6,8(r2)
  81f8d0:	1c001526 	beq	r3,r16,81f928 <__call_exitprocs+0x150>
  81f8d4:	10000215 	stw	zero,8(r2)
  81f8d8:	303fe726 	beq	r6,zero,81f878 <__call_exitprocs+0xa0>
  81f8dc:	00c00044 	movi	r3,1
  81f8e0:	1c06983a 	sll	r3,r3,r16
  81f8e4:	90804017 	ldw	r2,256(r18)
  81f8e8:	8cc00117 	ldw	r19,4(r17)
  81f8ec:	1884703a 	and	r2,r3,r2
  81f8f0:	10001426 	beq	r2,zero,81f944 <__call_exitprocs+0x16c>
  81f8f4:	90804117 	ldw	r2,260(r18)
  81f8f8:	1884703a 	and	r2,r3,r2
  81f8fc:	10000c1e 	bne	r2,zero,81f930 <__call_exitprocs+0x158>
  81f900:	2105883a 	add	r2,r4,r4
  81f904:	1485883a 	add	r2,r2,r18
  81f908:	11400017 	ldw	r5,0(r2)
  81f90c:	e009883a 	mov	r4,fp
  81f910:	303ee83a 	callr	r6
  81f914:	88800117 	ldw	r2,4(r17)
  81f918:	98bfc81e 	bne	r19,r2,81f83c <__call_exitprocs+0x64>
  81f91c:	b8800017 	ldw	r2,0(r23)
  81f920:	147fd526 	beq	r2,r17,81f878 <__call_exitprocs+0xa0>
  81f924:	003fc506 	br	81f83c <__call_exitprocs+0x64>
  81f928:	8c000115 	stw	r16,4(r17)
  81f92c:	003fea06 	br	81f8d8 <__call_exitprocs+0x100>
  81f930:	2105883a 	add	r2,r4,r4
  81f934:	1485883a 	add	r2,r2,r18
  81f938:	11000017 	ldw	r4,0(r2)
  81f93c:	303ee83a 	callr	r6
  81f940:	003ff406 	br	81f914 <__call_exitprocs+0x13c>
  81f944:	303ee83a 	callr	r6
  81f948:	003ff206 	br	81f914 <__call_exitprocs+0x13c>
  81f94c:	88800117 	ldw	r2,4(r17)
  81f950:	1000081e 	bne	r2,zero,81f974 <__call_exitprocs+0x19c>
  81f954:	89000017 	ldw	r4,0(r17)
  81f958:	20000726 	beq	r4,zero,81f978 <__call_exitprocs+0x1a0>
  81f95c:	b9000015 	stw	r4,0(r23)
  81f960:	8809883a 	mov	r4,r17
  81f964:	080bb580 	call	80bb58 <free>
  81f968:	bc400017 	ldw	r17,0(r23)
  81f96c:	883fb71e 	bne	r17,zero,81f84c <__call_exitprocs+0x74>
  81f970:	003fc506 	br	81f888 <__call_exitprocs+0xb0>
  81f974:	89000017 	ldw	r4,0(r17)
  81f978:	882f883a 	mov	r23,r17
  81f97c:	2023883a 	mov	r17,r4
  81f980:	883fb21e 	bne	r17,zero,81f84c <__call_exitprocs+0x74>
  81f984:	003fc006 	br	81f888 <__call_exitprocs+0xb0>

0081f988 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81f988:	defffd04 	addi	sp,sp,-12
  81f98c:	df000215 	stw	fp,8(sp)
  81f990:	df000204 	addi	fp,sp,8
  81f994:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81f998:	e0bfff17 	ldw	r2,-4(fp)
  81f99c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81f9a0:	e0bffe17 	ldw	r2,-8(fp)
  81f9a4:	1005003a 	cmpeq	r2,r2,zero
  81f9a8:	1000021e 	bne	r2,zero,81f9b4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81f9ac:	002af070 	cmpltui	zero,zero,43969
  81f9b0:	00000106 	br	81f9b8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81f9b4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81f9b8:	e037883a 	mov	sp,fp
  81f9bc:	df000017 	ldw	fp,0(sp)
  81f9c0:	dec00104 	addi	sp,sp,4
  81f9c4:	f800283a 	ret

0081f9c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81f9c8:	defffd04 	addi	sp,sp,-12
  81f9cc:	dfc00215 	stw	ra,8(sp)
  81f9d0:	df000115 	stw	fp,4(sp)
  81f9d4:	df000104 	addi	fp,sp,4
  81f9d8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81f9dc:	e13fff17 	ldw	r4,-4(fp)
  81f9e0:	081f9880 	call	81f988 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81f9e4:	003fff06 	br	81f9e4 <_exit+0x1c>
  81f9e8:	00000010 	cmplti	zero,zero,0
  81f9ec:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  81f9f0:	00527a01 	jmpi	527a0 <__alt_mem_sdram-0x7ad860>
  81f9f4:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram-0x6e0840>
  81f9f8:	001b0c0b 	ldhu	zero,27696(zero)
  81f9fc:	00000028 	cmpgeui	zero,zero,0
  81fa00:	00000018 	cmpnei	zero,zero,0
  81fa04:	00813d5c 	xori	r2,zero,1269
  81fa08:	000005dc 	xori	zero,zero,23
  81fa0c:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  81fa10:	92099170 	cmpltui	r8,r18,9797
  81fa14:	95079308 	cmpgei	r20,r18,7756
  81fa18:	97049605 	stb	fp,4696(r18)
  81fa1c:	90019f03 	ldbu	zero,1660(r18)
  81fa20:	9c06940a 	0x9c06940a
  81fa24:	00000002 	0x2
  81fa28:	00000028 	cmpgeui	zero,zero,0
  81fa2c:	00000044 	movi	zero,1
  81fa30:	00814338 	rdprs	r2,zero,1292
  81fa34:	000005b0 	cmpltui	zero,zero,22
  81fa38:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  81fa3c:	92099168 	cmpgeui	r8,r18,9797
  81fa40:	95079308 	cmpgei	r20,r18,7756
  81fa44:	9c039705 	stb	r16,3676(r19)
  81fa48:	90019f02 	0x90019f02
  81fa4c:	9606940a 	0x9606940a
  81fa50:	00000004 	movi	zero,0
  81fa54:	0081f7d4 	movui	r2,2015
