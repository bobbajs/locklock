
StereoSystem.elf:     file format elf32-littlenios2
StereoSystem.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0003eea4 memsz 0x0003eea4 flags r-x
    LOAD off    0x0003fec4 vaddr 0x0083eec4 paddr 0x00840bc8 align 2**12
         filesz 0x00001d04 memsz 0x00001d04 flags rw-
    LOAD off    0x000428cc vaddr 0x008428cc paddr 0x008428cc align 2**12
         filesz 0x00000000 memsz 0x0000add8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00032d0c  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000c034  00832e90  00832e90  00033e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d04  0083eec4  00840bc8  0003fec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000add8  008428cc  008428cc  000428cc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00041bc8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001838  00000000  00000000  00041bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00004a31  00000000  00000000  00043428  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0004c772  00000000  00000000  00047e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000115da  00000000  00000000  000945cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0004257e  00000000  00000000  000a5ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004d64  00000000  00000000  000e8124  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00008345  00000000  00000000  000ece88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000260fb  00000000  00000000  000f51cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0011b2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000069b0  00000000  00000000  0011b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0012a18d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0012a190  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0012a19f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0012a1a0  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0012a1a1  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0012a1aa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0012a1b3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0012a1bc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0012a1c7  2**0
                  CONTENTS, READONLY
 26 .jdi          00005a69  00000000  00000000  0012a1f7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009e453  00000000  00000000  0012fc60  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800184 l    d  .text	00000000 .text
00832e90 l    d  .rodata	00000000 .rodata
0083eec4 l    d  .rwdata	00000000 .rwdata
008428cc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Button.c
00000000 l    df *ABS*	00000000 Colder.c
00000000 l    df *ABS*	00000000 Command.c
00000000 l    df *ABS*	00000000 CommandScheduler.c
00000000 l    df *ABS*	00000000 Cursor.c
00000000 l    df *ABS*	00000000 PhaseVocoder.c
00000000 l    df *ABS*	00000000 fft.c
00000000 l    df *ABS*	00000000 Database.c
00000000 l    df *ABS*	00000000 Frame.c
00000000 l    df *ABS*	00000000 Graphic.c
00000000 l    df *ABS*	00000000 ISR_vectors.c
00000000 l    df *ABS*	00000000 MemoryMgr.c
00000000 l    df *ABS*	00000000 Object.c
00000000 l    df *ABS*	00000000 Packet.c
00000000 l    df *ABS*	00000000 Playlist.c
00000000 l    df *ABS*	00000000 PushKeyController.c
00000000 l    df *ABS*	00000000 Queue.c
00000000 l    df *ABS*	00000000 RS232.c
00000000 l    df *ABS*	00000000 Range.c
00000000 l    df *ABS*	00000000 Song.c
00000000 l    df *ABS*	00000000 StereoSystem.c
00000000 l    df *ABS*	00000000 TestBot.c
00000000 l    df *ABS*	00000000 bit.c
00833c0a l     O .rodata	00000200 crc_table
00000000 l    df *ABS*	00000000 decoder.c
0080ea18 l     F .text	00000210 run_sync
0080ec28 l     F .text	00000060 error_default
00000000 l    df *ABS*	00000000 frame.c
0080ed50 l     F .text	000002d4 decode_header
00833e18 l     O .rodata	0000012c bitrate_table
00833f44 l     O .rodata	0000000c samplerate_table
00833e0c l     O .rodata	0000000c decoder_table
00000000 l    df *ABS*	00000000 huffman.c
00834050 l     O .rodata	00000038 hufftabA
00834088 l     O .rodata	00000020 hufftabB
00840b74 l     O .rwdata	00000002 hufftab0
008340a8 l     O .rodata	00000010 hufftab1
008340b8 l     O .rodata	00000020 hufftab2
008340d8 l     O .rodata	00000020 hufftab3
008340f8 l     O .rodata	00000034 hufftab5
0083412c l     O .rodata	00000038 hufftab6
00834164 l     O .rodata	00000080 hufftab7
008341e4 l     O .rodata	00000084 hufftab8
00834268 l     O .rodata	0000006c hufftab9
008342d4 l     O .rodata	000000cc hufftab10
008343a0 l     O .rodata	000000d0 hufftab11
00834470 l     O .rodata	000000c0 hufftab12
00834530 l     O .rodata	0000031c hufftab13
0083484c l     O .rodata	000002f8 hufftab15
00834b44 l     O .rodata	00000324 hufftab16
00834e68 l     O .rodata	00000304 hufftab24
00000000 l    df *ABS*	00000000 layer12.c
00835468 l     O .rodata	00000038 linear_table
00835368 l     O .rodata	00000100 sf_table
0083516c l     O .rodata	000000b4 sbquant_table
00835220 l     O .rodata	00000020 bitalloc_table
00835240 l     O .rodata	0000005a offset_table
0083529c l     O .rodata	000000cc qc_table
00000000 l    df *ABS*	00000000 layer3.c
0081067c l     F .text	00000634 III_imdct_s
0083d678 l     O .rodata	00000090 imdct_s
00810cb0 l     F .text	00000efc III_imdct_l
00811bac l     F .text	00002eb4 III_decode
008354a0 l     O .rodata	0000006c sfbwidth_table
0083550c l     O .rodata	00000048 nsfb_table
00835574 l     O .rodata	00000016 pretab
0083558c l     O .rodata	0000803c rq_table
0083d5c8 l     O .rodata	0000001c root_table
00835554 l     O .rodata	00000020 sflen_table
0083d5e4 l     O .rodata	00000078 is_lsf_table
0083d65c l     O .rodata	0000001c is_table
0083d708 l     O .rodata	00000016 sfb_48000_long
0083d71e l     O .rodata	00000027 sfb_48000_short
0083d745 l     O .rodata	00000026 sfb_48000_mixed
0083d76b l     O .rodata	00000016 sfb_44100_long
0083d781 l     O .rodata	00000027 sfb_44100_short
0083d7a8 l     O .rodata	00000026 sfb_44100_mixed
0083d7ce l     O .rodata	00000016 sfb_32000_long
0083d7e4 l     O .rodata	00000027 sfb_32000_short
0083d80b l     O .rodata	00000026 sfb_32000_mixed
0083d831 l     O .rodata	00000016 sfb_24000_long
0083d847 l     O .rodata	00000027 sfb_24000_short
0083d86e l     O .rodata	00000024 sfb_24000_mixed
0083d892 l     O .rodata	00000016 sfb_22050_long
0083d8a8 l     O .rodata	00000027 sfb_22050_short
0083d8cf l     O .rodata	00000024 sfb_22050_mixed
0083d8f3 l     O .rodata	00000027 sfb_16000_short
0083d91a l     O .rodata	00000024 sfb_16000_mixed
0083d93e l     O .rodata	00000016 sfb_8000_long
0083d954 l     O .rodata	00000027 sfb_8000_short
0083d97b l     O .rodata	00000027 sfb_8000_mixed
00000000 l    df *ABS*	00000000 stream.c
00000000 l    df *ABS*	00000000 synth.c
00815674 l     F .text	0000155c dct32
00816bd0 l     F .text	000006f4 synth_full
0083dbdc l     O .rodata	00000880 D
008172c4 l     F .text	00000720 synth_half
00000000 l    df *ABS*	00000000 timer.c
00817e14 l     F .text	00000198 scale_rational
00000000 l    df *ABS*	00000000 AudioDeviceController.c
00000000 l    df *ABS*	00000000 AudioFormat.c
00000000 l    df *ABS*	00000000 Sound.c
008197c0 l     F .text	000000a4 output
0081a114 l     F .text	00000078 error
0081a18c l     F .text	0000007c input
00000000 l    df *ABS*	00000000 SoundMixer.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0083e750 l     O .rodata	00000108 two_over_pi
0083e6d0 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0083e858 l     O .rodata	00000010 init_jk
0083e868 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_atan.c
0083e8a8 l     O .rodata	00000020 atanhi
0083e8c8 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0081f15c l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0081fb10 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00820acc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0083efc4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00822ff0 l     F .text	00000134 critical_factorization
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
008239ec l     F .text	00000058 __sprint_r
0083ea7a l     O .rodata	00000010 blanks.3452
0083ea6a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00825a50 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 ctype_.c
0083eb8b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00825c04 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00827600 l     F .text	00000058 std
0082770c l     F .text	00000008 __fp_lock
00827714 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00840b9c l     O .rwdata	00000004 charset
0083ed28 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 mprec.c
0083ee70 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0082ac38 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_kill.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00840bbc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0083f980 l     O .rwdata	00001060 jtag_uart
008409e0 l     O .rwdata	00000030 audio_and_video_config_0
00840a10 l     O .rwdata	00000030 audio
00840a40 l     O .rwdata	00000038 ps2_0
00840aa4 l     O .rwdata	00000048 char_drawer
00840a78 l     O .rwdata	0000002c rs232_0
00840aec l     O .rwdata	00000054 pixel_buffer_dma_0
00840b40 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0082b760 l     F .text	00000058 altera_avalon_jtag_uart_timeout
0082b830 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0082bce0 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 __atexit.c
0080280c g     F .text	00000190 decode
0082c0b0 g     F .text	00000014 alt_up_av_config_reset
00842934 g     O .bss	00000004 aux_status_register
00828ad8 g     F .text	00000094 _mprec_log10
0082c34c g     F .text	0000005c alt_up_av_config_read_D5M_cfg_register
0080ec88 g     F .text	00000044 mad_header_init
00804678 g     F .text	00000034 initCmdScheduler
008004f4 g     F .text	00000070 drawRange
0081a244 g     F .text	00000024 getSoundPositionMS
00828bc4 g     F .text	00000088 __any_on
00829bac g     F .text	00000070 _isatty_r
0083ee48 g     O .rodata	00000028 __mprec_tinytens
0082c08c g     F .text	00000010 alt_up_av_config_disable_interrupt
0082b09c g     F .text	00000060 alt_main
00822d84 g     F .text	0000008c strcpy
0082ca50 g     F .text	00000178 alt_up_pixel_buffer_dma_draw_vline
00802128 g     F .text	000000d8 decodeString
008220e0 g     F .text	000000a0 _puts_r
008046bc g     F .text	00000010 getCursorY
0082c538 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
0084d414 g     O .bss	00000100 alt_irq
008029bc g     F .text	00000004 moveSongToIndex
0081ec64 g     F .text	00000018 fabs
00829c1c g     F .text	00000078 _lseek_r
0080851c g     F .text	00000164 initSongInListPanel
00802df0 g     F .text	0000003c createPlaylist
00806d18 g     F .text	000003d0 getAndUpdateSongsFromTxt
0081b61c g     F .text	00000188 log
008197a4 g     F .text	0000001c checkEnd
0081b7a4 g     F .text	00000130 sqrt
00840bc8 g       *ABS*	00000000 __flash_rwdata_start
008048d4 g     F .text	0000001c moveCursor
00820630 g     F .text	00000088 __eqdf2
00802f18 g     F .text	000000b4 pause
0082f0a4 g     F .text	0000020c Check_for_Master_Boot_Record
00800ef4 g     F .text	000001dc highlightSongWithID
0081ac6c g     F .text	000001c8 loadToSoundBuffer
0080327c g     F .text	00000060 syncCreatePlaylist
0082be48 g     F .text	0000001c alt_up_audio_read_fifo_avail
0082c2b0 g     F .text	00000040 alt_up_av_config_write_audio_cfg_register
0084d6a4 g       *ABS*	00000000 __alt_heap_start
0080de78 g     F .text	0000003c initAudioBuffer
00819864 g     F .text	00000088 readFileTilOffset
0082e968 g     F .text	00000160 alt_up_sd_card_fclose
008018ac g     F .text	0000014c songButtonCollide
00822af0 g     F .text	00000074 _kill_r
008065b8 g     F .text	00000140 addExisitedListToDB
00802a00 g     F .text	00000094 removeSongFromList
00840b6c g     O .rwdata	00000008 mad_huff_quad_table
00822068 g     F .text	00000044 printf
008198ec g     F .text	00000074 initSound
0082bf74 g     F .text	0000005c alt_up_audio_record_r
00822a30 g     F .text	000000a0 _signal_r
00829708 g     F .text	00000068 __sseek
00827668 g     F .text	000000a4 __sinit
0080e290 g     F .text	00000024 mad_bit_length
0082c8c4 g     F .text	0000005c alt_up_char_buffer_string
0082c49c g     F .text	0000000c read_CE_bit
00802e2c g     F .text	00000050 setVolume
00828340 g     F .text	00000084 _setlocale_r
00827768 g     F .text	00000068 __sfmoreglue
00803ce0 g     F .text	00000134 syncCreateExisitedPlaylist
0080bf90 g     F .text	0000007c checkStartAck
008062ec g     F .text	000000f8 writeLine
0082b100 g     F .text	00000004 __malloc_unlock
00802c6c g     F .text	00000050 removeList
0082c4d0 g     F .text	0000003c alt_up_ps2_read_data_byte_timeout
0082c844 g     F .text	00000048 alt_up_rs232_read_fd
00809374 g     F .text	000000a8 drawEqulizer
00802b88 g     F .text	00000058 selectList
0080097c g     F .text	000000dc initSongButton
0081f5f4 g     F .text	00000174 __divsf3
00842958 g     O .bss	00000004 current_sector_modified
008428e4 g     O .bss	00000004 queue_lock
0082c920 g     F .text	00000058 alt_up_char_buffer_draw
0082be64 g     F .text	00000024 alt_up_audio_reset_audio_core
0082ebc4 g     F .text	00000088 Read_Sector_Data_Attempt_CRC
0080e944 g     F .text	0000004c mad_decoder_init
00809bf8 g     F .text	00000144 killImage
00821ef0 g     F .text	000000e0 memmove
008195cc g     F .text	0000001c getBitRateKbps
00827758 g     F .text	00000010 _cleanup
0081ae34 g     F .text	00000018 negativeToPositive
0080c32c g     F .text	00000234 actionBtnAnimation
00828c4c g     F .text	000000bc _Balloc
0080def0 g     F .text	0000007c loadSDCard
0081f968 g     F .text	00000094 __fixsfsi
008029c4 g     F .text	00000004 reverse
0082ddd4 g     F .text	0000006c alt_up_sd_card_is_Present
0082e94c g     F .text	0000001c Save_Modified_Sector
008195f8 g     F .text	0000001c getSampleSizeInBytes
0080f024 g     F .text	000004e8 mad_header_decode
0082d0d4 g     F .text	000000c0 alt_up_pixel_buffer_dma_draw
008206b8 g     F .text	00000088 __gtdf2
00808788 g     F .text	000000ec initScrollFrame
0080bb0c g     F .text	0000008c updateAcknowledge
00821640 g     F .text	00000010 __errno
00809d3c g     F .text	000000c8 drawVerticalLine
0082d1cc g     F .text	0000000c alt_up_pixel_buffer_dma_open_dev
008155bc g     F .text	000000b8 mad_synth_mute
0080941c g     F .text	000000f8 drawBox
00800000 g     F .entry	0000001c __reset
00842950 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
0080c828 g     F .text	0000005c initRange
0080316c g     F .text	00000088 syncRepeatList
008002b8 g     F .text	0000000c dummyCollide
008078a0 g     F .text	00000080 drawPlaylistPanel
00800020 g       *ABS*	00000000 __flash_exceptions_start
00829b38 g     F .text	00000074 _fstat_r
00801544 g     F .text	000000d0 pauseButtonCollide
00842904 g     O .bss	00000004 errno
00820a20 g     F .text	00000038 __make_dp
0081ec7c g     F .text	00000224 floor
00842988 g     O .bss	0000a470 db
0080ae64 g     F .text	00000074 initObject
0080a924 g     F .text	000002b0 mix_ISR
0080023c g     F .text	00000010 getYActionBtn
0082be88 g     F .text	00000014 alt_up_audio_write_interrupt_pending
0080e0e4 g     F .text	00000004 dBTester
0080c138 g     F .text	00000140 sendStats
00821000 g     F .text	0000002c __make_fp
008428dc g     O .bss	00000004 char_buffer
008019f8 g     F .text	00000458 playButtonCollide
0084291c g     O .bss	00000004 alt_argv
008029b8 g     F .text	00000004 updateSongToPlaylist
00800b48 g     F .text	000000d4 initVolumeButton
00848b6c g       *ABS*	00000000 _gp
00832450 g     F .text	000002e8 alt_up_sd_card_fopen
00806280 g     F .text	0000006c openFileFromSD
00809ed4 g     F .text	000001ec animate_ISR
0080d980 g     F .text	00000008 getLength
0081f340 g     F .text	00000070 __subsf3
008314a0 g     F .text	000000dc alt_up_sd_card_find_first
0080bd78 g     F .text	00000138 reset
00842944 g     O .bss	00000004 command_argument_register
0082d1a4 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
0082ace4 g     F .text	00000008 getpid
0080b4c8 g     F .text	00000018 isBitSet
0080dab4 g     F .text	00000074 setSongName
00819578 g     F .text	00000054 initAudioDeviceController
0080db28 g     F .text	0000007c unloadSong
00807b10 g     F .text	000000bc drawScrollFrame
0083f800 g     O .rwdata	00000180 alt_fd_list
00808874 g     F .text	000000c4 initMenuFrame
0081c41c g     F .text	00000828 __ieee754_rem_pio2
008428d8 g     O .bss	00000004 cursor_lock
008023fc g     F .text	00000260 encodeCmd
0082e640 g     F .text	000000e0 find_first_empty_record_in_root_directory
00832864 g     F .text	00000094 alt_find_dev
00821e50 g     F .text	000000a0 memcpy
0080f664 g     F .text	000000cc mad_frame_init
0082c978 g     F .text	00000024 alt_up_char_buffer_clear
0082774c g     F .text	0000000c _cleanup_r
00820850 g     F .text	000000f8 __floatsidf
00832904 g     F .text	00000104 alt_io_redirect
008207c8 g     F .text	00000088 __ltdf2
00807118 g     F .text	00000170 preloadSongsToPlaylist
00832e90 g       *ABS*	00000000 __DTOR_END__
00817bb0 g     F .text	00000028 mad_timer_compare
0082c7b0 g     F .text	00000028 alt_up_rs232_read_data
00822180 g     F .text	00000014 puts
0081979c g     F .text	00000008 stopSound
0081526c g     F .text	00000010 mad_stream_skip
008090ac g     F .text	0000024c initMainFrame
0082e720 g     F .text	000000f4 find_first_empty_cluster
00828a28 g     F .text	000000b0 __ratio
0082de40 g     F .text	0000006c alt_up_sd_card_open_dev
0081a558 g     F .text	00000290 loadMP3Sound
0082bd38 g     F .text	0000001c alt_up_audio_read_fifo_head
0082d194 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
0082b9c0 g     F .text	0000016c altera_avalon_jtag_uart_read
008216fc g     F .text	00000014 malloc
008220ac g     F .text	00000034 _printf_r
00820c08 g     F .text	00000008 __udivsi3
0082adac g     F .text	00000084 isatty
0081b068 g     F .text	000002dc updateMixer
00822814 g     F .text	000000cc _raise_r
0083ed58 g     O .rodata	000000c8 __mprec_tens
00803e14 g     F .text	00000110 syncAddExisitedSongToList
0080b254 g     F .text	0000009c setHeader
0082cbc8 g     F .text	00000168 alt_up_pixel_buffer_dma_draw_hline
0082831c g     F .text	00000008 __locale_charset
0081cf0c g     F .text	0000052c __kernel_cos
00832ca0 g     F .text	00000038 alt_icache_flush
008428f8 g     O .bss	00000004 __malloc_top_pad
00800564 g     F .text	00000108 volumeButtonCollide
0080c278 g     F .text	000000b4 sendStartInit
00822aec g     F .text	00000004 _getpid_r
0082c154 g     F .text	00000044 alt_up_av_config_read_data
00840b98 g     O .rwdata	00000004 __mb_cur_max
00828324 g     F .text	0000000c _localeconv_r
00829344 g     F .text	0000003c __i2b
00827d00 g     F .text	0000049c __sfvwrite_r
00822968 g     F .text	000000b4 __sigtramp_r
0082deac g     F .text	00000080 get_dir_divider_location
00808de8 g     F .text	000002c4 drawAllSongsInList
008227a4 g     F .text	00000070 _sbrk_r
0084ce84 g     O .bss	00000010 up_dev
0082c9f8 g     F .text	00000058 helper_plot_pixel
0082e038 g     F .text	0000005c filename_to_upper_case
00802db4 g     F .text	0000003c createExisitedPlaylist
0080f50c g     F .text	00000124 mad_frame_decode
008033ec g     F .text	00000088 syncPause
0082dd5c g     F .text	00000038 alt_up_sd_card_set_attributes
0082e2b8 g     F .text	000001e0 Read_File_Record_At_Offset
00805f10 g     F .text	00000088 querySongByName
00829c94 g     F .text	00000078 _read_r
00806064 g     F .text	0000013c getSongsFromSD
008046ac g     F .text	00000010 getCursorX
0083f7cc g     O .rwdata	0000000c __lc_ctype
00840bb0 g     O .rwdata	00000004 alt_max_fd
0082c798 g     F .text	0000000c alt_up_rs232_check_parity
00809738 g     F .text	000000d0 draw_notransparent
0082bd1c g     F .text	0000001c alt_up_audio_write_fifo_head
00821340 g     F .text	00000138 __unpack_d
0082f8dc g     F .text	00000cfc find_file_in_directory
00829a14 g     F .text	00000110 _fclose_r
00800388 g     F .text	0000016c highlightButton
008007c4 g     F .text	000000cc animateButton
0082c4a8 g     F .text	00000008 read_num_bytes_available
008275cc g     F .text	00000034 fflush
008428fc g     O .bss	00000004 __malloc_max_sbrked_mem
0082acec g     F .text	000000c0 alt_irq_register
008428ec g     O .bss	00000008 tempBuffer
0082c488 g     F .text	0000000c read_RI_bit
0081e2b4 g     F .text	00000318 __kernel_sin
0081f9fc g     F .text	00000054 __extendsfdf2
00819a14 g     F .text	00000170 readInt
00818034 g     F .text	0000020c mad_timer_set
0080aed8 g     F .text	00000010 getBit
0082f3ec g     F .text	000000b0 alt_up_sd_card_is_FAT16
00802bfc g     F .text	00000020 openPlaylistsPanel
0081ffa0 g     F .text	00000074 __adddf3
00817ae8 g     F .text	000000c8 mad_synth_init
0081ae4c g     F .text	00000018 positiveToNegative
0080b230 g     F .text	00000024 setAck
0084cdf8 g     O .bss	00000070 com
00828908 g     F .text	00000120 __b2d
00802200 g     F .text	000001fc decodeCmd
0082d008 g     F .text	000000a8 alt_up_pixel_buffer_dma_clear_screen
0082a2e8 g     F .text	000005b0 __umoddi3
0082b000 g     F .text	0000009c lseek
00840b80 g     O .rwdata	00000004 __fdlib_version
0081a208 g     F .text	00000018 playSound
008195f0 g     F .text	00000008 getSampleSizeInBits
00840b88 g     O .rwdata	00000004 _global_impure_ptr
0080265c g     F .text	000001b0 encodeString
008048f0 g     F .text	00000040 enableCursorInterrupt
00830774 g     F .text	00000d2c get_home_directory_cluster_for_file
008221b0 g     F .text	000005f4 _realloc_r
0084d6a4 g       *ABS*	00000000 __bss_end
0082cdfc g     F .text	0000020c alt_up_pixel_buffer_dma_draw_box
0082b2cc g     F .text	000000e8 alt_tick
0081974c g     F .text	00000020 allowFade
0080024c g     F .text	0000006c querySongButtonFromID
0080baac g     F .text	00000060 sendRS232
00829d0c g     F .text	000005dc __udivdi3
008001d4 g     F .text	00000068 getXActionBtn
0081527c g     F .text	000001d8 mad_stream_errorstr
0080bb98 g     F .text	0000007c send
008196d0 g     F .text	00000020 convertToMS
00809e04 g     F .text	000000d0 drawHorizontalLine
0083ee20 g     O .rodata	00000028 __mprec_bigtens
008295a0 g     F .text	00000120 __s2b
00821540 g     F .text	00000018 abort
0080c00c g     F .text	0000012c sendAck
0082a920 g     F .text	00000194 __floatunsidf
0080af98 g     F .text	00000108 strnsep_
00828828 g     F .text	00000060 __mcmp
0084295c g     O .bss	00000004 current_sector_index
0080eccc g     F .text	00000084 mad_frame_mute
0082bf08 g     F .text	0000000c alt_up_audio_open_dev
0082c4bc g     F .text	00000008 read_data_byte
00840b94 g     O .rwdata	00000004 __ctype_ptr
00827734 g     F .text	00000018 __fp_lock_all
0080299c g     F .text	00000004 syncRemoveSongFromList
0084ce94 g     O .bss	00000018 alarm
00804034 g     F .text	000000cc syncDBFinish
0082bfd0 g     F .text	00000060 alt_up_audio_play_r
0082b298 g     F .text	00000034 alt_alarm_stop
008239c8 g     F .text	00000024 strtol
0082c494 g     F .text	00000008 read_RE_bit
0082e814 g     F .text	000000b0 mark_cluster
0080b66c g     F .text	00000028 initQueue
00842914 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	00000098 alt_irq_handler
0083f7d8 g     O .rwdata	00000028 alt_dev_null
00807838 g     F .text	00000004 killSongPanel
0081d438 g     F .text	00000e7c __kernel_rem_pio2
0082d944 g     F .text	000002e0 convert_filename_to_name_extension
00819774 g     F .text	00000010 setFadeOutLength
00820e90 g     F .text	000000c8 __unpack_f
0082c50c g     F .text	0000002c alt_up_ps2_write_data_byte
0080783c g     F .text	00000064 drawSongPanel
00832738 g     F .text	00000018 alt_dcache_flush_all
008286f4 g     F .text	00000070 __hi0bits
00842930 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0082cd30 g     F .text	000000cc alt_up_pixel_buffer_dma_draw_rectangle
00821570 g     F .text	0000001c calloc
0081afd4 g     F .text	00000094 initSoundMixer
00820948 g     F .text	000000d8 __fixdfsi
00817cc4 g     F .text	00000150 mad_timer_multiply
00808c74 g     F .text	00000174 initPlaylistPanel
00831a00 g     F .text	0000032c find_first_empty_record_in_a_subdirectory
00808680 g     F .text	00000108 initVolumeFrame
00840bc8 g       *ABS*	00000000 __ram_rwdata_end
00819540 g     F .text	00000038 av_config_setup
008195e8 g     F .text	00000008 getSampleRate
00840ba8 g     O .rwdata	00000008 alt_dev_list
0080ba8c g     F .text	00000020 setStates
0082b3b4 g     F .text	00000118 write
00800a58 g     F .text	000000f0 initMenuButton
0081b8d4 g     F .text	00000350 __ieee754_atan2
00842954 g     O .bss	00000004 device_pointer
0082d1d8 g     F .text	0000029c alt_up_pixel_buffer_dma_draw_line
0081f7e0 g     F .text	00000078 __gtsf2
0080f630 g     F .text	00000034 mad_frame_finish
0080e0e0 g     F .text	00000004 graphicTester
0083eec4 g       *ABS*	00000000 __ram_rodata_end
0080e2b4 g     F .text	00000020 mad_bit_nextbyte
0081961c g     F .text	00000008 setSampleRate
0082ac54 g     F .text	00000090 fstat
008196c8 g     F .text	00000008 convertFromMS
00821688 g     F .text	0000002c fprintf
0082c88c g     F .text	00000038 alt_up_rs232_write_fd
0080deb4 g     F .text	0000003c initAnimate
00807da4 g     F .text	0000009c killSongInListPanel
0082ae30 g     F .text	0000011c kill
0080b620 g     F .text	0000004c containsValue
00822c38 g     F .text	00000090 strcat
00805d00 g     F .text	00000030 isCurrPlaying
00819790 g     F .text	0000000c seekSound
00829480 g     F .text	00000120 __pow5mult
00842908 g     O .bss	00000004 __nlocale_changed
00820c10 g     F .text	00000008 __umodsi3
00800e2c g     F .text	000000c8 initPlaylistButton
00840b78 g     O .rwdata	00000008 mad_timer_zero
0084d6a4 g       *ABS*	00000000 end
0082c628 g     F .text	00000048 alt_up_ps2_write_fd
00820d30 g     F .text	00000160 __pack_f
0082c9a8 g     F .text	00000050 alt_up_char_buffer_init
00802bf0 g     F .text	0000000c openSongsFromList
00821558 g     F .text	0000000c _atoi_r
008066f8 g     F .text	0000010c addListToDB
00801e50 g     F .text	000002d0 actionButtonCollide
008428cc g     O .bss	00000004 song_id_lock
0082b7b8 g     F .text	00000078 altera_avalon_jtag_uart_init
00806804 g     F .text	00000058 addSongToDB
00832e8c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0082bcb0 g     F .text	00000030 alt_avalon_timer_sc_init
00820cb0 g     F .text	00000080 __clzsi2
0082bb2c g     F .text	00000184 altera_avalon_jtag_uart_write
0081b344 g     F .text	00000168 cos
00827658 g     F .text	00000004 __sfp_lock_acquire
0080e990 g     F .text	00000008 mad_decoder_finish
00828574 g     F .text	000000e4 memchr
00823a44 g     F .text	00001eac ___vfprintf_internal_r
00822bd8 g     F .text	00000060 _sprintf_r
008279ec g     F .text	00000314 _free_r
00804a68 g     F .text	000002a8 updateCursor
0080b84c g     F .text	0000012c dequeueValue
0080daac g     F .text	00000008 setSongVolume
00825a54 g     F .text	000001b0 __call_exitprocs
0084290c g     O .bss	00000004 __mlocale_changed
00840b90 g     O .rwdata	00000004 __malloc_sbrk_base
00800184 g     F .text	0000004c _start
00842924 g     O .bss	00000004 _alt_tick_rate
00823124 g     F .text	00000660 strstr
008033a0 g     F .text	0000004c syncStop
0081b4ac g     F .text	0000016c sin
0082bd54 g     F .text	0000006c alt_up_audio_write_fifo
00807e68 g     F .text	000001e4 drawSongInListPanel
00807508 g     F .text	000001e8 loadListsFromSD
00829010 g     F .text	0000014c __lshift
0082c100 g     F .text	00000020 alt_up_av_config_write_data
0081b618 g     F .text	00000004 atan2
00842928 g     O .bss	00000004 _alt_nticks
00822ad0 g     F .text	0000001c signal
00803a78 g     F .text	00000268 play
0082b104 g     F .text	0000011c read
0082b4ec g     F .text	000001f0 alt_sys_init
0081f8d0 g     F .text	00000098 __floatsisf
00806cf8 g     F .text	00000020 saveAllUpdatesToSDBeforeQuits
0082bdc0 g     F .text	0000006c alt_up_audio_read_fifo
00832cec g     F .text	00000134 __register_exitproc
0082c198 g     F .text	0000003c alt_up_av_config_write_LTM_cfg_register
008029c8 g     F .text	00000004 updateDBIndex
00800768 g     F .text	0000005c initButton
0082beb0 g     F .text	00000018 alt_up_audio_disable_write_interrupt
0080d978 g     F .text	00000008 setSongId
0082c56c g     F .text	00000014 alt_up_ps2_clear_fifo
0082c7d8 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00803f24 g     F .text	00000110 syncAddSongToList
00807d0c g     F .text	00000098 drawMainFrame
0082915c g     F .text	000001e8 __multiply
0082b718 g     F .text	00000048 altera_avalon_jtag_uart_close
00800374 g     F .text	00000014 drawActionButton
008179e4 g     F .text	00000104 mad_synth_frame
0080a28c g     F .text	0000050c RS232_ISR
0083eec4 g       *ABS*	00000000 __ram_rwdata_start
00832e90 g       *ABS*	00000000 __ram_rodata_start
00822f34 g     F .text	000000bc strncpy
00842960 g     O .bss	00000028 __malloc_current_mallinfo
0081f768 g     F .text	00000078 __eqsf2
00828d08 g     F .text	0000017c __d2b
008029a0 g     F .text	00000018 repeatList
0084292c g     O .bss	00000004 initialized
008012ac g     F .text	000000e8 nextButtonCollide
00819624 g     F .text	000000a4 initAudioFormat
00822194 g     F .text	0000001c realloc
0082b708 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00832c40 g     F .text	00000060 alt_get_fd
0080ae50 g     F .text	00000014 setNextXY
0084ceac g     O .bss	00000014 search_data
00821478 g     F .text	000000c8 __fpcmp_parts_d
008032dc g     F .text	000000c4 syncSetVol
008076f0 g     F .text	00000148 initDatabase
008299a4 g     F .text	00000070 _close_r
0082bec8 g     F .text	00000014 alt_up_audio_enable_write_interrupt
00805d30 g     F .text	00000040 removeCurrPlaying
00819b84 g     F .text	000000c4 changeBitsPerSample
008030e4 g     F .text	00000088 syncRemoveList
00801614 g     F .text	00000298 playSongsFromSongPanel
00828658 g     F .text	00000074 memcmp
0084ce68 g     O .bss	0000001c memMgr
0082b6e8 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00815454 g     F .text	000000a8 mad_stream_sync
0084d6a4 g       *ABS*	00000000 __alt_stack_base
00808a54 g     F .text	00000220 initActionFrame
0082b6dc g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00807a88 g     F .text	00000088 drawVolumeFrame
0081aee0 g     F .text	00000018 clearIndexBuffer
0080d988 g     F .text	00000008 getSongPosition
008082dc g     F .text	00000240 drawAllSongs
008073fc g     F .text	0000010c updateSongToSD
00825914 g     F .text	0000013c __swsetup_r
00819784 g     F .text	0000000c setSoundVolume
008203d8 g     F .text	00000258 __divdf3
0082bedc g     F .text	00000018 alt_up_audio_disable_read_interrupt
008277d0 g     F .text	000000f0 __sfp
0084cec0 g     O .bss	00000054 boot_sector_data
00822e84 g     F .text	000000b0 strncat
00828b6c g     F .text	00000058 __copybits
0080adf8 g     F .text	0000002c initMemory
0083f3c4 g     O .rwdata	00000408 __malloc_av_
00827664 g     F .text	00000004 __sinit_lock_release
00820014 g     F .text	000003c4 __muldf3
008297ec g     F .text	00000060 __sread
0080ad10 g     F .text	000000e8 addToMemory
0083e8e8 g     O .rodata	00000010 __thenan_sf
0082c800 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00832b90 g     F .text	000000b0 alt_find_file
00832750 g     F .text	0000007c alt_dev_llist_insert
0082b0fc g     F .text	00000004 __malloc_lock
008216b4 g     F .text	00000034 _fprintf_r
0082b244 g     F .text	00000054 sbrk
00808938 g     F .text	0000011c initSongPanel
00805f98 g     F .text	000000cc queryListByName
008273d0 g     F .text	000001fc _fflush_r
0082158c g     F .text	000000b4 _calloc_r
0080e9a0 g     F .text	00000078 mad_decoder_run
0080da48 g     F .text	0000005c pauseSong
0083eec4 g     O .rwdata	00000100 __divsi3_table
008428cc g       *ABS*	00000000 __bss_start
0080aee8 g     F .text	00000018 setBit
00821fd0 g     F .text	00000098 memset
00817c40 g     F .text	00000084 mad_timer_add
008001d0 g     F .text	00000004 dummyDraw
0080df6c g     F .text	00000174 main
00804208 g     F .text	00000468 cmdProcessing
0082be2c g     F .text	0000001c alt_up_audio_write_fifo_space
00842920 g     O .bss	00000004 alt_envp
00842900 g     O .bss	00000004 __malloc_max_total_mem
0082d0b0 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00801480 g     F .text	000000c4 stopButtonCollide
0080e40c g     F .text	00000538 mad_bit_crc
0082c99c g     F .text	0000000c alt_up_char_buffer_open_dev
0082b6f8 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00819960 g     F .text	000000a8 allocateSoundBuffer
0080beb0 g     F .text	0000003c failReceive
0080393c g     F .text	0000013c syncUpdatePos
0080ae24 g     F .text	0000002c setXY
0082dd94 g     F .text	00000040 alt_up_sd_card_get_attributes
0080af00 g     F .text	00000098 initPacket
008036ac g     F .text	00000108 prev
00804670 g     F .text	00000008 addCmd
0082e498 g     F .text	000000ac Write_Sector_Data
008154fc g     F .text	00000024 mad_stream_buffer
0083157c g     F .text	00000484 alt_up_sd_card_write
008029cc g     F .text	00000010 play_playlist
00829700 g     F .text	00000008 __sclose
0081eed0 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
008428d0 g     O .bss	00000004 soundMixer
00829b24 g     F .text	00000014 fclose
0082c580 g     F .text	00000024 alt_up_ps2_read_data_byte
00823784 g     F .text	00000244 _strtol_r
00820a58 g     F .text	00000074 __truncdfsf2
0080beec g     F .text	000000a4 checkAck
00802a94 g     F .text	000000f4 addSongToList
00802d6c g     F .text	0000001c modifyListName
0084d514 g     O .bss	00000190 _atexit0
00825e1c g     F .text	000015b4 _dtoa_r
00821710 g     F .text	00000740 _malloc_r
0080e2d4 g     F .text	0000005c mad_bit_skip
00840bb4 g     O .rwdata	00000004 alt_errno
00814a60 g     F .text	0000080c mad_layer_III
0080b0a0 g     F .text	00000068 killPacket
00822958 g     F .text	00000010 _init_signal
008092f8 g     F .text	00000020 getColor
00802be0 g     F .text	00000010 seek
00828264 g     F .text	000000b8 _fwalk
0080dba4 g     F .text	00000074 loadSong
008196f0 g     F .text	0000005c getMaxSoundValue
00809358 g     F .text	0000001c setImagePos
0080e27c g     F .text	00000014 mad_bit_init
0082c4c4 g     F .text	0000000c alt_up_ps2_open_dev
0080daa4 g     F .text	00000008 setSongPitch
00820b48 g     F .text	00000060 __divsi3
0080b380 g     F .text	00000038 killPlaylist
0080c884 g     F .text	000010f4 checkButtonCollision
0083e8f8 g     O .rodata	00000014 __thenan_df
008278c0 g     F .text	0000012c _malloc_trim_r
0082c554 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
0080b75c g     F .text	00000044 killQueueData
00832e90 g       *ABS*	00000000 __CTOR_END__
0081f414 g     F .text	000001e0 __mulsf3
00809514 g     F .text	000000b0 initImage
00842938 g     O .bss	00000004 status_register
00822cc8 g     F .text	000000bc strcmp
00842940 g     O .bss	00000004 command_register
0080abd4 g     F .text	0000013c freeMem
0081ae64 g     F .text	0000007c incIndex
00832e90 g       *ABS*	00000000 __flash_rodata_start
0080b5d4 g     F .text	0000004c wasKeyJustPressed
00832e90 g       *ABS*	00000000 __DTOR_LIST__
0082c7a4 g     F .text	0000000c alt_up_rs232_open_dev
00800c1c g     F .text	000000c4 initScrollButton
0081f0c8 g     F .text	00000024 copysign
00800354 g     F .text	00000020 drawTxtButton
0082a898 g     F .text	00000088 __nedf2
0082c120 g     F .text	00000034 alt_up_av_config_open_dev
0082b4cc g     F .text	00000020 alt_irq_init
008095c4 g     F .text	00000098 initVGA
0080a798 g     F .text	0000018c ps2_ISR
0082b220 g     F .text	00000024 alt_release_fd
0082e8c4 g     F .text	00000088 get_cluster_flag
0080b4e0 g     F .text	00000024 isKeyUp
008029ec g     F .text	00000014 playSongFromList
0081e5cc g     F .text	00000698 atan
0082c4b0 g     F .text	0000000c read_data_valid
00822b64 g     F .text	00000074 sprintf
0083e90c g     O .rodata	00000100 __clz_tab
0082e094 g     F .text	00000224 Write_File_Record_At_Offset
00842910 g     O .bss	00000004 _PathLocale
008428e0 g     O .bss	00000004 pixel_buffer
00802c3c g     F .text	00000030 playSongFromAllSongs
0082c670 g     F .text	00000060 alt_up_ps2_write_data_byte_with_ack
00832cd8 g     F .text	00000014 atexit
0081f858 g     F .text	00000078 __gesf2
0082992c g     F .text	00000078 _write_r
00815588 g     F .text	00000034 mad_stream_finish
0082c0c4 g     F .text	00000014 alt_up_av_config_read_ready
008002c4 g     F .text	00000090 updateVolumeValue
008283c4 g     F .text	0000001c setlocale
008194f4 g     F .text	00000010 disableAudioDeviceController
0082ec4c g     F .text	00000458 Check_for_DOS_FAT
00819f78 g     F .text	0000013c loadSoundBuffer
00831d2c g     F .text	00000724 create_file
00840b84 g     O .rwdata	00000004 _impure_ptr
0084293c g     O .bss	00000004 CSD_register_w0
00842918 g     O .bss	00000004 alt_argc
00802cbc g     F .text	000000b0 killCmd
0081eee8 g     F .text	000001e0 scalbn
00832818 g     F .text	0000004c _do_dtors
0081bc24 g     F .text	000007f8 __ieee754_log
00833f50 g     O .rodata	00000100 mad_huff_pair_table
00803564 g     F .text	00000148 next
0080e0e8 g     F .text	00000074 soundTester
00807288 g     F .text	00000174 saveListsToSD
00800020 g       .exceptions	00000000 alt_irq_entry
00804d10 g     F .text	00000bf4 pitchShift
00828888 g     F .text	00000080 __ulp
008296c0 g     F .text	00000040 __isinfd
0082771c g     F .text	00000018 __fp_unlock_all
0080dc18 g     F .text	000000b4 initSong
008428e8 g     O .bss	00000004 mouse
00809808 g     F .text	000003f0 loadSDImage
00817bd8 g     F .text	00000034 mad_timer_negate
0080b978 g     F .text	000000fc addPacketsLengthToQueue
00807bcc g     F .text	0000008c drawActionFrame
00805904 g     F .text	000003fc fft
00840ba0 g     O .rwdata	00000008 alt_fs_list
0082df2c g     F .text	0000010c check_file_name_for_FAT16_compliance
00819504 g     F .text	0000003c enableAudioDeviceController
00842948 g     O .bss	00000004 buffer_memory
00802fcc g     F .text	00000118 initCmd
0082c81c g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0082bf14 g     F .text	00000060 alt_up_audio_record_l
00801394 g     F .text	000000ec prevButtonCollide
00817c0c g     F .text	00000034 mad_timer_abs
00815520 g     F .text	00000068 mad_stream_init
0082c7e8 g     F .text	00000018 alt_up_rs232_write_data
0080b694 g     F .text	000000c8 enqueue
0081eed8 g     F .text	00000010 nan
00818b68 g     F .text	0000098c mad_timer_string
0080b42c g     F .text	0000009c initPlaylist
00800ce0 g     F .text	0000014c initActionButton
00800020 g       *ABS*	00000000 __ram_exceptions_start
0081aa8c g     F .text	00000154 loadWavSound
0081aef8 g     F .text	00000090 setGlobalVolume
00828330 g     F .text	00000010 localeconv
0080bc14 g     F .text	00000164 initRS232
008428d4 g     O .bss	00000004 SDIO_lock
008037b4 g     F .text	000000c4 syncNext
0080e998 g     F .text	00000008 mad_decoder_message
0081cc44 g     F .text	000002c8 __ieee754_sqrt
0082c09c g     F .text	00000014 alt_up_av_config_enable_interrupt
0080b108 g     F .text	00000128 readPacketHeader
0080e15c g     F .text	00000090 cmdTester
0081abe0 g     F .text	0000008c loadSound
00809330 g     F .text	00000028 addImage
0084294c g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0080b7a0 g     F .text	000000ac dequeue
0080b3b8 g     F .text	00000074 setListName
0082c0d8 g     F .text	00000028 alt_up_av_config_read_acknowledge
0082c210 g     F .text	00000040 alt_up_av_config_write_DC2_cfg_register
00803474 g     F .text	000000f0 syncPlay
00840bc8 g       *ABS*	00000000 _edata
00800890 g     F .text	000000ec menuButtonCollide
0084d6a4 g       *ABS*	00000000 _end
0084cf14 g     O .bss	00000500 active_files
00819614 g     F .text	00000008 getNumChannels
00800184 g       *ABS*	00000000 __ram_exceptions_end
0082dc24 g     F .text	00000138 copy_file_record_name_to_string
0082b938 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
0081a220 g     F .text	00000024 getSoundLengthMS
0080a0c0 g     F .text	0000009c audio_ISR
008428f4 g     O .bss	00000004 MIX_LOCK
0082f2b0 g     F .text	0000013c Look_for_FAT16
0082c030 g     F .text	0000005c alt_up_audio_play_l
0081a0b4 g     F .text	00000060 setSoundPlaybackSpeed
00829770 g     F .text	0000007c __swrite
008006c4 g     F .text	00000058 playlistMenuButtonCollide
0080b504 g     F .text	00000028 isKeyDown
008046cc g     F .text	00000208 memOverlap
008029c0 g     F .text	00000004 repeatCurrentSong
00840b8c g     O .rwdata	00000004 __malloc_trim_threshold
00832b88 g     F .text	00000008 altera_nios2_qsys_irq_init
00821650 g     F .text	00000038 exit
0082f49c g     F .text	00000440 alt_up_sd_card_find_next
0082819c g     F .text	000000c8 _fwalk_reent
0081fa50 g     F .text	000000c0 __floatunsisf
0082c6d0 g     F .text	000000c8 alt_up_ps2_init
00828e84 g     F .text	0000018c __mdiff
0082c2f0 g     F .text	0000005c alt_up_av_config_read_LTM_cfg_register
008010d0 g     F .text	000001dc playlistButtonCollide
00820ba8 g     F .text	00000060 __modsi3
0080c6cc g     F .text	0000015c checkTxtCollisionForMouse
00804930 g     F .text	00000138 initCursor
00802120 g     F .text	00000008 decodePlaylist
00804100 g     F .text	00000108 syncCreateSong
00817fac g     F .text	00000088 mad_timer_fraction
0082e544 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0082765c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080071c g     F .text	0000004c killSongButton
00821564 g     F .text	0000000c atoi
008031f4 g     F .text	00000088 syncSelectList
00819c48 g     F .text	00000330 resampleSound
0083ea8a g     O .rodata	00000101 _ctype_
0080d990 g     F .text	00000008 seekSong
008063e4 g     F .text	000000fc readLine
0080685c g     F .text	00000184 update
0080d998 g     F .text	000000b0 stopSong
0080804c g     F .text	00000290 drawAllLists
0080965c g     F .text	000000dc draw
0080066c g     F .text	00000058 allSongsMenuButtonCollide
0081f0ec g     F .text	00000070 __fixunssfsi
00820f58 g     F .text	000000a8 __fpcmp_parts_f
0082ac40 g     F .text	00000014 _exit
0081eea0 g     F .text	00000030 __isnand
0082aab4 g     F .text	00000094 alt_alarm_start
00820c18 g     F .text	00000098 __muldi3
0082eac8 g     F .text	000000fc Read_Sector_Data_CRC
008305d8 g     F .text	0000019c alt_up_sd_card_read
008283e0 g     F .text	00000194 __smakebuf_r
0080b52c g     F .text	00000060 initPushKeyController
0080c560 g     F .text	0000016c checkImgCollisionForMouse
0082c5e8 g     F .text	00000040 alt_up_ps2_wait_for_ack
00819a08 g     F .text	0000000c clearSoundBuffer
00822e10 g     F .text	00000074 strlen
008228f4 g     F .text	00000064 _init_signal_r
00832a08 g     F .text	00000180 open
00805d70 g     F .text	000001a0 initializeListWithSongs
0080e330 g     F .text	000000dc mad_bit_read
00820740 g     F .text	00000088 __gedf2
008070e8 g     F .text	00000030 loadSongsFromSD
0080dccc g     F .text	000001ac playSong
0080fbe4 g     F .text	00000a98 mad_layer_II
00802e7c g     F .text	0000009c stop
0082c408 g     F .text	00000080 alt_up_av_config_read_video_cfg_register
00803878 g     F .text	000000c4 syncPrev
0081a7e8 g     F .text	000002a4 loadWavHeader
008328f8 g     F .text	0000000c alt_icache_flush_all
0082984c g     F .text	000000e0 strchr
00840bb8 g     O .rwdata	00000004 alt_priority_mask
008064e0 g     F .text	000000d8 removeListFromDB
00807920 g     F .text	00000168 clearSongPanel
00807c58 g     F .text	000000b4 drawMenuFrame
008258f0 g     F .text	00000024 __vfprintf_internal
0082c1d4 g     F .text	0000003c alt_up_av_config_write_D5M_cfg_register
0080b2f8 g     F .text	00000088 generateListNameForSD
0080f730 g     F .text	000004b4 mad_layer_I
0082c5a4 g     F .text	00000044 alt_up_ps2_read_fd
008069e0 g     F .text	00000318 saveListChangesToSD
0081ff20 g     F .text	00000080 __subdf3
008029dc g     F .text	00000010 shuffle
00802c1c g     F .text	00000020 openAllSongPanel
00807e40 g     F .text	00000028 initFrame
00828764 g     F .text	000000c4 __lo0bits
0080ba74 g     F .text	00000018 switchAck
00840bc0 g     O .rwdata	00000008 alt_alarm_list
008327cc g     F .text	0000004c _do_ctors
00822a1c g     F .text	00000014 __sigtramp
0082c834 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0082ab48 g     F .text	000000f0 close
0081f3b0 g     F .text	00000064 __addsf3
0081af88 g     F .text	0000004c clearSoundMixer
0080b2f0 g     F .text	00000008 setListId
0082af4c g     F .text	000000b4 alt_load
0082bef4 g     F .text	00000014 alt_up_audio_enable_read_interrupt
0081976c g     F .text	00000008 setFadeInLength
0082c250 g     F .text	00000060 alt_up_av_config_write_video_cfg_register
00802d88 g     F .text	0000002c createSong
0082102c g     F .text	00000314 __pack_d
008061a0 g     F .text	000000e0 createPlaylistFromTxt
0080b58c g     F .text	00000048 wasKeyJustReleased
0080a15c g     F .text	00000130 push_key_ISR
00818240 g     F .text	00000928 mad_timer_count
0082d474 g     F .text	000004d0 match_file_record_to_name_ext
0080e1ec g     F .text	00000090 dbTester2
00809318 g     F .text	00000018 getColor555
008228e0 g     F .text	00000014 raise
008216e8 g     F .text	00000014 free
00827660 g     F .text	00000004 __sinit_lock_acquire
00829380 g     F .text	00000100 __multadd
008286cc g     F .text	00000028 _Bfree
0082c3a8 g     F .text	00000060 alt_up_av_config_read_DC2_cfg_register
0082be9c g     F .text	00000014 alt_up_audio_read_interrupt_pending
0081a268 g     F .text	000002f0 setSoundPitch



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	0009313a 	rdctl	r4,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  8000fc:	2080004c 	andi	r2,r4,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002174 	movhi	r16,133
  800108:	84350504 	addi	r16,r16,-11244
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	000b883a 	mov	r5,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	20c4703a 	and	r2,r4,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800120:	29400044 	addi	r5,r5,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800128:	280490fa 	slli	r2,r5,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	1009883a 	mov	r4,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800148:	2080004c 	andi	r2,r4,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800158:	280490fa 	slli	r2,r5,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800184:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  800188:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80018c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  800190:	00bffd16 	blt	zero,r2,800188 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800194:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80019c:	06802134 	movhi	gp,132
    ori gp, gp, %lo(_gp)
  8001a0:	d6a2db14 	ori	gp,gp,35692
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001a4:	00802134 	movhi	r2,132
    ori r2, r2, %lo(__bss_start)
  8001a8:	108a3314 	ori	r2,r2,10444

    movhi r3, %hi(__bss_end)
  8001ac:	00c02134 	movhi	r3,132
    ori r3, r3, %lo(__bss_end)
  8001b0:	18f5a914 	ori	r3,r3,54948

    beq r2, r3, 1f
  8001b4:	10c00326 	beq	r2,r3,8001c4 <_start+0x40>

0:
    stw zero, (r2)
  8001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c0:	10fffd36 	bltu	r2,r3,8001b8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001c4:	082af4c0 	call	82af4c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001c8:	082b09c0 	call	82b09c <alt_main>

008001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001cc:	003fff06 	br	8001cc <alt_after_alt_main>

008001d0 <dummyDraw>:
	alt_up_char_buffer_string(char_buffer, this->name, this->x_pos, this->y_pos);
}
void drawActionButton(struct Button* this){
	draw(this->x_pos, this->y_pos, this->stats[0]);
}
void dummyDraw(struct Button* this){}
  8001d0:	f800283a 	ret

008001d4 <getXActionBtn>:
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  8001d4:	00800104 	movi	r2,4
  8001d8:	11000c36 	bltu	r2,r4,80020c <getXActionBtn+0x38>
  8001dc:	2105883a 	add	r2,r4,r4
  8001e0:	1085883a 	add	r2,r2,r2
  8001e4:	00c02034 	movhi	r3,128
  8001e8:	18c07e04 	addi	r3,r3,504
  8001ec:	10c5883a 	add	r2,r2,r3
  8001f0:	11000017 	ldw	r4,0(r2)
  8001f4:	2000683a 	jmp	r4
  8001f8:	00800214 	movui	r2,8
  8001fc:	00800234 	movhi	r2,8
  800200:	0080022c 	andhi	r2,zero,8
  800204:	00800224 	muli	r2,zero,8
  800208:	0080021c 	xori	r2,zero,8
  80020c:	0005883a 	mov	r2,zero
  800210:	f800283a 	ret
  800214:	00802444 	movi	r2,145
  800218:	f800283a 	ret
  80021c:	00803344 	movi	r2,205
  800220:	f800283a 	ret
	case 1:
		x = 120;
		break;
	case 2:
		x = 180;
		break;
  800224:	008017c4 	movi	r2,95
		break;
	default:
		break;
	}
	return x;
}
  800228:	f800283a 	ret
	case 0:
		x = 145;
		break;
	case 1:
		x = 120;
		break;
  80022c:	00802d04 	movi	r2,180
  800230:	f800283a 	ret
int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
	case 0:
		x = 145;
		break;
  800234:	00801e04 	movi	r2,120
  800238:	f800283a 	ret

0080023c <getYActionBtn>:
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  80023c:	00803204 	movi	r2,200
  800240:	20000126 	beq	r4,zero,800248 <getYActionBtn+0xc>
  800244:	00803344 	movi	r2,205
	default:
		y = 205;
		break;
	}
	return y;
}
  800248:	f800283a 	ret

0080024c <querySongButtonFromID>:

struct Button* querySongButtonFromID(int song_id){
	int i = 1;
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
  80024c:	00800384 	movi	r2,14
		printf("Query returns NULL song ID > 14\n");
	}
	updateVolumeValue(song_id);
}

struct Button* querySongButtonFromID(int song_id){
  800250:	200d883a 	mov	r6,r4
	int i = 1;
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
  800254:	1100030e 	bge	r2,r4,800264 <querySongButtonFromID+0x18>
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  800258:	0007883a 	mov	r3,zero
		if (mouse->frame->elements[2]->buttons[i]->id == song_id){
			return mouse->frame->elements[2]->buttons[i];
		}
	}
	return NULL;
}
  80025c:	1805883a 	mov	r2,r3
  800260:	f800283a 	ret
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  800264:	00802134 	movhi	r2,132
  800268:	108a3a04 	addi	r2,r2,10472
  80026c:	11000017 	ldw	r4,0(r2)
  800270:	01400044 	movi	r5,1
  800274:	20800317 	ldw	r2,12(r4)
  800278:	10c00017 	ldw	r3,0(r2)
  80027c:	18800217 	ldw	r2,8(r3)
  800280:	11c00317 	ldw	r7,12(r2)
  800284:	29fff40e 	bge	r5,r7,800258 <querySongButtonFromID+0xc>
		if (mouse->frame->elements[2]->buttons[i]->id == song_id){
  800288:	11000117 	ldw	r4,4(r2)
  80028c:	20c00117 	ldw	r3,4(r4)
  800290:	18800317 	ldw	r2,12(r3)
  800294:	3080051e 	bne	r6,r2,8002ac <querySongButtonFromID+0x60>
  800298:	003ff006 	br	80025c <querySongButtonFromID+0x10>
  80029c:	20c00217 	ldw	r3,8(r4)
  8002a0:	21000104 	addi	r4,r4,4
  8002a4:	18800317 	ldw	r2,12(r3)
  8002a8:	30bfec26 	beq	r6,r2,80025c <querySongButtonFromID+0x10>
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  8002ac:	29400044 	addi	r5,r5,1
  8002b0:	29fffa1e 	bne	r5,r7,80029c <querySongButtonFromID+0x50>
  8002b4:	003fe806 	br	800258 <querySongButtonFromID+0xc>

008002b8 <dummyCollide>:
	//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id+1]);
	printf("Next button is clicked.\n");
}

void dummyCollide(struct Button* this){
	printf("ERROR:Dummy Collide is called.\n");
  8002b8:	010020f4 	movhi	r4,131
  8002bc:	210ba404 	addi	r4,r4,11920
  8002c0:	08221801 	jmpi	822180 <puts>

008002c4 <updateVolumeValue>:

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
  8002c4:	defffd04 	addi	sp,sp,-12
  8002c8:	2005883a 	mov	r2,r4
  8002cc:	dc000115 	stw	r16,4(sp)
  8002d0:	dfc00215 	stw	ra,8(sp)
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8002d4:	014020f4 	movhi	r5,131
  8002d8:	294bac04 	addi	r5,r5,11952
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8002dc:	04002134 	movhi	r16,132
  8002e0:	840a3704 	addi	r16,r16,10460
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8002e4:	d809883a 	mov	r4,sp
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  8002e8:	10001826 	beq	r2,zero,80034c <updateVolumeValue+0x88>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8002ec:	1085883a 	add	r2,r2,r2
  8002f0:	00c02134 	movhi	r3,132
  8002f4:	18ca6204 	addi	r3,r3,10632
  8002f8:	1085883a 	add	r2,r2,r2
  8002fc:	10c5883a 	add	r2,r2,r3
  800300:	11c03617 	ldw	r7,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  800304:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  800308:	39800717 	ldw	r6,28(r7)
  80030c:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  800310:	81000017 	ldw	r4,0(r16)
  800314:	014020f4 	movhi	r5,131
  800318:	294bad04 	addi	r5,r5,11956
  80031c:	018001c4 	movi	r6,7
  800320:	01c00d84 	movi	r7,54
  800324:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  800328:	81000017 	ldw	r4,0(r16)
  80032c:	d80b883a 	mov	r5,sp
  800330:	01800204 	movi	r6,8
  800334:	01c00d84 	movi	r7,54
  800338:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
}
  80033c:	dfc00217 	ldw	ra,8(sp)
  800340:	dc000117 	ldw	r16,4(sp)
  800344:	dec00304 	addi	sp,sp,12
  800348:	f800283a 	ret
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  80034c:	00800044 	movi	r2,1
  800350:	003fe606 	br	8002ec <updateVolumeValue+0x28>

00800354 <drawTxtButton>:
	vb->draw = drawActionButton;
	vb->collide = volumeButtonCollide;
	return vb;
}

void drawTxtButton(struct Button* this){
  800354:	200d883a 	mov	r6,r4
	alt_up_char_buffer_string(char_buffer, this->name, this->x_pos, this->y_pos);
  800358:	00802134 	movhi	r2,132
  80035c:	108a3704 	addi	r2,r2,10460
  800360:	31c00817 	ldw	r7,32(r6)
  800364:	31400b17 	ldw	r5,44(r6)
  800368:	11000017 	ldw	r4,0(r2)
  80036c:	31800717 	ldw	r6,28(r6)
  800370:	082c8c41 	jmpi	82c8c4 <alt_up_char_buffer_string>

00800374 <drawActionButton>:
}
void drawActionButton(struct Button* this){
  800374:	2007883a 	mov	r3,r4
	draw(this->x_pos, this->y_pos, this->stats[0]);
  800378:	21800c17 	ldw	r6,48(r4)
  80037c:	19400817 	ldw	r5,32(r3)
  800380:	21000717 	ldw	r4,28(r4)
  800384:	080965c1 	jmpi	80965c <draw>

00800388 <highlightButton>:
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  800388:	20800117 	ldw	r2,4(r4)
		updateVolumeValue(this->id);
	}

}

void highlightButton(struct Button* this){
  80038c:	defff904 	addi	sp,sp,-28
  800390:	dcc00315 	stw	r19,12(sp)
	draw_notransparent(241, 13, this->Panel->bg_image);
  800394:	11800617 	ldw	r6,24(r2)
		updateVolumeValue(this->id);
	}

}

void highlightButton(struct Button* this){
  800398:	2027883a 	mov	r19,r4
	draw_notransparent(241, 13, this->Panel->bg_image);
  80039c:	01400344 	movi	r5,13
  8003a0:	01003c44 	movi	r4,241
		updateVolumeValue(this->id);
	}

}

void highlightButton(struct Button* this){
  8003a4:	dfc00615 	stw	ra,24(sp)
  8003a8:	ddc00515 	stw	r23,20(sp)
  8003ac:	dd400415 	stw	r21,16(sp)
  8003b0:	dc800215 	stw	r18,8(sp)
  8003b4:	dc400115 	stw	r17,4(sp)
  8003b8:	dc000015 	stw	r16,0(sp)
	draw_notransparent(241, 13, this->Panel->bg_image);
  8003bc:	08097380 	call	809738 <draw_notransparent>
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  8003c0:	9c400717 	ldw	r17,28(r19)
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  8003c4:	99400817 	ldw	r5,32(r19)
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8003c8:	05401304 	movi	r21,76

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  8003cc:	8c63883a 	add	r17,r17,r17
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  8003d0:	294b883a 	add	r5,r5,r5
  8003d4:	294b883a 	add	r5,r5,r5
	int x = 4* this->x_pos - 3;
  8003d8:	8c63883a 	add	r17,r17,r17
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8003dc:	05c039f4 	movhi	r23,231
  8003e0:	bdc47384 	addi	r23,r23,4558

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  8003e4:	8c7fff44 	addi	r17,r17,-3
	for (i = 0; i < 10; i++, y++){
  8003e8:	04c00044 	movi	r19,1
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  8003ec:	297fff84 	addi	r5,r5,-2
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  8003f0:	2ce1883a 	add	r16,r5,r19
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8003f4:	8809883a 	mov	r4,r17
  8003f8:	a80d883a 	mov	r6,r21
  8003fc:	b80f883a 	mov	r7,r23
  800400:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  800404:	84e5883a 	add	r18,r16,r19
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800408:	8809883a 	mov	r4,r17
  80040c:	800b883a 	mov	r5,r16
  800410:	a80d883a 	mov	r6,r21
  800414:	b80f883a 	mov	r7,r23
  800418:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  80041c:	94e1883a 	add	r16,r18,r19
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800420:	8809883a 	mov	r4,r17
  800424:	900b883a 	mov	r5,r18
  800428:	a80d883a 	mov	r6,r21
  80042c:	b80f883a 	mov	r7,r23
  800430:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  800434:	84e5883a 	add	r18,r16,r19
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800438:	8809883a 	mov	r4,r17
  80043c:	800b883a 	mov	r5,r16
  800440:	a80d883a 	mov	r6,r21
  800444:	b80f883a 	mov	r7,r23
  800448:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  80044c:	94e1883a 	add	r16,r18,r19
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800450:	8809883a 	mov	r4,r17
  800454:	900b883a 	mov	r5,r18
  800458:	a80d883a 	mov	r6,r21
  80045c:	b80f883a 	mov	r7,r23
  800460:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  800464:	84e5883a 	add	r18,r16,r19
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800468:	8809883a 	mov	r4,r17
  80046c:	800b883a 	mov	r5,r16
  800470:	a80d883a 	mov	r6,r21
  800474:	b80f883a 	mov	r7,r23
  800478:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  80047c:	94e1883a 	add	r16,r18,r19
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800480:	8809883a 	mov	r4,r17
  800484:	900b883a 	mov	r5,r18
  800488:	a80d883a 	mov	r6,r21
  80048c:	b80f883a 	mov	r7,r23
  800490:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  800494:	84e5883a 	add	r18,r16,r19
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800498:	8809883a 	mov	r4,r17
  80049c:	800b883a 	mov	r5,r16
  8004a0:	a80d883a 	mov	r6,r21
  8004a4:	b80f883a 	mov	r7,r23
  8004a8:	0809e040 	call	809e04 <drawHorizontalLine>
  8004ac:	900b883a 	mov	r5,r18
  8004b0:	a80d883a 	mov	r6,r21
  8004b4:	b80f883a 	mov	r7,r23
  8004b8:	8809883a 	mov	r4,r17
  8004bc:	0809e040 	call	809e04 <drawHorizontalLine>
  8004c0:	8809883a 	mov	r4,r17
  8004c4:	94cb883a 	add	r5,r18,r19
  8004c8:	a80d883a 	mov	r6,r21
  8004cc:	b80f883a 	mov	r7,r23
	}

}
  8004d0:	dfc00617 	ldw	ra,24(sp)
  8004d4:	ddc00517 	ldw	r23,20(sp)
  8004d8:	dd400417 	ldw	r21,16(sp)
  8004dc:	dcc00317 	ldw	r19,12(sp)
  8004e0:	dc800217 	ldw	r18,8(sp)
  8004e4:	dc400117 	ldw	r17,4(sp)
  8004e8:	dc000017 	ldw	r16,0(sp)
  8004ec:	dec00704 	addi	sp,sp,28
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8004f0:	0809e041 	jmpi	809e04 <drawHorizontalLine>

008004f4 <drawRange>:
 * this will draw the range of a button with white color
 */
void drawRange(struct Button* this){
	int i = 0;
	int y = this->y_pos;
	for (i = 0; i < this->range->height; i++, y++){
  8004f4:	20c00217 	ldw	r3,8(r4)

/**
 * helper function for debugging
 * this will draw the range of a button with white color
 */
void drawRange(struct Button* this){
  8004f8:	defffc04 	addi	sp,sp,-16
  8004fc:	dc400115 	stw	r17,4(sp)
	int i = 0;
	int y = this->y_pos;
	for (i = 0; i < this->range->height; i++, y++){
  800500:	18800217 	ldw	r2,8(r3)

/**
 * helper function for debugging
 * this will draw the range of a button with white color
 */
void drawRange(struct Button* this){
  800504:	dc000015 	stw	r16,0(sp)
  800508:	dfc00315 	stw	ra,12(sp)
  80050c:	dc800215 	stw	r18,8(sp)
  800510:	2023883a 	mov	r17,r4
	int i = 0;
	int y = this->y_pos;
  800514:	24000817 	ldw	r16,32(r4)
	for (i = 0; i < this->range->height; i++, y++){
  800518:	00800c0e 	bge	zero,r2,80054c <drawRange+0x58>
  80051c:	0025883a 	mov	r18,zero
		drawHorizontalLine(this->x_pos, y, this->range->width, 0xffffff);
  800520:	19800317 	ldw	r6,12(r3)
  800524:	89000717 	ldw	r4,28(r17)
  800528:	800b883a 	mov	r5,r16
  80052c:	01c04034 	movhi	r7,256
  800530:	39ffffc4 	addi	r7,r7,-1
  800534:	0809e040 	call	809e04 <drawHorizontalLine>
 * this will draw the range of a button with white color
 */
void drawRange(struct Button* this){
	int i = 0;
	int y = this->y_pos;
	for (i = 0; i < this->range->height; i++, y++){
  800538:	88c00217 	ldw	r3,8(r17)
  80053c:	94800044 	addi	r18,r18,1
  800540:	84000044 	addi	r16,r16,1
  800544:	18800217 	ldw	r2,8(r3)
  800548:	90bff516 	blt	r18,r2,800520 <drawRange+0x2c>
		drawHorizontalLine(this->x_pos, y, this->range->width, 0xffffff);
	}
}
  80054c:	dfc00317 	ldw	ra,12(sp)
  800550:	dc800217 	ldw	r18,8(sp)
  800554:	dc400117 	ldw	r17,4(sp)
  800558:	dc000017 	ldw	r16,0(sp)
  80055c:	dec00404 	addi	sp,sp,16
  800560:	f800283a 	ret

00800564 <volumeButtonCollide>:
	default:
		break;
	}
}

void volumeButtonCollide(struct Button* this){
  800564:	defffc04 	addi	sp,sp,-16
  800568:	dc000015 	stw	r16,0(sp)
	printf("db current song id is %d", db.curr_song_id);
  80056c:	04002134 	movhi	r16,132
  800570:	840a6204 	addi	r16,r16,10632
  800574:	81400017 	ldw	r5,0(r16)
	default:
		break;
	}
}

void volumeButtonCollide(struct Button* this){
  800578:	dc400115 	stw	r17,4(sp)
  80057c:	2023883a 	mov	r17,r4
	printf("db current song id is %d", db.curr_song_id);
  800580:	010020f4 	movhi	r4,131
  800584:	210bb304 	addi	r4,r4,11980
	default:
		break;
	}
}

void volumeButtonCollide(struct Button* this){
  800588:	dfc00315 	stw	ra,12(sp)
  80058c:	dc800215 	stw	r18,8(sp)
	printf("db current song id is %d", db.curr_song_id);
  800590:	08220680 	call	822068 <printf>
	int song_id = db.curr_song_id;
  800594:	80c00017 	ldw	r3,0(r16)
	if (song_id == 0){return;}
  800598:	18001626 	beq	r3,zero,8005f4 <volumeButtonCollide+0x90>
	if (db.songs[song_id]->sound == NULL){return;}
  80059c:	18c5883a 	add	r2,r3,r3
  8005a0:	1085883a 	add	r2,r2,r2
  8005a4:	1421883a 	add	r16,r2,r16
  8005a8:	81403617 	ldw	r5,216(r16)
  8005ac:	84803604 	addi	r18,r16,216
  8005b0:	28800017 	ldw	r2,0(r5)
  8005b4:	10000f26 	beq	r2,zero,8005f4 <volumeButtonCollide+0x90>
	switch(this->type){
  8005b8:	89000417 	ldw	r4,16(r17)
  8005bc:	20000b1e 	bne	r4,zero,8005ec <volumeButtonCollide+0x88>
	case 0:
		if (db.songs[song_id]->volume < 100){
  8005c0:	29400717 	ldw	r5,28(r5)
  8005c4:	008018c4 	movi	r2,99
  8005c8:	1140100e 	bge	r2,r5,80060c <volumeButtonCollide+0xa8>
			syncSetVol(song_id, db.songs[song_id]->volume + 1);
			printf("Volume of %s is %d\n", db.songs[song_id]->song_name, db.songs[song_id]->volume);
			// update the value
		} else {
			printf("Maximum volume reached.");
  8005cc:	010020f4 	movhi	r4,131
  8005d0:	210bbf04 	addi	r4,r4,12028
		break;
	default:
		break;
	}

}
  8005d4:	dfc00317 	ldw	ra,12(sp)
  8005d8:	dc800217 	ldw	r18,8(sp)
  8005dc:	dc400117 	ldw	r17,4(sp)
  8005e0:	dc000017 	ldw	r16,0(sp)
  8005e4:	dec00404 	addi	sp,sp,16
		if (db.songs[song_id]->volume > 0){
			syncSetVol(song_id, db.songs[song_id]->volume - 1);
			printf("Volume of %s is %d\n", db.songs[song_id]->song_name, db.songs[song_id]->volume);
			// update the value
		} else {
			printf("Minimum volume reached.");
  8005e8:	08220681 	jmpi	822068 <printf>
void volumeButtonCollide(struct Button* this){
	printf("db current song id is %d", db.curr_song_id);
	int song_id = db.curr_song_id;
	if (song_id == 0){return;}
	if (db.songs[song_id]->sound == NULL){return;}
	switch(this->type){
  8005ec:	00800044 	movi	r2,1
  8005f0:	20801426 	beq	r4,r2,800644 <volumeButtonCollide+0xe0>
		break;
	default:
		break;
	}

}
  8005f4:	dfc00317 	ldw	ra,12(sp)
  8005f8:	dc800217 	ldw	r18,8(sp)
  8005fc:	dc400117 	ldw	r17,4(sp)
  800600:	dc000017 	ldw	r16,0(sp)
  800604:	dec00404 	addi	sp,sp,16
  800608:	f800283a 	ret
	if (song_id == 0){return;}
	if (db.songs[song_id]->sound == NULL){return;}
	switch(this->type){
	case 0:
		if (db.songs[song_id]->volume < 100){
			syncSetVol(song_id, db.songs[song_id]->volume + 1);
  80060c:	29400044 	addi	r5,r5,1
  800610:	1809883a 	mov	r4,r3
  800614:	08032dc0 	call	8032dc <syncSetVol>
			printf("Volume of %s is %d\n", db.songs[song_id]->song_name, db.songs[song_id]->volume);
  800618:	81403617 	ldw	r5,216(r16)
		}
		break;
	case 1:
		if (db.songs[song_id]->volume > 0){
			syncSetVol(song_id, db.songs[song_id]->volume - 1);
			printf("Volume of %s is %d\n", db.songs[song_id]->song_name, db.songs[song_id]->volume);
  80061c:	29800717 	ldw	r6,28(r5)
  800620:	010020f4 	movhi	r4,131
  800624:	210bba04 	addi	r4,r4,12008
  800628:	29400104 	addi	r5,r5,4
		break;
	default:
		break;
	}

}
  80062c:	dfc00317 	ldw	ra,12(sp)
  800630:	dc800217 	ldw	r18,8(sp)
  800634:	dc400117 	ldw	r17,4(sp)
  800638:	dc000017 	ldw	r16,0(sp)
  80063c:	dec00404 	addi	sp,sp,16
		}
		break;
	case 1:
		if (db.songs[song_id]->volume > 0){
			syncSetVol(song_id, db.songs[song_id]->volume - 1);
			printf("Volume of %s is %d\n", db.songs[song_id]->song_name, db.songs[song_id]->volume);
  800640:	08220681 	jmpi	822068 <printf>
		} else {
			printf("Maximum volume reached.");
		}
		break;
	case 1:
		if (db.songs[song_id]->volume > 0){
  800644:	28800717 	ldw	r2,28(r5)
  800648:	0080050e 	bge	zero,r2,800660 <volumeButtonCollide+0xfc>
			syncSetVol(song_id, db.songs[song_id]->volume - 1);
  80064c:	110bc83a 	sub	r5,r2,r4
  800650:	1809883a 	mov	r4,r3
  800654:	08032dc0 	call	8032dc <syncSetVol>
			printf("Volume of %s is %d\n", db.songs[song_id]->song_name, db.songs[song_id]->volume);
  800658:	91400017 	ldw	r5,0(r18)
  80065c:	003fef06 	br	80061c <volumeButtonCollide+0xb8>
			// update the value
		} else {
			printf("Minimum volume reached.");
  800660:	010020f4 	movhi	r4,131
  800664:	210bc504 	addi	r4,r4,12052
  800668:	003fda06 	br	8005d4 <volumeButtonCollide+0x70>

0080066c <allSongsMenuButtonCollide>:
		printf("Playlist frame is NULL\n");
		return;
	}
	this->Panel->mainFrame->elements[3]->drawFrame(this->Panel->mainFrame->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
  80066c:	defffe04 	addi	sp,sp,-8
  800670:	dc400015 	stw	r17,0(sp)
  800674:	2023883a 	mov	r17,r4
  800678:	dfc00115 	stw	ra,4(sp)
	clearSongPanel();
  80067c:	08079200 	call	807920 <clearSongPanel>
	if (this->Panel->mainFrame->elements[2] == NULL){
  800680:	89400117 	ldw	r5,4(r17)
		printf("All Songs frame is NULL\n");
  800684:	010020f4 	movhi	r4,131
  800688:	210bcb04 	addi	r4,r4,12076
	}
	this->Panel->mainFrame->elements[3]->drawFrame(this->Panel->mainFrame->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->Panel->mainFrame->elements[2] == NULL){
  80068c:	28800717 	ldw	r2,28(r5)
  800690:	10c00017 	ldw	r3,0(r2)
  800694:	18c00217 	ldw	r3,8(r3)
  800698:	18000626 	beq	r3,zero,8006b4 <allSongsMenuButtonCollide+0x48>
		printf("All Songs frame is NULL\n");
		return;
	}
	this->Panel->mainFrame->elements[2]->drawFrame(this->Panel->mainFrame->elements[2]);
  80069c:	18800817 	ldw	r2,32(r3)
  8006a0:	1809883a 	mov	r4,r3
}
  8006a4:	dfc00117 	ldw	ra,4(sp)
  8006a8:	dc400017 	ldw	r17,0(sp)
  8006ac:	dec00204 	addi	sp,sp,8
	clearSongPanel();
	if (this->Panel->mainFrame->elements[2] == NULL){
		printf("All Songs frame is NULL\n");
		return;
	}
	this->Panel->mainFrame->elements[2]->drawFrame(this->Panel->mainFrame->elements[2]);
  8006b0:	1000683a 	jmp	r2
}
  8006b4:	dfc00117 	ldw	ra,4(sp)
  8006b8:	dc400017 	ldw	r17,0(sp)
  8006bc:	dec00204 	addi	sp,sp,8
	this->Panel->mainFrame->elements[3]->drawFrame(this->Panel->mainFrame->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->Panel->mainFrame->elements[2] == NULL){
		printf("All Songs frame is NULL\n");
  8006c0:	08221801 	jmpi	822180 <puts>

008006c4 <playlistMenuButtonCollide>:
		break;
	default:
		break;
	}
}
void playlistMenuButtonCollide(struct Button* this){
  8006c4:	defffe04 	addi	sp,sp,-8
  8006c8:	dc400015 	stw	r17,0(sp)
  8006cc:	2023883a 	mov	r17,r4
  8006d0:	dfc00115 	stw	ra,4(sp)
	clearSongPanel();
  8006d4:	08079200 	call	807920 <clearSongPanel>
	if (this->Panel->mainFrame->elements[3] == NULL){
  8006d8:	89400117 	ldw	r5,4(r17)
		printf("Playlist frame is NULL\n");
  8006dc:	010020f4 	movhi	r4,131
  8006e0:	210bd104 	addi	r4,r4,12100
		break;
	}
}
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->Panel->mainFrame->elements[3] == NULL){
  8006e4:	28800717 	ldw	r2,28(r5)
  8006e8:	10c00017 	ldw	r3,0(r2)
  8006ec:	18c00317 	ldw	r3,12(r3)
  8006f0:	18000626 	beq	r3,zero,80070c <playlistMenuButtonCollide+0x48>
		printf("Playlist frame is NULL\n");
		return;
	}
	this->Panel->mainFrame->elements[3]->drawFrame(this->Panel->mainFrame->elements[3]);
  8006f4:	18800817 	ldw	r2,32(r3)
  8006f8:	1809883a 	mov	r4,r3
}
  8006fc:	dfc00117 	ldw	ra,4(sp)
  800700:	dc400017 	ldw	r17,0(sp)
  800704:	dec00204 	addi	sp,sp,8
	clearSongPanel();
	if (this->Panel->mainFrame->elements[3] == NULL){
		printf("Playlist frame is NULL\n");
		return;
	}
	this->Panel->mainFrame->elements[3]->drawFrame(this->Panel->mainFrame->elements[3]);
  800708:	1000683a 	jmp	r2
}
  80070c:	dfc00117 	ldw	ra,4(sp)
  800710:	dc400017 	ldw	r17,0(sp)
  800714:	dec00204 	addi	sp,sp,8
	}
}
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->Panel->mainFrame->elements[3] == NULL){
		printf("Playlist frame is NULL\n");
  800718:	08221801 	jmpi	822180 <puts>

0080071c <killSongButton>:
	sb->collide = songButtonCollide;
	sb->id = id;
	return sb;
}

void killSongButton(struct Button** this) {
  80071c:	defffe04 	addi	sp,sp,-8
  800720:	dc000015 	stw	r16,0(sp)
  800724:	dfc00115 	stw	ra,4(sp)
  800728:	2021883a 	mov	r16,r4
	if(this == NULL || (*this) == NULL) return;
  80072c:	20000a26 	beq	r4,zero,800758 <killSongButton+0x3c>
  800730:	20800017 	ldw	r2,0(r4)
  800734:	10000826 	beq	r2,zero,800758 <killSongButton+0x3c>
	free((*this)->range);
  800738:	11000217 	ldw	r4,8(r2)
  80073c:	08216e80 	call	8216e8 <free>
	(*this)->range = NULL;
  800740:	81000017 	ldw	r4,0(r16)
  800744:	20000215 	stw	zero,8(r4)
	(*this)->Panel = NULL;
  800748:	20000115 	stw	zero,4(r4)
	//free((*this)->name);
	(*this)->name = NULL;
  80074c:	20000b15 	stw	zero,44(r4)
	free((*this));
  800750:	08216e80 	call	8216e8 <free>
	*this = NULL;
  800754:	80000015 	stw	zero,0(r16)
}
  800758:	dfc00117 	ldw	ra,4(sp)
  80075c:	dc000017 	ldw	r16,0(sp)
  800760:	dec00204 	addi	sp,sp,8
  800764:	f800283a 	ret

00800768 <initButton>:
#include "Button.h"

struct Button* initButton(){
  800768:	deffff04 	addi	sp,sp,-4
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  80076c:	01001004 	movi	r4,64
#include "Button.h"

struct Button* initButton(){
  800770:	dfc00015 	stw	ra,0(sp)
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800774:	08216fc0 	call	8216fc <malloc>
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800778:	010000c4 	movi	r4,3
  80077c:	11000015 	stw	r4,0(r2)
	b->collide = dummyCollide;
  800780:	01402034 	movhi	r5,128
  800784:	2940ae04 	addi	r5,r5,696
	b->draw = dummyDraw;
  800788:	01002034 	movhi	r4,128
  80078c:	21007404 	addi	r4,r4,464
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800790:	11400f15 	stw	r5,60(r2)
	b->draw = dummyDraw;
  800794:	11000e15 	stw	r4,56(r2)
	b->Panel = NULL;
	b->isClicked = 0;
	b->startAnimate = 0;
	b->frame = 0;
  800798:	10000615 	stw	zero,24(r2)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
  80079c:	10000b15 	stw	zero,44(r2)
	b->range = NULL;
  8007a0:	10000215 	stw	zero,8(r2)
	b->x_pos = 0;
  8007a4:	10000715 	stw	zero,28(r2)
	b->y_pos = 0;
  8007a8:	10000815 	stw	zero,32(r2)
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	b->Panel = NULL;
  8007ac:	10000115 	stw	zero,4(r2)
	b->isClicked = 0;
  8007b0:	10000915 	stw	zero,36(r2)
	b->startAnimate = 0;
  8007b4:	10000a15 	stw	zero,40(r2)
	b->frame = 0;
	return b;
}
  8007b8:	dfc00017 	ldw	ra,0(sp)
  8007bc:	dec00104 	addi	sp,sp,4
  8007c0:	f800283a 	ret

008007c4 <animateButton>:
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
  8007c4:	20c00417 	ldw	r3,16(r4)
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  8007c8:	00800104 	movi	r2,4
		break;
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
  8007cc:	200f883a 	mov	r7,r4
  8007d0:	280d883a 	mov	r6,r5
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  8007d4:	10c00c36 	bltu	r2,r3,800808 <animateButton+0x44>
  8007d8:	18c5883a 	add	r2,r3,r3
  8007dc:	1085883a 	add	r2,r2,r2
  8007e0:	00c02034 	movhi	r3,128
  8007e4:	18c1fd04 	addi	r3,r3,2036
  8007e8:	10c5883a 	add	r2,r2,r3
  8007ec:	11000017 	ldw	r4,0(r2)
  8007f0:	2000683a 	jmp	r4
  8007f4:	00800844 	movi	r2,33
  8007f8:	00800884 	movi	r2,34
  8007fc:	00800878 	rdprs	r2,zero,33
  800800:	0080086c 	andhi	r2,zero,33
  800804:	00800850 	cmplti	r2,zero,33
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  800808:	18000726 	beq	r3,zero,800828 <animateButton+0x64>
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
  80080c:	3185883a 	add	r2,r6,r6
  800810:	1085883a 	add	r2,r2,r2
  800814:	11c5883a 	add	r2,r2,r7
  800818:	11800c17 	ldw	r6,48(r2)
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  80081c:	01403344 	movi	r5,205
  800820:	0009883a 	mov	r4,zero
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
  800824:	080965c1 	jmpi	80965c <draw>
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  800828:	0009883a 	mov	r4,zero
  80082c:	01403204 	movi	r5,200
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
  800830:	3185883a 	add	r2,r6,r6
  800834:	1085883a 	add	r2,r2,r2
  800838:	11c5883a 	add	r2,r2,r7
  80083c:	11800c17 	ldw	r6,48(r2)
  800840:	080965c1 	jmpi	80965c <draw>
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800844:	01002444 	movi	r4,145
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  800848:	01403204 	movi	r5,200
  80084c:	003ff806 	br	800830 <animateButton+0x6c>
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
  800850:	01003344 	movi	r4,205
  800854:	01403344 	movi	r5,205
  800858:	3185883a 	add	r2,r6,r6
  80085c:	1085883a 	add	r2,r2,r2
  800860:	11c5883a 	add	r2,r2,r7
  800864:	11800c17 	ldw	r6,48(r2)
  800868:	080965c1 	jmpi	80965c <draw>
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  80086c:	010017c4 	movi	r4,95
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
  800870:	01403344 	movi	r5,205
  800874:	003ff806 	br	800858 <animateButton+0x94>
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800878:	01002d04 	movi	r4,180
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
  80087c:	01403344 	movi	r5,205
  800880:	003ff506 	br	800858 <animateButton+0x94>
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800884:	01001e04 	movi	r4,120
	}
	return y;
}

void animateButton(struct Button* this, int stats_index){
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
  800888:	01403344 	movi	r5,205
  80088c:	003ff206 	br	800858 <animateButton+0x94>

00800890 <menuButtonCollide>:
}
void dummyDraw(struct Button* this){}

void menuButtonCollide(struct Button* this){
	// 0:ALLSONGS, 1:PLAYLISTS
	draw_notransparent(241, 13, this->Panel->mainFrame->elements[2]->bg_image);
  800890:	21800117 	ldw	r6,4(r4)
void drawActionButton(struct Button* this){
	draw(this->x_pos, this->y_pos, this->stats[0]);
}
void dummyDraw(struct Button* this){}

void menuButtonCollide(struct Button* this){
  800894:	defffe04 	addi	sp,sp,-8
  800898:	dc000015 	stw	r16,0(sp)
	// 0:ALLSONGS, 1:PLAYLISTS
	draw_notransparent(241, 13, this->Panel->mainFrame->elements[2]->bg_image);
  80089c:	30800717 	ldw	r2,28(r6)
void drawActionButton(struct Button* this){
	draw(this->x_pos, this->y_pos, this->stats[0]);
}
void dummyDraw(struct Button* this){}

void menuButtonCollide(struct Button* this){
  8008a0:	2021883a 	mov	r16,r4
	// 0:ALLSONGS, 1:PLAYLISTS
	draw_notransparent(241, 13, this->Panel->mainFrame->elements[2]->bg_image);
  8008a4:	01400344 	movi	r5,13
  8008a8:	10c00017 	ldw	r3,0(r2)
  8008ac:	01003c44 	movi	r4,241
void drawActionButton(struct Button* this){
	draw(this->x_pos, this->y_pos, this->stats[0]);
}
void dummyDraw(struct Button* this){}

void menuButtonCollide(struct Button* this){
  8008b0:	dfc00115 	stw	ra,4(sp)
	// 0:ALLSONGS, 1:PLAYLISTS
	draw_notransparent(241, 13, this->Panel->mainFrame->elements[2]->bg_image);
  8008b4:	19c00217 	ldw	r7,8(r3)
  8008b8:	39800617 	ldw	r6,24(r7)
  8008bc:	08097380 	call	809738 <draw_notransparent>
	switch(this->type){
  8008c0:	80c00417 	ldw	r3,16(r16)
  8008c4:	18000626 	beq	r3,zero,8008e0 <menuButtonCollide+0x50>
  8008c8:	00800044 	movi	r2,1
  8008cc:	18801326 	beq	r3,r2,80091c <menuButtonCollide+0x8c>
		this->Panel->mainFrame->currentPanel = 1;
		break;
	default:
		break;
	}
}
  8008d0:	dfc00117 	ldw	ra,4(sp)
  8008d4:	dc000017 	ldw	r16,0(sp)
  8008d8:	dec00204 	addi	sp,sp,8
  8008dc:	f800283a 	ret
		return;
	}
	this->Panel->mainFrame->elements[3]->drawFrame(this->Panel->mainFrame->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
	clearSongPanel();
  8008e0:	08079200 	call	807920 <clearSongPanel>
	if (this->Panel->mainFrame->elements[2] == NULL){
  8008e4:	80800117 	ldw	r2,4(r16)
  8008e8:	10c00717 	ldw	r3,28(r2)
  8008ec:	19000017 	ldw	r4,0(r3)
  8008f0:	21000217 	ldw	r4,8(r4)
  8008f4:	20001926 	beq	r4,zero,80095c <menuButtonCollide+0xcc>
		printf("All Songs frame is NULL\n");
		return;
	}
	this->Panel->mainFrame->elements[2]->drawFrame(this->Panel->mainFrame->elements[2]);
  8008f8:	20800817 	ldw	r2,32(r4)
  8008fc:	103ee83a 	callr	r2
	// 0:ALLSONGS, 1:PLAYLISTS
	draw_notransparent(241, 13, this->Panel->mainFrame->elements[2]->bg_image);
	switch(this->type){
	case 0:
		allSongsMenuButtonCollide(this);
		this->Panel->mainFrame->currentPanel = 0;
  800900:	80800117 	ldw	r2,4(r16)
  800904:	10c00717 	ldw	r3,28(r2)
  800908:	18000415 	stw	zero,16(r3)
		this->Panel->mainFrame->currentPanel = 1;
		break;
	default:
		break;
	}
}
  80090c:	dfc00117 	ldw	ra,4(sp)
  800910:	dc000017 	ldw	r16,0(sp)
  800914:	dec00204 	addi	sp,sp,8
  800918:	f800283a 	ret
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
  80091c:	08079200 	call	807920 <clearSongPanel>
	if (this->Panel->mainFrame->elements[3] == NULL){
  800920:	80800117 	ldw	r2,4(r16)
  800924:	10c00717 	ldw	r3,28(r2)
  800928:	19000017 	ldw	r4,0(r3)
  80092c:	21000317 	ldw	r4,12(r4)
  800930:	20000e26 	beq	r4,zero,80096c <menuButtonCollide+0xdc>
		printf("Playlist frame is NULL\n");
		return;
	}
	this->Panel->mainFrame->elements[3]->drawFrame(this->Panel->mainFrame->elements[3]);
  800934:	20800817 	ldw	r2,32(r4)
  800938:	103ee83a 	callr	r2
		allSongsMenuButtonCollide(this);
		this->Panel->mainFrame->currentPanel = 0;
		break;
	case 1:
		playlistMenuButtonCollide(this);
		this->Panel->mainFrame->currentPanel = 1;
  80093c:	80800117 	ldw	r2,4(r16)
  800940:	00c00044 	movi	r3,1
  800944:	11000717 	ldw	r4,28(r2)
  800948:	20c00415 	stw	r3,16(r4)
		break;
	default:
		break;
	}
}
  80094c:	dfc00117 	ldw	ra,4(sp)
  800950:	dc000017 	ldw	r16,0(sp)
  800954:	dec00204 	addi	sp,sp,8
  800958:	f800283a 	ret
	this->Panel->mainFrame->elements[3]->drawFrame(this->Panel->mainFrame->elements[3]);
}
void allSongsMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->Panel->mainFrame->elements[2] == NULL){
		printf("All Songs frame is NULL\n");
  80095c:	010020f4 	movhi	r4,131
  800960:	210bcb04 	addi	r4,r4,12076
  800964:	08221800 	call	822180 <puts>
  800968:	003fe506 	br	800900 <menuButtonCollide+0x70>
	}
}
void playlistMenuButtonCollide(struct Button* this){
	clearSongPanel();
	if (this->Panel->mainFrame->elements[3] == NULL){
		printf("Playlist frame is NULL\n");
  80096c:	010020f4 	movhi	r4,131
  800970:	210bd104 	addi	r4,r4,12100
  800974:	08221800 	call	822180 <puts>
  800978:	003ff006 	br	80093c <menuButtonCollide+0xac>

0080097c <initSongButton>:
	b->Panel = menuFrame;
	b->buttonType = menu;
	return b;
}

struct Button* initSongButton(int x, int y, char* name, int id, struct Frame* panel){
  80097c:	defffa04 	addi	sp,sp,-24
  800980:	ddc00415 	stw	r23,16(sp)
  800984:	202f883a 	mov	r23,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800988:	01001004 	movi	r4,64
	b->Panel = menuFrame;
	b->buttonType = menu;
	return b;
}

struct Button* initSongButton(int x, int y, char* name, int id, struct Frame* panel){
  80098c:	dfc00515 	stw	ra,20(sp)
  800990:	dd400315 	stw	r21,12(sp)
  800994:	dcc00215 	stw	r19,8(sp)
  800998:	282b883a 	mov	r21,r5
  80099c:	3027883a 	mov	r19,r6
  8009a0:	dc400115 	stw	r17,4(sp)
  8009a4:	dc000015 	stw	r16,0(sp)
  8009a8:	3821883a 	mov	r16,r7
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  8009ac:	08216fc0 	call	8216fc <malloc>
  8009b0:	1023883a 	mov	r17,r2
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  8009b4:	008000c4 	movi	r2,3
  8009b8:	88800015 	stw	r2,0(r17)
	b->collide = dummyCollide;
	b->draw = dummyDraw;
  8009bc:	00802034 	movhi	r2,128
  8009c0:	10807404 	addi	r2,r2,464
  8009c4:	88800e15 	stw	r2,56(r17)
}

struct Button* initSongButton(int x, int y, char* name, int id, struct Frame* panel){
	struct Button* sb = initButton();
	sb->name = name;
	sb->Panel = panel;
  8009c8:	d8800617 	ldw	r2,24(sp)
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  8009cc:	00c02034 	movhi	r3,128
  8009d0:	18c0ae04 	addi	r3,r3,696

struct Button* initSongButton(int x, int y, char* name, int id, struct Frame* panel){
	struct Button* sb = initButton();
	sb->name = name;
	sb->Panel = panel;
	sb->range = initRange(x, y, 79, 10);
  8009d4:	b809883a 	mov	r4,r23
  8009d8:	a80b883a 	mov	r5,r21
  8009dc:	018013c4 	movi	r6,79
  8009e0:	01c00284 	movi	r7,10
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  8009e4:	88c00f15 	stw	r3,60(r17)
	return b;
}

struct Button* initSongButton(int x, int y, char* name, int id, struct Frame* panel){
	struct Button* sb = initButton();
	sb->name = name;
  8009e8:	8cc00b15 	stw	r19,44(r17)
	sb->Panel = panel;
  8009ec:	88800115 	stw	r2,4(r17)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
  8009f0:	88000215 	stw	zero,8(r17)
	b->x_pos = 0;
  8009f4:	88000715 	stw	zero,28(r17)
	b->y_pos = 0;
  8009f8:	88000815 	stw	zero,32(r17)
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	b->Panel = NULL;
	b->isClicked = 0;
  8009fc:	88000915 	stw	zero,36(r17)
	b->startAnimate = 0;
  800a00:	88000a15 	stw	zero,40(r17)
	b->frame = 0;
  800a04:	88000615 	stw	zero,24(r17)

struct Button* initSongButton(int x, int y, char* name, int id, struct Frame* panel){
	struct Button* sb = initButton();
	sb->name = name;
	sb->Panel = panel;
	sb->range = initRange(x, y, 79, 10);
  800a08:	080c8280 	call	80c828 <initRange>
  800a0c:	88800215 	stw	r2,8(r17)
	sb->x_pos = x;
	sb->y_pos = y;
	sb->draw = drawTxtButton;
  800a10:	00802034 	movhi	r2,128
  800a14:	1080d504 	addi	r2,r2,852
  800a18:	88800e15 	stw	r2,56(r17)
	sb->collide = songButtonCollide;
  800a1c:	00c02034 	movhi	r3,128
  800a20:	18c62b04 	addi	r3,r3,6316
	sb->id = id;
	return sb;
}
  800a24:	8805883a 	mov	r2,r17
struct Button* initSongButton(int x, int y, char* name, int id, struct Frame* panel){
	struct Button* sb = initButton();
	sb->name = name;
	sb->Panel = panel;
	sb->range = initRange(x, y, 79, 10);
	sb->x_pos = x;
  800a28:	8dc00715 	stw	r23,28(r17)
	sb->y_pos = y;
  800a2c:	8d400815 	stw	r21,32(r17)
	sb->draw = drawTxtButton;
	sb->collide = songButtonCollide;
  800a30:	88c00f15 	stw	r3,60(r17)
	sb->id = id;
  800a34:	8c000315 	stw	r16,12(r17)
	return sb;
}
  800a38:	dfc00517 	ldw	ra,20(sp)
  800a3c:	ddc00417 	ldw	r23,16(sp)
  800a40:	dd400317 	ldw	r21,12(sp)
  800a44:	dcc00217 	ldw	r19,8(sp)
  800a48:	dc400117 	ldw	r17,4(sp)
  800a4c:	dc000017 	ldw	r16,0(sp)
  800a50:	dec00604 	addi	sp,sp,24
  800a54:	f800283a 	ret

00800a58 <initMenuButton>:
	b->startAnimate = 0;
	b->frame = 0;
	return b;
}

struct Button* initMenuButton(int x, char* name, int type, struct Frame* menuFrame){
  800a58:	defff904 	addi	sp,sp,-28
  800a5c:	dd000415 	stw	r20,16(sp)
  800a60:	2029883a 	mov	r20,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800a64:	01001004 	movi	r4,64
	b->startAnimate = 0;
	b->frame = 0;
	return b;
}

struct Button* initMenuButton(int x, char* name, int type, struct Frame* menuFrame){
  800a68:	dfc00615 	stw	ra,24(sp)
  800a6c:	dd800515 	stw	r22,20(sp)
  800a70:	dcc00315 	stw	r19,12(sp)
  800a74:	282d883a 	mov	r22,r5
  800a78:	3827883a 	mov	r19,r7
  800a7c:	dc800215 	stw	r18,8(sp)
  800a80:	dc400115 	stw	r17,4(sp)
  800a84:	dc000015 	stw	r16,0(sp)
  800a88:	3021883a 	mov	r16,r6
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800a8c:	08216fc0 	call	8216fc <malloc>
  800a90:	1023883a 	mov	r17,r2
	return b;
}

struct Button* initMenuButton(int x, char* name, int type, struct Frame* menuFrame){
	struct Button* b = initButton();
	b->range = initRange(x, 1, 30, 10);
  800a94:	04800044 	movi	r18,1
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800a98:	008000c4 	movi	r2,3
  800a9c:	88800015 	stw	r2,0(r17)
	b->collide = dummyCollide;
  800aa0:	00c02034 	movhi	r3,128
  800aa4:	18c0ae04 	addi	r3,r3,696
	return b;
}

struct Button* initMenuButton(int x, char* name, int type, struct Frame* menuFrame){
	struct Button* b = initButton();
	b->range = initRange(x, 1, 30, 10);
  800aa8:	a009883a 	mov	r4,r20
  800aac:	900b883a 	mov	r5,r18
  800ab0:	01800784 	movi	r6,30
  800ab4:	01c00284 	movi	r7,10
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
  800ab8:	00802034 	movhi	r2,128
  800abc:	10807404 	addi	r2,r2,464
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800ac0:	88c00f15 	stw	r3,60(r17)
	b->draw = dummyDraw;
  800ac4:	88800e15 	stw	r2,56(r17)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
  800ac8:	88000b15 	stw	zero,44(r17)
	b->range = NULL;
  800acc:	88000215 	stw	zero,8(r17)
	b->x_pos = 0;
  800ad0:	88000715 	stw	zero,28(r17)
	b->y_pos = 0;
  800ad4:	88000815 	stw	zero,32(r17)
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	b->Panel = NULL;
  800ad8:	88000115 	stw	zero,4(r17)
	b->isClicked = 0;
  800adc:	88000915 	stw	zero,36(r17)
	b->startAnimate = 0;
  800ae0:	88000a15 	stw	zero,40(r17)
	b->frame = 0;
  800ae4:	88000615 	stw	zero,24(r17)
	return b;
}

struct Button* initMenuButton(int x, char* name, int type, struct Frame* menuFrame){
	struct Button* b = initButton();
	b->range = initRange(x, 1, 30, 10);
  800ae8:	080c8280 	call	80c828 <initRange>
  800aec:	88800215 	stw	r2,8(r17)
	b->name = name;
	b->x_pos = x;
	b->y_pos = 1; // all menu buttons have to be drawn at y = 1
	b->draw = drawTxtButton;
  800af0:	00802034 	movhi	r2,128
  800af4:	1080d504 	addi	r2,r2,852
  800af8:	88800e15 	stw	r2,56(r17)
	b->type = type;
	b->collide = menuButtonCollide;
  800afc:	00802034 	movhi	r2,128
  800b00:	10822404 	addi	r2,r2,2192
  800b04:	88800f15 	stw	r2,60(r17)
	b->Panel = menuFrame;
	b->buttonType = menu;
	return b;
}
  800b08:	8805883a 	mov	r2,r17
}

struct Button* initMenuButton(int x, char* name, int type, struct Frame* menuFrame){
	struct Button* b = initButton();
	b->range = initRange(x, 1, 30, 10);
	b->name = name;
  800b0c:	8d800b15 	stw	r22,44(r17)
	b->x_pos = x;
  800b10:	8d000715 	stw	r20,28(r17)
	b->y_pos = 1; // all menu buttons have to be drawn at y = 1
  800b14:	8c800815 	stw	r18,32(r17)
	b->draw = drawTxtButton;
	b->type = type;
  800b18:	8c000415 	stw	r16,16(r17)
	b->collide = menuButtonCollide;
	b->Panel = menuFrame;
  800b1c:	8cc00115 	stw	r19,4(r17)
	b->buttonType = menu;
  800b20:	88000015 	stw	zero,0(r17)
	return b;
}
  800b24:	dfc00617 	ldw	ra,24(sp)
  800b28:	dd800517 	ldw	r22,20(sp)
  800b2c:	dd000417 	ldw	r20,16(sp)
  800b30:	dcc00317 	ldw	r19,12(sp)
  800b34:	dc800217 	ldw	r18,8(sp)
  800b38:	dc400117 	ldw	r17,4(sp)
  800b3c:	dc000017 	ldw	r16,0(sp)
  800b40:	dec00704 	addi	sp,sp,28
  800b44:	f800283a 	ret

00800b48 <initVolumeButton>:
	sb->draw = drawActionButton;
	sb->collide = dummyCollide;
	return sb;
}

struct Button* initVolumeButton(int x, int y, int type, struct Frame* panel){
  800b48:	defffa04 	addi	sp,sp,-24
  800b4c:	dd400315 	stw	r21,12(sp)
  800b50:	202b883a 	mov	r21,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800b54:	01001004 	movi	r4,64
	sb->draw = drawActionButton;
	sb->collide = dummyCollide;
	return sb;
}

struct Button* initVolumeButton(int x, int y, int type, struct Frame* panel){
  800b58:	dfc00515 	stw	ra,20(sp)
  800b5c:	ddc00415 	stw	r23,16(sp)
  800b60:	dcc00215 	stw	r19,8(sp)
  800b64:	302f883a 	mov	r23,r6
  800b68:	2827883a 	mov	r19,r5
  800b6c:	dc400115 	stw	r17,4(sp)
  800b70:	dc000015 	stw	r16,0(sp)
  800b74:	3821883a 	mov	r16,r7
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800b78:	08216fc0 	call	8216fc <malloc>
  800b7c:	1023883a 	mov	r17,r2
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800b80:	008000c4 	movi	r2,3
  800b84:	88800015 	stw	r2,0(r17)
	b->collide = dummyCollide;
  800b88:	00c02034 	movhi	r3,128
  800b8c:	18c0ae04 	addi	r3,r3,696

struct Button* initVolumeButton(int x, int y, int type, struct Frame* panel){
	struct Button* vb = initButton();
	vb->x_pos = x;
	vb->y_pos = y;
	vb->range = initRange(vb->x_pos, vb->y_pos, 20, 18);
  800b90:	a809883a 	mov	r4,r21
  800b94:	980b883a 	mov	r5,r19
  800b98:	01800504 	movi	r6,20
  800b9c:	01c00484 	movi	r7,18
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
  800ba0:	00802034 	movhi	r2,128
  800ba4:	10807404 	addi	r2,r2,464
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800ba8:	88c00f15 	stw	r3,60(r17)
	b->draw = dummyDraw;
  800bac:	88800e15 	stw	r2,56(r17)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
  800bb0:	88000b15 	stw	zero,44(r17)
	b->range = NULL;
  800bb4:	88000215 	stw	zero,8(r17)
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	b->Panel = NULL;
  800bb8:	88000115 	stw	zero,4(r17)
	b->isClicked = 0;
  800bbc:	88000915 	stw	zero,36(r17)
	b->startAnimate = 0;
  800bc0:	88000a15 	stw	zero,40(r17)
	b->frame = 0;
  800bc4:	88000615 	stw	zero,24(r17)
	return sb;
}

struct Button* initVolumeButton(int x, int y, int type, struct Frame* panel){
	struct Button* vb = initButton();
	vb->x_pos = x;
  800bc8:	8d400715 	stw	r21,28(r17)
	vb->y_pos = y;
  800bcc:	8cc00815 	stw	r19,32(r17)
	vb->range = initRange(vb->x_pos, vb->y_pos, 20, 18);
  800bd0:	080c8280 	call	80c828 <initRange>
  800bd4:	88800215 	stw	r2,8(r17)
	vb->type = type;
	vb->Panel = panel;
	vb->draw = drawActionButton;
  800bd8:	00802034 	movhi	r2,128
  800bdc:	1080dd04 	addi	r2,r2,884
  800be0:	88800e15 	stw	r2,56(r17)
	vb->collide = volumeButtonCollide;
  800be4:	00c02034 	movhi	r3,128
  800be8:	18c15904 	addi	r3,r3,1380
	return vb;
}
  800bec:	8805883a 	mov	r2,r17
struct Button* initVolumeButton(int x, int y, int type, struct Frame* panel){
	struct Button* vb = initButton();
	vb->x_pos = x;
	vb->y_pos = y;
	vb->range = initRange(vb->x_pos, vb->y_pos, 20, 18);
	vb->type = type;
  800bf0:	8dc00415 	stw	r23,16(r17)
	vb->Panel = panel;
  800bf4:	8c000115 	stw	r16,4(r17)
	vb->draw = drawActionButton;
	vb->collide = volumeButtonCollide;
  800bf8:	88c00f15 	stw	r3,60(r17)
	return vb;
}
  800bfc:	dfc00517 	ldw	ra,20(sp)
  800c00:	ddc00417 	ldw	r23,16(sp)
  800c04:	dd400317 	ldw	r21,12(sp)
  800c08:	dcc00217 	ldw	r19,8(sp)
  800c0c:	dc400117 	ldw	r17,4(sp)
  800c10:	dc000017 	ldw	r16,0(sp)
  800c14:	dec00604 	addi	sp,sp,24
  800c18:	f800283a 	ret

00800c1c <initScrollButton>:
	ab->collide = actionButtonCollide;
	ab->buttonType = action;
	return ab;
}

struct Button* initScrollButton(int x, int y, int type, struct Frame* f){
  800c1c:	defffa04 	addi	sp,sp,-24
  800c20:	dd800415 	stw	r22,16(sp)
  800c24:	202d883a 	mov	r22,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800c28:	01001004 	movi	r4,64
	ab->collide = actionButtonCollide;
	ab->buttonType = action;
	return ab;
}

struct Button* initScrollButton(int x, int y, int type, struct Frame* f){
  800c2c:	dfc00515 	stw	ra,20(sp)
  800c30:	dd000315 	stw	r20,12(sp)
  800c34:	dc800215 	stw	r18,8(sp)
  800c38:	2829883a 	mov	r20,r5
  800c3c:	dc400115 	stw	r17,4(sp)
  800c40:	dc000015 	stw	r16,0(sp)
  800c44:	3021883a 	mov	r16,r6
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800c48:	08216fc0 	call	8216fc <malloc>

struct Button* initScrollButton(int x, int y, int type, struct Frame* f){
	struct Button* sb = initButton();
	sb->x_pos = x;
	sb->y_pos = y;
	sb->range = initRange(sb->x_pos, sb->y_pos, 10, 10);
  800c4c:	01800284 	movi	r6,10
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800c50:	1023883a 	mov	r17,r2
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800c54:	04802034 	movhi	r18,128
  800c58:	9480ae04 	addi	r18,r18,696
	b->draw = dummyDraw;
  800c5c:	00c02034 	movhi	r3,128
  800c60:	18c07404 	addi	r3,r3,464

struct Button* initScrollButton(int x, int y, int type, struct Frame* f){
	struct Button* sb = initButton();
	sb->x_pos = x;
	sb->y_pos = y;
	sb->range = initRange(sb->x_pos, sb->y_pos, 10, 10);
  800c64:	b009883a 	mov	r4,r22
  800c68:	a00b883a 	mov	r5,r20
  800c6c:	300f883a 	mov	r7,r6
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800c70:	008000c4 	movi	r2,3
  800c74:	88800015 	stw	r2,0(r17)
	b->collide = dummyCollide;
	b->draw = dummyDraw;
  800c78:	88c00e15 	stw	r3,56(r17)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
  800c7c:	88000b15 	stw	zero,44(r17)
	b->range = NULL;
  800c80:	88000215 	stw	zero,8(r17)
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800c84:	8c800f15 	stw	r18,60(r17)
	b->draw = dummyDraw;
	b->Panel = NULL;
  800c88:	88000115 	stw	zero,4(r17)
	b->isClicked = 0;
  800c8c:	88000915 	stw	zero,36(r17)
	b->startAnimate = 0;
  800c90:	88000a15 	stw	zero,40(r17)
	b->frame = 0;
  800c94:	88000615 	stw	zero,24(r17)
	return ab;
}

struct Button* initScrollButton(int x, int y, int type, struct Frame* f){
	struct Button* sb = initButton();
	sb->x_pos = x;
  800c98:	8d800715 	stw	r22,28(r17)
	sb->y_pos = y;
  800c9c:	8d000815 	stw	r20,32(r17)
	sb->range = initRange(sb->x_pos, sb->y_pos, 10, 10);
  800ca0:	080c8280 	call	80c828 <initRange>
  800ca4:	88800215 	stw	r2,8(r17)
	sb->type = type;
	sb->draw = drawActionButton;
  800ca8:	00802034 	movhi	r2,128
  800cac:	1080dd04 	addi	r2,r2,884
  800cb0:	88800e15 	stw	r2,56(r17)
	sb->collide = dummyCollide;
	return sb;
}
  800cb4:	8805883a 	mov	r2,r17
struct Button* initScrollButton(int x, int y, int type, struct Frame* f){
	struct Button* sb = initButton();
	sb->x_pos = x;
	sb->y_pos = y;
	sb->range = initRange(sb->x_pos, sb->y_pos, 10, 10);
	sb->type = type;
  800cb8:	8c000415 	stw	r16,16(r17)
	sb->draw = drawActionButton;
	sb->collide = dummyCollide;
  800cbc:	8c800f15 	stw	r18,60(r17)
	return sb;
}
  800cc0:	dfc00517 	ldw	ra,20(sp)
  800cc4:	dd800417 	ldw	r22,16(sp)
  800cc8:	dd000317 	ldw	r20,12(sp)
  800ccc:	dc800217 	ldw	r18,8(sp)
  800cd0:	dc400117 	ldw	r17,4(sp)
  800cd4:	dc000017 	ldw	r16,0(sp)
  800cd8:	dec00604 	addi	sp,sp,24
  800cdc:	f800283a 	ret

00800ce0 <initActionButton>:
	return pb;
}

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
  800ce0:	defffc04 	addi	sp,sp,-16
  800ce4:	dc400115 	stw	r17,4(sp)
  800ce8:	2023883a 	mov	r17,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800cec:	01001004 	movi	r4,64
	return pb;
}

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
  800cf0:	dc800215 	stw	r18,8(sp)
  800cf4:	dc000015 	stw	r16,0(sp)
  800cf8:	dfc00315 	stw	ra,12(sp)
  800cfc:	2825883a 	mov	r18,r5
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800d00:	08216fc0 	call	8216fc <malloc>
  800d04:	1021883a 	mov	r16,r2
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800d08:	008000c4 	movi	r2,3
  800d0c:	80800015 	stw	r2,0(r16)
	b->collide = dummyCollide;
	b->draw = dummyDraw;
  800d10:	00802034 	movhi	r2,128
  800d14:	10807404 	addi	r2,r2,464
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800d18:	00c02034 	movhi	r3,128
  800d1c:	18c0ae04 	addi	r3,r3,696
	b->draw = dummyDraw;
  800d20:	80800e15 	stw	r2,56(r16)
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800d24:	00800104 	movi	r2,4
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800d28:	80c00f15 	stw	r3,60(r16)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
  800d2c:	80000b15 	stw	zero,44(r16)
	b->range = NULL;
  800d30:	80000215 	stw	zero,8(r16)
	b->x_pos = 0;
  800d34:	80000715 	stw	zero,28(r16)
	b->y_pos = 0;
  800d38:	80000815 	stw	zero,32(r16)
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	b->Panel = NULL;
  800d3c:	80000115 	stw	zero,4(r16)
	b->isClicked = 0;
  800d40:	80000915 	stw	zero,36(r16)
	b->startAnimate = 0;
  800d44:	80000a15 	stw	zero,40(r16)
	b->frame = 0;
  800d48:	80000615 	stw	zero,24(r16)
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800d4c:	14400c36 	bltu	r2,r17,800d80 <initActionButton+0xa0>
  800d50:	8c45883a 	add	r2,r17,r17
  800d54:	1085883a 	add	r2,r2,r2
  800d58:	00c02034 	movhi	r3,128
  800d5c:	18c35b04 	addi	r3,r3,3436
  800d60:	10c5883a 	add	r2,r2,r3
  800d64:	11000017 	ldw	r4,0(r2)
  800d68:	2000683a 	jmp	r4
  800d6c:	00800dec 	andhi	r2,zero,55
  800d70:	00800e20 	cmpeqi	r2,zero,56
  800d74:	00800e14 	movui	r2,56
  800d78:	00800e08 	cmpgei	r2,zero,56
  800d7c:	00800dfc 	xorhi	r2,zero,55

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800d80:	80000715 	stw	zero,28(r16)
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  800d84:	88001b26 	beq	r17,zero,800df4 <initActionButton+0x114>

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800d88:	00803344 	movi	r2,205
	ab->y_pos = getYActionBtn(type);
	ab->range = initRange(ab->x_pos, ab->y_pos, 20, 20);
  800d8c:	81000717 	ldw	r4,28(r16)
  800d90:	01800504 	movi	r6,20
  800d94:	100b883a 	mov	r5,r2
  800d98:	300f883a 	mov	r7,r6
// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
	ab->y_pos = getYActionBtn(type);
  800d9c:	80800815 	stw	r2,32(r16)
	ab->range = initRange(ab->x_pos, ab->y_pos, 20, 20);
  800da0:	080c8280 	call	80c828 <initRange>
  800da4:	80800215 	stw	r2,8(r16)
	ab->type = type;
	ab->Panel = f;
	ab->draw = drawActionButton;
  800da8:	00802034 	movhi	r2,128
  800dac:	1080dd04 	addi	r2,r2,884
  800db0:	80800e15 	stw	r2,56(r16)
	ab->collide = actionButtonCollide;
	ab->buttonType = action;
  800db4:	00800044 	movi	r2,1
	ab->y_pos = getYActionBtn(type);
	ab->range = initRange(ab->x_pos, ab->y_pos, 20, 20);
	ab->type = type;
	ab->Panel = f;
	ab->draw = drawActionButton;
	ab->collide = actionButtonCollide;
  800db8:	00c02034 	movhi	r3,128
  800dbc:	18c79404 	addi	r3,r3,7760
	ab->buttonType = action;
  800dc0:	80800015 	stw	r2,0(r16)
	return ab;
}
  800dc4:	8005883a 	mov	r2,r16
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
	ab->y_pos = getYActionBtn(type);
	ab->range = initRange(ab->x_pos, ab->y_pos, 20, 20);
	ab->type = type;
  800dc8:	84400415 	stw	r17,16(r16)
	ab->Panel = f;
  800dcc:	84800115 	stw	r18,4(r16)
	ab->draw = drawActionButton;
	ab->collide = actionButtonCollide;
  800dd0:	80c00f15 	stw	r3,60(r16)
	ab->buttonType = action;
	return ab;
}
  800dd4:	dfc00317 	ldw	ra,12(sp)
  800dd8:	dc800217 	ldw	r18,8(sp)
  800ddc:	dc400117 	ldw	r17,4(sp)
  800de0:	dc000017 	ldw	r16,0(sp)
  800de4:	dec00404 	addi	sp,sp,16
  800de8:	f800283a 	ret

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800dec:	00802444 	movi	r2,145
  800df0:	80800715 	stw	r2,28(r16)
	return x;
}

int getYActionBtn(int actionBtnType){
	int y = 0;
	switch(actionBtnType){
  800df4:	00803204 	movi	r2,200
  800df8:	003fe406 	br	800d8c <initActionButton+0xac>

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800dfc:	00803344 	movi	r2,205
  800e00:	80800715 	stw	r2,28(r16)
  800e04:	003fe006 	br	800d88 <initActionButton+0xa8>
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800e08:	008017c4 	movi	r2,95

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800e0c:	80800715 	stw	r2,28(r16)
  800e10:	003fdd06 	br	800d88 <initActionButton+0xa8>
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800e14:	00802d04 	movi	r2,180

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800e18:	80800715 	stw	r2,28(r16)
  800e1c:	003fda06 	br	800d88 <initActionButton+0xa8>
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
}

int getXActionBtn(int actionBtnType){
	int x = 0;
	switch(actionBtnType){
  800e20:	00801e04 	movi	r2,120

// action button type - used for drawing position later
// 0:PLAY, 1:STOP, 2:PAUSE, 3:PREV, 4:NEXT
struct Button* initActionButton(int type, struct Frame* f){
	struct Button* ab = initButton();
	ab->x_pos = getXActionBtn(type);
  800e24:	80800715 	stw	r2,28(r16)
  800e28:	003fd706 	br	800d88 <initActionButton+0xa8>

00800e2c <initPlaylistButton>:
	(*this)->name = NULL;
	free((*this));
	*this = NULL;
}

struct Button* initPlaylistButton(int x, int y, char* name, int id, struct Frame* panel){
  800e2c:	defffa04 	addi	sp,sp,-24
  800e30:	ddc00415 	stw	r23,16(sp)
  800e34:	202f883a 	mov	r23,r4
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800e38:	01001004 	movi	r4,64
	(*this)->name = NULL;
	free((*this));
	*this = NULL;
}

struct Button* initPlaylistButton(int x, int y, char* name, int id, struct Frame* panel){
  800e3c:	dfc00515 	stw	ra,20(sp)
  800e40:	dd400315 	stw	r21,12(sp)
  800e44:	dcc00215 	stw	r19,8(sp)
  800e48:	282b883a 	mov	r21,r5
  800e4c:	3027883a 	mov	r19,r6
  800e50:	dc400115 	stw	r17,4(sp)
  800e54:	dc000015 	stw	r16,0(sp)
  800e58:	3821883a 	mov	r16,r7
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  800e5c:	08216fc0 	call	8216fc <malloc>
  800e60:	1023883a 	mov	r17,r2
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
  800e64:	00c02034 	movhi	r3,128
  800e68:	18c0ae04 	addi	r3,r3,696
  800e6c:	88c00f15 	stw	r3,60(r17)
	struct Button* pb = initButton();
	pb->name = name;
	pb->x_pos = x;
	pb->y_pos = y;
	pb->draw = drawTxtButton;
	pb->Panel = panel;
  800e70:	d8c00617 	ldw	r3,24(sp)
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
	b->x_pos = 0;
	b->y_pos = 0;
	b->buttonType = 3;
  800e74:	008000c4 	movi	r2,3
  800e78:	88800015 	stw	r2,0(r17)
	pb->name = name;
	pb->x_pos = x;
	pb->y_pos = y;
	pb->draw = drawTxtButton;
	pb->Panel = panel;
	pb->range = initRange(x, y, 79, 10);
  800e7c:	b809883a 	mov	r4,r23
  800e80:	a80b883a 	mov	r5,r21
  800e84:	018013c4 	movi	r6,79
  800e88:	01c00284 	movi	r7,10
struct Button* initPlaylistButton(int x, int y, char* name, int id, struct Frame* panel){
	struct Button* pb = initButton();
	pb->name = name;
	pb->x_pos = x;
	pb->y_pos = y;
	pb->draw = drawTxtButton;
  800e8c:	00802034 	movhi	r2,128
  800e90:	1080d504 	addi	r2,r2,852
	*this = NULL;
}

struct Button* initPlaylistButton(int x, int y, char* name, int id, struct Frame* panel){
	struct Button* pb = initButton();
	pb->name = name;
  800e94:	8cc00b15 	stw	r19,44(r17)
	pb->x_pos = x;
	pb->y_pos = y;
	pb->draw = drawTxtButton;
  800e98:	88800e15 	stw	r2,56(r17)
	pb->Panel = panel;
  800e9c:	88c00115 	stw	r3,4(r17)
#include "Button.h"

struct Button* initButton(){
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
	b->name = NULL;
	b->range = NULL;
  800ea0:	88000215 	stw	zero,8(r17)
	b->y_pos = 0;
	b->buttonType = 3;
	b->collide = dummyCollide;
	b->draw = dummyDraw;
	b->Panel = NULL;
	b->isClicked = 0;
  800ea4:	88000915 	stw	zero,36(r17)
	b->startAnimate = 0;
  800ea8:	88000a15 	stw	zero,40(r17)
	b->frame = 0;
  800eac:	88000615 	stw	zero,24(r17)
}

struct Button* initPlaylistButton(int x, int y, char* name, int id, struct Frame* panel){
	struct Button* pb = initButton();
	pb->name = name;
	pb->x_pos = x;
  800eb0:	8dc00715 	stw	r23,28(r17)
	pb->y_pos = y;
  800eb4:	8d400815 	stw	r21,32(r17)
	pb->draw = drawTxtButton;
	pb->Panel = panel;
	pb->range = initRange(x, y, 79, 10);
  800eb8:	080c8280 	call	80c828 <initRange>
  800ebc:	88800215 	stw	r2,8(r17)
	pb->collide = playlistButtonCollide;
  800ec0:	00802034 	movhi	r2,128
  800ec4:	10843404 	addi	r2,r2,4304
  800ec8:	88800f15 	stw	r2,60(r17)
	pb->id = id;
	return pb;
}
  800ecc:	8805883a 	mov	r2,r17
	pb->y_pos = y;
	pb->draw = drawTxtButton;
	pb->Panel = panel;
	pb->range = initRange(x, y, 79, 10);
	pb->collide = playlistButtonCollide;
	pb->id = id;
  800ed0:	8c000315 	stw	r16,12(r17)
	return pb;
}
  800ed4:	dfc00517 	ldw	ra,20(sp)
  800ed8:	ddc00417 	ldw	r23,16(sp)
  800edc:	dd400317 	ldw	r21,12(sp)
  800ee0:	dcc00217 	ldw	r19,8(sp)
  800ee4:	dc400117 	ldw	r17,4(sp)
  800ee8:	dc000017 	ldw	r16,0(sp)
  800eec:	dec00604 	addi	sp,sp,24
  800ef0:	f800283a 	ret

00800ef4 <highlightSongWithID>:
		}
	}
	return NULL;
}

void highlightSongWithID(int id){
  800ef4:	defffd04 	addi	sp,sp,-12

struct Button* querySongButtonFromID(int song_id){
	int i = 1;
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
  800ef8:	00800384 	movi	r2,14
		}
	}
	return NULL;
}

void highlightSongWithID(int id){
  800efc:	dfc00215 	stw	ra,8(sp)
  800f00:	dc800115 	stw	r18,4(sp)
  800f04:	dc400015 	stw	r17,0(sp)
  800f08:	200f883a 	mov	r7,r4

struct Button* querySongButtonFromID(int song_id){
	int i = 1;
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
  800f0c:	11001516 	blt	r2,r4,800f64 <highlightSongWithID+0x70>
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  800f10:	00802134 	movhi	r2,132
  800f14:	108a3a04 	addi	r2,r2,10472
  800f18:	11000017 	ldw	r4,0(r2)
  800f1c:	01400044 	movi	r5,1
  800f20:	20800317 	ldw	r2,12(r4)
  800f24:	10c00017 	ldw	r3,0(r2)
  800f28:	18800217 	ldw	r2,8(r3)
  800f2c:	11800317 	ldw	r6,12(r2)
  800f30:	29800c0e 	bge	r5,r6,800f64 <highlightSongWithID+0x70>
		if (mouse->frame->elements[2]->buttons[i]->id == song_id){
  800f34:	12000117 	ldw	r8,4(r2)
  800f38:	44800117 	ldw	r18,4(r8)
  800f3c:	90800317 	ldw	r2,12(r18)
  800f40:	38801726 	beq	r7,r2,800fa0 <highlightSongWithID+0xac>
  800f44:	4009883a 	mov	r4,r8
  800f48:	00000406 	br	800f5c <highlightSongWithID+0x68>
  800f4c:	20c00217 	ldw	r3,8(r4)
  800f50:	21000104 	addi	r4,r4,4
  800f54:	18800317 	ldw	r2,12(r3)
  800f58:	38800726 	beq	r7,r2,800f78 <highlightSongWithID+0x84>
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  800f5c:	29400044 	addi	r5,r5,1
  800f60:	29bffa1e 	bne	r5,r6,800f4c <highlightSongWithID+0x58>

void highlightSongWithID(int id){
	if (querySongButtonFromID(id) != NULL){
		highlightButton(querySongButtonFromID(id));
	}
}
  800f64:	dfc00217 	ldw	ra,8(sp)
  800f68:	dc800117 	ldw	r18,4(sp)
  800f6c:	dc400017 	ldw	r17,0(sp)
  800f70:	dec00304 	addi	sp,sp,12
  800f74:	f800283a 	ret
	// implemented yet
	if (song_id > 14){
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
		if (mouse->frame->elements[2]->buttons[i]->id == song_id){
  800f78:	4007883a 	mov	r3,r8
  800f7c:	01000044 	movi	r4,1
  800f80:	00000406 	br	800f94 <highlightSongWithID+0xa0>
  800f84:	1c800217 	ldw	r18,8(r3)
  800f88:	18c00104 	addi	r3,r3,4
  800f8c:	90800317 	ldw	r2,12(r18)
  800f90:	38800326 	beq	r7,r2,800fa0 <highlightSongWithID+0xac>
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  800f94:	21000044 	addi	r4,r4,1
  800f98:	21bffa1e 	bne	r4,r6,800f84 <highlightSongWithID+0x90>
  800f9c:	0025883a 	mov	r18,zero
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  800fa0:	90800117 	ldw	r2,4(r18)
  800fa4:	01003c44 	movi	r4,241
  800fa8:	01400344 	movi	r5,13
  800fac:	11800617 	ldw	r6,24(r2)
  800fb0:	08097380 	call	809738 <draw_notransparent>
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  800fb4:	94400717 	ldw	r17,28(r18)
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  800fb8:	94800817 	ldw	r18,32(r18)
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800fbc:	01801304 	movi	r6,76

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  800fc0:	8c63883a 	add	r17,r17,r17
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  800fc4:	94a5883a 	add	r18,r18,r18
	int x = 4* this->x_pos - 3;
  800fc8:	8c63883a 	add	r17,r17,r17
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  800fcc:	94a5883a 	add	r18,r18,r18
	int x = 4* this->x_pos - 3;
  800fd0:	8c7fff44 	addi	r17,r17,-3
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  800fd4:	917fff84 	addi	r5,r18,-2
  800fd8:	8809883a 	mov	r4,r17
  800fdc:	01c039f4 	movhi	r7,231
  800fe0:	39c47384 	addi	r7,r7,4558
  800fe4:	0809e040 	call	809e04 <drawHorizontalLine>
  800fe8:	8809883a 	mov	r4,r17
  800fec:	917fffc4 	addi	r5,r18,-1
  800ff0:	01801304 	movi	r6,76
  800ff4:	01c039f4 	movhi	r7,231
  800ff8:	39c47384 	addi	r7,r7,4558
  800ffc:	0809e040 	call	809e04 <drawHorizontalLine>
  801000:	8809883a 	mov	r4,r17
  801004:	900b883a 	mov	r5,r18
  801008:	01801304 	movi	r6,76
  80100c:	01c039f4 	movhi	r7,231
  801010:	39c47384 	addi	r7,r7,4558
  801014:	0809e040 	call	809e04 <drawHorizontalLine>
  801018:	8809883a 	mov	r4,r17
  80101c:	91400044 	addi	r5,r18,1
  801020:	01801304 	movi	r6,76
  801024:	01c039f4 	movhi	r7,231
  801028:	39c47384 	addi	r7,r7,4558
  80102c:	0809e040 	call	809e04 <drawHorizontalLine>
  801030:	8809883a 	mov	r4,r17
  801034:	91400084 	addi	r5,r18,2
  801038:	01801304 	movi	r6,76
  80103c:	01c039f4 	movhi	r7,231
  801040:	39c47384 	addi	r7,r7,4558
  801044:	0809e040 	call	809e04 <drawHorizontalLine>
  801048:	8809883a 	mov	r4,r17
  80104c:	914000c4 	addi	r5,r18,3
  801050:	01801304 	movi	r6,76
  801054:	01c039f4 	movhi	r7,231
  801058:	39c47384 	addi	r7,r7,4558
  80105c:	0809e040 	call	809e04 <drawHorizontalLine>
  801060:	8809883a 	mov	r4,r17
  801064:	91400104 	addi	r5,r18,4
  801068:	01801304 	movi	r6,76
  80106c:	01c039f4 	movhi	r7,231
  801070:	39c47384 	addi	r7,r7,4558
  801074:	0809e040 	call	809e04 <drawHorizontalLine>
  801078:	8809883a 	mov	r4,r17
  80107c:	91400144 	addi	r5,r18,5
  801080:	01801304 	movi	r6,76
  801084:	01c039f4 	movhi	r7,231
  801088:	39c47384 	addi	r7,r7,4558
  80108c:	0809e040 	call	809e04 <drawHorizontalLine>
  801090:	8809883a 	mov	r4,r17
  801094:	91400184 	addi	r5,r18,6
  801098:	01801304 	movi	r6,76
  80109c:	01c039f4 	movhi	r7,231
  8010a0:	39c47384 	addi	r7,r7,4558
  8010a4:	0809e040 	call	809e04 <drawHorizontalLine>
  8010a8:	8809883a 	mov	r4,r17
  8010ac:	914001c4 	addi	r5,r18,7
  8010b0:	01801304 	movi	r6,76
  8010b4:	01c039f4 	movhi	r7,231
  8010b8:	39c47384 	addi	r7,r7,4558

void highlightSongWithID(int id){
	if (querySongButtonFromID(id) != NULL){
		highlightButton(querySongButtonFromID(id));
	}
}
  8010bc:	dfc00217 	ldw	ra,8(sp)
  8010c0:	dc800117 	ldw	r18,4(sp)
  8010c4:	dc400017 	ldw	r17,0(sp)
  8010c8:	dec00304 	addi	sp,sp,12
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8010cc:	0809e041 	jmpi	809e04 <drawHorizontalLine>

008010d0 <playlistButtonCollide>:
	}

}

void playlistButtonCollide(struct Button* this){
  8010d0:	defff704 	addi	sp,sp,-36
  8010d4:	ddc00715 	stw	r23,28(sp)
	//db.curr_playlist_id = this->id;
	mouse->frame->elements[3]->currentPlaylist = this->id;
  8010d8:	05c02134 	movhi	r23,132
  8010dc:	bdca3a04 	addi	r23,r23,10472
  8010e0:	b8800017 	ldw	r2,0(r23)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  8010e4:	20c00117 	ldw	r3,4(r4)
		drawHorizontalLine(x, y, 76, 0xe711ce);
	}

}

void playlistButtonCollide(struct Button* this){
  8010e8:	dd400515 	stw	r21,20(sp)
  8010ec:	202b883a 	mov	r21,r4
	//db.curr_playlist_id = this->id;
	mouse->frame->elements[3]->currentPlaylist = this->id;
  8010f0:	11000317 	ldw	r4,12(r2)
  8010f4:	a9c00317 	ldw	r7,12(r21)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  8010f8:	19800617 	ldw	r6,24(r3)

}

void playlistButtonCollide(struct Button* this){
	//db.curr_playlist_id = this->id;
	mouse->frame->elements[3]->currentPlaylist = this->id;
  8010fc:	20800017 	ldw	r2,0(r4)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  801100:	01400344 	movi	r5,13
  801104:	01003c44 	movi	r4,241

}

void playlistButtonCollide(struct Button* this){
	//db.curr_playlist_id = this->id;
	mouse->frame->elements[3]->currentPlaylist = this->id;
  801108:	10c00317 	ldw	r3,12(r2)
		drawHorizontalLine(x, y, 76, 0xe711ce);
	}

}

void playlistButtonCollide(struct Button* this){
  80110c:	dfc00815 	stw	ra,32(sp)
  801110:	dd800615 	stw	r22,24(sp)
	//db.curr_playlist_id = this->id;
	mouse->frame->elements[3]->currentPlaylist = this->id;
  801114:	19c00515 	stw	r7,20(r3)
		drawHorizontalLine(x, y, 76, 0xe711ce);
	}

}

void playlistButtonCollide(struct Button* this){
  801118:	dd000415 	stw	r20,16(sp)
  80111c:	dcc00315 	stw	r19,12(sp)
  801120:	dc800215 	stw	r18,8(sp)
  801124:	dc400115 	stw	r17,4(sp)
  801128:	dc000015 	stw	r16,0(sp)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  80112c:	08097380 	call	809738 <draw_notransparent>
	int i = 0;
	int y = 4* this->y_pos - 2;
  801130:	a9400817 	ldw	r5,32(r21)
	int x = 4* this->x_pos - 3;
  801134:	ac400717 	ldw	r17,28(r21)
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801138:	05001304 	movi	r20,76
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  80113c:	294b883a 	add	r5,r5,r5
	int x = 4* this->x_pos - 3;
  801140:	8c63883a 	add	r17,r17,r17
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  801144:	294b883a 	add	r5,r5,r5
	int x = 4* this->x_pos - 3;
  801148:	8c63883a 	add	r17,r17,r17
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  80114c:	058039f4 	movhi	r22,231
  801150:	b5847384 	addi	r22,r22,4558

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  801154:	8c7fff44 	addi	r17,r17,-3
	for (i = 0; i < 10; i++, y++){
  801158:	04800044 	movi	r18,1
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  80115c:	297fff84 	addi	r5,r5,-2
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  801160:	2ca1883a 	add	r16,r5,r18
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801164:	8809883a 	mov	r4,r17
  801168:	a00d883a 	mov	r6,r20
  80116c:	b00f883a 	mov	r7,r22
  801170:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  801174:	84a7883a 	add	r19,r16,r18
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801178:	8809883a 	mov	r4,r17
  80117c:	800b883a 	mov	r5,r16
  801180:	a00d883a 	mov	r6,r20
  801184:	b00f883a 	mov	r7,r22
  801188:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  80118c:	9ca1883a 	add	r16,r19,r18
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801190:	8809883a 	mov	r4,r17
  801194:	980b883a 	mov	r5,r19
  801198:	a00d883a 	mov	r6,r20
  80119c:	b00f883a 	mov	r7,r22
  8011a0:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  8011a4:	84a7883a 	add	r19,r16,r18
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8011a8:	8809883a 	mov	r4,r17
  8011ac:	800b883a 	mov	r5,r16
  8011b0:	a00d883a 	mov	r6,r20
  8011b4:	b00f883a 	mov	r7,r22
  8011b8:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  8011bc:	9ca1883a 	add	r16,r19,r18
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8011c0:	8809883a 	mov	r4,r17
  8011c4:	980b883a 	mov	r5,r19
  8011c8:	a00d883a 	mov	r6,r20
  8011cc:	b00f883a 	mov	r7,r22
  8011d0:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  8011d4:	84a7883a 	add	r19,r16,r18
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8011d8:	8809883a 	mov	r4,r17
  8011dc:	800b883a 	mov	r5,r16
  8011e0:	a00d883a 	mov	r6,r20
  8011e4:	b00f883a 	mov	r7,r22
  8011e8:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  8011ec:	9ca1883a 	add	r16,r19,r18
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8011f0:	8809883a 	mov	r4,r17
  8011f4:	980b883a 	mov	r5,r19
  8011f8:	a00d883a 	mov	r6,r20
  8011fc:	b00f883a 	mov	r7,r22
  801200:	0809e040 	call	809e04 <drawHorizontalLine>
void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
  801204:	84a7883a 	add	r19,r16,r18
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801208:	8809883a 	mov	r4,r17
  80120c:	800b883a 	mov	r5,r16
  801210:	a00d883a 	mov	r6,r20
  801214:	b00f883a 	mov	r7,r22
  801218:	0809e040 	call	809e04 <drawHorizontalLine>
  80121c:	980b883a 	mov	r5,r19
  801220:	a00d883a 	mov	r6,r20
  801224:	b00f883a 	mov	r7,r22
  801228:	8809883a 	mov	r4,r17
  80122c:	0809e040 	call	809e04 <drawHorizontalLine>
  801230:	8809883a 	mov	r4,r17
  801234:	9c8b883a 	add	r5,r19,r18
  801238:	a00d883a 	mov	r6,r20
  80123c:	b00f883a 	mov	r7,r22
  801240:	0809e040 	call	809e04 <drawHorizontalLine>

void playlistButtonCollide(struct Button* this){
	//db.curr_playlist_id = this->id;
	mouse->frame->elements[3]->currentPlaylist = this->id;
	highlightButton(this);
	this->Panel->mainFrame->currentPanel = 2;
  801244:	a9400117 	ldw	r5,4(r21)
	mouse->frame->currentPanel = 2;
  801248:	b8800017 	ldw	r2,0(r23)

void playlistButtonCollide(struct Button* this){
	//db.curr_playlist_id = this->id;
	mouse->frame->elements[3]->currentPlaylist = this->id;
	highlightButton(this);
	this->Panel->mainFrame->currentPanel = 2;
  80124c:	01800084 	movi	r6,2
  801250:	29000717 	ldw	r4,28(r5)
	mouse->frame->currentPanel = 2;
  801254:	10c00317 	ldw	r3,12(r2)
	this->Panel->elements[0] = initSongInListPanel(this->Panel->mainFrame, this->id);
  801258:	2c000017 	ldw	r16,0(r5)

void playlistButtonCollide(struct Button* this){
	//db.curr_playlist_id = this->id;
	mouse->frame->elements[3]->currentPlaylist = this->id;
	highlightButton(this);
	this->Panel->mainFrame->currentPanel = 2;
  80125c:	21800415 	stw	r6,16(r4)
	mouse->frame->currentPanel = 2;
  801260:	19800415 	stw	r6,16(r3)
	this->Panel->elements[0] = initSongInListPanel(this->Panel->mainFrame, this->id);
  801264:	a9400317 	ldw	r5,12(r21)
  801268:	080851c0 	call	80851c <initSongInListPanel>
  80126c:	80800015 	stw	r2,0(r16)
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
  801270:	a8800117 	ldw	r2,4(r21)
  801274:	10c00017 	ldw	r3,0(r2)
  801278:	19000017 	ldw	r4,0(r3)
  80127c:	20800817 	ldw	r2,32(r4)
}
  801280:	dfc00817 	ldw	ra,32(sp)
  801284:	ddc00717 	ldw	r23,28(sp)
  801288:	dd800617 	ldw	r22,24(sp)
  80128c:	dd400517 	ldw	r21,20(sp)
  801290:	dd000417 	ldw	r20,16(sp)
  801294:	dcc00317 	ldw	r19,12(sp)
  801298:	dc800217 	ldw	r18,8(sp)
  80129c:	dc400117 	ldw	r17,4(sp)
  8012a0:	dc000017 	ldw	r16,0(sp)
  8012a4:	dec00904 	addi	sp,sp,36
	mouse->frame->elements[3]->currentPlaylist = this->id;
	highlightButton(this);
	this->Panel->mainFrame->currentPanel = 2;
	mouse->frame->currentPanel = 2;
	this->Panel->elements[0] = initSongInListPanel(this->Panel->mainFrame, this->id);
	this->Panel->elements[0]->drawFrame(this->Panel->elements[0]);
  8012a8:	1000683a 	jmp	r2

008012ac <nextButtonCollide>:
		//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id-1]);
		printf("Prev button is clicked.\n");
	}
}

void nextButtonCollide(struct Button* this){
  8012ac:	defffb04 	addi	sp,sp,-20
  8012b0:	dc000115 	stw	r16,4(sp)
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
  8012b4:	04002134 	movhi	r16,132
  8012b8:	840a6204 	addi	r16,r16,10632
  8012bc:	80c00017 	ldw	r3,0(r16)
  8012c0:	8080a717 	ldw	r2,668(r16)
		//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id-1]);
		printf("Prev button is clicked.\n");
	}
}

void nextButtonCollide(struct Button* this){
  8012c4:	dc400215 	stw	r17,8(sp)
  8012c8:	dfc00415 	stw	ra,16(sp)
  8012cc:	dc800315 	stw	r18,12(sp)
  8012d0:	2023883a 	mov	r17,r4
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
  8012d4:	1880040e 	bge	r3,r2,8012e8 <nextButtonCollide+0x3c>
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8012d8:	04802134 	movhi	r18,132
  8012dc:	948a3704 	addi	r18,r18,10460
	}
}

void nextButtonCollide(struct Button* this){
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
	syncNext(db.curr_song_id);
  8012e0:	1809883a 	mov	r4,r3
		printf("Prev button is clicked.\n");
	}
}

void nextButtonCollide(struct Button* this){
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
  8012e4:	1800061e 	bne	r3,zero,801300 <nextButtonCollide+0x54>
	syncNext(db.curr_song_id);
	updateVolumeValue(db.curr_song_id + 1);
	if(this == NULL) return;
	//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id+1]);
	printf("Next button is clicked.\n");
}
  8012e8:	dfc00417 	ldw	ra,16(sp)
  8012ec:	dc800317 	ldw	r18,12(sp)
  8012f0:	dc400217 	ldw	r17,8(sp)
  8012f4:	dc000117 	ldw	r16,4(sp)
  8012f8:	dec00504 	addi	sp,sp,20
  8012fc:	f800283a 	ret
	}
}

void nextButtonCollide(struct Button* this){
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
	syncNext(db.curr_song_id);
  801300:	08037b40 	call	8037b4 <syncNext>
	updateVolumeValue(db.curr_song_id + 1);
  801304:	80800017 	ldw	r2,0(r16)
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801308:	014020f4 	movhi	r5,131
  80130c:	294bac04 	addi	r5,r5,11952
  801310:	d809883a 	mov	r4,sp
}

void nextButtonCollide(struct Button* this){
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
	syncNext(db.curr_song_id);
	updateVolumeValue(db.curr_song_id + 1);
  801314:	10800044 	addi	r2,r2,1
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  801318:	10001c26 	beq	r2,zero,80138c <nextButtonCollide+0xe0>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  80131c:	1085883a 	add	r2,r2,r2
  801320:	1085883a 	add	r2,r2,r2
  801324:	1405883a 	add	r2,r2,r16
  801328:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  80132c:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801330:	19800717 	ldw	r6,28(r3)
  801334:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801338:	91000017 	ldw	r4,0(r18)
  80133c:	014020f4 	movhi	r5,131
  801340:	294bad04 	addi	r5,r5,11956
  801344:	018001c4 	movi	r6,7
  801348:	01c00d84 	movi	r7,54
  80134c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  801350:	91000017 	ldw	r4,0(r18)
  801354:	d80b883a 	mov	r5,sp
  801358:	01800204 	movi	r6,8
  80135c:	01c00d84 	movi	r7,54
  801360:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
	syncNext(db.curr_song_id);
	updateVolumeValue(db.curr_song_id + 1);
	if(this == NULL) return;
	//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id+1]);
	printf("Next button is clicked.\n");
  801364:	010020f4 	movhi	r4,131
  801368:	210bd704 	addi	r4,r4,12124

void nextButtonCollide(struct Button* this){
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
	syncNext(db.curr_song_id);
	updateVolumeValue(db.curr_song_id + 1);
	if(this == NULL) return;
  80136c:	883fde26 	beq	r17,zero,8012e8 <nextButtonCollide+0x3c>
	//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id+1]);
	printf("Next button is clicked.\n");
  801370:	08221800 	call	822180 <puts>
}
  801374:	dfc00417 	ldw	ra,16(sp)
  801378:	dc800317 	ldw	r18,12(sp)
  80137c:	dc400217 	ldw	r17,8(sp)
  801380:	dc000117 	ldw	r16,4(sp)
  801384:	dec00504 	addi	sp,sp,20
  801388:	f800283a 	ret
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  80138c:	00800044 	movi	r2,1
  801390:	003fe206 	br	80131c <nextButtonCollide+0x70>

00801394 <prevButtonCollide>:
		updateVolumeValue(db.curr_song_id);
	}
}

void prevButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
  801394:	00802134 	movhi	r2,132
  801398:	108a3a04 	addi	r2,r2,10472
  80139c:	11400017 	ldw	r5,0(r2)
		printf("Stop button is clicked\n");
		updateVolumeValue(db.curr_song_id);
	}
}

void prevButtonCollide(struct Button* this){
  8013a0:	defffa04 	addi	sp,sp,-24
  8013a4:	dc000115 	stw	r16,4(sp)
	if (mouse->frame->currentPanel != 1){
  8013a8:	28c00317 	ldw	r3,12(r5)
  8013ac:	04000044 	movi	r16,1
		printf("Stop button is clicked\n");
		updateVolumeValue(db.curr_song_id);
	}
}

void prevButtonCollide(struct Button* this){
  8013b0:	dc800315 	stw	r18,12(sp)
	if (mouse->frame->currentPanel != 1){
  8013b4:	18800417 	ldw	r2,16(r3)
		printf("Stop button is clicked\n");
		updateVolumeValue(db.curr_song_id);
	}
}

void prevButtonCollide(struct Button* this){
  8013b8:	dc400215 	stw	r17,8(sp)
  8013bc:	dfc00515 	stw	ra,20(sp)
  8013c0:	dcc00415 	stw	r19,16(sp)
	if (mouse->frame->currentPanel != 1){
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
  8013c4:	04402134 	movhi	r17,132
  8013c8:	8c4a6204 	addi	r17,r17,10632
		printf("Stop button is clicked\n");
		updateVolumeValue(db.curr_song_id);
	}
}

void prevButtonCollide(struct Button* this){
  8013cc:	2025883a 	mov	r18,r4
	if (mouse->frame->currentPanel != 1){
  8013d0:	14002226 	beq	r2,r16,80145c <prevButtonCollide+0xc8>
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
  8013d4:	88800017 	ldw	r2,0(r17)
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8013d8:	04c02134 	movhi	r19,132
  8013dc:	9cca3704 	addi	r19,r19,10460
}

void prevButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
		syncPrev(db.curr_song_id);
  8013e0:	1009883a 	mov	r4,r2
	}
}

void prevButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
  8013e4:	80801d0e 	bge	r16,r2,80145c <prevButtonCollide+0xc8>
		syncPrev(db.curr_song_id);
  8013e8:	08038780 	call	803878 <syncPrev>
		updateVolumeValue(db.curr_song_id - 1);
  8013ec:	88800017 	ldw	r2,0(r17)
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8013f0:	014020f4 	movhi	r5,131
  8013f4:	294bac04 	addi	r5,r5,11952
  8013f8:	d809883a 	mov	r4,sp

void prevButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
		syncPrev(db.curr_song_id);
		updateVolumeValue(db.curr_song_id - 1);
  8013fc:	10bfffc4 	addi	r2,r2,-1
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  801400:	10001d26 	beq	r2,zero,801478 <prevButtonCollide+0xe4>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801404:	1085883a 	add	r2,r2,r2
  801408:	1085883a 	add	r2,r2,r2
  80140c:	1445883a 	add	r2,r2,r17
  801410:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  801414:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801418:	19800717 	ldw	r6,28(r3)
  80141c:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801420:	99000017 	ldw	r4,0(r19)
  801424:	014020f4 	movhi	r5,131
  801428:	294bad04 	addi	r5,r5,11956
  80142c:	018001c4 	movi	r6,7
  801430:	01c00d84 	movi	r7,54
  801434:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  801438:	99000017 	ldw	r4,0(r19)
  80143c:	d80b883a 	mov	r5,sp
  801440:	01800204 	movi	r6,8
  801444:	01c00d84 	movi	r7,54
  801448:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
		syncPrev(db.curr_song_id);
		updateVolumeValue(db.curr_song_id - 1);
		if(this == NULL) return;
		//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id-1]);
		printf("Prev button is clicked.\n");
  80144c:	010020f4 	movhi	r4,131
  801450:	210bdd04 	addi	r4,r4,12148
void prevButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
		syncPrev(db.curr_song_id);
		updateVolumeValue(db.curr_song_id - 1);
		if(this == NULL) return;
  801454:	90000126 	beq	r18,zero,80145c <prevButtonCollide+0xc8>
		//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id-1]);
		printf("Prev button is clicked.\n");
  801458:	08221800 	call	822180 <puts>
	}
}
  80145c:	dfc00517 	ldw	ra,20(sp)
  801460:	dcc00417 	ldw	r19,16(sp)
  801464:	dc800317 	ldw	r18,12(sp)
  801468:	dc400217 	ldw	r17,8(sp)
  80146c:	dc000117 	ldw	r16,4(sp)
  801470:	dec00604 	addi	sp,sp,24
  801474:	f800283a 	ret
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  801478:	8005883a 	mov	r2,r16
  80147c:	003fe106 	br	801404 <prevButtonCollide+0x70>

00801480 <stopButtonCollide>:
		updateVolumeValue(db.curr_song_id);
	}
}

void stopButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
  801480:	00802134 	movhi	r2,132
  801484:	108a3a04 	addi	r2,r2,10472
  801488:	11000017 	ldw	r4,0(r2)
		printf("Pause button is clicked.\n");
		updateVolumeValue(db.curr_song_id);
	}
}

void stopButtonCollide(struct Button* this){
  80148c:	defffc04 	addi	sp,sp,-16
  801490:	dc000115 	stw	r16,4(sp)
	if (mouse->frame->currentPanel != 1){
  801494:	20800317 	ldw	r2,12(r4)
  801498:	04000044 	movi	r16,1
		printf("Pause button is clicked.\n");
		updateVolumeValue(db.curr_song_id);
	}
}

void stopButtonCollide(struct Button* this){
  80149c:	dc400215 	stw	r17,8(sp)
	if (mouse->frame->currentPanel != 1){
  8014a0:	10c00417 	ldw	r3,16(r2)
		printf("Pause button is clicked.\n");
		updateVolumeValue(db.curr_song_id);
	}
}

void stopButtonCollide(struct Button* this){
  8014a4:	dfc00315 	stw	ra,12(sp)
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8014a8:	04402134 	movhi	r17,132
  8014ac:	8c4a3704 	addi	r17,r17,10460
		updateVolumeValue(db.curr_song_id);
	}
}

void stopButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
  8014b0:	1c001d26 	beq	r3,r16,801528 <stopButtonCollide+0xa8>
		syncStop();
  8014b4:	08033a00 	call	8033a0 <syncStop>
		printf("Stop button is clicked\n");
  8014b8:	010020f4 	movhi	r4,131
  8014bc:	210be304 	addi	r4,r4,12172
  8014c0:	08221800 	call	822180 <puts>
		updateVolumeValue(db.curr_song_id);
  8014c4:	00c02134 	movhi	r3,132
  8014c8:	18ca6204 	addi	r3,r3,10632
  8014cc:	18800017 	ldw	r2,0(r3)
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8014d0:	014020f4 	movhi	r5,131
  8014d4:	294bac04 	addi	r5,r5,11952
  8014d8:	d809883a 	mov	r4,sp
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  8014dc:	10001726 	beq	r2,zero,80153c <stopButtonCollide+0xbc>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8014e0:	1085883a 	add	r2,r2,r2
  8014e4:	1085883a 	add	r2,r2,r2
  8014e8:	10c5883a 	add	r2,r2,r3
  8014ec:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  8014f0:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8014f4:	19800717 	ldw	r6,28(r3)
  8014f8:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8014fc:	89000017 	ldw	r4,0(r17)
  801500:	014020f4 	movhi	r5,131
  801504:	294bad04 	addi	r5,r5,11956
  801508:	018001c4 	movi	r6,7
  80150c:	01c00d84 	movi	r7,54
  801510:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  801514:	89000017 	ldw	r4,0(r17)
  801518:	d80b883a 	mov	r5,sp
  80151c:	01800204 	movi	r6,8
  801520:	01c00d84 	movi	r7,54
  801524:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	if (mouse->frame->currentPanel != 1){
		syncStop();
		printf("Stop button is clicked\n");
		updateVolumeValue(db.curr_song_id);
	}
}
  801528:	dfc00317 	ldw	ra,12(sp)
  80152c:	dc400217 	ldw	r17,8(sp)
  801530:	dc000117 	ldw	r16,4(sp)
  801534:	dec00404 	addi	sp,sp,16
  801538:	f800283a 	ret
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  80153c:	8005883a 	mov	r2,r16
  801540:	003fe706 	br	8014e0 <stopButtonCollide+0x60>

00801544 <pauseButtonCollide>:
		}
	}
}

void pauseButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
  801544:	00802134 	movhi	r2,132
  801548:	108a3a04 	addi	r2,r2,10472
  80154c:	11000017 	ldw	r4,0(r2)
			updateVolumeValue(db.curr_song_id);
		}
	}
}

void pauseButtonCollide(struct Button* this){
  801550:	defffb04 	addi	sp,sp,-20
  801554:	dc400215 	stw	r17,8(sp)
	if (mouse->frame->currentPanel != 1){
  801558:	20c00317 	ldw	r3,12(r4)
  80155c:	04400044 	movi	r17,1
			updateVolumeValue(db.curr_song_id);
		}
	}
}

void pauseButtonCollide(struct Button* this){
  801560:	dc800315 	stw	r18,12(sp)
	if (mouse->frame->currentPanel != 1){
  801564:	18800417 	ldw	r2,16(r3)
			updateVolumeValue(db.curr_song_id);
		}
	}
}

void pauseButtonCollide(struct Button* this){
  801568:	dc000115 	stw	r16,4(sp)
  80156c:	dfc00415 	stw	ra,16(sp)
	if (mouse->frame->currentPanel != 1){
		syncPause(db.curr_song_id);
  801570:	04002134 	movhi	r16,132
  801574:	840a6204 	addi	r16,r16,10632
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801578:	04802134 	movhi	r18,132
  80157c:	948a3704 	addi	r18,r18,10460
		}
	}
}

void pauseButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
  801580:	14401c26 	beq	r2,r17,8015f4 <pauseButtonCollide+0xb0>
		syncPause(db.curr_song_id);
  801584:	81000017 	ldw	r4,0(r16)
  801588:	08033ec0 	call	8033ec <syncPause>
		printf("Pause button is clicked.\n");
  80158c:	010020f4 	movhi	r4,131
  801590:	210be904 	addi	r4,r4,12196
  801594:	08221800 	call	822180 <puts>
		updateVolumeValue(db.curr_song_id);
  801598:	80800017 	ldw	r2,0(r16)
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  80159c:	014020f4 	movhi	r5,131
  8015a0:	294bac04 	addi	r5,r5,11952
  8015a4:	d809883a 	mov	r4,sp
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  8015a8:	10001826 	beq	r2,zero,80160c <pauseButtonCollide+0xc8>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8015ac:	1085883a 	add	r2,r2,r2
  8015b0:	1085883a 	add	r2,r2,r2
  8015b4:	1405883a 	add	r2,r2,r16
  8015b8:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  8015bc:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8015c0:	19800717 	ldw	r6,28(r3)
  8015c4:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8015c8:	91000017 	ldw	r4,0(r18)
  8015cc:	014020f4 	movhi	r5,131
  8015d0:	294bad04 	addi	r5,r5,11956
  8015d4:	018001c4 	movi	r6,7
  8015d8:	01c00d84 	movi	r7,54
  8015dc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  8015e0:	91000017 	ldw	r4,0(r18)
  8015e4:	d80b883a 	mov	r5,sp
  8015e8:	01800204 	movi	r6,8
  8015ec:	01c00d84 	movi	r7,54
  8015f0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	if (mouse->frame->currentPanel != 1){
		syncPause(db.curr_song_id);
		printf("Pause button is clicked.\n");
		updateVolumeValue(db.curr_song_id);
	}
}
  8015f4:	dfc00417 	ldw	ra,16(sp)
  8015f8:	dc800317 	ldw	r18,12(sp)
  8015fc:	dc400217 	ldw	r17,8(sp)
  801600:	dc000117 	ldw	r16,4(sp)
  801604:	dec00504 	addi	sp,sp,20
  801608:	f800283a 	ret
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  80160c:	8805883a 	mov	r2,r17
  801610:	003fe606 	br	8015ac <pauseButtonCollide+0x68>

00801614 <playSongsFromSongPanel>:
}

/**
 * Highlight + play song from All Songs Panel only.
 */
void playSongsFromSongPanel(int song_id, int vol, int pos){
  801614:	defff904 	addi	sp,sp,-28
  801618:	dfc00615 	stw	ra,24(sp)
  80161c:	dd000515 	stw	r20,20(sp)
  801620:	dcc00415 	stw	r19,16(sp)
  801624:	2029883a 	mov	r20,r4
  801628:	3027883a 	mov	r19,r6
  80162c:	dc400215 	stw	r17,8(sp)
  801630:	dc800315 	stw	r18,12(sp)
  801634:	2823883a 	mov	r17,r5
  801638:	dc000115 	stw	r16,4(sp)
	// since up and down is not implemented yet,
	// don't do anything for song_id > 14
	syncStop();
  80163c:	08033a00 	call	8033a0 <syncStop>
	syncSelectList(0);
  801640:	0009883a 	mov	r4,zero
  801644:	08031f40 	call	8031f4 <syncSelectList>
	syncPlay(song_id, vol, pos);
  801648:	880b883a 	mov	r5,r17
  80164c:	a009883a 	mov	r4,r20
  801650:	980d883a 	mov	r6,r19
  801654:	08034740 	call	803474 <syncPlay>

struct Button* querySongButtonFromID(int song_id){
	int i = 1;
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
  801658:	00800384 	movi	r2,14
  80165c:	15001616 	blt	r2,r20,8016b8 <playSongsFromSongPanel+0xa4>
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  801660:	00802134 	movhi	r2,132
  801664:	108a3a04 	addi	r2,r2,10472
  801668:	10c00017 	ldw	r3,0(r2)
  80166c:	01000044 	movi	r4,1
  801670:	1a400317 	ldw	r9,12(r3)
  801674:	48800017 	ldw	r2,0(r9)
  801678:	10800217 	ldw	r2,8(r2)
  80167c:	11800317 	ldw	r6,12(r2)
  801680:	21800d0e 	bge	r4,r6,8016b8 <playSongsFromSongPanel+0xa4>
		if (mouse->frame->elements[2]->buttons[i]->id == song_id){
  801684:	11c00117 	ldw	r7,4(r2)
  801688:	3c000117 	ldw	r16,4(r7)
  80168c:	82000317 	ldw	r8,12(r16)
  801690:	a2003026 	beq	r20,r8,801754 <playSongsFromSongPanel+0x140>
  801694:	200b883a 	mov	r5,r4
  801698:	3809883a 	mov	r4,r7
  80169c:	00000406 	br	8016b0 <playSongsFromSongPanel+0x9c>
  8016a0:	20c00217 	ldw	r3,8(r4)
  8016a4:	21000104 	addi	r4,r4,4
  8016a8:	18800317 	ldw	r2,12(r3)
  8016ac:	a0802926 	beq	r20,r2,801754 <playSongsFromSongPanel+0x140>
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  8016b0:	29400044 	addi	r5,r5,1
  8016b4:	317ffa1e 	bne	r6,r5,8016a0 <playSongsFromSongPanel+0x8c>
	syncSelectList(0);
	syncPlay(song_id, vol, pos);
	if (querySongButtonFromID(song_id) != NULL && mouse->frame->currentPanel == 0){
		highlightButton(querySongButtonFromID(song_id));
	} else {
		printf("Query returns NULL song ID > 14\n");
  8016b8:	010020f4 	movhi	r4,131
  8016bc:	210bf004 	addi	r4,r4,12224
  8016c0:	08221800 	call	822180 <puts>
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  8016c4:	a0002126 	beq	r20,zero,80174c <playSongsFromSongPanel+0x138>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8016c8:	a505883a 	add	r2,r20,r20
  8016cc:	00c02134 	movhi	r3,132
  8016d0:	18ca6204 	addi	r3,r3,10632
  8016d4:	1085883a 	add	r2,r2,r2
  8016d8:	10c5883a 	add	r2,r2,r3
  8016dc:	11403617 	ldw	r5,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  8016e0:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8016e4:	d809883a 	mov	r4,sp
  8016e8:	29800717 	ldw	r6,28(r5)
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8016ec:	04002134 	movhi	r16,132
  8016f0:	840a3704 	addi	r16,r16,10460
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8016f4:	014020f4 	movhi	r5,131
  8016f8:	294bac04 	addi	r5,r5,11952
  8016fc:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801700:	81000017 	ldw	r4,0(r16)
  801704:	014020f4 	movhi	r5,131
  801708:	294bad04 	addi	r5,r5,11956
  80170c:	018001c4 	movi	r6,7
  801710:	01c00d84 	movi	r7,54
  801714:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  801718:	81000017 	ldw	r4,0(r16)
  80171c:	d80b883a 	mov	r5,sp
  801720:	01800204 	movi	r6,8
  801724:	01c00d84 	movi	r7,54
  801728:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
		highlightButton(querySongButtonFromID(song_id));
	} else {
		printf("Query returns NULL song ID > 14\n");
	}
	updateVolumeValue(song_id);
}
  80172c:	dfc00617 	ldw	ra,24(sp)
  801730:	dd000517 	ldw	r20,20(sp)
  801734:	dcc00417 	ldw	r19,16(sp)
  801738:	dc800317 	ldw	r18,12(sp)
  80173c:	dc400217 	ldw	r17,8(sp)
  801740:	dc000117 	ldw	r16,4(sp)
  801744:	dec00704 	addi	sp,sp,28
  801748:	f800283a 	ret
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  80174c:	05000044 	movi	r20,1
  801750:	003fdd06 	br	8016c8 <playSongsFromSongPanel+0xb4>
	// since up and down is not implemented yet,
	// don't do anything for song_id > 14
	syncStop();
	syncSelectList(0);
	syncPlay(song_id, vol, pos);
	if (querySongButtonFromID(song_id) != NULL && mouse->frame->currentPanel == 0){
  801754:	48800417 	ldw	r2,16(r9)
  801758:	103fd71e 	bne	r2,zero,8016b8 <playSongsFromSongPanel+0xa4>
	// implemented yet
	if (song_id > 14){
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
		if (mouse->frame->elements[2]->buttons[i]->id == song_id){
  80175c:	a2000a26 	beq	r20,r8,801788 <playSongsFromSongPanel+0x174>
  801760:	3809883a 	mov	r4,r7
  801764:	00c00044 	movi	r3,1
  801768:	00000406 	br	80177c <playSongsFromSongPanel+0x168>
  80176c:	24000217 	ldw	r16,8(r4)
  801770:	21000104 	addi	r4,r4,4
  801774:	80800317 	ldw	r2,12(r16)
  801778:	a0800326 	beq	r20,r2,801788 <playSongsFromSongPanel+0x174>
	// don't do anything since up and down is not
	// implemented yet
	if (song_id > 14){
		return NULL;
	}
	for (i = 1; i < mouse->frame->elements[2]->button_size; i++){
  80177c:	18c00044 	addi	r3,r3,1
  801780:	30fffa1e 	bne	r6,r3,80176c <playSongsFromSongPanel+0x158>
  801784:	0021883a 	mov	r16,zero
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  801788:	80800117 	ldw	r2,4(r16)
  80178c:	01003c44 	movi	r4,241
  801790:	01400344 	movi	r5,13
  801794:	11800617 	ldw	r6,24(r2)
  801798:	08097380 	call	809738 <draw_notransparent>
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  80179c:	84400717 	ldw	r17,28(r16)
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  8017a0:	84800817 	ldw	r18,32(r16)
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8017a4:	01801304 	movi	r6,76

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  8017a8:	8c63883a 	add	r17,r17,r17
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  8017ac:	94a5883a 	add	r18,r18,r18
	int x = 4* this->x_pos - 3;
  8017b0:	8c63883a 	add	r17,r17,r17
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  8017b4:	94a5883a 	add	r18,r18,r18
	int x = 4* this->x_pos - 3;
  8017b8:	8c7fff44 	addi	r17,r17,-3
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  8017bc:	917fff84 	addi	r5,r18,-2
  8017c0:	8809883a 	mov	r4,r17
  8017c4:	01c039f4 	movhi	r7,231
  8017c8:	39c47384 	addi	r7,r7,4558
  8017cc:	0809e040 	call	809e04 <drawHorizontalLine>
  8017d0:	8809883a 	mov	r4,r17
  8017d4:	917fffc4 	addi	r5,r18,-1
  8017d8:	01801304 	movi	r6,76
  8017dc:	01c039f4 	movhi	r7,231
  8017e0:	39c47384 	addi	r7,r7,4558
  8017e4:	0809e040 	call	809e04 <drawHorizontalLine>
  8017e8:	8809883a 	mov	r4,r17
  8017ec:	900b883a 	mov	r5,r18
  8017f0:	01801304 	movi	r6,76
  8017f4:	01c039f4 	movhi	r7,231
  8017f8:	39c47384 	addi	r7,r7,4558
  8017fc:	0809e040 	call	809e04 <drawHorizontalLine>
  801800:	8809883a 	mov	r4,r17
  801804:	91400044 	addi	r5,r18,1
  801808:	01801304 	movi	r6,76
  80180c:	01c039f4 	movhi	r7,231
  801810:	39c47384 	addi	r7,r7,4558
  801814:	0809e040 	call	809e04 <drawHorizontalLine>
  801818:	8809883a 	mov	r4,r17
  80181c:	91400084 	addi	r5,r18,2
  801820:	01801304 	movi	r6,76
  801824:	01c039f4 	movhi	r7,231
  801828:	39c47384 	addi	r7,r7,4558
  80182c:	0809e040 	call	809e04 <drawHorizontalLine>
  801830:	8809883a 	mov	r4,r17
  801834:	914000c4 	addi	r5,r18,3
  801838:	01801304 	movi	r6,76
  80183c:	01c039f4 	movhi	r7,231
  801840:	39c47384 	addi	r7,r7,4558
  801844:	0809e040 	call	809e04 <drawHorizontalLine>
  801848:	8809883a 	mov	r4,r17
  80184c:	91400104 	addi	r5,r18,4
  801850:	01801304 	movi	r6,76
  801854:	01c039f4 	movhi	r7,231
  801858:	39c47384 	addi	r7,r7,4558
  80185c:	0809e040 	call	809e04 <drawHorizontalLine>
  801860:	8809883a 	mov	r4,r17
  801864:	91400144 	addi	r5,r18,5
  801868:	01801304 	movi	r6,76
  80186c:	01c039f4 	movhi	r7,231
  801870:	39c47384 	addi	r7,r7,4558
  801874:	0809e040 	call	809e04 <drawHorizontalLine>
  801878:	8809883a 	mov	r4,r17
  80187c:	91400184 	addi	r5,r18,6
  801880:	01801304 	movi	r6,76
  801884:	01c039f4 	movhi	r7,231
  801888:	39c47384 	addi	r7,r7,4558
  80188c:	0809e040 	call	809e04 <drawHorizontalLine>
  801890:	8809883a 	mov	r4,r17
  801894:	914001c4 	addi	r5,r18,7
  801898:	01801304 	movi	r6,76
  80189c:	01c039f4 	movhi	r7,231
  8018a0:	39c47384 	addi	r7,r7,4558
  8018a4:	0809e040 	call	809e04 <drawHorizontalLine>
  8018a8:	003f8606 	br	8016c4 <playSongsFromSongPanel+0xb0>

008018ac <songButtonCollide>:
void songButtonCollide(struct Button* this){
	//syncStop();
	//syncPlay(this->id, db.songs[this->id]->volume, 0);
	//highlightButton(this);
	//updateVolumeValue(this->id);
	if (mouse->frame->currentPanel == 0){
  8018ac:	00802134 	movhi	r2,132
  8018b0:	108a3a04 	addi	r2,r2,10472
  8018b4:	10c00017 	ldw	r3,0(r2)

void dummyCollide(struct Button* this){
	printf("ERROR:Dummy Collide is called.\n");
}

void songButtonCollide(struct Button* this){
  8018b8:	defffb04 	addi	sp,sp,-20
  8018bc:	dc000115 	stw	r16,4(sp)
  8018c0:	2021883a 	mov	r16,r4
	//syncStop();
	//syncPlay(this->id, db.songs[this->id]->volume, 0);
	//highlightButton(this);
	//updateVolumeValue(this->id);
	if (mouse->frame->currentPanel == 0){
  8018c4:	19000317 	ldw	r4,12(r3)

void dummyCollide(struct Button* this){
	printf("ERROR:Dummy Collide is called.\n");
}

void songButtonCollide(struct Button* this){
  8018c8:	dfc00415 	stw	ra,16(sp)
  8018cc:	dc800315 	stw	r18,12(sp)
	//syncStop();
	//syncPlay(this->id, db.songs[this->id]->volume, 0);
	//highlightButton(this);
	//updateVolumeValue(this->id);
	if (mouse->frame->currentPanel == 0){
  8018d0:	20c00417 	ldw	r3,16(r4)

void dummyCollide(struct Button* this){
	printf("ERROR:Dummy Collide is called.\n");
}

void songButtonCollide(struct Button* this){
  8018d4:	dc400215 	stw	r17,8(sp)
	//syncStop();
	//syncPlay(this->id, db.songs[this->id]->volume, 0);
	//highlightButton(this);
	//updateVolumeValue(this->id);
	if (mouse->frame->currentPanel == 0){
  8018d8:	18000c26 	beq	r3,zero,80190c <songButtonCollide+0x60>
		playSongsFromSongPanel(this->id, db.songs[this->id]->volume, db.songs[this->id]->pos);
	} else if (mouse->frame->currentPanel == 2){
  8018dc:	00800084 	movi	r2,2
		db.curr_playlist_id = mouse->frame->elements[3]->currentPlaylist;
  8018e0:	04402134 	movhi	r17,132
  8018e4:	8c4a6204 	addi	r17,r17,10632
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8018e8:	04802134 	movhi	r18,132
  8018ec:	948a3704 	addi	r18,r18,10460
	//syncPlay(this->id, db.songs[this->id]->volume, 0);
	//highlightButton(this);
	//updateVolumeValue(this->id);
	if (mouse->frame->currentPanel == 0){
		playSongsFromSongPanel(this->id, db.songs[this->id]->volume, db.songs[this->id]->pos);
	} else if (mouse->frame->currentPanel == 2){
  8018f0:	18801626 	beq	r3,r2,80194c <songButtonCollide+0xa0>
		syncStop();
		syncPlay(this->id, db.songs[this->id]->volume, 0);
		updateVolumeValue(this->id);
	}

}
  8018f4:	dfc00417 	ldw	ra,16(sp)
  8018f8:	dc800317 	ldw	r18,12(sp)
  8018fc:	dc400217 	ldw	r17,8(sp)
  801900:	dc000117 	ldw	r16,4(sp)
  801904:	dec00504 	addi	sp,sp,20
  801908:	f800283a 	ret
	//syncStop();
	//syncPlay(this->id, db.songs[this->id]->volume, 0);
	//highlightButton(this);
	//updateVolumeValue(this->id);
	if (mouse->frame->currentPanel == 0){
		playSongsFromSongPanel(this->id, db.songs[this->id]->volume, db.songs[this->id]->pos);
  80190c:	81000317 	ldw	r4,12(r16)
  801910:	00802134 	movhi	r2,132
  801914:	108a6204 	addi	r2,r2,10632
  801918:	2107883a 	add	r3,r4,r4
  80191c:	18c7883a 	add	r3,r3,r3
  801920:	1887883a 	add	r3,r3,r2
  801924:	18803617 	ldw	r2,216(r3)
  801928:	11800817 	ldw	r6,32(r2)
  80192c:	11400717 	ldw	r5,28(r2)
  801930:	08016140 	call	801614 <playSongsFromSongPanel>
		syncStop();
		syncPlay(this->id, db.songs[this->id]->volume, 0);
		updateVolumeValue(this->id);
	}

}
  801934:	dfc00417 	ldw	ra,16(sp)
  801938:	dc800317 	ldw	r18,12(sp)
  80193c:	dc400217 	ldw	r17,8(sp)
  801940:	dc000117 	ldw	r16,4(sp)
  801944:	dec00504 	addi	sp,sp,20
  801948:	f800283a 	ret
	//highlightButton(this);
	//updateVolumeValue(this->id);
	if (mouse->frame->currentPanel == 0){
		playSongsFromSongPanel(this->id, db.songs[this->id]->volume, db.songs[this->id]->pos);
	} else if (mouse->frame->currentPanel == 2){
		db.curr_playlist_id = mouse->frame->elements[3]->currentPlaylist;
  80194c:	20800017 	ldw	r2,0(r4)
  801950:	10c00317 	ldw	r3,12(r2)
  801954:	19000517 	ldw	r4,20(r3)
  801958:	89003415 	stw	r4,208(r17)
		syncStop();
  80195c:	08033a00 	call	8033a0 <syncStop>
		syncPlay(this->id, db.songs[this->id]->volume, 0);
  801960:	81000317 	ldw	r4,12(r16)
  801964:	000d883a 	mov	r6,zero
  801968:	2105883a 	add	r2,r4,r4
  80196c:	1085883a 	add	r2,r2,r2
  801970:	1445883a 	add	r2,r2,r17
  801974:	10c03617 	ldw	r3,216(r2)
  801978:	19400717 	ldw	r5,28(r3)
  80197c:	08034740 	call	803474 <syncPlay>
		updateVolumeValue(this->id);
  801980:	80800317 	ldw	r2,12(r16)
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801984:	d809883a 	mov	r4,sp
  801988:	014020f4 	movhi	r5,131
  80198c:	294bac04 	addi	r5,r5,11952
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  801990:	1000011e 	bne	r2,zero,801998 <songButtonCollide+0xec>
  801994:	00800044 	movi	r2,1
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801998:	1085883a 	add	r2,r2,r2
  80199c:	1085883a 	add	r2,r2,r2
  8019a0:	1445883a 	add	r2,r2,r17
  8019a4:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  8019a8:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8019ac:	19800717 	ldw	r6,28(r3)
  8019b0:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8019b4:	91000017 	ldw	r4,0(r18)
  8019b8:	014020f4 	movhi	r5,131
  8019bc:	294bad04 	addi	r5,r5,11956
  8019c0:	018001c4 	movi	r6,7
  8019c4:	01c00d84 	movi	r7,54
  8019c8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  8019cc:	91000017 	ldw	r4,0(r18)
  8019d0:	d80b883a 	mov	r5,sp
  8019d4:	01800204 	movi	r6,8
  8019d8:	01c00d84 	movi	r7,54
  8019dc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
		syncStop();
		syncPlay(this->id, db.songs[this->id]->volume, 0);
		updateVolumeValue(this->id);
	}

}
  8019e0:	dfc00417 	ldw	ra,16(sp)
  8019e4:	dc800317 	ldw	r18,12(sp)
  8019e8:	dc400217 	ldw	r17,8(sp)
  8019ec:	dc000117 	ldw	r16,4(sp)
  8019f0:	dec00504 	addi	sp,sp,20
  8019f4:	f800283a 	ret

008019f8 <playButtonCollide>:
		drawHorizontalLine(this->x_pos, y, this->range->width, 0xffffff);
	}
}

void playButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
  8019f8:	00802134 	movhi	r2,132
  8019fc:	108a3a04 	addi	r2,r2,10472
  801a00:	10c00017 	ldw	r3,0(r2)
	for (i = 0; i < this->range->height; i++, y++){
		drawHorizontalLine(this->x_pos, y, this->range->width, 0xffffff);
	}
}

void playButtonCollide(struct Button* this){
  801a04:	defff804 	addi	sp,sp,-32
  801a08:	dc800315 	stw	r18,12(sp)
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
  801a0c:	18800317 	ldw	r2,12(r3)
	for (i = 0; i < this->range->height; i++, y++){
		drawHorizontalLine(this->x_pos, y, this->range->width, 0xffffff);
	}
}

void playButtonCollide(struct Button* this){
  801a10:	dfc00715 	stw	ra,28(sp)
  801a14:	dd400615 	stw	r21,24(sp)
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
  801a18:	10c00417 	ldw	r3,16(r2)
	for (i = 0; i < this->range->height; i++, y++){
		drawHorizontalLine(this->x_pos, y, this->range->width, 0xffffff);
	}
}

void playButtonCollide(struct Button* this){
  801a1c:	dd000515 	stw	r20,20(sp)
  801a20:	dcc00415 	stw	r19,16(sp)
  801a24:	dc400215 	stw	r17,8(sp)
  801a28:	dc000115 	stw	r16,4(sp)
  801a2c:	2025883a 	mov	r18,r4
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
  801a30:	18000b26 	beq	r3,zero,801a60 <playButtonCollide+0x68>
  801a34:	00800084 	movi	r2,2
  801a38:	18808b26 	beq	r3,r2,801c68 <playButtonCollide+0x270>
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id]);
			printf("Play button is clicked\n");
			updateVolumeValue(db.curr_song_id);
		}
	}
}
  801a3c:	dfc00717 	ldw	ra,28(sp)
  801a40:	dd400617 	ldw	r21,24(sp)
  801a44:	dd000517 	ldw	r20,20(sp)
  801a48:	dcc00417 	ldw	r19,16(sp)
  801a4c:	dc800317 	ldw	r18,12(sp)
  801a50:	dc400217 	ldw	r17,8(sp)
  801a54:	dc000117 	ldw	r16,4(sp)
  801a58:	dec00804 	addi	sp,sp,32
  801a5c:	f800283a 	ret
  801a60:	01402134 	movhi	r5,132
  801a64:	294a6204 	addi	r5,r5,10632
	}
}

void playButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
		if (db.curr_song_id == 0 || db.songs[db.curr_song_id]->sound == NULL){
  801a68:	2c000017 	ldw	r16,0(r5)
  801a6c:	05402134 	movhi	r21,132
  801a70:	ad4a6204 	addi	r21,r21,10632
  801a74:	80008926 	beq	r16,zero,801c9c <playButtonCollide+0x2a4>
  801a78:	8405883a 	add	r2,r16,r16
  801a7c:	1085883a 	add	r2,r2,r2
  801a80:	1545883a 	add	r2,r2,r21
  801a84:	10c03617 	ldw	r3,216(r2)
  801a88:	18800017 	ldw	r2,0(r3)
  801a8c:	10008326 	beq	r2,zero,801c9c <playButtonCollide+0x2a4>
			syncPlay(1, db.songs[1]->volume, 0);
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[1]);
			printf("Play button is clicked\n");
			updateVolumeValue(1);
		} else {
			syncPlay(db.curr_song_id, db.songs[db.curr_song_id]->volume, convertToMS(db.songs[db.curr_song_id]->sound->position));
  801a90:	11000317 	ldw	r4,12(r2)
  801a94:	1c400717 	ldw	r17,28(r3)
  801a98:	08196d00 	call	8196d0 <convertToMS>
  801a9c:	100d883a 	mov	r6,r2
  801aa0:	8009883a 	mov	r4,r16
  801aa4:	880b883a 	mov	r5,r17
  801aa8:	08034740 	call	803474 <syncPlay>
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id]);
  801aac:	90c00117 	ldw	r3,4(r18)
  801ab0:	a8800017 	ldw	r2,0(r21)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  801ab4:	01003c44 	movi	r4,241
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[1]);
			printf("Play button is clicked\n");
			updateVolumeValue(1);
		} else {
			syncPlay(db.curr_song_id, db.songs[db.curr_song_id]->volume, convertToMS(db.songs[db.curr_song_id]->sound->position));
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id]);
  801ab8:	19400717 	ldw	r5,28(r3)
  801abc:	1085883a 	add	r2,r2,r2
  801ac0:	1085883a 	add	r2,r2,r2
  801ac4:	29c00017 	ldw	r7,0(r5)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  801ac8:	01400344 	movi	r5,13
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[1]);
			printf("Play button is clicked\n");
			updateVolumeValue(1);
		} else {
			syncPlay(db.curr_song_id, db.songs[db.curr_song_id]->volume, convertToMS(db.songs[db.curr_song_id]->sound->position));
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id]);
  801acc:	38c00217 	ldw	r3,8(r7)
  801ad0:	19800117 	ldw	r6,4(r3)
  801ad4:	1185883a 	add	r2,r2,r6
  801ad8:	14000017 	ldw	r16,0(r2)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  801adc:	80c00117 	ldw	r3,4(r16)
  801ae0:	19800617 	ldw	r6,24(r3)
  801ae4:	08097380 	call	809738 <draw_notransparent>
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  801ae8:	84800717 	ldw	r18,28(r16)
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  801aec:	84c00817 	ldw	r19,32(r16)
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801af0:	01801304 	movi	r6,76

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  801af4:	94a5883a 	add	r18,r18,r18
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  801af8:	9ce7883a 	add	r19,r19,r19
	int x = 4* this->x_pos - 3;
  801afc:	94a5883a 	add	r18,r18,r18
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  801b00:	9ce7883a 	add	r19,r19,r19
	int x = 4* this->x_pos - 3;
  801b04:	94bfff44 	addi	r18,r18,-3
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801b08:	997fff84 	addi	r5,r19,-2
  801b0c:	01c039f4 	movhi	r7,231
  801b10:	39c47384 	addi	r7,r7,4558
  801b14:	9009883a 	mov	r4,r18
  801b18:	0809e040 	call	809e04 <drawHorizontalLine>
  801b1c:	9009883a 	mov	r4,r18
  801b20:	01801304 	movi	r6,76
  801b24:	01c039f4 	movhi	r7,231
  801b28:	39c47384 	addi	r7,r7,4558
  801b2c:	997fffc4 	addi	r5,r19,-1
  801b30:	0809e040 	call	809e04 <drawHorizontalLine>
  801b34:	9009883a 	mov	r4,r18
  801b38:	980b883a 	mov	r5,r19
  801b3c:	01801304 	movi	r6,76
  801b40:	01c039f4 	movhi	r7,231
  801b44:	39c47384 	addi	r7,r7,4558
  801b48:	0809e040 	call	809e04 <drawHorizontalLine>
  801b4c:	9009883a 	mov	r4,r18
  801b50:	99400044 	addi	r5,r19,1
  801b54:	01801304 	movi	r6,76
  801b58:	01c039f4 	movhi	r7,231
  801b5c:	39c47384 	addi	r7,r7,4558
  801b60:	0809e040 	call	809e04 <drawHorizontalLine>
  801b64:	9009883a 	mov	r4,r18
  801b68:	99400084 	addi	r5,r19,2
  801b6c:	01801304 	movi	r6,76
  801b70:	01c039f4 	movhi	r7,231
  801b74:	39c47384 	addi	r7,r7,4558
  801b78:	0809e040 	call	809e04 <drawHorizontalLine>
  801b7c:	9009883a 	mov	r4,r18
  801b80:	994000c4 	addi	r5,r19,3
  801b84:	01801304 	movi	r6,76
  801b88:	01c039f4 	movhi	r7,231
  801b8c:	39c47384 	addi	r7,r7,4558
  801b90:	0809e040 	call	809e04 <drawHorizontalLine>
  801b94:	9009883a 	mov	r4,r18
  801b98:	99400104 	addi	r5,r19,4
  801b9c:	01801304 	movi	r6,76
  801ba0:	01c039f4 	movhi	r7,231
  801ba4:	39c47384 	addi	r7,r7,4558
  801ba8:	0809e040 	call	809e04 <drawHorizontalLine>
  801bac:	9009883a 	mov	r4,r18
  801bb0:	99400144 	addi	r5,r19,5
  801bb4:	01801304 	movi	r6,76
  801bb8:	01c039f4 	movhi	r7,231
  801bbc:	39c47384 	addi	r7,r7,4558
  801bc0:	0809e040 	call	809e04 <drawHorizontalLine>
  801bc4:	9009883a 	mov	r4,r18
  801bc8:	99400184 	addi	r5,r19,6
  801bcc:	01801304 	movi	r6,76
  801bd0:	01c039f4 	movhi	r7,231
  801bd4:	39c47384 	addi	r7,r7,4558
  801bd8:	0809e040 	call	809e04 <drawHorizontalLine>
  801bdc:	9009883a 	mov	r4,r18
  801be0:	994001c4 	addi	r5,r19,7
  801be4:	01801304 	movi	r6,76
  801be8:	01c039f4 	movhi	r7,231
  801bec:	39c47384 	addi	r7,r7,4558
  801bf0:	0809e040 	call	809e04 <drawHorizontalLine>
			printf("Play button is clicked\n");
			updateVolumeValue(1);
		} else {
			syncPlay(db.curr_song_id, db.songs[db.curr_song_id]->volume, convertToMS(db.songs[db.curr_song_id]->sound->position));
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id]);
			printf("Play button is clicked\n");
  801bf4:	010020f4 	movhi	r4,131
  801bf8:	210bf804 	addi	r4,r4,12256
  801bfc:	08221800 	call	822180 <puts>
			updateVolumeValue(db.curr_song_id);
  801c00:	a8800017 	ldw	r2,0(r21)
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  801c04:	10009026 	beq	r2,zero,801e48 <playButtonCollide+0x450>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801c08:	1085883a 	add	r2,r2,r2
  801c0c:	1085883a 	add	r2,r2,r2
  801c10:	1545883a 	add	r2,r2,r21
  801c14:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  801c18:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801c1c:	d809883a 	mov	r4,sp
  801c20:	19800717 	ldw	r6,28(r3)
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801c24:	04002134 	movhi	r16,132
  801c28:	840a3704 	addi	r16,r16,10460
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801c2c:	014020f4 	movhi	r5,131
  801c30:	294bac04 	addi	r5,r5,11952
  801c34:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801c38:	81000017 	ldw	r4,0(r16)
  801c3c:	014020f4 	movhi	r5,131
  801c40:	294bad04 	addi	r5,r5,11956
  801c44:	018001c4 	movi	r6,7
  801c48:	01c00d84 	movi	r7,54
  801c4c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  801c50:	81000017 	ldw	r4,0(r16)
  801c54:	d80b883a 	mov	r5,sp
  801c58:	01800204 	movi	r6,8
  801c5c:	01c00d84 	movi	r7,54
  801c60:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  801c64:	003f7506 	br	801a3c <playButtonCollide+0x44>
		drawHorizontalLine(this->x_pos, y, this->range->width, 0xffffff);
	}
}

void playButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
  801c68:	01402134 	movhi	r5,132
  801c6c:	294a6204 	addi	r5,r5,10632
  801c70:	28803417 	ldw	r2,208(r5)
  801c74:	1085883a 	add	r2,r2,r2
  801c78:	1085883a 	add	r2,r2,r2
  801c7c:	1145883a 	add	r2,r2,r5
  801c80:	10c00117 	ldw	r3,4(r2)
  801c84:	19001a17 	ldw	r4,104(r3)
  801c88:	013f6c0e 	bge	zero,r4,801a3c <playButtonCollide+0x44>
		if (db.curr_song_id == 0 || db.songs[db.curr_song_id]->sound == NULL){
  801c8c:	2c000017 	ldw	r16,0(r5)
  801c90:	05402134 	movhi	r21,132
  801c94:	ad4a6204 	addi	r21,r21,10632
  801c98:	803f771e 	bne	r16,zero,801a78 <playButtonCollide+0x80>
			syncPlay(1, db.songs[1]->volume, 0);
  801c9c:	a8803717 	ldw	r2,220(r21)
  801ca0:	01000044 	movi	r4,1
  801ca4:	000d883a 	mov	r6,zero
  801ca8:	11400717 	ldw	r5,28(r2)
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801cac:	05002134 	movhi	r20,132
  801cb0:	a50a3704 	addi	r20,r20,10460
}

void playButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
		if (db.curr_song_id == 0 || db.songs[db.curr_song_id]->sound == NULL){
			syncPlay(1, db.songs[1]->volume, 0);
  801cb4:	08034740 	call	803474 <syncPlay>
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[1]);
  801cb8:	91800117 	ldw	r6,4(r18)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  801cbc:	01003c44 	movi	r4,241
  801cc0:	01400344 	movi	r5,13

void playButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
		if (db.curr_song_id == 0 || db.songs[db.curr_song_id]->sound == NULL){
			syncPlay(1, db.songs[1]->volume, 0);
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[1]);
  801cc4:	30800717 	ldw	r2,28(r6)
  801cc8:	10c00017 	ldw	r3,0(r2)
  801ccc:	19800217 	ldw	r6,8(r3)
  801cd0:	30800117 	ldw	r2,4(r6)
  801cd4:	14000117 	ldw	r16,4(r2)
	}

}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
  801cd8:	80c00117 	ldw	r3,4(r16)
  801cdc:	19800617 	ldw	r6,24(r3)
  801ce0:	08097380 	call	809738 <draw_notransparent>
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  801ce4:	84800717 	ldw	r18,28(r16)
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  801ce8:	84c00817 	ldw	r19,32(r16)
	int x = 4* this->x_pos - 3;
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801cec:	01801304 	movi	r6,76

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
	int x = 4* this->x_pos - 3;
  801cf0:	94a5883a 	add	r18,r18,r18
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  801cf4:	9ce7883a 	add	r19,r19,r19
	int x = 4* this->x_pos - 3;
  801cf8:	94a5883a 	add	r18,r18,r18
}

void highlightButton(struct Button* this){
	draw_notransparent(241, 13, this->Panel->bg_image);
	int i = 0;
	int y = 4* this->y_pos - 2;
  801cfc:	9ce7883a 	add	r19,r19,r19
	int x = 4* this->x_pos - 3;
  801d00:	94bfff44 	addi	r18,r18,-3
	for (i = 0; i < 10; i++, y++){
		drawHorizontalLine(x, y, 76, 0xe711ce);
  801d04:	997fff84 	addi	r5,r19,-2
  801d08:	9009883a 	mov	r4,r18
  801d0c:	01c039f4 	movhi	r7,231
  801d10:	39c47384 	addi	r7,r7,4558
  801d14:	0809e040 	call	809e04 <drawHorizontalLine>
  801d18:	9009883a 	mov	r4,r18
  801d1c:	997fffc4 	addi	r5,r19,-1
  801d20:	01801304 	movi	r6,76
  801d24:	01c039f4 	movhi	r7,231
  801d28:	39c47384 	addi	r7,r7,4558
  801d2c:	0809e040 	call	809e04 <drawHorizontalLine>
  801d30:	9009883a 	mov	r4,r18
  801d34:	980b883a 	mov	r5,r19
  801d38:	01801304 	movi	r6,76
  801d3c:	01c039f4 	movhi	r7,231
  801d40:	39c47384 	addi	r7,r7,4558
  801d44:	0809e040 	call	809e04 <drawHorizontalLine>
  801d48:	9009883a 	mov	r4,r18
  801d4c:	99400044 	addi	r5,r19,1
  801d50:	01801304 	movi	r6,76
  801d54:	01c039f4 	movhi	r7,231
  801d58:	39c47384 	addi	r7,r7,4558
  801d5c:	0809e040 	call	809e04 <drawHorizontalLine>
  801d60:	9009883a 	mov	r4,r18
  801d64:	99400084 	addi	r5,r19,2
  801d68:	01801304 	movi	r6,76
  801d6c:	01c039f4 	movhi	r7,231
  801d70:	39c47384 	addi	r7,r7,4558
  801d74:	0809e040 	call	809e04 <drawHorizontalLine>
  801d78:	9009883a 	mov	r4,r18
  801d7c:	994000c4 	addi	r5,r19,3
  801d80:	01801304 	movi	r6,76
  801d84:	01c039f4 	movhi	r7,231
  801d88:	39c47384 	addi	r7,r7,4558
  801d8c:	0809e040 	call	809e04 <drawHorizontalLine>
  801d90:	9009883a 	mov	r4,r18
  801d94:	99400104 	addi	r5,r19,4
  801d98:	01801304 	movi	r6,76
  801d9c:	01c039f4 	movhi	r7,231
  801da0:	39c47384 	addi	r7,r7,4558
  801da4:	0809e040 	call	809e04 <drawHorizontalLine>
  801da8:	9009883a 	mov	r4,r18
  801dac:	99400144 	addi	r5,r19,5
  801db0:	01801304 	movi	r6,76
  801db4:	01c039f4 	movhi	r7,231
  801db8:	39c47384 	addi	r7,r7,4558
  801dbc:	0809e040 	call	809e04 <drawHorizontalLine>
  801dc0:	9009883a 	mov	r4,r18
  801dc4:	99400184 	addi	r5,r19,6
  801dc8:	01801304 	movi	r6,76
  801dcc:	01c039f4 	movhi	r7,231
  801dd0:	39c47384 	addi	r7,r7,4558
  801dd4:	0809e040 	call	809e04 <drawHorizontalLine>
  801dd8:	994001c4 	addi	r5,r19,7
  801ddc:	01c039f4 	movhi	r7,231
  801de0:	39c47384 	addi	r7,r7,4558
  801de4:	9009883a 	mov	r4,r18
  801de8:	01801304 	movi	r6,76
  801dec:	0809e040 	call	809e04 <drawHorizontalLine>
void playButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel == 0 || (mouse->frame->currentPanel == 2 && db.playlists[db.curr_playlist_id]->num_of_songs > 0)){
		if (db.curr_song_id == 0 || db.songs[db.curr_song_id]->sound == NULL){
			syncPlay(1, db.songs[1]->volume, 0);
			highlightButton(this->Panel->mainFrame->elements[2]->buttons[1]);
			printf("Play button is clicked\n");
  801df0:	010020f4 	movhi	r4,131
  801df4:	210bf804 	addi	r4,r4,12256
  801df8:	08221800 	call	822180 <puts>
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801dfc:	a8c03717 	ldw	r3,220(r21)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  801e00:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801e04:	d809883a 	mov	r4,sp
  801e08:	19800717 	ldw	r6,28(r3)
  801e0c:	014020f4 	movhi	r5,131
  801e10:	294bac04 	addi	r5,r5,11952
  801e14:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801e18:	a1000017 	ldw	r4,0(r20)
  801e1c:	014020f4 	movhi	r5,131
  801e20:	294bad04 	addi	r5,r5,11956
  801e24:	018001c4 	movi	r6,7
  801e28:	01c00d84 	movi	r7,54
  801e2c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  801e30:	a1000017 	ldw	r4,0(r20)
  801e34:	d80b883a 	mov	r5,sp
  801e38:	01800204 	movi	r6,8
  801e3c:	01c00d84 	movi	r7,54
  801e40:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  801e44:	003efd06 	br	801a3c <playButtonCollide+0x44>
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  801e48:	00800044 	movi	r2,1
  801e4c:	003f6e06 	br	801c08 <playButtonCollide+0x210>

00801e50 <actionButtonCollide>:
	}
	this->Panel->mainFrame->elements[2]->drawFrame(this->Panel->mainFrame->elements[2]);
}

void actionButtonCollide(struct Button* this){
	switch(this->type){
  801e50:	20c00417 	ldw	r3,16(r4)
		return;
	}
	this->Panel->mainFrame->elements[2]->drawFrame(this->Panel->mainFrame->elements[2]);
}

void actionButtonCollide(struct Button* this){
  801e54:	defffc04 	addi	sp,sp,-16
	switch(this->type){
  801e58:	00800104 	movi	r2,4
		return;
	}
	this->Panel->mainFrame->elements[2]->drawFrame(this->Panel->mainFrame->elements[2]);
}

void actionButtonCollide(struct Button* this){
  801e5c:	dfc00315 	stw	ra,12(sp)
  801e60:	dc400215 	stw	r17,8(sp)
  801e64:	dc000115 	stw	r16,4(sp)
  801e68:	200b883a 	mov	r5,r4
	switch(this->type){
  801e6c:	10c03136 	bltu	r2,r3,801f34 <actionButtonCollide+0xe4>
  801e70:	18c5883a 	add	r2,r3,r3
  801e74:	1085883a 	add	r2,r2,r2
  801e78:	00c02034 	movhi	r3,128
  801e7c:	18c7a304 	addi	r3,r3,7820
  801e80:	10c5883a 	add	r2,r2,r3
  801e84:	11000017 	ldw	r4,0(r2)
  801e88:	2000683a 	jmp	r4
  801e8c:	00801f48 	cmpgei	r2,zero,125
  801e90:	0080205c 	xori	r2,zero,129
  801e94:	0080200c 	andi	r2,zero,128
  801e98:	00801f64 	muli	r2,zero,125
  801e9c:	00801ea0 	cmpeqi	r2,zero,122
		printf("Prev button is clicked.\n");
	}
}

void nextButtonCollide(struct Button* this){
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
  801ea0:	04002134 	movhi	r16,132
  801ea4:	840a6204 	addi	r16,r16,10632
  801ea8:	81000017 	ldw	r4,0(r16)
  801eac:	8080a717 	ldw	r2,668(r16)
  801eb0:	2080200e 	bge	r4,r2,801f34 <actionButtonCollide+0xe4>
  801eb4:	20001f26 	beq	r4,zero,801f34 <actionButtonCollide+0xe4>
	syncNext(db.curr_song_id);
  801eb8:	08037b40 	call	8037b4 <syncNext>
	updateVolumeValue(db.curr_song_id + 1);
  801ebc:	80800017 	ldw	r2,0(r16)
  801ec0:	10800044 	addi	r2,r2,1
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  801ec4:	1000011e 	bne	r2,zero,801ecc <actionButtonCollide+0x7c>
  801ec8:	00800044 	movi	r2,1
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801ecc:	1085883a 	add	r2,r2,r2
  801ed0:	1085883a 	add	r2,r2,r2
  801ed4:	1405883a 	add	r2,r2,r16
  801ed8:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  801edc:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801ee0:	d809883a 	mov	r4,sp
  801ee4:	19800717 	ldw	r6,28(r3)
  801ee8:	014020f4 	movhi	r5,131
  801eec:	294bac04 	addi	r5,r5,11952
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801ef0:	04002134 	movhi	r16,132
  801ef4:	840a3704 	addi	r16,r16,10460
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801ef8:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801efc:	81000017 	ldw	r4,0(r16)
  801f00:	014020f4 	movhi	r5,131
  801f04:	294bad04 	addi	r5,r5,11956
  801f08:	018001c4 	movi	r6,7
  801f0c:	01c00d84 	movi	r7,54
  801f10:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  801f14:	81000017 	ldw	r4,0(r16)
  801f18:	d80b883a 	mov	r5,sp
  801f1c:	01800204 	movi	r6,8
  801f20:	01c00d84 	movi	r7,54
  801f24:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	if(db.curr_song_id >= db.num_of_songs || db.curr_song_id == 0) return;
	syncNext(db.curr_song_id);
	updateVolumeValue(db.curr_song_id + 1);
	if(this == NULL) return;
	//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id+1]);
	printf("Next button is clicked.\n");
  801f28:	010020f4 	movhi	r4,131
  801f2c:	210bd704 	addi	r4,r4,12124
  801f30:	08221800 	call	822180 <puts>
		nextButtonCollide(this);
		break;
	default:
		break;
	}
}
  801f34:	dfc00317 	ldw	ra,12(sp)
  801f38:	dc400217 	ldw	r17,8(sp)
  801f3c:	dc000117 	ldw	r16,4(sp)
  801f40:	dec00404 	addi	sp,sp,16
  801f44:	f800283a 	ret
}

void actionButtonCollide(struct Button* this){
	switch(this->type){
	case 0:
		playButtonCollide(this);
  801f48:	2809883a 	mov	r4,r5
  801f4c:	08019f80 	call	8019f8 <playButtonCollide>
		nextButtonCollide(this);
		break;
	default:
		break;
	}
}
  801f50:	dfc00317 	ldw	ra,12(sp)
  801f54:	dc400217 	ldw	r17,8(sp)
  801f58:	dc000117 	ldw	r16,4(sp)
  801f5c:	dec00404 	addi	sp,sp,16
  801f60:	f800283a 	ret
		updateVolumeValue(db.curr_song_id);
	}
}

void prevButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
  801f64:	00802134 	movhi	r2,132
  801f68:	108a3a04 	addi	r2,r2,10472
  801f6c:	11000017 	ldw	r4,0(r2)
  801f70:	04400044 	movi	r17,1
  801f74:	20800317 	ldw	r2,12(r4)
  801f78:	10c00417 	ldw	r3,16(r2)
  801f7c:	1c7fed26 	beq	r3,r17,801f34 <actionButtonCollide+0xe4>
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
  801f80:	04002134 	movhi	r16,132
  801f84:	840a6204 	addi	r16,r16,10632
  801f88:	81000017 	ldw	r4,0(r16)
  801f8c:	893fe90e 	bge	r17,r4,801f34 <actionButtonCollide+0xe4>
		syncPrev(db.curr_song_id);
  801f90:	08038780 	call	803878 <syncPrev>
		updateVolumeValue(db.curr_song_id - 1);
  801f94:	80800017 	ldw	r2,0(r16)
  801f98:	10bfffc4 	addi	r2,r2,-1
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  801f9c:	10005e26 	beq	r2,zero,802118 <actionButtonCollide+0x2c8>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801fa0:	1085883a 	add	r2,r2,r2
  801fa4:	1085883a 	add	r2,r2,r2
  801fa8:	1405883a 	add	r2,r2,r16
  801fac:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  801fb0:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801fb4:	d809883a 	mov	r4,sp
  801fb8:	19800717 	ldw	r6,28(r3)
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801fbc:	04002134 	movhi	r16,132
  801fc0:	840a3704 	addi	r16,r16,10460
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  801fc4:	014020f4 	movhi	r5,131
  801fc8:	294bac04 	addi	r5,r5,11952
  801fcc:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  801fd0:	81000017 	ldw	r4,0(r16)
  801fd4:	014020f4 	movhi	r5,131
  801fd8:	294bad04 	addi	r5,r5,11956
  801fdc:	018001c4 	movi	r6,7
  801fe0:	01c00d84 	movi	r7,54
  801fe4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  801fe8:	81000017 	ldw	r4,0(r16)
  801fec:	d80b883a 	mov	r5,sp
  801ff0:	01800204 	movi	r6,8
  801ff4:	01c00d84 	movi	r7,54
  801ff8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
		if(db.curr_song_id <= 1 || db.curr_song_id == 0) return;
		syncPrev(db.curr_song_id);
		updateVolumeValue(db.curr_song_id - 1);
		if(this == NULL) return;
		//highlightButton(this->Panel->mainFrame->elements[2]->buttons[db.curr_song_id-1]);
		printf("Prev button is clicked.\n");
  801ffc:	010020f4 	movhi	r4,131
  802000:	210bdd04 	addi	r4,r4,12148
  802004:	08221800 	call	822180 <puts>
  802008:	003fca06 	br	801f34 <actionButtonCollide+0xe4>
		}
	}
}

void pauseButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
  80200c:	00802134 	movhi	r2,132
  802010:	108a3a04 	addi	r2,r2,10472
  802014:	11000017 	ldw	r4,0(r2)
  802018:	04400044 	movi	r17,1
  80201c:	20800317 	ldw	r2,12(r4)
  802020:	10c00417 	ldw	r3,16(r2)
  802024:	1c7fc326 	beq	r3,r17,801f34 <actionButtonCollide+0xe4>
		syncPause(db.curr_song_id);
  802028:	04002134 	movhi	r16,132
  80202c:	840a6204 	addi	r16,r16,10632
  802030:	81000017 	ldw	r4,0(r16)
  802034:	08033ec0 	call	8033ec <syncPause>
		printf("Pause button is clicked.\n");
  802038:	010020f4 	movhi	r4,131
  80203c:	210be904 	addi	r4,r4,12196
  802040:	08221800 	call	822180 <puts>
		updateVolumeValue(db.curr_song_id);
  802044:	80800017 	ldw	r2,0(r16)
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  802048:	10003126 	beq	r2,zero,802110 <actionButtonCollide+0x2c0>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  80204c:	1085883a 	add	r2,r2,r2
  802050:	1085883a 	add	r2,r2,r2
  802054:	1405883a 	add	r2,r2,r16
  802058:	00001206 	br	8020a4 <actionButtonCollide+0x254>
		updateVolumeValue(db.curr_song_id);
	}
}

void stopButtonCollide(struct Button* this){
	if (mouse->frame->currentPanel != 1){
  80205c:	00802134 	movhi	r2,132
  802060:	108a3a04 	addi	r2,r2,10472
  802064:	11000017 	ldw	r4,0(r2)
  802068:	04000044 	movi	r16,1
  80206c:	20800317 	ldw	r2,12(r4)
  802070:	10c00417 	ldw	r3,16(r2)
  802074:	1c3faf26 	beq	r3,r16,801f34 <actionButtonCollide+0xe4>
		syncStop();
  802078:	08033a00 	call	8033a0 <syncStop>
		printf("Stop button is clicked\n");
  80207c:	010020f4 	movhi	r4,131
  802080:	210be304 	addi	r4,r4,12172
  802084:	08221800 	call	822180 <puts>
		updateVolumeValue(db.curr_song_id);
  802088:	00c02134 	movhi	r3,132
  80208c:	18ca6204 	addi	r3,r3,10632
  802090:	18800017 	ldw	r2,0(r3)
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  802094:	10001c26 	beq	r2,zero,802108 <actionButtonCollide+0x2b8>
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  802098:	1085883a 	add	r2,r2,r2
  80209c:	1085883a 	add	r2,r2,r2
  8020a0:	10c5883a 	add	r2,r2,r3
  8020a4:	10c03617 	ldw	r3,216(r2)
void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  8020a8:	d8000015 	stw	zero,0(sp)
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8020ac:	d809883a 	mov	r4,sp
  8020b0:	19800717 	ldw	r6,28(r3)
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8020b4:	04002134 	movhi	r16,132
  8020b8:	840a3704 	addi	r16,r16,10460
	char temp[4];
	if (song_id == 0){
		song_id = 1;
	}
	memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
	sprintf(temp, "%d", db.songs[song_id]->volume);
  8020bc:	014020f4 	movhi	r5,131
  8020c0:	294bac04 	addi	r5,r5,11952
  8020c4:	0822b640 	call	822b64 <sprintf>
	alt_up_char_buffer_string(char_buffer, "                    ", 7, 54);
  8020c8:	81000017 	ldw	r4,0(r16)
  8020cc:	014020f4 	movhi	r5,131
  8020d0:	294bad04 	addi	r5,r5,11956
  8020d4:	018001c4 	movi	r6,7
  8020d8:	01c00d84 	movi	r7,54
  8020dc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, temp, 8, 54);
  8020e0:	81000017 	ldw	r4,0(r16)
  8020e4:	d80b883a 	mov	r5,sp
  8020e8:	01800204 	movi	r6,8
  8020ec:	01c00d84 	movi	r7,54
  8020f0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
		nextButtonCollide(this);
		break;
	default:
		break;
	}
}
  8020f4:	dfc00317 	ldw	ra,12(sp)
  8020f8:	dc400217 	ldw	r17,8(sp)
  8020fc:	dc000117 	ldw	r16,4(sp)
  802100:	dec00404 	addi	sp,sp,16
  802104:	f800283a 	ret
	draw(getXActionBtn(this->type), getYActionBtn(this->type), this->stats[stats_index]);
}

void updateVolumeValue(int song_id){
	char temp[4];
	if (song_id == 0){
  802108:	8005883a 	mov	r2,r16
  80210c:	003fe206 	br	802098 <actionButtonCollide+0x248>
  802110:	8805883a 	mov	r2,r17
  802114:	003fcd06 	br	80204c <actionButtonCollide+0x1fc>
  802118:	8805883a 	mov	r2,r17
  80211c:	003fa006 	br	801fa0 <actionButtonCollide+0x150>

00802120 <decodePlaylist>:
	return result;
}
void* decodePlaylist(struct Packet** p, int size) {

	return NULL;
}
  802120:	0005883a 	mov	r2,zero
  802124:	f800283a 	ret

00802128 <decodeString>:
}

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  802128:	2945883a 	add	r2,r5,r5
  80212c:	1085883a 	add	r2,r2,r2
  802130:	1105883a 	add	r2,r2,r4
  802134:	10ffff17 	ldw	r3,-4(r2)
	}
	free(packets);
	packets = NULL;
}

void* decodeString(struct Packet** p, int size) {
  802138:	defffd04 	addi	sp,sp,-12
  80213c:	dc400115 	stw	r17,4(sp)
  802140:	2023883a 	mov	r17,r4
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  802144:	19000117 	ldw	r4,4(r3)
	}
	free(packets);
	packets = NULL;
}

void* decodeString(struct Packet** p, int size) {
  802148:	dc000015 	stw	r16,0(sp)
  80214c:	2821883a 	mov	r16,r5
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  802150:	29401924 	muli	r5,r5,100
  802154:	213fe704 	addi	r4,r4,-100
	}
	free(packets);
	packets = NULL;
}

void* decodeString(struct Packet** p, int size) {
  802158:	dfc00215 	stw	ra,8(sp)
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  80215c:	2909883a 	add	r4,r5,r4
  802160:	08216fc0 	call	8216fc <malloc>
  802164:	1015883a 	mov	r10,r2
	for(i = 0; i < size; i++) {
  802168:	04001c0e 	bge	zero,r16,8021dc <decodeString+0xb4>
  80216c:	8809883a 	mov	r4,r17
  802170:	0013883a 	mov	r9,zero
  802174:	0011883a 	mov	r8,zero
		for(j = 0; j < p[i]->data_size; j++) {
  802178:	20800017 	ldw	r2,0(r4)
  80217c:	11c00117 	ldw	r7,4(r2)
  802180:	01c00a0e 	bge	zero,r7,8021ac <decodeString+0x84>
  802184:	11800017 	ldw	r6,0(r2)
  802188:	4a8b883a 	add	r5,r9,r10
  80218c:	0007883a 	mov	r3,zero
			result[k] = p[i]->data[j+HEADERSIZE];
  802190:	30800083 	ldbu	r2,2(r6)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  802194:	18c00044 	addi	r3,r3,1
  802198:	31800044 	addi	r6,r6,1
			result[k] = p[i]->data[j+HEADERSIZE];
  80219c:	28800005 	stb	r2,0(r5)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  8021a0:	29400044 	addi	r5,r5,1
  8021a4:	19fffa1e 	bne	r3,r7,802190 <decodeString+0x68>
  8021a8:	48d3883a 	add	r9,r9,r3

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
  8021ac:	42000044 	addi	r8,r8,1
  8021b0:	21000104 	addi	r4,r4,4
  8021b4:	823ff01e 	bne	r16,r8,802178 <decodeString+0x50>
  8021b8:	4805883a 	mov	r2,r9
		for(j = 0; j < p[i]->data_size; j++) {
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  8021bc:	5085883a 	add	r2,r10,r2
  8021c0:	10000005 	stb	zero,0(r2)
	return (void*)result;
}
  8021c4:	5005883a 	mov	r2,r10
  8021c8:	dfc00217 	ldw	ra,8(sp)
  8021cc:	dc400117 	ldw	r17,4(sp)
  8021d0:	dc000017 	ldw	r16,0(sp)
  8021d4:	dec00304 	addi	sp,sp,12
  8021d8:	f800283a 	ret
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  8021dc:	0005883a 	mov	r2,zero
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  8021e0:	5085883a 	add	r2,r10,r2
  8021e4:	10000005 	stb	zero,0(r2)
	return (void*)result;
}
  8021e8:	5005883a 	mov	r2,r10
  8021ec:	dfc00217 	ldw	ra,8(sp)
  8021f0:	dc400117 	ldw	r17,4(sp)
  8021f4:	dc000017 	ldw	r16,0(sp)
  8021f8:	dec00304 	addi	sp,sp,12
  8021fc:	f800283a 	ret

00802200 <decodeCmd>:
void* decodeCmd(struct Packet** p, int size) {
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
  802200:	20c00017 	ldw	r3,0(r4)
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  802204:	defff404 	addi	sp,sp,-48
  802208:	dd000615 	stw	r20,24(sp)
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
  80220c:	18800017 	ldw	r2,0(r3)
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  802210:	dc400315 	stw	r17,12(sp)
  802214:	dc000215 	stw	r16,8(sp)
  802218:	dfc00b15 	stw	ra,44(sp)
  80221c:	df000a15 	stw	fp,40(sp)
  802220:	ddc00915 	stw	r23,36(sp)
  802224:	dd800815 	stw	r22,32(sp)
  802228:	dd400715 	stw	r21,28(sp)
  80222c:	dcc00515 	stw	r19,20(sp)
  802230:	dc800415 	stw	r18,16(sp)
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
	int num_parameters = (int)p[0]->data[3];;
  802234:	15c000c3 	ldbu	r23,3(r2)
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
  802238:	10800083 	ldbu	r2,2(r2)
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  80223c:	2023883a 	mov	r17,r4
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
	int num_parameters = (int)p[0]->data[3];;
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
  802240:	bdc9883a 	add	r4,r23,r23
  802244:	2109883a 	add	r4,r4,r4
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  802248:	2821883a 	mov	r16,r5
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
  80224c:	d8800115 	stw	r2,4(sp)
	int num_parameters = (int)p[0]->data[3];;
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
  802250:	08216fc0 	call	8216fc <malloc>
  802254:	1029883a 	mov	r20,r2
  802258:	d8800015 	stw	r2,0(sp)
	int i, j, k;
	for(i = 0; i < size; i++) {
  80225c:	0400630e 	bge	zero,r16,8023ec <decodeCmd+0x1ec>
  802260:	880b883a 	mov	r5,r17
  802264:	000d883a 	mov	r6,zero
  802268:	0009883a 	mov	r4,zero
		length += p[i]->data_size;
  80226c:	28c00017 	ldw	r3,0(r5)
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
	int num_parameters = (int)p[0]->data[3];;
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
	int i, j, k;
	for(i = 0; i < size; i++) {
  802270:	31800044 	addi	r6,r6,1
  802274:	29400104 	addi	r5,r5,4
		length += p[i]->data_size;
  802278:	18800117 	ldw	r2,4(r3)
  80227c:	2089883a 	add	r4,r4,r2
	int length = 0;
	int cmd_index = (int)p[0]->data[2];;
	int num_parameters = (int)p[0]->data[3];;
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
	int i, j, k;
	for(i = 0; i < size; i++) {
  802280:	81bffa1e 	bne	r16,r6,80226c <decodeCmd+0x6c>
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
  802284:	08216fc0 	call	8216fc <malloc>
  802288:	1039883a 	mov	fp,r2
  80228c:	8809883a 	mov	r4,r17
  802290:	0013883a 	mov	r9,zero
  802294:	0011883a 	mov	r8,zero
	i = 0;
	for(j = 0; j < size; j++) {
		for(k = 0; k < p[j]->data_size; k++) {
  802298:	20800017 	ldw	r2,0(r4)
  80229c:	11c00117 	ldw	r7,4(r2)
  8022a0:	01c00a0e 	bge	zero,r7,8022cc <decodeCmd+0xcc>
  8022a4:	11800017 	ldw	r6,0(r2)
  8022a8:	e24b883a 	add	r5,fp,r9
  8022ac:	0007883a 	mov	r3,zero
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
  8022b0:	30800083 	ldbu	r2,2(r6)
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
	i = 0;
	for(j = 0; j < size; j++) {
		for(k = 0; k < p[j]->data_size; k++) {
  8022b4:	18c00044 	addi	r3,r3,1
  8022b8:	31800044 	addi	r6,r6,1
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
  8022bc:	28800005 	stb	r2,0(r5)
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
	i = 0;
	for(j = 0; j < size; j++) {
		for(k = 0; k < p[j]->data_size; k++) {
  8022c0:	29400044 	addi	r5,r5,1
  8022c4:	19fffa1e 	bne	r3,r7,8022b0 <decodeCmd+0xb0>
  8022c8:	48d3883a 	add	r9,r9,r3
	for(i = 0; i < size; i++) {
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
	i = 0;
	for(j = 0; j < size; j++) {
  8022cc:	42000044 	addi	r8,r8,1
  8022d0:	21000104 	addi	r4,r4,4
  8022d4:	823ff01e 	bne	r16,r8,802298 <decodeCmd+0x98>
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
		}
	}
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
  8022d8:	b8003e26 	beq	r23,zero,8023d4 <decodeCmd+0x1d4>
  8022dc:	a023883a 	mov	r17,r20
  8022e0:	002d883a 	mov	r22,zero
  8022e4:	05400084 	movi	r21,2
		len = (int)dataBuf[j++];
  8022e8:	af25883a 	add	r18,r21,fp
  8022ec:	94000007 	ldb	r16,0(r18)
  8022f0:	acc00044 	addi	r19,r21,1
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
  8022f4:	81000044 	addi	r4,r16,1
  8022f8:	08216fc0 	call	8216fc <malloc>
  8022fc:	88800015 	stw	r2,0(r17)
		for(k = 0; k < len; k++) {
  802300:	0400310e 	bge	zero,r16,8023c8 <decodeCmd+0x1c8>
  802304:	9009883a 	mov	r4,r18
  802308:	000b883a 	mov	r5,zero
			paras[i][k] = dataBuf[j++];
  80230c:	88800017 	ldw	r2,0(r17)
  802310:	20c00043 	ldbu	r3,1(r4)
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
  802314:	21000044 	addi	r4,r4,1
			paras[i][k] = dataBuf[j++];
  802318:	1145883a 	add	r2,r2,r5
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
  80231c:	29400044 	addi	r5,r5,1
			paras[i][k] = dataBuf[j++];
  802320:	10c00005 	stb	r3,0(r2)
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
  802324:	2c3ff91e 	bne	r5,r16,80230c <decodeCmd+0x10c>
			k++;
		}
	} result[k] = '\0';
	return (void*)result;
}
void* decodeCmd(struct Packet** p, int size) {
  802328:	a945883a 	add	r2,r21,r5
  80232c:	15400044 	addi	r21,r2,1
  802330:	2807883a 	mov	r3,r5
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
  802334:	88800017 	ldw	r2,0(r17)
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
		}
	}
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
  802338:	b5800044 	addi	r22,r22,1
  80233c:	8c400104 	addi	r17,r17,4
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
  802340:	10c5883a 	add	r2,r2,r3
  802344:	10000005 	stb	zero,0(r2)
			dataBuf[i++] = p[j]->data[k+HEADERSIZE];
		}
	}
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
  802348:	bdbfe71e 	bne	r23,r22,8022e8 <decodeCmd+0xe8>
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
  80234c:	d9000117 	ldw	r4,4(sp)
  802350:	b80b883a 	mov	r5,r23
  802354:	a00d883a 	mov	r6,r20
  802358:	0802fcc0 	call	802fcc <initCmd>
  80235c:	1023883a 	mov	r17,r2
  802360:	0021883a 	mov	r16,zero
	for(i = 0; i < num_parameters; i++) {
		free(paras[i]);
  802364:	a1000017 	ldw	r4,0(r20)
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
	for(i = 0; i < num_parameters; i++) {
  802368:	84000044 	addi	r16,r16,1
		free(paras[i]);
  80236c:	08216e80 	call	8216e8 <free>
		paras[i] = NULL;
  802370:	a0000015 	stw	zero,0(r20)
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
	for(i = 0; i < num_parameters; i++) {
  802374:	a5000104 	addi	r20,r20,4
  802378:	bc3ffa1e 	bne	r23,r16,802364 <decodeCmd+0x164>
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
  80237c:	8821883a 	mov	r16,r17
	for(i = 0; i < num_parameters; i++) {
		free(paras[i]);
		paras[i] = NULL;
	}
	if(num_parameters != 0) {
  802380:	b8000226 	beq	r23,zero,80238c <decodeCmd+0x18c>
		free(paras);
  802384:	d9000017 	ldw	r4,0(sp)
  802388:	08216e80 	call	8216e8 <free>
		paras = NULL;
	}
	free(dataBuf);
  80238c:	e009883a 	mov	r4,fp
  802390:	08216e80 	call	8216e8 <free>
	dataBuf = NULL;
	return result;
}
  802394:	8005883a 	mov	r2,r16
  802398:	dfc00b17 	ldw	ra,44(sp)
  80239c:	df000a17 	ldw	fp,40(sp)
  8023a0:	ddc00917 	ldw	r23,36(sp)
  8023a4:	dd800817 	ldw	r22,32(sp)
  8023a8:	dd400717 	ldw	r21,28(sp)
  8023ac:	dd000617 	ldw	r20,24(sp)
  8023b0:	dcc00517 	ldw	r19,20(sp)
  8023b4:	dc800417 	ldw	r18,16(sp)
  8023b8:	dc400317 	ldw	r17,12(sp)
  8023bc:	dc000217 	ldw	r16,8(sp)
  8023c0:	dec00c04 	addi	sp,sp,48
  8023c4:	f800283a 	ret
	j = 2;
	int len = 0;
	for(i = 0; i < num_parameters; i++) {
		len = (int)dataBuf[j++];
		paras[i] = (char*)malloc(sizeof(char)*(len+1));
		for(k = 0; k < len; k++) {
  8023c8:	982b883a 	mov	r21,r19
  8023cc:	0007883a 	mov	r3,zero
  8023d0:	003fd806 	br	802334 <decodeCmd+0x134>
			paras[i][k] = dataBuf[j++];
		} paras[i][k] = '\0';
	}
	void* result = (void*)initCmd(cmd_index, num_parameters, paras);
  8023d4:	d9000117 	ldw	r4,4(sp)
  8023d8:	a00d883a 	mov	r6,r20
  8023dc:	b80b883a 	mov	r5,r23
  8023e0:	0802fcc0 	call	802fcc <initCmd>
  8023e4:	1021883a 	mov	r16,r2
  8023e8:	003fe506 	br	802380 <decodeCmd+0x180>
	char** paras = (char**)malloc(sizeof(char*)*num_parameters);
	int i, j, k;
	for(i = 0; i < size; i++) {
		length += p[i]->data_size;
	}
	char* dataBuf = (char*)malloc(sizeof(char)*length);
  8023ec:	0009883a 	mov	r4,zero
  8023f0:	08216fc0 	call	8216fc <malloc>
  8023f4:	1039883a 	mov	fp,r2
  8023f8:	003fb706 	br	8022d8 <decodeCmd+0xd8>

008023fc <encodeCmd>:
}

/*
 * encode a command to packets and push to the queue
 */
void encodeCmd(struct Command* cmd, struct Queue* q) {
  8023fc:	defff704 	addi	sp,sp,-36
  802400:	dd800715 	stw	r22,28(sp)
  802404:	dc400215 	stw	r17,8(sp)
  802408:	dfc00815 	stw	ra,32(sp)
  80240c:	dd400615 	stw	r21,24(sp)
  802410:	dd000515 	stw	r20,20(sp)
  802414:	dcc00415 	stw	r19,16(sp)
  802418:	dc800315 	stw	r18,12(sp)
  80241c:	dc000115 	stw	r16,4(sp)
  802420:	2023883a 	mov	r17,r4
  802424:	282d883a 	mov	r22,r5
	if(cmd == NULL || q == NULL) return;
  802428:	20006f26 	beq	r4,zero,8025e8 <encodeCmd+0x1ec>
  80242c:	28006e26 	beq	r5,zero,8025e8 <encodeCmd+0x1ec>
	int data_size = 2; //1 byte for cmd index and the other for number of parameters
	data_size += cmd->num_of_parameters; //each parameter need a byte for its length
  802430:	21400117 	ldw	r5,4(r4)
  802434:	2cc00084 	addi	r19,r5,2
	int i, j, k;
	for(i = 0; i < cmd->num_of_parameters; i++) {
  802438:	0140070e 	bge	zero,r5,802458 <encodeCmd+0x5c>
  80243c:	20c00217 	ldw	r3,8(r4)
  802440:	0009883a 	mov	r4,zero
		data_size += cmd->parameters_size[i];
  802444:	18800017 	ldw	r2,0(r3)
void encodeCmd(struct Command* cmd, struct Queue* q) {
	if(cmd == NULL || q == NULL) return;
	int data_size = 2; //1 byte for cmd index and the other for number of parameters
	data_size += cmd->num_of_parameters; //each parameter need a byte for its length
	int i, j, k;
	for(i = 0; i < cmd->num_of_parameters; i++) {
  802448:	21000044 	addi	r4,r4,1
  80244c:	18c00104 	addi	r3,r3,4
		data_size += cmd->parameters_size[i];
  802450:	98a7883a 	add	r19,r19,r2
void encodeCmd(struct Command* cmd, struct Queue* q) {
	if(cmd == NULL || q == NULL) return;
	int data_size = 2; //1 byte for cmd index and the other for number of parameters
	data_size += cmd->num_of_parameters; //each parameter need a byte for its length
	int i, j, k;
	for(i = 0; i < cmd->num_of_parameters; i++) {
  802454:	293ffb1e 	bne	r5,r4,802444 <encodeCmd+0x48>
		data_size += cmd->parameters_size[i];
	}
	char* dataBuf = (char*)malloc(sizeof(char)*data_size);
  802458:	9809883a 	mov	r4,r19
  80245c:	08216fc0 	call	8216fc <malloc>
  802460:	1025883a 	mov	r18,r2
	struct Packet* result = NULL;
	int packets_size = data_size/100;
  802464:	9c001914 	ori	r16,r19,100
  802468:	008003c4 	movi	r2,15
  80246c:	14006836 	bltu	r2,r16,802610 <encodeCmd+0x214>
  802470:	9804913a 	slli	r2,r19,4
  802474:	00c02134 	movhi	r3,132
  802478:	18fbb104 	addi	r3,r3,-4412
  80247c:	10801914 	ori	r2,r2,100
  802480:	10c5883a 	add	r2,r2,r3
  802484:	15000003 	ldbu	r20,0(r2)
	if(data_size %100 > 0)
  802488:	008003c4 	movi	r2,15
  80248c:	14006636 	bltu	r2,r16,802628 <encodeCmd+0x22c>
  802490:	9804913a 	slli	r2,r19,4
  802494:	00c02134 	movhi	r3,132
  802498:	18fbb104 	addi	r3,r3,-4412
  80249c:	10801914 	ori	r2,r2,100
  8024a0:	10c5883a 	add	r2,r2,r3
  8024a4:	10800003 	ldbu	r2,0(r2)
  8024a8:	10801924 	muli	r2,r2,100
  8024ac:	9885c83a 	sub	r2,r19,r2
  8024b0:	0080010e 	bge	zero,r2,8024b8 <encodeCmd+0xbc>
		packets_size+=1;
  8024b4:	a5000044 	addi	r20,r20,1

	addPacketsLengthToQueue(packets_size);
  8024b8:	a009883a 	mov	r4,r20
	data_size += cmd->num_of_parameters; //each parameter need a byte for its length
	int i, j, k;
	for(i = 0; i < cmd->num_of_parameters; i++) {
		data_size += cmd->parameters_size[i];
	}
	char* dataBuf = (char*)malloc(sizeof(char)*data_size);
  8024bc:	dc800015 	stw	r18,0(sp)
	struct Packet* result = NULL;
	int packets_size = data_size/100;
	if(data_size %100 > 0)
		packets_size+=1;

	addPacketsLengthToQueue(packets_size);
  8024c0:	080b9780 	call	80b978 <addPacketsLengthToQueue>

	dataBuf[0] = (unsigned char)cmd->cmd_index;
  8024c4:	d8800017 	ldw	r2,0(sp)
  8024c8:	88c00017 	ldw	r3,0(r17)
  8024cc:	10c00005 	stb	r3,0(r2)
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
  8024d0:	89000117 	ldw	r4,4(r17)
  8024d4:	11000045 	stb	r4,1(r2)
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
  8024d8:	0100210e 	bge	zero,r4,802560 <encodeCmd+0x164>
  8024dc:	89000217 	ldw	r4,8(r17)
  8024e0:	0011883a 	mov	r8,zero
  8024e4:	01800084 	movi	r6,2
  8024e8:	000f883a 	mov	r7,zero
		dataBuf[j++] = (char)cmd->parameters_size[i];
  8024ec:	21c7883a 	add	r3,r4,r7
  8024f0:	d8800017 	ldw	r2,0(sp)
  8024f4:	19000017 	ldw	r4,0(r3)
  8024f8:	3085883a 	add	r2,r6,r2
  8024fc:	11000005 	stb	r4,0(r2)
		for(k = 0; k < cmd->parameters_size[i]; k++) {
  802500:	89000217 	ldw	r4,8(r17)

	dataBuf[0] = (unsigned char)cmd->cmd_index;
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
		dataBuf[j++] = (char)cmd->parameters_size[i];
  802504:	31800044 	addi	r6,r6,1
		for(k = 0; k < cmd->parameters_size[i]; k++) {
  802508:	3905883a 	add	r2,r7,r4
  80250c:	10c00017 	ldw	r3,0(r2)
  802510:	00c00f0e 	bge	zero,r3,802550 <encodeCmd+0x154>
  802514:	000b883a 	mov	r5,zero
			dataBuf[j++] = (char)cmd->parameters[i][k];
  802518:	88800317 	ldw	r2,12(r17)
  80251c:	d9000017 	ldw	r4,0(sp)
  802520:	11c5883a 	add	r2,r2,r7
  802524:	10c00017 	ldw	r3,0(r2)
  802528:	2189883a 	add	r4,r4,r6
  80252c:	31800044 	addi	r6,r6,1
  802530:	28c7883a 	add	r3,r5,r3
  802534:	18800003 	ldbu	r2,0(r3)
	dataBuf[0] = (unsigned char)cmd->cmd_index;
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
  802538:	29400044 	addi	r5,r5,1
			dataBuf[j++] = (char)cmd->parameters[i][k];
  80253c:	20800005 	stb	r2,0(r4)
	dataBuf[0] = (unsigned char)cmd->cmd_index;
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
  802540:	89000217 	ldw	r4,8(r17)
  802544:	21c5883a 	add	r2,r4,r7
  802548:	10c00017 	ldw	r3,0(r2)
  80254c:	28fff216 	blt	r5,r3,802518 <encodeCmd+0x11c>
	addPacketsLengthToQueue(packets_size);

	dataBuf[0] = (unsigned char)cmd->cmd_index;
	dataBuf[1] = (unsigned char)cmd->num_of_parameters;
	j = 2;
	for(i = 0; i< cmd->num_of_parameters; i++) {
  802550:	88800117 	ldw	r2,4(r17)
  802554:	42000044 	addi	r8,r8,1
  802558:	39c00104 	addi	r7,r7,4
  80255c:	40bfe316 	blt	r8,r2,8024ec <encodeCmd+0xf0>
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
  802560:	05001f0e 	bge	zero,r20,8025e0 <encodeCmd+0x1e4>
  802564:	a57fffc4 	addi	r21,r20,-1
  802568:	0025883a 	mov	r18,zero
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
  80256c:	9809883a 	mov	r4,r19
			setHeader(result, 0, 1, CMD); //last packet
		} else {
			char* temp = strnsep_(&dataBuf, 100);
  802570:	01401904 	movi	r5,100
		for(k = 0; k < cmd->parameters_size[i]; k++) {
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
		if(i == packets_size-1) {
  802574:	ac803026 	beq	r21,r18,802638 <encodeCmd+0x23c>
			result = initPacket(data_size, (unsigned char*)dataBuf);
			setHeader(result, 0, 1, CMD); //last packet
		} else {
			char* temp = strnsep_(&dataBuf, 100);
  802578:	d809883a 	mov	r4,sp
  80257c:	080af980 	call	80af98 <strnsep_>
			result = initPacket(100, (unsigned char*)dataBuf);
  802580:	d9400017 	ldw	r5,0(sp)
	for(i = 0; i < packets_size; i++) {
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
			setHeader(result, 0, 1, CMD); //last packet
		} else {
			char* temp = strnsep_(&dataBuf, 100);
  802584:	1023883a 	mov	r17,r2
			result = initPacket(100, (unsigned char*)dataBuf);
  802588:	01001904 	movi	r4,100
  80258c:	080af000 	call	80af00 <initPacket>
			free(temp);
  802590:	8809883a 	mov	r4,r17
			temp = NULL;
			data_size -= 100;
  802594:	9cffe704 	addi	r19,r19,-100
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
			setHeader(result, 0, 1, CMD); //last packet
		} else {
			char* temp = strnsep_(&dataBuf, 100);
			result = initPacket(100, (unsigned char*)dataBuf);
  802598:	1021883a 	mov	r16,r2
			free(temp);
  80259c:	08216e80 	call	8216e8 <free>
			temp = NULL;
			data_size -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, CMD); //first packet
  8025a0:	01400044 	movi	r5,1
  8025a4:	8009883a 	mov	r4,r16
  8025a8:	000d883a 	mov	r6,zero
  8025ac:	280f883a 	mov	r7,r5
			result = initPacket(100, (unsigned char*)dataBuf);
			free(temp);
			temp = NULL;
			data_size -= 100;
		}
		if(i == 0)
  8025b0:	90000526 	beq	r18,zero,8025c8 <encodeCmd+0x1cc>
			setHeader(result, 1, 0, CMD); //first packet
		else if(i != packets_size - 1)
			setHeader(result, 0, 0, CMD);
  8025b4:	8009883a 	mov	r4,r16
  8025b8:	000b883a 	mov	r5,zero
  8025bc:	000d883a 	mov	r6,zero
  8025c0:	01c00044 	movi	r7,1
			temp = NULL;
			data_size -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, CMD); //first packet
		else if(i != packets_size - 1)
  8025c4:	ac800126 	beq	r21,r18,8025cc <encodeCmd+0x1d0>
			setHeader(result, 0, 0, CMD);
  8025c8:	080b2540 	call	80b254 <setHeader>
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
  8025cc:	94800044 	addi	r18,r18,1
		}
		if(i == 0)
			setHeader(result, 1, 0, CMD); //first packet
		else if(i != packets_size - 1)
			setHeader(result, 0, 0, CMD);
		enqueue(q, (void*)result);
  8025d0:	800b883a 	mov	r5,r16
  8025d4:	b009883a 	mov	r4,r22
  8025d8:	080b6940 	call	80b694 <enqueue>
		dataBuf[j++] = (char)cmd->parameters_size[i];
		for(k = 0; k < cmd->parameters_size[i]; k++) {
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
  8025dc:	a4bfe31e 	bne	r20,r18,80256c <encodeCmd+0x170>
		else if(i != packets_size - 1)
			setHeader(result, 0, 0, CMD);
		enqueue(q, (void*)result);
	}
	result = NULL;
	free(dataBuf);
  8025e0:	d9000017 	ldw	r4,0(sp)
  8025e4:	08216e80 	call	8216e8 <free>
	dataBuf = NULL;
}
  8025e8:	dfc00817 	ldw	ra,32(sp)
  8025ec:	dd800717 	ldw	r22,28(sp)
  8025f0:	dd400617 	ldw	r21,24(sp)
  8025f4:	dd000517 	ldw	r20,20(sp)
  8025f8:	dcc00417 	ldw	r19,16(sp)
  8025fc:	dc800317 	ldw	r18,12(sp)
  802600:	dc400217 	ldw	r17,8(sp)
  802604:	dc000117 	ldw	r16,4(sp)
  802608:	dec00904 	addi	sp,sp,36
  80260c:	f800283a 	ret
	for(i = 0; i < cmd->num_of_parameters; i++) {
		data_size += cmd->parameters_size[i];
	}
	char* dataBuf = (char*)malloc(sizeof(char)*data_size);
	struct Packet* result = NULL;
	int packets_size = data_size/100;
  802610:	9809883a 	mov	r4,r19
  802614:	01401904 	movi	r5,100
  802618:	0820b480 	call	820b48 <__divsi3>
  80261c:	1029883a 	mov	r20,r2
	if(data_size %100 > 0)
  802620:	008003c4 	movi	r2,15
  802624:	143f9a2e 	bgeu	r2,r16,802490 <encodeCmd+0x94>
  802628:	9809883a 	mov	r4,r19
  80262c:	01401904 	movi	r5,100
  802630:	0820b480 	call	820b48 <__divsi3>
  802634:	003f9c06 	br	8024a8 <encodeCmd+0xac>
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
  802638:	d9400017 	ldw	r5,0(sp)
  80263c:	080af000 	call	80af00 <initPacket>
			setHeader(result, 0, 1, CMD); //last packet
  802640:	01800044 	movi	r6,1
  802644:	1009883a 	mov	r4,r2
  802648:	000b883a 	mov	r5,zero
  80264c:	300f883a 	mov	r7,r6
			dataBuf[j++] = (char)cmd->parameters[i][k];
		}
	}
	for(i = 0; i < packets_size; i++) {
		if(i == packets_size-1) {
			result = initPacket(data_size, (unsigned char*)dataBuf);
  802650:	1021883a 	mov	r16,r2
			setHeader(result, 0, 1, CMD); //last packet
  802654:	080b2540 	call	80b254 <setHeader>
  802658:	003fd106 	br	8025a0 <encodeCmd+0x1a4>

0080265c <encodeString>:

/*
 * encode the string into multiply packets and put into queue
 *
 */
void encodeString(char* str, struct Queue* q) {
  80265c:	defff704 	addi	sp,sp,-36
  802660:	dd800715 	stw	r22,28(sp)
  802664:	dc000115 	stw	r16,4(sp)
  802668:	dfc00815 	stw	ra,32(sp)
  80266c:	dd400615 	stw	r21,24(sp)
  802670:	dd000515 	stw	r20,20(sp)
  802674:	dcc00415 	stw	r19,16(sp)
  802678:	dc800315 	stw	r18,12(sp)
  80267c:	dc400215 	stw	r17,8(sp)
  802680:	2021883a 	mov	r16,r4
  802684:	282d883a 	mov	r22,r5
	if(str == NULL || q == NULL) return;
  802688:	20004326 	beq	r4,zero,802798 <encodeString+0x13c>
  80268c:	28004226 	beq	r5,zero,802798 <encodeString+0x13c>
	int i;
	int length = strlen(str);
  802690:	0822e100 	call	822e10 <strlen>
	char* strBuf = (char*)malloc(sizeof(char)*length);
  802694:	1009883a 	mov	r4,r2
 *
 */
void encodeString(char* str, struct Queue* q) {
	if(str == NULL || q == NULL) return;
	int i;
	int length = strlen(str);
  802698:	1027883a 	mov	r19,r2
	char* strBuf = (char*)malloc(sizeof(char)*length);
  80269c:	08216fc0 	call	8216fc <malloc>
	strncpy(strBuf, str, length);
  8026a0:	800b883a 	mov	r5,r16
  8026a4:	1009883a 	mov	r4,r2
  8026a8:	980d883a 	mov	r6,r19
 */
void encodeString(char* str, struct Queue* q) {
	if(str == NULL || q == NULL) return;
	int i;
	int length = strlen(str);
	char* strBuf = (char*)malloc(sizeof(char)*length);
  8026ac:	d8800015 	stw	r2,0(sp)
	strncpy(strBuf, str, length);
  8026b0:	0822f340 	call	822f34 <strncpy>
	int packet_size = length / 100;
  8026b4:	9c001914 	ori	r16,r19,100
  8026b8:	008003c4 	movi	r2,15
  8026bc:	14004036 	bltu	r2,r16,8027c0 <encodeString+0x164>
  8026c0:	9804913a 	slli	r2,r19,4
  8026c4:	00c02134 	movhi	r3,132
  8026c8:	18fbb104 	addi	r3,r3,-4412
  8026cc:	10801914 	ori	r2,r2,100
  8026d0:	10c5883a 	add	r2,r2,r3
  8026d4:	15000003 	ldbu	r20,0(r2)
	if(length % 100 >0) {
  8026d8:	008003c4 	movi	r2,15
  8026dc:	14003e36 	bltu	r2,r16,8027d8 <encodeString+0x17c>
  8026e0:	9804913a 	slli	r2,r19,4
  8026e4:	00c02134 	movhi	r3,132
  8026e8:	18fbb104 	addi	r3,r3,-4412
  8026ec:	10801914 	ori	r2,r2,100
  8026f0:	10c5883a 	add	r2,r2,r3
  8026f4:	10800003 	ldbu	r2,0(r2)
  8026f8:	10801924 	muli	r2,r2,100
  8026fc:	9885c83a 	sub	r2,r19,r2
  802700:	0080010e 	bge	zero,r2,802708 <encodeString+0xac>
		packet_size+=1;
  802704:	a5000044 	addi	r20,r20,1
	}

	addPacketsLengthToQueue(packet_size);
  802708:	a009883a 	mov	r4,r20
  80270c:	080b9780 	call	80b978 <addPacketsLengthToQueue>

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
  802710:	05001f0e 	bge	zero,r20,802790 <encodeString+0x134>
  802714:	a57fffc4 	addi	r21,r20,-1
  802718:	0025883a 	mov	r18,zero
		if(i == packet_size - 1) {
			result = initPacket(length, (unsigned char*)strBuf);
  80271c:	9809883a 	mov	r4,r19
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
  802720:	01401904 	movi	r5,100

	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
		if(i == packet_size - 1) {
  802724:	ac803026 	beq	r21,r18,8027e8 <encodeString+0x18c>
			result = initPacket(length, (unsigned char*)strBuf);
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
  802728:	d809883a 	mov	r4,sp
  80272c:	080af980 	call	80af98 <strnsep_>
  802730:	1023883a 	mov	r17,r2
			result = initPacket(100, (unsigned char*)temp);
  802734:	100b883a 	mov	r5,r2
  802738:	01001904 	movi	r4,100
  80273c:	080af000 	call	80af00 <initPacket>
			free(temp);
  802740:	8809883a 	mov	r4,r17
			result = initPacket(length, (unsigned char*)strBuf);
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
			result = initPacket(100, (unsigned char*)temp);
  802744:	1021883a 	mov	r16,r2
			free(temp);
			temp = NULL;
			length -= 100;
  802748:	9cffe704 	addi	r19,r19,-100
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
			result = initPacket(100, (unsigned char*)temp);
			free(temp);
  80274c:	08216e80 	call	8216e8 <free>
			temp = NULL;
			length -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, STRING); //first packet
  802750:	8009883a 	mov	r4,r16
  802754:	01400044 	movi	r5,1
  802758:	000d883a 	mov	r6,zero
  80275c:	000f883a 	mov	r7,zero
			result = initPacket(100, (unsigned char*)temp);
			free(temp);
			temp = NULL;
			length -= 100;
		}
		if(i == 0)
  802760:	90000526 	beq	r18,zero,802778 <encodeString+0x11c>
			setHeader(result, 1, 0, STRING); //first packet
		else if(i != packet_size - 1)
			setHeader(result, 0, 0, STRING);
  802764:	8009883a 	mov	r4,r16
  802768:	000b883a 	mov	r5,zero
  80276c:	000d883a 	mov	r6,zero
  802770:	000f883a 	mov	r7,zero
			temp = NULL;
			length -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, STRING); //first packet
		else if(i != packet_size - 1)
  802774:	ac800126 	beq	r21,r18,80277c <encodeString+0x120>
			setHeader(result, 0, 0, STRING);
  802778:	080b2540 	call	80b254 <setHeader>
	}

	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
  80277c:	94800044 	addi	r18,r18,1
		}
		if(i == 0)
			setHeader(result, 1, 0, STRING); //first packet
		else if(i != packet_size - 1)
			setHeader(result, 0, 0, STRING);
		enqueue(q, (void*)result);
  802780:	800b883a 	mov	r5,r16
  802784:	b009883a 	mov	r4,r22
  802788:	080b6940 	call	80b694 <enqueue>
	}

	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
  80278c:	a4bfe31e 	bne	r20,r18,80271c <encodeString+0xc0>
		else if(i != packet_size - 1)
			setHeader(result, 0, 0, STRING);
		enqueue(q, (void*)result);
	}
	result = NULL;
	free(strBuf);
  802790:	d9000017 	ldw	r4,0(sp)
  802794:	08216e80 	call	8216e8 <free>
	strBuf = NULL;
}
  802798:	dfc00817 	ldw	ra,32(sp)
  80279c:	dd800717 	ldw	r22,28(sp)
  8027a0:	dd400617 	ldw	r21,24(sp)
  8027a4:	dd000517 	ldw	r20,20(sp)
  8027a8:	dcc00417 	ldw	r19,16(sp)
  8027ac:	dc800317 	ldw	r18,12(sp)
  8027b0:	dc400217 	ldw	r17,8(sp)
  8027b4:	dc000117 	ldw	r16,4(sp)
  8027b8:	dec00904 	addi	sp,sp,36
  8027bc:	f800283a 	ret
	if(str == NULL || q == NULL) return;
	int i;
	int length = strlen(str);
	char* strBuf = (char*)malloc(sizeof(char)*length);
	strncpy(strBuf, str, length);
	int packet_size = length / 100;
  8027c0:	9809883a 	mov	r4,r19
  8027c4:	01401904 	movi	r5,100
  8027c8:	0820b480 	call	820b48 <__divsi3>
  8027cc:	1029883a 	mov	r20,r2
	if(length % 100 >0) {
  8027d0:	008003c4 	movi	r2,15
  8027d4:	143fc22e 	bgeu	r2,r16,8026e0 <encodeString+0x84>
  8027d8:	9809883a 	mov	r4,r19
  8027dc:	01401904 	movi	r5,100
  8027e0:	0820b480 	call	820b48 <__divsi3>
  8027e4:	003fc406 	br	8026f8 <encodeString+0x9c>
	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
		if(i == packet_size - 1) {
			result = initPacket(length, (unsigned char*)strBuf);
  8027e8:	d9400017 	ldw	r5,0(sp)
  8027ec:	080af000 	call	80af00 <initPacket>
			setHeader(result, 0, 1, STRING); //last packet
  8027f0:	1009883a 	mov	r4,r2
  8027f4:	000b883a 	mov	r5,zero
  8027f8:	01800044 	movi	r6,1
  8027fc:	000f883a 	mov	r7,zero
	addPacketsLengthToQueue(packet_size);

	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
		if(i == packet_size - 1) {
			result = initPacket(length, (unsigned char*)strBuf);
  802800:	1021883a 	mov	r16,r2
			setHeader(result, 0, 1, STRING); //last packet
  802804:	080b2540 	call	80b254 <setHeader>
  802808:	003fd106 	br	802750 <encodeString+0xf4>

0080280c <decode>:
	result = NULL;
	free(dataBuf);
	dataBuf = NULL;
}

void decode(struct Queue* this) {
  80280c:	defff704 	addi	sp,sp,-36
  802810:	dc800215 	stw	r18,8(sp)
	int len = this->size;
  802814:	24800017 	ldw	r18,0(r4)
	result = NULL;
	free(dataBuf);
	dataBuf = NULL;
}

void decode(struct Queue* this) {
  802818:	dd400515 	stw	r21,20(sp)
  80281c:	dd000415 	stw	r20,16(sp)
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
  802820:	94ab883a 	add	r21,r18,r18
	result = NULL;
	free(dataBuf);
	dataBuf = NULL;
}

void decode(struct Queue* this) {
  802824:	2029883a 	mov	r20,r4
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
  802828:	ad49883a 	add	r4,r21,r21
	result = NULL;
	free(dataBuf);
	dataBuf = NULL;
}

void decode(struct Queue* this) {
  80282c:	ddc00715 	stw	r23,28(sp)
  802830:	dd800615 	stw	r22,24(sp)
  802834:	dcc00315 	stw	r19,12(sp)
  802838:	dfc00815 	stw	ra,32(sp)
  80283c:	dc400115 	stw	r17,4(sp)
  802840:	dc000015 	stw	r16,0(sp)
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  802844:	95c00050 	cmplti	r23,r18,1
	dataBuf = NULL;
}

void decode(struct Queue* this) {
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
  802848:	08216fc0 	call	8216fc <malloc>
  80284c:	102d883a 	mov	r22,r2
  802850:	1027883a 	mov	r19,r2
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  802854:	b800081e 	bne	r23,zero,802878 <decode+0x6c>
  802858:	1021883a 	mov	r16,r2
  80285c:	0023883a 	mov	r17,zero
		packets[i] = (struct Packet*)dequeue(this);
  802860:	a009883a 	mov	r4,r20
  802864:	080b7a00 	call	80b7a0 <dequeue>
void decode(struct Queue* this) {
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  802868:	8c400044 	addi	r17,r17,1
		packets[i] = (struct Packet*)dequeue(this);
  80286c:	80800015 	stw	r2,0(r16)
void decode(struct Queue* this) {
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  802870:	84000104 	addi	r16,r16,4
  802874:	947ffa1e 	bne	r18,r17,802860 <decode+0x54>
		packets[i] = (struct Packet*)dequeue(this);
	}

	switch(*(packets[0]->type)) {
  802878:	b0800017 	ldw	r2,0(r22)
  80287c:	10c00217 	ldw	r3,8(r2)
  802880:	18c00017 	ldw	r3,0(r3)
  802884:	18001526 	beq	r3,zero,8028dc <decode+0xd0>
  802888:	00800044 	movi	r2,1
  80288c:	18803826 	beq	r3,r2,802970 <decode+0x164>

		break;
	default:
		break;
	}
	for(i = 0; i < len ; i++ ) {
  802890:	b800061e 	bne	r23,zero,8028ac <decode+0xa0>
  802894:	0021883a 	mov	r16,zero
		killPacket(&packets[i]);
  802898:	9809883a 	mov	r4,r19

		break;
	default:
		break;
	}
	for(i = 0; i < len ; i++ ) {
  80289c:	84000044 	addi	r16,r16,1
		killPacket(&packets[i]);
  8028a0:	080b0a00 	call	80b0a0 <killPacket>

		break;
	default:
		break;
	}
	for(i = 0; i < len ; i++ ) {
  8028a4:	9cc00104 	addi	r19,r19,4
  8028a8:	943ffb1e 	bne	r18,r16,802898 <decode+0x8c>
		killPacket(&packets[i]);
	}
	free(packets);
  8028ac:	b009883a 	mov	r4,r22
	packets = NULL;
}
  8028b0:	dfc00817 	ldw	ra,32(sp)
  8028b4:	ddc00717 	ldw	r23,28(sp)
  8028b8:	dd800617 	ldw	r22,24(sp)
  8028bc:	dd400517 	ldw	r21,20(sp)
  8028c0:	dd000417 	ldw	r20,16(sp)
  8028c4:	dcc00317 	ldw	r19,12(sp)
  8028c8:	dc800217 	ldw	r18,8(sp)
  8028cc:	dc400117 	ldw	r17,4(sp)
  8028d0:	dc000017 	ldw	r16,0(sp)
  8028d4:	dec00904 	addi	sp,sp,36
		break;
	}
	for(i = 0; i < len ; i++ ) {
		killPacket(&packets[i]);
	}
	free(packets);
  8028d8:	08216e81 	jmpi	8216e8 <free>
}

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
  8028dc:	ad45883a 	add	r2,r21,r21
  8028e0:	1585883a 	add	r2,r2,r22
  8028e4:	10ffff17 	ldw	r3,-4(r2)
  8028e8:	91401924 	muli	r5,r18,100
  8028ec:	19000117 	ldw	r4,4(r3)
  8028f0:	213fe704 	addi	r4,r4,-100
  8028f4:	2909883a 	add	r4,r5,r4
  8028f8:	08216fc0 	call	8216fc <malloc>
  8028fc:	1021883a 	mov	r16,r2
	for(i = 0; i < size; i++) {
  802900:	0480240e 	bge	zero,r18,802994 <decode+0x188>
  802904:	b011883a 	mov	r8,r22
  802908:	0013883a 	mov	r9,zero
  80290c:	000f883a 	mov	r7,zero
		for(j = 0; j < p[i]->data_size; j++) {
  802910:	40800017 	ldw	r2,0(r8)
  802914:	11800117 	ldw	r6,4(r2)
  802918:	01800a0e 	bge	zero,r6,802944 <decode+0x138>
  80291c:	11400017 	ldw	r5,0(r2)
  802920:	8249883a 	add	r4,r16,r9
  802924:	0007883a 	mov	r3,zero
			result[k] = p[i]->data[j+HEADERSIZE];
  802928:	28800083 	ldbu	r2,2(r5)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  80292c:	18c00044 	addi	r3,r3,1
  802930:	29400044 	addi	r5,r5,1
			result[k] = p[i]->data[j+HEADERSIZE];
  802934:	20800005 	stb	r2,0(r4)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  802938:	21000044 	addi	r4,r4,1
  80293c:	19bffa1e 	bne	r3,r6,802928 <decode+0x11c>
  802940:	48d3883a 	add	r9,r9,r3

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
  802944:	39c00044 	addi	r7,r7,1
  802948:	42000104 	addi	r8,r8,4
  80294c:	91fff01e 	bne	r18,r7,802910 <decode+0x104>
  802950:	4805883a 	mov	r2,r9
		for(j = 0; j < p[i]->data_size; j++) {
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  802954:	1405883a 	add	r2,r2,r16
	}

	switch(*(packets[0]->type)) {
	case STRING:
		result = decodeString(packets, len);
		printf("%s\n",(char*)result);
  802958:	8009883a 	mov	r4,r16
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  80295c:	10000005 	stb	zero,0(r2)
	}

	switch(*(packets[0]->type)) {
	case STRING:
		result = decodeString(packets, len);
		printf("%s\n",(char*)result);
  802960:	08221800 	call	822180 <puts>
		free(result);
  802964:	8009883a 	mov	r4,r16
  802968:	08216e80 	call	8216e8 <free>
  80296c:	003fc806 	br	802890 <decode+0x84>
		result = NULL;
		break;
	case CMD:
		result = decodeCmd(packets, len);
  802970:	b009883a 	mov	r4,r22
  802974:	900b883a 	mov	r5,r18
  802978:	08022000 	call	802200 <decodeCmd>
		addCmd(com.scheduler, result);
  80297c:	00c02174 	movhi	r3,133
  802980:	18f37e04 	addi	r3,r3,-12808
  802984:	19001117 	ldw	r4,68(r3)
  802988:	100b883a 	mov	r5,r2
  80298c:	08046700 	call	804670 <addCmd>
  802990:	003fbf06 	br	802890 <decode+0x84>
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  802994:	0005883a 	mov	r2,zero
  802998:	003fee06 	br	802954 <decode+0x148>

0080299c <syncRemoveSongFromList>:
	sprintf(temp[0], "%d", list_id);
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
  80299c:	f800283a 	ret

008029a0 <repeatList>:
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}
void repeatList(int index) {
	db.isListRepeated = (db.isListRepeated == 1) ? 0 : 1;
  8029a0:	00c02174 	movhi	r3,133
  8029a4:	18f37d04 	addi	r3,r3,-12812
  8029a8:	18800017 	ldw	r2,0(r3)
  8029ac:	10800058 	cmpnei	r2,r2,1
  8029b0:	18800015 	stw	r2,0(r3)
}
  8029b4:	f800283a 	ret

008029b8 <updateSongToPlaylist>:
	printf("Playlist %d is shuffled\n", index);
}

void updateSongToPlaylist(int song_index, int list_index, int order) {

}
  8029b8:	f800283a 	ret

008029bc <moveSongToIndex>:
}


void moveSongToIndex(char* song, int index, char* listname) {

}
  8029bc:	f800283a 	ret

008029c0 <repeatCurrentSong>:

void repeatCurrentSong() {

}
  8029c0:	f800283a 	ret

008029c4 <reverse>:

void reverse() {

}
  8029c4:	f800283a 	ret

008029c8 <updateDBIndex>:

void updateDBIndex() {

}
  8029c8:	f800283a 	ret

008029cc <play_playlist>:
}

void updateSongToPlaylist(int song_index, int list_index, int order) {

}
void play_playlist(int index) {
  8029cc:	200b883a 	mov	r5,r4
	printf("Playlist %d is selected and played\n", index);
  8029d0:	010020f4 	movhi	r4,131
  8029d4:	210bfe04 	addi	r4,r4,12280
  8029d8:	08220681 	jmpi	822068 <printf>

008029dc <shuffle>:
//index 24
void playSongFromList(int song_id, int list_id) {
	printf("play song %d from list %d\n", song_id, list_id);
}

void shuffle(int index) {
  8029dc:	200b883a 	mov	r5,r4
	printf("Playlist %d is shuffled\n", index);
  8029e0:	010020f4 	movhi	r4,131
  8029e4:	210c0704 	addi	r4,r4,12316
  8029e8:	08220681 	jmpi	822068 <printf>

008029ec <playSongFromList>:
//index 23
void openSongsFromList(int list_id) {
	printf("open songs from list\n");
}
//index 24
void playSongFromList(int song_id, int list_id) {
  8029ec:	280d883a 	mov	r6,r5
	printf("play song %d from list %d\n", song_id, list_id);
  8029f0:	200b883a 	mov	r5,r4
  8029f4:	010020f4 	movhi	r4,131
  8029f8:	210c0e04 	addi	r4,r4,12344
  8029fc:	08220681 	jmpi	822068 <printf>

00802a00 <removeSongFromList>:
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
  802a00:	defffd04 	addi	sp,sp,-12
  802a04:	dc800115 	stw	r18,4(sp)
	printf("remove song %d from list %d\n", song_id, list_id);
  802a08:	200d883a 	mov	r6,r4
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
  802a0c:	2025883a 	mov	r18,r4
	printf("remove song %d from list %d\n", song_id, list_id);
  802a10:	010020f4 	movhi	r4,131
  802a14:	210c1504 	addi	r4,r4,12372
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
  802a18:	dc000015 	stw	r16,0(sp)
  802a1c:	dfc00215 	stw	ra,8(sp)
  802a20:	2821883a 	mov	r16,r5
	printf("remove song %d from list %d\n", song_id, list_id);
  802a24:	08220680 	call	822068 <printf>
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  802a28:	90c01964 	muli	r3,r18,101
  802a2c:	01002134 	movhi	r4,132
  802a30:	210a6204 	addi	r4,r4,10632
	db.index_list_song[list_id][song_id] = 0;
	db.playlists[list_id]->num_of_songs--;
  802a34:	94a5883a 	add	r18,r18,r18
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
	printf("remove song %d from list %d\n", song_id, list_id);
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  802a38:	1c21883a 	add	r16,r3,r16
  802a3c:	8421883a 	add	r16,r16,r16
  802a40:	8421883a 	add	r16,r16,r16
  802a44:	8121883a 	add	r16,r16,r4
  802a48:	8400a804 	addi	r16,r16,672
  802a4c:	80800017 	ldw	r2,0(r16)
	db.index_list_song[list_id][song_id] = 0;
	db.playlists[list_id]->num_of_songs--;
  802a50:	94a5883a 	add	r18,r18,r18
  802a54:	9125883a 	add	r18,r18,r4
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
	printf("remove song %d from list %d\n", song_id, list_id);
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  802a58:	1887883a 	add	r3,r3,r2
  802a5c:	18c7883a 	add	r3,r3,r3
	db.index_list_song[list_id][song_id] = 0;
	db.playlists[list_id]->num_of_songs--;
  802a60:	91400117 	ldw	r5,4(r18)
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);*/
}
void removeSongFromList(int list_id, int song_id) {
	printf("remove song %d from list %d\n", song_id, list_id);
	db.index_list_order[list_id][db.index_list_song[list_id][song_id]] = 0;
  802a64:	18c7883a 	add	r3,r3,r3
  802a68:	1907883a 	add	r3,r3,r4
  802a6c:	1814c715 	stw	zero,21276(r3)
	db.index_list_song[list_id][song_id] = 0;
  802a70:	80000015 	stw	zero,0(r16)
	db.playlists[list_id]->num_of_songs--;
  802a74:	28801a17 	ldw	r2,104(r5)
  802a78:	10bfffc4 	addi	r2,r2,-1
  802a7c:	28801a15 	stw	r2,104(r5)
}
  802a80:	dfc00217 	ldw	ra,8(sp)
  802a84:	dc800117 	ldw	r18,4(sp)
  802a88:	dc000017 	ldw	r16,0(sp)
  802a8c:	dec00304 	addi	sp,sp,12
  802a90:	f800283a 	ret

00802a94 <addSongToList>:
	killCmd(&cmd);
	free(temp[0]);
	free(temp[1]);
	//addCmd(com.scheduler, cmd);
}
void addSongToList(int list_index, int song_index) {
  802a94:	defffd04 	addi	sp,sp,-12
  802a98:	dc400115 	stw	r17,4(sp)
  802a9c:	2023883a 	mov	r17,r4
	printf("adding song %d\n", song_index);
  802aa0:	010020f4 	movhi	r4,131
  802aa4:	210c1d04 	addi	r4,r4,12404
	killCmd(&cmd);
	free(temp[0]);
	free(temp[1]);
	//addCmd(com.scheduler, cmd);
}
void addSongToList(int list_index, int song_index) {
  802aa8:	dc000015 	stw	r16,0(sp)
  802aac:	dfc00215 	stw	ra,8(sp)
  802ab0:	2821883a 	mov	r16,r5
	printf("adding song %d\n", song_index);
  802ab4:	08220680 	call	822068 <printf>
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
  802ab8:	8c47883a 	add	r3,r17,r17
  802abc:	18c7883a 	add	r3,r3,r3
  802ac0:	01402134 	movhi	r5,132
  802ac4:	294a6204 	addi	r5,r5,10632
  802ac8:	1949883a 	add	r4,r3,r5
  802acc:	20800117 	ldw	r2,4(r4)
  802ad0:	10002826 	beq	r2,zero,802b74 <addSongToList+0xe0>
  802ad4:	8405883a 	add	r2,r16,r16
  802ad8:	1085883a 	add	r2,r2,r2
  802adc:	1145883a 	add	r2,r2,r5
  802ae0:	10c03617 	ldw	r3,216(r2)
  802ae4:	18002326 	beq	r3,zero,802b74 <addSongToList+0xe0>
  802ae8:	88801964 	muli	r2,r17,101
  802aec:	88c06524 	muli	r3,r17,404
  802af0:	2011883a 	mov	r8,r4
  802af4:	1405883a 	add	r2,r2,r16
  802af8:	1085883a 	add	r2,r2,r2
  802afc:	1949883a 	add	r4,r3,r5
  802b00:	1085883a 	add	r2,r2,r2
  802b04:	18d4c804 	addi	r3,r3,21280
  802b08:	1947883a 	add	r3,r3,r5
  802b0c:	114f883a 	add	r7,r2,r5
  802b10:	2114c804 	addi	r4,r4,21280
  802b14:	01400044 	movi	r5,1
  802b18:	01801944 	movi	r6,101
  802b1c:	00000306 	br	802b2c <addSongToList+0x98>
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
  802b20:	29400044 	addi	r5,r5,1
  802b24:	21000104 	addi	r4,r4,4
  802b28:	29801226 	beq	r5,r6,802b74 <addSongToList+0xe0>
		if(db.index_list_order[list_index][i] == 0) {
  802b2c:	18800017 	ldw	r2,0(r3)
}
void addSongToList(int list_index, int song_index) {
	printf("adding song %d\n", song_index);
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
  802b30:	18c00104 	addi	r3,r3,4
		if(db.index_list_order[list_index][i] == 0) {
  802b34:	103ffa1e 	bne	r2,zero,802b20 <addSongToList+0x8c>
			db.index_list_order[list_index][i] = song_index;
			db.index_list_song[list_index][song_index] = i;
			db.playlists[list_index]->num_of_songs++;
  802b38:	40c00117 	ldw	r3,4(r8)
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
		if(db.index_list_order[list_index][i] == 0) {
			db.index_list_order[list_index][i] = song_index;
			db.index_list_song[list_index][song_index] = i;
  802b3c:	3940a815 	stw	r5,672(r7)
	printf("adding song %d\n", song_index);
	if(db.playlists[list_index] == NULL || db.songs[song_index] == NULL) return;
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
		if(db.index_list_order[list_index][i] == 0) {
			db.index_list_order[list_index][i] = song_index;
  802b40:	24000015 	stw	r16,0(r4)
			db.index_list_song[list_index][song_index] = i;
			db.playlists[list_index]->num_of_songs++;
  802b44:	18801a17 	ldw	r2,104(r3)
			printf("Song %d is added to %d\n", song_index, list_index);
  802b48:	800b883a 	mov	r5,r16
  802b4c:	880d883a 	mov	r6,r17
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
		if(db.index_list_order[list_index][i] == 0) {
			db.index_list_order[list_index][i] = song_index;
			db.index_list_song[list_index][song_index] = i;
			db.playlists[list_index]->num_of_songs++;
  802b50:	10800044 	addi	r2,r2,1
			printf("Song %d is added to %d\n", song_index, list_index);
  802b54:	010020f4 	movhi	r4,131
  802b58:	210c2104 	addi	r4,r4,12420
	int i;
	for(i = 1; i < MAX_SONGS; i++) {
		if(db.index_list_order[list_index][i] == 0) {
			db.index_list_order[list_index][i] = song_index;
			db.index_list_song[list_index][song_index] = i;
			db.playlists[list_index]->num_of_songs++;
  802b5c:	18801a15 	stw	r2,104(r3)
			printf("Song %d is added to %d\n", song_index, list_index);
			return;
		}
	}
}
  802b60:	dfc00217 	ldw	ra,8(sp)
  802b64:	dc400117 	ldw	r17,4(sp)
  802b68:	dc000017 	ldw	r16,0(sp)
  802b6c:	dec00304 	addi	sp,sp,12
	for(i = 1; i < MAX_SONGS; i++) {
		if(db.index_list_order[list_index][i] == 0) {
			db.index_list_order[list_index][i] = song_index;
			db.index_list_song[list_index][song_index] = i;
			db.playlists[list_index]->num_of_songs++;
			printf("Song %d is added to %d\n", song_index, list_index);
  802b70:	08220681 	jmpi	822068 <printf>
			return;
		}
	}
}
  802b74:	dfc00217 	ldw	ra,8(sp)
  802b78:	dc400117 	ldw	r17,4(sp)
  802b7c:	dc000017 	ldw	r16,0(sp)
  802b80:	dec00304 	addi	sp,sp,12
  802b84:	f800283a 	ret

00802b88 <selectList>:
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}

void selectList(int id) {
  802b88:	defffe04 	addi	sp,sp,-8
  802b8c:	dc400015 	stw	r17,0(sp)
	printf("list %d is selected\n", id);
  802b90:	200b883a 	mov	r5,r4
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}

void selectList(int id) {
  802b94:	2023883a 	mov	r17,r4
	printf("list %d is selected\n", id);
  802b98:	010020f4 	movhi	r4,131
  802b9c:	210c2704 	addi	r4,r4,12444
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}

void selectList(int id) {
  802ba0:	dfc00115 	stw	ra,4(sp)
	printf("list %d is selected\n", id);
  802ba4:	08220680 	call	822068 <printf>
	db.curr_playlist_id = id;
	mouse->frame->elements[3]->currentPlaylist = id;
  802ba8:	00c02134 	movhi	r3,132
  802bac:	18ca3a04 	addi	r3,r3,10472
  802bb0:	19000017 	ldw	r4,0(r3)
	free(temp[0]);
}

void selectList(int id) {
	printf("list %d is selected\n", id);
	db.curr_playlist_id = id;
  802bb4:	00802134 	movhi	r2,132
  802bb8:	108a6204 	addi	r2,r2,10632
  802bbc:	14403415 	stw	r17,208(r2)
	mouse->frame->elements[3]->currentPlaylist = id;
  802bc0:	20c00317 	ldw	r3,12(r4)
  802bc4:	18800017 	ldw	r2,0(r3)
  802bc8:	11000317 	ldw	r4,12(r2)
  802bcc:	24400515 	stw	r17,20(r4)
}
  802bd0:	dfc00117 	ldw	ra,4(sp)
  802bd4:	dc400017 	ldw	r17,0(sp)
  802bd8:	dec00204 	addi	sp,sp,8
  802bdc:	f800283a 	ret

00802be0 <seek>:
	setGlobalVolume(vol);
	updateVolumeValue(id);
	printf("Volume is set to %d percent\n", vol);
}

void seek(int pos) {
  802be0:	200b883a 	mov	r5,r4
	printf("Seek is set to %d\n", pos);
  802be4:	010020f4 	movhi	r4,131
  802be8:	210c2d04 	addi	r4,r4,12468
  802bec:	08220681 	jmpi	822068 <printf>

00802bf0 <openSongsFromList>:
	drawAllLists();
	printf("open list panel\n");
}
//index 23
void openSongsFromList(int list_id) {
	printf("open songs from list\n");
  802bf0:	010020f4 	movhi	r4,131
  802bf4:	210c3204 	addi	r4,r4,12488
  802bf8:	08221801 	jmpi	822180 <puts>

00802bfc <openPlaylistsPanel>:
void openAllSongPanel() {
	drawAllSongs();
	printf("open songs panel\n");
}
//index 22
void openPlaylistsPanel() {
  802bfc:	deffff04 	addi	sp,sp,-4
  802c00:	dfc00015 	stw	ra,0(sp)
	drawAllLists();
  802c04:	080804c0 	call	80804c <drawAllLists>
	printf("open list panel\n");
  802c08:	010020f4 	movhi	r4,131
  802c0c:	210c3804 	addi	r4,r4,12512
}
  802c10:	dfc00017 	ldw	ra,0(sp)
  802c14:	dec00104 	addi	sp,sp,4
	printf("open songs panel\n");
}
//index 22
void openPlaylistsPanel() {
	drawAllLists();
	printf("open list panel\n");
  802c18:	08221801 	jmpi	822180 <puts>

00802c1c <openAllSongPanel>:
void playSongFromAllSongs(int id, int vol, int pos) {
	playSongsFromSongPanel(id, vol, pos);
	printf("play song %d from all song panel\n", id);
}
//index 21
void openAllSongPanel() {
  802c1c:	deffff04 	addi	sp,sp,-4
  802c20:	dfc00015 	stw	ra,0(sp)
	drawAllSongs();
  802c24:	08082dc0 	call	8082dc <drawAllSongs>
	printf("open songs panel\n");
  802c28:	010020f4 	movhi	r4,131
  802c2c:	210c3c04 	addi	r4,r4,12528
}
  802c30:	dfc00017 	ldw	ra,0(sp)
  802c34:	dec00104 	addi	sp,sp,4
	printf("play song %d from all song panel\n", id);
}
//index 21
void openAllSongPanel() {
	drawAllSongs();
	printf("open songs panel\n");
  802c38:	08221801 	jmpi	822180 <puts>

00802c3c <playSongFromAllSongs>:
		return;
	} printf("Playlist %d is removed.\n", index);
}

//index 20
void playSongFromAllSongs(int id, int vol, int pos) {
  802c3c:	defffe04 	addi	sp,sp,-8
  802c40:	dc400015 	stw	r17,0(sp)
  802c44:	2023883a 	mov	r17,r4
  802c48:	dfc00115 	stw	ra,4(sp)
	playSongsFromSongPanel(id, vol, pos);
  802c4c:	08016140 	call	801614 <playSongsFromSongPanel>
	printf("play song %d from all song panel\n", id);
  802c50:	880b883a 	mov	r5,r17
  802c54:	010020f4 	movhi	r4,131
  802c58:	210c4104 	addi	r4,r4,12548
}
  802c5c:	dfc00117 	ldw	ra,4(sp)
  802c60:	dc400017 	ldw	r17,0(sp)
  802c64:	dec00204 	addi	sp,sp,8
}

//index 20
void playSongFromAllSongs(int id, int vol, int pos) {
	playSongsFromSongPanel(id, vol, pos);
	printf("play song %d from all song panel\n", id);
  802c68:	08220681 	jmpi	822068 <printf>

00802c6c <removeList>:
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);

}
void removeList(int index) {
  802c6c:	defffe04 	addi	sp,sp,-8
  802c70:	dc400015 	stw	r17,0(sp)
  802c74:	dfc00115 	stw	ra,4(sp)
  802c78:	2023883a 	mov	r17,r4
	if(removeListFromDB(index) == -1) {
  802c7c:	08064e00 	call	8064e0 <removeListFromDB>
  802c80:	00ffffc4 	movi	r3,-1
		printf("List does not existed\n");
		return;
	} printf("Playlist %d is removed.\n", index);
  802c84:	880b883a 	mov	r5,r17
	free(temp[0]);

}
void removeList(int index) {
	if(removeListFromDB(index) == -1) {
		printf("List does not existed\n");
  802c88:	010020f4 	movhi	r4,131
  802c8c:	210c4a04 	addi	r4,r4,12584
	addCmd(com.scheduler, cmd);
	free(temp[0]);

}
void removeList(int index) {
	if(removeListFromDB(index) == -1) {
  802c90:	10c00626 	beq	r2,r3,802cac <removeList+0x40>
		printf("List does not existed\n");
		return;
	} printf("Playlist %d is removed.\n", index);
  802c94:	010020f4 	movhi	r4,131
  802c98:	210c5004 	addi	r4,r4,12608
}
  802c9c:	dfc00117 	ldw	ra,4(sp)
  802ca0:	dc400017 	ldw	r17,0(sp)
  802ca4:	dec00204 	addi	sp,sp,8
}
void removeList(int index) {
	if(removeListFromDB(index) == -1) {
		printf("List does not existed\n");
		return;
	} printf("Playlist %d is removed.\n", index);
  802ca8:	08220681 	jmpi	822068 <printf>
}
  802cac:	dfc00117 	ldw	ra,4(sp)
  802cb0:	dc400017 	ldw	r17,0(sp)
  802cb4:	dec00204 	addi	sp,sp,8
	free(temp[0]);

}
void removeList(int index) {
	if(removeListFromDB(index) == -1) {
		printf("List does not existed\n");
  802cb8:	08221801 	jmpi	822180 <puts>

00802cbc <killCmd>:
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  802cbc:	20c00017 	ldw	r3,0(r4)
		this->parameters[i][this->parameters_size[i]] = '\0';
	}
	return this;
}

void killCmd(struct Command** this) {
  802cc0:	defffc04 	addi	sp,sp,-16
  802cc4:	dc800215 	stw	r18,8(sp)
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  802cc8:	18800117 	ldw	r2,4(r3)
		this->parameters[i][this->parameters_size[i]] = '\0';
	}
	return this;
}

void killCmd(struct Command** this) {
  802ccc:	dfc00315 	stw	ra,12(sp)
  802cd0:	dc400115 	stw	r17,4(sp)
  802cd4:	dc000015 	stw	r16,0(sp)
  802cd8:	2025883a 	mov	r18,r4
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  802cdc:	1000091e 	bne	r2,zero,802d04 <killCmd+0x48>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  802ce0:	91000017 	ldw	r4,0(r18)
  802ce4:	08216e80 	call	8216e8 <free>
	*this = NULL;
  802ce8:	90000015 	stw	zero,0(r18)
}
  802cec:	dfc00317 	ldw	ra,12(sp)
  802cf0:	dc800217 	ldw	r18,8(sp)
  802cf4:	dc400117 	ldw	r17,4(sp)
  802cf8:	dc000017 	ldw	r16,0(sp)
  802cfc:	dec00404 	addi	sp,sp,16
  802d00:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  802d04:	19000217 	ldw	r4,8(r3)
  802d08:	08216e80 	call	8216e8 <free>
		(*this)->parameters_size = NULL;
  802d0c:	90c00017 	ldw	r3,0(r18)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802d10:	18800117 	ldw	r2,4(r3)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  802d14:	18000215 	stw	zero,8(r3)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802d18:	0080120e 	bge	zero,r2,802d64 <killCmd+0xa8>
  802d1c:	19000317 	ldw	r4,12(r3)
  802d20:	0023883a 	mov	r17,zero
  802d24:	0021883a 	mov	r16,zero
			free((*this)->parameters[i]);
  802d28:	2405883a 	add	r2,r4,r16
  802d2c:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802d30:	8c400044 	addi	r17,r17,1
			free((*this)->parameters[i]);
  802d34:	08216e80 	call	8216e8 <free>
			(*this)->parameters[i] = NULL;
  802d38:	90c00017 	ldw	r3,0(r18)
  802d3c:	19000317 	ldw	r4,12(r3)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802d40:	18c00117 	ldw	r3,4(r3)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  802d44:	2405883a 	add	r2,r4,r16
  802d48:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  802d4c:	84000104 	addi	r16,r16,4
  802d50:	88fff516 	blt	r17,r3,802d28 <killCmd+0x6c>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  802d54:	08216e80 	call	8216e8 <free>
		(*this)->parameters = NULL;
  802d58:	90800017 	ldw	r2,0(r18)
  802d5c:	10000315 	stw	zero,12(r2)
  802d60:	003fdf06 	br	802ce0 <killCmd+0x24>
  802d64:	19000317 	ldw	r4,12(r3)
  802d68:	003ffa06 	br	802d54 <killCmd+0x98>

00802d6c <modifyListName>:
	db.isListRepeated = (db.isListRepeated == 1) ? 0 : 1;
}

//index18
void modifyListName(int index, char* new_listname) {
	setListName(db.playlists[index], new_listname);
  802d6c:	2109883a 	add	r4,r4,r4
  802d70:	00802134 	movhi	r2,132
  802d74:	108a6304 	addi	r2,r2,10636
  802d78:	2109883a 	add	r4,r4,r4
  802d7c:	2089883a 	add	r4,r4,r2
  802d80:	21000017 	ldw	r4,0(r4)
  802d84:	080b3b81 	jmpi	80b3b8 <setListName>

00802d88 <createSong>:
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
	free(temp[1]);
}
void createSong(char* song_name, int len) {
  802d88:	defffe04 	addi	sp,sp,-8
  802d8c:	dc400015 	stw	r17,0(sp)
  802d90:	dfc00115 	stw	ra,4(sp)
  802d94:	2823883a 	mov	r17,r5
	struct Song* song = initSong(song_name);
  802d98:	080dc180 	call	80dc18 <initSong>
  802d9c:	1009883a 	mov	r4,r2
	song->size = len;
  802da0:	14400915 	stw	r17,36(r2)
	addSongToDB(song);
	song = NULL;
}
  802da4:	dfc00117 	ldw	ra,4(sp)
  802da8:	dc400017 	ldw	r17,0(sp)
  802dac:	dec00204 	addi	sp,sp,8
	free(temp[1]);
}
void createSong(char* song_name, int len) {
	struct Song* song = initSong(song_name);
	song->size = len;
	addSongToDB(song);
  802db0:	08068041 	jmpi	806804 <addSongToDB>

00802db4 <createExisitedPlaylist>:
	killCmd(&cmd);
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
void createExisitedPlaylist(char* listname, int num_of_songs, int id) {
  802db4:	defffd04 	addi	sp,sp,-12
  802db8:	dcc00115 	stw	r19,4(sp)
  802dbc:	dc400015 	stw	r17,0(sp)
  802dc0:	3027883a 	mov	r19,r6
  802dc4:	2823883a 	mov	r17,r5
  802dc8:	dfc00215 	stw	ra,8(sp)
	struct Playlist* pl = initPlaylist(listname);
  802dcc:	080b42c0 	call	80b42c <initPlaylist>
  802dd0:	1009883a 	mov	r4,r2
	pl->num_of_songs = num_of_songs;
	addExisitedListToDB(pl, id);
  802dd4:	980b883a 	mov	r5,r19
	free(temp[1]);
	free(temp[2]);
}
void createExisitedPlaylist(char* listname, int num_of_songs, int id) {
	struct Playlist* pl = initPlaylist(listname);
	pl->num_of_songs = num_of_songs;
  802dd8:	14401a15 	stw	r17,104(r2)
	addExisitedListToDB(pl, id);
	pl = NULL;
}
  802ddc:	dfc00217 	ldw	ra,8(sp)
  802de0:	dcc00117 	ldw	r19,4(sp)
  802de4:	dc400017 	ldw	r17,0(sp)
  802de8:	dec00304 	addi	sp,sp,12
	free(temp[2]);
}
void createExisitedPlaylist(char* listname, int num_of_songs, int id) {
	struct Playlist* pl = initPlaylist(listname);
	pl->num_of_songs = num_of_songs;
	addExisitedListToDB(pl, id);
  802dec:	08065b81 	jmpi	8065b8 <addExisitedListToDB>

00802df0 <createPlaylist>:
	struct Command* cmd = initCmd(8, 1, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
}
//index 8
void createPlaylist(char* listname) {
  802df0:	defffe04 	addi	sp,sp,-8
	printf("A playlist %s is created.\n", listname);
  802df4:	200b883a 	mov	r5,r4
	struct Command* cmd = initCmd(8, 1, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
}
//index 8
void createPlaylist(char* listname) {
  802df8:	dc400015 	stw	r17,0(sp)
  802dfc:	2023883a 	mov	r17,r4
	printf("A playlist %s is created.\n", listname);
  802e00:	010020f4 	movhi	r4,131
  802e04:	210c5704 	addi	r4,r4,12636
	struct Command* cmd = initCmd(8, 1, temp);
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
}
//index 8
void createPlaylist(char* listname) {
  802e08:	dfc00115 	stw	ra,4(sp)
	printf("A playlist %s is created.\n", listname);
  802e0c:	08220680 	call	822068 <printf>
	struct Playlist* pl = initPlaylist(listname);
  802e10:	8809883a 	mov	r4,r17
  802e14:	080b42c0 	call	80b42c <initPlaylist>
	addListToDB(pl);
  802e18:	1009883a 	mov	r4,r2
	pl = NULL;
}
  802e1c:	dfc00117 	ldw	ra,4(sp)
  802e20:	dc400017 	ldw	r17,0(sp)
  802e24:	dec00204 	addi	sp,sp,8
}
//index 8
void createPlaylist(char* listname) {
	printf("A playlist %s is created.\n", listname);
	struct Playlist* pl = initPlaylist(listname);
	addListToDB(pl);
  802e28:	08066f81 	jmpi	8066f8 <addListToDB>

00802e2c <setVolume>:
	addCmd(com.scheduler, cmd);
	free(temp[0]);
	free(temp[1]);
}
//index 4
void setVolume(int id, int vol) {
  802e2c:	defffd04 	addi	sp,sp,-12
  802e30:	dc400015 	stw	r17,0(sp)
  802e34:	2023883a 	mov	r17,r4
	setGlobalVolume(vol);
  802e38:	2809883a 	mov	r4,r5
	addCmd(com.scheduler, cmd);
	free(temp[0]);
	free(temp[1]);
}
//index 4
void setVolume(int id, int vol) {
  802e3c:	dfc00215 	stw	ra,8(sp)
  802e40:	dcc00115 	stw	r19,4(sp)
  802e44:	2827883a 	mov	r19,r5
	setGlobalVolume(vol);
  802e48:	081f8d00 	call	81f8d0 <__floatsisf>
  802e4c:	1009883a 	mov	r4,r2
  802e50:	081aef80 	call	81aef8 <setGlobalVolume>
	updateVolumeValue(id);
  802e54:	8809883a 	mov	r4,r17
  802e58:	08002c40 	call	8002c4 <updateVolumeValue>
	printf("Volume is set to %d percent\n", vol);
  802e5c:	980b883a 	mov	r5,r19
  802e60:	010020f4 	movhi	r4,131
  802e64:	210c5e04 	addi	r4,r4,12664
}
  802e68:	dfc00217 	ldw	ra,8(sp)
  802e6c:	dcc00117 	ldw	r19,4(sp)
  802e70:	dc400017 	ldw	r17,0(sp)
  802e74:	dec00304 	addi	sp,sp,12
}
//index 4
void setVolume(int id, int vol) {
	setGlobalVolume(vol);
	updateVolumeValue(id);
	printf("Volume is set to %d percent\n", vol);
  802e78:	08220681 	jmpi	822068 <printf>

00802e7c <stop>:
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
}
//index 3
void stop() {
  802e7c:	defffb04 	addi	sp,sp,-20
	printf("The music start to stop.\n");
  802e80:	010020f4 	movhi	r4,131
  802e84:	210c6604 	addi	r4,r4,12696
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
}
//index 3
void stop() {
  802e88:	dcc00315 	stw	r19,12(sp)
	printf("The music start to stop.\n");
	disableAudioDeviceController();
	clearSoundMixer();
	int i;
	int size = db.total_songs_playing;
  802e8c:	04c02134 	movhi	r19,132
  802e90:	9cca6204 	addi	r19,r19,10632
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
}
//index 3
void stop() {
  802e94:	dfc00415 	stw	ra,16(sp)
  802e98:	dc800215 	stw	r18,8(sp)
  802e9c:	dc400115 	stw	r17,4(sp)
  802ea0:	dc000015 	stw	r16,0(sp)
	printf("The music start to stop.\n");
  802ea4:	08221800 	call	822180 <puts>
	disableAudioDeviceController();
  802ea8:	08194f40 	call	8194f4 <disableAudioDeviceController>
	clearSoundMixer();
  802eac:	081af880 	call	81af88 <clearSoundMixer>
	int i;
	int size = db.total_songs_playing;
  802eb0:	9c80a617 	ldw	r18,664(r19)
	for(i = 0; i < size; i++) {
  802eb4:	04800e0e 	bge	zero,r18,802ef0 <stop+0x74>
  802eb8:	0021883a 	mov	r16,zero
  802ebc:	9c409b04 	addi	r17,r19,620
		stopSound(db.songs[db.curr_song_ids[i]]->sound);
  802ec0:	88800017 	ldw	r2,0(r17)
	printf("The music start to stop.\n");
	disableAudioDeviceController();
	clearSoundMixer();
	int i;
	int size = db.total_songs_playing;
	for(i = 0; i < size; i++) {
  802ec4:	8c400104 	addi	r17,r17,4
		stopSound(db.songs[db.curr_song_ids[i]]->sound);
  802ec8:	1085883a 	add	r2,r2,r2
  802ecc:	1085883a 	add	r2,r2,r2
  802ed0:	14c5883a 	add	r2,r2,r19
  802ed4:	10c03617 	ldw	r3,216(r2)
  802ed8:	19000017 	ldw	r4,0(r3)
  802edc:	081979c0 	call	81979c <stopSound>
		removeCurrPlaying(i);
  802ee0:	8009883a 	mov	r4,r16
	printf("The music start to stop.\n");
	disableAudioDeviceController();
	clearSoundMixer();
	int i;
	int size = db.total_songs_playing;
	for(i = 0; i < size; i++) {
  802ee4:	84000044 	addi	r16,r16,1
		stopSound(db.songs[db.curr_song_ids[i]]->sound);
		removeCurrPlaying(i);
  802ee8:	0805d300 	call	805d30 <removeCurrPlaying>
	printf("The music start to stop.\n");
	disableAudioDeviceController();
	clearSoundMixer();
	int i;
	int size = db.total_songs_playing;
	for(i = 0; i < size; i++) {
  802eec:	943ff41e 	bne	r18,r16,802ec0 <stop+0x44>
		stopSound(db.songs[db.curr_song_ids[i]]->sound);
		removeCurrPlaying(i);
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
  802ef0:	010020f4 	movhi	r4,131
  802ef4:	210c6d04 	addi	r4,r4,12724
	int size = db.total_songs_playing;
	for(i = 0; i < size; i++) {
		stopSound(db.songs[db.curr_song_ids[i]]->sound);
		removeCurrPlaying(i);
	}
	db.curr_song_id = 0;
  802ef8:	98000015 	stw	zero,0(r19)
	printf("Music has stopped.\n");
}
  802efc:	dfc00417 	ldw	ra,16(sp)
  802f00:	dcc00317 	ldw	r19,12(sp)
  802f04:	dc800217 	ldw	r18,8(sp)
  802f08:	dc400117 	ldw	r17,4(sp)
  802f0c:	dc000017 	ldw	r16,0(sp)
  802f10:	dec00504 	addi	sp,sp,20
	for(i = 0; i < size; i++) {
		stopSound(db.songs[db.curr_song_ids[i]]->sound);
		removeCurrPlaying(i);
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
  802f14:	08221801 	jmpi	822180 <puts>

00802f18 <pause>:
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
	free(temp[0]);
}
//pause current play song; index 2
void pause(int id) {
  802f18:	defffb04 	addi	sp,sp,-20
  802f1c:	dfc00415 	stw	ra,16(sp)
  802f20:	dd000315 	stw	r20,12(sp)
  802f24:	dc800215 	stw	r18,8(sp)
  802f28:	dc400115 	stw	r17,4(sp)
	disableAudioDeviceController();
  802f2c:	d9000015 	stw	r4,0(sp)
  802f30:	08194f40 	call	8194f4 <disableAudioDeviceController>
	pauseSong(db.songs[id]);
  802f34:	d9000017 	ldw	r4,0(sp)
  802f38:	00802134 	movhi	r2,132
  802f3c:	108a9804 	addi	r2,r2,10848
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 37);
  802f40:	04802134 	movhi	r18,132
  802f44:	948a3704 	addi	r18,r18,10460
	free(temp[0]);
}
//pause current play song; index 2
void pause(int id) {
	disableAudioDeviceController();
	pauseSong(db.songs[id]);
  802f48:	2109883a 	add	r4,r4,r4
  802f4c:	2109883a 	add	r4,r4,r4
  802f50:	2089883a 	add	r4,r4,r2
  802f54:	21000017 	ldw	r4,0(r4)
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 37);
  802f58:	050020f4 	movhi	r20,131
  802f5c:	a50c7204 	addi	r20,r20,12744
  802f60:	044000c4 	movi	r17,3
	free(temp[0]);
}
//pause current play song; index 2
void pause(int id) {
	disableAudioDeviceController();
	pauseSong(db.songs[id]);
  802f64:	080da480 	call	80da48 <pauseSong>
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 37);
  802f68:	91000017 	ldw	r4,0(r18)
  802f6c:	a00b883a 	mov	r5,r20
  802f70:	880d883a 	mov	r6,r17
  802f74:	01c00944 	movi	r7,37
  802f78:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 38);
  802f7c:	91000017 	ldw	r4,0(r18)
  802f80:	a00b883a 	mov	r5,r20
  802f84:	880d883a 	mov	r6,r17
  802f88:	01c00984 	movi	r7,38
  802f8c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 39);
  802f90:	91000017 	ldw	r4,0(r18)
  802f94:	a00b883a 	mov	r5,r20
  802f98:	880d883a 	mov	r6,r17
  802f9c:	01c009c4 	movi	r7,39
  802fa0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 40);
  802fa4:	91000017 	ldw	r4,0(r18)
  802fa8:	a00b883a 	mov	r5,r20
  802fac:	880d883a 	mov	r6,r17
  802fb0:	01c00a04 	movi	r7,40
}
  802fb4:	dfc00417 	ldw	ra,16(sp)
  802fb8:	dd000317 	ldw	r20,12(sp)
  802fbc:	dc800217 	ldw	r18,8(sp)
  802fc0:	dc400117 	ldw	r17,4(sp)
  802fc4:	dec00504 	addi	sp,sp,20
	disableAudioDeviceController();
	pauseSong(db.songs[id]);
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 37);
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 38);
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 39);
	alt_up_char_buffer_string(char_buffer, "                          ", 3, 40);
  802fc8:	082c8c41 	jmpi	82c8c4 <alt_up_char_buffer_string>

00802fcc <initCmd>:
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Command.h"

struct Command* initCmd(int index, int num_parameters, char** paras) {
  802fcc:	defff904 	addi	sp,sp,-28
  802fd0:	dc400115 	stw	r17,4(sp)
  802fd4:	2023883a 	mov	r17,r4
	struct Command* this = (struct Command*)malloc(sizeof(struct Command));
  802fd8:	01000404 	movi	r4,16
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Command.h"

struct Command* initCmd(int index, int num_parameters, char** paras) {
  802fdc:	dd400515 	stw	r21,20(sp)
  802fe0:	dc800215 	stw	r18,8(sp)
  802fe4:	dc000015 	stw	r16,0(sp)
  802fe8:	282b883a 	mov	r21,r5
  802fec:	dfc00615 	stw	ra,24(sp)
  802ff0:	dd000415 	stw	r20,16(sp)
  802ff4:	dcc00315 	stw	r19,12(sp)
  802ff8:	3021883a 	mov	r16,r6
	struct Command* this = (struct Command*)malloc(sizeof(struct Command));
  802ffc:	08216fc0 	call	8216fc <malloc>
  803000:	1025883a 	mov	r18,r2
	this->cmd_index = index;
  803004:	14400015 	stw	r17,0(r2)
	this->num_of_parameters = num_parameters;
  803008:	15400115 	stw	r21,4(r2)
	if(num_parameters == 0 || paras == NULL) return  this;
  80300c:	a8002b26 	beq	r21,zero,8030bc <initCmd+0xf0>
  803010:	80002a26 	beq	r16,zero,8030bc <initCmd+0xf0>
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
  803014:	ad63883a 	add	r17,r21,r21
  803018:	8c63883a 	add	r17,r17,r17
  80301c:	8809883a 	mov	r4,r17
  803020:	08216fc0 	call	8216fc <malloc>
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
  803024:	8809883a 	mov	r4,r17
struct Command* initCmd(int index, int num_parameters, char** paras) {
	struct Command* this = (struct Command*)malloc(sizeof(struct Command));
	this->cmd_index = index;
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
  803028:	90800315 	stw	r2,12(r18)
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
  80302c:	08216fc0 	call	8216fc <malloc>
  803030:	90800215 	stw	r2,8(r18)
	int i ;
	for( i = 0; i < num_parameters; i++) {
  803034:	0540210e 	bge	zero,r21,8030bc <initCmd+0xf0>
  803038:	8027883a 	mov	r19,r16
  80303c:	0029883a 	mov	r20,zero
  803040:	0023883a 	mov	r17,zero
		this->parameters_size[i] = strlen(paras[i]);
  803044:	99000017 	ldw	r4,0(r19)
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
  803048:	a5000044 	addi	r20,r20,1
		this->parameters_size[i] = strlen(paras[i]);
  80304c:	0822e100 	call	822e10 <strlen>
  803050:	90c00217 	ldw	r3,8(r18)
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
  803054:	94000317 	ldw	r16,12(r18)
  803058:	11000044 	addi	r4,r2,1
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
		this->parameters_size[i] = strlen(paras[i]);
  80305c:	1c47883a 	add	r3,r3,r17
  803060:	18800015 	stw	r2,0(r3)
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
  803064:	08216fc0 	call	8216fc <malloc>
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
  803068:	90c00317 	ldw	r3,12(r18)
  80306c:	91400217 	ldw	r5,8(r18)
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
		this->parameters_size[i] = strlen(paras[i]);
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
  803070:	8c21883a 	add	r16,r17,r16
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
  803074:	1c47883a 	add	r3,r3,r17
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
		this->parameters_size[i] = strlen(paras[i]);
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
  803078:	80800015 	stw	r2,0(r16)
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
  80307c:	894b883a 	add	r5,r17,r5
  803080:	19000017 	ldw	r4,0(r3)
  803084:	29800017 	ldw	r6,0(r5)
  803088:	99400017 	ldw	r5,0(r19)
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
  80308c:	9cc00104 	addi	r19,r19,4
		this->parameters_size[i] = strlen(paras[i]);
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
  803090:	0822f340 	call	822f34 <strncpy>
		this->parameters[i][this->parameters_size[i]] = '\0';
  803094:	90c00317 	ldw	r3,12(r18)
  803098:	90800217 	ldw	r2,8(r18)
  80309c:	1c47883a 	add	r3,r3,r17
  8030a0:	8885883a 	add	r2,r17,r2
  8030a4:	19000017 	ldw	r4,0(r3)
  8030a8:	11400017 	ldw	r5,0(r2)
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
  8030ac:	8c400104 	addi	r17,r17,4
		this->parameters_size[i] = strlen(paras[i]);
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
		this->parameters[i][this->parameters_size[i]] = '\0';
  8030b0:	2149883a 	add	r4,r4,r5
  8030b4:	20000005 	stb	zero,0(r4)
	this->num_of_parameters = num_parameters;
	if(num_parameters == 0 || paras == NULL) return  this;
	this->parameters = (char**)malloc(sizeof(char*)*num_parameters);
	this->parameters_size = (int*)malloc(sizeof(int)*num_parameters);
	int i ;
	for( i = 0; i < num_parameters; i++) {
  8030b8:	ad3fe21e 	bne	r21,r20,803044 <initCmd+0x78>
		this->parameters[i] = (char*)malloc(sizeof(char)*(this->parameters_size[i]+1));
		strncpy(this->parameters[i], paras[i], this->parameters_size[i]);
		this->parameters[i][this->parameters_size[i]] = '\0';
	}
	return this;
}
  8030bc:	9005883a 	mov	r2,r18
  8030c0:	dfc00617 	ldw	ra,24(sp)
  8030c4:	dd400517 	ldw	r21,20(sp)
  8030c8:	dd000417 	ldw	r20,16(sp)
  8030cc:	dcc00317 	ldw	r19,12(sp)
  8030d0:	dc800217 	ldw	r18,8(sp)
  8030d4:	dc400117 	ldw	r17,4(sp)
  8030d8:	dc000017 	ldw	r16,0(sp)
  8030dc:	dec00704 	addi	sp,sp,28
  8030e0:	f800283a 	ret

008030e4 <syncRemoveList>:
void modifyListName(int index, char* new_listname) {
	setListName(db.playlists[index], new_listname);

}
//index 19
void syncRemoveList(int index) {
  8030e4:	defffc04 	addi	sp,sp,-16
  8030e8:	dc400115 	stw	r17,4(sp)
  8030ec:	2023883a 	mov	r17,r4
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8030f0:	01000104 	movi	r4,4
void modifyListName(int index, char* new_listname) {
	setListName(db.playlists[index], new_listname);

}
//index 19
void syncRemoveList(int index) {
  8030f4:	dfc00315 	stw	ra,12(sp)
  8030f8:	dcc00215 	stw	r19,8(sp)
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8030fc:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", index);
  803100:	880d883a 	mov	r6,r17
	struct Command* cmd = initCmd(19, 1, temp);
  803104:	04c00044 	movi	r19,1
}
//index 19
void syncRemoveList(int index) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", index);
  803108:	1009883a 	mov	r4,r2
  80310c:	014020f4 	movhi	r5,131
  803110:	294bac04 	addi	r5,r5,11952

}
//index 19
void syncRemoveList(int index) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803114:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", index);
  803118:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(19, 1, temp);
  80311c:	d80d883a 	mov	r6,sp
  803120:	980b883a 	mov	r5,r19
  803124:	010004c4 	movi	r4,19
  803128:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  80312c:	1009883a 	mov	r4,r2
  803130:	980b883a 	mov	r5,r19
//index 19
void syncRemoveList(int index) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", index);
	struct Command* cmd = initCmd(19, 1, temp);
  803134:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803138:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, cmd);
  80313c:	00c02174 	movhi	r3,133
  803140:	18f37e04 	addi	r3,r3,-12808
  803144:	19001117 	ldw	r4,68(r3)
  803148:	880b883a 	mov	r5,r17
  80314c:	08046700 	call	804670 <addCmd>
	free(temp[0]);
  803150:	d9000017 	ldw	r4,0(sp)
  803154:	08216e80 	call	8216e8 <free>

}
  803158:	dfc00317 	ldw	ra,12(sp)
  80315c:	dcc00217 	ldw	r19,8(sp)
  803160:	dc400117 	ldw	r17,4(sp)
  803164:	dec00404 	addi	sp,sp,16
  803168:	f800283a 	ret

0080316c <syncRepeatList>:
	free(temp[1]);
	free(temp[2]);
}

//index 17
void syncRepeatList(int index) {
  80316c:	defffc04 	addi	sp,sp,-16
  803170:	dc400115 	stw	r17,4(sp)
  803174:	2023883a 	mov	r17,r4
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803178:	01000104 	movi	r4,4
	free(temp[1]);
	free(temp[2]);
}

//index 17
void syncRepeatList(int index) {
  80317c:	dfc00315 	stw	ra,12(sp)
  803180:	dcc00215 	stw	r19,8(sp)
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803184:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", index);
  803188:	880d883a 	mov	r6,r17
	struct Command* cmd = initCmd(17, 1, temp);
  80318c:	04c00044 	movi	r19,1

//index 17
void syncRepeatList(int index) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", index);
  803190:	1009883a 	mov	r4,r2
  803194:	014020f4 	movhi	r5,131
  803198:	294bac04 	addi	r5,r5,11952
}

//index 17
void syncRepeatList(int index) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80319c:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", index);
  8031a0:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(17, 1, temp);
  8031a4:	d80d883a 	mov	r6,sp
  8031a8:	980b883a 	mov	r5,r19
  8031ac:	01000444 	movi	r4,17
  8031b0:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  8031b4:	1009883a 	mov	r4,r2
  8031b8:	980b883a 	mov	r5,r19
//index 17
void syncRepeatList(int index) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", index);
	struct Command* cmd = initCmd(17, 1, temp);
  8031bc:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8031c0:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, cmd);
  8031c4:	00c02174 	movhi	r3,133
  8031c8:	18f37e04 	addi	r3,r3,-12808
  8031cc:	19001117 	ldw	r4,68(r3)
  8031d0:	880b883a 	mov	r5,r17
  8031d4:	08046700 	call	804670 <addCmd>
	free(temp[0]);
  8031d8:	d9000017 	ldw	r4,0(sp)
  8031dc:	08216e80 	call	8216e8 <free>
}
  8031e0:	dfc00317 	ldw	ra,12(sp)
  8031e4:	dcc00217 	ldw	r19,8(sp)
  8031e8:	dc400117 	ldw	r17,4(sp)
  8031ec:	dec00404 	addi	sp,sp,16
  8031f0:	f800283a 	ret

008031f4 <syncSelectList>:

/*
 * Send command to select a list to play
 * index: 11
 */
void syncSelectList(int id) {
  8031f4:	defffc04 	addi	sp,sp,-16
  8031f8:	dc400115 	stw	r17,4(sp)
  8031fc:	2023883a 	mov	r17,r4
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803200:	01000104 	movi	r4,4

/*
 * Send command to select a list to play
 * index: 11
 */
void syncSelectList(int id) {
  803204:	dfc00315 	stw	ra,12(sp)
  803208:	dcc00215 	stw	r19,8(sp)
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80320c:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", id);
  803210:	880d883a 	mov	r6,r17
	struct Command* cmd = initCmd(11, 1, temp);
  803214:	04c00044 	movi	r19,1
 * index: 11
 */
void syncSelectList(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
  803218:	1009883a 	mov	r4,r2
  80321c:	014020f4 	movhi	r5,131
  803220:	294bac04 	addi	r5,r5,11952
 * Send command to select a list to play
 * index: 11
 */
void syncSelectList(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803224:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", id);
  803228:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(11, 1, temp);
  80322c:	d80d883a 	mov	r6,sp
  803230:	980b883a 	mov	r5,r19
  803234:	010002c4 	movi	r4,11
  803238:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  80323c:	1009883a 	mov	r4,r2
  803240:	980b883a 	mov	r5,r19
 */
void syncSelectList(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	struct Command* cmd = initCmd(11, 1, temp);
  803244:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803248:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, cmd);
  80324c:	00c02174 	movhi	r3,133
  803250:	18f37e04 	addi	r3,r3,-12808
  803254:	19001117 	ldw	r4,68(r3)
  803258:	880b883a 	mov	r5,r17
  80325c:	08046700 	call	804670 <addCmd>
	free(temp[0]);
  803260:	d9000017 	ldw	r4,0(sp)
  803264:	08216e80 	call	8216e8 <free>
}
  803268:	dfc00317 	ldw	ra,12(sp)
  80326c:	dcc00217 	ldw	r19,8(sp)
  803270:	dc400117 	ldw	r17,4(sp)
  803274:	dec00404 	addi	sp,sp,16
  803278:	f800283a 	ret

0080327c <syncCreatePlaylist>:

/*
 * send command to a create playlist on android side
 * index: 8
 */
void syncCreatePlaylist(char* list_name) {
  80327c:	defffc04 	addi	sp,sp,-16
  803280:	dcc00215 	stw	r19,8(sp)
	char* temp[1];
	temp[0] = list_name;
	struct Command* cmd = initCmd(8, 1, temp);
  803284:	04c00044 	movi	r19,1
  803288:	d80d883a 	mov	r6,sp
 * send command to a create playlist on android side
 * index: 8
 */
void syncCreatePlaylist(char* list_name) {
	char* temp[1];
	temp[0] = list_name;
  80328c:	d9000015 	stw	r4,0(sp)
	struct Command* cmd = initCmd(8, 1, temp);
  803290:	980b883a 	mov	r5,r19
  803294:	01000204 	movi	r4,8

/*
 * send command to a create playlist on android side
 * index: 8
 */
void syncCreatePlaylist(char* list_name) {
  803298:	dfc00315 	stw	ra,12(sp)
  80329c:	dc400115 	stw	r17,4(sp)
	char* temp[1];
	temp[0] = list_name;
	struct Command* cmd = initCmd(8, 1, temp);
  8032a0:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  8032a4:	1009883a 	mov	r4,r2
  8032a8:	980b883a 	mov	r5,r19
 * index: 8
 */
void syncCreatePlaylist(char* list_name) {
	char* temp[1];
	temp[0] = list_name;
	struct Command* cmd = initCmd(8, 1, temp);
  8032ac:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8032b0:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, cmd);
  8032b4:	00c02174 	movhi	r3,133
  8032b8:	18f37e04 	addi	r3,r3,-12808
  8032bc:	19001117 	ldw	r4,68(r3)
  8032c0:	880b883a 	mov	r5,r17
  8032c4:	08046700 	call	804670 <addCmd>
}
  8032c8:	dfc00317 	ldw	ra,12(sp)
  8032cc:	dcc00217 	ldw	r19,8(sp)
  8032d0:	dc400117 	ldw	r17,4(sp)
  8032d4:	dec00404 	addi	sp,sp,16
  8032d8:	f800283a 	ret

008032dc <syncSetVol>:
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
}

void syncSetVol(int id, int vol) {
  8032dc:	defff904 	addi	sp,sp,-28
  8032e0:	dcc00315 	stw	r19,12(sp)
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8032e4:	04c00104 	movi	r19,4
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
}

void syncSetVol(int id, int vol) {
  8032e8:	dd400415 	stw	r21,16(sp)
  8032ec:	202b883a 	mov	r21,r4
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8032f0:	9809883a 	mov	r4,r19
	}
	db.curr_song_id = 0;
	printf("Music has stopped.\n");
}

void syncSetVol(int id, int vol) {
  8032f4:	dfc00615 	stw	ra,24(sp)
  8032f8:	ddc00515 	stw	r23,20(sp)
  8032fc:	dc400215 	stw	r17,8(sp)
  803300:	282f883a 	mov	r23,r5
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803304:	08216fc0 	call	8216fc <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  803308:	9809883a 	mov	r4,r19
	printf("Music has stopped.\n");
}

void syncSetVol(int id, int vol) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80330c:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  803310:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", id);
  803314:	d9000017 	ldw	r4,0(sp)
  803318:	044020f4 	movhi	r17,131
  80331c:	8c4bac04 	addi	r17,r17,11952
  803320:	a80d883a 	mov	r6,r21
  803324:	880b883a 	mov	r5,r17
}

void syncSetVol(int id, int vol) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  803328:	d8800115 	stw	r2,4(sp)
	sprintf(temp[0], "%d", id);
  80332c:	0822b640 	call	822b64 <sprintf>
	sprintf(temp[1], "%d", vol);
  803330:	d9000117 	ldw	r4,4(sp)
  803334:	880b883a 	mov	r5,r17
  803338:	b80d883a 	mov	r6,r23
  80333c:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(4, 2, temp);
  803340:	d80d883a 	mov	r6,sp
  803344:	9809883a 	mov	r4,r19
  803348:	01400084 	movi	r5,2
  80334c:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  803350:	1009883a 	mov	r4,r2
  803354:	01400044 	movi	r5,1
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	sprintf(temp[1], "%d", vol);
	struct Command* cmd = initCmd(4, 2, temp);
  803358:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  80335c:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, cmd);
  803360:	00c02174 	movhi	r3,133
  803364:	18f37e04 	addi	r3,r3,-12808
  803368:	19001117 	ldw	r4,68(r3)
  80336c:	880b883a 	mov	r5,r17
  803370:	08046700 	call	804670 <addCmd>
	free(temp[0]);
  803374:	d9000017 	ldw	r4,0(sp)
  803378:	08216e80 	call	8216e8 <free>
	free(temp[1]);
  80337c:	d9000117 	ldw	r4,4(sp)
  803380:	08216e80 	call	8216e8 <free>
}
  803384:	dfc00617 	ldw	ra,24(sp)
  803388:	ddc00517 	ldw	r23,20(sp)
  80338c:	dd400417 	ldw	r21,16(sp)
  803390:	dcc00317 	ldw	r19,12(sp)
  803394:	dc400217 	ldw	r17,8(sp)
  803398:	dec00704 	addi	sp,sp,28
  80339c:	f800283a 	ret

008033a0 <syncStop>:
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
  8033a0:	defffe04 	addi	sp,sp,-8
	struct Command* cmd = initCmd(3, 0, NULL);
  8033a4:	000d883a 	mov	r6,zero
  8033a8:	000b883a 	mov	r5,zero
  8033ac:	010000c4 	movi	r4,3
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
  8033b0:	dfc00115 	stw	ra,4(sp)
  8033b4:	dc400015 	stw	r17,0(sp)
	struct Command* cmd = initCmd(3, 0, NULL);
  8033b8:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  8033bc:	1009883a 	mov	r4,r2
  8033c0:	01400044 	movi	r5,1
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8033c4:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8033c8:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  8033cc:	00c02174 	movhi	r3,133
  8033d0:	18f37e04 	addi	r3,r3,-12808
  8033d4:	19001117 	ldw	r4,68(r3)
  8033d8:	880b883a 	mov	r5,r17
}
  8033dc:	dfc00117 	ldw	ra,4(sp)
  8033e0:	dc400017 	ldw	r17,0(sp)
  8033e4:	dec00204 	addi	sp,sp,8
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
  8033e8:	08046701 	jmpi	804670 <addCmd>

008033ec <syncPause>:
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPause(int id) {
  8033ec:	defffc04 	addi	sp,sp,-16
  8033f0:	dc400115 	stw	r17,4(sp)
  8033f4:	2023883a 	mov	r17,r4
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8033f8:	01000104 	movi	r4,4
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPause(int id) {
  8033fc:	dfc00315 	stw	ra,12(sp)
  803400:	dcc00215 	stw	r19,8(sp)
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803404:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", id);
  803408:	880d883a 	mov	r6,r17
	struct Command* cmd = initCmd(2, 1, temp);
  80340c:	04c00044 	movi	r19,1
 * It will also put command to scheduler
 */
void syncPause(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
  803410:	1009883a 	mov	r4,r2
  803414:	014020f4 	movhi	r5,131
  803418:	294bac04 	addi	r5,r5,11952
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPause(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80341c:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", id);
  803420:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(2, 1, temp);
  803424:	d80d883a 	mov	r6,sp
  803428:	980b883a 	mov	r5,r19
  80342c:	01000084 	movi	r4,2
  803430:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  803434:	1009883a 	mov	r4,r2
  803438:	980b883a 	mov	r5,r19
 */
void syncPause(int id) {
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	struct Command* cmd = initCmd(2, 1, temp);
  80343c:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803440:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  803444:	00c02174 	movhi	r3,133
  803448:	18f37e04 	addi	r3,r3,-12808
  80344c:	19001117 	ldw	r4,68(r3)
  803450:	880b883a 	mov	r5,r17
  803454:	08046700 	call	804670 <addCmd>
	free(temp[0]);
  803458:	d9000017 	ldw	r4,0(sp)
  80345c:	08216e80 	call	8216e8 <free>
}
  803460:	dfc00317 	ldw	ra,12(sp)
  803464:	dcc00217 	ldw	r19,8(sp)
  803468:	dc400117 	ldw	r17,4(sp)
  80346c:	dec00404 	addi	sp,sp,16
  803470:	f800283a 	ret

00803474 <syncPlay>:
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
  803474:	defff804 	addi	sp,sp,-32
  803478:	dc400315 	stw	r17,12(sp)
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  80347c:	04400104 	movi	r17,4
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
  803480:	dcc00415 	stw	r19,16(sp)
  803484:	2027883a 	mov	r19,r4
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803488:	8809883a 	mov	r4,r17
}
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
  80348c:	dfc00715 	stw	ra,28(sp)
  803490:	ddc00615 	stw	r23,24(sp)
  803494:	dd400515 	stw	r21,20(sp)
  803498:	302f883a 	mov	r23,r6
  80349c:	282b883a 	mov	r21,r5
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8034a0:	08216fc0 	call	8216fc <malloc>
	temp[1] = (char*)malloc(sizeof(char)*8);
  8034a4:	01000204 	movi	r4,8
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8034a8:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*8);
  8034ac:	08216fc0 	call	8216fc <malloc>
	temp[2] = (char*)malloc(sizeof(char)*4);
  8034b0:	8809883a 	mov	r4,r17
 * It will also put command to scheduler
 */
void syncPlay(int id, int vol, int pos) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*8);
  8034b4:	d8800115 	stw	r2,4(sp)
	temp[2] = (char*)malloc(sizeof(char)*4);
  8034b8:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", id);
  8034bc:	d9000017 	ldw	r4,0(sp)
  8034c0:	044020f4 	movhi	r17,131
  8034c4:	8c4bac04 	addi	r17,r17,11952
  8034c8:	980d883a 	mov	r6,r19
  8034cc:	880b883a 	mov	r5,r17
 */
void syncPlay(int id, int vol, int pos) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*8);
	temp[2] = (char*)malloc(sizeof(char)*4);
  8034d0:	d8800215 	stw	r2,8(sp)
	sprintf(temp[0], "%d", id);
  8034d4:	0822b640 	call	822b64 <sprintf>
	sprintf(temp[1], "%d", vol);
  8034d8:	d9000117 	ldw	r4,4(sp)
  8034dc:	a80d883a 	mov	r6,r21
  8034e0:	880b883a 	mov	r5,r17
  8034e4:	0822b640 	call	822b64 <sprintf>
	sprintf(temp[2], "%d", pos);
  8034e8:	d9000217 	ldw	r4,8(sp)
  8034ec:	880b883a 	mov	r5,r17
  8034f0:	b80d883a 	mov	r6,r23
	struct Command* cmd = initCmd(1, 3, temp);
  8034f4:	04c00044 	movi	r19,1
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*8);
	temp[2] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	sprintf(temp[1], "%d", vol);
	sprintf(temp[2], "%d", pos);
  8034f8:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(1, 3, temp);
  8034fc:	d80d883a 	mov	r6,sp
  803500:	9809883a 	mov	r4,r19
  803504:	014000c4 	movi	r5,3
  803508:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  80350c:	1009883a 	mov	r4,r2
  803510:	980b883a 	mov	r5,r19
	temp[1] = (char*)malloc(sizeof(char)*8);
	temp[2] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", id);
	sprintf(temp[1], "%d", vol);
	sprintf(temp[2], "%d", pos);
	struct Command* cmd = initCmd(1, 3, temp);
  803514:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803518:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  80351c:	00c02174 	movhi	r3,133
  803520:	18f37e04 	addi	r3,r3,-12808
  803524:	19001117 	ldw	r4,68(r3)
  803528:	880b883a 	mov	r5,r17
  80352c:	08046700 	call	804670 <addCmd>
	free(temp[0]);
  803530:	d9000017 	ldw	r4,0(sp)
  803534:	08216e80 	call	8216e8 <free>
	free(temp[1]);
  803538:	d9000117 	ldw	r4,4(sp)
  80353c:	08216e80 	call	8216e8 <free>
	free(temp[2]);
  803540:	d9000217 	ldw	r4,8(sp)
  803544:	08216e80 	call	8216e8 <free>
}
  803548:	dfc00717 	ldw	ra,28(sp)
  80354c:	ddc00617 	ldw	r23,24(sp)
  803550:	dd400517 	ldw	r21,20(sp)
  803554:	dcc00417 	ldw	r19,16(sp)
  803558:	dc400317 	ldw	r17,12(sp)
  80355c:	dec00804 	addi	sp,sp,32
  803560:	f800283a 	ret

00803564 <next>:
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}
//index 6
void next(int song_id) {
  803564:	defffd04 	addi	sp,sp,-12
  803568:	dc400115 	stw	r17,4(sp)
  80356c:	2023883a 	mov	r17,r4
	int id = 0;
	printf("Next song is selected.\n");
  803570:	010020f4 	movhi	r4,131
  803574:	210c7904 	addi	r4,r4,12772
	send(cmd, CMD);
	addCmd(com.scheduler, cmd);
	free(temp[0]);
}
//index 6
void next(int song_id) {
  803578:	dfc00215 	stw	ra,8(sp)
  80357c:	dc000015 	stw	r16,0(sp)
	int id = 0;
	printf("Next song is selected.\n");
  803580:	08221800 	call	822180 <puts>
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
  803584:	01c02134 	movhi	r7,132
  803588:	39ca6204 	addi	r7,r7,10632
  80358c:	39403417 	ldw	r5,208(r7)
		id = song_id+1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		if(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0)
  803590:	29801964 	muli	r6,r5,101
}
//index 6
void next(int song_id) {
	int id = 0;
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
  803594:	28000f1e 	bne	r5,zero,8035d4 <next+0x70>
		id = song_id+1;
  803598:	8c000044 	addi	r16,r17,1
}
//index 6
void next(int song_id) {
	int id = 0;
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
  80359c:	38c0a717 	ldw	r3,668(r7)
	} printf("Playlist %d is removed.\n", index);
}

//index 20
void playSongFromAllSongs(int id, int vol, int pos) {
	playSongsFromSongPanel(id, vol, pos);
  8035a0:	8405883a 	add	r2,r16,r16
  8035a4:	1085883a 	add	r2,r2,r2
  8035a8:	11c5883a 	add	r2,r2,r7
  8035ac:	8009883a 	mov	r4,r16
  8035b0:	000d883a 	mov	r6,zero
}
//index 6
void next(int song_id) {
	int id = 0;
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
  8035b4:	88c02c16 	blt	r17,r3,803668 <next+0x104>

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
  8035b8:	010020f4 	movhi	r4,131
  8035bc:	210c7f04 	addi	r4,r4,12796
}
  8035c0:	dfc00217 	ldw	ra,8(sp)
  8035c4:	dc400117 	ldw	r17,4(sp)
  8035c8:	dc000017 	ldw	r16,0(sp)
  8035cc:	dec00304 	addi	sp,sp,12

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
  8035d0:	08221801 	jmpi	822180 <puts>
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
		id = song_id+1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		if(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0)
  8035d4:	3445883a 	add	r2,r6,r17
  8035d8:	1085883a 	add	r2,r2,r2
  8035dc:	1085883a 	add	r2,r2,r2
  8035e0:	11c5883a 	add	r2,r2,r7
  8035e4:	10c0a817 	ldw	r3,672(r2)
			id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1];
		else if(db.isListRepeated == 1)
  8035e8:	01291b14 	movui	r4,42092
  8035ec:	3911883a 	add	r8,r7,r4
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
		id = song_id+1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		if(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0)
  8035f0:	30c7883a 	add	r3,r6,r3
  8035f4:	18c7883a 	add	r3,r3,r3
  8035f8:	18c7883a 	add	r3,r3,r3
  8035fc:	19c7883a 	add	r3,r3,r7
  803600:	1914c817 	ldw	r4,21280(r3)
			id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1];
		else if(db.isListRepeated == 1)
			id = db.index_list_order[db.curr_playlist_id][1];

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
  803604:	000d883a 	mov	r6,zero
	printf("Next song is selected.\n");
	if(db.curr_playlist_id == 0 && song_id < db.num_of_songs) {
		id = song_id+1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		if(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0)
  803608:	20000d26 	beq	r4,zero,803640 <next+0xdc>
			id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1];
		else if(db.isListRepeated == 1)
			id = db.index_list_order[db.curr_playlist_id][1];

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
  80360c:	2105883a 	add	r2,r4,r4
  803610:	1085883a 	add	r2,r2,r2
  803614:	11c5883a 	add	r2,r2,r7
  803618:	10c03617 	ldw	r3,216(r2)
  80361c:	19400717 	ldw	r5,28(r3)
  803620:	08034740 	call	803474 <syncPlay>
	}

	printf("Next song is played.\n");
  803624:	010020f4 	movhi	r4,131
  803628:	210c7f04 	addi	r4,r4,12796
}
  80362c:	dfc00217 	ldw	ra,8(sp)
  803630:	dc400117 	ldw	r17,4(sp)
  803634:	dc000017 	ldw	r16,0(sp)
  803638:	dec00304 	addi	sp,sp,12

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
  80363c:	08221801 	jmpi	822180 <puts>
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		if(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0)
			id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1];
		else if(db.isListRepeated == 1)
			id = db.index_list_order[db.curr_playlist_id][1];
  803640:	28806524 	muli	r2,r5,404
		id = song_id+1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		if(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0)
			id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1];
		else if(db.isListRepeated == 1)
  803644:	41000017 	ldw	r4,0(r8)
  803648:	00c00044 	movi	r3,1
			id = db.index_list_order[db.curr_playlist_id][1];
  80364c:	11c5883a 	add	r2,r2,r7
		id = song_id+1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		if(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0)
			id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1];
		else if(db.isListRepeated == 1)
  803650:	20c01326 	beq	r4,r3,8036a0 <next+0x13c>
		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
}
  803654:	dfc00217 	ldw	ra,8(sp)
  803658:	dc400117 	ldw	r17,4(sp)
  80365c:	dc000017 	ldw	r16,0(sp)
  803660:	dec00304 	addi	sp,sp,12
  803664:	f800283a 	ret
	} printf("Playlist %d is removed.\n", index);
}

//index 20
void playSongFromAllSongs(int id, int vol, int pos) {
	playSongsFromSongPanel(id, vol, pos);
  803668:	10803617 	ldw	r2,216(r2)
  80366c:	11400717 	ldw	r5,28(r2)
  803670:	08016140 	call	801614 <playSongsFromSongPanel>
	printf("play song %d from all song panel\n", id);
  803674:	800b883a 	mov	r5,r16
  803678:	010020f4 	movhi	r4,131
  80367c:	210c4104 	addi	r4,r4,12548
  803680:	08220680 	call	822068 <printf>

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
  803684:	010020f4 	movhi	r4,131
  803688:	210c7f04 	addi	r4,r4,12796
}
  80368c:	dfc00217 	ldw	ra,8(sp)
  803690:	dc400117 	ldw	r17,4(sp)
  803694:	dc000017 	ldw	r16,0(sp)
  803698:	dec00304 	addi	sp,sp,12

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
  80369c:	08221801 	jmpi	822180 <puts>
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		if(db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1] != 0)
			id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]+1];
		else if(db.isListRepeated == 1)
			id = db.index_list_order[db.curr_playlist_id][1];
  8036a0:	1114c817 	ldw	r4,21280(r2)

		if(id == 0) return;
  8036a4:	203fd91e 	bne	r4,zero,80360c <next+0xa8>
  8036a8:	003fea06 	br	803654 <next+0xf0>

008036ac <prev>:
	addCmd(com.scheduler, cmd);
	free(temp[0]);

}
//index 7
void prev(int song_id) {
  8036ac:	defffd04 	addi	sp,sp,-12
  8036b0:	dc400115 	stw	r17,4(sp)
  8036b4:	2023883a 	mov	r17,r4
	printf("Previous song is selected.\n");
  8036b8:	010020f4 	movhi	r4,131
  8036bc:	210c8504 	addi	r4,r4,12820
	addCmd(com.scheduler, cmd);
	free(temp[0]);

}
//index 7
void prev(int song_id) {
  8036c0:	dfc00215 	stw	ra,8(sp)
  8036c4:	dc000015 	stw	r16,0(sp)
	printf("Previous song is selected.\n");
  8036c8:	08221800 	call	822180 <puts>
	int id = 0;
	if(db.curr_playlist_id == 0 && song_id > 1) {
  8036cc:	01c02134 	movhi	r7,132
  8036d0:	39ca6204 	addi	r7,r7,10632
  8036d4:	38803417 	ldw	r2,208(r7)
		id = song_id-1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1];
  8036d8:	11001964 	muli	r4,r2,101
}
//index 7
void prev(int song_id) {
	printf("Previous song is selected.\n");
	int id = 0;
	if(db.curr_playlist_id == 0 && song_id > 1) {
  8036dc:	1000161e 	bne	r2,zero,803738 <prev+0x8c>
		id = song_id-1;
  8036e0:	8c3fffc4 	addi	r16,r17,-1
	} printf("Playlist %d is removed.\n", index);
}

//index 20
void playSongFromAllSongs(int id, int vol, int pos) {
	playSongsFromSongPanel(id, vol, pos);
  8036e4:	8405883a 	add	r2,r16,r16
  8036e8:	1085883a 	add	r2,r2,r2
  8036ec:	11c7883a 	add	r3,r2,r7
}
//index 7
void prev(int song_id) {
	printf("Previous song is selected.\n");
	int id = 0;
	if(db.curr_playlist_id == 0 && song_id > 1) {
  8036f0:	00800044 	movi	r2,1
	} printf("Playlist %d is removed.\n", index);
}

//index 20
void playSongFromAllSongs(int id, int vol, int pos) {
	playSongsFromSongPanel(id, vol, pos);
  8036f4:	8009883a 	mov	r4,r16
  8036f8:	000d883a 	mov	r6,zero
}
//index 7
void prev(int song_id) {
	printf("Previous song is selected.\n");
	int id = 0;
	if(db.curr_playlist_id == 0 && song_id > 1) {
  8036fc:	1440070e 	bge	r2,r17,80371c <prev+0x70>
	} printf("Playlist %d is removed.\n", index);
}

//index 20
void playSongFromAllSongs(int id, int vol, int pos) {
	playSongsFromSongPanel(id, vol, pos);
  803700:	18803617 	ldw	r2,216(r3)
  803704:	11400717 	ldw	r5,28(r2)
  803708:	08016140 	call	801614 <playSongsFromSongPanel>
	printf("play song %d from all song panel\n", id);
  80370c:	800b883a 	mov	r5,r16
  803710:	010020f4 	movhi	r4,131
  803714:	210c4104 	addi	r4,r4,12548
  803718:	08220680 	call	822068 <printf>

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Previous song is played.\n");
  80371c:	010020f4 	movhi	r4,131
  803720:	210c8c04 	addi	r4,r4,12848
}
  803724:	dfc00217 	ldw	ra,8(sp)
  803728:	dc400117 	ldw	r17,4(sp)
  80372c:	dc000017 	ldw	r16,0(sp)
  803730:	dec00304 	addi	sp,sp,12

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Previous song is played.\n");
  803734:	08221801 	jmpi	822180 <puts>
	int id = 0;
	if(db.curr_playlist_id == 0 && song_id > 1) {
		id = song_id-1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1];
  803738:	2445883a 	add	r2,r4,r17
  80373c:	1085883a 	add	r2,r2,r2
  803740:	1085883a 	add	r2,r2,r2
  803744:	11c5883a 	add	r2,r2,r7
  803748:	10c0a817 	ldw	r3,672(r2)

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
  80374c:	000d883a 	mov	r6,zero
	int id = 0;
	if(db.curr_playlist_id == 0 && song_id > 1) {
		id = song_id-1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1];
  803750:	20c7883a 	add	r3,r4,r3
  803754:	18c7883a 	add	r3,r3,r3
  803758:	18c7883a 	add	r3,r3,r3
  80375c:	19c7883a 	add	r3,r3,r7
  803760:	1954c617 	ldw	r5,21272(r3)

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
  803764:	2945883a 	add	r2,r5,r5
  803768:	1085883a 	add	r2,r2,r2
  80376c:	11c5883a 	add	r2,r2,r7
  803770:	2809883a 	mov	r4,r5
		id = song_id-1;
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1];

		if(id == 0) return;
  803774:	2800051e 	bne	r5,zero,80378c <prev+0xe0>
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Previous song is played.\n");
}
  803778:	dfc00217 	ldw	ra,8(sp)
  80377c:	dc400117 	ldw	r17,4(sp)
  803780:	dc000017 	ldw	r16,0(sp)
  803784:	dec00304 	addi	sp,sp,12
  803788:	f800283a 	ret
		playSongFromAllSongs(id, db.songs[id]->volume, 0);
	} else if(db.curr_playlist_id != 0) {
		id = db.index_list_order[db.curr_playlist_id][db.index_list_song[db.curr_playlist_id][song_id]-1];

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
  80378c:	10803617 	ldw	r2,216(r2)
  803790:	11400717 	ldw	r5,28(r2)
  803794:	08034740 	call	803474 <syncPlay>
	}

	printf("Previous song is played.\n");
  803798:	010020f4 	movhi	r4,131
  80379c:	210c8c04 	addi	r4,r4,12848
}
  8037a0:	dfc00217 	ldw	ra,8(sp)
  8037a4:	dc400117 	ldw	r17,4(sp)
  8037a8:	dc000017 	ldw	r16,0(sp)
  8037ac:	dec00304 	addi	sp,sp,12

		if(id == 0) return;
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Previous song is played.\n");
  8037b0:	08221801 	jmpi	822180 <puts>

008037b4 <syncNext>:
}

void seek(int pos) {
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
  8037b4:	defffa04 	addi	sp,sp,-24
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8037b8:	000d883a 	mov	r6,zero
}

void seek(int pos) {
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
  8037bc:	dd800415 	stw	r22,16(sp)
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8037c0:	000b883a 	mov	r5,zero
}

void seek(int pos) {
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
  8037c4:	202d883a 	mov	r22,r4
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8037c8:	010000c4 	movi	r4,3
}

void seek(int pos) {
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
  8037cc:	dfc00515 	stw	ra,20(sp)
  8037d0:	dd000315 	stw	r20,12(sp)
  8037d4:	dcc00215 	stw	r19,8(sp)
  8037d8:	dc400115 	stw	r17,4(sp)
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
  8037dc:	04c00044 	movi	r19,1
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8037e0:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
  8037e4:	05002174 	movhi	r20,133
  8037e8:	a5337e04 	addi	r20,r20,-12808
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
  8037ec:	980b883a 	mov	r5,r19
  8037f0:	1009883a 	mov	r4,r2
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8037f4:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8037f8:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  8037fc:	a1001117 	ldw	r4,68(r20)
  803800:	880b883a 	mov	r5,r17
  803804:	08046700 	call	804670 <addCmd>
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803808:	01000104 	movi	r4,4
  80380c:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", song_id);
  803810:	b00d883a 	mov	r6,r22
  803814:	1009883a 	mov	r4,r2
  803818:	014020f4 	movhi	r5,131
  80381c:	294bac04 	addi	r5,r5,11952
	printf("Seek is set to %d\n", pos);
}
void syncNext(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803820:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", song_id);
  803824:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(6, 1, temp);
  803828:	d80d883a 	mov	r6,sp
  80382c:	980b883a 	mov	r5,r19
  803830:	01000184 	movi	r4,6
  803834:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  803838:	1009883a 	mov	r4,r2
  80383c:	980b883a 	mov	r5,r19
void syncNext(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", song_id);
	struct Command* cmd = initCmd(6, 1, temp);
  803840:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803844:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, cmd);
  803848:	a1001117 	ldw	r4,68(r20)
  80384c:	880b883a 	mov	r5,r17
  803850:	08046700 	call	804670 <addCmd>
	free(temp[0]);
  803854:	d9000017 	ldw	r4,0(sp)
  803858:	08216e80 	call	8216e8 <free>
}
  80385c:	dfc00517 	ldw	ra,20(sp)
  803860:	dd800417 	ldw	r22,16(sp)
  803864:	dd000317 	ldw	r20,12(sp)
  803868:	dcc00217 	ldw	r19,8(sp)
  80386c:	dc400117 	ldw	r17,4(sp)
  803870:	dec00604 	addi	sp,sp,24
  803874:	f800283a 	ret

00803878 <syncPrev>:
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
}
void syncPrev(int song_id) {
  803878:	defffa04 	addi	sp,sp,-24
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  80387c:	000d883a 	mov	r6,zero
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
}
void syncPrev(int song_id) {
  803880:	dd800415 	stw	r22,16(sp)
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  803884:	000b883a 	mov	r5,zero
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
}
void syncPrev(int song_id) {
  803888:	202d883a 	mov	r22,r4
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  80388c:	010000c4 	movi	r4,3
		syncPlay(id, db.songs[id]->volume, 0);
	}

	printf("Next song is played.\n");
}
void syncPrev(int song_id) {
  803890:	dfc00515 	stw	ra,20(sp)
  803894:	dd000315 	stw	r20,12(sp)
  803898:	dcc00215 	stw	r19,8(sp)
  80389c:	dc400115 	stw	r17,4(sp)
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
  8038a0:	04c00044 	movi	r19,1
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8038a4:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
	addCmd(com.scheduler, (struct Command*)cmd);
  8038a8:	05002174 	movhi	r20,133
  8038ac:	a5337e04 	addi	r20,r20,-12808
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
	send(cmd, CMD);
  8038b0:	980b883a 	mov	r5,r19
  8038b4:	1009883a 	mov	r4,r2
/*
 * Function to call when need to sync with Android
 * It will also put command to scheduler
 */
void syncStop() {
	struct Command* cmd = initCmd(3, 0, NULL);
  8038b8:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8038bc:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, (struct Command*)cmd);
  8038c0:	a1001117 	ldw	r4,68(r20)
  8038c4:	880b883a 	mov	r5,r17
  8038c8:	08046700 	call	804670 <addCmd>
	printf("Next song is played.\n");
}
void syncPrev(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8038cc:	01000104 	movi	r4,4
  8038d0:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", song_id);
  8038d4:	b00d883a 	mov	r6,r22
  8038d8:	1009883a 	mov	r4,r2
  8038dc:	014020f4 	movhi	r5,131
  8038e0:	294bac04 	addi	r5,r5,11952
	printf("Next song is played.\n");
}
void syncPrev(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
  8038e4:	d8800015 	stw	r2,0(sp)
	sprintf(temp[0], "%d", song_id);
  8038e8:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(7, 1, temp);
  8038ec:	d80d883a 	mov	r6,sp
  8038f0:	980b883a 	mov	r5,r19
  8038f4:	010001c4 	movi	r4,7
  8038f8:	0802fcc0 	call	802fcc <initCmd>
	send(cmd, CMD);
  8038fc:	1009883a 	mov	r4,r2
  803900:	980b883a 	mov	r5,r19
void syncPrev(int song_id) {
	syncStop();
	char* temp[1];
	temp[0] = (char*)malloc(sizeof(char)*4);
	sprintf(temp[0], "%d", song_id);
	struct Command* cmd = initCmd(7, 1, temp);
  803904:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803908:	080bb980 	call	80bb98 <send>
	addCmd(com.scheduler, cmd);
  80390c:	a1001117 	ldw	r4,68(r20)
  803910:	880b883a 	mov	r5,r17
  803914:	08046700 	call	804670 <addCmd>
	free(temp[0]);
  803918:	d9000017 	ldw	r4,0(sp)
  80391c:	08216e80 	call	8216e8 <free>

}
  803920:	dfc00517 	ldw	ra,20(sp)
  803924:	dd800417 	ldw	r22,16(sp)
  803928:	dd000317 	ldw	r20,12(sp)
  80392c:	dcc00217 	ldw	r19,8(sp)
  803930:	dc400117 	ldw	r17,4(sp)
  803934:	dec00604 	addi	sp,sp,24
  803938:	f800283a 	ret

0080393c <syncUpdatePos>:
	db.index_list_song[list_id][song_id] = 0;
	db.playlists[list_id]->num_of_songs--;
}

//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
  80393c:	defff904 	addi	sp,sp,-28
  803940:	dc400315 	stw	r17,12(sp)
  803944:	2023883a 	mov	r17,r4
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803948:	01000104 	movi	r4,4
	db.index_list_song[list_id][song_id] = 0;
	db.playlists[list_id]->num_of_songs--;
}

//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
  80394c:	dfc00615 	stw	ra,24(sp)
  803950:	dd400515 	stw	r21,20(sp)
  803954:	dcc00415 	stw	r19,16(sp)
  803958:	302b883a 	mov	r21,r6
  80395c:	2827883a 	mov	r19,r5
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803960:	08216fc0 	call	8216fc <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  803964:	01000104 	movi	r4,4
}

//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803968:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  80396c:	08216fc0 	call	8216fc <malloc>
	temp[2] = (char*)malloc(sizeof(char)*4);
  803970:	01000104 	movi	r4,4

//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  803974:	d8800115 	stw	r2,4(sp)
	temp[2] = (char*)malloc(sizeof(char)*4);
  803978:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", song_id);
  80397c:	d9000017 	ldw	r4,0(sp)
  803980:	880d883a 	mov	r6,r17
  803984:	014020f4 	movhi	r5,131
  803988:	294bac04 	addi	r5,r5,11952
//index 16
void syncUpdatePos(int song_id, int pos, int isStart) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
	temp[2] = (char*)malloc(sizeof(char)*4);
  80398c:	d8800215 	stw	r2,8(sp)
	sprintf(temp[0], "%d", song_id);
  803990:	0822b640 	call	822b64 <sprintf>
	sprintf(temp[1], "%d", pos);
  803994:	d9000117 	ldw	r4,4(sp)
  803998:	980d883a 	mov	r6,r19
  80399c:	014020f4 	movhi	r5,131
  8039a0:	294bac04 	addi	r5,r5,11952
  8039a4:	0822b640 	call	822b64 <sprintf>
	sprintf(temp[2], "%d", isStart);
  8039a8:	d9000217 	ldw	r4,8(sp)
  8039ac:	a80d883a 	mov	r6,r21
  8039b0:	014020f4 	movhi	r5,131
  8039b4:	294bac04 	addi	r5,r5,11952
  8039b8:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(16, 3, temp);
  8039bc:	014000c4 	movi	r5,3
  8039c0:	d80d883a 	mov	r6,sp
  8039c4:	01000404 	movi	r4,16
  8039c8:	0802fcc0 	call	802fcc <initCmd>
  8039cc:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  8039d0:	1009883a 	mov	r4,r2
  8039d4:	01400044 	movi	r5,1
  8039d8:	080bb980 	call	80bb98 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  8039dc:	88c00117 	ldw	r3,4(r17)
  8039e0:	18000e1e 	bne	r3,zero,803a1c <syncUpdatePos+0xe0>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  8039e4:	8809883a 	mov	r4,r17
  8039e8:	08216e80 	call	8216e8 <free>
	sprintf(temp[1], "%d", pos);
	sprintf(temp[2], "%d", isStart);
	struct Command* cmd = initCmd(16, 3, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  8039ec:	d9000017 	ldw	r4,0(sp)
  8039f0:	08216e80 	call	8216e8 <free>
	free(temp[1]);
  8039f4:	d9000117 	ldw	r4,4(sp)
  8039f8:	08216e80 	call	8216e8 <free>
	free(temp[2]);
  8039fc:	d9000217 	ldw	r4,8(sp)
  803a00:	08216e80 	call	8216e8 <free>
}
  803a04:	dfc00617 	ldw	ra,24(sp)
  803a08:	dd400517 	ldw	r21,20(sp)
  803a0c:	dcc00417 	ldw	r19,16(sp)
  803a10:	dc400317 	ldw	r17,12(sp)
  803a14:	dec00704 	addi	sp,sp,28
  803a18:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  803a1c:	89000217 	ldw	r4,8(r17)
  803a20:	08216e80 	call	8216e8 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803a24:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  803a28:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803a2c:	0080100e 	bge	zero,r2,803a70 <syncUpdatePos+0x134>
  803a30:	89000317 	ldw	r4,12(r17)
  803a34:	002b883a 	mov	r21,zero
  803a38:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  803a3c:	9905883a 	add	r2,r19,r4
  803a40:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803a44:	ad400044 	addi	r21,r21,1
			free((*this)->parameters[i]);
  803a48:	08216e80 	call	8216e8 <free>
			(*this)->parameters[i] = NULL;
  803a4c:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803a50:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  803a54:	9905883a 	add	r2,r19,r4
  803a58:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803a5c:	9cc00104 	addi	r19,r19,4
  803a60:	a8fff616 	blt	r21,r3,803a3c <syncUpdatePos+0x100>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  803a64:	08216e80 	call	8216e8 <free>
		(*this)->parameters = NULL;
  803a68:	88000315 	stw	zero,12(r17)
  803a6c:	003fdd06 	br	8039e4 <syncUpdatePos+0xa8>
  803a70:	89000317 	ldw	r4,12(r17)
  803a74:	003ffb06 	br	803a64 <syncUpdatePos+0x128>

00803a78 <play>:
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
  803a78:	defff204 	addi	sp,sp,-56
	if(db.songs[id] == NULL || id <= 0 || id > db.num_of_songs) return;
  803a7c:	2105883a 	add	r2,r4,r4
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
  803a80:	dcc00b15 	stw	r19,44(sp)
	if(db.songs[id] == NULL || id <= 0 || id > db.num_of_songs) return;
  803a84:	1085883a 	add	r2,r2,r2
  803a88:	04c02134 	movhi	r19,132
  803a8c:	9cca6204 	addi	r19,r19,10632
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
  803a90:	dc400915 	stw	r17,36(sp)
	if(db.songs[id] == NULL || id <= 0 || id > db.num_of_songs) return;
  803a94:	14e3883a 	add	r17,r2,r19
  803a98:	88c03617 	ldw	r3,216(r17)
	free(temp[0]);
	free(temp[1]);
	free(temp[2]);
}
//index 1
void play(int id, int vol, int pos) {
  803a9c:	dd000c15 	stw	r20,48(sp)
  803aa0:	dc800a15 	stw	r18,40(sp)
  803aa4:	dc000815 	stw	r16,32(sp)
  803aa8:	dfc00d15 	stw	ra,52(sp)
  803aac:	2025883a 	mov	r18,r4
  803ab0:	2821883a 	mov	r16,r5
  803ab4:	3029883a 	mov	r20,r6
	if(db.songs[id] == NULL || id <= 0 || id > db.num_of_songs) return;
  803ab8:	18000326 	beq	r3,zero,803ac8 <play+0x50>
  803abc:	0100020e 	bge	zero,r4,803ac8 <play+0x50>
  803ac0:	9880a717 	ldw	r2,668(r19)
  803ac4:	1100080e 	bge	r2,r4,803ae8 <play+0x70>
			sprintf(temp, "%d channel(s)", db.songs[db.curr_song_id]->sound->audioFormat->channels);
			alt_up_char_buffer_string(char_buffer, temp, 3, 40);
			printf("A song %d is played at %d position.\n", id, pos);
		}
	}
}
  803ac8:	dfc00d17 	ldw	ra,52(sp)
  803acc:	dd000c17 	ldw	r20,48(sp)
  803ad0:	dcc00b17 	ldw	r19,44(sp)
  803ad4:	dc800a17 	ldw	r18,40(sp)
  803ad8:	dc400917 	ldw	r17,36(sp)
  803adc:	dc000817 	ldw	r16,32(sp)
  803ae0:	dec00e04 	addi	sp,sp,56
  803ae4:	f800283a 	ret
}
//index 1
void play(int id, int vol, int pos) {
	if(db.songs[id] == NULL || id <= 0 || id > db.num_of_songs) return;
	char temp[30];
	printf("A song %d is started at %d volume.\n", id, vol);
  803ae8:	200b883a 	mov	r5,r4
  803aec:	800d883a 	mov	r6,r16
  803af0:	010020f4 	movhi	r4,131
  803af4:	210c9304 	addi	r4,r4,12876
  803af8:	08220680 	call	822068 <printf>
	playSong(db.songs[id], vol, pos, 0);
  803afc:	8009883a 	mov	r4,r16
  803b00:	081f8d00 	call	81f8d0 <__floatsisf>
  803b04:	89003617 	ldw	r4,216(r17)
  803b08:	100b883a 	mov	r5,r2
  803b0c:	a00d883a 	mov	r6,r20
  803b10:	000f883a 	mov	r7,zero
	syncUpdatePos(id, pos, 1);
  803b14:	04000044 	movi	r16,1
//index 1
void play(int id, int vol, int pos) {
	if(db.songs[id] == NULL || id <= 0 || id > db.num_of_songs) return;
	char temp[30];
	printf("A song %d is started at %d volume.\n", id, vol);
	playSong(db.songs[id], vol, pos, 0);
  803b18:	080dccc0 	call	80dccc <playSong>
	syncUpdatePos(id, pos, 1);
  803b1c:	9009883a 	mov	r4,r18
  803b20:	a00b883a 	mov	r5,r20
  803b24:	800d883a 	mov	r6,r16
  803b28:	080393c0 	call	80393c <syncUpdatePos>
	if(db.total_songs_playing <= 1) {
  803b2c:	9880a617 	ldw	r2,664(r19)
  803b30:	80bfe516 	blt	r16,r2,803ac8 <play+0x50>
		updateMixer();
  803b34:	081b0680 	call	81b068 <updateMixer>
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 4, 0x07);
  803b38:	00c001c4 	movi	r3,7
  803b3c:	00804234 	movhi	r2,264
  803b40:	108d1104 	addi	r2,r2,13380
  803b44:	10c0002d 	sthio	r3,0(r2)
		enableAudioDeviceController();
  803b48:	08195040 	call	819504 <enableAudioDeviceController>
		alt_up_char_buffer_string(char_buffer, db.songs[db.curr_song_id]->song_name, 3, 37);
  803b4c:	98800017 	ldw	r2,0(r19)
  803b50:	04002134 	movhi	r16,132
  803b54:	840a3704 	addi	r16,r16,10460
  803b58:	81000017 	ldw	r4,0(r16)
  803b5c:	1085883a 	add	r2,r2,r2
  803b60:	1085883a 	add	r2,r2,r2
  803b64:	14c5883a 	add	r2,r2,r19
  803b68:	11403617 	ldw	r5,216(r2)
  803b6c:	018000c4 	movi	r6,3
  803b70:	01c00944 	movi	r7,37
  803b74:	29400104 	addi	r5,r5,4
  803b78:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
		sprintf(temp, "%.2f seconds", db.songs[db.curr_song_id]->size/1000.0);
  803b7c:	98c00017 	ldw	r3,0(r19)
  803b80:	18c7883a 	add	r3,r3,r3
  803b84:	18c7883a 	add	r3,r3,r3
  803b88:	1cc7883a 	add	r3,r3,r19
  803b8c:	18803617 	ldw	r2,216(r3)
  803b90:	11000917 	ldw	r4,36(r2)
  803b94:	08208500 	call	820850 <__floatsidf>
  803b98:	0011883a 	mov	r8,zero
  803b9c:	025023f4 	movhi	r9,16527
  803ba0:	4a500004 	addi	r9,r9,16384
  803ba4:	480f883a 	mov	r7,r9
  803ba8:	400d883a 	mov	r6,r8
  803bac:	180b883a 	mov	r5,r3
  803bb0:	1009883a 	mov	r4,r2
  803bb4:	08203d80 	call	8203d8 <__divdf3>
  803bb8:	180f883a 	mov	r7,r3
  803bbc:	d809883a 	mov	r4,sp
  803bc0:	014020f4 	movhi	r5,131
  803bc4:	294c9c04 	addi	r5,r5,12912
  803bc8:	100d883a 	mov	r6,r2
  803bcc:	0822b640 	call	822b64 <sprintf>
		alt_up_char_buffer_string(char_buffer, temp, 3, 38);
  803bd0:	81000017 	ldw	r4,0(r16)
  803bd4:	d80b883a 	mov	r5,sp
  803bd8:	018000c4 	movi	r6,3
  803bdc:	01c00984 	movi	r7,38
  803be0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
		if(db.songs[db.curr_song_id]->sound->audioFormat != NULL) {
  803be4:	98c00017 	ldw	r3,0(r19)
  803be8:	18c7883a 	add	r3,r3,r3
  803bec:	18c7883a 	add	r3,r3,r3
  803bf0:	1cc7883a 	add	r3,r3,r19
  803bf4:	19003617 	ldw	r4,216(r3)
  803bf8:	20800017 	ldw	r2,0(r4)
  803bfc:	10c00017 	ldw	r3,0(r2)
  803c00:	183fb126 	beq	r3,zero,803ac8 <play+0x50>
			memset(temp, 0, 30);
  803c04:	d8000015 	stw	zero,0(sp)
  803c08:	d8000115 	stw	zero,4(sp)
  803c0c:	d8000215 	stw	zero,8(sp)
  803c10:	d8000315 	stw	zero,12(sp)
  803c14:	d8000415 	stw	zero,16(sp)
  803c18:	d8000515 	stw	zero,20(sp)
  803c1c:	d8000615 	stw	zero,24(sp)
  803c20:	d800070d 	sth	zero,28(sp)
			sprintf(temp, "%.1f kbps", getBitRateKbps(db.songs[db.curr_song_id]->sound->audioFormat));
  803c24:	20800017 	ldw	r2,0(r4)
  803c28:	11000017 	ldw	r4,0(r2)
  803c2c:	08195cc0 	call	8195cc <getBitRateKbps>
  803c30:	1009883a 	mov	r4,r2
  803c34:	081f9fc0 	call	81f9fc <__extendsfdf2>
  803c38:	180f883a 	mov	r7,r3
  803c3c:	d809883a 	mov	r4,sp
  803c40:	014020f4 	movhi	r5,131
  803c44:	294ca004 	addi	r5,r5,12928
  803c48:	100d883a 	mov	r6,r2
  803c4c:	0822b640 	call	822b64 <sprintf>
			alt_up_char_buffer_string(char_buffer, temp, 3, 39);
  803c50:	81000017 	ldw	r4,0(r16)
  803c54:	01c009c4 	movi	r7,39
  803c58:	d80b883a 	mov	r5,sp
  803c5c:	018000c4 	movi	r6,3
  803c60:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
			memset(temp, 0, 30);
			sprintf(temp, "%d channel(s)", db.songs[db.curr_song_id]->sound->audioFormat->channels);
  803c64:	98c00017 	ldw	r3,0(r19)
		alt_up_char_buffer_string(char_buffer, temp, 3, 38);
		if(db.songs[db.curr_song_id]->sound->audioFormat != NULL) {
			memset(temp, 0, 30);
			sprintf(temp, "%.1f kbps", getBitRateKbps(db.songs[db.curr_song_id]->sound->audioFormat));
			alt_up_char_buffer_string(char_buffer, temp, 3, 39);
			memset(temp, 0, 30);
  803c68:	d8000015 	stw	zero,0(sp)
  803c6c:	d8000115 	stw	zero,4(sp)
			sprintf(temp, "%d channel(s)", db.songs[db.curr_song_id]->sound->audioFormat->channels);
  803c70:	18c7883a 	add	r3,r3,r3
  803c74:	18c7883a 	add	r3,r3,r3
  803c78:	1cc7883a 	add	r3,r3,r19
  803c7c:	18803617 	ldw	r2,216(r3)
		alt_up_char_buffer_string(char_buffer, temp, 3, 38);
		if(db.songs[db.curr_song_id]->sound->audioFormat != NULL) {
			memset(temp, 0, 30);
			sprintf(temp, "%.1f kbps", getBitRateKbps(db.songs[db.curr_song_id]->sound->audioFormat));
			alt_up_char_buffer_string(char_buffer, temp, 3, 39);
			memset(temp, 0, 30);
  803c80:	d8000215 	stw	zero,8(sp)
  803c84:	d8000315 	stw	zero,12(sp)
  803c88:	d8000415 	stw	zero,16(sp)
  803c8c:	d8000515 	stw	zero,20(sp)
  803c90:	d8000615 	stw	zero,24(sp)
  803c94:	d800070d 	sth	zero,28(sp)
			sprintf(temp, "%d channel(s)", db.songs[db.curr_song_id]->sound->audioFormat->channels);
  803c98:	10c00017 	ldw	r3,0(r2)
  803c9c:	d809883a 	mov	r4,sp
  803ca0:	014020f4 	movhi	r5,131
  803ca4:	294ca304 	addi	r5,r5,12940
  803ca8:	18800017 	ldw	r2,0(r3)
  803cac:	11800017 	ldw	r6,0(r2)
  803cb0:	0822b640 	call	822b64 <sprintf>
			alt_up_char_buffer_string(char_buffer, temp, 3, 40);
  803cb4:	81000017 	ldw	r4,0(r16)
  803cb8:	d80b883a 	mov	r5,sp
  803cbc:	018000c4 	movi	r6,3
  803cc0:	01c00a04 	movi	r7,40
  803cc4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
			printf("A song %d is played at %d position.\n", id, pos);
  803cc8:	900b883a 	mov	r5,r18
  803ccc:	a00d883a 	mov	r6,r20
  803cd0:	010020f4 	movhi	r4,131
  803cd4:	210ca704 	addi	r4,r4,12956
  803cd8:	08220680 	call	822068 <printf>
  803cdc:	003f7a06 	br	803ac8 <play+0x50>

00803ce0 <syncCreateExisitedPlaylist>:
}
/*
 * send command to tell android phone to create a playlist with given information
 * index: 9
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
  803ce0:	defff904 	addi	sp,sp,-28
  803ce4:	dc400315 	stw	r17,12(sp)
  803ce8:	2023883a 	mov	r17,r4
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
  803cec:	010003c4 	movi	r4,15
}
/*
 * send command to tell android phone to create a playlist with given information
 * index: 9
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
  803cf0:	dfc00615 	stw	ra,24(sp)
  803cf4:	dd400515 	stw	r21,20(sp)
  803cf8:	dcc00415 	stw	r19,16(sp)
  803cfc:	302b883a 	mov	r21,r6
  803d00:	2827883a 	mov	r19,r5
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
  803d04:	08216fc0 	call	8216fc <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  803d08:	01000104 	movi	r4,4
 * send command to tell android phone to create a playlist with given information
 * index: 9
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
  803d0c:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  803d10:	08216fc0 	call	8216fc <malloc>
	temp[2] = (char*)malloc(sizeof(char)*4);
  803d14:	01000104 	movi	r4,4
 * index: 9
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
	temp[1] = (char*)malloc(sizeof(char)*4);
  803d18:	d8800115 	stw	r2,4(sp)
	temp[2] = (char*)malloc(sizeof(char)*4);
  803d1c:	08216fc0 	call	8216fc <malloc>
	strcpy(temp[0], listname);
  803d20:	d9000017 	ldw	r4,0(sp)
  803d24:	880b883a 	mov	r5,r17
 */
void syncCreateExisitedPlaylist(char* listname, int num_of_songs, int id) {
	char* temp[3];
	temp[0] = (char*)malloc(sizeof(char)*15);
	temp[1] = (char*)malloc(sizeof(char)*4);
	temp[2] = (char*)malloc(sizeof(char)*4);
  803d28:	d8800215 	stw	r2,8(sp)
	strcpy(temp[0], listname);
  803d2c:	0822d840 	call	822d84 <strcpy>
	sprintf(temp[1], "%d", num_of_songs);
  803d30:	d9000117 	ldw	r4,4(sp)
  803d34:	980d883a 	mov	r6,r19
  803d38:	014020f4 	movhi	r5,131
  803d3c:	294bac04 	addi	r5,r5,11952
  803d40:	0822b640 	call	822b64 <sprintf>
	sprintf(temp[2], "%d", id);
  803d44:	d9000217 	ldw	r4,8(sp)
  803d48:	a80d883a 	mov	r6,r21
  803d4c:	014020f4 	movhi	r5,131
  803d50:	294bac04 	addi	r5,r5,11952
  803d54:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(9, 3, temp);
  803d58:	014000c4 	movi	r5,3
  803d5c:	d80d883a 	mov	r6,sp
  803d60:	01000244 	movi	r4,9
  803d64:	0802fcc0 	call	802fcc <initCmd>
  803d68:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803d6c:	1009883a 	mov	r4,r2
  803d70:	01400044 	movi	r5,1
  803d74:	080bb980 	call	80bb98 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  803d78:	88c00117 	ldw	r3,4(r17)
  803d7c:	18000e1e 	bne	r3,zero,803db8 <syncCreateExisitedPlaylist+0xd8>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  803d80:	8809883a 	mov	r4,r17
  803d84:	08216e80 	call	8216e8 <free>
	sprintf(temp[1], "%d", num_of_songs);
	sprintf(temp[2], "%d", id);
	struct Command* cmd = initCmd(9, 3, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  803d88:	d9000017 	ldw	r4,0(sp)
  803d8c:	08216e80 	call	8216e8 <free>
	free(temp[1]);
  803d90:	d9000117 	ldw	r4,4(sp)
  803d94:	08216e80 	call	8216e8 <free>
	free(temp[2]);
  803d98:	d9000217 	ldw	r4,8(sp)
  803d9c:	08216e80 	call	8216e8 <free>
}
  803da0:	dfc00617 	ldw	ra,24(sp)
  803da4:	dd400517 	ldw	r21,20(sp)
  803da8:	dcc00417 	ldw	r19,16(sp)
  803dac:	dc400317 	ldw	r17,12(sp)
  803db0:	dec00704 	addi	sp,sp,28
  803db4:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  803db8:	89000217 	ldw	r4,8(r17)
  803dbc:	08216e80 	call	8216e8 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803dc0:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  803dc4:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803dc8:	0080100e 	bge	zero,r2,803e0c <syncCreateExisitedPlaylist+0x12c>
  803dcc:	89000317 	ldw	r4,12(r17)
  803dd0:	002b883a 	mov	r21,zero
  803dd4:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  803dd8:	9905883a 	add	r2,r19,r4
  803ddc:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803de0:	ad400044 	addi	r21,r21,1
			free((*this)->parameters[i]);
  803de4:	08216e80 	call	8216e8 <free>
			(*this)->parameters[i] = NULL;
  803de8:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803dec:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  803df0:	9905883a 	add	r2,r19,r4
  803df4:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803df8:	9cc00104 	addi	r19,r19,4
  803dfc:	a8fff616 	blt	r21,r3,803dd8 <syncCreateExisitedPlaylist+0xf8>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  803e00:	08216e80 	call	8216e8 <free>
		(*this)->parameters = NULL;
  803e04:	88000315 	stw	zero,12(r17)
  803e08:	003fdd06 	br	803d80 <syncCreateExisitedPlaylist+0xa0>
  803e0c:	89000317 	ldw	r4,12(r17)
  803e10:	003ffb06 	br	803e00 <syncCreateExisitedPlaylist+0x120>

00803e14 <syncAddExisitedSongToList>:
		}
	}
}

//index 14
void syncAddExisitedSongToList(int list_id, int song_id) {
  803e14:	defffa04 	addi	sp,sp,-24
  803e18:	dc400315 	stw	r17,12(sp)
  803e1c:	2023883a 	mov	r17,r4
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803e20:	01000104 	movi	r4,4
		}
	}
}

//index 14
void syncAddExisitedSongToList(int list_id, int song_id) {
  803e24:	dfc00515 	stw	ra,20(sp)
  803e28:	dcc00415 	stw	r19,16(sp)
  803e2c:	dc000215 	stw	r16,8(sp)
  803e30:	2827883a 	mov	r19,r5
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803e34:	08216fc0 	call	8216fc <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  803e38:	01000104 	movi	r4,4
}

//index 14
void syncAddExisitedSongToList(int list_id, int song_id) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803e3c:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  803e40:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", list_id);
  803e44:	d9000017 	ldw	r4,0(sp)
  803e48:	880d883a 	mov	r6,r17
  803e4c:	014020f4 	movhi	r5,131
  803e50:	294bac04 	addi	r5,r5,11952

//index 14
void syncAddExisitedSongToList(int list_id, int song_id) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  803e54:	d8800115 	stw	r2,4(sp)
	sprintf(temp[0], "%d", list_id);
  803e58:	0822b640 	call	822b64 <sprintf>
	sprintf(temp[1], "%d", song_id);
  803e5c:	d9000117 	ldw	r4,4(sp)
  803e60:	980d883a 	mov	r6,r19
  803e64:	014020f4 	movhi	r5,131
  803e68:	294bac04 	addi	r5,r5,11952
  803e6c:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(14, 2, temp);
  803e70:	01400084 	movi	r5,2
  803e74:	d80d883a 	mov	r6,sp
  803e78:	01000384 	movi	r4,14
  803e7c:	0802fcc0 	call	802fcc <initCmd>
  803e80:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803e84:	1009883a 	mov	r4,r2
  803e88:	01400044 	movi	r5,1
  803e8c:	080bb980 	call	80bb98 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  803e90:	88c00117 	ldw	r3,4(r17)
  803e94:	18000c1e 	bne	r3,zero,803ec8 <syncAddExisitedSongToList+0xb4>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  803e98:	8809883a 	mov	r4,r17
  803e9c:	08216e80 	call	8216e8 <free>
	sprintf(temp[0], "%d", list_id);
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(14, 2, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  803ea0:	d9000017 	ldw	r4,0(sp)
  803ea4:	08216e80 	call	8216e8 <free>
	free(temp[1]);
  803ea8:	d9000117 	ldw	r4,4(sp)
  803eac:	08216e80 	call	8216e8 <free>
}
  803eb0:	dfc00517 	ldw	ra,20(sp)
  803eb4:	dcc00417 	ldw	r19,16(sp)
  803eb8:	dc400317 	ldw	r17,12(sp)
  803ebc:	dc000217 	ldw	r16,8(sp)
  803ec0:	dec00604 	addi	sp,sp,24
  803ec4:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  803ec8:	89000217 	ldw	r4,8(r17)
  803ecc:	08216e80 	call	8216e8 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803ed0:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  803ed4:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803ed8:	0080100e 	bge	zero,r2,803f1c <syncAddExisitedSongToList+0x108>
  803edc:	89000317 	ldw	r4,12(r17)
  803ee0:	0021883a 	mov	r16,zero
  803ee4:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  803ee8:	9905883a 	add	r2,r19,r4
  803eec:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803ef0:	84000044 	addi	r16,r16,1
			free((*this)->parameters[i]);
  803ef4:	08216e80 	call	8216e8 <free>
			(*this)->parameters[i] = NULL;
  803ef8:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803efc:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  803f00:	9905883a 	add	r2,r19,r4
  803f04:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803f08:	9cc00104 	addi	r19,r19,4
  803f0c:	80fff616 	blt	r16,r3,803ee8 <syncAddExisitedSongToList+0xd4>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  803f10:	08216e80 	call	8216e8 <free>
		(*this)->parameters = NULL;
  803f14:	88000315 	stw	zero,12(r17)
  803f18:	003fdf06 	br	803e98 <syncAddExisitedSongToList+0x84>
  803f1c:	89000317 	ldw	r4,12(r17)
  803f20:	003ffb06 	br	803f10 <syncAddExisitedSongToList+0xfc>

00803f24 <syncAddSongToList>:
	struct Command* cmd = initCmd(12, 0, NULL);
	send(cmd, CMD);
	killCmd(&cmd);
}

void syncAddSongToList(int list_id, int song_id) {
  803f24:	defffa04 	addi	sp,sp,-24
  803f28:	dc400315 	stw	r17,12(sp)
  803f2c:	2023883a 	mov	r17,r4
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803f30:	01000104 	movi	r4,4
	struct Command* cmd = initCmd(12, 0, NULL);
	send(cmd, CMD);
	killCmd(&cmd);
}

void syncAddSongToList(int list_id, int song_id) {
  803f34:	dfc00515 	stw	ra,20(sp)
  803f38:	dcc00415 	stw	r19,16(sp)
  803f3c:	dc000215 	stw	r16,8(sp)
  803f40:	2827883a 	mov	r19,r5
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803f44:	08216fc0 	call	8216fc <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  803f48:	01000104 	movi	r4,4
	killCmd(&cmd);
}

void syncAddSongToList(int list_id, int song_id) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
  803f4c:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  803f50:	08216fc0 	call	8216fc <malloc>
	sprintf(temp[0], "%d", list_id);
  803f54:	d9000017 	ldw	r4,0(sp)
  803f58:	880d883a 	mov	r6,r17
  803f5c:	014020f4 	movhi	r5,131
  803f60:	294bac04 	addi	r5,r5,11952
}

void syncAddSongToList(int list_id, int song_id) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*4);
	temp[1] = (char*)malloc(sizeof(char)*4);
  803f64:	d8800115 	stw	r2,4(sp)
	sprintf(temp[0], "%d", list_id);
  803f68:	0822b640 	call	822b64 <sprintf>
	sprintf(temp[1], "%d", song_id);
  803f6c:	d9000117 	ldw	r4,4(sp)
  803f70:	980d883a 	mov	r6,r19
  803f74:	014020f4 	movhi	r5,131
  803f78:	294bac04 	addi	r5,r5,11952
  803f7c:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(13, 2, temp);
  803f80:	01400084 	movi	r5,2
  803f84:	d80d883a 	mov	r6,sp
  803f88:	01000344 	movi	r4,13
  803f8c:	0802fcc0 	call	802fcc <initCmd>
  803f90:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  803f94:	1009883a 	mov	r4,r2
  803f98:	01400044 	movi	r5,1
  803f9c:	080bb980 	call	80bb98 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  803fa0:	88c00117 	ldw	r3,4(r17)
  803fa4:	18000c1e 	bne	r3,zero,803fd8 <syncAddSongToList+0xb4>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  803fa8:	8809883a 	mov	r4,r17
  803fac:	08216e80 	call	8216e8 <free>
	sprintf(temp[0], "%d", list_id);
	sprintf(temp[1], "%d", song_id);
	struct Command* cmd = initCmd(13, 2, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  803fb0:	d9000017 	ldw	r4,0(sp)
  803fb4:	08216e80 	call	8216e8 <free>
	free(temp[1]);
  803fb8:	d9000117 	ldw	r4,4(sp)
  803fbc:	08216e80 	call	8216e8 <free>
	//addCmd(com.scheduler, cmd);
}
  803fc0:	dfc00517 	ldw	ra,20(sp)
  803fc4:	dcc00417 	ldw	r19,16(sp)
  803fc8:	dc400317 	ldw	r17,12(sp)
  803fcc:	dc000217 	ldw	r16,8(sp)
  803fd0:	dec00604 	addi	sp,sp,24
  803fd4:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  803fd8:	89000217 	ldw	r4,8(r17)
  803fdc:	08216e80 	call	8216e8 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803fe0:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  803fe4:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  803fe8:	0080100e 	bge	zero,r2,80402c <syncAddSongToList+0x108>
  803fec:	89000317 	ldw	r4,12(r17)
  803ff0:	0021883a 	mov	r16,zero
  803ff4:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  803ff8:	24c5883a 	add	r2,r4,r19
  803ffc:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  804000:	84000044 	addi	r16,r16,1
			free((*this)->parameters[i]);
  804004:	08216e80 	call	8216e8 <free>
			(*this)->parameters[i] = NULL;
  804008:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  80400c:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  804010:	24c5883a 	add	r2,r4,r19
  804014:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  804018:	9cc00104 	addi	r19,r19,4
  80401c:	80fff616 	blt	r16,r3,803ff8 <syncAddSongToList+0xd4>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  804020:	08216e80 	call	8216e8 <free>
		(*this)->parameters = NULL;
  804024:	88000315 	stw	zero,12(r17)
  804028:	003fdf06 	br	803fa8 <syncAddSongToList+0x84>
  80402c:	89000317 	ldw	r4,12(r17)
  804030:	003ffb06 	br	804020 <syncAddSongToList+0xfc>

00804034 <syncDBFinish>:
/*
 * Send command to notify android app that the sync process at start up is finished
 * index: 12
 */

void syncDBFinish() {
  804034:	defffc04 	addi	sp,sp,-16
	struct Command* cmd = initCmd(12, 0, NULL);
  804038:	000b883a 	mov	r5,zero
  80403c:	000d883a 	mov	r6,zero
  804040:	01000304 	movi	r4,12
/*
 * Send command to notify android app that the sync process at start up is finished
 * index: 12
 */

void syncDBFinish() {
  804044:	dfc00315 	stw	ra,12(sp)
  804048:	dc000015 	stw	r16,0(sp)
  80404c:	dc800215 	stw	r18,8(sp)
  804050:	dc400115 	stw	r17,4(sp)
	struct Command* cmd = initCmd(12, 0, NULL);
  804054:	0802fcc0 	call	802fcc <initCmd>
  804058:	1021883a 	mov	r16,r2
	send(cmd, CMD);
  80405c:	1009883a 	mov	r4,r2
  804060:	01400044 	movi	r5,1
  804064:	080bb980 	call	80bb98 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  804068:	80c00117 	ldw	r3,4(r16)
  80406c:	1800071e 	bne	r3,zero,80408c <syncDBFinish+0x58>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  804070:	8009883a 	mov	r4,r16

void syncDBFinish() {
	struct Command* cmd = initCmd(12, 0, NULL);
	send(cmd, CMD);
	killCmd(&cmd);
}
  804074:	dfc00317 	ldw	ra,12(sp)
  804078:	dc800217 	ldw	r18,8(sp)
  80407c:	dc400117 	ldw	r17,4(sp)
  804080:	dc000017 	ldw	r16,0(sp)
  804084:	dec00404 	addi	sp,sp,16
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  804088:	08216e81 	jmpi	8216e8 <free>
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  80408c:	81000217 	ldw	r4,8(r16)
  804090:	08216e80 	call	8216e8 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  804094:	80800117 	ldw	r2,4(r16)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  804098:	80000215 	stw	zero,8(r16)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  80409c:	0080160e 	bge	zero,r2,8040f8 <syncDBFinish+0xc4>
  8040a0:	81000317 	ldw	r4,12(r16)
  8040a4:	0025883a 	mov	r18,zero
  8040a8:	0023883a 	mov	r17,zero
			free((*this)->parameters[i]);
  8040ac:	8905883a 	add	r2,r17,r4
  8040b0:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  8040b4:	94800044 	addi	r18,r18,1
			free((*this)->parameters[i]);
  8040b8:	08216e80 	call	8216e8 <free>
			(*this)->parameters[i] = NULL;
  8040bc:	81000317 	ldw	r4,12(r16)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  8040c0:	80c00117 	ldw	r3,4(r16)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  8040c4:	8905883a 	add	r2,r17,r4
  8040c8:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  8040cc:	8c400104 	addi	r17,r17,4
  8040d0:	90fff616 	blt	r18,r3,8040ac <syncDBFinish+0x78>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  8040d4:	08216e80 	call	8216e8 <free>
		(*this)->parameters = NULL;
	}
	free(*this);
  8040d8:	8009883a 	mov	r4,r16
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
  8040dc:	80000315 	stw	zero,12(r16)

void syncDBFinish() {
	struct Command* cmd = initCmd(12, 0, NULL);
	send(cmd, CMD);
	killCmd(&cmd);
}
  8040e0:	dfc00317 	ldw	ra,12(sp)
  8040e4:	dc800217 	ldw	r18,8(sp)
  8040e8:	dc400117 	ldw	r17,4(sp)
  8040ec:	dc000017 	ldw	r16,0(sp)
  8040f0:	dec00404 	addi	sp,sp,16
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  8040f4:	08216e81 	jmpi	8216e8 <free>
  8040f8:	81000317 	ldw	r4,12(r16)
  8040fc:	003ff506 	br	8040d4 <syncDBFinish+0xa0>

00804100 <syncCreateSong>:
}
/*
 * Send command to create a song on android phone
 * index 10
 */
void syncCreateSong(char* song_name, int len) {
  804100:	defffa04 	addi	sp,sp,-24
  804104:	dc400315 	stw	r17,12(sp)
  804108:	2023883a 	mov	r17,r4
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*15);
  80410c:	010003c4 	movi	r4,15
}
/*
 * Send command to create a song on android phone
 * index 10
 */
void syncCreateSong(char* song_name, int len) {
  804110:	dfc00515 	stw	ra,20(sp)
  804114:	dcc00415 	stw	r19,16(sp)
  804118:	dc000215 	stw	r16,8(sp)
  80411c:	2827883a 	mov	r19,r5
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*15);
  804120:	08216fc0 	call	8216fc <malloc>
	temp[1] = (char*)malloc(sizeof(char)*4);
  804124:	01000104 	movi	r4,4
 * Send command to create a song on android phone
 * index 10
 */
void syncCreateSong(char* song_name, int len) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*15);
  804128:	d8800015 	stw	r2,0(sp)
	temp[1] = (char*)malloc(sizeof(char)*4);
  80412c:	08216fc0 	call	8216fc <malloc>
	strcpy(temp[0], song_name);
  804130:	d9000017 	ldw	r4,0(sp)
  804134:	880b883a 	mov	r5,r17
 * index 10
 */
void syncCreateSong(char* song_name, int len) {
	char* temp[2];
	temp[0] = (char*)malloc(sizeof(char)*15);
	temp[1] = (char*)malloc(sizeof(char)*4);
  804138:	d8800115 	stw	r2,4(sp)
	strcpy(temp[0], song_name);
  80413c:	0822d840 	call	822d84 <strcpy>
	sprintf(temp[1], "%d", len);
  804140:	d9000117 	ldw	r4,4(sp)
  804144:	980d883a 	mov	r6,r19
  804148:	014020f4 	movhi	r5,131
  80414c:	294bac04 	addi	r5,r5,11952
  804150:	0822b640 	call	822b64 <sprintf>
	struct Command* cmd = initCmd(10, 2, temp);
  804154:	01400084 	movi	r5,2
  804158:	d80d883a 	mov	r6,sp
  80415c:	01000284 	movi	r4,10
  804160:	0802fcc0 	call	802fcc <initCmd>
  804164:	1023883a 	mov	r17,r2
	send(cmd, CMD);
  804168:	1009883a 	mov	r4,r2
  80416c:	01400044 	movi	r5,1
  804170:	080bb980 	call	80bb98 <send>
	return this;
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
  804174:	88c00117 	ldw	r3,4(r17)
  804178:	18000c1e 	bne	r3,zero,8041ac <syncCreateSong+0xac>
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
		(*this)->parameters = NULL;
	}
	free(*this);
  80417c:	8809883a 	mov	r4,r17
  804180:	08216e80 	call	8216e8 <free>
	strcpy(temp[0], song_name);
	sprintf(temp[1], "%d", len);
	struct Command* cmd = initCmd(10, 2, temp);
	send(cmd, CMD);
	killCmd(&cmd);
	free(temp[0]);
  804184:	d9000017 	ldw	r4,0(sp)
  804188:	08216e80 	call	8216e8 <free>
	free(temp[1]);
  80418c:	d9000117 	ldw	r4,4(sp)
  804190:	08216e80 	call	8216e8 <free>
}
  804194:	dfc00517 	ldw	ra,20(sp)
  804198:	dcc00417 	ldw	r19,16(sp)
  80419c:	dc400317 	ldw	r17,12(sp)
  8041a0:	dc000217 	ldw	r16,8(sp)
  8041a4:	dec00604 	addi	sp,sp,24
  8041a8:	f800283a 	ret
}

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
  8041ac:	89000217 	ldw	r4,8(r17)
  8041b0:	08216e80 	call	8216e8 <free>
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  8041b4:	88800117 	ldw	r2,4(r17)

void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
  8041b8:	88000215 	stw	zero,8(r17)
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  8041bc:	0080100e 	bge	zero,r2,804200 <syncCreateSong+0x100>
  8041c0:	89000317 	ldw	r4,12(r17)
  8041c4:	0021883a 	mov	r16,zero
  8041c8:	0027883a 	mov	r19,zero
			free((*this)->parameters[i]);
  8041cc:	9905883a 	add	r2,r19,r4
  8041d0:	11000017 	ldw	r4,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  8041d4:	84000044 	addi	r16,r16,1
			free((*this)->parameters[i]);
  8041d8:	08216e80 	call	8216e8 <free>
			(*this)->parameters[i] = NULL;
  8041dc:	89000317 	ldw	r4,12(r17)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  8041e0:	88c00117 	ldw	r3,4(r17)
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
  8041e4:	9905883a 	add	r2,r19,r4
  8041e8:	10000015 	stw	zero,0(r2)
void killCmd(struct Command** this) {
	int i = 0;
	if((*this)->num_of_parameters != 0) {
		free((*this)->parameters_size);
		(*this)->parameters_size = NULL;
		for(i = 0; i < (*this)->num_of_parameters ; i++) {
  8041ec:	9cc00104 	addi	r19,r19,4
  8041f0:	80fff616 	blt	r16,r3,8041cc <syncCreateSong+0xcc>
			free((*this)->parameters[i]);
			(*this)->parameters[i] = NULL;
		}
		free((*this)->parameters);
  8041f4:	08216e80 	call	8216e8 <free>
		(*this)->parameters = NULL;
  8041f8:	88000315 	stw	zero,12(r17)
  8041fc:	003fdf06 	br	80417c <syncCreateSong+0x7c>
  804200:	89000317 	ldw	r4,12(r17)
  804204:	003ffb06 	br	8041f4 <syncCreateSong+0xf4>

00804208 <cmdProcessing>:
}
/*
 * This function schedule a command in the waiting list to be executed
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
  804208:	20800017 	ldw	r2,0(r4)
	enqueue(this->cmds, (void*)cmd);
}
/*
 * This function schedule a command in the waiting list to be executed
 */
void cmdProcessing(struct CmdScheduler* this) {
  80420c:	defffa04 	addi	sp,sp,-24
  804210:	dc000115 	stw	r16,4(sp)
	if(this->cmds->size <= 0 || this == NULL) return;
  804214:	14000017 	ldw	r16,0(r2)
	enqueue(this->cmds, (void*)cmd);
}
/*
 * This function schedule a command in the waiting list to be executed
 */
void cmdProcessing(struct CmdScheduler* this) {
  804218:	dc800315 	stw	r18,12(sp)
  80421c:	dfc00515 	stw	ra,20(sp)
  804220:	dcc00415 	stw	r19,16(sp)
  804224:	dc400215 	stw	r17,8(sp)
  804228:	2025883a 	mov	r18,r4
	if(this->cmds->size <= 0 || this == NULL) return;
  80422c:	0400360e 	bge	zero,r16,804308 <cmdProcessing+0x100>
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
		cmd = dequeue(this->cmds);
  804230:	91000017 	ldw	r4,0(r18)
  804234:	080b7a00 	call	80b7a0 <dequeue>
		switch(cmd->cmd_index) {
  804238:	10c00017 	ldw	r3,0(r2)
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
		cmd = dequeue(this->cmds);
  80423c:	100b883a 	mov	r5,r2
  804240:	d8800015 	stw	r2,0(sp)
		switch(cmd->cmd_index) {
  804244:	00800604 	movi	r2,24
  804248:	10c02b36 	bltu	r2,r3,8042f8 <cmdProcessing+0xf0>
  80424c:	18c5883a 	add	r2,r3,r3
  804250:	1085883a 	add	r2,r2,r2
  804254:	00c02034 	movhi	r3,128
  804258:	18d09a04 	addi	r3,r3,17000
  80425c:	10c5883a 	add	r2,r2,r3
  804260:	11000017 	ldw	r4,0(r2)
  804264:	2000683a 	jmp	r4
  804268:	008042f8 	rdprs	r2,zero,267
  80426c:	00804324 	muli	r2,zero,268
  804270:	0080437c 	xorhi	r2,zero,269
  804274:	008043a4 	muli	r2,zero,270
  804278:	008043bc 	xorhi	r2,zero,270
  80427c:	008043fc 	xorhi	r2,zero,271
  804280:	00804424 	muli	r2,zero,272
  804284:	0080444c 	andi	r2,zero,273
  804288:	00804474 	movhi	r2,273
  80428c:	008042f8 	rdprs	r2,zero,267
  804290:	008042f8 	rdprs	r2,zero,267
  804294:	00804494 	movui	r2,274
  804298:	008042f8 	rdprs	r2,zero,267
  80429c:	008044bc 	xorhi	r2,zero,274
  8042a0:	008042f8 	rdprs	r2,zero,267
  8042a4:	008044fc 	xorhi	r2,zero,275
  8042a8:	008042f8 	rdprs	r2,zero,267
  8042ac:	0080453c 	xorhi	r2,zero,276
  8042b0:	00804564 	muli	r2,zero,277
  8042b4:	00804598 	cmpnei	r2,zero,278
  8042b8:	008045c0 	call	8045c <__reset-0x77fba4>
  8042bc:	00804618 	cmpnei	r2,zero,280
  8042c0:	00804630 	cmpltui	r2,zero,280
  8042c4:	00804648 	cmpgei	r2,zero,281
  8042c8:	008042cc 	andi	r2,zero,267
			break;
		case 23:
			openSongsFromList(atoi(cmd->parameters[0]));
			break;
		case 24:
			playSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  8042cc:	28800317 	ldw	r2,12(r5)
  8042d0:	11000017 	ldw	r4,0(r2)
  8042d4:	08215640 	call	821564 <atoi>
  8042d8:	1023883a 	mov	r17,r2
  8042dc:	d8800017 	ldw	r2,0(sp)
  8042e0:	10c00317 	ldw	r3,12(r2)
  8042e4:	19000117 	ldw	r4,4(r3)
  8042e8:	08215640 	call	821564 <atoi>
  8042ec:	100b883a 	mov	r5,r2
  8042f0:	8809883a 	mov	r4,r17
  8042f4:	08029ec0 	call	8029ec <playSongFromList>
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  8042f8:	843fffc4 	addi	r16,r16,-1
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  8042fc:	d809883a 	mov	r4,sp
  804300:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804304:	803fca1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
			break;
		}
		killCmd(&cmd);
		num_cmds--;
	}
}
  804308:	dfc00517 	ldw	ra,20(sp)
  80430c:	dcc00417 	ldw	r19,16(sp)
  804310:	dc800317 	ldw	r18,12(sp)
  804314:	dc400217 	ldw	r17,8(sp)
  804318:	dc000117 	ldw	r16,4(sp)
  80431c:	dec00604 	addi	sp,sp,24
  804320:	f800283a 	ret
	struct Command* cmd;
	while(num_cmds > 0) {
		cmd = dequeue(this->cmds);
		switch(cmd->cmd_index) {
		case 1:
			play(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
  804324:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804328:	843fffc4 	addi	r16,r16,-1
	struct Command* cmd;
	while(num_cmds > 0) {
		cmd = dequeue(this->cmds);
		switch(cmd->cmd_index) {
		case 1:
			play(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
  80432c:	11000017 	ldw	r4,0(r2)
  804330:	08215640 	call	821564 <atoi>
  804334:	1027883a 	mov	r19,r2
  804338:	d8800017 	ldw	r2,0(sp)
  80433c:	10c00317 	ldw	r3,12(r2)
  804340:	19000117 	ldw	r4,4(r3)
  804344:	08215640 	call	821564 <atoi>
  804348:	1023883a 	mov	r17,r2
  80434c:	d8800017 	ldw	r2,0(sp)
  804350:	10c00317 	ldw	r3,12(r2)
  804354:	19000217 	ldw	r4,8(r3)
  804358:	08215640 	call	821564 <atoi>
  80435c:	880b883a 	mov	r5,r17
  804360:	9809883a 	mov	r4,r19
  804364:	100d883a 	mov	r6,r2
  804368:	0803a780 	call	803a78 <play>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  80436c:	d809883a 	mov	r4,sp
  804370:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804374:	803fae1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804378:	003fe306 	br	804308 <cmdProcessing+0x100>
		switch(cmd->cmd_index) {
		case 1:
			play(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
			break;
		case 2:
			pause(atoi(cmd->parameters[0]));
  80437c:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804380:	843fffc4 	addi	r16,r16,-1
		switch(cmd->cmd_index) {
		case 1:
			play(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
			break;
		case 2:
			pause(atoi(cmd->parameters[0]));
  804384:	11000017 	ldw	r4,0(r2)
  804388:	08215640 	call	821564 <atoi>
  80438c:	1009883a 	mov	r4,r2
  804390:	0802f180 	call	802f18 <pause>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804394:	d809883a 	mov	r4,sp
  804398:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  80439c:	803fa41e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  8043a0:	003fd906 	br	804308 <cmdProcessing+0x100>
			break;
		case 2:
			pause(atoi(cmd->parameters[0]));
			break;
		case 3:
			stop();
  8043a4:	0802e7c0 	call	802e7c <stop>
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  8043a8:	843fffc4 	addi	r16,r16,-1
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  8043ac:	d809883a 	mov	r4,sp
  8043b0:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  8043b4:	803f9e1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  8043b8:	003fd306 	br	804308 <cmdProcessing+0x100>
			break;
		case 3:
			stop();
			break;
		case 4:
			setVolume(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  8043bc:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  8043c0:	843fffc4 	addi	r16,r16,-1
			break;
		case 3:
			stop();
			break;
		case 4:
			setVolume(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  8043c4:	11000017 	ldw	r4,0(r2)
  8043c8:	08215640 	call	821564 <atoi>
  8043cc:	1023883a 	mov	r17,r2
  8043d0:	d8800017 	ldw	r2,0(sp)
  8043d4:	10c00317 	ldw	r3,12(r2)
  8043d8:	19000117 	ldw	r4,4(r3)
  8043dc:	08215640 	call	821564 <atoi>
  8043e0:	100b883a 	mov	r5,r2
  8043e4:	8809883a 	mov	r4,r17
  8043e8:	0802e2c0 	call	802e2c <setVolume>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  8043ec:	d809883a 	mov	r4,sp
  8043f0:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  8043f4:	803f8e1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  8043f8:	003fc306 	br	804308 <cmdProcessing+0x100>
			break;
		case 4:
			setVolume(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
			break;
		case 5:
			seek(atoi(cmd->parameters[0]));
  8043fc:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804400:	843fffc4 	addi	r16,r16,-1
			break;
		case 4:
			setVolume(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
			break;
		case 5:
			seek(atoi(cmd->parameters[0]));
  804404:	11000017 	ldw	r4,0(r2)
  804408:	08215640 	call	821564 <atoi>
  80440c:	1009883a 	mov	r4,r2
  804410:	0802be00 	call	802be0 <seek>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804414:	d809883a 	mov	r4,sp
  804418:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  80441c:	803f841e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804420:	003fb906 	br	804308 <cmdProcessing+0x100>
			break;
		case 5:
			seek(atoi(cmd->parameters[0]));
			break;
		case 6:
			next(atoi(cmd->parameters[0]));
  804424:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804428:	843fffc4 	addi	r16,r16,-1
			break;
		case 5:
			seek(atoi(cmd->parameters[0]));
			break;
		case 6:
			next(atoi(cmd->parameters[0]));
  80442c:	11000017 	ldw	r4,0(r2)
  804430:	08215640 	call	821564 <atoi>
  804434:	1009883a 	mov	r4,r2
  804438:	08035640 	call	803564 <next>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  80443c:	d809883a 	mov	r4,sp
  804440:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804444:	803f7a1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804448:	003faf06 	br	804308 <cmdProcessing+0x100>
			break;
		case 6:
			next(atoi(cmd->parameters[0]));
			break;
		case 7:
			prev(atoi(cmd->parameters[0]));
  80444c:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804450:	843fffc4 	addi	r16,r16,-1
			break;
		case 6:
			next(atoi(cmd->parameters[0]));
			break;
		case 7:
			prev(atoi(cmd->parameters[0]));
  804454:	11000017 	ldw	r4,0(r2)
  804458:	08215640 	call	821564 <atoi>
  80445c:	1009883a 	mov	r4,r2
  804460:	08036ac0 	call	8036ac <prev>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804464:	d809883a 	mov	r4,sp
  804468:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  80446c:	803f701e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804470:	003fa506 	br	804308 <cmdProcessing+0x100>
			break;
		case 7:
			prev(atoi(cmd->parameters[0]));
			break;
		case 8:
			createPlaylist(cmd->parameters[0]);
  804474:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804478:	843fffc4 	addi	r16,r16,-1
			break;
		case 7:
			prev(atoi(cmd->parameters[0]));
			break;
		case 8:
			createPlaylist(cmd->parameters[0]);
  80447c:	11000017 	ldw	r4,0(r2)
  804480:	0802df00 	call	802df0 <createPlaylist>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804484:	d809883a 	mov	r4,sp
  804488:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  80448c:	803f681e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804490:	003f9d06 	br	804308 <cmdProcessing+0x100>
			break;
		case 10:
			//empty command for DE2
			break;
		case 11:
			selectList(atoi(cmd->parameters[0]));
  804494:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804498:	843fffc4 	addi	r16,r16,-1
			break;
		case 10:
			//empty command for DE2
			break;
		case 11:
			selectList(atoi(cmd->parameters[0]));
  80449c:	11000017 	ldw	r4,0(r2)
  8044a0:	08215640 	call	821564 <atoi>
  8044a4:	1009883a 	mov	r4,r2
  8044a8:	0802b880 	call	802b88 <selectList>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  8044ac:	d809883a 	mov	r4,sp
  8044b0:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  8044b4:	803f5e1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  8044b8:	003f9306 	br	804308 <cmdProcessing+0x100>
			break;
		case 12:
			//empty command for DE2
			break;
		case 13:
			addSongToList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  8044bc:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  8044c0:	843fffc4 	addi	r16,r16,-1
			break;
		case 12:
			//empty command for DE2
			break;
		case 13:
			addSongToList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  8044c4:	11000017 	ldw	r4,0(r2)
  8044c8:	08215640 	call	821564 <atoi>
  8044cc:	1023883a 	mov	r17,r2
  8044d0:	d8800017 	ldw	r2,0(sp)
  8044d4:	10c00317 	ldw	r3,12(r2)
  8044d8:	19000117 	ldw	r4,4(r3)
  8044dc:	08215640 	call	821564 <atoi>
  8044e0:	100b883a 	mov	r5,r2
  8044e4:	8809883a 	mov	r4,r17
  8044e8:	0802a940 	call	802a94 <addSongToList>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  8044ec:	d809883a 	mov	r4,sp
  8044f0:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  8044f4:	803f4e1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  8044f8:	003f8306 	br	804308 <cmdProcessing+0x100>
			break;
		case 14:
			//empty
			break;
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  8044fc:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804500:	843fffc4 	addi	r16,r16,-1
			break;
		case 14:
			//empty
			break;
		case 15:
			removeSongFromList(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]));
  804504:	11000017 	ldw	r4,0(r2)
  804508:	08215640 	call	821564 <atoi>
  80450c:	1023883a 	mov	r17,r2
  804510:	d8800017 	ldw	r2,0(sp)
  804514:	10c00317 	ldw	r3,12(r2)
  804518:	19000117 	ldw	r4,4(r3)
  80451c:	08215640 	call	821564 <atoi>
  804520:	100b883a 	mov	r5,r2
  804524:	8809883a 	mov	r4,r17
  804528:	0802a000 	call	802a00 <removeSongFromList>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  80452c:	d809883a 	mov	r4,sp
  804530:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804534:	803f3e1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804538:	003f7306 	br	804308 <cmdProcessing+0x100>
			break;
		case 16:
			//empty
			break;
		case 17:
			repeatList(atoi(cmd->parameters[0]));
  80453c:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804540:	843fffc4 	addi	r16,r16,-1
			break;
		case 16:
			//empty
			break;
		case 17:
			repeatList(atoi(cmd->parameters[0]));
  804544:	11000017 	ldw	r4,0(r2)
  804548:	08215640 	call	821564 <atoi>
  80454c:	1009883a 	mov	r4,r2
  804550:	08029a00 	call	8029a0 <repeatList>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804554:	d809883a 	mov	r4,sp
  804558:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  80455c:	803f341e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804560:	003f6906 	br	804308 <cmdProcessing+0x100>
			break;
		case 17:
			repeatList(atoi(cmd->parameters[0]));
			break;
		case 18:
			modifyListName(atoi(cmd->parameters[0]), cmd->parameters[1]);
  804564:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804568:	843fffc4 	addi	r16,r16,-1
			break;
		case 17:
			repeatList(atoi(cmd->parameters[0]));
			break;
		case 18:
			modifyListName(atoi(cmd->parameters[0]), cmd->parameters[1]);
  80456c:	11000017 	ldw	r4,0(r2)
  804570:	08215640 	call	821564 <atoi>
  804574:	1009883a 	mov	r4,r2
  804578:	d8800017 	ldw	r2,0(sp)
  80457c:	10c00317 	ldw	r3,12(r2)
  804580:	19400117 	ldw	r5,4(r3)
  804584:	0802d6c0 	call	802d6c <modifyListName>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804588:	d809883a 	mov	r4,sp
  80458c:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804590:	803f271e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804594:	003f5c06 	br	804308 <cmdProcessing+0x100>
			break;
		case 18:
			modifyListName(atoi(cmd->parameters[0]), cmd->parameters[1]);
			break;
		case 19:
			removeList(atoi(cmd->parameters[0]));
  804598:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  80459c:	843fffc4 	addi	r16,r16,-1
			break;
		case 18:
			modifyListName(atoi(cmd->parameters[0]), cmd->parameters[1]);
			break;
		case 19:
			removeList(atoi(cmd->parameters[0]));
  8045a0:	11000017 	ldw	r4,0(r2)
  8045a4:	08215640 	call	821564 <atoi>
  8045a8:	1009883a 	mov	r4,r2
  8045ac:	0802c6c0 	call	802c6c <removeList>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  8045b0:	d809883a 	mov	r4,sp
  8045b4:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  8045b8:	803f1d1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  8045bc:	003f5206 	br	804308 <cmdProcessing+0x100>
			break;
		case 19:
			removeList(atoi(cmd->parameters[0]));
			break;
		case 20:
			playSongFromAllSongs(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
  8045c0:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  8045c4:	843fffc4 	addi	r16,r16,-1
			break;
		case 19:
			removeList(atoi(cmd->parameters[0]));
			break;
		case 20:
			playSongFromAllSongs(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
  8045c8:	11000017 	ldw	r4,0(r2)
  8045cc:	08215640 	call	821564 <atoi>
  8045d0:	1027883a 	mov	r19,r2
  8045d4:	d8800017 	ldw	r2,0(sp)
  8045d8:	10c00317 	ldw	r3,12(r2)
  8045dc:	19000117 	ldw	r4,4(r3)
  8045e0:	08215640 	call	821564 <atoi>
  8045e4:	1023883a 	mov	r17,r2
  8045e8:	d8800017 	ldw	r2,0(sp)
  8045ec:	10c00317 	ldw	r3,12(r2)
  8045f0:	19000217 	ldw	r4,8(r3)
  8045f4:	08215640 	call	821564 <atoi>
  8045f8:	880b883a 	mov	r5,r17
  8045fc:	9809883a 	mov	r4,r19
  804600:	100d883a 	mov	r6,r2
  804604:	0802c3c0 	call	802c3c <playSongFromAllSongs>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804608:	d809883a 	mov	r4,sp
  80460c:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804610:	803f071e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804614:	003f3c06 	br	804308 <cmdProcessing+0x100>
			break;
		case 20:
			playSongFromAllSongs(atoi(cmd->parameters[0]), atoi(cmd->parameters[1]), atoi(cmd->parameters[2]));
			break;
		case 21:
			openAllSongPanel();
  804618:	0802c1c0 	call	802c1c <openAllSongPanel>
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  80461c:	843fffc4 	addi	r16,r16,-1
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804620:	d809883a 	mov	r4,sp
  804624:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804628:	803f011e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  80462c:	003f3606 	br	804308 <cmdProcessing+0x100>
			break;
		case 21:
			openAllSongPanel();
			break;
		case 22:
			openPlaylistsPanel();
  804630:	0802bfc0 	call	802bfc <openPlaylistsPanel>
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  804634:	843fffc4 	addi	r16,r16,-1
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804638:	d809883a 	mov	r4,sp
  80463c:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804640:	803efb1e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  804644:	003f3006 	br	804308 <cmdProcessing+0x100>
			break;
		case 22:
			openPlaylistsPanel();
			break;
		case 23:
			openSongsFromList(atoi(cmd->parameters[0]));
  804648:	28800317 	ldw	r2,12(r5)
			break;
		default:
			break;
		}
		killCmd(&cmd);
		num_cmds--;
  80464c:	843fffc4 	addi	r16,r16,-1
			break;
		case 22:
			openPlaylistsPanel();
			break;
		case 23:
			openSongsFromList(atoi(cmd->parameters[0]));
  804650:	11000017 	ldw	r4,0(r2)
  804654:	08215640 	call	821564 <atoi>
  804658:	1009883a 	mov	r4,r2
  80465c:	0802bf00 	call	802bf0 <openSongsFromList>
		case 25:
			break;
		default:
			break;
		}
		killCmd(&cmd);
  804660:	d809883a 	mov	r4,sp
  804664:	0802cbc0 	call	802cbc <killCmd>
 */
void cmdProcessing(struct CmdScheduler* this) {
	if(this->cmds->size <= 0 || this == NULL) return;
	int num_cmds = this->cmds->size;
	struct Command* cmd;
	while(num_cmds > 0) {
  804668:	803ef11e 	bne	r16,zero,804230 <cmdProcessing+0x28>
  80466c:	003f2606 	br	804308 <cmdProcessing+0x100>

00804670 <addCmd>:

/*
 * Add command to the scheduler
 */
void addCmd(struct CmdScheduler* this, struct Command* cmd) {
	enqueue(this->cmds, (void*)cmd);
  804670:	21000017 	ldw	r4,0(r4)
  804674:	080b6941 	jmpi	80b694 <enqueue>

00804678 <initCmdScheduler>:
 *      Author: danny
 */

#include "CommandScheduler.h"

struct CmdScheduler* initCmdScheduler() {
  804678:	defffe04 	addi	sp,sp,-8
	struct CmdScheduler* this = (struct CmdScheduler*)malloc(sizeof(struct CmdScheduler));
  80467c:	01000104 	movi	r4,4
 *      Author: danny
 */

#include "CommandScheduler.h"

struct CmdScheduler* initCmdScheduler() {
  804680:	dfc00115 	stw	ra,4(sp)
  804684:	dc400015 	stw	r17,0(sp)
	struct CmdScheduler* this = (struct CmdScheduler*)malloc(sizeof(struct CmdScheduler));
  804688:	08216fc0 	call	8216fc <malloc>
  80468c:	1023883a 	mov	r17,r2
	this->cmds = initQueue();
  804690:	080b66c0 	call	80b66c <initQueue>
  804694:	88800015 	stw	r2,0(r17)
	return this;
}
  804698:	8805883a 	mov	r2,r17
  80469c:	dfc00117 	ldw	ra,4(sp)
  8046a0:	dc400017 	ldw	r17,0(sp)
  8046a4:	dec00204 	addi	sp,sp,8
  8046a8:	f800283a 	ret

008046ac <getCursorX>:
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
		}
	}
}

int getCursorX(struct Cursor* this) {
  8046ac:	20800017 	ldw	r2,0(r4)
  8046b0:	10c00017 	ldw	r3,0(r2)
	return this->super->r->x;
}
  8046b4:	18800017 	ldw	r2,0(r3)
  8046b8:	f800283a 	ret

008046bc <getCursorY>:

int getCursorY(struct Cursor* this) {
  8046bc:	20800017 	ldw	r2,0(r4)
  8046c0:	10c00017 	ldw	r3,0(r2)
	return this->super->r->y;
}
  8046c4:	18800117 	ldw	r2,4(r3)
  8046c8:	f800283a 	ret

008046cc <memOverlap>:
		}
		setXY_noBound(this->super, x, y);*/
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
  8046cc:	20800017 	ldw	r2,0(r4)
  8046d0:	11400017 	ldw	r5,0(r2)
  8046d4:	28c00017 	ldw	r3,0(r5)
  8046d8:	18007d16 	blt	r3,zero,8048d0 <memOverlap+0x204>
  8046dc:	29800117 	ldw	r6,4(r5)
  8046e0:	30007b16 	blt	r6,zero,8048d0 <memOverlap+0x204>
  8046e4:	00804ec4 	movi	r2,315
  8046e8:	10c07916 	blt	r2,r3,8048d0 <memOverlap+0x204>
  8046ec:	00803ac4 	movi	r2,235
  8046f0:	11807716 	blt	r2,r6,8048d0 <memOverlap+0x204>
  8046f4:	20c00117 	ldw	r3,4(r4)
  8046f8:	00802134 	movhi	r2,132
  8046fc:	108a3804 	addi	r2,r2,10464
  804700:	11c00017 	ldw	r7,0(r2)
  804704:	19800017 	ldw	r6,0(r3)
  804708:	0011883a 	mov	r8,zero
	int i, j;
	for(i = 0; i < 10; i++) {
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
  80470c:	28800117 	ldw	r2,4(r5)
  804710:	28c00017 	ldw	r3,0(r5)
  804714:	39000b17 	ldw	r4,44(r7)
  804718:	10805024 	muli	r2,r2,320
  80471c:	10c5883a 	add	r2,r2,r3
  804720:	1205883a 	add	r2,r2,r8
  804724:	1085883a 	add	r2,r2,r2
  804728:	1105883a 	add	r2,r2,r4
  80472c:	10c0002b 	ldhuio	r3,0(r2)
  804730:	30c00015 	stw	r3,0(r6)
  804734:	28800117 	ldw	r2,4(r5)
  804738:	28c00017 	ldw	r3,0(r5)
  80473c:	39000b17 	ldw	r4,44(r7)
  804740:	10800044 	addi	r2,r2,1
  804744:	10805024 	muli	r2,r2,320
  804748:	10c5883a 	add	r2,r2,r3
  80474c:	1205883a 	add	r2,r2,r8
  804750:	1085883a 	add	r2,r2,r2
  804754:	1105883a 	add	r2,r2,r4
  804758:	10c0002b 	ldhuio	r3,0(r2)
  80475c:	30c00a15 	stw	r3,40(r6)
  804760:	28800117 	ldw	r2,4(r5)
  804764:	28c00017 	ldw	r3,0(r5)
  804768:	39000b17 	ldw	r4,44(r7)
  80476c:	10800084 	addi	r2,r2,2
  804770:	10805024 	muli	r2,r2,320
  804774:	10c5883a 	add	r2,r2,r3
  804778:	1205883a 	add	r2,r2,r8
  80477c:	1085883a 	add	r2,r2,r2
  804780:	1105883a 	add	r2,r2,r4
  804784:	10c0002b 	ldhuio	r3,0(r2)
  804788:	30c01415 	stw	r3,80(r6)
  80478c:	28800117 	ldw	r2,4(r5)
  804790:	28c00017 	ldw	r3,0(r5)
  804794:	39000b17 	ldw	r4,44(r7)
  804798:	108000c4 	addi	r2,r2,3
  80479c:	10805024 	muli	r2,r2,320
  8047a0:	10c5883a 	add	r2,r2,r3
  8047a4:	1205883a 	add	r2,r2,r8
  8047a8:	1085883a 	add	r2,r2,r2
  8047ac:	1105883a 	add	r2,r2,r4
  8047b0:	10c0002b 	ldhuio	r3,0(r2)
  8047b4:	30c01e15 	stw	r3,120(r6)
  8047b8:	28800117 	ldw	r2,4(r5)
  8047bc:	28c00017 	ldw	r3,0(r5)
  8047c0:	39000b17 	ldw	r4,44(r7)
  8047c4:	10800104 	addi	r2,r2,4
  8047c8:	10805024 	muli	r2,r2,320
  8047cc:	10c5883a 	add	r2,r2,r3
  8047d0:	1205883a 	add	r2,r2,r8
  8047d4:	1085883a 	add	r2,r2,r2
  8047d8:	1105883a 	add	r2,r2,r4
  8047dc:	10c0002b 	ldhuio	r3,0(r2)
  8047e0:	30c02815 	stw	r3,160(r6)
  8047e4:	28800117 	ldw	r2,4(r5)
  8047e8:	28c00017 	ldw	r3,0(r5)
  8047ec:	39000b17 	ldw	r4,44(r7)
  8047f0:	10800144 	addi	r2,r2,5
  8047f4:	10805024 	muli	r2,r2,320
  8047f8:	10c5883a 	add	r2,r2,r3
  8047fc:	1205883a 	add	r2,r2,r8
  804800:	1085883a 	add	r2,r2,r2
  804804:	1105883a 	add	r2,r2,r4
  804808:	10c0002b 	ldhuio	r3,0(r2)
  80480c:	30c03215 	stw	r3,200(r6)
  804810:	28800117 	ldw	r2,4(r5)
  804814:	28c00017 	ldw	r3,0(r5)
  804818:	39000b17 	ldw	r4,44(r7)
  80481c:	10800184 	addi	r2,r2,6
  804820:	10805024 	muli	r2,r2,320
  804824:	10c5883a 	add	r2,r2,r3
  804828:	1205883a 	add	r2,r2,r8
  80482c:	1085883a 	add	r2,r2,r2
  804830:	1105883a 	add	r2,r2,r4
  804834:	10c0002b 	ldhuio	r3,0(r2)
  804838:	30c03c15 	stw	r3,240(r6)
  80483c:	28800117 	ldw	r2,4(r5)
  804840:	28c00017 	ldw	r3,0(r5)
  804844:	39000b17 	ldw	r4,44(r7)
  804848:	108001c4 	addi	r2,r2,7
  80484c:	10805024 	muli	r2,r2,320
  804850:	10c5883a 	add	r2,r2,r3
  804854:	1205883a 	add	r2,r2,r8
  804858:	1085883a 	add	r2,r2,r2
  80485c:	1105883a 	add	r2,r2,r4
  804860:	10c0002b 	ldhuio	r3,0(r2)
  804864:	30c04615 	stw	r3,280(r6)
  804868:	28800117 	ldw	r2,4(r5)
  80486c:	28c00017 	ldw	r3,0(r5)
  804870:	39000b17 	ldw	r4,44(r7)
  804874:	10800204 	addi	r2,r2,8
  804878:	10805024 	muli	r2,r2,320
  80487c:	10c5883a 	add	r2,r2,r3
  804880:	1205883a 	add	r2,r2,r8
  804884:	1085883a 	add	r2,r2,r2
  804888:	1105883a 	add	r2,r2,r4
  80488c:	10c0002b 	ldhuio	r3,0(r2)
  804890:	30c05015 	stw	r3,320(r6)
  804894:	28800117 	ldw	r2,4(r5)
  804898:	28c00017 	ldw	r3,0(r5)
  80489c:	39000b17 	ldw	r4,44(r7)
  8048a0:	10800244 	addi	r2,r2,9
  8048a4:	10805024 	muli	r2,r2,320
  8048a8:	10c5883a 	add	r2,r2,r3
  8048ac:	1205883a 	add	r2,r2,r8
  8048b0:	1085883a 	add	r2,r2,r2
  8048b4:	1105883a 	add	r2,r2,r4
  8048b8:	10c0002b 	ldhuio	r3,0(r2)
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  8048bc:	00800284 	movi	r2,10
  8048c0:	42000044 	addi	r8,r8,1
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
  8048c4:	30c05a15 	stw	r3,360(r6)
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  8048c8:	31800104 	addi	r6,r6,4
  8048cc:	40bf8f1e 	bne	r8,r2,80470c <memOverlap+0x40>
  8048d0:	f800283a 	ret

008048d4 <moveCursor>:
	alt_up_ps2_enable_read_interrupt(up_dev.ps2_dev);
	alt_irq_register(PS2_0_IRQ, this, (void*)ps2_ISR);
	//alt_irq_enable(PS2_0_IRQ);
}
void moveCursor(struct Cursor* this, int dx, int dy) {
	setNextXY(this->super, this->super->r->x + dx, this->super->r->y - dy);
  8048d4:	21000017 	ldw	r4,0(r4)
  8048d8:	20800017 	ldw	r2,0(r4)
  8048dc:	10c00117 	ldw	r3,4(r2)
  8048e0:	11c00017 	ldw	r7,0(r2)
  8048e4:	198dc83a 	sub	r6,r3,r6
  8048e8:	29cb883a 	add	r5,r5,r7
  8048ec:	080ae501 	jmpi	80ae50 <setNextXY>

008048f0 <enableCursorInterrupt>:
	this->isRightPressed = false;
	enableCursorInterrupt(this);
	return this;
}

void enableCursorInterrupt(struct Cursor* this) {
  8048f0:	defffe04 	addi	sp,sp,-8
	alt_up_ps2_enable_read_interrupt(up_dev.ps2_dev);
  8048f4:	00802174 	movhi	r2,133
  8048f8:	10b3a104 	addi	r2,r2,-12668
	this->isRightPressed = false;
	enableCursorInterrupt(this);
	return this;
}

void enableCursorInterrupt(struct Cursor* this) {
  8048fc:	dc400015 	stw	r17,0(sp)
  804900:	2023883a 	mov	r17,r4
	alt_up_ps2_enable_read_interrupt(up_dev.ps2_dev);
  804904:	11000217 	ldw	r4,8(r2)
	this->isRightPressed = false;
	enableCursorInterrupt(this);
	return this;
}

void enableCursorInterrupt(struct Cursor* this) {
  804908:	dfc00115 	stw	ra,4(sp)
	alt_up_ps2_enable_read_interrupt(up_dev.ps2_dev);
  80490c:	082c5540 	call	82c554 <alt_up_ps2_enable_read_interrupt>
	alt_irq_register(PS2_0_IRQ, this, (void*)ps2_ISR);
  804910:	880b883a 	mov	r5,r17
  804914:	010000c4 	movi	r4,3
  804918:	01802074 	movhi	r6,129
  80491c:	31a9e604 	addi	r6,r6,-22632
	//alt_irq_enable(PS2_0_IRQ);
}
  804920:	dfc00117 	ldw	ra,4(sp)
  804924:	dc400017 	ldw	r17,0(sp)
  804928:	dec00204 	addi	sp,sp,8
	return this;
}

void enableCursorInterrupt(struct Cursor* this) {
	alt_up_ps2_enable_read_interrupt(up_dev.ps2_dev);
	alt_irq_register(PS2_0_IRQ, this, (void*)ps2_ISR);
  80492c:	082acec1 	jmpi	82acec <alt_irq_register>

00804930 <initCursor>:

#include "Cursor.h"

int cursor_lock;

struct Cursor* initCursor(int x, int y, struct Frame* f) {
  804930:	defff804 	addi	sp,sp,-32
  804934:	dd000515 	stw	r20,20(sp)
  804938:	2029883a 	mov	r20,r4
	up_dev.ps2_dev = alt_up_ps2_open_dev("/dev/ps2_0");
  80493c:	010020f4 	movhi	r4,131
  804940:	210cb104 	addi	r4,r4,12996

#include "Cursor.h"

int cursor_lock;

struct Cursor* initCursor(int x, int y, struct Frame* f) {
  804944:	dfc00715 	stw	ra,28(sp)
  804948:	dd400615 	stw	r21,24(sp)
  80494c:	dcc00415 	stw	r19,16(sp)
  804950:	302b883a 	mov	r21,r6
  804954:	2827883a 	mov	r19,r5
  804958:	dc800315 	stw	r18,12(sp)
  80495c:	dc000115 	stw	r16,4(sp)
  804960:	dc400215 	stw	r17,8(sp)
	up_dev.ps2_dev = alt_up_ps2_open_dev("/dev/ps2_0");
  804964:	082c4c40 	call	82c4c4 <alt_up_ps2_open_dev>
	up_dev.ps2_dev->timeout = 2000000;
  804968:	00c007f4 	movhi	r3,31
  80496c:	18e12004 	addi	r3,r3,-31616
  804970:	10c00c15 	stw	r3,48(r2)
	alt_up_ps2_clear_fifo(up_dev.ps2_dev);
  804974:	1009883a 	mov	r4,r2
#include "Cursor.h"

int cursor_lock;

struct Cursor* initCursor(int x, int y, struct Frame* f) {
	up_dev.ps2_dev = alt_up_ps2_open_dev("/dev/ps2_0");
  804978:	04802174 	movhi	r18,133
  80497c:	94b3a104 	addi	r18,r18,-12668
  804980:	90800215 	stw	r2,8(r18)
	up_dev.ps2_dev->timeout = 2000000;
	alt_up_ps2_clear_fifo(up_dev.ps2_dev);
  804984:	082c56c0 	call	82c56c <alt_up_ps2_clear_fifo>
	alt_up_ps2_init(up_dev.ps2_dev);
  804988:	91000217 	ldw	r4,8(r18)
  80498c:	082c6d00 	call	82c6d0 <alt_up_ps2_init>
	unsigned char byte1;
	alt_up_ps2_read_data_byte_timeout(up_dev.ps2_dev, &byte1);
  804990:	91000217 	ldw	r4,8(r18)
  804994:	d80b883a 	mov	r5,sp
  804998:	082c4d00 	call	82c4d0 <alt_up_ps2_read_data_byte_timeout>
	//while(alt_up_ps2_read_data_byte_timeout(up_dev.ps2_dev, &byte1)!=0);
	struct Cursor* this = (struct Cursor*)malloc(sizeof(struct Cursor));
  80499c:	01000404 	movi	r4,16
  8049a0:	08216fc0 	call	8216fc <malloc>
  8049a4:	1021883a 	mov	r16,r2
	struct Image* cursorImg;
	while(( cursorImg= loadSDImage("AR01.BMP")) == NULL);
  8049a8:	010020f4 	movhi	r4,131
  8049ac:	210cb404 	addi	r4,r4,13008
  8049b0:	08098080 	call	809808 <loadSDImage>
  8049b4:	1023883a 	mov	r17,r2
  8049b8:	103ffb26 	beq	r2,zero,8049a8 <initCursor+0x78>
	this->super = initObject(initRange(x, y, 10, 10), cursorImg, (void*)this);
  8049bc:	01800284 	movi	r6,10
  8049c0:	300f883a 	mov	r7,r6
  8049c4:	a009883a 	mov	r4,r20
  8049c8:	980b883a 	mov	r5,r19
  8049cc:	080c8280 	call	80c828 <initRange>
  8049d0:	1009883a 	mov	r4,r2
  8049d4:	880b883a 	mov	r5,r17
  8049d8:	800d883a 	mov	r6,r16
  8049dc:	080ae640 	call	80ae64 <initObject>
	this->frame = f;
	int* image = (int*)malloc(sizeof(int)*100);
  8049e0:	01006404 	movi	r4,400
	alt_up_ps2_read_data_byte_timeout(up_dev.ps2_dev, &byte1);
	//while(alt_up_ps2_read_data_byte_timeout(up_dev.ps2_dev, &byte1)!=0);
	struct Cursor* this = (struct Cursor*)malloc(sizeof(struct Cursor));
	struct Image* cursorImg;
	while(( cursorImg= loadSDImage("AR01.BMP")) == NULL);
	this->super = initObject(initRange(x, y, 10, 10), cursorImg, (void*)this);
  8049e4:	80800015 	stw	r2,0(r16)
	this->frame = f;
  8049e8:	85400315 	stw	r21,12(r16)
	int* image = (int*)malloc(sizeof(int)*100);
  8049ec:	08216fc0 	call	8216fc <malloc>
	memset(image, 0, sizeof(int)*100);
  8049f0:	1009883a 	mov	r4,r2
  8049f4:	000b883a 	mov	r5,zero
  8049f8:	01806404 	movi	r6,400
	struct Cursor* this = (struct Cursor*)malloc(sizeof(struct Cursor));
	struct Image* cursorImg;
	while(( cursorImg= loadSDImage("AR01.BMP")) == NULL);
	this->super = initObject(initRange(x, y, 10, 10), cursorImg, (void*)this);
	this->frame = f;
	int* image = (int*)malloc(sizeof(int)*100);
  8049fc:	1023883a 	mov	r17,r2
	memset(image, 0, sizeof(int)*100);
  804a00:	0821fd00 	call	821fd0 <memset>
	this->overlapImg = initImage(image, 0, 10, 10);
  804a04:	01800284 	movi	r6,10
  804a08:	300f883a 	mov	r7,r6
  804a0c:	8809883a 	mov	r4,r17
  804a10:	000b883a 	mov	r5,zero
  804a14:	08095140 	call	809514 <initImage>
	enableCursorInterrupt(this);
	return this;
}

void enableCursorInterrupt(struct Cursor* this) {
	alt_up_ps2_enable_read_interrupt(up_dev.ps2_dev);
  804a18:	91000217 	ldw	r4,8(r18)
	while(( cursorImg= loadSDImage("AR01.BMP")) == NULL);
	this->super = initObject(initRange(x, y, 10, 10), cursorImg, (void*)this);
	this->frame = f;
	int* image = (int*)malloc(sizeof(int)*100);
	memset(image, 0, sizeof(int)*100);
	this->overlapImg = initImage(image, 0, 10, 10);
  804a1c:	80800115 	stw	r2,4(r16)
	this->isLeftPressed = false;
  804a20:	80000205 	stb	zero,8(r16)
	this->isRightPressed = false;
  804a24:	80000245 	stb	zero,9(r16)
	enableCursorInterrupt(this);
	return this;
}

void enableCursorInterrupt(struct Cursor* this) {
	alt_up_ps2_enable_read_interrupt(up_dev.ps2_dev);
  804a28:	082c5540 	call	82c554 <alt_up_ps2_enable_read_interrupt>
	alt_irq_register(PS2_0_IRQ, this, (void*)ps2_ISR);
  804a2c:	800b883a 	mov	r5,r16
  804a30:	010000c4 	movi	r4,3
  804a34:	01802074 	movhi	r6,129
  804a38:	31a9e604 	addi	r6,r6,-22632
  804a3c:	082acec0 	call	82acec <alt_irq_register>
	this->overlapImg = initImage(image, 0, 10, 10);
	this->isLeftPressed = false;
	this->isRightPressed = false;
	enableCursorInterrupt(this);
	return this;
}
  804a40:	8005883a 	mov	r2,r16
  804a44:	dfc00717 	ldw	ra,28(sp)
  804a48:	dd400617 	ldw	r21,24(sp)
  804a4c:	dd000517 	ldw	r20,20(sp)
  804a50:	dcc00417 	ldw	r19,16(sp)
  804a54:	dc800317 	ldw	r18,12(sp)
  804a58:	dc400217 	ldw	r17,8(sp)
  804a5c:	dc000117 	ldw	r16,4(sp)
  804a60:	dec00804 	addi	sp,sp,32
  804a64:	f800283a 	ret

00804a68 <updateCursor>:
void moveCursor(struct Cursor* this, int dx, int dy) {
	setNextXY(this->super, this->super->r->x + dx, this->super->r->y - dy);
}
void updateCursor(struct Cursor* this) {
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
  804a68:	20800017 	ldw	r2,0(r4)
	//alt_irq_enable(PS2_0_IRQ);
}
void moveCursor(struct Cursor* this, int dx, int dy) {
	setNextXY(this->super, this->super->r->x + dx, this->super->r->y - dy);
}
void updateCursor(struct Cursor* this) {
  804a6c:	defffe04 	addi	sp,sp,-8
  804a70:	dc000015 	stw	r16,0(sp)
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
  804a74:	11400017 	ldw	r5,0(r2)
  804a78:	10c00117 	ldw	r3,4(r2)
	//alt_irq_enable(PS2_0_IRQ);
}
void moveCursor(struct Cursor* this, int dx, int dy) {
	setNextXY(this->super, this->super->r->x + dx, this->super->r->y - dy);
}
void updateCursor(struct Cursor* this) {
  804a7c:	2021883a 	mov	r16,r4
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
  804a80:	29000017 	ldw	r4,0(r5)
  804a84:	18800017 	ldw	r2,0(r3)
	//alt_irq_enable(PS2_0_IRQ);
}
void moveCursor(struct Cursor* this, int dx, int dy) {
	setNextXY(this->super, this->super->r->x + dx, this->super->r->y - dy);
}
void updateCursor(struct Cursor* this) {
  804a88:	dfc00115 	stw	ra,4(sp)
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
  804a8c:	11009926 	beq	r2,r4,804cf4 <updateCursor+0x28c>
  804a90:	29400117 	ldw	r5,4(r5)
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
  804a94:	81800117 	ldw	r6,4(r16)
  804a98:	08097380 	call	809738 <draw_notransparent>
	setXY(this->super, this->super->next_r->x, this->super->next_r->y);
  804a9c:	81000017 	ldw	r4,0(r16)
  804aa0:	20800117 	ldw	r2,4(r4)
  804aa4:	11400017 	ldw	r5,0(r2)
  804aa8:	11800117 	ldw	r6,4(r2)
  804aac:	080ae240 	call	80ae24 <setXY>
		}
		setXY_noBound(this->super, x, y);*/
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
  804ab0:	82400017 	ldw	r9,0(r16)
  804ab4:	49400017 	ldw	r5,0(r9)
  804ab8:	28c00017 	ldw	r3,0(r5)
  804abc:	18000416 	blt	r3,zero,804ad0 <updateCursor+0x68>
  804ac0:	29000117 	ldw	r4,4(r5)
  804ac4:	20000216 	blt	r4,zero,804ad0 <updateCursor+0x68>
  804ac8:	00804ec4 	movi	r2,315
  804acc:	10c0080e 	bge	r2,r3,804af0 <updateCursor+0x88>
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
	setXY(this->super, this->super->next_r->x, this->super->next_r->y);
	memOverlap(this);
	draw(this->super->r->x, this->super->r->y, this->super->img);
  804ad0:	48800017 	ldw	r2,0(r9)
  804ad4:	49800217 	ldw	r6,8(r9)
  804ad8:	11400117 	ldw	r5,4(r2)
  804adc:	11000017 	ldw	r4,0(r2)
					this->selectedObj = this->super;
				}
			}
		}
		setXY_noBound(this->super, x, y);*/
}
  804ae0:	dfc00117 	ldw	ra,4(sp)
  804ae4:	dc000017 	ldw	r16,0(sp)
  804ae8:	dec00204 	addi	sp,sp,8
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
	setXY(this->super, this->super->next_r->x, this->super->next_r->y);
	memOverlap(this);
	draw(this->super->r->x, this->super->r->y, this->super->img);
  804aec:	080965c1 	jmpi	80965c <draw>
		}
		setXY_noBound(this->super, x, y);*/
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
  804af0:	00803ac4 	movi	r2,235
  804af4:	113ff616 	blt	r2,r4,804ad0 <updateCursor+0x68>
  804af8:	80c00117 	ldw	r3,4(r16)
  804afc:	00802134 	movhi	r2,132
  804b00:	108a3804 	addi	r2,r2,10464
  804b04:	11c00017 	ldw	r7,0(r2)
  804b08:	19800017 	ldw	r6,0(r3)
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
	setXY(this->super, this->super->next_r->x, this->super->next_r->y);
	memOverlap(this);
	draw(this->super->r->x, this->super->r->y, this->super->img);
  804b0c:	0011883a 	mov	r8,zero
void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
  804b10:	28800117 	ldw	r2,4(r5)
  804b14:	28c00017 	ldw	r3,0(r5)
  804b18:	39000b17 	ldw	r4,44(r7)
  804b1c:	10805024 	muli	r2,r2,320
  804b20:	10c5883a 	add	r2,r2,r3
  804b24:	4085883a 	add	r2,r8,r2
  804b28:	1085883a 	add	r2,r2,r2
  804b2c:	1105883a 	add	r2,r2,r4
  804b30:	10c0002b 	ldhuio	r3,0(r2)
  804b34:	30c00015 	stw	r3,0(r6)
  804b38:	28800117 	ldw	r2,4(r5)
  804b3c:	28c00017 	ldw	r3,0(r5)
  804b40:	39000b17 	ldw	r4,44(r7)
  804b44:	10800044 	addi	r2,r2,1
  804b48:	10805024 	muli	r2,r2,320
  804b4c:	10c5883a 	add	r2,r2,r3
  804b50:	4085883a 	add	r2,r8,r2
  804b54:	1085883a 	add	r2,r2,r2
  804b58:	1105883a 	add	r2,r2,r4
  804b5c:	10c0002b 	ldhuio	r3,0(r2)
  804b60:	30c00a15 	stw	r3,40(r6)
  804b64:	28800117 	ldw	r2,4(r5)
  804b68:	28c00017 	ldw	r3,0(r5)
  804b6c:	39000b17 	ldw	r4,44(r7)
  804b70:	10800084 	addi	r2,r2,2
  804b74:	10805024 	muli	r2,r2,320
  804b78:	10c5883a 	add	r2,r2,r3
  804b7c:	4085883a 	add	r2,r8,r2
  804b80:	1085883a 	add	r2,r2,r2
  804b84:	1105883a 	add	r2,r2,r4
  804b88:	10c0002b 	ldhuio	r3,0(r2)
  804b8c:	30c01415 	stw	r3,80(r6)
  804b90:	28800117 	ldw	r2,4(r5)
  804b94:	28c00017 	ldw	r3,0(r5)
  804b98:	39000b17 	ldw	r4,44(r7)
  804b9c:	108000c4 	addi	r2,r2,3
  804ba0:	10805024 	muli	r2,r2,320
  804ba4:	10c5883a 	add	r2,r2,r3
  804ba8:	4085883a 	add	r2,r8,r2
  804bac:	1085883a 	add	r2,r2,r2
  804bb0:	1105883a 	add	r2,r2,r4
  804bb4:	10c0002b 	ldhuio	r3,0(r2)
  804bb8:	30c01e15 	stw	r3,120(r6)
  804bbc:	28800117 	ldw	r2,4(r5)
  804bc0:	28c00017 	ldw	r3,0(r5)
  804bc4:	39000b17 	ldw	r4,44(r7)
  804bc8:	10800104 	addi	r2,r2,4
  804bcc:	10805024 	muli	r2,r2,320
  804bd0:	10c5883a 	add	r2,r2,r3
  804bd4:	4085883a 	add	r2,r8,r2
  804bd8:	1085883a 	add	r2,r2,r2
  804bdc:	1105883a 	add	r2,r2,r4
  804be0:	10c0002b 	ldhuio	r3,0(r2)
  804be4:	30c02815 	stw	r3,160(r6)
  804be8:	28800117 	ldw	r2,4(r5)
  804bec:	28c00017 	ldw	r3,0(r5)
  804bf0:	39000b17 	ldw	r4,44(r7)
  804bf4:	10800144 	addi	r2,r2,5
  804bf8:	10805024 	muli	r2,r2,320
  804bfc:	10c5883a 	add	r2,r2,r3
  804c00:	4085883a 	add	r2,r8,r2
  804c04:	1085883a 	add	r2,r2,r2
  804c08:	1105883a 	add	r2,r2,r4
  804c0c:	10c0002b 	ldhuio	r3,0(r2)
  804c10:	30c03215 	stw	r3,200(r6)
  804c14:	28800117 	ldw	r2,4(r5)
  804c18:	28c00017 	ldw	r3,0(r5)
  804c1c:	39000b17 	ldw	r4,44(r7)
  804c20:	10800184 	addi	r2,r2,6
  804c24:	10805024 	muli	r2,r2,320
  804c28:	10c5883a 	add	r2,r2,r3
  804c2c:	4085883a 	add	r2,r8,r2
  804c30:	1085883a 	add	r2,r2,r2
  804c34:	1105883a 	add	r2,r2,r4
  804c38:	10c0002b 	ldhuio	r3,0(r2)
  804c3c:	30c03c15 	stw	r3,240(r6)
  804c40:	28800117 	ldw	r2,4(r5)
  804c44:	28c00017 	ldw	r3,0(r5)
  804c48:	39000b17 	ldw	r4,44(r7)
  804c4c:	108001c4 	addi	r2,r2,7
  804c50:	10805024 	muli	r2,r2,320
  804c54:	10c5883a 	add	r2,r2,r3
  804c58:	4085883a 	add	r2,r8,r2
  804c5c:	1085883a 	add	r2,r2,r2
  804c60:	1105883a 	add	r2,r2,r4
  804c64:	10c0002b 	ldhuio	r3,0(r2)
  804c68:	30c04615 	stw	r3,280(r6)
  804c6c:	28800117 	ldw	r2,4(r5)
  804c70:	28c00017 	ldw	r3,0(r5)
  804c74:	39000b17 	ldw	r4,44(r7)
  804c78:	10800204 	addi	r2,r2,8
  804c7c:	10805024 	muli	r2,r2,320
  804c80:	10c5883a 	add	r2,r2,r3
  804c84:	4085883a 	add	r2,r8,r2
  804c88:	1085883a 	add	r2,r2,r2
  804c8c:	1105883a 	add	r2,r2,r4
  804c90:	10c0002b 	ldhuio	r3,0(r2)
  804c94:	30c05015 	stw	r3,320(r6)
  804c98:	28800117 	ldw	r2,4(r5)
  804c9c:	28c00017 	ldw	r3,0(r5)
  804ca0:	39000b17 	ldw	r4,44(r7)
  804ca4:	10800244 	addi	r2,r2,9
  804ca8:	10805024 	muli	r2,r2,320
  804cac:	10c5883a 	add	r2,r2,r3
  804cb0:	4085883a 	add	r2,r8,r2
  804cb4:	1085883a 	add	r2,r2,r2
  804cb8:	1105883a 	add	r2,r2,r4
  804cbc:	10c0002b 	ldhuio	r3,0(r2)
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  804cc0:	00800284 	movi	r2,10
  804cc4:	42000044 	addi	r8,r8,1
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg->buffer+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->r->x+(j+this->super->r->y)*320)*2);
  804cc8:	30c05a15 	stw	r3,360(r6)
}

void memOverlap(struct Cursor* this) {
	if(this->super->r->x < 0 || this->super->r->y < 0 || this->super->r->x > 315 || this->super->r->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  804ccc:	31800104 	addi	r6,r6,4
  804cd0:	40bf8f1e 	bne	r8,r2,804b10 <updateCursor+0xa8>
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
	setXY(this->super, this->super->next_r->x, this->super->next_r->y);
	memOverlap(this);
	draw(this->super->r->x, this->super->r->y, this->super->img);
  804cd4:	48800017 	ldw	r2,0(r9)
  804cd8:	49800217 	ldw	r6,8(r9)
  804cdc:	11400117 	ldw	r5,4(r2)
  804ce0:	11000017 	ldw	r4,0(r2)
					this->selectedObj = this->super;
				}
			}
		}
		setXY_noBound(this->super, x, y);*/
}
  804ce4:	dfc00117 	ldw	ra,4(sp)
  804ce8:	dc000017 	ldw	r16,0(sp)
  804cec:	dec00204 	addi	sp,sp,8
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
	draw_notransparent(this->super->r->x, this->super->r->y, this->overlapImg);
	setXY(this->super, this->super->next_r->x, this->super->next_r->y);
	memOverlap(this);
	draw(this->super->r->x, this->super->r->y, this->super->img);
  804cf0:	080965c1 	jmpi	80965c <draw>
void moveCursor(struct Cursor* this, int dx, int dy) {
	setNextXY(this->super, this->super->r->x + dx, this->super->r->y - dy);
}
void updateCursor(struct Cursor* this) {
	//cursor_lock = 1;
	if(((this->super->next_r->x == this->super->r->x) && (this->super->next_r->y == this->super->r->y)) || this == NULL) return;
  804cf4:	18800117 	ldw	r2,4(r3)
  804cf8:	29400117 	ldw	r5,4(r5)
  804cfc:	117f651e 	bne	r2,r5,804a94 <updateCursor+0x2c>
					this->selectedObj = this->super;
				}
			}
		}
		setXY_noBound(this->super, x, y);*/
}
  804d00:	dfc00117 	ldw	ra,4(sp)
  804d04:	dc000017 	ldw	r16,0(sp)
  804d08:	dec00204 	addi	sp,sp,8
  804d0c:	f800283a 	ret

00804d10 <pitchShift>:
 *****************************************************************************/

#include "PhaseVocoder.h"

void pitchShift(float newPitch, long numSampsToProcess, long fftFrameSize,
		long osamp, float sampleRate, float *inData, float *outData) {
  804d10:	deffca04 	addi	sp,sp,-216
  804d14:	d8c03817 	ldw	r3,224(sp)
  804d18:	d8803717 	ldw	r2,220(sp)
  804d1c:	d9001f15 	stw	r4,124(sp)
	long gRover = false;
	double magn, phase, tmp, window, real, imag;
	double freqPerBin, expct;
	long i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;

	float *gInFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804d20:	01080004 	movi	r4,8192
 *****************************************************************************/

#include "PhaseVocoder.h"

void pitchShift(float newPitch, long numSampsToProcess, long fftFrameSize,
		long osamp, float sampleRate, float *inData, float *outData) {
  804d24:	d8c02415 	stw	r3,144(sp)
  804d28:	dfc03515 	stw	ra,212(sp)
  804d2c:	d9c02215 	stw	r7,136(sp)
  804d30:	d9802115 	stw	r6,132(sp)
  804d34:	d9402015 	stw	r5,128(sp)
  804d38:	dc002c15 	stw	r16,176(sp)
  804d3c:	df003415 	stw	fp,208(sp)
  804d40:	ddc03315 	stw	r23,204(sp)
  804d44:	dd803215 	stw	r22,200(sp)
  804d48:	dd403115 	stw	r21,196(sp)
  804d4c:	dd003015 	stw	r20,192(sp)
  804d50:	dcc02f15 	stw	r19,188(sp)
  804d54:	dc802e15 	stw	r18,184(sp)
  804d58:	dc402d15 	stw	r17,180(sp)
  804d5c:	dc003617 	ldw	r16,216(sp)
  804d60:	d8802315 	stw	r2,140(sp)
	long gRover = false;
	double magn, phase, tmp, window, real, imag;
	double freqPerBin, expct;
	long i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;

	float *gInFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804d64:	08216fc0 	call	8216fc <malloc>
	float *gOutFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804d68:	01080004 	movi	r4,8192
	long gRover = false;
	double magn, phase, tmp, window, real, imag;
	double freqPerBin, expct;
	long i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;

	float *gInFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804d6c:	d8800815 	stw	r2,32(sp)
	float *gOutFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804d70:	08216fc0 	call	8216fc <malloc>
	float *gFFTworksp = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
  804d74:	01100004 	movi	r4,16384
	double magn, phase, tmp, window, real, imag;
	double freqPerBin, expct;
	long i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;

	float *gInFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gOutFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804d78:	d8802515 	stw	r2,148(sp)
	float *gFFTworksp = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
  804d7c:	08216fc0 	call	8216fc <malloc>
	float *gLastPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
  804d80:	01040044 	movi	r4,4097
	double freqPerBin, expct;
	long i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;

	float *gInFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gOutFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gFFTworksp = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
  804d84:	d8800715 	stw	r2,28(sp)
	float *gLastPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
  804d88:	08216fc0 	call	8216fc <malloc>
	float *gSumPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
  804d8c:	01040044 	movi	r4,4097
	long i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;

	float *gInFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gOutFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gFFTworksp = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gLastPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
  804d90:	d8800015 	stw	r2,0(sp)
	float *gSumPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
  804d94:	08216fc0 	call	8216fc <malloc>
	float *gOutputAccum = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
  804d98:	01100004 	movi	r4,16384

	float *gInFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gOutFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gFFTworksp = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gLastPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gSumPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
  804d9c:	d8800a15 	stw	r2,40(sp)
	float *gOutputAccum = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
  804da0:	08216fc0 	call	8216fc <malloc>
	float *gAnaFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804da4:	01080004 	movi	r4,8192
	float *gInFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gOutFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gFFTworksp = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gLastPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gSumPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gOutputAccum = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
  804da8:	d8800115 	stw	r2,4(sp)
	float *gAnaFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804dac:	08216fc0 	call	8216fc <malloc>
	float *gAnaMagn = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804db0:	01080004 	movi	r4,8192
	float *gOutFIFO = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gFFTworksp = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gLastPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gSumPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gOutputAccum = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gAnaFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804db4:	d8802615 	stw	r2,152(sp)
	float *gAnaMagn = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804db8:	08216fc0 	call	8216fc <malloc>
	float *gSynFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804dbc:	01080004 	movi	r4,8192
	float *gFFTworksp = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gLastPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gSumPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gOutputAccum = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gAnaFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gAnaMagn = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804dc0:	d8802715 	stw	r2,156(sp)
	float *gSynFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804dc4:	08216fc0 	call	8216fc <malloc>
	float *gSynMagn = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804dc8:	01080004 	movi	r4,8192
	float *gLastPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gSumPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gOutputAccum = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gAnaFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gAnaMagn = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gSynFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804dcc:	d8802815 	stw	r2,160(sp)
	float *gSynMagn = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804dd0:	08216fc0 	call	8216fc <malloc>

	memset(gInFIFO, 0, MAX_FRAME_LENGTH * sizeof(float));
  804dd4:	d9000817 	ldw	r4,32(sp)
  804dd8:	000b883a 	mov	r5,zero
  804ddc:	01880004 	movi	r6,8192
	float *gSumPhase = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH / 2 + 1);
	float *gOutputAccum = (float *) malloc(sizeof(float) * 2 * MAX_FRAME_LENGTH);
	float *gAnaFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gAnaMagn = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gSynFreq = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
	float *gSynMagn = (float *) malloc(sizeof(float) * MAX_FRAME_LENGTH);
  804de0:	d8802915 	stw	r2,164(sp)

	memset(gInFIFO, 0, MAX_FRAME_LENGTH * sizeof(float));
  804de4:	0821fd00 	call	821fd0 <memset>
	memset(gOutFIFO, 0, MAX_FRAME_LENGTH * sizeof(float));
  804de8:	d9002517 	ldw	r4,148(sp)
  804dec:	000b883a 	mov	r5,zero
  804df0:	01880004 	movi	r6,8192
  804df4:	0821fd00 	call	821fd0 <memset>
	memset(gFFTworksp, 0, 2 * MAX_FRAME_LENGTH * sizeof(float));
  804df8:	d9000717 	ldw	r4,28(sp)
  804dfc:	000b883a 	mov	r5,zero
  804e00:	01900004 	movi	r6,16384
  804e04:	0821fd00 	call	821fd0 <memset>
	memset(gLastPhase, 0, (MAX_FRAME_LENGTH / 2 + 1) * sizeof(float));
  804e08:	d9000017 	ldw	r4,0(sp)
  804e0c:	000b883a 	mov	r5,zero
  804e10:	01840104 	movi	r6,4100
  804e14:	0821fd00 	call	821fd0 <memset>
	memset(gSumPhase, 0, (MAX_FRAME_LENGTH / 2 + 1) * sizeof(float));
  804e18:	d9000a17 	ldw	r4,40(sp)
  804e1c:	000b883a 	mov	r5,zero
  804e20:	01840104 	movi	r6,4100
  804e24:	0821fd00 	call	821fd0 <memset>
	memset(gOutputAccum, 0, 2 * MAX_FRAME_LENGTH * sizeof(float));
  804e28:	d9000117 	ldw	r4,4(sp)
  804e2c:	000b883a 	mov	r5,zero
  804e30:	01900004 	movi	r6,16384
  804e34:	0821fd00 	call	821fd0 <memset>
	memset(gAnaFreq, 0, MAX_FRAME_LENGTH * sizeof(float));
  804e38:	d9002617 	ldw	r4,152(sp)
  804e3c:	000b883a 	mov	r5,zero
  804e40:	01880004 	movi	r6,8192
  804e44:	0821fd00 	call	821fd0 <memset>
	memset(gAnaMagn, 0, MAX_FRAME_LENGTH * sizeof(float));
  804e48:	d9002717 	ldw	r4,156(sp)
  804e4c:	000b883a 	mov	r5,zero
  804e50:	01880004 	movi	r6,8192
  804e54:	0821fd00 	call	821fd0 <memset>

	fftFrameSize2 = fftFrameSize / 2;
  804e58:	d9002117 	ldw	r4,132(sp)
  804e5c:	d9802117 	ldw	r6,132(sp)
	stepSize = fftFrameSize / osamp;
  804e60:	d9402217 	ldw	r5,136(sp)
	memset(gSumPhase, 0, (MAX_FRAME_LENGTH / 2 + 1) * sizeof(float));
	memset(gOutputAccum, 0, 2 * MAX_FRAME_LENGTH * sizeof(float));
	memset(gAnaFreq, 0, MAX_FRAME_LENGTH * sizeof(float));
	memset(gAnaMagn, 0, MAX_FRAME_LENGTH * sizeof(float));

	fftFrameSize2 = fftFrameSize / 2;
  804e64:	2006d7fa 	srli	r3,r4,31
	stepSize = fftFrameSize / osamp;
  804e68:	008003c4 	movi	r2,15
  804e6c:	2148b03a 	or	r4,r4,r5
	memset(gSumPhase, 0, (MAX_FRAME_LENGTH / 2 + 1) * sizeof(float));
	memset(gOutputAccum, 0, 2 * MAX_FRAME_LENGTH * sizeof(float));
	memset(gAnaFreq, 0, MAX_FRAME_LENGTH * sizeof(float));
	memset(gAnaMagn, 0, MAX_FRAME_LENGTH * sizeof(float));

	fftFrameSize2 = fftFrameSize / 2;
  804e70:	1987883a 	add	r3,r3,r6
  804e74:	1807d07a 	srai	r3,r3,1
  804e78:	d8c00f15 	stw	r3,60(sp)
	stepSize = fftFrameSize / osamp;
  804e7c:	11029d36 	bltu	r2,r4,8058f4 <pitchShift+0xbe4>
  804e80:	3004913a 	slli	r2,r6,4
  804e84:	00c02134 	movhi	r3,132
  804e88:	18fbb104 	addi	r3,r3,-4412
  804e8c:	1144b03a 	or	r2,r2,r5
  804e90:	10c5883a 	add	r2,r2,r3
  804e94:	10800003 	ldbu	r2,0(r2)
  804e98:	d8801015 	stw	r2,64(sp)
	freqPerBin = sampleRate / (double) fftFrameSize;
  804e9c:	d9002117 	ldw	r4,132(sp)
  804ea0:	08208500 	call	820850 <__floatsidf>
  804ea4:	8009883a 	mov	r4,r16
  804ea8:	d8801d15 	stw	r2,116(sp)
  804eac:	d8c01e15 	stw	r3,120(sp)
  804eb0:	081f9fc0 	call	81f9fc <__extendsfdf2>
  804eb4:	d9801d17 	ldw	r6,116(sp)
  804eb8:	d9c01e17 	ldw	r7,120(sp)
  804ebc:	180b883a 	mov	r5,r3
  804ec0:	1009883a 	mov	r4,r2
  804ec4:	08203d80 	call	8203d8 <__divdf3>
	expct = 2. * M_PI * (double) stepSize / (double) fftFrameSize;
  804ec8:	d9001017 	ldw	r4,64(sp)
	memset(gAnaFreq, 0, MAX_FRAME_LENGTH * sizeof(float));
	memset(gAnaMagn, 0, MAX_FRAME_LENGTH * sizeof(float));

	fftFrameSize2 = fftFrameSize / 2;
	stepSize = fftFrameSize / osamp;
	freqPerBin = sampleRate / (double) fftFrameSize;
  804ecc:	d8801615 	stw	r2,88(sp)
  804ed0:	d8c01715 	stw	r3,92(sp)
	expct = 2. * M_PI * (double) stepSize / (double) fftFrameSize;
  804ed4:	08208500 	call	820850 <__floatsidf>
  804ed8:	02151134 	movhi	r8,21572
  804edc:	420b4604 	addi	r8,r8,11544
  804ee0:	02500674 	movhi	r9,16409
  804ee4:	4a487ec4 	addi	r9,r9,8699
  804ee8:	480f883a 	mov	r7,r9
  804eec:	400d883a 	mov	r6,r8
  804ef0:	180b883a 	mov	r5,r3
  804ef4:	1009883a 	mov	r4,r2
  804ef8:	08200140 	call	820014 <__muldf3>
  804efc:	d9801d17 	ldw	r6,116(sp)
  804f00:	d9c01e17 	ldw	r7,120(sp)
  804f04:	180b883a 	mov	r5,r3
  804f08:	1009883a 	mov	r4,r2
  804f0c:	08203d80 	call	8203d8 <__divdf3>
  804f10:	d8801415 	stw	r2,80(sp)
	inFifoLatency = fftFrameSize - stepSize;
	if (gRover == false)
		gRover = inFifoLatency;

	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {
  804f14:	d8802017 	ldw	r2,128(sp)
	memset(gAnaMagn, 0, MAX_FRAME_LENGTH * sizeof(float));

	fftFrameSize2 = fftFrameSize / 2;
	stepSize = fftFrameSize / osamp;
	freqPerBin = sampleRate / (double) fftFrameSize;
	expct = 2. * M_PI * (double) stepSize / (double) fftFrameSize;
  804f18:	d8c01515 	stw	r3,84(sp)
	inFifoLatency = fftFrameSize - stepSize;
	if (gRover == false)
		gRover = inFifoLatency;

	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {
  804f1c:	0081b40e 	bge	zero,r2,8055f0 <pitchShift+0x8e0>
			}
			for (k = 0; k < stepSize; k++)
				gOutFIFO[k] = gOutputAccum[k];

			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
  804f20:	d8c01017 	ldw	r3,64(sp)
				gFFTworksp[2 * k] = magn * cos(phase);
				gFFTworksp[2 * k + 1] = magn * sin(phase);
			}

			/* zero negative frequencies */
			for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++)
  804f24:	d9000f17 	ldw	r4,60(sp)
  804f28:	d9402217 	ldw	r5,136(sp)
			}
			for (k = 0; k < stepSize; k++)
				gOutFIFO[k] = gOutputAccum[k];

			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
  804f2c:	18c5883a 	add	r2,r3,r3

	fftFrameSize2 = fftFrameSize / 2;
	stepSize = fftFrameSize / osamp;
	freqPerBin = sampleRate / (double) fftFrameSize;
	expct = 2. * M_PI * (double) stepSize / (double) fftFrameSize;
	inFifoLatency = fftFrameSize - stepSize;
  804f30:	d9802117 	ldw	r6,132(sp)
				gFFTworksp[2 * k] = magn * cos(phase);
				gFFTworksp[2 * k + 1] = magn * sin(phase);
			}

			/* zero negative frequencies */
			for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++)
  804f34:	2149383a 	mul	r4,r4,r5
			}
			for (k = 0; k < stepSize; k++)
				gOutFIFO[k] = gOutputAccum[k];

			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
  804f38:	1085883a 	add	r2,r2,r2
  804f3c:	d8801b15 	stw	r2,108(sp)

			}

			/* ***************** PROCESSING ******************* */
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
  804f40:	d9c02117 	ldw	r7,132(sp)

	fftFrameSize2 = fftFrameSize / 2;
	stepSize = fftFrameSize / osamp;
	freqPerBin = sampleRate / (double) fftFrameSize;
	expct = 2. * M_PI * (double) stepSize / (double) fftFrameSize;
	inFifoLatency = fftFrameSize - stepSize;
  804f44:	30cdc83a 	sub	r6,r6,r3
				gFFTworksp[2 * k] = magn * cos(phase);
				gFFTworksp[2 * k + 1] = magn * sin(phase);
			}

			/* zero negative frequencies */
			for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++)
  804f48:	d9000c15 	stw	r4,48(sp)
  804f4c:	d8802117 	ldw	r2,132(sp)
			}
			for (k = 0; k < stepSize; k++)
				gOutFIFO[k] = gOutputAccum[k];

			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
  804f50:	d9000117 	ldw	r4,4(sp)
  804f54:	d8c01b17 	ldw	r3,108(sp)

			}

			/* ***************** PROCESSING ******************* */
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
  804f58:	39cf883a 	add	r7,r7,r7
  804f5c:	39d1883a 	add	r8,r7,r7
				gFFTworksp[2 * k] = magn * cos(phase);
				gFFTworksp[2 * k + 1] = magn * sin(phase);
			}

			/* zero negative frequencies */
			for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++)
  804f60:	10800084 	addi	r2,r2,2
			}
			for (k = 0; k < stepSize; k++)
				gOutFIFO[k] = gOutputAccum[k];

			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
  804f64:	20c7883a 	add	r3,r4,r3

	fftFrameSize2 = fftFrameSize / 2;
	stepSize = fftFrameSize / osamp;
	freqPerBin = sampleRate / (double) fftFrameSize;
	expct = 2. * M_PI * (double) stepSize / (double) fftFrameSize;
	inFifoLatency = fftFrameSize - stepSize;
  804f68:	d9801115 	stw	r6,68(sp)

			}

			/* ***************** PROCESSING ******************* */
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
  804f6c:	d9c02b15 	stw	r7,172(sp)
  804f70:	da001c15 	stw	r8,112(sp)
				gFFTworksp[2 * k] = magn * cos(phase);
				gFFTworksp[2 * k + 1] = magn * sin(phase);
			}

			/* zero negative frequencies */
			for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++)
  804f74:	d8801215 	stw	r2,72(sp)
			}
			for (k = 0; k < stepSize; k++)
				gOutFIFO[k] = gOutputAccum[k];

			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
  804f78:	d8c01a15 	stw	r3,104(sp)
  804f7c:	d8001315 	stw	zero,76(sp)
  804f80:	d8000615 	stw	zero,24(sp)
	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {

		/* As long as we have not yet collected enough data just read in */
		gInFIFO[gRover] = inData[i];
		outData[i] = gOutFIFO[gRover - inFifoLatency];
  804f84:	d9401117 	ldw	r5,68(sp)
  804f88:	d9c02517 	ldw	r7,148(sp)

	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {

		/* As long as we have not yet collected enough data just read in */
		gInFIFO[gRover] = inData[i];
  804f8c:	da002317 	ldw	r8,140(sp)
		outData[i] = gOutFIFO[gRover - inFifoLatency];
  804f90:	3145c83a 	sub	r2,r6,r5

	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {

		/* As long as we have not yet collected enough data just read in */
		gInFIFO[gRover] = inData[i];
  804f94:	d9000617 	ldw	r4,24(sp)
		outData[i] = gOutFIFO[gRover - inFifoLatency];
  804f98:	1085883a 	add	r2,r2,r2
  804f9c:	1085883a 	add	r2,r2,r2
  804fa0:	11c5883a 	add	r2,r2,r7

	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {

		/* As long as we have not yet collected enough data just read in */
		gInFIFO[gRover] = inData[i];
  804fa4:	4107883a 	add	r3,r8,r4
  804fa8:	d9c00817 	ldw	r7,32(sp)
  804fac:	19000017 	ldw	r4,0(r3)
  804fb0:	3187883a 	add	r3,r6,r6
  804fb4:	18c7883a 	add	r3,r3,r3
  804fb8:	19c7883a 	add	r3,r3,r7
		outData[i] = gOutFIFO[gRover - inFifoLatency];
  804fbc:	da002417 	ldw	r8,144(sp)
  804fc0:	d9c00617 	ldw	r7,24(sp)
  804fc4:	11400017 	ldw	r5,0(r2)
		gRover++;
  804fc8:	31800044 	addi	r6,r6,1
	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {

		/* As long as we have not yet collected enough data just read in */
		gInFIFO[gRover] = inData[i];
		outData[i] = gOutFIFO[gRover - inFifoLatency];
  804fcc:	41c5883a 	add	r2,r8,r7
		gRover++;

		/* now we have enough data for processing */
		if (gRover >= fftFrameSize) {
  804fd0:	da002117 	ldw	r8,132(sp)

	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {

		/* As long as we have not yet collected enough data just read in */
		gInFIFO[gRover] = inData[i];
  804fd4:	19000015 	stw	r4,0(r3)
		outData[i] = gOutFIFO[gRover - inFifoLatency];
  804fd8:	11400015 	stw	r5,0(r2)
		gRover++;

		/* now we have enough data for processing */
		if (gRover >= fftFrameSize) {
  804fdc:	32017c16 	blt	r6,r8,8055d0 <pitchShift+0x8c0>
			gRover = inFifoLatency;

			/* do windowing and re,im interleave */
			for (k = 0; k < fftFrameSize; k++) {
  804fe0:	40800050 	cmplti	r2,r8,1
  804fe4:	d8802a15 	stw	r2,168(sp)
  804fe8:	1000371e 	bne	r2,zero,8050c8 <pitchShift+0x3b8>
  804fec:	dcc00817 	ldw	r19,32(sp)
  804ff0:	dc800717 	ldw	r18,28(sp)
  804ff4:	0029883a 	mov	r20,zero
				window = -.5 * cos(2. * M_PI * (double) k
  804ff8:	a009883a 	mov	r4,r20
  804ffc:	08208500 	call	820850 <__floatsidf>
  805000:	02151134 	movhi	r8,21572
  805004:	420b4604 	addi	r8,r8,11544
  805008:	02500674 	movhi	r9,16409
  80500c:	4a487ec4 	addi	r9,r9,8699
  805010:	480f883a 	mov	r7,r9
  805014:	400d883a 	mov	r6,r8
  805018:	180b883a 	mov	r5,r3
  80501c:	1009883a 	mov	r4,r2
  805020:	08200140 	call	820014 <__muldf3>
  805024:	d9801d17 	ldw	r6,116(sp)
  805028:	d9c01e17 	ldw	r7,120(sp)
  80502c:	180b883a 	mov	r5,r3
  805030:	1009883a 	mov	r4,r2
  805034:	08203d80 	call	8203d8 <__divdf3>
  805038:	180b883a 	mov	r5,r3
  80503c:	1009883a 	mov	r4,r2
  805040:	081b3440 	call	81b344 <cos>
  805044:	0011883a 	mov	r8,zero
  805048:	026ff834 	movhi	r9,49120
  80504c:	480f883a 	mov	r7,r9
  805050:	400d883a 	mov	r6,r8
  805054:	180b883a 	mov	r5,r3
  805058:	1009883a 	mov	r4,r2
  80505c:	08200140 	call	820014 <__muldf3>
  805060:	0011883a 	mov	r8,zero
  805064:	024ff834 	movhi	r9,16352
  805068:	480f883a 	mov	r7,r9
  80506c:	400d883a 	mov	r6,r8
  805070:	180b883a 	mov	r5,r3
  805074:	1009883a 	mov	r4,r2
  805078:	081ffa00 	call	81ffa0 <__adddf3>
  80507c:	99000017 	ldw	r4,0(r19)
  805080:	1021883a 	mov	r16,r2
  805084:	1823883a 	mov	r17,r3
  805088:	081f9fc0 	call	81f9fc <__extendsfdf2>
  80508c:	880b883a 	mov	r5,r17
  805090:	180f883a 	mov	r7,r3
  805094:	8009883a 	mov	r4,r16
  805098:	100d883a 	mov	r6,r2
  80509c:	08200140 	call	820014 <__muldf3>
  8050a0:	180b883a 	mov	r5,r3
  8050a4:	1009883a 	mov	r4,r2
  8050a8:	0820a580 	call	820a58 <__truncdfsf2>
		/* now we have enough data for processing */
		if (gRover >= fftFrameSize) {
			gRover = inFifoLatency;

			/* do windowing and re,im interleave */
			for (k = 0; k < fftFrameSize; k++) {
  8050ac:	d8c02117 	ldw	r3,132(sp)
  8050b0:	a5000044 	addi	r20,r20,1
				window = -.5 * cos(2. * M_PI * (double) k
  8050b4:	90800015 	stw	r2,0(r18)
						/ (double) fftFrameSize) + .5;
				gFFTworksp[2 * k] = gInFIFO[k] * window;
				gFFTworksp[2 * k + 1] = 0.;
  8050b8:	90000115 	stw	zero,4(r18)
		/* now we have enough data for processing */
		if (gRover >= fftFrameSize) {
			gRover = inFifoLatency;

			/* do windowing and re,im interleave */
			for (k = 0; k < fftFrameSize; k++) {
  8050bc:	9cc00104 	addi	r19,r19,4
  8050c0:	94800204 	addi	r18,r18,8
  8050c4:	1d3fcc1e 	bne	r3,r20,804ff8 <pitchShift+0x2e8>
				gFFTworksp[2 * k + 1] = 0.;
			}

			/* ***************** ANALYSIS ******************* */
			/* do transform */
			fft(gFFTworksp, fftFrameSize, -1);
  8050c8:	d9000717 	ldw	r4,28(sp)
  8050cc:	d9402117 	ldw	r5,132(sp)
  8050d0:	01bfffc4 	movi	r6,-1
  8050d4:	08059040 	call	805904 <fft>

			/* this is the analysis step */
			for (k = 0; k <= fftFrameSize2; k++) {
  8050d8:	d9000f17 	ldw	r4,60(sp)
  8050dc:	2000b316 	blt	r4,zero,8053ac <pitchShift+0x69c>
  8050e0:	d9002217 	ldw	r4,136(sp)
  8050e4:	08208500 	call	820850 <__floatsidf>
  8050e8:	d9400717 	ldw	r5,28(sp)
  8050ec:	df000017 	ldw	fp,0(sp)
  8050f0:	d8800d15 	stw	r2,52(sp)
  8050f4:	280d883a 	mov	r6,r5
  8050f8:	d8c00e15 	stw	r3,56(sp)
  8050fc:	d9400415 	stw	r5,16(sp)
  805100:	d8000215 	stw	zero,8(sp)
  805104:	d8000915 	stw	zero,36(sp)
  805108:	00005006 	br	80524c <pitchShift+0x53c>
				tmp -= (double) k * expct;

				/* map delta phase into +/- Pi interval */
				qpd = tmp / M_PI;
				if (qpd >= 0)
					qpd += qpd & 1;
  80510c:	1080004c 	andi	r2,r2,1
  805110:	18ad883a 	add	r22,r3,r2

				/* compute the k-th partials' true frequency */
				tmp = (double) k * freqPerBin + tmp * freqPerBin;

				/* store magnitude and true frequency in analysis arrays */
				gAnaMagn[k] = magn;
  805114:	a80f883a 	mov	r7,r21
  805118:	a00d883a 	mov	r6,r20
  80511c:	a009883a 	mov	r4,r20
  805120:	a80b883a 	mov	r5,r21
  805124:	081ffa00 	call	81ffa0 <__adddf3>
  805128:	180b883a 	mov	r5,r3
  80512c:	1009883a 	mov	r4,r2
  805130:	0820a580 	call	820a58 <__truncdfsf2>
  805134:	da002717 	ldw	r8,156(sp)
  805138:	d9000917 	ldw	r4,36(sp)
				gAnaFreq[k] = tmp;
  80513c:	d9401717 	ldw	r5,92(sp)
  805140:	880f883a 	mov	r7,r17

				/* compute the k-th partials' true frequency */
				tmp = (double) k * freqPerBin + tmp * freqPerBin;

				/* store magnitude and true frequency in analysis arrays */
				gAnaMagn[k] = magn;
  805144:	4107883a 	add	r3,r8,r4
				gAnaFreq[k] = tmp;
  805148:	d9001617 	ldw	r4,88(sp)
  80514c:	800d883a 	mov	r6,r16

				/* compute the k-th partials' true frequency */
				tmp = (double) k * freqPerBin + tmp * freqPerBin;

				/* store magnitude and true frequency in analysis arrays */
				gAnaMagn[k] = magn;
  805150:	18800015 	stw	r2,0(r3)
				gAnaFreq[k] = tmp;
  805154:	08200140 	call	820014 <__muldf3>
  805158:	b009883a 	mov	r4,r22
  80515c:	1021883a 	mov	r16,r2
  805160:	1823883a 	mov	r17,r3
  805164:	08208500 	call	820850 <__floatsidf>
  805168:	02151134 	movhi	r8,21572
  80516c:	420b4604 	addi	r8,r8,11544
  805170:	02700274 	movhi	r9,49161
  805174:	4a487ec4 	addi	r9,r9,8699
  805178:	480f883a 	mov	r7,r9
  80517c:	400d883a 	mov	r6,r8
  805180:	180b883a 	mov	r5,r3
  805184:	1009883a 	mov	r4,r2
  805188:	08200140 	call	820014 <__muldf3>
  80518c:	180f883a 	mov	r7,r3
  805190:	980b883a 	mov	r5,r19
  805194:	9009883a 	mov	r4,r18
  805198:	100d883a 	mov	r6,r2
  80519c:	081ffa00 	call	81ffa0 <__adddf3>
  8051a0:	d9800d17 	ldw	r6,52(sp)
  8051a4:	d9c00e17 	ldw	r7,56(sp)
  8051a8:	180b883a 	mov	r5,r3
  8051ac:	1009883a 	mov	r4,r2
  8051b0:	08200140 	call	820014 <__muldf3>
  8051b4:	02151134 	movhi	r8,21572
  8051b8:	420b4604 	addi	r8,r8,11544
  8051bc:	02500674 	movhi	r9,16409
  8051c0:	4a487ec4 	addi	r9,r9,8699
  8051c4:	400d883a 	mov	r6,r8
  8051c8:	480f883a 	mov	r7,r9
  8051cc:	180b883a 	mov	r5,r3
  8051d0:	1009883a 	mov	r4,r2
  8051d4:	08203d80 	call	8203d8 <__divdf3>
  8051d8:	d9001617 	ldw	r4,88(sp)
  8051dc:	d9401717 	ldw	r5,92(sp)
  8051e0:	180f883a 	mov	r7,r3
  8051e4:	100d883a 	mov	r6,r2
  8051e8:	08200140 	call	820014 <__muldf3>
  8051ec:	180f883a 	mov	r7,r3
  8051f0:	100d883a 	mov	r6,r2
  8051f4:	880b883a 	mov	r5,r17
  8051f8:	8009883a 	mov	r4,r16
  8051fc:	081ffa00 	call	81ffa0 <__adddf3>
  805200:	180b883a 	mov	r5,r3
  805204:	1009883a 	mov	r4,r2
  805208:	0820a580 	call	820a58 <__truncdfsf2>
			/* ***************** ANALYSIS ******************* */
			/* do transform */
			fft(gFFTworksp, fftFrameSize, -1);

			/* this is the analysis step */
			for (k = 0; k <= fftFrameSize2; k++) {
  80520c:	d8c00217 	ldw	r3,8(sp)
				/* compute the k-th partials' true frequency */
				tmp = (double) k * freqPerBin + tmp * freqPerBin;

				/* store magnitude and true frequency in analysis arrays */
				gAnaMagn[k] = magn;
				gAnaFreq[k] = tmp;
  805210:	d9000917 	ldw	r4,36(sp)
			/* ***************** ANALYSIS ******************* */
			/* do transform */
			fft(gFFTworksp, fftFrameSize, -1);

			/* this is the analysis step */
			for (k = 0; k <= fftFrameSize2; k++) {
  805214:	d9800417 	ldw	r6,16(sp)
  805218:	18c00044 	addi	r3,r3,1
  80521c:	d8c00215 	stw	r3,8(sp)
				/* compute the k-th partials' true frequency */
				tmp = (double) k * freqPerBin + tmp * freqPerBin;

				/* store magnitude and true frequency in analysis arrays */
				gAnaMagn[k] = magn;
				gAnaFreq[k] = tmp;
  805220:	d9402617 	ldw	r5,152(sp)
			/* ***************** ANALYSIS ******************* */
			/* do transform */
			fft(gFFTworksp, fftFrameSize, -1);

			/* this is the analysis step */
			for (k = 0; k <= fftFrameSize2; k++) {
  805224:	d9c00f17 	ldw	r7,60(sp)
  805228:	da000217 	ldw	r8,8(sp)
				/* compute the k-th partials' true frequency */
				tmp = (double) k * freqPerBin + tmp * freqPerBin;

				/* store magnitude and true frequency in analysis arrays */
				gAnaMagn[k] = magn;
				gAnaFreq[k] = tmp;
  80522c:	2907883a 	add	r3,r5,r4
			/* ***************** ANALYSIS ******************* */
			/* do transform */
			fft(gFFTworksp, fftFrameSize, -1);

			/* this is the analysis step */
			for (k = 0; k <= fftFrameSize2; k++) {
  805230:	31800204 	addi	r6,r6,8
  805234:	21000104 	addi	r4,r4,4
				/* compute the k-th partials' true frequency */
				tmp = (double) k * freqPerBin + tmp * freqPerBin;

				/* store magnitude and true frequency in analysis arrays */
				gAnaMagn[k] = magn;
				gAnaFreq[k] = tmp;
  805238:	18800015 	stw	r2,0(r3)
			/* ***************** ANALYSIS ******************* */
			/* do transform */
			fft(gFFTworksp, fftFrameSize, -1);

			/* this is the analysis step */
			for (k = 0; k <= fftFrameSize2; k++) {
  80523c:	d9800415 	stw	r6,16(sp)
  805240:	e7000104 	addi	fp,fp,4
  805244:	d9000915 	stw	r4,36(sp)
  805248:	3a010816 	blt	r7,r8,80566c <pitchShift+0x95c>

				/* de-interlace FFT buffer */
				real = gFFTworksp[2 * k];
  80524c:	31000017 	ldw	r4,0(r6)
  805250:	081f9fc0 	call	81f9fc <__extendsfdf2>
				imag = gFFTworksp[2 * k + 1];
  805254:	d9c00417 	ldw	r7,16(sp)

			/* this is the analysis step */
			for (k = 0; k <= fftFrameSize2; k++) {

				/* de-interlace FFT buffer */
				real = gFFTworksp[2 * k];
  805258:	182f883a 	mov	r23,r3
  80525c:	102d883a 	mov	r22,r2
				imag = gFFTworksp[2 * k + 1];
  805260:	39000117 	ldw	r4,4(r7)
  805264:	081f9fc0 	call	81f9fc <__extendsfdf2>
  805268:	1025883a 	mov	r18,r2
  80526c:	1827883a 	mov	r19,r3

				/* compute magnitude and phase */
				magn = 2. * sqrt(real * real + imag * imag);
  805270:	b009883a 	mov	r4,r22
  805274:	b80b883a 	mov	r5,r23
  805278:	b00d883a 	mov	r6,r22
  80527c:	b80f883a 	mov	r7,r23

			/* this is the analysis step */
			for (k = 0; k <= fftFrameSize2; k++) {

				/* de-interlace FFT buffer */
				real = gFFTworksp[2 * k];
  805280:	dd801815 	stw	r22,96(sp)
  805284:	ddc01915 	stw	r23,100(sp)
				imag = gFFTworksp[2 * k + 1];

				/* compute magnitude and phase */
				magn = 2. * sqrt(real * real + imag * imag);
  805288:	08200140 	call	820014 <__muldf3>
  80528c:	9009883a 	mov	r4,r18
  805290:	980b883a 	mov	r5,r19
  805294:	900d883a 	mov	r6,r18
  805298:	980f883a 	mov	r7,r19
  80529c:	1021883a 	mov	r16,r2
  8052a0:	1823883a 	mov	r17,r3
  8052a4:	08200140 	call	820014 <__muldf3>
  8052a8:	180f883a 	mov	r7,r3
  8052ac:	880b883a 	mov	r5,r17
  8052b0:	100d883a 	mov	r6,r2
  8052b4:	8009883a 	mov	r4,r16
  8052b8:	081ffa00 	call	81ffa0 <__adddf3>
  8052bc:	180b883a 	mov	r5,r3
  8052c0:	1009883a 	mov	r4,r2
  8052c4:	081b7a40 	call	81b7a4 <sqrt>
				phase = atan2(imag, real);
  8052c8:	d9801817 	ldw	r6,96(sp)
  8052cc:	980b883a 	mov	r5,r19
  8052d0:	b80f883a 	mov	r7,r23
  8052d4:	9009883a 	mov	r4,r18
				/* de-interlace FFT buffer */
				real = gFFTworksp[2 * k];
				imag = gFFTworksp[2 * k + 1];

				/* compute magnitude and phase */
				magn = 2. * sqrt(real * real + imag * imag);
  8052d8:	1029883a 	mov	r20,r2
  8052dc:	182b883a 	mov	r21,r3
				phase = atan2(imag, real);
  8052e0:	081b6180 	call	81b618 <atan2>

				/* compute phase difference */
				tmp = phase - gLastPhase[k];
  8052e4:	e1000017 	ldw	r4,0(fp)
				real = gFFTworksp[2 * k];
				imag = gFFTworksp[2 * k + 1];

				/* compute magnitude and phase */
				magn = 2. * sqrt(real * real + imag * imag);
				phase = atan2(imag, real);
  8052e8:	1021883a 	mov	r16,r2
  8052ec:	1823883a 	mov	r17,r3

				/* compute phase difference */
				tmp = phase - gLastPhase[k];
  8052f0:	081f9fc0 	call	81f9fc <__extendsfdf2>
  8052f4:	180f883a 	mov	r7,r3
  8052f8:	100d883a 	mov	r6,r2
  8052fc:	8009883a 	mov	r4,r16
  805300:	880b883a 	mov	r5,r17
  805304:	081ff200 	call	81ff20 <__subdf3>
				gLastPhase[k] = phase;
  805308:	880b883a 	mov	r5,r17
  80530c:	8009883a 	mov	r4,r16
				/* compute magnitude and phase */
				magn = 2. * sqrt(real * real + imag * imag);
				phase = atan2(imag, real);

				/* compute phase difference */
				tmp = phase - gLastPhase[k];
  805310:	1827883a 	mov	r19,r3
  805314:	1025883a 	mov	r18,r2
				gLastPhase[k] = phase;
  805318:	0820a580 	call	820a58 <__truncdfsf2>

				/* subtract expected phase difference */
				tmp -= (double) k * expct;
  80531c:	d9000217 	ldw	r4,8(sp)
				magn = 2. * sqrt(real * real + imag * imag);
				phase = atan2(imag, real);

				/* compute phase difference */
				tmp = phase - gLastPhase[k];
				gLastPhase[k] = phase;
  805320:	e0800015 	stw	r2,0(fp)

				/* subtract expected phase difference */
				tmp -= (double) k * expct;
  805324:	08208500 	call	820850 <__floatsidf>
  805328:	d9001417 	ldw	r4,80(sp)
  80532c:	d9401517 	ldw	r5,84(sp)
  805330:	100d883a 	mov	r6,r2
  805334:	180f883a 	mov	r7,r3
  805338:	1021883a 	mov	r16,r2
  80533c:	1823883a 	mov	r17,r3
  805340:	08200140 	call	820014 <__muldf3>
  805344:	180f883a 	mov	r7,r3
				/* compute magnitude and phase */
				magn = 2. * sqrt(real * real + imag * imag);
				phase = atan2(imag, real);

				/* compute phase difference */
				tmp = phase - gLastPhase[k];
  805348:	9009883a 	mov	r4,r18
  80534c:	980b883a 	mov	r5,r19
				gLastPhase[k] = phase;

				/* subtract expected phase difference */
				tmp -= (double) k * expct;
  805350:	100d883a 	mov	r6,r2
  805354:	081ff200 	call	81ff20 <__subdf3>
  805358:	180f883a 	mov	r7,r3
  80535c:	100d883a 	mov	r6,r2

				/* map delta phase into +/- Pi interval */
				qpd = tmp / M_PI;
  805360:	00d00274 	movhi	r3,16393
  805364:	18c87ec4 	addi	r3,r3,8699
				/* compute phase difference */
				tmp = phase - gLastPhase[k];
				gLastPhase[k] = phase;

				/* subtract expected phase difference */
				tmp -= (double) k * expct;
  805368:	1025883a 	mov	r18,r2

				/* map delta phase into +/- Pi interval */
				qpd = tmp / M_PI;
  80536c:	00951134 	movhi	r2,21572
  805370:	108b4604 	addi	r2,r2,11544
  805374:	380b883a 	mov	r5,r7
  805378:	3009883a 	mov	r4,r6
				/* compute phase difference */
				tmp = phase - gLastPhase[k];
				gLastPhase[k] = phase;

				/* subtract expected phase difference */
				tmp -= (double) k * expct;
  80537c:	3827883a 	mov	r19,r7

				/* map delta phase into +/- Pi interval */
				qpd = tmp / M_PI;
  805380:	100d883a 	mov	r6,r2
  805384:	180f883a 	mov	r7,r3
  805388:	08203d80 	call	8203d8 <__divdf3>
  80538c:	180b883a 	mov	r5,r3
  805390:	1009883a 	mov	r4,r2
  805394:	08209480 	call	820948 <__fixdfsi>
  805398:	1007883a 	mov	r3,r2
				if (qpd >= 0)
  80539c:	103f5b0e 	bge	r2,zero,80510c <pitchShift+0x3fc>
					qpd += qpd & 1;
				else
					qpd -= qpd & 1;
  8053a0:	00bfff84 	movi	r2,-2
  8053a4:	18ac703a 	and	r22,r3,r2
  8053a8:	003f5a06 	br	805114 <pitchShift+0x404>

			}

			/* ***************** PROCESSING ******************* */
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
  8053ac:	d9801c17 	ldw	r6,112(sp)
  8053b0:	d9002917 	ldw	r4,164(sp)
  8053b4:	000b883a 	mov	r5,zero
  8053b8:	0821fd00 	call	821fd0 <memset>
			memset(gSynFreq, 0, fftFrameSize * sizeof(float));
  8053bc:	d9002817 	ldw	r4,160(sp)
  8053c0:	d9801c17 	ldw	r6,112(sp)
  8053c4:	000b883a 	mov	r5,zero
  8053c8:	0821fd00 	call	821fd0 <memset>
				gFFTworksp[2 * k] = magn * cos(phase);
				gFFTworksp[2 * k + 1] = magn * sin(phase);
			}

			/* zero negative frequencies */
			for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++)
  8053cc:	d9001217 	ldw	r4,72(sp)
  8053d0:	d9402b17 	ldw	r5,172(sp)
  8053d4:	21400a0e 	bge	r4,r5,805400 <pitchShift+0x6f0>
  8053d8:	d9800717 	ldw	r6,28(sp)
  8053dc:	2945883a 	add	r2,r5,r5
  8053e0:	d9c02b17 	ldw	r7,172(sp)
  8053e4:	3085883a 	add	r2,r6,r2
  8053e8:	10800204 	addi	r2,r2,8
  8053ec:	2007883a 	mov	r3,r4
  8053f0:	18c00044 	addi	r3,r3,1
				gFFTworksp[k] = 0.;
  8053f4:	10000015 	stw	zero,0(r2)
				gFFTworksp[2 * k] = magn * cos(phase);
				gFFTworksp[2 * k + 1] = magn * sin(phase);
			}

			/* zero negative frequencies */
			for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++)
  8053f8:	10800104 	addi	r2,r2,4
  8053fc:	19fffc16 	blt	r3,r7,8053f0 <pitchShift+0x6e0>
				gFFTworksp[k] = 0.;

			/* do inverse transform */
			fft(gFFTworksp, fftFrameSize, 1);
  805400:	d9000717 	ldw	r4,28(sp)
  805404:	d9402117 	ldw	r5,132(sp)
  805408:	01800044 	movi	r6,1
  80540c:	08059040 	call	805904 <fft>

			/* do windowing and add to output accumulator */
			for (k = 0; k < fftFrameSize; k++) {
  805410:	da002a17 	ldw	r8,168(sp)
  805414:	40004d1e 	bne	r8,zero,80554c <pitchShift+0x83c>
  805418:	d9000c17 	ldw	r4,48(sp)
  80541c:	0039883a 	mov	fp,zero
  805420:	08208500 	call	820850 <__floatsidf>
  805424:	dd800117 	ldw	r22,4(sp)
  805428:	ddc00717 	ldw	r23,28(sp)
  80542c:	1029883a 	mov	r20,r2
  805430:	182b883a 	mov	r21,r3
				window = -.5 * cos(2. * M_PI * (double) k
						/ (double) fftFrameSize) + .5;
				gOutputAccum[k] += 2. * window * gFFTworksp[2 * k]
  805434:	b1000017 	ldw	r4,0(r22)
  805438:	081f9fc0 	call	81f9fc <__extendsfdf2>
			/* do inverse transform */
			fft(gFFTworksp, fftFrameSize, 1);

			/* do windowing and add to output accumulator */
			for (k = 0; k < fftFrameSize; k++) {
				window = -.5 * cos(2. * M_PI * (double) k
  80543c:	e009883a 	mov	r4,fp
						/ (double) fftFrameSize) + .5;
				gOutputAccum[k] += 2. * window * gFFTworksp[2 * k]
  805440:	1025883a 	mov	r18,r2
  805444:	1827883a 	mov	r19,r3
			/* do inverse transform */
			fft(gFFTworksp, fftFrameSize, 1);

			/* do windowing and add to output accumulator */
			for (k = 0; k < fftFrameSize; k++) {
				window = -.5 * cos(2. * M_PI * (double) k
  805448:	08208500 	call	820850 <__floatsidf>
  80544c:	02151134 	movhi	r8,21572
  805450:	420b4604 	addi	r8,r8,11544
  805454:	02500674 	movhi	r9,16409
  805458:	4a487ec4 	addi	r9,r9,8699
  80545c:	480f883a 	mov	r7,r9
  805460:	400d883a 	mov	r6,r8
  805464:	180b883a 	mov	r5,r3
  805468:	1009883a 	mov	r4,r2
  80546c:	08200140 	call	820014 <__muldf3>
  805470:	d9801d17 	ldw	r6,116(sp)
  805474:	d9c01e17 	ldw	r7,120(sp)
  805478:	180b883a 	mov	r5,r3
  80547c:	1009883a 	mov	r4,r2
  805480:	08203d80 	call	8203d8 <__divdf3>
  805484:	180b883a 	mov	r5,r3
  805488:	1009883a 	mov	r4,r2
  80548c:	081b3440 	call	81b344 <cos>
  805490:	0011883a 	mov	r8,zero
  805494:	026ff834 	movhi	r9,49120
  805498:	480f883a 	mov	r7,r9
  80549c:	400d883a 	mov	r6,r8
  8054a0:	180b883a 	mov	r5,r3
  8054a4:	1009883a 	mov	r4,r2
  8054a8:	08200140 	call	820014 <__muldf3>
  8054ac:	0011883a 	mov	r8,zero
  8054b0:	024ff834 	movhi	r9,16352
  8054b4:	480f883a 	mov	r7,r9
  8054b8:	400d883a 	mov	r6,r8
  8054bc:	180b883a 	mov	r5,r3
  8054c0:	1009883a 	mov	r4,r2
  8054c4:	081ffa00 	call	81ffa0 <__adddf3>
  8054c8:	180f883a 	mov	r7,r3
  8054cc:	180b883a 	mov	r5,r3
  8054d0:	100d883a 	mov	r6,r2
  8054d4:	1009883a 	mov	r4,r2
  8054d8:	081ffa00 	call	81ffa0 <__adddf3>
  8054dc:	b9000017 	ldw	r4,0(r23)
  8054e0:	1021883a 	mov	r16,r2
  8054e4:	1823883a 	mov	r17,r3
  8054e8:	081f9fc0 	call	81f9fc <__extendsfdf2>
  8054ec:	880b883a 	mov	r5,r17
  8054f0:	180f883a 	mov	r7,r3
  8054f4:	8009883a 	mov	r4,r16
  8054f8:	100d883a 	mov	r6,r2
  8054fc:	08200140 	call	820014 <__muldf3>
  805500:	180b883a 	mov	r5,r3
  805504:	1009883a 	mov	r4,r2
  805508:	a00d883a 	mov	r6,r20
  80550c:	a80f883a 	mov	r7,r21
  805510:	08203d80 	call	8203d8 <__divdf3>
  805514:	180f883a 	mov	r7,r3
  805518:	980b883a 	mov	r5,r19
  80551c:	9009883a 	mov	r4,r18
  805520:	100d883a 	mov	r6,r2
  805524:	081ffa00 	call	81ffa0 <__adddf3>
  805528:	180b883a 	mov	r5,r3
  80552c:	1009883a 	mov	r4,r2
  805530:	0820a580 	call	820a58 <__truncdfsf2>
  805534:	b0800015 	stw	r2,0(r22)

			/* do inverse transform */
			fft(gFFTworksp, fftFrameSize, 1);

			/* do windowing and add to output accumulator */
			for (k = 0; k < fftFrameSize; k++) {
  805538:	d8802117 	ldw	r2,132(sp)
  80553c:	e7000044 	addi	fp,fp,1
  805540:	bdc00204 	addi	r23,r23,8
  805544:	b5800104 	addi	r22,r22,4
  805548:	173fba1e 	bne	r2,fp,805434 <pitchShift+0x724>
				window = -.5 * cos(2. * M_PI * (double) k
						/ (double) fftFrameSize) + .5;
				gOutputAccum[k] += 2. * window * gFFTworksp[2 * k]
						/ (fftFrameSize2 * osamp);
			}
			for (k = 0; k < stepSize; k++)
  80554c:	d8c01017 	ldw	r3,64(sp)
  805550:	00c00c0e 	bge	zero,r3,805584 <pitchShift+0x874>
  805554:	d9800117 	ldw	r6,4(sp)
  805558:	d9c02517 	ldw	r7,148(sp)
  80555c:	da001017 	ldw	r8,64(sp)
  805560:	000b883a 	mov	r5,zero
  805564:	0009883a 	mov	r4,zero
				gOutFIFO[k] = gOutputAccum[k];
  805568:	3105883a 	add	r2,r6,r4
  80556c:	10c00017 	ldw	r3,0(r2)
				window = -.5 * cos(2. * M_PI * (double) k
						/ (double) fftFrameSize) + .5;
				gOutputAccum[k] += 2. * window * gFFTworksp[2 * k]
						/ (fftFrameSize2 * osamp);
			}
			for (k = 0; k < stepSize; k++)
  805570:	29400044 	addi	r5,r5,1
				gOutFIFO[k] = gOutputAccum[k];
  805574:	3905883a 	add	r2,r7,r4
  805578:	10c00015 	stw	r3,0(r2)
				window = -.5 * cos(2. * M_PI * (double) k
						/ (double) fftFrameSize) + .5;
				gOutputAccum[k] += 2. * window * gFFTworksp[2 * k]
						/ (fftFrameSize2 * osamp);
			}
			for (k = 0; k < stepSize; k++)
  80557c:	21000104 	addi	r4,r4,4
  805580:	417ff91e 	bne	r8,r5,805568 <pitchShift+0x858>
				gOutFIFO[k] = gOutputAccum[k];

			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
  805584:	d9000117 	ldw	r4,4(sp)
  805588:	d9401a17 	ldw	r5,104(sp)
  80558c:	d9801c17 	ldw	r6,112(sp)
  805590:	0821ef00 	call	821ef0 <memmove>
					* sizeof(float));

			/* move input FIFO */
			for (k = 0; k < inFifoLatency; k++)
  805594:	d8801117 	ldw	r2,68(sp)
  805598:	00800c0e 	bge	zero,r2,8055cc <pitchShift+0x8bc>
  80559c:	d9400817 	ldw	r5,32(sp)
  8055a0:	d8c01b17 	ldw	r3,108(sp)
  8055a4:	d9801117 	ldw	r6,68(sp)
  8055a8:	28c9883a 	add	r4,r5,r3
  8055ac:	2807883a 	mov	r3,r5
  8055b0:	000b883a 	mov	r5,zero
				gInFIFO[k] = gInFIFO[k + stepSize];
  8055b4:	20800017 	ldw	r2,0(r4)
			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
					* sizeof(float));

			/* move input FIFO */
			for (k = 0; k < inFifoLatency; k++)
  8055b8:	29400044 	addi	r5,r5,1
  8055bc:	21000104 	addi	r4,r4,4
				gInFIFO[k] = gInFIFO[k + stepSize];
  8055c0:	18800015 	stw	r2,0(r3)
			/* shift accumulator */
			memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize
					* sizeof(float));

			/* move input FIFO */
			for (k = 0; k < inFifoLatency; k++)
  8055c4:	18c00104 	addi	r3,r3,4
  8055c8:	317ffa1e 	bne	r6,r5,8055b4 <pitchShift+0x8a4>
  8055cc:	d9801117 	ldw	r6,68(sp)
	inFifoLatency = fftFrameSize - stepSize;
	if (gRover == false)
		gRover = inFifoLatency;

	/* main processing loop */
	for (i = 0; i < numSampsToProcess; i++) {
  8055d0:	d9c01317 	ldw	r7,76(sp)
  8055d4:	da000617 	ldw	r8,24(sp)
  8055d8:	d8802017 	ldw	r2,128(sp)
  8055dc:	39c00044 	addi	r7,r7,1
  8055e0:	42000104 	addi	r8,r8,4
  8055e4:	d9c01315 	stw	r7,76(sp)
  8055e8:	da000615 	stw	r8,24(sp)
  8055ec:	11fe651e 	bne	r2,r7,804f84 <pitchShift+0x274>
			for (k = 0; k < inFifoLatency; k++)
				gInFIFO[k] = gInFIFO[k + stepSize];
		}
	}

	free(gInFIFO);
  8055f0:	d9000817 	ldw	r4,32(sp)
  8055f4:	08216e80 	call	8216e8 <free>
	free(gOutFIFO);
  8055f8:	d9002517 	ldw	r4,148(sp)
  8055fc:	08216e80 	call	8216e8 <free>
	free(gFFTworksp);
  805600:	d9000717 	ldw	r4,28(sp)
  805604:	08216e80 	call	8216e8 <free>
	free(gLastPhase);
  805608:	d9000017 	ldw	r4,0(sp)
  80560c:	08216e80 	call	8216e8 <free>
	free(gSumPhase);
  805610:	d9000a17 	ldw	r4,40(sp)
  805614:	08216e80 	call	8216e8 <free>
	free(gOutputAccum);
  805618:	d9000117 	ldw	r4,4(sp)
  80561c:	08216e80 	call	8216e8 <free>
	free(gAnaFreq);
  805620:	d9002617 	ldw	r4,152(sp)
  805624:	08216e80 	call	8216e8 <free>
	free(gAnaMagn);
  805628:	d9002717 	ldw	r4,156(sp)
  80562c:	08216e80 	call	8216e8 <free>
	free(gSynFreq);
  805630:	d9002817 	ldw	r4,160(sp)
  805634:	08216e80 	call	8216e8 <free>
	free(gSynMagn);
  805638:	d9002917 	ldw	r4,164(sp)
}
  80563c:	dfc03517 	ldw	ra,212(sp)
  805640:	df003417 	ldw	fp,208(sp)
  805644:	ddc03317 	ldw	r23,204(sp)
  805648:	dd803217 	ldw	r22,200(sp)
  80564c:	dd403117 	ldw	r21,196(sp)
  805650:	dd003017 	ldw	r20,192(sp)
  805654:	dcc02f17 	ldw	r19,188(sp)
  805658:	dc802e17 	ldw	r18,184(sp)
  80565c:	dc402d17 	ldw	r17,180(sp)
  805660:	dc002c17 	ldw	r16,176(sp)
  805664:	dec03604 	addi	sp,sp,216
	free(gSumPhase);
	free(gOutputAccum);
	free(gAnaFreq);
	free(gAnaMagn);
	free(gSynFreq);
	free(gSynMagn);
  805668:	08216e81 	jmpi	8216e8 <free>

			}

			/* ***************** PROCESSING ******************* */
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
  80566c:	d9801c17 	ldw	r6,112(sp)
  805670:	d9002917 	ldw	r4,164(sp)
  805674:	000b883a 	mov	r5,zero
			memset(gSynFreq, 0, fftFrameSize * sizeof(float));
  805678:	0023883a 	mov	r17,zero

			}

			/* ***************** PROCESSING ******************* */
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
  80567c:	0821fd00 	call	821fd0 <memset>
			memset(gSynFreq, 0, fftFrameSize * sizeof(float));
  805680:	d9002817 	ldw	r4,160(sp)
  805684:	d9801c17 	ldw	r6,112(sp)
  805688:	000b883a 	mov	r5,zero
  80568c:	0027883a 	mov	r19,zero
  805690:	0821fd00 	call	821fd0 <memset>
  805694:	d8800f17 	ldw	r2,60(sp)
  805698:	15000044 	addi	r20,r2,1
			for (k = 0; k <= fftFrameSize2; k++) {
				index = k * newPitch;
  80569c:	8809883a 	mov	r4,r17
  8056a0:	081f8d00 	call	81f8d0 <__floatsisf>
  8056a4:	d9401f17 	ldw	r5,124(sp)
  8056a8:	1009883a 	mov	r4,r2

			/* ***************** PROCESSING ******************* */
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
			memset(gSynFreq, 0, fftFrameSize * sizeof(float));
			for (k = 0; k <= fftFrameSize2; k++) {
  8056ac:	8c400044 	addi	r17,r17,1
				index = k * newPitch;
  8056b0:	081f4140 	call	81f414 <__mulsf3>
  8056b4:	1009883a 	mov	r4,r2
  8056b8:	081f9680 	call	81f968 <__fixsfsi>
				if (index <= fftFrameSize2) {
					gSynMagn[index] += gAnaMagn[k];
  8056bc:	d9002917 	ldw	r4,164(sp)
  8056c0:	d9802717 	ldw	r6,156(sp)
					gSynFreq[index] = gAnaFreq[k] * newPitch;
  8056c4:	d9c02817 	ldw	r7,160(sp)
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
			memset(gSynFreq, 0, fftFrameSize * sizeof(float));
			for (k = 0; k <= fftFrameSize2; k++) {
				index = k * newPitch;
				if (index <= fftFrameSize2) {
  8056c8:	da000f17 	ldw	r8,60(sp)
					gSynMagn[index] += gAnaMagn[k];
  8056cc:	1087883a 	add	r3,r2,r2
  8056d0:	18c7883a 	add	r3,r3,r3
  8056d4:	20e1883a 	add	r16,r4,r3
  8056d8:	34cb883a 	add	r5,r6,r19
					gSynFreq[index] = gAnaFreq[k] * newPitch;
  8056dc:	38e5883a 	add	r18,r7,r3
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
			memset(gSynFreq, 0, fftFrameSize * sizeof(float));
			for (k = 0; k <= fftFrameSize2; k++) {
				index = k * newPitch;
				if (index <= fftFrameSize2) {
  8056e0:	40800a16 	blt	r8,r2,80570c <pitchShift+0x9fc>
					gSynMagn[index] += gAnaMagn[k];
  8056e4:	29400017 	ldw	r5,0(r5)
  8056e8:	81000017 	ldw	r4,0(r16)
  8056ec:	081f3b00 	call	81f3b0 <__addsf3>
					gSynFreq[index] = gAnaFreq[k] * newPitch;
  8056f0:	d9002617 	ldw	r4,152(sp)
  8056f4:	24c7883a 	add	r3,r4,r19
  8056f8:	19400017 	ldw	r5,0(r3)
  8056fc:	d9001f17 	ldw	r4,124(sp)
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
			memset(gSynFreq, 0, fftFrameSize * sizeof(float));
			for (k = 0; k <= fftFrameSize2; k++) {
				index = k * newPitch;
				if (index <= fftFrameSize2) {
					gSynMagn[index] += gAnaMagn[k];
  805700:	80800015 	stw	r2,0(r16)
					gSynFreq[index] = gAnaFreq[k] * newPitch;
  805704:	081f4140 	call	81f414 <__mulsf3>
  805708:	90800015 	stw	r2,0(r18)

			/* ***************** PROCESSING ******************* */
			/* this does the actual pitch shifting */
			memset(gSynMagn, 0, fftFrameSize * sizeof(float));
			memset(gSynFreq, 0, fftFrameSize * sizeof(float));
			for (k = 0; k <= fftFrameSize2; k++) {
  80570c:	9cc00104 	addi	r19,r19,4
  805710:	8d3fe21e 	bne	r17,r20,80569c <pitchShift+0x98c>
  805714:	d9400a17 	ldw	r5,40(sp)
  805718:	df000717 	ldw	fp,28(sp)
  80571c:	d8000315 	stw	zero,12(sp)
  805720:	d9400515 	stw	r5,20(sp)
  805724:	d8000b15 	stw	zero,44(sp)
			/* ***************** SYNTHESIS ******************* */
			/* this is the synthesis step */
			for (k = 0; k <= fftFrameSize2; k++) {

				/* get magnitude and true frequency from synthesis arrays */
				magn = gSynMagn[k];
  805728:	d9800b17 	ldw	r6,44(sp)
  80572c:	d9c02917 	ldw	r7,164(sp)
  805730:	31c5883a 	add	r2,r6,r7
  805734:	11000017 	ldw	r4,0(r2)
  805738:	081f9fc0 	call	81f9fc <__extendsfdf2>
				tmp = gSynFreq[k];
  80573c:	da000b17 	ldw	r8,44(sp)
  805740:	d9002817 	ldw	r4,160(sp)
			/* ***************** SYNTHESIS ******************* */
			/* this is the synthesis step */
			for (k = 0; k <= fftFrameSize2; k++) {

				/* get magnitude and true frequency from synthesis arrays */
				magn = gSynMagn[k];
  805744:	102d883a 	mov	r22,r2
  805748:	182f883a 	mov	r23,r3
				tmp = gSynFreq[k];
  80574c:	410b883a 	add	r5,r8,r4
  805750:	29000017 	ldw	r4,0(r5)
  805754:	081f9fc0 	call	81f9fc <__extendsfdf2>

				/* subtract bin mid frequency */
				tmp -= (double) k * freqPerBin;
  805758:	d9000317 	ldw	r4,12(sp)
			/* this is the synthesis step */
			for (k = 0; k <= fftFrameSize2; k++) {

				/* get magnitude and true frequency from synthesis arrays */
				magn = gSynMagn[k];
				tmp = gSynFreq[k];
  80575c:	1021883a 	mov	r16,r2
  805760:	1823883a 	mov	r17,r3

				/* subtract bin mid frequency */
				tmp -= (double) k * freqPerBin;
  805764:	08208500 	call	820850 <__floatsidf>
  805768:	d9001617 	ldw	r4,88(sp)
  80576c:	d9401717 	ldw	r5,92(sp)
  805770:	100d883a 	mov	r6,r2
  805774:	180f883a 	mov	r7,r3
  805778:	1025883a 	mov	r18,r2
  80577c:	1827883a 	mov	r19,r3
  805780:	08200140 	call	820014 <__muldf3>
  805784:	180f883a 	mov	r7,r3
			/* this is the synthesis step */
			for (k = 0; k <= fftFrameSize2; k++) {

				/* get magnitude and true frequency from synthesis arrays */
				magn = gSynMagn[k];
				tmp = gSynFreq[k];
  805788:	8009883a 	mov	r4,r16
  80578c:	880b883a 	mov	r5,r17

				/* subtract bin mid frequency */
				tmp -= (double) k * freqPerBin;
  805790:	100d883a 	mov	r6,r2
  805794:	081ff200 	call	81ff20 <__subdf3>

				/* get bin deviation from freq deviation */
				tmp /= freqPerBin;

				/* take osamp into account */
				tmp = 2. * M_PI * tmp / osamp;
  805798:	d9801617 	ldw	r6,88(sp)
  80579c:	d9c01717 	ldw	r7,92(sp)
				/* get magnitude and true frequency from synthesis arrays */
				magn = gSynMagn[k];
				tmp = gSynFreq[k];

				/* subtract bin mid frequency */
				tmp -= (double) k * freqPerBin;
  8057a0:	1009883a 	mov	r4,r2
  8057a4:	180b883a 	mov	r5,r3

				/* get bin deviation from freq deviation */
				tmp /= freqPerBin;

				/* take osamp into account */
				tmp = 2. * M_PI * tmp / osamp;
  8057a8:	08203d80 	call	8203d8 <__divdf3>
  8057ac:	02151134 	movhi	r8,21572
  8057b0:	420b4604 	addi	r8,r8,11544
  8057b4:	02500674 	movhi	r9,16409
  8057b8:	4a487ec4 	addi	r9,r9,8699
  8057bc:	400d883a 	mov	r6,r8
  8057c0:	480f883a 	mov	r7,r9
  8057c4:	180b883a 	mov	r5,r3
  8057c8:	1009883a 	mov	r4,r2
  8057cc:	08200140 	call	820014 <__muldf3>
  8057d0:	d9800d17 	ldw	r6,52(sp)
  8057d4:	d9c00e17 	ldw	r7,56(sp)
  8057d8:	180b883a 	mov	r5,r3
  8057dc:	1009883a 	mov	r4,r2
  8057e0:	08203d80 	call	8203d8 <__divdf3>

				/* add the overlap phase advance back in */
				tmp += (double) k * expct;

				/* accumulate delta phase to get bin phase */
				gSumPhase[k] += tmp;
  8057e4:	d9001417 	ldw	r4,80(sp)
  8057e8:	d9401517 	ldw	r5,84(sp)
  8057ec:	980f883a 	mov	r7,r19
  8057f0:	900d883a 	mov	r6,r18

				/* get bin deviation from freq deviation */
				tmp /= freqPerBin;

				/* take osamp into account */
				tmp = 2. * M_PI * tmp / osamp;
  8057f4:	1021883a 	mov	r16,r2
  8057f8:	1823883a 	mov	r17,r3

				/* add the overlap phase advance back in */
				tmp += (double) k * expct;

				/* accumulate delta phase to get bin phase */
				gSumPhase[k] += tmp;
  8057fc:	08200140 	call	820014 <__muldf3>
  805800:	180f883a 	mov	r7,r3
  805804:	880b883a 	mov	r5,r17
  805808:	8009883a 	mov	r4,r16
  80580c:	100d883a 	mov	r6,r2
  805810:	081ffa00 	call	81ffa0 <__adddf3>
  805814:	d9400517 	ldw	r5,20(sp)
  805818:	1021883a 	mov	r16,r2
  80581c:	1823883a 	mov	r17,r3
  805820:	29000017 	ldw	r4,0(r5)
  805824:	081f9fc0 	call	81f9fc <__extendsfdf2>
  805828:	180f883a 	mov	r7,r3
  80582c:	880b883a 	mov	r5,r17
  805830:	100d883a 	mov	r6,r2
  805834:	8009883a 	mov	r4,r16
  805838:	081ffa00 	call	81ffa0 <__adddf3>
  80583c:	180b883a 	mov	r5,r3
  805840:	1009883a 	mov	r4,r2
  805844:	0820a580 	call	820a58 <__truncdfsf2>
  805848:	d9800517 	ldw	r6,20(sp)
				phase = gSumPhase[k];
  80584c:	1009883a 	mov	r4,r2

				/* add the overlap phase advance back in */
				tmp += (double) k * expct;

				/* accumulate delta phase to get bin phase */
				gSumPhase[k] += tmp;
  805850:	30800015 	stw	r2,0(r6)
				phase = gSumPhase[k];
  805854:	081f9fc0 	call	81f9fc <__extendsfdf2>

				/* get real and imag part and re-interleave */
				gFFTworksp[2 * k] = magn * cos(phase);
  805858:	1009883a 	mov	r4,r2
  80585c:	180b883a 	mov	r5,r3
				/* add the overlap phase advance back in */
				tmp += (double) k * expct;

				/* accumulate delta phase to get bin phase */
				gSumPhase[k] += tmp;
				phase = gSumPhase[k];
  805860:	1021883a 	mov	r16,r2
  805864:	1823883a 	mov	r17,r3

				/* get real and imag part and re-interleave */
				gFFTworksp[2 * k] = magn * cos(phase);
  805868:	081b3440 	call	81b344 <cos>
  80586c:	180f883a 	mov	r7,r3
  805870:	100d883a 	mov	r6,r2
  805874:	b009883a 	mov	r4,r22
  805878:	b80b883a 	mov	r5,r23
  80587c:	08200140 	call	820014 <__muldf3>
  805880:	180b883a 	mov	r5,r3
  805884:	1009883a 	mov	r4,r2
  805888:	0820a580 	call	820a58 <__truncdfsf2>
  80588c:	e0800015 	stw	r2,0(fp)
				gFFTworksp[2 * k + 1] = magn * sin(phase);
  805890:	8009883a 	mov	r4,r16
  805894:	880b883a 	mov	r5,r17
  805898:	081b4ac0 	call	81b4ac <sin>
  80589c:	180f883a 	mov	r7,r3
  8058a0:	b009883a 	mov	r4,r22
  8058a4:	b80b883a 	mov	r5,r23
  8058a8:	100d883a 	mov	r6,r2
  8058ac:	08200140 	call	820014 <__muldf3>
  8058b0:	180b883a 	mov	r5,r3
  8058b4:	1009883a 	mov	r4,r2
  8058b8:	0820a580 	call	820a58 <__truncdfsf2>
  8058bc:	e0800115 	stw	r2,4(fp)
				}
			}

			/* ***************** SYNTHESIS ******************* */
			/* this is the synthesis step */
			for (k = 0; k <= fftFrameSize2; k++) {
  8058c0:	d9c00317 	ldw	r7,12(sp)
  8058c4:	da000b17 	ldw	r8,44(sp)
  8058c8:	d8800517 	ldw	r2,20(sp)
  8058cc:	d8c00f17 	ldw	r3,60(sp)
  8058d0:	39c00044 	addi	r7,r7,1
  8058d4:	42000104 	addi	r8,r8,4
  8058d8:	10800104 	addi	r2,r2,4
  8058dc:	d9c00315 	stw	r7,12(sp)
  8058e0:	da000b15 	stw	r8,44(sp)
  8058e4:	d8800515 	stw	r2,20(sp)
  8058e8:	e7000204 	addi	fp,fp,8
  8058ec:	19ff8e0e 	bge	r3,r7,805728 <pitchShift+0xa18>
  8058f0:	003eb606 	br	8053cc <pitchShift+0x6bc>
  8058f4:	3009883a 	mov	r4,r6
	memset(gOutputAccum, 0, 2 * MAX_FRAME_LENGTH * sizeof(float));
	memset(gAnaFreq, 0, MAX_FRAME_LENGTH * sizeof(float));
	memset(gAnaMagn, 0, MAX_FRAME_LENGTH * sizeof(float));

	fftFrameSize2 = fftFrameSize / 2;
	stepSize = fftFrameSize / osamp;
  8058f8:	0820b480 	call	820b48 <__divsi3>
  8058fc:	d8801015 	stw	r2,64(sp)
  805900:	003d6606 	br	804e9c <pitchShift+0x18c>

00805904 <fft>:
 working with 'common' audio signals our input signal has to be passed as
 {in[0],0.,in[1],0.,in[2],0.,...} asf. In that case, the transform of the
 frequencies of interest is in fftBuffer[0...fftFrameSize].

 */
{
  805904:	deffe804 	addi	sp,sp,-96
  805908:	d9000d15 	stw	r4,52(sp)
    float wr, wi, arg, *p1, *p2, temp;
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);
  80590c:	2809883a 	mov	r4,r5
 working with 'common' audio signals our input signal has to be passed as
 {in[0],0.,in[1],0.,in[2],0.,...} asf. In that case, the transform of the
 frequencies of interest is in fftBuffer[0...fftFrameSize].

 */
{
  805910:	dfc01715 	stw	ra,92(sp)
  805914:	dcc01115 	stw	r19,68(sp)
  805918:	dc801015 	stw	r18,64(sp)
  80591c:	2827883a 	mov	r19,r5
  805920:	3025883a 	mov	r18,r6
  805924:	dc400f15 	stw	r17,60(sp)
  805928:	dc000e15 	stw	r16,56(sp)
  80592c:	df001615 	stw	fp,88(sp)
  805930:	ddc01515 	stw	r23,84(sp)
  805934:	dd801415 	stw	r22,80(sp)
  805938:	dd401315 	stw	r21,76(sp)
  80593c:	dd001215 	stw	r20,72(sp)
    float wr, wi, arg, *p1, *p2, temp;
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);
  805940:	08208500 	call	820850 <__floatsidf>
  805944:	180b883a 	mov	r5,r3
  805948:	1009883a 	mov	r4,r2
  80594c:	081b61c0 	call	81b61c <log>
  805950:	000d883a 	mov	r6,zero
  805954:	01d00034 	movhi	r7,16384
  805958:	380b883a 	mov	r5,r7
  80595c:	3009883a 	mov	r4,r6
  805960:	1021883a 	mov	r16,r2
  805964:	1823883a 	mov	r17,r3
  805968:	081b61c0 	call	81b61c <log>
  80596c:	180f883a 	mov	r7,r3
  805970:	880b883a 	mov	r5,r17
  805974:	8009883a 	mov	r4,r16
  805978:	100d883a 	mov	r6,r2
  80597c:	08203d80 	call	8203d8 <__divdf3>
  805980:	0011883a 	mov	r8,zero
  805984:	024ff834 	movhi	r9,16352
  805988:	480f883a 	mov	r7,r9
  80598c:	180b883a 	mov	r5,r3
  805990:	1009883a 	mov	r4,r2
  805994:	400d883a 	mov	r6,r8
  805998:	081ffa00 	call	81ffa0 <__adddf3>

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
  80599c:	9ce7883a 	add	r19,r19,r19
 */
{
    float wr, wi, arg, *p1, *p2, temp;
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);
  8059a0:	180b883a 	mov	r5,r3
  8059a4:	1009883a 	mov	r4,r2

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
  8059a8:	dcc00c15 	stw	r19,48(sp)
 */
{
    float wr, wi, arg, *p1, *p2, temp;
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);
  8059ac:	08209480 	call	820948 <__fixdfsi>

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
  8059b0:	dcc00c17 	ldw	r19,48(sp)
 */
{
    float wr, wi, arg, *p1, *p2, temp;
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);
  8059b4:	d8800615 	stw	r2,24(sp)

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
  8059b8:	00800084 	movi	r2,2
  8059bc:	99ffff84 	addi	r7,r19,-2
  8059c0:	11c01e0e 	bge	r2,r7,805a3c <fft+0x138>
  8059c4:	d9800d17 	ldw	r6,52(sp)
  8059c8:	1011883a 	mov	r8,r2
  8059cc:	100b883a 	mov	r5,r2
        for (bitm = 2, j = 0; bitm < 2*fftFrameSize; bitm <<= 1) {
  8059d0:	d9000c17 	ldw	r4,48(sp)
  8059d4:	4100c80e 	bge	r8,r4,805cf8 <fft+0x3f4>
    float wr, wi, arg, *p1, *p2, temp;
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
  8059d8:	00c00084 	movi	r3,2
  8059dc:	0009883a 	mov	r4,zero
        for (bitm = 2, j = 0; bitm < 2*fftFrameSize; bitm <<= 1) {
            if (i & bitm) j++;
  8059e0:	28c4703a 	and	r2,r5,r3
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
        for (bitm = 2, j = 0; bitm < 2*fftFrameSize; bitm <<= 1) {
  8059e4:	18c7883a 	add	r3,r3,r3
            if (i & bitm) j++;
  8059e8:	10000126 	beq	r2,zero,8059f0 <fft+0xec>
  8059ec:	21000044 	addi	r4,r4,1
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
        for (bitm = 2, j = 0; bitm < 2*fftFrameSize; bitm <<= 1) {
  8059f0:	d8800c17 	ldw	r2,48(sp)
            if (i & bitm) j++;
            j <<= 1;
  8059f4:	2109883a 	add	r4,r4,r4
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
        for (bitm = 2, j = 0; bitm < 2*fftFrameSize; bitm <<= 1) {
  8059f8:	18bff916 	blt	r3,r2,8059e0 <fft+0xdc>
            if (i & bitm) j++;
            j <<= 1;
		}
		if (i < j) {
  8059fc:	29000c0e 	bge	r5,r4,805a30 <fft+0x12c>
			p1 = fftBuffer+i; p2 = fftBuffer+j;
  805a00:	d8c00d17 	ldw	r3,52(sp)
  805a04:	2105883a 	add	r2,r4,r4
  805a08:	1085883a 	add	r2,r2,r2
  805a0c:	1885883a 	add	r2,r3,r2
			temp = *p1; *(p1++) = *p2;
  805a10:	10c00017 	ldw	r3,0(r2)
  805a14:	31000217 	ldw	r4,8(r6)
  805a18:	30c00215 	stw	r3,8(r6)
			*(p2++) = temp; temp = *p1;
  805a1c:	11000015 	stw	r4,0(r2)
			*p1 = *p2; *p2 = temp;
  805a20:	10c00117 	ldw	r3,4(r2)
            j <<= 1;
		}
		if (i < j) {
			p1 = fftBuffer+i; p2 = fftBuffer+j;
			temp = *p1; *(p1++) = *p2;
			*(p2++) = temp; temp = *p1;
  805a24:	31000317 	ldw	r4,12(r6)
			*p1 = *p2; *p2 = temp;
  805a28:	30c00315 	stw	r3,12(r6)
  805a2c:	11000115 	stw	r4,4(r2)
    float wr, wi, arg, *p1, *p2, temp;
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
  805a30:	29400084 	addi	r5,r5,2
  805a34:	31800204 	addi	r6,r6,8
  805a38:	29ffe516 	blt	r5,r7,8059d0 <fft+0xcc>
			*(p2++) = temp; temp = *p1;
			*p1 = *p2; *p2 = temp;
		}
	}

	for (k = 0, le = 2; k < logN; k++) {
  805a3c:	d9400617 	ldw	r5,24(sp)
  805a40:	0140a10e 	bge	zero,r5,805cc8 <fft+0x3c4>
  805a44:	9009883a 	mov	r4,r18
  805a48:	08208500 	call	820850 <__floatsidf>
  805a4c:	d8800415 	stw	r2,16(sp)
  805a50:	00800084 	movi	r2,2
  805a54:	d8c00515 	stw	r3,20(sp)
  805a58:	d8800915 	stw	r2,36(sp)
  805a5c:	d8000715 	stw	zero,28(sp)
		le <<= 1;
  805a60:	d8c00917 	ldw	r3,36(sp)
  805a64:	18c7883a 	add	r3,r3,r3
		le2 = le>>1;
  805a68:	180bd07a 	srai	r5,r3,1
		ur = 1.0;
		ui = 0.0;
		arg = M_PI / (le2>>1);
		wr = cos(arg);
  805a6c:	1809d0ba 	srai	r4,r3,2
			*p1 = *p2; *p2 = temp;
		}
	}

	for (k = 0, le = 2; k < logN; k++) {
		le <<= 1;
  805a70:	d8c00915 	stw	r3,36(sp)
		le2 = le>>1;
  805a74:	d9400815 	stw	r5,32(sp)
		ur = 1.0;
		ui = 0.0;
		arg = M_PI / (le2>>1);
		wr = cos(arg);
  805a78:	08208500 	call	820850 <__floatsidf>
  805a7c:	02151134 	movhi	r8,21572
  805a80:	420b4604 	addi	r8,r8,11544
  805a84:	02500274 	movhi	r9,16393
  805a88:	4a487ec4 	addi	r9,r9,8699
  805a8c:	480b883a 	mov	r5,r9
  805a90:	4009883a 	mov	r4,r8
  805a94:	180f883a 	mov	r7,r3
  805a98:	100d883a 	mov	r6,r2
  805a9c:	08203d80 	call	8203d8 <__divdf3>
  805aa0:	180b883a 	mov	r5,r3
  805aa4:	1009883a 	mov	r4,r2
  805aa8:	0820a580 	call	820a58 <__truncdfsf2>
  805aac:	1009883a 	mov	r4,r2
  805ab0:	081f9fc0 	call	81f9fc <__extendsfdf2>
  805ab4:	1009883a 	mov	r4,r2
  805ab8:	180b883a 	mov	r5,r3
  805abc:	1021883a 	mov	r16,r2
  805ac0:	1823883a 	mov	r17,r3
  805ac4:	081b3440 	call	81b344 <cos>
  805ac8:	180b883a 	mov	r5,r3
  805acc:	1009883a 	mov	r4,r2
  805ad0:	0820a580 	call	820a58 <__truncdfsf2>
  805ad4:	d8800b15 	stw	r2,44(sp)
		wi = sign*sin(arg);
  805ad8:	8009883a 	mov	r4,r16
  805adc:	880b883a 	mov	r5,r17
  805ae0:	081b4ac0 	call	81b4ac <sin>
  805ae4:	d9800417 	ldw	r6,16(sp)
  805ae8:	d9c00517 	ldw	r7,20(sp)
  805aec:	180b883a 	mov	r5,r3
  805af0:	1009883a 	mov	r4,r2
  805af4:	08200140 	call	820014 <__muldf3>
  805af8:	180b883a 	mov	r5,r3
  805afc:	1009883a 	mov	r4,r2
  805b00:	0820a580 	call	820a58 <__truncdfsf2>
  805b04:	d8800a15 	stw	r2,40(sp)
		for (j = 0; j < le2; j += 2) {
  805b08:	d8800817 	ldw	r2,32(sp)
  805b0c:	0080690e 	bge	zero,r2,805cb4 <fft+0x3b0>
  805b10:	d9000917 	ldw	r4,36(sp)
  805b14:	d9400d17 	ldw	r5,52(sp)
  805b18:	1087883a 	add	r3,r2,r2
  805b1c:	18c7883a 	add	r3,r3,r3
  805b20:	2105883a 	add	r2,r4,r4
  805b24:	1085883a 	add	r2,r2,r2
  805b28:	1947883a 	add	r3,r3,r5
  805b2c:	d8800315 	stw	r2,12(sp)
  805b30:	d8c00215 	stw	r3,8(sp)
  805b34:	d9400115 	stw	r5,4(sp)
  805b38:	05cfe034 	movhi	r23,16256
  805b3c:	0039883a 	mov	fp,zero
  805b40:	d8000015 	stw	zero,0(sp)
			p1r = fftBuffer+j; p1i = p1r+1;
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
  805b44:	d8800017 	ldw	r2,0(sp)
  805b48:	d8c00c17 	ldw	r3,48(sp)
  805b4c:	10c0360e 	bge	r2,r3,805c28 <fft+0x324>
  805b50:	d9000917 	ldw	r4,36(sp)
  805b54:	dd000117 	ldw	r20,4(sp)
  805b58:	dd400217 	ldw	r21,8(sp)
  805b5c:	20ad883a 	add	r22,r4,r2
				tr = *p2r * ur - *p2i * ui;
  805b60:	ac400017 	ldw	r17,0(r21)
  805b64:	ac800117 	ldw	r18,4(r21)
  805b68:	b80b883a 	mov	r5,r23
  805b6c:	8809883a 	mov	r4,r17
  805b70:	081f4140 	call	81f414 <__mulsf3>
  805b74:	9009883a 	mov	r4,r18
  805b78:	e00b883a 	mov	r5,fp
  805b7c:	1021883a 	mov	r16,r2
  805b80:	081f4140 	call	81f414 <__mulsf3>
  805b84:	100b883a 	mov	r5,r2
  805b88:	8009883a 	mov	r4,r16
  805b8c:	081f3400 	call	81f340 <__subsf3>
				ti = *p2r * ui + *p2i * ur;
  805b90:	8809883a 	mov	r4,r17
  805b94:	e00b883a 	mov	r5,fp
		wi = sign*sin(arg);
		for (j = 0; j < le2; j += 2) {
			p1r = fftBuffer+j; p1i = p1r+1;
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
				tr = *p2r * ur - *p2i * ui;
  805b98:	1027883a 	mov	r19,r2
				ti = *p2r * ui + *p2i * ur;
  805b9c:	081f4140 	call	81f414 <__mulsf3>
  805ba0:	9009883a 	mov	r4,r18
  805ba4:	b80b883a 	mov	r5,r23
  805ba8:	1021883a 	mov	r16,r2
  805bac:	081f4140 	call	81f414 <__mulsf3>
  805bb0:	100b883a 	mov	r5,r2
  805bb4:	8009883a 	mov	r4,r16
  805bb8:	081f3b00 	call	81f3b0 <__addsf3>
  805bbc:	1021883a 	mov	r16,r2
				*p2r = *p1r - tr; *p2i = *p1i - ti;
  805bc0:	a1000017 	ldw	r4,0(r20)
				*p1r += tr; *p1i += ti;
				p1r += le; p1i += le;
				p2r += le; p2i += le;
  805bc4:	d8800917 	ldw	r2,36(sp)
			p1r = fftBuffer+j; p1i = p1r+1;
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
				tr = *p2r * ur - *p2i * ui;
				ti = *p2r * ui + *p2i * ur;
				*p2r = *p1r - tr; *p2i = *p1i - ti;
  805bc8:	980b883a 	mov	r5,r19
				*p1r += tr; *p1i += ti;
				p1r += le; p1i += le;
				p2r += le; p2i += le;
  805bcc:	b0ad883a 	add	r22,r22,r2
			p1r = fftBuffer+j; p1i = p1r+1;
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
				tr = *p2r * ur - *p2i * ui;
				ti = *p2r * ui + *p2i * ur;
				*p2r = *p1r - tr; *p2i = *p1i - ti;
  805bd0:	081f3400 	call	81f340 <__subsf3>
  805bd4:	a8800015 	stw	r2,0(r21)
  805bd8:	a1000117 	ldw	r4,4(r20)
  805bdc:	800b883a 	mov	r5,r16
  805be0:	081f3400 	call	81f340 <__subsf3>
  805be4:	a8800115 	stw	r2,4(r21)
				*p1r += tr; *p1i += ti;
  805be8:	a1000017 	ldw	r4,0(r20)
				p1r += le; p1i += le;
				p2r += le; p2i += le;
  805bec:	d8c00317 	ldw	r3,12(sp)
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
				tr = *p2r * ur - *p2i * ui;
				ti = *p2r * ui + *p2i * ur;
				*p2r = *p1r - tr; *p2i = *p1i - ti;
				*p1r += tr; *p1i += ti;
  805bf0:	980b883a 	mov	r5,r19
				p1r += le; p1i += le;
				p2r += le; p2i += le;
  805bf4:	a8eb883a 	add	r21,r21,r3
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
				tr = *p2r * ur - *p2i * ui;
				ti = *p2r * ui + *p2i * ur;
				*p2r = *p1r - tr; *p2i = *p1i - ti;
				*p1r += tr; *p1i += ti;
  805bf8:	081f3b00 	call	81f3b0 <__addsf3>
  805bfc:	a1000117 	ldw	r4,4(r20)
  805c00:	a0800015 	stw	r2,0(r20)
  805c04:	800b883a 	mov	r5,r16
  805c08:	081f3b00 	call	81f3b0 <__addsf3>
		wr = cos(arg);
		wi = sign*sin(arg);
		for (j = 0; j < le2; j += 2) {
			p1r = fftBuffer+j; p1i = p1r+1;
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
  805c0c:	d9000917 	ldw	r4,36(sp)
				tr = *p2r * ur - *p2i * ui;
				ti = *p2r * ui + *p2i * ur;
				*p2r = *p1r - tr; *p2i = *p1i - ti;
				*p1r += tr; *p1i += ti;
  805c10:	a0800115 	stw	r2,4(r20)
				p1r += le; p1i += le;
  805c14:	d9400317 	ldw	r5,12(sp)
		wr = cos(arg);
		wi = sign*sin(arg);
		for (j = 0; j < le2; j += 2) {
			p1r = fftBuffer+j; p1i = p1r+1;
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
  805c18:	d8800c17 	ldw	r2,48(sp)
  805c1c:	b107c83a 	sub	r3,r22,r4
				tr = *p2r * ur - *p2i * ui;
				ti = *p2r * ui + *p2i * ur;
				*p2r = *p1r - tr; *p2i = *p1i - ti;
				*p1r += tr; *p1i += ti;
				p1r += le; p1i += le;
  805c20:	a169883a 	add	r20,r20,r5
		wr = cos(arg);
		wi = sign*sin(arg);
		for (j = 0; j < le2; j += 2) {
			p1r = fftBuffer+j; p1i = p1r+1;
			p2r = p1r+le2; p2i = p2r+1;
			for (i = j; i < 2*fftFrameSize; i += le) {
  805c24:	18bfce16 	blt	r3,r2,805b60 <fft+0x25c>
		ur = 1.0;
		ui = 0.0;
		arg = M_PI / (le2>>1);
		wr = cos(arg);
		wi = sign*sin(arg);
		for (j = 0; j < le2; j += 2) {
  805c28:	d8c00017 	ldw	r3,0(sp)
  805c2c:	d9000217 	ldw	r4,8(sp)
  805c30:	d9400117 	ldw	r5,4(sp)
  805c34:	d8800817 	ldw	r2,32(sp)
  805c38:	18c00084 	addi	r3,r3,2
  805c3c:	21000204 	addi	r4,r4,8
  805c40:	29400204 	addi	r5,r5,8
  805c44:	d8c00015 	stw	r3,0(sp)
  805c48:	d9000215 	stw	r4,8(sp)
  805c4c:	d9400115 	stw	r5,4(sp)
  805c50:	1880180e 	bge	r3,r2,805cb4 <fft+0x3b0>
				*p2r = *p1r - tr; *p2i = *p1i - ti;
				*p1r += tr; *p1i += ti;
				p1r += le; p1i += le;
				p2r += le; p2i += le;
			}
			tr = ur*wr - ui*wi;
  805c54:	d9000b17 	ldw	r4,44(sp)
  805c58:	b80b883a 	mov	r5,r23
  805c5c:	081f4140 	call	81f414 <__mulsf3>
  805c60:	d9000a17 	ldw	r4,40(sp)
  805c64:	e00b883a 	mov	r5,fp
  805c68:	1021883a 	mov	r16,r2
  805c6c:	081f4140 	call	81f414 <__mulsf3>
  805c70:	100b883a 	mov	r5,r2
  805c74:	8009883a 	mov	r4,r16
  805c78:	081f3400 	call	81f340 <__subsf3>
			ui = ur*wi + ui*wr;
  805c7c:	d9000a17 	ldw	r4,40(sp)
  805c80:	b80b883a 	mov	r5,r23
				*p2r = *p1r - tr; *p2i = *p1i - ti;
				*p1r += tr; *p1i += ti;
				p1r += le; p1i += le;
				p2r += le; p2i += le;
			}
			tr = ur*wr - ui*wi;
  805c84:	1023883a 	mov	r17,r2
			ui = ur*wi + ui*wr;
  805c88:	081f4140 	call	81f414 <__mulsf3>
  805c8c:	d9000b17 	ldw	r4,44(sp)
  805c90:	e00b883a 	mov	r5,fp
  805c94:	1021883a 	mov	r16,r2
  805c98:	081f4140 	call	81f414 <__mulsf3>
  805c9c:	100b883a 	mov	r5,r2
  805ca0:	8009883a 	mov	r4,r16
  805ca4:	081f3b00 	call	81f3b0 <__addsf3>
  805ca8:	1039883a 	mov	fp,r2
  805cac:	882f883a 	mov	r23,r17
  805cb0:	003fa406 	br	805b44 <fft+0x240>
			*(p2++) = temp; temp = *p1;
			*p1 = *p2; *p2 = temp;
		}
	}

	for (k = 0, le = 2; k < logN; k++) {
  805cb4:	d8c00717 	ldw	r3,28(sp)
  805cb8:	d9000617 	ldw	r4,24(sp)
  805cbc:	18c00044 	addi	r3,r3,1
  805cc0:	d8c00715 	stw	r3,28(sp)
  805cc4:	20ff661e 	bne	r4,r3,805a60 <fft+0x15c>
			tr = ur*wr - ui*wi;
			ui = ur*wi + ui*wr;
			ur = tr;
		}
	}
}
  805cc8:	dfc01717 	ldw	ra,92(sp)
  805ccc:	df001617 	ldw	fp,88(sp)
  805cd0:	ddc01517 	ldw	r23,84(sp)
  805cd4:	dd801417 	ldw	r22,80(sp)
  805cd8:	dd401317 	ldw	r21,76(sp)
  805cdc:	dd001217 	ldw	r20,72(sp)
  805ce0:	dcc01117 	ldw	r19,68(sp)
  805ce4:	dc801017 	ldw	r18,64(sp)
  805ce8:	dc400f17 	ldw	r17,60(sp)
  805cec:	dc000e17 	ldw	r16,56(sp)
  805cf0:	dec01804 	addi	sp,sp,96
  805cf4:	f800283a 	ret
    float tr, ti, ur, ui, *p1r, *p1i, *p2r, *p2i;
    long i, bitm, j, le, le2, k, logN;
    logN = (long)(log(fftFrameSize)/log(2.)+.5);

    for (i = 2; i < 2*fftFrameSize-2; i += 2) {
        for (bitm = 2, j = 0; bitm < 2*fftFrameSize; bitm <<= 1) {
  805cf8:	0009883a 	mov	r4,zero
  805cfc:	003f3f06 	br	8059fc <fft+0xf8>

00805d00 <isCurrPlaying>:
}

/*
 * This function check if the song is currently playing in the SoundMixer
 */
int isCurrPlaying(int song_id) {
  805d00:	0005883a 	mov	r2,zero
  805d04:	01402134 	movhi	r5,132
  805d08:	294afd04 	addi	r5,r5,11252
	int i = 0;
	while(db.curr_song_ids[i] != 0) {
  805d0c:	28c00017 	ldw	r3,0(r5)
		if(db.curr_song_ids[i++] == song_id) {
  805d10:	10800044 	addi	r2,r2,1
  805d14:	29400104 	addi	r5,r5,4
/*
 * This function check if the song is currently playing in the SoundMixer
 */
int isCurrPlaying(int song_id) {
	int i = 0;
	while(db.curr_song_ids[i] != 0) {
  805d18:	18000326 	beq	r3,zero,805d28 <isCurrPlaying+0x28>
		if(db.curr_song_ids[i++] == song_id) {
  805d1c:	193ffb1e 	bne	r3,r4,805d0c <isCurrPlaying+0xc>
			return i-1;
  805d20:	10bfffc4 	addi	r2,r2,-1
  805d24:	f800283a 	ret
/*
 * This function check if the song is currently playing in the SoundMixer
 */
int isCurrPlaying(int song_id) {
	int i = 0;
	while(db.curr_song_ids[i] != 0) {
  805d28:	00bfffc4 	movi	r2,-1
		if(db.curr_song_ids[i++] == song_id) {
			return i-1;
		}
	} return -1;
}
  805d2c:	f800283a 	ret

00805d30 <removeCurrPlaying>:

void removeCurrPlaying(int index) {
	int j;
	db.total_songs_playing--;
  805d30:	00c02134 	movhi	r3,132
  805d34:	18ca6204 	addi	r3,r3,10632
  805d38:	1880a617 	ldw	r2,664(r3)
  805d3c:	117fffc4 	addi	r5,r2,-1
  805d40:	1940a615 	stw	r5,664(r3)
	//stopSound(db.songs[db.curr_song_ids[index]]->sound);
	for(j = index; j <= db.total_songs_playing; j++) {
  805d44:	29000916 	blt	r5,r4,805d6c <removeCurrPlaying+0x3c>
  805d48:	2105883a 	add	r2,r4,r4
  805d4c:	1085883a 	add	r2,r2,r2
  805d50:	10809c04 	addi	r2,r2,624
  805d54:	10c7883a 	add	r3,r2,r3

		db.curr_song_ids[j] = db.curr_song_ids[j+1];
  805d58:	18800017 	ldw	r2,0(r3)
  805d5c:	21000044 	addi	r4,r4,1
  805d60:	18bfff15 	stw	r2,-4(r3)
  805d64:	18c00104 	addi	r3,r3,4

void removeCurrPlaying(int index) {
	int j;
	db.total_songs_playing--;
	//stopSound(db.songs[db.curr_song_ids[index]]->sound);
	for(j = index; j <= db.total_songs_playing; j++) {
  805d68:	293ffb0e 	bge	r5,r4,805d58 <removeCurrPlaying+0x28>
  805d6c:	f800283a 	ret

00805d70 <initializeListWithSongs>:
/*
 * Parses a string that contains playlist & songs that
 * belong to that playlist, load all songs to the playlist
 * in correct order.
 * */
void initializeListWithSongs(char* input){
  805d70:	defdf604 	addi	sp,sp,-2088
  805d74:	dc820215 	stw	r18,2056(sp)
	char line[1024];
	char temp[1024];
	int i, list_id = 0, song_id, cursorPos = 0;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
  805d78:	dc810004 	addi	r18,sp,1024
  805d7c:	01810004 	movi	r6,1024
/*
 * Parses a string that contains playlist & songs that
 * belong to that playlist, load all songs to the playlist
 * in correct order.
 * */
void initializeListWithSongs(char* input){
  805d80:	dd020415 	stw	r20,2064(sp)
	char line[1024];
	char temp[1024];
	int i, list_id = 0, song_id, cursorPos = 0;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
  805d84:	000b883a 	mov	r5,zero
/*
 * Parses a string that contains playlist & songs that
 * belong to that playlist, load all songs to the playlist
 * in correct order.
 * */
void initializeListWithSongs(char* input){
  805d88:	2029883a 	mov	r20,r4
	char line[1024];
	char temp[1024];
	int i, list_id = 0, song_id, cursorPos = 0;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
  805d8c:	9009883a 	mov	r4,r18
/*
 * Parses a string that contains playlist & songs that
 * belong to that playlist, load all songs to the playlist
 * in correct order.
 * */
void initializeListWithSongs(char* input){
  805d90:	dfc20915 	stw	ra,2084(sp)
  805d94:	df020815 	stw	fp,2080(sp)
  805d98:	ddc20715 	stw	r23,2076(sp)
  805d9c:	dd820615 	stw	r22,2072(sp)
  805da0:	dd420515 	stw	r21,2068(sp)
  805da4:	dcc20315 	stw	r19,2060(sp)
  805da8:	dc420115 	stw	r17,2052(sp)
  805dac:	dc020015 	stw	r16,2048(sp)
	char line[1024];
	char temp[1024];
	int i, list_id = 0, song_id, cursorPos = 0;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
  805db0:	0821fd00 	call	821fd0 <memset>
	strcpy(line, input);
  805db4:	a00b883a 	mov	r5,r20
  805db8:	9009883a 	mov	r4,r18
  805dbc:	0822d840 	call	822d84 <strcpy>
	for (i = 0; i < strlen(input); i++){
  805dc0:	a009883a 	mov	r4,r20
  805dc4:	0822e100 	call	822e10 <strlen>
	char temp[1024];
	int i, list_id = 0, song_id, cursorPos = 0;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
  805dc8:	0023883a 	mov	r17,zero
  805dcc:	002f883a 	mov	r23,zero
  805dd0:	0027883a 	mov	r19,zero
  805dd4:	002d883a 	mov	r22,zero
  805dd8:	05400044 	movi	r21,1
  805ddc:	07002134 	movhi	fp,132
  805de0:	e70a6204 	addi	fp,fp,10632
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
  805de4:	8c000044 	addi	r16,r17,1
  805de8:	9447883a 	add	r3,r18,r17
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
  805dec:	d809883a 	mov	r4,sp
  805df0:	000b883a 	mov	r5,zero
  805df4:	01810004 	movi	r6,1024
	int i, list_id = 0, song_id, cursorPos = 0;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
  805df8:	88800c2e 	bgeu	r17,r2,805e2c <initializeListWithSongs+0xbc>
		if (line[i] == ' '){
  805dfc:	18c00007 	ldb	r3,0(r3)
  805e00:	00800804 	movi	r2,32
  805e04:	18801526 	beq	r3,r2,805e5c <initializeListWithSongs+0xec>
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
				order++;
  805e08:	8023883a 	mov	r17,r16
	int i, list_id = 0, song_id, cursorPos = 0;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
  805e0c:	a009883a 	mov	r4,r20
  805e10:	0822e100 	call	822e10 <strlen>
		if (line[i] == ' '){
  805e14:	8c000044 	addi	r16,r17,1
  805e18:	9447883a 	add	r3,r18,r17
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
  805e1c:	d809883a 	mov	r4,sp
  805e20:	000b883a 	mov	r5,zero
  805e24:	01810004 	movi	r6,1024
	int i, list_id = 0, song_id, cursorPos = 0;
	int iteration = 0;
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
  805e28:	88bff436 	bltu	r17,r2,805dfc <initializeListWithSongs+0x8c>
				db.index_list_order[list_id][order] = song_id;
				order++;
			}
		}
	}
}
  805e2c:	dfc20917 	ldw	ra,2084(sp)
  805e30:	df020817 	ldw	fp,2080(sp)
  805e34:	ddc20717 	ldw	r23,2076(sp)
  805e38:	dd820617 	ldw	r22,2072(sp)
  805e3c:	dd420517 	ldw	r21,2068(sp)
  805e40:	dd020417 	ldw	r20,2064(sp)
  805e44:	dcc20317 	ldw	r19,2060(sp)
  805e48:	dc820217 	ldw	r18,2056(sp)
  805e4c:	dc420117 	ldw	r17,2052(sp)
  805e50:	dc020017 	ldw	r16,2048(sp)
  805e54:	dec20a04 	addi	sp,sp,2088
  805e58:	f800283a 	ret
	int order = 1;
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
  805e5c:	0821fd00 	call	821fd0 <memset>
			if (iteration == 0){
  805e60:	b004c03a 	cmpne	r2,r22,zero
				iteration++;
				list_id = strtol(temp, NULL, 10);
				//printf("List id is %d\n", list_id);
				if (list_id == 0){ break;}
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
  805e64:	8ccdc83a 	sub	r6,r17,r19
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
			if (iteration == 0){
				cursorPos = i+1;
  805e68:	8c000044 	addi	r16,r17,1
				iteration++;
				list_id = strtol(temp, NULL, 10);
				//printf("List id is %d\n", list_id);
				if (list_id == 0){ break;}
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
  805e6c:	94cb883a 	add	r5,r18,r19
  805e70:	31800044 	addi	r6,r6,1
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
			if (iteration == 0){
				cursorPos = i+1;
				strncpy(temp, line, cursorPos);
  805e74:	d809883a 	mov	r4,sp
	memset(line, 0, sizeof(line)/sizeof(line[0]));
	strcpy(line, input);
	for (i = 0; i < strlen(input); i++){
		if (line[i] == ' '){
			memset(temp, 0, sizeof(temp)/sizeof(temp[0]));
			if (iteration == 0){
  805e78:	10000d1e 	bne	r2,zero,805eb0 <initializeListWithSongs+0x140>
				cursorPos = i+1;
				strncpy(temp, line, cursorPos);
  805e7c:	900b883a 	mov	r5,r18
  805e80:	800d883a 	mov	r6,r16
  805e84:	0822f340 	call	822f34 <strncpy>
				iteration++;
				list_id = strtol(temp, NULL, 10);
  805e88:	d809883a 	mov	r4,sp
  805e8c:	000b883a 	mov	r5,zero
  805e90:	01800284 	movi	r6,10
  805e94:	08239c80 	call	8239c8 <strtol>
				//printf("List id is %d\n", list_id);
				if (list_id == 0){ break;}
  805e98:	102f883a 	mov	r23,r2
  805e9c:	8027883a 	mov	r19,r16
  805ea0:	05800044 	movi	r22,1
  805ea4:	103fe126 	beq	r2,zero,805e2c <initializeListWithSongs+0xbc>
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
				order++;
  805ea8:	8023883a 	mov	r17,r16
  805eac:	003fd706 	br	805e0c <initializeListWithSongs+0x9c>
				iteration++;
				list_id = strtol(temp, NULL, 10);
				//printf("List id is %d\n", list_id);
				if (list_id == 0){ break;}
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
  805eb0:	d809883a 	mov	r4,sp
  805eb4:	0822f340 	call	822f34 <strncpy>
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
  805eb8:	d809883a 	mov	r4,sp
  805ebc:	000b883a 	mov	r5,zero
  805ec0:	01800284 	movi	r6,10
  805ec4:	08239c80 	call	8239c8 <strtol>
  805ec8:	1009883a 	mov	r4,r2
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  805ecc:	b8c01964 	muli	r3,r23,101
				if (list_id == 0){ break;}
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
  805ed0:	103fd626 	beq	r2,zero,805e2c <initializeListWithSongs+0xbc>
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
  805ed4:	1d45883a 	add	r2,r3,r21
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  805ed8:	1907883a 	add	r3,r3,r4
  805edc:	18c7883a 	add	r3,r3,r3
				db.index_list_order[list_id][order] = song_id;
  805ee0:	1085883a 	add	r2,r2,r2
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  805ee4:	18c7883a 	add	r3,r3,r3
				db.index_list_order[list_id][order] = song_id;
  805ee8:	1085883a 	add	r2,r2,r2
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  805eec:	1f07883a 	add	r3,r3,fp
				db.index_list_order[list_id][order] = song_id;
				order++;
  805ef0:	8c000044 	addi	r16,r17,1
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
  805ef4:	1705883a 	add	r2,r2,fp
			} else {
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
  805ef8:	1d40a815 	stw	r21,672(r3)
				db.index_list_order[list_id][order] = song_id;
				order++;
  805efc:	8827883a 	mov	r19,r17
  805f00:	ad400044 	addi	r21,r21,1
  805f04:	8023883a 	mov	r17,r16
				strncpy(temp, line+cursorPos, i-cursorPos+1);
				cursorPos = i;
				song_id = strtol(temp, NULL, 10);
				if (song_id == 0) { break;}
				db.index_list_song[list_id][song_id] = order;
				db.index_list_order[list_id][order] = song_id;
  805f08:	1114c715 	stw	r4,21276(r2)
  805f0c:	003fbf06 	br	805e0c <initializeListWithSongs+0x9c>

00805f10 <querySongByName>:
		} j++;
	}
	return NULL;
}

struct Song* querySongByName(char* song_name) {
  805f10:	defffa04 	addi	sp,sp,-24
  805f14:	dcc00315 	stw	r19,12(sp)
  805f18:	dfc00515 	stw	ra,20(sp)
  805f1c:	dd000415 	stw	r20,16(sp)
  805f20:	dc800215 	stw	r18,8(sp)
  805f24:	dc400115 	stw	r17,4(sp)
  805f28:	dc000015 	stw	r16,0(sp)
  805f2c:	2027883a 	mov	r19,r4
	if(song_name == NULL) return NULL;
  805f30:	20000a1e 	bne	r4,zero,805f5c <querySongByName+0x4c>
	int i;
	int size = db.num_of_songs;
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  805f34:	0021883a 	mov	r16,zero
		if(strcmp(song_name, db.songs[i]->song_name) == 0) {
			return db.songs[i];
		}
	}
	return NULL;
}
  805f38:	8005883a 	mov	r2,r16
  805f3c:	dfc00517 	ldw	ra,20(sp)
  805f40:	dd000417 	ldw	r20,16(sp)
  805f44:	dcc00317 	ldw	r19,12(sp)
  805f48:	dc800217 	ldw	r18,8(sp)
  805f4c:	dc400117 	ldw	r17,4(sp)
  805f50:	dc000017 	ldw	r16,0(sp)
  805f54:	dec00604 	addi	sp,sp,24
  805f58:	f800283a 	ret
}

struct Song* querySongByName(char* song_name) {
	if(song_name == NULL) return NULL;
	int i;
	int size = db.num_of_songs;
  805f5c:	00802134 	movhi	r2,132
  805f60:	108a6204 	addi	r2,r2,10632
  805f64:	1500a717 	ldw	r20,668(r2)
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  805f68:	053ff20e 	bge	zero,r20,805f34 <querySongByName+0x24>
  805f6c:	14803704 	addi	r18,r2,220
  805f70:	04400044 	movi	r17,1
		if(strcmp(song_name, db.songs[i]->song_name) == 0) {
  805f74:	94000017 	ldw	r16,0(r18)
  805f78:	9809883a 	mov	r4,r19

struct Song* querySongByName(char* song_name) {
	if(song_name == NULL) return NULL;
	int i;
	int size = db.num_of_songs;
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  805f7c:	8c400044 	addi	r17,r17,1
		if(strcmp(song_name, db.songs[i]->song_name) == 0) {
  805f80:	81400104 	addi	r5,r16,4
  805f84:	0822cc80 	call	822cc8 <strcmp>

struct Song* querySongByName(char* song_name) {
	if(song_name == NULL) return NULL;
	int i;
	int size = db.num_of_songs;
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  805f88:	94800104 	addi	r18,r18,4
		if(strcmp(song_name, db.songs[i]->song_name) == 0) {
  805f8c:	103fea26 	beq	r2,zero,805f38 <querySongByName+0x28>

struct Song* querySongByName(char* song_name) {
	if(song_name == NULL) return NULL;
	int i;
	int size = db.num_of_songs;
	for(i = 1; i <= size; i++) { // start from 1 since 0 always null
  805f90:	a47ff80e 	bge	r20,r17,805f74 <querySongByName+0x64>
  805f94:	003fe706 	br	805f34 <querySongByName+0x24>

00805f98 <queryListByName>:
}
/*
 * Query the list with a given play list name
 * return the first list founded with the same name, NULL otherwise
 */
struct Playlist* queryListByName(char* list_name) {
  805f98:	defff804 	addi	sp,sp,-32
  805f9c:	dcc00315 	stw	r19,12(sp)
  805fa0:	dfc00715 	stw	ra,28(sp)
  805fa4:	dd800615 	stw	r22,24(sp)
  805fa8:	dd400515 	stw	r21,20(sp)
  805fac:	dd000415 	stw	r20,16(sp)
  805fb0:	dc800215 	stw	r18,8(sp)
  805fb4:	dc400115 	stw	r17,4(sp)
  805fb8:	dc000015 	stw	r16,0(sp)
  805fbc:	2027883a 	mov	r19,r4
	if(list_name == NULL || db.num_of_lists == 0) return NULL;
  805fc0:	20000c1e 	bne	r4,zero,805ff4 <queryListByName+0x5c>
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
  805fc4:	0021883a 	mov	r16,zero
			}
			i++;
		} j++;
	}
	return NULL;
}
  805fc8:	8005883a 	mov	r2,r16
  805fcc:	dfc00717 	ldw	ra,28(sp)
  805fd0:	dd800617 	ldw	r22,24(sp)
  805fd4:	dd400517 	ldw	r21,20(sp)
  805fd8:	dd000417 	ldw	r20,16(sp)
  805fdc:	dcc00317 	ldw	r19,12(sp)
  805fe0:	dc800217 	ldw	r18,8(sp)
  805fe4:	dc400117 	ldw	r17,4(sp)
  805fe8:	dc000017 	ldw	r16,0(sp)
  805fec:	dec00804 	addi	sp,sp,32
  805ff0:	f800283a 	ret
/*
 * Query the list with a given play list name
 * return the first list founded with the same name, NULL otherwise
 */
struct Playlist* queryListByName(char* list_name) {
	if(list_name == NULL || db.num_of_lists == 0) return NULL;
  805ff4:	00802134 	movhi	r2,132
  805ff8:	108a6204 	addi	r2,r2,10632
  805ffc:	14403517 	ldw	r17,212(r2)
  806000:	883ff026 	beq	r17,zero,805fc4 <queryListByName+0x2c>
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
  806004:	047fef0e 	bge	zero,r17,805fc4 <queryListByName+0x2c>
  806008:	1029883a 	mov	r20,r2
  80600c:	002b883a 	mov	r21,zero
  806010:	04802174 	movhi	r18,133
  806014:	94b34a04 	addi	r18,r18,-13016
  806018:	05800044 	movi	r22,1
  80601c:	00000206 	br	806028 <queryListByName+0x90>
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
				return db.playlists[j];
			}
			i++;
  806020:	a5000104 	addi	r20,r20,4
 */
struct Playlist* queryListByName(char* list_name) {
	if(list_name == NULL || db.num_of_lists == 0) return NULL;
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
  806024:	ac7fe70e 	bge	r21,r17,805fc4 <queryListByName+0x2c>
		if(db.used_list_index[j] == 1) {
  806028:	90800017 	ldw	r2,0(r18)
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
				printf("querry list by name error\n");
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
  80602c:	9809883a 	mov	r4,r19
				return db.playlists[j];
			}
			i++;
  806030:	94800104 	addi	r18,r18,4
struct Playlist* queryListByName(char* list_name) {
	if(list_name == NULL || db.num_of_lists == 0) return NULL;
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
		if(db.used_list_index[j] == 1) {
  806034:	15bffa1e 	bne	r2,r22,806020 <queryListByName+0x88>
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
  806038:	a4000217 	ldw	r16,8(r20)
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
				return db.playlists[j];
			}
			i++;
  80603c:	a8ab883a 	add	r21,r21,r2
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
				printf("querry list by name error\n");
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
  806040:	800b883a 	mov	r5,r16
	int i = 0, j = 1;
	int size = db.num_of_lists;
	while(i < size) {
		if(db.used_list_index[j] == 1) {
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
  806044:	80000326 	beq	r16,zero,806054 <queryListByName+0xbc>
				printf("querry list by name error\n");
				return NULL;
			}
			if(strcmp(list_name, db.playlists[j]->list_name) == 0) {
  806048:	0822cc80 	call	822cc8 <strcmp>
  80604c:	103ff41e 	bne	r2,zero,806020 <queryListByName+0x88>
  806050:	003fdd06 	br	805fc8 <queryListByName+0x30>
	int size = db.num_of_lists;
	while(i < size) {
		if(db.used_list_index[j] == 1) {
			//make sure current index is in used
			if(db.playlists[j] == NULL) { //double check
				printf("querry list by name error\n");
  806054:	010020f4 	movhi	r4,131
  806058:	210cc204 	addi	r4,r4,13064
  80605c:	08221800 	call	822180 <puts>
  806060:	003fd906 	br	805fc8 <queryListByName+0x30>

00806064 <getSongsFromSD>:
/*
 * Find all .WAV files in SDCard and return their names in an
 * array of strings.
 * Return: array containing names of all .WAV files in SDCard
 * */
char** getSongsFromSD(){
  806064:	defff804 	addi	sp,sp,-32
	int fileStatus = 0;
	char fileName[15];
	int numOfSounds = 0;

	// songNames is array of strings that store song names.
	char** songNames = malloc(MAX_SONGS *sizeof(char*));
  806068:	01006504 	movi	r4,404
/*
 * Find all .WAV files in SDCard and return their names in an
 * array of strings.
 * Return: array containing names of all .WAV files in SDCard
 * */
char** getSongsFromSD(){
  80606c:	dfc00715 	stw	ra,28(sp)
  806070:	dc800615 	stw	r18,24(sp)
  806074:	dc400515 	stw	r17,20(sp)
  806078:	dc000415 	stw	r16,16(sp)
	int fileStatus = 0;
	char fileName[15];
	int numOfSounds = 0;

	// songNames is array of strings that store song names.
	char** songNames = malloc(MAX_SONGS *sizeof(char*));
  80607c:	08216fc0 	call	8216fc <malloc>

	memset(fileName, 0 , sizeof(fileName));
	fileStatus = alt_up_sd_card_find_first("", fileName);
  806080:	d80b883a 	mov	r5,sp
  806084:	010020f4 	movhi	r4,131
  806088:	210ed604 	addi	r4,r4,15192
	int fileStatus = 0;
	char fileName[15];
	int numOfSounds = 0;

	// songNames is array of strings that store song names.
	char** songNames = malloc(MAX_SONGS *sizeof(char*));
  80608c:	1025883a 	mov	r18,r2

	memset(fileName, 0 , sizeof(fileName));
  806090:	d8000015 	stw	zero,0(sp)
  806094:	d8000115 	stw	zero,4(sp)
  806098:	d8000215 	stw	zero,8(sp)
  80609c:	d800030d 	sth	zero,12(sp)
  8060a0:	d8000385 	stb	zero,14(sp)
	fileStatus = alt_up_sd_card_find_first("", fileName);
  8060a4:	08314a00 	call	8314a0 <alt_up_sd_card_find_first>
	if (fileStatus != 0){
  8060a8:	10bfffcc 	andi	r2,r2,65535
  8060ac:	10a0001c 	xori	r2,r2,32768
  8060b0:	10a00004 	addi	r2,r2,-32768
  8060b4:	1000351e 	bne	r2,zero,80618c <getSongsFromSD+0x128>
		printf("ERROR: updateSongsFromSD.\n");
		return NULL;
  8060b8:	0023883a 	mov	r17,zero
  8060bc:	9021883a 	mov	r16,r18
  8060c0:	00001306 	br	806110 <getSongsFromSD+0xac>
	}
	while (fileStatus != -1){
		if (strstr(fileName, ".WAV") != NULL){
			songNames[numOfSounds] = malloc(20 * sizeof(char));
  8060c4:	08216fc0 	call	8216fc <malloc>
  8060c8:	80800015 	stw	r2,0(r16)
  8060cc:	1009883a 	mov	r4,r2
			strcpy(songNames[numOfSounds], fileName);
  8060d0:	d80b883a 	mov	r5,sp
  8060d4:	0822d840 	call	822d84 <strcpy>
			//createSong(fileName, 0);
			numOfSounds++;
  8060d8:	8c400044 	addi	r17,r17,1
  8060dc:	84000104 	addi	r16,r16,4
			strcpy(songNames[numOfSounds], fileName);
			//createSong(fileName, 0);
			numOfSounds++;
		}
		memset(fileName, 0 , sizeof(fileName));
		fileStatus = alt_up_sd_card_find_next(fileName);
  8060e0:	d809883a 	mov	r4,sp
			songNames[numOfSounds] = malloc(20 * sizeof(char));
			strcpy(songNames[numOfSounds], fileName);
			//createSong(fileName, 0);
			numOfSounds++;
		}
		memset(fileName, 0 , sizeof(fileName));
  8060e4:	d8000015 	stw	zero,0(sp)
  8060e8:	d8000115 	stw	zero,4(sp)
  8060ec:	d8000215 	stw	zero,8(sp)
  8060f0:	d800030d 	sth	zero,12(sp)
  8060f4:	d8000385 	stb	zero,14(sp)
		fileStatus = alt_up_sd_card_find_next(fileName);
  8060f8:	082f49c0 	call	82f49c <alt_up_sd_card_find_next>
	fileStatus = alt_up_sd_card_find_first("", fileName);
	if (fileStatus != 0){
		printf("ERROR: updateSongsFromSD.\n");
		return NULL;
	}
	while (fileStatus != -1){
  8060fc:	10bfffcc 	andi	r2,r2,65535
  806100:	10a0001c 	xori	r2,r2,32768
  806104:	10a00004 	addi	r2,r2,-32768
  806108:	00ffffc4 	movi	r3,-1
  80610c:	10c01426 	beq	r2,r3,806160 <getSongsFromSD+0xfc>
		if (strstr(fileName, ".WAV") != NULL){
  806110:	d809883a 	mov	r4,sp
  806114:	014020f4 	movhi	r5,131
  806118:	294cbe04 	addi	r5,r5,13048
  80611c:	08231240 	call	823124 <strstr>
			songNames[numOfSounds] = malloc(20 * sizeof(char));
  806120:	01000504 	movi	r4,20
			strcpy(songNames[numOfSounds], fileName);
			//createSong(fileName, 0);
			numOfSounds++;
		} else if(strstr(fileName, ".MP3") != NULL) {
  806124:	014020f4 	movhi	r5,131
  806128:	294cc004 	addi	r5,r5,13056
	if (fileStatus != 0){
		printf("ERROR: updateSongsFromSD.\n");
		return NULL;
	}
	while (fileStatus != -1){
		if (strstr(fileName, ".WAV") != NULL){
  80612c:	103fe51e 	bne	r2,zero,8060c4 <getSongsFromSD+0x60>
			songNames[numOfSounds] = malloc(20 * sizeof(char));
			strcpy(songNames[numOfSounds], fileName);
			//createSong(fileName, 0);
			numOfSounds++;
		} else if(strstr(fileName, ".MP3") != NULL) {
  806130:	d809883a 	mov	r4,sp
  806134:	08231240 	call	823124 <strstr>
			songNames[numOfSounds] = malloc(20 * sizeof(char));
  806138:	01000504 	movi	r4,20
		if (strstr(fileName, ".WAV") != NULL){
			songNames[numOfSounds] = malloc(20 * sizeof(char));
			strcpy(songNames[numOfSounds], fileName);
			//createSong(fileName, 0);
			numOfSounds++;
		} else if(strstr(fileName, ".MP3") != NULL) {
  80613c:	103fe826 	beq	r2,zero,8060e0 <getSongsFromSD+0x7c>
			songNames[numOfSounds] = malloc(20 * sizeof(char));
  806140:	08216fc0 	call	8216fc <malloc>
  806144:	1009883a 	mov	r4,r2
  806148:	80800015 	stw	r2,0(r16)
			strcpy(songNames[numOfSounds], fileName);
  80614c:	d80b883a 	mov	r5,sp
			//createSong(fileName, 0);
			numOfSounds++;
  806150:	8c400044 	addi	r17,r17,1
  806154:	84000104 	addi	r16,r16,4
			strcpy(songNames[numOfSounds], fileName);
			//createSong(fileName, 0);
			numOfSounds++;
		} else if(strstr(fileName, ".MP3") != NULL) {
			songNames[numOfSounds] = malloc(20 * sizeof(char));
			strcpy(songNames[numOfSounds], fileName);
  806158:	0822d840 	call	822d84 <strcpy>
  80615c:	003fe006 	br	8060e0 <getSongsFromSD+0x7c>
		}
		memset(fileName, 0 , sizeof(fileName));
		fileStatus = alt_up_sd_card_find_next(fileName);
	}
	// set ending condition, NULL means end of the array
	songNames[numOfSounds] = NULL;
  806160:	8c45883a 	add	r2,r17,r17
  806164:	1085883a 	add	r2,r2,r2
  806168:	1485883a 	add	r2,r2,r18
  80616c:	10000015 	stw	zero,0(r2)
	return songNames;
}
  806170:	9005883a 	mov	r2,r18
  806174:	dfc00717 	ldw	ra,28(sp)
  806178:	dc800617 	ldw	r18,24(sp)
  80617c:	dc400517 	ldw	r17,20(sp)
  806180:	dc000417 	ldw	r16,16(sp)
  806184:	dec00804 	addi	sp,sp,32
  806188:	f800283a 	ret
	char** songNames = malloc(MAX_SONGS *sizeof(char*));

	memset(fileName, 0 , sizeof(fileName));
	fileStatus = alt_up_sd_card_find_first("", fileName);
	if (fileStatus != 0){
		printf("ERROR: updateSongsFromSD.\n");
  80618c:	010020f4 	movhi	r4,131
  806190:	210cb704 	addi	r4,r4,13020
  806194:	08221800 	call	822180 <puts>
  806198:	0025883a 	mov	r18,zero
  80619c:	003ff406 	br	806170 <getSongsFromSD+0x10c>

008061a0 <createPlaylistFromTxt>:

/*
 * Parse a string containing playlist information
 * into a playlist object and add it to DB.
 * */
void createPlaylistFromTxt(char* line){
  8061a0:	deffe104 	addi	sp,sp,-124
  8061a4:	dc001b15 	stw	r16,108(sp)
  8061a8:	dfc01e15 	stw	ra,120(sp)
  8061ac:	dc801d15 	stw	r18,116(sp)
  8061b0:	dc401c15 	stw	r17,112(sp)
  8061b4:	200f883a 	mov	r7,r4
  8061b8:	000d883a 	mov	r6,zero
  8061bc:	dc000104 	addi	r16,sp,4
  8061c0:	01400804 	movi	r5,32
	int i = 0, j = 0;
	char id[4];
	char listName[100];
	char numOfSong[4];
	while((id[j++] = line[i++]) != ' ');
  8061c4:	31c5883a 	add	r2,r6,r7
  8061c8:	10c00007 	ldb	r3,0(r2)
  8061cc:	8189883a 	add	r4,r16,r6
  8061d0:	31800044 	addi	r6,r6,1
  8061d4:	20c00005 	stb	r3,0(r4)
  8061d8:	197ffa1e 	bne	r3,r5,8061c4 <createPlaylistFromTxt+0x24>
	id[j] = 0; j = 0;
  8061dc:	8185883a 	add	r2,r16,r6
  8061e0:	dc800204 	addi	r18,sp,8
  8061e4:	10000005 	stb	zero,0(r2)
  8061e8:	3989883a 	add	r4,r7,r6
  8061ec:	900b883a 	mov	r5,r18
  8061f0:	02000804 	movi	r8,32
	while((listName[j++] = line[i++]) != ' ');
  8061f4:	20800007 	ldb	r2,0(r4)
  8061f8:	31800044 	addi	r6,r6,1
  8061fc:	21000044 	addi	r4,r4,1
  806200:	28800005 	stb	r2,0(r5)
  806204:	29400044 	addi	r5,r5,1
  806208:	123ffa1e 	bne	r2,r8,8061f4 <createPlaylistFromTxt+0x54>
	listName[j-1] = 0; j = 0;
  80620c:	2c87c83a 	sub	r3,r5,r18
  806210:	d88001c4 	addi	r2,sp,7
  806214:	10c5883a 	add	r2,r2,r3
  806218:	10000005 	stb	zero,0(r2)
	if(listName[0] == '0') return;
  80621c:	d8c00207 	ldb	r3,8(sp)
  806220:	00800c04 	movi	r2,48
  806224:	18801026 	beq	r3,r2,806268 <createPlaylistFromTxt+0xc8>
  806228:	3989883a 	add	r4,r7,r6
  80622c:	d807883a 	mov	r3,sp
	while((numOfSong[j++] = line[i++]) != 0);
  806230:	20800003 	ldbu	r2,0(r4)
  806234:	21000044 	addi	r4,r4,1
  806238:	18800005 	stb	r2,0(r3)
  80623c:	18c00044 	addi	r3,r3,1
  806240:	103ffb1e 	bne	r2,zero,806230 <createPlaylistFromTxt+0x90>
	createExisitedPlaylist(listName, atoi(numOfSong), atoi(id));
  806244:	d809883a 	mov	r4,sp
  806248:	08215640 	call	821564 <atoi>
  80624c:	8009883a 	mov	r4,r16
  806250:	1023883a 	mov	r17,r2
  806254:	08215640 	call	821564 <atoi>
  806258:	880b883a 	mov	r5,r17
  80625c:	9009883a 	mov	r4,r18
  806260:	100d883a 	mov	r6,r2
  806264:	0802db40 	call	802db4 <createExisitedPlaylist>
}
  806268:	dfc01e17 	ldw	ra,120(sp)
  80626c:	dc801d17 	ldw	r18,116(sp)
  806270:	dc401c17 	ldw	r17,112(sp)
  806274:	dc001b17 	ldw	r16,108(sp)
  806278:	dec01f04 	addi	sp,sp,124
  80627c:	f800283a 	ret

00806280 <openFileFromSD>:
	}
}
/*
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
  806280:	defffe04 	addi	sp,sp,-8
  806284:	dc000015 	stw	r16,0(sp)
  806288:	dfc00115 	stw	ra,4(sp)
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  80628c:	000b883a 	mov	r5,zero
	}
}
/*
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
  806290:	2021883a 	mov	r16,r4
	int fileHandler;
	if (file == NULL) return -2;
  806294:	00bfff84 	movi	r2,-2
  806298:	20000726 	beq	r4,zero,8062b8 <openFileFromSD+0x38>
	fileHandler = alt_up_sd_card_fopen(file, false);
  80629c:	08324500 	call	832450 <alt_up_sd_card_fopen>
  8062a0:	10bfffcc 	andi	r2,r2,65535
  8062a4:	10a0001c 	xori	r2,r2,32768
  8062a8:	10a00004 	addi	r2,r2,-32768
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8062ac:	8009883a 	mov	r4,r16
  8062b0:	01400044 	movi	r5,1
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
  8062b4:	10000416 	blt	r2,zero,8062c8 <openFileFromSD+0x48>
			alt_up_sd_card_fclose(fileHandler);
			return -1;
		}
	}
	return fileHandler;
}
  8062b8:	dfc00117 	ldw	ra,4(sp)
  8062bc:	dc000017 	ldw	r16,0(sp)
  8062c0:	dec00204 	addi	sp,sp,8
  8062c4:	f800283a 	ret
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8062c8:	08324500 	call	832450 <alt_up_sd_card_fopen>
  8062cc:	10bfffcc 	andi	r2,r2,65535
  8062d0:	10a0001c 	xori	r2,r2,32768
  8062d4:	10a00004 	addi	r2,r2,-32768
			alt_up_sd_card_fclose(fileHandler);
  8062d8:	1009883a 	mov	r4,r2
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8062dc:	103ff60e 	bge	r2,zero,8062b8 <openFileFromSD+0x38>
			alt_up_sd_card_fclose(fileHandler);
  8062e0:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  8062e4:	00bfffc4 	movi	r2,-1
  8062e8:	003ff306 	br	8062b8 <openFileFromSD+0x38>

008062ec <writeLine>:

/*
 * A helper function that write a segment of data to SD card and write a LINE FEED at the end
 * it does not close file pointer and require an input of file pointer
 */
void writeLine(int file_pointer, char* data, int size) {
  8062ec:	defffb04 	addi	sp,sp,-20
  8062f0:	dcc00315 	stw	r19,12(sp)
  8062f4:	dc400115 	stw	r17,4(sp)
  8062f8:	dfc00415 	stw	ra,16(sp)
  8062fc:	dc800215 	stw	r18,8(sp)
  806300:	dc000015 	stw	r16,0(sp)
  806304:	2823883a 	mov	r17,r5
  806308:	3027883a 	mov	r19,r6
	if(data == NULL) return;
  80630c:	28001d26 	beq	r5,zero,806384 <writeLine+0x98>
	int i;
	for( i = 0; i < size; i++ )
  806310:	0180300e 	bge	zero,r6,8063d4 <writeLine+0xe8>
	{
		if(data[i] == 0) break;
  806314:	29400007 	ldb	r5,0(r5)
  806318:	28002e26 	beq	r5,zero,8063d4 <writeLine+0xe8>
  80631c:	24bfffcc 	andi	r18,r4,65535
  806320:	94a0001c 	xori	r18,r18,32768
  806324:	94a00004 	addi	r18,r18,-32768
  806328:	0021883a 	mov	r16,zero
  80632c:	00000406 	br	806340 <writeLine+0x54>
  806330:	8c0b883a 	add	r5,r17,r16
 * it does not close file pointer and require an input of file pointer
 */
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
  806334:	9c000b26 	beq	r19,r16,806364 <writeLine+0x78>
	{
		if(data[i] == 0) break;
  806338:	29400007 	ldb	r5,0(r5)
  80633c:	28000926 	beq	r5,zero,806364 <writeLine+0x78>
		if(!alt_up_sd_card_write(file_pointer, data[i])){
  806340:	9009883a 	mov	r4,r18
  806344:	083157c0 	call	83157c <alt_up_sd_card_write>
 * it does not close file pointer and require an input of file pointer
 */
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
  806348:	84000044 	addi	r16,r16,1
	{
		if(data[i] == 0) break;
		if(!alt_up_sd_card_write(file_pointer, data[i])){
			printf("Write a character to SD card failed.\n");
  80634c:	010020f4 	movhi	r4,131
  806350:	210cc904 	addi	r4,r4,13092
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
	{
		if(data[i] == 0) break;
		if(!alt_up_sd_card_write(file_pointer, data[i])){
  806354:	103ff61e 	bne	r2,zero,806330 <writeLine+0x44>
			printf("Write a character to SD card failed.\n");
  806358:	08221800 	call	822180 <puts>
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
	{
		if(data[i] == 0) break;
  80635c:	8c0b883a 	add	r5,r17,r16
 * it does not close file pointer and require an input of file pointer
 */
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
  806360:	9c3ff51e 	bne	r19,r16,806338 <writeLine+0x4c>
		if(data[i] == 0) break;
		if(!alt_up_sd_card_write(file_pointer, data[i])){
			printf("Write a character to SD card failed.\n");
		}
	}
	if(!alt_up_sd_card_write(file_pointer, '\r')) {
  806364:	9009883a 	mov	r4,r18
  806368:	01400344 	movi	r5,13
  80636c:	083157c0 	call	83157c <alt_up_sd_card_write>
  806370:	10001426 	beq	r2,zero,8063c4 <writeLine+0xd8>
		printf("Write a new line ASCII failed\n");
	}
	if(!alt_up_sd_card_write(file_pointer, '\n')) {
  806374:	9009883a 	mov	r4,r18
  806378:	01400284 	movi	r5,10
  80637c:	083157c0 	call	83157c <alt_up_sd_card_write>
  806380:	10000726 	beq	r2,zero,8063a0 <writeLine+0xb4>
		printf("Write a new line ASCII failed\n");
	}
}
  806384:	dfc00417 	ldw	ra,16(sp)
  806388:	dcc00317 	ldw	r19,12(sp)
  80638c:	dc800217 	ldw	r18,8(sp)
  806390:	dc400117 	ldw	r17,4(sp)
  806394:	dc000017 	ldw	r16,0(sp)
  806398:	dec00504 	addi	sp,sp,20
  80639c:	f800283a 	ret
	}
	if(!alt_up_sd_card_write(file_pointer, '\r')) {
		printf("Write a new line ASCII failed\n");
	}
	if(!alt_up_sd_card_write(file_pointer, '\n')) {
		printf("Write a new line ASCII failed\n");
  8063a0:	010020f4 	movhi	r4,131
  8063a4:	210cd304 	addi	r4,r4,13132
	}
}
  8063a8:	dfc00417 	ldw	ra,16(sp)
  8063ac:	dcc00317 	ldw	r19,12(sp)
  8063b0:	dc800217 	ldw	r18,8(sp)
  8063b4:	dc400117 	ldw	r17,4(sp)
  8063b8:	dc000017 	ldw	r16,0(sp)
  8063bc:	dec00504 	addi	sp,sp,20
	}
	if(!alt_up_sd_card_write(file_pointer, '\r')) {
		printf("Write a new line ASCII failed\n");
	}
	if(!alt_up_sd_card_write(file_pointer, '\n')) {
		printf("Write a new line ASCII failed\n");
  8063c0:	08221801 	jmpi	822180 <puts>
		if(!alt_up_sd_card_write(file_pointer, data[i])){
			printf("Write a character to SD card failed.\n");
		}
	}
	if(!alt_up_sd_card_write(file_pointer, '\r')) {
		printf("Write a new line ASCII failed\n");
  8063c4:	010020f4 	movhi	r4,131
  8063c8:	210cd304 	addi	r4,r4,13132
  8063cc:	08221800 	call	822180 <puts>
  8063d0:	003fe806 	br	806374 <writeLine+0x88>
void writeLine(int file_pointer, char* data, int size) {
	if(data == NULL) return;
	int i;
	for( i = 0; i < size; i++ )
	{
		if(data[i] == 0) break;
  8063d4:	24bfffcc 	andi	r18,r4,65535
  8063d8:	94a0001c 	xori	r18,r18,32768
  8063dc:	94a00004 	addi	r18,r18,-32768
  8063e0:	003fe006 	br	806364 <writeLine+0x78>

008063e4 <readLine>:

/*
 * A helper function that read a line in a text file, require file pointer and does not close the file
 * Assumption has made that a line does not go over 100 characters
 */
int readLine(int file_pointer, char* line) {
  8063e4:	defff904 	addi	sp,sp,-28
  8063e8:	dfc00615 	stw	ra,24(sp)
  8063ec:	dd400515 	stw	r21,20(sp)
  8063f0:	dd000415 	stw	r20,16(sp)
  8063f4:	dcc00315 	stw	r19,12(sp)
  8063f8:	dc800215 	stw	r18,8(sp)
  8063fc:	dc400115 	stw	r17,4(sp)
  806400:	dc000015 	stw	r16,0(sp)
	if(line == NULL) return -1;
  806404:	28000a1e 	bne	r5,zero,806430 <readLine+0x4c>
			printf("WARNNING! reading a line that contains more than 500 characters\n");
			break;
		}
	} while(line[i] != '\n' && line[i] != '\r' && line[i] != 0 && line[i] != -1);
	line[i] = 0;
	if(i == 0)
  806408:	00bfffc4 	movi	r2,-1
		return -1;
	return 0;
}
  80640c:	dfc00617 	ldw	ra,24(sp)
  806410:	dd400517 	ldw	r21,20(sp)
  806414:	dd000417 	ldw	r20,16(sp)
  806418:	dcc00317 	ldw	r19,12(sp)
  80641c:	dc800217 	ldw	r18,8(sp)
  806420:	dc400117 	ldw	r17,4(sp)
  806424:	dc000017 	ldw	r16,0(sp)
  806428:	dec00704 	addi	sp,sp,28
  80642c:	f800283a 	ret
/*
 * A helper function that read a line in a text file, require file pointer and does not close the file
 * Assumption has made that a line does not go over 100 characters
 */
int readLine(int file_pointer, char* line) {
	if(line == NULL) return -1;
  806430:	24ffffcc 	andi	r19,r4,65535
  806434:	047fffc4 	movi	r17,-1
  806438:	9ce0001c 	xori	r19,r19,32768
  80643c:	9ce00004 	addi	r19,r19,-32768
  806440:	2821883a 	mov	r16,r5
  806444:	8829883a 	mov	r20,r17
  806448:	05400284 	movi	r21,10
  80644c:	00000906 	br	806474 <readLine+0x90>
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
			return -2;
		}
		if(i == 0 && line[i] == '\n') //this is to skip an empty line if any
			line[i] = alt_up_sd_card_read(file_pointer);
  806450:	9809883a 	mov	r4,r19
	do {
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
			return -2;
		}
		if(i == 0 && line[i] == '\n') //this is to skip an empty line if any
  806454:	1d401d26 	beq	r3,r21,8064cc <readLine+0xe8>
			line[i] = alt_up_sd_card_read(file_pointer);
		if(i >= 500) {
			printf("WARNNING! reading a line that contains more than 500 characters\n");
			break;
		}
	} while(line[i] != '\n' && line[i] != '\r' && line[i] != 0 && line[i] != -1);
  806458:	80c00007 	ldb	r3,0(r16)
  80645c:	84000044 	addi	r16,r16,1
  806460:	1d401626 	beq	r3,r21,8064bc <readLine+0xd8>
  806464:	00800344 	movi	r2,13
  806468:	18801426 	beq	r3,r2,8064bc <readLine+0xd8>
  80646c:	18001326 	beq	r3,zero,8064bc <readLine+0xd8>
  806470:	1d001226 	beq	r3,r20,8064bc <readLine+0xd8>
	if(line == NULL) return -1;
	int i = -1;

	do {
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
  806474:	9809883a 	mov	r4,r19
  806478:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  80647c:	10c03fcc 	andi	r3,r2,255
  806480:	18c0201c 	xori	r3,r3,128
  806484:	18ffe004 	addi	r3,r3,-128
  806488:	80800005 	stb	r2,0(r16)
int readLine(int file_pointer, char* line) {
	if(line == NULL) return -1;
	int i = -1;

	do {
		i++;
  80648c:	8c400044 	addi	r17,r17,1
  806490:	8025883a 	mov	r18,r16
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
  806494:	1d001016 	blt	r3,r20,8064d8 <readLine+0xf4>
			return -2;
		}
		if(i == 0 && line[i] == '\n') //this is to skip an empty line if any
  806498:	883fed26 	beq	r17,zero,806450 <readLine+0x6c>
			line[i] = alt_up_sd_card_read(file_pointer);
		if(i >= 500) {
  80649c:	00807cc4 	movi	r2,499
  8064a0:	147fed0e 	bge	r2,r17,806458 <readLine+0x74>
			printf("WARNNING! reading a line that contains more than 500 characters\n");
  8064a4:	010020f4 	movhi	r4,131
  8064a8:	210cdb04 	addi	r4,r4,13164
  8064ac:	08221800 	call	822180 <puts>
			break;
		}
	} while(line[i] != '\n' && line[i] != '\r' && line[i] != 0 && line[i] != -1);
	line[i] = 0;
  8064b0:	0005883a 	mov	r2,zero
  8064b4:	80000005 	stb	zero,0(r16)
  8064b8:	003fd406 	br	80640c <readLine+0x28>
  8064bc:	90000005 	stb	zero,0(r18)
	if(i == 0)
  8064c0:	883fd126 	beq	r17,zero,806408 <readLine+0x24>
  8064c4:	0005883a 	mov	r2,zero
  8064c8:	003fd006 	br	80640c <readLine+0x28>
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
			return -2;
		}
		if(i == 0 && line[i] == '\n') //this is to skip an empty line if any
			line[i] = alt_up_sd_card_read(file_pointer);
  8064cc:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  8064d0:	80800005 	stb	r2,0(r16)
  8064d4:	003fe006 	br	806458 <readLine+0x74>
	if(line == NULL) return -1;
	int i = -1;

	do {
		i++;
		if((line[i] = alt_up_sd_card_read(file_pointer)) < -1) {
  8064d8:	00bfff84 	movi	r2,-2
  8064dc:	003fcb06 	br	80640c <readLine+0x28>

008064e0 <removeListFromDB>:
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  8064e0:	defffb04 	addi	sp,sp,-20
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  8064e4:	2105883a 	add	r2,r4,r4
  8064e8:	108b883a 	add	r5,r2,r2
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  8064ec:	dcc00315 	stw	r19,12(sp)
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  8064f0:	04c02134 	movhi	r19,132
  8064f4:	9cca6204 	addi	r19,r19,10632
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  8064f8:	dc800215 	stw	r18,8(sp)
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  8064fc:	00a8e714 	movui	r2,41884
  806500:	2ce5883a 	add	r18,r5,r19
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  806504:	dc400115 	stw	r17,4(sp)
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  806508:	90a3883a 	add	r17,r18,r2
  80650c:	88c00017 	ldw	r3,0(r17)
}
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
  806510:	dc000015 	stw	r16,0(sp)
  806514:	dfc00415 	stw	ra,16(sp)
  806518:	2021883a 	mov	r16,r4
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  80651c:	1800091e 	bne	r3,zero,806544 <removeListFromDB+0x64>
		db.index_list_order[list_id][i] = 0;
		db.index_list_song[list_id][i] = 0;
	}
	db.num_of_lists--;
	temp = NULL;
	return 0;
  806520:	00ffffc4 	movi	r3,-1
}
  806524:	1805883a 	mov	r2,r3
  806528:	dfc00417 	ldw	ra,16(sp)
  80652c:	dcc00317 	ldw	r19,12(sp)
  806530:	dc800217 	ldw	r18,8(sp)
  806534:	dc400117 	ldw	r17,4(sp)
  806538:	dc000017 	ldw	r16,0(sp)
  80653c:	dec00504 	addi	sp,sp,20
  806540:	f800283a 	ret
/*
 * Remove a playlist from the database
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
  806544:	013ff60e 	bge	zero,r4,806520 <removeListFromDB+0x40>
	killPlaylist(&(db.playlists[list_id]));
  806548:	99000104 	addi	r4,r19,4
  80654c:	2909883a 	add	r4,r5,r4
  806550:	080b3800 	call	80b380 <killPlaylist>
	db.playlists[list_id] = NULL;
	db.used_list_index[list_id] = 0;
	int* temp = (int*)malloc(sizeof(int));
  806554:	01000104 	movi	r4,4
 * return 0 if list is removed, -1 if cannot find list in the database
 */
int removeListFromDB(int list_id) {
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
	killPlaylist(&(db.playlists[list_id]));
	db.playlists[list_id] = NULL;
  806558:	90000115 	stw	zero,4(r18)
	db.used_list_index[list_id] = 0;
  80655c:	88000015 	stw	zero,0(r17)
	int* temp = (int*)malloc(sizeof(int));
  806560:	08216fc0 	call	8216fc <malloc>
	*temp = list_id;
	enqueue(db.avail_list_index, temp);
  806564:	00e8e614 	movui	r3,41880
  806568:	98c7883a 	add	r3,r19,r3
  80656c:	19000017 	ldw	r4,0(r3)
  806570:	100b883a 	mov	r5,r2
	if(db.used_list_index[list_id] == 0 || list_id <= 0) return -1;
	killPlaylist(&(db.playlists[list_id]));
	db.playlists[list_id] = NULL;
	db.used_list_index[list_id] = 0;
	int* temp = (int*)malloc(sizeof(int));
	*temp = list_id;
  806574:	14000015 	stw	r16,0(r2)
	enqueue(db.avail_list_index, temp);
  806578:	080b6940 	call	80b694 <enqueue>
  80657c:	80806524 	muli	r2,r16,404
  806580:	0007883a 	mov	r3,zero
  806584:	01401944 	movi	r5,101
  806588:	1094c704 	addi	r2,r2,21276
  80658c:	14c5883a 	add	r2,r2,r19
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  806590:	18c00044 	addi	r3,r3,1
		db.index_list_order[list_id][i] = 0;
  806594:	10000015 	stw	zero,0(r2)
		db.index_list_song[list_id][i] = 0;
  806598:	102be115 	stw	zero,-20604(r2)
	db.used_list_index[list_id] = 0;
	int* temp = (int*)malloc(sizeof(int));
	*temp = list_id;
	enqueue(db.avail_list_index, temp);
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  80659c:	10800104 	addi	r2,r2,4
  8065a0:	197ffb1e 	bne	r3,r5,806590 <removeListFromDB+0xb0>
		db.index_list_order[list_id][i] = 0;
		db.index_list_song[list_id][i] = 0;
	}
	db.num_of_lists--;
  8065a4:	98803517 	ldw	r2,212(r19)
  8065a8:	0007883a 	mov	r3,zero
  8065ac:	10bfffc4 	addi	r2,r2,-1
  8065b0:	98803515 	stw	r2,212(r19)
  8065b4:	003fdb06 	br	806524 <removeListFromDB+0x44>

008065b8 <addExisitedListToDB>:
}
/*
 * Add a playlist to the database by giving its id
 * adding operation will failed if the id has been used already
 */
void addExisitedListToDB(struct Playlist* playlist, int id) {
  8065b8:	defffa04 	addi	sp,sp,-24
  8065bc:	dc800215 	stw	r18,8(sp)
  8065c0:	dfc00515 	stw	ra,20(sp)
  8065c4:	dd000415 	stw	r20,16(sp)
  8065c8:	dcc00315 	stw	r19,12(sp)
  8065cc:	dc400115 	stw	r17,4(sp)
  8065d0:	dc000015 	stw	r16,0(sp)
  8065d4:	2025883a 	mov	r18,r4
	if(playlist == NULL || db.avail_list_index->size <= 0
  8065d8:	20003f26 	beq	r4,zero,8066d8 <addExisitedListToDB+0x120>
  8065dc:	04402134 	movhi	r17,132
  8065e0:	8c4a6204 	addi	r17,r17,10632
  8065e4:	00a8e614 	movui	r2,41880
  8065e8:	8885883a 	add	r2,r17,r2
  8065ec:	11000017 	ldw	r4,0(r2)
  8065f0:	20c00017 	ldw	r3,0(r4)
  8065f4:	00c0380e 	bge	zero,r3,8066d8 <addExisitedListToDB+0x120>
  8065f8:	28003726 	beq	r5,zero,8066d8 <addExisitedListToDB+0x120>
  8065fc:	2945883a 	add	r2,r5,r5
  806600:	1085883a 	add	r2,r2,r2
  806604:	1445883a 	add	r2,r2,r17
  806608:	0528e714 	movui	r20,41884
  80660c:	1505883a 	add	r2,r2,r20
  806610:	10c00017 	ldw	r3,0(r2)
  806614:	04c00044 	movi	r19,1
  806618:	1cc02f26 	beq	r3,r19,8066d8 <addExisitedListToDB+0x120>
			|| id == 0 || db.used_list_index[id] == 1) return;
	int* index = dequeueValue(db.avail_list_index, id);
  80661c:	080b84c0 	call	80b84c <dequeueValue>
  806620:	1021883a 	mov	r16,r2
	db.num_of_lists++;
  806624:	88803517 	ldw	r2,212(r17)
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
  806628:	9009883a 	mov	r4,r18
 */
void addExisitedListToDB(struct Playlist* playlist, int id) {
	if(playlist == NULL || db.avail_list_index->size <= 0
			|| id == 0 || db.used_list_index[id] == 1) return;
	int* index = dequeueValue(db.avail_list_index, id);
	db.num_of_lists++;
  80662c:	14c5883a 	add	r2,r2,r19
  806630:	88803515 	stw	r2,212(r17)
	db.used_list_index[*index] = 1;
  806634:	80c00017 	ldw	r3,0(r16)
  806638:	18c7883a 	add	r3,r3,r3
  80663c:	18c7883a 	add	r3,r3,r3
  806640:	1c47883a 	add	r3,r3,r17
  806644:	1d07883a 	add	r3,r3,r20
  806648:	1cc00015 	stw	r19,0(r3)
	setListId(playlist, *index);
  80664c:	81400017 	ldw	r5,0(r16)
  806650:	080b2f00 	call	80b2f0 <setListId>
	db.playlists[*index] = playlist;
  806654:	80c00017 	ldw	r3,0(r16)
  806658:	0009883a 	mov	r4,zero
  80665c:	18c5883a 	add	r2,r3,r3
  806660:	1085883a 	add	r2,r2,r2
  806664:	1445883a 	add	r2,r2,r17
  806668:	14800115 	stw	r18,4(r2)
  80666c:	00000106 	br	806674 <addExisitedListToDB+0xbc>
  806670:	80c00017 	ldw	r3,0(r16)
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
		db.index_list_order[*index][i] = 0;
  806674:	18801964 	muli	r2,r3,101
  806678:	1105883a 	add	r2,r2,r4
  80667c:	1085883a 	add	r2,r2,r2
  806680:	1085883a 	add	r2,r2,r2
  806684:	1445883a 	add	r2,r2,r17
  806688:	1014c715 	stw	zero,21276(r2)
		db.index_list_song[*index][i] = 0;
  80668c:	80c00017 	ldw	r3,0(r16)
	db.num_of_lists++;
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  806690:	00801944 	movi	r2,101
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
  806694:	18c01964 	muli	r3,r3,101
  806698:	1907883a 	add	r3,r3,r4
  80669c:	18c7883a 	add	r3,r3,r3
  8066a0:	18c7883a 	add	r3,r3,r3
  8066a4:	1c47883a 	add	r3,r3,r17
	db.num_of_lists++;
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8066a8:	21000044 	addi	r4,r4,1
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
  8066ac:	1800a815 	stw	zero,672(r3)
	db.num_of_lists++;
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8066b0:	20bfef1e 	bne	r4,r2,806670 <addExisitedListToDB+0xb8>
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
	}
	free(index);
  8066b4:	8009883a 	mov	r4,r16
	index = NULL;
}
  8066b8:	dfc00517 	ldw	ra,20(sp)
  8066bc:	dd000417 	ldw	r20,16(sp)
  8066c0:	dcc00317 	ldw	r19,12(sp)
  8066c4:	dc800217 	ldw	r18,8(sp)
  8066c8:	dc400117 	ldw	r17,4(sp)
  8066cc:	dc000017 	ldw	r16,0(sp)
  8066d0:	dec00604 	addi	sp,sp,24
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
	}
	free(index);
  8066d4:	08216e81 	jmpi	8216e8 <free>
	index = NULL;
}
  8066d8:	dfc00517 	ldw	ra,20(sp)
  8066dc:	dd000417 	ldw	r20,16(sp)
  8066e0:	dcc00317 	ldw	r19,12(sp)
  8066e4:	dc800217 	ldw	r18,8(sp)
  8066e8:	dc400117 	ldw	r17,4(sp)
  8066ec:	dc000017 	ldw	r16,0(sp)
  8066f0:	dec00604 	addi	sp,sp,24
  8066f4:	f800283a 	ret

008066f8 <addListToDB>:
	db.songs[db.num_of_songs] = song;
}
/*
 * Add a playlist to the database; id will be automatically assigned
 */
void addListToDB(struct Playlist* playlist) {
  8066f8:	defffc04 	addi	sp,sp,-16
  8066fc:	dc800215 	stw	r18,8(sp)
  806700:	dfc00315 	stw	ra,12(sp)
  806704:	dc400115 	stw	r17,4(sp)
  806708:	dc000015 	stw	r16,0(sp)
  80670c:	2025883a 	mov	r18,r4
	if(playlist == NULL || db.avail_list_index->size <= 0) return;
  806710:	20003626 	beq	r4,zero,8067ec <addListToDB+0xf4>
  806714:	04402134 	movhi	r17,132
  806718:	8c4a6204 	addi	r17,r17,10632
  80671c:	00a8e614 	movui	r2,41880
  806720:	8885883a 	add	r2,r17,r2
  806724:	11000017 	ldw	r4,0(r2)
  806728:	20c00017 	ldw	r3,0(r4)
  80672c:	00c02f0e 	bge	zero,r3,8067ec <addListToDB+0xf4>
	db.num_of_lists++;
  806730:	88803517 	ldw	r2,212(r17)
  806734:	10800044 	addi	r2,r2,1
  806738:	88803515 	stw	r2,212(r17)
	int* index = dequeue(db.avail_list_index);
  80673c:	080b7a00 	call	80b7a0 <dequeue>
  806740:	1021883a 	mov	r16,r2
	db.used_list_index[*index] = 1;
  806744:	10800017 	ldw	r2,0(r2)
  806748:	00e8e714 	movui	r3,41884
  80674c:	01400044 	movi	r5,1
  806750:	1085883a 	add	r2,r2,r2
  806754:	1085883a 	add	r2,r2,r2
  806758:	1445883a 	add	r2,r2,r17
  80675c:	10c5883a 	add	r2,r2,r3
  806760:	11400015 	stw	r5,0(r2)
	setListId(playlist, *index);
  806764:	81400017 	ldw	r5,0(r16)
  806768:	9009883a 	mov	r4,r18
  80676c:	080b2f00 	call	80b2f0 <setListId>
	db.playlists[*index] = playlist;
  806770:	80c00017 	ldw	r3,0(r16)
  806774:	0009883a 	mov	r4,zero
  806778:	18c5883a 	add	r2,r3,r3
  80677c:	1085883a 	add	r2,r2,r2
  806780:	1445883a 	add	r2,r2,r17
  806784:	14800115 	stw	r18,4(r2)
  806788:	00000106 	br	806790 <addListToDB+0x98>
  80678c:	80c00017 	ldw	r3,0(r16)
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
		db.index_list_order[*index][i] = 0;
  806790:	18801964 	muli	r2,r3,101
  806794:	1105883a 	add	r2,r2,r4
  806798:	1085883a 	add	r2,r2,r2
  80679c:	1085883a 	add	r2,r2,r2
  8067a0:	1445883a 	add	r2,r2,r17
  8067a4:	1014c715 	stw	zero,21276(r2)
		db.index_list_song[*index][i] = 0;
  8067a8:	80c00017 	ldw	r3,0(r16)
	int* index = dequeue(db.avail_list_index);
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8067ac:	00801944 	movi	r2,101
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
  8067b0:	18c01964 	muli	r3,r3,101
  8067b4:	1907883a 	add	r3,r3,r4
  8067b8:	18c7883a 	add	r3,r3,r3
  8067bc:	18c7883a 	add	r3,r3,r3
  8067c0:	1c47883a 	add	r3,r3,r17
	int* index = dequeue(db.avail_list_index);
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8067c4:	21000044 	addi	r4,r4,1
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
  8067c8:	1800a815 	stw	zero,672(r3)
	int* index = dequeue(db.avail_list_index);
	db.used_list_index[*index] = 1;
	setListId(playlist, *index);
	db.playlists[*index] = playlist;
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
  8067cc:	20bfef1e 	bne	r4,r2,80678c <addListToDB+0x94>
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
	}
	free(index);
  8067d0:	8009883a 	mov	r4,r16
	index = NULL;
}
  8067d4:	dfc00317 	ldw	ra,12(sp)
  8067d8:	dc800217 	ldw	r18,8(sp)
  8067dc:	dc400117 	ldw	r17,4(sp)
  8067e0:	dc000017 	ldw	r16,0(sp)
  8067e4:	dec00404 	addi	sp,sp,16
	int i;
	for(i = 0; i < MAX_SONGS; i++) {
		db.index_list_order[*index][i] = 0;
		db.index_list_song[*index][i] = 0;
	}
	free(index);
  8067e8:	08216e81 	jmpi	8216e8 <free>
	index = NULL;
}
  8067ec:	dfc00317 	ldw	ra,12(sp)
  8067f0:	dc800217 	ldw	r18,8(sp)
  8067f4:	dc400117 	ldw	r17,4(sp)
  8067f8:	dc000017 	ldw	r16,0(sp)
  8067fc:	dec00404 	addi	sp,sp,16
  806800:	f800283a 	ret

00806804 <addSongToDB>:
	return NULL;
}
/*
 * Add a song to the database
 */
void addSongToDB(struct Song* song) {
  806804:	defffd04 	addi	sp,sp,-12
  806808:	dc000015 	stw	r16,0(sp)
	db.num_of_songs++;
  80680c:	04002134 	movhi	r16,132
  806810:	840a6204 	addi	r16,r16,10632
  806814:	8080a717 	ldw	r2,668(r16)
	return NULL;
}
/*
 * Add a song to the database
 */
void addSongToDB(struct Song* song) {
  806818:	dc400115 	stw	r17,4(sp)
  80681c:	dfc00215 	stw	ra,8(sp)
	db.num_of_songs++;
  806820:	10800044 	addi	r2,r2,1
	setSongId(song, db.num_of_songs);
  806824:	100b883a 	mov	r5,r2
	return NULL;
}
/*
 * Add a song to the database
 */
void addSongToDB(struct Song* song) {
  806828:	2023883a 	mov	r17,r4
	db.num_of_songs++;
  80682c:	8080a715 	stw	r2,668(r16)
	setSongId(song, db.num_of_songs);
  806830:	080d9780 	call	80d978 <setSongId>
	db.songs[db.num_of_songs] = song;
  806834:	8080a717 	ldw	r2,668(r16)
  806838:	1085883a 	add	r2,r2,r2
  80683c:	1085883a 	add	r2,r2,r2
  806840:	1405883a 	add	r2,r2,r16
  806844:	14403615 	stw	r17,216(r2)
}
  806848:	dfc00217 	ldw	ra,8(sp)
  80684c:	dc400117 	ldw	r17,4(sp)
  806850:	dc000017 	ldw	r16,0(sp)
  806854:	dec00304 	addi	sp,sp,12
  806858:	f800283a 	ret

0080685c <update>:
	loadListsFromSD();
	loadSongsFromSD();
	preloadSongsToPlaylist();
}

void update() {
  80685c:	defff904 	addi	sp,sp,-28
  806860:	dd000415 	stw	r20,16(sp)
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
  806864:	05002134 	movhi	r20,132
  806868:	a50a6204 	addi	r20,r20,10632
  80686c:	a0803517 	ldw	r2,212(r20)
	loadListsFromSD();
	loadSongsFromSD();
	preloadSongsToPlaylist();
}

void update() {
  806870:	dfc00615 	stw	ra,24(sp)
  806874:	dd400515 	stw	r21,20(sp)
  806878:	dcc00315 	stw	r19,12(sp)
  80687c:	dc800215 	stw	r18,8(sp)
  806880:	dc400115 	stw	r17,4(sp)
  806884:	dc000015 	stw	r16,0(sp)
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
  806888:	0080190e 	bge	zero,r2,8068f0 <update+0x94>
  80688c:	0021883a 	mov	r16,zero
  806890:	0027883a 	mov	r19,zero
  806894:	0023883a 	mov	r17,zero
  806898:	04800044 	movi	r18,1
  80689c:	8c45883a 	add	r2,r17,r17
  8068a0:	00e8e814 	movui	r3,41888
  8068a4:	10c5883a 	add	r2,r2,r3
  8068a8:	1505883a 	add	r2,r2,r20
		while(db.used_list_index[++j] != 1);
  8068ac:	10c00017 	ldw	r3,0(r2)
  8068b0:	84000044 	addi	r16,r16,1
  8068b4:	10800104 	addi	r2,r2,4
  8068b8:	1cbffc1e 	bne	r3,r18,8068ac <update+0x50>
		if(db.playlists[j] == NULL) {
  8068bc:	8423883a 	add	r17,r16,r16
  8068c0:	8c45883a 	add	r2,r17,r17
  8068c4:	1505883a 	add	r2,r2,r20
  8068c8:	11000117 	ldw	r4,4(r2)
  8068cc:	20003926 	beq	r4,zero,8069b4 <update+0x158>
			printf("update error\n");
			return;
		}
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
  8068d0:	21401a17 	ldw	r5,104(r4)
  8068d4:	21801b17 	ldw	r6,108(r4)
	preloadSongsToPlaylist();
}

void update() {
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
  8068d8:	98e7883a 	add	r19,r19,r3
		while(db.used_list_index[++j] != 1);
		if(db.playlists[j] == NULL) {
			printf("update error\n");
			return;
		}
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
  8068dc:	0803ce00 	call	803ce0 <syncCreateExisitedPlaylist>
	preloadSongsToPlaylist();
}

void update() {
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
  8068e0:	00802134 	movhi	r2,132
  8068e4:	108a6204 	addi	r2,r2,10632
  8068e8:	10c03517 	ldw	r3,212(r2)
  8068ec:	98ffeb16 	blt	r19,r3,80689c <update+0x40>
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
									db.playlists[j]->num_of_songs,
									db.playlists[j]->id);

	}
	for(i = 1; i <= db.num_of_songs; i++) {
  8068f0:	a080a717 	ldw	r2,668(r20)
  8068f4:	00800b0e 	bge	zero,r2,806924 <update+0xc8>
  8068f8:	04400044 	movi	r17,1
  8068fc:	04002134 	movhi	r16,132
  806900:	840a9904 	addi	r16,r16,10852
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
  806904:	81000017 	ldw	r4,0(r16)
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
									db.playlists[j]->num_of_songs,
									db.playlists[j]->id);

	}
	for(i = 1; i <= db.num_of_songs; i++) {
  806908:	8c400044 	addi	r17,r17,1
  80690c:	84000104 	addi	r16,r16,4
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
  806910:	21400917 	ldw	r5,36(r4)
  806914:	21000104 	addi	r4,r4,4
  806918:	08041000 	call	804100 <syncCreateSong>
		syncCreateExisitedPlaylist(db.playlists[j]->list_name,
									db.playlists[j]->num_of_songs,
									db.playlists[j]->id);

	}
	for(i = 1; i <= db.num_of_songs; i++) {
  80691c:	a080a717 	ldw	r2,668(r20)
  806920:	147ff80e 	bge	r2,r17,806904 <update+0xa8>
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
	}

	for(i = 1; i <= db.num_of_lists; i++){
  806924:	a0803517 	ldw	r2,212(r20)
  806928:	0080170e 	bge	zero,r2,806988 <update+0x12c>
  80692c:	04c00044 	movi	r19,1
  806930:	04802134 	movhi	r18,132
  806934:	948a6404 	addi	r18,r18,10640
  806938:	05552d04 	movi	r21,21684
		if (db.playlists[i] != NULL){
  80693c:	90800017 	ldw	r2,0(r18)
  806940:	10000c26 	beq	r2,zero,806974 <update+0x118>
			for(j = 1; j <= db.playlists[i]->num_of_songs; j++){
  806944:	10801a17 	ldw	r2,104(r2)
  806948:	00800a0e 	bge	zero,r2,806974 <update+0x118>
  80694c:	ad21883a 	add	r16,r21,r20
  806950:	04400044 	movi	r17,1
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
  806954:	81400017 	ldw	r5,0(r16)
  806958:	9809883a 	mov	r4,r19
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
	}

	for(i = 1; i <= db.num_of_lists; i++){
		if (db.playlists[i] != NULL){
			for(j = 1; j <= db.playlists[i]->num_of_songs; j++){
  80695c:	8c400044 	addi	r17,r17,1
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
  806960:	0803e140 	call	803e14 <syncAddExisitedSongToList>
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
	}

	for(i = 1; i <= db.num_of_lists; i++){
		if (db.playlists[i] != NULL){
			for(j = 1; j <= db.playlists[i]->num_of_songs; j++){
  806964:	90c00017 	ldw	r3,0(r18)
  806968:	84000104 	addi	r16,r16,4
  80696c:	18801a17 	ldw	r2,104(r3)
  806970:	147ff80e 	bge	r2,r17,806954 <update+0xf8>
	}
	for(i = 1; i <= db.num_of_songs; i++) {
		syncCreateSong(db.songs[i]->song_name, db.songs[i]->size);
	}

	for(i = 1; i <= db.num_of_lists; i++){
  806974:	a0803517 	ldw	r2,212(r20)
  806978:	9cc00044 	addi	r19,r19,1
  80697c:	ad406504 	addi	r21,r21,404
  806980:	94800104 	addi	r18,r18,4
  806984:	14ffed0e 	bge	r2,r19,80693c <update+0xe0>
			for(j = 1; j <= db.playlists[i]->num_of_songs; j++){
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
			}
		}
	}
	syncSelectList(db.curr_playlist_id);
  806988:	a1003417 	ldw	r4,208(r20)
  80698c:	08031f40 	call	8031f4 <syncSelectList>
	syncDBFinish();
}
  806990:	dfc00617 	ldw	ra,24(sp)
  806994:	dd400517 	ldw	r21,20(sp)
  806998:	dd000417 	ldw	r20,16(sp)
  80699c:	dcc00317 	ldw	r19,12(sp)
  8069a0:	dc800217 	ldw	r18,8(sp)
  8069a4:	dc400117 	ldw	r17,4(sp)
  8069a8:	dc000017 	ldw	r16,0(sp)
  8069ac:	dec00704 	addi	sp,sp,28
				syncAddExisitedSongToList(i, db.index_list_order[i][j]);
			}
		}
	}
	syncSelectList(db.curr_playlist_id);
	syncDBFinish();
  8069b0:	08040341 	jmpi	804034 <syncDBFinish>
void update() {
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
		while(db.used_list_index[++j] != 1);
		if(db.playlists[j] == NULL) {
			printf("update error\n");
  8069b4:	010020f4 	movhi	r4,131
  8069b8:	210ceb04 	addi	r4,r4,13228
			}
		}
	}
	syncSelectList(db.curr_playlist_id);
	syncDBFinish();
}
  8069bc:	dfc00617 	ldw	ra,24(sp)
  8069c0:	dd400517 	ldw	r21,20(sp)
  8069c4:	dd000417 	ldw	r20,16(sp)
  8069c8:	dcc00317 	ldw	r19,12(sp)
  8069cc:	dc800217 	ldw	r18,8(sp)
  8069d0:	dc400117 	ldw	r17,4(sp)
  8069d4:	dc000017 	ldw	r16,0(sp)
  8069d8:	dec00704 	addi	sp,sp,28
void update() {
	int i = 0, j = 0;
	for(i = 0; i < db.num_of_lists; i++) {
		while(db.used_list_index[++j] != 1);
		if(db.playlists[j] == NULL) {
			printf("update error\n");
  8069dc:	08221801 	jmpi	822180 <puts>

008069e0 <saveListChangesToSD>:
 * each playlist.
 * LORDER.TXT will contain have id of each playlist along with their songs
 * in correct order.
 * */
// TODO: simplify this function :(
void saveListChangesToSD(int param){
  8069e0:	defef404 	addi	sp,sp,-1072
  8069e4:	dc010215 	stw	r16,1032(sp)
  8069e8:	dfc10b15 	stw	ra,1068(sp)
  8069ec:	df010a15 	stw	fp,1064(sp)
  8069f0:	ddc10915 	stw	r23,1060(sp)
  8069f4:	dd810815 	stw	r22,1056(sp)
  8069f8:	dd410715 	stw	r21,1052(sp)
  8069fc:	dd010615 	stw	r20,1048(sp)
  806a00:	dcc10515 	stw	r19,1044(sp)
  806a04:	dc810415 	stw	r18,1040(sp)
  806a08:	dc410315 	stw	r17,1036(sp)
  806a0c:	2021883a 	mov	r16,r4

	int fileHandler;
	char* fileName = NULL;

	if (param == 0){
  806a10:	20006f26 	beq	r4,zero,806bd0 <saveListChangesToSD+0x1f0>
		fileName = LISTSONGFILE;
	} else if (param == 1){
  806a14:	00800044 	movi	r2,1
  806a18:	20800f26 	beq	r4,r2,806a58 <saveListChangesToSD+0x78>
		fileName = LISTORDERFILE;
	} else {
		printf("Incorrect parameter value.\n");
  806a1c:	010020f4 	movhi	r4,131
  806a20:	210cf204 	addi	r4,r4,13256
  806a24:	08221800 	call	822180 <puts>
	fileName = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("file is not closed properly.\n");
		return;
	}
}
  806a28:	dfc10b17 	ldw	ra,1068(sp)
  806a2c:	df010a17 	ldw	fp,1064(sp)
  806a30:	ddc10917 	ldw	r23,1060(sp)
  806a34:	dd810817 	ldw	r22,1056(sp)
  806a38:	dd410717 	ldw	r21,1052(sp)
  806a3c:	dd010617 	ldw	r20,1048(sp)
  806a40:	dcc10517 	ldw	r19,1044(sp)
  806a44:	dc810417 	ldw	r18,1040(sp)
  806a48:	dc410317 	ldw	r17,1036(sp)
  806a4c:	dc010217 	ldw	r16,1032(sp)
  806a50:	dec10c04 	addi	sp,sp,1072
  806a54:	f800283a 	ret
	int fileHandler;
	char* fileName = NULL;

	if (param == 0){
		fileName = LISTSONGFILE;
	} else if (param == 1){
  806a58:	044020f4 	movhi	r17,131
  806a5c:	8c4cef04 	addi	r17,r17,13244
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  806a60:	8809883a 	mov	r4,r17
  806a64:	000b883a 	mov	r5,zero
  806a68:	08324500 	call	832450 <alt_up_sd_card_fopen>
  806a6c:	157fffcc 	andi	r21,r2,65535
  806a70:	ad60001c 	xori	r21,r21,32768
  806a74:	ad600004 	addi	r21,r21,-32768
	if (fileHandler < 0){
  806a78:	a8005816 	blt	r21,zero,806bdc <saveListChangesToSD+0x1fc>
	int i, j;
	char line[1024];
	char temp[5];
	char* emptyPlaylist = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0";

	if (param == 0)
  806a7c:	80002a1e 	bne	r16,zero,806b28 <saveListChangesToSD+0x148>
  806a80:	07000044 	movi	fp,1
  806a84:	05802134 	movhi	r22,132
  806a88:	b58a6404 	addi	r22,r22,10640
  806a8c:	dc800144 	addi	r18,sp,5
  806a90:	05c10e04 	movi	r23,1080
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
  806a94:	b0800017 	ldw	r2,0(r22)
  806a98:	10006e26 	beq	r2,zero,806c54 <saveListChangesToSD+0x274>
				sprintf(line, "%d", db.playlists[i]->id);
  806a9c:	11801b17 	ldw	r6,108(r2)
  806aa0:	9009883a 	mov	r4,r18
  806aa4:	014020f4 	movhi	r5,131
  806aa8:	294bac04 	addi	r5,r5,11952
  806aac:	0822b640 	call	822b64 <sprintf>
  806ab0:	00c02134 	movhi	r3,132
  806ab4:	18ca6204 	addi	r3,r3,10632
  806ab8:	b8e1883a 	add	r16,r23,r3
  806abc:	04400044 	movi	r17,1
  806ac0:	0500ffc4 	movi	r20,1023
  806ac4:	04c01944 	movi	r19,101
  806ac8:	00000606 	br	806ae4 <saveListChangesToSD+0x104>
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
  806acc:	0822e100 	call	822e10 <strlen>
  806ad0:	d80b883a 	mov	r5,sp
  806ad4:	9009883a 	mov	r4,r18
  806ad8:	100d883a 	mov	r6,r2
  806adc:	0822e840 	call	822e84 <strncat>
	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  806ae0:	8cc07626 	beq	r17,r19,806cbc <saveListChangesToSD+0x2dc>
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_song[i][j]);
  806ae4:	81800017 	ldw	r6,0(r16)
  806ae8:	014020f4 	movhi	r5,131
  806aec:	294d0304 	addi	r5,r5,13324
  806af0:	d809883a 	mov	r4,sp
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  806af4:	d8000015 	stw	zero,0(sp)
  806af8:	d8000105 	stb	zero,4(sp)
					sprintf(temp, " %d", db.index_list_song[i][j]);
  806afc:	0822b640 	call	822b64 <sprintf>
					if (strlen(line) >= 1024) {
  806b00:	9009883a 	mov	r4,r18
  806b04:	0822e100 	call	822e10 <strlen>
	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  806b08:	8c400044 	addi	r17,r17,1
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
  806b0c:	d809883a 	mov	r4,sp
	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  806b10:	84000104 	addi	r16,r16,4
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_song[i][j]);
					if (strlen(line) >= 1024) {
  806b14:	a0bfed2e 	bgeu	r20,r2,806acc <saveListChangesToSD+0xec>
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_order[i][j]);
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
  806b18:	010020f4 	movhi	r4,131
  806b1c:	210d0404 	addi	r4,r4,13328
  806b20:	08221800 	call	822180 <puts>
  806b24:	003fc006 	br	806a28 <saveListChangesToSD+0x48>
	char temp[5];
	char* emptyPlaylist = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0";

	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
  806b28:	07000044 	movi	fp,1
  806b2c:	05802134 	movhi	r22,132
  806b30:	b58a6404 	addi	r22,r22,10640
  806b34:	dc800144 	addi	r18,sp,5
  806b38:	05d52d04 	movi	r23,21684
				writeLine(fileHandler, emptyPlaylist, strlen(emptyPlaylist));
			}
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
  806b3c:	b0800017 	ldw	r2,0(r22)
  806b40:	10003326 	beq	r2,zero,806c10 <saveListChangesToSD+0x230>
				sprintf(line, "%d", db.playlists[i]->id);
  806b44:	11801b17 	ldw	r6,108(r2)
  806b48:	9009883a 	mov	r4,r18
  806b4c:	014020f4 	movhi	r5,131
  806b50:	294bac04 	addi	r5,r5,11952
  806b54:	0822b640 	call	822b64 <sprintf>
  806b58:	00c02134 	movhi	r3,132
  806b5c:	18ca6204 	addi	r3,r3,10632
  806b60:	b8e1883a 	add	r16,r23,r3
  806b64:	04400044 	movi	r17,1
  806b68:	0500ffc4 	movi	r20,1023
  806b6c:	04c01944 	movi	r19,101
  806b70:	00000606 	br	806b8c <saveListChangesToSD+0x1ac>
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
  806b74:	0822e100 	call	822e10 <strlen>
  806b78:	d80b883a 	mov	r5,sp
  806b7c:	9009883a 	mov	r4,r18
  806b80:	100d883a 	mov	r6,r2
  806b84:	0822e840 	call	822e84 <strncat>
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  806b88:	8cc03d26 	beq	r17,r19,806c80 <saveListChangesToSD+0x2a0>
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_order[i][j]);
  806b8c:	81800017 	ldw	r6,0(r16)
  806b90:	014020f4 	movhi	r5,131
  806b94:	294d0304 	addi	r5,r5,13324
  806b98:	d809883a 	mov	r4,sp
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  806b9c:	d8000015 	stw	zero,0(sp)
  806ba0:	d8000105 	stb	zero,4(sp)
					sprintf(temp, " %d", db.index_list_order[i][j]);
  806ba4:	0822b640 	call	822b64 <sprintf>
					if (strlen(line) >= 1024) {
  806ba8:	9009883a 	mov	r4,r18
  806bac:	0822e100 	call	822e10 <strlen>
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  806bb0:	8c400044 	addi	r17,r17,1
					if (strlen(line) >= 1024) {
						printf("this line has more than 1024 words\n");
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
  806bb4:	d809883a 	mov	r4,sp
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
			if (db.playlists[i] != NULL) {
				sprintf(line, "%d", db.playlists[i]->id);
				for (j = 1; j < MAX_SONGS; j++){
  806bb8:	84000104 	addi	r16,r16,4
					memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
					sprintf(temp, " %d", db.index_list_order[i][j]);
					if (strlen(line) >= 1024) {
  806bbc:	a0bfed2e 	bgeu	r20,r2,806b74 <saveListChangesToSD+0x194>
						printf("this line has more than 1024 words\n");
  806bc0:	010020f4 	movhi	r4,131
  806bc4:	210d0404 	addi	r4,r4,13328
  806bc8:	08221800 	call	822180 <puts>
  806bcc:	003f9606 	br	806a28 <saveListChangesToSD+0x48>
		fileName = LISTSONGFILE;
	} else if (param == 1){
		fileName = LISTORDERFILE;
	} else {
		printf("Incorrect parameter value.\n");
		return;
  806bd0:	044020f4 	movhi	r17,131
  806bd4:	8c4cf904 	addi	r17,r17,13284
  806bd8:	003fa106 	br	806a60 <saveListChangesToSD+0x80>
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  806bdc:	8809883a 	mov	r4,r17
  806be0:	01400044 	movi	r5,1
  806be4:	08324500 	call	832450 <alt_up_sd_card_fopen>
  806be8:	157fffcc 	andi	r21,r2,65535
  806bec:	ad60001c 	xori	r21,r21,32768
  806bf0:	ad600004 	addi	r21,r21,-32768
  806bf4:	a83fa10e 	bge	r21,zero,806a7c <saveListChangesToSD+0x9c>
			alt_up_sd_card_fclose(fileHandler);
  806bf8:	a809883a 	mov	r4,r21
  806bfc:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
	} else {
		printf("Incorrect parameter value.\n");
		return;
	}
	if ((fileHandler = openFileFromSD(fileName)) < 0){
		printf("Can't open LSONG.TXT error!\n");
  806c00:	010020f4 	movhi	r4,131
  806c04:	210cfc04 	addi	r4,r4,13296
  806c08:	08221800 	call	822180 <puts>
  806c0c:	003f8606 	br	806a28 <saveListChangesToSD+0x48>
				}
				line[strlen(line)] = '\0';
				writeLine(fileHandler, line, strlen(line));
				memset(line, 0, sizeof(line)/sizeof(line[0]));
			} else {
				writeLine(fileHandler, emptyPlaylist, strlen(emptyPlaylist));
  806c10:	a809883a 	mov	r4,r21
  806c14:	014020f4 	movhi	r5,131
  806c18:	294d0d04 	addi	r5,r5,13364
  806c1c:	01803244 	movi	r6,201
  806c20:	08062ec0 	call	8062ec <writeLine>
			} else {
				writeLine(fileHandler, emptyPlaylist, strlen(emptyPlaylist));
			}
		}
	}else{
		for (i = 1; i < MAX_LISTS-1; i++){
  806c24:	e7000044 	addi	fp,fp,1
  806c28:	00800c84 	movi	r2,50
  806c2c:	bdc06504 	addi	r23,r23,404
  806c30:	b5800104 	addi	r22,r22,4
  806c34:	e0bfc11e 	bne	fp,r2,806b3c <saveListChangesToSD+0x15c>
			}
		}
	}
	emptyPlaylist = NULL;
	fileName = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
  806c38:	a809883a 	mov	r4,r21
  806c3c:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  806c40:	103f791e 	bne	r2,zero,806a28 <saveListChangesToSD+0x48>
		printf("file is not closed properly.\n");
  806c44:	010020f4 	movhi	r4,131
  806c48:	210d4004 	addi	r4,r4,13568
  806c4c:	08221800 	call	822180 <puts>
  806c50:	003f7506 	br	806a28 <saveListChangesToSD+0x48>
				}
				line[strlen(line)] = '\0';
				writeLine(fileHandler, line, strlen(line));
				memset(line, 0, sizeof(line)/sizeof(line[0]));
			} else {
				writeLine(fileHandler, emptyPlaylist, strlen(emptyPlaylist));
  806c54:	a809883a 	mov	r4,r21
  806c58:	014020f4 	movhi	r5,131
  806c5c:	294d0d04 	addi	r5,r5,13364
  806c60:	01803244 	movi	r6,201
  806c64:	08062ec0 	call	8062ec <writeLine>
	char temp[5];
	char* emptyPlaylist = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0";

	if (param == 0)
	{
		for (i = 1; i < MAX_LISTS-1; i++){
  806c68:	e7000044 	addi	fp,fp,1
  806c6c:	00800c84 	movi	r2,50
  806c70:	bdc06504 	addi	r23,r23,404
  806c74:	b5800104 	addi	r22,r22,4
  806c78:	e0bf861e 	bne	fp,r2,806a94 <saveListChangesToSD+0xb4>
  806c7c:	003fee06 	br	806c38 <saveListChangesToSD+0x258>
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
				}
				line[strlen(line)] = '\0';
  806c80:	9009883a 	mov	r4,r18
  806c84:	0822e100 	call	822e10 <strlen>
  806c88:	9085883a 	add	r2,r18,r2
				writeLine(fileHandler, line, strlen(line));
  806c8c:	9009883a 	mov	r4,r18
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
				}
				line[strlen(line)] = '\0';
  806c90:	10000005 	stb	zero,0(r2)
				writeLine(fileHandler, line, strlen(line));
  806c94:	0822e100 	call	822e10 <strlen>
  806c98:	900b883a 	mov	r5,r18
  806c9c:	a809883a 	mov	r4,r21
  806ca0:	100d883a 	mov	r6,r2
  806ca4:	08062ec0 	call	8062ec <writeLine>
				memset(line, 0, sizeof(line)/sizeof(line[0]));
  806ca8:	9009883a 	mov	r4,r18
  806cac:	000b883a 	mov	r5,zero
  806cb0:	01810004 	movi	r6,1024
  806cb4:	0821fd00 	call	821fd0 <memset>
  806cb8:	003fda06 	br	806c24 <saveListChangesToSD+0x244>
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
				}
				line[strlen(line)] = '\0';
  806cbc:	9009883a 	mov	r4,r18
  806cc0:	0822e100 	call	822e10 <strlen>
  806cc4:	9085883a 	add	r2,r18,r2
				writeLine(fileHandler, line, strlen(line));
  806cc8:	9009883a 	mov	r4,r18
						emptyPlaylist = NULL;
						return;
					}
					strncat(line, temp, strlen(temp));
				}
				line[strlen(line)] = '\0';
  806ccc:	10000005 	stb	zero,0(r2)
				writeLine(fileHandler, line, strlen(line));
  806cd0:	0822e100 	call	822e10 <strlen>
  806cd4:	900b883a 	mov	r5,r18
  806cd8:	a809883a 	mov	r4,r21
  806cdc:	100d883a 	mov	r6,r2
  806ce0:	08062ec0 	call	8062ec <writeLine>
				memset(line, 0, sizeof(line)/sizeof(line[0]));
  806ce4:	9009883a 	mov	r4,r18
  806ce8:	000b883a 	mov	r5,zero
  806cec:	01810004 	movi	r6,1024
  806cf0:	0821fd00 	call	821fd0 <memset>
  806cf4:	003fdc06 	br	806c68 <saveListChangesToSD+0x288>

00806cf8 <saveAllUpdatesToSDBeforeQuits>:

/*
 * Saves all changes related to songs and playlists to SDCard
 * Called before quitting the app
 * */
void saveAllUpdatesToSDBeforeQuits(){
  806cf8:	deffff04 	addi	sp,sp,-4
	saveListChangesToSD(0);
  806cfc:	0009883a 	mov	r4,zero

/*
 * Saves all changes related to songs and playlists to SDCard
 * Called before quitting the app
 * */
void saveAllUpdatesToSDBeforeQuits(){
  806d00:	dfc00015 	stw	ra,0(sp)
	saveListChangesToSD(0);
  806d04:	08069e00 	call	8069e0 <saveListChangesToSD>
	saveListChangesToSD(1);
  806d08:	01000044 	movi	r4,1
}
  806d0c:	dfc00017 	ldw	ra,0(sp)
  806d10:	dec00104 	addi	sp,sp,4
 * Saves all changes related to songs and playlists to SDCard
 * Called before quitting the app
 * */
void saveAllUpdatesToSDBeforeQuits(){
	saveListChangesToSD(0);
	saveListChangesToSD(1);
  806d14:	08069e01 	jmpi	8069e0 <saveListChangesToSD>

00806d18 <getAndUpdateSongsFromTxt>:
 * It also checks if there exist any songs in SDCard that are newly
 * added and has not been written to SONGS.TXT.
 * Those songs will also get added to DB.
 * */

int getAndUpdateSongsFromTxt(char** arrFromSDFiles){
  806d18:	defef604 	addi	sp,sp,-1064
  806d1c:	df010815 	stw	fp,1056(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  806d20:	000b883a 	mov	r5,zero
 * It also checks if there exist any songs in SDCard that are newly
 * added and has not been written to SONGS.TXT.
 * Those songs will also get added to DB.
 * */

int getAndUpdateSongsFromTxt(char** arrFromSDFiles){
  806d24:	2039883a 	mov	fp,r4
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  806d28:	010020f4 	movhi	r4,131
  806d2c:	210d4804 	addi	r4,r4,13600
 * It also checks if there exist any songs in SDCard that are newly
 * added and has not been written to SONGS.TXT.
 * Those songs will also get added to DB.
 * */

int getAndUpdateSongsFromTxt(char** arrFromSDFiles){
  806d30:	ddc10715 	stw	r23,1052(sp)
  806d34:	dfc10915 	stw	ra,1060(sp)
  806d38:	dd810615 	stw	r22,1048(sp)
  806d3c:	dd410515 	stw	r21,1044(sp)
  806d40:	dd010415 	stw	r20,1040(sp)
  806d44:	dcc10315 	stw	r19,1036(sp)
  806d48:	dc810215 	stw	r18,1032(sp)
  806d4c:	dc410115 	stw	r17,1028(sp)
  806d50:	dc010015 	stw	r16,1024(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  806d54:	08324500 	call	832450 <alt_up_sd_card_fopen>
  806d58:	15ffffcc 	andi	r23,r2,65535
  806d5c:	bde0001c 	xori	r23,r23,32768
  806d60:	bde00004 	addi	r23,r23,-32768
	if (fileHandler < 0){
  806d64:	b800c916 	blt	r23,zero,80708c <getAndUpdateSongsFromTxt+0x374>
		printf("Reading songs from SONGS.TXT error!\n");
		return -1;
	}

	// add songs from
	char** songNames = malloc(MAX_SONGS *sizeof(char*));
  806d68:	01006504 	movi	r4,404
  806d6c:	08216fc0 	call	8216fc <malloc>
  806d70:	1027883a 	mov	r19,r2
  806d74:	102d883a 	mov	r22,r2
  806d78:	002b883a 	mov	r21,zero
  806d7c:	0029883a 	mov	r20,zero
  806d80:	dc408244 	addi	r17,sp,521
	char temp[501];
	char substr[501];
	int start = 0, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
		line = (char*)malloc(sizeof(char)*501);
  806d84:	01007d44 	movi	r4,501
  806d88:	08216fc0 	call	8216fc <malloc>
		if((fileStats = readLine(fileHandler, line)) == -2) {
  806d8c:	100b883a 	mov	r5,r2
  806d90:	b809883a 	mov	r4,r23
	char temp[501];
	char substr[501];
	int start = 0, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
		line = (char*)malloc(sizeof(char)*501);
  806d94:	1025883a 	mov	r18,r2
		if((fileStats = readLine(fileHandler, line)) == -2) {
  806d98:	08063e40 	call	8063e4 <readLine>
  806d9c:	1007883a 	mov	r3,r2
  806da0:	00bfff84 	movi	r2,-2
  806da4:	1880aa26 	beq	r3,r2,807050 <getAndUpdateSongsFromTxt+0x338>
				printf("File is not closed properly.\n");
			}
			free(line);
			line = NULL;
			return -1;
		} else if(fileStats == -1) {
  806da8:	00bfffc4 	movi	r2,-1
  806dac:	1880b426 	beq	r3,r2,807080 <getAndUpdateSongsFromTxt+0x368>
			free(line);
			line = NULL;
			break;
		} else {
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  806db0:	01807d44 	movi	r6,501
  806db4:	8809883a 	mov	r4,r17
  806db8:	000b883a 	mov	r5,zero
  806dbc:	0821fd00 	call	821fd0 <memset>
			strcpy(temp, line);
  806dc0:	900b883a 	mov	r5,r18
  806dc4:	8809883a 	mov	r4,r17
  806dc8:	0822d840 	call	822d84 <strcpy>
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
  806dcc:	8809883a 	mov	r4,r17
  806dd0:	0822e100 	call	822e10 <strlen>
  806dd4:	0021883a 	mov	r16,zero
  806dd8:	100d883a 	mov	r6,r2
  806ddc:	000f883a 	mov	r7,zero
				if (temp[i] == ' '){
  806de0:	8c05883a 	add	r2,r17,r16
					if (iteration == 0){
						start = i+1;
  806de4:	81000044 	addi	r4,r16,1
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
					if (iteration == 0){
  806de8:	380ac03a 	cmpne	r5,r7,zero
			break;
		} else {
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
  806dec:	8180092e 	bgeu	r16,r6,806e14 <getAndUpdateSongsFromTxt+0xfc>
				if (temp[i] == ' '){
  806df0:	10c00007 	ldb	r3,0(r2)
  806df4:	00800804 	movi	r2,32
  806df8:	18806526 	beq	r3,r2,806f90 <getAndUpdateSongsFromTxt+0x278>
						if (temp[0] != '0'){
							memset(substr, 0 , sizeof(substr)/sizeof(substr[0]));
							strcpy(substr, line+i+1);
							createSong(temp, strtol(substr, NULL, 10));
							songNames[numOfSongs] = malloc(20*sizeof(char));
							strcpy(songNames[numOfSongs], temp);
  806dfc:	81000044 	addi	r4,r16,1
  806e00:	2021883a 	mov	r16,r4
		} else {
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
  806e04:	8c05883a 	add	r2,r17,r16
					if (iteration == 0){
						start = i+1;
  806e08:	81000044 	addi	r4,r16,1
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
					if (iteration == 0){
  806e0c:	380ac03a 	cmpne	r5,r7,zero
			break;
		} else {
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
  806e10:	81bff736 	bltu	r16,r6,806df0 <getAndUpdateSongsFromTxt+0xd8>
					}
				}
			}
			numOfSongs++;
		}
		free(line);
  806e14:	9009883a 	mov	r4,r18
  806e18:	08216e80 	call	8216e8 <free>
						}
						break;
					}
				}
			}
			numOfSongs++;
  806e1c:	a5000044 	addi	r20,r20,1
	char* line = NULL;
	char temp[501];
	char substr[501];
	int start = 0, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
  806e20:	00801944 	movi	r2,101
					}
				}
			}
			numOfSongs++;
		}
		free(line);
  806e24:	b5800104 	addi	r22,r22,4
	char* line = NULL;
	char temp[501];
	char substr[501];
	int start = 0, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
  806e28:	a0bfd61e 	bne	r20,r2,806d84 <getAndUpdateSongsFromTxt+0x6c>
		}
		free(line);
		line = NULL;
	}
	//set an end sign, null means end of the array.
	songNames[numOfSongs] = NULL;
  806e2c:	a505883a 	add	r2,r20,r20
	int size = 0;
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
  806e30:	e4400017 	ldw	r17,0(fp)
		}
		free(line);
		line = NULL;
	}
	//set an end sign, null means end of the array.
	songNames[numOfSongs] = NULL;
  806e34:	1085883a 	add	r2,r2,r2
  806e38:	14c5883a 	add	r2,r2,r19
  806e3c:	10000015 	stw	zero,0(r2)
	int size = 0;
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
  806e40:	88002626 	beq	r17,zero,806edc <getAndUpdateSongsFromTxt+0x1c4>
	j = 0;
	while (songNames[j] != NULL){
		free(songNames[j]);
		songNames[j++] = NULL;
	}
	free(songNames);
  806e44:	e5400104 	addi	r21,fp,4
  806e48:	e025883a 	mov	r18,fp
  806e4c:	0021883a 	mov	r16,zero
  806e50:	00000406 	br	806e64 <getAndUpdateSongsFromTxt+0x14c>
				writeLine(fileHandler, strToStore, size);
				createSong(arrFromSDFiles[sdFiles_index], 0);
				numOfSongs++;
				break;
			} else {
				if (strcmp(songNames[txtFiles_index], arrFromSDFiles[sdFiles_index]) == 0)
  806e54:	0822cc80 	call	822cc8 <strcmp>
  806e58:	10001c26 	beq	r2,zero,806ecc <getAndUpdateSongsFromTxt+0x1b4>
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
		for (txtFiles_index = 0; txtFiles_index < MAX_SONGS; txtFiles_index++){
  806e5c:	00806504 	movi	r2,404
  806e60:	80801a26 	beq	r16,r2,806ecc <getAndUpdateSongsFromTxt+0x1b4>
			if (songNames[txtFiles_index] == NULL){
  806e64:	9c05883a 	add	r2,r19,r16
  806e68:	10c00017 	ldw	r3,0(r2)
				createSong(arrFromSDFiles[sdFiles_index], 0);
				numOfSongs++;
				break;
			} else {
				if (strcmp(songNames[txtFiles_index], arrFromSDFiles[sdFiles_index]) == 0)
					break;
  806e6c:	84000104 	addi	r16,r16,4
				writeLine(fileHandler, strToStore, size);
				createSong(arrFromSDFiles[sdFiles_index], 0);
				numOfSongs++;
				break;
			} else {
				if (strcmp(songNames[txtFiles_index], arrFromSDFiles[sdFiles_index]) == 0)
  806e70:	880b883a 	mov	r5,r17
  806e74:	1809883a 	mov	r4,r3
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
		for (txtFiles_index = 0; txtFiles_index < MAX_SONGS; txtFiles_index++){
			if (songNames[txtFiles_index] == NULL){
  806e78:	183ff61e 	bne	r3,zero,806e54 <getAndUpdateSongsFromTxt+0x13c>
				memset(strToStore, 0 , sizeof(strToStore)/sizeof(strToStore[0]));
  806e7c:	d8000015 	stw	zero,0(sp)
  806e80:	d8000115 	stw	zero,4(sp)
  806e84:	d8000215 	stw	zero,8(sp)
  806e88:	d8000315 	stw	zero,12(sp)
  806e8c:	d8000415 	stw	zero,16(sp)
  806e90:	a5000044 	addi	r20,r20,1
				while((size = sprintf(strToStore, "%d %s 0", numOfSongs+1, arrFromSDFiles[sdFiles_index])) <= 0);
  806e94:	91c00017 	ldw	r7,0(r18)
  806e98:	d809883a 	mov	r4,sp
  806e9c:	014020f4 	movhi	r5,131
  806ea0:	294d6704 	addi	r5,r5,13724
  806ea4:	a00d883a 	mov	r6,r20
  806ea8:	0822b640 	call	822b64 <sprintf>
  806eac:	00bff90e 	bge	zero,r2,806e94 <getAndUpdateSongsFromTxt+0x17c>
				writeLine(fileHandler, strToStore, size);
  806eb0:	b809883a 	mov	r4,r23
  806eb4:	d80b883a 	mov	r5,sp
  806eb8:	100d883a 	mov	r6,r2
  806ebc:	08062ec0 	call	8062ec <writeLine>
				createSong(arrFromSDFiles[sdFiles_index], 0);
  806ec0:	91000017 	ldw	r4,0(r18)
  806ec4:	000b883a 	mov	r5,zero
  806ec8:	0802d880 	call	802d88 <createSong>
	int size = 0;
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
  806ecc:	ac400017 	ldw	r17,0(r21)
		for (txtFiles_index = 0; txtFiles_index < MAX_SONGS; txtFiles_index++){
  806ed0:	a825883a 	mov	r18,r21
	int size = 0;
	// update the txt file and db
	int sdFiles_index = 0;
	int txtFiles_index = 0;

	while (arrFromSDFiles[sdFiles_index] != NULL){
  806ed4:	ad400104 	addi	r21,r21,4
  806ed8:	883fdc1e 	bne	r17,zero,806e4c <getAndUpdateSongsFromTxt+0x134>
			}
		}
		sdFiles_index++;
	}
	memset(&strToStore[0], 0 , sizeof(strToStore)/sizeof(strToStore[0]));
	if (!alt_up_sd_card_fclose(fileHandler)){
  806edc:	b809883a 	mov	r4,r23
					break;
			}
		}
		sdFiles_index++;
	}
	memset(&strToStore[0], 0 , sizeof(strToStore)/sizeof(strToStore[0]));
  806ee0:	d8000015 	stw	zero,0(sp)
  806ee4:	d8000115 	stw	zero,4(sp)
  806ee8:	d8000215 	stw	zero,8(sp)
  806eec:	d8000315 	stw	zero,12(sp)
  806ef0:	d8000415 	stw	zero,16(sp)
	if (!alt_up_sd_card_fclose(fileHandler)){
  806ef4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  806ef8:	10007326 	beq	r2,zero,8070c8 <getAndUpdateSongsFromTxt+0x3b0>
		printf("File is not closed properly.\n");
	}

	int j = 0;
	while (arrFromSDFiles[j] != NULL){
  806efc:	e1000017 	ldw	r4,0(fp)
  806f00:	20000826 	beq	r4,zero,806f24 <getAndUpdateSongsFromTxt+0x20c>
  806f04:	e4000104 	addi	r16,fp,4
  806f08:	e023883a 	mov	r17,fp
		free(arrFromSDFiles[j]);
  806f0c:	08216e80 	call	8216e8 <free>
		arrFromSDFiles[j++] = NULL;
  806f10:	88000015 	stw	zero,0(r17)
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
	}

	int j = 0;
	while (arrFromSDFiles[j] != NULL){
  806f14:	81000017 	ldw	r4,0(r16)
		free(arrFromSDFiles[j]);
		arrFromSDFiles[j++] = NULL;
  806f18:	8023883a 	mov	r17,r16
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
	}

	int j = 0;
	while (arrFromSDFiles[j] != NULL){
  806f1c:	84000104 	addi	r16,r16,4
  806f20:	203ffa1e 	bne	r4,zero,806f0c <getAndUpdateSongsFromTxt+0x1f4>
		free(arrFromSDFiles[j]);
		arrFromSDFiles[j++] = NULL;
	}
	free(arrFromSDFiles);
  806f24:	e009883a 	mov	r4,fp
  806f28:	08216e80 	call	8216e8 <free>
	arrFromSDFiles = NULL;
	j = 0;
	while (songNames[j] != NULL){
  806f2c:	99000017 	ldw	r4,0(r19)
  806f30:	20000826 	beq	r4,zero,806f54 <getAndUpdateSongsFromTxt+0x23c>
  806f34:	9c000104 	addi	r16,r19,4
  806f38:	9823883a 	mov	r17,r19
		free(songNames[j]);
  806f3c:	08216e80 	call	8216e8 <free>
		songNames[j++] = NULL;
  806f40:	88000015 	stw	zero,0(r17)
		arrFromSDFiles[j++] = NULL;
	}
	free(arrFromSDFiles);
	arrFromSDFiles = NULL;
	j = 0;
	while (songNames[j] != NULL){
  806f44:	81000017 	ldw	r4,0(r16)
		free(songNames[j]);
		songNames[j++] = NULL;
  806f48:	8023883a 	mov	r17,r16
		arrFromSDFiles[j++] = NULL;
	}
	free(arrFromSDFiles);
	arrFromSDFiles = NULL;
	j = 0;
	while (songNames[j] != NULL){
  806f4c:	84000104 	addi	r16,r16,4
  806f50:	203ffa1e 	bne	r4,zero,806f3c <getAndUpdateSongsFromTxt+0x224>
		free(songNames[j]);
		songNames[j++] = NULL;
	}
	free(songNames);
  806f54:	9809883a 	mov	r4,r19
  806f58:	08216e80 	call	8216e8 <free>
  806f5c:	0005883a 	mov	r2,zero
	songNames = NULL;
	return 0;
}
  806f60:	dfc10917 	ldw	ra,1060(sp)
  806f64:	df010817 	ldw	fp,1056(sp)
  806f68:	ddc10717 	ldw	r23,1052(sp)
  806f6c:	dd810617 	ldw	r22,1048(sp)
  806f70:	dd410517 	ldw	r21,1044(sp)
  806f74:	dd010417 	ldw	r20,1040(sp)
  806f78:	dcc10317 	ldw	r19,1036(sp)
  806f7c:	dc810217 	ldw	r18,1032(sp)
  806f80:	dc410117 	ldw	r17,1028(sp)
  806f84:	dc010017 	ldw	r16,1024(sp)
  806f88:	dec10a04 	addi	sp,sp,1064
  806f8c:	f800283a 	ret
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
					if (iteration == 0){
						start = i+1;
  806f90:	01c00044 	movi	r7,1
			memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
			strcpy(temp, line);
			iteration = 0;
			for (i = 0; i < strlen(temp); i++){
				if (temp[i] == ' '){
					if (iteration == 0){
  806f94:	2800031e 	bne	r5,zero,806fa4 <getAndUpdateSongsFromTxt+0x28c>
						start = i+1;
  806f98:	202b883a 	mov	r21,r4
						if (temp[0] != '0'){
							memset(substr, 0 , sizeof(substr)/sizeof(substr[0]));
							strcpy(substr, line+i+1);
							createSong(temp, strtol(substr, NULL, 10));
							songNames[numOfSongs] = malloc(20*sizeof(char));
							strcpy(songNames[numOfSongs], temp);
  806f9c:	2021883a 	mov	r16,r4
  806fa0:	003f9806 	br	806e04 <getAndUpdateSongsFromTxt+0xec>
					if (iteration == 0){
						start = i+1;
						iteration++;
					} else {
						end = i+1;
						memset(temp, 0 , sizeof(temp)/sizeof(temp[0]));
  806fa4:	000b883a 	mov	r5,zero
  806fa8:	01807d44 	movi	r6,501
  806fac:	8809883a 	mov	r4,r17
  806fb0:	0821fd00 	call	821fd0 <memset>
						strncpy(temp, line+start, end-start-1);
  806fb4:	8809883a 	mov	r4,r17
  806fb8:	954b883a 	add	r5,r18,r21
  806fbc:	854dc83a 	sub	r6,r16,r21
  806fc0:	0822f340 	call	822f34 <strncpy>
						temp[strlen(temp)] = '\0';
  806fc4:	8809883a 	mov	r4,r17
  806fc8:	0822e100 	call	822e10 <strlen>
  806fcc:	8885883a 	add	r2,r17,r2
  806fd0:	10000005 	stb	zero,0(r2)
						if (temp[0] != '0'){
  806fd4:	d8c08247 	ldb	r3,521(sp)
  806fd8:	00800c04 	movi	r2,48
  806fdc:	18bf8d26 	beq	r3,r2,806e14 <getAndUpdateSongsFromTxt+0xfc>
							memset(substr, 0 , sizeof(substr)/sizeof(substr[0]));
  806fe0:	01807d44 	movi	r6,501
  806fe4:	d9000504 	addi	r4,sp,20
  806fe8:	000b883a 	mov	r5,zero
  806fec:	0821fd00 	call	821fd0 <memset>
							strcpy(substr, line+i+1);
  806ff0:	940b883a 	add	r5,r18,r16
  806ff4:	29400044 	addi	r5,r5,1
  806ff8:	d9000504 	addi	r4,sp,20
  806ffc:	0822d840 	call	822d84 <strcpy>
							createSong(temp, strtol(substr, NULL, 10));
  807000:	01800284 	movi	r6,10
  807004:	d9000504 	addi	r4,sp,20
  807008:	000b883a 	mov	r5,zero
  80700c:	08239c80 	call	8239c8 <strtol>
  807010:	100b883a 	mov	r5,r2
  807014:	8809883a 	mov	r4,r17
  807018:	0802d880 	call	802d88 <createSong>
							songNames[numOfSongs] = malloc(20*sizeof(char));
  80701c:	01000504 	movi	r4,20
  807020:	08216fc0 	call	8216fc <malloc>
							strcpy(songNames[numOfSongs], temp);
  807024:	1009883a 	mov	r4,r2
  807028:	880b883a 	mov	r5,r17
						temp[strlen(temp)] = '\0';
						if (temp[0] != '0'){
							memset(substr, 0 , sizeof(substr)/sizeof(substr[0]));
							strcpy(substr, line+i+1);
							createSong(temp, strtol(substr, NULL, 10));
							songNames[numOfSongs] = malloc(20*sizeof(char));
  80702c:	b0800015 	stw	r2,0(r22)
							strcpy(songNames[numOfSongs], temp);
  807030:	0822d840 	call	822d84 <strcpy>
					}
				}
			}
			numOfSongs++;
		}
		free(line);
  807034:	9009883a 	mov	r4,r18
  807038:	08216e80 	call	8216e8 <free>
						}
						break;
					}
				}
			}
			numOfSongs++;
  80703c:	a5000044 	addi	r20,r20,1
	char* line = NULL;
	char temp[501];
	char substr[501];
	int start = 0, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
  807040:	00801944 	movi	r2,101
					}
				}
			}
			numOfSongs++;
		}
		free(line);
  807044:	b5800104 	addi	r22,r22,4
	char* line = NULL;
	char temp[501];
	char substr[501];
	int start = 0, end, i, iteration;
	int numOfSongs = 0, fileStats = 0;
	while (numOfSongs < MAX_SONGS){
  807048:	a0bf4e1e 	bne	r20,r2,806d84 <getAndUpdateSongsFromTxt+0x6c>
  80704c:	003f7706 	br	806e2c <getAndUpdateSongsFromTxt+0x114>
		line = (char*)malloc(sizeof(char)*501);
		if((fileStats = readLine(fileHandler, line)) == -2) {
			printf("File SONGS.TXT cannot be read, reopening...\n");
  807050:	010020f4 	movhi	r4,131
  807054:	210d5404 	addi	r4,r4,13648
  807058:	08221800 	call	822180 <puts>
			if (!alt_up_sd_card_fclose(fileHandler)){
  80705c:	b93fffcc 	andi	r4,r23,65535
  807060:	2120001c 	xori	r4,r4,32768
  807064:	21200004 	addi	r4,r4,-32768
  807068:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  80706c:	10001a26 	beq	r2,zero,8070d8 <getAndUpdateSongsFromTxt+0x3c0>
				printf("File is not closed properly.\n");
			}
			free(line);
  807070:	9009883a 	mov	r4,r18
  807074:	08216e80 	call	8216e8 <free>
  807078:	00bfffc4 	movi	r2,-1
  80707c:	003fb806 	br	806f60 <getAndUpdateSongsFromTxt+0x248>
			line = NULL;
			return -1;
		} else if(fileStats == -1) {
			free(line);
  807080:	9009883a 	mov	r4,r18
  807084:	08216e80 	call	8216e8 <free>
  807088:	003f6806 	br	806e2c <getAndUpdateSongsFromTxt+0x114>
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  80708c:	010020f4 	movhi	r4,131
  807090:	210d4804 	addi	r4,r4,13600
  807094:	01400044 	movi	r5,1
  807098:	08324500 	call	832450 <alt_up_sd_card_fopen>
  80709c:	15ffffcc 	andi	r23,r2,65535
  8070a0:	bde0001c 	xori	r23,r23,32768
  8070a4:	bde00004 	addi	r23,r23,-32768
  8070a8:	b83f2f0e 	bge	r23,zero,806d68 <getAndUpdateSongsFromTxt+0x50>
			alt_up_sd_card_fclose(fileHandler);
  8070ac:	b809883a 	mov	r4,r23
  8070b0:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
 * */

int getAndUpdateSongsFromTxt(char** arrFromSDFiles){
	int fileHandler;
	if ((fileHandler = openFileFromSD(SONGFILE)) < 0){
		printf("Reading songs from SONGS.TXT error!\n");
  8070b4:	010020f4 	movhi	r4,131
  8070b8:	210d4b04 	addi	r4,r4,13612
  8070bc:	08221800 	call	822180 <puts>
  8070c0:	00bfffc4 	movi	r2,-1
  8070c4:	003fa606 	br	806f60 <getAndUpdateSongsFromTxt+0x248>
		}
		sdFiles_index++;
	}
	memset(&strToStore[0], 0 , sizeof(strToStore)/sizeof(strToStore[0]));
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
  8070c8:	010020f4 	movhi	r4,131
  8070cc:	210d5f04 	addi	r4,r4,13692
  8070d0:	08221800 	call	822180 <puts>
  8070d4:	003f8906 	br	806efc <getAndUpdateSongsFromTxt+0x1e4>
	while (numOfSongs < MAX_SONGS){
		line = (char*)malloc(sizeof(char)*501);
		if((fileStats = readLine(fileHandler, line)) == -2) {
			printf("File SONGS.TXT cannot be read, reopening...\n");
			if (!alt_up_sd_card_fclose(fileHandler)){
				printf("File is not closed properly.\n");
  8070d8:	010020f4 	movhi	r4,131
  8070dc:	210d5f04 	addi	r4,r4,13692
  8070e0:	08221800 	call	822180 <puts>
  8070e4:	003fe206 	br	807070 <getAndUpdateSongsFromTxt+0x358>

008070e8 <loadSongsFromSD>:
/*
 * Load songs from SDCARD and added it to DB
 * This also updates the SONGS.TXT if the text file misses
 * any song titles.
 * */
void loadSongsFromSD(){
  8070e8:	defffe04 	addi	sp,sp,-8
  8070ec:	dc000015 	stw	r16,0(sp)
  8070f0:	dfc00115 	stw	ra,4(sp)
	char** sdsongs = NULL;
	sdsongs = getSongsFromSD();
  8070f4:	08060640 	call	806064 <getSongsFromSD>
  8070f8:	1021883a 	mov	r16,r2
	//getAndUpdateSongsFromTxt(sdsongs);
	while(getAndUpdateSongsFromTxt(sdsongs) < 0);
  8070fc:	8009883a 	mov	r4,r16
  807100:	0806d180 	call	806d18 <getAndUpdateSongsFromTxt>
  807104:	103ffd16 	blt	r2,zero,8070fc <loadSongsFromSD+0x14>

}
  807108:	dfc00117 	ldw	ra,4(sp)
  80710c:	dc000017 	ldw	r16,0(sp)
  807110:	dec00204 	addi	sp,sp,8
  807114:	f800283a 	ret

00807118 <preloadSongsToPlaylist>:
 * After all playlists are loaded to database,
 * initialize each playlist with the correct songs that belong to
 * that playlist.
 * This information is stored in LORDER.TXT
 * */
void preloadSongsToPlaylist(){
  807118:	defffb04 	addi	sp,sp,-20
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  80711c:	010020f4 	movhi	r4,131
  807120:	210cef04 	addi	r4,r4,13244
  807124:	000b883a 	mov	r5,zero
 * After all playlists are loaded to database,
 * initialize each playlist with the correct songs that belong to
 * that playlist.
 * This information is stored in LORDER.TXT
 * */
void preloadSongsToPlaylist(){
  807128:	dc800215 	stw	r18,8(sp)
  80712c:	dfc00415 	stw	ra,16(sp)
  807130:	dcc00315 	stw	r19,12(sp)
  807134:	dc400115 	stw	r17,4(sp)
  807138:	dc000015 	stw	r16,0(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  80713c:	08324500 	call	832450 <alt_up_sd_card_fopen>
  807140:	14bfffcc 	andi	r18,r2,65535
  807144:	94a0001c 	xori	r18,r18,32768
  807148:	94a00004 	addi	r18,r18,-32768
	if (fileHandler < 0){
  80714c:	90004116 	blt	r18,zero,807254 <preloadSongsToPlaylist+0x13c>
  807150:	94ffffcc 	andi	r19,r18,65535
  807154:	9ce0001c 	xori	r19,r19,32768
 * This information is stored in LORDER.TXT
 * */
void preloadSongsToPlaylist(){
	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTORDERFILE)) < 0){
		printf("Can't open file LORDER.TXT error!\n");
  807158:	0023883a 	mov	r17,zero
  80715c:	9ce00004 	addi	r19,r19,-32768
  807160:	00000706 	br	807180 <preloadSongsToPlaylist+0x68>
				printf("File is not closed properly.\n");
			}
			free(line);
			line = NULL;
			break;
		} else if (fileStats == -1){
  807164:	00bfffc4 	movi	r2,-1
  807168:	18802c26 	beq	r3,r2,80721c <preloadSongsToPlaylist+0x104>
			//printf("Quit after iteration %d\n", i);
			free(line);
			line = NULL;
			break;
		} else {
			initializeListWithSongs(line);
  80716c:	0805d700 	call	805d70 <initializeListWithSongs>
			free(line);
  807170:	8009883a 	mov	r4,r16
  807174:	08216e80 	call	8216e8 <free>

	char* line = NULL;
	int i, fileStats;

	i = 0;
	while (i < 50){
  807178:	00800c84 	movi	r2,50
  80717c:	88802d26 	beq	r17,r2,807234 <preloadSongsToPlaylist+0x11c>
		line = (char*)malloc(sizeof(char)*501);
  807180:	01007d44 	movi	r4,501
  807184:	08216fc0 	call	8216fc <malloc>
		fileStats = readLine(fileHandler, line);
  807188:	100b883a 	mov	r5,r2
  80718c:	9009883a 	mov	r4,r18
	char* line = NULL;
	int i, fileStats;

	i = 0;
	while (i < 50){
		line = (char*)malloc(sizeof(char)*501);
  807190:	1021883a 	mov	r16,r2
		fileStats = readLine(fileHandler, line);
  807194:	08063e40 	call	8063e4 <readLine>
  807198:	1007883a 	mov	r3,r2
		if (fileStats == -2){
  80719c:	00bfff84 	movi	r2,-2
			line = NULL;
			break;
		} else {
			initializeListWithSongs(line);
			free(line);
			i++;
  8071a0:	8c400044 	addi	r17,r17,1
			//printf("Quit after iteration %d\n", i);
			free(line);
			line = NULL;
			break;
		} else {
			initializeListWithSongs(line);
  8071a4:	8009883a 	mov	r4,r16

	i = 0;
	while (i < 50){
		line = (char*)malloc(sizeof(char)*501);
		fileStats = readLine(fileHandler, line);
		if (fileStats == -2){
  8071a8:	18bfee1e 	bne	r3,r2,807164 <preloadSongsToPlaylist+0x4c>
			printf("LORDER.TXT cannot be read, reopening...\n");
  8071ac:	010020f4 	movhi	r4,131
  8071b0:	210d7204 	addi	r4,r4,13768
  8071b4:	08221800 	call	822180 <puts>
			if (!alt_up_sd_card_fclose(fileHandler)){
  8071b8:	9809883a 	mov	r4,r19
  8071bc:	9823883a 	mov	r17,r19
  8071c0:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  8071c4:	10001f26 	beq	r2,zero,807244 <preloadSongsToPlaylist+0x12c>
				printf("File is not closed properly.\n");
			}
			free(line);
  8071c8:	8009883a 	mov	r4,r16
  8071cc:	08216e80 	call	8216e8 <free>
			free(line);
			i++;
		}
	}
	line = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
  8071d0:	8809883a 	mov	r4,r17
  8071d4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  8071d8:	10000726 	beq	r2,zero,8071f8 <preloadSongsToPlaylist+0xe0>
		printf("file is not closed properly.\n");
		return;
	}
}
  8071dc:	dfc00417 	ldw	ra,16(sp)
  8071e0:	dcc00317 	ldw	r19,12(sp)
  8071e4:	dc800217 	ldw	r18,8(sp)
  8071e8:	dc400117 	ldw	r17,4(sp)
  8071ec:	dc000017 	ldw	r16,0(sp)
  8071f0:	dec00504 	addi	sp,sp,20
  8071f4:	f800283a 	ret
			i++;
		}
	}
	line = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("file is not closed properly.\n");
  8071f8:	010020f4 	movhi	r4,131
  8071fc:	210d4004 	addi	r4,r4,13568
		return;
	}
}
  807200:	dfc00417 	ldw	ra,16(sp)
  807204:	dcc00317 	ldw	r19,12(sp)
  807208:	dc800217 	ldw	r18,8(sp)
  80720c:	dc400117 	ldw	r17,4(sp)
  807210:	dc000017 	ldw	r16,0(sp)
  807214:	dec00504 	addi	sp,sp,20
			i++;
		}
	}
	line = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("file is not closed properly.\n");
  807218:	08221801 	jmpi	822180 <puts>
			free(line);
			line = NULL;
			break;
		} else if (fileStats == -1){
			//printf("Quit after iteration %d\n", i);
			free(line);
  80721c:	947fffcc 	andi	r17,r18,65535
  807220:	8009883a 	mov	r4,r16
  807224:	8c60001c 	xori	r17,r17,32768
  807228:	08216e80 	call	8216e8 <free>
  80722c:	8c600004 	addi	r17,r17,-32768
  807230:	003fe706 	br	8071d0 <preloadSongsToPlaylist+0xb8>

	char* line = NULL;
	int i, fileStats;

	i = 0;
	while (i < 50){
  807234:	947fffcc 	andi	r17,r18,65535
  807238:	8c60001c 	xori	r17,r17,32768
  80723c:	8c600004 	addi	r17,r17,-32768
  807240:	003fe306 	br	8071d0 <preloadSongsToPlaylist+0xb8>
		line = (char*)malloc(sizeof(char)*501);
		fileStats = readLine(fileHandler, line);
		if (fileStats == -2){
			printf("LORDER.TXT cannot be read, reopening...\n");
			if (!alt_up_sd_card_fclose(fileHandler)){
				printf("File is not closed properly.\n");
  807244:	010020f4 	movhi	r4,131
  807248:	210d5f04 	addi	r4,r4,13692
  80724c:	08221800 	call	822180 <puts>
  807250:	003fdd06 	br	8071c8 <preloadSongsToPlaylist+0xb0>
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  807254:	010020f4 	movhi	r4,131
  807258:	210cef04 	addi	r4,r4,13244
  80725c:	01400044 	movi	r5,1
  807260:	08324500 	call	832450 <alt_up_sd_card_fopen>
  807264:	14bfffcc 	andi	r18,r2,65535
  807268:	94a0001c 	xori	r18,r18,32768
  80726c:	94a00004 	addi	r18,r18,-32768
  807270:	903fb70e 	bge	r18,zero,807150 <preloadSongsToPlaylist+0x38>
			alt_up_sd_card_fclose(fileHandler);
  807274:	9009883a 	mov	r4,r18
  807278:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
 * This information is stored in LORDER.TXT
 * */
void preloadSongsToPlaylist(){
	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTORDERFILE)) < 0){
		printf("Can't open file LORDER.TXT error!\n");
  80727c:	010020f4 	movhi	r4,131
  807280:	210d6904 	addi	r4,r4,13732
  807284:	003fde06 	br	807200 <preloadSongsToPlaylist+0xe8>

00807288 <saveListsToSD>:
/*
 * Saves all playlists with their information to
 * LISTS.TXT in SDCard.
 * Return value: 0 means success, -1 means error in fopen/fclose
 */
int saveListsToSD() {
  807288:	defff904 	addi	sp,sp,-28
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  80728c:	010020f4 	movhi	r4,131
  807290:	210d7c04 	addi	r4,r4,13808
  807294:	000b883a 	mov	r5,zero
/*
 * Saves all playlists with their information to
 * LISTS.TXT in SDCard.
 * Return value: 0 means success, -1 means error in fopen/fclose
 */
int saveListsToSD() {
  807298:	dd000515 	stw	r20,20(sp)
  80729c:	dfc00615 	stw	ra,24(sp)
  8072a0:	dcc00415 	stw	r19,16(sp)
  8072a4:	dc800315 	stw	r18,12(sp)
  8072a8:	dc400215 	stw	r17,8(sp)
  8072ac:	dc000115 	stw	r16,4(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  8072b0:	08324500 	call	832450 <alt_up_sd_card_fopen>
  8072b4:	153fffcc 	andi	r20,r2,65535
  8072b8:	a520001c 	xori	r20,r20,32768
  8072bc:	a5200004 	addi	r20,r20,-32768
	if (fileHandler < 0){
  8072c0:	a0003a16 	blt	r20,zero,8073ac <saveListsToSD+0x124>
	if ((fileHandler = openFileFromSD(LISTFILE)) < 0){
		printf("Error opening file in addListToSD.\n");
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
  8072c4:	010018c4 	movi	r4,99
  8072c8:	08216fc0 	call	8216fc <malloc>
  8072cc:	1021883a 	mov	r16,r2
  8072d0:	04c02134 	movhi	r19,132
  8072d4:	9cca6204 	addi	r19,r19,10632
  8072d8:	04400044 	movi	r17,1
  8072dc:	04802174 	movhi	r18,133
  8072e0:	94b34a04 	addi	r18,r18,-13016
  8072e4:	00000b06 	br	807314 <saveListsToSD+0x8c>
	for(i = 1; i < MAX_LISTS; i++){
		if (db.used_list_index[i] == 0){
			size = sprintf(strToStore, "%d %d %d", i, 0, 0);
  8072e8:	d8000015 	stw	zero,0(sp)
  8072ec:	0822b640 	call	822b64 <sprintf>
  8072f0:	100d883a 	mov	r6,r2
		} else {
			size = sprintf(strToStore,"%d %s %d", db.playlists[i]->id, db.playlists[i]->list_name, db.playlists[i]->num_of_songs);
		}
		writeLine(fileHandler, strToStore, size);
  8072f4:	a009883a 	mov	r4,r20
  8072f8:	800b883a 	mov	r5,r16
  8072fc:	08062ec0 	call	8062ec <writeLine>
		printf("Error opening file in addListToSD.\n");
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
	for(i = 1; i < MAX_LISTS; i++){
  807300:	8c400044 	addi	r17,r17,1
  807304:	00800cc4 	movi	r2,51
  807308:	94800104 	addi	r18,r18,4
  80730c:	9cc00104 	addi	r19,r19,4
  807310:	88801826 	beq	r17,r2,807374 <saveListsToSD+0xec>
		if (db.used_list_index[i] == 0){
  807314:	90800017 	ldw	r2,0(r18)
			size = sprintf(strToStore, "%d %d %d", i, 0, 0);
  807318:	8009883a 	mov	r4,r16
  80731c:	014020f4 	movhi	r5,131
  807320:	294d8804 	addi	r5,r5,13856
  807324:	880d883a 	mov	r6,r17
  807328:	000f883a 	mov	r7,zero
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
	for(i = 1; i < MAX_LISTS; i++){
		if (db.used_list_index[i] == 0){
  80732c:	103fee26 	beq	r2,zero,8072e8 <saveListsToSD+0x60>
			size = sprintf(strToStore, "%d %d %d", i, 0, 0);
		} else {
			size = sprintf(strToStore,"%d %s %d", db.playlists[i]->id, db.playlists[i]->list_name, db.playlists[i]->num_of_songs);
  807330:	99c00217 	ldw	r7,8(r19)
  807334:	8009883a 	mov	r4,r16
  807338:	014020f4 	movhi	r5,131
  80733c:	294d8b04 	addi	r5,r5,13868
  807340:	39801b17 	ldw	r6,108(r7)
  807344:	38801a17 	ldw	r2,104(r7)
		printf("Error opening file in addListToSD.\n");
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
	for(i = 1; i < MAX_LISTS; i++){
  807348:	8c400044 	addi	r17,r17,1
  80734c:	94800104 	addi	r18,r18,4
		if (db.used_list_index[i] == 0){
			size = sprintf(strToStore, "%d %d %d", i, 0, 0);
		} else {
			size = sprintf(strToStore,"%d %s %d", db.playlists[i]->id, db.playlists[i]->list_name, db.playlists[i]->num_of_songs);
  807350:	d8800015 	stw	r2,0(sp)
  807354:	0822b640 	call	822b64 <sprintf>
  807358:	100d883a 	mov	r6,r2
		}
		writeLine(fileHandler, strToStore, size);
  80735c:	a009883a 	mov	r4,r20
  807360:	800b883a 	mov	r5,r16
  807364:	08062ec0 	call	8062ec <writeLine>
		printf("Error opening file in addListToSD.\n");
		return -1;
	}
	int i, size;
	char* strToStore = (char*)malloc(sizeof(char)*99);
	for(i = 1; i < MAX_LISTS; i++){
  807368:	00800cc4 	movi	r2,51
  80736c:	9cc00104 	addi	r19,r19,4
  807370:	88bfe81e 	bne	r17,r2,807314 <saveListsToSD+0x8c>
		} else {
			size = sprintf(strToStore,"%d %s %d", db.playlists[i]->id, db.playlists[i]->list_name, db.playlists[i]->num_of_songs);
		}
		writeLine(fileHandler, strToStore, size);
	}
	free(strToStore);
  807374:	8009883a 	mov	r4,r16
  807378:	08216e80 	call	8216e8 <free>
	strToStore = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
  80737c:	a009883a 	mov	r4,r20
  807380:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  807384:	10001826 	beq	r2,zero,8073e8 <saveListsToSD+0x160>
  807388:	0005883a 	mov	r2,zero
		printf("File is not closed properly.\n");
		return -1;
	}
	return 0;
}
  80738c:	dfc00617 	ldw	ra,24(sp)
  807390:	dd000517 	ldw	r20,20(sp)
  807394:	dcc00417 	ldw	r19,16(sp)
  807398:	dc800317 	ldw	r18,12(sp)
  80739c:	dc400217 	ldw	r17,8(sp)
  8073a0:	dc000117 	ldw	r16,4(sp)
  8073a4:	dec00704 	addi	sp,sp,28
  8073a8:	f800283a 	ret
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8073ac:	010020f4 	movhi	r4,131
  8073b0:	210d7c04 	addi	r4,r4,13808
  8073b4:	01400044 	movi	r5,1
  8073b8:	08324500 	call	832450 <alt_up_sd_card_fopen>
  8073bc:	153fffcc 	andi	r20,r2,65535
  8073c0:	a520001c 	xori	r20,r20,32768
  8073c4:	a5200004 	addi	r20,r20,-32768
  8073c8:	a03fbe0e 	bge	r20,zero,8072c4 <saveListsToSD+0x3c>
			alt_up_sd_card_fclose(fileHandler);
  8073cc:	a009883a 	mov	r4,r20
  8073d0:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
 * Return value: 0 means success, -1 means error in fopen/fclose
 */
int saveListsToSD() {
	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTFILE)) < 0){
		printf("Error opening file in addListToSD.\n");
  8073d4:	010020f4 	movhi	r4,131
  8073d8:	210d7f04 	addi	r4,r4,13820
  8073dc:	08221800 	call	822180 <puts>
  8073e0:	00bfffc4 	movi	r2,-1
  8073e4:	003fe906 	br	80738c <saveListsToSD+0x104>
		writeLine(fileHandler, strToStore, size);
	}
	free(strToStore);
	strToStore = NULL;
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
  8073e8:	010020f4 	movhi	r4,131
  8073ec:	210d5f04 	addi	r4,r4,13692
  8073f0:	08221800 	call	822180 <puts>
  8073f4:	00bfffc4 	movi	r2,-1
  8073f8:	003fe406 	br	80738c <saveListsToSD+0x104>

008073fc <updateSongToSD>:
	// set ending condition, NULL means end of the array
	songNames[numOfSounds] = NULL;
	return songNames;
}

void updateSongToSD() {
  8073fc:	defff204 	addi	sp,sp,-56
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  807400:	010020f4 	movhi	r4,131
  807404:	210d4804 	addi	r4,r4,13600
  807408:	000b883a 	mov	r5,zero
	// set ending condition, NULL means end of the array
	songNames[numOfSounds] = NULL;
	return songNames;
}

void updateSongToSD() {
  80740c:	dcc00b15 	stw	r19,44(sp)
  807410:	dfc00d15 	stw	ra,52(sp)
  807414:	dd000c15 	stw	r20,48(sp)
  807418:	dc800a15 	stw	r18,40(sp)
  80741c:	dc400915 	stw	r17,36(sp)
  807420:	dc000815 	stw	r16,32(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  807424:	08324500 	call	832450 <alt_up_sd_card_fopen>
  807428:	14ffffcc 	andi	r19,r2,65535
  80742c:	9ce0001c 	xori	r19,r19,32768
  807430:	9ce00004 	addi	r19,r19,-32768
	if (fileHandler < 0){
  807434:	98002616 	blt	r19,zero,8074d0 <updateSongToSD+0xd4>
	int len, filepointer;
	if ((filepointer = openFileFromSD(SONGFILE)) < 0){
		printf("Loading list error!\n");
		return;
	}
	for(i = 1; i <= db.num_of_songs; i++) {
  807438:	05002134 	movhi	r20,132
  80743c:	a50a6204 	addi	r20,r20,10632
  807440:	a080a717 	ldw	r2,668(r20)
  807444:	0080140e 	bge	zero,r2,807498 <updateSongToSD+0x9c>
  807448:	04400044 	movi	r17,1
  80744c:	a4803704 	addi	r18,r20,220
		len = sprintf(temp, "%d %s %d", i, db.songs[i]->song_name, getLength(db.songs[i]));
  807450:	94000017 	ldw	r16,0(r18)
	int len, filepointer;
	if ((filepointer = openFileFromSD(SONGFILE)) < 0){
		printf("Loading list error!\n");
		return;
	}
	for(i = 1; i <= db.num_of_songs; i++) {
  807454:	94800104 	addi	r18,r18,4
		len = sprintf(temp, "%d %s %d", i, db.songs[i]->song_name, getLength(db.songs[i]));
  807458:	8009883a 	mov	r4,r16
  80745c:	080d9800 	call	80d980 <getLength>
  807460:	880d883a 	mov	r6,r17
  807464:	81c00104 	addi	r7,r16,4
  807468:	d9000104 	addi	r4,sp,4
  80746c:	014020f4 	movhi	r5,131
  807470:	294d8b04 	addi	r5,r5,13868
  807474:	d8800015 	stw	r2,0(sp)
  807478:	0822b640 	call	822b64 <sprintf>
		writeLine(filepointer, temp, len);
  80747c:	100d883a 	mov	r6,r2
  807480:	9809883a 	mov	r4,r19
  807484:	d9400104 	addi	r5,sp,4
  807488:	08062ec0 	call	8062ec <writeLine>
	int len, filepointer;
	if ((filepointer = openFileFromSD(SONGFILE)) < 0){
		printf("Loading list error!\n");
		return;
	}
	for(i = 1; i <= db.num_of_songs; i++) {
  80748c:	a080a717 	ldw	r2,668(r20)
  807490:	8c400044 	addi	r17,r17,1
  807494:	147fee0e 	bge	r2,r17,807450 <updateSongToSD+0x54>
		len = sprintf(temp, "%d %s %d", i, db.songs[i]->song_name, getLength(db.songs[i]));
		writeLine(filepointer, temp, len);
	}
	if (!alt_up_sd_card_fclose(filepointer)){
  807498:	9809883a 	mov	r4,r19
  80749c:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  8074a0:	1000031e 	bne	r2,zero,8074b0 <updateSongToSD+0xb4>
		printf("File is not closed properly.\n");
  8074a4:	010020f4 	movhi	r4,131
  8074a8:	210d5f04 	addi	r4,r4,13692
  8074ac:	08221800 	call	822180 <puts>
	}
}
  8074b0:	dfc00d17 	ldw	ra,52(sp)
  8074b4:	dd000c17 	ldw	r20,48(sp)
  8074b8:	dcc00b17 	ldw	r19,44(sp)
  8074bc:	dc800a17 	ldw	r18,40(sp)
  8074c0:	dc400917 	ldw	r17,36(sp)
  8074c4:	dc000817 	ldw	r16,32(sp)
  8074c8:	dec00e04 	addi	sp,sp,56
  8074cc:	f800283a 	ret
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8074d0:	010020f4 	movhi	r4,131
  8074d4:	210d4804 	addi	r4,r4,13600
  8074d8:	01400044 	movi	r5,1
  8074dc:	08324500 	call	832450 <alt_up_sd_card_fopen>
  8074e0:	14ffffcc 	andi	r19,r2,65535
  8074e4:	9ce0001c 	xori	r19,r19,32768
  8074e8:	9ce00004 	addi	r19,r19,-32768
  8074ec:	983fd20e 	bge	r19,zero,807438 <updateSongToSD+0x3c>
			alt_up_sd_card_fclose(fileHandler);
  8074f0:	9809883a 	mov	r4,r19
  8074f4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
void updateSongToSD() {
	int i;
	char temp[25];
	int len, filepointer;
	if ((filepointer = openFileFromSD(SONGFILE)) < 0){
		printf("Loading list error!\n");
  8074f8:	010020f4 	movhi	r4,131
  8074fc:	210d8e04 	addi	r4,r4,13880
  807500:	08221800 	call	822180 <puts>
  807504:	003fea06 	br	8074b0 <updateSongToSD+0xb4>

00807508 <loadListsFromSD>:
}

/*
 * Reads LISTS.TXT and load all playlists into the DB.
 */
int loadListsFromSD() {
  807508:	deffde04 	addi	sp,sp,-136
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  80750c:	010020f4 	movhi	r4,131
  807510:	210d7c04 	addi	r4,r4,13808
  807514:	000b883a 	mov	r5,zero
}

/*
 * Reads LISTS.TXT and load all playlists into the DB.
 */
int loadListsFromSD() {
  807518:	dcc01e15 	stw	r19,120(sp)
  80751c:	dfc02115 	stw	ra,132(sp)
  807520:	dd402015 	stw	r21,128(sp)
  807524:	dd001f15 	stw	r20,124(sp)
  807528:	dc801d15 	stw	r18,116(sp)
  80752c:	dc401c15 	stw	r17,112(sp)
  807530:	dc001b15 	stw	r16,108(sp)
 * Helper function to open a file from SDCard
 * */
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
  807534:	08324500 	call	832450 <alt_up_sd_card_fopen>
  807538:	14ffffcc 	andi	r19,r2,65535
  80753c:	9ce0001c 	xori	r19,r19,32768
  807540:	9ce00004 	addi	r19,r19,-32768
	if (fileHandler < 0){
  807544:	98005616 	blt	r19,zero,8076a0 <loadListsFromSD+0x198>
int loadListsFromSD() {

	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTFILE)) < 0){
		printf("Loading list error!\n");
		return -1;
  807548:	0029883a 	mov	r20,zero
  80754c:	dc800104 	addi	r18,sp,4
  807550:	dd400204 	addi	r21,sp,8
	}
	char* line = NULL;
	int i = 0;
	int stats = 0;
	for(i = 0; i < 50; i++) {
		line = (char*)malloc(sizeof(char)*501);
  807554:	01007d44 	movi	r4,501
  807558:	08216fc0 	call	8216fc <malloc>
		stats = readLine(fileHandler, line);
  80755c:	100b883a 	mov	r5,r2
  807560:	9809883a 	mov	r4,r19
	}
	char* line = NULL;
	int i = 0;
	int stats = 0;
	for(i = 0; i < 50; i++) {
		line = (char*)malloc(sizeof(char)*501);
  807564:	1021883a 	mov	r16,r2
		stats = readLine(fileHandler, line);
  807568:	08063e40 	call	8063e4 <readLine>
  80756c:	1007883a 	mov	r3,r2

		if(stats == -2) {
  807570:	00bfff84 	movi	r2,-2
  807574:	18803e26 	beq	r3,r2,807670 <loadListsFromSD+0x168>
			alt_up_sd_card_fclose(fileHandler);
			printf("Cannot read the list file, file closed.\n");
			free(line);
			line = NULL;
			return -1;
		} else if(stats == -1) {
  807578:	00bfffc4 	movi	r2,-1
  80757c:	18804526 	beq	r3,r2,807694 <loadListsFromSD+0x18c>
			free(line);
			line = NULL;
			break;
  807580:	000b883a 	mov	r5,zero
  807584:	01800804 	movi	r6,32
void createPlaylistFromTxt(char* line){
	int i = 0, j = 0;
	char id[4];
	char listName[100];
	char numOfSong[4];
	while((id[j++] = line[i++]) != ' ');
  807588:	8145883a 	add	r2,r16,r5
  80758c:	10c00007 	ldb	r3,0(r2)
  807590:	9149883a 	add	r4,r18,r5
  807594:	29400044 	addi	r5,r5,1
  807598:	20c00005 	stb	r3,0(r4)
  80759c:	19bffa1e 	bne	r3,r6,807588 <loadListsFromSD+0x80>
	id[j] = 0; j = 0;
  8075a0:	9145883a 	add	r2,r18,r5
  8075a4:	10000005 	stb	zero,0(r2)
  8075a8:	8149883a 	add	r4,r16,r5
  8075ac:	a80d883a 	mov	r6,r21
  8075b0:	01c00804 	movi	r7,32
	while((listName[j++] = line[i++]) != ' ');
  8075b4:	20800007 	ldb	r2,0(r4)
  8075b8:	29400044 	addi	r5,r5,1
  8075bc:	21000044 	addi	r4,r4,1
  8075c0:	30800005 	stb	r2,0(r6)
  8075c4:	31800044 	addi	r6,r6,1
  8075c8:	11fffa1e 	bne	r2,r7,8075b4 <loadListsFromSD+0xac>
	listName[j-1] = 0; j = 0;
  8075cc:	3547c83a 	sub	r3,r6,r21
  8075d0:	d88001c4 	addi	r2,sp,7
  8075d4:	10c5883a 	add	r2,r2,r3
  8075d8:	10000005 	stb	zero,0(r2)
	if(listName[0] == '0') return;
  8075dc:	d8c00207 	ldb	r3,8(sp)
  8075e0:	00800c04 	movi	r2,48
  8075e4:	18801026 	beq	r3,r2,807628 <loadListsFromSD+0x120>
  8075e8:	2c07883a 	add	r3,r5,r16
  8075ec:	d809883a 	mov	r4,sp
	while((numOfSong[j++] = line[i++]) != 0);
  8075f0:	18800003 	ldbu	r2,0(r3)
  8075f4:	18c00044 	addi	r3,r3,1
  8075f8:	20800005 	stb	r2,0(r4)
  8075fc:	21000044 	addi	r4,r4,1
  807600:	103ffb1e 	bne	r2,zero,8075f0 <loadListsFromSD+0xe8>
	createExisitedPlaylist(listName, atoi(numOfSong), atoi(id));
  807604:	d809883a 	mov	r4,sp
  807608:	08215640 	call	821564 <atoi>
  80760c:	9009883a 	mov	r4,r18
  807610:	1023883a 	mov	r17,r2
  807614:	08215640 	call	821564 <atoi>
  807618:	880b883a 	mov	r5,r17
  80761c:	a809883a 	mov	r4,r21
  807620:	100d883a 	mov	r6,r2
  807624:	0802db40 	call	802db4 <createExisitedPlaylist>
			free(line);
			line = NULL;
			break;
		} else {
			createPlaylistFromTxt(line);
			free(line);
  807628:	8009883a 	mov	r4,r16
  80762c:	08216e80 	call	8216e8 <free>
		return -1;
	}
	char* line = NULL;
	int i = 0;
	int stats = 0;
	for(i = 0; i < 50; i++) {
  807630:	a5000044 	addi	r20,r20,1
  807634:	00800c84 	movi	r2,50
  807638:	a0bfc61e 	bne	r20,r2,807554 <loadListsFromSD+0x4c>
			createPlaylistFromTxt(line);
			free(line);
			line = NULL;
		}
	}
	if (!alt_up_sd_card_fclose(fileHandler)){
  80763c:	9809883a 	mov	r4,r19
  807640:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  807644:	10002526 	beq	r2,zero,8076dc <loadListsFromSD+0x1d4>
  807648:	0005883a 	mov	r2,zero
		printf("File is not closed properly.\n");
		return -1;
	}
	return 0;
}
  80764c:	dfc02117 	ldw	ra,132(sp)
  807650:	dd402017 	ldw	r21,128(sp)
  807654:	dd001f17 	ldw	r20,124(sp)
  807658:	dcc01e17 	ldw	r19,120(sp)
  80765c:	dc801d17 	ldw	r18,116(sp)
  807660:	dc401c17 	ldw	r17,112(sp)
  807664:	dc001b17 	ldw	r16,108(sp)
  807668:	dec02204 	addi	sp,sp,136
  80766c:	f800283a 	ret
	for(i = 0; i < 50; i++) {
		line = (char*)malloc(sizeof(char)*501);
		stats = readLine(fileHandler, line);

		if(stats == -2) {
			alt_up_sd_card_fclose(fileHandler);
  807670:	9809883a 	mov	r4,r19
  807674:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
			printf("Cannot read the list file, file closed.\n");
  807678:	010020f4 	movhi	r4,131
  80767c:	210d9304 	addi	r4,r4,13900
  807680:	08221800 	call	822180 <puts>
			free(line);
  807684:	8009883a 	mov	r4,r16
  807688:	08216e80 	call	8216e8 <free>
  80768c:	00bfffc4 	movi	r2,-1
  807690:	003fee06 	br	80764c <loadListsFromSD+0x144>
			line = NULL;
			return -1;
		} else if(stats == -1) {
			free(line);
  807694:	8009883a 	mov	r4,r16
  807698:	08216e80 	call	8216e8 <free>
  80769c:	003fe706 	br	80763c <loadListsFromSD+0x134>
int openFileFromSD(char* file){
	int fileHandler;
	if (file == NULL) return -2;
	fileHandler = alt_up_sd_card_fopen(file, false);
	if (fileHandler < 0){
		if ((fileHandler = alt_up_sd_card_fopen(file, true)) < 0){
  8076a0:	010020f4 	movhi	r4,131
  8076a4:	210d7c04 	addi	r4,r4,13808
  8076a8:	01400044 	movi	r5,1
  8076ac:	08324500 	call	832450 <alt_up_sd_card_fopen>
  8076b0:	14ffffcc 	andi	r19,r2,65535
  8076b4:	9ce0001c 	xori	r19,r19,32768
  8076b8:	9ce00004 	addi	r19,r19,-32768
  8076bc:	983fa20e 	bge	r19,zero,807548 <loadListsFromSD+0x40>
			alt_up_sd_card_fclose(fileHandler);
  8076c0:	9809883a 	mov	r4,r19
  8076c4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
 */
int loadListsFromSD() {

	int fileHandler;
	if ((fileHandler = openFileFromSD(LISTFILE)) < 0){
		printf("Loading list error!\n");
  8076c8:	010020f4 	movhi	r4,131
  8076cc:	210d8e04 	addi	r4,r4,13880
  8076d0:	08221800 	call	822180 <puts>
  8076d4:	00bfffc4 	movi	r2,-1
  8076d8:	003fdc06 	br	80764c <loadListsFromSD+0x144>
			free(line);
			line = NULL;
		}
	}
	if (!alt_up_sd_card_fclose(fileHandler)){
		printf("File is not closed properly.\n");
  8076dc:	010020f4 	movhi	r4,131
  8076e0:	210d5f04 	addi	r4,r4,13692
  8076e4:	08221800 	call	822180 <puts>
  8076e8:	00bfffc4 	movi	r2,-1
  8076ec:	003fd706 	br	80764c <loadListsFromSD+0x144>

008076f0 <initDatabase>:
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Database.h"

void initDatabase() {
  8076f0:	defff904 	addi	sp,sp,-28
  8076f4:	dc400115 	stw	r17,4(sp)
  8076f8:	dc000015 	stw	r16,0(sp)
	db.curr_song_id = 1;
  8076fc:	04400044 	movi	r17,1
  807700:	04002134 	movhi	r16,132
  807704:	840a6204 	addi	r16,r16,10632
  807708:	84400015 	stw	r17,0(r16)
	db.curr_playlist_id = 0;
  80770c:	80003415 	stw	zero,208(r16)
	db.num_of_lists = 0;
  807710:	80003515 	stw	zero,212(r16)
	db.num_of_songs = 0;
  807714:	8000a715 	stw	zero,668(r16)
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Database.h"

void initDatabase() {
  807718:	dd400515 	stw	r21,20(sp)
  80771c:	dd000415 	stw	r20,16(sp)
  807720:	dcc00315 	stw	r19,12(sp)
  807724:	dc800215 	stw	r18,8(sp)
  807728:	dfc00615 	stw	ra,24(sp)
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
  80772c:	080b66c0 	call	80b66c <initQueue>
  807730:	01e8e614 	movui	r7,41880
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
	db.total_songs_playing = 0;
	db.used_memory = 0;
  807734:	01a91a14 	movui	r6,42088
	int i;
	int* temp;
	db.used_list_index[0] = 1; //index 0 should never get used
  807738:	0168e714 	movui	r5,41884
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isListRepeated = 0;
  80773c:	01291b14 	movui	r4,42092
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
  807740:	80c09b04 	addi	r3,r16,620
void initDatabase() {
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
  807744:	81cf883a 	add	r7,r16,r7
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
	db.total_songs_playing = 0;
	db.used_memory = 0;
  807748:	818d883a 	add	r6,r16,r6
	int i;
	int* temp;
	db.used_list_index[0] = 1; //index 0 should never get used
  80774c:	814b883a 	add	r5,r16,r5
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isListRepeated = 0;
  807750:	8109883a 	add	r4,r16,r4
  807754:	8027883a 	mov	r19,r16
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
  807758:	80009b15 	stw	zero,620(r16)
	db.total_songs_playing = 0;
  80775c:	8000a615 	stw	zero,664(r16)
	db.used_memory = 0;
	int i;
	int* temp;
	db.used_list_index[0] = 1; //index 0 should never get used
	db.index_list_order[0][0] = 0;
  807760:	8014c715 	stw	zero,21276(r16)
	db.index_list_song[0][0] = 0;
  807764:	8000a815 	stw	zero,672(r16)
	db.playlists[0] = NULL;
  807768:	80000115 	stw	zero,4(r16)
	db.songs[0] = NULL;
  80776c:	80003615 	stw	zero,216(r16)
void initDatabase() {
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
  807770:	38800015 	stw	r2,0(r7)
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
  807774:	18000a15 	stw	zero,40(r3)
	db.total_songs_playing = 0;
	db.used_memory = 0;
  807778:	30000015 	stw	zero,0(r6)
	int i;
	int* temp;
	db.used_list_index[0] = 1; //index 0 should never get used
  80777c:	2c400015 	stw	r17,0(r5)
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isListRepeated = 0;
  807780:	20000015 	stw	zero,0(r4)
	db.curr_song_id = 1;
	db.curr_playlist_id = 0;
	db.num_of_lists = 0;
	db.num_of_songs = 0;
	db.avail_list_index = initQueue();
	memset(db.curr_song_ids, 0, MAX_SONGS_MIX*sizeof(int));
  807784:	18000115 	stw	zero,4(r3)
  807788:	18000215 	stw	zero,8(r3)
  80778c:	18000315 	stw	zero,12(r3)
  807790:	18000415 	stw	zero,16(r3)
  807794:	18000515 	stw	zero,20(r3)
  807798:	18000615 	stw	zero,24(r3)
  80779c:	18000715 	stw	zero,28(r3)
  8077a0:	18000815 	stw	zero,32(r3)
  8077a4:	18000915 	stw	zero,36(r3)
  8077a8:	382b883a 	mov	r21,r7
	db.used_list_index[0] = 1; //index 0 should never get used
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isListRepeated = 0;
  8077ac:	04802174 	movhi	r18,133
  8077b0:	94b34a04 	addi	r18,r18,-13016
  8077b4:	84152c04 	addi	r16,r16,21680
  8077b8:	05000cc4 	movi	r20,51
	for(i = 1; i < MAX_LISTS; i++) {
		temp = (int*)malloc(sizeof(int));
  8077bc:	01000104 	movi	r4,4
  8077c0:	08216fc0 	call	8216fc <malloc>
		*temp = i;
		enqueue(db.avail_list_index, temp);
  8077c4:	a9000017 	ldw	r4,0(r21)
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isListRepeated = 0;
	for(i = 1; i < MAX_LISTS; i++) {
		temp = (int*)malloc(sizeof(int));
		*temp = i;
  8077c8:	14400015 	stw	r17,0(r2)
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isListRepeated = 0;
	for(i = 1; i < MAX_LISTS; i++) {
		temp = (int*)malloc(sizeof(int));
  8077cc:	100b883a 	mov	r5,r2
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isListRepeated = 0;
	for(i = 1; i < MAX_LISTS; i++) {
  8077d0:	8c400044 	addi	r17,r17,1
		temp = (int*)malloc(sizeof(int));
		*temp = i;
		enqueue(db.avail_list_index, temp);
  8077d4:	080b6940 	call	80b694 <enqueue>
		db.used_list_index[i] = 0;
  8077d8:	90000015 	stw	zero,0(r18)
		db.index_list_order[i][0] = 0;
  8077dc:	80000015 	stw	zero,0(r16)
		db.index_list_song[i][0] = 0;
  8077e0:	802be115 	stw	zero,-20604(r16)
		db.playlists[i] = NULL;
  8077e4:	98000215 	stw	zero,8(r19)
		db.songs[i] = NULL;
  8077e8:	98003715 	stw	zero,220(r19)
	db.index_list_order[0][0] = 0;
	db.index_list_song[0][0] = 0;
	db.playlists[0] = NULL;
	db.songs[0] = NULL;
	db.isListRepeated = 0;
	for(i = 1; i < MAX_LISTS; i++) {
  8077ec:	94800104 	addi	r18,r18,4
  8077f0:	9cc00104 	addi	r19,r19,4
  8077f4:	84006504 	addi	r16,r16,404
  8077f8:	8d3ff01e 	bne	r17,r20,8077bc <initDatabase+0xcc>
		db.index_list_order[i][0] = 0;
		db.index_list_song[i][0] = 0;
		db.playlists[i] = NULL;
		db.songs[i] = NULL;
	} temp = NULL;
	loadListsFromSD();
  8077fc:	08075080 	call	807508 <loadListsFromSD>
 * This also updates the SONGS.TXT if the text file misses
 * any song titles.
 * */
void loadSongsFromSD(){
	char** sdsongs = NULL;
	sdsongs = getSongsFromSD();
  807800:	08060640 	call	806064 <getSongsFromSD>
  807804:	1021883a 	mov	r16,r2
	//getAndUpdateSongsFromTxt(sdsongs);
	while(getAndUpdateSongsFromTxt(sdsongs) < 0);
  807808:	8009883a 	mov	r4,r16
  80780c:	0806d180 	call	806d18 <getAndUpdateSongsFromTxt>
  807810:	103ffd16 	blt	r2,zero,807808 <initDatabase+0x118>
		db.songs[i] = NULL;
	} temp = NULL;
	loadListsFromSD();
	loadSongsFromSD();
	preloadSongsToPlaylist();
}
  807814:	dfc00617 	ldw	ra,24(sp)
  807818:	dd400517 	ldw	r21,20(sp)
  80781c:	dd000417 	ldw	r20,16(sp)
  807820:	dcc00317 	ldw	r19,12(sp)
  807824:	dc800217 	ldw	r18,8(sp)
  807828:	dc400117 	ldw	r17,4(sp)
  80782c:	dc000017 	ldw	r16,0(sp)
  807830:	dec00704 	addi	sp,sp,28
		db.playlists[i] = NULL;
		db.songs[i] = NULL;
	} temp = NULL;
	loadListsFromSD();
	loadSongsFromSD();
	preloadSongsToPlaylist();
  807834:	08071181 	jmpi	807118 <preloadSongsToPlaylist>

00807838 <killSongPanel>:
	return sp;
}

void killSongPanel(struct Frame** frame) {
	if(frame == NULL || *frame == NULL) return;
}
  807838:	f800283a 	ret

0080783c <drawSongPanel>:
	}
}

void drawSongPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i <= this->button_size; i++){
  80783c:	20800317 	ldw	r2,12(r4)
	for (i = 0; i < this->button_size; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void drawSongPanel(struct Frame* this){
  807840:	defffc04 	addi	sp,sp,-16
  807844:	dc000015 	stw	r16,0(sp)
  807848:	dfc00315 	stw	ra,12(sp)
  80784c:	dc800215 	stw	r18,8(sp)
  807850:	dc400115 	stw	r17,4(sp)
  807854:	2021883a 	mov	r16,r4
	int i = 1;
	for (i = 1; i <= this->button_size; i++){
  807858:	00800b0e 	bge	zero,r2,807888 <drawSongPanel+0x4c>
  80785c:	04800044 	movi	r18,1
  807860:	04400104 	movi	r17,4
		this->buttons[i]->draw(this->buttons[i]);
  807864:	80800117 	ldw	r2,4(r16)
	}
}

void drawSongPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i <= this->button_size; i++){
  807868:	94800044 	addi	r18,r18,1
		this->buttons[i]->draw(this->buttons[i]);
  80786c:	1445883a 	add	r2,r2,r17
  807870:	11000017 	ldw	r4,0(r2)
	}
}

void drawSongPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i <= this->button_size; i++){
  807874:	8c400104 	addi	r17,r17,4
		this->buttons[i]->draw(this->buttons[i]);
  807878:	20c00e17 	ldw	r3,56(r4)
  80787c:	183ee83a 	callr	r3
	}
}

void drawSongPanel(struct Frame* this){
	int i = 1;
	for (i = 1; i <= this->button_size; i++){
  807880:	80800317 	ldw	r2,12(r16)
  807884:	14bff70e 	bge	r2,r18,807864 <drawSongPanel+0x28>
		this->buttons[i]->draw(this->buttons[i]);
	}
}
  807888:	dfc00317 	ldw	ra,12(sp)
  80788c:	dc800217 	ldw	r18,8(sp)
  807890:	dc400117 	ldw	r17,4(sp)
  807894:	dc000017 	ldw	r16,0(sp)
  807898:	dec00404 	addi	sp,sp,16
  80789c:	f800283a 	ret

008078a0 <drawPlaylistPanel>:

void drawPlaylistPanel(struct Frame* this){
  8078a0:	defffb04 	addi	sp,sp,-20
  8078a4:	00802134 	movhi	r2,132
  8078a8:	108a6204 	addi	r2,r2,10632
  8078ac:	dc800215 	stw	r18,8(sp)
  8078b0:	14803517 	ldw	r18,212(r2)
  8078b4:	00800384 	movi	r2,14
  8078b8:	dcc00315 	stw	r19,12(sp)
  8078bc:	dfc00415 	stw	ra,16(sp)
  8078c0:	dc400115 	stw	r17,4(sp)
  8078c4:	dc000015 	stw	r16,0(sp)
  8078c8:	2027883a 	mov	r19,r4
  8078cc:	1480120e 	bge	r2,r18,807918 <drawPlaylistPanel+0x78>
  8078d0:	1025883a 	mov	r18,r2
	int total_lists = 0;
	if(db.num_of_lists > 14)
		total_lists = 14;
	else
		total_lists = db.num_of_lists;
	for (i = 1; i <= total_lists; i++){
  8078d4:	04400044 	movi	r17,1
  8078d8:	04000104 	movi	r16,4
		this->buttons[i]->draw(this->buttons[i]);
  8078dc:	98800117 	ldw	r2,4(r19)
	int total_lists = 0;
	if(db.num_of_lists > 14)
		total_lists = 14;
	else
		total_lists = db.num_of_lists;
	for (i = 1; i <= total_lists; i++){
  8078e0:	8c400044 	addi	r17,r17,1
		this->buttons[i]->draw(this->buttons[i]);
  8078e4:	8085883a 	add	r2,r16,r2
  8078e8:	11000017 	ldw	r4,0(r2)
	int total_lists = 0;
	if(db.num_of_lists > 14)
		total_lists = 14;
	else
		total_lists = db.num_of_lists;
	for (i = 1; i <= total_lists; i++){
  8078ec:	84000104 	addi	r16,r16,4
		this->buttons[i]->draw(this->buttons[i]);
  8078f0:	20800e17 	ldw	r2,56(r4)
  8078f4:	103ee83a 	callr	r2
	int total_lists = 0;
	if(db.num_of_lists > 14)
		total_lists = 14;
	else
		total_lists = db.num_of_lists;
	for (i = 1; i <= total_lists; i++){
  8078f8:	947ff80e 	bge	r18,r17,8078dc <drawPlaylistPanel+0x3c>
		this->buttons[i]->draw(this->buttons[i]);
	}
}
  8078fc:	dfc00417 	ldw	ra,16(sp)
  807900:	dcc00317 	ldw	r19,12(sp)
  807904:	dc800217 	ldw	r18,8(sp)
  807908:	dc400117 	ldw	r17,4(sp)
  80790c:	dc000017 	ldw	r16,0(sp)
  807910:	dec00504 	addi	sp,sp,20
  807914:	f800283a 	ret
	int total_lists = 0;
	if(db.num_of_lists > 14)
		total_lists = 14;
	else
		total_lists = db.num_of_lists;
	for (i = 1; i <= total_lists; i++){
  807918:	04bfee16 	blt	zero,r18,8078d4 <drawPlaylistPanel+0x34>
  80791c:	003ff706 	br	8078fc <drawPlaylistPanel+0x5c>

00807920 <clearSongPanel>:
		}
	}
	//alt_up_char_buffer_string(char_buffer, "List is clicked", 61, 4);
}

void clearSongPanel(){
  807920:	defffc04 	addi	sp,sp,-16
  807924:	dc000015 	stw	r16,0(sp)
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  807928:	04002134 	movhi	r16,132
  80792c:	840a3704 	addi	r16,r16,10460
  807930:	81000017 	ldw	r4,0(r16)
		}
	}
	//alt_up_char_buffer_string(char_buffer, "List is clicked", 61, 4);
}

void clearSongPanel(){
  807934:	dd000215 	stw	r20,8(sp)
  807938:	dc800115 	stw	r18,4(sp)
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  80793c:	05000f44 	movi	r20,61
  807940:	048020f4 	movhi	r18,131
  807944:	948d9d04 	addi	r18,r18,13940
  807948:	900b883a 	mov	r5,r18
  80794c:	a00d883a 	mov	r6,r20
  807950:	01c00104 	movi	r7,4
		}
	}
	//alt_up_char_buffer_string(char_buffer, "List is clicked", 61, 4);
}

void clearSongPanel(){
  807954:	dfc00315 	stw	ra,12(sp)
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  807958:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  80795c:	81000017 	ldw	r4,0(r16)
  807960:	900b883a 	mov	r5,r18
  807964:	a00d883a 	mov	r6,r20
  807968:	01c001c4 	movi	r7,7
  80796c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807970:	81000017 	ldw	r4,0(r16)
  807974:	900b883a 	mov	r5,r18
  807978:	a00d883a 	mov	r6,r20
  80797c:	01c00284 	movi	r7,10
  807980:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807984:	81000017 	ldw	r4,0(r16)
  807988:	900b883a 	mov	r5,r18
  80798c:	a00d883a 	mov	r6,r20
  807990:	01c00344 	movi	r7,13
  807994:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807998:	81000017 	ldw	r4,0(r16)
  80799c:	900b883a 	mov	r5,r18
  8079a0:	a00d883a 	mov	r6,r20
  8079a4:	01c00404 	movi	r7,16
  8079a8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8079ac:	81000017 	ldw	r4,0(r16)
  8079b0:	900b883a 	mov	r5,r18
  8079b4:	a00d883a 	mov	r6,r20
  8079b8:	01c004c4 	movi	r7,19
  8079bc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8079c0:	81000017 	ldw	r4,0(r16)
  8079c4:	900b883a 	mov	r5,r18
  8079c8:	a00d883a 	mov	r6,r20
  8079cc:	01c00584 	movi	r7,22
  8079d0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8079d4:	81000017 	ldw	r4,0(r16)
  8079d8:	900b883a 	mov	r5,r18
  8079dc:	a00d883a 	mov	r6,r20
  8079e0:	01c00644 	movi	r7,25
  8079e4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8079e8:	81000017 	ldw	r4,0(r16)
  8079ec:	900b883a 	mov	r5,r18
  8079f0:	a00d883a 	mov	r6,r20
  8079f4:	01c00704 	movi	r7,28
  8079f8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8079fc:	81000017 	ldw	r4,0(r16)
  807a00:	900b883a 	mov	r5,r18
  807a04:	a00d883a 	mov	r6,r20
  807a08:	01c007c4 	movi	r7,31
  807a0c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807a10:	81000017 	ldw	r4,0(r16)
  807a14:	900b883a 	mov	r5,r18
  807a18:	a00d883a 	mov	r6,r20
  807a1c:	01c00884 	movi	r7,34
  807a20:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807a24:	81000017 	ldw	r4,0(r16)
  807a28:	900b883a 	mov	r5,r18
  807a2c:	a00d883a 	mov	r6,r20
  807a30:	01c00944 	movi	r7,37
  807a34:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807a38:	81000017 	ldw	r4,0(r16)
  807a3c:	900b883a 	mov	r5,r18
  807a40:	a00d883a 	mov	r6,r20
  807a44:	01c00a04 	movi	r7,40
  807a48:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807a4c:	81000017 	ldw	r4,0(r16)
  807a50:	900b883a 	mov	r5,r18
  807a54:	a00d883a 	mov	r6,r20
  807a58:	01c00ac4 	movi	r7,43
  807a5c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807a60:	81000017 	ldw	r4,0(r16)
  807a64:	900b883a 	mov	r5,r18
  807a68:	a00d883a 	mov	r6,r20
  807a6c:	01c00b84 	movi	r7,46
		y += 3;
	}
}
  807a70:	dfc00317 	ldw	ra,12(sp)
  807a74:	dd000217 	ldw	r20,8(sp)
  807a78:	dc800117 	ldw	r18,4(sp)
  807a7c:	dc000017 	ldw	r16,0(sp)
  807a80:	dec00404 	addi	sp,sp,16

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  807a84:	082c8c41 	jmpi	82c8c4 <alt_up_char_buffer_string>

00807a88 <drawVolumeFrame>:
	}
	drawHorizontalLine(241, 194, 78, 0xFFFFFF);
}

void drawVolumeFrame(struct Frame* this){
	this->buttons[0]->draw(this->buttons[0]);
  807a88:	20800117 	ldw	r2,4(r4)
	drawHorizontalLine(295, y, 24, 0xFFFFFF);
	}
	drawHorizontalLine(241, 194, 78, 0xFFFFFF);
}

void drawVolumeFrame(struct Frame* this){
  807a8c:	defffc04 	addi	sp,sp,-16
  807a90:	dc400015 	stw	r17,0(sp)
  807a94:	2023883a 	mov	r17,r4
	this->buttons[0]->draw(this->buttons[0]);
  807a98:	11000017 	ldw	r4,0(r2)
	drawHorizontalLine(295, y, 24, 0xFFFFFF);
	}
	drawHorizontalLine(241, 194, 78, 0xFFFFFF);
}

void drawVolumeFrame(struct Frame* this){
  807a9c:	dfc00315 	stw	ra,12(sp)
  807aa0:	dd000215 	stw	r20,8(sp)
	this->buttons[0]->draw(this->buttons[0]);
  807aa4:	20c00e17 	ldw	r3,56(r4)
	drawHorizontalLine(295, y, 24, 0xFFFFFF);
	}
	drawHorizontalLine(241, 194, 78, 0xFFFFFF);
}

void drawVolumeFrame(struct Frame* this){
  807aa8:	dc800115 	stw	r18,4(sp)
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
	alt_up_char_buffer_string(char_buffer, "     ", 7, 54);
  807aac:	04802134 	movhi	r18,132
  807ab0:	948a3704 	addi	r18,r18,10460
	}
	drawHorizontalLine(241, 194, 78, 0xFFFFFF);
}

void drawVolumeFrame(struct Frame* this){
	this->buttons[0]->draw(this->buttons[0]);
  807ab4:	183ee83a 	callr	r3
	this->buttons[1]->draw(this->buttons[1]);
  807ab8:	88800117 	ldw	r2,4(r17)
	alt_up_char_buffer_string(char_buffer, "     ", 7, 54);
  807abc:	05000d84 	movi	r20,54
	drawHorizontalLine(241, 194, 78, 0xFFFFFF);
}

void drawVolumeFrame(struct Frame* this){
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
  807ac0:	11000117 	ldw	r4,4(r2)
  807ac4:	20c00e17 	ldw	r3,56(r4)
  807ac8:	183ee83a 	callr	r3
	alt_up_char_buffer_string(char_buffer, "     ", 7, 54);
  807acc:	91000017 	ldw	r4,0(r18)
  807ad0:	a00f883a 	mov	r7,r20
  807ad4:	014020f4 	movhi	r5,131
  807ad8:	294da104 	addi	r5,r5,13956
  807adc:	018001c4 	movi	r6,7
  807ae0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "100", 8, 54); //draw 100 initially, it will get updated
  807ae4:	91000017 	ldw	r4,0(r18)
  807ae8:	a00f883a 	mov	r7,r20
  807aec:	014020f4 	movhi	r5,131
  807af0:	294da304 	addi	r5,r5,13964
  807af4:	01800204 	movi	r6,8
}
  807af8:	dfc00317 	ldw	ra,12(sp)
  807afc:	dd000217 	ldw	r20,8(sp)
  807b00:	dc800117 	ldw	r18,4(sp)
  807b04:	dc400017 	ldw	r17,0(sp)
  807b08:	dec00404 	addi	sp,sp,16

void drawVolumeFrame(struct Frame* this){
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
	alt_up_char_buffer_string(char_buffer, "     ", 7, 54);
	alt_up_char_buffer_string(char_buffer, "100", 8, 54); //draw 100 initially, it will get updated
  807b0c:	082c8c41 	jmpi	82c8c4 <alt_up_char_buffer_string>

00807b10 <drawScrollFrame>:
	int i;
	/*int y = 184;
	for (i = 0; i < 11; i++, y++){
	drawHorizontalLine(241, y, 78, 0xFFFFFF);
	}*/
	this->buttons[0]->draw(this->buttons[0]);
  807b10:	20800117 	ldw	r2,4(r4)
	for (i = 1; i <= total_lists; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void drawScrollFrame(struct Frame* this){
  807b14:	defffc04 	addi	sp,sp,-16
  807b18:	dc400115 	stw	r17,4(sp)
  807b1c:	2023883a 	mov	r17,r4
	int i;
	/*int y = 184;
	for (i = 0; i < 11; i++, y++){
	drawHorizontalLine(241, y, 78, 0xFFFFFF);
	}*/
	this->buttons[0]->draw(this->buttons[0]);
  807b20:	11000017 	ldw	r4,0(r2)
	for (i = 1; i <= total_lists; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void drawScrollFrame(struct Frame* this){
  807b24:	dc800215 	stw	r18,8(sp)
  807b28:	dc000015 	stw	r16,0(sp)
	int i;
	/*int y = 184;
	for (i = 0; i < 11; i++, y++){
	drawHorizontalLine(241, y, 78, 0xFFFFFF);
	}*/
	this->buttons[0]->draw(this->buttons[0]);
  807b2c:	20c00e17 	ldw	r3,56(r4)
	for (i = 1; i <= total_lists; i++){
		this->buttons[i]->draw(this->buttons[i]);
	}
}

void drawScrollFrame(struct Frame* this){
  807b30:	dfc00315 	stw	ra,12(sp)
	/*int y = 184;
	for (i = 0; i < 11; i++, y++){
	drawHorizontalLine(241, y, 78, 0xFFFFFF);
	}*/
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
  807b34:	04002e04 	movi	r16,184
	int i;
	/*int y = 184;
	for (i = 0; i < 11; i++, y++){
	drawHorizontalLine(241, y, 78, 0xFFFFFF);
	}*/
	this->buttons[0]->draw(this->buttons[0]);
  807b38:	183ee83a 	callr	r3
	this->buttons[1]->draw(this->buttons[1]);
  807b3c:	88800117 	ldw	r2,4(r17)
  807b40:	04803084 	movi	r18,194
  807b44:	11000117 	ldw	r4,4(r2)
  807b48:	20c00e17 	ldw	r3,56(r4)
  807b4c:	183ee83a 	callr	r3
	int y = 184;
	for (i = 0; i < 10; i++, y++){
	drawHorizontalLine(241, y, 24, 0xFFFFFF);
  807b50:	800b883a 	mov	r5,r16
  807b54:	01003c44 	movi	r4,241
  807b58:	01800604 	movi	r6,24
  807b5c:	01c04034 	movhi	r7,256
  807b60:	39ffffc4 	addi	r7,r7,-1
  807b64:	0809e040 	call	809e04 <drawHorizontalLine>
	drawHorizontalLine(275, y, 10, 0xFFFFFF);
  807b68:	800b883a 	mov	r5,r16
  807b6c:	010044c4 	movi	r4,275
  807b70:	01800284 	movi	r6,10
  807b74:	01c04034 	movhi	r7,256
  807b78:	39ffffc4 	addi	r7,r7,-1
  807b7c:	0809e040 	call	809e04 <drawHorizontalLine>
	drawHorizontalLine(295, y, 24, 0xFFFFFF);
  807b80:	800b883a 	mov	r5,r16
  807b84:	010049c4 	movi	r4,295
	drawHorizontalLine(241, y, 78, 0xFFFFFF);
	}*/
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
	int y = 184;
	for (i = 0; i < 10; i++, y++){
  807b88:	84000044 	addi	r16,r16,1
	drawHorizontalLine(241, y, 24, 0xFFFFFF);
	drawHorizontalLine(275, y, 10, 0xFFFFFF);
	drawHorizontalLine(295, y, 24, 0xFFFFFF);
  807b8c:	01800604 	movi	r6,24
  807b90:	01c04034 	movhi	r7,256
  807b94:	39ffffc4 	addi	r7,r7,-1
  807b98:	0809e040 	call	809e04 <drawHorizontalLine>
	drawHorizontalLine(241, y, 78, 0xFFFFFF);
	}*/
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
	int y = 184;
	for (i = 0; i < 10; i++, y++){
  807b9c:	84bfec1e 	bne	r16,r18,807b50 <drawScrollFrame+0x40>
	drawHorizontalLine(241, y, 24, 0xFFFFFF);
	drawHorizontalLine(275, y, 10, 0xFFFFFF);
	drawHorizontalLine(295, y, 24, 0xFFFFFF);
	}
	drawHorizontalLine(241, 194, 78, 0xFFFFFF);
  807ba0:	01003c44 	movi	r4,241
  807ba4:	01403084 	movi	r5,194
  807ba8:	01801384 	movi	r6,78
  807bac:	01c04034 	movhi	r7,256
  807bb0:	39ffffc4 	addi	r7,r7,-1
}
  807bb4:	dfc00317 	ldw	ra,12(sp)
  807bb8:	dc800217 	ldw	r18,8(sp)
  807bbc:	dc400117 	ldw	r17,4(sp)
  807bc0:	dc000017 	ldw	r16,0(sp)
  807bc4:	dec00404 	addi	sp,sp,16
	for (i = 0; i < 10; i++, y++){
	drawHorizontalLine(241, y, 24, 0xFFFFFF);
	drawHorizontalLine(275, y, 10, 0xFFFFFF);
	drawHorizontalLine(295, y, 24, 0xFFFFFF);
	}
	drawHorizontalLine(241, 194, 78, 0xFFFFFF);
  807bc8:	0809e041 	jmpi	809e04 <drawHorizontalLine>

00807bcc <drawActionFrame>:
	}
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
}

void drawActionFrame(struct Frame* this){
  807bcc:	defffc04 	addi	sp,sp,-16
  807bd0:	dc800215 	stw	r18,8(sp)
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
  807bd4:	014030c4 	movi	r5,195
	}
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
}

void drawActionFrame(struct Frame* this){
  807bd8:	2025883a 	mov	r18,r4
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
  807bdc:	01804fc4 	movi	r6,319
  807be0:	0009883a 	mov	r4,zero
  807be4:	01c04034 	movhi	r7,256
  807be8:	39ffffc4 	addi	r7,r7,-1
	}
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
}

void drawActionFrame(struct Frame* this){
  807bec:	dfc00315 	stw	ra,12(sp)
  807bf0:	dc400115 	stw	r17,4(sp)
  807bf4:	dc000015 	stw	r16,0(sp)
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
  807bf8:	0809e040 	call	809e04 <drawHorizontalLine>
	draw_notransparent(0, 196, this->bg_image);
  807bfc:	91800617 	ldw	r6,24(r18)
  807c00:	0009883a 	mov	r4,zero
  807c04:	01403104 	movi	r5,196
  807c08:	08097380 	call	809738 <draw_notransparent>
	int i = 0;
	for (i = 0; i < this->button_size; i++){
  807c0c:	90800317 	ldw	r2,12(r18)
  807c10:	00800b0e 	bge	zero,r2,807c40 <drawActionFrame+0x74>
  807c14:	0023883a 	mov	r17,zero
  807c18:	0021883a 	mov	r16,zero
		this->buttons[i]->draw(this->buttons[i]);
  807c1c:	90800117 	ldw	r2,4(r18)

void drawActionFrame(struct Frame* this){
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
	draw_notransparent(0, 196, this->bg_image);
	int i = 0;
	for (i = 0; i < this->button_size; i++){
  807c20:	8c400044 	addi	r17,r17,1
		this->buttons[i]->draw(this->buttons[i]);
  807c24:	8085883a 	add	r2,r16,r2
  807c28:	11000017 	ldw	r4,0(r2)

void drawActionFrame(struct Frame* this){
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
	draw_notransparent(0, 196, this->bg_image);
	int i = 0;
	for (i = 0; i < this->button_size; i++){
  807c2c:	84000104 	addi	r16,r16,4
		this->buttons[i]->draw(this->buttons[i]);
  807c30:	20c00e17 	ldw	r3,56(r4)
  807c34:	183ee83a 	callr	r3

void drawActionFrame(struct Frame* this){
	drawHorizontalLine(0, 195, SCREEN_WIDTH-1, 0xFFFFFF);
	draw_notransparent(0, 196, this->bg_image);
	int i = 0;
	for (i = 0; i < this->button_size; i++){
  807c38:	90800317 	ldw	r2,12(r18)
  807c3c:	88bff716 	blt	r17,r2,807c1c <drawActionFrame+0x50>
		this->buttons[i]->draw(this->buttons[i]);
	}
}
  807c40:	dfc00317 	ldw	ra,12(sp)
  807c44:	dc800217 	ldw	r18,8(sp)
  807c48:	dc400117 	ldw	r17,4(sp)
  807c4c:	dc000017 	ldw	r16,0(sp)
  807c50:	dec00404 	addi	sp,sp,16
  807c54:	f800283a 	ret

00807c58 <drawMenuFrame>:
	//struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, this->elements[3]->bg_image);
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
}

void drawMenuFrame(struct Frame* this){
  807c58:	defffa04 	addi	sp,sp,-24
  807c5c:	dcc00415 	stw	r19,16(sp)
	int x1, y1, x2, y2;
	drawHorizontalLine(0, 0, SCREEN_WIDTH-1, 0xFFFFFF);
  807c60:	000b883a 	mov	r5,zero
  807c64:	01804fc4 	movi	r6,319
  807c68:	01c04034 	movhi	r7,256
  807c6c:	39ffffc4 	addi	r7,r7,-1
	//struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, this->elements[3]->bg_image);
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
}

void drawMenuFrame(struct Frame* this){
  807c70:	2027883a 	mov	r19,r4
	int x1, y1, x2, y2;
	drawHorizontalLine(0, 0, SCREEN_WIDTH-1, 0xFFFFFF);
  807c74:	0009883a 	mov	r4,zero
	//struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, this->elements[3]->bg_image);
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
}

void drawMenuFrame(struct Frame* this){
  807c78:	dfc00515 	stw	ra,20(sp)
  807c7c:	dc800315 	stw	r18,12(sp)
  807c80:	dc400215 	stw	r17,8(sp)
  807c84:	dc000115 	stw	r16,4(sp)
	int x1, y1, x2, y2;
	drawHorizontalLine(0, 0, SCREEN_WIDTH-1, 0xFFFFFF);
  807c88:	0809e040 	call	809e04 <drawHorizontalLine>
	drawHorizontalLine(0, 11, SCREEN_WIDTH-1, 0xFFFFFF);
  807c8c:	0009883a 	mov	r4,zero
  807c90:	014002c4 	movi	r5,11
  807c94:	01804fc4 	movi	r6,319
  807c98:	01c04034 	movhi	r7,256
  807c9c:	39ffffc4 	addi	r7,r7,-1
  807ca0:	0809e040 	call	809e04 <drawHorizontalLine>
  807ca4:	048039f4 	movhi	r18,231
  807ca8:	94847384 	addi	r18,r18,4558
  807cac:	0009883a 	mov	r4,zero
  807cb0:	04405004 	movi	r17,320
	x1 = 0; y1 = 1;
	x2 = x1 + 10;
	y2 = 11;
	while (x2 <= 320){
		drawBox(x1, y1, x2, y2, 0xe711ce);
  807cb4:	24000284 	addi	r16,r4,10
  807cb8:	01400044 	movi	r5,1
  807cbc:	800d883a 	mov	r6,r16
  807cc0:	01c002c4 	movi	r7,11
  807cc4:	dc800015 	stw	r18,0(sp)
  807cc8:	080941c0 	call	80941c <drawBox>
		x1+=10;
  807ccc:	8009883a 	mov	r4,r16
	drawHorizontalLine(0, 0, SCREEN_WIDTH-1, 0xFFFFFF);
	drawHorizontalLine(0, 11, SCREEN_WIDTH-1, 0xFFFFFF);
	x1 = 0; y1 = 1;
	x2 = x1 + 10;
	y2 = 11;
	while (x2 <= 320){
  807cd0:	847ff81e 	bne	r16,r17,807cb4 <drawMenuFrame+0x5c>
		drawBox(x1, y1, x2, y2, 0xe711ce);
		x1+=10;
		x2+=10;
	}
	this->buttons[0]->draw(this->buttons[0]);
  807cd4:	98800117 	ldw	r2,4(r19)
  807cd8:	11000017 	ldw	r4,0(r2)
  807cdc:	20c00e17 	ldw	r3,56(r4)
  807ce0:	183ee83a 	callr	r3
	this->buttons[1]->draw(this->buttons[1]);
  807ce4:	98800117 	ldw	r2,4(r19)
  807ce8:	11000117 	ldw	r4,4(r2)
  807cec:	20c00e17 	ldw	r3,56(r4)
}
  807cf0:	dfc00517 	ldw	ra,20(sp)
  807cf4:	dcc00417 	ldw	r19,16(sp)
  807cf8:	dc800317 	ldw	r18,12(sp)
  807cfc:	dc400217 	ldw	r17,8(sp)
  807d00:	dc000117 	ldw	r16,4(sp)
  807d04:	dec00604 	addi	sp,sp,24
		drawBox(x1, y1, x2, y2, 0xe711ce);
		x1+=10;
		x2+=10;
	}
	this->buttons[0]->draw(this->buttons[0]);
	this->buttons[1]->draw(this->buttons[1]);
  807d08:	1800683a 	jmp	r3

00807d0c <drawMainFrame>:
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size; i++){
  807d0c:	20800217 	ldw	r2,8(r4)
}
/**
 * Draws all elements of mainFrame. All backgrounds are
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
  807d10:	defffd04 	addi	sp,sp,-12
  807d14:	dc400115 	stw	r17,4(sp)
  807d18:	dfc00215 	stw	ra,8(sp)
  807d1c:	dc000015 	stw	r16,0(sp)
  807d20:	2023883a 	mov	r17,r4
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size; i++){
  807d24:	00800f0e 	bge	zero,r2,807d64 <drawMainFrame+0x58>
  807d28:	0021883a 	mov	r16,zero
		if (i == 3) {continue;}
		this->elements[i]->drawFrame(this->elements[i]);
  807d2c:	88c00017 	ldw	r3,0(r17)
  807d30:	8405883a 	add	r2,r16,r16
  807d34:	1085883a 	add	r2,r2,r2
  807d38:	10c5883a 	add	r2,r2,r3
  807d3c:	11000017 	ldw	r4,0(r2)
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size; i++){
  807d40:	84000044 	addi	r16,r16,1
		if (i == 3) {continue;}
		this->elements[i]->drawFrame(this->elements[i]);
  807d44:	20c00817 	ldw	r3,32(r4)
  807d48:	183ee83a 	callr	r3
  807d4c:	88c00217 	ldw	r3,8(r17)
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size; i++){
  807d50:	80c0040e 	bge	r16,r3,807d64 <drawMainFrame+0x58>
		if (i == 3) {continue;}
  807d54:	008000c4 	movi	r2,3
  807d58:	80bff41e 	bne	r16,r2,807d2c <drawMainFrame+0x20>
 * loaded and drawn in this function.
 */
void drawMainFrame(struct Frame* this){
	int i = 0;
	// do not draw the last element (playlist)
	for (i = 0; i < this->element_size; i++){
  807d5c:	84000044 	addi	r16,r16,1
  807d60:	80fffc16 	blt	r16,r3,807d54 <drawMainFrame+0x48>
		this->elements[i]->drawFrame(this->elements[i]);
	}
	// TODO: put all backgrounds in here.
	// make a struct Image array in mainFrame
	//struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, this->elements[3]->bg_image);
  807d64:	88c00017 	ldw	r3,0(r17)
  807d68:	01003c44 	movi	r4,241
  807d6c:	01400344 	movi	r5,13
  807d70:	18800317 	ldw	r2,12(r3)
  807d74:	11800617 	ldw	r6,24(r2)
  807d78:	08097380 	call	809738 <draw_notransparent>
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
  807d7c:	01c04034 	movhi	r7,256
  807d80:	39ffffc4 	addi	r7,r7,-1
  807d84:	01003c04 	movi	r4,240
  807d88:	01400304 	movi	r5,12
  807d8c:	01802dc4 	movi	r6,183
}
  807d90:	dfc00217 	ldw	ra,8(sp)
  807d94:	dc400117 	ldw	r17,4(sp)
  807d98:	dc000017 	ldw	r16,0(sp)
  807d9c:	dec00304 	addi	sp,sp,12
	}
	// TODO: put all backgrounds in here.
	// make a struct Image array in mainFrame
	//struct Image* bg = loadSDImage("AND.BMP");
	draw_notransparent(241, 13, this->elements[3]->bg_image);
	drawVerticalLine(240, 12, 183, 0xFFFFFF);
  807da0:	0809d3c1 	jmpi	809d3c <drawVerticalLine>

00807da4 <killSongInListPanel>:
	psp->drawFrame = drawSongInListPanel;
	while((psp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	return psp;
}

void killSongInListPanel(struct Frame** this) {
  807da4:	defffc04 	addi	sp,sp,-16
  807da8:	dc800215 	stw	r18,8(sp)
  807dac:	dfc00315 	stw	ra,12(sp)
  807db0:	dc400115 	stw	r17,4(sp)
  807db4:	dc000015 	stw	r16,0(sp)
  807db8:	2025883a 	mov	r18,r4
	if(this == NULL || *this == NULL) return;
  807dbc:	20001a26 	beq	r4,zero,807e28 <killSongInListPanel+0x84>
  807dc0:	20c00017 	ldw	r3,0(r4)
  807dc4:	18001826 	beq	r3,zero,807e28 <killSongInListPanel+0x84>
	int i;
	for(i = 1; i <= (*this)->button_size; i++) {
  807dc8:	18800317 	ldw	r2,12(r3)
  807dcc:	00800a0e 	bge	zero,r2,807df8 <killSongInListPanel+0x54>
  807dd0:	04400044 	movi	r17,1
  807dd4:	04000104 	movi	r16,4
		killSongButton(&((*this)->buttons[i]));
  807dd8:	19000117 	ldw	r4,4(r3)
}

void killSongInListPanel(struct Frame** this) {
	if(this == NULL || *this == NULL) return;
	int i;
	for(i = 1; i <= (*this)->button_size; i++) {
  807ddc:	8c400044 	addi	r17,r17,1
		killSongButton(&((*this)->buttons[i]));
  807de0:	8109883a 	add	r4,r16,r4
  807de4:	080071c0 	call	80071c <killSongButton>
}

void killSongInListPanel(struct Frame** this) {
	if(this == NULL || *this == NULL) return;
	int i;
	for(i = 1; i <= (*this)->button_size; i++) {
  807de8:	90c00017 	ldw	r3,0(r18)
  807dec:	84000104 	addi	r16,r16,4
  807df0:	18800317 	ldw	r2,12(r3)
  807df4:	147ff80e 	bge	r2,r17,807dd8 <killSongInListPanel+0x34>
		killSongButton(&((*this)->buttons[i]));
	} killImage((*this)->bg_image);
  807df8:	19000617 	ldw	r4,24(r3)
  807dfc:	0809bf80 	call	809bf8 <killImage>
	(*this)->mainFrame = NULL;
  807e00:	90800017 	ldw	r2,0(r18)
  807e04:	10000715 	stw	zero,28(r2)
	(*this)->drawFrame = NULL;
  807e08:	90c00017 	ldw	r3,0(r18)
	free((*this)->buttons);
  807e0c:	19000117 	ldw	r4,4(r3)
	int i;
	for(i = 1; i <= (*this)->button_size; i++) {
		killSongButton(&((*this)->buttons[i]));
	} killImage((*this)->bg_image);
	(*this)->mainFrame = NULL;
	(*this)->drawFrame = NULL;
  807e10:	18000815 	stw	zero,32(r3)
	free((*this)->buttons);
  807e14:	08216e80 	call	8216e8 <free>
	(*this)->buttons = NULL;
  807e18:	91000017 	ldw	r4,0(r18)
  807e1c:	20000115 	stw	zero,4(r4)
	free((*this));
  807e20:	08216e80 	call	8216e8 <free>
	(*this) = NULL;
  807e24:	90000015 	stw	zero,0(r18)
}
  807e28:	dfc00317 	ldw	ra,12(sp)
  807e2c:	dc800217 	ldw	r18,8(sp)
  807e30:	dc400117 	ldw	r17,4(sp)
  807e34:	dc000017 	ldw	r16,0(sp)
  807e38:	dec00404 	addi	sp,sp,16
  807e3c:	f800283a 	ret

00807e40 <initFrame>:
#include "Frame.h"

struct Frame* initFrame(){
  807e40:	deffff04 	addi	sp,sp,-4
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  807e44:	01000904 	movi	r4,36
#include "Frame.h"

struct Frame* initFrame(){
  807e48:	dfc00015 	stw	ra,0(sp)
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  807e4c:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
	f->currentPlaylist = 0;
	f->elements = NULL;
  807e50:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
  807e54:	10000215 	stw	zero,8(r2)
	f->currentPlaylist = 0;
  807e58:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
	return f;
}
  807e5c:	dfc00017 	ldw	ra,0(sp)
  807e60:	dec00104 	addi	sp,sp,4
  807e64:	f800283a 	ret

00807e68 <drawSongInListPanel>:
	alt_up_char_buffer_string(char_buffer, "     ", 7, 54);
	alt_up_char_buffer_string(char_buffer, "100", 8, 54); //draw 100 initially, it will get updated
}

void drawSongInListPanel(struct Frame* songInListPanelFrame){
	draw_notransparent(241, 13, songInListPanelFrame->bg_image);
  807e68:	21800617 	ldw	r6,24(r4)
	this->buttons[1]->draw(this->buttons[1]);
	alt_up_char_buffer_string(char_buffer, "     ", 7, 54);
	alt_up_char_buffer_string(char_buffer, "100", 8, 54); //draw 100 initially, it will get updated
}

void drawSongInListPanel(struct Frame* songInListPanelFrame){
  807e6c:	defffc04 	addi	sp,sp,-16
  807e70:	dc800215 	stw	r18,8(sp)
  807e74:	dc000015 	stw	r16,0(sp)
  807e78:	2025883a 	mov	r18,r4

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  807e7c:	04002134 	movhi	r16,132
  807e80:	840a3704 	addi	r16,r16,10460
	alt_up_char_buffer_string(char_buffer, "     ", 7, 54);
	alt_up_char_buffer_string(char_buffer, "100", 8, 54); //draw 100 initially, it will get updated
}

void drawSongInListPanel(struct Frame* songInListPanelFrame){
	draw_notransparent(241, 13, songInListPanelFrame->bg_image);
  807e84:	01003c44 	movi	r4,241
  807e88:	01400344 	movi	r5,13
	this->buttons[1]->draw(this->buttons[1]);
	alt_up_char_buffer_string(char_buffer, "     ", 7, 54);
	alt_up_char_buffer_string(char_buffer, "100", 8, 54); //draw 100 initially, it will get updated
}

void drawSongInListPanel(struct Frame* songInListPanelFrame){
  807e8c:	dfc00315 	stw	ra,12(sp)
  807e90:	dc400115 	stw	r17,4(sp)
	draw_notransparent(241, 13, songInListPanelFrame->bg_image);
  807e94:	08097380 	call	809738 <draw_notransparent>

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  807e98:	81000017 	ldw	r4,0(r16)
  807e9c:	014020f4 	movhi	r5,131
  807ea0:	294d9d04 	addi	r5,r5,13940
  807ea4:	01800f44 	movi	r6,61
  807ea8:	01c00104 	movi	r7,4
  807eac:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807eb0:	81000017 	ldw	r4,0(r16)
  807eb4:	014020f4 	movhi	r5,131
  807eb8:	294d9d04 	addi	r5,r5,13940
  807ebc:	01800f44 	movi	r6,61
  807ec0:	01c001c4 	movi	r7,7
  807ec4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807ec8:	81000017 	ldw	r4,0(r16)
  807ecc:	014020f4 	movhi	r5,131
  807ed0:	294d9d04 	addi	r5,r5,13940
  807ed4:	01800f44 	movi	r6,61
  807ed8:	01c00284 	movi	r7,10
  807edc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807ee0:	81000017 	ldw	r4,0(r16)
  807ee4:	014020f4 	movhi	r5,131
  807ee8:	294d9d04 	addi	r5,r5,13940
  807eec:	01800f44 	movi	r6,61
  807ef0:	01c00344 	movi	r7,13
  807ef4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807ef8:	81000017 	ldw	r4,0(r16)
  807efc:	014020f4 	movhi	r5,131
  807f00:	294d9d04 	addi	r5,r5,13940
  807f04:	01800f44 	movi	r6,61
  807f08:	01c00404 	movi	r7,16
  807f0c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807f10:	81000017 	ldw	r4,0(r16)
  807f14:	014020f4 	movhi	r5,131
  807f18:	294d9d04 	addi	r5,r5,13940
  807f1c:	01800f44 	movi	r6,61
  807f20:	01c004c4 	movi	r7,19
  807f24:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807f28:	81000017 	ldw	r4,0(r16)
  807f2c:	014020f4 	movhi	r5,131
  807f30:	294d9d04 	addi	r5,r5,13940
  807f34:	01800f44 	movi	r6,61
  807f38:	01c00584 	movi	r7,22
  807f3c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807f40:	81000017 	ldw	r4,0(r16)
  807f44:	014020f4 	movhi	r5,131
  807f48:	294d9d04 	addi	r5,r5,13940
  807f4c:	01800f44 	movi	r6,61
  807f50:	01c00644 	movi	r7,25
  807f54:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807f58:	81000017 	ldw	r4,0(r16)
  807f5c:	014020f4 	movhi	r5,131
  807f60:	294d9d04 	addi	r5,r5,13940
  807f64:	01800f44 	movi	r6,61
  807f68:	01c00704 	movi	r7,28
  807f6c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807f70:	81000017 	ldw	r4,0(r16)
  807f74:	014020f4 	movhi	r5,131
  807f78:	294d9d04 	addi	r5,r5,13940
  807f7c:	01800f44 	movi	r6,61
  807f80:	01c007c4 	movi	r7,31
  807f84:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807f88:	81000017 	ldw	r4,0(r16)
  807f8c:	014020f4 	movhi	r5,131
  807f90:	294d9d04 	addi	r5,r5,13940
  807f94:	01800f44 	movi	r6,61
  807f98:	01c00884 	movi	r7,34
  807f9c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807fa0:	81000017 	ldw	r4,0(r16)
  807fa4:	014020f4 	movhi	r5,131
  807fa8:	294d9d04 	addi	r5,r5,13940
  807fac:	01800f44 	movi	r6,61
  807fb0:	01c00944 	movi	r7,37
  807fb4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807fb8:	81000017 	ldw	r4,0(r16)
  807fbc:	014020f4 	movhi	r5,131
  807fc0:	294d9d04 	addi	r5,r5,13940
  807fc4:	01800f44 	movi	r6,61
  807fc8:	01c00a04 	movi	r7,40
  807fcc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807fd0:	81000017 	ldw	r4,0(r16)
  807fd4:	014020f4 	movhi	r5,131
  807fd8:	294d9d04 	addi	r5,r5,13940
  807fdc:	01800f44 	movi	r6,61
  807fe0:	01c00ac4 	movi	r7,43
  807fe4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  807fe8:	81000017 	ldw	r4,0(r16)
  807fec:	014020f4 	movhi	r5,131
  807ff0:	294d9d04 	addi	r5,r5,13940
  807ff4:	01800f44 	movi	r6,61
  807ff8:	01c00b84 	movi	r7,46
  807ffc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
void drawSongInListPanel(struct Frame* songInListPanelFrame){
	draw_notransparent(241, 13, songInListPanelFrame->bg_image);
	clearSongPanel();
	//mouse->frame->currentPanel = 2;
	int i = 0;
	if (songInListPanelFrame->button_size > 0){
  808000:	90c00317 	ldw	r3,12(r18)
  808004:	00c00b0e 	bge	zero,r3,808034 <drawSongInListPanel+0x1cc>
  808008:	04400044 	movi	r17,1
  80800c:	04000104 	movi	r16,4
		for (i = 1; i <= songInListPanelFrame->button_size; i++){
			songInListPanelFrame->buttons[i]->draw(songInListPanelFrame->buttons[i]);
  808010:	90800117 	ldw	r2,4(r18)
	draw_notransparent(241, 13, songInListPanelFrame->bg_image);
	clearSongPanel();
	//mouse->frame->currentPanel = 2;
	int i = 0;
	if (songInListPanelFrame->button_size > 0){
		for (i = 1; i <= songInListPanelFrame->button_size; i++){
  808014:	8c400044 	addi	r17,r17,1
			songInListPanelFrame->buttons[i]->draw(songInListPanelFrame->buttons[i]);
  808018:	1405883a 	add	r2,r2,r16
  80801c:	11000017 	ldw	r4,0(r2)
	draw_notransparent(241, 13, songInListPanelFrame->bg_image);
	clearSongPanel();
	//mouse->frame->currentPanel = 2;
	int i = 0;
	if (songInListPanelFrame->button_size > 0){
		for (i = 1; i <= songInListPanelFrame->button_size; i++){
  808020:	84000104 	addi	r16,r16,4
			songInListPanelFrame->buttons[i]->draw(songInListPanelFrame->buttons[i]);
  808024:	20c00e17 	ldw	r3,56(r4)
  808028:	183ee83a 	callr	r3
	draw_notransparent(241, 13, songInListPanelFrame->bg_image);
	clearSongPanel();
	//mouse->frame->currentPanel = 2;
	int i = 0;
	if (songInListPanelFrame->button_size > 0){
		for (i = 1; i <= songInListPanelFrame->button_size; i++){
  80802c:	90800317 	ldw	r2,12(r18)
  808030:	147ff70e 	bge	r2,r17,808010 <drawSongInListPanel+0x1a8>
			songInListPanelFrame->buttons[i]->draw(songInListPanelFrame->buttons[i]);
		}
	}
	//alt_up_char_buffer_string(char_buffer, "List is clicked", 61, 4);
}
  808034:	dfc00317 	ldw	ra,12(sp)
  808038:	dc800217 	ldw	r18,8(sp)
  80803c:	dc400117 	ldw	r17,4(sp)
  808040:	dc000017 	ldw	r16,0(sp)
  808044:	dec00404 	addi	sp,sp,16
  808048:	f800283a 	ret

0080804c <drawAllLists>:
		y_pos = y_pos + 3;
	}
	mouse->frame->currentPanel = 0;
}

void drawAllLists(){
  80804c:	defff604 	addi	sp,sp,-40
  808050:	df000815 	stw	fp,32(sp)

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  808054:	07002134 	movhi	fp,132
  808058:	e70a3704 	addi	fp,fp,10460
  80805c:	e1000017 	ldw	r4,0(fp)
  808060:	014020f4 	movhi	r5,131
  808064:	294d9d04 	addi	r5,r5,13940
  808068:	01800f44 	movi	r6,61
  80806c:	01c00104 	movi	r7,4
		y_pos = y_pos + 3;
	}
	mouse->frame->currentPanel = 0;
}

void drawAllLists(){
  808070:	dfc00915 	stw	ra,36(sp)
  808074:	dcc00315 	stw	r19,12(sp)
  808078:	ddc00715 	stw	r23,28(sp)
  80807c:	dd800615 	stw	r22,24(sp)
  808080:	dd400515 	stw	r21,20(sp)
  808084:	dd000415 	stw	r20,16(sp)
  808088:	dc800215 	stw	r18,8(sp)
  80808c:	dc400115 	stw	r17,4(sp)
  808090:	dc000015 	stw	r16,0(sp)

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  808094:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808098:	e1000017 	ldw	r4,0(fp)
  80809c:	014020f4 	movhi	r5,131
  8080a0:	294d9d04 	addi	r5,r5,13940
  8080a4:	01800f44 	movi	r6,61
  8080a8:	01c001c4 	movi	r7,7
  8080ac:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8080b0:	e1000017 	ldw	r4,0(fp)
  8080b4:	014020f4 	movhi	r5,131
  8080b8:	294d9d04 	addi	r5,r5,13940
  8080bc:	01800f44 	movi	r6,61
  8080c0:	01c00284 	movi	r7,10
  8080c4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8080c8:	e1000017 	ldw	r4,0(fp)
  8080cc:	014020f4 	movhi	r5,131
  8080d0:	294d9d04 	addi	r5,r5,13940
  8080d4:	01800f44 	movi	r6,61
  8080d8:	01c00344 	movi	r7,13
  8080dc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8080e0:	e1000017 	ldw	r4,0(fp)
  8080e4:	014020f4 	movhi	r5,131
  8080e8:	294d9d04 	addi	r5,r5,13940
  8080ec:	01800f44 	movi	r6,61
  8080f0:	01c00404 	movi	r7,16
  8080f4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8080f8:	e1000017 	ldw	r4,0(fp)
  8080fc:	014020f4 	movhi	r5,131
  808100:	294d9d04 	addi	r5,r5,13940
  808104:	01800f44 	movi	r6,61
  808108:	01c004c4 	movi	r7,19
  80810c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808110:	e1000017 	ldw	r4,0(fp)
  808114:	014020f4 	movhi	r5,131
  808118:	294d9d04 	addi	r5,r5,13940
  80811c:	01800f44 	movi	r6,61
  808120:	01c00584 	movi	r7,22
  808124:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808128:	e1000017 	ldw	r4,0(fp)
  80812c:	014020f4 	movhi	r5,131
  808130:	294d9d04 	addi	r5,r5,13940
  808134:	01800f44 	movi	r6,61
  808138:	01c00644 	movi	r7,25
  80813c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808140:	e1000017 	ldw	r4,0(fp)
  808144:	014020f4 	movhi	r5,131
  808148:	294d9d04 	addi	r5,r5,13940
  80814c:	01800f44 	movi	r6,61
  808150:	01c00704 	movi	r7,28
  808154:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808158:	e1000017 	ldw	r4,0(fp)
  80815c:	014020f4 	movhi	r5,131
  808160:	294d9d04 	addi	r5,r5,13940
  808164:	01800f44 	movi	r6,61
  808168:	01c007c4 	movi	r7,31
  80816c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808170:	e1000017 	ldw	r4,0(fp)
  808174:	014020f4 	movhi	r5,131
  808178:	294d9d04 	addi	r5,r5,13940
  80817c:	01800f44 	movi	r6,61
  808180:	01c00884 	movi	r7,34
  808184:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808188:	e1000017 	ldw	r4,0(fp)
  80818c:	014020f4 	movhi	r5,131
  808190:	294d9d04 	addi	r5,r5,13940
  808194:	01800f44 	movi	r6,61
  808198:	01c00944 	movi	r7,37
  80819c:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8081a0:	e1000017 	ldw	r4,0(fp)
  8081a4:	014020f4 	movhi	r5,131
  8081a8:	294d9d04 	addi	r5,r5,13940
  8081ac:	01800f44 	movi	r6,61
  8081b0:	01c00a04 	movi	r7,40
  8081b4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8081b8:	e1000017 	ldw	r4,0(fp)
  8081bc:	014020f4 	movhi	r5,131
  8081c0:	294d9d04 	addi	r5,r5,13940
  8081c4:	01800f44 	movi	r6,61
  8081c8:	01c00ac4 	movi	r7,43
  8081cc:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8081d0:	e1000017 	ldw	r4,0(fp)
  8081d4:	014020f4 	movhi	r5,131
  8081d8:	294d9d04 	addi	r5,r5,13940
  8081dc:	01800f44 	movi	r6,61
  8081e0:	01c00b84 	movi	r7,46
  8081e4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	mouse->frame->currentPanel = 0;
}

void drawAllLists(){
	clearSongPanel();
	draw_notransparent(241, 13, mouse->frame->elements[3]->bg_image);
  8081e8:	00802134 	movhi	r2,132
  8081ec:	108a3a04 	addi	r2,r2,10472
  8081f0:	11800017 	ldw	r6,0(r2)
  8081f4:	01003c44 	movi	r4,241
  8081f8:	01400344 	movi	r5,13
  8081fc:	30800317 	ldw	r2,12(r6)
  808200:	10c00017 	ldw	r3,0(r2)
  808204:	19c00317 	ldw	r7,12(r3)
  808208:	39800617 	ldw	r6,24(r7)
  80820c:	08097380 	call	809738 <draw_notransparent>
	int i = 0, j = 0;
	int y_pos = 4;
	int totalList = db.num_of_lists;
  808210:	00802134 	movhi	r2,132
  808214:	108a6204 	addi	r2,r2,10632
  808218:	14c03517 	ldw	r19,212(r2)
  80821c:	00800384 	movi	r2,14
  808220:	14c02c0e 	bge	r2,r19,8082d4 <drawAllLists+0x288>
  808224:	1027883a 	mov	r19,r2
	// just show from ID 1 to 14
	if (db.num_of_lists > 14){
		totalList = 14;
	}
	for (i = 1; i < MAX_LISTS; i++){
		if(j >= totalList) break;
  808228:	04802134 	movhi	r18,132
  80822c:	948a6204 	addi	r18,r18,10632
  808230:	002b883a 	mov	r21,zero
  808234:	05000104 	movi	r20,4
  808238:	04402174 	movhi	r17,133
  80823c:	8c734a04 	addi	r17,r17,-13016
  808240:	05c02174 	movhi	r23,133
  808244:	bdf37b04 	addi	r23,r23,-12820
  808248:	05800044 	movi	r22,1
  80824c:	00000406 	br	808260 <drawAllLists+0x214>
  808250:	94800104 	addi	r18,r18,4
	// up and down is not implemented yet
	// just show from ID 1 to 14
	if (db.num_of_lists > 14){
		totalList = 14;
	}
	for (i = 1; i < MAX_LISTS; i++){
  808254:	8dc00d26 	beq	r17,r23,80828c <drawAllLists+0x240>
		if(j >= totalList) break;
  808258:	8c400104 	addi	r17,r17,4
  80825c:	acc00b0e 	bge	r21,r19,80828c <drawAllLists+0x240>
		if(db.used_list_index[i] == 1) {
  808260:	8c000017 	ldw	r16,0(r17)
			alt_up_char_buffer_string(char_buffer, db.playlists[i]->list_name, 61, y_pos);
  808264:	a00f883a 	mov	r7,r20
  808268:	01800f44 	movi	r6,61
	if (db.num_of_lists > 14){
		totalList = 14;
	}
	for (i = 1; i < MAX_LISTS; i++){
		if(j >= totalList) break;
		if(db.used_list_index[i] == 1) {
  80826c:	85bff81e 	bne	r16,r22,808250 <drawAllLists+0x204>
			alt_up_char_buffer_string(char_buffer, db.playlists[i]->list_name, 61, y_pos);
  808270:	91400217 	ldw	r5,8(r18)
  808274:	e1000017 	ldw	r4,0(fp)
			y_pos = y_pos + 3;
  808278:	a50000c4 	addi	r20,r20,3
			j++;
  80827c:	ac2b883a 	add	r21,r21,r16
		totalList = 14;
	}
	for (i = 1; i < MAX_LISTS; i++){
		if(j >= totalList) break;
		if(db.used_list_index[i] == 1) {
			alt_up_char_buffer_string(char_buffer, db.playlists[i]->list_name, 61, y_pos);
  808280:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	// just show from ID 1 to 14
	if (db.num_of_lists > 14){
		totalList = 14;
	}
	for (i = 1; i < MAX_LISTS; i++){
		if(j >= totalList) break;
  808284:	94800104 	addi	r18,r18,4
	// up and down is not implemented yet
	// just show from ID 1 to 14
	if (db.num_of_lists > 14){
		totalList = 14;
	}
	for (i = 1; i < MAX_LISTS; i++){
  808288:	8dfff31e 	bne	r17,r23,808258 <drawAllLists+0x20c>
			alt_up_char_buffer_string(char_buffer, db.playlists[i]->list_name, 61, y_pos);
			y_pos = y_pos + 3;
			j++;
		}
	}
	mouse->frame->currentPanel = 1;
  80828c:	00c02134 	movhi	r3,132
  808290:	18ca3a04 	addi	r3,r3,10472
  808294:	18800017 	ldw	r2,0(r3)
  808298:	00c00044 	movi	r3,1
  80829c:	11000317 	ldw	r4,12(r2)
  8082a0:	20c00415 	stw	r3,16(r4)
}
  8082a4:	dfc00917 	ldw	ra,36(sp)
  8082a8:	df000817 	ldw	fp,32(sp)
  8082ac:	ddc00717 	ldw	r23,28(sp)
  8082b0:	dd800617 	ldw	r22,24(sp)
  8082b4:	dd400517 	ldw	r21,20(sp)
  8082b8:	dd000417 	ldw	r20,16(sp)
  8082bc:	dcc00317 	ldw	r19,12(sp)
  8082c0:	dc800217 	ldw	r18,8(sp)
  8082c4:	dc400117 	ldw	r17,4(sp)
  8082c8:	dc000017 	ldw	r16,0(sp)
  8082cc:	dec00a04 	addi	sp,sp,40
  8082d0:	f800283a 	ret
	// just show from ID 1 to 14
	if (db.num_of_lists > 14){
		totalList = 14;
	}
	for (i = 1; i < MAX_LISTS; i++){
		if(j >= totalList) break;
  8082d4:	04ffd416 	blt	zero,r19,808228 <drawAllLists+0x1dc>
  8082d8:	003fec06 	br	80828c <drawAllLists+0x240>

008082dc <drawAllSongs>:
}

/**
 * Has to be called after mouse gets initialized
 */
void drawAllSongs(){
  8082dc:	defff904 	addi	sp,sp,-28
  8082e0:	dd000415 	stw	r20,16(sp)

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  8082e4:	05002134 	movhi	r20,132
  8082e8:	a50a3704 	addi	r20,r20,10460
  8082ec:	a1000017 	ldw	r4,0(r20)
  8082f0:	014020f4 	movhi	r5,131
  8082f4:	294d9d04 	addi	r5,r5,13940
  8082f8:	01800f44 	movi	r6,61
  8082fc:	01c00104 	movi	r7,4
}

/**
 * Has to be called after mouse gets initialized
 */
void drawAllSongs(){
  808300:	dfc00615 	stw	ra,24(sp)
  808304:	dd400515 	stw	r21,20(sp)
  808308:	dcc00315 	stw	r19,12(sp)
  80830c:	dc800215 	stw	r18,8(sp)
  808310:	dc400115 	stw	r17,4(sp)
  808314:	dc000015 	stw	r16,0(sp)

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  808318:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  80831c:	a1000017 	ldw	r4,0(r20)
  808320:	014020f4 	movhi	r5,131
  808324:	294d9d04 	addi	r5,r5,13940
  808328:	01800f44 	movi	r6,61
  80832c:	01c001c4 	movi	r7,7
  808330:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808334:	a1000017 	ldw	r4,0(r20)
  808338:	014020f4 	movhi	r5,131
  80833c:	294d9d04 	addi	r5,r5,13940
  808340:	01800f44 	movi	r6,61
  808344:	01c00284 	movi	r7,10
  808348:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  80834c:	a1000017 	ldw	r4,0(r20)
  808350:	014020f4 	movhi	r5,131
  808354:	294d9d04 	addi	r5,r5,13940
  808358:	01800f44 	movi	r6,61
  80835c:	01c00344 	movi	r7,13
  808360:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808364:	a1000017 	ldw	r4,0(r20)
  808368:	014020f4 	movhi	r5,131
  80836c:	294d9d04 	addi	r5,r5,13940
  808370:	01800f44 	movi	r6,61
  808374:	01c00404 	movi	r7,16
  808378:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  80837c:	a1000017 	ldw	r4,0(r20)
  808380:	014020f4 	movhi	r5,131
  808384:	294d9d04 	addi	r5,r5,13940
  808388:	01800f44 	movi	r6,61
  80838c:	01c004c4 	movi	r7,19
  808390:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808394:	a1000017 	ldw	r4,0(r20)
  808398:	014020f4 	movhi	r5,131
  80839c:	294d9d04 	addi	r5,r5,13940
  8083a0:	01800f44 	movi	r6,61
  8083a4:	01c00584 	movi	r7,22
  8083a8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8083ac:	a1000017 	ldw	r4,0(r20)
  8083b0:	014020f4 	movhi	r5,131
  8083b4:	294d9d04 	addi	r5,r5,13940
  8083b8:	01800f44 	movi	r6,61
  8083bc:	01c00644 	movi	r7,25
  8083c0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8083c4:	a1000017 	ldw	r4,0(r20)
  8083c8:	014020f4 	movhi	r5,131
  8083cc:	294d9d04 	addi	r5,r5,13940
  8083d0:	01800f44 	movi	r6,61
  8083d4:	01c00704 	movi	r7,28
  8083d8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8083dc:	a1000017 	ldw	r4,0(r20)
  8083e0:	014020f4 	movhi	r5,131
  8083e4:	294d9d04 	addi	r5,r5,13940
  8083e8:	01800f44 	movi	r6,61
  8083ec:	01c007c4 	movi	r7,31
  8083f0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  8083f4:	a1000017 	ldw	r4,0(r20)
  8083f8:	014020f4 	movhi	r5,131
  8083fc:	294d9d04 	addi	r5,r5,13940
  808400:	01800f44 	movi	r6,61
  808404:	01c00884 	movi	r7,34
  808408:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  80840c:	a1000017 	ldw	r4,0(r20)
  808410:	014020f4 	movhi	r5,131
  808414:	294d9d04 	addi	r5,r5,13940
  808418:	01800f44 	movi	r6,61
  80841c:	01c00944 	movi	r7,37
  808420:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808424:	a1000017 	ldw	r4,0(r20)
  808428:	014020f4 	movhi	r5,131
  80842c:	294d9d04 	addi	r5,r5,13940
  808430:	01800f44 	movi	r6,61
  808434:	01c00a04 	movi	r7,40
  808438:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  80843c:	a1000017 	ldw	r4,0(r20)
  808440:	014020f4 	movhi	r5,131
  808444:	294d9d04 	addi	r5,r5,13940
  808448:	01800f44 	movi	r6,61
  80844c:	01c00ac4 	movi	r7,43
  808450:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808454:	a1000017 	ldw	r4,0(r20)
  808458:	014020f4 	movhi	r5,131
  80845c:	294d9d04 	addi	r5,r5,13940
  808460:	01800f44 	movi	r6,61
  808464:	01c00b84 	movi	r7,46
 * Has to be called after mouse gets initialized
 */
void drawAllSongs(){

	clearSongPanel();
	draw_notransparent(241, 13, mouse->frame->elements[2]->bg_image);
  808468:	05402134 	movhi	r21,132
  80846c:	ad4a3a04 	addi	r21,r21,10472

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  808470:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
 * Has to be called after mouse gets initialized
 */
void drawAllSongs(){

	clearSongPanel();
	draw_notransparent(241, 13, mouse->frame->elements[2]->bg_image);
  808474:	a9800017 	ldw	r6,0(r21)
  808478:	01003c44 	movi	r4,241
  80847c:	01400344 	movi	r5,13
  808480:	30800317 	ldw	r2,12(r6)
  808484:	10c00017 	ldw	r3,0(r2)
  808488:	19c00217 	ldw	r7,8(r3)
  80848c:	39800617 	ldw	r6,24(r7)
  808490:	08097380 	call	809738 <draw_notransparent>
	int i = 0;
	int y_pos = 4;
	int totalSong = db.num_of_songs;
  808494:	00802134 	movhi	r2,132
  808498:	108a6204 	addi	r2,r2,10632
  80849c:	14c0a717 	ldw	r19,668(r2)
  8084a0:	00800384 	movi	r2,14
  8084a4:	14c01b0e 	bge	r2,r19,808514 <drawAllSongs+0x238>
  8084a8:	1027883a 	mov	r19,r2
	// up and down is not implemented yet
	// just show from ID 1 to 14
	if (db.num_of_songs > 14) {
		totalSong = 14;
	}
	for (i = 1; i <= totalSong; i++){
  8084ac:	04800044 	movi	r18,1
  8084b0:	04400104 	movi	r17,4
  8084b4:	04002134 	movhi	r16,132
  8084b8:	840a9904 	addi	r16,r16,10852
		alt_up_char_buffer_string(char_buffer, db.songs[i]->song_name, 61, y_pos);
  8084bc:	81400017 	ldw	r5,0(r16)
  8084c0:	a1000017 	ldw	r4,0(r20)
  8084c4:	880f883a 	mov	r7,r17
  8084c8:	29400104 	addi	r5,r5,4
  8084cc:	01800f44 	movi	r6,61
	// up and down is not implemented yet
	// just show from ID 1 to 14
	if (db.num_of_songs > 14) {
		totalSong = 14;
	}
	for (i = 1; i <= totalSong; i++){
  8084d0:	94800044 	addi	r18,r18,1
		alt_up_char_buffer_string(char_buffer, db.songs[i]->song_name, 61, y_pos);
  8084d4:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
		y_pos = y_pos + 3;
  8084d8:	8c4000c4 	addi	r17,r17,3
	// up and down is not implemented yet
	// just show from ID 1 to 14
	if (db.num_of_songs > 14) {
		totalSong = 14;
	}
	for (i = 1; i <= totalSong; i++){
  8084dc:	84000104 	addi	r16,r16,4
  8084e0:	9cbff60e 	bge	r19,r18,8084bc <drawAllSongs+0x1e0>
		alt_up_char_buffer_string(char_buffer, db.songs[i]->song_name, 61, y_pos);
		y_pos = y_pos + 3;
	}
	mouse->frame->currentPanel = 0;
  8084e4:	a8800017 	ldw	r2,0(r21)
  8084e8:	10c00317 	ldw	r3,12(r2)
  8084ec:	18000415 	stw	zero,16(r3)
}
  8084f0:	dfc00617 	ldw	ra,24(sp)
  8084f4:	dd400517 	ldw	r21,20(sp)
  8084f8:	dd000417 	ldw	r20,16(sp)
  8084fc:	dcc00317 	ldw	r19,12(sp)
  808500:	dc800217 	ldw	r18,8(sp)
  808504:	dc400117 	ldw	r17,4(sp)
  808508:	dc000017 	ldw	r16,0(sp)
  80850c:	dec00704 	addi	sp,sp,28
  808510:	f800283a 	ret
	// up and down is not implemented yet
	// just show from ID 1 to 14
	if (db.num_of_songs > 14) {
		totalSong = 14;
	}
	for (i = 1; i <= totalSong; i++){
  808514:	04ffe516 	blt	zero,r19,8084ac <drawAllSongs+0x1d0>
  808518:	003ff206 	br	8084e4 <drawAllSongs+0x208>

0080851c <initSongInListPanel>:
	vf->drawFrame = drawVolumeFrame;
	vf->mainFrame = this;
	return vf;
}
//button starts from 1
struct Frame* initSongInListPanel(struct Frame* f, int list_id){
  80851c:	defff604 	addi	sp,sp,-40
  808520:	ddc00815 	stw	r23,32(sp)
  808524:	202f883a 	mov	r23,r4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808528:	01000904 	movi	r4,36
	vf->drawFrame = drawVolumeFrame;
	vf->mainFrame = this;
	return vf;
}
//button starts from 1
struct Frame* initSongInListPanel(struct Frame* f, int list_id){
  80852c:	dd800715 	stw	r22,28(sp)
  808530:	dc400215 	stw	r17,8(sp)
  808534:	dc000115 	stw	r16,4(sp)
  808538:	dfc00915 	stw	ra,36(sp)
  80853c:	2821883a 	mov	r16,r5
  808540:	dd400615 	stw	r21,24(sp)
  808544:	dd000515 	stw	r20,20(sp)
  808548:	dcc00415 	stw	r19,16(sp)
  80854c:	dc800315 	stw	r18,12(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808550:	08216fc0 	call	8216fc <malloc>
  808554:	1023883a 	mov	r17,r2
	return vf;
}
//button starts from 1
struct Frame* initSongInListPanel(struct Frame* f, int list_id){
	struct Frame* psp = initFrame();
	if (db.playlists[list_id] == NULL) {return NULL;}
  808558:	8405883a 	add	r2,r16,r16
  80855c:	1085883a 	add	r2,r2,r2
  808560:	05802134 	movhi	r22,132
  808564:	b58a6204 	addi	r22,r22,10632
  808568:	1585883a 	add	r2,r2,r22
  80856c:	10800117 	ldw	r2,4(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
  808570:	88000215 	stw	zero,8(r17)
	f->currentPlaylist = 0;
  808574:	88000515 	stw	zero,20(r17)
	f->elements = NULL;
  808578:	88000015 	stw	zero,0(r17)
	return vf;
}
//button starts from 1
struct Frame* initSongInListPanel(struct Frame* f, int list_id){
	struct Frame* psp = initFrame();
	if (db.playlists[list_id] == NULL) {return NULL;}
  80857c:	10003e26 	beq	r2,zero,808678 <initSongInListPanel+0x15c>
	// TODO: what if the list does not have any songs
	// song number is 0?
	// up and down is not implemented yet
	// max of 14 songs per list for now
	if (db.playlists[list_id]->num_of_songs > 14){
  808580:	10801a17 	ldw	r2,104(r2)
  808584:	00c00384 	movi	r3,14
  808588:	1880380e 	bge	r3,r2,80866c <initSongInListPanel+0x150>
		psp->button_size = 14;
  80858c:	88c00315 	stw	r3,12(r17)
  808590:	1809883a 	mov	r4,r3
	} else {
		psp->button_size = db.playlists[list_id]->num_of_songs;
	}
	psp->buttons = (struct Button**)malloc((psp->button_size+1)*sizeof(struct Button*));
  808594:	2109883a 	add	r4,r4,r4
  808598:	2109883a 	add	r4,r4,r4
  80859c:	21000104 	addi	r4,r4,4
  8085a0:	08216fc0 	call	8216fc <malloc>
	int i = 0;
	int y = 4;
	psp->buttons[0] = NULL;
	for (i = 1; i <= psp->button_size; i++){
  8085a4:	88c00317 	ldw	r3,12(r17)
		psp->button_size = db.playlists[list_id]->num_of_songs;
	}
	psp->buttons = (struct Button**)malloc((psp->button_size+1)*sizeof(struct Button*));
	int i = 0;
	int y = 4;
	psp->buttons[0] = NULL;
  8085a8:	10000015 	stw	zero,0(r2)
	if (db.playlists[list_id]->num_of_songs > 14){
		psp->button_size = 14;
	} else {
		psp->button_size = db.playlists[list_id]->num_of_songs;
	}
	psp->buttons = (struct Button**)malloc((psp->button_size+1)*sizeof(struct Button*));
  8085ac:	88800115 	stw	r2,4(r17)
	int i = 0;
	int y = 4;
	psp->buttons[0] = NULL;
	for (i = 1; i <= psp->button_size; i++){
  8085b0:	00c0190e 	bge	zero,r3,808618 <initSongInListPanel+0xfc>
  8085b4:	80806524 	muli	r2,r16,404
  8085b8:	05400104 	movi	r21,4
  8085bc:	05000044 	movi	r20,1
  8085c0:	1094c804 	addi	r2,r2,21280
  8085c4:	15a5883a 	add	r18,r2,r22
  8085c8:	a827883a 	mov	r19,r21
		psp->buttons[i] = initSongButton(61, y, db.songs[db.index_list_order[list_id][i]]->song_name, db.index_list_order[list_id][i], psp);
  8085cc:	91c00017 	ldw	r7,0(r18)
  8085d0:	8c000117 	ldw	r16,4(r17)
  8085d4:	980b883a 	mov	r5,r19
  8085d8:	39c5883a 	add	r2,r7,r7
  8085dc:	1085883a 	add	r2,r2,r2
  8085e0:	1585883a 	add	r2,r2,r22
  8085e4:	11803617 	ldw	r6,216(r2)
  8085e8:	01000f44 	movi	r4,61
  8085ec:	dc400015 	stw	r17,0(sp)
  8085f0:	31800104 	addi	r6,r6,4
  8085f4:	080097c0 	call	80097c <initSongButton>
	}
	psp->buttons = (struct Button**)malloc((psp->button_size+1)*sizeof(struct Button*));
	int i = 0;
	int y = 4;
	psp->buttons[0] = NULL;
	for (i = 1; i <= psp->button_size; i++){
  8085f8:	88c00317 	ldw	r3,12(r17)
		psp->buttons[i] = initSongButton(61, y, db.songs[db.index_list_order[list_id][i]]->song_name, db.index_list_order[list_id][i], psp);
  8085fc:	ac21883a 	add	r16,r21,r16
	}
	psp->buttons = (struct Button**)malloc((psp->button_size+1)*sizeof(struct Button*));
	int i = 0;
	int y = 4;
	psp->buttons[0] = NULL;
	for (i = 1; i <= psp->button_size; i++){
  808600:	a5000044 	addi	r20,r20,1
		psp->buttons[i] = initSongButton(61, y, db.songs[db.index_list_order[list_id][i]]->song_name, db.index_list_order[list_id][i], psp);
  808604:	80800015 	stw	r2,0(r16)
		//psp->buttons[i] = initSongButton(61, y, "h", 1, psp);
		y = y + 3;
  808608:	9cc000c4 	addi	r19,r19,3
	}
	psp->buttons = (struct Button**)malloc((psp->button_size+1)*sizeof(struct Button*));
	int i = 0;
	int y = 4;
	psp->buttons[0] = NULL;
	for (i = 1; i <= psp->button_size; i++){
  80860c:	ad400104 	addi	r21,r21,4
  808610:	94800104 	addi	r18,r18,4
  808614:	1d3fed0e 	bge	r3,r20,8085cc <initSongInListPanel+0xb0>
		psp->buttons[i] = initSongButton(61, y, db.songs[db.index_list_order[list_id][i]]->song_name, db.index_list_order[list_id][i], psp);
		//psp->buttons[i] = initSongButton(61, y, "h", 1, psp);
		y = y + 3;
	}
	psp->mainFrame = f;
	psp->drawFrame = drawSongInListPanel;
  808618:	00802034 	movhi	r2,128
  80861c:	109f9a04 	addi	r2,r2,32360
	for (i = 1; i <= psp->button_size; i++){
		psp->buttons[i] = initSongButton(61, y, db.songs[db.index_list_order[list_id][i]]->song_name, db.index_list_order[list_id][i], psp);
		//psp->buttons[i] = initSongButton(61, y, "h", 1, psp);
		y = y + 3;
	}
	psp->mainFrame = f;
  808620:	8dc00715 	stw	r23,28(r17)
	psp->drawFrame = drawSongInListPanel;
  808624:	88800815 	stw	r2,32(r17)
	while((psp->bg_image = loadSDImage("AND2.BMP")) == NULL);
  808628:	010020f4 	movhi	r4,131
  80862c:	210da404 	addi	r4,r4,13968
  808630:	08098080 	call	809808 <loadSDImage>
  808634:	88800615 	stw	r2,24(r17)
  808638:	103ffb26 	beq	r2,zero,808628 <initSongInListPanel+0x10c>
	return psp;
}
  80863c:	8805883a 	mov	r2,r17
  808640:	dfc00917 	ldw	ra,36(sp)
  808644:	ddc00817 	ldw	r23,32(sp)
  808648:	dd800717 	ldw	r22,28(sp)
  80864c:	dd400617 	ldw	r21,24(sp)
  808650:	dd000517 	ldw	r20,20(sp)
  808654:	dcc00417 	ldw	r19,16(sp)
  808658:	dc800317 	ldw	r18,12(sp)
  80865c:	dc400217 	ldw	r17,8(sp)
  808660:	dc000117 	ldw	r16,4(sp)
  808664:	dec00a04 	addi	sp,sp,40
  808668:	f800283a 	ret
  80866c:	1009883a 	mov	r4,r2
	// up and down is not implemented yet
	// max of 14 songs per list for now
	if (db.playlists[list_id]->num_of_songs > 14){
		psp->button_size = 14;
	} else {
		psp->button_size = db.playlists[list_id]->num_of_songs;
  808670:	88800315 	stw	r2,12(r17)
  808674:	003fc706 	br	808594 <initSongInListPanel+0x78>
	return vf;
}
//button starts from 1
struct Frame* initSongInListPanel(struct Frame* f, int list_id){
	struct Frame* psp = initFrame();
	if (db.playlists[list_id] == NULL) {return NULL;}
  808678:	0023883a 	mov	r17,zero
  80867c:	003fef06 	br	80863c <initSongInListPanel+0x120>

00808680 <initVolumeFrame>:
	sf->drawFrame = drawScrollFrame;
	sf->mainFrame = this;
	return sf;
}

struct Frame* initVolumeFrame(struct Frame* this){
  808680:	defffb04 	addi	sp,sp,-20
  808684:	dcc00315 	stw	r19,12(sp)
  808688:	2027883a 	mov	r19,r4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  80868c:	01000904 	movi	r4,36
	sf->drawFrame = drawScrollFrame;
	sf->mainFrame = this;
	return sf;
}

struct Frame* initVolumeFrame(struct Frame* this){
  808690:	dfc00415 	stw	ra,16(sp)
  808694:	dc800215 	stw	r18,8(sp)
  808698:	dc400115 	stw	r17,4(sp)
  80869c:	dc000015 	stw	r16,0(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8086a0:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
  8086a4:	10000215 	stw	zero,8(r2)
	return sf;
}

struct Frame* initVolumeFrame(struct Frame* this){
	struct Frame* vf = initFrame();
	vf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  8086a8:	01000204 	movi	r4,8
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	f->currentPlaylist = 0;
  8086ac:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  8086b0:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8086b4:	1025883a 	mov	r18,r2
	return sf;
}

struct Frame* initVolumeFrame(struct Frame* this){
	struct Frame* vf = initFrame();
	vf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  8086b8:	08216fc0 	call	8216fc <malloc>
	vf->buttons[0] = initVolumeButton(5, 198, 0, this);
  8086bc:	01403184 	movi	r5,198
  8086c0:	01000144 	movi	r4,5
  8086c4:	000d883a 	mov	r6,zero
  8086c8:	980f883a 	mov	r7,r19
	return sf;
}

struct Frame* initVolumeFrame(struct Frame* this){
	struct Frame* vf = initFrame();
	vf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  8086cc:	1023883a 	mov	r17,r2
  8086d0:	90800115 	stw	r2,4(r18)
	vf->buttons[0] = initVolumeButton(5, 198, 0, this);
  8086d4:	0800b480 	call	800b48 <initVolumeButton>
  8086d8:	88800015 	stw	r2,0(r17)
	while((vf->buttons[0]->stats[0] = loadSDImage("VUP.BMP")) == NULL);
  8086dc:	90800117 	ldw	r2,4(r18)
  8086e0:	010020f4 	movhi	r4,131
  8086e4:	210da704 	addi	r4,r4,13980
  8086e8:	14000017 	ldw	r16,0(r2)
  8086ec:	08098080 	call	809808 <loadSDImage>
  8086f0:	80800c15 	stw	r2,48(r16)
  8086f4:	103ff926 	beq	r2,zero,8086dc <initVolumeFrame+0x5c>
	vf->buttons[0]->stats[1] = vf->buttons[0]->stats[0];
  8086f8:	94000117 	ldw	r16,4(r18)
	vf->buttons[1] = initVolumeButton(5, 218, 1, this);
  8086fc:	01000144 	movi	r4,5
  808700:	01403684 	movi	r5,218
struct Frame* initVolumeFrame(struct Frame* this){
	struct Frame* vf = initFrame();
	vf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	vf->buttons[0] = initVolumeButton(5, 198, 0, this);
	while((vf->buttons[0]->stats[0] = loadSDImage("VUP.BMP")) == NULL);
	vf->buttons[0]->stats[1] = vf->buttons[0]->stats[0];
  808704:	80c00017 	ldw	r3,0(r16)
	vf->buttons[1] = initVolumeButton(5, 218, 1, this);
  808708:	01800044 	movi	r6,1
  80870c:	980f883a 	mov	r7,r19
struct Frame* initVolumeFrame(struct Frame* this){
	struct Frame* vf = initFrame();
	vf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	vf->buttons[0] = initVolumeButton(5, 198, 0, this);
	while((vf->buttons[0]->stats[0] = loadSDImage("VUP.BMP")) == NULL);
	vf->buttons[0]->stats[1] = vf->buttons[0]->stats[0];
  808710:	18800c17 	ldw	r2,48(r3)
  808714:	18800d15 	stw	r2,52(r3)
	vf->buttons[1] = initVolumeButton(5, 218, 1, this);
  808718:	0800b480 	call	800b48 <initVolumeButton>
  80871c:	80800115 	stw	r2,4(r16)
	while((vf->buttons[1]->stats[0] = loadSDImage("VDOWN.BMP")) == NULL);
  808720:	90800117 	ldw	r2,4(r18)
  808724:	010020f4 	movhi	r4,131
  808728:	210da904 	addi	r4,r4,13988
  80872c:	14000117 	ldw	r16,4(r2)
  808730:	08098080 	call	809808 <loadSDImage>
  808734:	80800c15 	stw	r2,48(r16)
  808738:	103ff926 	beq	r2,zero,808720 <initVolumeFrame+0xa0>
	vf->buttons[1]->stats[1] = vf->buttons[1]->stats[0];
  80873c:	90800117 	ldw	r2,4(r18)
	vf->bg_image = NULL;
	vf->button_size = 2;
  808740:	00c00084 	movi	r3,2
  808744:	90c00315 	stw	r3,12(r18)
	vf->buttons[0] = initVolumeButton(5, 198, 0, this);
	while((vf->buttons[0]->stats[0] = loadSDImage("VUP.BMP")) == NULL);
	vf->buttons[0]->stats[1] = vf->buttons[0]->stats[0];
	vf->buttons[1] = initVolumeButton(5, 218, 1, this);
	while((vf->buttons[1]->stats[0] = loadSDImage("VDOWN.BMP")) == NULL);
	vf->buttons[1]->stats[1] = vf->buttons[1]->stats[0];
  808748:	11000117 	ldw	r4,4(r2)
	vf->bg_image = NULL;
	vf->button_size = 2;
	vf->drawFrame = drawVolumeFrame;
  80874c:	00802034 	movhi	r2,128
  808750:	109ea204 	addi	r2,r2,31368
  808754:	90800815 	stw	r2,32(r18)
	vf->buttons[0] = initVolumeButton(5, 198, 0, this);
	while((vf->buttons[0]->stats[0] = loadSDImage("VUP.BMP")) == NULL);
	vf->buttons[0]->stats[1] = vf->buttons[0]->stats[0];
	vf->buttons[1] = initVolumeButton(5, 218, 1, this);
	while((vf->buttons[1]->stats[0] = loadSDImage("VDOWN.BMP")) == NULL);
	vf->buttons[1]->stats[1] = vf->buttons[1]->stats[0];
  808758:	20c00c17 	ldw	r3,48(r4)
	vf->bg_image = NULL;
	vf->button_size = 2;
	vf->drawFrame = drawVolumeFrame;
	vf->mainFrame = this;
	return vf;
}
  80875c:	9005883a 	mov	r2,r18
	while((vf->buttons[1]->stats[0] = loadSDImage("VDOWN.BMP")) == NULL);
	vf->buttons[1]->stats[1] = vf->buttons[1]->stats[0];
	vf->bg_image = NULL;
	vf->button_size = 2;
	vf->drawFrame = drawVolumeFrame;
	vf->mainFrame = this;
  808760:	94c00715 	stw	r19,28(r18)
	vf->buttons[0] = initVolumeButton(5, 198, 0, this);
	while((vf->buttons[0]->stats[0] = loadSDImage("VUP.BMP")) == NULL);
	vf->buttons[0]->stats[1] = vf->buttons[0]->stats[0];
	vf->buttons[1] = initVolumeButton(5, 218, 1, this);
	while((vf->buttons[1]->stats[0] = loadSDImage("VDOWN.BMP")) == NULL);
	vf->buttons[1]->stats[1] = vf->buttons[1]->stats[0];
  808764:	20c00d15 	stw	r3,52(r4)
	vf->bg_image = NULL;
  808768:	90000615 	stw	zero,24(r18)
	vf->button_size = 2;
	vf->drawFrame = drawVolumeFrame;
	vf->mainFrame = this;
	return vf;
}
  80876c:	dfc00417 	ldw	ra,16(sp)
  808770:	dcc00317 	ldw	r19,12(sp)
  808774:	dc800217 	ldw	r18,8(sp)
  808778:	dc400117 	ldw	r17,4(sp)
  80877c:	dc000017 	ldw	r16,0(sp)
  808780:	dec00504 	addi	sp,sp,20
  808784:	f800283a 	ret

00808788 <initScrollFrame>:
		}
	}
	return pp;
}

struct Frame* initScrollFrame(struct Frame* this){
  808788:	defffb04 	addi	sp,sp,-20
  80878c:	dcc00315 	stw	r19,12(sp)
  808790:	2027883a 	mov	r19,r4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808794:	01000904 	movi	r4,36
		}
	}
	return pp;
}

struct Frame* initScrollFrame(struct Frame* this){
  808798:	dfc00415 	stw	ra,16(sp)
  80879c:	dc800215 	stw	r18,8(sp)
  8087a0:	dc400115 	stw	r17,4(sp)
  8087a4:	dc000015 	stw	r16,0(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8087a8:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
  8087ac:	10000215 	stw	zero,8(r2)
	return pp;
}

struct Frame* initScrollFrame(struct Frame* this){
	struct Frame* sf = initFrame();
	sf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  8087b0:	01000204 	movi	r4,8
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	f->currentPlaylist = 0;
  8087b4:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  8087b8:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8087bc:	1025883a 	mov	r18,r2
	return pp;
}

struct Frame* initScrollFrame(struct Frame* this){
	struct Frame* sf = initFrame();
	sf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  8087c0:	08216fc0 	call	8216fc <malloc>
  8087c4:	1023883a 	mov	r17,r2
	sf->bg_image = NULL;
	sf->button_size = 2;
	sf->buttons[0] = initScrollButton(265, 184, 0, this);
  8087c8:	01004244 	movi	r4,265

struct Frame* initScrollFrame(struct Frame* this){
	struct Frame* sf = initFrame();
	sf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	sf->bg_image = NULL;
	sf->button_size = 2;
  8087cc:	00800084 	movi	r2,2
	sf->buttons[0] = initScrollButton(265, 184, 0, this);
  8087d0:	01402e04 	movi	r5,184
  8087d4:	000d883a 	mov	r6,zero
  8087d8:	980f883a 	mov	r7,r19

struct Frame* initScrollFrame(struct Frame* this){
	struct Frame* sf = initFrame();
	sf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	sf->bg_image = NULL;
	sf->button_size = 2;
  8087dc:	90800315 	stw	r2,12(r18)
	return pp;
}

struct Frame* initScrollFrame(struct Frame* this){
	struct Frame* sf = initFrame();
	sf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  8087e0:	94400115 	stw	r17,4(r18)
	sf->bg_image = NULL;
  8087e4:	90000615 	stw	zero,24(r18)
	sf->button_size = 2;
	sf->buttons[0] = initScrollButton(265, 184, 0, this);
  8087e8:	0800c1c0 	call	800c1c <initScrollButton>
  8087ec:	88800015 	stw	r2,0(r17)
	while((sf->buttons[0]->stats[0] = loadSDImage("UP1.BMP")) == NULL);
  8087f0:	90800117 	ldw	r2,4(r18)
  8087f4:	010020f4 	movhi	r4,131
  8087f8:	210dac04 	addi	r4,r4,14000
  8087fc:	14000017 	ldw	r16,0(r2)
  808800:	08098080 	call	809808 <loadSDImage>
  808804:	80800c15 	stw	r2,48(r16)
  808808:	103ff926 	beq	r2,zero,8087f0 <initScrollFrame+0x68>
	sf->buttons[1] = initScrollButton(285, 184, 1, this);
  80880c:	94000117 	ldw	r16,4(r18)
  808810:	01004744 	movi	r4,285
  808814:	01402e04 	movi	r5,184
  808818:	01800044 	movi	r6,1
  80881c:	980f883a 	mov	r7,r19
  808820:	0800c1c0 	call	800c1c <initScrollButton>
  808824:	80800115 	stw	r2,4(r16)
	while((sf->buttons[1]->stats[0] = loadSDImage("DOWN1.BMP")) == NULL);
  808828:	90800117 	ldw	r2,4(r18)
  80882c:	010020f4 	movhi	r4,131
  808830:	210dae04 	addi	r4,r4,14008
  808834:	14000117 	ldw	r16,4(r2)
  808838:	08098080 	call	809808 <loadSDImage>
  80883c:	80800c15 	stw	r2,48(r16)
  808840:	103ff926 	beq	r2,zero,808828 <initScrollFrame+0xa0>
	sf->drawFrame = drawScrollFrame;
  808844:	00802034 	movhi	r2,128
  808848:	109ec404 	addi	r2,r2,31504
  80884c:	90800815 	stw	r2,32(r18)
	sf->mainFrame = this;
	return sf;
}
  808850:	9005883a 	mov	r2,r18
	sf->buttons[0] = initScrollButton(265, 184, 0, this);
	while((sf->buttons[0]->stats[0] = loadSDImage("UP1.BMP")) == NULL);
	sf->buttons[1] = initScrollButton(285, 184, 1, this);
	while((sf->buttons[1]->stats[0] = loadSDImage("DOWN1.BMP")) == NULL);
	sf->drawFrame = drawScrollFrame;
	sf->mainFrame = this;
  808854:	94c00715 	stw	r19,28(r18)
	return sf;
}
  808858:	dfc00417 	ldw	ra,16(sp)
  80885c:	dcc00317 	ldw	r19,12(sp)
  808860:	dc800217 	ldw	r18,8(sp)
  808864:	dc400117 	ldw	r17,4(sp)
  808868:	dc000017 	ldw	r16,0(sp)
  80886c:	dec00504 	addi	sp,sp,20
  808870:	f800283a 	ret

00808874 <initMenuFrame>:
	f->button_size = 0;
	f->currentPanel = 0; // 0:SONGS, 1:PLAYLIST
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
  808874:	defffb04 	addi	sp,sp,-20
  808878:	dd800315 	stw	r22,12(sp)
  80887c:	202d883a 	mov	r22,r4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808880:	01000904 	movi	r4,36
	f->button_size = 0;
	f->currentPanel = 0; // 0:SONGS, 1:PLAYLIST
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
  808884:	dfc00415 	stw	ra,16(sp)
  808888:	dd000215 	stw	r20,8(sp)
  80888c:	dc800115 	stw	r18,4(sp)
  808890:	dc400015 	stw	r17,0(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808894:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
  808898:	10000215 	stw	zero,8(r2)
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  80889c:	01000204 	movi	r4,8
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	f->currentPlaylist = 0;
  8088a0:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  8088a4:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8088a8:	1023883a 	mov	r17,r2
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  8088ac:	08216fc0 	call	8216fc <malloc>
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
  8088b0:	880f883a 	mov	r7,r17
  8088b4:	01000144 	movi	r4,5
  8088b8:	014020f4 	movhi	r5,131
  8088bc:	294db104 	addi	r5,r5,14020
  8088c0:	000d883a 	mov	r6,zero
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  8088c4:	1029883a 	mov	r20,r2
  8088c8:	88800115 	stw	r2,4(r17)
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
  8088cc:	0800a580 	call	800a58 <initMenuButton>
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
  8088d0:	8c800117 	ldw	r18,4(r17)
  8088d4:	010008c4 	movi	r4,35
  8088d8:	014020f4 	movhi	r5,131
  8088dc:	294db404 	addi	r5,r5,14032
  8088e0:	01800044 	movi	r6,1
  8088e4:	880f883a 	mov	r7,r17
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
  8088e8:	a0800015 	stw	r2,0(r20)
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
  8088ec:	94800104 	addi	r18,r18,4
  8088f0:	0800a580 	call	800a58 <initMenuButton>
  8088f4:	90800015 	stw	r2,0(r18)
	mf->elements = NULL;
	mf->drawFrame = drawMenuFrame;
  8088f8:	00802034 	movhi	r2,128
  8088fc:	109f1604 	addi	r2,r2,31832
  808900:	88800815 	stw	r2,32(r17)
	mf->button_size = 2;
  808904:	00c00084 	movi	r3,2
	mf->mainFrame = mainFrame;
	mf->bg_image = NULL;
	return mf;
}
  808908:	8805883a 	mov	r2,r17
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
	mf->elements = NULL;
	mf->drawFrame = drawMenuFrame;
	mf->button_size = 2;
  80890c:	88c00315 	stw	r3,12(r17)
	mf->mainFrame = mainFrame;
  808910:	8d800715 	stw	r22,28(r17)
struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
	mf->elements = NULL;
  808914:	88000015 	stw	zero,0(r17)
	mf->drawFrame = drawMenuFrame;
	mf->button_size = 2;
	mf->mainFrame = mainFrame;
	mf->bg_image = NULL;
  808918:	88000615 	stw	zero,24(r17)
	return mf;
}
  80891c:	dfc00417 	ldw	ra,16(sp)
  808920:	dd800317 	ldw	r22,12(sp)
  808924:	dd000217 	ldw	r20,8(sp)
  808928:	dc800117 	ldw	r18,4(sp)
  80892c:	dc400017 	ldw	r17,0(sp)
  808930:	dec00504 	addi	sp,sp,20
  808934:	f800283a 	ret

00808938 <initSongPanel>:
	af->button_size = 5;
	af->mainFrame = mainFrame;
	return af;
}

struct Frame* initSongPanel(struct Frame* frame){
  808938:	defff804 	addi	sp,sp,-32
  80893c:	dc000115 	stw	r16,4(sp)
  808940:	2021883a 	mov	r16,r4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808944:	01000904 	movi	r4,36
	af->button_size = 5;
	af->mainFrame = mainFrame;
	return af;
}

struct Frame* initSongPanel(struct Frame* frame){
  808948:	dfc00715 	stw	ra,28(sp)
  80894c:	dc400215 	stw	r17,8(sp)
  808950:	dd400615 	stw	r21,24(sp)
  808954:	dd000515 	stw	r20,20(sp)
  808958:	dcc00415 	stw	r19,16(sp)
  80895c:	dc800315 	stw	r18,12(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808960:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
  808964:	10000215 	stw	zero,8(r2)

struct Frame* initSongPanel(struct Frame* frame){
	int i = 1;
	int init_song_y = 4;
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(15*sizeof(struct Button*));
  808968:	01000f04 	movi	r4,60
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	f->currentPlaylist = 0;
  80896c:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  808970:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808974:	1023883a 	mov	r17,r2

struct Frame* initSongPanel(struct Frame* frame){
	int i = 1;
	int init_song_y = 4;
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(15*sizeof(struct Button*));
  808978:	08216fc0 	call	8216fc <malloc>
  80897c:	88800115 	stw	r2,4(r17)
	sp->drawFrame = drawSongPanel;
  808980:	00802034 	movhi	r2,128
  808984:	109e0f04 	addi	r2,r2,30780
  808988:	88800815 	stw	r2,32(r17)
	while((sp->bg_image = loadSDImage("AND2.BMP")) == NULL);
  80898c:	010020f4 	movhi	r4,131
  808990:	210da404 	addi	r4,r4,13968
  808994:	08098080 	call	809808 <loadSDImage>
  808998:	88800615 	stw	r2,24(r17)
  80899c:	103ffb26 	beq	r2,zero,80898c <initSongPanel+0x54>
	sp->mainFrame = frame;
	if (db.num_of_songs > 14){
  8089a0:	00802134 	movhi	r2,132
  8089a4:	108a6204 	addi	r2,r2,10632
  8089a8:	1080a717 	ldw	r2,668(r2)
  8089ac:	00c00384 	movi	r3,14
	int init_song_y = 4;
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(15*sizeof(struct Button*));
	sp->drawFrame = drawSongPanel;
	while((sp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	sp->mainFrame = frame;
  8089b0:	8c000715 	stw	r16,28(r17)
	if (db.num_of_songs > 14){
  8089b4:	1880250e 	bge	r3,r2,808a4c <initSongPanel+0x114>
		sp->button_size = 14; // starts from 1!!
  8089b8:	88c00315 	stw	r3,12(r17)
  8089bc:	1805883a 	mov	r2,r3
	} else {
		sp->button_size = db.num_of_songs;
	}
	sp->buttons[0] = NULL;
  8089c0:	88c00117 	ldw	r3,4(r17)
  8089c4:	18000015 	stw	zero,0(r3)
	for (i = 1; i <= sp->button_size; i++){
  8089c8:	0080160e 	bge	zero,r2,808a24 <initSongPanel+0xec>
  8089cc:	05400104 	movi	r21,4
  8089d0:	04800044 	movi	r18,1
  8089d4:	a829883a 	mov	r20,r21
  8089d8:	04c02134 	movhi	r19,132
  8089dc:	9cca9904 	addi	r19,r19,10852
  8089e0:	00000106 	br	8089e8 <initSongPanel+0xb0>
  8089e4:	88c00117 	ldw	r3,4(r17)
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, i, sp);
  8089e8:	99800017 	ldw	r6,0(r19)
  8089ec:	a00b883a 	mov	r5,r20
  8089f0:	900f883a 	mov	r7,r18
  8089f4:	31800104 	addi	r6,r6,4
  8089f8:	01000f44 	movi	r4,61
  8089fc:	a8e1883a 	add	r16,r21,r3
  808a00:	dc400015 	stw	r17,0(sp)
  808a04:	080097c0 	call	80097c <initSongButton>
		sp->button_size = 14; // starts from 1!!
	} else {
		sp->button_size = db.num_of_songs;
	}
	sp->buttons[0] = NULL;
	for (i = 1; i <= sp->button_size; i++){
  808a08:	88c00317 	ldw	r3,12(r17)
  808a0c:	94800044 	addi	r18,r18,1
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, i, sp);
  808a10:	80800015 	stw	r2,0(r16)
		init_song_y = init_song_y+3;
  808a14:	a50000c4 	addi	r20,r20,3
		sp->button_size = 14; // starts from 1!!
	} else {
		sp->button_size = db.num_of_songs;
	}
	sp->buttons[0] = NULL;
	for (i = 1; i <= sp->button_size; i++){
  808a18:	ad400104 	addi	r21,r21,4
  808a1c:	9cc00104 	addi	r19,r19,4
  808a20:	1cbff00e 	bge	r3,r18,8089e4 <initSongPanel+0xac>
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, i, sp);
		init_song_y = init_song_y+3;
	}
	return sp;
}
  808a24:	8805883a 	mov	r2,r17
  808a28:	dfc00717 	ldw	ra,28(sp)
  808a2c:	dd400617 	ldw	r21,24(sp)
  808a30:	dd000517 	ldw	r20,20(sp)
  808a34:	dcc00417 	ldw	r19,16(sp)
  808a38:	dc800317 	ldw	r18,12(sp)
  808a3c:	dc400217 	ldw	r17,8(sp)
  808a40:	dc000117 	ldw	r16,4(sp)
  808a44:	dec00804 	addi	sp,sp,32
  808a48:	f800283a 	ret
	while((sp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	sp->mainFrame = frame;
	if (db.num_of_songs > 14){
		sp->button_size = 14; // starts from 1!!
	} else {
		sp->button_size = db.num_of_songs;
  808a4c:	88800315 	stw	r2,12(r17)
  808a50:	003fdb06 	br	8089c0 <initSongPanel+0x88>

00808a54 <initActionFrame>:
	mf->mainFrame = mainFrame;
	mf->bg_image = NULL;
	return mf;
}

struct Frame* initActionFrame(struct Frame* mainFrame){
  808a54:	defffc04 	addi	sp,sp,-16
  808a58:	dc800215 	stw	r18,8(sp)
  808a5c:	2025883a 	mov	r18,r4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808a60:	01000904 	movi	r4,36
	mf->mainFrame = mainFrame;
	mf->bg_image = NULL;
	return mf;
}

struct Frame* initActionFrame(struct Frame* mainFrame){
  808a64:	dc400115 	stw	r17,4(sp)
  808a68:	dfc00315 	stw	ra,12(sp)
  808a6c:	dc000015 	stw	r16,0(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808a70:	08216fc0 	call	8216fc <malloc>
  808a74:	1023883a 	mov	r17,r2
	f->element_size = 0;
  808a78:	10000215 	stw	zero,8(r2)
	f->currentPlaylist = 0;
  808a7c:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  808a80:	10000015 	stw	zero,0(r2)
	return mf;
}

struct Frame* initActionFrame(struct Frame* mainFrame){
	struct Frame* af = initFrame();
	while((af->bg_image = loadSDImage("GR3.BMP")) == NULL);
  808a84:	010020f4 	movhi	r4,131
  808a88:	210db704 	addi	r4,r4,14044
  808a8c:	08098080 	call	809808 <loadSDImage>
  808a90:	88800615 	stw	r2,24(r17)
  808a94:	103ffb26 	beq	r2,zero,808a84 <initActionFrame+0x30>
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
  808a98:	01000504 	movi	r4,20
  808a9c:	08216fc0 	call	8216fc <malloc>
	af->buttons[0] = initActionButton(0, af);
  808aa0:	880b883a 	mov	r5,r17
  808aa4:	0009883a 	mov	r4,zero
}

struct Frame* initActionFrame(struct Frame* mainFrame){
	struct Frame* af = initFrame();
	while((af->bg_image = loadSDImage("GR3.BMP")) == NULL);
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
  808aa8:	1021883a 	mov	r16,r2
  808aac:	88800115 	stw	r2,4(r17)
	af->buttons[0] = initActionButton(0, af);
  808ab0:	0800ce00 	call	800ce0 <initActionButton>
  808ab4:	80800015 	stw	r2,0(r16)
	af->buttons[0]->range->height = 30;
  808ab8:	8c000117 	ldw	r16,4(r17)
  808abc:	00800784 	movi	r2,30
  808ac0:	80c00017 	ldw	r3,0(r16)
  808ac4:	19000217 	ldw	r4,8(r3)
  808ac8:	1821883a 	mov	r16,r3
	af->buttons[0]->range->width = 30;
  808acc:	20800315 	stw	r2,12(r4)
struct Frame* initActionFrame(struct Frame* mainFrame){
	struct Frame* af = initFrame();
	while((af->bg_image = loadSDImage("GR3.BMP")) == NULL);
	af->buttons = (struct Button**)malloc(5*sizeof(struct Button*));
	af->buttons[0] = initActionButton(0, af);
	af->buttons[0]->range->height = 30;
  808ad0:	20800215 	stw	r2,8(r4)
  808ad4:	00000206 	br	808ae0 <initActionFrame+0x8c>
  808ad8:	8c000117 	ldw	r16,4(r17)
  808adc:	84000017 	ldw	r16,0(r16)
	af->buttons[0]->range->width = 30;
	while((af->buttons[0]->stats[0] = loadSDImage("PLAY2.BMP")) == NULL); //size 30x30
  808ae0:	010020f4 	movhi	r4,131
  808ae4:	210db904 	addi	r4,r4,14052
  808ae8:	08098080 	call	809808 <loadSDImage>
  808aec:	80800c15 	stw	r2,48(r16)
  808af0:	103ff926 	beq	r2,zero,808ad8 <initActionFrame+0x84>
	while((af->buttons[0]->stats[1] = loadSDImage("PLAY5.BMP")) == NULL);
  808af4:	88800117 	ldw	r2,4(r17)
  808af8:	010020f4 	movhi	r4,131
  808afc:	210dbc04 	addi	r4,r4,14064
  808b00:	14000017 	ldw	r16,0(r2)
  808b04:	08098080 	call	809808 <loadSDImage>
  808b08:	80800d15 	stw	r2,52(r16)
  808b0c:	103ff926 	beq	r2,zero,808af4 <initActionFrame+0xa0>
	af->buttons[1] = initActionButton(1, af);
  808b10:	8c000117 	ldw	r16,4(r17)
  808b14:	01000044 	movi	r4,1
  808b18:	880b883a 	mov	r5,r17
  808b1c:	0800ce00 	call	800ce0 <initActionButton>
  808b20:	80800115 	stw	r2,4(r16)
	while((af->buttons[1]->stats[0] = loadSDImage("STOP.BMP")) == NULL); //size 20x20
  808b24:	88800117 	ldw	r2,4(r17)
  808b28:	010020f4 	movhi	r4,131
  808b2c:	210dbf04 	addi	r4,r4,14076
  808b30:	14000117 	ldw	r16,4(r2)
  808b34:	08098080 	call	809808 <loadSDImage>
  808b38:	80800c15 	stw	r2,48(r16)
  808b3c:	103ff926 	beq	r2,zero,808b24 <initActionFrame+0xd0>
	while((af->buttons[1]->stats[1] = loadSDImage("STOP4.BMP")) == NULL); //size 20x20
  808b40:	88800117 	ldw	r2,4(r17)
  808b44:	010020f4 	movhi	r4,131
  808b48:	210dc204 	addi	r4,r4,14088
  808b4c:	14000117 	ldw	r16,4(r2)
  808b50:	08098080 	call	809808 <loadSDImage>
  808b54:	80800d15 	stw	r2,52(r16)
  808b58:	103ff926 	beq	r2,zero,808b40 <initActionFrame+0xec>
	af->buttons[2] = initActionButton(2, af);
  808b5c:	8c000117 	ldw	r16,4(r17)
  808b60:	01000084 	movi	r4,2
  808b64:	880b883a 	mov	r5,r17
  808b68:	0800ce00 	call	800ce0 <initActionButton>
  808b6c:	80800215 	stw	r2,8(r16)
	while((af->buttons[2]->stats[0] = loadSDImage("PAUSE.BMP")) == NULL);
  808b70:	88800117 	ldw	r2,4(r17)
  808b74:	010020f4 	movhi	r4,131
  808b78:	210dc504 	addi	r4,r4,14100
  808b7c:	14000217 	ldw	r16,8(r2)
  808b80:	08098080 	call	809808 <loadSDImage>
  808b84:	80800c15 	stw	r2,48(r16)
  808b88:	103ff926 	beq	r2,zero,808b70 <initActionFrame+0x11c>
	while((af->buttons[2]->stats[1] = loadSDImage("PAUSE4.BMP")) == NULL);
  808b8c:	88800117 	ldw	r2,4(r17)
  808b90:	010020f4 	movhi	r4,131
  808b94:	210dc804 	addi	r4,r4,14112
  808b98:	14000217 	ldw	r16,8(r2)
  808b9c:	08098080 	call	809808 <loadSDImage>
  808ba0:	80800d15 	stw	r2,52(r16)
  808ba4:	103ff926 	beq	r2,zero,808b8c <initActionFrame+0x138>
	af->buttons[3] = initActionButton(3, af);
  808ba8:	8c000117 	ldw	r16,4(r17)
  808bac:	010000c4 	movi	r4,3
  808bb0:	880b883a 	mov	r5,r17
  808bb4:	0800ce00 	call	800ce0 <initActionButton>
  808bb8:	80800315 	stw	r2,12(r16)
	while((af->buttons[3]->stats[0] = loadSDImage("PREV.BMP")) == NULL);
  808bbc:	88800117 	ldw	r2,4(r17)
  808bc0:	010020f4 	movhi	r4,131
  808bc4:	210dcb04 	addi	r4,r4,14124
  808bc8:	14000317 	ldw	r16,12(r2)
  808bcc:	08098080 	call	809808 <loadSDImage>
  808bd0:	80800c15 	stw	r2,48(r16)
  808bd4:	103ff926 	beq	r2,zero,808bbc <initActionFrame+0x168>
	while((af->buttons[3]->stats[1] = loadSDImage("PREV4.BMP")) == NULL);
  808bd8:	88800117 	ldw	r2,4(r17)
  808bdc:	010020f4 	movhi	r4,131
  808be0:	210dce04 	addi	r4,r4,14136
  808be4:	14000317 	ldw	r16,12(r2)
  808be8:	08098080 	call	809808 <loadSDImage>
  808bec:	80800d15 	stw	r2,52(r16)
  808bf0:	103ff926 	beq	r2,zero,808bd8 <initActionFrame+0x184>
	af->buttons[4] = initActionButton(4, af);
  808bf4:	8c000117 	ldw	r16,4(r17)
  808bf8:	01000104 	movi	r4,4
  808bfc:	880b883a 	mov	r5,r17
  808c00:	0800ce00 	call	800ce0 <initActionButton>
  808c04:	80800415 	stw	r2,16(r16)
	while((af->buttons[4]->stats[0] = loadSDImage("NEXT.BMP")) == NULL);
  808c08:	88800117 	ldw	r2,4(r17)
  808c0c:	010020f4 	movhi	r4,131
  808c10:	210dd104 	addi	r4,r4,14148
  808c14:	14000417 	ldw	r16,16(r2)
  808c18:	08098080 	call	809808 <loadSDImage>
  808c1c:	80800c15 	stw	r2,48(r16)
  808c20:	103ff926 	beq	r2,zero,808c08 <initActionFrame+0x1b4>
	while((af->buttons[4]->stats[1] = loadSDImage("NEXT4.BMP")) == NULL);
  808c24:	88800117 	ldw	r2,4(r17)
  808c28:	010020f4 	movhi	r4,131
  808c2c:	210dd404 	addi	r4,r4,14160
  808c30:	14000417 	ldw	r16,16(r2)
  808c34:	08098080 	call	809808 <loadSDImage>
  808c38:	80800d15 	stw	r2,52(r16)
  808c3c:	103ff926 	beq	r2,zero,808c24 <initActionFrame+0x1d0>
	af->drawFrame = drawActionFrame;
  808c40:	00802034 	movhi	r2,128
  808c44:	109ef304 	addi	r2,r2,31692
  808c48:	88800815 	stw	r2,32(r17)
	af->button_size = 5;
  808c4c:	00c00144 	movi	r3,5
	af->mainFrame = mainFrame;
	return af;
}
  808c50:	8805883a 	mov	r2,r17
	while((af->buttons[3]->stats[1] = loadSDImage("PREV4.BMP")) == NULL);
	af->buttons[4] = initActionButton(4, af);
	while((af->buttons[4]->stats[0] = loadSDImage("NEXT.BMP")) == NULL);
	while((af->buttons[4]->stats[1] = loadSDImage("NEXT4.BMP")) == NULL);
	af->drawFrame = drawActionFrame;
	af->button_size = 5;
  808c54:	88c00315 	stw	r3,12(r17)
	af->mainFrame = mainFrame;
  808c58:	8c800715 	stw	r18,28(r17)
	return af;
}
  808c5c:	dfc00317 	ldw	ra,12(sp)
  808c60:	dc800217 	ldw	r18,8(sp)
  808c64:	dc400117 	ldw	r17,4(sp)
  808c68:	dc000017 	ldw	r16,0(sp)
  808c6c:	dec00404 	addi	sp,sp,16
  808c70:	f800283a 	ret

00808c74 <initPlaylistPanel>:

void killSongPanel(struct Frame** frame) {
	if(frame == NULL || *frame == NULL) return;
}
// buttons start from 1
struct Frame* initPlaylistPanel(struct Frame* frame){
  808c74:	defff604 	addi	sp,sp,-40
  808c78:	dc400215 	stw	r17,8(sp)
  808c7c:	2023883a 	mov	r17,r4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808c80:	01000904 	movi	r4,36

void killSongPanel(struct Frame** frame) {
	if(frame == NULL || *frame == NULL) return;
}
// buttons start from 1
struct Frame* initPlaylistPanel(struct Frame* frame){
  808c84:	dfc00915 	stw	ra,36(sp)
  808c88:	ddc00815 	stw	r23,32(sp)
  808c8c:	dd000515 	stw	r20,20(sp)
  808c90:	dd800715 	stw	r22,28(sp)
  808c94:	dd400615 	stw	r21,24(sp)
  808c98:	dcc00415 	stw	r19,16(sp)
  808c9c:	dc800315 	stw	r18,12(sp)
  808ca0:	dc000115 	stw	r16,4(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808ca4:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
  808ca8:	10000215 	stw	zero,8(r2)
// buttons start from 1
struct Frame* initPlaylistPanel(struct Frame* frame){
	int i = 1, j = 0;
	int init_playlist_y = 4;
	struct Frame* pp = initFrame();
	pp->elements = (struct Frame**)malloc(sizeof(struct Frame*)); // to display songs in that list
  808cac:	01000104 	movi	r4,4
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	f->currentPlaylist = 0;
  808cb0:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  808cb4:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808cb8:	1029883a 	mov	r20,r2
// buttons start from 1
struct Frame* initPlaylistPanel(struct Frame* frame){
	int i = 1, j = 0;
	int init_playlist_y = 4;
	struct Frame* pp = initFrame();
	pp->elements = (struct Frame**)malloc(sizeof(struct Frame*)); // to display songs in that list
  808cbc:	08216fc0 	call	8216fc <malloc>
	pp->element_size = 1;
  808cc0:	00c00044 	movi	r3,1
	pp->elements[0] = NULL;
	pp->buttons = (struct Button**)malloc(30*sizeof(struct Button*));
  808cc4:	01001e04 	movi	r4,120
	pp->drawFrame = drawPlaylistPanel;
	pp->button_size = db.num_of_lists; // starts from 1
  808cc8:	05c02134 	movhi	r23,132
  808ccc:	bdca6204 	addi	r23,r23,10632
	int i = 1, j = 0;
	int init_playlist_y = 4;
	struct Frame* pp = initFrame();
	pp->elements = (struct Frame**)malloc(sizeof(struct Frame*)); // to display songs in that list
	pp->element_size = 1;
	pp->elements[0] = NULL;
  808cd0:	10000015 	stw	zero,0(r2)
struct Frame* initPlaylistPanel(struct Frame* frame){
	int i = 1, j = 0;
	int init_playlist_y = 4;
	struct Frame* pp = initFrame();
	pp->elements = (struct Frame**)malloc(sizeof(struct Frame*)); // to display songs in that list
	pp->element_size = 1;
  808cd4:	a0c00215 	stw	r3,8(r20)
// buttons start from 1
struct Frame* initPlaylistPanel(struct Frame* frame){
	int i = 1, j = 0;
	int init_playlist_y = 4;
	struct Frame* pp = initFrame();
	pp->elements = (struct Frame**)malloc(sizeof(struct Frame*)); // to display songs in that list
  808cd8:	a0800015 	stw	r2,0(r20)
	pp->element_size = 1;
	pp->elements[0] = NULL;
	pp->buttons = (struct Button**)malloc(30*sizeof(struct Button*));
  808cdc:	08216fc0 	call	8216fc <malloc>
	pp->drawFrame = drawPlaylistPanel;
	pp->button_size = db.num_of_lists; // starts from 1
  808ce0:	b8c03517 	ldw	r3,212(r23)
	int init_playlist_y = 4;
	struct Frame* pp = initFrame();
	pp->elements = (struct Frame**)malloc(sizeof(struct Frame*)); // to display songs in that list
	pp->element_size = 1;
	pp->elements[0] = NULL;
	pp->buttons = (struct Button**)malloc(30*sizeof(struct Button*));
  808ce4:	a0800115 	stw	r2,4(r20)
	pp->drawFrame = drawPlaylistPanel;
  808ce8:	00802034 	movhi	r2,128
  808cec:	109e2804 	addi	r2,r2,30880
  808cf0:	a0800815 	stw	r2,32(r20)
	pp->button_size = db.num_of_lists; // starts from 1
  808cf4:	a0c00315 	stw	r3,12(r20)
	pp->mainFrame = frame;
  808cf8:	a4400715 	stw	r17,28(r20)
	while((pp->bg_image = loadSDImage("AND2.BMP")) == NULL);
  808cfc:	010020f4 	movhi	r4,131
  808d00:	210da404 	addi	r4,r4,13968
  808d04:	08098080 	call	809808 <loadSDImage>
  808d08:	a0800615 	stw	r2,24(r20)
  808d0c:	103ffb26 	beq	r2,zero,808cfc <initPlaylistPanel+0x88>
	pp->buttons[0] = NULL;
  808d10:	a0800117 	ldw	r2,4(r20)
  808d14:	05402134 	movhi	r21,132
  808d18:	ad4a6204 	addi	r21,r21,10632
  808d1c:	04400044 	movi	r17,1
  808d20:	0025883a 	mov	r18,zero
  808d24:	05800104 	movi	r22,4
  808d28:	04c02174 	movhi	r19,133
  808d2c:	9cf34a04 	addi	r19,r19,-13016
  808d30:	10000015 	stw	zero,0(r2)
  808d34:	00000506 	br	808d4c <initPlaylistPanel+0xd8>
	for (i = 1; i <= MAX_LISTS; i++){
  808d38:	8c400044 	addi	r17,r17,1
  808d3c:	00800d04 	movi	r2,52
  808d40:	9cc00104 	addi	r19,r19,4
  808d44:	ad400104 	addi	r21,r21,4
  808d48:	88801b26 	beq	r17,r2,808db8 <initPlaylistPanel+0x144>
		if(j == db.num_of_lists) break;
		if(db.used_list_index[i] != 0) {
			pp->buttons[j+1] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, i, pp);
  808d4c:	9485883a 	add	r2,r18,r18
  808d50:	1087883a 	add	r3,r2,r2
	pp->button_size = db.num_of_lists; // starts from 1
	pp->mainFrame = frame;
	while((pp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	pp->buttons[0] = NULL;
	for (i = 1; i <= MAX_LISTS; i++){
		if(j == db.num_of_lists) break;
  808d54:	b8803517 	ldw	r2,212(r23)
		if(db.used_list_index[i] != 0) {
			pp->buttons[j+1] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, i, pp);
  808d58:	b00b883a 	mov	r5,r22
  808d5c:	880f883a 	mov	r7,r17
  808d60:	01000f44 	movi	r4,61
	pp->button_size = db.num_of_lists; // starts from 1
	pp->mainFrame = frame;
	while((pp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	pp->buttons[0] = NULL;
	for (i = 1; i <= MAX_LISTS; i++){
		if(j == db.num_of_lists) break;
  808d64:	14801426 	beq	r2,r18,808db8 <initPlaylistPanel+0x144>
		if(db.used_list_index[i] != 0) {
  808d68:	98800017 	ldw	r2,0(r19)
  808d6c:	103ff226 	beq	r2,zero,808d38 <initPlaylistPanel+0xc4>
			pp->buttons[j+1] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, i, pp);
  808d70:	a9800217 	ldw	r6,8(r21)
  808d74:	a4000117 	ldw	r16,4(r20)
  808d78:	dd000015 	stw	r20,0(sp)
			printf("Playlist %d name is %s\n", i, db.playlists[i]->list_name);
			init_playlist_y += 3;
  808d7c:	b58000c4 	addi	r22,r22,3
	while((pp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	pp->buttons[0] = NULL;
	for (i = 1; i <= MAX_LISTS; i++){
		if(j == db.num_of_lists) break;
		if(db.used_list_index[i] != 0) {
			pp->buttons[j+1] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, i, pp);
  808d80:	1c21883a 	add	r16,r3,r16
  808d84:	0800e2c0 	call	800e2c <initPlaylistButton>
			printf("Playlist %d name is %s\n", i, db.playlists[i]->list_name);
  808d88:	a9800217 	ldw	r6,8(r21)
  808d8c:	880b883a 	mov	r5,r17
	while((pp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	pp->buttons[0] = NULL;
	for (i = 1; i <= MAX_LISTS; i++){
		if(j == db.num_of_lists) break;
		if(db.used_list_index[i] != 0) {
			pp->buttons[j+1] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, i, pp);
  808d90:	80800115 	stw	r2,4(r16)
			printf("Playlist %d name is %s\n", i, db.playlists[i]->list_name);
  808d94:	010020f4 	movhi	r4,131
  808d98:	210dd704 	addi	r4,r4,14172
  808d9c:	08220680 	call	822068 <printf>
	pp->drawFrame = drawPlaylistPanel;
	pp->button_size = db.num_of_lists; // starts from 1
	pp->mainFrame = frame;
	while((pp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	pp->buttons[0] = NULL;
	for (i = 1; i <= MAX_LISTS; i++){
  808da0:	8c400044 	addi	r17,r17,1
  808da4:	00800d04 	movi	r2,52
		if(j == db.num_of_lists) break;
		if(db.used_list_index[i] != 0) {
			pp->buttons[j+1] = initPlaylistButton(61, init_playlist_y, db.playlists[i]->list_name, i, pp);
			printf("Playlist %d name is %s\n", i, db.playlists[i]->list_name);
			init_playlist_y += 3;
			j++;
  808da8:	94800044 	addi	r18,r18,1
	pp->drawFrame = drawPlaylistPanel;
	pp->button_size = db.num_of_lists; // starts from 1
	pp->mainFrame = frame;
	while((pp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	pp->buttons[0] = NULL;
	for (i = 1; i <= MAX_LISTS; i++){
  808dac:	9cc00104 	addi	r19,r19,4
  808db0:	ad400104 	addi	r21,r21,4
  808db4:	88bfe51e 	bne	r17,r2,808d4c <initPlaylistPanel+0xd8>
			init_playlist_y += 3;
			j++;
		}
	}
	return pp;
}
  808db8:	a005883a 	mov	r2,r20
  808dbc:	dfc00917 	ldw	ra,36(sp)
  808dc0:	ddc00817 	ldw	r23,32(sp)
  808dc4:	dd800717 	ldw	r22,28(sp)
  808dc8:	dd400617 	ldw	r21,24(sp)
  808dcc:	dd000517 	ldw	r20,20(sp)
  808dd0:	dcc00417 	ldw	r19,16(sp)
  808dd4:	dc800317 	ldw	r18,12(sp)
  808dd8:	dc400217 	ldw	r17,8(sp)
  808ddc:	dc000117 	ldw	r16,4(sp)
  808de0:	dec00a04 	addi	sp,sp,40
  808de4:	f800283a 	ret

00808de8 <drawAllSongsInList>:
		}
	}
	mouse->frame->currentPanel = 1;
}

void drawAllSongsInList(int list_id){
  808de8:	defffa04 	addi	sp,sp,-24
  808dec:	dcc00315 	stw	r19,12(sp)
	if (mouse->frame->elements[3]->buttons[list_id]->id != list_id){
  808df0:	04c02134 	movhi	r19,132
  808df4:	9cca3a04 	addi	r19,r19,10472
  808df8:	98c00017 	ldw	r3,0(r19)
  808dfc:	2105883a 	add	r2,r4,r4
		}
	}
	mouse->frame->currentPanel = 1;
}

void drawAllSongsInList(int list_id){
  808e00:	dd000415 	stw	r20,16(sp)
	if (mouse->frame->elements[3]->buttons[list_id]->id != list_id){
  808e04:	19400317 	ldw	r5,12(r3)
  808e08:	10a9883a 	add	r20,r2,r2
		}
	}
	mouse->frame->currentPanel = 1;
}

void drawAllSongsInList(int list_id){
  808e0c:	dfc00515 	stw	ra,20(sp)
	if (mouse->frame->elements[3]->buttons[list_id]->id != list_id){
  808e10:	28c00017 	ldw	r3,0(r5)
		}
	}
	mouse->frame->currentPanel = 1;
}

void drawAllSongsInList(int list_id){
  808e14:	dc800215 	stw	r18,8(sp)
  808e18:	dc400115 	stw	r17,4(sp)
	if (mouse->frame->elements[3]->buttons[list_id]->id != list_id){
  808e1c:	19800317 	ldw	r6,12(r3)
		}
	}
	mouse->frame->currentPanel = 1;
}

void drawAllSongsInList(int list_id){
  808e20:	dc000015 	stw	r16,0(sp)
	if (mouse->frame->elements[3]->buttons[list_id]->id != list_id){
  808e24:	30800117 	ldw	r2,4(r6)
  808e28:	1505883a 	add	r2,r2,r20
  808e2c:	10c00017 	ldw	r3,0(r2)
  808e30:	19400317 	ldw	r5,12(r3)
  808e34:	21400a26 	beq	r4,r5,808e60 <drawAllSongsInList+0x78>
		printf("No playlist with such ID\n");
  808e38:	010020f4 	movhi	r4,131
  808e3c:	210ddd04 	addi	r4,r4,14196
	}
	clearSongPanel();
	playlistButtonCollide(mouse->frame->elements[3]->buttons[list_id]);
	draw_notransparent(241, 13, mouse->frame->elements[3]->bg_image);
	mouse->frame->currentPanel = 2;
}
  808e40:	dfc00517 	ldw	ra,20(sp)
  808e44:	dd000417 	ldw	r20,16(sp)
  808e48:	dcc00317 	ldw	r19,12(sp)
  808e4c:	dc800217 	ldw	r18,8(sp)
  808e50:	dc400117 	ldw	r17,4(sp)
  808e54:	dc000017 	ldw	r16,0(sp)
  808e58:	dec00604 	addi	sp,sp,24
	mouse->frame->currentPanel = 1;
}

void drawAllSongsInList(int list_id){
	if (mouse->frame->elements[3]->buttons[list_id]->id != list_id){
		printf("No playlist with such ID\n");
  808e5c:	08221801 	jmpi	822180 <puts>
		return;
	}
	// TODO: call kill elements[0] on this playlist here
	if (mouse->frame->elements[3]->elements[0] != NULL){
  808e60:	34800017 	ldw	r18,0(r6)
  808e64:	90c00017 	ldw	r3,0(r18)
  808e68:	18001826 	beq	r3,zero,808ecc <drawAllSongsInList+0xe4>
}

void killSongInListPanel(struct Frame** this) {
	if(this == NULL || *this == NULL) return;
	int i;
	for(i = 1; i <= (*this)->button_size; i++) {
  808e6c:	18800317 	ldw	r2,12(r3)
  808e70:	00800a0e 	bge	zero,r2,808e9c <drawAllSongsInList+0xb4>
  808e74:	04400044 	movi	r17,1
  808e78:	04000104 	movi	r16,4
		killSongButton(&((*this)->buttons[i]));
  808e7c:	19000117 	ldw	r4,4(r3)
}

void killSongInListPanel(struct Frame** this) {
	if(this == NULL || *this == NULL) return;
	int i;
	for(i = 1; i <= (*this)->button_size; i++) {
  808e80:	8c400044 	addi	r17,r17,1
		killSongButton(&((*this)->buttons[i]));
  808e84:	8109883a 	add	r4,r16,r4
  808e88:	080071c0 	call	80071c <killSongButton>
}

void killSongInListPanel(struct Frame** this) {
	if(this == NULL || *this == NULL) return;
	int i;
	for(i = 1; i <= (*this)->button_size; i++) {
  808e8c:	90c00017 	ldw	r3,0(r18)
  808e90:	84000104 	addi	r16,r16,4
  808e94:	18800317 	ldw	r2,12(r3)
  808e98:	147ff80e 	bge	r2,r17,808e7c <drawAllSongsInList+0x94>
		killSongButton(&((*this)->buttons[i]));
	} killImage((*this)->bg_image);
  808e9c:	19000617 	ldw	r4,24(r3)
  808ea0:	0809bf80 	call	809bf8 <killImage>
	(*this)->mainFrame = NULL;
  808ea4:	90800017 	ldw	r2,0(r18)
  808ea8:	10000715 	stw	zero,28(r2)
	(*this)->drawFrame = NULL;
  808eac:	90c00017 	ldw	r3,0(r18)
	free((*this)->buttons);
  808eb0:	19000117 	ldw	r4,4(r3)
	int i;
	for(i = 1; i <= (*this)->button_size; i++) {
		killSongButton(&((*this)->buttons[i]));
	} killImage((*this)->bg_image);
	(*this)->mainFrame = NULL;
	(*this)->drawFrame = NULL;
  808eb4:	18000815 	stw	zero,32(r3)
	free((*this)->buttons);
  808eb8:	08216e80 	call	8216e8 <free>
	(*this)->buttons = NULL;
  808ebc:	91000017 	ldw	r4,0(r18)
  808ec0:	20000115 	stw	zero,4(r4)
	free((*this));
  808ec4:	08216e80 	call	8216e8 <free>
	(*this) = NULL;
  808ec8:	90000015 	stw	zero,0(r18)

void clearSongPanel(){
	int y = SONG_Y_POSITION;
	int i = 0;
	for (i = 0; i < 15; i++){
		alt_up_char_buffer_string(char_buffer, "               ", 61, y);
  808ecc:	04002134 	movhi	r16,132
  808ed0:	840a3704 	addi	r16,r16,10460
  808ed4:	81000017 	ldw	r4,0(r16)
  808ed8:	014020f4 	movhi	r5,131
  808edc:	294d9d04 	addi	r5,r5,13940
  808ee0:	01800f44 	movi	r6,61
  808ee4:	01c00104 	movi	r7,4
  808ee8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808eec:	81000017 	ldw	r4,0(r16)
  808ef0:	014020f4 	movhi	r5,131
  808ef4:	294d9d04 	addi	r5,r5,13940
  808ef8:	01800f44 	movi	r6,61
  808efc:	01c001c4 	movi	r7,7
  808f00:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808f04:	81000017 	ldw	r4,0(r16)
  808f08:	014020f4 	movhi	r5,131
  808f0c:	294d9d04 	addi	r5,r5,13940
  808f10:	01800f44 	movi	r6,61
  808f14:	01c00284 	movi	r7,10
  808f18:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808f1c:	81000017 	ldw	r4,0(r16)
  808f20:	014020f4 	movhi	r5,131
  808f24:	294d9d04 	addi	r5,r5,13940
  808f28:	01800f44 	movi	r6,61
  808f2c:	01c00344 	movi	r7,13
  808f30:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808f34:	81000017 	ldw	r4,0(r16)
  808f38:	014020f4 	movhi	r5,131
  808f3c:	294d9d04 	addi	r5,r5,13940
  808f40:	01800f44 	movi	r6,61
  808f44:	01c00404 	movi	r7,16
  808f48:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808f4c:	81000017 	ldw	r4,0(r16)
  808f50:	014020f4 	movhi	r5,131
  808f54:	294d9d04 	addi	r5,r5,13940
  808f58:	01800f44 	movi	r6,61
  808f5c:	01c004c4 	movi	r7,19
  808f60:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808f64:	81000017 	ldw	r4,0(r16)
  808f68:	014020f4 	movhi	r5,131
  808f6c:	294d9d04 	addi	r5,r5,13940
  808f70:	01800f44 	movi	r6,61
  808f74:	01c00584 	movi	r7,22
  808f78:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808f7c:	81000017 	ldw	r4,0(r16)
  808f80:	014020f4 	movhi	r5,131
  808f84:	294d9d04 	addi	r5,r5,13940
  808f88:	01800f44 	movi	r6,61
  808f8c:	01c00644 	movi	r7,25
  808f90:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808f94:	81000017 	ldw	r4,0(r16)
  808f98:	014020f4 	movhi	r5,131
  808f9c:	294d9d04 	addi	r5,r5,13940
  808fa0:	01800f44 	movi	r6,61
  808fa4:	01c00704 	movi	r7,28
  808fa8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808fac:	81000017 	ldw	r4,0(r16)
  808fb0:	014020f4 	movhi	r5,131
  808fb4:	294d9d04 	addi	r5,r5,13940
  808fb8:	01800f44 	movi	r6,61
  808fbc:	01c007c4 	movi	r7,31
  808fc0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808fc4:	81000017 	ldw	r4,0(r16)
  808fc8:	014020f4 	movhi	r5,131
  808fcc:	294d9d04 	addi	r5,r5,13940
  808fd0:	01800f44 	movi	r6,61
  808fd4:	01c00884 	movi	r7,34
  808fd8:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808fdc:	81000017 	ldw	r4,0(r16)
  808fe0:	014020f4 	movhi	r5,131
  808fe4:	294d9d04 	addi	r5,r5,13940
  808fe8:	01800f44 	movi	r6,61
  808fec:	01c00944 	movi	r7,37
  808ff0:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  808ff4:	81000017 	ldw	r4,0(r16)
  808ff8:	014020f4 	movhi	r5,131
  808ffc:	294d9d04 	addi	r5,r5,13940
  809000:	01800f44 	movi	r6,61
  809004:	01c00a04 	movi	r7,40
  809008:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  80900c:	81000017 	ldw	r4,0(r16)
  809010:	014020f4 	movhi	r5,131
  809014:	294d9d04 	addi	r5,r5,13940
  809018:	01800f44 	movi	r6,61
  80901c:	01c00ac4 	movi	r7,43
  809020:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
  809024:	81000017 	ldw	r4,0(r16)
  809028:	014020f4 	movhi	r5,131
  80902c:	294d9d04 	addi	r5,r5,13940
  809030:	01800f44 	movi	r6,61
  809034:	01c00b84 	movi	r7,46
  809038:	082c8c40 	call	82c8c4 <alt_up_char_buffer_string>
	// TODO: call kill elements[0] on this playlist here
	if (mouse->frame->elements[3]->elements[0] != NULL){
		killSongInListPanel(&(mouse->frame->elements[3]->elements[0]));
	}
	clearSongPanel();
	playlistButtonCollide(mouse->frame->elements[3]->buttons[list_id]);
  80903c:	98c00017 	ldw	r3,0(r19)
  809040:	18800317 	ldw	r2,12(r3)
  809044:	11000017 	ldw	r4,0(r2)
  809048:	20c00317 	ldw	r3,12(r4)
  80904c:	18800117 	ldw	r2,4(r3)
  809050:	a085883a 	add	r2,r20,r2
  809054:	11000017 	ldw	r4,0(r2)
  809058:	08010d00 	call	8010d0 <playlistButtonCollide>
	draw_notransparent(241, 13, mouse->frame->elements[3]->bg_image);
  80905c:	99800017 	ldw	r6,0(r19)
  809060:	01003c44 	movi	r4,241
  809064:	01400344 	movi	r5,13
  809068:	30800317 	ldw	r2,12(r6)
  80906c:	10c00017 	ldw	r3,0(r2)
  809070:	19c00317 	ldw	r7,12(r3)
  809074:	39800617 	ldw	r6,24(r7)
  809078:	08097380 	call	809738 <draw_notransparent>
	mouse->frame->currentPanel = 2;
  80907c:	98800017 	ldw	r2,0(r19)
  809080:	00c00084 	movi	r3,2
  809084:	11000317 	ldw	r4,12(r2)
  809088:	20c00415 	stw	r3,16(r4)
}
  80908c:	dfc00517 	ldw	ra,20(sp)
  809090:	dd000417 	ldw	r20,16(sp)
  809094:	dcc00317 	ldw	r19,12(sp)
  809098:	dc800217 	ldw	r18,8(sp)
  80909c:	dc400117 	ldw	r17,4(sp)
  8090a0:	dc000017 	ldw	r16,0(sp)
  8090a4:	dec00604 	addi	sp,sp,24
  8090a8:	f800283a 	ret

008090ac <initMainFrame>:
	f->currentPlaylist = 0;
	f->elements = NULL;
	return f;
}

struct Frame* initMainFrame(){
  8090ac:	defff604 	addi	sp,sp,-40
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8090b0:	01000904 	movi	r4,36
	f->currentPlaylist = 0;
	f->elements = NULL;
	return f;
}

struct Frame* initMainFrame(){
  8090b4:	dfc00915 	stw	ra,36(sp)
  8090b8:	ddc00815 	stw	r23,32(sp)
  8090bc:	dd800715 	stw	r22,28(sp)
  8090c0:	dd400615 	stw	r21,24(sp)
  8090c4:	dd000515 	stw	r20,20(sp)
  8090c8:	dcc00415 	stw	r19,16(sp)
  8090cc:	dc800315 	stw	r18,12(sp)
  8090d0:	dc400215 	stw	r17,8(sp)
  8090d4:	dc000115 	stw	r16,4(sp)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8090d8:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
  8090dc:	10000215 	stw	zero,8(r2)
	return f;
}

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
  8090e0:	01000604 	movi	r4,24
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	f->currentPlaylist = 0;
  8090e4:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  8090e8:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8090ec:	102b883a 	mov	r21,r2
	return f;
}

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
  8090f0:	08216fc0 	call	8216fc <malloc>
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8090f4:	01000904 	movi	r4,36
	return f;
}

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
  8090f8:	102d883a 	mov	r22,r2
  8090fc:	a8800015 	stw	r2,0(r21)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  809100:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
  809104:	10000215 	stw	zero,8(r2)
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  809108:	01000204 	movi	r4,8
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	f->currentPlaylist = 0;
  80910c:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  809110:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  809114:	1023883a 	mov	r17,r2
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  809118:	08216fc0 	call	8216fc <malloc>
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
  80911c:	880f883a 	mov	r7,r17
  809120:	01000144 	movi	r4,5
  809124:	014020f4 	movhi	r5,131
  809128:	294db104 	addi	r5,r5,14020
  80912c:	000d883a 	mov	r6,zero
	return f;
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
  809130:	88800115 	stw	r2,4(r17)
  809134:	1027883a 	mov	r19,r2
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
  809138:	0800a580 	call	800a58 <initMenuButton>
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
  80913c:	8d000117 	ldw	r20,4(r17)
  809140:	880f883a 	mov	r7,r17
  809144:	014020f4 	movhi	r5,131
  809148:	294db404 	addi	r5,r5,14032
  80914c:	01800044 	movi	r6,1
  809150:	010008c4 	movi	r4,35
}

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
  809154:	98800015 	stw	r2,0(r19)
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
  809158:	0800a580 	call	800a58 <initMenuButton>
	mf->elements = NULL;
	mf->drawFrame = drawMenuFrame;
	mf->button_size = 2;
  80915c:	00c00084 	movi	r3,2

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame(f);
  809160:	ac800017 	ldw	r18,0(r21)
}

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
  809164:	b4400015 	stw	r17,0(r22)

struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
  809168:	a0800115 	stw	r2,4(r20)
	mf->elements = NULL;
	mf->drawFrame = drawMenuFrame;
  80916c:	00802034 	movhi	r2,128
  809170:	109f1604 	addi	r2,r2,31832
	mf->button_size = 2;
  809174:	88c00315 	stw	r3,12(r17)

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame(f);
  809178:	a809883a 	mov	r4,r21
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
	mf->elements = NULL;
	mf->drawFrame = drawMenuFrame;
  80917c:	88800815 	stw	r2,32(r17)
struct Frame* initMenuFrame(struct Frame* mainFrame){
	struct Frame* mf = initFrame();
	mf->buttons = (struct Button**)malloc(2*sizeof(struct Button*));
	mf->buttons[0] = initMenuButton(5, "All Songs", 0, mf);
	mf->buttons[1] = initMenuButton(35, "Playlists", 1, mf);
	mf->elements = NULL;
  809180:	88000015 	stw	zero,0(r17)
	mf->drawFrame = drawMenuFrame;
	mf->button_size = 2;
	mf->mainFrame = mainFrame;
  809184:	8d400715 	stw	r21,28(r17)
	mf->bg_image = NULL;
  809188:	88000615 	stw	zero,24(r17)

struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame(f);
  80918c:	0808a540 	call	808a54 <initActionFrame>
  809190:	90800115 	stw	r2,4(r18)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  809194:	01000904 	movi	r4,36
struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame(f);
	f->elements[2] = initSongPanel(f);
  809198:	adc00017 	ldw	r23,0(r21)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  80919c:	08216fc0 	call	8216fc <malloc>
	f->element_size = 0;
  8091a0:	10000215 	stw	zero,8(r2)

struct Frame* initSongPanel(struct Frame* frame){
	int i = 1;
	int init_song_y = 4;
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(15*sizeof(struct Button*));
  8091a4:	01000f04 	movi	r4,60
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
	f->element_size = 0;
	f->currentPlaylist = 0;
  8091a8:	10000515 	stw	zero,20(r2)
	f->elements = NULL;
  8091ac:	10000015 	stw	zero,0(r2)
#include "Frame.h"

struct Frame* initFrame(){
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  8091b0:	1023883a 	mov	r17,r2

struct Frame* initSongPanel(struct Frame* frame){
	int i = 1;
	int init_song_y = 4;
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(15*sizeof(struct Button*));
  8091b4:	08216fc0 	call	8216fc <malloc>
  8091b8:	88800115 	stw	r2,4(r17)
	sp->drawFrame = drawSongPanel;
  8091bc:	00802034 	movhi	r2,128
  8091c0:	109e0f04 	addi	r2,r2,30780
  8091c4:	88800815 	stw	r2,32(r17)
	while((sp->bg_image = loadSDImage("AND2.BMP")) == NULL);
  8091c8:	010020f4 	movhi	r4,131
  8091cc:	210da404 	addi	r4,r4,13968
  8091d0:	08098080 	call	809808 <loadSDImage>
  8091d4:	88800615 	stw	r2,24(r17)
  8091d8:	103ffb26 	beq	r2,zero,8091c8 <initMainFrame+0x11c>
	sp->mainFrame = frame;
	if (db.num_of_songs > 14){
  8091dc:	00802134 	movhi	r2,132
  8091e0:	108a6204 	addi	r2,r2,10632
  8091e4:	10c0a717 	ldw	r3,668(r2)
  8091e8:	01000384 	movi	r4,14
	int init_song_y = 4;
	struct Frame* sp = initFrame();
	sp->buttons = (struct Button**)malloc(15*sizeof(struct Button*));
	sp->drawFrame = drawSongPanel;
	while((sp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	sp->mainFrame = frame;
  8091ec:	8d400715 	stw	r21,28(r17)
	if (db.num_of_songs > 14){
  8091f0:	20c03c0e 	bge	r4,r3,8092e4 <initMainFrame+0x238>
		sp->button_size = 14; // starts from 1!!
	} else {
		sp->button_size = db.num_of_songs;
	}
	sp->buttons[0] = NULL;
  8091f4:	88800117 	ldw	r2,4(r17)
	sp->buttons = (struct Button**)malloc(15*sizeof(struct Button*));
	sp->drawFrame = drawSongPanel;
	while((sp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	sp->mainFrame = frame;
	if (db.num_of_songs > 14){
		sp->button_size = 14; // starts from 1!!
  8091f8:	89000315 	stw	r4,12(r17)
	} else {
		sp->button_size = db.num_of_songs;
	}
	sp->buttons[0] = NULL;
  8091fc:	10000015 	stw	zero,0(r2)
  809200:	05800104 	movi	r22,4
  809204:	04800044 	movi	r18,1
  809208:	b029883a 	mov	r20,r22
  80920c:	04c02134 	movhi	r19,132
  809210:	9cca9904 	addi	r19,r19,10852
  809214:	00000106 	br	80921c <initMainFrame+0x170>
  809218:	88800117 	ldw	r2,4(r17)
	for (i = 1; i <= sp->button_size; i++){
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, i, sp);
  80921c:	99800017 	ldw	r6,0(r19)
  809220:	b00b883a 	mov	r5,r22
  809224:	900f883a 	mov	r7,r18
  809228:	31800104 	addi	r6,r6,4
  80922c:	01000f44 	movi	r4,61
  809230:	a0a1883a 	add	r16,r20,r2
  809234:	dc400015 	stw	r17,0(sp)
  809238:	080097c0 	call	80097c <initSongButton>
		sp->button_size = 14; // starts from 1!!
	} else {
		sp->button_size = db.num_of_songs;
	}
	sp->buttons[0] = NULL;
	for (i = 1; i <= sp->button_size; i++){
  80923c:	88c00317 	ldw	r3,12(r17)
  809240:	94800044 	addi	r18,r18,1
		sp->buttons[i] = initSongButton(61, init_song_y, db.songs[i]->song_name, i, sp);
  809244:	80800015 	stw	r2,0(r16)
		init_song_y = init_song_y+3;
  809248:	b58000c4 	addi	r22,r22,3
		sp->button_size = 14; // starts from 1!!
	} else {
		sp->button_size = db.num_of_songs;
	}
	sp->buttons[0] = NULL;
	for (i = 1; i <= sp->button_size; i++){
  80924c:	a5000104 	addi	r20,r20,4
  809250:	9cc00104 	addi	r19,r19,4
  809254:	1cbff00e 	bge	r3,r18,809218 <initMainFrame+0x16c>
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame(f);
	f->elements[2] = initSongPanel(f);
	f->elements[3] = initPlaylistPanel(f);
  809258:	ac000017 	ldw	r16,0(r21)
struct Frame* initMainFrame(){
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame(f);
	f->elements[2] = initSongPanel(f);
  80925c:	bc400215 	stw	r17,8(r23)
	f->elements[3] = initPlaylistPanel(f);
  809260:	a809883a 	mov	r4,r21
  809264:	0808c740 	call	808c74 <initPlaylistPanel>
	f->elements[4] = initScrollFrame(f);
  809268:	ac400017 	ldw	r17,0(r21)
  80926c:	a809883a 	mov	r4,r21
	struct Frame* f = initFrame();
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame(f);
	f->elements[2] = initSongPanel(f);
	f->elements[3] = initPlaylistPanel(f);
  809270:	80800315 	stw	r2,12(r16)
	f->elements[4] = initScrollFrame(f);
  809274:	08087880 	call	808788 <initScrollFrame>
	f->elements[5] = initVolumeFrame(f);
  809278:	ac000017 	ldw	r16,0(r21)
	f->elements = (struct Frame**)malloc(6*sizeof(struct Frame*));
	f->elements[0] = initMenuFrame(f);
	f->elements[1] = initActionFrame(f);
	f->elements[2] = initSongPanel(f);
	f->elements[3] = initPlaylistPanel(f);
	f->elements[4] = initScrollFrame(f);
  80927c:	88800415 	stw	r2,16(r17)
	f->elements[5] = initVolumeFrame(f);
  809280:	a809883a 	mov	r4,r21
  809284:	08086800 	call	808680 <initVolumeFrame>
  809288:	80800515 	stw	r2,20(r16)
	f->buttons = NULL;
	f->bg_image = NULL;
	f->mainFrame = NULL;
	f->drawFrame = drawMainFrame;
  80928c:	00802034 	movhi	r2,128
  809290:	109f4304 	addi	r2,r2,32012
  809294:	a8800815 	stw	r2,32(r21)
	f->element_size = 6;
  809298:	00c00184 	movi	r3,6
	f->button_size = 0;
	f->currentPanel = 0; // 0:SONGS, 1:PLAYLIST
	return f;
}
  80929c:	a805883a 	mov	r2,r21
	f->elements[5] = initVolumeFrame(f);
	f->buttons = NULL;
	f->bg_image = NULL;
	f->mainFrame = NULL;
	f->drawFrame = drawMainFrame;
	f->element_size = 6;
  8092a0:	a8c00215 	stw	r3,8(r21)
	f->elements[1] = initActionFrame(f);
	f->elements[2] = initSongPanel(f);
	f->elements[3] = initPlaylistPanel(f);
	f->elements[4] = initScrollFrame(f);
	f->elements[5] = initVolumeFrame(f);
	f->buttons = NULL;
  8092a4:	a8000115 	stw	zero,4(r21)
	f->bg_image = NULL;
  8092a8:	a8000615 	stw	zero,24(r21)
	f->mainFrame = NULL;
  8092ac:	a8000715 	stw	zero,28(r21)
	f->drawFrame = drawMainFrame;
	f->element_size = 6;
	f->button_size = 0;
  8092b0:	a8000315 	stw	zero,12(r21)
	f->currentPanel = 0; // 0:SONGS, 1:PLAYLIST
  8092b4:	a8000415 	stw	zero,16(r21)
	return f;
}
  8092b8:	dfc00917 	ldw	ra,36(sp)
  8092bc:	ddc00817 	ldw	r23,32(sp)
  8092c0:	dd800717 	ldw	r22,28(sp)
  8092c4:	dd400617 	ldw	r21,24(sp)
  8092c8:	dd000517 	ldw	r20,20(sp)
  8092cc:	dcc00417 	ldw	r19,16(sp)
  8092d0:	dc800317 	ldw	r18,12(sp)
  8092d4:	dc400217 	ldw	r17,8(sp)
  8092d8:	dc000117 	ldw	r16,4(sp)
  8092dc:	dec00a04 	addi	sp,sp,40
  8092e0:	f800283a 	ret
	if (db.num_of_songs > 14){
		sp->button_size = 14; // starts from 1!!
	} else {
		sp->button_size = db.num_of_songs;
	}
	sp->buttons[0] = NULL;
  8092e4:	88800117 	ldw	r2,4(r17)
	while((sp->bg_image = loadSDImage("AND2.BMP")) == NULL);
	sp->mainFrame = frame;
	if (db.num_of_songs > 14){
		sp->button_size = 14; // starts from 1!!
	} else {
		sp->button_size = db.num_of_songs;
  8092e8:	88c00315 	stw	r3,12(r17)
	}
	sp->buttons[0] = NULL;
  8092ec:	10000015 	stw	zero,0(r2)
	for (i = 1; i <= sp->button_size; i++){
  8092f0:	00ffc316 	blt	zero,r3,809200 <initMainFrame+0x154>
  8092f4:	003fd806 	br	809258 <initMainFrame+0x1ac>

008092f8 <getColor>:
		}
	}
}
/*helper function to convert 32 bit color code to 16 bit color*/

int getColor(int red, int green, int blue) {
  8092f8:	2005d0fa 	srai	r2,r4,3
  8092fc:	280bd0ba 	srai	r5,r5,2
  809300:	300dd0fa 	srai	r6,r6,3
  809304:	100492fa 	slli	r2,r2,11
  809308:	280a917a 	slli	r5,r5,5
  80930c:	1145883a 	add	r2,r2,r5
	return (int)(((red>>3)<<11) + ((green>>2)<<5) + (blue>>3));
}
  809310:	1185883a 	add	r2,r2,r6
  809314:	f800283a 	ret

00809318 <getColor555>:
int getColor555(int color555) {
	int color = color555&0x7FFF;
  809318:	211fffcc 	andi	r4,r4,32767
  80931c:	209ff80c 	andi	r2,r4,32736
  809320:	1085883a 	add	r2,r2,r2
  809324:	210007cc 	andi	r4,r4,31
	return (color&0x7C00)*2+(color&0x03E0)*2+(color&0x1F);
}
  809328:	1105883a 	add	r2,r2,r4
  80932c:	f800283a 	ret

00809330 <addImage>:
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
	curr->end->next = n;
	curr->end = n;
	curr->first->prev = n;
  809330:	21800917 	ldw	r6,36(r4)
}
/*
 * add an image to the animation
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
  809334:	20800a17 	ldw	r2,40(r4)
	curr->end->next = n;
	curr->end = n;
  809338:	21400a15 	stw	r5,40(r4)
	curr->first->prev = n;
	n->first = curr->first;
  80933c:	29800915 	stw	r6,36(r5)
	n->next = curr->first;
  809340:	20c00917 	ldw	r3,36(r4)
/*
 * add an image to the animation
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
	curr->end->next = n;
  809344:	11400815 	stw	r5,32(r2)
}
/*
 * add an image to the animation
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
  809348:	28800715 	stw	r2,28(r5)
	curr->end->next = n;
	curr->end = n;
	curr->first->prev = n;
	n->first = curr->first;
	n->next = curr->first;
  80934c:	28c00815 	stw	r3,32(r5)
 */
void addImage(struct Image *curr, struct Image* n) {
	n->prev = curr->end;
	curr->end->next = n;
	curr->end = n;
	curr->first->prev = n;
  809350:	31400715 	stw	r5,28(r6)
	n->first = curr->first;
	n->next = curr->first;
}
  809354:	f800283a 	ret

00809358 <setImagePos>:
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  809358:	20800117 	ldw	r2,4(r4)
	this->prev_y = this->y;
  80935c:	20c00217 	ldw	r3,8(r4)
	this->x = pos_x;
  809360:	21400115 	stw	r5,4(r4)
	this->y = pos_y;
  809364:	21800215 	stw	r6,8(r4)
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  809368:	20800315 	stw	r2,12(r4)
	this->prev_y = this->y;
  80936c:	20c00415 	stw	r3,16(r4)
	this->x = pos_x;
	this->y = pos_y;
}
  809370:	f800283a 	ret

00809374 <drawEqulizer>:
	}
}

void drawEqulizer(int* data, int width) {
	int i;
	for(i = 0; i < width; i ++) {
  809374:	0140280e 	bge	zero,r5,809418 <drawEqulizer+0xa4>
  809378:	200f883a 	mov	r7,r4
  80937c:	0013883a 	mov	r9,zero
		while(data[i] > 0) {
  809380:	39000017 	ldw	r4,0(r7)
  809384:	01000416 	blt	zero,r4,809398 <drawEqulizer+0x24>
  809388:	00002006 	br	80940c <drawEqulizer+0x98>
			if(data[i] < 110) {
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((128 - (data[i]))*320+i*2+10)<<1, 0xCCCC);
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((128 - (data[i]))*320+i*2+1+10)<<1, 0xCCCC);
			}
			data[i]--;
  80938c:	213fffc4 	addi	r4,r4,-1
  809390:	39000015 	stw	r4,0(r7)
}

void drawEqulizer(int* data, int width) {
	int i;
	for(i = 0; i < width; i ++) {
		while(data[i] > 0) {
  809394:	01001d0e 	bge	zero,r4,80940c <drawEqulizer+0x98>
			if(data[i] < 110) {
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((128 - (data[i]))*320+i*2+10)<<1, 0xCCCC);
  809398:	02002004 	movi	r8,128
  80939c:	4105c83a 	sub	r2,r8,r4
  8093a0:	10802824 	muli	r2,r2,160

void drawEqulizer(int* data, int width) {
	int i;
	for(i = 0; i < width; i ++) {
		while(data[i] > 0) {
			if(data[i] < 110) {
  8093a4:	00c01b44 	movi	r3,109
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((128 - (data[i]))*320+i*2+10)<<1, 0xCCCC);
  8093a8:	02b33314 	movui	r10,52428
  8093ac:	4885883a 	add	r2,r9,r2
  8093b0:	1085883a 	add	r2,r2,r2
  8093b4:	10800284 	addi	r2,r2,10
  8093b8:	108d883a 	add	r6,r2,r2

void drawEqulizer(int* data, int width) {
	int i;
	for(i = 0; i < width; i ++) {
		while(data[i] > 0) {
			if(data[i] < 110) {
  8093bc:	193ff316 	blt	r3,r4,80938c <drawEqulizer+0x18>
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((128 - (data[i]))*320+i*2+10)<<1, 0xCCCC);
  8093c0:	d0a75d17 	ldw	r2,-25228(gp)
  8093c4:	10c00b17 	ldw	r3,44(r2)
  8093c8:	30c7883a 	add	r3,r6,r3
  8093cc:	1a80002d 	sthio	r10,0(r3)
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((128 - (data[i]))*320+i*2+1+10)<<1, 0xCCCC);
  8093d0:	38800017 	ldw	r2,0(r7)
  8093d4:	d0e75d17 	ldw	r3,-25228(gp)
  8093d8:	4085c83a 	sub	r2,r8,r2
  8093dc:	10802824 	muli	r2,r2,160
  8093e0:	19000b17 	ldw	r4,44(r3)
  8093e4:	4885883a 	add	r2,r9,r2
  8093e8:	1085883a 	add	r2,r2,r2
  8093ec:	108002c4 	addi	r2,r2,11
  8093f0:	1085883a 	add	r2,r2,r2
  8093f4:	1105883a 	add	r2,r2,r4
  8093f8:	1280002d 	sthio	r10,0(r2)
  8093fc:	39000017 	ldw	r4,0(r7)
			}
			data[i]--;
  809400:	213fffc4 	addi	r4,r4,-1
  809404:	39000015 	stw	r4,0(r7)
}

void drawEqulizer(int* data, int width) {
	int i;
	for(i = 0; i < width; i ++) {
		while(data[i] > 0) {
  809408:	013fe316 	blt	zero,r4,809398 <drawEqulizer+0x24>
	}
}

void drawEqulizer(int* data, int width) {
	int i;
	for(i = 0; i < width; i ++) {
  80940c:	4a400044 	addi	r9,r9,1
  809410:	39c00104 	addi	r7,r7,4
  809414:	2a7fda1e 	bne	r5,r9,809380 <drawEqulizer+0xc>
  809418:	f800283a 	ret

0080941c <drawBox>:
	this->prev_y = this->y;
	this->x = pos_x;
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
  80941c:	defffb04 	addi	sp,sp,-20
  809420:	dc800215 	stw	r18,8(sp)
  809424:	dc000015 	stw	r16,0(sp)
  809428:	dd000415 	stw	r20,16(sp)
  80942c:	dcc00315 	stw	r19,12(sp)
  809430:	dc400115 	stw	r17,4(sp)
  809434:	2025883a 	mov	r18,r4
  809438:	281b883a 	mov	r13,r5
  80943c:	dc000517 	ldw	r16,20(sp)
	if(x1 < 0 || y1 < 0) return;
  809440:	20002d16 	blt	r4,zero,8094f8 <drawBox+0xdc>
  809444:	28002c16 	blt	r5,zero,8094f8 <drawBox+0xdc>
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  809448:	3127c83a 	sub	r19,r6,r4
  80944c:	394fc83a 	sub	r7,r7,r5
	for(i = 0; i < w; i++) {
  809450:	04c0290e 	bge	zero,r19,8094f8 <drawBox+0xdc>
  809454:	28805024 	muli	r2,r5,320
  809458:	0023883a 	mov	r17,zero
  80945c:	3d000050 	cmplti	r20,r7,1
  809460:	2085883a 	add	r2,r4,r2
  809464:	108d883a 	add	r6,r2,r2
		for(j = 0; j < h; j++) {
  809468:	a000201e 	bne	r20,zero,8094ec <drawBox+0xd0>
  80946c:	8c9d883a 	add	r14,r17,r18
  809470:	3013883a 	mov	r9,r6
  809474:	0011883a 	mov	r8,zero
  809478:	03c02134 	movhi	r15,132
  80947c:	7bca3a04 	addi	r15,r15,10472
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809480:	7a800017 	ldw	r10,0(r15)
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
  809484:	434b883a 	add	r5,r8,r13
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809488:	02c00244 	movi	r11,9
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  80948c:	50c00017 	ldw	r3,0(r10)
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
		    	*(mouse->overlapImg->buffer+dy*10 + dx) = color;
	    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  809490:	d3275d17 	ldw	r12,-25228(gp)
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809494:	18800017 	ldw	r2,0(r3)
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809498:	11000017 	ldw	r4,0(r2)
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  80949c:	10c00117 	ldw	r3,4(r2)
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  8094a0:	7109c83a 	sub	r4,r14,r4
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  8094a4:	28cbc83a 	sub	r5,r5,r3
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  8094a8:	59000a36 	bltu	r11,r4,8094d4 <drawBox+0xb8>
  8094ac:	28000916 	blt	r5,zero,8094d4 <drawBox+0xb8>
		    	*(mouse->overlapImg->buffer+dy*10 + dx) = color;
  8094b0:	28c002a4 	muli	r3,r5,10
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  8094b4:	59400716 	blt	r11,r5,8094d4 <drawBox+0xb8>
		    	*(mouse->overlapImg->buffer+dy*10 + dx) = color;
  8094b8:	50800117 	ldw	r2,4(r10)
  8094bc:	1907883a 	add	r3,r3,r4
  8094c0:	18c7883a 	add	r3,r3,r3
  8094c4:	11000017 	ldw	r4,0(r2)
  8094c8:	18c7883a 	add	r3,r3,r3
  8094cc:	1907883a 	add	r3,r3,r4
  8094d0:	1c000015 	stw	r16,0(r3)
	    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  8094d4:	60800b17 	ldw	r2,44(r12)
  8094d8:	4885883a 	add	r2,r9,r2
  8094dc:	1400002d 	sthio	r16,0(r2)

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
  8094e0:	42000044 	addi	r8,r8,1
  8094e4:	4a40a004 	addi	r9,r9,640
  8094e8:	3a3fe51e 	bne	r7,r8,809480 <drawBox+0x64>
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
  8094ec:	8c400044 	addi	r17,r17,1
  8094f0:	31800084 	addi	r6,r6,2
  8094f4:	9c7fdc1e 	bne	r19,r17,809468 <drawBox+0x4c>
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
		    	*(mouse->overlapImg->buffer+dy*10 + dx) = color;
	    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
		}
	}
}
  8094f8:	dd000417 	ldw	r20,16(sp)
  8094fc:	dcc00317 	ldw	r19,12(sp)
  809500:	dc800217 	ldw	r18,8(sp)
  809504:	dc400117 	ldw	r17,4(sp)
  809508:	dc000017 	ldw	r16,0(sp)
  80950c:	dec00504 	addi	sp,sp,20
  809510:	f800283a 	ret

00809514 <initImage>:

/*
 * Constructor of Animation; start == 1 if this animation contains the first image
 * in the sequence;
 */
struct Image* initImage(int* img, int start, int width, int height) {
  809514:	defffb04 	addi	sp,sp,-20
  809518:	dcc00315 	stw	r19,12(sp)
  80951c:	dc800215 	stw	r18,8(sp)
  809520:	dc400115 	stw	r17,4(sp)
  809524:	dc000015 	stw	r16,0(sp)
  809528:	2025883a 	mov	r18,r4
  80952c:	2827883a 	mov	r19,r5
  809530:	3021883a 	mov	r16,r6
  809534:	3823883a 	mov	r17,r7
  809538:	dfc00415 	stw	ra,16(sp)
  80953c:	00000106 	br	809544 <initImage+0x30>
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
  809540:	08221800 	call	822180 <puts>
  809544:	01000b04 	movi	r4,44
  809548:	08216fc0 	call	8216fc <malloc>
  80954c:	010020f4 	movhi	r4,131
  809550:	210de404 	addi	r4,r4,14224
  809554:	103ffa26 	beq	r2,zero,809540 <initImage+0x2c>
	a->width = width;
  809558:	14000615 	stw	r16,24(r2)
	a->height = height;
  80955c:	14400515 	stw	r17,20(r2)
	a->x = a->y = a->prev_x = a->prev_y = 0;
	a->buffer = img;
  809560:	14800015 	stw	r18,0(r2)
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
	a->width = width;
	a->height = height;
	a->x = a->y = a->prev_x = a->prev_y = 0;
  809564:	10000415 	stw	zero,16(r2)
  809568:	10000315 	stw	zero,12(r2)
  80956c:	10000215 	stw	zero,8(r2)
  809570:	10000115 	stw	zero,4(r2)
	a->buffer = img;
	a->prev = a;
  809574:	10800715 	stw	r2,28(r2)
	a->next = a;
  809578:	10800815 	stw	r2,32(r2)
	a->end = a;
  80957c:	10800a15 	stw	r2,40(r2)
	if(start > 0)
  809580:	04c0080e 	bge	zero,r19,8095a4 <initImage+0x90>
		a->first = a;
  809584:	10800915 	stw	r2,36(r2)
	else
		a->first = NULL;
	return a;
}
  809588:	dfc00417 	ldw	ra,16(sp)
  80958c:	dcc00317 	ldw	r19,12(sp)
  809590:	dc800217 	ldw	r18,8(sp)
  809594:	dc400117 	ldw	r17,4(sp)
  809598:	dc000017 	ldw	r16,0(sp)
  80959c:	dec00504 	addi	sp,sp,20
  8095a0:	f800283a 	ret
	a->next = a;
	a->end = a;
	if(start > 0)
		a->first = a;
	else
		a->first = NULL;
  8095a4:	10000915 	stw	zero,36(r2)
	return a;
}
  8095a8:	dfc00417 	ldw	ra,16(sp)
  8095ac:	dcc00317 	ldw	r19,12(sp)
  8095b0:	dc800217 	ldw	r18,8(sp)
  8095b4:	dc400117 	ldw	r17,4(sp)
  8095b8:	dc000017 	ldw	r16,0(sp)
  8095bc:	dec00504 	addi	sp,sp,20
  8095c0:	f800283a 	ret

008095c4 <initVGA>:
alt_up_pixel_buffer_dma_dev* pixel_buffer;
alt_up_char_buffer_dev* char_buffer;
/*
* this function clear the screen and set up pixel buffers for graphics
*/
void initVGA() {
  8095c4:	deffff04 	addi	sp,sp,-4
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");
  8095c8:	010020f4 	movhi	r4,131
  8095cc:	210ded04 	addi	r4,r4,14260
alt_up_pixel_buffer_dma_dev* pixel_buffer;
alt_up_char_buffer_dev* char_buffer;
/*
* this function clear the screen and set up pixel buffers for graphics
*/
void initVGA() {
  8095d0:	dfc00015 	stw	ra,0(sp)
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");
  8095d4:	082d1cc0 	call	82d1cc <alt_up_pixel_buffer_dma_open_dev>

	//text on screen initialization
	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  8095d8:	010020f4 	movhi	r4,131
  8095dc:	210df304 	addi	r4,r4,14284
/*
* this function clear the screen and set up pixel buffers for graphics
*/
void initVGA() {
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");
  8095e0:	d0a75d15 	stw	r2,-25228(gp)

	//text on screen initialization
	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  8095e4:	082c99c0 	call	82c99c <alt_up_char_buffer_open_dev>
	alt_up_char_buffer_init(char_buffer);
  8095e8:	1009883a 	mov	r4,r2
void initVGA() {
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");

	//text on screen initialization
	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  8095ec:	d0a75c15 	stw	r2,-25232(gp)
	alt_up_char_buffer_init(char_buffer);
  8095f0:	082c9a80 	call	82c9a8 <alt_up_char_buffer_init>
	// they only provide a function to change the background buffer address, so
	// we must set that, and then swap it to the foreground.
	unsigned int pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
	unsigned int pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320*240*2);

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,pixel_buffer_addr1);
  8095f4:	d1275d17 	ldw	r4,-25228(gp)
  8095f8:	01404034 	movhi	r5,256
  8095fc:	082d1a40 	call	82d1a4 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	// Swap background and foreground buffers
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  809600:	d1275d17 	ldw	r4,-25228(gp)
  809604:	082d0b00 	call	82d0b0 <alt_up_pixel_buffer_dma_swap_buffers>
	// Wait for the swap to complete
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  809608:	d1275d17 	ldw	r4,-25228(gp)
  80960c:	082d1940 	call	82d194 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  809610:	103ffd1e 	bne	r2,zero,809608 <initVGA+0x44>

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,pixel_buffer_addr2);
  809614:	d1275d17 	ldw	r4,-25228(gp)
  809618:	014040b4 	movhi	r5,258
  80961c:	29560004 	addi	r5,r5,22528
  809620:	082d1a40 	call	82d1a4 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  809624:	d1275d17 	ldw	r4,-25228(gp)
  809628:	000b883a 	mov	r5,zero
  80962c:	082d0080 	call	82d008 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
  809630:	d1275d17 	ldw	r4,-25228(gp)
  809634:	01400044 	movi	r5,1
  809638:	082d0080 	call	82d008 <alt_up_pixel_buffer_dma_clear_screen>

	//Swap background and foreground buffers
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  80963c:	d1275d17 	ldw	r4,-25228(gp)
  809640:	082d0b00 	call	82d0b0 <alt_up_pixel_buffer_dma_swap_buffers>
	//Wait for the swap to complete
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  809644:	d1275d17 	ldw	r4,-25228(gp)
  809648:	082d1940 	call	82d194 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  80964c:	103ffd1e 	bne	r2,zero,809644 <initVGA+0x80>

}
  809650:	dfc00017 	ldw	ra,0(sp)
  809654:	dec00104 	addi	sp,sp,4
  809658:	f800283a 	ret

0080965c <draw>:
}
/*
 * This function draw the image and set the previous position for the image
 */
void draw(int pos_x, int pos_y, struct Image* this) {
	if(this == NULL || this->buffer == NULL) return;
  80965c:	30003526 	beq	r6,zero,809734 <draw+0xd8>
  809660:	30800017 	ldw	r2,0(r6)
  809664:	10003326 	beq	r2,zero,809734 <draw+0xd8>
	if(pos_x < 0 || pos_y < 0 || pos_x + this->width> 320 || pos_y + this->height> 240) {
  809668:	20000516 	blt	r4,zero,809680 <draw+0x24>
  80966c:	28000416 	blt	r5,zero,809680 <draw+0x24>
  809670:	33000617 	ldw	r12,24(r6)
  809674:	00805004 	movi	r2,320
  809678:	2307883a 	add	r3,r4,r12
  80967c:	10c0030e 	bge	r2,r3,80968c <draw+0x30>
		printf("draw image out of boundary\n");
  809680:	010020f4 	movhi	r4,131
  809684:	210df804 	addi	r4,r4,14304
  809688:	08221801 	jmpi	822180 <puts>
/*
 * This function draw the image and set the previous position for the image
 */
void draw(int pos_x, int pos_y, struct Image* this) {
	if(this == NULL || this->buffer == NULL) return;
	if(pos_x < 0 || pos_y < 0 || pos_x + this->width> 320 || pos_y + this->height> 240) {
  80968c:	32c00517 	ldw	r11,20(r6)
  809690:	00803c04 	movi	r2,240
  809694:	2ac7883a 	add	r3,r5,r11
  809698:	10fff916 	blt	r2,r3,809680 <draw+0x24>
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  80969c:	30800117 	ldw	r2,4(r6)
	this->prev_y = this->y;
  8096a0:	30c00217 	ldw	r3,8(r6)
	this->x = pos_x;
  8096a4:	31000115 	stw	r4,4(r6)
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  8096a8:	30800315 	stw	r2,12(r6)
	this->prev_y = this->y;
  8096ac:	30c00415 	stw	r3,16(r6)
	this->x = pos_x;
	this->y = pos_y;
  8096b0:	31400215 	stw	r5,8(r6)
		printf("draw image out of boundary\n");
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
  8096b4:	03001f0e 	bge	zero,r12,809734 <draw+0xd8>
  8096b8:	28805024 	muli	r2,r5,320
  8096bc:	001b883a 	mov	r13,zero
  8096c0:	2089883a 	add	r4,r4,r2
		for(j = 0; j < this->height; j++) {
  8096c4:	02c0180e 	bge	zero,r11,809728 <draw+0xcc>
  8096c8:	2013883a 	mov	r9,r4
  8096cc:	000f883a 	mov	r7,zero
  8096d0:	00000306 	br	8096e0 <draw+0x84>
  8096d4:	39c00044 	addi	r7,r7,1
  8096d8:	4a405004 	addi	r9,r9,320
  8096dc:	3ac0120e 	bge	r7,r11,809728 <draw+0xcc>
			if(*(this->buffer+ j*this->width+i) != BACKGROUND) {
  8096e0:	3b05383a 	mul	r2,r7,r12
  8096e4:	30c00017 	ldw	r3,0(r6)
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)<<1, *(this->buffer + j*this->width+i));
  8096e8:	4a55883a 	add	r10,r9,r9
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
		for(j = 0; j < this->height; j++) {
			if(*(this->buffer+ j*this->width+i) != BACKGROUND) {
  8096ec:	1345883a 	add	r2,r2,r13
  8096f0:	1085883a 	add	r2,r2,r2
  8096f4:	1085883a 	add	r2,r2,r2
  8096f8:	10c5883a 	add	r2,r2,r3
  8096fc:	12000017 	ldw	r8,0(r2)
  809700:	403ff426 	beq	r8,zero,8096d4 <draw+0x78>
				IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)<<1, *(this->buffer + j*this->width+i));
  809704:	d0e75d17 	ldw	r3,-25228(gp)
  809708:	18800b17 	ldw	r2,44(r3)
  80970c:	5085883a 	add	r2,r10,r2
  809710:	1200002d 	sthio	r8,0(r2)
  809714:	32c00517 	ldw	r11,20(r6)
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
		for(j = 0; j < this->height; j++) {
  809718:	39c00044 	addi	r7,r7,1
  80971c:	33000617 	ldw	r12,24(r6)
  809720:	4a405004 	addi	r9,r9,320
  809724:	3affee16 	blt	r7,r11,8096e0 <draw+0x84>
		printf("draw image out of boundary\n");
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
  809728:	6b400044 	addi	r13,r13,1
  80972c:	21000044 	addi	r4,r4,1
  809730:	6b3fe416 	blt	r13,r12,8096c4 <draw+0x68>
  809734:	f800283a 	ret

00809738 <draw_notransparent>:
			}
		}
	}
}
void draw_notransparent(int pos_x, int pos_y, struct Image* this) {
	if(this == NULL || this->buffer == NULL) return;
  809738:	30003226 	beq	r6,zero,809804 <draw_notransparent+0xcc>
  80973c:	30800017 	ldw	r2,0(r6)
  809740:	10003026 	beq	r2,zero,809804 <draw_notransparent+0xcc>
	if(pos_x < 0 || pos_y < 0 || pos_x + this->width> 320 || pos_y + this->height> 240) {
  809744:	20000516 	blt	r4,zero,80975c <draw_notransparent+0x24>
  809748:	28000416 	blt	r5,zero,80975c <draw_notransparent+0x24>
  80974c:	32800617 	ldw	r10,24(r6)
  809750:	00805004 	movi	r2,320
  809754:	2287883a 	add	r3,r4,r10
  809758:	10c0030e 	bge	r2,r3,809768 <draw_notransparent+0x30>
		printf("draw image out of boundary\n");
  80975c:	010020f4 	movhi	r4,131
  809760:	210df804 	addi	r4,r4,14304
  809764:	08221801 	jmpi	822180 <puts>
		}
	}
}
void draw_notransparent(int pos_x, int pos_y, struct Image* this) {
	if(this == NULL || this->buffer == NULL) return;
	if(pos_x < 0 || pos_y < 0 || pos_x + this->width> 320 || pos_y + this->height> 240) {
  809768:	32400517 	ldw	r9,20(r6)
  80976c:	00803c04 	movi	r2,240
  809770:	2a47883a 	add	r3,r5,r9
  809774:	10fff916 	blt	r2,r3,80975c <draw_notransparent+0x24>
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  809778:	30800117 	ldw	r2,4(r6)
	this->prev_y = this->y;
  80977c:	30c00217 	ldw	r3,8(r6)
	this->x = pos_x;
  809780:	31000115 	stw	r4,4(r6)
}
/*
 * set the position of the image
 */
void setImagePos(struct Image* this, int pos_x, int pos_y) {
	this->prev_x = this->x;
  809784:	30800315 	stw	r2,12(r6)
	this->prev_y = this->y;
  809788:	30c00415 	stw	r3,16(r6)
	this->x = pos_x;
	this->y = pos_y;
  80978c:	31400215 	stw	r5,8(r6)
		printf("draw image out of boundary\n");
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
  809790:	02801c0e 	bge	zero,r10,809804 <draw_notransparent+0xcc>
  809794:	28805024 	muli	r2,r5,320
  809798:	0017883a 	mov	r11,zero
  80979c:	2099883a 	add	r12,r4,r2
		for(j = 0; j < this->height; j++) {
  8097a0:	0240150e 	bge	zero,r9,8097f8 <draw_notransparent+0xc0>
  8097a4:	6011883a 	mov	r8,r12
  8097a8:	000f883a 	mov	r7,zero
  8097ac:	00000106 	br	8097b4 <draw_notransparent+0x7c>
  8097b0:	32800617 	ldw	r10,24(r6)
			//if(*(this->buffer+ j*this->width+i) != 0) {
			IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)<<1, *(this->buffer + j*this->width+i));
  8097b4:	3a85383a 	mul	r2,r7,r10
  8097b8:	31000017 	ldw	r4,0(r6)
  8097bc:	d0e75d17 	ldw	r3,-25228(gp)
  8097c0:	12c5883a 	add	r2,r2,r11
  8097c4:	1085883a 	add	r2,r2,r2
  8097c8:	1085883a 	add	r2,r2,r2
  8097cc:	1105883a 	add	r2,r2,r4
  8097d0:	19000b17 	ldw	r4,44(r3)
  8097d4:	11400017 	ldw	r5,0(r2)
  8097d8:	4207883a 	add	r3,r8,r8
  8097dc:	1907883a 	add	r3,r3,r4
  8097e0:	1940002d 	sthio	r5,0(r3)
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
		for(j = 0; j < this->height; j++) {
  8097e4:	32400517 	ldw	r9,20(r6)
  8097e8:	39c00044 	addi	r7,r7,1
  8097ec:	42005004 	addi	r8,r8,320
  8097f0:	3a7fef16 	blt	r7,r9,8097b0 <draw_notransparent+0x78>
  8097f4:	32800617 	ldw	r10,24(r6)
		printf("draw image out of boundary\n");
		return;
	}
	setImagePos(this, pos_x, pos_y);
	int i, j;
	for(i = 0; i < this->width; i++) {
  8097f8:	5ac00044 	addi	r11,r11,1
  8097fc:	63000044 	addi	r12,r12,1
  809800:	5abfe716 	blt	r11,r10,8097a0 <draw_notransparent+0x68>
  809804:	f800283a 	ret

00809808 <loadSDImage>:
* Load bitmap image from SD card.
* file name is required to be upper-case
* return Image struct if success; null otherwise
*/

struct Image* loadSDImage(char* filename) {
  809808:	defff204 	addi	sp,sp,-56
	int height = 0, width = 0;
	int size = 0, count = 0;
	char bmpId[3];
	int* result = NULL;
	memset(bmpId, 0, 3);
	short int file_pointer = alt_up_sd_card_fopen(filename, false);
  80980c:	000b883a 	mov	r5,zero
* Load bitmap image from SD card.
* file name is required to be upper-case
* return Image struct if success; null otherwise
*/

struct Image* loadSDImage(char* filename) {
  809810:	dcc00715 	stw	r19,28(sp)
  809814:	dfc00d15 	stw	ra,52(sp)
  809818:	df000c15 	stw	fp,48(sp)
  80981c:	ddc00b15 	stw	r23,44(sp)
  809820:	dd800a15 	stw	r22,40(sp)
  809824:	dd400915 	stw	r21,36(sp)
  809828:	dd000815 	stw	r20,32(sp)
  80982c:	dc800615 	stw	r18,24(sp)
  809830:	dc400515 	stw	r17,20(sp)
  809834:	dc000415 	stw	r16,16(sp)
	int a, b;
	int height = 0, width = 0;
	int size = 0, count = 0;
	char bmpId[3];
	int* result = NULL;
	memset(bmpId, 0, 3);
  809838:	d800000d 	sth	zero,0(sp)
  80983c:	d8000085 	stb	zero,2(sp)
* Load bitmap image from SD card.
* file name is required to be upper-case
* return Image struct if success; null otherwise
*/

struct Image* loadSDImage(char* filename) {
  809840:	d9000315 	stw	r4,12(sp)
	int height = 0, width = 0;
	int size = 0, count = 0;
	char bmpId[3];
	int* result = NULL;
	memset(bmpId, 0, 3);
	short int file_pointer = alt_up_sd_card_fopen(filename, false);
  809844:	08324500 	call	832450 <alt_up_sd_card_fopen>
	if(file_pointer < 0) {
  809848:	14ffffcc 	andi	r19,r2,65535
  80984c:	9ce0001c 	xori	r19,r19,32768
  809850:	9ce00004 	addi	r19,r19,-32768
  809854:	98005e16 	blt	r19,zero,8099d0 <loadSDImage+0x1c8>
		alt_up_sd_card_fclose(file_pointer); //close the file
		return NULL;
	}
	//Start reading the bitmap header
	while(bytes < 2) {
		if((bmpId[bytes++] = alt_up_sd_card_read(file_pointer)) < 0) {
  809858:	9809883a 	mov	r4,r19
  80985c:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  809860:	10c03fcc 	andi	r3,r2,255
  809864:	18c0201c 	xori	r3,r3,128
  809868:	18ffe004 	addi	r3,r3,-128
  80986c:	d8800005 	stb	r2,0(sp)
  809870:	18001716 	blt	r3,zero,8098d0 <loadSDImage+0xc8>
  809874:	9809883a 	mov	r4,r19
  809878:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  80987c:	10c03fcc 	andi	r3,r2,255
  809880:	18c0201c 	xori	r3,r3,128
  809884:	18ffe004 	addi	r3,r3,-128
  809888:	d8800045 	stb	r2,1(sp)
  80988c:	18001016 	blt	r3,zero,8098d0 <loadSDImage+0xc8>
			alt_up_sd_card_fclose(file_pointer);
			printf("fail reading %s\n", filename);
			return NULL;
		}
	}
	if(strcmp(bmpId, "BM") != 0) {
  809890:	d809883a 	mov	r4,sp
  809894:	014020f4 	movhi	r5,131
  809898:	294e0404 	addi	r5,r5,14352
  80989c:	0822cc80 	call	822cc8 <strcmp>
  8098a0:	1000c81e 	bne	r2,zero,809bc4 <loadSDImage+0x3bc>
		alt_up_sd_card_fclose(file_pointer);
		printf("fail reading %s at ID %s\n", filename, bmpId);
		return NULL;
  8098a4:	04000084 	movi	r16,2
  8098a8:	04400284 	movi	r17,10
  8098ac:	00000106 	br	8098b4 <loadSDImage+0xac>
	}
	short int temp;
	while(bytes < 10) {
  8098b0:	84401a26 	beq	r16,r17,80991c <loadSDImage+0x114>
		if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
  8098b4:	9809883a 	mov	r4,r19
  8098b8:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  8098bc:	10bfffcc 	andi	r2,r2,65535
  8098c0:	10a0001c 	xori	r2,r2,32768
  8098c4:	10a00004 	addi	r2,r2,-32768
			alt_up_sd_card_fclose(file_pointer);
			printf("fail reading %s\n", filename);
			return NULL;
		}
		bytes++;
  8098c8:	84000044 	addi	r16,r16,1
		printf("fail reading %s at ID %s\n", filename, bmpId);
		return NULL;
	}
	short int temp;
	while(bytes < 10) {
		if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
  8098cc:	103ff80e 	bge	r2,zero,8098b0 <loadSDImage+0xa8>
			alt_up_sd_card_fclose(file_pointer);
  8098d0:	9809883a 	mov	r4,r19
  8098d4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
			printf("fail reading %s\n", filename);
  8098d8:	d9400317 	ldw	r5,12(sp)
  8098dc:	010020f4 	movhi	r4,131
  8098e0:	210dff04 	addi	r4,r4,14332
  8098e4:	08220680 	call	822068 <printf>
  8098e8:	0005883a 	mov	r2,zero
			*(result + j*(width)+i) = byte;
		}
	}
	alt_up_sd_card_fclose(file_pointer);
	return initImage(result, 0, width, height);
}
  8098ec:	dfc00d17 	ldw	ra,52(sp)
  8098f0:	df000c17 	ldw	fp,48(sp)
  8098f4:	ddc00b17 	ldw	r23,44(sp)
  8098f8:	dd800a17 	ldw	r22,40(sp)
  8098fc:	dd400917 	ldw	r21,36(sp)
  809900:	dd000817 	ldw	r20,32(sp)
  809904:	dcc00717 	ldw	r19,28(sp)
  809908:	dc800617 	ldw	r18,24(sp)
  80990c:	dc400517 	ldw	r17,20(sp)
  809910:	dc000417 	ldw	r16,16(sp)
  809914:	dec00e04 	addi	sp,sp,56
  809918:	f800283a 	ret
			return NULL;
		}
		bytes++;
	}

	if((offset = alt_up_sd_card_read(file_pointer))< 0) {
  80991c:	9809883a 	mov	r4,r19
  809920:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  809924:	14bfffcc 	andi	r18,r2,65535
  809928:	94a0001c 	xori	r18,r18,32768
  80992c:	94a00004 	addi	r18,r18,-32768
  809930:	90002716 	blt	r18,zero,8099d0 <loadSDImage+0x1c8>
		alt_up_sd_card_fclose(file_pointer);
		return NULL;
	} //printf("offset: %x\n", offset);
	bytes++;
	while(bytes < offset){
  809934:	008002c4 	movi	r2,11
  809938:	1480ab0e 	bge	r2,r18,809be8 <loadSDImage+0x3e0>
  80993c:	1021883a 	mov	r16,r2
  809940:	002f883a 	mov	r23,zero
  809944:	002d883a 	mov	r22,zero
  809948:	0029883a 	mov	r20,zero
  80994c:	047ff204 	movi	r17,-56
  809950:	05400044 	movi	r21,1
  809954:	d8000215 	stw	zero,8(sp)
  809958:	d8000115 	stw	zero,4(sp)
  80995c:	00000f06 	br	80999c <loadSDImage+0x194>
				return NULL;
			} height += (int)temp << (bytes-22)*8 ;
			//if(bytes == 22)
				//printf("height: %d\n", height);
		} else if(bytes == 34 || bytes == 35 || bytes == 36 || bytes == 37) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
  809960:	9809883a 	mov	r4,r19
  809964:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  809968:	10ffffcc 	andi	r3,r2,65535
  80996c:	18e0001c 	xori	r3,r3,32768
  809970:	18e00004 	addi	r3,r3,-32768
  809974:	18001616 	blt	r3,zero,8099d0 <loadSDImage+0x1c8>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}  size += (int)(temp << 8*(count++));
  809978:	a00490fa 	slli	r2,r20,3
  80997c:	a5000044 	addi	r20,r20,1
  809980:	1884983a 	sll	r2,r3,r2
			if(bytes == 37) {
  809984:	00c00944 	movi	r3,37
				//printf("height: %d\n", height);
		} else if(bytes == 34 || bytes == 35 || bytes == 36 || bytes == 37) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}  size += (int)(temp << 8*(count++));
  809988:	b0ad883a 	add	r22,r22,r2
			if(bytes == 37) {
  80998c:	80c07526 	beq	r16,r3,809b64 <loadSDImage+0x35c>
			}
		} else if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
			alt_up_sd_card_fclose(file_pointer);
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
  809990:	84000044 	addi	r16,r16,1
  809994:	8c400204 	addi	r17,r17,8
	if((offset = alt_up_sd_card_read(file_pointer))< 0) {
		alt_up_sd_card_fclose(file_pointer);
		return NULL;
	} //printf("offset: %x\n", offset);
	bytes++;
	while(bytes < offset){
  809998:	84801e0e 	bge	r16,r18,809a14 <loadSDImage+0x20c>
		if(bytes == 18 || bytes == 19) {
  80999c:	80bffb84 	addi	r2,r16,-18
  8099a0:	a8800f2e 	bgeu	r21,r2,8099e0 <loadSDImage+0x1d8>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} width += (int)temp << (bytes-18)*8 ;
			//if(bytes == 19)
				//printf("width: %d, ", width);
		} else if(bytes == 22 || bytes == 23) {
  8099a4:	80bffa84 	addi	r2,r16,-22
  8099a8:	a880642e 	bgeu	r21,r2,809b3c <loadSDImage+0x334>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} height += (int)temp << (bytes-22)*8 ;
			//if(bytes == 22)
				//printf("height: %d\n", height);
		} else if(bytes == 34 || bytes == 35 || bytes == 36 || bytes == 37) {
  8099ac:	80fff784 	addi	r3,r16,-34
  8099b0:	008000c4 	movi	r2,3
  8099b4:	10ffea2e 	bgeu	r2,r3,809960 <loadSDImage+0x158>
			}  size += (int)(temp << 8*(count++));
			if(bytes == 37) {
				//printf("data size: %d\n", size/2);
				result = (int*)malloc(sizeof(int)*(size/2));
			}
		} else if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
  8099b8:	9809883a 	mov	r4,r19
  8099bc:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  8099c0:	10bfffcc 	andi	r2,r2,65535
  8099c4:	10a0001c 	xori	r2,r2,32768
  8099c8:	10a00004 	addi	r2,r2,-32768
  8099cc:	103ff00e 	bge	r2,zero,809990 <loadSDImage+0x188>
			alt_up_sd_card_fclose(file_pointer);
  8099d0:	9809883a 	mov	r4,r19
  8099d4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  8099d8:	0005883a 	mov	r2,zero
  8099dc:	003fc306 	br	8098ec <loadSDImage+0xe4>
		return NULL;
	} //printf("offset: %x\n", offset);
	bytes++;
	while(bytes < offset){
		if(bytes == 18 || bytes == 19) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
  8099e0:	9809883a 	mov	r4,r19
  8099e4:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  8099e8:	10bfffcc 	andi	r2,r2,65535
  8099ec:	10a0001c 	xori	r2,r2,32768
  8099f0:	10a00004 	addi	r2,r2,-32768
  8099f4:	103ff616 	blt	r2,zero,8099d0 <loadSDImage+0x1c8>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} width += (int)temp << (bytes-18)*8 ;
  8099f8:	1444983a 	sll	r2,r2,r17
  8099fc:	d8c00217 	ldw	r3,8(sp)
			}
		} else if((temp = alt_up_sd_card_read(file_pointer)) < 0) {
			alt_up_sd_card_fclose(file_pointer);
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
  809a00:	84000044 	addi	r16,r16,1
  809a04:	8c400204 	addi	r17,r17,8
	while(bytes < offset){
		if(bytes == 18 || bytes == 19) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} width += (int)temp << (bytes-18)*8 ;
  809a08:	1887883a 	add	r3,r3,r2
  809a0c:	d8c00215 	stw	r3,8(sp)
	if((offset = alt_up_sd_card_read(file_pointer))< 0) {
		alt_up_sd_card_fclose(file_pointer);
		return NULL;
	} //printf("offset: %x\n", offset);
	bytes++;
	while(bytes < offset){
  809a10:	84bfe216 	blt	r16,r18,80999c <loadSDImage+0x194>
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
  809a14:	bf3fffc4 	addi	fp,r23,-1
  809a18:	e0003116 	blt	fp,zero,809ae0 <loadSDImage+0x2d8>
  809a1c:	b004d7fa 	srli	r2,r22,31
  809a20:	1585883a 	add	r2,r2,r22
  809a24:	1009d07a 	srai	r4,r2,1
  809a28:	008003c4 	movi	r2,15
  809a2c:	25c6b03a 	or	r3,r4,r23
  809a30:	10c06036 	bltu	r2,r3,809bb4 <loadSDImage+0x3ac>
  809a34:	2004913a 	slli	r2,r4,4
  809a38:	00c02134 	movhi	r3,132
  809a3c:	18fbb104 	addi	r3,r3,-4412
  809a40:	15c4b03a 	or	r2,r2,r23
  809a44:	10c5883a 	add	r2,r2,r3
  809a48:	15000003 	ldbu	r20,0(r2)
  809a4c:	d8c00217 	ldw	r3,8(sp)
  809a50:	bdc5883a 	add	r2,r23,r23
  809a54:	1085883a 	add	r2,r2,r2
  809a58:	10bfff04 	addi	r2,r2,-4
  809a5c:	10c5383a 	mul	r2,r2,r3
  809a60:	1dbfff24 	muli	r22,r3,-4
  809a64:	d8c00117 	ldw	r3,4(sp)
  809a68:	10eb883a 	add	r21,r2,r3
  809a6c:	a823883a 	mov	r17,r21
  809a70:	0025883a 	mov	r18,zero
  809a74:	00001406 	br	809ac8 <loadSDImage+0x2c0>
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
  809a78:	08305d80 	call	8305d8 <alt_up_sd_card_read>
			b = alt_up_sd_card_read(file_pointer);
  809a7c:	9809883a 	mov	r4,r19
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
  809a80:	143fffcc 	andi	r16,r2,65535
			b = alt_up_sd_card_read(file_pointer);
  809a84:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  809a88:	113fffcc 	andi	r4,r2,65535
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
  809a8c:	8420001c 	xori	r16,r16,32768
			b = alt_up_sd_card_read(file_pointer);
  809a90:	2120001c 	xori	r4,r4,32768
  809a94:	21200004 	addi	r4,r4,-32768
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
  809a98:	84200004 	addi	r16,r16,-32768

int getColor(int red, int green, int blue) {
	return (int)(((red>>3)<<11) + ((green>>2)<<5) + (blue>>3));
}
int getColor555(int color555) {
	int color = color555&0x7FFF;
  809a9c:	2004923a 	slli	r2,r4,8
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
			b = alt_up_sd_card_read(file_pointer);
			if(a < 0 || b < 0) {
  809aa0:	80003816 	blt	r16,zero,809b84 <loadSDImage+0x37c>

int getColor(int red, int green, int blue) {
	return (int)(((red>>3)<<11) + ((green>>2)<<5) + (blue>>3));
}
int getColor555(int color555) {
	int color = color555&0x7FFF;
  809aa4:	8087883a 	add	r3,r16,r2
				result = NULL;
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}
			byte = getColor555(b*256+a);
			*(result + j*(width)+i) = byte;
  809aa8:	189ff80c 	andi	r2,r3,32736
  809aac:	1085883a 	add	r2,r2,r2
  809ab0:	18c007cc 	andi	r3,r3,31
  809ab4:	10c5883a 	add	r2,r2,r3
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
			b = alt_up_sd_card_read(file_pointer);
  809ab8:	8c400104 	addi	r17,r17,4
			if(a < 0 || b < 0) {
  809abc:	20003116 	blt	r4,zero,809b84 <loadSDImage+0x37c>
				result = NULL;
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}
			byte = getColor555(b*256+a);
			*(result + j*(width)+i) = byte;
  809ac0:	88bfff15 	stw	r2,-4(r17)
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
  809ac4:	94800044 	addi	r18,r18,1
			a = alt_up_sd_card_read(file_pointer);
  809ac8:	9809883a 	mov	r4,r19
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
  809acc:	953fea16 	blt	r18,r20,809a78 <loadSDImage+0x270>
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
  809ad0:	e73fffc4 	addi	fp,fp,-1
  809ad4:	00bfffc4 	movi	r2,-1
  809ad8:	adab883a 	add	r21,r21,r22
  809adc:	e0bfe31e 	bne	fp,r2,809a6c <loadSDImage+0x264>
			}
			byte = getColor555(b*256+a);
			*(result + j*(width)+i) = byte;
		}
	}
	alt_up_sd_card_fclose(file_pointer);
  809ae0:	9809883a 	mov	r4,r19
  809ae4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  809ae8:	00000106 	br	809af0 <loadSDImage+0x2e8>
 * Constructor of Animation; start == 1 if this animation contains the first image
 * in the sequence;
 */
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
  809aec:	08221800 	call	822180 <puts>
  809af0:	01000b04 	movi	r4,44
  809af4:	08216fc0 	call	8216fc <malloc>
  809af8:	010020f4 	movhi	r4,131
  809afc:	210de404 	addi	r4,r4,14224
  809b00:	103ffa26 	beq	r2,zero,809aec <loadSDImage+0x2e4>
	a->width = width;
  809b04:	d8c00217 	ldw	r3,8(sp)
	a->height = height;
  809b08:	15c00515 	stw	r23,20(r2)
	a->x = a->y = a->prev_x = a->prev_y = 0;
  809b0c:	10000415 	stw	zero,16(r2)
 * in the sequence;
 */
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
	a->width = width;
  809b10:	10c00615 	stw	r3,24(r2)
	a->height = height;
	a->x = a->y = a->prev_x = a->prev_y = 0;
	a->buffer = img;
  809b14:	d8c00117 	ldw	r3,4(sp)
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
	a->width = width;
	a->height = height;
	a->x = a->y = a->prev_x = a->prev_y = 0;
  809b18:	10000315 	stw	zero,12(r2)
  809b1c:	10000215 	stw	zero,8(r2)
	a->buffer = img;
  809b20:	10c00015 	stw	r3,0(r2)
struct Image* initImage(int* img, int start, int width, int height) {
	struct Image* a;
	while((a = (struct Image*)malloc(sizeof(struct Image)))==NULL) {printf("memory allocation with aniimation\n");}
	a->width = width;
	a->height = height;
	a->x = a->y = a->prev_x = a->prev_y = 0;
  809b24:	10000115 	stw	zero,4(r2)
	a->buffer = img;
	a->prev = a;
  809b28:	10800715 	stw	r2,28(r2)
	a->next = a;
  809b2c:	10800815 	stw	r2,32(r2)
	a->end = a;
  809b30:	10800a15 	stw	r2,40(r2)
	if(start > 0)
		a->first = a;
	else
		a->first = NULL;
  809b34:	10000915 	stw	zero,36(r2)
  809b38:	003f6c06 	br	8098ec <loadSDImage+0xe4>
				return NULL;
			} width += (int)temp << (bytes-18)*8 ;
			//if(bytes == 19)
				//printf("width: %d, ", width);
		} else if(bytes == 22 || bytes == 23) {
			if((temp = alt_up_sd_card_read(file_pointer))< 0) {
  809b3c:	9809883a 	mov	r4,r19
  809b40:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  809b44:	10ffffcc 	andi	r3,r2,65535
  809b48:	18e0001c 	xori	r3,r3,32768
  809b4c:	18e00004 	addi	r3,r3,-32768
  809b50:	183f9f16 	blt	r3,zero,8099d0 <loadSDImage+0x1c8>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			} height += (int)temp << (bytes-22)*8 ;
  809b54:	88bff804 	addi	r2,r17,-32
  809b58:	1884983a 	sll	r2,r3,r2
  809b5c:	b8af883a 	add	r23,r23,r2
  809b60:	003f8b06 	br	809990 <loadSDImage+0x188>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}  size += (int)(temp << 8*(count++));
			if(bytes == 37) {
				//printf("data size: %d\n", size/2);
				result = (int*)malloc(sizeof(int)*(size/2));
  809b64:	b008d7fa 	srli	r4,r22,31
  809b68:	2589883a 	add	r4,r4,r22
  809b6c:	2009d07a 	srai	r4,r4,1
  809b70:	2109883a 	add	r4,r4,r4
  809b74:	2109883a 	add	r4,r4,r4
  809b78:	08216fc0 	call	8216fc <malloc>
  809b7c:	d8800115 	stw	r2,4(sp)
  809b80:	003f8306 	br	809990 <loadSDImage+0x188>
	for(j = height-1; j >= 0; j--) {
		for(i = 0; i < size/2/height; i++) {
			a = alt_up_sd_card_read(file_pointer);
			b = alt_up_sd_card_read(file_pointer);
			if(a < 0 || b < 0) {
				printf("%s invalid at pixel[%d, %d]!\n", filename, i, j);
  809b84:	d9400317 	ldw	r5,12(sp)
  809b88:	900d883a 	mov	r6,r18
  809b8c:	e00f883a 	mov	r7,fp
  809b90:	010020f4 	movhi	r4,131
  809b94:	210e0c04 	addi	r4,r4,14384
  809b98:	08220680 	call	822068 <printf>
				free(result);
  809b9c:	d9000117 	ldw	r4,4(sp)
  809ba0:	08216e80 	call	8216e8 <free>
				result = NULL;
				alt_up_sd_card_fclose(file_pointer);
  809ba4:	9809883a 	mov	r4,r19
  809ba8:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  809bac:	0005883a 	mov	r2,zero
  809bb0:	003f4e06 	br	8098ec <loadSDImage+0xe4>
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
  809bb4:	b80b883a 	mov	r5,r23
  809bb8:	0820b480 	call	820b48 <__divsi3>
  809bbc:	1029883a 	mov	r20,r2
  809bc0:	003fa206 	br	809a4c <loadSDImage+0x244>
			printf("fail reading %s\n", filename);
			return NULL;
		}
	}
	if(strcmp(bmpId, "BM") != 0) {
		alt_up_sd_card_fclose(file_pointer);
  809bc4:	9809883a 	mov	r4,r19
  809bc8:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
		printf("fail reading %s at ID %s\n", filename, bmpId);
  809bcc:	d9400317 	ldw	r5,12(sp)
  809bd0:	010020f4 	movhi	r4,131
  809bd4:	210e0504 	addi	r4,r4,14356
  809bd8:	d80d883a 	mov	r6,sp
  809bdc:	08220680 	call	822068 <printf>
  809be0:	0005883a 	mov	r2,zero
  809be4:	003f4106 	br	8098ec <loadSDImage+0xe4>
			return NULL;
		} //printf("%d %x\n", bytes, temp);
		bytes++;
	}
	//Start reading the pixel data
	for(j = height-1; j >= 0; j--) {
  809be8:	002f883a 	mov	r23,zero
  809bec:	d8000215 	stw	zero,8(sp)
  809bf0:	d8000115 	stw	zero,4(sp)
  809bf4:	003fba06 	br	809ae0 <loadSDImage+0x2d8>

00809bf8 <killImage>:
}

/*
 * Destructor;
 */
void killImage(struct Image* this) {
  809bf8:	defffb04 	addi	sp,sp,-20
  809bfc:	dc400115 	stw	r17,4(sp)
  809c00:	dfc00415 	stw	ra,16(sp)
  809c04:	dcc00315 	stw	r19,12(sp)
  809c08:	dc800215 	stw	r18,8(sp)
  809c0c:	dc000015 	stw	r16,0(sp)
  809c10:	2023883a 	mov	r17,r4
	if(this == NULL) return;
  809c14:	20004226 	beq	r4,zero,809d20 <killImage+0x128>
	if(this->prev != NULL) {
  809c18:	20800717 	ldw	r2,28(r4)
  809c1c:	10000126 	beq	r2,zero,809c24 <killImage+0x2c>
		this->prev = NULL;
  809c20:	20000715 	stw	zero,28(r4)
	}
	free(this->buffer);
  809c24:	89000017 	ldw	r4,0(r17)
  809c28:	08216e80 	call	8216e8 <free>
	this->buffer = NULL;
	if(this->end != this)
  809c2c:	88800a17 	ldw	r2,40(r17)
	if(this == NULL) return;
	if(this->prev != NULL) {
		this->prev = NULL;
	}
	free(this->buffer);
	this->buffer = NULL;
  809c30:	88000015 	stw	zero,0(r17)
	if(this->end != this)
  809c34:	88802f26 	beq	r17,r2,809cf4 <killImage+0xfc>
		killImage(this->next);
  809c38:	8c800817 	ldw	r18,32(r17)

/*
 * Destructor;
 */
void killImage(struct Image* this) {
	if(this == NULL) return;
  809c3c:	90002d26 	beq	r18,zero,809cf4 <killImage+0xfc>
	if(this->prev != NULL) {
  809c40:	90800717 	ldw	r2,28(r18)
  809c44:	10000126 	beq	r2,zero,809c4c <killImage+0x54>
		this->prev = NULL;
  809c48:	90000715 	stw	zero,28(r18)
	}
	free(this->buffer);
  809c4c:	91000017 	ldw	r4,0(r18)
  809c50:	08216e80 	call	8216e8 <free>
	this->buffer = NULL;
	if(this->end != this)
  809c54:	90800a17 	ldw	r2,40(r18)
	if(this == NULL) return;
	if(this->prev != NULL) {
		this->prev = NULL;
	}
	free(this->buffer);
	this->buffer = NULL;
  809c58:	90000015 	stw	zero,0(r18)
	if(this->end != this)
  809c5c:	90802026 	beq	r18,r2,809ce0 <killImage+0xe8>
		killImage(this->next);
  809c60:	94c00817 	ldw	r19,32(r18)

/*
 * Destructor;
 */
void killImage(struct Image* this) {
	if(this == NULL) return;
  809c64:	98001e26 	beq	r19,zero,809ce0 <killImage+0xe8>
	if(this->prev != NULL) {
  809c68:	98800717 	ldw	r2,28(r19)
  809c6c:	10000126 	beq	r2,zero,809c74 <killImage+0x7c>
		this->prev = NULL;
  809c70:	98000715 	stw	zero,28(r19)
	}
	free(this->buffer);
  809c74:	99000017 	ldw	r4,0(r19)
  809c78:	08216e80 	call	8216e8 <free>
	this->buffer = NULL;
	if(this->end != this)
  809c7c:	98800a17 	ldw	r2,40(r19)
	if(this == NULL) return;
	if(this->prev != NULL) {
		this->prev = NULL;
	}
	free(this->buffer);
	this->buffer = NULL;
  809c80:	98000015 	stw	zero,0(r19)
	if(this->end != this)
  809c84:	98801126 	beq	r19,r2,809ccc <killImage+0xd4>
		killImage(this->next);
  809c88:	9c000817 	ldw	r16,32(r19)

/*
 * Destructor;
 */
void killImage(struct Image* this) {
	if(this == NULL) return;
  809c8c:	80000f26 	beq	r16,zero,809ccc <killImage+0xd4>
	if(this->prev != NULL) {
  809c90:	80800717 	ldw	r2,28(r16)
  809c94:	10000126 	beq	r2,zero,809c9c <killImage+0xa4>
		this->prev = NULL;
  809c98:	80000715 	stw	zero,28(r16)
	}
	free(this->buffer);
  809c9c:	81000017 	ldw	r4,0(r16)
  809ca0:	08216e80 	call	8216e8 <free>
	this->buffer = NULL;
	if(this->end != this)
  809ca4:	80800a17 	ldw	r2,40(r16)
	if(this == NULL) return;
	if(this->prev != NULL) {
		this->prev = NULL;
	}
	free(this->buffer);
	this->buffer = NULL;
  809ca8:	80000015 	stw	zero,0(r16)
	if(this->end != this)
  809cac:	80800226 	beq	r16,r2,809cb8 <killImage+0xc0>
		killImage(this->next);
  809cb0:	81000817 	ldw	r4,32(r16)
  809cb4:	0809bf80 	call	809bf8 <killImage>

	this->next = NULL;
  809cb8:	80000815 	stw	zero,32(r16)
	this->first = NULL;
  809cbc:	80000915 	stw	zero,36(r16)
	this->end = NULL;
  809cc0:	80000a15 	stw	zero,40(r16)
	free(this);
  809cc4:	8009883a 	mov	r4,r16
  809cc8:	08216e80 	call	8216e8 <free>
	free(this->buffer);
	this->buffer = NULL;
	if(this->end != this)
		killImage(this->next);

	this->next = NULL;
  809ccc:	98000815 	stw	zero,32(r19)
	this->first = NULL;
  809cd0:	98000915 	stw	zero,36(r19)
	this->end = NULL;
  809cd4:	98000a15 	stw	zero,40(r19)
	free(this);
  809cd8:	9809883a 	mov	r4,r19
  809cdc:	08216e80 	call	8216e8 <free>
	free(this->buffer);
	this->buffer = NULL;
	if(this->end != this)
		killImage(this->next);

	this->next = NULL;
  809ce0:	90000815 	stw	zero,32(r18)
	this->first = NULL;
  809ce4:	90000915 	stw	zero,36(r18)
	this->end = NULL;
  809ce8:	90000a15 	stw	zero,40(r18)
	free(this);
  809cec:	9009883a 	mov	r4,r18
  809cf0:	08216e80 	call	8216e8 <free>
  809cf4:	8809883a 	mov	r4,r17
	free(this->buffer);
	this->buffer = NULL;
	if(this->end != this)
		killImage(this->next);

	this->next = NULL;
  809cf8:	88000815 	stw	zero,32(r17)
	this->first = NULL;
  809cfc:	88000915 	stw	zero,36(r17)
	this->end = NULL;
  809d00:	88000a15 	stw	zero,40(r17)
	free(this);
	this = NULL;
}
  809d04:	dfc00417 	ldw	ra,16(sp)
  809d08:	dcc00317 	ldw	r19,12(sp)
  809d0c:	dc800217 	ldw	r18,8(sp)
  809d10:	dc400117 	ldw	r17,4(sp)
  809d14:	dc000017 	ldw	r16,0(sp)
  809d18:	dec00504 	addi	sp,sp,20
		killImage(this->next);

	this->next = NULL;
	this->first = NULL;
	this->end = NULL;
	free(this);
  809d1c:	08216e81 	jmpi	8216e8 <free>
	this = NULL;
}
  809d20:	dfc00417 	ldw	ra,16(sp)
  809d24:	dcc00317 	ldw	r19,12(sp)
  809d28:	dc800217 	ldw	r18,8(sp)
  809d2c:	dc400117 	ldw	r17,4(sp)
  809d30:	dc000017 	ldw	r16,0(sp)
  809d34:	dec00504 	addi	sp,sp,20
  809d38:	f800283a 	ret

00809d3c <drawVerticalLine>:
		x2++;
		i++;
	}
}

void drawVerticalLine(int x, int y, int length, int color){
  809d3c:	2015883a 	mov	r10,r4
	int x2, y2, i;
	i = 0;
	x2 = x+1;
  809d40:	20c00044 	addi	r3,r4,1
	y2 = y+1;
	while (i <= length){
  809d44:	30001716 	blt	r6,zero,809da4 <drawVerticalLine+0x68>
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  809d48:	28805024 	muli	r2,r5,320
  809d4c:	1907c83a 	sub	r3,r3,r4
  809d50:	1b400048 	cmpgei	r13,r3,1
  809d54:	2085883a 	add	r2,r4,r2
  809d58:	1093883a 	add	r9,r2,r2
  809d5c:	0011883a 	mov	r8,zero
  809d60:	03c02134 	movhi	r15,132
  809d64:	7bca3a04 	addi	r15,r15,10472
  809d68:	20000b16 	blt	r4,zero,809d98 <drawVerticalLine+0x5c>
  809d6c:	2ac00044 	addi	r11,r5,1
	this->x = pos_x;
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
  809d70:	28000416 	blt	r5,zero,809d84 <drawVerticalLine+0x48>
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  809d74:	5945c83a 	sub	r2,r11,r5
	for(i = 0; i < w; i++) {
  809d78:	68000226 	beq	r13,zero,809d84 <drawVerticalLine+0x48>
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809d7c:	03800244 	movi	r14,9

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
  809d80:	00800916 	blt	zero,r2,809da8 <drawVerticalLine+0x6c>
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
		drawBox(x, y, x2, y2, color);
		y++;
  809d84:	580b883a 	mov	r5,r11
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809d88:	4a40a004 	addi	r9,r9,640
void drawVerticalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
  809d8c:	32000526 	beq	r6,r8,809da4 <drawVerticalLine+0x68>
		drawBox(x, y, x2, y2, color);
		y++;
  809d90:	42000044 	addi	r8,r8,1
  809d94:	003ff506 	br	809d6c <drawVerticalLine+0x30>
void drawVerticalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
  809d98:	32000226 	beq	r6,r8,809da4 <drawVerticalLine+0x68>
		drawBox(x, y, x2, y2, color);
		y++;
  809d9c:	42000044 	addi	r8,r8,1
void drawVerticalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
  809da0:	323ffe1e 	bne	r6,r8,809d9c <drawVerticalLine+0x60>
  809da4:	f800283a 	ret
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809da8:	7b000017 	ldw	r12,0(r15)
  809dac:	60800017 	ldw	r2,0(r12)
  809db0:	10c00017 	ldw	r3,0(r2)
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809db4:	19000017 	ldw	r4,0(r3)
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809db8:	18800117 	ldw	r2,4(r3)
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809dbc:	5107c83a 	sub	r3,r10,r4
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809dc0:	2885c83a 	sub	r2,r5,r2
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809dc4:	70c00a36 	bltu	r14,r3,809df0 <drawVerticalLine+0xb4>
  809dc8:	10000916 	blt	r2,zero,809df0 <drawVerticalLine+0xb4>
		    	*(mouse->overlapImg->buffer+dy*10 + dx) = color;
  809dcc:	110002a4 	muli	r4,r2,10
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809dd0:	70800716 	blt	r14,r2,809df0 <drawVerticalLine+0xb4>
		    	*(mouse->overlapImg->buffer+dy*10 + dx) = color;
  809dd4:	60800117 	ldw	r2,4(r12)
  809dd8:	20c7883a 	add	r3,r4,r3
  809ddc:	18c7883a 	add	r3,r3,r3
  809de0:	11000017 	ldw	r4,0(r2)
  809de4:	18c7883a 	add	r3,r3,r3
  809de8:	1907883a 	add	r3,r3,r4
  809dec:	19c00015 	stw	r7,0(r3)
	    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  809df0:	d0e75d17 	ldw	r3,-25228(gp)
  809df4:	18800b17 	ldw	r2,44(r3)
  809df8:	4885883a 	add	r2,r9,r2
  809dfc:	11c0002d 	sthio	r7,0(r2)
  809e00:	003fe006 	br	809d84 <drawVerticalLine+0x48>

00809e04 <drawHorizontalLine>:
		}
	}
}

void drawHorizontalLine(int x, int y, int length, int color){
  809e04:	deffff04 	addi	sp,sp,-4
  809e08:	dc000015 	stw	r16,0(sp)
  809e0c:	2011883a 	mov	r8,r4
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
  809e10:	28c00044 	addi	r3,r5,1
	while (i <= length){
  809e14:	30002316 	blt	r6,zero,809ea4 <drawHorizontalLine+0xa0>
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  809e18:	28805024 	muli	r2,r5,320
  809e1c:	1947c83a 	sub	r3,r3,r5
  809e20:	1bc00050 	cmplti	r15,r3,1
  809e24:	2085883a 	add	r2,r4,r2
  809e28:	1093883a 	add	r9,r2,r2
  809e2c:	0017883a 	mov	r11,zero
  809e30:	281a803a 	cmplt	r13,r5,zero
  809e34:	04002134 	movhi	r16,132
  809e38:	840a3a04 	addi	r16,r16,10472
  809e3c:	42800044 	addi	r10,r8,1
	this->x = pos_x;
	this->y = pos_y;
}

void drawBox(int x1, int y1, int x2, int y2, int color) {
	if(x1 < 0 || y1 < 0) return;
  809e40:	40001316 	blt	r8,zero,809e90 <drawHorizontalLine+0x8c>
  809e44:	6800121e 	bne	r13,zero,809e90 <drawHorizontalLine+0x8c>
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
  809e48:	5205c83a 	sub	r2,r10,r8
  809e4c:	0080100e 	bge	zero,r2,809e90 <drawHorizontalLine+0x8c>
		for(j = 0; j < h; j++) {
  809e50:	78000f1e 	bne	r15,zero,809e90 <drawHorizontalLine+0x8c>
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809e54:	83000017 	ldw	r12,0(r16)
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809e58:	03800244 	movi	r14,9
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809e5c:	60800017 	ldw	r2,0(r12)
  809e60:	10c00017 	ldw	r3,0(r2)
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809e64:	19000017 	ldw	r4,0(r3)
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809e68:	18c00117 	ldw	r3,4(r3)
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809e6c:	4111c83a 	sub	r8,r8,r4
  809e70:	72000336 	bltu	r14,r8,809e80 <drawHorizontalLine+0x7c>
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
  809e74:	28c7c83a 	sub	r3,r5,r3
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809e78:	18000116 	blt	r3,zero,809e80 <drawHorizontalLine+0x7c>
  809e7c:	70c00c0e 	bge	r14,r3,809eb0 <drawHorizontalLine+0xac>
		    	*(mouse->overlapImg->buffer+dy*10 + dx) = color;
	    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  809e80:	d0e75d17 	ldw	r3,-25228(gp)
  809e84:	18800b17 	ldw	r2,44(r3)
  809e88:	4885883a 	add	r2,r9,r2
  809e8c:	11c0002d 	sthio	r7,0(r2)
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  809e90:	4a400084 	addi	r9,r9,2
void drawHorizontalLine(int x, int y, int length, int color){
	int x2, y2, i;
	i = 0;
	x2 = x+1;
	y2 = y+1;
	while (i <= length){
  809e94:	32c00326 	beq	r6,r11,809ea4 <drawHorizontalLine+0xa0>
		drawBox(x, y, x2, y2, color);
		x++;
  809e98:	5011883a 	mov	r8,r10
  809e9c:	5ac00044 	addi	r11,r11,1
  809ea0:	003fe606 	br	809e3c <drawHorizontalLine+0x38>
		x2++;
		i++;
	}
}
  809ea4:	dc000017 	ldw	r16,0(sp)
  809ea8:	dec00104 	addi	sp,sp,4
  809eac:	f800283a 	ret
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
		    x = x1+i; y = y1+j;
		    dx = x-mouse->super->r->x; dy = y-mouse->super->r->y;
		    if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
		    	*(mouse->overlapImg->buffer+dy*10 + dx) = color;
  809eb0:	60800117 	ldw	r2,4(r12)
  809eb4:	18c002a4 	muli	r3,r3,10
  809eb8:	11000017 	ldw	r4,0(r2)
  809ebc:	1a07883a 	add	r3,r3,r8
  809ec0:	18c7883a 	add	r3,r3,r3
  809ec4:	18c7883a 	add	r3,r3,r3
  809ec8:	1907883a 	add	r3,r3,r4
  809ecc:	19c00015 	stw	r7,0(r3)
  809ed0:	003feb06 	br	809e80 <drawHorizontalLine+0x7c>

00809ed4 <animate_ISR>:
		if(soundMixer->indexSize > 0)
			enableAudioDeviceController();
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 0, 0);
	}
}
void animate_ISR(struct Cursor* cursor) {
  809ed4:	defe3b04 	addi	sp,sp,-1812
  809ed8:	dcc1c315 	stw	r19,1804(sp)
  extern volatile alt_u32 alt_irq_active;

  alt_u32 old_priority;

  old_priority      = alt_priority_mask;
  alt_priority_mask = (1 << priority) - 1;
  809edc:	00800fc4 	movi	r2,63
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  alt_u32 old_priority;

  old_priority      = alt_priority_mask;
  809ee0:	04c02134 	movhi	r19,132
  809ee4:	9cc2ee04 	addi	r19,r19,3000
  809ee8:	dc81c215 	stw	r18,1800(sp)
  809eec:	dc01c015 	stw	r16,1792(sp)
  alt_priority_mask = (1 << priority) - 1;

  NIOS2_WRITE_IENABLE (alt_irq_active & alt_priority_mask);
  809ef0:	04802134 	movhi	r18,132
  809ef4:	948a4504 	addi	r18,r18,10516
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  alt_u32 old_priority;

  old_priority      = alt_priority_mask;
  809ef8:	9c000017 	ldw	r16,0(r19)
  alt_priority_mask = (1 << priority) - 1;
  809efc:	98800015 	stw	r2,0(r19)

  NIOS2_WRITE_IENABLE (alt_irq_active & alt_priority_mask);
  809f00:	90800017 	ldw	r2,0(r18)
  809f04:	98c00017 	ldw	r3,0(r19)
  809f08:	dfc1c415 	stw	ra,1808(sp)
  809f0c:	dc41c115 	stw	r17,1796(sp)
  809f10:	10c4703a 	and	r2,r2,r3
  809f14:	100170fa 	wrctl	ienable,r2

  NIOS2_WRITE_STATUS (1);
  809f18:	00c00044 	movi	r3,1
  809f1c:	1801703a 	wrctl	status,r3
	int i, k, l;
	unsigned int data;
	int j[0xE0];
	int sorted_j[0xE0];
	int index, size_index, temp, temp1;
	memset(j, 0, sizeof(j));
  809f20:	dc40e004 	addi	r17,sp,896
  809f24:	000b883a 	mov	r5,zero
  809f28:	0180e004 	movi	r6,896
  809f2c:	8809883a 	mov	r4,r17
  809f30:	0821fd00 	call	821fd0 <memset>
	memset(sorted_j, 0, sizeof(sorted_j));
  809f34:	d809883a 	mov	r4,sp
  809f38:	000b883a 	mov	r5,zero
  809f3c:	0180e004 	movi	r6,896
  809f40:	0821fd00 	call	821fd0 <memset>
	index = soundMixer->currIndex;
  809f44:	d0e75917 	ldw	r3,-25244(gp)
  809f48:	008000b4 	movhi	r2,2
  809f4c:	10b08004 	addi	r2,r2,-15872
	size_index = soundMixer->indexSize;
  809f50:	010000b4 	movhi	r4,2
  809f54:	21308204 	addi	r4,r4,-15864
  809f58:	1909883a 	add	r4,r3,r4
	int j[0xE0];
	int sorted_j[0xE0];
	int index, size_index, temp, temp1;
	memset(j, 0, sizeof(j));
	memset(sorted_j, 0, sizeof(sorted_j));
	index = soundMixer->currIndex;
  809f5c:	1887883a 	add	r3,r3,r2
  809f60:	1a400017 	ldw	r9,0(r3)
	size_index = soundMixer->indexSize;
  809f64:	20800017 	ldw	r2,0(r4)
  809f68:	0204b284 	movi	r8,4810
  809f6c:	01c02134 	movhi	r7,132
  809f70:	39ca3804 	addi	r7,r7,10464
	}

	alt_irq_non_interruptible(tempcontext);

	IOWR_16DIRECT(TIMESTAMP_BASE, 0, 0);
}
  809f74:	400b883a 	mov	r5,r8
  809f78:	41803804 	addi	r6,r8,224
	memset(sorted_j, 0, sizeof(sorted_j));
	index = soundMixer->currIndex;
	size_index = soundMixer->indexSize;
	for(k = 15; k <= 130; k++) {
		for(l = 0; l < 0xE0; l++) {
			IOWR_16DIRECT(pixel_buffer->buffer_start_address, (k*320+l+10)<<1, 0);
  809f7c:	38800017 	ldw	r2,0(r7)
  809f80:	2947883a 	add	r3,r5,r5
  809f84:	11000b17 	ldw	r4,44(r2)
  809f88:	1907883a 	add	r3,r3,r4
  809f8c:	1800002d 	sthio	zero,0(r3)
  809f90:	29400044 	addi	r5,r5,1
	memset(j, 0, sizeof(j));
	memset(sorted_j, 0, sizeof(sorted_j));
	index = soundMixer->currIndex;
	size_index = soundMixer->indexSize;
	for(k = 15; k <= 130; k++) {
		for(l = 0; l < 0xE0; l++) {
  809f94:	29bff91e 	bne	r5,r6,809f7c <animate_ISR+0xa8>
  809f98:	42005004 	addi	r8,r8,320
	int index, size_index, temp, temp1;
	memset(j, 0, sizeof(j));
	memset(sorted_j, 0, sizeof(sorted_j));
	index = soundMixer->currIndex;
	size_index = soundMixer->indexSize;
	for(k = 15; k <= 130; k++) {
  809f9c:	00a8f294 	movui	r2,41930
  809fa0:	40bff41e 	bne	r8,r2,809f74 <animate_ISR+0xa0>
		for(l = 0; l < 0xE0; l++) {
			IOWR_16DIRECT(pixel_buffer->buffer_start_address, (k*320+l+10)<<1, 0);
		}
	}
	if(db.total_songs_playing > 0) {
  809fa4:	00802134 	movhi	r2,132
  809fa8:	108a6204 	addi	r2,r2,10632
  809fac:	10c0a617 	ldw	r3,664(r2)
  809fb0:	00c0340e 	bge	zero,r3,80a084 <animate_ISR+0x1b0>
  809fb4:	48c06024 	muli	r3,r9,384
  809fb8:	d0a75917 	ldw	r2,-25244(gp)
  809fbc:	000d883a 	mov	r6,zero
  809fc0:	02001f44 	movi	r8,125
  809fc4:	1889883a 	add	r4,r3,r2
  809fc8:	01c01804 	movi	r7,96
		for(k = 0; k < 96; k ++) {
			data = soundMixer->buffer[index][k] >> 16;
  809fcc:	20c00017 	ldw	r3,0(r4)
		for(l = 0; l < 0xE0; l++) {
			IOWR_16DIRECT(pixel_buffer->buffer_start_address, (k*320+l+10)<<1, 0);
		}
	}
	if(db.total_songs_playing > 0) {
		for(k = 0; k < 96; k ++) {
  809fd0:	31800044 	addi	r6,r6,1
  809fd4:	21000104 	addi	r4,r4,4
			data = soundMixer->buffer[index][k] >> 16;
  809fd8:	1806d43a 	srli	r3,r3,16
			if(data < 0x7F && data != 0) {
				j[data]+= 6;
  809fdc:	18c5883a 	add	r2,r3,r3
  809fe0:	1085883a 	add	r2,r2,r2
		}
	}
	if(db.total_songs_playing > 0) {
		for(k = 0; k < 96; k ++) {
			data = soundMixer->buffer[index][k] >> 16;
			if(data < 0x7F && data != 0) {
  809fe4:	18ffffc4 	addi	r3,r3,-1
				j[data]+= 6;
  809fe8:	16cb883a 	add	r5,r2,sp
		}
	}
	if(db.total_songs_playing > 0) {
		for(k = 0; k < 96; k ++) {
			data = soundMixer->buffer[index][k] >> 16;
			if(data < 0x7F && data != 0) {
  809fec:	40c00336 	bltu	r8,r3,809ffc <animate_ISR+0x128>
				j[data]+= 6;
  809ff0:	2880e017 	ldw	r2,896(r5)
  809ff4:	10800184 	addi	r2,r2,6
  809ff8:	2880e015 	stw	r2,896(r5)
		for(l = 0; l < 0xE0; l++) {
			IOWR_16DIRECT(pixel_buffer->buffer_start_address, (k*320+l+10)<<1, 0);
		}
	}
	if(db.total_songs_playing > 0) {
		for(k = 0; k < 96; k ++) {
  809ffc:	31fff31e 	bne	r6,r7,809fcc <animate_ISR+0xf8>
			if(data < 0x7F && data != 0) {
				j[data]+= 6;
			}
		}

		for(k = 0; k < 0x7F; k ++) {
  80a000:	89000104 	addi	r4,r17,4
  80a004:	02800044 	movi	r10,1
			temp = k;
			for(i = 0; i < 0x7F; i++) {
				if(temp == 0 || j[temp] == 0) break;
  80a008:	50001726 	beq	r10,zero,80a068 <animate_ISR+0x194>
  80a00c:	21c00017 	ldw	r7,0(r4)
  80a010:	38001526 	beq	r7,zero,80a068 <animate_ISR+0x194>
  80a014:	5011883a 	mov	r8,r10
  80a018:	d80d883a 	mov	r6,sp
  80a01c:	da407e04 	addi	r9,sp,504
  80a020:	00000606 	br	80a03c <animate_ISR+0x168>
  80a024:	1085883a 	add	r2,r2,r2
  80a028:	31800104 	addi	r6,r6,4
  80a02c:	40000e26 	beq	r8,zero,80a068 <animate_ISR+0x194>
  80a030:	16c5883a 	add	r2,r2,sp
  80a034:	11c0e017 	ldw	r7,896(r2)
  80a038:	38000b26 	beq	r7,zero,80a068 <animate_ISR+0x194>
				if(j[temp] < j[sorted_j[i]] || sorted_j[i] == 0) {
  80a03c:	31400017 	ldw	r5,0(r6)
  80a040:	2945883a 	add	r2,r5,r5
  80a044:	1085883a 	add	r2,r2,r2
  80a048:	16c5883a 	add	r2,r2,sp
  80a04c:	10c0e017 	ldw	r3,896(r2)
  80a050:	38c00116 	blt	r7,r3,80a058 <animate_ISR+0x184>
  80a054:	2800021e 	bne	r5,zero,80a060 <animate_ISR+0x18c>
					temp1 = sorted_j[i];
					sorted_j[i] = temp;
  80a058:	32000015 	stw	r8,0(r6)
  80a05c:	2811883a 	mov	r8,r5
		}

		for(k = 0; k < 0x7F; k ++) {
			temp = k;
			for(i = 0; i < 0x7F; i++) {
				if(temp == 0 || j[temp] == 0) break;
  80a060:	4205883a 	add	r2,r8,r8
			}
		}

		for(k = 0; k < 0x7F; k ++) {
			temp = k;
			for(i = 0; i < 0x7F; i++) {
  80a064:	327fef1e 	bne	r6,r9,80a024 <animate_ISR+0x150>
			if(data < 0x7F && data != 0) {
				j[data]+= 6;
			}
		}

		for(k = 0; k < 0x7F; k ++) {
  80a068:	52800044 	addi	r10,r10,1
  80a06c:	00801fc4 	movi	r2,127
			temp = k;
			for(i = 0; i < 0x7F; i++) {
  80a070:	21000104 	addi	r4,r4,4
			if(data < 0x7F && data != 0) {
				j[data]+= 6;
			}
		}

		for(k = 0; k < 0x7F; k ++) {
  80a074:	50bfe41e 	bne	r10,r2,80a008 <animate_ISR+0x134>
					sorted_j[i] = temp;
					temp = temp1;
				}
			}
		}
		drawEqulizer(sorted_j, 0xE0);
  80a078:	d809883a 	mov	r4,sp
  80a07c:	01403804 	movi	r5,224
  80a080:	08093740 	call	809374 <drawEqulizer>
static ALT_INLINE void ALT_ALWAYS_INLINE alt_irq_non_interruptible (alt_u32 mask)
{
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  NIOS2_WRITE_STATUS (0);  
  80a084:	0001703a 	wrctl	status,zero

  alt_priority_mask = mask;
  80a088:	9c000015 	stw	r16,0(r19)

  NIOS2_WRITE_IENABLE (mask & alt_irq_active);  
  80a08c:	90800017 	ldw	r2,0(r18)
  80a090:	8084703a 	and	r2,r16,r2
  80a094:	100170fa 	wrctl	ienable,r2

	}

	alt_irq_non_interruptible(tempcontext);

	IOWR_16DIRECT(TIMESTAMP_BASE, 0, 0);
  80a098:	00c04234 	movhi	r3,264
  80a09c:	18cd0804 	addi	r3,r3,13344
  80a0a0:	1800002d 	sthio	zero,0(r3)
}
  80a0a4:	dfc1c417 	ldw	ra,1808(sp)
  80a0a8:	dcc1c317 	ldw	r19,1804(sp)
  80a0ac:	dc81c217 	ldw	r18,1800(sp)
  80a0b0:	dc41c117 	ldw	r17,1796(sp)
  80a0b4:	dc01c017 	ldw	r16,1792(sp)
  80a0b8:	dec1c504 	addi	sp,sp,1812
  80a0bc:	f800283a 	ret

0080a0c0 <audio_ISR>:
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
	if(soundMixer->indexSize <= 0) {
  80a0c0:	d2275917 	ldw	r8,-25244(gp)
  80a0c4:	008000b4 	movhi	r2,2
  80a0c8:	10b08204 	addi	r2,r2,-15864
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
  80a0cc:	defffd04 	addi	sp,sp,-12
	if(soundMixer->indexSize <= 0) {
  80a0d0:	4085883a 	add	r2,r8,r2
  80a0d4:	10c00017 	ldw	r3,0(r2)
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
  80a0d8:	dc400115 	stw	r17,4(sp)
	if(soundMixer->indexSize <= 0) {
		disableAudioDeviceController();
		return;
	}
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
  80a0dc:	044000b4 	movhi	r17,2
  80a0e0:	8c708004 	addi	r17,r17,-15872
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
  80a0e4:	dc000015 	stw	r16,0(sp)
  80a0e8:	dfc00215 	stw	ra,8(sp)
	if(soundMixer->indexSize <= 0) {
		disableAudioDeviceController();
		return;
	}
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
  80a0ec:	01801804 	movi	r6,96
  80a0f0:	000f883a 	mov	r7,zero
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
  80a0f4:	2021883a 	mov	r16,r4
	if(soundMixer->indexSize <= 0) {
		disableAudioDeviceController();
		return;
	}
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
  80a0f8:	444b883a 	add	r5,r8,r17
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
	if(soundMixer->indexSize <= 0) {
  80a0fc:	00c0120e 	bge	zero,r3,80a148 <audio_ISR+0x88>
		disableAudioDeviceController();
		return;
	}
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
  80a100:	29400017 	ldw	r5,0(r5)
  80a104:	29406024 	muli	r5,r5,384
  80a108:	414b883a 	add	r5,r8,r5
  80a10c:	082bd540 	call	82bd54 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_RIGHT);
  80a110:	d0e75917 	ldw	r3,-25244(gp)
  80a114:	8009883a 	mov	r4,r16
  80a118:	01801804 	movi	r6,96
  80a11c:	1c45883a 	add	r2,r3,r17
  80a120:	11400017 	ldw	r5,0(r2)
  80a124:	01c00044 	movi	r7,1
  80a128:	29406024 	muli	r5,r5,384
  80a12c:	194b883a 	add	r5,r3,r5
  80a130:	082bd540 	call	82bd54 <alt_up_audio_write_fifo>

	incIndex();
	return;
}
  80a134:	dfc00217 	ldw	ra,8(sp)
  80a138:	dc400117 	ldw	r17,4(sp)
  80a13c:	dc000017 	ldw	r16,0(sp)
  80a140:	dec00304 	addi	sp,sp,12
		return;
	}
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_LEFT);
	alt_up_audio_write_fifo(audio_dev, soundMixer->buffer[soundMixer->currIndex], 96, ALT_UP_AUDIO_RIGHT);

	incIndex();
  80a144:	081ae641 	jmpi	81ae64 <incIndex>
	return;
}
  80a148:	dfc00217 	ldw	ra,8(sp)
  80a14c:	dc400117 	ldw	r17,4(sp)
  80a150:	dc000017 	ldw	r16,0(sp)
  80a154:	dec00304 	addi	sp,sp,12
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(alt_up_audio_dev* audio_dev, unsigned int id)
{
	if(soundMixer->indexSize <= 0) {
		disableAudioDeviceController();
  80a158:	08194f41 	jmpi	8194f4 <disableAudioDeviceController>

0080a15c <push_key_ISR>:
/**
 * The Interrupt service routine for the keys
 * This reads the values of the keys and then calls the registered key listener.
 */
void push_key_ISR(struct PushKeyController* pushKeyController, unsigned int id)
{
  80a15c:	defffd04 	addi	sp,sp,-12
  80a160:	dc000015 	stw	r16,0(sp)
  80a164:	dfc00215 	stw	ra,8(sp)
  80a168:	dc400115 	stw	r17,4(sp)
  80a16c:	2021883a 	mov	r16,r4
	pushKeyController->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  80a170:	00804234 	movhi	r2,264
  80a174:	108d2704 	addi	r2,r2,13468
  80a178:	10c00037 	ldwio	r3,0(r2)

	if(wasKeyJustPressed(pushKeyController, 0)) {
  80a17c:	000b883a 	mov	r5,zero
 * The Interrupt service routine for the keys
 * This reads the values of the keys and then calls the registered key listener.
 */
void push_key_ISR(struct PushKeyController* pushKeyController, unsigned int id)
{
	pushKeyController->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  80a180:	20c00015 	stw	r3,0(r4)

	if(wasKeyJustPressed(pushKeyController, 0)) {
  80a184:	080b5d40 	call	80b5d4 <wasKeyJustPressed>
  80a188:	10803fcc 	andi	r2,r2,255
  80a18c:	10001626 	beq	r2,zero,80a1e8 <push_key_ISR+0x8c>
		if(db.curr_song_id < db.num_of_songs)
  80a190:	00802134 	movhi	r2,132
  80a194:	108a6204 	addi	r2,r2,10632
  80a198:	10c0a717 	ldw	r3,668(r2)
  80a19c:	11000017 	ldw	r4,0(r2)
  80a1a0:	20c00816 	blt	r4,r3,80a1c4 <push_key_ISR+0x68>
		syncPause(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 3)) {
		syncPlay(db.curr_song_id, 100, 0);
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( KEYS_BASE, 0);
  80a1a4:	00804234 	movhi	r2,264
  80a1a8:	108d2704 	addi	r2,r2,13468
  80a1ac:	10000035 	stwio	zero,0(r2)
}
  80a1b0:	dfc00217 	ldw	ra,8(sp)
  80a1b4:	dc400117 	ldw	r17,4(sp)
  80a1b8:	dc000017 	ldw	r16,0(sp)
  80a1bc:	dec00304 	addi	sp,sp,12
  80a1c0:	f800283a 	ret
{
	pushKeyController->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);

	if(wasKeyJustPressed(pushKeyController, 0)) {
		if(db.curr_song_id < db.num_of_songs)
			syncNext(db.curr_song_id);
  80a1c4:	08037b40 	call	8037b4 <syncNext>
		syncPause(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 3)) {
		syncPlay(db.curr_song_id, 100, 0);
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( KEYS_BASE, 0);
  80a1c8:	00804234 	movhi	r2,264
  80a1cc:	108d2704 	addi	r2,r2,13468
  80a1d0:	10000035 	stwio	zero,0(r2)
}
  80a1d4:	dfc00217 	ldw	ra,8(sp)
  80a1d8:	dc400117 	ldw	r17,4(sp)
  80a1dc:	dc000017 	ldw	r16,0(sp)
  80a1e0:	dec00304 	addi	sp,sp,12
  80a1e4:	f800283a 	ret
	pushKeyController->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);

	if(wasKeyJustPressed(pushKeyController, 0)) {
		if(db.curr_song_id < db.num_of_songs)
			syncNext(db.curr_song_id);
	} else if( wasKeyJustPressed(pushKeyController, 1)) {
  80a1e8:	04400044 	movi	r17,1
  80a1ec:	8009883a 	mov	r4,r16
  80a1f0:	880b883a 	mov	r5,r17
  80a1f4:	080b5d40 	call	80b5d4 <wasKeyJustPressed>
  80a1f8:	10803fcc 	andi	r2,r2,255
  80a1fc:	10000d26 	beq	r2,zero,80a234 <push_key_ISR+0xd8>
		if(db.curr_song_id > 1)
  80a200:	00802134 	movhi	r2,132
  80a204:	108a6204 	addi	r2,r2,10632
  80a208:	11000017 	ldw	r4,0(r2)
  80a20c:	893fe50e 	bge	r17,r4,80a1a4 <push_key_ISR+0x48>
			syncPrev(db.curr_song_id);
  80a210:	08038780 	call	803878 <syncPrev>
		syncPause(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 3)) {
		syncPlay(db.curr_song_id, 100, 0);
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( KEYS_BASE, 0);
  80a214:	00804234 	movhi	r2,264
  80a218:	108d2704 	addi	r2,r2,13468
  80a21c:	10000035 	stwio	zero,0(r2)
}
  80a220:	dfc00217 	ldw	ra,8(sp)
  80a224:	dc400117 	ldw	r17,4(sp)
  80a228:	dc000017 	ldw	r16,0(sp)
  80a22c:	dec00304 	addi	sp,sp,12
  80a230:	f800283a 	ret
		if(db.curr_song_id < db.num_of_songs)
			syncNext(db.curr_song_id);
	} else if( wasKeyJustPressed(pushKeyController, 1)) {
		if(db.curr_song_id > 1)
			syncPrev(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 2)) {
  80a234:	8009883a 	mov	r4,r16
  80a238:	01400084 	movi	r5,2
  80a23c:	080b5d40 	call	80b5d4 <wasKeyJustPressed>
  80a240:	10803fcc 	andi	r2,r2,255
  80a244:	10000c1e 	bne	r2,zero,80a278 <push_key_ISR+0x11c>
		syncPause(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 3)) {
  80a248:	8009883a 	mov	r4,r16
  80a24c:	014000c4 	movi	r5,3
  80a250:	080b5d40 	call	80b5d4 <wasKeyJustPressed>
  80a254:	10803fcc 	andi	r2,r2,255
  80a258:	103fd226 	beq	r2,zero,80a1a4 <push_key_ISR+0x48>
		syncPlay(db.curr_song_id, 100, 0);
  80a25c:	00802134 	movhi	r2,132
  80a260:	108a6204 	addi	r2,r2,10632
  80a264:	11000017 	ldw	r4,0(r2)
  80a268:	01401904 	movi	r5,100
  80a26c:	000d883a 	mov	r6,zero
  80a270:	08034740 	call	803474 <syncPlay>
  80a274:	003fcb06 	br	80a1a4 <push_key_ISR+0x48>
			syncNext(db.curr_song_id);
	} else if( wasKeyJustPressed(pushKeyController, 1)) {
		if(db.curr_song_id > 1)
			syncPrev(db.curr_song_id);
	} else if(wasKeyJustPressed(pushKeyController, 2)) {
		syncPause(db.curr_song_id);
  80a278:	00802134 	movhi	r2,132
  80a27c:	108a6204 	addi	r2,r2,10632
  80a280:	11000017 	ldw	r4,0(r2)
  80a284:	08033ec0 	call	8033ec <syncPause>
  80a288:	003fc606 	br	80a1a4 <push_key_ISR+0x48>

0080a28c <RS232_ISR>:
	alt_irq_non_interruptible(tempcontext);

	IOWR_16DIRECT(TIMESTAMP_BASE, 0, 0);
}
alt_u32 RS232_ISR(void* up_dev) {
	if(queue_lock == 1/* || SDIO_lock == 1*/) return alt_ticks_per_second()/1000;
  80a28c:	00802134 	movhi	r2,132
  80a290:	108a3904 	addi	r2,r2,10468
  80a294:	10c00017 	ldw	r3,0(r2)

	alt_irq_non_interruptible(tempcontext);

	IOWR_16DIRECT(TIMESTAMP_BASE, 0, 0);
}
alt_u32 RS232_ISR(void* up_dev) {
  80a298:	defff904 	addi	sp,sp,-28
	if(queue_lock == 1/* || SDIO_lock == 1*/) return alt_ticks_per_second()/1000;
  80a29c:	00800044 	movi	r2,1

	alt_irq_non_interruptible(tempcontext);

	IOWR_16DIRECT(TIMESTAMP_BASE, 0, 0);
}
alt_u32 RS232_ISR(void* up_dev) {
  80a2a0:	dfc00615 	stw	ra,24(sp)
  80a2a4:	dd400515 	stw	r21,20(sp)
  80a2a8:	dd000415 	stw	r20,16(sp)
  80a2ac:	dcc00315 	stw	r19,12(sp)
  80a2b0:	dc800215 	stw	r18,8(sp)
  80a2b4:	dc400115 	stw	r17,4(sp)
  80a2b8:	dc000015 	stw	r16,0(sp)
	if(queue_lock == 1/* || SDIO_lock == 1*/) return alt_ticks_per_second()/1000;
  80a2bc:	18802726 	beq	r3,r2,80a35c <RS232_ISR+0xd0>
	alt_up_rs232_dev *serial_dev = ((struct alt_up_dev*)up_dev)->RS232_dev;
	unsigned char* cert;
	int i = 0;
	int len = 0;
	switch(*(com.stateMachine)) {
  80a2c0:	04802174 	movhi	r18,133
  80a2c4:	94b37e04 	addi	r18,r18,-12808
  80a2c8:	90c01217 	ldw	r3,72(r18)
  80a2cc:	00800284 	movi	r2,10

	IOWR_16DIRECT(TIMESTAMP_BASE, 0, 0);
}
alt_u32 RS232_ISR(void* up_dev) {
	if(queue_lock == 1/* || SDIO_lock == 1*/) return alt_ticks_per_second()/1000;
	alt_up_rs232_dev *serial_dev = ((struct alt_up_dev*)up_dev)->RS232_dev;
  80a2d0:	24000017 	ldw	r16,0(r4)
	unsigned char* cert;
	int i = 0;
	int len = 0;
	switch(*(com.stateMachine)) {
  80a2d4:	18c00017 	ldw	r3,0(r3)
  80a2d8:	10c00e2e 	bgeu	r2,r3,80a314 <RS232_ISR+0x88>
		return alt_ticks_per_second()/20;
	default:
		break;
	}

	return alt_ticks_per_second()/20;
  80a2dc:	00802134 	movhi	r2,132
  80a2e0:	108a4904 	addi	r2,r2,10532
  80a2e4:	11000017 	ldw	r4,0(r2)
  80a2e8:	01400504 	movi	r5,20
  80a2ec:	0820c080 	call	820c08 <__udivsi3>
}
  80a2f0:	dfc00617 	ldw	ra,24(sp)
  80a2f4:	dd400517 	ldw	r21,20(sp)
  80a2f8:	dd000417 	ldw	r20,16(sp)
  80a2fc:	dcc00317 	ldw	r19,12(sp)
  80a300:	dc800217 	ldw	r18,8(sp)
  80a304:	dc400117 	ldw	r17,4(sp)
  80a308:	dc000017 	ldw	r16,0(sp)
  80a30c:	dec00704 	addi	sp,sp,28
  80a310:	f800283a 	ret
	if(queue_lock == 1/* || SDIO_lock == 1*/) return alt_ticks_per_second()/1000;
	alt_up_rs232_dev *serial_dev = ((struct alt_up_dev*)up_dev)->RS232_dev;
	unsigned char* cert;
	int i = 0;
	int len = 0;
	switch(*(com.stateMachine)) {
  80a314:	18c5883a 	add	r2,r3,r3
  80a318:	1085883a 	add	r2,r2,r2
  80a31c:	00c02074 	movhi	r3,129
  80a320:	18e8cc04 	addi	r3,r3,-23760
  80a324:	10c5883a 	add	r2,r2,r3
  80a328:	11000017 	ldw	r4,0(r2)
  80a32c:	2000683a 	jmp	r4
  80a330:	0080a374 	movhi	r2,653
  80a334:	0080a5ac 	andhi	r2,zero,662
  80a338:	0080a540 	call	80a54 <__reset-0x77f5ac>
  80a33c:	0080a4dc 	xori	r2,zero,659
  80a340:	0080a478 	rdprs	r2,zero,657
  80a344:	0080a2dc 	xori	r2,zero,651
  80a348:	0080a2dc 	xori	r2,zero,651
  80a34c:	0080a600 	call	80a60 <__reset-0x77f5a0>
  80a350:	0080a5b4 	movhi	r2,662
  80a354:	0080a43c 	xorhi	r2,zero,656
  80a358:	0080a3d8 	cmpnei	r2,zero,655
	alt_irq_non_interruptible(tempcontext);

	IOWR_16DIRECT(TIMESTAMP_BASE, 0, 0);
}
alt_u32 RS232_ISR(void* up_dev) {
	if(queue_lock == 1/* || SDIO_lock == 1*/) return alt_ticks_per_second()/1000;
  80a35c:	00802134 	movhi	r2,132
  80a360:	108a4904 	addi	r2,r2,10532
  80a364:	11000017 	ldw	r4,0(r2)
  80a368:	0140fa04 	movi	r5,1000
  80a36c:	0820c080 	call	820c08 <__udivsi3>
  80a370:	003fdf06 	br	80a2f0 <RS232_ISR+0x64>
				setStates(startInit);
		}
		return alt_ticks_per_second()/20;
	case checkClient:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  80a374:	8009883a 	mov	r4,r16
  80a378:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a37c:	00c00084 	movi	r3,2
  80a380:	1880900e 	bge	r3,r2,80a5c4 <RS232_ISR+0x338>
  80a384:	182b883a 	mov	r21,r3
  80a388:	0023883a 	mov	r17,zero
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  80a38c:	8009883a 	mov	r4,r16
  80a390:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a394:	103ffd26 	beq	r2,zero,80a38c <RS232_ISR+0x100>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  80a398:	04c02174 	movhi	r19,133
  80a39c:	9cf37e04 	addi	r19,r19,-12808
  80a3a0:	8c8b883a 	add	r5,r17,r18
  80a3a4:	8009883a 	mov	r4,r16
  80a3a8:	99800c84 	addi	r6,r19,50
				i++;
  80a3ac:	8c400044 	addi	r17,r17,1
	case checkClient:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  80a3b0:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
				i++;
  80a3b4:	05000044 	movi	r20,1
			} while(i < 3);
  80a3b8:	ac7ff40e 	bge	r21,r17,80a38c <RS232_ISR+0x100>
			if(checkAck(com.data) == 1) {
  80a3bc:	9809883a 	mov	r4,r19
  80a3c0:	080beec0 	call	80beec <checkAck>
  80a3c4:	1021883a 	mov	r16,r2
  80a3c8:	1500e426 	beq	r2,r20,80a75c <RS232_ISR+0x4d0>
			if(checkAck(com.data) == 1) {
				setStates(sendData0);
			} else {
				com.failReceive++;
				if(com.failReceive > 100)
					setStates(sendStates);
  80a3cc:	a009883a 	mov	r4,r20
  80a3d0:	080ba8c0 	call	80ba8c <setStates>
  80a3d4:	003fc106 	br	80a2dc <RS232_ISR+0x50>
		cert = NULL;
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case waitStart:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  80a3d8:	8009883a 	mov	r4,r16
  80a3dc:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a3e0:	00c00084 	movi	r3,2
  80a3e4:	1880920e 	bge	r3,r2,80a630 <RS232_ISR+0x3a4>
  80a3e8:	1829883a 	mov	r20,r3
  80a3ec:	0023883a 	mov	r17,zero
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  80a3f0:	8009883a 	mov	r4,r16
  80a3f4:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a3f8:	103ffd26 	beq	r2,zero,80a3f0 <RS232_ISR+0x164>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  80a3fc:	04c02174 	movhi	r19,133
  80a400:	9cf37e04 	addi	r19,r19,-12808
  80a404:	8c8b883a 	add	r5,r17,r18
  80a408:	8009883a 	mov	r4,r16
				i++;
  80a40c:	8c400044 	addi	r17,r17,1
	case waitStart:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  80a410:	99800c84 	addi	r6,r19,50
  80a414:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
				i++;
			} while(i < 3);
  80a418:	a47ff50e 	bge	r20,r17,80a3f0 <RS232_ISR+0x164>
			if(checkStartAck(com.data[0]) == 1) {
  80a41c:	99000003 	ldbu	r4,0(r19)
  80a420:	080bf900 	call	80bf90 <checkStartAck>
  80a424:	1007883a 	mov	r3,r2
  80a428:	00800044 	movi	r2,1
  80a42c:	1880c826 	beq	r3,r2,80a750 <RS232_ISR+0x4c4>
			} else
				setStates(startInit);
		} else {
			com.failReceive++;
			if(com.failReceive > 10)
				setStates(startInit);
  80a430:	01000244 	movi	r4,9
  80a434:	080ba8c0 	call	80ba8c <setStates>
  80a438:	003fa806 	br	80a2dc <RS232_ISR+0x50>
	unsigned char* cert;
	int i = 0;
	int len = 0;
	switch(*(com.stateMachine)) {
	case startInit:
		cert = sendStartInit();
  80a43c:	080c2780 	call	80c278 <sendStartInit>
			}
		}
		return alt_ticks_per_second()/20;
	case sendStates:
		cert = sendStats();
		sendRS232(serial_dev, cert, 3);
  80a440:	8009883a 	mov	r4,r16
  80a444:	100b883a 	mov	r5,r2
  80a448:	018000c4 	movi	r6,3
				reset(serial_dev);
			}
		}
		return alt_ticks_per_second()/20;
	case sendStates:
		cert = sendStats();
  80a44c:	1023883a 	mov	r17,r2
		sendRS232(serial_dev, cert, 3);
  80a450:	080baac0 	call	80baac <sendRS232>
		free(cert);
  80a454:	8809883a 	mov	r4,r17
  80a458:	08216e80 	call	8216e8 <free>
		cert = NULL;
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
  80a45c:	00802134 	movhi	r2,132
  80a460:	108a4904 	addi	r2,r2,10532
  80a464:	11000017 	ldw	r4,0(r2)
  80a468:	01400504 	movi	r5,20
	case sendStates:
		cert = sendStats();
		sendRS232(serial_dev, cert, 3);
		free(cert);
		cert = NULL;
		com.failReceive = 0;
  80a46c:	90001715 	stw	zero,92(r18)
		return alt_ticks_per_second()/20;
  80a470:	0820c080 	call	820c08 <__udivsi3>
  80a474:	003f9e06 	br	80a2f0 <RS232_ISR+0x64>
		setStates(waitAck0);
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case waitAck0:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  80a478:	8009883a 	mov	r4,r16
  80a47c:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a480:	00c00084 	movi	r3,2
  80a484:	18804f0e 	bge	r3,r2,80a5c4 <RS232_ISR+0x338>
  80a488:	1829883a 	mov	r20,r3
  80a48c:	0023883a 	mov	r17,zero
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  80a490:	8009883a 	mov	r4,r16
  80a494:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a498:	103ffd26 	beq	r2,zero,80a490 <RS232_ISR+0x204>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  80a49c:	04c02174 	movhi	r19,133
  80a4a0:	9cf37e04 	addi	r19,r19,-12808
  80a4a4:	8c8b883a 	add	r5,r17,r18
  80a4a8:	8009883a 	mov	r4,r16
				i++;
  80a4ac:	8c400044 	addi	r17,r17,1
	case waitAck0:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  80a4b0:	99800c84 	addi	r6,r19,50
  80a4b4:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
				i++;
			} while(i < 3);
  80a4b8:	a47ff50e 	bge	r20,r17,80a490 <RS232_ISR+0x204>
			if(checkAck(com.data) == 1) {
  80a4bc:	9809883a 	mov	r4,r19
  80a4c0:	080beec0 	call	80beec <checkAck>
  80a4c4:	1021883a 	mov	r16,r2
  80a4c8:	00800044 	movi	r2,1
  80a4cc:	80809226 	beq	r16,r2,80a718 <RS232_ISR+0x48c>
					com.index_send_packets = com.num_send_packets = 0;
					setStates(sendStates);
					com.isRdySend = 0;
				}
			} else {
				setStates(sendData0);
  80a4d0:	010000c4 	movi	r4,3
  80a4d4:	080ba8c0 	call	80ba8c <setStates>
  80a4d8:	003f8006 	br	80a2dc <RS232_ISR+0x50>
				reset(serial_dev);
			}
		}
		return alt_ticks_per_second()/20;
	case sendData0:
		if(com.packetBuf == NULL) {
  80a4dc:	90801017 	ldw	r2,64(r18)
  80a4e0:	04402174 	movhi	r17,133
  80a4e4:	8c737e04 	addi	r17,r17,-12808
  80a4e8:	10007c26 	beq	r2,zero,80a6dc <RS232_ISR+0x450>
			if((com.packetBuf = (struct Packet*)dequeue(com.sendPackets))==NULL) {
				printf("Packet sending fail, queue is empty");
				setStates(sendStates);
				return alt_ticks_per_second()/50;
			}
		} setAck(com.packetBuf, com.host_ack);
  80a4ec:	91001017 	ldw	r4,64(r18)
  80a4f0:	91401517 	ldw	r5,84(r18)
  80a4f4:	080b2300 	call	80b230 <setAck>

		for(i = 0; i< com.packetBuf->data_size+HEADERSIZE; i++) {
  80a4f8:	90c01017 	ldw	r3,64(r18)
  80a4fc:	18800117 	ldw	r2,4(r3)
  80a500:	10800084 	addi	r2,r2,2
  80a504:	00800b0e 	bge	zero,r2,80a534 <RS232_ISR+0x2a8>
  80a508:	0023883a 	mov	r17,zero
			alt_up_rs232_write_data(serial_dev, com.packetBuf->data[i]);
  80a50c:	18800017 	ldw	r2,0(r3)
  80a510:	8009883a 	mov	r4,r16
  80a514:	1445883a 	add	r2,r2,r17
  80a518:	11400003 	ldbu	r5,0(r2)
				setStates(sendStates);
				return alt_ticks_per_second()/50;
			}
		} setAck(com.packetBuf, com.host_ack);

		for(i = 0; i< com.packetBuf->data_size+HEADERSIZE; i++) {
  80a51c:	8c400044 	addi	r17,r17,1
			alt_up_rs232_write_data(serial_dev, com.packetBuf->data[i]);
  80a520:	082c7e80 	call	82c7e8 <alt_up_rs232_write_data>
				setStates(sendStates);
				return alt_ticks_per_second()/50;
			}
		} setAck(com.packetBuf, com.host_ack);

		for(i = 0; i< com.packetBuf->data_size+HEADERSIZE; i++) {
  80a524:	90c01017 	ldw	r3,64(r18)
  80a528:	18800117 	ldw	r2,4(r3)
  80a52c:	10800084 	addi	r2,r2,2
  80a530:	88bff616 	blt	r17,r2,80a50c <RS232_ISR+0x280>
			alt_up_rs232_write_data(serial_dev, com.packetBuf->data[i]);
		}
		setStates(waitAck0);
  80a534:	01000104 	movi	r4,4
  80a538:	080ba8c0 	call	80ba8c <setStates>
  80a53c:	003fc706 	br	80a45c <RS232_ISR+0x1d0>
			}
		}
		return alt_ticks_per_second()/20;
	case waitClient:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  80a540:	8009883a 	mov	r4,r16
  80a544:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a548:	00c00084 	movi	r3,2
  80a54c:	18801d0e 	bge	r3,r2,80a5c4 <RS232_ISR+0x338>
  80a550:	182b883a 	mov	r21,r3
  80a554:	0023883a 	mov	r17,zero
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  80a558:	8009883a 	mov	r4,r16
  80a55c:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a560:	103ffd26 	beq	r2,zero,80a558 <RS232_ISR+0x2cc>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  80a564:	04c02174 	movhi	r19,133
  80a568:	9cf37e04 	addi	r19,r19,-12808
  80a56c:	8c8b883a 	add	r5,r17,r18
  80a570:	8009883a 	mov	r4,r16
  80a574:	99800c84 	addi	r6,r19,50
				i++;
  80a578:	8c400044 	addi	r17,r17,1
	case waitClient:
		i = 0;
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  80a57c:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
				i++;
  80a580:	05000044 	movi	r20,1
			} while(i < 3);
  80a584:	ac7ff40e 	bge	r21,r17,80a558 <RS232_ISR+0x2cc>
			if(checkAck(com.data) == 1) {
  80a588:	9809883a 	mov	r4,r19
  80a58c:	080beec0 	call	80beec <checkAck>
  80a590:	153fcf26 	beq	r2,r20,80a4d0 <RS232_ISR+0x244>
				setStates(sendData0);
			} else {
				com.failReceive++;
  80a594:	98801717 	ldw	r2,92(r19)
				if(com.failReceive > 100)
  80a598:	00c01904 	movi	r3,100
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				setStates(sendData0);
			} else {
				com.failReceive++;
  80a59c:	10800044 	addi	r2,r2,1
  80a5a0:	98801715 	stw	r2,92(r19)
				if(com.failReceive > 100)
  80a5a4:	18bf4d0e 	bge	r3,r2,80a2dc <RS232_ISR+0x50>
  80a5a8:	003f8806 	br	80a3cc <RS232_ISR+0x140>
				reset(serial_dev);
			}
		}
		return alt_ticks_per_second()/20;
	case sendStates:
		cert = sendStats();
  80a5ac:	080c1380 	call	80c138 <sendStats>
  80a5b0:	003fa306 	br	80a440 <RS232_ISR+0x1b4>
		free(cert);
		cert = NULL;
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case receiveData0:
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) > 2) {
  80a5b4:	8009883a 	mov	r4,r16
  80a5b8:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a5bc:	00c00084 	movi	r3,2
  80a5c0:	18802116 	blt	r3,r2,80a648 <RS232_ISR+0x3bc>
				}
			} else {
				setStates(sendData0);
			}
		} else {
			com.failReceive++;
  80a5c4:	90801717 	ldw	r2,92(r18)
  80a5c8:	11400044 	addi	r5,r2,1
			if(com.failReceive > 100) {
  80a5cc:	00801904 	movi	r2,100
				}
			} else {
				setStates(sendData0);
			}
		} else {
			com.failReceive++;
  80a5d0:	91401715 	stw	r5,92(r18)
			if(com.failReceive > 100) {
  80a5d4:	117f410e 	bge	r2,r5,80a2dc <RS232_ISR+0x50>
				printf("fail communication %d at stats %d\n", com.failReceive, *com.stateMachine);
  80a5d8:	00802174 	movhi	r2,133
  80a5dc:	10b37e04 	addi	r2,r2,-12808
  80a5e0:	10c01217 	ldw	r3,72(r2)
  80a5e4:	010020f4 	movhi	r4,131
  80a5e8:	210e1404 	addi	r4,r4,14416
  80a5ec:	19800017 	ldw	r6,0(r3)
  80a5f0:	08220680 	call	822068 <printf>
				reset(serial_dev);
  80a5f4:	8009883a 	mov	r4,r16
  80a5f8:	080bd780 	call	80bd78 <reset>
  80a5fc:	003f3706 	br	80a2dc <RS232_ISR+0x50>
		free(cert);
		cert = NULL;
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case sendAck0:
		cert = sendAck();
  80a600:	080c00c0 	call	80c00c <sendAck>
  80a604:	1023883a 	mov	r17,r2
		sendRS232(serial_dev, cert, 3);
  80a608:	100b883a 	mov	r5,r2
  80a60c:	8009883a 	mov	r4,r16
  80a610:	018000c4 	movi	r6,3
  80a614:	080baac0 	call	80baac <sendRS232>
		if(cert[1] != 0)
  80a618:	88800043 	ldbu	r2,1(r17)
  80a61c:	103f8d26 	beq	r2,zero,80a454 <RS232_ISR+0x1c8>
			printf("sth is wrong");
  80a620:	010020f4 	movhi	r4,131
  80a624:	210e1d04 	addi	r4,r4,14452
  80a628:	08220680 	call	822068 <printf>
  80a62c:	003f8906 	br	80a454 <RS232_ISR+0x1c8>
			if(checkStartAck(com.data[0]) == 1) {
				setStates(sendStates);
			} else
				setStates(startInit);
		} else {
			com.failReceive++;
  80a630:	90801717 	ldw	r2,92(r18)
			if(com.failReceive > 10)
  80a634:	00c00284 	movi	r3,10
			if(checkStartAck(com.data[0]) == 1) {
				setStates(sendStates);
			} else
				setStates(startInit);
		} else {
			com.failReceive++;
  80a638:	10800044 	addi	r2,r2,1
  80a63c:	90801715 	stw	r2,92(r18)
			if(com.failReceive > 10)
  80a640:	18bf260e 	bge	r3,r2,80a2dc <RS232_ISR+0x50>
  80a644:	003f7a06 	br	80a430 <RS232_ISR+0x1a4>
		com.failReceive = 0;
		return alt_ticks_per_second()/20;
	case receiveData0:
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) > 2) {
			//read first 2 bytes for header information
			alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);
  80a648:	01402174 	movhi	r5,133
  80a64c:	29737e04 	addi	r5,r5,-12808
  80a650:	29800c84 	addi	r6,r5,50
  80a654:	8009883a 	mov	r4,r16
  80a658:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
			alt_up_rs232_read_data(serial_dev, &com.data[1], &com.parity);
  80a65c:	01402174 	movhi	r5,133
  80a660:	29737e44 	addi	r5,r5,-12807
  80a664:	29800c44 	addi	r6,r5,49
  80a668:	8009883a 	mov	r4,r16
  80a66c:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
			struct Packet* p = readPacketHeader(com.data[0], com.data[1]);
  80a670:	91000003 	ldbu	r4,0(r18)
  80a674:	91400043 	ldbu	r5,1(r18)
  80a678:	0027883a 	mov	r19,zero
  80a67c:	080b1080 	call	80b108 <readPacketHeader>
  80a680:	1023883a 	mov	r17,r2
			i = 0;
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  80a684:	8009883a 	mov	r4,r16
  80a688:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
  80a68c:	103ffd26 	beq	r2,zero,80a684 <RS232_ISR+0x3f8>
				alt_up_rs232_read_data(serial_dev, &(p->data[i+HEADERSIZE]), &com.parity);
  80a690:	89400017 	ldw	r5,0(r17)
  80a694:	8009883a 	mov	r4,r16
  80a698:	01802174 	movhi	r6,133
  80a69c:	31b38a84 	addi	r6,r6,-12758
  80a6a0:	994b883a 	add	r5,r19,r5
  80a6a4:	29400084 	addi	r5,r5,2
  80a6a8:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
			//	printf("%c", p->data[i+HEADERSIZE]);
				i++;
			} while(p->data_size > i );
  80a6ac:	88c00117 	ldw	r3,4(r17)
			i = 0;
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &(p->data[i+HEADERSIZE]), &com.parity);
			//	printf("%c", p->data[i+HEADERSIZE]);
				i++;
  80a6b0:	9cc00044 	addi	r19,r19,1
			} while(p->data_size > i );
  80a6b4:	98fff316 	blt	r19,r3,80a684 <RS232_ISR+0x3f8>
			//printf("\n");
			enqueue(com.receivePackets, (void*)p);
  80a6b8:	91000e17 	ldw	r4,56(r18)
  80a6bc:	880b883a 	mov	r5,r17
  80a6c0:	080b6940 	call	80b694 <enqueue>
			com.index_packets++;
  80a6c4:	90801917 	ldw	r2,100(r18)
			setStates(sendAck0);
  80a6c8:	010001c4 	movi	r4,7
			//	printf("%c", p->data[i+HEADERSIZE]);
				i++;
			} while(p->data_size > i );
			//printf("\n");
			enqueue(com.receivePackets, (void*)p);
			com.index_packets++;
  80a6cc:	10800044 	addi	r2,r2,1
  80a6d0:	90801915 	stw	r2,100(r18)
			setStates(sendAck0);
  80a6d4:	080ba8c0 	call	80ba8c <setStates>
  80a6d8:	003f0006 	br	80a2dc <RS232_ISR+0x50>
			}
		}
		return alt_ticks_per_second()/20;
	case sendData0:
		if(com.packetBuf == NULL) {
			if((com.packetBuf = (struct Packet*)dequeue(com.sendPackets))==NULL) {
  80a6dc:	89000d17 	ldw	r4,52(r17)
  80a6e0:	080b7a00 	call	80b7a0 <dequeue>
  80a6e4:	88801015 	stw	r2,64(r17)
  80a6e8:	103f801e 	bne	r2,zero,80a4ec <RS232_ISR+0x260>
				printf("Packet sending fail, queue is empty");
  80a6ec:	010020f4 	movhi	r4,131
  80a6f0:	210e2104 	addi	r4,r4,14468
  80a6f4:	08220680 	call	822068 <printf>
				setStates(sendStates);
  80a6f8:	01000044 	movi	r4,1
  80a6fc:	080ba8c0 	call	80ba8c <setStates>
				return alt_ticks_per_second()/50;
  80a700:	00802134 	movhi	r2,132
  80a704:	108a4904 	addi	r2,r2,10532
  80a708:	11000017 	ldw	r4,0(r2)
  80a70c:	01400c84 	movi	r5,50
  80a710:	0820c080 	call	820c08 <__udivsi3>
  80a714:	003ef606 	br	80a2f0 <RS232_ISR+0x64>
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				com.index_send_packets++;
  80a718:	98801b17 	ldw	r2,108(r19)
				killPacket(&(com.packetBuf));
  80a71c:	99001004 	addi	r4,r19,64
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				com.index_send_packets++;
  80a720:	1405883a 	add	r2,r2,r16
  80a724:	98801b15 	stw	r2,108(r19)
				killPacket(&(com.packetBuf));
  80a728:	080b0a00 	call	80b0a0 <killPacket>
				if(com.index_send_packets < com.num_send_packets)
  80a72c:	98c01b17 	ldw	r3,108(r19)
  80a730:	98801a17 	ldw	r2,104(r19)
  80a734:	18bf6616 	blt	r3,r2,80a4d0 <RS232_ISR+0x244>
					setStates(sendData0);
				else {
					com.index_send_packets = com.num_send_packets = 0;
					setStates(sendStates);
  80a738:	8009883a 	mov	r4,r16
				com.index_send_packets++;
				killPacket(&(com.packetBuf));
				if(com.index_send_packets < com.num_send_packets)
					setStates(sendData0);
				else {
					com.index_send_packets = com.num_send_packets = 0;
  80a73c:	98001a15 	stw	zero,104(r19)
  80a740:	98001b15 	stw	zero,108(r19)
					setStates(sendStates);
  80a744:	080ba8c0 	call	80ba8c <setStates>
					com.isRdySend = 0;
  80a748:	98001615 	stw	zero,88(r19)
  80a74c:	003ee306 	br	80a2dc <RS232_ISR+0x50>
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkStartAck(com.data[0]) == 1) {
				setStates(sendStates);
  80a750:	1809883a 	mov	r4,r3
  80a754:	080ba8c0 	call	80ba8c <setStates>
  80a758:	003ee006 	br	80a2dc <RS232_ISR+0x50>
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				if(getBit(com.data[0], 1) == 1) {
  80a75c:	99000003 	ldbu	r4,0(r19)
  80a760:	100b883a 	mov	r5,r2
  80a764:	080aed80 	call	80aed8 <getBit>
  80a768:	14000326 	beq	r2,r16,80a778 <RS232_ISR+0x4ec>
					setStates(sendAck0);
					com.num_packets = ((int)(com.data[1] << 8))+(int)com.data[2];
					//printf("num of packets will be receiving: %d\n", com.num_packets);
				} else
					setStates(sendStates);
  80a76c:	8009883a 	mov	r4,r16
  80a770:	080ba8c0 	call	80ba8c <setStates>
  80a774:	003ed906 	br	80a2dc <RS232_ISR+0x50>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
				i++;
			} while(i < 3);
			if(checkAck(com.data) == 1) {
				if(getBit(com.data[0], 1) == 1) {
					setStates(sendAck0);
  80a778:	010001c4 	movi	r4,7
  80a77c:	080ba8c0 	call	80ba8c <setStates>
					com.num_packets = ((int)(com.data[1] << 8))+(int)com.data[2];
  80a780:	98800043 	ldbu	r2,1(r19)
  80a784:	98c00083 	ldbu	r3,2(r19)
  80a788:	1004923a 	slli	r2,r2,8
  80a78c:	10c5883a 	add	r2,r2,r3
  80a790:	98801815 	stw	r2,96(r19)
  80a794:	003ed106 	br	80a2dc <RS232_ISR+0x50>

0080a798 <ps2_ISR>:

	incIndex();
	return;
}

void ps2_ISR(struct Cursor* cursor) {
  80a798:	defff904 	addi	sp,sp,-28
  80a79c:	dc800215 	stw	r18,8(sp)
  80a7a0:	dc000015 	stw	r16,0(sp)
  80a7a4:	2025883a 	mov	r18,r4
	int tempcontext;
	unsigned char* bytes = (unsigned char*)malloc(sizeof(unsigned char)*3);
	int i, dx = 0, dy = 0;
	for(i = 0; i < 3; i++) {
		alt_up_ps2_read_data_byte_timeout(up_dev.ps2_dev, (bytes+i));
  80a7a8:	04002174 	movhi	r16,133
  80a7ac:	8433a104 	addi	r16,r16,-12668
	return;
}

void ps2_ISR(struct Cursor* cursor) {
	int tempcontext;
	unsigned char* bytes = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80a7b0:	010000c4 	movi	r4,3

	incIndex();
	return;
}

void ps2_ISR(struct Cursor* cursor) {
  80a7b4:	dfc00615 	stw	ra,24(sp)
  80a7b8:	dd400515 	stw	r21,20(sp)
  80a7bc:	dd000415 	stw	r20,16(sp)
  80a7c0:	dcc00315 	stw	r19,12(sp)
  80a7c4:	dc400115 	stw	r17,4(sp)
	int tempcontext;
	unsigned char* bytes = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80a7c8:	08216fc0 	call	8216fc <malloc>
	int i, dx = 0, dy = 0;
	for(i = 0; i < 3; i++) {
		alt_up_ps2_read_data_byte_timeout(up_dev.ps2_dev, (bytes+i));
  80a7cc:	81000217 	ldw	r4,8(r16)
  80a7d0:	100b883a 	mov	r5,r2
	return;
}

void ps2_ISR(struct Cursor* cursor) {
	int tempcontext;
	unsigned char* bytes = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80a7d4:	1023883a 	mov	r17,r2
	int i, dx = 0, dy = 0;
	for(i = 0; i < 3; i++) {
		alt_up_ps2_read_data_byte_timeout(up_dev.ps2_dev, (bytes+i));
  80a7d8:	082c4d00 	call	82c4d0 <alt_up_ps2_read_data_byte_timeout>
  80a7dc:	81000217 	ldw	r4,8(r16)
  80a7e0:	89400044 	addi	r5,r17,1
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  alt_u32 old_priority;

  old_priority      = alt_priority_mask;
  80a7e4:	04c02134 	movhi	r19,132
  80a7e8:	9cc2ee04 	addi	r19,r19,3000
  80a7ec:	082c4d00 	call	82c4d0 <alt_up_ps2_read_data_byte_timeout>
  80a7f0:	81000217 	ldw	r4,8(r16)
  80a7f4:	89400084 	addi	r5,r17,2
  alt_priority_mask = (1 << priority) - 1;

  NIOS2_WRITE_IENABLE (alt_irq_active & alt_priority_mask);
  80a7f8:	05402134 	movhi	r21,132
  80a7fc:	ad4a4504 	addi	r21,r21,10516
  80a800:	082c4d00 	call	82c4d0 <alt_up_ps2_read_data_byte_timeout>
  extern volatile alt_u32 alt_irq_active;

  alt_u32 old_priority;

  old_priority      = alt_priority_mask;
  alt_priority_mask = (1 << priority) - 1;
  80a804:	00c001c4 	movi	r3,7
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  alt_u32 old_priority;

  old_priority      = alt_priority_mask;
  80a808:	9d000017 	ldw	r20,0(r19)
  alt_priority_mask = (1 << priority) - 1;
  80a80c:	98c00015 	stw	r3,0(r19)

  NIOS2_WRITE_IENABLE (alt_irq_active & alt_priority_mask);
  80a810:	a8800017 	ldw	r2,0(r21)
  80a814:	98c00017 	ldw	r3,0(r19)
  80a818:	04000044 	movi	r16,1
  80a81c:	10c4703a 	and	r2,r2,r3
  80a820:	100170fa 	wrctl	ienable,r2

  NIOS2_WRITE_STATUS (1);
  80a824:	8001703a 	wrctl	status,r16
	}

	tempcontext= alt_irq_interruptible(PS2_0_IRQ);
	if((bytes[0] & 0x08) == 0x08) {
  80a828:	88c00003 	ldbu	r3,0(r17)
  80a82c:	1880020c 	andi	r2,r3,8
  80a830:	10000d26 	beq	r2,zero,80a868 <ps2_ISR+0xd0>
		if((bytes[0] & 0x01) == 1) {
  80a834:	1c04703a 	and	r2,r3,r16
  80a838:	1005003a 	cmpeq	r2,r2,zero
  80a83c:	10003126 	beq	r2,zero,80a904 <ps2_ISR+0x16c>
			cursor->isLeftPressed = true;
			printf("mouse left is clicked\n");
		}
		if((bytes[0] & 0x02) == 0x02) {
  80a840:	1880008c 	andi	r2,r3,2
  80a844:	1000251e 	bne	r2,zero,80a8dc <ps2_ISR+0x144>
			cursor->isRightPressed = true;
			printf("mouse right is clicked\n");
		}
		dx = bytes[1]; dy = bytes[2];
		if((bytes[0] & 0x10) == 0x10)
  80a848:	1880040c 	andi	r2,r3,16
		}
		if((bytes[0] & 0x02) == 0x02) {
			cursor->isRightPressed = true;
			printf("mouse right is clicked\n");
		}
		dx = bytes[1]; dy = bytes[2];
  80a84c:	89400043 	ldbu	r5,1(r17)
  80a850:	89800083 	ldbu	r6,2(r17)
		if((bytes[0] & 0x10) == 0x10)
  80a854:	10001c1e 	bne	r2,zero,80a8c8 <ps2_ISR+0x130>
			dx |= 0xFFFFFF00;
		if((bytes[0] & 0x20) == 0x20)
  80a858:	1880080c 	andi	r2,r3,32
  80a85c:	1000171e 	bne	r2,zero,80a8bc <ps2_ISR+0x124>
			dy |= 0xFFFFFF00;
		moveCursor(cursor, dx, dy);
  80a860:	9009883a 	mov	r4,r18
  80a864:	08048d40 	call	8048d4 <moveCursor>
	}
	free(bytes);
  80a868:	8809883a 	mov	r4,r17
  80a86c:	08216e80 	call	8216e8 <free>

	checkButtonCollision(cursor, cursor->frame);
  80a870:	91400317 	ldw	r5,12(r18)
  80a874:	9009883a 	mov	r4,r18
  80a878:	080c8840 	call	80c884 <checkButtonCollision>
	updateCursor(cursor);
  80a87c:	9009883a 	mov	r4,r18
  80a880:	0804a680 	call	804a68 <updateCursor>
static ALT_INLINE void ALT_ALWAYS_INLINE alt_irq_non_interruptible (alt_u32 mask)
{
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  NIOS2_WRITE_STATUS (0);  
  80a884:	0001703a 	wrctl	status,zero

  alt_priority_mask = mask;
  80a888:	9d000015 	stw	r20,0(r19)

  NIOS2_WRITE_IENABLE (mask & alt_irq_active);  
  80a88c:	a8800017 	ldw	r2,0(r21)
  80a890:	a084703a 	and	r2,r20,r2
  80a894:	100170fa 	wrctl	ienable,r2
	alt_irq_non_interruptible(tempcontext);

}
  80a898:	dfc00617 	ldw	ra,24(sp)
  80a89c:	dd400517 	ldw	r21,20(sp)
  80a8a0:	dd000417 	ldw	r20,16(sp)
  80a8a4:	dcc00317 	ldw	r19,12(sp)
  80a8a8:	dc800217 	ldw	r18,8(sp)
  80a8ac:	dc400117 	ldw	r17,4(sp)
  80a8b0:	dc000017 	ldw	r16,0(sp)
  80a8b4:	dec00704 	addi	sp,sp,28
  80a8b8:	f800283a 	ret
		}
		dx = bytes[1]; dy = bytes[2];
		if((bytes[0] & 0x10) == 0x10)
			dx |= 0xFFFFFF00;
		if((bytes[0] & 0x20) == 0x20)
			dy |= 0xFFFFFF00;
  80a8bc:	00bfc004 	movi	r2,-256
  80a8c0:	308cb03a 	or	r6,r6,r2
  80a8c4:	003fe606 	br	80a860 <ps2_ISR+0xc8>
			cursor->isRightPressed = true;
			printf("mouse right is clicked\n");
		}
		dx = bytes[1]; dy = bytes[2];
		if((bytes[0] & 0x10) == 0x10)
			dx |= 0xFFFFFF00;
  80a8c8:	00bfc004 	movi	r2,-256
  80a8cc:	288ab03a 	or	r5,r5,r2
		if((bytes[0] & 0x20) == 0x20)
  80a8d0:	1880080c 	andi	r2,r3,32
  80a8d4:	103fe226 	beq	r2,zero,80a860 <ps2_ISR+0xc8>
  80a8d8:	003ff806 	br	80a8bc <ps2_ISR+0x124>
		if((bytes[0] & 0x01) == 1) {
			cursor->isLeftPressed = true;
			printf("mouse left is clicked\n");
		}
		if((bytes[0] & 0x02) == 0x02) {
			cursor->isRightPressed = true;
  80a8dc:	94000245 	stb	r16,9(r18)
			printf("mouse right is clicked\n");
  80a8e0:	010020f4 	movhi	r4,131
  80a8e4:	210e3004 	addi	r4,r4,14528
  80a8e8:	08221800 	call	822180 <puts>
  80a8ec:	88c00003 	ldbu	r3,0(r17)
		}
		dx = bytes[1]; dy = bytes[2];
  80a8f0:	89400043 	ldbu	r5,1(r17)
  80a8f4:	89800083 	ldbu	r6,2(r17)
		if((bytes[0] & 0x10) == 0x10)
  80a8f8:	1880040c 	andi	r2,r3,16
  80a8fc:	103fd626 	beq	r2,zero,80a858 <ps2_ISR+0xc0>
  80a900:	003ff106 	br	80a8c8 <ps2_ISR+0x130>
	}

	tempcontext= alt_irq_interruptible(PS2_0_IRQ);
	if((bytes[0] & 0x08) == 0x08) {
		if((bytes[0] & 0x01) == 1) {
			cursor->isLeftPressed = true;
  80a904:	94000205 	stb	r16,8(r18)
			printf("mouse left is clicked\n");
  80a908:	010020f4 	movhi	r4,131
  80a90c:	210e2a04 	addi	r4,r4,14504
  80a910:	08221800 	call	822180 <puts>
  80a914:	88c00003 	ldbu	r3,0(r17)
		}
		if((bytes[0] & 0x02) == 0x02) {
  80a918:	1880008c 	andi	r2,r3,2
  80a91c:	103fca26 	beq	r2,zero,80a848 <ps2_ISR+0xb0>
  80a920:	003fee06 	br	80a8dc <ps2_ISR+0x144>

0080a924 <mix_ISR>:
	checkButtonCollision(cursor, cursor->frame);
	updateCursor(cursor);
	alt_irq_non_interruptible(tempcontext);

}
void mix_ISR(void) {
  80a924:	defff504 	addi	sp,sp,-44
  80a928:	df000915 	stw	fp,36(sp)
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  alt_u32 old_priority;

  old_priority      = alt_priority_mask;
  80a92c:	07002134 	movhi	fp,132
  80a930:	e702ee04 	addi	fp,fp,3000
  80a934:	e0800017 	ldw	r2,0(fp)
  alt_priority_mask = (1 << priority) - 1;

  NIOS2_WRITE_IENABLE (alt_irq_active & alt_priority_mask);
  80a938:	00c02134 	movhi	r3,132
  80a93c:	18ca4504 	addi	r3,r3,10516
  80a940:	dfc00a15 	stw	ra,40(sp)
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  alt_u32 old_priority;

  old_priority      = alt_priority_mask;
  80a944:	d8800015 	stw	r2,0(sp)
  alt_priority_mask = (1 << priority) - 1;
  80a948:	008007c4 	movi	r2,31
  80a94c:	e0800015 	stw	r2,0(fp)

  NIOS2_WRITE_IENABLE (alt_irq_active & alt_priority_mask);
  80a950:	18800017 	ldw	r2,0(r3)
  80a954:	e0c00017 	ldw	r3,0(fp)
  80a958:	ddc00815 	stw	r23,32(sp)
  80a95c:	dd800715 	stw	r22,28(sp)
  80a960:	10c4703a 	and	r2,r2,r3
  80a964:	dd400615 	stw	r21,24(sp)
  80a968:	dd000515 	stw	r20,20(sp)
  80a96c:	dcc00415 	stw	r19,16(sp)
  80a970:	dc800315 	stw	r18,12(sp)
  80a974:	dc400215 	stw	r17,8(sp)
  80a978:	dc000115 	stw	r16,4(sp)
  80a97c:	100170fa 	wrctl	ienable,r2

  NIOS2_WRITE_STATUS (1);
  80a980:	00c00044 	movi	r3,1
  80a984:	1801703a 	wrctl	status,r3
  80a988:	002b883a 	mov	r21,zero
  80a98c:	002d883a 	mov	r22,zero
  80a990:	05c000b4 	movhi	r23,2
  80a994:	bdf08204 	addi	r23,r23,-15864
	int tempcontext;
	int i, j, isDone = 0;

	tempcontext= alt_irq_interruptible(AUDIOBUFFERPROCESS_IRQ);
	for(i = 0; i < 180; i++) {
		if(soundMixer->indexSize >=299) break;
  80a998:	d1675917 	ldw	r5,-25244(gp)
  80a99c:	00c04a84 	movi	r3,298
  80a9a0:	2dc5883a 	add	r2,r5,r23
  80a9a4:	11000017 	ldw	r4,0(r2)
  80a9a8:	19004716 	blt	r3,r4,80aac8 <mix_ISR+0x1a4>
		for(j = 0; j < db.total_songs_playing; j++) {
  80a9ac:	04802134 	movhi	r18,132
  80a9b0:	948a6204 	addi	r18,r18,10632
  80a9b4:	9080a617 	ldw	r2,664(r18)
  80a9b8:	00802d0e 	bge	zero,r2,80aa70 <mix_ISR+0x14c>
  80a9bc:	0023883a 	mov	r17,zero
  80a9c0:	94009b04 	addi	r16,r18,620
  80a9c4:	9027883a 	mov	r19,r18
  80a9c8:	05000044 	movi	r20,1
  80a9cc:	00001006 	br	80aa10 <mix_ISR+0xec>
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
				db.curr_song_id = db.curr_song_ids[j];
				isDone = 1;
			} else if(db.total_songs_playing > 1) {
  80a9d0:	9880a617 	ldw	r2,664(r19)
  80a9d4:	a0800a0e 	bge	r20,r2,80aa00 <mix_ISR+0xdc>
				stopSound(db.songs[db.curr_song_ids[j]]->sound);
  80a9d8:	80800017 	ldw	r2,0(r16)
  80a9dc:	1085883a 	add	r2,r2,r2
  80a9e0:	1085883a 	add	r2,r2,r2
  80a9e4:	14c5883a 	add	r2,r2,r19
  80a9e8:	10c03617 	ldw	r3,216(r2)
  80a9ec:	19000017 	ldw	r4,0(r3)
  80a9f0:	081979c0 	call	81979c <stopSound>
				removeCurrPlaying(j);
  80a9f4:	8809883a 	mov	r4,r17
  80a9f8:	0805d300 	call	805d30 <removeCurrPlaying>
				enableAudioDeviceController();
  80a9fc:	08195040 	call	819504 <enableAudioDeviceController>
	int i, j, isDone = 0;

	tempcontext= alt_irq_interruptible(AUDIOBUFFERPROCESS_IRQ);
	for(i = 0; i < 180; i++) {
		if(soundMixer->indexSize >=299) break;
		for(j = 0; j < db.total_songs_playing; j++) {
  80aa00:	9080a617 	ldw	r2,664(r18)
  80aa04:	8c400044 	addi	r17,r17,1
  80aa08:	84000104 	addi	r16,r16,4
  80aa0c:	8880170e 	bge	r17,r2,80aa6c <mix_ISR+0x148>
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
  80aa10:	80800017 	ldw	r2,0(r16)
  80aa14:	1085883a 	add	r2,r2,r2
  80aa18:	1085883a 	add	r2,r2,r2
  80aa1c:	1485883a 	add	r2,r2,r18
  80aa20:	10c03617 	ldw	r3,216(r2)
  80aa24:	19000017 	ldw	r4,0(r3)
  80aa28:	08197a40 	call	8197a4 <checkEnd>
  80aa2c:	10803fcc 	andi	r2,r2,255
  80aa30:	103fe71e 	bne	r2,zero,80a9d0 <mix_ISR+0xac>
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
  80aa34:	80800017 	ldw	r2,0(r16)
	int i, j, isDone = 0;

	tempcontext= alt_irq_interruptible(AUDIOBUFFERPROCESS_IRQ);
	for(i = 0; i < 180; i++) {
		if(soundMixer->indexSize >=299) break;
		for(j = 0; j < db.total_songs_playing; j++) {
  80aa38:	8c400044 	addi	r17,r17,1
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
				db.curr_song_id = db.curr_song_ids[j];
  80aa3c:	05800044 	movi	r22,1
	tempcontext= alt_irq_interruptible(AUDIOBUFFERPROCESS_IRQ);
	for(i = 0; i < 180; i++) {
		if(soundMixer->indexSize >=299) break;
		for(j = 0; j < db.total_songs_playing; j++) {
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
  80aa40:	1085883a 	add	r2,r2,r2
  80aa44:	1085883a 	add	r2,r2,r2
  80aa48:	14c5883a 	add	r2,r2,r19
  80aa4c:	10c03617 	ldw	r3,216(r2)
  80aa50:	19000017 	ldw	r4,0(r3)
  80aa54:	081ac6c0 	call	81ac6c <loadToSoundBuffer>
				db.curr_song_id = db.curr_song_ids[j];
  80aa58:	80800017 	ldw	r2,0(r16)
	int i, j, isDone = 0;

	tempcontext= alt_irq_interruptible(AUDIOBUFFERPROCESS_IRQ);
	for(i = 0; i < 180; i++) {
		if(soundMixer->indexSize >=299) break;
		for(j = 0; j < db.total_songs_playing; j++) {
  80aa5c:	84000104 	addi	r16,r16,4
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
				db.curr_song_id = db.curr_song_ids[j];
  80aa60:	98800015 	stw	r2,0(r19)
	int i, j, isDone = 0;

	tempcontext= alt_irq_interruptible(AUDIOBUFFERPROCESS_IRQ);
	for(i = 0; i < 180; i++) {
		if(soundMixer->indexSize >=299) break;
		for(j = 0; j < db.total_songs_playing; j++) {
  80aa64:	9080a617 	ldw	r2,664(r18)
  80aa68:	88bfe916 	blt	r17,r2,80aa10 <mix_ISR+0xec>
  80aa6c:	d1675917 	ldw	r5,-25244(gp)
				removeCurrPlaying(j);
				enableAudioDeviceController();
			}
		}

		if(isDone == 0)
  80aa70:	b005003a 	cmpeq	r2,r22,zero
  80aa74:	1000141e 	bne	r2,zero,80aac8 <mix_ISR+0x1a4>
			break;

		soundMixer->indexSize++;
  80aa78:	2dc9883a 	add	r4,r5,r23
  80aa7c:	20c00017 	ldw	r3,0(r4)

		soundMixer->endIndex++;
  80aa80:	008000b4 	movhi	r2,2
  80aa84:	10b08104 	addi	r2,r2,-15868
  80aa88:	288b883a 	add	r5,r5,r2
		}

		if(isDone == 0)
			break;

		soundMixer->indexSize++;
  80aa8c:	18c00044 	addi	r3,r3,1
  80aa90:	20c00015 	stw	r3,0(r4)

		soundMixer->endIndex++;
  80aa94:	28800017 	ldw	r2,0(r5)
  80aa98:	10800044 	addi	r2,r2,1
  80aa9c:	28800015 	stw	r2,0(r5)
		if(soundMixer->endIndex > 299)
  80aaa0:	28c00017 	ldw	r3,0(r5)
  80aaa4:	00804ac4 	movi	r2,299
  80aaa8:	10c0010e 	bge	r2,r3,80aab0 <mix_ISR+0x18c>
			soundMixer->endIndex = 0;
  80aaac:	28000015 	stw	zero,0(r5)

		clearIndexBuffer(soundMixer->endIndex);
  80aab0:	29000017 	ldw	r4,0(r5)
void mix_ISR(void) {
	int tempcontext;
	int i, j, isDone = 0;

	tempcontext= alt_irq_interruptible(AUDIOBUFFERPROCESS_IRQ);
	for(i = 0; i < 180; i++) {
  80aab4:	ad400044 	addi	r21,r21,1

		soundMixer->endIndex++;
		if(soundMixer->endIndex > 299)
			soundMixer->endIndex = 0;

		clearIndexBuffer(soundMixer->endIndex);
  80aab8:	081aee00 	call	81aee0 <clearIndexBuffer>
void mix_ISR(void) {
	int tempcontext;
	int i, j, isDone = 0;

	tempcontext= alt_irq_interruptible(AUDIOBUFFERPROCESS_IRQ);
	for(i = 0; i < 180; i++) {
  80aabc:	00802d04 	movi	r2,180
  80aac0:	a8bfb51e 	bne	r21,r2,80a998 <mix_ISR+0x74>
  80aac4:	d1675917 	ldw	r5,-25244(gp)
static ALT_INLINE void ALT_ALWAYS_INLINE alt_irq_non_interruptible (alt_u32 mask)
{
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  NIOS2_WRITE_STATUS (0);  
  80aac8:	0001703a 	wrctl	status,zero

  alt_priority_mask = mask;
  80aacc:	d8800017 	ldw	r2,0(sp)

  NIOS2_WRITE_IENABLE (mask & alt_irq_active);  
  80aad0:	00c02134 	movhi	r3,132
  80aad4:	18ca4504 	addi	r3,r3,10516
  extern volatile alt_u32 alt_priority_mask;
  extern volatile alt_u32 alt_irq_active;

  NIOS2_WRITE_STATUS (0);  

  alt_priority_mask = mask;
  80aad8:	e0800015 	stw	r2,0(fp)

  NIOS2_WRITE_IENABLE (mask & alt_irq_active);  
  80aadc:	18800017 	ldw	r2,0(r3)
  80aae0:	d8c00017 	ldw	r3,0(sp)
  80aae4:	1884703a 	and	r2,r3,r2
  80aae8:	100170fa 	wrctl	ienable,r2

		clearIndexBuffer(soundMixer->endIndex);
	}

	alt_irq_non_interruptible(tempcontext);
	if(soundMixer->indexSize <= 0 && db.total_songs_playing == 1) {
  80aaec:	00c000b4 	movhi	r3,2
  80aaf0:	18f08204 	addi	r3,r3,-15864
  80aaf4:	28c7883a 	add	r3,r5,r3
  80aaf8:	18800017 	ldw	r2,0(r3)
  80aafc:	0080150e 	bge	zero,r2,80ab54 <mix_ISR+0x230>
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 8, timer & 0xFFFF);
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 12, timer >> 16);
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 0, 0);
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 4, 0x08);
	} else {
		if(soundMixer->indexSize > 0)
  80ab00:	008000b4 	movhi	r2,2
  80ab04:	10b08204 	addi	r2,r2,-15864
  80ab08:	2885883a 	add	r2,r5,r2
  80ab0c:	10c00017 	ldw	r3,0(r2)
  80ab10:	00c0010e 	bge	zero,r3,80ab18 <mix_ISR+0x1f4>
			enableAudioDeviceController();
  80ab14:	08195040 	call	819504 <enableAudioDeviceController>
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 0, 0);
  80ab18:	00804234 	movhi	r2,264
  80ab1c:	108d1004 	addi	r2,r2,13376
  80ab20:	1000002d 	sthio	zero,0(r2)
	}
}
  80ab24:	dfc00a17 	ldw	ra,40(sp)
  80ab28:	df000917 	ldw	fp,36(sp)
  80ab2c:	ddc00817 	ldw	r23,32(sp)
  80ab30:	dd800717 	ldw	r22,28(sp)
  80ab34:	dd400617 	ldw	r21,24(sp)
  80ab38:	dd000517 	ldw	r20,20(sp)
  80ab3c:	dcc00417 	ldw	r19,16(sp)
  80ab40:	dc800317 	ldw	r18,12(sp)
  80ab44:	dc400217 	ldw	r17,8(sp)
  80ab48:	dc000117 	ldw	r16,4(sp)
  80ab4c:	dec00b04 	addi	sp,sp,44
  80ab50:	f800283a 	ret

		clearIndexBuffer(soundMixer->endIndex);
	}

	alt_irq_non_interruptible(tempcontext);
	if(soundMixer->indexSize <= 0 && db.total_songs_playing == 1) {
  80ab54:	04002134 	movhi	r16,132
  80ab58:	840a6204 	addi	r16,r16,10632
  80ab5c:	80c0a617 	ldw	r3,664(r16)
  80ab60:	00800044 	movi	r2,1
  80ab64:	18bfe61e 	bne	r3,r2,80ab00 <mix_ISR+0x1dc>
		stopSound(db.songs[db.curr_song_id]->sound);
  80ab68:	80800017 	ldw	r2,0(r16)
  80ab6c:	1085883a 	add	r2,r2,r2
  80ab70:	1085883a 	add	r2,r2,r2
  80ab74:	1405883a 	add	r2,r2,r16
  80ab78:	10c03617 	ldw	r3,216(r2)
  80ab7c:	19000017 	ldw	r4,0(r3)
  80ab80:	081979c0 	call	81979c <stopSound>
		syncPause(db.curr_song_id);
  80ab84:	81000017 	ldw	r4,0(r16)
  80ab88:	08033ec0 	call	8033ec <syncPause>
		if(db.curr_playlist_id != 0)
  80ab8c:	80803417 	ldw	r2,208(r16)
  80ab90:	10000226 	beq	r2,zero,80ab9c <mix_ISR+0x278>
			syncNext(db.curr_song_id);
  80ab94:	81000017 	ldw	r4,0(r16)
  80ab98:	08037b40 	call	8037b4 <syncNext>
		int timer = 2000000;
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 8, timer & 0xFFFF);
  80ab9c:	00e12014 	movui	r3,33920
  80aba0:	00804234 	movhi	r2,264
  80aba4:	108d1204 	addi	r2,r2,13384
  80aba8:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 12, timer >> 16);
  80abac:	01000784 	movi	r4,30
  80abb0:	10800104 	addi	r2,r2,4
  80abb4:	1100002d 	sthio	r4,0(r2)
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 0, 0);
  80abb8:	00c04234 	movhi	r3,264
  80abbc:	18cd1004 	addi	r3,r3,13376
  80abc0:	1800002d 	sthio	zero,0(r3)
		IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 4, 0x08);
  80abc4:	01000204 	movi	r4,8
  80abc8:	10bffe04 	addi	r2,r2,-8
  80abcc:	1100002d 	sthio	r4,0(r2)
  80abd0:	003fd406 	br	80ab24 <mix_ISR+0x200>

0080abd4 <freeMem>:
	memMgr.songs[memMgr.curr_index++] = id;
	if(memMgr.curr_index >= 3)
		memMgr.curr_index = 0;
}

void freeMem(int mem) {
  80abd4:	defff704 	addi	sp,sp,-36
  80abd8:	dd000415 	stw	r20,16(sp)
  80abdc:	dcc00315 	stw	r19,12(sp)
  80abe0:	2029883a 	mov	r20,r4
	printf("Free memory from buffer\n");
	int temp = memMgr.used_memory;
  80abe4:	04c02174 	movhi	r19,133
  80abe8:	9cf39a04 	addi	r19,r19,-12696
	if(memMgr.curr_index >= 3)
		memMgr.curr_index = 0;
}

void freeMem(int mem) {
	printf("Free memory from buffer\n");
  80abec:	010020f4 	movhi	r4,131
  80abf0:	210e3604 	addi	r4,r4,14552
	memMgr.songs[memMgr.curr_index++] = id;
	if(memMgr.curr_index >= 3)
		memMgr.curr_index = 0;
}

void freeMem(int mem) {
  80abf4:	dfc00815 	stw	ra,32(sp)
  80abf8:	ddc00715 	stw	r23,28(sp)
  80abfc:	dc000015 	stw	r16,0(sp)
  80ac00:	dd800615 	stw	r22,24(sp)
  80ac04:	dd400515 	stw	r21,20(sp)
  80ac08:	dc800215 	stw	r18,8(sp)
  80ac0c:	dc400115 	stw	r17,4(sp)
	printf("Free memory from buffer\n");
  80ac10:	08221800 	call	822180 <puts>
	int temp = memMgr.used_memory;
  80ac14:	9dc00017 	ldw	r23,0(r19)
	printf("used memory: %u\n", memMgr.used_memory);
  80ac18:	010020f4 	movhi	r4,131
  80ac1c:	210e3c04 	addi	r4,r4,14576
  80ac20:	b80b883a 	mov	r5,r23
  80ac24:	08220680 	call	822068 <printf>
	int freeIndex = memMgr.curr_index;
  80ac28:	9c000617 	ldw	r16,24(r19)
	if(freeIndex >= 3)
  80ac2c:	00800084 	movi	r2,2
  80ac30:	1400010e 	bge	r2,r16,80ac38 <freeMem+0x64>
  80ac34:	0021883a 	mov	r16,zero
  80ac38:	9825883a 	mov	r18,r19
  80ac3c:	05802134 	movhi	r22,132
  80ac40:	b58a6204 	addi	r22,r22,10632
  80ac44:	054003f4 	movhi	r21,15
  80ac48:	ad509004 	addi	r21,r21,16960
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  80ac4c:	99400017 	ldw	r5,0(r19)
		if(memMgr.songs[freeIndex] != 0) {
  80ac50:	8405883a 	add	r2,r16,r16
  80ac54:	1085883a 	add	r2,r2,r2
  80ac58:	14a3883a 	add	r17,r2,r18
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  80ac5c:	2d05883a 	add	r2,r5,r20
		if(memMgr.songs[freeIndex] != 0) {
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
			unloadSong(db.songs[memMgr.songs[freeIndex]]);
			memMgr.songs[freeIndex] = 0;
		}
		freeIndex++;
  80ac60:	84000044 	addi	r16,r16,1
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  80ac64:	a8800f2e 	bgeu	r21,r2,80aca4 <freeMem+0xd0>
		if(memMgr.songs[freeIndex] != 0) {
  80ac68:	88c00117 	ldw	r3,4(r17)
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
  80ac6c:	18c5883a 	add	r2,r3,r3
  80ac70:	1085883a 	add	r2,r2,r2
  80ac74:	1585883a 	add	r2,r2,r22
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
		if(memMgr.songs[freeIndex] != 0) {
  80ac78:	1800191e 	bne	r3,zero,80ace0 <freeMem+0x10c>
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
			unloadSong(db.songs[memMgr.songs[freeIndex]]);
			memMgr.songs[freeIndex] = 0;
		}
		freeIndex++;
		if(freeIndex >= 3)
  80ac7c:	00800084 	movi	r2,2
  80ac80:	143ff20e 	bge	r2,r16,80ac4c <freeMem+0x78>
  80ac84:	0021883a 	mov	r16,zero
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  80ac88:	99400017 	ldw	r5,0(r19)
		if(memMgr.songs[freeIndex] != 0) {
  80ac8c:	8405883a 	add	r2,r16,r16
  80ac90:	1085883a 	add	r2,r2,r2
  80ac94:	14a3883a 	add	r17,r2,r18
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  80ac98:	2d05883a 	add	r2,r5,r20
		if(memMgr.songs[freeIndex] != 0) {
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
			unloadSong(db.songs[memMgr.songs[freeIndex]]);
			memMgr.songs[freeIndex] = 0;
		}
		freeIndex++;
  80ac9c:	84000044 	addi	r16,r16,1
	int temp = memMgr.used_memory;
	printf("used memory: %u\n", memMgr.used_memory);
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
  80aca0:	a8bff136 	bltu	r21,r2,80ac68 <freeMem+0x94>
		}
		freeIndex++;
		if(freeIndex >= 3)
			freeIndex = 0;
	}
	if(temp == memMgr.used_memory) {
  80aca4:	2dc01626 	beq	r5,r23,80ad00 <freeMem+0x12c>
		printf("???\n");
	}
	printf("used memory: %u\n", memMgr.used_memory);
  80aca8:	91400017 	ldw	r5,0(r18)
  80acac:	010020f4 	movhi	r4,131
  80acb0:	210e3c04 	addi	r4,r4,14576
}
  80acb4:	dfc00817 	ldw	ra,32(sp)
  80acb8:	ddc00717 	ldw	r23,28(sp)
  80acbc:	dd800617 	ldw	r22,24(sp)
  80acc0:	dd400517 	ldw	r21,20(sp)
  80acc4:	dd000417 	ldw	r20,16(sp)
  80acc8:	dcc00317 	ldw	r19,12(sp)
  80accc:	dc800217 	ldw	r18,8(sp)
  80acd0:	dc400117 	ldw	r17,4(sp)
  80acd4:	dc000017 	ldw	r16,0(sp)
  80acd8:	dec00904 	addi	sp,sp,36
			freeIndex = 0;
	}
	if(temp == memMgr.used_memory) {
		printf("???\n");
	}
	printf("used memory: %u\n", memMgr.used_memory);
  80acdc:	08220681 	jmpi	822068 <printf>
	int freeIndex = memMgr.curr_index;
	if(freeIndex >= 3)
		freeIndex = 0;
	while(memMgr.used_memory + mem > MAX_CACHE_MEMORY) {
		if(memMgr.songs[freeIndex] != 0) {
			memMgr.used_memory -= db.songs[memMgr.songs[freeIndex]]->sound->length;
  80ace0:	11003617 	ldw	r4,216(r2)
  80ace4:	20c00017 	ldw	r3,0(r4)
  80ace8:	18800517 	ldw	r2,20(r3)
  80acec:	2885c83a 	sub	r2,r5,r2
  80acf0:	90800015 	stw	r2,0(r18)
			unloadSong(db.songs[memMgr.songs[freeIndex]]);
  80acf4:	080db280 	call	80db28 <unloadSong>
			memMgr.songs[freeIndex] = 0;
  80acf8:	88000115 	stw	zero,4(r17)
  80acfc:	003fdf06 	br	80ac7c <freeMem+0xa8>
		freeIndex++;
		if(freeIndex >= 3)
			freeIndex = 0;
	}
	if(temp == memMgr.used_memory) {
		printf("???\n");
  80ad00:	010020f4 	movhi	r4,131
  80ad04:	210e4104 	addi	r4,r4,14596
  80ad08:	08221800 	call	822180 <puts>
  80ad0c:	003fe606 	br	80aca8 <freeMem+0xd4>

0080ad10 <addToMemory>:
	memMgr.used_memory = 0;
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
  80ad10:	defffd04 	addi	sp,sp,-12
  80ad14:	dc000015 	stw	r16,0(sp)
	memMgr.used_memory += sound->length;
  80ad18:	04002174 	movhi	r16,133
  80ad1c:	84339a04 	addi	r16,r16,-12696
	if(memMgr.songs[memMgr.curr_index] != 0) {
  80ad20:	82000617 	ldw	r8,24(r16)
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
	memMgr.used_memory += sound->length;
  80ad24:	21c00517 	ldw	r7,20(r4)
  80ad28:	80c00017 	ldw	r3,0(r16)
	if(memMgr.songs[memMgr.curr_index] != 0) {
  80ad2c:	4205883a 	add	r2,r8,r8
  80ad30:	1085883a 	add	r2,r2,r2
  80ad34:	1405883a 	add	r2,r2,r16
  80ad38:	11800117 	ldw	r6,4(r2)
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
	memMgr.used_memory += sound->length;
  80ad3c:	19c7883a 	add	r3,r3,r7
	memMgr.used_memory = 0;
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
  80ad40:	dc400115 	stw	r17,4(sp)
  80ad44:	dfc00215 	stw	ra,8(sp)
  80ad48:	2823883a 	mov	r17,r5
	memMgr.used_memory += sound->length;
	if(memMgr.songs[memMgr.curr_index] != 0) {
		printf("used memory: %u\n", memMgr.used_memory);
  80ad4c:	010020f4 	movhi	r4,131
  80ad50:	210e3c04 	addi	r4,r4,14576
  80ad54:	180b883a 	mov	r5,r3
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
	memMgr.curr_index = 0;
}

void addToMemory(struct Sound* sound, int id) {
	memMgr.used_memory += sound->length;
  80ad58:	80c00015 	stw	r3,0(r16)
	if(memMgr.songs[memMgr.curr_index] != 0) {
  80ad5c:	30000e1e 	bne	r6,zero,80ad98 <addToMemory+0x88>
		printf("used memory: %u\n", memMgr.used_memory);
		memMgr.used_memory -= db.songs[memMgr.songs[memMgr.curr_index]]->sound->length;
		unloadSong(db.songs[memMgr.songs[memMgr.curr_index]]);
		printf("used memory: %u\n", memMgr.used_memory);
	}
	memMgr.songs[memMgr.curr_index++] = id;
  80ad60:	4205883a 	add	r2,r8,r8
  80ad64:	1085883a 	add	r2,r2,r2
  80ad68:	1405883a 	add	r2,r2,r16
  80ad6c:	42000044 	addi	r8,r8,1
  80ad70:	14400115 	stw	r17,4(r2)
	if(memMgr.curr_index >= 3)
  80ad74:	00800084 	movi	r2,2
		printf("used memory: %u\n", memMgr.used_memory);
		memMgr.used_memory -= db.songs[memMgr.songs[memMgr.curr_index]]->sound->length;
		unloadSong(db.songs[memMgr.songs[memMgr.curr_index]]);
		printf("used memory: %u\n", memMgr.used_memory);
	}
	memMgr.songs[memMgr.curr_index++] = id;
  80ad78:	82000615 	stw	r8,24(r16)
	if(memMgr.curr_index >= 3)
  80ad7c:	1200010e 	bge	r2,r8,80ad84 <addToMemory+0x74>
		memMgr.curr_index = 0;
  80ad80:	80000615 	stw	zero,24(r16)
}
  80ad84:	dfc00217 	ldw	ra,8(sp)
  80ad88:	dc400117 	ldw	r17,4(sp)
  80ad8c:	dc000017 	ldw	r16,0(sp)
  80ad90:	dec00304 	addi	sp,sp,12
  80ad94:	f800283a 	ret
}

void addToMemory(struct Sound* sound, int id) {
	memMgr.used_memory += sound->length;
	if(memMgr.songs[memMgr.curr_index] != 0) {
		printf("used memory: %u\n", memMgr.used_memory);
  80ad98:	08220680 	call	822068 <printf>
		memMgr.used_memory -= db.songs[memMgr.songs[memMgr.curr_index]]->sound->length;
  80ad9c:	80c00617 	ldw	r3,24(r16)
  80ada0:	81400017 	ldw	r5,0(r16)
  80ada4:	18c7883a 	add	r3,r3,r3
  80ada8:	18c7883a 	add	r3,r3,r3
  80adac:	1c07883a 	add	r3,r3,r16
  80adb0:	18800117 	ldw	r2,4(r3)
  80adb4:	00c02134 	movhi	r3,132
  80adb8:	18ca6204 	addi	r3,r3,10632
  80adbc:	1085883a 	add	r2,r2,r2
  80adc0:	1085883a 	add	r2,r2,r2
  80adc4:	10c5883a 	add	r2,r2,r3
  80adc8:	11003617 	ldw	r4,216(r2)
  80adcc:	20c00017 	ldw	r3,0(r4)
  80add0:	18800517 	ldw	r2,20(r3)
  80add4:	288bc83a 	sub	r5,r5,r2
  80add8:	81400015 	stw	r5,0(r16)
		unloadSong(db.songs[memMgr.songs[memMgr.curr_index]]);
  80addc:	080db280 	call	80db28 <unloadSong>
		printf("used memory: %u\n", memMgr.used_memory);
  80ade0:	81400017 	ldw	r5,0(r16)
  80ade4:	010020f4 	movhi	r4,131
  80ade8:	210e3c04 	addi	r4,r4,14576
  80adec:	08220680 	call	822068 <printf>
  80adf0:	82000617 	ldw	r8,24(r16)
  80adf4:	003fda06 	br	80ad60 <addToMemory+0x50>

0080adf8 <initMemory>:
#include "MemoryMgr.h"

struct MemoryMgr memMgr;

void initMemory() {
	memMgr.used_memory = 0;
  80adf8:	00802174 	movhi	r2,133
  80adfc:	10b39a04 	addi	r2,r2,-12696
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
  80ae00:	10c00104 	addi	r3,r2,4
  80ae04:	18000415 	stw	zero,16(r3)
	memMgr.curr_index = 0;
  80ae08:	10000615 	stw	zero,24(r2)
#include "MemoryMgr.h"

struct MemoryMgr memMgr;

void initMemory() {
	memMgr.used_memory = 0;
  80ae0c:	10000015 	stw	zero,0(r2)
	memset(memMgr.songs, 0, sizeof(memMgr.songs));
  80ae10:	10000115 	stw	zero,4(r2)
  80ae14:	18000115 	stw	zero,4(r3)
  80ae18:	18000215 	stw	zero,8(r3)
  80ae1c:	18000315 	stw	zero,12(r3)
	memMgr.curr_index = 0;
}
  80ae20:	f800283a 	ret

0080ae24 <setXY>:
	this->subObj = subObj;
	return this;
}

void setXY(struct Object* this, int x, int y) {
	if(this == NULL || x <= 0 || y <= 0 || x >= 310 || y >= 230) return;
  80ae24:	20000926 	beq	r4,zero,80ae4c <setXY+0x28>
  80ae28:	0140080e 	bge	zero,r5,80ae4c <setXY+0x28>
  80ae2c:	0180070e 	bge	zero,r6,80ae4c <setXY+0x28>
  80ae30:	00804d44 	movi	r2,309
  80ae34:	11400516 	blt	r2,r5,80ae4c <setXY+0x28>
  80ae38:	00803944 	movi	r2,229
  80ae3c:	11800316 	blt	r2,r6,80ae4c <setXY+0x28>
	this->r->x = x;
  80ae40:	20800017 	ldw	r2,0(r4)
	this->r->y = y;
  80ae44:	11800115 	stw	r6,4(r2)
	return this;
}

void setXY(struct Object* this, int x, int y) {
	if(this == NULL || x <= 0 || y <= 0 || x >= 310 || y >= 230) return;
	this->r->x = x;
  80ae48:	11400015 	stw	r5,0(r2)
  80ae4c:	f800283a 	ret

0080ae50 <setNextXY>:
	this->r->y = y;
}

void setNextXY(struct Object* this, int x, int y) {
	if(this == NULL) return;
  80ae50:	20000326 	beq	r4,zero,80ae60 <setNextXY+0x10>
	this->next_r->x = x;
  80ae54:	20800117 	ldw	r2,4(r4)
	this->next_r->y = y;
  80ae58:	11800115 	stw	r6,4(r2)
	this->r->y = y;
}

void setNextXY(struct Object* this, int x, int y) {
	if(this == NULL) return;
	this->next_r->x = x;
  80ae5c:	11400015 	stw	r5,0(r2)
  80ae60:	f800283a 	ret

0080ae64 <initObject>:
 *      Author: danny
 */

#include "Object.h"

struct Object* initObject(struct Range* r, struct Image* img, void* subObj) {
  80ae64:	defffb04 	addi	sp,sp,-20
  80ae68:	dcc00115 	stw	r19,4(sp)
  80ae6c:	2027883a 	mov	r19,r4
	struct Object* this = (struct Object*)malloc(sizeof(struct Object));
  80ae70:	01000404 	movi	r4,16
 *      Author: danny
 */

#include "Object.h"

struct Object* initObject(struct Range* r, struct Image* img, void* subObj) {
  80ae74:	dfc00415 	stw	ra,16(sp)
  80ae78:	ddc00315 	stw	r23,12(sp)
  80ae7c:	dd400215 	stw	r21,8(sp)
  80ae80:	302f883a 	mov	r23,r6
  80ae84:	282b883a 	mov	r21,r5
  80ae88:	dc400015 	stw	r17,0(sp)
	struct Object* this = (struct Object*)malloc(sizeof(struct Object));
  80ae8c:	08216fc0 	call	8216fc <malloc>
	this->r = r;
	this->next_r = initRange(r->x, r->y, r->width, r->width);
  80ae90:	99800317 	ldw	r6,12(r19)
  80ae94:	99400117 	ldw	r5,4(r19)
  80ae98:	99000017 	ldw	r4,0(r19)
  80ae9c:	300f883a 	mov	r7,r6

#include "Object.h"

struct Object* initObject(struct Range* r, struct Image* img, void* subObj) {
	struct Object* this = (struct Object*)malloc(sizeof(struct Object));
	this->r = r;
  80aea0:	14c00015 	stw	r19,0(r2)
 */

#include "Object.h"

struct Object* initObject(struct Range* r, struct Image* img, void* subObj) {
	struct Object* this = (struct Object*)malloc(sizeof(struct Object));
  80aea4:	1023883a 	mov	r17,r2
	this->r = r;
	this->next_r = initRange(r->x, r->y, r->width, r->width);
  80aea8:	080c8280 	call	80c828 <initRange>
  80aeac:	88800115 	stw	r2,4(r17)
	this->img = img;
	this->subObj = subObj;
	return this;
}
  80aeb0:	8805883a 	mov	r2,r17

struct Object* initObject(struct Range* r, struct Image* img, void* subObj) {
	struct Object* this = (struct Object*)malloc(sizeof(struct Object));
	this->r = r;
	this->next_r = initRange(r->x, r->y, r->width, r->width);
	this->img = img;
  80aeb4:	8d400215 	stw	r21,8(r17)
	this->subObj = subObj;
  80aeb8:	8dc00315 	stw	r23,12(r17)
	return this;
}
  80aebc:	dfc00417 	ldw	ra,16(sp)
  80aec0:	ddc00317 	ldw	r23,12(sp)
  80aec4:	dd400217 	ldw	r21,8(sp)
  80aec8:	dcc00117 	ldw	r19,4(sp)
  80aecc:	dc400017 	ldw	r17,0(sp)
  80aed0:	dec00504 	addi	sp,sp,20
  80aed4:	f800283a 	ret

0080aed8 <getBit>:
		break;
	}
	return result;
}

int getBit(unsigned char byte, int pos) {
  80aed8:	20803fcc 	andi	r2,r4,255
  80aedc:	1145d83a 	sra	r2,r2,r5
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
}
  80aee0:	1080004c 	andi	r2,r2,1
  80aee4:	f800283a 	ret

0080aee8 <setBit>:
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
  80aee8:	00800044 	movi	r2,1
  80aeec:	20c00003 	ldbu	r3,0(r4)
  80aef0:	1144983a 	sll	r2,r2,r5
  80aef4:	10c4b03a 	or	r2,r2,r3
  80aef8:	20800005 	stb	r2,0(r4)
}
  80aefc:	f800283a 	ret

0080af00 <initPacket>:
 *      Author: danny
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
  80af00:	defffb04 	addi	sp,sp,-20
  80af04:	dc800215 	stw	r18,8(sp)
  80af08:	dc000015 	stw	r16,0(sp)
  80af0c:	2025883a 	mov	r18,r4
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  80af10:	24000084 	addi	r16,r4,2
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
  80af14:	01000504 	movi	r4,20
 *      Author: danny
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
  80af18:	dfc00415 	stw	ra,16(sp)
  80af1c:	dcc00315 	stw	r19,12(sp)
  80af20:	dc400115 	stw	r17,4(sp)
  80af24:	2827883a 	mov	r19,r5
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
  80af28:	08216fc0 	call	8216fc <malloc>
	this->data_size = data_size;
  80af2c:	14800115 	stw	r18,4(r2)
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  80af30:	8009883a 	mov	r4,r16
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
  80af34:	1023883a 	mov	r17,r2
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  80af38:	08216fc0 	call	8216fc <malloc>
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
  80af3c:	14000045 	stb	r16,1(r2)
#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  80af40:	88800015 	stw	r2,0(r17)
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
  80af44:	01000104 	movi	r4,4

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
	this->data[0] = 0;
  80af48:	10000005 	stb	zero,0(r2)
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
  80af4c:	08216fc0 	call	8216fc <malloc>
  80af50:	88800215 	stw	r2,8(r17)
	int i;
	for(i = 0; i < data_size; i++) {
  80af54:	0480080e 	bge	zero,r18,80af78 <initPacket+0x78>
  80af58:	000b883a 	mov	r5,zero
		this->data[i+HEADERSIZE] = data[i];
  80af5c:	88800017 	ldw	r2,0(r17)
  80af60:	9947883a 	add	r3,r19,r5
  80af64:	19000003 	ldbu	r4,0(r3)
  80af68:	1145883a 	add	r2,r2,r5
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
	int i;
	for(i = 0; i < data_size; i++) {
  80af6c:	29400044 	addi	r5,r5,1
		this->data[i+HEADERSIZE] = data[i];
  80af70:	11000085 	stb	r4,2(r2)
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
	int i;
	for(i = 0; i < data_size; i++) {
  80af74:	917ff91e 	bne	r18,r5,80af5c <initPacket+0x5c>
		this->data[i+HEADERSIZE] = data[i];
	}
	return this;
}
  80af78:	8805883a 	mov	r2,r17
  80af7c:	dfc00417 	ldw	ra,16(sp)
  80af80:	dcc00317 	ldw	r19,12(sp)
  80af84:	dc800217 	ldw	r18,8(sp)
  80af88:	dc400117 	ldw	r17,4(sp)
  80af8c:	dc000017 	ldw	r16,0(sp)
  80af90:	dec00504 	addi	sp,sp,20
  80af94:	f800283a 	ret

0080af98 <strnsep_>:
}
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
  80af98:	defff804 	addi	sp,sp,-32
  80af9c:	dfc00715 	stw	ra,28(sp)
  80afa0:	df000615 	stw	fp,24(sp)
  80afa4:	dd400515 	stw	r21,20(sp)
  80afa8:	dd000415 	stw	r20,16(sp)
  80afac:	dcc00315 	stw	r19,12(sp)
  80afb0:	dc800215 	stw	r18,8(sp)
  80afb4:	dc400115 	stw	r17,4(sp)
  80afb8:	dc000015 	stw	r16,0(sp)
  80afbc:	d839883a 	mov	fp,sp
  80afc0:	2023883a 	mov	r17,r4
	char* result = (char*)malloc(sizeof(char)*pos);
  80afc4:	2809883a 	mov	r4,r5
}
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
  80afc8:	2821883a 	mov	r16,r5
	char* result = (char*)malloc(sizeof(char)*pos);
  80afcc:	08216fc0 	call	8216fc <malloc>
	int i;
	int len = strlen(*str);
  80afd0:	89000017 	ldw	r4,0(r17)
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
  80afd4:	1025883a 	mov	r18,r2
}
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
  80afd8:	d82b883a 	mov	r21,sp
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
  80afdc:	0822e100 	call	822e10 <strlen>
	char temp[len-pos];
  80afe0:	1427c83a 	sub	r19,r2,r16
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
  80afe4:	100f883a 	mov	r7,r2
	char temp[len-pos];
  80afe8:	00ffff04 	movi	r3,-4
  80afec:	98800184 	addi	r2,r19,6
  80aff0:	10c4703a 	and	r2,r2,r3
  80aff4:	d8b7c83a 	sub	sp,sp,r2
  80aff8:	d829883a 	mov	r20,sp
	for(i = 0; i < len; i++) {
  80affc:	01c0130e 	bge	zero,r7,80b04c <strnsep_+0xb4>
  80b000:	dc0bc83a 	sub	r5,sp,r16
  80b004:	0009883a 	mov	r4,zero
  80b008:	00000706 	br	80b028 <strnsep_+0x90>
		if(i < pos)
			result[i] = (*str)[i];
  80b00c:	88800017 	ldw	r2,0(r17)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  80b010:	29400044 	addi	r5,r5,1
		if(i < pos)
			result[i] = (*str)[i];
  80b014:	1105883a 	add	r2,r2,r4
  80b018:	10c00003 	ldbu	r3,0(r2)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  80b01c:	21000044 	addi	r4,r4,1
		if(i < pos)
			result[i] = (*str)[i];
  80b020:	30c00005 	stb	r3,0(r6)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  80b024:	39000926 	beq	r7,r4,80b04c <strnsep_+0xb4>
		if(i < pos)
			result[i] = (*str)[i];
  80b028:	910d883a 	add	r6,r18,r4
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
		if(i < pos)
  80b02c:	243ff716 	blt	r4,r16,80b00c <strnsep_+0x74>
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
  80b030:	88800017 	ldw	r2,0(r17)
  80b034:	1105883a 	add	r2,r2,r4
  80b038:	10c00003 	ldbu	r3,0(r2)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  80b03c:	21000044 	addi	r4,r4,1
		if(i < pos)
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
  80b040:	28c00005 	stb	r3,0(r5)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  80b044:	29400044 	addi	r5,r5,1
  80b048:	393ff71e 	bne	r7,r4,80b028 <strnsep_+0x90>
		if(i < pos)
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
	}
	*str = (char*)realloc(*str, len-pos);
  80b04c:	89000017 	ldw	r4,0(r17)
  80b050:	980b883a 	mov	r5,r19
  80b054:	08221940 	call	822194 <realloc>
  80b058:	1009883a 	mov	r4,r2
  80b05c:	88800015 	stw	r2,0(r17)
	strncpy(*str, temp, len-pos);
  80b060:	a00b883a 	mov	r5,r20
  80b064:	980d883a 	mov	r6,r19
  80b068:	0822f340 	call	822f34 <strncpy>
	return result;
}
  80b06c:	9005883a 	mov	r2,r18
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
	}
	*str = (char*)realloc(*str, len-pos);
	strncpy(*str, temp, len-pos);
  80b070:	a837883a 	mov	sp,r21
	return result;
}
  80b074:	e037883a 	mov	sp,fp
  80b078:	dfc00717 	ldw	ra,28(sp)
  80b07c:	df000617 	ldw	fp,24(sp)
  80b080:	dd400517 	ldw	r21,20(sp)
  80b084:	dd000417 	ldw	r20,16(sp)
  80b088:	dcc00317 	ldw	r19,12(sp)
  80b08c:	dc800217 	ldw	r18,8(sp)
  80b090:	dc400117 	ldw	r17,4(sp)
  80b094:	dc000017 	ldw	r16,0(sp)
  80b098:	dec00804 	addi	sp,sp,32
  80b09c:	f800283a 	ret

0080b0a0 <killPacket>:
		this->data[i+HEADERSIZE] = data[i];
	}
	return this;
}

void killPacket(struct Packet** this) {
  80b0a0:	defffe04 	addi	sp,sp,-8
  80b0a4:	dc000015 	stw	r16,0(sp)
  80b0a8:	2021883a 	mov	r16,r4
  80b0ac:	dfc00115 	stw	ra,4(sp)
	if(this == NULL) {
		printf("packet is null when attempt to removed\n");
  80b0b0:	010020f4 	movhi	r4,131
  80b0b4:	210e4204 	addi	r4,r4,14600
	}
	return this;
}

void killPacket(struct Packet** this) {
	if(this == NULL) {
  80b0b8:	80000f26 	beq	r16,zero,80b0f8 <killPacket+0x58>
		printf("packet is null when attempt to removed\n");
		return;
	}
	free((*this)->data);
  80b0bc:	80800017 	ldw	r2,0(r16)
  80b0c0:	11000017 	ldw	r4,0(r2)
  80b0c4:	08216e80 	call	8216e8 <free>
	(*this)->data = NULL;
  80b0c8:	80800017 	ldw	r2,0(r16)
	free((*this)->type);
  80b0cc:	11000217 	ldw	r4,8(r2)
	if(this == NULL) {
		printf("packet is null when attempt to removed\n");
		return;
	}
	free((*this)->data);
	(*this)->data = NULL;
  80b0d0:	10000015 	stw	zero,0(r2)
	free((*this)->type);
  80b0d4:	08216e80 	call	8216e8 <free>
	(*this)->type = NULL;
  80b0d8:	81000017 	ldw	r4,0(r16)
  80b0dc:	20000215 	stw	zero,8(r4)
	free(*this);
  80b0e0:	08216e80 	call	8216e8 <free>
	*this = NULL;
  80b0e4:	80000015 	stw	zero,0(r16)
}
  80b0e8:	dfc00117 	ldw	ra,4(sp)
  80b0ec:	dc000017 	ldw	r16,0(sp)
  80b0f0:	dec00204 	addi	sp,sp,8
  80b0f4:	f800283a 	ret
  80b0f8:	dfc00117 	ldw	ra,4(sp)
  80b0fc:	dc000017 	ldw	r16,0(sp)
  80b100:	dec00204 	addi	sp,sp,8
	return this;
}

void killPacket(struct Packet** this) {
	if(this == NULL) {
		printf("packet is null when attempt to removed\n");
  80b104:	08221801 	jmpi	822180 <puts>

0080b108 <readPacketHeader>:
}

/*
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
  80b108:	defff904 	addi	sp,sp,-28
  80b10c:	dd000415 	stw	r20,16(sp)
  80b110:	2029883a 	mov	r20,r4
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
  80b114:	01000504 	movi	r4,20
}

/*
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
  80b118:	dd400515 	stw	r21,20(sp)
  80b11c:	dc800215 	stw	r18,8(sp)
  80b120:	dc400115 	stw	r17,4(sp)
  80b124:	dc000015 	stw	r16,0(sp)
  80b128:	282b883a 	mov	r21,r5
  80b12c:	dfc00615 	stw	ra,24(sp)
  80b130:	dcc00315 	stw	r19,12(sp)
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
  80b134:	08216fc0 	call	8216fc <malloc>
  80b138:	1021883a 	mov	r16,r2
}

/*
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
  80b13c:	a023883a 	mov	r17,r20
  80b140:	a825883a 	mov	r18,r21
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
  80b144:	10003226 	beq	r2,zero,80b210 <readPacketHeader+0x108>
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  80b148:	8cc03fcc 	andi	r19,r17,255
	}
	return result;
}

int getBit(unsigned char byte, int pos) {
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
  80b14c:	9c403fcc 	andi	r17,r19,255
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  80b150:	880ad1fa 	srli	r5,r17,7
	result->data_size = (int)byte2 - HEADERSIZE;
  80b154:	90803fcc 	andi	r2,r18,255
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  80b158:	00c02174 	movhi	r3,133
  80b15c:	18f37e04 	addi	r3,r3,-12808
	result->data_size = (int)byte2 - HEADERSIZE;
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
  80b160:	11000084 	addi	r4,r2,2
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  80b164:	19401415 	stw	r5,80(r3)
	result->data_size = (int)byte2 - HEADERSIZE;
  80b168:	10bfff84 	addi	r2,r2,-2
  80b16c:	80800115 	stw	r2,4(r16)
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
  80b170:	08216fc0 	call	8216fc <malloc>
  80b174:	80800015 	stw	r2,0(r16)
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
	}
	com.client_ack = getBit(byte1, 7);
  80b178:	04800044 	movi	r18,1
	result->data_size = (int)byte2 - HEADERSIZE;
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
	if(result->data == NULL) {
  80b17c:	10002826 	beq	r2,zero,80b220 <readPacketHeader+0x118>
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
  80b180:	81000017 	ldw	r4,0(r16)
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
  80b184:	8806d17a 	srli	r3,r17,5
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
  80b188:	8804d1ba 	srli	r2,r17,6
	result->data_size = (int)byte2 - HEADERSIZE;
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
  80b18c:	25000005 	stb	r20,0(r4)
	result->data[1] = byte2;
  80b190:	81400017 	ldw	r5,0(r16)
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
  80b194:	18c0004c 	andi	r3,r3,1
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
  80b198:	1080004c 	andi	r2,r2,1
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
  80b19c:	2d400045 	stb	r21,1(r5)
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
  80b1a0:	01000104 	movi	r4,4
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
  80b1a4:	80c00415 	stw	r3,16(r16)
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
  80b1a8:	80800315 	stw	r2,12(r16)
	result->isEnd = getBit(byte1, 5);
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
  80b1ac:	08216fc0 	call	8216fc <malloc>
	switch((int)(byte1 & 0x0F)) {
  80b1b0:	98c003cc 	andi	r3,r19,15
	}
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
  80b1b4:	1009883a 	mov	r4,r2
  80b1b8:	80800215 	stw	r2,8(r16)
	switch((int)(byte1 & 0x0F)) {
  80b1bc:	1c801226 	beq	r3,r18,80b208 <readPacketHeader+0x100>
  80b1c0:	90c00e0e 	bge	r18,r3,80b1fc <readPacketHeader+0xf4>
  80b1c4:	00800084 	movi	r2,2
  80b1c8:	18800f26 	beq	r3,r2,80b208 <readPacketHeader+0x100>
  80b1cc:	008000c4 	movi	r2,3
  80b1d0:	18800d26 	beq	r3,r2,80b208 <readPacketHeader+0x100>
		break;
	default:
		break;
	}
	return result;
}
  80b1d4:	8005883a 	mov	r2,r16
  80b1d8:	dfc00617 	ldw	ra,24(sp)
  80b1dc:	dd400517 	ldw	r21,20(sp)
  80b1e0:	dd000417 	ldw	r20,16(sp)
  80b1e4:	dcc00317 	ldw	r19,12(sp)
  80b1e8:	dc800217 	ldw	r18,8(sp)
  80b1ec:	dc400117 	ldw	r17,4(sp)
  80b1f0:	dc000017 	ldw	r16,0(sp)
  80b1f4:	dec00704 	addi	sp,sp,28
  80b1f8:	f800283a 	ret
	result->data[0] = byte1;
	result->data[1] = byte2;
	result->isHead = getBit(byte1, 6);
	result->isEnd = getBit(byte1, 5);
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
	switch((int)(byte1 & 0x0F)) {
  80b1fc:	183ff51e 	bne	r3,zero,80b1d4 <readPacketHeader+0xcc>
	case 0:
		*result->type = STRING;
  80b200:	10000015 	stw	zero,0(r2)
  80b204:	003ff306 	br	80b1d4 <readPacketHeader+0xcc>
		break;
	case 2:
		*result->type = PLAYLIST;
		break;
	case 3:
		*result->type = AUDIO;
  80b208:	20c00015 	stw	r3,0(r4)
  80b20c:	003ff106 	br	80b1d4 <readPacketHeader+0xcc>
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	if(result == NULL) {
		printf("packet is null at malloc with header\n");
  80b210:	010020f4 	movhi	r4,131
  80b214:	210e4c04 	addi	r4,r4,14640
  80b218:	08221800 	call	822180 <puts>
  80b21c:	003fca06 	br	80b148 <readPacketHeader+0x40>
	}
	com.client_ack = getBit(byte1, 7);
	result->data_size = (int)byte2 - HEADERSIZE;
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
	if(result->data == NULL) {
		printf("data inside packet is null when malloc with header\n");
  80b220:	010020f4 	movhi	r4,131
  80b224:	210e5604 	addi	r4,r4,14680
  80b228:	08221800 	call	822180 <puts>
  80b22c:	003fd406 	br	80b180 <readPacketHeader+0x78>

0080b230 <setAck>:
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
}

void setAck(struct Packet* this, int ack) {
	if(ack == 1) {
  80b230:	00800044 	movi	r2,1
  80b234:	28800126 	beq	r5,r2,80b23c <setAck+0xc>
  80b238:	f800283a 	ret
		setBit(&this->data[0], 7);
  80b23c:	21000017 	ldw	r4,0(r4)

int getBit(unsigned char byte, int pos) {
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
}
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
  80b240:	00bfe004 	movi	r2,-128
  80b244:	20c00003 	ldbu	r3,0(r4)
  80b248:	1886b03a 	or	r3,r3,r2
  80b24c:	20c00005 	stb	r3,0(r4)
  80b250:	f800283a 	ret

0080b254 <setHeader>:
	(*this)->type = NULL;
	free(*this);
	*this = NULL;
}

void setHeader(struct Packet* this, int isHead, int isEnd, enum msgType type) {
  80b254:	2011883a 	mov	r8,r4
	if(this == NULL) return;
  80b258:	20001026 	beq	r4,zero,80b29c <setHeader+0x48>
	if((this->isHead = isHead) == 1) {
  80b25c:	02400044 	movi	r9,1
  80b260:	21400315 	stw	r5,12(r4)
  80b264:	2a401826 	beq	r5,r9,80b2c8 <setHeader+0x74>
		setBit(&this->data[0], 6);
	}
	if((this->isEnd = isEnd) == 1) {
  80b268:	41800415 	stw	r6,16(r8)
  80b26c:	32401126 	beq	r6,r9,80b2b4 <setHeader+0x60>
		setBit(&this->data[0], 5);
	}
	*(this->type) = type;
  80b270:	40c00217 	ldw	r3,8(r8)
	this->data[0] = this->data[0] & 0xF0;
  80b274:	41000017 	ldw	r4,0(r8)
		setBit(&this->data[0], 6);
	}
	if((this->isEnd = isEnd) == 1) {
		setBit(&this->data[0], 5);
	}
	*(this->type) = type;
  80b278:	19c00015 	stw	r7,0(r3)
	this->data[0] = this->data[0] & 0xF0;
  80b27c:	20800003 	ldbu	r2,0(r4)
	switch(type) {
  80b280:	00c00084 	movi	r3,2
	}
	if((this->isEnd = isEnd) == 1) {
		setBit(&this->data[0], 5);
	}
	*(this->type) = type;
	this->data[0] = this->data[0] & 0xF0;
  80b284:	10803c0c 	andi	r2,r2,240
  80b288:	20800005 	stb	r2,0(r4)
	switch(type) {
  80b28c:	38c00426 	beq	r7,r3,80b2a0 <setHeader+0x4c>
  80b290:	008000c4 	movi	r2,3
  80b294:	38801126 	beq	r7,r2,80b2dc <setHeader+0x88>
  80b298:	3a400126 	beq	r7,r9,80b2a0 <setHeader+0x4c>
  80b29c:	f800283a 	ret
		break;
	case CMD:
		this->data[0] = this->data[0] | 0x01;
		break;
	case PLAYLIST:
		this->data[0] = this->data[0] | 0x02;
  80b2a0:	40c00017 	ldw	r3,0(r8)
  80b2a4:	18800003 	ldbu	r2,0(r3)
  80b2a8:	3884b03a 	or	r2,r7,r2
  80b2ac:	18800005 	stb	r2,0(r3)
  80b2b0:	f800283a 	ret
	if(this == NULL) return;
	if((this->isHead = isHead) == 1) {
		setBit(&this->data[0], 6);
	}
	if((this->isEnd = isEnd) == 1) {
		setBit(&this->data[0], 5);
  80b2b4:	40c00017 	ldw	r3,0(r8)

int getBit(unsigned char byte, int pos) {
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
}
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
  80b2b8:	18800003 	ldbu	r2,0(r3)
  80b2bc:	10800814 	ori	r2,r2,32
  80b2c0:	18800005 	stb	r2,0(r3)
  80b2c4:	003fea06 	br	80b270 <setHeader+0x1c>
}

void setHeader(struct Packet* this, int isHead, int isEnd, enum msgType type) {
	if(this == NULL) return;
	if((this->isHead = isHead) == 1) {
		setBit(&this->data[0], 6);
  80b2c8:	20c00017 	ldw	r3,0(r4)

int getBit(unsigned char byte, int pos) {
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
}
void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
  80b2cc:	18800003 	ldbu	r2,0(r3)
  80b2d0:	10801014 	ori	r2,r2,64
  80b2d4:	18800005 	stb	r2,0(r3)
  80b2d8:	003fe306 	br	80b268 <setHeader+0x14>
		break;
	case PLAYLIST:
		this->data[0] = this->data[0] | 0x02;
		break;
	case AUDIO:
		this->data[0] = this->data[0] | 0x03;
  80b2dc:	40c00017 	ldw	r3,0(r8)
  80b2e0:	18800003 	ldbu	r2,0(r3)
  80b2e4:	3884b03a 	or	r2,r7,r2
  80b2e8:	18800005 	stb	r2,0(r3)
  80b2ec:	f800283a 	ret

0080b2f0 <setListId>:
	//this->next = this->prev = NULL;
	return this;
}

void setListId(struct Playlist* this, int id) {
	this->id = id;
  80b2f0:	21401b15 	stw	r5,108(r4)
}
  80b2f4:	f800283a 	ret

0080b2f8 <generateListNameForSD>:
	if(this == NULL || *this == NULL) return;
	free(*this);
	*this = NULL;
}

void generateListNameForSD(char* str, int list_index_in_db){
  80b2f8:	defffc04 	addi	sp,sp,-16
  80b2fc:	dfc00315 	stw	ra,12(sp)
  80b300:	dc400215 	stw	r17,8(sp)
  80b304:	dc000115 	stw	r16,4(sp)
	char index[2];
	index[0] = list_index_in_db + '0';
	index[1] = '\0';
	strcpy(str, "LIST");
  80b308:	00801304 	movi	r2,76
  80b30c:	20800005 	stb	r2,0(r4)
  80b310:	04401504 	movi	r17,84
  80b314:	00c01244 	movi	r3,73
  80b318:	008014c4 	movi	r2,83
  80b31c:	20c00045 	stb	r3,1(r4)
  80b320:	244000c5 	stb	r17,3(r4)
	*this = NULL;
}

void generateListNameForSD(char* str, int list_index_in_db){
	char index[2];
	index[0] = list_index_in_db + '0';
  80b324:	28c00c04 	addi	r3,r5,48
	if(this == NULL || *this == NULL) return;
	free(*this);
	*this = NULL;
}

void generateListNameForSD(char* str, int list_index_in_db){
  80b328:	2021883a 	mov	r16,r4
	char index[2];
	index[0] = list_index_in_db + '0';
	index[1] = '\0';
	strcpy(str, "LIST");
  80b32c:	20800085 	stb	r2,2(r4)
  80b330:	20000105 	stb	zero,4(r4)
	strcat(str, index);
  80b334:	d80b883a 	mov	r5,sp
	*this = NULL;
}

void generateListNameForSD(char* str, int list_index_in_db){
	char index[2];
	index[0] = list_index_in_db + '0';
  80b338:	d8c00005 	stb	r3,0(sp)
	index[1] = '\0';
  80b33c:	d8000045 	stb	zero,1(sp)
	strcpy(str, "LIST");
	strcat(str, index);
  80b340:	0822c380 	call	822c38 <strcat>
	strcat(str, ".TXT");
  80b344:	8009883a 	mov	r4,r16
  80b348:	0822e100 	call	822e10 <strlen>
  80b34c:	1405883a 	add	r2,r2,r16
  80b350:	00c00b84 	movi	r3,46
  80b354:	01001604 	movi	r4,88
  80b358:	10c00005 	stb	r3,0(r2)
  80b35c:	11000085 	stb	r4,2(r2)
  80b360:	144000c5 	stb	r17,3(r2)
  80b364:	10000105 	stb	zero,4(r2)
  80b368:	14400045 	stb	r17,1(r2)
}
  80b36c:	dfc00317 	ldw	ra,12(sp)
  80b370:	dc400217 	ldw	r17,8(sp)
  80b374:	dc000117 	ldw	r16,4(sp)
  80b378:	dec00404 	addi	sp,sp,16
  80b37c:	f800283a 	ret

0080b380 <killPlaylist>:
		this->list_name[LISTNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->list_name, name);

}
void killPlaylist(struct Playlist** this) {
  80b380:	defffe04 	addi	sp,sp,-8
  80b384:	dc000015 	stw	r16,0(sp)
  80b388:	dfc00115 	stw	ra,4(sp)
  80b38c:	2021883a 	mov	r16,r4
	if(this == NULL || *this == NULL) return;
  80b390:	20000526 	beq	r4,zero,80b3a8 <killPlaylist+0x28>
  80b394:	20800017 	ldw	r2,0(r4)
	free(*this);
  80b398:	1009883a 	mov	r4,r2
	} else
		strcpy(this->list_name, name);

}
void killPlaylist(struct Playlist** this) {
	if(this == NULL || *this == NULL) return;
  80b39c:	10000226 	beq	r2,zero,80b3a8 <killPlaylist+0x28>
	free(*this);
  80b3a0:	08216e80 	call	8216e8 <free>
	*this = NULL;
  80b3a4:	80000015 	stw	zero,0(r16)
}
  80b3a8:	dfc00117 	ldw	ra,4(sp)
  80b3ac:	dc000017 	ldw	r16,0(sp)
  80b3b0:	dec00204 	addi	sp,sp,8
  80b3b4:	f800283a 	ret

0080b3b8 <setListName>:
}

void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
  80b3b8:	defffd04 	addi	sp,sp,-12
  80b3bc:	dc400115 	stw	r17,4(sp)
  80b3c0:	dc000015 	stw	r16,0(sp)
  80b3c4:	dfc00215 	stw	ra,8(sp)
  80b3c8:	2023883a 	mov	r17,r4
  80b3cc:	2821883a 	mov	r16,r5
	if(this == NULL || name == NULL) return;
  80b3d0:	20001126 	beq	r4,zero,80b418 <setListName+0x60>
	int size = strlen(name);
  80b3d4:	2809883a 	mov	r4,r5

void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
  80b3d8:	28000f26 	beq	r5,zero,80b418 <setListName+0x60>
	int size = strlen(name);
  80b3dc:	0822e100 	call	822e10 <strlen>
  80b3e0:	00c01904 	movi	r3,100
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
  80b3e4:	800b883a 	mov	r5,r16
  80b3e8:	8809883a 	mov	r4,r17
  80b3ec:	180d883a 	mov	r6,r3
void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  80b3f0:	18800716 	blt	r3,r2,80b410 <setListName+0x58>
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
		this->list_name[LISTNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->list_name, name);
  80b3f4:	8809883a 	mov	r4,r17
  80b3f8:	800b883a 	mov	r5,r16

}
  80b3fc:	dfc00217 	ldw	ra,8(sp)
  80b400:	dc400117 	ldw	r17,4(sp)
  80b404:	dc000017 	ldw	r16,0(sp)
  80b408:	dec00304 	addi	sp,sp,12
	int size = strlen(name);
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
		this->list_name[LISTNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->list_name, name);
  80b40c:	0822d841 	jmpi	822d84 <strcpy>
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
  80b410:	0822f340 	call	822f34 <strncpy>
		this->list_name[LISTNAME_LENGTH-1] = '\0';
  80b414:	88001905 	stb	zero,100(r17)
	} else
		strcpy(this->list_name, name);

}
  80b418:	dfc00217 	ldw	ra,8(sp)
  80b41c:	dc400117 	ldw	r17,4(sp)
  80b420:	dc000017 	ldw	r16,0(sp)
  80b424:	dec00304 	addi	sp,sp,12
  80b428:	f800283a 	ret

0080b42c <initPlaylist>:
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
  80b42c:	defffc04 	addi	sp,sp,-16
  80b430:	dc400115 	stw	r17,4(sp)
  80b434:	2023883a 	mov	r17,r4
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
  80b438:	01001c04 	movi	r4,112
 *  Created on: 2013-03-06
 *      Author: danny
 */
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
  80b43c:	dc800215 	stw	r18,8(sp)
  80b440:	dc000015 	stw	r16,0(sp)
  80b444:	dfc00315 	stw	ra,12(sp)
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
  80b448:	08216fc0 	call	8216fc <malloc>
  80b44c:	1021883a 	mov	r16,r2
	if(this == NULL) {
		printf("playlist cannot malloc\n");
  80b450:	010020f4 	movhi	r4,131
  80b454:	210e6304 	addi	r4,r4,14732
  80b458:	0025883a 	mov	r18,zero
 */
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
	if(this == NULL) {
  80b45c:	10001826 	beq	r2,zero,80b4c0 <initPlaylist+0x94>
void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  80b460:	8809883a 	mov	r4,r17
 *      Author: danny
 */
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
  80b464:	1025883a 	mov	r18,r2

void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
  80b468:	88000926 	beq	r17,zero,80b490 <initPlaylist+0x64>
	int size = strlen(name);
  80b46c:	0822e100 	call	822e10 <strlen>
  80b470:	00c01904 	movi	r3,100
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
  80b474:	880b883a 	mov	r5,r17
  80b478:	8009883a 	mov	r4,r16
  80b47c:	180d883a 	mov	r6,r3
void setListId(struct Playlist* this, int id) {
	this->id = id;
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  80b480:	18800c16 	blt	r3,r2,80b4b4 <initPlaylist+0x88>
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
		this->list_name[LISTNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->list_name, name);
  80b484:	880b883a 	mov	r5,r17
  80b488:	8009883a 	mov	r4,r16
  80b48c:	0822d840 	call	822d84 <strcpy>
		return NULL;
	}
	setListName(this, listname);
	//this->songs = initQueue();
	this->num_of_songs = 0;
	this->id = 0;
  80b490:	80001b15 	stw	zero,108(r16)
		printf("playlist cannot malloc\n");
		return NULL;
	}
	setListName(this, listname);
	//this->songs = initQueue();
	this->num_of_songs = 0;
  80b494:	80001a15 	stw	zero,104(r16)
	this->id = 0;
	//this->next = this->prev = NULL;
	return this;
}
  80b498:	9005883a 	mov	r2,r18
  80b49c:	dfc00317 	ldw	ra,12(sp)
  80b4a0:	dc800217 	ldw	r18,8(sp)
  80b4a4:	dc400117 	ldw	r17,4(sp)
  80b4a8:	dc000017 	ldw	r16,0(sp)
  80b4ac:	dec00404 	addi	sp,sp,16
  80b4b0:	f800283a 	ret
}
void setListName(struct Playlist* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
	if(size > LISTNAME_LENGTH-1) {
		strncpy(this->list_name, name, LISTNAME_LENGTH-1);
  80b4b4:	0822f340 	call	822f34 <strncpy>
		this->list_name[LISTNAME_LENGTH-1] = '\0';
  80b4b8:	80001905 	stb	zero,100(r16)
  80b4bc:	003ff406 	br	80b490 <initPlaylist+0x64>
#include "Playlist.h"

struct Playlist* initPlaylist(char* listname) {
	struct Playlist* this = (struct Playlist*)malloc(sizeof(struct Playlist));
	if(this == NULL) {
		printf("playlist cannot malloc\n");
  80b4c0:	08221800 	call	822180 <puts>
  80b4c4:	003ff406 	br	80b498 <initPlaylist+0x6c>

0080b4c8 <isBitSet>:
 *      Author: Adam
 */

#include "PushKeyController.h"

bool isBitSet(char num, int bit) {
  80b4c8:	20803fcc 	andi	r2,r4,255
  80b4cc:	1080201c 	xori	r2,r2,128
  80b4d0:	10bfe004 	addi	r2,r2,-128
  80b4d4:	1145d83a 	sra	r2,r2,r5
	return num & 1 << bit;
}
  80b4d8:	1080004c 	andi	r2,r2,1
  80b4dc:	f800283a 	ret

0080b4e0 <isKeyUp>:
/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is up
 */
bool isKeyUp(int key) {
	return isBitSet(IORD_8DIRECT(KEYS_BASE, 0), key);
  80b4e0:	00c04234 	movhi	r3,264
  80b4e4:	18cd2404 	addi	r3,r3,13456
  80b4e8:	18800023 	ldbuio	r2,0(r3)
  80b4ec:	10803fcc 	andi	r2,r2,255
  80b4f0:	1080201c 	xori	r2,r2,128
  80b4f4:	10bfe004 	addi	r2,r2,-128
  80b4f8:	1105d83a 	sra	r2,r2,r4
}
  80b4fc:	1080004c 	andi	r2,r2,1
  80b500:	f800283a 	ret

0080b504 <isKeyDown>:
/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is down
 */
bool isKeyDown(int key) {
	return !isBitSet(IORD_8DIRECT(KEYS_BASE, 0), key);
  80b504:	00c04234 	movhi	r3,264
  80b508:	18cd2404 	addi	r3,r3,13456
  80b50c:	18800023 	ldbuio	r2,0(r3)
  80b510:	10803fcc 	andi	r2,r2,255
  80b514:	1080201c 	xori	r2,r2,128
  80b518:	10bfe004 	addi	r2,r2,-128
  80b51c:	1105d83a 	sra	r2,r2,r4
  80b520:	0084303a 	nor	r2,zero,r2
}
  80b524:	1080004c 	andi	r2,r2,1
  80b528:	f800283a 	ret

0080b52c <initPushKeyController>:

bool isBitSet(char num, int bit) {
	return num & 1 << bit;
}

struct PushKeyController* initPushKeyController(void) {
  80b52c:	defffe04 	addi	sp,sp,-8
	struct PushKeyController* this = (struct PushKeyController*) malloc(
			sizeof(struct PushKeyController));
  80b530:	01000104 	movi	r4,4

bool isBitSet(char num, int bit) {
	return num & 1 << bit;
}

struct PushKeyController* initPushKeyController(void) {
  80b534:	dfc00115 	stw	ra,4(sp)
  80b538:	dc400015 	stw	r17,0(sp)
	struct PushKeyController* this = (struct PushKeyController*) malloc(
			sizeof(struct PushKeyController));
  80b53c:	08216fc0 	call	8216fc <malloc>
	this->keys_changed = 0;

	alt_irq_register(KEYS_IRQ, this, (void*) push_key_ISR);
  80b540:	100b883a 	mov	r5,r2
  80b544:	01000084 	movi	r4,2
  80b548:	01802074 	movhi	r6,129
  80b54c:	31a85704 	addi	r6,r6,-24228
}

struct PushKeyController* initPushKeyController(void) {
	struct PushKeyController* this = (struct PushKeyController*) malloc(
			sizeof(struct PushKeyController));
	this->keys_changed = 0;
  80b550:	10000015 	stw	zero,0(r2)
	return num & 1 << bit;
}

struct PushKeyController* initPushKeyController(void) {
	struct PushKeyController* this = (struct PushKeyController*) malloc(
			sizeof(struct PushKeyController));
  80b554:	1023883a 	mov	r17,r2
	this->keys_changed = 0;

	alt_irq_register(KEYS_IRQ, this, (void*) push_key_ISR);
  80b558:	082acec0 	call	82acec <alt_irq_register>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  80b55c:	00c04234 	movhi	r3,264
  80b560:	18cd2704 	addi	r3,r3,13468
  80b564:	18000035 	stwio	zero,0(r3)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 15);
  80b568:	010003c4 	movi	r4,15
  80b56c:	00804234 	movhi	r2,264
  80b570:	108d2604 	addi	r2,r2,13464
  80b574:	11000035 	stwio	r4,0(r2)
	return this;
}
  80b578:	8805883a 	mov	r2,r17
  80b57c:	dfc00117 	ldw	ra,4(sp)
  80b580:	dc400017 	ldw	r17,0(sp)
  80b584:	dec00204 	addi	sp,sp,8
  80b588:	f800283a 	ret

0080b58c <wasKeyJustReleased>:

/**
 * Returns true if the key was released when the last ISR was called
 */
bool wasKeyJustReleased(struct PushKeyController* this, int key) {
	return isBitSet(this->keys_changed, key) && isKeyUp(key);
  80b58c:	20800017 	ldw	r2,0(r4)
  80b590:	0007883a 	mov	r3,zero
  80b594:	10803fcc 	andi	r2,r2,255
  80b598:	1080201c 	xori	r2,r2,128
  80b59c:	10bfe004 	addi	r2,r2,-128
  80b5a0:	1145d83a 	sra	r2,r2,r5
  80b5a4:	1080004c 	andi	r2,r2,1
  80b5a8:	10000826 	beq	r2,zero,80b5cc <wasKeyJustReleased+0x40>
/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is up
 */
bool isKeyUp(int key) {
	return isBitSet(IORD_8DIRECT(KEYS_BASE, 0), key);
  80b5ac:	00c04234 	movhi	r3,264
  80b5b0:	18cd2404 	addi	r3,r3,13456
  80b5b4:	18800023 	ldbuio	r2,0(r3)
  80b5b8:	10803fcc 	andi	r2,r2,255
  80b5bc:	1080201c 	xori	r2,r2,128
  80b5c0:	10bfe004 	addi	r2,r2,-128
  80b5c4:	1145d83a 	sra	r2,r2,r5
  80b5c8:	10c0004c 	andi	r3,r2,1
/**
 * Returns true if the key was released when the last ISR was called
 */
bool wasKeyJustReleased(struct PushKeyController* this, int key) {
	return isBitSet(this->keys_changed, key) && isKeyUp(key);
}
  80b5cc:	1805883a 	mov	r2,r3
  80b5d0:	f800283a 	ret

0080b5d4 <wasKeyJustPressed>:

/**
 * Returns true if the key was pressed when the last ISR was called
 */
bool wasKeyJustPressed(struct PushKeyController* this, int key) {
	return isBitSet(this->keys_changed, key) && isKeyDown(key);
  80b5d4:	20800017 	ldw	r2,0(r4)
  80b5d8:	0007883a 	mov	r3,zero
  80b5dc:	10803fcc 	andi	r2,r2,255
  80b5e0:	1080201c 	xori	r2,r2,128
  80b5e4:	10bfe004 	addi	r2,r2,-128
  80b5e8:	1145d83a 	sra	r2,r2,r5
  80b5ec:	1080004c 	andi	r2,r2,1
  80b5f0:	10000926 	beq	r2,zero,80b618 <wasKeyJustPressed+0x44>
/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is down
 */
bool isKeyDown(int key) {
	return !isBitSet(IORD_8DIRECT(KEYS_BASE, 0), key);
  80b5f4:	00c04234 	movhi	r3,264
  80b5f8:	18cd2404 	addi	r3,r3,13456
  80b5fc:	18800023 	ldbuio	r2,0(r3)
  80b600:	10803fcc 	andi	r2,r2,255
  80b604:	1080201c 	xori	r2,r2,128
  80b608:	10bfe004 	addi	r2,r2,-128
  80b60c:	1145d83a 	sra	r2,r2,r5
  80b610:	1080004c 	andi	r2,r2,1
  80b614:	10c0005c 	xori	r3,r2,1
/**
 * Returns true if the key was pressed when the last ISR was called
 */
bool wasKeyJustPressed(struct PushKeyController* this, int key) {
	return isBitSet(this->keys_changed, key) && isKeyDown(key);
}
  80b618:	1805883a 	mov	r2,r3
  80b61c:	f800283a 	ret

0080b620 <containsValue>:
	this->head = NULL;
	return this;
}

int containsValue(struct Queue* this, int val) {
	if(this == NULL) return -1;
  80b620:	2000021e 	bne	r4,zero,80b62c <containsValue+0xc>
	int i;
	int size = this->size;
	struct QueueData* temp = this->head;
	for(i = 0; i < size; i++) {
  80b624:	00bfffc4 	movi	r2,-1
		}
		temp = temp->next;
	}
	temp = NULL;
	return -1;
}
  80b628:	f800283a 	ret
}

int containsValue(struct Queue* this, int val) {
	if(this == NULL) return -1;
	int i;
	int size = this->size;
  80b62c:	21c00017 	ldw	r7,0(r4)
	struct QueueData* temp = this->head;
  80b630:	21000117 	ldw	r4,4(r4)
	for(i = 0; i < size; i++) {
  80b634:	01fffb0e 	bge	zero,r7,80b624 <containsValue+0x4>
		if(*((int*)(temp->obj)) == val) {
  80b638:	20800217 	ldw	r2,8(r4)
  80b63c:	10c00017 	ldw	r3,0(r2)
  80b640:	28c00726 	beq	r5,r3,80b660 <containsValue+0x40>
			temp = NULL;
			queue_lock = 0;
			return 0;
  80b644:	000d883a 	mov	r6,zero
int containsValue(struct Queue* this, int val) {
	if(this == NULL) return -1;
	int i;
	int size = this->size;
	struct QueueData* temp = this->head;
	for(i = 0; i < size; i++) {
  80b648:	31800044 	addi	r6,r6,1
		if(*((int*)(temp->obj)) == val) {
			temp = NULL;
			queue_lock = 0;
			return 0;
		}
		temp = temp->next;
  80b64c:	21000017 	ldw	r4,0(r4)
int containsValue(struct Queue* this, int val) {
	if(this == NULL) return -1;
	int i;
	int size = this->size;
	struct QueueData* temp = this->head;
	for(i = 0; i < size; i++) {
  80b650:	39bff426 	beq	r7,r6,80b624 <containsValue+0x4>
		if(*((int*)(temp->obj)) == val) {
  80b654:	20800217 	ldw	r2,8(r4)
  80b658:	10c00017 	ldw	r3,0(r2)
  80b65c:	197ffa1e 	bne	r3,r5,80b648 <containsValue+0x28>
			temp = NULL;
			queue_lock = 0;
  80b660:	0005883a 	mov	r2,zero
  80b664:	d0275e15 	stw	zero,-25224(gp)
  80b668:	f800283a 	ret

0080b66c <initQueue>:
 */

#include "Queue.h"
int queue_lock = 0;

struct Queue* initQueue() {
  80b66c:	deffff04 	addi	sp,sp,-4
	struct Queue* this = (struct Queue*)malloc(sizeof(struct Queue));
  80b670:	01000304 	movi	r4,12
 */

#include "Queue.h"
int queue_lock = 0;

struct Queue* initQueue() {
  80b674:	dfc00015 	stw	ra,0(sp)
	struct Queue* this = (struct Queue*)malloc(sizeof(struct Queue));
  80b678:	08216fc0 	call	8216fc <malloc>
	this->size = 0;
	this->tail = NULL;
	this->head = NULL;
  80b67c:	10000115 	stw	zero,4(r2)
#include "Queue.h"
int queue_lock = 0;

struct Queue* initQueue() {
	struct Queue* this = (struct Queue*)malloc(sizeof(struct Queue));
	this->size = 0;
  80b680:	10000015 	stw	zero,0(r2)
	this->tail = NULL;
  80b684:	10000215 	stw	zero,8(r2)
	this->head = NULL;
	return this;
}
  80b688:	dfc00017 	ldw	ra,0(sp)
  80b68c:	dec00104 	addi	sp,sp,4
  80b690:	f800283a 	ret

0080b694 <enqueue>:
		temp = temp->next;
	}
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
  80b694:	defffc04 	addi	sp,sp,-16
  80b698:	dc000015 	stw	r16,0(sp)
  80b69c:	2021883a 	mov	r16,r4
  80b6a0:	dc400115 	stw	r17,4(sp)
  80b6a4:	dfc00315 	stw	ra,12(sp)
  80b6a8:	dc800215 	stw	r18,8(sp)
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
  80b6ac:	010020f4 	movhi	r4,131
  80b6b0:	210e6904 	addi	r4,r4,14756
		temp = temp->next;
	}
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
  80b6b4:	2823883a 	mov	r17,r5
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
  80b6b8:	80002226 	beq	r16,zero,80b744 <enqueue+0xb0>
  80b6bc:	28002126 	beq	r5,zero,80b744 <enqueue+0xb0>
  80b6c0:	84800217 	ldw	r18,8(r16)
  80b6c4:	90800217 	ldw	r2,8(r18)
  80b6c8:	28801e26 	beq	r5,r2,80b744 <enqueue+0xb0>
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
	if(this->size == 0) {
  80b6cc:	80c00017 	ldw	r3,0(r16)
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
  80b6d0:	00800044 	movi	r2,1
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  80b6d4:	01000304 	movi	r4,12
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
  80b6d8:	d0a75e15 	stw	r2,-25224(gp)
	if(this->size == 0) {
  80b6dc:	1800101e 	bne	r3,zero,80b720 <enqueue+0x8c>
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
  80b6e0:	08216fc0 	call	8216fc <malloc>
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
  80b6e4:	80800215 	stw	r2,8(r16)
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
	if(this->size == 0) {
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
  80b6e8:	80800115 	stw	r2,4(r16)
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
  80b6ec:	14400215 	stw	r17,8(r2)
		return;
	}
	queue_lock = 1;
	if(this->size == 0) {
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
		this->head->next = NULL;
  80b6f0:	10000015 	stw	zero,0(r2)
		this->head->prev = NULL;
  80b6f4:	10000115 	stw	zero,4(r2)
		this->tail->next->prev = this->tail;
		this->tail = this->tail->next;
		this->tail->obj = obj;
		this->tail->next = NULL;
	}
	this->size++;
  80b6f8:	80800017 	ldw	r2,0(r16)
  80b6fc:	10800044 	addi	r2,r2,1
  80b700:	80800015 	stw	r2,0(r16)
	queue_lock = 0;
  80b704:	d0275e15 	stw	zero,-25224(gp)
}
  80b708:	dfc00317 	ldw	ra,12(sp)
  80b70c:	dc800217 	ldw	r18,8(sp)
  80b710:	dc400117 	ldw	r17,4(sp)
  80b714:	dc000017 	ldw	r16,0(sp)
  80b718:	dec00404 	addi	sp,sp,16
  80b71c:	f800283a 	ret
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  80b720:	08216fc0 	call	8216fc <malloc>
  80b724:	90800015 	stw	r2,0(r18)
		this->tail->next->prev = this->tail;
  80b728:	80c00217 	ldw	r3,8(r16)
  80b72c:	18800017 	ldw	r2,0(r3)
  80b730:	10c00115 	stw	r3,4(r2)
		this->tail = this->tail->next;
  80b734:	80800215 	stw	r2,8(r16)
		this->tail->obj = obj;
  80b738:	14400215 	stw	r17,8(r2)
		this->tail->next = NULL;
  80b73c:	10000015 	stw	zero,0(r2)
  80b740:	003fed06 	br	80b6f8 <enqueue+0x64>
	}
	this->size++;
	queue_lock = 0;
}
  80b744:	dfc00317 	ldw	ra,12(sp)
  80b748:	dc800217 	ldw	r18,8(sp)
  80b74c:	dc400117 	ldw	r17,4(sp)
  80b750:	dc000017 	ldw	r16,0(sp)
  80b754:	dec00404 	addi	sp,sp,16
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
  80b758:	08221801 	jmpi	822180 <puts>

0080b75c <killQueueData>:
	this->size--;
	queue_lock = 0;
	return result;
}

void killQueueData(struct QueueData** this) {
  80b75c:	defffe04 	addi	sp,sp,-8
  80b760:	dc000015 	stw	r16,0(sp)
  80b764:	dfc00115 	stw	ra,4(sp)
  80b768:	2021883a 	mov	r16,r4
	if(this == NULL) return;
  80b76c:	20000826 	beq	r4,zero,80b790 <killQueueData+0x34>
	(*this)->next =NULL;
  80b770:	20800017 	ldw	r2,0(r4)
  80b774:	10000015 	stw	zero,0(r2)
	(*this)->prev = NULL;
  80b778:	20c00017 	ldw	r3,0(r4)
  80b77c:	18000115 	stw	zero,4(r3)
	(*this)->obj = NULL;
  80b780:	21000017 	ldw	r4,0(r4)
  80b784:	20000215 	stw	zero,8(r4)
	free(*this);
  80b788:	08216e80 	call	8216e8 <free>
	*this = NULL;
  80b78c:	80000015 	stw	zero,0(r16)
}
  80b790:	dfc00117 	ldw	ra,4(sp)
  80b794:	dc000017 	ldw	r16,0(sp)
  80b798:	dec00204 	addi	sp,sp,8
  80b79c:	f800283a 	ret

0080b7a0 <dequeue>:
	}
	this->size++;
	queue_lock = 0;
}

void* dequeue(struct Queue* this) {
  80b7a0:	defffd04 	addi	sp,sp,-12
  80b7a4:	dc000015 	stw	r16,0(sp)
  80b7a8:	2021883a 	mov	r16,r4
  80b7ac:	dc400115 	stw	r17,4(sp)
  80b7b0:	dfc00215 	stw	ra,8(sp)
	if(this == NULL || this->size <= 0) {
		printf("dequeue returns null\n");
  80b7b4:	010020f4 	movhi	r4,131
  80b7b8:	210e6d04 	addi	r4,r4,14772
  80b7bc:	0023883a 	mov	r17,zero
	this->size++;
	queue_lock = 0;
}

void* dequeue(struct Queue* this) {
	if(this == NULL || this->size <= 0) {
  80b7c0:	80001b26 	beq	r16,zero,80b830 <dequeue+0x90>
  80b7c4:	80800017 	ldw	r2,0(r16)
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
  80b7c8:	00c00044 	movi	r3,1
	this->size++;
	queue_lock = 0;
}

void* dequeue(struct Queue* this) {
	if(this == NULL || this->size <= 0) {
  80b7cc:	0080180e 	bge	zero,r2,80b830 <dequeue+0x90>
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
  80b7d0:	d0e75e15 	stw	r3,-25224(gp)
	if(this->size == 1)
  80b7d4:	10c01426 	beq	r2,r3,80b828 <dequeue+0x88>
		this->tail = NULL;
	struct QueueData* temp = this->head;
  80b7d8:	80800117 	ldw	r2,4(r16)
	void* result = this->head->obj;
	this->head = this->head->next;
  80b7dc:	10c00017 	ldw	r3,0(r2)
	}
	queue_lock = 1;
	if(this->size == 1)
		this->tail = NULL;
	struct QueueData* temp = this->head;
	void* result = this->head->obj;
  80b7e0:	14400217 	ldw	r17,8(r2)
	this->head = this->head->next;
	temp->obj = NULL;
	if(this->head != NULL)
		this->head->prev = NULL;
	temp->next = NULL;
	free(temp);
  80b7e4:	1009883a 	mov	r4,r2
	queue_lock = 1;
	if(this->size == 1)
		this->tail = NULL;
	struct QueueData* temp = this->head;
	void* result = this->head->obj;
	this->head = this->head->next;
  80b7e8:	80c00115 	stw	r3,4(r16)
	temp->obj = NULL;
  80b7ec:	10000215 	stw	zero,8(r2)
	if(this->head != NULL)
  80b7f0:	18000126 	beq	r3,zero,80b7f8 <dequeue+0x58>
		this->head->prev = NULL;
  80b7f4:	18000115 	stw	zero,4(r3)
	temp->next = NULL;
  80b7f8:	10000015 	stw	zero,0(r2)
	free(temp);
  80b7fc:	08216e80 	call	8216e8 <free>
	temp = NULL;
	this->size--;
  80b800:	80800017 	ldw	r2,0(r16)
  80b804:	10bfffc4 	addi	r2,r2,-1
  80b808:	80800015 	stw	r2,0(r16)
	queue_lock = 0;
	return result;
}
  80b80c:	8805883a 	mov	r2,r17
		this->head->prev = NULL;
	temp->next = NULL;
	free(temp);
	temp = NULL;
	this->size--;
	queue_lock = 0;
  80b810:	d0275e15 	stw	zero,-25224(gp)
	return result;
}
  80b814:	dfc00217 	ldw	ra,8(sp)
  80b818:	dc400117 	ldw	r17,4(sp)
  80b81c:	dc000017 	ldw	r16,0(sp)
  80b820:	dec00304 	addi	sp,sp,12
  80b824:	f800283a 	ret
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
	if(this->size == 1)
		this->tail = NULL;
  80b828:	80000215 	stw	zero,8(r16)
  80b82c:	003fea06 	br	80b7d8 <dequeue+0x38>
	queue_lock = 0;
}

void* dequeue(struct Queue* this) {
	if(this == NULL || this->size <= 0) {
		printf("dequeue returns null\n");
  80b830:	08221800 	call	822180 <puts>
	free(temp);
	temp = NULL;
	this->size--;
	queue_lock = 0;
	return result;
}
  80b834:	8805883a 	mov	r2,r17
  80b838:	dfc00217 	ldw	ra,8(sp)
  80b83c:	dc400117 	ldw	r17,4(sp)
  80b840:	dc000017 	ldw	r16,0(sp)
  80b844:	dec00304 	addi	sp,sp,12
  80b848:	f800283a 	ret

0080b84c <dequeueValue>:

void* dequeueValue(struct Queue* this, int value) {
  80b84c:	defffd04 	addi	sp,sp,-12
  80b850:	dc000015 	stw	r16,0(sp)
  80b854:	dfc00215 	stw	ra,8(sp)
  80b858:	dc400115 	stw	r17,4(sp)
  80b85c:	2021883a 	mov	r16,r4
	if(this == NULL || this->size <= 0) {
  80b860:	20003326 	beq	r4,zero,80b930 <dequeueValue+0xe4>
  80b864:	20800017 	ldw	r2,0(r4)
  80b868:	0080310e 	bge	zero,r2,80b930 <dequeueValue+0xe4>
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
	struct QueueData* temp = this->head;
  80b86c:	21c00117 	ldw	r7,4(r4)
void* dequeueValue(struct Queue* this, int value) {
	if(this == NULL || this->size <= 0) {
		printf("dequeue returns null\n");
		return NULL;
	}
	queue_lock = 1;
  80b870:	00800044 	movi	r2,1
  80b874:	d0a75e15 	stw	r2,-25224(gp)
	struct QueueData* temp = this->head;
	void* result;

	while(*((int*)(temp->obj)) != value) {
  80b878:	38c00217 	ldw	r3,8(r7)
  80b87c:	18800017 	ldw	r2,0(r3)
  80b880:	28803526 	beq	r5,r2,80b958 <dequeueValue+0x10c>
		if(temp != this->tail)
  80b884:	21800217 	ldw	r6,8(r4)
  80b888:	39801f26 	beq	r7,r6,80b908 <dequeueValue+0xbc>
  80b88c:	3809883a 	mov	r4,r7
  80b890:	00000106 	br	80b898 <dequeueValue+0x4c>
  80b894:	21801c26 	beq	r4,r6,80b908 <dequeueValue+0xbc>
			temp = temp->next;
  80b898:	21000017 	ldw	r4,0(r4)
	}
	queue_lock = 1;
	struct QueueData* temp = this->head;
	void* result;

	while(*((int*)(temp->obj)) != value) {
  80b89c:	20c00217 	ldw	r3,8(r4)
  80b8a0:	18800017 	ldw	r2,0(r3)
  80b8a4:	117ffb1e 	bne	r2,r5,80b894 <dequeueValue+0x48>
		else {
			printf("dequeueValue cannot find the value\n");
			return NULL;
		}
	}
	if(temp == this->head) {
  80b8a8:	39002d26 	beq	r7,r4,80b960 <dequeueValue+0x114>
		this->head = temp->next;
	}
	if(temp == this->tail) {
  80b8ac:	31002f26 	beq	r6,r4,80b96c <dequeueValue+0x120>
		this->tail = temp->prev;
	}
	if(temp->prev != NULL)
  80b8b0:	21400117 	ldw	r5,4(r4)
  80b8b4:	28000226 	beq	r5,zero,80b8c0 <dequeueValue+0x74>
		temp->prev->next = temp->next;
  80b8b8:	20800017 	ldw	r2,0(r4)
  80b8bc:	28800015 	stw	r2,0(r5)
	if(temp->next != NULL)
  80b8c0:	20800017 	ldw	r2,0(r4)
  80b8c4:	10000126 	beq	r2,zero,80b8cc <dequeueValue+0x80>
		temp->next->prev = temp->prev;
  80b8c8:	11400115 	stw	r5,4(r2)
	return result;
}

void killQueueData(struct QueueData** this) {
	if(this == NULL) return;
	(*this)->next =NULL;
  80b8cc:	20000015 	stw	zero,0(r4)
	(*this)->prev = NULL;
  80b8d0:	20000115 	stw	zero,4(r4)
	(*this)->obj = NULL;
  80b8d4:	20000215 	stw	zero,8(r4)
		temp->prev->next = temp->next;
	if(temp->next != NULL)
		temp->next->prev = temp->prev;
	temp->next = NULL;
	temp->prev = NULL;
	result = temp->obj;
  80b8d8:	1823883a 	mov	r17,r3
void killQueueData(struct QueueData** this) {
	if(this == NULL) return;
	(*this)->next =NULL;
	(*this)->prev = NULL;
	(*this)->obj = NULL;
	free(*this);
  80b8dc:	08216e80 	call	8216e8 <free>
		temp->next->prev = temp->prev;
	temp->next = NULL;
	temp->prev = NULL;
	result = temp->obj;
	killQueueData(&temp);
	this->size--;
  80b8e0:	80800017 	ldw	r2,0(r16)
  80b8e4:	10bfffc4 	addi	r2,r2,-1
  80b8e8:	80800015 	stw	r2,0(r16)
	queue_lock = 0;
	return result;
}
  80b8ec:	8805883a 	mov	r2,r17
	temp->next = NULL;
	temp->prev = NULL;
	result = temp->obj;
	killQueueData(&temp);
	this->size--;
	queue_lock = 0;
  80b8f0:	d0275e15 	stw	zero,-25224(gp)
	return result;
}
  80b8f4:	dfc00217 	ldw	ra,8(sp)
  80b8f8:	dc400117 	ldw	r17,4(sp)
  80b8fc:	dc000017 	ldw	r16,0(sp)
  80b900:	dec00304 	addi	sp,sp,12
  80b904:	f800283a 	ret

	while(*((int*)(temp->obj)) != value) {
		if(temp != this->tail)
			temp = temp->next;
		else {
			printf("dequeueValue cannot find the value\n");
  80b908:	010020f4 	movhi	r4,131
  80b90c:	210e7304 	addi	r4,r4,14796
  80b910:	08221800 	call	822180 <puts>
  80b914:	0023883a 	mov	r17,zero
	result = temp->obj;
	killQueueData(&temp);
	this->size--;
	queue_lock = 0;
	return result;
}
  80b918:	8805883a 	mov	r2,r17
  80b91c:	dfc00217 	ldw	ra,8(sp)
  80b920:	dc400117 	ldw	r17,4(sp)
  80b924:	dc000017 	ldw	r16,0(sp)
  80b928:	dec00304 	addi	sp,sp,12
  80b92c:	f800283a 	ret
	return result;
}

void* dequeueValue(struct Queue* this, int value) {
	if(this == NULL || this->size <= 0) {
		printf("dequeue returns null\n");
  80b930:	010020f4 	movhi	r4,131
  80b934:	210e6d04 	addi	r4,r4,14772
  80b938:	08221800 	call	822180 <puts>
  80b93c:	0023883a 	mov	r17,zero
	result = temp->obj;
	killQueueData(&temp);
	this->size--;
	queue_lock = 0;
	return result;
}
  80b940:	8805883a 	mov	r2,r17
  80b944:	dfc00217 	ldw	ra,8(sp)
  80b948:	dc400117 	ldw	r17,4(sp)
  80b94c:	dc000017 	ldw	r16,0(sp)
  80b950:	dec00304 	addi	sp,sp,12
  80b954:	f800283a 	ret
  80b958:	21800217 	ldw	r6,8(r4)
	}
	queue_lock = 1;
	struct QueueData* temp = this->head;
	void* result;

	while(*((int*)(temp->obj)) != value) {
  80b95c:	3809883a 	mov	r4,r7
			printf("dequeueValue cannot find the value\n");
			return NULL;
		}
	}
	if(temp == this->head) {
		this->head = temp->next;
  80b960:	38800017 	ldw	r2,0(r7)
  80b964:	80800115 	stw	r2,4(r16)
  80b968:	003fd006 	br	80b8ac <dequeueValue+0x60>
	}
	if(temp == this->tail) {
		this->tail = temp->prev;
  80b96c:	20800117 	ldw	r2,4(r4)
  80b970:	80800215 	stw	r2,8(r16)
  80b974:	003fce06 	br	80b8b0 <dequeueValue+0x64>

0080b978 <addPacketsLengthToQueue>:
	(*this)->obj = NULL;
	free(*this);
	*this = NULL;
}

void addPacketsLengthToQueue(int packet_size) {
  80b978:	defffc04 	addi	sp,sp,-16
  80b97c:	dc800215 	stw	r18,8(sp)
  80b980:	2025883a 	mov	r18,r4
	int* num_packets = (int*)malloc(sizeof(int));
  80b984:	01000104 	movi	r4,4
	(*this)->obj = NULL;
	free(*this);
	*this = NULL;
}

void addPacketsLengthToQueue(int packet_size) {
  80b988:	dc400115 	stw	r17,4(sp)
  80b98c:	dfc00315 	stw	ra,12(sp)
  80b990:	dc000015 	stw	r16,0(sp)
	int* num_packets = (int*)malloc(sizeof(int));
  80b994:	08216fc0 	call	8216fc <malloc>
  80b998:	1023883a 	mov	r17,r2
	if(num_packets == NULL) {
		printf("NO MEMORY\n");
  80b99c:	010020f4 	movhi	r4,131
  80b9a0:	210e7c04 	addi	r4,r4,14832
	*this = NULL;
}

void addPacketsLengthToQueue(int packet_size) {
	int* num_packets = (int*)malloc(sizeof(int));
	if(num_packets == NULL) {
  80b9a4:	10003126 	beq	r2,zero,80ba6c <addPacketsLengthToQueue+0xf4>
		printf("NO MEMORY\n");
	}
	*num_packets = packet_size;
	enqueue(com.pendingPacketSize, (void*)num_packets);
  80b9a8:	00802174 	movhi	r2,133
  80b9ac:	10b37e04 	addi	r2,r2,-12808
  80b9b0:	14000f17 	ldw	r16,60(r2)
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
  80b9b4:	010020f4 	movhi	r4,131
  80b9b8:	210e6904 	addi	r4,r4,14756
void addPacketsLengthToQueue(int packet_size) {
	int* num_packets = (int*)malloc(sizeof(int));
	if(num_packets == NULL) {
		printf("NO MEMORY\n");
	}
	*num_packets = packet_size;
  80b9bc:	8c800015 	stw	r18,0(r17)
	}
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
  80b9c0:	80002426 	beq	r16,zero,80ba54 <addPacketsLengthToQueue+0xdc>
  80b9c4:	84800217 	ldw	r18,8(r16)
  80b9c8:	90800217 	ldw	r2,8(r18)
  80b9cc:	88802126 	beq	r17,r2,80ba54 <addPacketsLengthToQueue+0xdc>
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
	if(this->size == 0) {
  80b9d0:	80c00017 	ldw	r3,0(r16)
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
  80b9d4:	00800044 	movi	r2,1
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  80b9d8:	01000304 	movi	r4,12
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
		return;
	}
	queue_lock = 1;
  80b9dc:	d0a75e15 	stw	r2,-25224(gp)
	if(this->size == 0) {
  80b9e0:	1800111e 	bne	r3,zero,80ba28 <addPacketsLengthToQueue+0xb0>
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
  80b9e4:	08216fc0 	call	8216fc <malloc>
  80b9e8:	80800115 	stw	r2,4(r16)
		this->head->next = NULL;
  80b9ec:	10000015 	stw	zero,0(r2)
		this->head->prev = NULL;
  80b9f0:	10000115 	stw	zero,4(r2)
		this->head->obj = obj;
		this->tail = this->head;
  80b9f4:	80c00117 	ldw	r3,4(r16)
	queue_lock = 1;
	if(this->size == 0) {
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
  80b9f8:	14400215 	stw	r17,8(r2)
		this->tail = this->head;
  80b9fc:	80c00215 	stw	r3,8(r16)
		this->tail->next->prev = this->tail;
		this->tail = this->tail->next;
		this->tail->obj = obj;
		this->tail->next = NULL;
	}
	this->size++;
  80ba00:	80800017 	ldw	r2,0(r16)
  80ba04:	10800044 	addi	r2,r2,1
  80ba08:	80800015 	stw	r2,0(r16)
	queue_lock = 0;
  80ba0c:	d0275e15 	stw	zero,-25224(gp)
		printf("NO MEMORY\n");
	}
	*num_packets = packet_size;
	enqueue(com.pendingPacketSize, (void*)num_packets);
	num_packets = NULL;
}
  80ba10:	dfc00317 	ldw	ra,12(sp)
  80ba14:	dc800217 	ldw	r18,8(sp)
  80ba18:	dc400117 	ldw	r17,4(sp)
  80ba1c:	dc000017 	ldw	r16,0(sp)
  80ba20:	dec00404 	addi	sp,sp,16
  80ba24:	f800283a 	ret
		this->head->next = NULL;
		this->head->prev = NULL;
		this->head->obj = obj;
		this->tail = this->head;
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  80ba28:	08216fc0 	call	8216fc <malloc>
  80ba2c:	90800015 	stw	r2,0(r18)
		this->tail->next->prev = this->tail;
  80ba30:	81000217 	ldw	r4,8(r16)
  80ba34:	20800017 	ldw	r2,0(r4)
  80ba38:	11000115 	stw	r4,4(r2)
		this->tail = this->tail->next;
  80ba3c:	80c00217 	ldw	r3,8(r16)
  80ba40:	18800017 	ldw	r2,0(r3)
  80ba44:	80800215 	stw	r2,8(r16)
		this->tail->obj = obj;
  80ba48:	14400215 	stw	r17,8(r2)
		this->tail->next = NULL;
  80ba4c:	10000015 	stw	zero,0(r2)
  80ba50:	003feb06 	br	80ba00 <addPacketsLengthToQueue+0x88>
		printf("NO MEMORY\n");
	}
	*num_packets = packet_size;
	enqueue(com.pendingPacketSize, (void*)num_packets);
	num_packets = NULL;
}
  80ba54:	dfc00317 	ldw	ra,12(sp)
  80ba58:	dc800217 	ldw	r18,8(sp)
  80ba5c:	dc400117 	ldw	r17,4(sp)
  80ba60:	dc000017 	ldw	r16,0(sp)
  80ba64:	dec00404 	addi	sp,sp,16
	temp = NULL;
	return -1;
}
void enqueue(struct Queue* this, void* obj) {
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
		printf("ENQUEUE fail\n");
  80ba68:	08221801 	jmpi	822180 <puts>
}

void addPacketsLengthToQueue(int packet_size) {
	int* num_packets = (int*)malloc(sizeof(int));
	if(num_packets == NULL) {
		printf("NO MEMORY\n");
  80ba6c:	08221800 	call	822180 <puts>
  80ba70:	003fcd06 	br	80b9a8 <addPacketsLengthToQueue+0x30>

0080ba74 <switchAck>:
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  80ba74:	00c02174 	movhi	r3,133
  80ba78:	18f37e04 	addi	r3,r3,-12808
  80ba7c:	18801517 	ldw	r2,84(r3)
  80ba80:	1005003a 	cmpeq	r2,r2,zero
  80ba84:	18801515 	stw	r2,84(r3)
}
  80ba88:	f800283a 	ret

0080ba8c <setStates>:
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80ba8c:	00c02174 	movhi	r3,133
  80ba90:	18f37e04 	addi	r3,r3,-12808
  80ba94:	19801217 	ldw	r6,72(r3)
  80ba98:	19401317 	ldw	r5,76(r3)
  80ba9c:	30800017 	ldw	r2,0(r6)
  80baa0:	28800015 	stw	r2,0(r5)
	*(com.stateMachine) = s;
  80baa4:	31000015 	stw	r4,0(r6)
	//printf("past state: %d\n", *(com.pastState));
	//printf("current state: %d\n", *(com.stateMachine));
}
  80baa8:	f800283a 	ret

0080baac <sendRS232>:
	printf("WARNNING!! the connection has been reseted.\n");
}
/*
 * Send sequence of bytes to serial port
 */
void sendRS232(alt_up_rs232_dev *serial_dev, unsigned char* bytes, int size) {
  80baac:	defffb04 	addi	sp,sp,-20
  80bab0:	dcc00315 	stw	r19,12(sp)
  80bab4:	dc800215 	stw	r18,8(sp)
  80bab8:	dc400115 	stw	r17,4(sp)
  80babc:	dfc00415 	stw	ra,16(sp)
  80bac0:	dc000015 	stw	r16,0(sp)
  80bac4:	3027883a 	mov	r19,r6
  80bac8:	2025883a 	mov	r18,r4
  80bacc:	2823883a 	mov	r17,r5
	int i;
	for(i = 0; i < size; i++) {
  80bad0:	0180070e 	bge	zero,r6,80baf0 <sendRS232+0x44>
  80bad4:	0021883a 	mov	r16,zero
		alt_up_rs232_write_data(serial_dev, bytes[i]);
  80bad8:	8c05883a 	add	r2,r17,r16
  80badc:	11400003 	ldbu	r5,0(r2)
/*
 * Send sequence of bytes to serial port
 */
void sendRS232(alt_up_rs232_dev *serial_dev, unsigned char* bytes, int size) {
	int i;
	for(i = 0; i < size; i++) {
  80bae0:	84000044 	addi	r16,r16,1
		alt_up_rs232_write_data(serial_dev, bytes[i]);
  80bae4:	9009883a 	mov	r4,r18
  80bae8:	082c7e80 	call	82c7e8 <alt_up_rs232_write_data>
/*
 * Send sequence of bytes to serial port
 */
void sendRS232(alt_up_rs232_dev *serial_dev, unsigned char* bytes, int size) {
	int i;
	for(i = 0; i < size; i++) {
  80baec:	9c3ffa1e 	bne	r19,r16,80bad8 <sendRS232+0x2c>
		alt_up_rs232_write_data(serial_dev, bytes[i]);
	}
}
  80baf0:	dfc00417 	ldw	ra,16(sp)
  80baf4:	dcc00317 	ldw	r19,12(sp)
  80baf8:	dc800217 	ldw	r18,8(sp)
  80bafc:	dc400117 	ldw	r17,4(sp)
  80bb00:	dc000017 	ldw	r16,0(sp)
  80bb04:	dec00504 	addi	sp,sp,20
  80bb08:	f800283a 	ret

0080bb0c <updateAcknowledge>:
		switchAck();
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
  80bb0c:	defffd04 	addi	sp,sp,-12
  80bb10:	dc400115 	stw	r17,4(sp)
	if(com.host_ack == 0)
  80bb14:	04402174 	movhi	r17,133
  80bb18:	8c737e04 	addi	r17,r17,-12808
  80bb1c:	88801517 	ldw	r2,84(r17)
		switchAck();
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
  80bb20:	dc000015 	stw	r16,0(sp)
  80bb24:	dfc00215 	stw	ra,8(sp)
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  80bb28:	01400084 	movi	r5,2
		switchAck();
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
  80bb2c:	2021883a 	mov	r16,r4
	if(com.host_ack == 0)
  80bb30:	10000f1e 	bne	r2,zero,80bb70 <updateAcknowledge+0x64>
		*byte &= 0xFB; //XXXXX0XX
  80bb34:	20800003 	ldbu	r2,0(r4)
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80bb38:	014000c4 	movi	r5,3
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
  80bb3c:	10803ecc 	andi	r2,r2,251
  80bb40:	20800005 	stb	r2,0(r4)
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80bb44:	88801417 	ldw	r2,80(r17)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80bb48:	8009883a 	mov	r4,r16
void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80bb4c:	10000d1e 	bne	r2,zero,80bb84 <updateAcknowledge+0x78>
		*byte &= 0xF7; //XXXX0XXX
  80bb50:	80800003 	ldbu	r2,0(r16)
  80bb54:	10803dcc 	andi	r2,r2,247
  80bb58:	80800005 	stb	r2,0(r16)
	else
		setBit(byte, 3); //XXXX1XXX
}
  80bb5c:	dfc00217 	ldw	ra,8(sp)
  80bb60:	dc400117 	ldw	r17,4(sp)
  80bb64:	dc000017 	ldw	r16,0(sp)
  80bb68:	dec00304 	addi	sp,sp,12
  80bb6c:	f800283a 	ret

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  80bb70:	080aee80 	call	80aee8 <setBit>
	if(com.client_ack == 0)
  80bb74:	88801417 	ldw	r2,80(r17)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80bb78:	8009883a 	mov	r4,r16
  80bb7c:	014000c4 	movi	r5,3
void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80bb80:	103ff326 	beq	r2,zero,80bb50 <updateAcknowledge+0x44>
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
}
  80bb84:	dfc00217 	ldw	ra,8(sp)
  80bb88:	dc400117 	ldw	r17,4(sp)
  80bb8c:	dc000017 	ldw	r16,0(sp)
  80bb90:	dec00304 	addi	sp,sp,12
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80bb94:	080aee81 	jmpi	80aee8 <setBit>

0080bb98 <send>:
/*
 * Send data to the other end
 * @parm data data to send; must be void*
 * @parm type type of data to send
 */
int send(void* data, enum msgType type) {
  80bb98:	defffe04 	addi	sp,sp,-8
  80bb9c:	dfc00115 	stw	ra,4(sp)
  80bba0:	dc000015 	stw	r16,0(sp)
	if(data == NULL) return -1;
	switch(type) {
  80bba4:	00800044 	movi	r2,1
 * Send data to the other end
 * @parm data data to send; must be void*
 * @parm type type of data to send
 */
int send(void* data, enum msgType type) {
	if(data == NULL) return -1;
  80bba8:	2000061e 	bne	r4,zero,80bbc4 <send+0x2c>
		break;
	default:
		return -1;
	}
	com.isRdySend = 1;
	return 0;
  80bbac:	00ffffc4 	movi	r3,-1
}
  80bbb0:	1805883a 	mov	r2,r3
  80bbb4:	dfc00117 	ldw	ra,4(sp)
  80bbb8:	dc000017 	ldw	r16,0(sp)
  80bbbc:	dec00204 	addi	sp,sp,8
  80bbc0:	f800283a 	ret
	switch(type) {
	case STRING:
		encodeString((char*)data, com.sendPackets);
		break;
	case CMD:
		encodeCmd((struct Command*)data, com.sendPackets);
  80bbc4:	04002174 	movhi	r16,133
  80bbc8:	84337e04 	addi	r16,r16,-12808
 * @parm data data to send; must be void*
 * @parm type type of data to send
 */
int send(void* data, enum msgType type) {
	if(data == NULL) return -1;
	switch(type) {
  80bbcc:	28800e26 	beq	r5,r2,80bc08 <send+0x70>
  80bbd0:	28800a36 	bltu	r5,r2,80bbfc <send+0x64>
  80bbd4:	008000c4 	movi	r2,3
  80bbd8:	117ff436 	bltu	r2,r5,80bbac <send+0x14>
	case AUDIO:
		break;
	default:
		return -1;
	}
	com.isRdySend = 1;
  80bbdc:	0007883a 	mov	r3,zero
  80bbe0:	00800044 	movi	r2,1
  80bbe4:	80801615 	stw	r2,88(r16)
	return 0;
}
  80bbe8:	1805883a 	mov	r2,r3
  80bbec:	dfc00117 	ldw	ra,4(sp)
  80bbf0:	dc000017 	ldw	r16,0(sp)
  80bbf4:	dec00204 	addi	sp,sp,8
  80bbf8:	f800283a 	ret
 */
int send(void* data, enum msgType type) {
	if(data == NULL) return -1;
	switch(type) {
	case STRING:
		encodeString((char*)data, com.sendPackets);
  80bbfc:	81400d17 	ldw	r5,52(r16)
  80bc00:	080265c0 	call	80265c <encodeString>
  80bc04:	003ff506 	br	80bbdc <send+0x44>
		break;
	case CMD:
		encodeCmd((struct Command*)data, com.sendPackets);
  80bc08:	81400d17 	ldw	r5,52(r16)
  80bc0c:	08023fc0 	call	8023fc <encodeCmd>
  80bc10:	003ff206 	br	80bbdc <send+0x44>

0080bc14 <initRS232>:
struct alt_up_dev up_dev;

/*
 * Initialization of Serail communication
 */
struct RS232 initRS232(struct CmdScheduler* sched) {
  80bc14:	defff704 	addi	sp,sp,-36
  80bc18:	dfc00815 	stw	ra,32(sp)
  80bc1c:	ddc00715 	stw	r23,28(sp)
  80bc20:	dd800615 	stw	r22,24(sp)
  80bc24:	dd400515 	stw	r21,20(sp)
  80bc28:	282d883a 	mov	r22,r5
  80bc2c:	dd000415 	stw	r20,16(sp)
  80bc30:	dcc00315 	stw	r19,12(sp)
  80bc34:	dc800215 	stw	r18,8(sp)
  80bc38:	dc400115 	stw	r17,4(sp)
  80bc3c:	dc000015 	stw	r16,0(sp)
  80bc40:	2023883a 	mov	r17,r4
	struct RS232 com_local;
	com_local.receivePackets = initQueue();
  80bc44:	080b66c0 	call	80b66c <initQueue>
  80bc48:	102f883a 	mov	r23,r2
	com_local.sendPackets = initQueue();
  80bc4c:	080b66c0 	call	80b66c <initQueue>
  80bc50:	102b883a 	mov	r21,r2
	com_local.pendingPacketSize = initQueue();
  80bc54:	080b66c0 	call	80b66c <initQueue>
	com_local.client_ack = 0;
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
  80bc58:	01000104 	movi	r4,4
 */
struct RS232 initRS232(struct CmdScheduler* sched) {
	struct RS232 com_local;
	com_local.receivePackets = initQueue();
	com_local.sendPackets = initQueue();
	com_local.pendingPacketSize = initQueue();
  80bc5c:	1029883a 	mov	r20,r2
	com_local.client_ack = 0;
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
  80bc60:	08216fc0 	call	8216fc <malloc>
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
  80bc64:	01000104 	movi	r4,4
	com_local.pendingPacketSize = initQueue();
	com_local.client_ack = 0;
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
  80bc68:	1027883a 	mov	r19,r2
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
  80bc6c:	08216fc0 	call	8216fc <malloc>
  80bc70:	1025883a 	mov	r18,r2
	com_local.num_packets = com_local.index_packets = 0;
	com_local.num_send_packets = com_local.index_send_packets = 0;
	com_local.packetBuf = NULL;
	com_local.scheduler = sched;

	printf("UART Initialization\n");
  80bc74:	010020f4 	movhi	r4,131
  80bc78:	210e7f04 	addi	r4,r4,14844
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
	*com_local.stateMachine = startInit;
  80bc7c:	00800244 	movi	r2,9
	*com_local.pastState = startInit;
  80bc80:	90800015 	stw	r2,0(r18)
	com_local.host_ack = 0;
	com_local.isRdySend = 0;
	com_local.failReceive = 0;
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
	*com_local.stateMachine = startInit;
  80bc84:	98800015 	stw	r2,0(r19)
	com_local.num_packets = com_local.index_packets = 0;
	com_local.num_send_packets = com_local.index_send_packets = 0;
	com_local.packetBuf = NULL;
	com_local.scheduler = sched;

	printf("UART Initialization\n");
  80bc88:	08221800 	call	822180 <puts>
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
  80bc8c:	010020f4 	movhi	r4,131
  80bc90:	210e8404 	addi	r4,r4,14864
  80bc94:	082c7a40 	call	82c7a4 <alt_up_rs232_open_dev>
  80bc98:	1021883a 	mov	r16,r2
	up_dev.RS232_dev = uart;
  80bc9c:	00802174 	movhi	r2,133
  80bca0:	10b3a104 	addi	r2,r2,-12668

	printf("Clearing read buffer to start\n");
  80bca4:	010020f4 	movhi	r4,131
  80bca8:	210e8804 	addi	r4,r4,14880
	com_local.packetBuf = NULL;
	com_local.scheduler = sched;

	printf("UART Initialization\n");
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
	up_dev.RS232_dev = uart;
  80bcac:	14000015 	stw	r16,0(r2)

	printf("Clearing read buffer to start\n");
  80bcb0:	08221800 	call	822180 <puts>
  80bcb4:	00000106 	br	80bcbc <initRS232+0xa8>
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
  80bcb8:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
	printf("UART Initialization\n");
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
	up_dev.RS232_dev = uart;

	printf("Clearing read buffer to start\n");
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
  80bcbc:	8009883a 	mov	r4,r16
  80bcc0:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
  80bcc4:	01402174 	movhi	r5,133
  80bcc8:	29737e04 	addi	r5,r5,-12808
  80bccc:	8009883a 	mov	r4,r16
  80bcd0:	29800c84 	addi	r6,r5,50
	printf("UART Initialization\n");
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
	up_dev.RS232_dev = uart;

	printf("Clearing read buffer to start\n");
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
  80bcd4:	103ff81e 	bne	r2,zero,80bcb8 <initRS232+0xa4>
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
	}
	alt_alarm_start(&alarm, alt_ticks_per_second(), RS232_ISR, (void*)&up_dev);
  80bcd8:	00802134 	movhi	r2,132
  80bcdc:	108a4904 	addi	r2,r2,10532
  80bce0:	11400017 	ldw	r5,0(r2)
  80bce4:	01802074 	movhi	r6,129
  80bce8:	31a8a304 	addi	r6,r6,-23924
  80bcec:	01c02174 	movhi	r7,133
  80bcf0:	39f3a104 	addi	r7,r7,-12668
  80bcf4:	01002174 	movhi	r4,133
  80bcf8:	2133a504 	addi	r4,r4,-12652
  80bcfc:	082aab40 	call	82aab4 <alt_alarm_start>

	printf("UART Initialization finished\n");
  80bd00:	010020f4 	movhi	r4,131
  80bd04:	210e9004 	addi	r4,r4,14912
  80bd08:	08221800 	call	822180 <puts>
	return com_local;
}
  80bd0c:	8805883a 	mov	r2,r17
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
	}
	alt_alarm_start(&alarm, alt_ticks_per_second(), RS232_ISR, (void*)&up_dev);

	printf("UART Initialization finished\n");
	return com_local;
  80bd10:	8d801115 	stw	r22,68(r17)
  80bd14:	8c801315 	stw	r18,76(r17)
  80bd18:	8cc01215 	stw	r19,72(r17)
  80bd1c:	8d000f15 	stw	r20,60(r17)
  80bd20:	8d400d15 	stw	r21,52(r17)
  80bd24:	8dc00e15 	stw	r23,56(r17)
  80bd28:	88001015 	stw	zero,64(r17)
  80bd2c:	88001a15 	stw	zero,104(r17)
  80bd30:	88001b15 	stw	zero,108(r17)
  80bd34:	88001815 	stw	zero,96(r17)
  80bd38:	88001915 	stw	zero,100(r17)
  80bd3c:	88001715 	stw	zero,92(r17)
  80bd40:	88001615 	stw	zero,88(r17)
  80bd44:	88001515 	stw	zero,84(r17)
  80bd48:	88001415 	stw	zero,80(r17)
}
  80bd4c:	dfc00817 	ldw	ra,32(sp)
  80bd50:	ddc00717 	ldw	r23,28(sp)
  80bd54:	dd800617 	ldw	r22,24(sp)
  80bd58:	dd400517 	ldw	r21,20(sp)
  80bd5c:	dd000417 	ldw	r20,16(sp)
  80bd60:	dcc00317 	ldw	r19,12(sp)
  80bd64:	dc800217 	ldw	r18,8(sp)
  80bd68:	dc400117 	ldw	r17,4(sp)
  80bd6c:	dc000017 	ldw	r16,0(sp)
  80bd70:	dec00904 	addi	sp,sp,36
  80bd74:	f800283a 	ret

0080bd78 <reset>:
	//printf("current state: %d\n", *(com.stateMachine));
}
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
  80bd78:	defffc04 	addi	sp,sp,-16
  80bd7c:	dc400215 	stw	r17,8(sp)
  80bd80:	dc000115 	stw	r16,4(sp)
  80bd84:	2023883a 	mov	r17,r4
	printf("Starting reseting connection\n");
	com.client_ack = com.host_ack = 0;
  80bd88:	04002174 	movhi	r16,133
  80bd8c:	84337e04 	addi	r16,r16,-12808
}
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
	printf("Starting reseting connection\n");
  80bd90:	010020f4 	movhi	r4,131
  80bd94:	210e9804 	addi	r4,r4,14944
	//printf("current state: %d\n", *(com.stateMachine));
}
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
  80bd98:	dfc00315 	stw	ra,12(sp)
	printf("Starting reseting connection\n");
  80bd9c:	08221800 	call	822180 <puts>
	com.num_packets = com.num_send_packets = 0;
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
  80bda0:	81000d17 	ldw	r4,52(r16)
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
	printf("Starting reseting connection\n");
	com.client_ack = com.host_ack = 0;
  80bda4:	80001515 	stw	zero,84(r16)
  80bda8:	80001415 	stw	zero,80(r16)
	com.failReceive = com.isRdySend = 0;
  80bdac:	80001615 	stw	zero,88(r16)
  80bdb0:	80001715 	stw	zero,92(r16)
	com.num_packets = com.num_send_packets = 0;
  80bdb4:	80001a15 	stw	zero,104(r16)
  80bdb8:	80001815 	stw	zero,96(r16)
	com.index_packets = com.index_send_packets = 0;
  80bdbc:	80001b15 	stw	zero,108(r16)
  80bdc0:	80001915 	stw	zero,100(r16)

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
  80bdc4:	20800017 	ldw	r2,0(r4)
	com.client_ack = com.host_ack = 0;
	com.failReceive = com.isRdySend = 0;
	com.num_packets = com.num_send_packets = 0;
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
  80bdc8:	d8000015 	stw	zero,0(sp)
	int* len;
	while(com.sendPackets->size > 0) {
  80bdcc:	00800e0e 	bge	zero,r2,80be08 <reset+0x90>
		p = (struct Packet*)dequeue(com.sendPackets);
  80bdd0:	080b7a00 	call	80b7a0 <dequeue>
		killPacket(&p);
  80bdd4:	d809883a 	mov	r4,sp
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
		p = (struct Packet*)dequeue(com.sendPackets);
  80bdd8:	d8800015 	stw	r2,0(sp)
		killPacket(&p);
  80bddc:	080b0a00 	call	80b0a0 <killPacket>
	com.num_packets = com.num_send_packets = 0;
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
  80bde0:	81000d17 	ldw	r4,52(r16)
  80bde4:	20800017 	ldw	r2,0(r4)
  80bde8:	00bff916 	blt	zero,r2,80bdd0 <reset+0x58>
		p = (struct Packet*)dequeue(com.sendPackets);
		killPacket(&p);
	}

	while(com.receivePackets->size > 0) {
  80bdec:	81000e17 	ldw	r4,56(r16)
  80bdf0:	20800017 	ldw	r2,0(r4)
  80bdf4:	00800d0e 	bge	zero,r2,80be2c <reset+0xb4>
		p = (struct Packet*)dequeue(com.receivePackets);
  80bdf8:	080b7a00 	call	80b7a0 <dequeue>
		killPacket(&p);
  80bdfc:	d809883a 	mov	r4,sp
		p = (struct Packet*)dequeue(com.sendPackets);
		killPacket(&p);
	}

	while(com.receivePackets->size > 0) {
		p = (struct Packet*)dequeue(com.receivePackets);
  80be00:	d8800015 	stw	r2,0(sp)
		killPacket(&p);
  80be04:	080b0a00 	call	80b0a0 <killPacket>
	while(com.sendPackets->size > 0) {
		p = (struct Packet*)dequeue(com.sendPackets);
		killPacket(&p);
	}

	while(com.receivePackets->size > 0) {
  80be08:	81000e17 	ldw	r4,56(r16)
  80be0c:	20800017 	ldw	r2,0(r4)
  80be10:	00bff916 	blt	zero,r2,80bdf8 <reset+0x80>
		p = (struct Packet*)dequeue(com.receivePackets);
		killPacket(&p);
	}

	while(com.pendingPacketSize->size > 0) {
  80be14:	81000f17 	ldw	r4,60(r16)
  80be18:	20800017 	ldw	r2,0(r4)
  80be1c:	0080060e 	bge	zero,r2,80be38 <reset+0xc0>
		len = (int*)dequeue(com.pendingPacketSize);
  80be20:	080b7a00 	call	80b7a0 <dequeue>
		free(len);
  80be24:	1009883a 	mov	r4,r2
  80be28:	08216e80 	call	8216e8 <free>
	while(com.receivePackets->size > 0) {
		p = (struct Packet*)dequeue(com.receivePackets);
		killPacket(&p);
	}

	while(com.pendingPacketSize->size > 0) {
  80be2c:	81000f17 	ldw	r4,60(r16)
  80be30:	20800017 	ldw	r2,0(r4)
  80be34:	00bffa16 	blt	zero,r2,80be20 <reset+0xa8>
		len = (int*)dequeue(com.pendingPacketSize);
		free(len);
		len = NULL;
	}
	if(&com.packetBuf != NULL) {
		free(com.packetBuf);
  80be38:	81001017 	ldw	r4,64(r16)
  80be3c:	08216e80 	call	8216e8 <free>
		com.packetBuf = NULL;
  80be40:	80001015 	stw	zero,64(r16)
	}

	saveListsToSD();
  80be44:	08072880 	call	807288 <saveListsToSD>
	updateSongToSD();
  80be48:	08073fc0 	call	8073fc <updateSongToSD>
	saveAllUpdatesToSDBeforeQuits();
  80be4c:	0806cf80 	call	806cf8 <saveAllUpdatesToSDBeforeQuits>
	update();
  80be50:	080685c0 	call	80685c <update>
  80be54:	00000106 	br	80be5c <reset+0xe4>

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
		alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);}
  80be58:	082c7b00 	call	82c7b0 <alt_up_rs232_read_data>
	saveListsToSD();
	updateSongToSD();
	saveAllUpdatesToSDBeforeQuits();
	update();

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
  80be5c:	8809883a 	mov	r4,r17
  80be60:	082c8340 	call	82c834 <alt_up_rs232_get_used_space_in_read_FIFO>
		alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);}
  80be64:	01402174 	movhi	r5,133
  80be68:	29737e04 	addi	r5,r5,-12808
  80be6c:	8809883a 	mov	r4,r17
  80be70:	29800c84 	addi	r6,r5,50
	saveListsToSD();
	updateSongToSD();
	saveAllUpdatesToSDBeforeQuits();
	update();

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
  80be74:	103ff81e 	bne	r2,zero,80be58 <reset+0xe0>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80be78:	81801217 	ldw	r6,72(r16)
  80be7c:	81401317 	ldw	r5,76(r16)
	*(com.stateMachine) = s;
  80be80:	00800244 	movi	r2,9
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80be84:	30c00017 	ldw	r3,0(r6)
	update();

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
		alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);}
	setStates(startInit);
	printf("WARNNING!! the connection has been reseted.\n");
  80be88:	010020f4 	movhi	r4,131
  80be8c:	210ea004 	addi	r4,r4,14976
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80be90:	28c00015 	stw	r3,0(r5)
	*(com.stateMachine) = s;
  80be94:	30800015 	stw	r2,0(r6)
	update();

	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0) {
		alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);}
	setStates(startInit);
	printf("WARNNING!! the connection has been reseted.\n");
  80be98:	08221800 	call	822180 <puts>
}
  80be9c:	dfc00317 	ldw	ra,12(sp)
  80bea0:	dc400217 	ldw	r17,8(sp)
  80bea4:	dc000117 	ldw	r16,4(sp)
  80bea8:	dec00404 	addi	sp,sp,16
  80beac:	f800283a 	ret

0080beb0 <failReceive>:
/*
* increment the frequency of failing receive data;
* go back to past state if it has already fail receiving 100 times
*/
void failReceive(enum States pastState) {
	com.failReceive++;
  80beb0:	01402174 	movhi	r5,133
  80beb4:	29737e04 	addi	r5,r5,-12808
  80beb8:	28801717 	ldw	r2,92(r5)
	if(com.failReceive > 100) {
  80bebc:	00c01904 	movi	r3,100

/*
* increment the frequency of failing receive data;
* go back to past state if it has already fail receiving 100 times
*/
void failReceive(enum States pastState) {
  80bec0:	200d883a 	mov	r6,r4
	com.failReceive++;
  80bec4:	10800044 	addi	r2,r2,1
  80bec8:	28801715 	stw	r2,92(r5)
	if(com.failReceive > 100) {
  80becc:	1880060e 	bge	r3,r2,80bee8 <failReceive+0x38>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80bed0:	29001217 	ldw	r4,72(r5)
  80bed4:	28c01317 	ldw	r3,76(r5)
*/
void failReceive(enum States pastState) {
	com.failReceive++;
	if(com.failReceive > 100) {
		setStates(pastState);
		com.failReceive=0;
  80bed8:	28001715 	stw	zero,92(r5)
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80bedc:	20800017 	ldw	r2,0(r4)
  80bee0:	18800015 	stw	r2,0(r3)
	*(com.stateMachine) = s;
  80bee4:	21800015 	stw	r6,0(r4)
  80bee8:	f800283a 	ret

0080beec <checkAck>:
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
}
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
  80beec:	defffc04 	addi	sp,sp,-16
  80bef0:	dc800215 	stw	r18,8(sp)
  80bef4:	dc400115 	stw	r17,4(sp)
  80bef8:	dfc00315 	stw	ra,12(sp)
  80befc:	dc000015 	stw	r16,0(sp)
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  80bf00:	24000003 	ldbu	r16,0(r4)
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
}
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
  80bf04:	2023883a 	mov	r17,r4
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  80bf08:	01400084 	movi	r5,2
  80bf0c:	8009883a 	mov	r4,r16
  80bf10:	080aed80 	call	80aed8 <getBit>
  80bf14:	1007883a 	mov	r3,r2
  80bf18:	84003c0c 	andi	r16,r16,240
  80bf1c:	00803c04 	movi	r2,240
  80bf20:	04802174 	movhi	r18,133
  80bf24:	94b37e04 	addi	r18,r18,-12808
  80bf28:	80800d26 	beq	r16,r2,80bf60 <checkAck+0x74>
  80bf2c:	04802174 	movhi	r18,133
  80bf30:	94b37e04 	addi	r18,r18,-12808
		com.client_ack = getBit(bytes[0], 3);
		switchAck(); //very important to switch ack for next ack
		com.failReceive = 0;
		return 1;
	} com.failReceive++;
  80bf34:	90801717 	ldw	r2,92(r18)
  80bf38:	0007883a 	mov	r3,zero
  80bf3c:	10800044 	addi	r2,r2,1
  80bf40:	90801715 	stw	r2,92(r18)
	return 0;
}
  80bf44:	1805883a 	mov	r2,r3
  80bf48:	dfc00317 	ldw	ra,12(sp)
  80bf4c:	dc800217 	ldw	r18,8(sp)
  80bf50:	dc400117 	ldw	r17,4(sp)
  80bf54:	dc000017 	ldw	r16,0(sp)
  80bf58:	dec00404 	addi	sp,sp,16
  80bf5c:	f800283a 	ret
}
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  80bf60:	90801517 	ldw	r2,84(r18)
		com.client_ack = getBit(bytes[0], 3);
  80bf64:	014000c4 	movi	r5,3
}
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  80bf68:	18bff21e 	bne	r3,r2,80bf34 <checkAck+0x48>
		com.client_ack = getBit(bytes[0], 3);
  80bf6c:	89000003 	ldbu	r4,0(r17)
  80bf70:	080aed80 	call	80aed8 <getBit>
  80bf74:	90801415 	stw	r2,80(r18)
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  80bf78:	90801517 	ldw	r2,84(r18)
 */
int checkAck(unsigned char* bytes) {
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
		com.client_ack = getBit(bytes[0], 3);
		switchAck(); //very important to switch ack for next ack
		com.failReceive = 0;
  80bf7c:	00c00044 	movi	r3,1
  80bf80:	90001715 	stw	zero,92(r18)
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  80bf84:	1005003a 	cmpeq	r2,r2,zero
  80bf88:	90801515 	stw	r2,84(r18)
  80bf8c:	003fed06 	br	80bf44 <checkAck+0x58>

0080bf90 <checkStartAck>:
	setStates(waitStart);
	return cert;

}

int checkStartAck(unsigned char byte) {
  80bf90:	defffd04 	addi	sp,sp,-12
  80bf94:	dc000015 	stw	r16,0(sp)
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  80bf98:	24003fcc 	andi	r16,r4,255
  80bf9c:	80c03ccc 	andi	r3,r16,243
  80bfa0:	008028c4 	movi	r2,163
	setStates(waitStart);
	return cert;

}

int checkStartAck(unsigned char byte) {
  80bfa4:	dc400115 	stw	r17,4(sp)
  80bfa8:	dfc00215 	stw	ra,8(sp)
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  80bfac:	04402174 	movhi	r17,133
  80bfb0:	8c737e04 	addi	r17,r17,-12808
  80bfb4:	01400084 	movi	r5,2
  80bfb8:	8009883a 	mov	r4,r16
  80bfbc:	18800726 	beq	r3,r2,80bfdc <checkStartAck+0x4c>
		com.client_ack = getBit(byte, 3);
		switchAck();
		return 1;
  80bfc0:	0009883a 	mov	r4,zero
	} return 0;
}
  80bfc4:	2005883a 	mov	r2,r4
  80bfc8:	dfc00217 	ldw	ra,8(sp)
  80bfcc:	dc400117 	ldw	r17,4(sp)
  80bfd0:	dc000017 	ldw	r16,0(sp)
  80bfd4:	dec00304 	addi	sp,sp,12
  80bfd8:	f800283a 	ret
	return cert;

}

int checkStartAck(unsigned char byte) {
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  80bfdc:	080aed80 	call	80aed8 <getBit>
  80bfe0:	88c01517 	ldw	r3,84(r17)
		com.client_ack = getBit(byte, 3);
  80bfe4:	8009883a 	mov	r4,r16
  80bfe8:	014000c4 	movi	r5,3
	return cert;

}

int checkStartAck(unsigned char byte) {
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  80bfec:	10fff41e 	bne	r2,r3,80bfc0 <checkStartAck+0x30>
		com.client_ack = getBit(byte, 3);
  80bff0:	080aed80 	call	80aed8 <getBit>
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  80bff4:	88c01517 	ldw	r3,84(r17)
  80bff8:	01000044 	movi	r4,1

}

int checkStartAck(unsigned char byte) {
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
		com.client_ack = getBit(byte, 3);
  80bffc:	88801415 	stw	r2,80(r17)
	} else
		setStates(receiveData0);
	return cert;
}
void switchAck() {
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  80c000:	1807003a 	cmpeq	r3,r3,zero
  80c004:	88c01515 	stw	r3,84(r17)
  80c008:	003fee06 	br	80bfc4 <checkStartAck+0x34>

0080c00c <sendAck>:
		setBit(&cert[0], 0); //1111XX01
	}
	return cert;
}

unsigned char* sendAck() {
  80c00c:	defffd04 	addi	sp,sp,-12
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80c010:	010000c4 	movi	r4,3
		setBit(&cert[0], 0); //1111XX01
	}
	return cert;
}

unsigned char* sendAck() {
  80c014:	dc000015 	stw	r16,0(sp)
  80c018:	dfc00215 	stw	ra,8(sp)
  80c01c:	dc400115 	stw	r17,4(sp)
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80c020:	08216fc0 	call	8216fc <malloc>
  80c024:	1021883a 	mov	r16,r2
	if(cert == NULL) {
  80c028:	10003f26 	beq	r2,zero,80c128 <sendAck+0x11c>
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80c02c:	04402174 	movhi	r17,133
  80c030:	8c737e04 	addi	r17,r17,-12808
  80c034:	88801517 	ldw	r2,84(r17)
unsigned char* sendAck() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	if(cert == NULL) {
		printf("NO MEMORY to send ack!!\n");
	}
	cert[0] = 0xF0; //set the format as 1111+(client_ack)(host_ack)(send)(receive)
  80c038:	00fffc04 	movi	r3,-16
  80c03c:	80c00005 	stb	r3,0(r16)
	cert[1] = 0;
  80c040:	80000045 	stb	zero,1(r16)
	cert[2] = 0;
  80c044:	80000085 	stb	zero,2(r16)
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80c048:	1000191e 	bne	r2,zero,80c0b0 <sendAck+0xa4>
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80c04c:	88801417 	ldw	r2,80(r17)
  80c050:	10001c1e 	bne	r2,zero,80c0c4 <sendAck+0xb8>
		*byte &= 0xF7; //XXXX0XXX
  80c054:	80800003 	ldbu	r2,0(r16)
	cert[1] = 0;
	cert[2] = 0;

	updateAcknowledge(&cert[0]);

	setBit(&cert[0], 0); //1111XX01
  80c058:	8009883a 	mov	r4,r16
  80c05c:	000b883a 	mov	r5,zero
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
		*byte &= 0xF7; //XXXX0XXX
  80c060:	10803dcc 	andi	r2,r2,247
  80c064:	80800005 	stb	r2,0(r16)
	cert[1] = 0;
	cert[2] = 0;

	updateAcknowledge(&cert[0]);

	setBit(&cert[0], 0); //1111XX01
  80c068:	080aee80 	call	80aee8 <setBit>

	//char* temp; //need to do something with this later

	if(com.index_packets >= com.num_packets) { //all packets received
  80c06c:	88c01817 	ldw	r3,96(r17)
  80c070:	88801917 	ldw	r2,100(r17)
  80c074:	01802174 	movhi	r6,133
  80c078:	31b37e04 	addi	r6,r6,-12808
  80c07c:	10c01c0e 	bge	r2,r3,80c0f0 <sendAck+0xe4>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c080:	31401217 	ldw	r5,72(r6)
  80c084:	31001317 	ldw	r4,76(r6)
	*(com.stateMachine) = s;
  80c088:	00c00204 	movi	r3,8
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c08c:	28800017 	ldw	r2,0(r5)
  80c090:	20800015 	stw	r2,0(r4)
		//call decode & command here later
		decode(com.receivePackets);
	} else
		setStates(receiveData0);
	return cert;
}
  80c094:	8005883a 	mov	r2,r16
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
	*(com.stateMachine) = s;
  80c098:	28c00015 	stw	r3,0(r5)
		//call decode & command here later
		decode(com.receivePackets);
	} else
		setStates(receiveData0);
	return cert;
}
  80c09c:	dfc00217 	ldw	ra,8(sp)
  80c0a0:	dc400117 	ldw	r17,4(sp)
  80c0a4:	dc000017 	ldw	r16,0(sp)
  80c0a8:	dec00304 	addi	sp,sp,12
  80c0ac:	f800283a 	ret

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  80c0b0:	8009883a 	mov	r4,r16
  80c0b4:	01400084 	movi	r5,2
  80c0b8:	080aee80 	call	80aee8 <setBit>
	if(com.client_ack == 0)
  80c0bc:	88801417 	ldw	r2,80(r17)
  80c0c0:	103fe426 	beq	r2,zero,80c054 <sendAck+0x48>
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80c0c4:	8009883a 	mov	r4,r16
  80c0c8:	014000c4 	movi	r5,3
  80c0cc:	080aee80 	call	80aee8 <setBit>
	cert[1] = 0;
	cert[2] = 0;

	updateAcknowledge(&cert[0]);

	setBit(&cert[0], 0); //1111XX01
  80c0d0:	8009883a 	mov	r4,r16
  80c0d4:	000b883a 	mov	r5,zero
  80c0d8:	080aee80 	call	80aee8 <setBit>

	//char* temp; //need to do something with this later

	if(com.index_packets >= com.num_packets) { //all packets received
  80c0dc:	88c01817 	ldw	r3,96(r17)
  80c0e0:	88801917 	ldw	r2,100(r17)
  80c0e4:	01802174 	movhi	r6,133
  80c0e8:	31b37e04 	addi	r6,r6,-12808
  80c0ec:	10ffe416 	blt	r2,r3,80c080 <sendAck+0x74>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c0f0:	30801217 	ldw	r2,72(r6)
  80c0f4:	31401317 	ldw	r5,76(r6)
	if(com.index_packets >= com.num_packets) { //all packets received
		setStates(checkClient);
		com.index_packets = 0;

		//call decode & command here later
		decode(com.receivePackets);
  80c0f8:	31000e17 	ldw	r4,56(r6)
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c0fc:	10c00017 	ldw	r3,0(r2)

	//char* temp; //need to do something with this later

	if(com.index_packets >= com.num_packets) { //all packets received
		setStates(checkClient);
		com.index_packets = 0;
  80c100:	30001915 	stw	zero,100(r6)
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c104:	28c00015 	stw	r3,0(r5)
	*(com.stateMachine) = s;
  80c108:	10000015 	stw	zero,0(r2)
	if(com.index_packets >= com.num_packets) { //all packets received
		setStates(checkClient);
		com.index_packets = 0;

		//call decode & command here later
		decode(com.receivePackets);
  80c10c:	080280c0 	call	80280c <decode>
	} else
		setStates(receiveData0);
	return cert;
}
  80c110:	8005883a 	mov	r2,r16
  80c114:	dfc00217 	ldw	ra,8(sp)
  80c118:	dc400117 	ldw	r17,4(sp)
  80c11c:	dc000017 	ldw	r16,0(sp)
  80c120:	dec00304 	addi	sp,sp,12
  80c124:	f800283a 	ret
}

unsigned char* sendAck() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	if(cert == NULL) {
		printf("NO MEMORY to send ack!!\n");
  80c128:	010020f4 	movhi	r4,131
  80c12c:	210eab04 	addi	r4,r4,15020
  80c130:	08221800 	call	822180 <puts>
  80c134:	003fbd06 	br	80c02c <sendAck+0x20>

0080c138 <sendStats>:
/*
 * send 3 bytes acknowledge to client at sendStats stage;
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
  80c138:	defffb04 	addi	sp,sp,-20
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80c13c:	010000c4 	movi	r4,3
/*
 * send 3 bytes acknowledge to client at sendStats stage;
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
  80c140:	dcc00315 	stw	r19,12(sp)
  80c144:	dc800215 	stw	r18,8(sp)
  80c148:	dc400115 	stw	r17,4(sp)
  80c14c:	dc000015 	stw	r16,0(sp)
  80c150:	dfc00415 	stw	ra,16(sp)
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80c154:	04402174 	movhi	r17,133
  80c158:	8c737e04 	addi	r17,r17,-12808
 * send 3 bytes acknowledge to client at sendStats stage;
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80c15c:	08216fc0 	call	8216fc <malloc>
  80c160:	1021883a 	mov	r16,r2
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80c164:	88801517 	ldw	r2,84(r17)
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	cert[0] = 0xF0; //set the format as 1111+(client_ack)(host_ack)(send)(receive)
  80c168:	00fffc04 	movi	r3,-16
  80c16c:	80c00005 	stb	r3,0(r16)
	cert[1] = 0;
  80c170:	80000045 	stb	zero,1(r16)
	cert[2] = 0;
  80c174:	80000085 	stb	zero,2(r16)
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	cert[0] = 0xF0; //set the format as 1111+(client_ack)(host_ack)(send)(receive)
	cert[1] = 0;
  80c178:	84c00044 	addi	r19,r16,1
	cert[2] = 0;
  80c17c:	84800084 	addi	r18,r16,2
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80c180:	1000291e 	bne	r2,zero,80c228 <sendStats+0xf0>
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80c184:	88801417 	ldw	r2,80(r17)
  80c188:	10002c1e 	bne	r2,zero,80c23c <sendStats+0x104>
		*byte &= 0xF7; //XXXX0XXX
  80c18c:	80800003 	ldbu	r2,0(r16)
  80c190:	10803dcc 	andi	r2,r2,247
  80c194:	80800005 	stb	r2,0(r16)
	cert[2] = 0;
	int* num_s_packets;

	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
  80c198:	88801617 	ldw	r2,88(r17)
  80c19c:	01400044 	movi	r5,1
  80c1a0:	04402174 	movhi	r17,133
  80c1a4:	8c737e04 	addi	r17,r17,-12808
  80c1a8:	11400326 	beq	r2,r5,80c1b8 <sendStats+0x80>
  80c1ac:	88800f17 	ldw	r2,60(r17)
  80c1b0:	10c00017 	ldw	r3,0(r2)
  80c1b4:	00c0270e 	bge	zero,r3,80c254 <sendStats+0x11c>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c1b8:	89c01217 	ldw	r7,72(r17)
  80c1bc:	89801317 	ldw	r6,76(r17)
	*(com.stateMachine) = s;
  80c1c0:	00800084 	movi	r2,2
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c1c4:	38c00017 	ldw	r3,0(r7)

	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
  80c1c8:	8009883a 	mov	r4,r16
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c1cc:	30c00015 	stw	r3,0(r6)
	*(com.stateMachine) = s;
  80c1d0:	38800015 	stw	r2,0(r7)

	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
  80c1d4:	080aee80 	call	80aee8 <setBit>
		com.index_send_packets = 0;
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
  80c1d8:	89000f17 	ldw	r4,60(r17)
	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
		com.index_send_packets = 0;
  80c1dc:	88001b15 	stw	zero,108(r17)
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
  80c1e0:	080b7a00 	call	80b7a0 <dequeue>
		com.num_send_packets = *num_s_packets;
  80c1e4:	10c00017 	ldw	r3,0(r2)

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
		com.index_send_packets = 0;
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
  80c1e8:	1009883a 	mov	r4,r2
		com.num_send_packets = *num_s_packets;
  80c1ec:	88c01a15 	stw	r3,104(r17)
		cert[1] = (unsigned char)(com.num_send_packets/256);
  80c1f0:	1805883a 	mov	r2,r3
  80c1f4:	18001516 	blt	r3,zero,80c24c <sendStats+0x114>
  80c1f8:	1005d23a 	srai	r2,r2,8
  80c1fc:	98800005 	stb	r2,0(r19)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
  80c200:	90c00005 	stb	r3,0(r18)
		free(num_s_packets);
  80c204:	08216e80 	call	8216e8 <free>
	} else {
		setStates(checkClient);
		setBit(&cert[0], 0); //1111XX01
	}
	return cert;
}
  80c208:	8005883a 	mov	r2,r16
  80c20c:	dfc00417 	ldw	ra,16(sp)
  80c210:	dcc00317 	ldw	r19,12(sp)
  80c214:	dc800217 	ldw	r18,8(sp)
  80c218:	dc400117 	ldw	r17,4(sp)
  80c21c:	dc000017 	ldw	r16,0(sp)
  80c220:	dec00504 	addi	sp,sp,20
  80c224:	f800283a 	ret

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  80c228:	8009883a 	mov	r4,r16
  80c22c:	01400084 	movi	r5,2
  80c230:	080aee80 	call	80aee8 <setBit>
	if(com.client_ack == 0)
  80c234:	88801417 	ldw	r2,80(r17)
  80c238:	103fd426 	beq	r2,zero,80c18c <sendStats+0x54>
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80c23c:	8009883a 	mov	r4,r16
  80c240:	014000c4 	movi	r5,3
  80c244:	080aee80 	call	80aee8 <setBit>
  80c248:	003fd306 	br	80c198 <sendStats+0x60>
		setStates(waitClient);
		setBit(&cert[0], 1); //1111XX10
		com.index_send_packets = 0;
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
		com.num_send_packets = *num_s_packets;
		cert[1] = (unsigned char)(com.num_send_packets/256);
  80c24c:	18803fc4 	addi	r2,r3,255
  80c250:	003fe906 	br	80c1f8 <sendStats+0xc0>
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c254:	88801217 	ldw	r2,72(r17)
  80c258:	89801317 	ldw	r6,76(r17)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
		free(num_s_packets);
		num_s_packets = NULL;
	} else {
		setStates(checkClient);
		setBit(&cert[0], 0); //1111XX01
  80c25c:	8009883a 	mov	r4,r16
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c260:	10c00017 	ldw	r3,0(r2)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
		free(num_s_packets);
		num_s_packets = NULL;
	} else {
		setStates(checkClient);
		setBit(&cert[0], 0); //1111XX01
  80c264:	000b883a 	mov	r5,zero
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c268:	30c00015 	stw	r3,0(r6)
	*(com.stateMachine) = s;
  80c26c:	10000015 	stw	zero,0(r2)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
		free(num_s_packets);
		num_s_packets = NULL;
	} else {
		setStates(checkClient);
		setBit(&cert[0], 0); //1111XX01
  80c270:	080aee80 	call	80aee8 <setBit>
  80c274:	003fe406 	br	80c208 <sendStats+0xd0>

0080c278 <sendStartInit>:
	}
	com.isRdySend = 1;
	return 0;
}

unsigned char* sendStartInit() {
  80c278:	defffd04 	addi	sp,sp,-12
  80c27c:	dc400115 	stw	r17,4(sp)
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80c280:	010000c4 	movi	r4,3
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80c284:	04402174 	movhi	r17,133
  80c288:	8c737e04 	addi	r17,r17,-12808
	}
	com.isRdySend = 1;
	return 0;
}

unsigned char* sendStartInit() {
  80c28c:	dc000015 	stw	r16,0(sp)
  80c290:	dfc00215 	stw	ra,8(sp)
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80c294:	08216fc0 	call	8216fc <malloc>
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80c298:	88c01517 	ldw	r3,84(r17)
	com.isRdySend = 1;
	return 0;
}

unsigned char* sendStartInit() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  80c29c:	1021883a 	mov	r16,r2
	cert[0] = 0xA3; //set the format as 1010+(client_ack)(host_ack)+11
  80c2a0:	01bfe8c4 	movi	r6,-93
	cert[1] = 0xAA; //10101010
  80c2a4:	00bfea84 	movi	r2,-86

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  80c2a8:	8009883a 	mov	r4,r16
  80c2ac:	01400084 	movi	r5,2

unsigned char* sendStartInit() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	cert[0] = 0xA3; //set the format as 1010+(client_ack)(host_ack)+11
	cert[1] = 0xAA; //10101010
	cert[2] = 0xAA; //10101010
  80c2b0:	80800085 	stb	r2,2(r16)
	return 0;
}

unsigned char* sendStartInit() {
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
	cert[0] = 0xA3; //set the format as 1010+(client_ack)(host_ack)+11
  80c2b4:	81800005 	stb	r6,0(r16)
	cert[1] = 0xAA; //10101010
  80c2b8:	80800045 	stb	r2,1(r16)
		return 1;
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
  80c2bc:	1800141e 	bne	r3,zero,80c310 <sendStartInit+0x98>
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80c2c0:	88801417 	ldw	r2,80(r17)
	} return 0;
}

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
  80c2c4:	81800005 	stb	r6,0(r16)
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80c2c8:	8009883a 	mov	r4,r16
  80c2cc:	014000c4 	movi	r5,3
void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80c2d0:	1000141e 	bne	r2,zero,80c324 <sendStartInit+0xac>
		*byte &= 0xF7; //XXXX0XXX
  80c2d4:	80800003 	ldbu	r2,0(r16)
  80c2d8:	10803dcc 	andi	r2,r2,247
  80c2dc:	80800005 	stb	r2,0(r16)
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c2e0:	89401217 	ldw	r5,72(r17)
  80c2e4:	89001317 	ldw	r4,76(r17)
	*(com.stateMachine) = s;
  80c2e8:	00c00284 	movi	r3,10
		com.failReceive=0;
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
  80c2ec:	28800017 	ldw	r2,0(r5)
  80c2f0:	20800015 	stw	r2,0(r4)

	updateAcknowledge(&cert[0]);
	setStates(waitStart);
	return cert;

}
  80c2f4:	8005883a 	mov	r2,r16
	}
}

void setStates(enum States s) {
	*(com.pastState) = *(com.stateMachine);
	*(com.stateMachine) = s;
  80c2f8:	28c00015 	stw	r3,0(r5)

	updateAcknowledge(&cert[0]);
	setStates(waitStart);
	return cert;

}
  80c2fc:	dfc00217 	ldw	ra,8(sp)
  80c300:	dc400117 	ldw	r17,4(sp)
  80c304:	dc000017 	ldw	r16,0(sp)
  80c308:	dec00304 	addi	sp,sp,12
  80c30c:	f800283a 	ret

void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
  80c310:	080aee80 	call	80aee8 <setBit>
	if(com.client_ack == 0)
  80c314:	88801417 	ldw	r2,80(r17)
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80c318:	8009883a 	mov	r4,r16
  80c31c:	014000c4 	movi	r5,3
void updateAcknowledge(unsigned char* byte) {
	if(com.host_ack == 0)
		*byte &= 0xFB; //XXXXX0XX
	else
		setBit(byte, 2); //XXXXX1XX
	if(com.client_ack == 0)
  80c320:	103fec26 	beq	r2,zero,80c2d4 <sendStartInit+0x5c>
		*byte &= 0xF7; //XXXX0XXX
	else
		setBit(byte, 3); //XXXX1XXX
  80c324:	080aee80 	call	80aee8 <setBit>
  80c328:	003fed06 	br	80c2e0 <sendStartInit+0x68>

0080c32c <actionBtnAnimation>:
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c32c:	21400017 	ldw	r5,0(r4)
	checkImgCollisionForMouse(cursor, mainFrame->elements[5]->buttons[1]);

	actionBtnAnimation(mainFrame);
}

void actionBtnAnimation(void* mf){
  80c330:	defffc04 	addi	sp,sp,-16
  80c334:	dc800215 	stw	r18,8(sp)
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c338:	29800117 	ldw	r6,4(r5)
	checkImgCollisionForMouse(cursor, mainFrame->elements[5]->buttons[1]);

	actionBtnAnimation(mainFrame);
}

void actionBtnAnimation(void* mf){
  80c33c:	2025883a 	mov	r18,r4
  80c340:	dc400115 	stw	r17,4(sp)
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c344:	30800117 	ldw	r2,4(r6)
  80c348:	04400044 	movi	r17,1
	checkImgCollisionForMouse(cursor, mainFrame->elements[5]->buttons[1]);

	actionBtnAnimation(mainFrame);
}

void actionBtnAnimation(void* mf){
  80c34c:	dfc00315 	stw	ra,12(sp)
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c350:	11000017 	ldw	r4,0(r2)
	checkImgCollisionForMouse(cursor, mainFrame->elements[5]->buttons[1]);

	actionBtnAnimation(mainFrame);
}

void actionBtnAnimation(void* mf){
  80c354:	dc000015 	stw	r16,0(sp)
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c358:	20c00a17 	ldw	r3,40(r4)
  80c35c:	1c402b26 	beq	r3,r17,80c40c <actionBtnAnimation+0xe0>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c360:	30c00117 	ldw	r3,4(r6)
  80c364:	04000084 	movi	r16,2
  80c368:	19000017 	ldw	r4,0(r3)
  80c36c:	20800617 	ldw	r2,24(r4)
  80c370:	14002e26 	beq	r2,r16,80c42c <actionBtnAnimation+0x100>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c374:	29800117 	ldw	r6,4(r5)
  80c378:	30800117 	ldw	r2,4(r6)
  80c37c:	11000117 	ldw	r4,4(r2)
  80c380:	20c00a17 	ldw	r3,40(r4)
  80c384:	1c403326 	beq	r3,r17,80c454 <actionBtnAnimation+0x128>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c388:	11000117 	ldw	r4,4(r2)
  80c38c:	20c00617 	ldw	r3,24(r4)
  80c390:	1c003726 	beq	r3,r16,80c470 <actionBtnAnimation+0x144>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c394:	29800117 	ldw	r6,4(r5)
  80c398:	30800117 	ldw	r2,4(r6)
  80c39c:	11000217 	ldw	r4,8(r2)
  80c3a0:	20c00a17 	ldw	r3,40(r4)
  80c3a4:	1c403c26 	beq	r3,r17,80c498 <actionBtnAnimation+0x16c>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c3a8:	11000217 	ldw	r4,8(r2)
  80c3ac:	20c00617 	ldw	r3,24(r4)
  80c3b0:	1c004026 	beq	r3,r16,80c4b4 <actionBtnAnimation+0x188>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c3b4:	29800117 	ldw	r6,4(r5)
  80c3b8:	30800117 	ldw	r2,4(r6)
  80c3bc:	11000317 	ldw	r4,12(r2)
  80c3c0:	20c00a17 	ldw	r3,40(r4)
  80c3c4:	1c404526 	beq	r3,r17,80c4dc <actionBtnAnimation+0x1b0>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c3c8:	11000317 	ldw	r4,12(r2)
  80c3cc:	20c00617 	ldw	r3,24(r4)
  80c3d0:	1c004926 	beq	r3,r16,80c4f8 <actionBtnAnimation+0x1cc>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c3d4:	29400117 	ldw	r5,4(r5)
  80c3d8:	28800117 	ldw	r2,4(r5)
  80c3dc:	10c00417 	ldw	r3,16(r2)
  80c3e0:	19000a17 	ldw	r4,40(r3)
  80c3e4:	24404e26 	beq	r4,r17,80c520 <actionBtnAnimation+0x1f4>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c3e8:	11000417 	ldw	r4,16(r2)
  80c3ec:	20c00617 	ldw	r3,24(r4)
  80c3f0:	1c005226 	beq	r3,r16,80c53c <actionBtnAnimation+0x210>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
			mainFrame->elements[1]->buttons[i]->frame = 0;
			animateButton(mainFrame->elements[1]->buttons[i], 0);
		}
	}
}
  80c3f4:	dfc00317 	ldw	ra,12(sp)
  80c3f8:	dc800217 	ldw	r18,8(sp)
  80c3fc:	dc400117 	ldw	r17,4(sp)
  80c400:	dc000017 	ldw	r16,0(sp)
  80c404:	dec00404 	addi	sp,sp,16
  80c408:	f800283a 	ret
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
			mainFrame->elements[1]->buttons[i]->frame++;
  80c40c:	20800617 	ldw	r2,24(r4)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c410:	30c00117 	ldw	r3,4(r6)
  80c414:	04000084 	movi	r16,2
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
			mainFrame->elements[1]->buttons[i]->frame++;
  80c418:	1445883a 	add	r2,r2,r17
  80c41c:	20800615 	stw	r2,24(r4)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c420:	19000017 	ldw	r4,0(r3)
  80c424:	20800617 	ldw	r2,24(r4)
  80c428:	143fd21e 	bne	r2,r16,80c374 <actionBtnAnimation+0x48>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80c42c:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80c430:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80c434:	000b883a 	mov	r5,zero
  80c438:	08007c40 	call	8007c4 <animateButton>
  80c43c:	91400017 	ldw	r5,0(r18)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c440:	29800117 	ldw	r6,4(r5)
  80c444:	30800117 	ldw	r2,4(r6)
  80c448:	11000117 	ldw	r4,4(r2)
  80c44c:	20c00a17 	ldw	r3,40(r4)
  80c450:	1c7fcd1e 	bne	r3,r17,80c388 <actionBtnAnimation+0x5c>
			mainFrame->elements[1]->buttons[i]->frame++;
  80c454:	20800617 	ldw	r2,24(r4)
  80c458:	10800044 	addi	r2,r2,1
  80c45c:	20800615 	stw	r2,24(r4)
  80c460:	30800117 	ldw	r2,4(r6)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c464:	11000117 	ldw	r4,4(r2)
  80c468:	20c00617 	ldw	r3,24(r4)
  80c46c:	1c3fc91e 	bne	r3,r16,80c394 <actionBtnAnimation+0x68>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80c470:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80c474:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80c478:	000b883a 	mov	r5,zero
  80c47c:	08007c40 	call	8007c4 <animateButton>
  80c480:	91400017 	ldw	r5,0(r18)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c484:	29800117 	ldw	r6,4(r5)
  80c488:	30800117 	ldw	r2,4(r6)
  80c48c:	11000217 	ldw	r4,8(r2)
  80c490:	20c00a17 	ldw	r3,40(r4)
  80c494:	1c7fc41e 	bne	r3,r17,80c3a8 <actionBtnAnimation+0x7c>
			mainFrame->elements[1]->buttons[i]->frame++;
  80c498:	20800617 	ldw	r2,24(r4)
  80c49c:	10800044 	addi	r2,r2,1
  80c4a0:	20800615 	stw	r2,24(r4)
  80c4a4:	30800117 	ldw	r2,4(r6)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c4a8:	11000217 	ldw	r4,8(r2)
  80c4ac:	20c00617 	ldw	r3,24(r4)
  80c4b0:	1c3fc01e 	bne	r3,r16,80c3b4 <actionBtnAnimation+0x88>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80c4b4:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80c4b8:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80c4bc:	000b883a 	mov	r5,zero
  80c4c0:	08007c40 	call	8007c4 <animateButton>
  80c4c4:	91400017 	ldw	r5,0(r18)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c4c8:	29800117 	ldw	r6,4(r5)
  80c4cc:	30800117 	ldw	r2,4(r6)
  80c4d0:	11000317 	ldw	r4,12(r2)
  80c4d4:	20c00a17 	ldw	r3,40(r4)
  80c4d8:	1c7fbb1e 	bne	r3,r17,80c3c8 <actionBtnAnimation+0x9c>
			mainFrame->elements[1]->buttons[i]->frame++;
  80c4dc:	20800617 	ldw	r2,24(r4)
  80c4e0:	10800044 	addi	r2,r2,1
  80c4e4:	20800615 	stw	r2,24(r4)
  80c4e8:	30800117 	ldw	r2,4(r6)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c4ec:	11000317 	ldw	r4,12(r2)
  80c4f0:	20c00617 	ldw	r3,24(r4)
  80c4f4:	1c3fb71e 	bne	r3,r16,80c3d4 <actionBtnAnimation+0xa8>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80c4f8:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80c4fc:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80c500:	000b883a 	mov	r5,zero
  80c504:	08007c40 	call	8007c4 <animateButton>
  80c508:	91400017 	ldw	r5,0(r18)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80c50c:	29400117 	ldw	r5,4(r5)
  80c510:	28800117 	ldw	r2,4(r5)
  80c514:	10c00417 	ldw	r3,16(r2)
  80c518:	19000a17 	ldw	r4,40(r3)
  80c51c:	247fb21e 	bne	r4,r17,80c3e8 <actionBtnAnimation+0xbc>
			mainFrame->elements[1]->buttons[i]->frame++;
  80c520:	18800617 	ldw	r2,24(r3)
  80c524:	1105883a 	add	r2,r2,r4
  80c528:	18800615 	stw	r2,24(r3)
  80c52c:	28800117 	ldw	r2,4(r5)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80c530:	11000417 	ldw	r4,16(r2)
  80c534:	20c00617 	ldw	r3,24(r4)
  80c538:	1c3fae1e 	bne	r3,r16,80c3f4 <actionBtnAnimation+0xc8>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
			mainFrame->elements[1]->buttons[i]->frame = 0;
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80c53c:	000b883a 	mov	r5,zero
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80c540:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80c544:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
		}
	}
}
  80c548:	dfc00317 	ldw	ra,12(sp)
  80c54c:	dc800217 	ldw	r18,8(sp)
  80c550:	dc400117 	ldw	r17,4(sp)
  80c554:	dc000017 	ldw	r16,0(sp)
  80c558:	dec00404 	addi	sp,sp,16
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
			mainFrame->elements[1]->buttons[i]->frame = 0;
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80c55c:	08007c41 	jmpi	8007c4 <animateButton>

0080c560 <checkImgCollisionForMouse>:
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c560:	20800017 	ldw	r2,0(r4)

	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
  80c564:	defffb04 	addi	sp,sp,-20
  80c568:	dc000015 	stw	r16,0(sp)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c56c:	10800017 	ldw	r2,0(r2)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80c570:	2c000217 	ldw	r16,8(r5)

	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
  80c574:	dc800215 	stw	r18,8(sp)
  80c578:	dc400115 	stw	r17,4(sp)
  80c57c:	2025883a 	mov	r18,r4
  80c580:	2823883a 	mov	r17,r5
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
  80c584:	81000017 	ldw	r4,0(r16)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c588:	11400017 	ldw	r5,0(r2)

	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
  80c58c:	dfc00415 	stw	ra,16(sp)
  80c590:	dcc00315 	stw	r19,12(sp)
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
  80c594:	81800117 	ldw	r6,4(r16)
		int x_button_end = r_button->x + r_button->width;
  80c598:	80c00317 	ldw	r3,12(r16)
		int y_button_end = r_button->y + r_button->height;
  80c59c:	81c00217 	ldw	r7,8(r16)
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c5a0:	29000416 	blt	r5,r4,80c5b4 <checkImgCollisionForMouse+0x54>
void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
  80c5a4:	20c7883a 	add	r3,r4,r3
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c5a8:	01005004 	movi	r4,320
  80c5ac:	20c02f16 	blt	r4,r3,80c66c <checkImgCollisionForMouse+0x10c>
  80c5b0:	28c01b16 	blt	r5,r3,80c620 <checkImgCollisionForMouse+0xc0>
					r_button->currentlyCollided = 0;
				}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80c5b4:	00800084 	movi	r2,2
  80c5b8:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80c5bc:	80000515 	stw	zero,20(r16)
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80c5c0:	80800417 	ldw	r2,16(r16)
  80c5c4:	10002c1e 	bne	r2,zero,80c678 <checkImgCollisionForMouse+0x118>
  80c5c8:	81400517 	ldw	r5,20(r16)
  80c5cc:	00800044 	movi	r2,1
  80c5d0:	28800826 	beq	r5,r2,80c5f4 <checkImgCollisionForMouse+0x94>
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80c5d4:	81400415 	stw	r5,16(r16)

		r_button = NULL;
}
  80c5d8:	dfc00417 	ldw	ra,16(sp)
  80c5dc:	dcc00317 	ldw	r19,12(sp)
  80c5e0:	dc800217 	ldw	r18,8(sp)
  80c5e4:	dc400117 	ldw	r17,4(sp)
  80c5e8:	dc000017 	ldw	r16,0(sp)
  80c5ec:	dec00504 	addi	sp,sp,20
  80c5f0:	f800283a 	ret
			r_button->currentlyCollided = 0;
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
			if (((struct Button*)button)->isClicked == 1){
  80c5f4:	88800917 	ldw	r2,36(r17)
  80c5f8:	117ff61e 	bne	r2,r5,80c5d4 <checkImgCollisionForMouse+0x74>
				printf("Collision detected\n");
  80c5fc:	010020f4 	movhi	r4,131
  80c600:	210eb104 	addi	r4,r4,15044
  80c604:	08221800 	call	822180 <puts>
				((struct Button*)button)->collide(((struct Button*)button));
  80c608:	88c00f17 	ldw	r3,60(r17)
  80c60c:	8809883a 	mov	r4,r17
  80c610:	183ee83a 	callr	r3
  80c614:	81400517 	ldw	r5,20(r16)
				((struct Cursor*)cursor)->isLeftPressed = 0;
  80c618:	90000205 	stb	zero,8(r18)
  80c61c:	003fed06 	br	80c5d4 <checkImgCollisionForMouse+0x74>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c620:	10800117 	ldw	r2,4(r2)
  80c624:	11bfe316 	blt	r2,r6,80c5b4 <checkImgCollisionForMouse+0x54>
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
  80c628:	31c7883a 	add	r3,r6,r7
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c62c:	01003c04 	movi	r4,240
  80c630:	20c0010e 	bge	r4,r3,80c638 <checkImgCollisionForMouse+0xd8>
  80c634:	2007883a 	mov	r3,r4
  80c638:	10ffde0e 	bge	r2,r3,80c5b4 <checkImgCollisionForMouse+0x54>
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
  80c63c:	90800203 	ldbu	r2,8(r18)
  80c640:	10001626 	beq	r2,zero,80c69c <checkImgCollisionForMouse+0x13c>
					if (((struct Button*)button)->isClicked == 2) {
  80c644:	88c00917 	ldw	r3,36(r17)
  80c648:	00800084 	movi	r2,2
  80c64c:	18801626 	beq	r3,r2,80c6a8 <checkImgCollisionForMouse+0x148>
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
  80c650:	183fdb1e 	bne	r3,zero,80c5c0 <checkImgCollisionForMouse+0x60>
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
  80c654:	88800017 	ldw	r2,0(r17)
  80c658:	04c00044 	movi	r19,1
  80c65c:	14c01626 	beq	r2,r19,80c6b8 <checkImgCollisionForMouse+0x158>
							((struct Button*)button)->startAnimate = 1;
							animateButton(((struct Button*)button), 1);
						}
						r_button->currentlyCollided = 1;
  80c660:	84c00515 	stw	r19,20(r16)
						((struct Button*)button)->isClicked = 1;
  80c664:	8cc00915 	stw	r19,36(r17)
  80c668:	003fd506 	br	80c5c0 <checkImgCollisionForMouse+0x60>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c66c:	2007883a 	mov	r3,r4
  80c670:	28ffd00e 	bge	r5,r3,80c5b4 <checkImgCollisionForMouse+0x54>
  80c674:	003fea06 	br	80c620 <checkImgCollisionForMouse+0xc0>
  80c678:	81400517 	ldw	r5,20(r16)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80c67c:	81400415 	stw	r5,16(r16)

		r_button = NULL;
}
  80c680:	dfc00417 	ldw	ra,16(sp)
  80c684:	dcc00317 	ldw	r19,12(sp)
  80c688:	dc800217 	ldw	r18,8(sp)
  80c68c:	dc400117 	ldw	r17,4(sp)
  80c690:	dc000017 	ldw	r16,0(sp)
  80c694:	dec00504 	addi	sp,sp,20
  80c698:	f800283a 	ret
						}
						r_button->currentlyCollided = 1;
						((struct Button*)button)->isClicked = 1;
					}
				} else {
					((struct Button*)button)->isClicked = 0;
  80c69c:	88000915 	stw	zero,36(r17)
					r_button->currentlyCollided = 0;
  80c6a0:	80000515 	stw	zero,20(r16)
  80c6a4:	003fc606 	br	80c5c0 <checkImgCollisionForMouse+0x60>
		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
					if (((struct Button*)button)->isClicked == 2) {
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
  80c6a8:	80000515 	stw	zero,20(r16)
						((struct Button*)button)->isClicked = 0;
  80c6ac:	88000915 	stw	zero,36(r17)
						((struct Cursor*)cursor)->isLeftPressed = false;
  80c6b0:	90000205 	stb	zero,8(r18)
  80c6b4:	003fc206 	br	80c5c0 <checkImgCollisionForMouse+0x60>
					} else if (((struct Button*)button)->isClicked == 0) {
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
							((struct Button*)button)->startAnimate = 1;
  80c6b8:	8cc00a15 	stw	r19,40(r17)
							animateButton(((struct Button*)button), 1);
  80c6bc:	8809883a 	mov	r4,r17
  80c6c0:	980b883a 	mov	r5,r19
  80c6c4:	08007c40 	call	8007c4 <animateButton>
  80c6c8:	003fe506 	br	80c660 <checkImgCollisionForMouse+0x100>

0080c6cc <checkTxtCollisionForMouse>:
	return this;
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
  80c6cc:	defffc04 	addi	sp,sp,-16
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c6d0:	20c00017 	ldw	r3,0(r4)
	return this;
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
  80c6d4:	dc000015 	stw	r16,0(sp)
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c6d8:	2c000217 	ldw	r16,8(r5)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c6dc:	19800017 	ldw	r6,0(r3)
	return this;
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
  80c6e0:	dc400115 	stw	r17,4(sp)
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
  80c6e4:	80800017 	ldw	r2,0(r16)
	return this;
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
  80c6e8:	2823883a 	mov	r17,r5
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c6ec:	31400017 	ldw	r5,0(r6)
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
  80c6f0:	1085883a 	add	r2,r2,r2
  80c6f4:	1085883a 	add	r2,r2,r2
	return this;
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
  80c6f8:	dc800215 	stw	r18,8(sp)
  80c6fc:	dfc00315 	stw	ra,12(sp)
  80c700:	2025883a 	mov	r18,r4
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80c704:	80c00117 	ldw	r3,4(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
  80c708:	81000317 	ldw	r4,12(r16)
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80c70c:	81c00217 	ldw	r7,8(r16)
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c710:	28800416 	blt	r5,r2,80c724 <checkTxtCollisionForMouse+0x58>
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
  80c714:	1105883a 	add	r2,r2,r4
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c718:	01005004 	movi	r4,320
  80c71c:	20803016 	blt	r4,r2,80c7e0 <checkTxtCollisionForMouse+0x114>
  80c720:	28801a16 	blt	r5,r2,80c78c <checkTxtCollisionForMouse+0xc0>
				r_button->currentlyCollided = 0;
			}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80c724:	00800084 	movi	r2,2
  80c728:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80c72c:	80000515 	stw	zero,20(r16)
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80c730:	80800417 	ldw	r2,16(r16)
  80c734:	10002d1e 	bne	r2,zero,80c7ec <checkTxtCollisionForMouse+0x120>
  80c738:	80c00517 	ldw	r3,20(r16)
  80c73c:	00800044 	movi	r2,1
  80c740:	18800726 	beq	r3,r2,80c760 <checkTxtCollisionForMouse+0x94>
			((struct Button*)button)->collide(((struct Button*)button));
			((struct Cursor*)cursor)->isLeftPressed = 0;
		}
	}

	r_button->previouslyCollided = r_button->currentlyCollided;
  80c744:	80c00415 	stw	r3,16(r16)

	r_button = NULL;

}
  80c748:	dfc00317 	ldw	ra,12(sp)
  80c74c:	dc800217 	ldw	r18,8(sp)
  80c750:	dc400117 	ldw	r17,4(sp)
  80c754:	dc000017 	ldw	r16,0(sp)
  80c758:	dec00404 	addi	sp,sp,16
  80c75c:	f800283a 	ret
			r_button->currentlyCollided = 0;
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		if (((struct Button*)button)->isClicked == 1){
  80c760:	88800917 	ldw	r2,36(r17)
  80c764:	10fff71e 	bne	r2,r3,80c744 <checkTxtCollisionForMouse+0x78>
			printf("Collision detected\n");
  80c768:	010020f4 	movhi	r4,131
  80c76c:	210eb104 	addi	r4,r4,15044
  80c770:	08221800 	call	822180 <puts>
			((struct Button*)button)->collide(((struct Button*)button));
  80c774:	88c00f17 	ldw	r3,60(r17)
  80c778:	8809883a 	mov	r4,r17
  80c77c:	183ee83a 	callr	r3
  80c780:	80c00517 	ldw	r3,20(r16)
			((struct Cursor*)cursor)->isLeftPressed = 0;
  80c784:	90000205 	stb	zero,8(r18)
  80c788:	003fee06 	br	80c744 <checkTxtCollisionForMouse+0x78>
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80c78c:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c790:	31000117 	ldw	r4,4(r6)
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80c794:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c798:	18bfff44 	addi	r2,r3,-3
  80c79c:	20bfe116 	blt	r4,r2,80c724 <checkTxtCollisionForMouse+0x58>
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80c7a0:	19c5883a 	add	r2,r3,r7
  80c7a4:	10bfff44 	addi	r2,r2,-3
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c7a8:	00c03c04 	movi	r3,240
  80c7ac:	1880010e 	bge	r3,r2,80c7b4 <checkTxtCollisionForMouse+0xe8>
  80c7b0:	1805883a 	mov	r2,r3
  80c7b4:	20bfdb0e 	bge	r4,r2,80c724 <checkTxtCollisionForMouse+0x58>
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
  80c7b8:	90800203 	ldbu	r2,8(r18)
  80c7bc:	10001326 	beq	r2,zero,80c80c <checkTxtCollisionForMouse+0x140>
				if (((struct Button*)button)->isClicked == 2) {
  80c7c0:	88c00917 	ldw	r3,36(r17)
  80c7c4:	00800084 	movi	r2,2
  80c7c8:	18801326 	beq	r3,r2,80c818 <checkTxtCollisionForMouse+0x14c>
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
					((struct Button*)button)->isClicked = 0;
					((struct Cursor*)cursor)->isLeftPressed = false;
				} else if (((struct Button*)button)->isClicked == 0) {
  80c7cc:	183fd81e 	bne	r3,zero,80c730 <checkTxtCollisionForMouse+0x64>
					// button is clicked!
					r_button->currentlyCollided = 1;
  80c7d0:	00c00044 	movi	r3,1
  80c7d4:	80c00515 	stw	r3,20(r16)
					((struct Button*)button)->isClicked = 1;
  80c7d8:	88c00915 	stw	r3,36(r17)
  80c7dc:	003fd406 	br	80c730 <checkTxtCollisionForMouse+0x64>
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c7e0:	2005883a 	mov	r2,r4
  80c7e4:	28bfcf0e 	bge	r5,r2,80c724 <checkTxtCollisionForMouse+0x58>
  80c7e8:	003fe806 	br	80c78c <checkTxtCollisionForMouse+0xc0>
  80c7ec:	80c00517 	ldw	r3,20(r16)
			((struct Button*)button)->collide(((struct Button*)button));
			((struct Cursor*)cursor)->isLeftPressed = 0;
		}
	}

	r_button->previouslyCollided = r_button->currentlyCollided;
  80c7f0:	80c00415 	stw	r3,16(r16)

	r_button = NULL;

}
  80c7f4:	dfc00317 	ldw	ra,12(sp)
  80c7f8:	dc800217 	ldw	r18,8(sp)
  80c7fc:	dc400117 	ldw	r17,4(sp)
  80c800:	dc000017 	ldw	r16,0(sp)
  80c804:	dec00404 	addi	sp,sp,16
  80c808:	f800283a 	ret
					// button is clicked!
					r_button->currentlyCollided = 1;
					((struct Button*)button)->isClicked = 1;
				}
			} else {
				((struct Button*)button)->isClicked = 0;
  80c80c:	88000915 	stw	zero,36(r17)
				r_button->currentlyCollided = 0;
  80c810:	80000515 	stw	zero,20(r16)
  80c814:	003fc606 	br	80c730 <checkTxtCollisionForMouse+0x64>
	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
				if (((struct Button*)button)->isClicked == 2) {
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
  80c818:	80000515 	stw	zero,20(r16)
					((struct Button*)button)->isClicked = 0;
  80c81c:	88000915 	stw	zero,36(r17)
					((struct Cursor*)cursor)->isLeftPressed = false;
  80c820:	90000205 	stb	zero,8(r18)
  80c824:	003fc206 	br	80c730 <checkTxtCollisionForMouse+0x64>

0080c828 <initRange>:
 *      Author: danny
 */

#include "Range.h"

struct Range* initRange(int x, int y, int w, int h) {
  80c828:	defffb04 	addi	sp,sp,-20
  80c82c:	ddc00315 	stw	r23,12(sp)
  80c830:	202f883a 	mov	r23,r4
	struct Range* this = (struct Range*)malloc(sizeof(struct Range));
  80c834:	01000604 	movi	r4,24
 *      Author: danny
 */

#include "Range.h"

struct Range* initRange(int x, int y, int w, int h) {
  80c838:	dd400215 	stw	r21,8(sp)
  80c83c:	dcc00115 	stw	r19,4(sp)
  80c840:	dc400015 	stw	r17,0(sp)
  80c844:	2827883a 	mov	r19,r5
  80c848:	302b883a 	mov	r21,r6
  80c84c:	3823883a 	mov	r17,r7
  80c850:	dfc00415 	stw	ra,16(sp)
	struct Range* this = (struct Range*)malloc(sizeof(struct Range));
  80c854:	08216fc0 	call	8216fc <malloc>
	this->x = x;
	this->y = y;
	this->width = w;
	this->height = h;
  80c858:	14400215 	stw	r17,8(r2)

#include "Range.h"

struct Range* initRange(int x, int y, int w, int h) {
	struct Range* this = (struct Range*)malloc(sizeof(struct Range));
	this->x = x;
  80c85c:	15c00015 	stw	r23,0(r2)
	this->y = y;
  80c860:	14c00115 	stw	r19,4(r2)
	this->width = w;
  80c864:	15400315 	stw	r21,12(r2)
	this->height = h;
	return this;
}
  80c868:	dfc00417 	ldw	ra,16(sp)
  80c86c:	ddc00317 	ldw	r23,12(sp)
  80c870:	dd400217 	ldw	r21,8(sp)
  80c874:	dcc00117 	ldw	r19,4(sp)
  80c878:	dc400017 	ldw	r17,0(sp)
  80c87c:	dec00504 	addi	sp,sp,20
  80c880:	f800283a 	ret

0080c884 <checkButtonCollision>:
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c884:	2a000017 	ldw	r8,0(r5)
		r_button->previouslyCollided = r_button->currentlyCollided;

		r_button = NULL;
}

void checkButtonCollision(void* c, void* mf){
  80c888:	defff804 	addi	sp,sp,-32
  80c88c:	dc400115 	stw	r17,4(sp)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c890:	40800017 	ldw	r2,0(r8)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c894:	22400017 	ldw	r9,0(r4)
		r_button->previouslyCollided = r_button->currentlyCollided;

		r_button = NULL;
}

void checkButtonCollision(void* c, void* mf){
  80c898:	dc000015 	stw	r16,0(sp)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c89c:	10c00117 	ldw	r3,4(r2)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c8a0:	49800017 	ldw	r6,0(r9)
		r_button->previouslyCollided = r_button->currentlyCollided;

		r_button = NULL;
}

void checkButtonCollision(void* c, void* mf){
  80c8a4:	dd400515 	stw	r21,20(sp)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c8a8:	1c400117 	ldw	r17,4(r3)
		r_button->previouslyCollided = r_button->currentlyCollided;

		r_button = NULL;
}

void checkButtonCollision(void* c, void* mf){
  80c8ac:	282b883a 	mov	r21,r5
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c8b0:	31400017 	ldw	r5,0(r6)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c8b4:	8c000217 	ldw	r16,8(r17)
		r_button->previouslyCollided = r_button->currentlyCollided;

		r_button = NULL;
}

void checkButtonCollision(void* c, void* mf){
  80c8b8:	dd000415 	stw	r20,16(sp)
  80c8bc:	dfc00715 	stw	ra,28(sp)
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
  80c8c0:	80800017 	ldw	r2,0(r16)
		r_button->previouslyCollided = r_button->currentlyCollided;

		r_button = NULL;
}

void checkButtonCollision(void* c, void* mf){
  80c8c4:	2029883a 	mov	r20,r4
  80c8c8:	dd800615 	stw	r22,24(sp)
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
  80c8cc:	1085883a 	add	r2,r2,r2
  80c8d0:	1085883a 	add	r2,r2,r2
		r_button->previouslyCollided = r_button->currentlyCollided;

		r_button = NULL;
}

void checkButtonCollision(void* c, void* mf){
  80c8d4:	dcc00315 	stw	r19,12(sp)
  80c8d8:	dc800215 	stw	r18,8(sp)
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80c8dc:	80c00117 	ldw	r3,4(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
  80c8e0:	81000317 	ldw	r4,12(r16)
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80c8e4:	81c00217 	ldw	r7,8(r16)
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c8e8:	28800416 	blt	r5,r2,80c8fc <checkButtonCollision+0x78>
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
  80c8ec:	1105883a 	add	r2,r2,r4
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c8f0:	01005004 	movi	r4,320
  80c8f4:	2081a116 	blt	r4,r2,80cf7c <checkButtonCollision+0x6f8>
  80c8f8:	28818b16 	blt	r5,r2,80cf28 <checkButtonCollision+0x6a4>
				r_button->currentlyCollided = 0;
			}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80c8fc:	00800084 	movi	r2,2
  80c900:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80c904:	80000515 	stw	zero,20(r16)
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80c908:	80800417 	ldw	r2,16(r16)
  80c90c:	1001581e 	bne	r2,zero,80ce70 <checkButtonCollision+0x5ec>
  80c910:	81000517 	ldw	r4,20(r16)
  80c914:	00800044 	movi	r2,1
  80c918:	2082ed26 	beq	r4,r2,80d4d0 <checkButtonCollision+0xc4c>
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c91c:	40c00017 	ldw	r3,0(r8)
			((struct Button*)button)->collide(((struct Button*)button));
			((struct Cursor*)cursor)->isLeftPressed = 0;
		}
	}

	r_button->previouslyCollided = r_button->currentlyCollided;
  80c920:	81000415 	stw	r4,16(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c924:	49800017 	ldw	r6,0(r9)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c928:	18800117 	ldw	r2,4(r3)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c92c:	31400017 	ldw	r5,0(r6)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80c930:	14400017 	ldw	r17,0(r2)
  80c934:	8c000217 	ldw	r16,8(r17)

	int x_button_start = 4 * r_button->x;
  80c938:	80800017 	ldw	r2,0(r16)
	int y_button_start = 4 * r_button->y - 3;
  80c93c:	80c00117 	ldw	r3,4(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
  80c940:	81000317 	ldw	r4,12(r16)
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
  80c944:	1085883a 	add	r2,r2,r2
  80c948:	1085883a 	add	r2,r2,r2
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80c94c:	81c00217 	ldw	r7,8(r16)
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c950:	28800416 	blt	r5,r2,80c964 <checkButtonCollision+0xe0>
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
  80c954:	1105883a 	add	r2,r2,r4
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c958:	01005004 	movi	r4,320
  80c95c:	20819f16 	blt	r4,r2,80cfdc <checkButtonCollision+0x758>
  80c960:	28818916 	blt	r5,r2,80cf88 <checkButtonCollision+0x704>
				r_button->currentlyCollided = 0;
			}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80c964:	00800084 	movi	r2,2
  80c968:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80c96c:	80000515 	stw	zero,20(r16)
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80c970:	80800417 	ldw	r2,16(r16)
  80c974:	10013c1e 	bne	r2,zero,80ce68 <checkButtonCollision+0x5e4>
  80c978:	81000517 	ldw	r4,20(r16)
  80c97c:	00800044 	movi	r2,1
  80c980:	20828226 	beq	r4,r2,80d38c <checkButtonCollision+0xb08>
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80c984:	40c00117 	ldw	r3,4(r8)
			((struct Button*)button)->collide(((struct Button*)button));
			((struct Cursor*)cursor)->isLeftPressed = 0;
		}
	}

	r_button->previouslyCollided = r_button->currentlyCollided;
  80c988:	81000415 	stw	r4,16(r16)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c98c:	49400017 	ldw	r5,0(r9)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80c990:	18800117 	ldw	r2,4(r3)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c994:	29000017 	ldw	r4,0(r5)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80c998:	14400017 	ldw	r17,0(r2)
  80c99c:	8c000217 	ldw	r16,8(r17)

		int x_button_start = r_button->x;
  80c9a0:	80800017 	ldw	r2,0(r16)
		int y_button_start = r_button->y;
  80c9a4:	81800117 	ldw	r6,4(r16)
		int x_button_end = r_button->x + r_button->width;
  80c9a8:	80c00317 	ldw	r3,12(r16)
		int y_button_end = r_button->y + r_button->height;
  80c9ac:	81c00217 	ldw	r7,8(r16)
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c9b0:	20800416 	blt	r4,r2,80c9c4 <checkButtonCollision+0x140>
void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
  80c9b4:	10c5883a 	add	r2,r2,r3
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c9b8:	00c05004 	movi	r3,320
  80c9bc:	1881c916 	blt	r3,r2,80d0e4 <checkButtonCollision+0x860>
  80c9c0:	2081b516 	blt	r4,r2,80d098 <checkButtonCollision+0x814>
					r_button->currentlyCollided = 0;
				}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80c9c4:	00800084 	movi	r2,2
  80c9c8:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80c9cc:	80000515 	stw	zero,20(r16)
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80c9d0:	80800417 	ldw	r2,16(r16)
  80c9d4:	1001221e 	bne	r2,zero,80ce60 <checkButtonCollision+0x5dc>
  80c9d8:	81400517 	ldw	r5,20(r16)
  80c9dc:	00800044 	movi	r2,1
  80c9e0:	28824926 	beq	r5,r2,80d308 <checkButtonCollision+0xa84>
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80c9e4:	a8c00017 	ldw	r3,0(r21)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c9e8:	a1000017 	ldw	r4,0(r20)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80c9ec:	81400415 	stw	r5,16(r16)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80c9f0:	18800117 	ldw	r2,4(r3)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c9f4:	21000017 	ldw	r4,0(r4)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80c9f8:	10c00117 	ldw	r3,4(r2)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80c9fc:	21400017 	ldw	r5,0(r4)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80ca00:	1c400117 	ldw	r17,4(r3)
  80ca04:	8c000217 	ldw	r16,8(r17)

		int x_button_start = r_button->x;
  80ca08:	80800017 	ldw	r2,0(r16)
		int y_button_start = r_button->y;
  80ca0c:	81800117 	ldw	r6,4(r16)
		int x_button_end = r_button->x + r_button->width;
  80ca10:	80c00317 	ldw	r3,12(r16)
		int y_button_end = r_button->y + r_button->height;
  80ca14:	81c00217 	ldw	r7,8(r16)
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ca18:	28800416 	blt	r5,r2,80ca2c <checkButtonCollision+0x1a8>
void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
  80ca1c:	10c5883a 	add	r2,r2,r3
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ca20:	00c05004 	movi	r3,320
  80ca24:	18819916 	blt	r3,r2,80d08c <checkButtonCollision+0x808>
  80ca28:	28818516 	blt	r5,r2,80d040 <checkButtonCollision+0x7bc>
					r_button->currentlyCollided = 0;
				}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80ca2c:	00800084 	movi	r2,2
  80ca30:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80ca34:	80000515 	stw	zero,20(r16)
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80ca38:	80800417 	ldw	r2,16(r16)
  80ca3c:	1001061e 	bne	r2,zero,80ce58 <checkButtonCollision+0x5d4>
  80ca40:	81400517 	ldw	r5,20(r16)
  80ca44:	00800044 	movi	r2,1
  80ca48:	28829626 	beq	r5,r2,80d4a4 <checkButtonCollision+0xc20>
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80ca4c:	a8c00017 	ldw	r3,0(r21)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ca50:	a1000017 	ldw	r4,0(r20)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80ca54:	81400415 	stw	r5,16(r16)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80ca58:	18800117 	ldw	r2,4(r3)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ca5c:	21000017 	ldw	r4,0(r4)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80ca60:	10c00117 	ldw	r3,4(r2)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ca64:	21400017 	ldw	r5,0(r4)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80ca68:	1c400217 	ldw	r17,8(r3)
  80ca6c:	8c000217 	ldw	r16,8(r17)

		int x_button_start = r_button->x;
  80ca70:	80800017 	ldw	r2,0(r16)
		int y_button_start = r_button->y;
  80ca74:	81800117 	ldw	r6,4(r16)
		int x_button_end = r_button->x + r_button->width;
  80ca78:	80c00317 	ldw	r3,12(r16)
		int y_button_end = r_button->y + r_button->height;
  80ca7c:	81c00217 	ldw	r7,8(r16)
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ca80:	28800416 	blt	r5,r2,80ca94 <checkButtonCollision+0x210>
void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
  80ca84:	10c5883a 	add	r2,r2,r3
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ca88:	00c05004 	movi	r3,320
  80ca8c:	18816916 	blt	r3,r2,80d034 <checkButtonCollision+0x7b0>
  80ca90:	28815516 	blt	r5,r2,80cfe8 <checkButtonCollision+0x764>
					r_button->currentlyCollided = 0;
				}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80ca94:	00800084 	movi	r2,2
  80ca98:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80ca9c:	80000515 	stw	zero,20(r16)
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80caa0:	80800417 	ldw	r2,16(r16)
  80caa4:	1000ea1e 	bne	r2,zero,80ce50 <checkButtonCollision+0x5cc>
  80caa8:	81400517 	ldw	r5,20(r16)
  80caac:	00800044 	movi	r2,1
  80cab0:	28824326 	beq	r5,r2,80d3c0 <checkButtonCollision+0xb3c>
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cab4:	a8c00017 	ldw	r3,0(r21)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cab8:	a1000017 	ldw	r4,0(r20)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80cabc:	81400415 	stw	r5,16(r16)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cac0:	18800117 	ldw	r2,4(r3)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cac4:	21000017 	ldw	r4,0(r4)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cac8:	10c00117 	ldw	r3,4(r2)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cacc:	21400017 	ldw	r5,0(r4)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cad0:	1c400317 	ldw	r17,12(r3)
  80cad4:	8c000217 	ldw	r16,8(r17)

		int x_button_start = r_button->x;
  80cad8:	80800017 	ldw	r2,0(r16)
		int y_button_start = r_button->y;
  80cadc:	81800117 	ldw	r6,4(r16)
		int x_button_end = r_button->x + r_button->width;
  80cae0:	80c00317 	ldw	r3,12(r16)
		int y_button_end = r_button->y + r_button->height;
  80cae4:	81c00217 	ldw	r7,8(r16)
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cae8:	28800416 	blt	r5,r2,80cafc <checkButtonCollision+0x278>
void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
  80caec:	10c5883a 	add	r2,r2,r3
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80caf0:	00c05004 	movi	r3,320
  80caf4:	18810916 	blt	r3,r2,80cf1c <checkButtonCollision+0x698>
  80caf8:	2880f516 	blt	r5,r2,80ced0 <checkButtonCollision+0x64c>
					r_button->currentlyCollided = 0;
				}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80cafc:	00800084 	movi	r2,2
  80cb00:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80cb04:	80000515 	stw	zero,20(r16)
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80cb08:	80800417 	ldw	r2,16(r16)
  80cb0c:	1000ce1e 	bne	r2,zero,80ce48 <checkButtonCollision+0x5c4>
  80cb10:	81400517 	ldw	r5,20(r16)
  80cb14:	00800044 	movi	r2,1
  80cb18:	28820626 	beq	r5,r2,80d334 <checkButtonCollision+0xab0>
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cb1c:	aa000017 	ldw	r8,0(r21)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cb20:	a2400017 	ldw	r9,0(r20)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80cb24:	81400415 	stw	r5,16(r16)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cb28:	40800117 	ldw	r2,4(r8)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cb2c:	49400017 	ldw	r5,0(r9)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cb30:	10c00117 	ldw	r3,4(r2)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cb34:	29000017 	ldw	r4,0(r5)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cb38:	1c400417 	ldw	r17,16(r3)
  80cb3c:	8c000217 	ldw	r16,8(r17)

		int x_button_start = r_button->x;
  80cb40:	80800017 	ldw	r2,0(r16)
		int y_button_start = r_button->y;
  80cb44:	81800117 	ldw	r6,4(r16)
		int x_button_end = r_button->x + r_button->width;
  80cb48:	80c00317 	ldw	r3,12(r16)
		int y_button_end = r_button->y + r_button->height;
  80cb4c:	81c00217 	ldw	r7,8(r16)
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cb50:	20800416 	blt	r4,r2,80cb64 <checkButtonCollision+0x2e0>
void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
  80cb54:	10c5883a 	add	r2,r2,r3
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cb58:	00c05004 	movi	r3,320
  80cb5c:	1880d916 	blt	r3,r2,80cec4 <checkButtonCollision+0x640>
  80cb60:	2080c516 	blt	r4,r2,80ce78 <checkButtonCollision+0x5f4>
					r_button->currentlyCollided = 0;
				}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80cb64:	00800084 	movi	r2,2
  80cb68:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80cb6c:	80000515 	stw	zero,20(r16)
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80cb70:	80800417 	ldw	r2,16(r16)
  80cb74:	1000341e 	bne	r2,zero,80cc48 <checkButtonCollision+0x3c4>
  80cb78:	81400517 	ldw	r5,20(r16)
  80cb7c:	00800044 	movi	r2,1
  80cb80:	2881f726 	beq	r5,r2,80d360 <checkButtonCollision+0xadc>
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80cb84:	81400415 	stw	r5,16(r16)
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[2]);
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[3]);
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[4]);

	int i;
	if (mainFrame->currentPanel == 0){
  80cb88:	a9000417 	ldw	r4,16(r21)
  80cb8c:	2000321e 	bne	r4,zero,80cc58 <checkButtonCollision+0x3d4>
		for (i = 1; i <= mainFrame->elements[2]->button_size; i++){
  80cb90:	aa000017 	ldw	r8,0(r21)
  80cb94:	40c00217 	ldw	r3,8(r8)
  80cb98:	18800317 	ldw	r2,12(r3)
  80cb9c:	00827e0e 	bge	zero,r2,80d598 <checkButtonCollision+0xd14>
  80cba0:	a2400017 	ldw	r9,0(r20)
  80cba4:	04c00044 	movi	r19,1
  80cba8:	04800104 	movi	r18,4
  80cbac:	05800084 	movi	r22,2
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80cbb0:	18800117 	ldw	r2,4(r3)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cbb4:	49800017 	ldw	r6,0(r9)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80cbb8:	9085883a 	add	r2,r18,r2
  80cbbc:	14400017 	ldw	r17,0(r2)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cbc0:	31400017 	ldw	r5,0(r6)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80cbc4:	8c000217 	ldw	r16,8(r17)

	int x_button_start = 4 * r_button->x;
  80cbc8:	80800017 	ldw	r2,0(r16)
	int y_button_start = 4 * r_button->y - 3;
  80cbcc:	80c00117 	ldw	r3,4(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
  80cbd0:	81000317 	ldw	r4,12(r16)
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
  80cbd4:	1085883a 	add	r2,r2,r2
  80cbd8:	1085883a 	add	r2,r2,r2
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80cbdc:	81c00217 	ldw	r7,8(r16)
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cbe0:	28814316 	blt	r5,r2,80d0f0 <checkButtonCollision+0x86c>
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
  80cbe4:	1105883a 	add	r2,r2,r4
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cbe8:	01005004 	movi	r4,320
  80cbec:	2080010e 	bge	r4,r2,80cbf4 <checkButtonCollision+0x370>
  80cbf0:	2005883a 	mov	r2,r4
  80cbf4:	28813e0e 	bge	r5,r2,80d0f0 <checkButtonCollision+0x86c>
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80cbf8:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cbfc:	31000117 	ldw	r4,4(r6)
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80cc00:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cc04:	18bfff44 	addi	r2,r3,-3
  80cc08:	20813916 	blt	r4,r2,80d0f0 <checkButtonCollision+0x86c>
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80cc0c:	19c5883a 	add	r2,r3,r7
  80cc10:	10bfff44 	addi	r2,r2,-3
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cc14:	00c03c04 	movi	r3,240
  80cc18:	1880010e 	bge	r3,r2,80cc20 <checkButtonCollision+0x39c>
  80cc1c:	1805883a 	mov	r2,r3
  80cc20:	2081330e 	bge	r4,r2,80d0f0 <checkButtonCollision+0x86c>
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
  80cc24:	a0800203 	ldbu	r2,8(r20)
  80cc28:	10023626 	beq	r2,zero,80d504 <checkButtonCollision+0xc80>
				if (((struct Button*)button)->isClicked == 2) {
  80cc2c:	88800917 	ldw	r2,36(r17)
  80cc30:	1582fe26 	beq	r2,r22,80d82c <checkButtonCollision+0xfa8>
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
					((struct Button*)button)->isClicked = 0;
					((struct Cursor*)cursor)->isLeftPressed = false;
				} else if (((struct Button*)button)->isClicked == 0) {
  80cc34:	1001301e 	bne	r2,zero,80d0f8 <checkButtonCollision+0x874>
					// button is clicked!
					r_button->currentlyCollided = 1;
  80cc38:	01000044 	movi	r4,1
  80cc3c:	81000515 	stw	r4,20(r16)
					((struct Button*)button)->isClicked = 1;
  80cc40:	89000915 	stw	r4,36(r17)
  80cc44:	00012c06 	br	80d0f8 <checkButtonCollision+0x874>
  80cc48:	81400517 	ldw	r5,20(r16)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80cc4c:	81400415 	stw	r5,16(r16)
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[2]);
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[3]);
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[4]);

	int i;
	if (mainFrame->currentPanel == 0){
  80cc50:	a9000417 	ldw	r4,16(r21)
  80cc54:	203fce26 	beq	r4,zero,80cb90 <checkButtonCollision+0x30c>
		for (i = 1; i <= mainFrame->elements[2]->button_size; i++){
			checkTxtCollisionForMouse(cursor, mainFrame->elements[2]->buttons[i]);
		}
	} else if (mainFrame->currentPanel == 1){
  80cc58:	01400044 	movi	r5,1
  80cc5c:	2141e326 	beq	r4,r5,80d3ec <checkButtonCollision+0xb68>
		for (i = 1; i <= mainFrame->elements[3]->button_size; i++){
			checkTxtCollisionForMouse(cursor, mainFrame->elements[3]->buttons[i]);
		}
	} else if (mainFrame->currentPanel == 2){
  80cc60:	00800084 	movi	r2,2
  80cc64:	20828126 	beq	r4,r2,80d66c <checkButtonCollision+0xde8>
  80cc68:	aa000017 	ldw	r8,0(r21)
  80cc6c:	a2400017 	ldw	r9,0(r20)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cc70:	40800517 	ldw	r2,20(r8)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cc74:	49400017 	ldw	r5,0(r9)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cc78:	10c00117 	ldw	r3,4(r2)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cc7c:	29000017 	ldw	r4,0(r5)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cc80:	1c400017 	ldw	r17,0(r3)
  80cc84:	8c000217 	ldw	r16,8(r17)

		int x_button_start = r_button->x;
  80cc88:	80800017 	ldw	r2,0(r16)
		int y_button_start = r_button->y;
  80cc8c:	81800117 	ldw	r6,4(r16)
		int x_button_end = r_button->x + r_button->width;
  80cc90:	80c00317 	ldw	r3,12(r16)
		int y_button_end = r_button->y + r_button->height;
  80cc94:	81c00217 	ldw	r7,8(r16)
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cc98:	20800716 	blt	r4,r2,80ccb8 <checkButtonCollision+0x434>
void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
  80cc9c:	10c5883a 	add	r2,r2,r3
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cca0:	00c05004 	movi	r3,320
  80cca4:	1880010e 	bge	r3,r2,80ccac <checkButtonCollision+0x428>
  80cca8:	1805883a 	mov	r2,r3
  80ccac:	2080020e 	bge	r4,r2,80ccb8 <checkButtonCollision+0x434>
  80ccb0:	28c00117 	ldw	r3,4(r5)
  80ccb4:	1982270e 	bge	r3,r6,80d554 <checkButtonCollision+0xcd0>
					r_button->currentlyCollided = 0;
				}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80ccb8:	00800084 	movi	r2,2
  80ccbc:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80ccc0:	80000515 	stw	zero,20(r16)
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80ccc4:	80800417 	ldw	r2,16(r16)
  80ccc8:	1001261e 	bne	r2,zero,80d164 <checkButtonCollision+0x8e0>
  80cccc:	81400517 	ldw	r5,20(r16)
  80ccd0:	00800044 	movi	r2,1
  80ccd4:	28824f26 	beq	r5,r2,80d614 <checkButtonCollision+0xd90>
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80ccd8:	a8c00017 	ldw	r3,0(r21)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ccdc:	a1000017 	ldw	r4,0(r20)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80cce0:	81400415 	stw	r5,16(r16)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80cce4:	18800517 	ldw	r2,20(r3)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cce8:	21000017 	ldw	r4,0(r4)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80ccec:	10c00117 	ldw	r3,4(r2)
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ccf0:	21400017 	ldw	r5,0(r4)
	r_button = NULL;

}

void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;
  80ccf4:	1c400117 	ldw	r17,4(r3)
  80ccf8:	8c000217 	ldw	r16,8(r17)

		int x_button_start = r_button->x;
  80ccfc:	80800017 	ldw	r2,0(r16)
		int y_button_start = r_button->y;
  80cd00:	81800117 	ldw	r6,4(r16)
		int x_button_end = r_button->x + r_button->width;
  80cd04:	80c00317 	ldw	r3,12(r16)
		int y_button_end = r_button->y + r_button->height;
  80cd08:	81c00217 	ldw	r7,8(r16)
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cd0c:	28800716 	blt	r5,r2,80cd2c <checkButtonCollision+0x4a8>
void checkImgCollisionForMouse(void* cursor, void* button){
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
  80cd10:	10c5883a 	add	r2,r2,r3
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cd14:	00c05004 	movi	r3,320
  80cd18:	1880010e 	bge	r3,r2,80cd20 <checkButtonCollision+0x49c>
  80cd1c:	1805883a 	mov	r2,r3
  80cd20:	2880020e 	bge	r5,r2,80cd2c <checkButtonCollision+0x4a8>
  80cd24:	21000117 	ldw	r4,4(r4)
  80cd28:	2181f90e 	bge	r4,r6,80d510 <checkButtonCollision+0xc8c>
					r_button->currentlyCollided = 0;
				}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80cd2c:	00800084 	movi	r2,2
  80cd30:	88800915 	stw	r2,36(r17)
			r_button->currentlyCollided = 0;
  80cd34:	80000515 	stw	zero,20(r16)
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80cd38:	80800417 	ldw	r2,16(r16)
  80cd3c:	10010b1e 	bne	r2,zero,80d16c <checkButtonCollision+0x8e8>
  80cd40:	81400517 	ldw	r5,20(r16)
  80cd44:	00800044 	movi	r2,1
  80cd48:	28823d26 	beq	r5,r2,80d640 <checkButtonCollision+0xdbc>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80cd4c:	aa000017 	ldw	r8,0(r21)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80cd50:	81400415 	stw	r5,16(r16)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80cd54:	04400044 	movi	r17,1
  80cd58:	40800117 	ldw	r2,4(r8)
  80cd5c:	10c00117 	ldw	r3,4(r2)
  80cd60:	18c00017 	ldw	r3,0(r3)
  80cd64:	18800a17 	ldw	r2,40(r3)
  80cd68:	14410926 	beq	r2,r17,80d190 <checkButtonCollision+0x90c>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80cd6c:	40800117 	ldw	r2,4(r8)
  80cd70:	04000084 	movi	r16,2
  80cd74:	10c00117 	ldw	r3,4(r2)
  80cd78:	19000017 	ldw	r4,0(r3)
  80cd7c:	20800617 	ldw	r2,24(r4)
  80cd80:	14010c26 	beq	r2,r16,80d1b4 <checkButtonCollision+0x930>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80cd84:	40800117 	ldw	r2,4(r8)
  80cd88:	10c00117 	ldw	r3,4(r2)
  80cd8c:	18c00117 	ldw	r3,4(r3)
  80cd90:	18800a17 	ldw	r2,40(r3)
  80cd94:	14411126 	beq	r2,r17,80d1dc <checkButtonCollision+0x958>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80cd98:	40800117 	ldw	r2,4(r8)
  80cd9c:	10c00117 	ldw	r3,4(r2)
  80cda0:	19000117 	ldw	r4,4(r3)
  80cda4:	20800617 	ldw	r2,24(r4)
  80cda8:	14011426 	beq	r2,r16,80d1fc <checkButtonCollision+0x978>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80cdac:	40800117 	ldw	r2,4(r8)
  80cdb0:	10c00117 	ldw	r3,4(r2)
  80cdb4:	18c00217 	ldw	r3,8(r3)
  80cdb8:	18800a17 	ldw	r2,40(r3)
  80cdbc:	14411926 	beq	r2,r17,80d224 <checkButtonCollision+0x9a0>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80cdc0:	40800117 	ldw	r2,4(r8)
  80cdc4:	10c00117 	ldw	r3,4(r2)
  80cdc8:	19000217 	ldw	r4,8(r3)
  80cdcc:	20800617 	ldw	r2,24(r4)
  80cdd0:	14011c26 	beq	r2,r16,80d244 <checkButtonCollision+0x9c0>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80cdd4:	40800117 	ldw	r2,4(r8)
  80cdd8:	10c00117 	ldw	r3,4(r2)
  80cddc:	18c00317 	ldw	r3,12(r3)
  80cde0:	18800a17 	ldw	r2,40(r3)
  80cde4:	14412126 	beq	r2,r17,80d26c <checkButtonCollision+0x9e8>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80cde8:	40800117 	ldw	r2,4(r8)
  80cdec:	10c00117 	ldw	r3,4(r2)
  80cdf0:	19000317 	ldw	r4,12(r3)
  80cdf4:	20800617 	ldw	r2,24(r4)
  80cdf8:	14012426 	beq	r2,r16,80d28c <checkButtonCollision+0xa08>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80cdfc:	40800117 	ldw	r2,4(r8)
  80ce00:	10c00117 	ldw	r3,4(r2)
  80ce04:	18c00417 	ldw	r3,16(r3)
  80ce08:	19000a17 	ldw	r4,40(r3)
  80ce0c:	24412926 	beq	r4,r17,80d2b4 <checkButtonCollision+0xa30>
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80ce10:	10c00117 	ldw	r3,4(r2)
  80ce14:	19000417 	ldw	r4,16(r3)
  80ce18:	20800617 	ldw	r2,24(r4)
  80ce1c:	14012d26 	beq	r2,r16,80d2d4 <checkButtonCollision+0xa50>
	// check Volume Buttons
	checkImgCollisionForMouse(cursor, mainFrame->elements[5]->buttons[0]);
	checkImgCollisionForMouse(cursor, mainFrame->elements[5]->buttons[1]);

	actionBtnAnimation(mainFrame);
}
  80ce20:	dfc00717 	ldw	ra,28(sp)
  80ce24:	dd800617 	ldw	r22,24(sp)
  80ce28:	dd400517 	ldw	r21,20(sp)
  80ce2c:	dd000417 	ldw	r20,16(sp)
  80ce30:	dcc00317 	ldw	r19,12(sp)
  80ce34:	dc800217 	ldw	r18,8(sp)
  80ce38:	dc400117 	ldw	r17,4(sp)
  80ce3c:	dc000017 	ldw	r16,0(sp)
  80ce40:	dec00804 	addi	sp,sp,32
  80ce44:	f800283a 	ret
  80ce48:	81400517 	ldw	r5,20(r16)
  80ce4c:	003f3306 	br	80cb1c <checkButtonCollision+0x298>
  80ce50:	81400517 	ldw	r5,20(r16)
  80ce54:	003f1706 	br	80cab4 <checkButtonCollision+0x230>
  80ce58:	81400517 	ldw	r5,20(r16)
  80ce5c:	003efb06 	br	80ca4c <checkButtonCollision+0x1c8>
  80ce60:	81400517 	ldw	r5,20(r16)
  80ce64:	003edf06 	br	80c9e4 <checkButtonCollision+0x160>
  80ce68:	81000517 	ldw	r4,20(r16)
  80ce6c:	003ec506 	br	80c984 <checkButtonCollision+0x100>
  80ce70:	81000517 	ldw	r4,20(r16)
  80ce74:	003ea906 	br	80c91c <checkButtonCollision+0x98>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ce78:	28c00117 	ldw	r3,4(r5)
  80ce7c:	19bf3916 	blt	r3,r6,80cb64 <checkButtonCollision+0x2e0>
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
  80ce80:	31c5883a 	add	r2,r6,r7
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80ce84:	01003c04 	movi	r4,240
  80ce88:	2080010e 	bge	r4,r2,80ce90 <checkButtonCollision+0x60c>
  80ce8c:	2005883a 	mov	r2,r4
  80ce90:	18bf340e 	bge	r3,r2,80cb64 <checkButtonCollision+0x2e0>
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
  80ce94:	a0800203 	ldbu	r2,8(r20)
  80ce98:	10024f26 	beq	r2,zero,80d7d8 <checkButtonCollision+0xf54>
					if (((struct Button*)button)->isClicked == 2) {
  80ce9c:	88c00917 	ldw	r3,36(r17)
  80cea0:	00800084 	movi	r2,2
  80cea4:	18828526 	beq	r3,r2,80d8bc <checkButtonCollision+0x1038>
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
  80cea8:	183f311e 	bne	r3,zero,80cb70 <checkButtonCollision+0x2ec>
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
  80ceac:	88800017 	ldw	r2,0(r17)
  80ceb0:	04800044 	movi	r18,1
  80ceb4:	14829c26 	beq	r2,r18,80d928 <checkButtonCollision+0x10a4>
							((struct Button*)button)->startAnimate = 1;
							animateButton(((struct Button*)button), 1);
						}
						r_button->currentlyCollided = 1;
  80ceb8:	84800515 	stw	r18,20(r16)
						((struct Button*)button)->isClicked = 1;
  80cebc:	8c800915 	stw	r18,36(r17)
  80cec0:	003f2b06 	br	80cb70 <checkButtonCollision+0x2ec>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cec4:	1805883a 	mov	r2,r3
  80cec8:	20bf260e 	bge	r4,r2,80cb64 <checkButtonCollision+0x2e0>
  80cecc:	003fea06 	br	80ce78 <checkButtonCollision+0x5f4>
  80ced0:	21000117 	ldw	r4,4(r4)
  80ced4:	21bf0916 	blt	r4,r6,80cafc <checkButtonCollision+0x278>
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
  80ced8:	31c5883a 	add	r2,r6,r7
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cedc:	00c03c04 	movi	r3,240
  80cee0:	1880010e 	bge	r3,r2,80cee8 <checkButtonCollision+0x664>
  80cee4:	1805883a 	mov	r2,r3
  80cee8:	20bf040e 	bge	r4,r2,80cafc <checkButtonCollision+0x278>
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
  80ceec:	a0800203 	ldbu	r2,8(r20)
  80cef0:	10023326 	beq	r2,zero,80d7c0 <checkButtonCollision+0xf3c>
					if (((struct Button*)button)->isClicked == 2) {
  80cef4:	88c00917 	ldw	r3,36(r17)
  80cef8:	00800084 	movi	r2,2
  80cefc:	18826726 	beq	r3,r2,80d89c <checkButtonCollision+0x1018>
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
  80cf00:	183f011e 	bne	r3,zero,80cb08 <checkButtonCollision+0x284>
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
  80cf04:	88800017 	ldw	r2,0(r17)
  80cf08:	04800044 	movi	r18,1
  80cf0c:	14829026 	beq	r2,r18,80d950 <checkButtonCollision+0x10cc>
							((struct Button*)button)->startAnimate = 1;
							animateButton(((struct Button*)button), 1);
						}
						r_button->currentlyCollided = 1;
  80cf10:	84800515 	stw	r18,20(r16)
						((struct Button*)button)->isClicked = 1;
  80cf14:	8c800915 	stw	r18,36(r17)
  80cf18:	003efb06 	br	80cb08 <checkButtonCollision+0x284>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cf1c:	1805883a 	mov	r2,r3
  80cf20:	28bef60e 	bge	r5,r2,80cafc <checkButtonCollision+0x278>
  80cf24:	003fea06 	br	80ced0 <checkButtonCollision+0x64c>
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80cf28:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cf2c:	31000117 	ldw	r4,4(r6)
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80cf30:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cf34:	18bfff44 	addi	r2,r3,-3
  80cf38:	20be7016 	blt	r4,r2,80c8fc <checkButtonCollision+0x78>
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80cf3c:	19c5883a 	add	r2,r3,r7
  80cf40:	10bfff44 	addi	r2,r2,-3
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cf44:	00c03c04 	movi	r3,240
  80cf48:	1880010e 	bge	r3,r2,80cf50 <checkButtonCollision+0x6cc>
  80cf4c:	1805883a 	mov	r2,r3
  80cf50:	20be6a0e 	bge	r4,r2,80c8fc <checkButtonCollision+0x78>
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
  80cf54:	a0800203 	ldbu	r2,8(r20)
  80cf58:	10021c26 	beq	r2,zero,80d7cc <checkButtonCollision+0xf48>
				if (((struct Button*)button)->isClicked == 2) {
  80cf5c:	88c00917 	ldw	r3,36(r17)
  80cf60:	00800084 	movi	r2,2
  80cf64:	18823926 	beq	r3,r2,80d84c <checkButtonCollision+0xfc8>
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
					((struct Button*)button)->isClicked = 0;
					((struct Cursor*)cursor)->isLeftPressed = false;
				} else if (((struct Button*)button)->isClicked == 0) {
  80cf68:	183e671e 	bne	r3,zero,80c908 <checkButtonCollision+0x84>
					// button is clicked!
					r_button->currentlyCollided = 1;
  80cf6c:	01000044 	movi	r4,1
  80cf70:	81000515 	stw	r4,20(r16)
					((struct Button*)button)->isClicked = 1;
  80cf74:	89000915 	stw	r4,36(r17)
  80cf78:	003e6306 	br	80c908 <checkButtonCollision+0x84>
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cf7c:	2005883a 	mov	r2,r4
  80cf80:	28be5e0e 	bge	r5,r2,80c8fc <checkButtonCollision+0x78>
  80cf84:	003fe806 	br	80cf28 <checkButtonCollision+0x6a4>
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80cf88:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cf8c:	31000117 	ldw	r4,4(r6)
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80cf90:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cf94:	18bfff44 	addi	r2,r3,-3
  80cf98:	20be7216 	blt	r4,r2,80c964 <checkButtonCollision+0xe0>
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80cf9c:	19c5883a 	add	r2,r3,r7
  80cfa0:	10bfff44 	addi	r2,r2,-3
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cfa4:	00c03c04 	movi	r3,240
  80cfa8:	1880010e 	bge	r3,r2,80cfb0 <checkButtonCollision+0x72c>
  80cfac:	1805883a 	mov	r2,r3
  80cfb0:	20be6c0e 	bge	r4,r2,80c964 <checkButtonCollision+0xe0>
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
  80cfb4:	a0800203 	ldbu	r2,8(r20)
  80cfb8:	10020a26 	beq	r2,zero,80d7e4 <checkButtonCollision+0xf60>
				if (((struct Button*)button)->isClicked == 2) {
  80cfbc:	88c00917 	ldw	r3,36(r17)
  80cfc0:	00800084 	movi	r2,2
  80cfc4:	18822526 	beq	r3,r2,80d85c <checkButtonCollision+0xfd8>
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
					((struct Button*)button)->isClicked = 0;
					((struct Cursor*)cursor)->isLeftPressed = false;
				} else if (((struct Button*)button)->isClicked == 0) {
  80cfc8:	183e691e 	bne	r3,zero,80c970 <checkButtonCollision+0xec>
					// button is clicked!
					r_button->currentlyCollided = 1;
  80cfcc:	01000044 	movi	r4,1
  80cfd0:	81000515 	stw	r4,20(r16)
					((struct Button*)button)->isClicked = 1;
  80cfd4:	89000915 	stw	r4,36(r17)
  80cfd8:	003e6506 	br	80c970 <checkButtonCollision+0xec>
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cfdc:	2005883a 	mov	r2,r4
  80cfe0:	28be600e 	bge	r5,r2,80c964 <checkButtonCollision+0xe0>
  80cfe4:	003fe806 	br	80cf88 <checkButtonCollision+0x704>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cfe8:	21000117 	ldw	r4,4(r4)
  80cfec:	21bea916 	blt	r4,r6,80ca94 <checkButtonCollision+0x210>
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
  80cff0:	31c5883a 	add	r2,r6,r7
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80cff4:	00c03c04 	movi	r3,240
  80cff8:	1880010e 	bge	r3,r2,80d000 <checkButtonCollision+0x77c>
  80cffc:	1805883a 	mov	r2,r3
  80d000:	20bea40e 	bge	r4,r2,80ca94 <checkButtonCollision+0x210>
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
  80d004:	a0800203 	ldbu	r2,8(r20)
  80d008:	1001ff26 	beq	r2,zero,80d808 <checkButtonCollision+0xf84>
					if (((struct Button*)button)->isClicked == 2) {
  80d00c:	88c00917 	ldw	r3,36(r17)
  80d010:	00800084 	movi	r2,2
  80d014:	18821526 	beq	r3,r2,80d86c <checkButtonCollision+0xfe8>
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
  80d018:	183ea11e 	bne	r3,zero,80caa0 <checkButtonCollision+0x21c>
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
  80d01c:	88800017 	ldw	r2,0(r17)
  80d020:	04800044 	movi	r18,1
  80d024:	14823126 	beq	r2,r18,80d8ec <checkButtonCollision+0x1068>
							((struct Button*)button)->startAnimate = 1;
							animateButton(((struct Button*)button), 1);
						}
						r_button->currentlyCollided = 1;
  80d028:	84800515 	stw	r18,20(r16)
						((struct Button*)button)->isClicked = 1;
  80d02c:	8c800915 	stw	r18,36(r17)
  80d030:	003e9b06 	br	80caa0 <checkButtonCollision+0x21c>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d034:	1805883a 	mov	r2,r3
  80d038:	28be960e 	bge	r5,r2,80ca94 <checkButtonCollision+0x210>
  80d03c:	003fea06 	br	80cfe8 <checkButtonCollision+0x764>
  80d040:	21000117 	ldw	r4,4(r4)
  80d044:	21be7916 	blt	r4,r6,80ca2c <checkButtonCollision+0x1a8>
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
  80d048:	31c5883a 	add	r2,r6,r7
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d04c:	00c03c04 	movi	r3,240
  80d050:	1880010e 	bge	r3,r2,80d058 <checkButtonCollision+0x7d4>
  80d054:	1805883a 	mov	r2,r3
  80d058:	20be740e 	bge	r4,r2,80ca2c <checkButtonCollision+0x1a8>
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
  80d05c:	a0800203 	ldbu	r2,8(r20)
  80d060:	1001e626 	beq	r2,zero,80d7fc <checkButtonCollision+0xf78>
					if (((struct Button*)button)->isClicked == 2) {
  80d064:	88c00917 	ldw	r3,36(r17)
  80d068:	00800084 	movi	r2,2
  80d06c:	18820326 	beq	r3,r2,80d87c <checkButtonCollision+0xff8>
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
  80d070:	183e711e 	bne	r3,zero,80ca38 <checkButtonCollision+0x1b4>
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
  80d074:	88800017 	ldw	r2,0(r17)
  80d078:	04800044 	movi	r18,1
  80d07c:	14822026 	beq	r2,r18,80d900 <checkButtonCollision+0x107c>
							((struct Button*)button)->startAnimate = 1;
							animateButton(((struct Button*)button), 1);
						}
						r_button->currentlyCollided = 1;
  80d080:	84800515 	stw	r18,20(r16)
						((struct Button*)button)->isClicked = 1;
  80d084:	8c800915 	stw	r18,36(r17)
  80d088:	003e6b06 	br	80ca38 <checkButtonCollision+0x1b4>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d08c:	1805883a 	mov	r2,r3
  80d090:	28be660e 	bge	r5,r2,80ca2c <checkButtonCollision+0x1a8>
  80d094:	003fea06 	br	80d040 <checkButtonCollision+0x7bc>
  80d098:	28c00117 	ldw	r3,4(r5)
  80d09c:	19be4916 	blt	r3,r6,80c9c4 <checkButtonCollision+0x140>
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
  80d0a0:	31c5883a 	add	r2,r6,r7
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d0a4:	01003c04 	movi	r4,240
  80d0a8:	2080010e 	bge	r4,r2,80d0b0 <checkButtonCollision+0x82c>
  80d0ac:	2005883a 	mov	r2,r4
  80d0b0:	18be440e 	bge	r3,r2,80c9c4 <checkButtonCollision+0x140>
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
  80d0b4:	a0800203 	ldbu	r2,8(r20)
  80d0b8:	1001d626 	beq	r2,zero,80d814 <checkButtonCollision+0xf90>
					if (((struct Button*)button)->isClicked == 2) {
  80d0bc:	88c00917 	ldw	r3,36(r17)
  80d0c0:	00800084 	movi	r2,2
  80d0c4:	1881f126 	beq	r3,r2,80d88c <checkButtonCollision+0x1008>
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
  80d0c8:	183e411e 	bne	r3,zero,80c9d0 <checkButtonCollision+0x14c>
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
  80d0cc:	88800017 	ldw	r2,0(r17)
  80d0d0:	04800044 	movi	r18,1
  80d0d4:	14820f26 	beq	r2,r18,80d914 <checkButtonCollision+0x1090>
							((struct Button*)button)->startAnimate = 1;
							animateButton(((struct Button*)button), 1);
						}
						r_button->currentlyCollided = 1;
  80d0d8:	84800515 	stw	r18,20(r16)
						((struct Button*)button)->isClicked = 1;
  80d0dc:	8c800915 	stw	r18,36(r17)
  80d0e0:	003e3b06 	br	80c9d0 <checkButtonCollision+0x14c>
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d0e4:	1805883a 	mov	r2,r3
  80d0e8:	20be360e 	bge	r4,r2,80c9c4 <checkButtonCollision+0x140>
  80d0ec:	003fea06 	br	80d098 <checkButtonCollision+0x814>
				r_button->currentlyCollided = 0;
			}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80d0f0:	8d800915 	stw	r22,36(r17)
			r_button->currentlyCollided = 0;
  80d0f4:	80000515 	stw	zero,20(r16)
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80d0f8:	80800417 	ldw	r2,16(r16)
  80d0fc:	10000a1e 	bne	r2,zero,80d128 <checkButtonCollision+0x8a4>
  80d100:	81000517 	ldw	r4,20(r16)
  80d104:	00800044 	movi	r2,1
  80d108:	20800926 	beq	r4,r2,80d130 <checkButtonCollision+0x8ac>
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[3]);
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[4]);

	int i;
	if (mainFrame->currentPanel == 0){
		for (i = 1; i <= mainFrame->elements[2]->button_size; i++){
  80d10c:	40c00217 	ldw	r3,8(r8)
			((struct Button*)button)->collide(((struct Button*)button));
			((struct Cursor*)cursor)->isLeftPressed = 0;
		}
	}

	r_button->previouslyCollided = r_button->currentlyCollided;
  80d110:	81000415 	stw	r4,16(r16)
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[3]);
	checkImgCollisionForMouse(cursor, mainFrame->elements[1]->buttons[4]);

	int i;
	if (mainFrame->currentPanel == 0){
		for (i = 1; i <= mainFrame->elements[2]->button_size; i++){
  80d114:	9cc00044 	addi	r19,r19,1
  80d118:	18800317 	ldw	r2,12(r3)
  80d11c:	94800104 	addi	r18,r18,4
  80d120:	14fea30e 	bge	r2,r19,80cbb0 <checkButtonCollision+0x32c>
  80d124:	003ed206 	br	80cc70 <checkButtonCollision+0x3ec>
  80d128:	81000517 	ldw	r4,20(r16)
  80d12c:	003ff706 	br	80d10c <checkButtonCollision+0x888>
			r_button->currentlyCollided = 0;
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		if (((struct Button*)button)->isClicked == 1){
  80d130:	88800917 	ldw	r2,36(r17)
  80d134:	113ff51e 	bne	r2,r4,80d10c <checkButtonCollision+0x888>
			printf("Collision detected\n");
  80d138:	010020f4 	movhi	r4,131
  80d13c:	210eb104 	addi	r4,r4,15044
  80d140:	08221800 	call	822180 <puts>
			((struct Button*)button)->collide(((struct Button*)button));
  80d144:	88c00f17 	ldw	r3,60(r17)
  80d148:	8809883a 	mov	r4,r17
  80d14c:	183ee83a 	callr	r3
  80d150:	aa000017 	ldw	r8,0(r21)
  80d154:	a2400017 	ldw	r9,0(r20)
  80d158:	81000517 	ldw	r4,20(r16)
			((struct Cursor*)cursor)->isLeftPressed = 0;
  80d15c:	a0000205 	stb	zero,8(r20)
  80d160:	003fea06 	br	80d10c <checkButtonCollision+0x888>
  80d164:	81400517 	ldw	r5,20(r16)
  80d168:	003edb06 	br	80ccd8 <checkButtonCollision+0x454>
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80d16c:	aa000017 	ldw	r8,0(r21)
  80d170:	81400517 	ldw	r5,20(r16)
  80d174:	04400044 	movi	r17,1
  80d178:	40800117 	ldw	r2,4(r8)
				((struct Button*)button)->collide(((struct Button*)button));
				((struct Cursor*)cursor)->isLeftPressed = 0;
			}
		}

		r_button->previouslyCollided = r_button->currentlyCollided;
  80d17c:	81400415 	stw	r5,16(r16)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80d180:	10c00117 	ldw	r3,4(r2)
  80d184:	18c00017 	ldw	r3,0(r3)
  80d188:	18800a17 	ldw	r2,40(r3)
  80d18c:	147ef71e 	bne	r2,r17,80cd6c <checkButtonCollision+0x4e8>
			mainFrame->elements[1]->buttons[i]->frame++;
  80d190:	18800617 	ldw	r2,24(r3)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80d194:	04000084 	movi	r16,2
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
			mainFrame->elements[1]->buttons[i]->frame++;
  80d198:	1445883a 	add	r2,r2,r17
  80d19c:	18800615 	stw	r2,24(r3)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80d1a0:	40800117 	ldw	r2,4(r8)
  80d1a4:	10c00117 	ldw	r3,4(r2)
  80d1a8:	19000017 	ldw	r4,0(r3)
  80d1ac:	20800617 	ldw	r2,24(r4)
  80d1b0:	143ef41e 	bne	r2,r16,80cd84 <checkButtonCollision+0x500>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80d1b4:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80d1b8:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80d1bc:	000b883a 	mov	r5,zero
  80d1c0:	08007c40 	call	8007c4 <animateButton>
  80d1c4:	aa000017 	ldw	r8,0(r21)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80d1c8:	40800117 	ldw	r2,4(r8)
  80d1cc:	10c00117 	ldw	r3,4(r2)
  80d1d0:	18c00117 	ldw	r3,4(r3)
  80d1d4:	18800a17 	ldw	r2,40(r3)
  80d1d8:	147eef1e 	bne	r2,r17,80cd98 <checkButtonCollision+0x514>
			mainFrame->elements[1]->buttons[i]->frame++;
  80d1dc:	18800617 	ldw	r2,24(r3)
  80d1e0:	10800044 	addi	r2,r2,1
  80d1e4:	18800615 	stw	r2,24(r3)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80d1e8:	40800117 	ldw	r2,4(r8)
  80d1ec:	10c00117 	ldw	r3,4(r2)
  80d1f0:	19000117 	ldw	r4,4(r3)
  80d1f4:	20800617 	ldw	r2,24(r4)
  80d1f8:	143eec1e 	bne	r2,r16,80cdac <checkButtonCollision+0x528>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80d1fc:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80d200:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80d204:	000b883a 	mov	r5,zero
  80d208:	08007c40 	call	8007c4 <animateButton>
  80d20c:	aa000017 	ldw	r8,0(r21)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80d210:	40800117 	ldw	r2,4(r8)
  80d214:	10c00117 	ldw	r3,4(r2)
  80d218:	18c00217 	ldw	r3,8(r3)
  80d21c:	18800a17 	ldw	r2,40(r3)
  80d220:	147ee71e 	bne	r2,r17,80cdc0 <checkButtonCollision+0x53c>
			mainFrame->elements[1]->buttons[i]->frame++;
  80d224:	18800617 	ldw	r2,24(r3)
  80d228:	10800044 	addi	r2,r2,1
  80d22c:	18800615 	stw	r2,24(r3)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80d230:	40800117 	ldw	r2,4(r8)
  80d234:	10c00117 	ldw	r3,4(r2)
  80d238:	19000217 	ldw	r4,8(r3)
  80d23c:	20800617 	ldw	r2,24(r4)
  80d240:	143ee41e 	bne	r2,r16,80cdd4 <checkButtonCollision+0x550>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80d244:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80d248:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80d24c:	000b883a 	mov	r5,zero
  80d250:	08007c40 	call	8007c4 <animateButton>
  80d254:	aa000017 	ldw	r8,0(r21)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80d258:	40800117 	ldw	r2,4(r8)
  80d25c:	10c00117 	ldw	r3,4(r2)
  80d260:	18c00317 	ldw	r3,12(r3)
  80d264:	18800a17 	ldw	r2,40(r3)
  80d268:	147edf1e 	bne	r2,r17,80cde8 <checkButtonCollision+0x564>
			mainFrame->elements[1]->buttons[i]->frame++;
  80d26c:	18800617 	ldw	r2,24(r3)
  80d270:	10800044 	addi	r2,r2,1
  80d274:	18800615 	stw	r2,24(r3)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80d278:	40800117 	ldw	r2,4(r8)
  80d27c:	10c00117 	ldw	r3,4(r2)
  80d280:	19000317 	ldw	r4,12(r3)
  80d284:	20800617 	ldw	r2,24(r4)
  80d288:	143edc1e 	bne	r2,r16,80cdfc <checkButtonCollision+0x578>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80d28c:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80d290:	20000615 	stw	zero,24(r4)
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80d294:	000b883a 	mov	r5,zero
  80d298:	08007c40 	call	8007c4 <animateButton>
  80d29c:	aa000017 	ldw	r8,0(r21)
void actionBtnAnimation(void* mf){
	struct Frame* mainFrame = (struct Frame*)mf;

	int i;
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
  80d2a0:	40800117 	ldw	r2,4(r8)
  80d2a4:	10c00117 	ldw	r3,4(r2)
  80d2a8:	18c00417 	ldw	r3,16(r3)
  80d2ac:	19000a17 	ldw	r4,40(r3)
  80d2b0:	247ed71e 	bne	r4,r17,80ce10 <checkButtonCollision+0x58c>
			mainFrame->elements[1]->buttons[i]->frame++;
  80d2b4:	18800617 	ldw	r2,24(r3)
  80d2b8:	1105883a 	add	r2,r2,r4
  80d2bc:	18800615 	stw	r2,24(r3)
  80d2c0:	40800117 	ldw	r2,4(r8)
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
  80d2c4:	10c00117 	ldw	r3,4(r2)
  80d2c8:	19000417 	ldw	r4,16(r3)
  80d2cc:	20800617 	ldw	r2,24(r4)
  80d2d0:	143ed31e 	bne	r2,r16,80ce20 <checkButtonCollision+0x59c>
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
			mainFrame->elements[1]->buttons[i]->frame = 0;
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80d2d4:	000b883a 	mov	r5,zero
	for (i = 0; i < 5; i++){
		if (mainFrame->elements[1]->buttons[i]->startAnimate == 1){
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
  80d2d8:	20000a15 	stw	zero,40(r4)
			mainFrame->elements[1]->buttons[i]->frame = 0;
  80d2dc:	20000615 	stw	zero,24(r4)
	// check Volume Buttons
	checkImgCollisionForMouse(cursor, mainFrame->elements[5]->buttons[0]);
	checkImgCollisionForMouse(cursor, mainFrame->elements[5]->buttons[1]);

	actionBtnAnimation(mainFrame);
}
  80d2e0:	dfc00717 	ldw	ra,28(sp)
  80d2e4:	dd800617 	ldw	r22,24(sp)
  80d2e8:	dd400517 	ldw	r21,20(sp)
  80d2ec:	dd000417 	ldw	r20,16(sp)
  80d2f0:	dcc00317 	ldw	r19,12(sp)
  80d2f4:	dc800217 	ldw	r18,8(sp)
  80d2f8:	dc400117 	ldw	r17,4(sp)
  80d2fc:	dc000017 	ldw	r16,0(sp)
  80d300:	dec00804 	addi	sp,sp,32
			mainFrame->elements[1]->buttons[i]->frame++;
		}
		if (mainFrame->elements[1]->buttons[i]->frame == 2){
			mainFrame->elements[1]->buttons[i]->startAnimate = 0;
			mainFrame->elements[1]->buttons[i]->frame = 0;
			animateButton(mainFrame->elements[1]->buttons[i], 0);
  80d304:	08007c41 	jmpi	8007c4 <animateButton>
			r_button->currentlyCollided = 0;
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
			if (((struct Button*)button)->isClicked == 1){
  80d308:	88800917 	ldw	r2,36(r17)
  80d30c:	117db51e 	bne	r2,r5,80c9e4 <checkButtonCollision+0x160>
				printf("Collision detected\n");
  80d310:	010020f4 	movhi	r4,131
  80d314:	210eb104 	addi	r4,r4,15044
  80d318:	08221800 	call	822180 <puts>
				((struct Button*)button)->collide(((struct Button*)button));
  80d31c:	88c00f17 	ldw	r3,60(r17)
  80d320:	8809883a 	mov	r4,r17
  80d324:	183ee83a 	callr	r3
  80d328:	81400517 	ldw	r5,20(r16)
				((struct Cursor*)cursor)->isLeftPressed = 0;
  80d32c:	a0000205 	stb	zero,8(r20)
  80d330:	003dac06 	br	80c9e4 <checkButtonCollision+0x160>
			r_button->currentlyCollided = 0;
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
			if (((struct Button*)button)->isClicked == 1){
  80d334:	88800917 	ldw	r2,36(r17)
  80d338:	117df81e 	bne	r2,r5,80cb1c <checkButtonCollision+0x298>
				printf("Collision detected\n");
  80d33c:	010020f4 	movhi	r4,131
  80d340:	210eb104 	addi	r4,r4,15044
  80d344:	08221800 	call	822180 <puts>
				((struct Button*)button)->collide(((struct Button*)button));
  80d348:	88c00f17 	ldw	r3,60(r17)
  80d34c:	8809883a 	mov	r4,r17
  80d350:	183ee83a 	callr	r3
  80d354:	81400517 	ldw	r5,20(r16)
				((struct Cursor*)cursor)->isLeftPressed = 0;
  80d358:	a0000205 	stb	zero,8(r20)
  80d35c:	003def06 	br	80cb1c <checkButtonCollision+0x298>
			r_button->currentlyCollided = 0;
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
			if (((struct Button*)button)->isClicked == 1){
  80d360:	88800917 	ldw	r2,36(r17)
  80d364:	117e071e 	bne	r2,r5,80cb84 <checkButtonCollision+0x300>
				printf("Collision detected\n");
  80d368:	010020f4 	movhi	r4,131
  80d36c:	210eb104 	addi	r4,r4,15044
  80d370:	08221800 	call	822180 <puts>
				((struct Button*)button)->collide(((struct Button*)button));
  80d374:	88c00f17 	ldw	r3,60(r17)
  80d378:	8809883a 	mov	r4,r17
  80d37c:	183ee83a 	callr	r3
  80d380:	81400517 	ldw	r5,20(r16)
				((struct Cursor*)cursor)->isLeftPressed = 0;
  80d384:	a0000205 	stb	zero,8(r20)
  80d388:	003dfe06 	br	80cb84 <checkButtonCollision+0x300>
			r_button->currentlyCollided = 0;
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		if (((struct Button*)button)->isClicked == 1){
  80d38c:	88800917 	ldw	r2,36(r17)
  80d390:	113d7c1e 	bne	r2,r4,80c984 <checkButtonCollision+0x100>
			printf("Collision detected\n");
  80d394:	010020f4 	movhi	r4,131
  80d398:	210eb104 	addi	r4,r4,15044
  80d39c:	08221800 	call	822180 <puts>
			((struct Button*)button)->collide(((struct Button*)button));
  80d3a0:	88c00f17 	ldw	r3,60(r17)
  80d3a4:	8809883a 	mov	r4,r17
  80d3a8:	183ee83a 	callr	r3
  80d3ac:	aa000017 	ldw	r8,0(r21)
  80d3b0:	a2400017 	ldw	r9,0(r20)
  80d3b4:	81000517 	ldw	r4,20(r16)
			((struct Cursor*)cursor)->isLeftPressed = 0;
  80d3b8:	a0000205 	stb	zero,8(r20)
  80d3bc:	003d7106 	br	80c984 <checkButtonCollision+0x100>
			r_button->currentlyCollided = 0;
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
			if (((struct Button*)button)->isClicked == 1){
  80d3c0:	88800917 	ldw	r2,36(r17)
  80d3c4:	117dbb1e 	bne	r2,r5,80cab4 <checkButtonCollision+0x230>
				printf("Collision detected\n");
  80d3c8:	010020f4 	movhi	r4,131
  80d3cc:	210eb104 	addi	r4,r4,15044
  80d3d0:	08221800 	call	822180 <puts>
				((struct Button*)button)->collide(((struct Button*)button));
  80d3d4:	88c00f17 	ldw	r3,60(r17)
  80d3d8:	8809883a 	mov	r4,r17
  80d3dc:	183ee83a 	callr	r3
  80d3e0:	81400517 	ldw	r5,20(r16)
				((struct Cursor*)cursor)->isLeftPressed = 0;
  80d3e4:	a0000205 	stb	zero,8(r20)
  80d3e8:	003db206 	br	80cab4 <checkButtonCollision+0x230>
	if (mainFrame->currentPanel == 0){
		for (i = 1; i <= mainFrame->elements[2]->button_size; i++){
			checkTxtCollisionForMouse(cursor, mainFrame->elements[2]->buttons[i]);
		}
	} else if (mainFrame->currentPanel == 1){
		for (i = 1; i <= mainFrame->elements[3]->button_size; i++){
  80d3ec:	aa000017 	ldw	r8,0(r21)
  80d3f0:	40c00317 	ldw	r3,12(r8)
  80d3f4:	18800317 	ldw	r2,12(r3)
  80d3f8:	0080670e 	bge	zero,r2,80d598 <checkButtonCollision+0xd14>
  80d3fc:	a2400017 	ldw	r9,0(r20)
  80d400:	2027883a 	mov	r19,r4
  80d404:	04800104 	movi	r18,4
  80d408:	05800084 	movi	r22,2
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80d40c:	18800117 	ldw	r2,4(r3)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d410:	49800017 	ldw	r6,0(r9)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80d414:	9085883a 	add	r2,r18,r2
  80d418:	14400017 	ldw	r17,0(r2)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d41c:	31400017 	ldw	r5,0(r6)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80d420:	8c000217 	ldw	r16,8(r17)

	int x_button_start = 4 * r_button->x;
  80d424:	80800017 	ldw	r2,0(r16)
	int y_button_start = 4 * r_button->y - 3;
  80d428:	80c00117 	ldw	r3,4(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
  80d42c:	81000317 	ldw	r4,12(r16)
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
  80d430:	1085883a 	add	r2,r2,r2
  80d434:	1085883a 	add	r2,r2,r2
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80d438:	81c00217 	ldw	r7,8(r16)
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d43c:	28805816 	blt	r5,r2,80d5a0 <checkButtonCollision+0xd1c>
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
  80d440:	1105883a 	add	r2,r2,r4
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d444:	01005004 	movi	r4,320
  80d448:	2080010e 	bge	r4,r2,80d450 <checkButtonCollision+0xbcc>
  80d44c:	2005883a 	mov	r2,r4
  80d450:	2880530e 	bge	r5,r2,80d5a0 <checkButtonCollision+0xd1c>
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80d454:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d458:	31000117 	ldw	r4,4(r6)
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80d45c:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d460:	18bfff44 	addi	r2,r3,-3
  80d464:	20804e16 	blt	r4,r2,80d5a0 <checkButtonCollision+0xd1c>
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80d468:	19c5883a 	add	r2,r3,r7
  80d46c:	10bfff44 	addi	r2,r2,-3
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d470:	00c03c04 	movi	r3,240
  80d474:	1880010e 	bge	r3,r2,80d47c <checkButtonCollision+0xbf8>
  80d478:	1805883a 	mov	r2,r3
  80d47c:	2080480e 	bge	r4,r2,80d5a0 <checkButtonCollision+0xd1c>
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
  80d480:	a0800203 	ldbu	r2,8(r20)
  80d484:	1000c826 	beq	r2,zero,80d7a8 <checkButtonCollision+0xf24>
				if (((struct Button*)button)->isClicked == 2) {
  80d488:	88800917 	ldw	r2,36(r17)
  80d48c:	1580eb26 	beq	r2,r22,80d83c <checkButtonCollision+0xfb8>
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
					((struct Button*)button)->isClicked = 0;
					((struct Cursor*)cursor)->isLeftPressed = false;
				} else if (((struct Button*)button)->isClicked == 0) {
  80d490:	1000451e 	bne	r2,zero,80d5a8 <checkButtonCollision+0xd24>
					// button is clicked!
					r_button->currentlyCollided = 1;
  80d494:	01000044 	movi	r4,1
  80d498:	81000515 	stw	r4,20(r16)
					((struct Button*)button)->isClicked = 1;
  80d49c:	89000915 	stw	r4,36(r17)
  80d4a0:	00004106 	br	80d5a8 <checkButtonCollision+0xd24>
			r_button->currentlyCollided = 0;
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
			if (((struct Button*)button)->isClicked == 1){
  80d4a4:	88800917 	ldw	r2,36(r17)
  80d4a8:	117d681e 	bne	r2,r5,80ca4c <checkButtonCollision+0x1c8>
				printf("Collision detected\n");
  80d4ac:	010020f4 	movhi	r4,131
  80d4b0:	210eb104 	addi	r4,r4,15044
  80d4b4:	08221800 	call	822180 <puts>
				((struct Button*)button)->collide(((struct Button*)button));
  80d4b8:	88c00f17 	ldw	r3,60(r17)
  80d4bc:	8809883a 	mov	r4,r17
  80d4c0:	183ee83a 	callr	r3
  80d4c4:	81400517 	ldw	r5,20(r16)
				((struct Cursor*)cursor)->isLeftPressed = 0;
  80d4c8:	a0000205 	stb	zero,8(r20)
  80d4cc:	003d5f06 	br	80ca4c <checkButtonCollision+0x1c8>
			r_button->currentlyCollided = 0;
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		if (((struct Button*)button)->isClicked == 1){
  80d4d0:	88800917 	ldw	r2,36(r17)
  80d4d4:	113d111e 	bne	r2,r4,80c91c <checkButtonCollision+0x98>
			printf("Collision detected\n");
  80d4d8:	010020f4 	movhi	r4,131
  80d4dc:	210eb104 	addi	r4,r4,15044
  80d4e0:	08221800 	call	822180 <puts>
			((struct Button*)button)->collide(((struct Button*)button));
  80d4e4:	88c00f17 	ldw	r3,60(r17)
  80d4e8:	8809883a 	mov	r4,r17
  80d4ec:	183ee83a 	callr	r3
  80d4f0:	aa000017 	ldw	r8,0(r21)
  80d4f4:	a2400017 	ldw	r9,0(r20)
  80d4f8:	81000517 	ldw	r4,20(r16)
			((struct Cursor*)cursor)->isLeftPressed = 0;
  80d4fc:	a0000205 	stb	zero,8(r20)
  80d500:	003d0606 	br	80c91c <checkButtonCollision+0x98>
					// button is clicked!
					r_button->currentlyCollided = 1;
					((struct Button*)button)->isClicked = 1;
				}
			} else {
				((struct Button*)button)->isClicked = 0;
  80d504:	88000915 	stw	zero,36(r17)
				r_button->currentlyCollided = 0;
  80d508:	80000515 	stw	zero,20(r16)
  80d50c:	003efa06 	br	80d0f8 <checkButtonCollision+0x874>
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
  80d510:	31c5883a 	add	r2,r6,r7
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d514:	00c03c04 	movi	r3,240
  80d518:	1880010e 	bge	r3,r2,80d520 <checkButtonCollision+0xc9c>
  80d51c:	1805883a 	mov	r2,r3
  80d520:	20be020e 	bge	r4,r2,80cd2c <checkButtonCollision+0x4a8>
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
  80d524:	a0800203 	ldbu	r2,8(r20)
  80d528:	1000b126 	beq	r2,zero,80d7f0 <checkButtonCollision+0xf6c>
					if (((struct Button*)button)->isClicked == 2) {
  80d52c:	88c00917 	ldw	r3,36(r17)
  80d530:	00800084 	movi	r2,2
  80d534:	1880dd26 	beq	r3,r2,80d8ac <checkButtonCollision+0x1028>
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
  80d538:	183dff1e 	bne	r3,zero,80cd38 <checkButtonCollision+0x4b4>
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
  80d53c:	88800017 	ldw	r2,0(r17)
  80d540:	04800044 	movi	r18,1
  80d544:	14810726 	beq	r2,r18,80d964 <checkButtonCollision+0x10e0>
							((struct Button*)button)->startAnimate = 1;
							animateButton(((struct Button*)button), 1);
						}
						r_button->currentlyCollided = 1;
  80d548:	84800515 	stw	r18,20(r16)
						((struct Button*)button)->isClicked = 1;
  80d54c:	8c800915 	stw	r18,36(r17)
  80d550:	003df906 	br	80cd38 <checkButtonCollision+0x4b4>
		struct Range* r_button = (struct Range*)((struct Button*)button)->range;

		int x_button_start = r_button->x;
		int y_button_start = r_button->y;
		int x_button_end = r_button->x + r_button->width;
		int y_button_end = r_button->y + r_button->height;
  80d554:	31c5883a 	add	r2,r6,r7
		if (x_button_end > 320) {x_button_end = 320;}
		if (y_button_end > 240) {y_button_end = 240;}

		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d558:	01003c04 	movi	r4,240
  80d55c:	2080010e 	bge	r4,r2,80d564 <checkButtonCollision+0xce0>
  80d560:	2005883a 	mov	r2,r4
  80d564:	18bdd40e 	bge	r3,r2,80ccb8 <checkButtonCollision+0x434>
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
  80d568:	a0800203 	ldbu	r2,8(r20)
  80d56c:	10009126 	beq	r2,zero,80d7b4 <checkButtonCollision+0xf30>
					if (((struct Button*)button)->isClicked == 2) {
  80d570:	88c00917 	ldw	r3,36(r17)
  80d574:	00800084 	movi	r2,2
  80d578:	1880d426 	beq	r3,r2,80d8cc <checkButtonCollision+0x1048>
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
  80d57c:	183dd11e 	bne	r3,zero,80ccc4 <checkButtonCollision+0x440>
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
  80d580:	88800017 	ldw	r2,0(r17)
  80d584:	04800044 	movi	r18,1
  80d588:	1480ec26 	beq	r2,r18,80d93c <checkButtonCollision+0x10b8>
							((struct Button*)button)->startAnimate = 1;
							animateButton(((struct Button*)button), 1);
						}
						r_button->currentlyCollided = 1;
  80d58c:	84800515 	stw	r18,20(r16)
						((struct Button*)button)->isClicked = 1;
  80d590:	8c800915 	stw	r18,36(r17)
  80d594:	003dcb06 	br	80ccc4 <checkButtonCollision+0x440>
  80d598:	a2400017 	ldw	r9,0(r20)
  80d59c:	003db406 	br	80cc70 <checkButtonCollision+0x3ec>
				r_button->currentlyCollided = 0;
			}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80d5a0:	8d800915 	stw	r22,36(r17)
			r_button->currentlyCollided = 0;
  80d5a4:	80000515 	stw	zero,20(r16)
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80d5a8:	80800417 	ldw	r2,16(r16)
  80d5ac:	10000a1e 	bne	r2,zero,80d5d8 <checkButtonCollision+0xd54>
  80d5b0:	81000517 	ldw	r4,20(r16)
  80d5b4:	00800044 	movi	r2,1
  80d5b8:	20800926 	beq	r4,r2,80d5e0 <checkButtonCollision+0xd5c>
	if (mainFrame->currentPanel == 0){
		for (i = 1; i <= mainFrame->elements[2]->button_size; i++){
			checkTxtCollisionForMouse(cursor, mainFrame->elements[2]->buttons[i]);
		}
	} else if (mainFrame->currentPanel == 1){
		for (i = 1; i <= mainFrame->elements[3]->button_size; i++){
  80d5bc:	40c00317 	ldw	r3,12(r8)
			((struct Button*)button)->collide(((struct Button*)button));
			((struct Cursor*)cursor)->isLeftPressed = 0;
		}
	}

	r_button->previouslyCollided = r_button->currentlyCollided;
  80d5c0:	81000415 	stw	r4,16(r16)
	if (mainFrame->currentPanel == 0){
		for (i = 1; i <= mainFrame->elements[2]->button_size; i++){
			checkTxtCollisionForMouse(cursor, mainFrame->elements[2]->buttons[i]);
		}
	} else if (mainFrame->currentPanel == 1){
		for (i = 1; i <= mainFrame->elements[3]->button_size; i++){
  80d5c4:	9cc00044 	addi	r19,r19,1
  80d5c8:	18800317 	ldw	r2,12(r3)
  80d5cc:	94800104 	addi	r18,r18,4
  80d5d0:	14ff8e0e 	bge	r2,r19,80d40c <checkButtonCollision+0xb88>
  80d5d4:	003da606 	br	80cc70 <checkButtonCollision+0x3ec>
  80d5d8:	81000517 	ldw	r4,20(r16)
  80d5dc:	003ff706 	br	80d5bc <checkButtonCollision+0xd38>
			r_button->currentlyCollided = 0;
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		if (((struct Button*)button)->isClicked == 1){
  80d5e0:	88800917 	ldw	r2,36(r17)
  80d5e4:	113ff51e 	bne	r2,r4,80d5bc <checkButtonCollision+0xd38>
			printf("Collision detected\n");
  80d5e8:	010020f4 	movhi	r4,131
  80d5ec:	210eb104 	addi	r4,r4,15044
  80d5f0:	08221800 	call	822180 <puts>
			((struct Button*)button)->collide(((struct Button*)button));
  80d5f4:	88c00f17 	ldw	r3,60(r17)
  80d5f8:	8809883a 	mov	r4,r17
  80d5fc:	183ee83a 	callr	r3
  80d600:	aa000017 	ldw	r8,0(r21)
  80d604:	a2400017 	ldw	r9,0(r20)
  80d608:	81000517 	ldw	r4,20(r16)
			((struct Cursor*)cursor)->isLeftPressed = 0;
  80d60c:	a0000205 	stb	zero,8(r20)
  80d610:	003fea06 	br	80d5bc <checkButtonCollision+0xd38>
			r_button->currentlyCollided = 0;
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
			if (((struct Button*)button)->isClicked == 1){
  80d614:	88800917 	ldw	r2,36(r17)
  80d618:	117daf1e 	bne	r2,r5,80ccd8 <checkButtonCollision+0x454>
				printf("Collision detected\n");
  80d61c:	010020f4 	movhi	r4,131
  80d620:	210eb104 	addi	r4,r4,15044
  80d624:	08221800 	call	822180 <puts>
				((struct Button*)button)->collide(((struct Button*)button));
  80d628:	88c00f17 	ldw	r3,60(r17)
  80d62c:	8809883a 	mov	r4,r17
  80d630:	183ee83a 	callr	r3
  80d634:	81400517 	ldw	r5,20(r16)
				((struct Cursor*)cursor)->isLeftPressed = 0;
  80d638:	a0000205 	stb	zero,8(r20)
  80d63c:	003da606 	br	80ccd8 <checkButtonCollision+0x454>
			r_button->currentlyCollided = 0;
		}

		// this state will only happen once.
		if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
			if (((struct Button*)button)->isClicked == 1){
  80d640:	88800917 	ldw	r2,36(r17)
  80d644:	117dc11e 	bne	r2,r5,80cd4c <checkButtonCollision+0x4c8>
				printf("Collision detected\n");
  80d648:	010020f4 	movhi	r4,131
  80d64c:	210eb104 	addi	r4,r4,15044
  80d650:	08221800 	call	822180 <puts>
				((struct Button*)button)->collide(((struct Button*)button));
  80d654:	88c00f17 	ldw	r3,60(r17)
  80d658:	8809883a 	mov	r4,r17
  80d65c:	183ee83a 	callr	r3
  80d660:	81400517 	ldw	r5,20(r16)
				((struct Cursor*)cursor)->isLeftPressed = 0;
  80d664:	a0000205 	stb	zero,8(r20)
  80d668:	003db806 	br	80cd4c <checkButtonCollision+0x4c8>
	} else if (mainFrame->currentPanel == 1){
		for (i = 1; i <= mainFrame->elements[3]->button_size; i++){
			checkTxtCollisionForMouse(cursor, mainFrame->elements[3]->buttons[i]);
		}
	} else if (mainFrame->currentPanel == 2){
		for (i = 1; i <= mainFrame->elements[3]->elements[0]->button_size; i++){
  80d66c:	aa000017 	ldw	r8,0(r21)
  80d670:	40800317 	ldw	r2,12(r8)
  80d674:	10c00017 	ldw	r3,0(r2)
  80d678:	18c00017 	ldw	r3,0(r3)
  80d67c:	18800317 	ldw	r2,12(r3)
  80d680:	00bfc50e 	bge	zero,r2,80d598 <checkButtonCollision+0xd14>
  80d684:	a2400017 	ldw	r9,0(r20)
  80d688:	2827883a 	mov	r19,r5
  80d68c:	202d883a 	mov	r22,r4
  80d690:	04800104 	movi	r18,4
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80d694:	18800117 	ldw	r2,4(r3)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d698:	49800017 	ldw	r6,0(r9)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80d69c:	1485883a 	add	r2,r2,r18
  80d6a0:	14400017 	ldw	r17,0(r2)
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d6a4:	31400017 	ldw	r5,0(r6)
}
/**
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);
  80d6a8:	8c000217 	ldw	r16,8(r17)

	int x_button_start = 4 * r_button->x;
  80d6ac:	80800017 	ldw	r2,0(r16)
	int y_button_start = 4 * r_button->y - 3;
  80d6b0:	80c00117 	ldw	r3,4(r16)
	int x_button_end = 4 * r_button->x + r_button->width;
  80d6b4:	81000317 	ldw	r4,12(r16)
 * checkTextCollisionForMouse
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
  80d6b8:	1085883a 	add	r2,r2,r2
  80d6bc:	1085883a 	add	r2,r2,r2
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80d6c0:	81c00217 	ldw	r7,8(r16)
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d6c4:	28801916 	blt	r5,r2,80d72c <checkButtonCollision+0xea8>
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
  80d6c8:	1105883a 	add	r2,r2,r4
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d6cc:	01005004 	movi	r4,320
  80d6d0:	2080010e 	bge	r4,r2,80d6d8 <checkButtonCollision+0xe54>
  80d6d4:	2005883a 	mov	r2,r4
  80d6d8:	2880140e 	bge	r5,r2,80d72c <checkButtonCollision+0xea8>
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80d6dc:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d6e0:	31000117 	ldw	r4,4(r6)
 */
void checkTxtCollisionForMouse(void* cursor, void* button){
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
  80d6e4:	18c7883a 	add	r3,r3,r3
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d6e8:	18bfff44 	addi	r2,r3,-3
  80d6ec:	20800f16 	blt	r4,r2,80d72c <checkButtonCollision+0xea8>
	struct Range* r_button = ((struct Range*)((struct Button*)button)->range);

	int x_button_start = 4 * r_button->x;
	int y_button_start = 4 * r_button->y - 3;
	int x_button_end = 4 * r_button->x + r_button->width;
	int y_button_end = 4 * r_button->y + r_button->height-3;
  80d6f0:	19c5883a 	add	r2,r3,r7
  80d6f4:	10bfff44 	addi	r2,r2,-3
	if (x_button_end > 320) {x_button_end = 320;}
	if (y_button_end > 240) {y_button_end = 240;}

	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
  80d6f8:	00c03c04 	movi	r3,240
  80d6fc:	1880010e 	bge	r3,r2,80d704 <checkButtonCollision+0xe80>
  80d700:	1805883a 	mov	r2,r3
  80d704:	2080090e 	bge	r4,r2,80d72c <checkButtonCollision+0xea8>
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
  80d708:	a0800203 	ldbu	r2,8(r20)
  80d70c:	10004426 	beq	r2,zero,80d820 <checkButtonCollision+0xf9c>
				if (((struct Button*)button)->isClicked == 2) {
  80d710:	88800917 	ldw	r2,36(r17)
  80d714:	15807126 	beq	r2,r22,80d8dc <checkButtonCollision+0x1058>
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
					((struct Button*)button)->isClicked = 0;
					((struct Cursor*)cursor)->isLeftPressed = false;
				} else if (((struct Button*)button)->isClicked == 0) {
  80d718:	1000061e 	bne	r2,zero,80d734 <checkButtonCollision+0xeb0>
					// button is clicked!
					r_button->currentlyCollided = 1;
  80d71c:	00c00044 	movi	r3,1
  80d720:	80c00515 	stw	r3,20(r16)
					((struct Button*)button)->isClicked = 1;
  80d724:	88c00915 	stw	r3,36(r17)
  80d728:	00000206 	br	80d734 <checkButtonCollision+0xeb0>
				r_button->currentlyCollided = 0;
			}
		} else {
			// cursor does not overlap with this button,
			// set isClicked status to state 2.
			((struct Button*)button)->isClicked = 2;
  80d72c:	8d800915 	stw	r22,36(r17)
			r_button->currentlyCollided = 0;
  80d730:	80000515 	stw	zero,20(r16)
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
  80d734:	80800417 	ldw	r2,16(r16)
  80d738:	10000c1e 	bne	r2,zero,80d76c <checkButtonCollision+0xee8>
  80d73c:	80c00517 	ldw	r3,20(r16)
  80d740:	00800044 	movi	r2,1
  80d744:	18800b26 	beq	r3,r2,80d774 <checkButtonCollision+0xef0>
	} else if (mainFrame->currentPanel == 1){
		for (i = 1; i <= mainFrame->elements[3]->button_size; i++){
			checkTxtCollisionForMouse(cursor, mainFrame->elements[3]->buttons[i]);
		}
	} else if (mainFrame->currentPanel == 2){
		for (i = 1; i <= mainFrame->elements[3]->elements[0]->button_size; i++){
  80d748:	40800317 	ldw	r2,12(r8)
			((struct Button*)button)->collide(((struct Button*)button));
			((struct Cursor*)cursor)->isLeftPressed = 0;
		}
	}

	r_button->previouslyCollided = r_button->currentlyCollided;
  80d74c:	80c00415 	stw	r3,16(r16)
	} else if (mainFrame->currentPanel == 1){
		for (i = 1; i <= mainFrame->elements[3]->button_size; i++){
			checkTxtCollisionForMouse(cursor, mainFrame->elements[3]->buttons[i]);
		}
	} else if (mainFrame->currentPanel == 2){
		for (i = 1; i <= mainFrame->elements[3]->elements[0]->button_size; i++){
  80d750:	9cc00044 	addi	r19,r19,1
  80d754:	10c00017 	ldw	r3,0(r2)
  80d758:	94800104 	addi	r18,r18,4
  80d75c:	18c00017 	ldw	r3,0(r3)
  80d760:	18800317 	ldw	r2,12(r3)
  80d764:	14ffcb0e 	bge	r2,r19,80d694 <checkButtonCollision+0xe10>
  80d768:	003d4106 	br	80cc70 <checkButtonCollision+0x3ec>
  80d76c:	80c00517 	ldw	r3,20(r16)
  80d770:	003ff506 	br	80d748 <checkButtonCollision+0xec4>
			r_button->currentlyCollided = 0;
		}

	// this state will only happen once.
	if (r_button->previouslyCollided == 0 && r_button->currentlyCollided == 1){
		if (((struct Button*)button)->isClicked == 1){
  80d774:	88800917 	ldw	r2,36(r17)
  80d778:	10fff31e 	bne	r2,r3,80d748 <checkButtonCollision+0xec4>
			printf("Collision detected\n");
  80d77c:	010020f4 	movhi	r4,131
  80d780:	210eb104 	addi	r4,r4,15044
  80d784:	08221800 	call	822180 <puts>
			((struct Button*)button)->collide(((struct Button*)button));
  80d788:	88c00f17 	ldw	r3,60(r17)
  80d78c:	8809883a 	mov	r4,r17
  80d790:	183ee83a 	callr	r3
  80d794:	aa000017 	ldw	r8,0(r21)
  80d798:	a2400017 	ldw	r9,0(r20)
  80d79c:	80c00517 	ldw	r3,20(r16)
			((struct Cursor*)cursor)->isLeftPressed = 0;
  80d7a0:	a0000205 	stb	zero,8(r20)
  80d7a4:	003fe806 	br	80d748 <checkButtonCollision+0xec4>
					// button is clicked!
					r_button->currentlyCollided = 1;
					((struct Button*)button)->isClicked = 1;
				}
			} else {
				((struct Button*)button)->isClicked = 0;
  80d7a8:	88000915 	stw	zero,36(r17)
				r_button->currentlyCollided = 0;
  80d7ac:	80000515 	stw	zero,20(r16)
  80d7b0:	003f7d06 	br	80d5a8 <checkButtonCollision+0xd24>
						}
						r_button->currentlyCollided = 1;
						((struct Button*)button)->isClicked = 1;
					}
				} else {
					((struct Button*)button)->isClicked = 0;
  80d7b4:	88000915 	stw	zero,36(r17)
					r_button->currentlyCollided = 0;
  80d7b8:	80000515 	stw	zero,20(r16)
  80d7bc:	003d4106 	br	80ccc4 <checkButtonCollision+0x440>
						}
						r_button->currentlyCollided = 1;
						((struct Button*)button)->isClicked = 1;
					}
				} else {
					((struct Button*)button)->isClicked = 0;
  80d7c0:	88000915 	stw	zero,36(r17)
					r_button->currentlyCollided = 0;
  80d7c4:	80000515 	stw	zero,20(r16)
  80d7c8:	003ccf06 	br	80cb08 <checkButtonCollision+0x284>
					// button is clicked!
					r_button->currentlyCollided = 1;
					((struct Button*)button)->isClicked = 1;
				}
			} else {
				((struct Button*)button)->isClicked = 0;
  80d7cc:	88000915 	stw	zero,36(r17)
				r_button->currentlyCollided = 0;
  80d7d0:	80000515 	stw	zero,20(r16)
  80d7d4:	003c4c06 	br	80c908 <checkButtonCollision+0x84>
						}
						r_button->currentlyCollided = 1;
						((struct Button*)button)->isClicked = 1;
					}
				} else {
					((struct Button*)button)->isClicked = 0;
  80d7d8:	88000915 	stw	zero,36(r17)
					r_button->currentlyCollided = 0;
  80d7dc:	80000515 	stw	zero,20(r16)
  80d7e0:	003ce306 	br	80cb70 <checkButtonCollision+0x2ec>
					// button is clicked!
					r_button->currentlyCollided = 1;
					((struct Button*)button)->isClicked = 1;
				}
			} else {
				((struct Button*)button)->isClicked = 0;
  80d7e4:	88000915 	stw	zero,36(r17)
				r_button->currentlyCollided = 0;
  80d7e8:	80000515 	stw	zero,20(r16)
  80d7ec:	003c6006 	br	80c970 <checkButtonCollision+0xec>
						}
						r_button->currentlyCollided = 1;
						((struct Button*)button)->isClicked = 1;
					}
				} else {
					((struct Button*)button)->isClicked = 0;
  80d7f0:	88000915 	stw	zero,36(r17)
					r_button->currentlyCollided = 0;
  80d7f4:	80000515 	stw	zero,20(r16)
  80d7f8:	003d4f06 	br	80cd38 <checkButtonCollision+0x4b4>
						}
						r_button->currentlyCollided = 1;
						((struct Button*)button)->isClicked = 1;
					}
				} else {
					((struct Button*)button)->isClicked = 0;
  80d7fc:	88000915 	stw	zero,36(r17)
					r_button->currentlyCollided = 0;
  80d800:	80000515 	stw	zero,20(r16)
  80d804:	003c8c06 	br	80ca38 <checkButtonCollision+0x1b4>
						}
						r_button->currentlyCollided = 1;
						((struct Button*)button)->isClicked = 1;
					}
				} else {
					((struct Button*)button)->isClicked = 0;
  80d808:	88000915 	stw	zero,36(r17)
					r_button->currentlyCollided = 0;
  80d80c:	80000515 	stw	zero,20(r16)
  80d810:	003ca306 	br	80caa0 <checkButtonCollision+0x21c>
						}
						r_button->currentlyCollided = 1;
						((struct Button*)button)->isClicked = 1;
					}
				} else {
					((struct Button*)button)->isClicked = 0;
  80d814:	88000915 	stw	zero,36(r17)
					r_button->currentlyCollided = 0;
  80d818:	80000515 	stw	zero,20(r16)
  80d81c:	003c6c06 	br	80c9d0 <checkButtonCollision+0x14c>
					// button is clicked!
					r_button->currentlyCollided = 1;
					((struct Button*)button)->isClicked = 1;
				}
			} else {
				((struct Button*)button)->isClicked = 0;
  80d820:	88000915 	stw	zero,36(r17)
				r_button->currentlyCollided = 0;
  80d824:	80000515 	stw	zero,20(r16)
  80d828:	003fc206 	br	80d734 <checkButtonCollision+0xeb0>
	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
				if (((struct Button*)button)->isClicked == 2) {
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
  80d82c:	80000515 	stw	zero,20(r16)
					((struct Button*)button)->isClicked = 0;
  80d830:	88000915 	stw	zero,36(r17)
					((struct Cursor*)cursor)->isLeftPressed = false;
  80d834:	a0000205 	stb	zero,8(r20)
  80d838:	003e2f06 	br	80d0f8 <checkButtonCollision+0x874>
	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
				if (((struct Button*)button)->isClicked == 2) {
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
  80d83c:	80000515 	stw	zero,20(r16)
					((struct Button*)button)->isClicked = 0;
  80d840:	88000915 	stw	zero,36(r17)
					((struct Cursor*)cursor)->isLeftPressed = false;
  80d844:	a0000205 	stb	zero,8(r20)
  80d848:	003f5706 	br	80d5a8 <checkButtonCollision+0xd24>
	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
				if (((struct Button*)button)->isClicked == 2) {
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
  80d84c:	80000515 	stw	zero,20(r16)
					((struct Button*)button)->isClicked = 0;
  80d850:	88000915 	stw	zero,36(r17)
					((struct Cursor*)cursor)->isLeftPressed = false;
  80d854:	a0000205 	stb	zero,8(r20)
  80d858:	003c2b06 	br	80c908 <checkButtonCollision+0x84>
	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
				if (((struct Button*)button)->isClicked == 2) {
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
  80d85c:	80000515 	stw	zero,20(r16)
					((struct Button*)button)->isClicked = 0;
  80d860:	88000915 	stw	zero,36(r17)
					((struct Cursor*)cursor)->isLeftPressed = false;
  80d864:	a0000205 	stb	zero,8(r20)
  80d868:	003c4106 	br	80c970 <checkButtonCollision+0xec>
		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
					if (((struct Button*)button)->isClicked == 2) {
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
  80d86c:	80000515 	stw	zero,20(r16)
						((struct Button*)button)->isClicked = 0;
  80d870:	88000915 	stw	zero,36(r17)
						((struct Cursor*)cursor)->isLeftPressed = false;
  80d874:	a0000205 	stb	zero,8(r20)
  80d878:	003c8906 	br	80caa0 <checkButtonCollision+0x21c>
		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
					if (((struct Button*)button)->isClicked == 2) {
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
  80d87c:	80000515 	stw	zero,20(r16)
						((struct Button*)button)->isClicked = 0;
  80d880:	88000915 	stw	zero,36(r17)
						((struct Cursor*)cursor)->isLeftPressed = false;
  80d884:	a0000205 	stb	zero,8(r20)
  80d888:	003c6b06 	br	80ca38 <checkButtonCollision+0x1b4>
		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
					if (((struct Button*)button)->isClicked == 2) {
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
  80d88c:	80000515 	stw	zero,20(r16)
						((struct Button*)button)->isClicked = 0;
  80d890:	88000915 	stw	zero,36(r17)
						((struct Cursor*)cursor)->isLeftPressed = false;
  80d894:	a0000205 	stb	zero,8(r20)
  80d898:	003c4d06 	br	80c9d0 <checkButtonCollision+0x14c>
		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
					if (((struct Button*)button)->isClicked == 2) {
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
  80d89c:	80000515 	stw	zero,20(r16)
						((struct Button*)button)->isClicked = 0;
  80d8a0:	88000915 	stw	zero,36(r17)
						((struct Cursor*)cursor)->isLeftPressed = false;
  80d8a4:	a0000205 	stb	zero,8(r20)
  80d8a8:	003c9706 	br	80cb08 <checkButtonCollision+0x284>
		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
					if (((struct Button*)button)->isClicked == 2) {
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
  80d8ac:	80000515 	stw	zero,20(r16)
						((struct Button*)button)->isClicked = 0;
  80d8b0:	88000915 	stw	zero,36(r17)
						((struct Cursor*)cursor)->isLeftPressed = false;
  80d8b4:	a0000205 	stb	zero,8(r20)
  80d8b8:	003d1f06 	br	80cd38 <checkButtonCollision+0x4b4>
		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
					if (((struct Button*)button)->isClicked == 2) {
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
  80d8bc:	80000515 	stw	zero,20(r16)
						((struct Button*)button)->isClicked = 0;
  80d8c0:	88000915 	stw	zero,36(r17)
						((struct Cursor*)cursor)->isLeftPressed = false;
  80d8c4:	a0000205 	stb	zero,8(r20)
  80d8c8:	003ca906 	br	80cb70 <checkButtonCollision+0x2ec>
		if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
			((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
				if (((struct Cursor*)cursor)->isLeftPressed) {
					if (((struct Button*)button)->isClicked == 2) {
						// button is not clicked, user just clicked somewhere, not on the button
						r_button->currentlyCollided = 0;
  80d8cc:	80000515 	stw	zero,20(r16)
						((struct Button*)button)->isClicked = 0;
  80d8d0:	88000915 	stw	zero,36(r17)
						((struct Cursor*)cursor)->isLeftPressed = false;
  80d8d4:	a0000205 	stb	zero,8(r20)
  80d8d8:	003cfa06 	br	80ccc4 <checkButtonCollision+0x440>
	if (((struct Cursor*)cursor)->super->r->x >= x_button_start && ((struct Cursor*)cursor)->super->r->x < x_button_end &&
				((struct Cursor*)cursor)->super->r->y >= y_button_start && ((struct Cursor*)cursor)->super->r->y < y_button_end){
			if (((struct Cursor*)cursor)->isLeftPressed) {
				if (((struct Button*)button)->isClicked == 2) {
					// button is not clicked, user just clicked somewhere, not on the button
					r_button->currentlyCollided = 0;
  80d8dc:	80000515 	stw	zero,20(r16)
					((struct Button*)button)->isClicked = 0;
  80d8e0:	88000915 	stw	zero,36(r17)
					((struct Cursor*)cursor)->isLeftPressed = false;
  80d8e4:	a0000205 	stb	zero,8(r20)
  80d8e8:	003f9206 	br	80d734 <checkButtonCollision+0xeb0>
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
							((struct Button*)button)->startAnimate = 1;
  80d8ec:	8c800a15 	stw	r18,40(r17)
							animateButton(((struct Button*)button), 1);
  80d8f0:	8809883a 	mov	r4,r17
  80d8f4:	900b883a 	mov	r5,r18
  80d8f8:	08007c40 	call	8007c4 <animateButton>
  80d8fc:	003dca06 	br	80d028 <checkButtonCollision+0x7a4>
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
							((struct Button*)button)->startAnimate = 1;
  80d900:	8c800a15 	stw	r18,40(r17)
							animateButton(((struct Button*)button), 1);
  80d904:	8809883a 	mov	r4,r17
  80d908:	900b883a 	mov	r5,r18
  80d90c:	08007c40 	call	8007c4 <animateButton>
  80d910:	003ddb06 	br	80d080 <checkButtonCollision+0x7fc>
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
							((struct Button*)button)->startAnimate = 1;
  80d914:	8c800a15 	stw	r18,40(r17)
							animateButton(((struct Button*)button), 1);
  80d918:	8809883a 	mov	r4,r17
  80d91c:	900b883a 	mov	r5,r18
  80d920:	08007c40 	call	8007c4 <animateButton>
  80d924:	003dec06 	br	80d0d8 <checkButtonCollision+0x854>
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
							((struct Button*)button)->startAnimate = 1;
  80d928:	8c800a15 	stw	r18,40(r17)
							animateButton(((struct Button*)button), 1);
  80d92c:	8809883a 	mov	r4,r17
  80d930:	900b883a 	mov	r5,r18
  80d934:	08007c40 	call	8007c4 <animateButton>
  80d938:	003d5f06 	br	80ceb8 <checkButtonCollision+0x634>
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
							((struct Button*)button)->startAnimate = 1;
  80d93c:	8c800a15 	stw	r18,40(r17)
							animateButton(((struct Button*)button), 1);
  80d940:	8809883a 	mov	r4,r17
  80d944:	900b883a 	mov	r5,r18
  80d948:	08007c40 	call	8007c4 <animateButton>
  80d94c:	003f0f06 	br	80d58c <checkButtonCollision+0xd08>
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
							((struct Button*)button)->startAnimate = 1;
  80d950:	8c800a15 	stw	r18,40(r17)
							animateButton(((struct Button*)button), 1);
  80d954:	8809883a 	mov	r4,r17
  80d958:	900b883a 	mov	r5,r18
  80d95c:	08007c40 	call	8007c4 <animateButton>
  80d960:	003d6b06 	br	80cf10 <checkButtonCollision+0x68c>
						((struct Button*)button)->isClicked = 0;
						((struct Cursor*)cursor)->isLeftPressed = false;
					} else if (((struct Button*)button)->isClicked == 0) {
						// button is clicked-animate action button
						if (((struct Button*)button)->buttonType == action){
							((struct Button*)button)->startAnimate = 1;
  80d964:	8c800a15 	stw	r18,40(r17)
							animateButton(((struct Button*)button), 1);
  80d968:	8809883a 	mov	r4,r17
  80d96c:	900b883a 	mov	r5,r18
  80d970:	08007c40 	call	8007c4 <animateButton>
  80d974:	003ef406 	br	80d548 <checkButtonCollision+0xcc4>

0080d978 <setSongId>:
	} else
		strcpy(this->song_name, name);

}
void setSongId(struct Song* this, int id) {
	this->id = id;
  80d978:	21400a15 	stw	r5,40(r4)
}
  80d97c:	f800283a 	ret

0080d980 <getLength>:
	return getSoundPositionMS(this->sound);
}

int getLength(struct Song* this) {
	return this->size;
}
  80d980:	20800917 	ldw	r2,36(r4)
  80d984:	f800283a 	ret

0080d988 <getSongPosition>:
void seekSong(struct Song* this, unsigned int position) {
	seekSound( this->sound, position );
}

int getSongPosition(struct Song* this) {
	return getSoundPositionMS(this->sound);
  80d988:	21000017 	ldw	r4,0(r4)
  80d98c:	081a2441 	jmpi	81a244 <getSoundPositionMS>

0080d990 <seekSong>:
 *
 * @param this - Song to seek
 * @param position - Position to seek to in MilliSeconds
 */
void seekSong(struct Song* this, unsigned int position) {
	seekSound( this->sound, position );
  80d990:	21000017 	ldw	r4,0(r4)
  80d994:	08197901 	jmpi	819790 <seekSound>

0080d998 <stopSong>:
	if((index = isCurrPlaying(this->id)) < 0) return;
	removeCurrPlaying(index);
	printf("The music is paused.\n");
}

void stopSong(struct Song* this) {
  80d998:	defffc04 	addi	sp,sp,-16
  80d99c:	dc400115 	stw	r17,4(sp)
  80d9a0:	2023883a 	mov	r17,r4
	printf("The music start to stop.\n");
  80d9a4:	010020f4 	movhi	r4,131
  80d9a8:	210c6604 	addi	r4,r4,12696
	if((index = isCurrPlaying(this->id)) < 0) return;
	removeCurrPlaying(index);
	printf("The music is paused.\n");
}

void stopSong(struct Song* this) {
  80d9ac:	dfc00315 	stw	ra,12(sp)
  80d9b0:	dc800215 	stw	r18,8(sp)
  80d9b4:	dc000015 	stw	r16,0(sp)
	printf("The music start to stop.\n");
  80d9b8:	08221800 	call	822180 <puts>
	int index;
	if(this == NULL) return;
  80d9bc:	88001c26 	beq	r17,zero,80da30 <stopSong+0x98>
	if((index = isCurrPlaying(this->id)) < 0) return;
  80d9c0:	89000a17 	ldw	r4,40(r17)
	stopSound(db.songs[db.curr_song_ids[index]]->sound);
  80d9c4:	04802134 	movhi	r18,132
  80d9c8:	948a6204 	addi	r18,r18,10632

void stopSong(struct Song* this) {
	printf("The music start to stop.\n");
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
  80d9cc:	0805d000 	call	805d00 <isCurrPlaying>
  80d9d0:	1021883a 	mov	r16,r2
	stopSound(db.songs[db.curr_song_ids[index]]->sound);
  80d9d4:	1085883a 	add	r2,r2,r2
  80d9d8:	1085883a 	add	r2,r2,r2
  80d9dc:	1485883a 	add	r2,r2,r18

void stopSong(struct Song* this) {
	printf("The music start to stop.\n");
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
  80d9e0:	80001316 	blt	r16,zero,80da30 <stopSong+0x98>
	stopSound(db.songs[db.curr_song_ids[index]]->sound);
  80d9e4:	10809b17 	ldw	r2,620(r2)
  80d9e8:	1085883a 	add	r2,r2,r2
  80d9ec:	1085883a 	add	r2,r2,r2
  80d9f0:	1485883a 	add	r2,r2,r18
  80d9f4:	10c03617 	ldw	r3,216(r2)
  80d9f8:	19000017 	ldw	r4,0(r3)
  80d9fc:	081979c0 	call	81979c <stopSound>
	removeCurrPlaying(index);
  80da00:	8009883a 	mov	r4,r16
  80da04:	0805d300 	call	805d30 <removeCurrPlaying>
	db.curr_song_id = 0;
  80da08:	90000015 	stw	zero,0(r18)
	this->pos = 0;
	printf("The song is stoped.\n");
  80da0c:	010020f4 	movhi	r4,131
  80da10:	210eb604 	addi	r4,r4,15064
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
	stopSound(db.songs[db.curr_song_ids[index]]->sound);
	removeCurrPlaying(index);
	db.curr_song_id = 0;
	this->pos = 0;
  80da14:	88000815 	stw	zero,32(r17)
	printf("The song is stoped.\n");
}
  80da18:	dfc00317 	ldw	ra,12(sp)
  80da1c:	dc800217 	ldw	r18,8(sp)
  80da20:	dc400117 	ldw	r17,4(sp)
  80da24:	dc000017 	ldw	r16,0(sp)
  80da28:	dec00404 	addi	sp,sp,16
	if((index = isCurrPlaying(this->id)) < 0) return;
	stopSound(db.songs[db.curr_song_ids[index]]->sound);
	removeCurrPlaying(index);
	db.curr_song_id = 0;
	this->pos = 0;
	printf("The song is stoped.\n");
  80da2c:	08221801 	jmpi	822180 <puts>
}
  80da30:	dfc00317 	ldw	ra,12(sp)
  80da34:	dc800217 	ldw	r18,8(sp)
  80da38:	dc400117 	ldw	r17,4(sp)
  80da3c:	dc000017 	ldw	r16,0(sp)
  80da40:	dec00404 	addi	sp,sp,16
  80da44:	f800283a 	ret

0080da48 <pauseSong>:
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
}

void pauseSong(struct Song* this) {
	printf("The music %d start to pause.\n", this->id);
  80da48:	21400a17 	ldw	r5,40(r4)
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
}

void pauseSong(struct Song* this) {
  80da4c:	defffe04 	addi	sp,sp,-8
  80da50:	dc400015 	stw	r17,0(sp)
  80da54:	2023883a 	mov	r17,r4
	printf("The music %d start to pause.\n", this->id);
  80da58:	010020f4 	movhi	r4,131
  80da5c:	210ebb04 	addi	r4,r4,15084
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
}

void pauseSong(struct Song* this) {
  80da60:	dfc00115 	stw	ra,4(sp)
	printf("The music %d start to pause.\n", this->id);
  80da64:	08220680 	call	822068 <printf>
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
  80da68:	89000a17 	ldw	r4,40(r17)
  80da6c:	0805d000 	call	805d00 <isCurrPlaying>
	removeCurrPlaying(index);
  80da70:	1009883a 	mov	r4,r2

void pauseSong(struct Song* this) {
	printf("The music %d start to pause.\n", this->id);
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
  80da74:	10000716 	blt	r2,zero,80da94 <pauseSong+0x4c>
	removeCurrPlaying(index);
  80da78:	0805d300 	call	805d30 <removeCurrPlaying>
	printf("The music is paused.\n");
  80da7c:	010020f4 	movhi	r4,131
  80da80:	210ec304 	addi	r4,r4,15116
}
  80da84:	dfc00117 	ldw	ra,4(sp)
  80da88:	dc400017 	ldw	r17,0(sp)
  80da8c:	dec00204 	addi	sp,sp,8
	printf("The music %d start to pause.\n", this->id);
	int index;
	if(this == NULL) return;
	if((index = isCurrPlaying(this->id)) < 0) return;
	removeCurrPlaying(index);
	printf("The music is paused.\n");
  80da90:	08221801 	jmpi	822180 <puts>
}
  80da94:	dfc00117 	ldw	ra,4(sp)
  80da98:	dc400017 	ldw	r17,0(sp)
  80da9c:	dec00204 	addi	sp,sp,8
  80daa0:	f800283a 	ret

0080daa4 <setSongPitch>:
void setSongVolume(struct Song* this, float volume) {
	setSoundVolume(this->sound, volume);
}

void setSongPitch(struct Song* this, float pitch, int quality) {
	setSoundPitch(this->sound, pitch, quality);
  80daa4:	21000017 	ldw	r4,0(r4)
  80daa8:	081a2681 	jmpi	81a268 <setSoundPitch>

0080daac <setSongVolume>:
void setSongId(struct Song* this, int id) {
	this->id = id;
}

void setSongVolume(struct Song* this, float volume) {
	setSoundVolume(this->sound, volume);
  80daac:	21000017 	ldw	r4,0(r4)
  80dab0:	08197841 	jmpi	819784 <setSoundVolume>

0080dab4 <setSongName>:
	}
	free(this->sound);
	this->sound = NULL;
}

void setSongName(struct Song* this, char* name) {
  80dab4:	defffd04 	addi	sp,sp,-12
  80dab8:	dc400115 	stw	r17,4(sp)
  80dabc:	dc000015 	stw	r16,0(sp)
  80dac0:	dfc00215 	stw	ra,8(sp)
  80dac4:	2023883a 	mov	r17,r4
  80dac8:	2821883a 	mov	r16,r5
	if(this == NULL || name == NULL) return;
  80dacc:	20001126 	beq	r4,zero,80db14 <setSongName+0x60>
	int size = strlen(name);
  80dad0:	2809883a 	mov	r4,r5
	free(this->sound);
	this->sound = NULL;
}

void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
  80dad4:	28000f26 	beq	r5,zero,80db14 <setSongName+0x60>
	int size = strlen(name);
  80dad8:	0822e100 	call	822e10 <strlen>
  80dadc:	00c004c4 	movi	r3,19
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
  80dae0:	800b883a 	mov	r5,r16
  80dae4:	89000104 	addi	r4,r17,4
  80dae8:	180d883a 	mov	r6,r3
	this->sound = NULL;
}

void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  80daec:	18800716 	blt	r3,r2,80db0c <setSongName+0x58>
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
		this->song_name[SONGNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->song_name, name);
  80daf0:	89000104 	addi	r4,r17,4
  80daf4:	800b883a 	mov	r5,r16

}
  80daf8:	dfc00217 	ldw	ra,8(sp)
  80dafc:	dc400117 	ldw	r17,4(sp)
  80db00:	dc000017 	ldw	r16,0(sp)
  80db04:	dec00304 	addi	sp,sp,12
	int size = strlen(name);
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
		this->song_name[SONGNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->song_name, name);
  80db08:	0822d841 	jmpi	822d84 <strcpy>

void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
  80db0c:	0822f340 	call	822f34 <strncpy>
		this->song_name[SONGNAME_LENGTH-1] = '\0';
  80db10:	880005c5 	stb	zero,23(r17)
	} else
		strcpy(this->song_name, name);

}
  80db14:	dfc00217 	ldw	ra,8(sp)
  80db18:	dc400117 	ldw	r17,4(sp)
  80db1c:	dc000017 	ldw	r16,0(sp)
  80db20:	dec00304 	addi	sp,sp,12
  80db24:	f800283a 	ret

0080db28 <unloadSong>:
	}
	addToMemory(this->sound, this->id);
	this->size = getSoundLengthMS(this->sound);
}

void unloadSong(struct Song* this) {
  80db28:	defffe04 	addi	sp,sp,-8
  80db2c:	dc000015 	stw	r16,0(sp)
  80db30:	dfc00115 	stw	ra,4(sp)
  80db34:	2021883a 	mov	r16,r4
	if(this == NULL || this->sound == NULL) return;
  80db38:	20001626 	beq	r4,zero,80db94 <unloadSong+0x6c>
  80db3c:	80800017 	ldw	r2,0(r16)
	printf("unloading song id: %d\n", this->id);
  80db40:	010020f4 	movhi	r4,131
  80db44:	210ec904 	addi	r4,r4,15140
	addToMemory(this->sound, this->id);
	this->size = getSoundLengthMS(this->sound);
}

void unloadSong(struct Song* this) {
	if(this == NULL || this->sound == NULL) return;
  80db48:	10001226 	beq	r2,zero,80db94 <unloadSong+0x6c>
	printf("unloading song id: %d\n", this->id);
  80db4c:	81400a17 	ldw	r5,40(r16)
  80db50:	08220680 	call	822068 <printf>
	if(this->sound->audioFormat != NULL) {
  80db54:	80c00017 	ldw	r3,0(r16)
  80db58:	18800017 	ldw	r2,0(r3)
		free(this->sound->audioFormat);
  80db5c:	1009883a 	mov	r4,r2
}

void unloadSong(struct Song* this) {
	if(this == NULL || this->sound == NULL) return;
	printf("unloading song id: %d\n", this->id);
	if(this->sound->audioFormat != NULL) {
  80db60:	10000326 	beq	r2,zero,80db70 <unloadSong+0x48>
		free(this->sound->audioFormat);
  80db64:	08216e80 	call	8216e8 <free>
		this->sound->audioFormat = NULL;
  80db68:	80c00017 	ldw	r3,0(r16)
  80db6c:	18000015 	stw	zero,0(r3)
	}
	if(this->sound->buffer != NULL) {
  80db70:	18800717 	ldw	r2,28(r3)
		free(this->sound->buffer);
  80db74:	1009883a 	mov	r4,r2
	printf("unloading song id: %d\n", this->id);
	if(this->sound->audioFormat != NULL) {
		free(this->sound->audioFormat);
		this->sound->audioFormat = NULL;
	}
	if(this->sound->buffer != NULL) {
  80db78:	10000326 	beq	r2,zero,80db88 <unloadSong+0x60>
		free(this->sound->buffer);
  80db7c:	08216e80 	call	8216e8 <free>
		this->sound->buffer = NULL;
  80db80:	80800017 	ldw	r2,0(r16)
  80db84:	10000715 	stw	zero,28(r2)
	}
	free(this->sound);
  80db88:	81000017 	ldw	r4,0(r16)
  80db8c:	08216e80 	call	8216e8 <free>
	this->sound = NULL;
  80db90:	80000015 	stw	zero,0(r16)
}
  80db94:	dfc00117 	ldw	ra,4(sp)
  80db98:	dc000017 	ldw	r16,0(sp)
  80db9c:	dec00204 	addi	sp,sp,8
  80dba0:	f800283a 	ret

0080dba4 <loadSong>:
	this->id = 0;
	this->sound = NULL;
	return this;
}

void loadSong(struct Song* this) {
  80dba4:	defffe04 	addi	sp,sp,-8
  80dba8:	dc000015 	stw	r16,0(sp)
  80dbac:	dfc00115 	stw	ra,4(sp)
  80dbb0:	2021883a 	mov	r16,r4
	if(this == NULL) return;
  80dbb4:	20000226 	beq	r4,zero,80dbc0 <loadSong+0x1c>
	if(this->sound != NULL)
  80dbb8:	20800017 	ldw	r2,0(r4)
  80dbbc:	10000526 	beq	r2,zero,80dbd4 <loadSong+0x30>
	while((this->sound = loadSound(this)) == NULL) {
		printf("load %s failed, reloading..\n", this->song_name);
	}
	addToMemory(this->sound, this->id);
	this->size = getSoundLengthMS(this->sound);
}
  80dbc0:	dfc00117 	ldw	ra,4(sp)
  80dbc4:	dc000017 	ldw	r16,0(sp)
  80dbc8:	dec00204 	addi	sp,sp,8
  80dbcc:	f800283a 	ret
void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadSound(this)) == NULL) {
		printf("load %s failed, reloading..\n", this->song_name);
  80dbd0:	08220680 	call	822068 <printf>

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadSound(this)) == NULL) {
  80dbd4:	8009883a 	mov	r4,r16
  80dbd8:	081abe00 	call	81abe0 <loadSound>
		printf("load %s failed, reloading..\n", this->song_name);
  80dbdc:	81400104 	addi	r5,r16,4
  80dbe0:	010020f4 	movhi	r4,131
  80dbe4:	210ecf04 	addi	r4,r4,15164

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadSound(this)) == NULL) {
  80dbe8:	80800015 	stw	r2,0(r16)
  80dbec:	103ff826 	beq	r2,zero,80dbd0 <loadSong+0x2c>
		printf("load %s failed, reloading..\n", this->song_name);
	}
	addToMemory(this->sound, this->id);
  80dbf0:	81400a17 	ldw	r5,40(r16)
  80dbf4:	1009883a 	mov	r4,r2
  80dbf8:	080ad100 	call	80ad10 <addToMemory>
	this->size = getSoundLengthMS(this->sound);
  80dbfc:	81000017 	ldw	r4,0(r16)
  80dc00:	081a2200 	call	81a220 <getSoundLengthMS>
  80dc04:	80800915 	stw	r2,36(r16)
}
  80dc08:	dfc00117 	ldw	ra,4(sp)
  80dc0c:	dc000017 	ldw	r16,0(sp)
  80dc10:	dec00204 	addi	sp,sp,8
  80dc14:	f800283a 	ret

0080dc18 <initSong>:
#include "Song.h"

#define LENGTH_OF_FADE_PERCENT 0.3
#define MAX_FADE_LENGTH 50000

struct Song* initSong(char* songname) {
  80dc18:	defffd04 	addi	sp,sp,-12
  80dc1c:	dc400115 	stw	r17,4(sp)
  80dc20:	2023883a 	mov	r17,r4
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
  80dc24:	01000b04 	movi	r4,44
#include "Song.h"

#define LENGTH_OF_FADE_PERCENT 0.3
#define MAX_FADE_LENGTH 50000

struct Song* initSong(char* songname) {
  80dc28:	dc000015 	stw	r16,0(sp)
  80dc2c:	dfc00215 	stw	ra,8(sp)
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
  80dc30:	08216fc0 	call	8216fc <malloc>
  80dc34:	1021883a 	mov	r16,r2
	free(this->sound);
	this->sound = NULL;
}

void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
  80dc38:	10000b26 	beq	r2,zero,80dc68 <initSong+0x50>
	int size = strlen(name);
  80dc3c:	8809883a 	mov	r4,r17
	free(this->sound);
	this->sound = NULL;
}

void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
  80dc40:	88000926 	beq	r17,zero,80dc68 <initSong+0x50>
	int size = strlen(name);
  80dc44:	0822e100 	call	822e10 <strlen>
  80dc48:	00c004c4 	movi	r3,19
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
  80dc4c:	880b883a 	mov	r5,r17
  80dc50:	81000104 	addi	r4,r16,4
  80dc54:	180d883a 	mov	r6,r3
	this->sound = NULL;
}

void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
  80dc58:	18801916 	blt	r3,r2,80dcc0 <initSong+0xa8>
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
		this->song_name[SONGNAME_LENGTH-1] = '\0';
	} else
		strcpy(this->song_name, name);
  80dc5c:	81000104 	addi	r4,r16,4
  80dc60:	880b883a 	mov	r5,r17
  80dc64:	0822d840 	call	822d84 <strcpy>
#define MAX_FADE_LENGTH 50000

struct Song* initSong(char* songname) {
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
	setSongName(this, songname);
	int len = strlen(songname);
  80dc68:	8809883a 	mov	r4,r17
  80dc6c:	0822e100 	call	822e10 <strlen>
	int i;
	for(i = 1; i <= 3; i ++) {
		this->ext[3-i] = songname[len-i];
  80dc70:	1449883a 	add	r4,r2,r17
  80dc74:	217fffc3 	ldbu	r5,-1(r4)
	this->pos = this->size = 0;
	this->volume = 100;
	this->id = 0;
	this->sound = NULL;
	return this;
}
  80dc78:	8005883a 	mov	r2,r16
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
	setSongName(this, songname);
	int len = strlen(songname);
	int i;
	for(i = 1; i <= 3; i ++) {
		this->ext[3-i] = songname[len-i];
  80dc7c:	81400685 	stb	r5,26(r16)
  80dc80:	20ffff83 	ldbu	r3,-2(r4)
  80dc84:	80c00645 	stb	r3,25(r16)
  80dc88:	217fff43 	ldbu	r5,-3(r4)
	} this->ext[3] = '\0';
	this->pos = this->size = 0;
	this->volume = 100;
  80dc8c:	00c01904 	movi	r3,100
  80dc90:	80c00715 	stw	r3,28(r16)
	setSongName(this, songname);
	int len = strlen(songname);
	int i;
	for(i = 1; i <= 3; i ++) {
		this->ext[3-i] = songname[len-i];
	} this->ext[3] = '\0';
  80dc94:	800006c5 	stb	zero,27(r16)
	struct Song* this = (struct Song*)malloc(sizeof(struct Song));
	setSongName(this, songname);
	int len = strlen(songname);
	int i;
	for(i = 1; i <= 3; i ++) {
		this->ext[3-i] = songname[len-i];
  80dc98:	81400605 	stb	r5,24(r16)
	} this->ext[3] = '\0';
	this->pos = this->size = 0;
  80dc9c:	80000915 	stw	zero,36(r16)
  80dca0:	80000815 	stw	zero,32(r16)
	this->volume = 100;
	this->id = 0;
  80dca4:	80000a15 	stw	zero,40(r16)
	this->sound = NULL;
  80dca8:	80000015 	stw	zero,0(r16)
	return this;
}
  80dcac:	dfc00217 	ldw	ra,8(sp)
  80dcb0:	dc400117 	ldw	r17,4(sp)
  80dcb4:	dc000017 	ldw	r16,0(sp)
  80dcb8:	dec00304 	addi	sp,sp,12
  80dcbc:	f800283a 	ret

void setSongName(struct Song* this, char* name) {
	if(this == NULL || name == NULL) return;
	int size = strlen(name);
	if(size > SONGNAME_LENGTH-1) {
		strncpy(this->song_name, name, SONGNAME_LENGTH-1);
  80dcc0:	0822f340 	call	822f34 <strncpy>
		this->song_name[SONGNAME_LENGTH-1] = '\0';
  80dcc4:	800005c5 	stb	zero,23(r16)
  80dcc8:	003fe706 	br	80dc68 <initSong+0x50>

0080dccc <playSong>:

void setSongPitch(struct Song* this, float pitch, int quality) {
	setSoundPitch(this->sound, pitch, quality);
}

void playSong(struct Song* this, float volume, int startTime, int loops) {
  80dccc:	defff804 	addi	sp,sp,-32
  80dcd0:	dd800615 	stw	r22,24(sp)
  80dcd4:	dd400515 	stw	r21,20(sp)
  80dcd8:	dcc00315 	stw	r19,12(sp)
  80dcdc:	dc000015 	stw	r16,0(sp)
  80dce0:	dfc00715 	stw	ra,28(sp)
  80dce4:	dd000415 	stw	r20,16(sp)
  80dce8:	dc800215 	stw	r18,8(sp)
  80dcec:	dc400115 	stw	r17,4(sp)
  80dcf0:	2021883a 	mov	r16,r4
  80dcf4:	2827883a 	mov	r19,r5
  80dcf8:	302b883a 	mov	r21,r6
  80dcfc:	382d883a 	mov	r22,r7
	if(this == NULL) return;
  80dd00:	20000326 	beq	r4,zero,80dd10 <playSong+0x44>
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
  80dd04:	21000a17 	ldw	r4,40(r4)
  80dd08:	0805d000 	call	805d00 <isCurrPlaying>
  80dd0c:	10000a16 	blt	r2,zero,80dd38 <playSong+0x6c>
	setFadeOutLength(this->sound, fadeLength);
	this->sound->fadeVolume = volume/100.0;
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
}
  80dd10:	dfc00717 	ldw	ra,28(sp)
  80dd14:	dd800617 	ldw	r22,24(sp)
  80dd18:	dd400517 	ldw	r21,20(sp)
  80dd1c:	dd000417 	ldw	r20,16(sp)
  80dd20:	dcc00317 	ldw	r19,12(sp)
  80dd24:	dc800217 	ldw	r18,8(sp)
  80dd28:	dc400117 	ldw	r17,4(sp)
  80dd2c:	dc000017 	ldw	r16,0(sp)
  80dd30:	dec00804 	addi	sp,sp,32
  80dd34:	f800283a 	ret
	setSoundPitch(this->sound, pitch, quality);
}

void playSong(struct Song* this, float volume, int startTime, int loops) {
	if(this == NULL) return;
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
  80dd38:	05002134 	movhi	r20,132
  80dd3c:	a50a6204 	addi	r20,r20,10632
  80dd40:	a0c0a617 	ldw	r3,664(r20)
  80dd44:	00800244 	movi	r2,9
  80dd48:	10fff116 	blt	r2,r3,80dd10 <playSong+0x44>
	this->pos = startTime;
  80dd4c:	85400815 	stw	r21,32(r16)
	this->volume = (int)volume;
  80dd50:	9809883a 	mov	r4,r19
  80dd54:	081f9680 	call	81f968 <__fixsfsi>
	return this;
}

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
  80dd58:	84800017 	ldw	r18,0(r16)

void playSong(struct Song* this, float volume, int startTime, int loops) {
	if(this == NULL) return;
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
	this->pos = startTime;
	this->volume = (int)volume;
  80dd5c:	80800715 	stw	r2,28(r16)
	db.curr_song_id = 0;
  80dd60:	a0000015 	stw	zero,0(r20)
	return this;
}

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
  80dd64:	90003526 	beq	r18,zero,80de3c <playSong+0x170>
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
	this->pos = startTime;
	this->volume = (int)volume;
	db.curr_song_id = 0;
	loadSong(this);
	int fadeLength = (int) this->sound->length * LENGTH_OF_FADE_PERCENT;
  80dd68:	91000517 	ldw	r4,20(r18)
  80dd6c:	08208500 	call	820850 <__floatsidf>
  80dd70:	020cccf4 	movhi	r8,13107
  80dd74:	420cccc4 	addi	r8,r8,13107
  80dd78:	024ff4f4 	movhi	r9,16339
  80dd7c:	4a4cccc4 	addi	r9,r9,13107
  80dd80:	180b883a 	mov	r5,r3
  80dd84:	480f883a 	mov	r7,r9
  80dd88:	1009883a 	mov	r4,r2
  80dd8c:	400d883a 	mov	r6,r8
  80dd90:	08200140 	call	820014 <__muldf3>
  80dd94:	180b883a 	mov	r5,r3
  80dd98:	1009883a 	mov	r4,r2
  80dd9c:	08209480 	call	820948 <__fixdfsi>
	if(fadeLength > MAX_FADE_LENGTH) {
		fadeLength = MAX_FADE_LENGTH;
	}
	setFadeInLength(this->sound, fadeLength);
  80dda0:	0170d414 	movui	r5,50000
	if(isCurrPlaying(this->id) >= 0|| db.total_songs_playing >= MAX_SONGS_MIX - 1) return;
	this->pos = startTime;
	this->volume = (int)volume;
	db.curr_song_id = 0;
	loadSong(this);
	int fadeLength = (int) this->sound->length * LENGTH_OF_FADE_PERCENT;
  80dda4:	1023883a 	mov	r17,r2
	if(fadeLength > MAX_FADE_LENGTH) {
		fadeLength = MAX_FADE_LENGTH;
	}
	setFadeInLength(this->sound, fadeLength);
  80dda8:	2880010e 	bge	r5,r2,80ddb0 <playSong+0xe4>
  80ddac:	2823883a 	mov	r17,r5
  80ddb0:	9009883a 	mov	r4,r18
  80ddb4:	880b883a 	mov	r5,r17
  80ddb8:	081976c0 	call	81976c <setFadeInLength>
	setFadeOutLength(this->sound, fadeLength);
  80ddbc:	81000017 	ldw	r4,0(r16)
  80ddc0:	880b883a 	mov	r5,r17
  80ddc4:	08197740 	call	819774 <setFadeOutLength>
	this->sound->fadeVolume = volume/100.0;
  80ddc8:	9809883a 	mov	r4,r19
  80ddcc:	0150b234 	movhi	r5,17096
  80ddd0:	081f5f40 	call	81f5f4 <__divsf3>
	db.curr_song_ids[db.total_songs_playing++] = this->id;
  80ddd4:	a140a617 	ldw	r5,664(r20)
  80ddd8:	81800a17 	ldw	r6,40(r16)
	if(fadeLength > MAX_FADE_LENGTH) {
		fadeLength = MAX_FADE_LENGTH;
	}
	setFadeInLength(this->sound, fadeLength);
	setFadeOutLength(this->sound, fadeLength);
	this->sound->fadeVolume = volume/100.0;
  80dddc:	81000017 	ldw	r4,0(r16)
	db.curr_song_ids[db.total_songs_playing++] = this->id;
  80dde0:	2947883a 	add	r3,r5,r5
  80dde4:	18c7883a 	add	r3,r3,r3
  80dde8:	1d07883a 	add	r3,r3,r20
  80ddec:	29400044 	addi	r5,r5,1
  80ddf0:	19809b15 	stw	r6,620(r3)
  80ddf4:	a140a615 	stw	r5,664(r20)
	db.curr_song_id = this->id;
  80ddf8:	80c00a17 	ldw	r3,40(r16)
	playSound(this->sound, volume/100, startTime, loops);
  80ddfc:	100b883a 	mov	r5,r2
  80de00:	a80d883a 	mov	r6,r21
  80de04:	b00f883a 	mov	r7,r22
	if(fadeLength > MAX_FADE_LENGTH) {
		fadeLength = MAX_FADE_LENGTH;
	}
	setFadeInLength(this->sound, fadeLength);
	setFadeOutLength(this->sound, fadeLength);
	this->sound->fadeVolume = volume/100.0;
  80de08:	20800915 	stw	r2,36(r4)
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
  80de0c:	a0c00015 	stw	r3,0(r20)
	playSound(this->sound, volume/100, startTime, loops);
}
  80de10:	dfc00717 	ldw	ra,28(sp)
  80de14:	dd800617 	ldw	r22,24(sp)
  80de18:	dd400517 	ldw	r21,20(sp)
  80de1c:	dd000417 	ldw	r20,16(sp)
  80de20:	dcc00317 	ldw	r19,12(sp)
  80de24:	dc800217 	ldw	r18,8(sp)
  80de28:	dc400117 	ldw	r17,4(sp)
  80de2c:	dc000017 	ldw	r16,0(sp)
  80de30:	dec00804 	addi	sp,sp,32
	setFadeInLength(this->sound, fadeLength);
	setFadeOutLength(this->sound, fadeLength);
	this->sound->fadeVolume = volume/100.0;
	db.curr_song_ids[db.total_songs_playing++] = this->id;
	db.curr_song_id = this->id;
	playSound(this->sound, volume/100, startTime, loops);
  80de34:	081a2081 	jmpi	81a208 <playSound>
void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadSound(this)) == NULL) {
		printf("load %s failed, reloading..\n", this->song_name);
  80de38:	08220680 	call	822068 <printf>

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadSound(this)) == NULL) {
  80de3c:	8009883a 	mov	r4,r16
  80de40:	081abe00 	call	81abe0 <loadSound>
		printf("load %s failed, reloading..\n", this->song_name);
  80de44:	81400104 	addi	r5,r16,4
  80de48:	010020f4 	movhi	r4,131
  80de4c:	210ecf04 	addi	r4,r4,15164

void loadSong(struct Song* this) {
	if(this == NULL) return;
	if(this->sound != NULL)
		return;
	while((this->sound = loadSound(this)) == NULL) {
  80de50:	80800015 	stw	r2,0(r16)
  80de54:	103ff826 	beq	r2,zero,80de38 <playSong+0x16c>
		printf("load %s failed, reloading..\n", this->song_name);
	}
	addToMemory(this->sound, this->id);
  80de58:	81400a17 	ldw	r5,40(r16)
  80de5c:	1009883a 	mov	r4,r2
  80de60:	080ad100 	call	80ad10 <addToMemory>
	this->size = getSoundLengthMS(this->sound);
  80de64:	81000017 	ldw	r4,0(r16)
  80de68:	081a2200 	call	81a220 <getSoundLengthMS>
  80de6c:	84800017 	ldw	r18,0(r16)
  80de70:	80800915 	stw	r2,36(r16)
  80de74:	003fbc06 	br	80dd68 <playSong+0x9c>

0080de78 <initAudioBuffer>:
	alt_irq_register(TIMESTAMP_IRQ, cursor, (void*)animate_ISR);
}

void initAudioBuffer() {
	int timer = 3000000;
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 8, timer & 0xFFFF);
  80de78:	00f1b014 	movui	r3,50880
  80de7c:	00804234 	movhi	r2,264
  80de80:	108d1204 	addi	r2,r2,13384
  80de84:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 12, timer >> 16);
  80de88:	01000b44 	movi	r4,45
  80de8c:	10800104 	addi	r2,r2,4
  80de90:	1100002d 	sthio	r4,0(r2)
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 4, 0x08);
  80de94:	00c00204 	movi	r3,8
  80de98:	10bffe04 	addi	r2,r2,-8
  80de9c:	10c0002d 	sthio	r3,0(r2)
	alt_irq_register(AUDIOBUFFERPROCESS_IRQ, NULL, (void*)mix_ISR);
  80dea0:	01000144 	movi	r4,5
  80dea4:	000b883a 	mov	r5,zero
  80dea8:	01802074 	movhi	r6,129
  80deac:	31aa4904 	addi	r6,r6,-22236
  80deb0:	082acec1 	jmpi	82acec <alt_irq_register>

0080deb4 <initAnimate>:
		}
	}
	return false;
}

void initAnimate(struct Cursor* cursor) {
  80deb4:	200b883a 	mov	r5,r4
	int timer = 3000000;
	IOWR_16DIRECT(TIMESTAMP_BASE, 8, timer & 0xFFFF);
  80deb8:	00f1b014 	movui	r3,50880
  80debc:	00804234 	movhi	r2,264
  80dec0:	108d0a04 	addi	r2,r2,13352
  80dec4:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(TIMESTAMP_BASE, 12, timer >> 16);
  80dec8:	01000b44 	movi	r4,45
  80decc:	10800104 	addi	r2,r2,4
  80ded0:	1100002d 	sthio	r4,0(r2)
	IOWR_16DIRECT(TIMESTAMP_BASE, 4, 0x07);
  80ded4:	00c001c4 	movi	r3,7
  80ded8:	10bffe04 	addi	r2,r2,-8
  80dedc:	10c0002d 	sthio	r3,0(r2)
	alt_irq_register(TIMESTAMP_IRQ, cursor, (void*)animate_ISR);
  80dee0:	01000184 	movi	r4,6
  80dee4:	01802074 	movhi	r6,129
  80dee8:	31a7b504 	addi	r6,r6,-24876
  80deec:	082acec1 	jmpi	82acec <alt_irq_register>

0080def0 <loadSDCard>:

#include "Global.h"
struct Cursor* mouse;
bool loadSDCard(alt_up_sd_card_dev* device) {
  80def0:	deffff04 	addi	sp,sp,-4
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
  80def4:	010020f4 	movhi	r4,131
  80def8:	210ed704 	addi	r4,r4,15196

#include "Global.h"
struct Cursor* mouse;
bool loadSDCard(alt_up_sd_card_dev* device) {
  80defc:	dfc00015 	stw	ra,0(sp)
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
  80df00:	082de400 	call	82de40 <alt_up_sd_card_open_dev>
  80df04:	10000426 	beq	r2,zero,80df18 <loadSDCard+0x28>
		if (alt_up_sd_card_is_Present()) {
  80df08:	082ddd40 	call	82ddd4 <alt_up_sd_card_is_Present>
			printf("Card connected.\n");
  80df0c:	010020f4 	movhi	r4,131
  80df10:	210edb04 	addi	r4,r4,15212

#include "Global.h"
struct Cursor* mouse;
bool loadSDCard(alt_up_sd_card_dev* device) {
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
		if (alt_up_sd_card_is_Present()) {
  80df14:	1000041e 	bne	r2,zero,80df28 <loadSDCard+0x38>
			printf("Card connected.\n");
			if (alt_up_sd_card_is_FAT16()) {
				printf("FAT16 file system detected.\n");
				return true;
			} else {
				printf("Unknown file system.\n");
  80df18:	0005883a 	mov	r2,zero
			}
		}
	}
	return false;
}
  80df1c:	dfc00017 	ldw	ra,0(sp)
  80df20:	dec00104 	addi	sp,sp,4
  80df24:	f800283a 	ret
#include "Global.h"
struct Cursor* mouse;
bool loadSDCard(alt_up_sd_card_dev* device) {
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
		if (alt_up_sd_card_is_Present()) {
			printf("Card connected.\n");
  80df28:	08221800 	call	822180 <puts>
			if (alt_up_sd_card_is_FAT16()) {
  80df2c:	082f3ec0 	call	82f3ec <alt_up_sd_card_is_FAT16>
				printf("FAT16 file system detected.\n");
  80df30:	010020f4 	movhi	r4,131
  80df34:	210edf04 	addi	r4,r4,15228
struct Cursor* mouse;
bool loadSDCard(alt_up_sd_card_dev* device) {
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
		if (alt_up_sd_card_is_Present()) {
			printf("Card connected.\n");
			if (alt_up_sd_card_is_FAT16()) {
  80df38:	1000071e 	bne	r2,zero,80df58 <loadSDCard+0x68>
				printf("FAT16 file system detected.\n");
				return true;
			} else {
				printf("Unknown file system.\n");
  80df3c:	010020f4 	movhi	r4,131
  80df40:	210ee604 	addi	r4,r4,15256
  80df44:	08221800 	call	822180 <puts>
  80df48:	0005883a 	mov	r2,zero
			}
		}
	}
	return false;
}
  80df4c:	dfc00017 	ldw	ra,0(sp)
  80df50:	dec00104 	addi	sp,sp,4
  80df54:	f800283a 	ret
bool loadSDCard(alt_up_sd_card_dev* device) {
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
		if (alt_up_sd_card_is_Present()) {
			printf("Card connected.\n");
			if (alt_up_sd_card_is_FAT16()) {
				printf("FAT16 file system detected.\n");
  80df58:	08221800 	call	822180 <puts>
  80df5c:	00800044 	movi	r2,1
				printf("Unknown file system.\n");
			}
		}
	}
	return false;
}
  80df60:	dfc00017 	ldw	ra,0(sp)
  80df64:	dec00104 	addi	sp,sp,4
  80df68:	f800283a 	ret

0080df6c <main>:
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 4, 0x08);
	alt_irq_register(AUDIOBUFFERPROCESS_IRQ, NULL, (void*)mix_ISR);

}
int main()
{
  80df6c:	deffdf04 	addi	sp,sp,-132
  80df70:	dc001c15 	stw	r16,112(sp)
	//SD device initialization
	up_dev.device_reference = NULL;
  80df74:	04002174 	movhi	r16,133
  80df78:	8433a104 	addi	r16,r16,-12668
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 4, 0x08);
	alt_irq_register(AUDIOBUFFERPROCESS_IRQ, NULL, (void*)mix_ISR);

}
int main()
{
  80df7c:	dfc02015 	stw	ra,128(sp)
  80df80:	dcc01f15 	stw	r19,124(sp)
  80df84:	dc801e15 	stw	r18,120(sp)
  80df88:	dc401d15 	stw	r17,116(sp)
	//SD device initialization
	up_dev.device_reference = NULL;
  80df8c:	80000315 	stw	zero,12(r16)
  80df90:	00000106 	br	80df98 <main+0x2c>
	while(!loadSDCard(up_dev.device_reference)) {
		printf("SD card is not connected.\n");
  80df94:	08221800 	call	822180 <puts>
}
int main()
{
	//SD device initialization
	up_dev.device_reference = NULL;
	while(!loadSDCard(up_dev.device_reference)) {
  80df98:	81000317 	ldw	r4,12(r16)
  80df9c:	080def00 	call	80def0 <loadSDCard>
  80dfa0:	10803fcc 	andi	r2,r2,255
		printf("SD card is not connected.\n");
  80dfa4:	010020f4 	movhi	r4,131
  80dfa8:	210eec04 	addi	r4,r4,15280
}
int main()
{
	//SD device initialization
	up_dev.device_reference = NULL;
	while(!loadSDCard(up_dev.device_reference)) {
  80dfac:	103ff926 	beq	r2,zero,80df94 <main+0x28>
		printf("SD card is not connected.\n");
	}

	initVGA();
  80dfb0:	08095c40 	call	8095c4 <initVGA>
	initAudioDeviceController();
  80dfb4:	08195780 	call	819578 <initAudioDeviceController>
	initSoundMixer();
  80dfb8:	081afd40 	call	81afd4 <initSoundMixer>

	struct CmdScheduler* scheduler = initCmdScheduler();
  80dfbc:	08046780 	call	804678 <initCmdScheduler>

	//Serial device initialization
	com = initRS232(scheduler);
  80dfc0:	d809883a 	mov	r4,sp
  80dfc4:	100b883a 	mov	r5,r2

	initVGA();
	initAudioDeviceController();
	initSoundMixer();

	struct CmdScheduler* scheduler = initCmdScheduler();
  80dfc8:	1027883a 	mov	r19,r2

	//Serial device initialization
	com = initRS232(scheduler);
  80dfcc:	080bc140 	call	80bc14 <initRS232>
  80dfd0:	01801c04 	movi	r6,112
  80dfd4:	d80b883a 	mov	r5,sp
  80dfd8:	01002174 	movhi	r4,133
  80dfdc:	21337e04 	addi	r4,r4,-12808
  80dfe0:	0821e500 	call	821e50 <memcpy>

	initPushKeyController();
  80dfe4:	080b52c0 	call	80b52c <initPushKeyController>

	initDatabase();
  80dfe8:	08076f00 	call	8076f0 <initDatabase>
	initMemory();
  80dfec:	080adf80 	call	80adf8 <initMemory>

	//sync database
	update();
  80dff0:	080685c0 	call	80685c <update>
	draw(35, 35, testImg);
	killImage(testImg);*/
	//alt_up_char_buffer_string(char_buffer, "Initialization Completed", 27, 5);


	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80dff4:	00802134 	movhi	r2,132
  80dff8:	108a3804 	addi	r2,r2,10464
  80dffc:	11000017 	ldw	r4,0(r2)
  80e000:	000b883a 	mov	r5,zero
	alt_irq_register(TIMESTAMP_IRQ, cursor, (void*)animate_ISR);
}

void initAudioBuffer() {
	int timer = 3000000;
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 8, timer & 0xFFFF);
  80e004:	04b1b014 	movui	r18,50880
	draw(35, 35, testImg);
	killImage(testImg);*/
	//alt_up_char_buffer_string(char_buffer, "Initialization Completed", 27, 5);


	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80e008:	082d0080 	call	82d008 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_char_buffer_clear(char_buffer);
  80e00c:	00802134 	movhi	r2,132
  80e010:	108a3704 	addi	r2,r2,10460
  80e014:	11000017 	ldw	r4,0(r2)
  80e018:	082c9780 	call	82c978 <alt_up_char_buffer_clear>

	//graphicTester();

	struct Frame* mainFrame = initMainFrame();
  80e01c:	08090ac0 	call	8090ac <initMainFrame>
  80e020:	1023883a 	mov	r17,r2
	mainFrame->drawFrame(mainFrame);
  80e024:	10800817 	ldw	r2,32(r2)
  80e028:	8809883a 	mov	r4,r17
  80e02c:	103ee83a 	callr	r2


	//Test End
	mouse = initCursor(10, 100, mainFrame);
  80e030:	880d883a 	mov	r6,r17
  80e034:	01000284 	movi	r4,10
  80e038:	01401904 	movi	r5,100
  80e03c:	08049300 	call	804930 <initCursor>
  80e040:	d0a75f15 	stw	r2,-25220(gp)
	alt_irq_register(TIMESTAMP_IRQ, cursor, (void*)animate_ISR);
}

void initAudioBuffer() {
	int timer = 3000000;
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 8, timer & 0xFFFF);
  80e044:	00804234 	movhi	r2,264
  80e048:	108d1204 	addi	r2,r2,13384
  80e04c:	1480002d 	sthio	r18,0(r2)
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 12, timer >> 16);
  80e050:	04000b44 	movi	r16,45
  80e054:	10800104 	addi	r2,r2,4
  80e058:	1400002d 	sthio	r16,0(r2)
	IOWR_16DIRECT(AUDIOBUFFERPROCESS_BASE, 4, 0x08);
  80e05c:	00c00204 	movi	r3,8
  80e060:	10bffe04 	addi	r2,r2,-8
  80e064:	10c0002d 	sthio	r3,0(r2)
	alt_irq_register(AUDIOBUFFERPROCESS_IRQ, NULL, (void*)mix_ISR);
  80e068:	01000144 	movi	r4,5
  80e06c:	000b883a 	mov	r5,zero
  80e070:	01802074 	movhi	r6,129
  80e074:	31aa4904 	addi	r6,r6,-22236
  80e078:	082acec0 	call	82acec <alt_irq_register>
		//killSongInListPanel(&b);
		printf("Iteration %d\n", i);
	}*/

	initAudioBuffer();
	initAnimate(mouse);
  80e07c:	d1675f17 	ldw	r5,-25220(gp)
	return false;
}

void initAnimate(struct Cursor* cursor) {
	int timer = 3000000;
	IOWR_16DIRECT(TIMESTAMP_BASE, 8, timer & 0xFFFF);
  80e080:	00804234 	movhi	r2,264
  80e084:	108d0a04 	addi	r2,r2,13352
  80e088:	1480002d 	sthio	r18,0(r2)
	IOWR_16DIRECT(TIMESTAMP_BASE, 12, timer >> 16);
  80e08c:	00c04234 	movhi	r3,264
  80e090:	18cd0b04 	addi	r3,r3,13356
  80e094:	1c00002d 	sthio	r16,0(r3)
	IOWR_16DIRECT(TIMESTAMP_BASE, 4, 0x07);
  80e098:	010001c4 	movi	r4,7
  80e09c:	10bfff04 	addi	r2,r2,-4
  80e0a0:	1100002d 	sthio	r4,0(r2)
	alt_irq_register(TIMESTAMP_IRQ, cursor, (void*)animate_ISR);
  80e0a4:	01000184 	movi	r4,6
  80e0a8:	01802074 	movhi	r6,129
  80e0ac:	31a7b504 	addi	r6,r6,-24876
  80e0b0:	082acec0 	call	82acec <alt_irq_register>
	initAudioBuffer();
	initAnimate(mouse);

	int i = 2;

	syncPlay(1, 100, 0);
  80e0b4:	01000044 	movi	r4,1
  80e0b8:	01401904 	movi	r5,100
  80e0bc:	000d883a 	mov	r6,zero
  80e0c0:	08034740 	call	803474 <syncPlay>
  80e0c4:	04000084 	movi	r16,2

	while(1) {
		cmdProcessing(scheduler);
  80e0c8:	9809883a 	mov	r4,r19
  80e0cc:	08042080 	call	804208 <cmdProcessing>

		i = soundTester(i);
  80e0d0:	8009883a 	mov	r4,r16
  80e0d4:	080e0e80 	call	80e0e8 <soundTester>
  80e0d8:	1021883a 	mov	r16,r2
  80e0dc:	003ffa06 	br	80e0c8 <main+0x15c>

0080e0e0 <graphicTester>:
		for (j = 0; j < 20; j++){
			highlightSongWithID(j);
			printf("highlight iteration %d\n", i);
		}
	}*/
}
  80e0e0:	f800283a 	ret

0080e0e4 <dBTester>:
		printf("Iteration %d\n", i);
	}*/
	//	preloadSongsToPlaylist();
	//	printf("Iteration %d\n", i);
	//}
}
  80e0e4:	f800283a 	ret

0080e0e8 <soundTester>:
	struct Command* cmd1 = initCmd(23, 8, paras);

	send((void*)cmd1, CMD);
}

int soundTester(int i) {
  80e0e8:	defffe04 	addi	sp,sp,-8
  80e0ec:	dc000015 	stw	r16,0(sp)
  80e0f0:	2021883a 	mov	r16,r4
	if(isCurrPlaying(i-1) < 0) {
  80e0f4:	213fffc4 	addi	r4,r4,-1
	struct Command* cmd1 = initCmd(23, 8, paras);

	send((void*)cmd1, CMD);
}

int soundTester(int i) {
  80e0f8:	dfc00115 	stw	ra,4(sp)
	if(isCurrPlaying(i-1) < 0) {
  80e0fc:	0805d000 	call	805d00 <isCurrPlaying>
  80e100:	10000516 	blt	r2,zero,80e118 <soundTester+0x30>
		//updateMixer();
		//enableAudioDeviceController();
		i++;
	}
	return i;
}
  80e104:	8005883a 	mov	r2,r16
  80e108:	dfc00117 	ldw	ra,4(sp)
  80e10c:	dc000017 	ldw	r16,0(sp)
  80e110:	dec00204 	addi	sp,sp,8
  80e114:	f800283a 	ret
	send((void*)cmd1, CMD);
}

int soundTester(int i) {
	if(isCurrPlaying(i-1) < 0) {
		if(i > db.num_of_songs)
  80e118:	00802134 	movhi	r2,132
  80e11c:	108a6204 	addi	r2,r2,10632
  80e120:	10c0a717 	ldw	r3,668(r2)
  80e124:	01000044 	movi	r4,1
  80e128:	1c00090e 	bge	r3,r16,80e150 <soundTester+0x68>
  80e12c:	04000084 	movi	r16,2
			i = 1;
		syncPlay(i, 100, 0);
  80e130:	01401904 	movi	r5,100
  80e134:	000d883a 	mov	r6,zero
  80e138:	08034740 	call	803474 <syncPlay>
		//updateMixer();
		//enableAudioDeviceController();
		i++;
	}
	return i;
}
  80e13c:	8005883a 	mov	r2,r16
  80e140:	dfc00117 	ldw	ra,4(sp)
  80e144:	dc000017 	ldw	r16,0(sp)
  80e148:	dec00204 	addi	sp,sp,8
  80e14c:	f800283a 	ret
	send((void*)cmd1, CMD);
}

int soundTester(int i) {
	if(isCurrPlaying(i-1) < 0) {
		if(i > db.num_of_songs)
  80e150:	8009883a 	mov	r4,r16
  80e154:	84000044 	addi	r16,r16,1
  80e158:	003ff506 	br	80e130 <soundTester+0x48>

0080e15c <cmdTester>:
		removeListFromDB(47);
		removeListFromDB(49);
		removeListFromDB(50);
	}
}
void cmdTester() {
  80e15c:	defff704 	addi	sp,sp,-36
	char* paras[8];
	paras[0] = "para1";
  80e160:	008020f4 	movhi	r2,131
  80e164:	108ef304 	addi	r2,r2,15308
	paras[1] = "para21";
  80e168:	00c020f4 	movhi	r3,131
  80e16c:	18cef504 	addi	r3,r3,15316
		removeListFromDB(50);
	}
}
void cmdTester() {
	char* paras[8];
	paras[0] = "para1";
  80e170:	d8800015 	stw	r2,0(sp)
	paras[1] = "para21";
  80e174:	d8c00115 	stw	r3,4(sp)
	paras[2] = "para32";
  80e178:	008020f4 	movhi	r2,131
  80e17c:	108ef704 	addi	r2,r2,15324
	paras[3] = "para43";
  80e180:	00c020f4 	movhi	r3,131
  80e184:	18cef904 	addi	r3,r3,15332
}
void cmdTester() {
	char* paras[8];
	paras[0] = "para1";
	paras[1] = "para21";
	paras[2] = "para32";
  80e188:	d8800215 	stw	r2,8(sp)
	paras[3] = "para43";
  80e18c:	d8c00315 	stw	r3,12(sp)
	paras[4] = "para5";
  80e190:	008020f4 	movhi	r2,131
  80e194:	108efb04 	addi	r2,r2,15340
	paras[5] = "para6";
  80e198:	00c020f4 	movhi	r3,131
  80e19c:	18cefd04 	addi	r3,r3,15348
	paras[6] = "para7";
	paras[7] = "para8";
	struct Command* cmd1 = initCmd(23, 8, paras);
  80e1a0:	d80d883a 	mov	r6,sp
	char* paras[8];
	paras[0] = "para1";
	paras[1] = "para21";
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
  80e1a4:	d8800415 	stw	r2,16(sp)
	paras[5] = "para6";
  80e1a8:	d8c00515 	stw	r3,20(sp)
	paras[6] = "para7";
	paras[7] = "para8";
	struct Command* cmd1 = initCmd(23, 8, paras);
  80e1ac:	01400204 	movi	r5,8
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
	paras[5] = "para6";
	paras[6] = "para7";
	paras[7] = "para8";
  80e1b0:	00c020f4 	movhi	r3,131
  80e1b4:	18cf0104 	addi	r3,r3,15364
	struct Command* cmd1 = initCmd(23, 8, paras);
  80e1b8:	010005c4 	movi	r4,23
	paras[1] = "para21";
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
	paras[5] = "para6";
	paras[6] = "para7";
  80e1bc:	008020f4 	movhi	r2,131
  80e1c0:	108eff04 	addi	r2,r2,15356
		removeListFromDB(47);
		removeListFromDB(49);
		removeListFromDB(50);
	}
}
void cmdTester() {
  80e1c4:	dfc00815 	stw	ra,32(sp)
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
	paras[5] = "para6";
	paras[6] = "para7";
	paras[7] = "para8";
  80e1c8:	d8c00715 	stw	r3,28(sp)
	paras[1] = "para21";
	paras[2] = "para32";
	paras[3] = "para43";
	paras[4] = "para5";
	paras[5] = "para6";
	paras[6] = "para7";
  80e1cc:	d8800615 	stw	r2,24(sp)
	paras[7] = "para8";
	struct Command* cmd1 = initCmd(23, 8, paras);
  80e1d0:	0802fcc0 	call	802fcc <initCmd>

	send((void*)cmd1, CMD);
  80e1d4:	1009883a 	mov	r4,r2
  80e1d8:	01400044 	movi	r5,1
  80e1dc:	080bb980 	call	80bb98 <send>
}
  80e1e0:	dfc00817 	ldw	ra,32(sp)
  80e1e4:	dec00904 	addi	sp,sp,36
  80e1e8:	f800283a 	ret

0080e1ec <dbTester2>:
	//	preloadSongsToPlaylist();
	//	printf("Iteration %d\n", i);
	//}
}

void dbTester2() {
  80e1ec:	defffe04 	addi	sp,sp,-8
  80e1f0:	dc000015 	stw	r16,0(sp)
  80e1f4:	dfc00115 	stw	ra,4(sp)
  80e1f8:	0021883a 	mov	r16,zero
	createSong("new song 5");
	createSong("new song 6");*/

	int i;
	for(i = 0; i < 50000; i++) {
		loadListsFromSD();
  80e1fc:	08075080 	call	807508 <loadListsFromSD>

		removeListFromDB(1);
  80e200:	01000044 	movi	r4,1
  80e204:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(6);
  80e208:	01000184 	movi	r4,6
  80e20c:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(9);
  80e210:	01000244 	movi	r4,9
  80e214:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(12);
  80e218:	01000304 	movi	r4,12
  80e21c:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(17);
  80e220:	01000444 	movi	r4,17
  80e224:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(22);
  80e228:	01000584 	movi	r4,22
  80e22c:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(29);
  80e230:	01000744 	movi	r4,29
  80e234:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(33);
  80e238:	01000844 	movi	r4,33
  80e23c:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(36);
  80e240:	01000904 	movi	r4,36
  80e244:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(47);
  80e248:	01000bc4 	movi	r4,47
  80e24c:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(49);
  80e250:	01000c44 	movi	r4,49
  80e254:	08064e00 	call	8064e0 <removeListFromDB>
		removeListFromDB(50);
  80e258:	01000c84 	movi	r4,50
  80e25c:	08064e00 	call	8064e0 <removeListFromDB>
	createSong("new song 4");
	createSong("new song 5");
	createSong("new song 6");*/

	int i;
	for(i = 0; i < 50000; i++) {
  80e260:	84000044 	addi	r16,r16,1
  80e264:	00b0d414 	movui	r2,50000
  80e268:	80bfe41e 	bne	r16,r2,80e1fc <dbTester2+0x10>
		removeListFromDB(36);
		removeListFromDB(47);
		removeListFromDB(49);
		removeListFromDB(50);
	}
}
  80e26c:	dfc00117 	ldw	ra,4(sp)
  80e270:	dc000017 	ldw	r16,0(sp)
  80e274:	dec00204 	addi	sp,sp,8
  80e278:	f800283a 	ret

0080e27c <mad_bit_init>:
 */
void mad_bit_init(struct mad_bitptr *bitptr, unsigned char const *byte)
{
  bitptr->byte  = byte;
  bitptr->cache = 0;
  bitptr->left  = CHAR_BIT;
  80e27c:	00800204 	movi	r2,8
  80e280:	2080018d 	sth	r2,6(r4)
 * NAME:	bit->init()
 * DESCRIPTION:	initialize bit pointer struct
 */
void mad_bit_init(struct mad_bitptr *bitptr, unsigned char const *byte)
{
  bitptr->byte  = byte;
  80e284:	21400015 	stw	r5,0(r4)
  bitptr->cache = 0;
  80e288:	2000010d 	sth	zero,4(r4)
  bitptr->left  = CHAR_BIT;
}
  80e28c:	f800283a 	ret

0080e290 <mad_bit_length>:
 * NAME:	bit->length()
 * DESCRIPTION:	return number of bits between start and end points
 */
unsigned int mad_bit_length(struct mad_bitptr const *begin,
			    struct mad_bitptr const *end)
{
  80e290:	21800017 	ldw	r6,0(r4)
  80e294:	28c00017 	ldw	r3,0(r5)
  80e298:	2080018b 	ldhu	r2,6(r4)
  80e29c:	2900018b 	ldhu	r4,6(r5)
  80e2a0:	1987c83a 	sub	r3,r3,r6
  80e2a4:	180690fa 	slli	r3,r3,3
  80e2a8:	10c5883a 	add	r2,r2,r3
  return begin->left +
    CHAR_BIT * (end->byte - (begin->byte + 1)) + (CHAR_BIT - end->left);
}
  80e2ac:	1105c83a 	sub	r2,r2,r4
  80e2b0:	f800283a 	ret

0080e2b4 <mad_bit_nextbyte>:
 * NAME:	bit->nextbyte()
 * DESCRIPTION:	return pointer to next unprocessed byte
 */
unsigned char const *mad_bit_nextbyte(struct mad_bitptr const *bitptr)
{
  return bitptr->left == CHAR_BIT ? bitptr->byte : bitptr->byte + 1;
  80e2b4:	20c0018b 	ldhu	r3,6(r4)
  80e2b8:	00800204 	movi	r2,8
  80e2bc:	18800326 	beq	r3,r2,80e2cc <mad_bit_nextbyte+0x18>
  80e2c0:	20800017 	ldw	r2,0(r4)
  80e2c4:	10800044 	addi	r2,r2,1
}
  80e2c8:	f800283a 	ret
 * NAME:	bit->nextbyte()
 * DESCRIPTION:	return pointer to next unprocessed byte
 */
unsigned char const *mad_bit_nextbyte(struct mad_bitptr const *bitptr)
{
  return bitptr->left == CHAR_BIT ? bitptr->byte : bitptr->byte + 1;
  80e2cc:	20800017 	ldw	r2,0(r4)
  80e2d0:	f800283a 	ret

0080e2d4 <mad_bit_skip>:
/*
 * NAME:	bit->skip()
 * DESCRIPTION:	advance bit pointer
 */
void mad_bit_skip(struct mad_bitptr *bitptr, unsigned int len)
{
  80e2d4:	200d883a 	mov	r6,r4
  bitptr->byte += len / CHAR_BIT;
  bitptr->left -= len % CHAR_BIT;
  80e2d8:	20c0018b 	ldhu	r3,6(r4)
 * NAME:	bit->skip()
 * DESCRIPTION:	advance bit pointer
 */
void mad_bit_skip(struct mad_bitptr *bitptr, unsigned int len)
{
  bitptr->byte += len / CHAR_BIT;
  80e2dc:	20800017 	ldw	r2,0(r4)
  80e2e0:	2808d0fa 	srli	r4,r5,3
  bitptr->left -= len % CHAR_BIT;
  80e2e4:	294001cc 	andi	r5,r5,7
  80e2e8:	1947c83a 	sub	r3,r3,r5
 * NAME:	bit->skip()
 * DESCRIPTION:	advance bit pointer
 */
void mad_bit_skip(struct mad_bitptr *bitptr, unsigned int len)
{
  bitptr->byte += len / CHAR_BIT;
  80e2ec:	1105883a 	add	r2,r2,r4
  bitptr->left -= len % CHAR_BIT;

  if (bitptr->left > CHAR_BIT) {
    bitptr->byte++;
  80e2f0:	11400044 	addi	r5,r2,1
 * NAME:	bit->skip()
 * DESCRIPTION:	advance bit pointer
 */
void mad_bit_skip(struct mad_bitptr *bitptr, unsigned int len)
{
  bitptr->byte += len / CHAR_BIT;
  80e2f4:	30800015 	stw	r2,0(r6)
  bitptr->left -= len % CHAR_BIT;

  if (bitptr->left > CHAR_BIT) {
  80e2f8:	193fffcc 	andi	r4,r3,65535
  80e2fc:	00800204 	movi	r2,8
    bitptr->byte++;
    bitptr->left += CHAR_BIT;
  80e300:	19c00204 	addi	r7,r3,8
 * DESCRIPTION:	advance bit pointer
 */
void mad_bit_skip(struct mad_bitptr *bitptr, unsigned int len)
{
  bitptr->byte += len / CHAR_BIT;
  bitptr->left -= len % CHAR_BIT;
  80e304:	30c0018d 	sth	r3,6(r6)

  if (bitptr->left > CHAR_BIT) {
  80e308:	1100022e 	bgeu	r2,r4,80e314 <mad_bit_skip+0x40>
    bitptr->byte++;
  80e30c:	31400015 	stw	r5,0(r6)
    bitptr->left += CHAR_BIT;
  80e310:	31c0018d 	sth	r7,6(r6)
  }

  if (bitptr->left < CHAR_BIT)
  80e314:	30c0018b 	ldhu	r3,6(r6)
  80e318:	008001c4 	movi	r2,7
  80e31c:	10c00336 	bltu	r2,r3,80e32c <mad_bit_skip+0x58>
    bitptr->cache = *bitptr->byte;
  80e320:	30800017 	ldw	r2,0(r6)
  80e324:	10c00003 	ldbu	r3,0(r2)
  80e328:	30c0010d 	sth	r3,4(r6)
  80e32c:	f800283a 	ret

0080e330 <mad_bit_read>:
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e330:	2080018b 	ldhu	r2,6(r4)
  80e334:	02800204 	movi	r10,8
/*
 * NAME:	bit->read()
 * DESCRIPTION:	read an arbitrary number of bits and return their UIMSBF value
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  80e338:	2013883a 	mov	r9,r4
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e33c:	12802f26 	beq	r2,r10,80e3fc <mad_bit_read+0xcc>
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
  80e340:	4980018b 	ldhu	r6,6(r9)
  80e344:	313fffcc 	andi	r4,r6,65535
  80e348:	29000b2e 	bgeu	r5,r4,80e378 <mad_bit_read+0x48>
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e34c:	00800044 	movi	r2,1
  80e350:	1104983a 	sll	r2,r2,r4
  80e354:	48c0010b 	ldhu	r3,4(r9)
  80e358:	2149c83a 	sub	r4,r4,r5
  80e35c:	10bfffc4 	addi	r2,r2,-1
  80e360:	1886703a 	and	r3,r3,r2
  80e364:	1911d83a 	sra	r8,r3,r4
      (bitptr->left - len);
    bitptr->left -= len;
  80e368:	3145c83a 	sub	r2,r6,r5
  80e36c:	4880018d 	sth	r2,6(r9)
    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
    bitptr->left -= len;
  }

  return value;
}
  80e370:	4005883a 	mov	r2,r8
  80e374:	f800283a 	ret
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e378:	00800044 	movi	r2,1
  80e37c:	1104983a 	sll	r2,r2,r4
  len  -= bitptr->left;

  bitptr->byte++;
  80e380:	49800017 	ldw	r6,0(r9)
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e384:	48c0010b 	ldhu	r3,4(r9)
  len  -= bitptr->left;
  80e388:	290fc83a 	sub	r7,r5,r4
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e38c:	10bfffc4 	addi	r2,r2,-1
  len  -= bitptr->left;

  bitptr->byte++;
  80e390:	31800044 	addi	r6,r6,1
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e394:	010001c4 	movi	r4,7
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e398:	1890703a 	and	r8,r3,r2
  len  -= bitptr->left;

  bitptr->byte++;
  bitptr->left = CHAR_BIT;
  80e39c:	4a80018d 	sth	r10,6(r9)
  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  len  -= bitptr->left;

  bitptr->byte++;
  80e3a0:	49800015 	stw	r6,0(r9)
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e3a4:	21c0072e 	bgeu	r4,r7,80e3c4 <mad_bit_read+0x94>
    value = (value << CHAR_BIT) | *bitptr->byte++;
  80e3a8:	30800003 	ldbu	r2,0(r6)
  80e3ac:	4006923a 	slli	r3,r8,8
  80e3b0:	31800044 	addi	r6,r6,1
    len  -= CHAR_BIT;
  80e3b4:	39fffe04 	addi	r7,r7,-8
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
    value = (value << CHAR_BIT) | *bitptr->byte++;
  80e3b8:	1890b03a 	or	r8,r3,r2
  80e3bc:	49800015 	stw	r6,0(r9)
  bitptr->byte++;
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e3c0:	21fff936 	bltu	r4,r7,80e3a8 <mad_bit_read+0x78>
    value = (value << CHAR_BIT) | *bitptr->byte++;
    len  -= CHAR_BIT;
  }

  if (len > 0) {
  80e3c4:	383fea26 	beq	r7,zero,80e370 <mad_bit_read+0x40>
    bitptr->cache = *bitptr->byte;
  80e3c8:	31800003 	ldbu	r6,0(r6)

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e3cc:	00800204 	movi	r2,8
  80e3d0:	11c5c83a 	sub	r2,r2,r7
  80e3d4:	313fffcc 	andi	r4,r6,65535
  80e3d8:	2089d83a 	sra	r4,r4,r2
  80e3dc:	41ca983a 	sll	r5,r8,r7
    bitptr->left -= len;
  80e3e0:	48c0018b 	ldhu	r3,6(r9)
    value = (value << CHAR_BIT) | *bitptr->byte++;
    len  -= CHAR_BIT;
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;
  80e3e4:	4980010d 	sth	r6,4(r9)

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e3e8:	2910b03a 	or	r8,r5,r4
    bitptr->left -= len;
  80e3ec:	19c7c83a 	sub	r3,r3,r7
  }

  return value;
}
  80e3f0:	4005883a 	mov	r2,r8

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
    bitptr->left -= len;
  80e3f4:	48c0018d 	sth	r3,6(r9)
  }

  return value;
}
  80e3f8:	f800283a 	ret
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;
  80e3fc:	20800017 	ldw	r2,0(r4)
  80e400:	10c00003 	ldbu	r3,0(r2)
  80e404:	20c0010d 	sth	r3,4(r4)
  80e408:	003fcd06 	br	80e340 <mad_bit_read+0x10>

0080e40c <mad_bit_crc>:
 * NAME:	bit->crc()
 * DESCRIPTION:	compute CRC-check word
 */
unsigned short mad_bit_crc(struct mad_bitptr bitptr, unsigned int len,
			   unsigned short init)
{
  80e40c:	2019883a 	mov	r12,r4
  register unsigned int crc;

  for (crc = init; len >= 32; len -= 32) {
  80e410:	010007c4 	movi	r4,31
 * NAME:	bit->crc()
 * DESCRIPTION:	compute CRC-check word
 */
unsigned short mad_bit_crc(struct mad_bitptr bitptr, unsigned int len,
			   unsigned short init)
{
  80e414:	2816d43a 	srli	r11,r5,16
  register unsigned int crc;

  for (crc = init; len >= 32; len -= 32) {
  80e418:	39ffffcc 	andi	r7,r7,65535
 * NAME:	bit->crc()
 * DESCRIPTION:	compute CRC-check word
 */
unsigned short mad_bit_crc(struct mad_bitptr bitptr, unsigned int len,
			   unsigned short init)
{
  80e41c:	281b883a 	mov	r13,r5
  register unsigned int crc;

  for (crc = init; len >= 32; len -= 32) {
  80e420:	2180552e 	bgeu	r4,r6,80e578 <mad_bit_crc+0x16c>
  80e424:	03c020f4 	movhi	r15,131
  80e428:	7bcf0284 	addi	r15,r15,15370
  80e42c:	02800204 	movi	r10,8
  80e430:	03800044 	movi	r14,1
  80e434:	00002b06 	br	80e4e4 <mad_bit_crc+0xd8>

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e438:	7104983a 	sll	r2,r14,r4
  80e43c:	68ffffcc 	andi	r3,r13,65535
  80e440:	213ff804 	addi	r4,r4,-32
  80e444:	10bfffc4 	addi	r2,r2,-1
  80e448:	1886703a 	and	r3,r3,r2
  80e44c:	1913d83a 	sra	r9,r3,r4
      (bitptr->left - len);
    bitptr->left -= len;
  80e450:	5afff804 	addi	r11,r11,-32
  for (crc = init; len >= 32; len -= 32) {
    register unsigned long data;

    data = mad_bit_read(&bitptr, 32);

    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 24)) & 0xff];
  80e454:	3804d23a 	srli	r2,r7,8
  80e458:	4808d63a 	srli	r4,r9,24
  80e45c:	3806923a 	slli	r3,r7,8
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 16)) & 0xff];
  80e460:	480ad43a 	srli	r5,r9,16
  for (crc = init; len >= 32; len -= 32) {
    register unsigned long data;

    data = mad_bit_read(&bitptr, 32);

    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 24)) & 0xff];
  80e464:	1104f03a 	xor	r2,r2,r4
  80e468:	10803fcc 	andi	r2,r2,255
  80e46c:	1085883a 	add	r2,r2,r2
  80e470:	13c5883a 	add	r2,r2,r15
  80e474:	1100000b 	ldhu	r4,0(r2)
unsigned short mad_bit_crc(struct mad_bitptr bitptr, unsigned int len,
			   unsigned short init)
{
  register unsigned int crc;

  for (crc = init; len >= 32; len -= 32) {
  80e478:	31bff804 	addi	r6,r6,-32
    register unsigned long data;

    data = mad_bit_read(&bitptr, 32);

    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 24)) & 0xff];
  80e47c:	1906f03a 	xor	r3,r3,r4
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 16)) & 0xff];
  80e480:	1804d23a 	srli	r2,r3,8
  80e484:	1806923a 	slli	r3,r3,8
  80e488:	1144f03a 	xor	r2,r2,r5
  80e48c:	10803fcc 	andi	r2,r2,255
  80e490:	1085883a 	add	r2,r2,r2
  80e494:	13c5883a 	add	r2,r2,r15
  80e498:	1100000b 	ldhu	r4,0(r2)
  80e49c:	1906f03a 	xor	r3,r3,r4
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  8)) & 0xff];
  80e4a0:	48c4f03a 	xor	r2,r9,r3
  80e4a4:	1004d1fa 	srli	r2,r2,7
  80e4a8:	1806923a 	slli	r3,r3,8
  80e4ac:	10807f8c 	andi	r2,r2,510
  80e4b0:	13c5883a 	add	r2,r2,r15
  80e4b4:	1100000b 	ldhu	r4,0(r2)
  80e4b8:	1906f03a 	xor	r3,r3,r4
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  0)) & 0xff];
  80e4bc:	1804d23a 	srli	r2,r3,8
  80e4c0:	1806923a 	slli	r3,r3,8
  80e4c4:	4884f03a 	xor	r2,r9,r2
  80e4c8:	10803fcc 	andi	r2,r2,255
  80e4cc:	1085883a 	add	r2,r2,r2
  80e4d0:	13c5883a 	add	r2,r2,r15
  80e4d4:	1100000b 	ldhu	r4,0(r2)
unsigned short mad_bit_crc(struct mad_bitptr bitptr, unsigned int len,
			   unsigned short init)
{
  register unsigned int crc;

  for (crc = init; len >= 32; len -= 32) {
  80e4d8:	008007c4 	movi	r2,31
    data = mad_bit_read(&bitptr, 32);

    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 24)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 16)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  8)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  0)) & 0xff];
  80e4dc:	190ef03a 	xor	r7,r3,r4
unsigned short mad_bit_crc(struct mad_bitptr bitptr, unsigned int len,
			   unsigned short init)
{
  register unsigned int crc;

  for (crc = init; len >= 32; len -= 32) {
  80e4e0:	1180252e 	bgeu	r2,r6,80e578 <mad_bit_crc+0x16c>
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e4e4:	593fffcc 	andi	r4,r11,65535
  80e4e8:	22801e26 	beq	r4,r10,80e564 <mad_bit_crc+0x158>
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
  80e4ec:	00c00804 	movi	r3,32
  80e4f0:	193fd136 	bltu	r3,r4,80e438 <mad_bit_crc+0x2c>
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e4f4:	7104983a 	sll	r2,r14,r4
  len  -= bitptr->left;
  80e4f8:	1909c83a 	sub	r4,r3,r4
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e4fc:	68ffffcc 	andi	r3,r13,65535
  80e500:	10bfffc4 	addi	r2,r2,-1
  80e504:	1892703a 	and	r9,r3,r2
  bitptr->byte++;
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e508:	008001c4 	movi	r2,7
  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  len  -= bitptr->left;

  bitptr->byte++;
  80e50c:	63000044 	addi	r12,r12,1
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e510:	1100092e 	bgeu	r2,r4,80e538 <mad_bit_crc+0x12c>
  80e514:	6011883a 	mov	r8,r12
  80e518:	014001c4 	movi	r5,7
    value = (value << CHAR_BIT) | *bitptr->byte++;
  80e51c:	40800003 	ldbu	r2,0(r8)
  80e520:	4806923a 	slli	r3,r9,8
    len  -= CHAR_BIT;
  80e524:	213ffe04 	addi	r4,r4,-8
  80e528:	42000044 	addi	r8,r8,1
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
    value = (value << CHAR_BIT) | *bitptr->byte++;
  80e52c:	1892b03a 	or	r9,r3,r2
  bitptr->byte++;
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e530:	293ffa36 	bltu	r5,r4,80e51c <mad_bit_crc+0x110>
  80e534:	4019883a 	mov	r12,r8
    value = (value << CHAR_BIT) | *bitptr->byte++;
    len  -= CHAR_BIT;
  }

  if (len > 0) {
  80e538:	2000021e 	bne	r4,zero,80e544 <mad_bit_crc+0x138>
  80e53c:	02c00204 	movi	r11,8
  80e540:	003fc406 	br	80e454 <mad_bit_crc+0x48>
    bitptr->cache = *bitptr->byte;
  80e544:	63400003 	ldbu	r13,0(r12)

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e548:	5105c83a 	sub	r2,r10,r4
  80e54c:	4908983a 	sll	r4,r9,r4
  80e550:	68ffffcc 	andi	r3,r13,65535
  80e554:	1887d83a 	sra	r3,r3,r2
    bitptr->left -= len;
  80e558:	1017883a 	mov	r11,r2
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e55c:	20d2b03a 	or	r9,r4,r3
  80e560:	003fbc06 	br	80e454 <mad_bit_crc+0x48>
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;
  80e564:	63400003 	ldbu	r13,0(r12)
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  len  -= bitptr->left;
  80e568:	01000604 	movi	r4,24

  bitptr->byte++;
  80e56c:	63000044 	addi	r12,r12,1
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e570:	6a403fcc 	andi	r9,r13,255
  80e574:	003fe706 	br	80e514 <mad_bit_crc+0x108>
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 16)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  8)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  0)) & 0xff];
  }

  switch (len / 8) {
  80e578:	3006d0fa 	srli	r3,r6,3
  80e57c:	00800084 	movi	r2,2
  80e580:	18803826 	beq	r3,r2,80e664 <mad_bit_crc+0x258>
  80e584:	008000c4 	movi	r2,3
  80e588:	18807a26 	beq	r3,r2,80e774 <mad_bit_crc+0x368>
  80e58c:	00800044 	movi	r2,1
  80e590:	18809c26 	beq	r3,r2,80e804 <mad_bit_crc+0x3f8>
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e594:	5a3fffcc 	andi	r8,r11,65535
  len %= 8;

  case 0: break;
  }

  while (len--) {
  80e598:	31bfffc4 	addi	r6,r6,-1
  80e59c:	00bfffc4 	movi	r2,-1
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e5a0:	02800204 	movi	r10,8
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
  80e5a4:	01400044 	movi	r5,1
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;
  80e5a8:	4009883a 	mov	r4,r8
  len %= 8;

  case 0: break;
  }

  while (len--) {
  80e5ac:	30801e26 	beq	r6,r2,80e628 <mad_bit_crc+0x21c>
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e5b0:	42801f26 	beq	r8,r10,80e630 <mad_bit_crc+0x224>
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e5b4:	2a04983a 	sll	r2,r5,r8
  80e5b8:	68ffffcc 	andi	r3,r13,65535
  len  -= bitptr->left;
  80e5bc:	2a13c83a 	sub	r9,r5,r8
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e5c0:	10bfffc4 	addi	r2,r2,-1
  80e5c4:	1886703a 	and	r3,r3,r2
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
  80e5c8:	4009883a 	mov	r4,r8
  80e5cc:	2a001a2e 	bgeu	r5,r8,80e638 <mad_bit_crc+0x22c>
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e5d0:	00c00044 	movi	r3,1
  80e5d4:	1a06983a 	sll	r3,r3,r8
  80e5d8:	68bfffcc 	andi	r2,r13,65535
  80e5dc:	213fffc4 	addi	r4,r4,-1
  80e5e0:	18ffffc4 	addi	r3,r3,-1
  80e5e4:	10c4703a 	and	r2,r2,r3
  80e5e8:	1107d83a 	sra	r3,r2,r4
      (bitptr->left - len);
    bitptr->left -= len;
  80e5ec:	5affffc4 	addi	r11,r11,-1
  }

  while (len--) {
    register unsigned int msb;

    msb = mad_bit_read(&bitptr, 1) ^ (crc >> 15);
  80e5f0:	3804d3fa 	srli	r2,r7,15

    crc <<= 1;
  80e5f4:	39cf883a 	add	r7,r7,r7
  }

  while (len--) {
    register unsigned int msb;

    msb = mad_bit_read(&bitptr, 1) ^ (crc >> 15);
  80e5f8:	1884f03a 	xor	r2,r3,r2

    crc <<= 1;
    if (msb & 1)
  80e5fc:	1080004c 	andi	r2,r2,1
  80e600:	1005003a 	cmpeq	r2,r2,zero
  80e604:	103fe31e 	bne	r2,zero,80e594 <mad_bit_crc+0x188>
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e608:	5a3fffcc 	andi	r8,r11,65535
  len %= 8;

  case 0: break;
  }

  while (len--) {
  80e60c:	31bfffc4 	addi	r6,r6,-1
  80e610:	00bfffc4 	movi	r2,-1

    msb = mad_bit_read(&bitptr, 1) ^ (crc >> 15);

    crc <<= 1;
    if (msb & 1)
      crc ^= CRC_POLY;
  80e614:	39e0015c 	xori	r7,r7,32773
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e618:	02800204 	movi	r10,8
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
  80e61c:	01400044 	movi	r5,1
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;
  80e620:	4009883a 	mov	r4,r8
  len %= 8;

  case 0: break;
  }

  while (len--) {
  80e624:	30bfe21e 	bne	r6,r2,80e5b0 <mad_bit_crc+0x1a4>
    if (msb & 1)
      crc ^= CRC_POLY;
  }

  return crc & 0xffff;
}
  80e628:	38bfffcc 	andi	r2,r7,65535
  80e62c:	f800283a 	ret
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;
  80e630:	63400003 	ldbu	r13,0(r12)
  80e634:	003fe606 	br	80e5d0 <mad_bit_crc+0x1c4>
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e638:	5249c83a 	sub	r4,r10,r9
  80e63c:	1a4a983a 	sll	r5,r3,r9
  while (len >= CHAR_BIT) {
    value = (value << CHAR_BIT) | *bitptr->byte++;
    len  -= CHAR_BIT;
  }

  if (len > 0) {
  80e640:	5017883a 	mov	r11,r10
  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  len  -= bitptr->left;

  bitptr->byte++;
  80e644:	63000044 	addi	r12,r12,1
  while (len >= CHAR_BIT) {
    value = (value << CHAR_BIT) | *bitptr->byte++;
    len  -= CHAR_BIT;
  }

  if (len > 0) {
  80e648:	483fe926 	beq	r9,zero,80e5f0 <mad_bit_crc+0x1e4>
    bitptr->cache = *bitptr->byte;
  80e64c:	63400003 	ldbu	r13,0(r12)

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
    bitptr->left -= len;
  80e650:	2017883a 	mov	r11,r4
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e654:	68bfffcc 	andi	r2,r13,65535
  80e658:	1105d83a 	sra	r2,r2,r4
  80e65c:	2886b03a 	or	r3,r5,r2
  80e660:	003fe306 	br	80e5f0 <mad_bit_crc+0x1e4>
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 16)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  8)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  0)) & 0xff];
  }

  switch (len / 8) {
  80e664:	5a3fffcc 	andi	r8,r11,65535
  80e668:	00800044 	movi	r2,1
  80e66c:	1204983a 	sll	r2,r2,r8
  80e670:	4013883a 	mov	r9,r8
  80e674:	03c020f4 	movhi	r15,131
  80e678:	7bcf0284 	addi	r15,r15,15370
  80e67c:	12bfffc4 	addi	r10,r2,-1
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e680:	00800204 	movi	r2,8
  80e684:	40802526 	beq	r8,r2,80e71c <mad_bit_crc+0x310>
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
  80e688:	1240252e 	bgeu	r2,r9,80e720 <mad_bit_crc+0x314>
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
      (bitptr->left - len);
    bitptr->left -= len;
  80e68c:	5afffe04 	addi	r11,r11,-8
  80e690:	5a3fffcc 	andi	r8,r11,65535

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e694:	68bfffcc 	andi	r2,r13,65535
      (bitptr->left - len);
    bitptr->left -= len;
  80e698:	00c00044 	movi	r3,1

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e69c:	493ffe04 	addi	r4,r9,-8
  80e6a0:	1284703a 	and	r2,r2,r10
      (bitptr->left - len);
    bitptr->left -= len;
  80e6a4:	1a06983a 	sll	r3,r3,r8

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e6a8:	1115d83a 	sra	r10,r2,r4
      (bitptr->left - len);
    bitptr->left -= len;
  80e6ac:	4013883a 	mov	r9,r8
  80e6b0:	197fffc4 	addi	r5,r3,-1
  }

  switch (len / 8) {
  case 3: crc = (crc << 8) ^
	    crc_table[((crc >> 8) ^ mad_bit_read(&bitptr, 8)) & 0xff];
  case 2: crc = (crc << 8) ^
  80e6b4:	3804d23a 	srli	r2,r7,8
  80e6b8:	3808923a 	slli	r4,r7,8
  80e6bc:	5084f03a 	xor	r2,r10,r2
  80e6c0:	10803fcc 	andi	r2,r2,255
  80e6c4:	1085883a 	add	r2,r2,r2
  80e6c8:	13c5883a 	add	r2,r2,r15
  80e6cc:	10c0000b 	ldhu	r3,0(r2)
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e6d0:	00800204 	movi	r2,8
  }

  switch (len / 8) {
  case 3: crc = (crc << 8) ^
	    crc_table[((crc >> 8) ^ mad_bit_read(&bitptr, 8)) & 0xff];
  case 2: crc = (crc << 8) ^
  80e6d4:	20cef03a 	xor	r7,r4,r3
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e6d8:	40805226 	beq	r8,r2,80e824 <mad_bit_crc+0x418>
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
  80e6dc:	1240522e 	bgeu	r2,r9,80e828 <mad_bit_crc+0x41c>
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e6e0:	68bfffcc 	andi	r2,r13,65535
  80e6e4:	1144703a 	and	r2,r2,r5
  80e6e8:	48fffe04 	addi	r3,r9,-8
  80e6ec:	10d1d83a 	sra	r8,r2,r3
      (bitptr->left - len);
    bitptr->left -= len;
  80e6f0:	5afffe04 	addi	r11,r11,-8
  switch (len / 8) {
  case 3: crc = (crc << 8) ^
	    crc_table[((crc >> 8) ^ mad_bit_read(&bitptr, 8)) & 0xff];
  case 2: crc = (crc << 8) ^
	    crc_table[((crc >> 8) ^ mad_bit_read(&bitptr, 8)) & 0xff];
  case 1: crc = (crc << 8) ^
  80e6f4:	3804d23a 	srli	r2,r7,8
  80e6f8:	3808923a 	slli	r4,r7,8
	    crc_table[((crc >> 8) ^ mad_bit_read(&bitptr, 8)) & 0xff];

  len %= 8;
  80e6fc:	318001cc 	andi	r6,r6,7
  switch (len / 8) {
  case 3: crc = (crc << 8) ^
	    crc_table[((crc >> 8) ^ mad_bit_read(&bitptr, 8)) & 0xff];
  case 2: crc = (crc << 8) ^
	    crc_table[((crc >> 8) ^ mad_bit_read(&bitptr, 8)) & 0xff];
  case 1: crc = (crc << 8) ^
  80e700:	4084f03a 	xor	r2,r8,r2
  80e704:	10803fcc 	andi	r2,r2,255
  80e708:	1085883a 	add	r2,r2,r2
  80e70c:	13c5883a 	add	r2,r2,r15
  80e710:	10c0000b 	ldhu	r3,0(r2)
  80e714:	20cef03a 	xor	r7,r4,r3
  80e718:	003f9e06 	br	80e594 <mad_bit_crc+0x188>
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;
  80e71c:	63400003 	ldbu	r13,0(r12)
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e720:	68bfffcc 	andi	r2,r13,65535
  len  -= bitptr->left;
  80e724:	01000204 	movi	r4,8
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e728:	1294703a 	and	r10,r2,r10
  len  -= bitptr->left;
  80e72c:	224bc83a 	sub	r5,r4,r9
  bitptr->byte++;
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e730:	008001c4 	movi	r2,7
  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  len  -= bitptr->left;

  bitptr->byte++;
  80e734:	63000044 	addi	r12,r12,1
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e738:	11402936 	bltu	r2,r5,80e7e0 <mad_bit_crc+0x3d4>
    value = (value << CHAR_BIT) | *bitptr->byte++;
    len  -= CHAR_BIT;
  }

  if (len > 0) {
  80e73c:	28007526 	beq	r5,zero,80e914 <mad_bit_crc+0x508>
    bitptr->cache = *bitptr->byte;
  80e740:	63400003 	ldbu	r13,0(r12)

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e744:	2149c83a 	sub	r4,r4,r5
    bitptr->left -= len;
  80e748:	223fffcc 	andi	r8,r4,65535
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e74c:	68ffffcc 	andi	r3,r13,65535
    bitptr->left -= len;
  80e750:	00800044 	movi	r2,1
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e754:	514a983a 	sll	r5,r10,r5
  80e758:	1907d83a 	sra	r3,r3,r4
    bitptr->left -= len;
  80e75c:	1204983a 	sll	r2,r2,r8
  80e760:	2017883a 	mov	r11,r4
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e764:	28d4b03a 	or	r10,r5,r3
    bitptr->left -= len;
  80e768:	4013883a 	mov	r9,r8
  80e76c:	117fffc4 	addi	r5,r2,-1
  80e770:	003fd006 	br	80e6b4 <mad_bit_crc+0x2a8>
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e774:	593fffcc 	andi	r4,r11,65535
  80e778:	00c00204 	movi	r3,8
  80e77c:	20c03726 	beq	r4,r3,80e85c <mad_bit_crc+0x450>
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
  80e780:	1900502e 	bgeu	r3,r4,80e8c4 <mad_bit_crc+0x4b8>
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e784:	01400044 	movi	r5,1
  80e788:	2906983a 	sll	r3,r5,r4
      (bitptr->left - len);
    bitptr->left -= len;
  80e78c:	5afffe04 	addi	r11,r11,-8
  80e790:	5a3fffcc 	andi	r8,r11,65535

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e794:	18ffffc4 	addi	r3,r3,-1
  80e798:	68bfffcc 	andi	r2,r13,65535
  80e79c:	10c4703a 	and	r2,r2,r3
  80e7a0:	213ffe04 	addi	r4,r4,-8
      (bitptr->left - len);
    bitptr->left -= len;
  80e7a4:	2a0a983a 	sll	r5,r5,r8

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
  80e7a8:	111dd83a 	sra	r14,r2,r4
      (bitptr->left - len);
    bitptr->left -= len;
  80e7ac:	4013883a 	mov	r9,r8
  80e7b0:	2abfffc4 	addi	r10,r5,-1
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  8)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  0)) & 0xff];
  }

  switch (len / 8) {
  case 3: crc = (crc << 8) ^
  80e7b4:	3804d23a 	srli	r2,r7,8
  80e7b8:	03c020f4 	movhi	r15,131
  80e7bc:	7bcf0284 	addi	r15,r15,15370
  80e7c0:	3808923a 	slli	r4,r7,8
  80e7c4:	7084f03a 	xor	r2,r14,r2
  80e7c8:	10803fcc 	andi	r2,r2,255
  80e7cc:	1085883a 	add	r2,r2,r2
  80e7d0:	13c5883a 	add	r2,r2,r15
  80e7d4:	10c0000b 	ldhu	r3,0(r2)
  80e7d8:	20cef03a 	xor	r7,r4,r3
  80e7dc:	003fa806 	br	80e680 <mad_bit_crc+0x274>
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
    value = (value << CHAR_BIT) | *bitptr->byte++;
  80e7e0:	60800003 	ldbu	r2,0(r12)
  80e7e4:	5106983a 	sll	r3,r10,r4
  80e7e8:	2013883a 	mov	r9,r4
  80e7ec:	63000044 	addi	r12,r12,1
  80e7f0:	1894b03a 	or	r10,r3,r2
  80e7f4:	2017883a 	mov	r11,r4
  80e7f8:	01403fc4 	movi	r5,255
  80e7fc:	2011883a 	mov	r8,r4
  80e800:	003fac06 	br	80e6b4 <mad_bit_crc+0x2a8>
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >> 16)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  8)) & 0xff];
    crc = (crc << 8) ^ crc_table[((crc >> 8) ^ (data >>  0)) & 0xff];
  }

  switch (len / 8) {
  80e804:	5a3fffcc 	andi	r8,r11,65535
  80e808:	1a04983a 	sll	r2,r3,r8
  80e80c:	4013883a 	mov	r9,r8
  80e810:	03c020f4 	movhi	r15,131
  80e814:	7bcf0284 	addi	r15,r15,15370
  80e818:	10cbc83a 	sub	r5,r2,r3
 */
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
  80e81c:	00800204 	movi	r2,8
  80e820:	40bfae1e 	bne	r8,r2,80e6dc <mad_bit_crc+0x2d0>
    bitptr->cache = *bitptr->byte;
  80e824:	63400003 	ldbu	r13,0(r12)
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e828:	68bfffcc 	andi	r2,r13,65535
  len  -= bitptr->left;
  80e82c:	01000204 	movi	r4,8
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e830:	1150703a 	and	r8,r2,r5
  len  -= bitptr->left;
  80e834:	2247c83a 	sub	r3,r4,r9
  bitptr->byte++;
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e838:	008001c4 	movi	r2,7
  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  len  -= bitptr->left;

  bitptr->byte++;
  80e83c:	63000044 	addi	r12,r12,1
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e840:	10c0172e 	bgeu	r2,r3,80e8a0 <mad_bit_crc+0x494>
    value = (value << CHAR_BIT) | *bitptr->byte++;
  80e844:	60800003 	ldbu	r2,0(r12)
  80e848:	4106983a 	sll	r3,r8,r4
  80e84c:	2017883a 	mov	r11,r4
  80e850:	63000044 	addi	r12,r12,1
  80e854:	1890b03a 	or	r8,r3,r2
  80e858:	003fa606 	br	80e6f4 <mad_bit_crc+0x2e8>
unsigned long mad_bit_read(struct mad_bitptr *bitptr, unsigned int len)
{
  register unsigned long value;

  if (bitptr->left == CHAR_BIT)
    bitptr->cache = *bitptr->byte;
  80e85c:	63400003 	ldbu	r13,0(r12)
  80e860:	00c03fc4 	movi	r3,255
  80e864:	000b883a 	mov	r5,zero
    return value;
  }

  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  80e868:	68bfffcc 	andi	r2,r13,65535
  80e86c:	10dc703a 	and	r14,r2,r3
  bitptr->byte++;
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e870:	008001c4 	movi	r2,7
  /* remaining bits in current byte */

  value = bitptr->cache & ((1 << bitptr->left) - 1);
  len  -= bitptr->left;

  bitptr->byte++;
  80e874:	63000044 	addi	r12,r12,1
  bitptr->left = CHAR_BIT;

  /* more bytes */

  while (len >= CHAR_BIT) {
  80e878:	1140172e 	bgeu	r2,r5,80e8d8 <mad_bit_crc+0x4cc>
    value = (value << CHAR_BIT) | *bitptr->byte++;
  80e87c:	60800003 	ldbu	r2,0(r12)
  80e880:	7006923a 	slli	r3,r14,8
  80e884:	02400204 	movi	r9,8
  80e888:	63000044 	addi	r12,r12,1
  80e88c:	189cb03a 	or	r14,r3,r2
  80e890:	02c00204 	movi	r11,8
  80e894:	02803fc4 	movi	r10,255
  80e898:	4811883a 	mov	r8,r9
  80e89c:	003fc506 	br	80e7b4 <mad_bit_crc+0x3a8>
    len  -= CHAR_BIT;
  }

  if (len > 0) {
  80e8a0:	18002626 	beq	r3,zero,80e93c <mad_bit_crc+0x530>
    bitptr->cache = *bitptr->byte;
  80e8a4:	63400003 	ldbu	r13,0(r12)

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e8a8:	20c5c83a 	sub	r2,r4,r3
  80e8ac:	40c8983a 	sll	r4,r8,r3
  80e8b0:	68ffffcc 	andi	r3,r13,65535
  80e8b4:	1887d83a 	sra	r3,r3,r2
    bitptr->left -= len;
  80e8b8:	1017883a 	mov	r11,r2
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e8bc:	20d0b03a 	or	r8,r4,r3
  80e8c0:	003f8c06 	br	80e6f4 <mad_bit_crc+0x2e8>
    bitptr->cache = *bitptr->byte;

  if (len < bitptr->left) {
    value = (bitptr->cache & ((1 << bitptr->left) - 1)) >>
      (bitptr->left - len);
    bitptr->left -= len;
  80e8c4:	00800044 	movi	r2,1
  80e8c8:	1104983a 	sll	r2,r2,r4
  80e8cc:	190bc83a 	sub	r5,r3,r4
  80e8d0:	10ffffc4 	addi	r3,r2,-1
  80e8d4:	003fe406 	br	80e868 <mad_bit_crc+0x45c>
  while (len >= CHAR_BIT) {
    value = (value << CHAR_BIT) | *bitptr->byte++;
    len  -= CHAR_BIT;
  }

  if (len > 0) {
  80e8d8:	28001326 	beq	r5,zero,80e928 <mad_bit_crc+0x51c>
    bitptr->cache = *bitptr->byte;
  80e8dc:	63400003 	ldbu	r13,0(r12)

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e8e0:	00c00204 	movi	r3,8
  80e8e4:	1947c83a 	sub	r3,r3,r5
    bitptr->left -= len;
  80e8e8:	1a3fffcc 	andi	r8,r3,65535
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e8ec:	693fffcc 	andi	r4,r13,65535
    bitptr->left -= len;
  80e8f0:	00800044 	movi	r2,1
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e8f4:	714a983a 	sll	r5,r14,r5
  80e8f8:	20c9d83a 	sra	r4,r4,r3
    bitptr->left -= len;
  80e8fc:	1204983a 	sll	r2,r2,r8
  80e900:	1817883a 	mov	r11,r3
  80e904:	4013883a 	mov	r9,r8
  }

  if (len > 0) {
    bitptr->cache = *bitptr->byte;

    value = (value << len) | (bitptr->cache >> (CHAR_BIT - len));
  80e908:	291cb03a 	or	r14,r5,r4
    bitptr->left -= len;
  80e90c:	12bfffc4 	addi	r10,r2,-1
  80e910:	003fa806 	br	80e7b4 <mad_bit_crc+0x3a8>
  while (len >= CHAR_BIT) {
    value = (value << CHAR_BIT) | *bitptr->byte++;
    len  -= CHAR_BIT;
  }

  if (len > 0) {
  80e914:	2013883a 	mov	r9,r4
  80e918:	2017883a 	mov	r11,r4
  80e91c:	01403fc4 	movi	r5,255
  80e920:	2011883a 	mov	r8,r4
  80e924:	003f6306 	br	80e6b4 <mad_bit_crc+0x2a8>
  80e928:	02400204 	movi	r9,8
  80e92c:	02c00204 	movi	r11,8
  80e930:	02803fc4 	movi	r10,255
  80e934:	4811883a 	mov	r8,r9
  80e938:	003f9e06 	br	80e7b4 <mad_bit_crc+0x3a8>
  80e93c:	2017883a 	mov	r11,r4
  80e940:	003f6c06 	br	80e6f4 <mad_bit_crc+0x2e8>

0080e944 <mad_decoder_init>:
  decoder->input_func   = input_func;
  decoder->header_func  = header_func;
  decoder->filter_func  = filter_func;
  decoder->output_func  = output_func;
  decoder->error_func   = error_func;
  decoder->message_func = message_func;
  80e944:	d8800317 	ldw	r2,12(sp)
  decoder->cb_data      = data;

  decoder->input_func   = input_func;
  decoder->header_func  = header_func;
  decoder->filter_func  = filter_func;
  decoder->output_func  = output_func;
  80e948:	d8c00117 	ldw	r3,4(sp)
						  struct mad_stream *,
						  struct mad_frame *),
		      enum mad_flow (*message_func)(void *,
						    void *, unsigned int *))
{
  decoder->mode         = -1;
  80e94c:	023fffc4 	movi	r8,-1
  decoder->input_func   = input_func;
  decoder->header_func  = header_func;
  decoder->filter_func  = filter_func;
  decoder->output_func  = output_func;
  decoder->error_func   = error_func;
  decoder->message_func = message_func;
  80e950:	20800c15 	stw	r2,48(r4)

  decoder->cb_data      = data;

  decoder->input_func   = input_func;
  decoder->header_func  = header_func;
  decoder->filter_func  = filter_func;
  80e954:	d8800017 	ldw	r2,0(sp)

  decoder->options      = 0;

  decoder->async.pid    = 0;
  decoder->async.in     = -1;
  decoder->async.out    = -1;
  80e958:	22000415 	stw	r8,16(r4)

  decoder->sync         = 0;

  decoder->cb_data      = data;
  80e95c:	21400615 	stw	r5,24(r4)

  decoder->input_func   = input_func;
  decoder->header_func  = header_func;
  decoder->filter_func  = filter_func;
  80e960:	20800915 	stw	r2,36(r4)
  decoder->output_func  = output_func;
  decoder->error_func   = error_func;
  80e964:	d8800217 	ldw	r2,8(sp)

  decoder->sync         = 0;

  decoder->cb_data      = data;

  decoder->input_func   = input_func;
  80e968:	21800715 	stw	r6,28(r4)
  decoder->header_func  = header_func;
  80e96c:	21c00815 	stw	r7,32(r4)
  decoder->filter_func  = filter_func;
  decoder->output_func  = output_func;
  80e970:	20c00a15 	stw	r3,40(r4)
  decoder->error_func   = error_func;
  80e974:	20800b15 	stw	r2,44(r4)
						  struct mad_stream *,
						  struct mad_frame *),
		      enum mad_flow (*message_func)(void *,
						    void *, unsigned int *))
{
  decoder->mode         = -1;
  80e978:	22000015 	stw	r8,0(r4)

  decoder->options      = 0;
  80e97c:	20000115 	stw	zero,4(r4)

  decoder->async.pid    = 0;
  80e980:	20000215 	stw	zero,8(r4)
  decoder->async.in     = -1;
  80e984:	22000315 	stw	r8,12(r4)
  decoder->async.out    = -1;

  decoder->sync         = 0;
  80e988:	20000515 	stw	zero,20(r4)
  decoder->header_func  = header_func;
  decoder->filter_func  = filter_func;
  decoder->output_func  = output_func;
  decoder->error_func   = error_func;
  decoder->message_func = message_func;
}
  80e98c:	f800283a 	ret

0080e990 <mad_decoder_finish>:
    return (!WIFEXITED(status) || WEXITSTATUS(status)) ? -1 : 0;
  }
# endif

  return 0;
}
  80e990:	0005883a 	mov	r2,zero
  80e994:	f800283a 	ret

0080e998 <mad_decoder_message>:

  return 0;
# else
  return -1;
# endif
}
  80e998:	00bfffc4 	movi	r2,-1
  80e99c:	f800283a 	ret

0080e9a0 <mad_decoder_run>:
/*
 * NAME:	decoder->run()
 * DESCRIPTION:	run the decoder thread either synchronously or asynchronously
 */
int mad_decoder_run(struct mad_decoder *decoder, enum mad_decoder_mode mode)
{
  80e9a0:	defffd04 	addi	sp,sp,-12
  80e9a4:	dc000015 	stw	r16,0(sp)
  80e9a8:	2021883a 	mov	r16,r4
  80e9ac:	dfc00215 	stw	ra,8(sp)
  80e9b0:	dc400115 	stw	r17,4(sp)
  }

  if (run == 0)
    return -1;

  decoder->sync = malloc(sizeof(*decoder->sync));
  80e9b4:	01162004 	movi	r4,22656
int mad_decoder_run(struct mad_decoder *decoder, enum mad_decoder_mode mode)
{
  int result;
  int (*run)(struct mad_decoder *) = 0;

  switch (decoder->mode = mode) {
  80e9b8:	81400015 	stw	r5,0(r16)
  80e9bc:	28000f1e 	bne	r5,zero,80e9fc <mad_decoder_run+0x5c>
  }

  if (run == 0)
    return -1;

  decoder->sync = malloc(sizeof(*decoder->sync));
  80e9c0:	08216fc0 	call	8216fc <malloc>
  80e9c4:	80800515 	stw	r2,20(r16)
  if (decoder->sync == 0)
    return -1;

  result = run(decoder);
  80e9c8:	8009883a 	mov	r4,r16

  if (run == 0)
    return -1;

  decoder->sync = malloc(sizeof(*decoder->sync));
  if (decoder->sync == 0)
  80e9cc:	10000b26 	beq	r2,zero,80e9fc <mad_decoder_run+0x5c>
    return -1;

  result = run(decoder);
  80e9d0:	080ea180 	call	80ea18 <run_sync>

  free(decoder->sync);
  80e9d4:	81000517 	ldw	r4,20(r16)

  decoder->sync = malloc(sizeof(*decoder->sync));
  if (decoder->sync == 0)
    return -1;

  result = run(decoder);
  80e9d8:	1023883a 	mov	r17,r2

  free(decoder->sync);
  80e9dc:	08216e80 	call	8216e8 <free>
  decoder->sync = 0;

  return result;
}
  80e9e0:	8805883a 	mov	r2,r17
    return -1;

  result = run(decoder);

  free(decoder->sync);
  decoder->sync = 0;
  80e9e4:	80000515 	stw	zero,20(r16)

  return result;
}
  80e9e8:	dfc00217 	ldw	ra,8(sp)
  80e9ec:	dc400117 	ldw	r17,4(sp)
  80e9f0:	dc000017 	ldw	r16,0(sp)
  80e9f4:	dec00304 	addi	sp,sp,12
  80e9f8:	f800283a 	ret
  result = run(decoder);

  free(decoder->sync);
  decoder->sync = 0;

  return result;
  80e9fc:	047fffc4 	movi	r17,-1
}
  80ea00:	8805883a 	mov	r2,r17
  80ea04:	dfc00217 	ldw	ra,8(sp)
  80ea08:	dc400117 	ldw	r17,4(sp)
  80ea0c:	dc000017 	ldw	r16,0(sp)
  80ea10:	dec00304 	addi	sp,sp,12
  80ea14:	f800283a 	ret

0080ea18 <run_sync>:
  struct mad_stream *stream;
  struct mad_frame *frame;
  struct mad_synth *synth;
  int result = 0;

  if (decoder->input_func == 0)
  80ea18:	20800717 	ldw	r2,28(r4)
  }
}

static
int run_sync(struct mad_decoder *decoder)
{
  80ea1c:	defff504 	addi	sp,sp,-44
  80ea20:	dc000115 	stw	r16,4(sp)
  80ea24:	dfc00a15 	stw	ra,40(sp)
  80ea28:	df000915 	stw	fp,36(sp)
  80ea2c:	ddc00815 	stw	r23,32(sp)
  80ea30:	dd800715 	stw	r22,28(sp)
  80ea34:	dd400615 	stw	r21,24(sp)
  80ea38:	dd000515 	stw	r20,20(sp)
  80ea3c:	dcc00415 	stw	r19,16(sp)
  80ea40:	dc800315 	stw	r18,12(sp)
  80ea44:	dc400215 	stw	r17,8(sp)
  80ea48:	2021883a 	mov	r16,r4
  enum mad_flow (*error_func)(void *, struct mad_stream *, struct mad_frame *);
  void *error_data;
  int bad_last_frame = 0;
  80ea4c:	d8000015 	stw	zero,0(sp)
  struct mad_stream *stream;
  struct mad_frame *frame;
  struct mad_synth *synth;
  int result = 0;

  if (decoder->input_func == 0)
  80ea50:	10007326 	beq	r2,zero,80ec20 <run_sync+0x208>
    return 0;

  if (decoder->error_func) {
  80ea54:	24c00b17 	ldw	r19,44(r4)
  80ea58:	98006d26 	beq	r19,zero,80ec10 <run_sync+0x1f8>
    error_func = decoder->error_func;
    error_data = decoder->cb_data;
  80ea5c:	25c00617 	ldw	r23,24(r4)
  else {
    error_func = error_default;
    error_data = &bad_last_frame;
  }

  stream = &decoder->sync->stream;
  80ea60:	84400517 	ldw	r17,20(r16)
  frame  = &decoder->sync->frame;
  synth  = &decoder->sync->synth;

  mad_stream_init(stream);
  80ea64:	8809883a 	mov	r4,r17
    error_func = error_default;
    error_data = &bad_last_frame;
  }

  stream = &decoder->sync->stream;
  frame  = &decoder->sync->frame;
  80ea68:	8c801004 	addi	r18,r17,64
  synth  = &decoder->sync->synth;

  mad_stream_init(stream);
  80ea6c:	08155200 	call	815520 <mad_stream_init>
    error_data = &bad_last_frame;
  }

  stream = &decoder->sync->stream;
  frame  = &decoder->sync->frame;
  synth  = &decoder->sync->synth;
  80ea70:	8d091d04 	addi	r20,r17,9332

  mad_stream_init(stream);
  mad_frame_init(frame);
  80ea74:	9009883a 	mov	r4,r18
  80ea78:	080f6640 	call	80f664 <mad_frame_init>
  mad_synth_init(synth);
  80ea7c:	a009883a 	mov	r4,r20
  80ea80:	0817ae80 	call	817ae8 <mad_synth_init>

  mad_stream_options(stream, decoder->options);
  80ea84:	80800117 	ldw	r2,4(r16)
  80ea88:	88800e15 	stw	r2,56(r17)

  do {
    switch (decoder->input_func(decoder->cb_data, stream)) {
  80ea8c:	81000617 	ldw	r4,24(r16)
  80ea90:	80c00717 	ldw	r3,28(r16)
  80ea94:	880b883a 	mov	r5,r17
  80ea98:	183ee83a 	callr	r3
  80ea9c:	01000444 	movi	r4,17
  80eaa0:	11001726 	beq	r2,r4,80eb00 <run_sync+0xe8>
  80eaa4:	01400804 	movi	r5,32
  80eaa8:	11404926 	beq	r2,r5,80ebd0 <run_sync+0x1b8>
  80eaac:	00c00404 	movi	r3,16
  80eab0:	10c04526 	beq	r2,r3,80ebc8 <run_sync+0x1b0>
  80eab4:	182d883a 	mov	r22,r3
  80eab8:	202b883a 	mov	r21,r4
  80eabc:	2839883a 	mov	fp,r5
	  goto done;
	}
      }
# endif

      if (decoder->header_func) {
  80eac0:	80800817 	ldw	r2,32(r16)
  80eac4:	10002726 	beq	r2,zero,80eb64 <run_sync+0x14c>
	if (mad_header_decode(&frame->header, stream) == -1) {
  80eac8:	9009883a 	mov	r4,r18
  80eacc:	880b883a 	mov	r5,r17
  80ead0:	080f0240 	call	80f024 <mad_header_decode>
  80ead4:	00ffffc4 	movi	r3,-1
  80ead8:	10c01b1e 	bne	r2,r3,80eb48 <run_sync+0x130>
	  if (!MAD_RECOVERABLE(stream->error))
  80eadc:	88c00f17 	ldw	r3,60(r17)
  80eae0:	18bfc00c 	andi	r2,r3,65280
  80eae4:	10003b26 	beq	r2,zero,80ebd4 <run_sync+0x1bc>
	    break;

	  switch (error_func(error_data, stream, frame)) {
  80eae8:	b809883a 	mov	r4,r23
  80eaec:	880b883a 	mov	r5,r17
  80eaf0:	900d883a 	mov	r6,r18
  80eaf4:	983ee83a 	callr	r19
  80eaf8:	15803326 	beq	r2,r22,80ebc8 <run_sync+0x1b0>

      mad_synth_frame(synth, frame);

      if (decoder->output_func) {
	switch (decoder->output_func(decoder->cb_data,
				     &frame->header, &synth->pcm)) {
  80eafc:	157ff01e 	bne	r2,r21,80eac0 <run_sync+0xa8>
  while (stream->error == MAD_ERROR_BUFLEN);

 fail:
  result = -1;

 done:
  80eb00:	043fffc4 	movi	r16,-1
  mad_synth_finish(synth);
  mad_frame_finish(frame);
  80eb04:	9009883a 	mov	r4,r18
  80eb08:	080f6300 	call	80f630 <mad_frame_finish>
  mad_stream_finish(stream);
  80eb0c:	8809883a 	mov	r4,r17
  80eb10:	08155880 	call	815588 <mad_stream_finish>

  return result;
}
  80eb14:	8005883a 	mov	r2,r16
  80eb18:	dfc00a17 	ldw	ra,40(sp)
  80eb1c:	df000917 	ldw	fp,36(sp)
  80eb20:	ddc00817 	ldw	r23,32(sp)
  80eb24:	dd800717 	ldw	r22,28(sp)
  80eb28:	dd400617 	ldw	r21,24(sp)
  80eb2c:	dd000517 	ldw	r20,20(sp)
  80eb30:	dcc00417 	ldw	r19,16(sp)
  80eb34:	dc800317 	ldw	r18,12(sp)
  80eb38:	dc400217 	ldw	r17,8(sp)
  80eb3c:	dc000117 	ldw	r16,4(sp)
  80eb40:	dec00b04 	addi	sp,sp,44
  80eb44:	f800283a 	ret
	  default:
	    continue;
	  }
	}

	switch (decoder->header_func(decoder->cb_data, &frame->header)) {
  80eb48:	80c00817 	ldw	r3,32(r16)
  80eb4c:	81000617 	ldw	r4,24(r16)
  80eb50:	900b883a 	mov	r5,r18
  80eb54:	183ee83a 	callr	r3
  80eb58:	157fe926 	beq	r2,r21,80eb00 <run_sync+0xe8>
  80eb5c:	173fd826 	beq	r2,fp,80eac0 <run_sync+0xa8>
  80eb60:	15801926 	beq	r2,r22,80ebc8 <run_sync+0x1b0>
	case MAD_FLOW_CONTINUE:
	  break;
	}
      }

      if (mad_frame_decode(frame, stream) == -1) {
  80eb64:	9009883a 	mov	r4,r18
  80eb68:	880b883a 	mov	r5,r17
  80eb6c:	080f50c0 	call	80f50c <mad_frame_decode>
  80eb70:	00ffffc4 	movi	r3,-1
  80eb74:	10c01a26 	beq	r2,r3,80ebe0 <run_sync+0x1c8>
	default:
	  continue;
	}
      }
      else
	bad_last_frame = 0;
  80eb78:	d8000015 	stw	zero,0(sp)

      if (decoder->filter_func) {
  80eb7c:	80800917 	ldw	r2,36(r16)
  80eb80:	10000726 	beq	r2,zero,80eba0 <run_sync+0x188>
	switch (decoder->filter_func(decoder->cb_data, stream, frame)) {
  80eb84:	81000617 	ldw	r4,24(r16)
  80eb88:	880b883a 	mov	r5,r17
  80eb8c:	900d883a 	mov	r6,r18
  80eb90:	103ee83a 	callr	r2
  80eb94:	157fda26 	beq	r2,r21,80eb00 <run_sync+0xe8>
  80eb98:	173fc926 	beq	r2,fp,80eac0 <run_sync+0xa8>
  80eb9c:	15800a26 	beq	r2,r22,80ebc8 <run_sync+0x1b0>
	case MAD_FLOW_CONTINUE:
	  break;
	}
      }

      mad_synth_frame(synth, frame);
  80eba0:	a009883a 	mov	r4,r20
  80eba4:	900b883a 	mov	r5,r18
  80eba8:	08179e40 	call	8179e4 <mad_synth_frame>

      if (decoder->output_func) {
  80ebac:	80800a17 	ldw	r2,40(r16)
  80ebb0:	103fc326 	beq	r2,zero,80eac0 <run_sync+0xa8>
	switch (decoder->output_func(decoder->cb_data,
				     &frame->header, &synth->pcm)) {
  80ebb4:	81000617 	ldw	r4,24(r16)
  80ebb8:	900b883a 	mov	r5,r18
  80ebbc:	a1840104 	addi	r6,r20,4100
  80ebc0:	103ee83a 	callr	r2
  80ebc4:	15bfcd1e 	bne	r2,r22,80eafc <run_sync+0xe4>
  while (stream->error == MAD_ERROR_BUFLEN);

 fail:
  result = -1;

 done:
  80ebc8:	0021883a 	mov	r16,zero
  80ebcc:	003fcd06 	br	80eb04 <run_sync+0xec>
  80ebd0:	88c00f17 	ldw	r3,60(r17)
	  break;
	}
      }
    }
  }
  while (stream->error == MAD_ERROR_BUFLEN);
  80ebd4:	00800044 	movi	r2,1
  80ebd8:	18bfac26 	beq	r3,r2,80ea8c <run_sync+0x74>
  80ebdc:	003fc806 	br	80eb00 <run_sync+0xe8>
	  break;
	}
      }

      if (mad_frame_decode(frame, stream) == -1) {
	if (!MAD_RECOVERABLE(stream->error))
  80ebe0:	88c00f17 	ldw	r3,60(r17)
  80ebe4:	18bfc00c 	andi	r2,r3,65280
  80ebe8:	103ffa26 	beq	r2,zero,80ebd4 <run_sync+0x1bc>
	  break;

	switch (error_func(error_data, stream, frame)) {
  80ebec:	b809883a 	mov	r4,r23
  80ebf0:	880b883a 	mov	r5,r17
  80ebf4:	900d883a 	mov	r6,r18
  80ebf8:	983ee83a 	callr	r19
  80ebfc:	157fc026 	beq	r2,r21,80eb00 <run_sync+0xe8>
  80ec00:	173fde26 	beq	r2,fp,80eb7c <run_sync+0x164>
  80ec04:	15bfae1e 	bne	r2,r22,80eac0 <run_sync+0xa8>
  while (stream->error == MAD_ERROR_BUFLEN);

 fail:
  result = -1;

 done:
  80ec08:	0021883a 	mov	r16,zero
  80ec0c:	003fbd06 	br	80eb04 <run_sync+0xec>
  int result = 0;

  if (decoder->input_func == 0)
    return 0;

  if (decoder->error_func) {
  80ec10:	04c02074 	movhi	r19,129
  80ec14:	9cfb0a04 	addi	r19,r19,-5080
  80ec18:	d82f883a 	mov	r23,sp
  80ec1c:	003f9006 	br	80ea60 <run_sync+0x48>
  struct mad_stream *stream;
  struct mad_frame *frame;
  struct mad_synth *synth;
  int result = 0;

  if (decoder->input_func == 0)
  80ec20:	0021883a 	mov	r16,zero
  80ec24:	003fbb06 	br	80eb14 <run_sync+0xfc>

0080ec28 <error_default>:
enum mad_flow error_default(void *data, struct mad_stream *stream,
			    struct mad_frame *frame)
{
  int *bad_last_frame = data;

  switch (stream->error) {
  80ec28:	28c00f17 	ldw	r3,60(r5)
# endif

static
enum mad_flow error_default(void *data, struct mad_stream *stream,
			    struct mad_frame *frame)
{
  80ec2c:	deffff04 	addi	sp,sp,-4
  int *bad_last_frame = data;

  switch (stream->error) {
  80ec30:	00808044 	movi	r2,513
# endif

static
enum mad_flow error_default(void *data, struct mad_stream *stream,
			    struct mad_frame *frame)
{
  80ec34:	dfc00015 	stw	ra,0(sp)
  int *bad_last_frame = data;

  switch (stream->error) {
  80ec38:	000b883a 	mov	r5,zero
# endif

static
enum mad_flow error_default(void *data, struct mad_stream *stream,
			    struct mad_frame *frame)
{
  80ec3c:	200f883a 	mov	r7,r4
  int *bad_last_frame = data;

  switch (stream->error) {
  80ec40:	18800426 	beq	r3,r2,80ec54 <error_default+0x2c>
    return MAD_FLOW_IGNORE;

  default:
    return MAD_FLOW_CONTINUE;
  }
}
  80ec44:	2805883a 	mov	r2,r5
  80ec48:	dfc00017 	ldw	ra,0(sp)
  80ec4c:	dec00104 	addi	sp,sp,4
  80ec50:	f800283a 	ret
{
  int *bad_last_frame = data;

  switch (stream->error) {
  case MAD_ERROR_BADCRC:
    if (*bad_last_frame)
  80ec54:	20800017 	ldw	r2,0(r4)
      mad_frame_mute(frame);
  80ec58:	3009883a 	mov	r4,r6
{
  int *bad_last_frame = data;

  switch (stream->error) {
  case MAD_ERROR_BADCRC:
    if (*bad_last_frame)
  80ec5c:	1000071e 	bne	r2,zero,80ec7c <error_default+0x54>
      mad_frame_mute(frame);
    else
      *bad_last_frame = 1;
  80ec60:	00800044 	movi	r2,1
  80ec64:	01400804 	movi	r5,32
  80ec68:	38800015 	stw	r2,0(r7)
    return MAD_FLOW_IGNORE;

  default:
    return MAD_FLOW_CONTINUE;
  }
}
  80ec6c:	2805883a 	mov	r2,r5
  80ec70:	dfc00017 	ldw	ra,0(sp)
  80ec74:	dec00104 	addi	sp,sp,4
  80ec78:	f800283a 	ret
  int *bad_last_frame = data;

  switch (stream->error) {
  case MAD_ERROR_BADCRC:
    if (*bad_last_frame)
      mad_frame_mute(frame);
  80ec7c:	080eccc0 	call	80eccc <mad_frame_mute>
  80ec80:	01400804 	movi	r5,32
  80ec84:	003fef06 	br	80ec44 <error_default+0x1c>

0080ec88 <mad_header_init>:
  header->crc_target     = 0;

  header->flags          = 0;
  header->private_bits   = 0;

  header->duration       = mad_timer_zero;
  80ec88:	00802134 	movhi	r2,132
  80ec8c:	1082de04 	addi	r2,r2,2936
  80ec90:	10c00117 	ldw	r3,4(r2)
  80ec94:	11400017 	ldw	r5,0(r2)
 * NAME:	header->init()
 * DESCRIPTION:	initialize header struct
 */
void mad_header_init(struct mad_header *header)
{
  header->layer          = 0;
  80ec98:	20000015 	stw	zero,0(r4)
  header->crc_target     = 0;

  header->flags          = 0;
  header->private_bits   = 0;

  header->duration       = mad_timer_zero;
  80ec9c:	20c00a15 	stw	r3,40(r4)
  80eca0:	21400915 	stw	r5,36(r4)
 * DESCRIPTION:	initialize header struct
 */
void mad_header_init(struct mad_header *header)
{
  header->layer          = 0;
  header->mode           = 0;
  80eca4:	20000115 	stw	zero,4(r4)
  header->mode_extension = 0;
  80eca8:	20000215 	stw	zero,8(r4)
  header->emphasis       = 0;
  80ecac:	20000315 	stw	zero,12(r4)

  header->bitrate        = 0;
  80ecb0:	20000415 	stw	zero,16(r4)
  header->samplerate     = 0;
  80ecb4:	20000515 	stw	zero,20(r4)

  header->crc_check      = 0;
  80ecb8:	2000060d 	sth	zero,24(r4)
  header->crc_target     = 0;
  80ecbc:	2000068d 	sth	zero,26(r4)

  header->flags          = 0;
  80ecc0:	20000715 	stw	zero,28(r4)
  header->private_bits   = 0;
  80ecc4:	20000815 	stw	zero,32(r4)

  header->duration       = mad_timer_zero;
}
  80ecc8:	f800283a 	ret

0080eccc <mad_frame_mute>:
/*
 * NAME:	frame->mute()
 * DESCRIPTION:	zero all subband values so the frame becomes silent
 */
void mad_frame_mute(struct mad_frame *frame)
{
  80eccc:	000d883a 	mov	r6,zero
	(*frame->overlap)[0][sb][s] =
	(*frame->overlap)[1][sb][s] = 0;
      }
    }
  }
}
  80ecd0:	300491fa 	slli	r2,r6,7
  80ecd4:	000b883a 	mov	r5,zero
  80ecd8:	10848c04 	addi	r2,r2,4656
  80ecdc:	2087883a 	add	r3,r4,r2
void mad_frame_mute(struct mad_frame *frame)
{
  unsigned int s, sb;

  for (s = 0; s < 36; ++s) {
    for (sb = 0; sb < 32; ++sb) {
  80ece0:	29400044 	addi	r5,r5,1
  80ece4:	00800804 	movi	r2,32
      frame->sbsample[0][s][sb] =
  80ece8:	18000015 	stw	zero,0(r3)
  80ecec:	183b8015 	stw	zero,-4608(r3)
void mad_frame_mute(struct mad_frame *frame)
{
  unsigned int s, sb;

  for (s = 0; s < 36; ++s) {
    for (sb = 0; sb < 32; ++sb) {
  80ecf0:	18c00104 	addi	r3,r3,4
  80ecf4:	28bffa1e 	bne	r5,r2,80ece0 <mad_frame_mute+0x14>
 */
void mad_frame_mute(struct mad_frame *frame)
{
  unsigned int s, sb;

  for (s = 0; s < 36; ++s) {
  80ecf8:	31800044 	addi	r6,r6,1
  80ecfc:	00800904 	movi	r2,36
  80ed00:	30bff31e 	bne	r6,r2,80ecd0 <mad_frame_mute+0x4>
      frame->sbsample[0][s][sb] =
      frame->sbsample[1][s][sb] = 0;
    }
  }

  if (frame->overlap) {
  80ed04:	21090c17 	ldw	r4,9264(r4)
  80ed08:	20001026 	beq	r4,zero,80ed4c <mad_frame_mute+0x80>
	(*frame->overlap)[0][sb][s] =
	(*frame->overlap)[1][sb][s] = 0;
      }
    }
  }
}
  80ed0c:	000d883a 	mov	r6,zero
  80ed10:	3185883a 	add	r2,r6,r6
  80ed14:	1085883a 	add	r2,r2,r2
  80ed18:	10824004 	addi	r2,r2,2304
  80ed1c:	2087883a 	add	r3,r4,r2
  80ed20:	000b883a 	mov	r5,zero
    }
  }

  if (frame->overlap) {
    for (s = 0; s < 18; ++s) {
      for (sb = 0; sb < 32; ++sb) {
  80ed24:	29400044 	addi	r5,r5,1
  80ed28:	00800804 	movi	r2,32
	(*frame->overlap)[0][sb][s] =
  80ed2c:	18000015 	stw	zero,0(r3)
  80ed30:	183dc015 	stw	zero,-2304(r3)
    }
  }

  if (frame->overlap) {
    for (s = 0; s < 18; ++s) {
      for (sb = 0; sb < 32; ++sb) {
  80ed34:	18c01204 	addi	r3,r3,72
  80ed38:	28bffa1e 	bne	r5,r2,80ed24 <mad_frame_mute+0x58>
      frame->sbsample[1][s][sb] = 0;
    }
  }

  if (frame->overlap) {
    for (s = 0; s < 18; ++s) {
  80ed3c:	31800044 	addi	r6,r6,1
  80ed40:	00800484 	movi	r2,18
  80ed44:	30bff21e 	bne	r6,r2,80ed10 <mad_frame_mute+0x44>
  80ed48:	f800283a 	ret
  80ed4c:	f800283a 	ret

0080ed50 <decode_header>:
 * NAME:	decode_header()
 * DESCRIPTION:	read header data and following CRC word
 */
static
int decode_header(struct mad_header *header, struct mad_stream *stream)
{
  80ed50:	defffb04 	addi	sp,sp,-20
  80ed54:	dc400115 	stw	r17,4(sp)
  header->private_bits = 0;

  /* header() */

  /* syncword */
  mad_bit_skip(&stream->ptr, 11);
  80ed58:	2c400704 	addi	r17,r5,28
 * NAME:	decode_header()
 * DESCRIPTION:	read header data and following CRC word
 */
static
int decode_header(struct mad_header *header, struct mad_stream *stream)
{
  80ed5c:	dcc00315 	stw	r19,12(sp)
  80ed60:	dc000015 	stw	r16,0(sp)
  unsigned int index;

  header->flags        = 0;
  80ed64:	20000715 	stw	zero,28(r4)
  header->private_bits = 0;
  80ed68:	20000815 	stw	zero,32(r4)
 * NAME:	decode_header()
 * DESCRIPTION:	read header data and following CRC word
 */
static
int decode_header(struct mad_header *header, struct mad_stream *stream)
{
  80ed6c:	2827883a 	mov	r19,r5
  80ed70:	2021883a 	mov	r16,r4
  header->private_bits = 0;

  /* header() */

  /* syncword */
  mad_bit_skip(&stream->ptr, 11);
  80ed74:	014002c4 	movi	r5,11
  80ed78:	8809883a 	mov	r4,r17
 * NAME:	decode_header()
 * DESCRIPTION:	read header data and following CRC word
 */
static
int decode_header(struct mad_header *header, struct mad_stream *stream)
{
  80ed7c:	dfc00415 	stw	ra,16(sp)
  80ed80:	dc800215 	stw	r18,8(sp)
  header->private_bits = 0;

  /* header() */

  /* syncword */
  mad_bit_skip(&stream->ptr, 11);
  80ed84:	080e2d40 	call	80e2d4 <mad_bit_skip>

  /* MPEG 2.5 indicator (really part of syncword) */
  if (mad_bit_read(&stream->ptr, 1) == 0)
  80ed88:	8809883a 	mov	r4,r17
  80ed8c:	01400044 	movi	r5,1
  80ed90:	080e3300 	call	80e330 <mad_bit_read>
  80ed94:	1000031e 	bne	r2,zero,80eda4 <decode_header+0x54>
    header->flags |= MAD_FLAG_MPEG_2_5_EXT;
  80ed98:	80800717 	ldw	r2,28(r16)
  80ed9c:	10900014 	ori	r2,r2,16384
  80eda0:	80800715 	stw	r2,28(r16)

  /* ID */
  if (mad_bit_read(&stream->ptr, 1) == 0)
  80eda4:	8809883a 	mov	r4,r17
  80eda8:	01400044 	movi	r5,1
  80edac:	080e3300 	call	80e330 <mad_bit_read>
  80edb0:	1000721e 	bne	r2,zero,80ef7c <decode_header+0x22c>
    header->flags |= MAD_FLAG_LSF_EXT;
  80edb4:	80800717 	ldw	r2,28(r16)
  80edb8:	10840014 	ori	r2,r2,4096
  80edbc:	80800715 	stw	r2,28(r16)
    stream->error = MAD_ERROR_LOSTSYNC;
    return -1;
  }

  /* layer */
  header->layer = 4 - mad_bit_read(&stream->ptr, 2);
  80edc0:	8809883a 	mov	r4,r17
  80edc4:	01400084 	movi	r5,2
  80edc8:	080e3300 	call	80e330 <mad_bit_read>
  80edcc:	04800104 	movi	r18,4
  80edd0:	9085c83a 	sub	r2,r18,r2
  80edd4:	80800015 	stw	r2,0(r16)

  if (header->layer == 4) {
  80edd8:	14808626 	beq	r2,r18,80eff4 <decode_header+0x2a4>
    stream->error = MAD_ERROR_BADLAYER;
    return -1;
  }

  /* protection_bit */
  if (mad_bit_read(&stream->ptr, 1) == 0) {
  80eddc:	8809883a 	mov	r4,r17
  80ede0:	01400044 	movi	r5,1
  80ede4:	080e3300 	call	80e330 <mad_bit_read>
  80ede8:	10007626 	beq	r2,zero,80efc4 <decode_header+0x274>
    header->flags    |= MAD_FLAG_PROTECTION;
    header->crc_check = mad_bit_crc(stream->ptr, 16, 0xffff);
  }

  /* bitrate_index */
  index = mad_bit_read(&stream->ptr, 4);
  80edec:	900b883a 	mov	r5,r18
  80edf0:	8809883a 	mov	r4,r17
  80edf4:	080e3300 	call	80e330 <mad_bit_read>
  80edf8:	1007883a 	mov	r3,r2

  if (index == 15) {
  80edfc:	008003c4 	movi	r2,15
  80ee00:	18808026 	beq	r3,r2,80f004 <decode_header+0x2b4>
    stream->error = MAD_ERROR_BADBITRATE;
    return -1;
  }

  if (header->flags & MAD_FLAG_LSF_EXT)
  80ee04:	80800717 	ldw	r2,28(r16)
  80ee08:	1084000c 	andi	r2,r2,4096
  80ee0c:	10006226 	beq	r2,zero,80ef98 <decode_header+0x248>
    header->bitrate = bitrate_table[3 + (header->layer >> 1)][index];
  80ee10:	80800017 	ldw	r2,0(r16)
  80ee14:	1004d07a 	srli	r2,r2,1
  80ee18:	108003e4 	muli	r2,r2,15
  80ee1c:	10c5883a 	add	r2,r2,r3
  80ee20:	1085883a 	add	r2,r2,r2
  80ee24:	1085883a 	add	r2,r2,r2
  80ee28:	00c020f4 	movhi	r3,131
  80ee2c:	18cf8604 	addi	r3,r3,15896
  80ee30:	10c5883a 	add	r2,r2,r3
  80ee34:	11002d17 	ldw	r4,180(r2)
  80ee38:	81000415 	stw	r4,16(r16)
  else
    header->bitrate = bitrate_table[header->layer - 1][index];

  /* sampling_frequency */
  index = mad_bit_read(&stream->ptr, 2);
  80ee3c:	8809883a 	mov	r4,r17
  80ee40:	01400084 	movi	r5,2
  80ee44:	080e3300 	call	80e330 <mad_bit_read>
  80ee48:	1007883a 	mov	r3,r2

  if (index == 3) {
  80ee4c:	008000c4 	movi	r2,3
  80ee50:	18807026 	beq	r3,r2,80f014 <decode_header+0x2c4>
    stream->error = MAD_ERROR_BADSAMPLERATE;
    return -1;
  }

  header->samplerate = samplerate_table[index];
  80ee54:	18c5883a 	add	r2,r3,r3
  80ee58:	1085883a 	add	r2,r2,r2
  80ee5c:	00c020f4 	movhi	r3,131
  80ee60:	18cfd104 	addi	r3,r3,16196
  80ee64:	10c5883a 	add	r2,r2,r3

  if (header->flags & MAD_FLAG_LSF_EXT) {
  80ee68:	81400717 	ldw	r5,28(r16)
  if (index == 3) {
    stream->error = MAD_ERROR_BADSAMPLERATE;
    return -1;
  }

  header->samplerate = samplerate_table[index];
  80ee6c:	11000017 	ldw	r4,0(r2)

  if (header->flags & MAD_FLAG_LSF_EXT) {
  80ee70:	28c4000c 	andi	r3,r5,4096
  if (index == 3) {
    stream->error = MAD_ERROR_BADSAMPLERATE;
    return -1;
  }

  header->samplerate = samplerate_table[index];
  80ee74:	81000515 	stw	r4,20(r16)

  if (header->flags & MAD_FLAG_LSF_EXT) {
  80ee78:	18000626 	beq	r3,zero,80ee94 <decode_header+0x144>
    header->samplerate /= 2;
  80ee7c:	2004d07a 	srli	r2,r4,1

    if (header->flags & MAD_FLAG_MPEG_2_5_EXT)
  80ee80:	28d0000c 	andi	r3,r5,16384
  }

  header->samplerate = samplerate_table[index];

  if (header->flags & MAD_FLAG_LSF_EXT) {
    header->samplerate /= 2;
  80ee84:	80800515 	stw	r2,20(r16)

    if (header->flags & MAD_FLAG_MPEG_2_5_EXT)
  80ee88:	18000226 	beq	r3,zero,80ee94 <decode_header+0x144>
      header->samplerate /= 2;
  80ee8c:	2004d0ba 	srli	r2,r4,2
  80ee90:	80800515 	stw	r2,20(r16)
  }

  /* padding_bit */
  if (mad_bit_read(&stream->ptr, 1))
  80ee94:	8809883a 	mov	r4,r17
  80ee98:	01400044 	movi	r5,1
  80ee9c:	080e3300 	call	80e330 <mad_bit_read>
  80eea0:	10000326 	beq	r2,zero,80eeb0 <decode_header+0x160>
    header->flags |= MAD_FLAG_PADDING;
  80eea4:	80800717 	ldw	r2,28(r16)
  80eea8:	10802014 	ori	r2,r2,128
  80eeac:	80800715 	stw	r2,28(r16)

  /* private_bit */
  if (mad_bit_read(&stream->ptr, 1))
  80eeb0:	8809883a 	mov	r4,r17
  80eeb4:	01400044 	movi	r5,1
  80eeb8:	080e3300 	call	80e330 <mad_bit_read>
  80eebc:	10000326 	beq	r2,zero,80eecc <decode_header+0x17c>
    header->private_bits |= MAD_PRIVATE_HEADER;
  80eec0:	80800817 	ldw	r2,32(r16)
  80eec4:	10804014 	ori	r2,r2,256
  80eec8:	80800815 	stw	r2,32(r16)

  /* mode */
  header->mode = 3 - mad_bit_read(&stream->ptr, 2);
  80eecc:	8809883a 	mov	r4,r17
  80eed0:	01400084 	movi	r5,2
  80eed4:	080e3300 	call	80e330 <mad_bit_read>
  80eed8:	00c000c4 	movi	r3,3
  80eedc:	1887c83a 	sub	r3,r3,r2

  /* mode_extension */
  header->mode_extension = mad_bit_read(&stream->ptr, 2);
  80eee0:	8809883a 	mov	r4,r17
  80eee4:	01400084 	movi	r5,2
  /* private_bit */
  if (mad_bit_read(&stream->ptr, 1))
    header->private_bits |= MAD_PRIVATE_HEADER;

  /* mode */
  header->mode = 3 - mad_bit_read(&stream->ptr, 2);
  80eee8:	80c00115 	stw	r3,4(r16)

  /* mode_extension */
  header->mode_extension = mad_bit_read(&stream->ptr, 2);
  80eeec:	080e3300 	call	80e330 <mad_bit_read>
  80eef0:	80800215 	stw	r2,8(r16)

  /* copyright */
  if (mad_bit_read(&stream->ptr, 1))
  80eef4:	8809883a 	mov	r4,r17
  80eef8:	01400044 	movi	r5,1
  80eefc:	080e3300 	call	80e330 <mad_bit_read>
  80ef00:	10000326 	beq	r2,zero,80ef10 <decode_header+0x1c0>
    header->flags |= MAD_FLAG_COPYRIGHT;
  80ef04:	80800717 	ldw	r2,28(r16)
  80ef08:	10800814 	ori	r2,r2,32
  80ef0c:	80800715 	stw	r2,28(r16)

  /* original/copy */
  if (mad_bit_read(&stream->ptr, 1))
  80ef10:	8809883a 	mov	r4,r17
  80ef14:	01400044 	movi	r5,1
  80ef18:	080e3300 	call	80e330 <mad_bit_read>
  80ef1c:	10000326 	beq	r2,zero,80ef2c <decode_header+0x1dc>
    header->flags |= MAD_FLAG_ORIGINAL;
  80ef20:	80800717 	ldw	r2,28(r16)
  80ef24:	10801014 	ori	r2,r2,64
  80ef28:	80800715 	stw	r2,28(r16)

  /* emphasis */
  header->emphasis = mad_bit_read(&stream->ptr, 2);
  80ef2c:	8809883a 	mov	r4,r17
  80ef30:	01400084 	movi	r5,2
  80ef34:	080e3300 	call	80e330 <mad_bit_read>
# endif

  /* error_check() */

  /* crc_check */
  if (header->flags & MAD_FLAG_PROTECTION)
  80ef38:	80c00717 	ldw	r3,28(r16)
  /* original/copy */
  if (mad_bit_read(&stream->ptr, 1))
    header->flags |= MAD_FLAG_ORIGINAL;

  /* emphasis */
  header->emphasis = mad_bit_read(&stream->ptr, 2);
  80ef3c:	80800315 	stw	r2,12(r16)
# endif

  /* error_check() */

  /* crc_check */
  if (header->flags & MAD_FLAG_PROTECTION)
  80ef40:	18c0040c 	andi	r3,r3,16
  80ef44:	18000526 	beq	r3,zero,80ef5c <decode_header+0x20c>
    header->crc_target = mad_bit_read(&stream->ptr, 16);
  80ef48:	8809883a 	mov	r4,r17
  80ef4c:	01400404 	movi	r5,16
  80ef50:	080e3300 	call	80e330 <mad_bit_read>
  80ef54:	8080068d 	sth	r2,26(r16)
  80ef58:	0007883a 	mov	r3,zero

  return 0;
}
  80ef5c:	1805883a 	mov	r2,r3
  80ef60:	dfc00417 	ldw	ra,16(sp)
  80ef64:	dcc00317 	ldw	r19,12(sp)
  80ef68:	dc800217 	ldw	r18,8(sp)
  80ef6c:	dc400117 	ldw	r17,4(sp)
  80ef70:	dc000017 	ldw	r16,0(sp)
  80ef74:	dec00504 	addi	sp,sp,20
  80ef78:	f800283a 	ret
    header->flags |= MAD_FLAG_MPEG_2_5_EXT;

  /* ID */
  if (mad_bit_read(&stream->ptr, 1) == 0)
    header->flags |= MAD_FLAG_LSF_EXT;
  else if (header->flags & MAD_FLAG_MPEG_2_5_EXT) {
  80ef7c:	80800717 	ldw	r2,28(r16)
  80ef80:	1090000c 	andi	r2,r2,16384
  80ef84:	103f8e26 	beq	r2,zero,80edc0 <decode_header+0x70>
    stream->error = MAD_ERROR_LOSTSYNC;
  80ef88:	00804044 	movi	r2,257
  80ef8c:	00ffffc4 	movi	r3,-1
  80ef90:	98800f15 	stw	r2,60(r19)
  80ef94:	003ff106 	br	80ef5c <decode_header+0x20c>
  }

  if (header->flags & MAD_FLAG_LSF_EXT)
    header->bitrate = bitrate_table[3 + (header->layer >> 1)][index];
  else
    header->bitrate = bitrate_table[header->layer - 1][index];
  80ef98:	80800017 	ldw	r2,0(r16)
  80ef9c:	108003e4 	muli	r2,r2,15
  80efa0:	10c5883a 	add	r2,r2,r3
  80efa4:	1085883a 	add	r2,r2,r2
  80efa8:	1085883a 	add	r2,r2,r2
  80efac:	00c020f4 	movhi	r3,131
  80efb0:	18cf8604 	addi	r3,r3,15896
  80efb4:	10c5883a 	add	r2,r2,r3
  80efb8:	113ff117 	ldw	r4,-60(r2)
  80efbc:	81000415 	stw	r4,16(r16)
  80efc0:	003f9e06 	br	80ee3c <decode_header+0xec>
    return -1;
  }

  /* protection_bit */
  if (mad_bit_read(&stream->ptr, 1) == 0) {
    header->flags    |= MAD_FLAG_PROTECTION;
  80efc4:	81000717 	ldw	r4,28(r16)
    header->crc_check = mad_bit_crc(stream->ptr, 16, 0xffff);
  80efc8:	01800404 	movi	r6,16
  80efcc:	01ffffd4 	movui	r7,65535
    return -1;
  }

  /* protection_bit */
  if (mad_bit_read(&stream->ptr, 1) == 0) {
    header->flags    |= MAD_FLAG_PROTECTION;
  80efd0:	2188b03a 	or	r4,r4,r6
  80efd4:	81000715 	stw	r4,28(r16)
    header->crc_check = mad_bit_crc(stream->ptr, 16, 0xffff);
  80efd8:	98800717 	ldw	r2,28(r19)
  80efdc:	98c00817 	ldw	r3,32(r19)
  80efe0:	1009883a 	mov	r4,r2
  80efe4:	180b883a 	mov	r5,r3
  80efe8:	080e40c0 	call	80e40c <mad_bit_crc>
  80efec:	8080060d 	sth	r2,24(r16)
  80eff0:	003f7e06 	br	80edec <decode_header+0x9c>

  /* layer */
  header->layer = 4 - mad_bit_read(&stream->ptr, 2);

  if (header->layer == 4) {
    stream->error = MAD_ERROR_BADLAYER;
  80eff4:	00804084 	movi	r2,258
  80eff8:	00ffffc4 	movi	r3,-1
  80effc:	98800f15 	stw	r2,60(r19)
  80f000:	003fd606 	br	80ef5c <decode_header+0x20c>

  /* bitrate_index */
  index = mad_bit_read(&stream->ptr, 4);

  if (index == 15) {
    stream->error = MAD_ERROR_BADBITRATE;
  80f004:	008040c4 	movi	r2,259
  80f008:	00ffffc4 	movi	r3,-1
  80f00c:	98800f15 	stw	r2,60(r19)
  80f010:	003fd206 	br	80ef5c <decode_header+0x20c>

  /* sampling_frequency */
  index = mad_bit_read(&stream->ptr, 2);

  if (index == 3) {
    stream->error = MAD_ERROR_BADSAMPLERATE;
  80f014:	00804104 	movi	r2,260
  80f018:	00ffffc4 	movi	r3,-1
  80f01c:	98800f15 	stw	r2,60(r19)
  80f020:	003fce06 	br	80ef5c <decode_header+0x20c>

0080f024 <mad_header_decode>:
/*
 * NAME:	header->decode()
 * DESCRIPTION:	read the next frame header from the stream
 */
int mad_header_decode(struct mad_header *header, struct mad_stream *stream)
{
  80f024:	deffd804 	addi	sp,sp,-160
  80f028:	dc401f15 	stw	r17,124(sp)
  80f02c:	2823883a 	mov	r17,r5
  register unsigned char const *ptr, *end;
  unsigned int pad_slot, N;

  ptr = stream->next_frame;
  80f030:	29400617 	ldw	r5,24(r5)
/*
 * NAME:	header->decode()
 * DESCRIPTION:	read the next frame header from the stream
 */
int mad_header_decode(struct mad_header *header, struct mad_stream *stream)
{
  80f034:	dd802415 	stw	r22,144(sp)
  80f038:	dc001e15 	stw	r16,120(sp)
  80f03c:	dfc02715 	stw	ra,156(sp)
  80f040:	df002615 	stw	fp,152(sp)
  80f044:	ddc02515 	stw	r23,148(sp)
  80f048:	dd402315 	stw	r21,140(sp)
  80f04c:	dd002215 	stw	r20,136(sp)
  80f050:	dcc02115 	stw	r19,132(sp)
  80f054:	dc802015 	stw	r18,128(sp)
  80f058:	2021883a 	mov	r16,r4
  register unsigned char const *ptr, *end;
  unsigned int pad_slot, N;

  ptr = stream->next_frame;
  end = stream->bufend;
  80f05c:	8d800117 	ldw	r22,4(r17)

  if (ptr == 0) {
  80f060:	28012026 	beq	r5,zero,80f4e4 <mad_header_decode+0x4c0>
    stream->error = MAD_ERROR_BUFPTR;
    goto fail;
  }

  /* stream skip */
  if (stream->skiplen) {
  80f064:	88c00217 	ldw	r3,8(r17)
  80f068:	18001926 	beq	r3,zero,80f0d0 <mad_header_decode+0xac>
    if (!stream->sync)
  80f06c:	88800317 	ldw	r2,12(r17)
  80f070:	1000011e 	bne	r2,zero,80f078 <mad_header_decode+0x54>
      ptr = stream->this_frame;
  80f074:	89400517 	ldw	r5,20(r17)

    if (end - ptr < stream->skiplen) {
  80f078:	b145c83a 	sub	r2,r22,r5
  80f07c:	10c0e72e 	bgeu	r2,r3,80f41c <mad_header_decode+0x3f8>
      stream->skiplen   -= end - ptr;
  80f080:	1885c83a 	sub	r2,r3,r2
  80f084:	88800215 	stw	r2,8(r17)
      stream->next_frame = end;

      stream->error = MAD_ERROR_BUFLEN;
  80f088:	00800044 	movi	r2,1
    if (!stream->sync)
      ptr = stream->this_frame;

    if (end - ptr < stream->skiplen) {
      stream->skiplen   -= end - ptr;
      stream->next_frame = end;
  80f08c:	8d800615 	stw	r22,24(r17)

      stream->error = MAD_ERROR_BUFLEN;
  80f090:	88800f15 	stw	r2,60(r17)
  header->flags |= MAD_FLAG_INCOMPLETE;

  return 0;

 fail:
  stream->sync = 0;
  80f094:	00ffffc4 	movi	r3,-1
  80f098:	88000315 	stw	zero,12(r17)

  return -1;
}
  80f09c:	1805883a 	mov	r2,r3
  80f0a0:	dfc02717 	ldw	ra,156(sp)
  80f0a4:	df002617 	ldw	fp,152(sp)
  80f0a8:	ddc02517 	ldw	r23,148(sp)
  80f0ac:	dd802417 	ldw	r22,144(sp)
  80f0b0:	dd402317 	ldw	r21,140(sp)
  80f0b4:	dd002217 	ldw	r20,136(sp)
  80f0b8:	dcc02117 	ldw	r19,132(sp)
  80f0bc:	dc802017 	ldw	r18,128(sp)
  80f0c0:	dc401f17 	ldw	r17,124(sp)
  80f0c4:	dc001e17 	ldw	r16,120(sp)
  80f0c8:	dec02804 	addi	sp,sp,160
  80f0cc:	f800283a 	ret
  80f0d0:	88800317 	ldw	r2,12(r17)
    stream->sync = 1;
  }

 sync:
  /* synchronize */
  if (stream->sync) {
  80f0d4:	10009e26 	beq	r2,zero,80f350 <mad_header_decode+0x32c>
    if (end - ptr < MAD_BUFFER_GUARD) {
  80f0d8:	b147c83a 	sub	r3,r22,r5
  80f0dc:	008001c4 	movi	r2,7
  80f0e0:	10c0f60e 	bge	r2,r3,80f4bc <mad_header_decode+0x498>
      stream->next_frame = ptr;

      stream->error = MAD_ERROR_BUFLEN;
      goto fail;
    }
    else if (!(ptr[0] == 0xff && (ptr[1] & 0xe0) == 0xe0)) {
  80f0e4:	28c00003 	ldbu	r3,0(r5)
  80f0e8:	00803fc4 	movi	r2,255
  80f0ec:	1880f71e 	bne	r3,r2,80f4cc <mad_header_decode+0x4a8>
  80f0f0:	28800043 	ldbu	r2,1(r5)
  80f0f4:	00c03804 	movi	r3,224
  80f0f8:	29000044 	addi	r4,r5,1
  80f0fc:	1080380c 	andi	r2,r2,224
  80f100:	10c0f31e 	bne	r2,r3,80f4d0 <mad_header_decode+0x4ac>
  80f104:	8c800704 	addi	r18,r17,28
    ptr = mad_bit_nextbyte(&stream->ptr);
  }

  /* begin processing */
  stream->this_frame = ptr;
  stream->next_frame = ptr + 1;  /* possibly bogus sync word */
  80f108:	89000615 	stw	r4,24(r17)

    ptr = mad_bit_nextbyte(&stream->ptr);
  }

  /* begin processing */
  stream->this_frame = ptr;
  80f10c:	89400515 	stw	r5,20(r17)
  stream->next_frame = ptr + 1;  /* possibly bogus sync word */

  mad_bit_init(&stream->ptr, stream->this_frame);
  80f110:	9009883a 	mov	r4,r18
  80f114:	080e27c0 	call	80e27c <mad_bit_init>

  if (decode_header(header, stream) == -1)
  80f118:	8009883a 	mov	r4,r16
  80f11c:	880b883a 	mov	r5,r17
  80f120:	080ed500 	call	80ed50 <decode_header>
  80f124:	00ffffc4 	movi	r3,-1
  80f128:	10ffda26 	beq	r2,r3,80f094 <mad_header_decode+0x70>
    goto fail;

  /* calculate frame duration */
  mad_timer_set(&header->duration, 0,
  80f12c:	80c00017 	ldw	r3,0(r16)
  80f130:	00800044 	movi	r2,1
  80f134:	1880be26 	beq	r3,r2,80f430 <mad_header_decode+0x40c>
  80f138:	008000c4 	movi	r2,3
  80f13c:	1880c926 	beq	r3,r2,80f464 <mad_header_decode+0x440>
  80f140:	01812004 	movi	r6,1152
  80f144:	81c00517 	ldw	r7,20(r16)
  80f148:	81000904 	addi	r4,r16,36
  80f14c:	000b883a 	mov	r5,zero
  80f150:	08180340 	call	818034 <mad_timer_set>
		32 * MAD_NSBSAMPLES(header), header->samplerate);

  /* calculate free bit rate */
  if (header->bitrate == 0) {
  80f154:	81000417 	ldw	r4,16(r16)
  80f158:	2000631e 	bne	r4,zero,80f2e8 <mad_header_decode+0x2c4>
    if ((stream->freerate == 0 || !stream->sync ||
  80f15c:	89000417 	ldw	r4,16(r17)
  80f160:	20008726 	beq	r4,zero,80f380 <mad_header_decode+0x35c>
  80f164:	88800317 	ldw	r2,12(r17)
  80f168:	10008526 	beq	r2,zero,80f380 <mad_header_decode+0x35c>
  80f16c:	84c00017 	ldw	r19,0(r16)
  80f170:	008000c4 	movi	r2,3
  80f174:	98809a1e 	bne	r19,r2,80f3e0 <mad_header_decode+0x3bc>
  80f178:	008002b4 	movhi	r2,10
  80f17c:	10b10004 	addi	r2,r2,-15360
  80f180:	1100972e 	bgeu	r2,r4,80f3e0 <mad_header_decode+0x3bc>
  struct mad_bitptr keep_ptr;
  unsigned long rate = 0;
  unsigned int pad_slot, slots_per_frame;
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;
  80f184:	8880080b 	ldhu	r2,32(r17)

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f188:	81000717 	ldw	r4,28(r16)
  struct mad_bitptr keep_ptr;
  unsigned long rate = 0;
  unsigned int pad_slot, slots_per_frame;
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;
  80f18c:	8940088b 	ldhu	r5,34(r17)
  80f190:	d8801b8d 	sth	r2,110(sp)

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f194:	2004d1fa 	srli	r2,r4,7
  struct mad_bitptr keep_ptr;
  unsigned long rate = 0;
  unsigned int pad_slot, slots_per_frame;
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;
  80f198:	8f000717 	ldw	fp,28(r17)
  80f19c:	d9401b0d 	sth	r5,108(sp)

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f1a0:	1540004c 	andi	r21,r2,1
  slots_per_frame = (header->layer == MAD_LAYER_III &&
  80f1a4:	2084000c 	andi	r2,r4,4096
  80f1a8:	1000bc1e 	bne	r2,zero,80f49c <mad_header_decode+0x478>
  80f1ac:	01002404 	movi	r4,144
  80f1b0:	d9001d15 	stw	r4,116(sp)
      ptr = mad_bit_nextbyte(&stream->ptr);

      N = ptr - stream->this_frame;

      if (header->layer == MAD_LAYER_I) {
	rate = (unsigned long) header->samplerate *
  80f1b4:	ad45883a 	add	r2,r21,r21
  80f1b8:	1085883a 	add	r2,r2,r2
  80f1bc:	002f883a 	mov	r23,zero
  80f1c0:	dd000b04 	addi	r20,sp,44
  80f1c4:	d8801c15 	stw	r2,112(sp)
  80f1c8:	00000306 	br	80f1d8 <mad_header_decode+0x1b4>

      if (rate >= 8)
	break;
    }

    mad_bit_skip(&stream->ptr, 8);
  80f1cc:	9009883a 	mov	r4,r18
  80f1d0:	01400204 	movi	r5,8
  80f1d4:	080e2d40 	call	80e2d4 <mad_bit_skip>

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  slots_per_frame = (header->layer == MAD_LAYER_III &&
		     (header->flags & MAD_FLAG_LSF_EXT)) ? 72 : 144;

  while (mad_stream_sync(stream) == 0) {
  80f1d8:	8809883a 	mov	r4,r17
  80f1dc:	08154540 	call	815454 <mad_stream_sync>
    struct mad_stream peek_stream;
    struct mad_header peek_header;

    peek_stream = *stream;
  80f1e0:	01801004 	movi	r6,64
  80f1e4:	a009883a 	mov	r4,r20
  80f1e8:	880b883a 	mov	r5,r17

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  slots_per_frame = (header->layer == MAD_LAYER_III &&
		     (header->flags & MAD_FLAG_LSF_EXT)) ? 72 : 144;

  while (mad_stream_sync(stream) == 0) {
  80f1ec:	1000701e 	bne	r2,zero,80f3b0 <mad_header_decode+0x38c>
    struct mad_stream peek_stream;
    struct mad_header peek_header;

    peek_stream = *stream;
  80f1f0:	0821e500 	call	821e50 <memcpy>
    peek_header = *header;
  80f1f4:	80c00017 	ldw	r3,0(r16)
  80f1f8:	80800117 	ldw	r2,4(r16)
  80f1fc:	81800217 	ldw	r6,8(r16)
  80f200:	81c00317 	ldw	r7,12(r16)
  80f204:	82000417 	ldw	r8,16(r16)
  80f208:	82400517 	ldw	r9,20(r16)
  80f20c:	82800617 	ldw	r10,24(r16)
  80f210:	82c00717 	ldw	r11,28(r16)
  80f214:	83000817 	ldw	r12,32(r16)
  80f218:	83400917 	ldw	r13,36(r16)
  80f21c:	83800a17 	ldw	r14,40(r16)

    if (decode_header(&peek_header, &peek_stream) == 0 &&
  80f220:	a00b883a 	mov	r5,r20
  80f224:	d809883a 	mov	r4,sp
  while (mad_stream_sync(stream) == 0) {
    struct mad_stream peek_stream;
    struct mad_header peek_header;

    peek_stream = *stream;
    peek_header = *header;
  80f228:	d8c00015 	stw	r3,0(sp)
  80f22c:	d8800115 	stw	r2,4(sp)
  80f230:	d9800215 	stw	r6,8(sp)
  80f234:	d9c00315 	stw	r7,12(sp)
  80f238:	da000415 	stw	r8,16(sp)
  80f23c:	da400515 	stw	r9,20(sp)
  80f240:	da800615 	stw	r10,24(sp)
  80f244:	dac00715 	stw	r11,28(sp)
  80f248:	db000815 	stw	r12,32(sp)
  80f24c:	db400915 	stw	r13,36(sp)
  80f250:	db800a15 	stw	r14,40(sp)

    if (decode_header(&peek_header, &peek_stream) == 0 &&
  80f254:	080ed500 	call	80ed50 <decode_header>
  80f258:	103fdc1e 	bne	r2,zero,80f1cc <mad_header_decode+0x1a8>
  80f25c:	80c00017 	ldw	r3,0(r16)
  80f260:	d8800017 	ldw	r2,0(sp)
  80f264:	10ffd91e 	bne	r2,r3,80f1cc <mad_header_decode+0x1a8>
  80f268:	80c00517 	ldw	r3,20(r16)
  80f26c:	d8800517 	ldw	r2,20(sp)
	peek_header.layer == header->layer &&
	peek_header.samplerate == header->samplerate) {
      unsigned int N;

      ptr = mad_bit_nextbyte(&stream->ptr);
  80f270:	9009883a 	mov	r4,r18
    struct mad_header peek_header;

    peek_stream = *stream;
    peek_header = *header;

    if (decode_header(&peek_header, &peek_stream) == 0 &&
  80f274:	10ffd51e 	bne	r2,r3,80f1cc <mad_header_decode+0x1a8>
	peek_header.layer == header->layer &&
	peek_header.samplerate == header->samplerate) {
      unsigned int N;

      ptr = mad_bit_nextbyte(&stream->ptr);
  80f278:	080e2b40 	call	80e2b4 <mad_bit_nextbyte>

      N = ptr - stream->this_frame;
  80f27c:	89000517 	ldw	r4,20(r17)

      if (header->layer == MAD_LAYER_I) {
  80f280:	84c00017 	ldw	r19,0(r16)
	rate = (unsigned long) header->samplerate *
  80f284:	016ee014 	movui	r5,48000
	peek_header.samplerate == header->samplerate) {
      unsigned int N;

      ptr = mad_bit_nextbyte(&stream->ptr);

      N = ptr - stream->this_frame;
  80f288:	1105c83a 	sub	r2,r2,r4

      if (header->layer == MAD_LAYER_I) {
	rate = (unsigned long) header->samplerate *
  80f28c:	d9001c17 	ldw	r4,112(sp)
  80f290:	1107c83a 	sub	r3,r2,r4
	  (N - 4 * pad_slot + 4) / 48 / 1000;
      }
      else {
	rate = (unsigned long) header->samplerate *
  80f294:	1545c83a 	sub	r2,r2,r21
  80f298:	11800044 	addi	r6,r2,1

      ptr = mad_bit_nextbyte(&stream->ptr);

      N = ptr - stream->this_frame;

      if (header->layer == MAD_LAYER_I) {
  80f29c:	00800044 	movi	r2,1
	rate = (unsigned long) header->samplerate *
  80f2a0:	18c00104 	addi	r3,r3,4

      ptr = mad_bit_nextbyte(&stream->ptr);

      N = ptr - stream->this_frame;

      if (header->layer == MAD_LAYER_I) {
  80f2a4:	98808026 	beq	r19,r2,80f4a8 <mad_header_decode+0x484>
	rate = (unsigned long) header->samplerate *
	  (N - 4 * pad_slot + 4) / 48 / 1000;
      }
      else {
	rate = (unsigned long) header->samplerate *
  80f2a8:	81000517 	ldw	r4,20(r16)
  80f2ac:	d9401d17 	ldw	r5,116(sp)
  80f2b0:	3109383a 	mul	r4,r6,r4
  80f2b4:	0820c080 	call	820c08 <__udivsi3>
  80f2b8:	1009883a 	mov	r4,r2
  80f2bc:	0140fa04 	movi	r5,1000
  80f2c0:	0820c080 	call	820c08 <__udivsi3>
  80f2c4:	102f883a 	mov	r23,r2
	  (N - pad_slot + 1) / slots_per_frame / 1000;
      }

      if (rate >= 8)
  80f2c8:	008001c4 	movi	r2,7
  80f2cc:	15ffbf2e 	bgeu	r2,r23,80f1cc <mad_header_decode+0x1a8>
    }

    mad_bit_skip(&stream->ptr, 8);
  }

  stream->ptr = keep_ptr;
  80f2d0:	d9001b0b 	ldhu	r4,108(sp)
  80f2d4:	d9401b8b 	ldhu	r5,110(sp)
  80f2d8:	8f000715 	stw	fp,28(r17)
  80f2dc:	8900088d 	sth	r4,34(r17)
  80f2e0:	8940080d 	sth	r5,32(r17)
  80f2e4:	00003a06 	br	80f3d0 <mad_header_decode+0x3ac>
  80f2e8:	84800717 	ldw	r18,28(r16)
  80f2ec:	84c00017 	ldw	r19,0(r16)
  }

  /* calculate beginning of next frame */
  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;

  if (header->layer == MAD_LAYER_I)
  80f2f0:	00c00044 	movi	r3,1
    header->bitrate = stream->freerate;
    header->flags  |= MAD_FLAG_FREEFORMAT;
  }

  /* calculate beginning of next frame */
  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f2f4:	9004d1fa 	srli	r2,r18,7
  80f2f8:	1500004c 	andi	r20,r2,1

  if (header->layer == MAD_LAYER_I)
  80f2fc:	98c04026 	beq	r19,r3,80f400 <mad_header_decode+0x3dc>
    N = ((12 * header->bitrate / header->samplerate) + pad_slot) * 4;
  else {
    unsigned int slots_per_frame;

    slots_per_frame = (header->layer == MAD_LAYER_III &&
  80f300:	008000c4 	movi	r2,3
  80f304:	98805c26 	beq	r19,r2,80f478 <mad_header_decode+0x454>
  80f308:	00802404 	movi	r2,144
		       (header->flags & MAD_FLAG_LSF_EXT)) ? 72 : 144;

    N = (slots_per_frame * header->bitrate / header->samplerate) + pad_slot;
  80f30c:	1109383a 	mul	r4,r2,r4
  80f310:	81400517 	ldw	r5,20(r16)
  80f314:	0820c080 	call	820c08 <__udivsi3>
  80f318:	a089883a 	add	r4,r20,r2
  }

  /* verify there is enough data left in buffer to decode this frame */
  if (N + MAD_BUFFER_GUARD > end - stream->this_frame) {
  80f31c:	89400517 	ldw	r5,20(r17)
  80f320:	20c00204 	addi	r3,r4,8
  80f324:	b145c83a 	sub	r2,r22,r5
  80f328:	10c06436 	bltu	r2,r3,80f4bc <mad_header_decode+0x498>
    goto fail;
  }

  stream->next_frame = stream->this_frame + N;

  if (!stream->sync) {
  80f32c:	88800317 	ldw	r2,12(r17)

    stream->error = MAD_ERROR_BUFLEN;
    goto fail;
  }

  stream->next_frame = stream->this_frame + N;
  80f330:	2909883a 	add	r4,r5,r4
  80f334:	89000615 	stw	r4,24(r17)

  if (!stream->sync) {
  80f338:	1000461e 	bne	r2,zero,80f454 <mad_header_decode+0x430>
    /* check that a valid frame header follows this frame */

    ptr = stream->next_frame;
    if (!(ptr[0] == 0xff && (ptr[1] & 0xe0) == 0xe0)) {
  80f33c:	20c00003 	ldbu	r3,0(r4)
  80f340:	00803fc4 	movi	r2,255
  80f344:	18803c26 	beq	r3,r2,80f438 <mad_header_decode+0x414>
      ptr = stream->next_frame = stream->this_frame + 1;
  80f348:	29400044 	addi	r5,r5,1
  80f34c:	89400615 	stw	r5,24(r17)
      stream->error = MAD_ERROR_LOSTSYNC;
      goto fail;
    }
  }
  else {
    mad_bit_init(&stream->ptr, ptr);
  80f350:	8c800704 	addi	r18,r17,28
  80f354:	9009883a 	mov	r4,r18
  80f358:	080e27c0 	call	80e27c <mad_bit_init>

    if (mad_stream_sync(stream) == -1) {
  80f35c:	8809883a 	mov	r4,r17
  80f360:	08154540 	call	815454 <mad_stream_sync>
  80f364:	00ffffc4 	movi	r3,-1
  80f368:	10c06126 	beq	r2,r3,80f4f0 <mad_header_decode+0x4cc>

      stream->error = MAD_ERROR_BUFLEN;
      goto fail;
    }

    ptr = mad_bit_nextbyte(&stream->ptr);
  80f36c:	9009883a 	mov	r4,r18
  80f370:	080e2b40 	call	80e2b4 <mad_bit_nextbyte>
  80f374:	100b883a 	mov	r5,r2
  80f378:	11000044 	addi	r4,r2,1
  80f37c:	003f6206 	br	80f108 <mad_header_decode+0xe4>
  unsigned int pad_slot, slots_per_frame;
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f380:	81000717 	ldw	r4,28(r16)
  struct mad_bitptr keep_ptr;
  unsigned long rate = 0;
  unsigned int pad_slot, slots_per_frame;
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;
  80f384:	8940088b 	ldhu	r5,34(r17)

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  slots_per_frame = (header->layer == MAD_LAYER_III &&
  80f388:	80c00017 	ldw	r3,0(r16)
  unsigned int pad_slot, slots_per_frame;
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f38c:	2004d1fa 	srli	r2,r4,7
  struct mad_bitptr keep_ptr;
  unsigned long rate = 0;
  unsigned int pad_slot, slots_per_frame;
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;
  80f390:	d9401b0d 	sth	r5,108(sp)
  80f394:	8940080b 	ldhu	r5,32(r17)

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f398:	1540004c 	andi	r21,r2,1
  slots_per_frame = (header->layer == MAD_LAYER_III &&
  80f39c:	008000c4 	movi	r2,3
  struct mad_bitptr keep_ptr;
  unsigned long rate = 0;
  unsigned int pad_slot, slots_per_frame;
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;
  80f3a0:	d9401b8d 	sth	r5,110(sp)
  80f3a4:	8f000717 	ldw	fp,28(r17)

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  slots_per_frame = (header->layer == MAD_LAYER_III &&
  80f3a8:	18bf801e 	bne	r3,r2,80f1ac <mad_header_decode+0x188>
  80f3ac:	003f7d06 	br	80f1a4 <mad_header_decode+0x180>
    }

    mad_bit_skip(&stream->ptr, 8);
  }

  stream->ptr = keep_ptr;
  80f3b0:	d8801b8b 	ldhu	r2,110(sp)
  80f3b4:	d9401b0b 	ldhu	r5,108(sp)
  80f3b8:	8f000715 	stw	fp,28(r17)
  80f3bc:	8880080d 	sth	r2,32(r17)

  if (rate < 8 || (header->layer == MAD_LAYER_III && rate > 640)) {
  80f3c0:	008001c4 	movi	r2,7
    }

    mad_bit_skip(&stream->ptr, 8);
  }

  stream->ptr = keep_ptr;
  80f3c4:	8940088d 	sth	r5,34(r17)

  if (rate < 8 || (header->layer == MAD_LAYER_III && rate > 640)) {
  80f3c8:	15c0312e 	bgeu	r2,r23,80f490 <mad_header_decode+0x46c>
  80f3cc:	84c00017 	ldw	r19,0(r16)
  80f3d0:	008000c4 	movi	r2,3
  80f3d4:	98802c26 	beq	r19,r2,80f488 <mad_header_decode+0x464>
    stream->error = MAD_ERROR_LOSTSYNC;
    return -1;
  }

  stream->freerate = rate * 1000;
  80f3d8:	b900fa24 	muli	r4,r23,1000
  80f3dc:	89000415 	stw	r4,16(r17)
	 (header->layer == MAD_LAYER_III && stream->freerate > 640000)) &&
	free_bitrate(stream, header) == -1)
      goto fail;

    header->bitrate = stream->freerate;
    header->flags  |= MAD_FLAG_FREEFORMAT;
  80f3e0:	84800717 	ldw	r18,28(r16)
  }

  /* calculate beginning of next frame */
  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;

  if (header->layer == MAD_LAYER_I)
  80f3e4:	00c00044 	movi	r3,1
    if ((stream->freerate == 0 || !stream->sync ||
	 (header->layer == MAD_LAYER_III && stream->freerate > 640000)) &&
	free_bitrate(stream, header) == -1)
      goto fail;

    header->bitrate = stream->freerate;
  80f3e8:	81000415 	stw	r4,16(r16)
    header->flags  |= MAD_FLAG_FREEFORMAT;
  80f3ec:	94810014 	ori	r18,r18,1024
  }

  /* calculate beginning of next frame */
  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f3f0:	9004d1fa 	srli	r2,r18,7
	 (header->layer == MAD_LAYER_III && stream->freerate > 640000)) &&
	free_bitrate(stream, header) == -1)
      goto fail;

    header->bitrate = stream->freerate;
    header->flags  |= MAD_FLAG_FREEFORMAT;
  80f3f4:	84800715 	stw	r18,28(r16)
  }

  /* calculate beginning of next frame */
  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  80f3f8:	1500004c 	andi	r20,r2,1

  if (header->layer == MAD_LAYER_I)
  80f3fc:	98ffc01e 	bne	r19,r3,80f300 <mad_header_decode+0x2dc>
    N = ((12 * header->bitrate / header->samplerate) + pad_slot) * 4;
  80f400:	21000324 	muli	r4,r4,12
  80f404:	81400517 	ldw	r5,20(r16)
  80f408:	0820c080 	call	820c08 <__udivsi3>
  80f40c:	a085883a 	add	r2,r20,r2
  80f410:	1085883a 	add	r2,r2,r2
  80f414:	1089883a 	add	r4,r2,r2
  80f418:	003fc006 	br	80f31c <mad_header_decode+0x2f8>
    }

    ptr += stream->skiplen;
    stream->skiplen = 0;

    stream->sync = 1;
  80f41c:	00800044 	movi	r2,1

      stream->error = MAD_ERROR_BUFLEN;
      goto fail;
    }

    ptr += stream->skiplen;
  80f420:	28cb883a 	add	r5,r5,r3
    stream->skiplen = 0;
  80f424:	88000215 	stw	zero,8(r17)

    stream->sync = 1;
  80f428:	88800315 	stw	r2,12(r17)
  80f42c:	003f2906 	br	80f0d4 <mad_header_decode+0xb0>

  if (decode_header(header, stream) == -1)
    goto fail;

  /* calculate frame duration */
  mad_timer_set(&header->duration, 0,
  80f430:	01806004 	movi	r6,384
  80f434:	003f4306 	br	80f144 <mad_header_decode+0x120>

  if (!stream->sync) {
    /* check that a valid frame header follows this frame */

    ptr = stream->next_frame;
    if (!(ptr[0] == 0xff && (ptr[1] & 0xe0) == 0xe0)) {
  80f438:	20800043 	ldbu	r2,1(r4)
  80f43c:	00c03804 	movi	r3,224
  80f440:	1080380c 	andi	r2,r2,224
  80f444:	10ffc01e 	bne	r2,r3,80f348 <mad_header_decode+0x324>
      ptr = stream->next_frame = stream->this_frame + 1;
      goto sync;
    }

    stream->sync = 1;
  80f448:	00800044 	movi	r2,1
  80f44c:	88800315 	stw	r2,12(r17)
  80f450:	84800717 	ldw	r18,28(r16)
  }

  header->flags |= MAD_FLAG_INCOMPLETE;
  80f454:	90800214 	ori	r2,r18,8
  80f458:	0007883a 	mov	r3,zero
  80f45c:	80800715 	stw	r2,28(r16)
  80f460:	003f0e06 	br	80f09c <mad_header_decode+0x78>

  if (decode_header(header, stream) == -1)
    goto fail;

  /* calculate frame duration */
  mad_timer_set(&header->duration, 0,
  80f464:	80800717 	ldw	r2,28(r16)
  80f468:	1084000c 	andi	r2,r2,4096
  80f46c:	103f3426 	beq	r2,zero,80f140 <mad_header_decode+0x11c>
  80f470:	01809004 	movi	r6,576
  80f474:	003f3306 	br	80f144 <mad_header_decode+0x120>
  if (header->layer == MAD_LAYER_I)
    N = ((12 * header->bitrate / header->samplerate) + pad_slot) * 4;
  else {
    unsigned int slots_per_frame;

    slots_per_frame = (header->layer == MAD_LAYER_III &&
  80f478:	9084000c 	andi	r2,r18,4096
  80f47c:	103fa226 	beq	r2,zero,80f308 <mad_header_decode+0x2e4>
  80f480:	00801204 	movi	r2,72
  80f484:	003fa106 	br	80f30c <mad_header_decode+0x2e8>
    mad_bit_skip(&stream->ptr, 8);
  }

  stream->ptr = keep_ptr;

  if (rate < 8 || (header->layer == MAD_LAYER_III && rate > 640)) {
  80f488:	0080a004 	movi	r2,640
  80f48c:	15ffd22e 	bgeu	r2,r23,80f3d8 <mad_header_decode+0x3b4>
    stream->error = MAD_ERROR_LOSTSYNC;
  80f490:	00804044 	movi	r2,257
  80f494:	88800f15 	stw	r2,60(r17)
  80f498:	003efe06 	br	80f094 <mad_header_decode+0x70>
  unsigned char const *ptr = 0;

  keep_ptr = stream->ptr;

  pad_slot = (header->flags & MAD_FLAG_PADDING) ? 1 : 0;
  slots_per_frame = (header->layer == MAD_LAYER_III &&
  80f49c:	00801204 	movi	r2,72
  80f4a0:	d8801d15 	stw	r2,116(sp)
  80f4a4:	003f4306 	br	80f1b4 <mad_header_decode+0x190>
      ptr = mad_bit_nextbyte(&stream->ptr);

      N = ptr - stream->this_frame;

      if (header->layer == MAD_LAYER_I) {
	rate = (unsigned long) header->samplerate *
  80f4a8:	81000517 	ldw	r4,20(r16)
  80f4ac:	1909383a 	mul	r4,r3,r4
  80f4b0:	0820c080 	call	820c08 <__udivsi3>
  80f4b4:	102f883a 	mov	r23,r2
  80f4b8:	003f8306 	br	80f2c8 <mad_header_decode+0x2a4>
    N = (slots_per_frame * header->bitrate / header->samplerate) + pad_slot;
  }

  /* verify there is enough data left in buffer to decode this frame */
  if (N + MAD_BUFFER_GUARD > end - stream->this_frame) {
    stream->next_frame = stream->this_frame;
  80f4bc:	89400615 	stw	r5,24(r17)

    stream->error = MAD_ERROR_BUFLEN;
  80f4c0:	00800044 	movi	r2,1
  80f4c4:	88800f15 	stw	r2,60(r17)
  80f4c8:	003ef206 	br	80f094 <mad_header_decode+0x70>
      stream->next_frame = ptr;

      stream->error = MAD_ERROR_BUFLEN;
      goto fail;
    }
    else if (!(ptr[0] == 0xff && (ptr[1] & 0xe0) == 0xe0)) {
  80f4cc:	29000044 	addi	r4,r5,1
      /* mark point where frame sync word was expected */
      stream->this_frame = ptr;
      stream->next_frame = ptr + 1;

      stream->error = MAD_ERROR_LOSTSYNC;
  80f4d0:	00804044 	movi	r2,257
      stream->error = MAD_ERROR_BUFLEN;
      goto fail;
    }
    else if (!(ptr[0] == 0xff && (ptr[1] & 0xe0) == 0xe0)) {
      /* mark point where frame sync word was expected */
      stream->this_frame = ptr;
  80f4d4:	89400515 	stw	r5,20(r17)
      stream->next_frame = ptr + 1;
  80f4d8:	89000615 	stw	r4,24(r17)

      stream->error = MAD_ERROR_LOSTSYNC;
  80f4dc:	88800f15 	stw	r2,60(r17)
  80f4e0:	003eec06 	br	80f094 <mad_header_decode+0x70>

  ptr = stream->next_frame;
  end = stream->bufend;

  if (ptr == 0) {
    stream->error = MAD_ERROR_BUFPTR;
  80f4e4:	00800084 	movi	r2,2
  80f4e8:	88800f15 	stw	r2,60(r17)
  80f4ec:	003ee906 	br	80f094 <mad_header_decode+0x70>
  }
  else {
    mad_bit_init(&stream->ptr, ptr);

    if (mad_stream_sync(stream) == -1) {
      if (end - stream->next_frame >= MAD_BUFFER_GUARD)
  80f4f0:	88800617 	ldw	r2,24(r17)
  80f4f4:	00c001c4 	movi	r3,7
  80f4f8:	b085c83a 	sub	r2,r22,r2
  80f4fc:	18bff00e 	bge	r3,r2,80f4c0 <mad_header_decode+0x49c>
	stream->next_frame = end - MAD_BUFFER_GUARD;
  80f500:	b0bffe04 	addi	r2,r22,-8
  80f504:	88800615 	stw	r2,24(r17)
  80f508:	003fed06 	br	80f4c0 <mad_header_decode+0x49c>

0080f50c <mad_frame_decode>:
  frame->options = stream->options;

  /* header() */
  /* error_check() */

  if (!(frame->header.flags & MAD_FLAG_INCOMPLETE) &&
  80f50c:	21c00717 	ldw	r7,28(r4)
 * NAME:	frame->decode()
 * DESCRIPTION:	decode a single frame from a bitstream
 */
int mad_frame_decode(struct mad_frame *frame, struct mad_stream *stream)
{
  frame->options = stream->options;
  80f510:	28800e17 	ldw	r2,56(r5)
/*
 * NAME:	frame->decode()
 * DESCRIPTION:	decode a single frame from a bitstream
 */
int mad_frame_decode(struct mad_frame *frame, struct mad_stream *stream)
{
  80f514:	defffb04 	addi	sp,sp,-20
  frame->options = stream->options;

  /* header() */
  /* error_check() */

  if (!(frame->header.flags & MAD_FLAG_INCOMPLETE) &&
  80f518:	38c0020c 	andi	r3,r7,8
/*
 * NAME:	frame->decode()
 * DESCRIPTION:	decode a single frame from a bitstream
 */
int mad_frame_decode(struct mad_frame *frame, struct mad_stream *stream)
{
  80f51c:	dc400315 	stw	r17,12(sp)
  80f520:	dc000215 	stw	r16,8(sp)
  80f524:	dfc00415 	stw	ra,16(sp)
  80f528:	2021883a 	mov	r16,r4
  80f52c:	2823883a 	mov	r17,r5
  frame->options = stream->options;
  80f530:	20800b15 	stw	r2,44(r4)

  /* header() */
  /* error_check() */

  if (!(frame->header.flags & MAD_FLAG_INCOMPLETE) &&
  80f534:	1800041e 	bne	r3,zero,80f548 <mad_frame_decode+0x3c>
  80f538:	080f0240 	call	80f024 <mad_header_decode>
  80f53c:	00ffffc4 	movi	r3,-1
  80f540:	10c02c26 	beq	r2,r3,80f5f4 <mad_frame_decode+0xe8>
  80f544:	81c00717 	ldw	r7,28(r16)

  /* audio_data() */

  frame->header.flags &= ~MAD_FLAG_INCOMPLETE;

  if (decoder_table[frame->header.layer - 1](stream, frame) == -1) {
  80f548:	80800017 	ldw	r2,0(r16)
  80f54c:	00c020f4 	movhi	r3,131
  80f550:	18cf8304 	addi	r3,r3,15884
  80f554:	8809883a 	mov	r4,r17
  80f558:	1085883a 	add	r2,r2,r2
  80f55c:	1085883a 	add	r2,r2,r2
  80f560:	10c5883a 	add	r2,r2,r3
  80f564:	11bfff17 	ldw	r6,-4(r2)
      mad_header_decode(&frame->header, stream) == -1)
    goto fail;

  /* audio_data() */

  frame->header.flags &= ~MAD_FLAG_INCOMPLETE;
  80f568:	00fffdc4 	movi	r3,-9
  80f56c:	38c6703a 	and	r3,r7,r3
  80f570:	80c00715 	stw	r3,28(r16)

  if (decoder_table[frame->header.layer - 1](stream, frame) == -1) {
  80f574:	800b883a 	mov	r5,r16
  80f578:	303ee83a 	callr	r6
  80f57c:	00ffffc4 	movi	r3,-1
  80f580:	10c01726 	beq	r2,r3,80f5e0 <mad_frame_decode+0xd4>
    goto fail;
  }

  /* ancillary_data() */

  if (frame->header.layer != MAD_LAYER_III) {
  80f584:	80c00017 	ldw	r3,0(r16)
  80f588:	008000c4 	movi	r2,3
  80f58c:	18802126 	beq	r3,r2,80f614 <mad_frame_decode+0x108>
    struct mad_bitptr next_frame;

    mad_bit_init(&next_frame, stream->next_frame);
  80f590:	89400617 	ldw	r5,24(r17)
  80f594:	d809883a 	mov	r4,sp
  80f598:	080e27c0 	call	80e27c <mad_bit_init>

    stream->anc_ptr    = stream->ptr;
  80f59c:	88c00717 	ldw	r3,28(r17)
  80f5a0:	8900088b 	ldhu	r4,34(r17)
  80f5a4:	8880080b 	ldhu	r2,32(r17)
  80f5a8:	88c00915 	stw	r3,36(r17)
  80f5ac:	89000a8d 	sth	r4,42(r17)
  80f5b0:	88800a0d 	sth	r2,40(r17)
    stream->anc_bitlen = mad_bit_length(&stream->ptr, &next_frame);
  80f5b4:	89000704 	addi	r4,r17,28
  80f5b8:	d80b883a 	mov	r5,sp
  80f5bc:	080e2900 	call	80e290 <mad_bit_length>
  80f5c0:	0007883a 	mov	r3,zero
  80f5c4:	88800b15 	stw	r2,44(r17)
  return 0;

 fail:
  stream->anc_bitlen = 0;
  return -1;
}
  80f5c8:	1805883a 	mov	r2,r3
  80f5cc:	dfc00417 	ldw	ra,16(sp)
  80f5d0:	dc400317 	ldw	r17,12(sp)
  80f5d4:	dc000217 	ldw	r16,8(sp)
  80f5d8:	dec00504 	addi	sp,sp,20
  80f5dc:	f800283a 	ret
  /* audio_data() */

  frame->header.flags &= ~MAD_FLAG_INCOMPLETE;

  if (decoder_table[frame->header.layer - 1](stream, frame) == -1) {
    if (!MAD_RECOVERABLE(stream->error))
  80f5e0:	88800f17 	ldw	r2,60(r17)
  80f5e4:	10bfc00c 	andi	r2,r2,65280
  80f5e8:	1000021e 	bne	r2,zero,80f5f4 <mad_frame_decode+0xe8>
      stream->next_frame = stream->this_frame;
  80f5ec:	88800517 	ldw	r2,20(r17)
  80f5f0:	88800615 	stw	r2,24(r17)
  }

  return 0;

 fail:
  stream->anc_bitlen = 0;
  80f5f4:	00ffffc4 	movi	r3,-1
  return -1;
}
  80f5f8:	1805883a 	mov	r2,r3
  }

  return 0;

 fail:
  stream->anc_bitlen = 0;
  80f5fc:	88000b15 	stw	zero,44(r17)
  return -1;
}
  80f600:	dfc00417 	ldw	ra,16(sp)
  80f604:	dc400317 	ldw	r17,12(sp)
  80f608:	dc000217 	ldw	r16,8(sp)
  80f60c:	dec00504 	addi	sp,sp,20
  80f610:	f800283a 	ret
    goto fail;
  }

  /* ancillary_data() */

  if (frame->header.layer != MAD_LAYER_III) {
  80f614:	0007883a 	mov	r3,zero
  return 0;

 fail:
  stream->anc_bitlen = 0;
  return -1;
}
  80f618:	1805883a 	mov	r2,r3
  80f61c:	dfc00417 	ldw	ra,16(sp)
  80f620:	dc400317 	ldw	r17,12(sp)
  80f624:	dc000217 	ldw	r16,8(sp)
  80f628:	dec00504 	addi	sp,sp,20
  80f62c:	f800283a 	ret

0080f630 <mad_frame_finish>:
 */
void mad_frame_finish(struct mad_frame *frame)
{
  mad_header_finish(&frame->header);

  if (frame->overlap) {
  80f630:	20890c17 	ldw	r2,9264(r4)
/*
 * NAME:	frame->finish()
 * DESCRIPTION:	deallocate any dynamic memory associated with frame
 */
void mad_frame_finish(struct mad_frame *frame)
{
  80f634:	defffe04 	addi	sp,sp,-8
  80f638:	dc000015 	stw	r16,0(sp)
  80f63c:	dfc00115 	stw	ra,4(sp)
  80f640:	2021883a 	mov	r16,r4
  mad_header_finish(&frame->header);

  if (frame->overlap) {
    free(frame->overlap);
  80f644:	1009883a 	mov	r4,r2
 */
void mad_frame_finish(struct mad_frame *frame)
{
  mad_header_finish(&frame->header);

  if (frame->overlap) {
  80f648:	10000226 	beq	r2,zero,80f654 <mad_frame_finish+0x24>
    free(frame->overlap);
  80f64c:	08216e80 	call	8216e8 <free>
    frame->overlap = 0;
  80f650:	80090c15 	stw	zero,9264(r16)
  }
}
  80f654:	dfc00117 	ldw	ra,4(sp)
  80f658:	dc000017 	ldw	r16,0(sp)
  80f65c:	dec00204 	addi	sp,sp,8
  80f660:	f800283a 	ret

0080f664 <mad_frame_init>:
  header->crc_target     = 0;

  header->flags          = 0;
  header->private_bits   = 0;

  header->duration       = mad_timer_zero;
  80f664:	00802134 	movhi	r2,132
  80f668:	1082de04 	addi	r2,r2,2936
  80f66c:	11400117 	ldw	r5,4(r2)
  80f670:	10c00017 	ldw	r3,0(r2)
{
  mad_header_init(&frame->header);

  frame->options = 0;

  frame->overlap = 0;
  80f674:	000d883a 	mov	r6,zero
  header->crc_target     = 0;

  header->flags          = 0;
  header->private_bits   = 0;

  header->duration       = mad_timer_zero;
  80f678:	21400a15 	stw	r5,40(r4)
  80f67c:	20c00915 	stw	r3,36(r4)
 * NAME:	header->init()
 * DESCRIPTION:	initialize header struct
 */
void mad_header_init(struct mad_header *header)
{
  header->layer          = 0;
  80f680:	20000015 	stw	zero,0(r4)
  header->mode           = 0;
  80f684:	20000115 	stw	zero,4(r4)
  header->mode_extension = 0;
  80f688:	20000215 	stw	zero,8(r4)
  header->emphasis       = 0;
  80f68c:	20000315 	stw	zero,12(r4)

  header->bitrate        = 0;
  80f690:	20000415 	stw	zero,16(r4)
  header->samplerate     = 0;
  80f694:	20000515 	stw	zero,20(r4)

  header->crc_check      = 0;
  80f698:	2000060d 	sth	zero,24(r4)
  header->crc_target     = 0;
  80f69c:	2000068d 	sth	zero,26(r4)

  header->flags          = 0;
  80f6a0:	20000715 	stw	zero,28(r4)
  header->private_bits   = 0;
  80f6a4:	20000815 	stw	zero,32(r4)
 */
void mad_frame_init(struct mad_frame *frame)
{
  mad_header_init(&frame->header);

  frame->options = 0;
  80f6a8:	20000b15 	stw	zero,44(r4)

  frame->overlap = 0;
  80f6ac:	20090c15 	stw	zero,9264(r4)
  mad_frame_mute(frame);
}
  80f6b0:	300491fa 	slli	r2,r6,7
  80f6b4:	000b883a 	mov	r5,zero
  80f6b8:	10848c04 	addi	r2,r2,4656
  80f6bc:	2087883a 	add	r3,r4,r2
void mad_frame_mute(struct mad_frame *frame)
{
  unsigned int s, sb;

  for (s = 0; s < 36; ++s) {
    for (sb = 0; sb < 32; ++sb) {
  80f6c0:	29400044 	addi	r5,r5,1
  80f6c4:	00800804 	movi	r2,32
      frame->sbsample[0][s][sb] =
  80f6c8:	18000015 	stw	zero,0(r3)
  80f6cc:	183b8015 	stw	zero,-4608(r3)
void mad_frame_mute(struct mad_frame *frame)
{
  unsigned int s, sb;

  for (s = 0; s < 36; ++s) {
    for (sb = 0; sb < 32; ++sb) {
  80f6d0:	18c00104 	addi	r3,r3,4
  80f6d4:	28bffa1e 	bne	r5,r2,80f6c0 <mad_frame_init+0x5c>
 */
void mad_frame_mute(struct mad_frame *frame)
{
  unsigned int s, sb;

  for (s = 0; s < 36; ++s) {
  80f6d8:	31800044 	addi	r6,r6,1
  80f6dc:	00800904 	movi	r2,36
  80f6e0:	30bff31e 	bne	r6,r2,80f6b0 <mad_frame_init+0x4c>
      frame->sbsample[0][s][sb] =
      frame->sbsample[1][s][sb] = 0;
    }
  }

  if (frame->overlap) {
  80f6e4:	21090c17 	ldw	r4,9264(r4)
  80f6e8:	20001026 	beq	r4,zero,80f72c <mad_frame_init+0xc8>

  frame->options = 0;

  frame->overlap = 0;
  mad_frame_mute(frame);
}
  80f6ec:	000d883a 	mov	r6,zero
  80f6f0:	3185883a 	add	r2,r6,r6
  80f6f4:	1085883a 	add	r2,r2,r2
  80f6f8:	10824004 	addi	r2,r2,2304
  80f6fc:	2087883a 	add	r3,r4,r2
  80f700:	000b883a 	mov	r5,zero
    }
  }

  if (frame->overlap) {
    for (s = 0; s < 18; ++s) {
      for (sb = 0; sb < 32; ++sb) {
  80f704:	29400044 	addi	r5,r5,1
  80f708:	00800804 	movi	r2,32
	(*frame->overlap)[0][sb][s] =
  80f70c:	18000015 	stw	zero,0(r3)
  80f710:	183dc015 	stw	zero,-2304(r3)
    }
  }

  if (frame->overlap) {
    for (s = 0; s < 18; ++s) {
      for (sb = 0; sb < 32; ++sb) {
  80f714:	18c01204 	addi	r3,r3,72
  80f718:	28bffa1e 	bne	r5,r2,80f704 <mad_frame_init+0xa0>
      frame->sbsample[1][s][sb] = 0;
    }
  }

  if (frame->overlap) {
    for (s = 0; s < 18; ++s) {
  80f71c:	31800044 	addi	r6,r6,1
  80f720:	00800484 	movi	r2,18
  80f724:	30bff21e 	bne	r6,r2,80f6f0 <mad_frame_init+0x8c>
  80f728:	f800283a 	ret
  80f72c:	f800283a 	ret

0080f730 <mad_layer_I>:
{
  struct mad_header *header = &frame->header;
  unsigned int nch, bound, ch, s, sb, nb;
  unsigned char allocation[2][32], scalefactor[2][32];

  nch = MAD_NCHANNELS(header);
  80f730:	28c00117 	ldw	r3,4(r5)
/*
 * NAME:	layer->I()
 * DESCRIPTION:	decode a single Layer I frame
 */
int mad_layer_I(struct mad_stream *stream, struct mad_frame *frame)
{
  80f734:	deffd404 	addi	sp,sp,-176
  80f738:	ddc02915 	stw	r23,164(sp)
  80f73c:	dd802815 	stw	r22,160(sp)
  80f740:	dfc02b15 	stw	ra,172(sp)
  80f744:	df002a15 	stw	fp,168(sp)
  80f748:	dd402715 	stw	r21,156(sp)
  80f74c:	dd002615 	stw	r20,152(sp)
  80f750:	dcc02515 	stw	r19,148(sp)
  80f754:	dc802415 	stw	r18,144(sp)
  80f758:	dc402315 	stw	r17,140(sp)
  80f75c:	dc002215 	stw	r16,136(sp)
  80f760:	282f883a 	mov	r23,r5
  80f764:	202d883a 	mov	r22,r4
  struct mad_header *header = &frame->header;
  unsigned int nch, bound, ch, s, sb, nb;
  unsigned char allocation[2][32], scalefactor[2][32];

  nch = MAD_NCHANNELS(header);
  80f768:	18004b1e 	bne	r3,zero,80f898 <mad_layer_I+0x168>
  80f76c:	29000717 	ldw	r4,28(r5)
  80f770:	00800804 	movi	r2,32
  80f774:	d8802115 	stw	r2,132(sp)
  80f778:	05400044 	movi	r21,1
    bound = 4 + header->mode_extension * 4;
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
  80f77c:	2080040c 	andi	r2,r4,16
  80f780:	10004d1e 	bne	r2,zero,80f8b8 <mad_layer_I+0x188>
    }
  }

  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
  80f784:	d8802117 	ldw	r2,132(sp)
  80f788:	10002a26 	beq	r2,zero,80f834 <mad_layer_I+0x104>
  80f78c:	0027883a 	mov	r19,zero
  80f790:	a829003a 	cmpeq	r20,r21,zero
    for (ch = 0; ch < nch; ++ch) {
  80f794:	a000221e 	bne	r20,zero,80f820 <mad_layer_I+0xf0>
  80f798:	d8801004 	addi	r2,sp,64
  80f79c:	14e3883a 	add	r17,r2,r19
  80f7a0:	0021883a 	mov	r16,zero
  80f7a4:	b4800704 	addi	r18,r22,28
  80f7a8:	00000606 	br	80f7c4 <mad_layer_I+0x94>
      if (nb == 15) {
	stream->error = MAD_ERROR_BADBITALLOC;
	return -1;
      }

      allocation[ch][sb] = nb ? nb + 1 : 0;
  80f7ac:	18000126 	beq	r3,zero,80f7b4 <mad_layer_I+0x84>
  80f7b0:	19000044 	addi	r4,r3,1
  }

  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80f7b4:	84000044 	addi	r16,r16,1
      if (nb == 15) {
	stream->error = MAD_ERROR_BADBITALLOC;
	return -1;
      }

      allocation[ch][sb] = nb ? nb + 1 : 0;
  80f7b8:	89000005 	stb	r4,0(r17)
  }

  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80f7bc:	8c400804 	addi	r17,r17,32
  80f7c0:	ac001726 	beq	r21,r16,80f820 <mad_layer_I+0xf0>
      nb = mad_bit_read(&stream->ptr, 4);
  80f7c4:	9009883a 	mov	r4,r18
  80f7c8:	01400104 	movi	r5,4
  80f7cc:	080e3300 	call	80e330 <mad_bit_read>
  80f7d0:	1007883a 	mov	r3,r2

      if (nb == 15) {
  80f7d4:	008003c4 	movi	r2,15
	stream->error = MAD_ERROR_BADBITALLOC;
	return -1;
      }

      allocation[ch][sb] = nb ? nb + 1 : 0;
  80f7d8:	0009883a 	mov	r4,zero

  for (sb = 0; sb < bound; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
      nb = mad_bit_read(&stream->ptr, 4);

      if (nb == 15) {
  80f7dc:	18bff31e 	bne	r3,r2,80f7ac <mad_layer_I+0x7c>
	stream->error = MAD_ERROR_BADBITALLOC;
  80f7e0:	00808444 	movi	r2,529
  80f7e4:	b0800f15 	stw	r2,60(r22)
  80f7e8:	00ffffc4 	movi	r3,-1
      }
    }
  }

  return 0;
}
  80f7ec:	1805883a 	mov	r2,r3
  80f7f0:	dfc02b17 	ldw	ra,172(sp)
  80f7f4:	df002a17 	ldw	fp,168(sp)
  80f7f8:	ddc02917 	ldw	r23,164(sp)
  80f7fc:	dd802817 	ldw	r22,160(sp)
  80f800:	dd402717 	ldw	r21,156(sp)
  80f804:	dd002617 	ldw	r20,152(sp)
  80f808:	dcc02517 	ldw	r19,148(sp)
  80f80c:	dc802417 	ldw	r18,144(sp)
  80f810:	dc402317 	ldw	r17,140(sp)
  80f814:	dc002217 	ldw	r16,136(sp)
  80f818:	dec02c04 	addi	sp,sp,176
  80f81c:	f800283a 	ret
    }
  }

  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
  80f820:	d8c02117 	ldw	r3,132(sp)
  80f824:	9cc00044 	addi	r19,r19,1
  80f828:	1cffda1e 	bne	r3,r19,80f794 <mad_layer_I+0x64>

      allocation[ch][sb] = nb ? nb + 1 : 0;
    }
  }

  for (sb = bound; sb < 32; ++sb) {
  80f82c:	008007c4 	movi	r2,31
  80f830:	10c04236 	bltu	r2,r3,80f93c <mad_layer_I+0x20c>
    }
  }

  /* decode samples */

  for (s = 0; s < 12; ++s) {
  80f834:	d8c02117 	ldw	r3,132(sp)
  80f838:	b4800704 	addi	r18,r22,28
  80f83c:	1ec5883a 	add	r2,r3,sp
  80f840:	14001804 	addi	r16,r2,96
  80f844:	1823883a 	mov	r17,r3
  80f848:	00000806 	br	80f86c <mad_layer_I+0x13c>
    if (nb == 15) {
      stream->error = MAD_ERROR_BADBITALLOC;
      return -1;
    }

    allocation[0][sb] =
  80f84c:	18000126 	beq	r3,zero,80f854 <mad_layer_I+0x124>
  80f850:	19000044 	addi	r4,r3,1

      allocation[ch][sb] = nb ? nb + 1 : 0;
    }
  }

  for (sb = bound; sb < 32; ++sb) {
  80f854:	8c400044 	addi	r17,r17,1
  80f858:	008007c4 	movi	r2,31
    if (nb == 15) {
      stream->error = MAD_ERROR_BADBITALLOC;
      return -1;
    }

    allocation[0][sb] =
  80f85c:	813ff805 	stb	r4,-32(r16)
  80f860:	81000005 	stb	r4,0(r16)

      allocation[ch][sb] = nb ? nb + 1 : 0;
    }
  }

  for (sb = bound; sb < 32; ++sb) {
  80f864:	84000044 	addi	r16,r16,1
  80f868:	14403436 	bltu	r2,r17,80f93c <mad_layer_I+0x20c>
    nb = mad_bit_read(&stream->ptr, 4);
  80f86c:	9009883a 	mov	r4,r18
  80f870:	01400104 	movi	r5,4
  80f874:	080e3300 	call	80e330 <mad_bit_read>
  80f878:	1007883a 	mov	r3,r2

    if (nb == 15) {
  80f87c:	008003c4 	movi	r2,15
      stream->error = MAD_ERROR_BADBITALLOC;
      return -1;
    }

    allocation[0][sb] =
  80f880:	0009883a 	mov	r4,zero
  }

  for (sb = bound; sb < 32; ++sb) {
    nb = mad_bit_read(&stream->ptr, 4);

    if (nb == 15) {
  80f884:	18bff11e 	bne	r3,r2,80f84c <mad_layer_I+0x11c>
      stream->error = MAD_ERROR_BADBITALLOC;
  80f888:	00808444 	movi	r2,529
  80f88c:	00ffffc4 	movi	r3,-1
  80f890:	b0800f15 	stw	r2,60(r22)
  80f894:	003fd506 	br	80f7ec <mad_layer_I+0xbc>
  unsigned char allocation[2][32], scalefactor[2][32];

  nch = MAD_NCHANNELS(header);

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
  80f898:	00800084 	movi	r2,2
  80f89c:	18801d26 	beq	r3,r2,80f914 <mad_layer_I+0x1e4>
  80f8a0:	29000717 	ldw	r4,28(r5)
  80f8a4:	102b883a 	mov	r21,r2
  80f8a8:	00c00804 	movi	r3,32
    bound = 4 + header->mode_extension * 4;
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
  80f8ac:	2080040c 	andi	r2,r4,16
  unsigned char allocation[2][32], scalefactor[2][32];

  nch = MAD_NCHANNELS(header);

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
  80f8b0:	d8c02115 	stw	r3,132(sp)
    bound = 4 + header->mode_extension * 4;
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
  80f8b4:	103fb326 	beq	r2,zero,80f784 <mad_layer_I+0x54>
    header->crc_check =
  80f8b8:	d9002117 	ldw	r4,132(sp)
  80f8bc:	b0c00817 	ldw	r3,32(r22)
  80f8c0:	b0800717 	ldw	r2,28(r22)
  80f8c4:	254d383a 	mul	r6,r4,r21
  80f8c8:	b9c0060b 	ldhu	r7,24(r23)
  80f8cc:	180b883a 	mov	r5,r3
  80f8d0:	310dc83a 	sub	r6,r6,r4
  80f8d4:	318d883a 	add	r6,r6,r6
  80f8d8:	318d883a 	add	r6,r6,r6
  80f8dc:	1009883a 	mov	r4,r2
  80f8e0:	31802004 	addi	r6,r6,128
  80f8e4:	080e40c0 	call	80e40c <mad_bit_crc>
      mad_bit_crc(stream->ptr, 4 * (bound * nch + (32 - bound)),
		  header->crc_check);

    if (header->crc_check != header->crc_target &&
  80f8e8:	b900068b 	ldhu	r4,26(r23)
  80f8ec:	10ffffcc 	andi	r3,r2,65535
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
    header->crc_check =
  80f8f0:	b880060d 	sth	r2,24(r23)
      mad_bit_crc(stream->ptr, 4 * (bound * nch + (32 - bound)),
		  header->crc_check);

    if (header->crc_check != header->crc_target &&
  80f8f4:	193fa326 	beq	r3,r4,80f784 <mad_layer_I+0x54>
  80f8f8:	b8800b17 	ldw	r2,44(r23)
  80f8fc:	1080004c 	andi	r2,r2,1
  80f900:	103fa01e 	bne	r2,zero,80f784 <mad_layer_I+0x54>
	!(frame->options & MAD_OPTION_IGNORECRC)) {
      stream->error = MAD_ERROR_BADCRC;
  80f904:	00808044 	movi	r2,513
  80f908:	00ffffc4 	movi	r3,-1
  80f90c:	b0800f15 	stw	r2,60(r22)
  80f910:	003fb606 	br	80f7ec <mad_layer_I+0xbc>
  nch = MAD_NCHANNELS(header);

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
    header->flags |= MAD_FLAG_I_STEREO;
    bound = 4 + header->mode_extension * 4;
  80f914:	28800217 	ldw	r2,8(r5)

  nch = MAD_NCHANNELS(header);

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
    header->flags |= MAD_FLAG_I_STEREO;
  80f918:	29000717 	ldw	r4,28(r5)
    bound = 4 + header->mode_extension * 4;
  80f91c:	182b883a 	mov	r21,r3
  80f920:	1085883a 	add	r2,r2,r2
  80f924:	1085883a 	add	r2,r2,r2

  nch = MAD_NCHANNELS(header);

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
    header->flags |= MAD_FLAG_I_STEREO;
  80f928:	21004014 	ori	r4,r4,256
    bound = 4 + header->mode_extension * 4;
  80f92c:	10800104 	addi	r2,r2,4

  nch = MAD_NCHANNELS(header);

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
    header->flags |= MAD_FLAG_I_STEREO;
  80f930:	29000715 	stw	r4,28(r5)
    bound = 4 + header->mode_extension * 4;
  80f934:	d8802115 	stw	r2,132(sp)
  80f938:	003f9006 	br	80f77c <mad_layer_I+0x4c>

      allocation[ch][sb] = nb ? nb + 1 : 0;
    }
  }

  for (sb = bound; sb < 32; ++sb) {
  80f93c:	0023883a 	mov	r17,zero
  80f940:	0025883a 	mov	r18,zero
  80f944:	04c007c4 	movi	r19,31

  /* decode scalefactors */

  for (sb = 0; sb < 32; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
      if (allocation[ch][sb]) {
  80f948:	8806917a 	slli	r3,r17,5
  }

  /* decode scalefactors */

  for (sb = 0; sb < 32; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80f94c:	8d409936 	bltu	r17,r21,80fbb4 <mad_layer_I+0x484>
    allocation[1][sb] = nb ? nb + 1 : 0;
  }

  /* decode scalefactors */

  for (sb = 0; sb < 32; ++sb) {
  80f950:	94800044 	addi	r18,r18,1
  80f954:	0023883a 	mov	r17,zero
  80f958:	9cbffb2e 	bgeu	r19,r18,80f948 <mad_layer_I+0x218>
  80f95c:	0039883a 	mov	fp,zero
  80f960:	d8002015 	stw	zero,128(sp)
  }

  /* decode samples */

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
  80f964:	d8802117 	ldw	r2,132(sp)
  80f968:	e080412e 	bgeu	fp,r2,80fa70 <mad_layer_I+0x340>
      for (ch = 0; ch < nch; ++ch) {
  80f96c:	a8003d26 	beq	r21,zero,80fa64 <mad_layer_I+0x334>
  80f970:	d8c02017 	ldw	r3,128(sp)
  80f974:	df29883a 	add	r20,sp,fp
  80f978:	0023883a 	mov	r17,zero
  80f97c:	1804917a 	slli	r2,r3,5
  80f980:	d8c01004 	addi	r3,sp,64
  80f984:	1f27883a 	add	r19,r3,fp
  80f988:	1705883a 	add	r2,r2,fp
  80f98c:	1085883a 	add	r2,r2,r2
  80f990:	1085883a 	add	r2,r2,r2
  80f994:	10800c04 	addi	r2,r2,48
  80f998:	b8a5883a 	add	r18,r23,r2
  80f99c:	00000606 	br	80f9b8 <mad_layer_I+0x288>
  80f9a0:	8c400044 	addi	r17,r17,1
	nb = allocation[ch][sb];
	frame->sbsample[ch][s][sb] = nb ?
  80f9a4:	90800015 	stw	r2,0(r18)

  /* decode samples */

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
  80f9a8:	9cc00804 	addi	r19,r19,32
  80f9ac:	94848004 	addi	r18,r18,4608
  80f9b0:	a5000804 	addi	r20,r20,32
  80f9b4:	ac402b26 	beq	r21,r17,80fa64 <mad_layer_I+0x334>
	nb = allocation[ch][sb];
	frame->sbsample[ch][s][sb] = nb ?
  80f9b8:	9c000003 	ldbu	r16,0(r19)
static
mad_fixed_t I_sample(struct mad_bitptr *ptr, unsigned int nb)
{
  mad_fixed_t sample;

  sample = mad_bit_read(ptr, nb);
  80f9bc:	b1000704 	addi	r4,r22,28

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
	nb = allocation[ch][sb];
	frame->sbsample[ch][s][sb] = nb ?
  80f9c0:	0005883a 	mov	r2,zero
static
mad_fixed_t I_sample(struct mad_bitptr *ptr, unsigned int nb)
{
  mad_fixed_t sample;

  sample = mad_bit_read(ptr, nb);
  80f9c4:	800b883a 	mov	r5,r16

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
	nb = allocation[ch][sb];
	frame->sbsample[ch][s][sb] = nb ?
  80f9c8:	803ff526 	beq	r16,zero,80f9a0 <mad_layer_I+0x270>
static
mad_fixed_t I_sample(struct mad_bitptr *ptr, unsigned int nb)
{
  mad_fixed_t sample;

  sample = mad_bit_read(ptr, nb);
  80f9cc:	080e3300 	call	80e330 <mad_bit_read>

  /* invert most significant bit, extend sign, then scale to fixed format */

  sample ^= 1 << (nb - 1);
  80f9d0:	00c00044 	movi	r3,1
  80f9d4:	817fffc4 	addi	r5,r16,-1
  80f9d8:	1946983a 	sll	r3,r3,r5
  sample |= -(sample & (1 << (nb - 1)));

  sample <<= MAD_F_FRACBITS - (nb - 1);
  80f9dc:	01000744 	movi	r4,29
  80f9e0:	2409c83a 	sub	r4,r4,r16

  sample = mad_bit_read(ptr, nb);

  /* invert most significant bit, extend sign, then scale to fixed format */

  sample ^= 1 << (nb - 1);
  80f9e4:	10c4f03a 	xor	r2,r2,r3
  sample |= -(sample & (1 << (nb - 1)));
  80f9e8:	1886703a 	and	r3,r3,r2
  80f9ec:	00c7c83a 	sub	r3,zero,r3
  80f9f0:	10c4b03a 	or	r2,r2,r3

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
	nb = allocation[ch][sb];
	frame->sbsample[ch][s][sb] = nb ?
  80f9f4:	01840034 	movhi	r6,4096
  /* invert most significant bit, extend sign, then scale to fixed format */

  sample ^= 1 << (nb - 1);
  sample |= -(sample & (1 << (nb - 1)));

  sample <<= MAD_F_FRACBITS - (nb - 1);
  80f9f8:	1104983a 	sll	r2,r2,r4

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
	nb = allocation[ch][sb];
	frame->sbsample[ch][s][sb] = nb ?
  80f9fc:	314dd83a 	sra	r6,r6,r5
  80fa00:	a1000003 	ldbu	r4,0(r20)
  80fa04:	8407883a 	add	r3,r16,r16
  80fa08:	014020f4 	movhi	r5,131
  80fa0c:	29551a04 	addi	r5,r5,21608
  80fa10:	18c7883a 	add	r3,r3,r3
  80fa14:	1947883a 	add	r3,r3,r5
  80fa18:	1185883a 	add	r2,r2,r6
  80fa1c:	197ffe8f 	ldh	r5,-6(r3)
  80fa20:	1005d33a 	srai	r2,r2,12
  80fa24:	2109883a 	add	r4,r4,r4
  80fa28:	2109883a 	add	r4,r4,r4
  80fa2c:	024020f4 	movhi	r9,131
  80fa30:	4a54da04 	addi	r9,r9,21352
  80fa34:	2249883a 	add	r4,r4,r9
  80fa38:	1145383a 	mul	r2,r2,r5
  80fa3c:	20c00017 	ldw	r3,0(r4)

  /* decode samples */

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
  80fa40:	8c400044 	addi	r17,r17,1
	nb = allocation[ch][sb];
	frame->sbsample[ch][s][sb] = nb ?
  80fa44:	1005d33a 	srai	r2,r2,12
  80fa48:	1807d43a 	srai	r3,r3,16

  /* decode samples */

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
  80fa4c:	9cc00804 	addi	r19,r19,32
  80fa50:	a5000804 	addi	r20,r20,32
	nb = allocation[ch][sb];
	frame->sbsample[ch][s][sb] = nb ?
  80fa54:	10c5383a 	mul	r2,r2,r3
  80fa58:	90800015 	stw	r2,0(r18)

  /* decode samples */

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
  80fa5c:	94848004 	addi	r18,r18,4608
  80fa60:	ac7fd51e 	bne	r21,r17,80f9b8 <mad_layer_I+0x288>
  }

  /* decode samples */

  for (s = 0; s < 12; ++s) {
    for (sb = 0; sb < bound; ++sb) {
  80fa64:	d8802117 	ldw	r2,132(sp)
  80fa68:	e7000044 	addi	fp,fp,1
  80fa6c:	e0bfbf36 	bltu	fp,r2,80f96c <mad_layer_I+0x23c>
  80fa70:	1009883a 	mov	r4,r2
	  mad_f_mul(I_sample(&stream->ptr, nb),
		    sf_table[scalefactor[ch][sb]]) : 0;
      }
    }

    for (sb = bound; sb < 32; ++sb) {
  80fa74:	008007c4 	movi	r2,31
  80fa78:	11001b36 	bltu	r2,r4,80fae8 <mad_layer_I+0x3b8>
  80fa7c:	d8c02017 	ldw	r3,128(sp)
  80fa80:	2023883a 	mov	r17,r4
  80fa84:	070020f4 	movhi	fp,131
  80fa88:	e7151a04 	addi	fp,fp,21608
  80fa8c:	1804917a 	slli	r2,r3,5
  80fa90:	d8c01004 	addi	r3,sp,64
  80fa94:	1925883a 	add	r18,r3,r4
  80fa98:	1105883a 	add	r2,r2,r4
  80fa9c:	1085883a 	add	r2,r2,r2
  80faa0:	1085883a 	add	r2,r2,r2
  80faa4:	14c00c04 	addi	r19,r2,48
  80faa8:	9829883a 	mov	r20,r19
      if ((nb = allocation[0][sb])) {
  80faac:	94000003 	ldbu	r16,0(r18)
  80fab0:	8000141e 	bne	r16,zero,80fb04 <mad_layer_I+0x3d4>
	  frame->sbsample[ch][s][sb] =
	    mad_f_mul(sample, sf_table[scalefactor[ch][sb]]);
	}
      }
      else {
	for (ch = 0; ch < nch; ++ch)
  80fab4:	a8000626 	beq	r21,zero,80fad0 <mad_layer_I+0x3a0>
      if ((nb = allocation[0][sb])) {
	mad_fixed_t sample;

	sample = I_sample(&stream->ptr, nb);

	for (ch = 0; ch < nch; ++ch) {
  80fab8:	bcc5883a 	add	r2,r23,r19
  80fabc:	0007883a 	mov	r3,zero
	  frame->sbsample[ch][s][sb] =
	    mad_f_mul(sample, sf_table[scalefactor[ch][sb]]);
	}
      }
      else {
	for (ch = 0; ch < nch; ++ch)
  80fac0:	18c00044 	addi	r3,r3,1
	  frame->sbsample[ch][s][sb] = 0;
  80fac4:	10000015 	stw	zero,0(r2)
	  frame->sbsample[ch][s][sb] =
	    mad_f_mul(sample, sf_table[scalefactor[ch][sb]]);
	}
      }
      else {
	for (ch = 0; ch < nch; ++ch)
  80fac8:	10848004 	addi	r2,r2,4608
  80facc:	1d7ffc1e 	bne	r3,r21,80fac0 <mad_layer_I+0x390>
	  mad_f_mul(I_sample(&stream->ptr, nb),
		    sf_table[scalefactor[ch][sb]]) : 0;
      }
    }

    for (sb = bound; sb < 32; ++sb) {
  80fad0:	8c400044 	addi	r17,r17,1
  80fad4:	00800804 	movi	r2,32
  80fad8:	a5000104 	addi	r20,r20,4
  80fadc:	9cc00104 	addi	r19,r19,4
  80fae0:	94800044 	addi	r18,r18,1
  80fae4:	88bff11e 	bne	r17,r2,80faac <mad_layer_I+0x37c>
    }
  }

  /* decode samples */

  for (s = 0; s < 12; ++s) {
  80fae8:	d9002017 	ldw	r4,128(sp)
  80faec:	008002c4 	movi	r2,11
  80faf0:	21000044 	addi	r4,r4,1
  80faf4:	d9002015 	stw	r4,128(sp)
  80faf8:	11003836 	bltu	r2,r4,80fbdc <mad_layer_I+0x4ac>
  80fafc:	0039883a 	mov	fp,zero
  80fb00:	003f9806 	br	80f964 <mad_layer_I+0x234>
static
mad_fixed_t I_sample(struct mad_bitptr *ptr, unsigned int nb)
{
  mad_fixed_t sample;

  sample = mad_bit_read(ptr, nb);
  80fb04:	b1000704 	addi	r4,r22,28
  80fb08:	800b883a 	mov	r5,r16
  80fb0c:	080e3300 	call	80e330 <mad_bit_read>
  80fb10:	1007883a 	mov	r3,r2

  /* s'' = (2^nb / (2^nb - 1)) * (s''' + 2^(-nb + 1)) */

  sample += MAD_F_ONE >> (nb - 1);

  return mad_f_mul(sample, linear_table[nb - 2]);
  80fb14:	8405883a 	add	r2,r16,r16
  80fb18:	1085883a 	add	r2,r2,r2
  80fb1c:	1705883a 	add	r2,r2,fp
  80fb20:	11bffe17 	ldw	r6,-8(r2)
      if ((nb = allocation[0][sb])) {
	mad_fixed_t sample;

	sample = I_sample(&stream->ptr, nb);

	for (ch = 0; ch < nch; ++ch) {
  80fb24:	a83fea26 	beq	r21,zero,80fad0 <mad_layer_I+0x3a0>

  sample = mad_bit_read(ptr, nb);

  /* invert most significant bit, extend sign, then scale to fixed format */

  sample ^= 1 << (nb - 1);
  80fb28:	817fffc4 	addi	r5,r16,-1
  80fb2c:	00800044 	movi	r2,1
  80fb30:	1144983a 	sll	r2,r2,r5
  sample |= -(sample & (1 << (nb - 1)));

  sample <<= MAD_F_FRACBITS - (nb - 1);
  80fb34:	01000744 	movi	r4,29
  80fb38:	2409c83a 	sub	r4,r4,r16

  sample = mad_bit_read(ptr, nb);

  /* invert most significant bit, extend sign, then scale to fixed format */

  sample ^= 1 << (nb - 1);
  80fb3c:	1886f03a 	xor	r3,r3,r2
  sample |= -(sample & (1 << (nb - 1)));
  80fb40:	10c4703a 	and	r2,r2,r3
  80fb44:	0085c83a 	sub	r2,zero,r2
  80fb48:	1886b03a 	or	r3,r3,r2

  sample <<= MAD_F_FRACBITS - (nb - 1);
  80fb4c:	00840034 	movhi	r2,4096
  80fb50:	1906983a 	sll	r3,r3,r4
  80fb54:	1145d83a 	sra	r2,r2,r5
  80fb58:	3009d43a 	srai	r4,r6,16
  80fb5c:	dc4f883a 	add	r7,sp,r17
  80fb60:	1887883a 	add	r3,r3,r2
  80fb64:	1807d33a 	srai	r3,r3,12
  80fb68:	bd0d883a 	add	r6,r23,r20
  80fb6c:	0011883a 	mov	r8,zero
  80fb70:	1907383a 	mul	r3,r3,r4
  80fb74:	024020f4 	movhi	r9,131
  80fb78:	4a54da04 	addi	r9,r9,21352
  80fb7c:	1809d33a 	srai	r4,r3,12
	mad_fixed_t sample;

	sample = I_sample(&stream->ptr, nb);

	for (ch = 0; ch < nch; ++ch) {
	  frame->sbsample[ch][s][sb] =
  80fb80:	38800003 	ldbu	r2,0(r7)
      if ((nb = allocation[0][sb])) {
	mad_fixed_t sample;

	sample = I_sample(&stream->ptr, nb);

	for (ch = 0; ch < nch; ++ch) {
  80fb84:	42000044 	addi	r8,r8,1
  80fb88:	39c00804 	addi	r7,r7,32
	  frame->sbsample[ch][s][sb] =
  80fb8c:	1085883a 	add	r2,r2,r2
  80fb90:	1085883a 	add	r2,r2,r2
  80fb94:	1245883a 	add	r2,r2,r9
  80fb98:	10c00017 	ldw	r3,0(r2)
  80fb9c:	1807d43a 	srai	r3,r3,16
  80fba0:	1907383a 	mul	r3,r3,r4
  80fba4:	30c00015 	stw	r3,0(r6)
      if ((nb = allocation[0][sb])) {
	mad_fixed_t sample;

	sample = I_sample(&stream->ptr, nb);

	for (ch = 0; ch < nch; ++ch) {
  80fba8:	31848004 	addi	r6,r6,4608
  80fbac:	aa3ff41e 	bne	r21,r8,80fb80 <mad_layer_I+0x450>
  80fbb0:	003fc706 	br	80fad0 <mad_layer_I+0x3a0>

  /* decode scalefactors */

  for (sb = 0; sb < 32; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
      if (allocation[ch][sb]) {
  80fbb4:	1ec7883a 	add	r3,r3,sp
  80fbb8:	1ca1883a 	add	r16,r3,r18
  80fbbc:	80801003 	ldbu	r2,64(r16)
	scalefactor[ch][sb] = mad_bit_read(&stream->ptr, 6);
  80fbc0:	b1000704 	addi	r4,r22,28
  80fbc4:	01400184 	movi	r5,6
  }

  /* decode scalefactors */

  for (sb = 0; sb < 32; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80fbc8:	8c400044 	addi	r17,r17,1
      if (allocation[ch][sb]) {
  80fbcc:	103f5e26 	beq	r2,zero,80f948 <mad_layer_I+0x218>
	scalefactor[ch][sb] = mad_bit_read(&stream->ptr, 6);
  80fbd0:	080e3300 	call	80e330 <mad_bit_read>
  80fbd4:	80800005 	stb	r2,0(r16)
  80fbd8:	003f5b06 	br	80f948 <mad_layer_I+0x218>
    }
  }

  /* decode samples */

  for (s = 0; s < 12; ++s) {
  80fbdc:	0007883a 	mov	r3,zero
  80fbe0:	003f0206 	br	80f7ec <mad_layer_I+0xbc>

0080fbe4 <mad_layer_II>:
/*
 * NAME:	layer->II()
 * DESCRIPTION:	decode a single Layer II frame
 */
int mad_layer_II(struct mad_stream *stream, struct mad_frame *frame)
{
  80fbe4:	deff8e04 	addi	sp,sp,-456
  unsigned int index, sblimit, nbal, nch, bound, gr, ch, s, sb;
  unsigned char const *offsets;
  unsigned char allocation[2][32], scfsi[2][32], scalefactor[2][32][3];
  mad_fixed_t samples[3];

  nch = MAD_NCHANNELS(header);
  80fbe8:	29800117 	ldw	r6,4(r5)
/*
 * NAME:	layer->II()
 * DESCRIPTION:	decode a single Layer II frame
 */
int mad_layer_II(struct mad_stream *stream, struct mad_frame *frame)
{
  80fbec:	dd806e15 	stw	r22,440(sp)
  80fbf0:	282d883a 	mov	r22,r5
  unsigned char allocation[2][32], scfsi[2][32], scalefactor[2][32][3];
  mad_fixed_t samples[3];

  nch = MAD_NCHANNELS(header);

  if (header->flags & MAD_FLAG_LSF_EXT)
  80fbf4:	29400717 	ldw	r5,28(r5)
/*
 * NAME:	layer->II()
 * DESCRIPTION:	decode a single Layer II frame
 */
int mad_layer_II(struct mad_stream *stream, struct mad_frame *frame)
{
  80fbf8:	dd006c15 	stw	r20,432(sp)
  unsigned int index, sblimit, nbal, nch, bound, gr, ch, s, sb;
  unsigned char const *offsets;
  unsigned char allocation[2][32], scfsi[2][32], scalefactor[2][32][3];
  mad_fixed_t samples[3];

  nch = MAD_NCHANNELS(header);
  80fbfc:	3028c03a 	cmpne	r20,r6,zero

  if (header->flags & MAD_FLAG_LSF_EXT)
  80fc00:	2884000c 	andi	r2,r5,4096
/*
 * NAME:	layer->II()
 * DESCRIPTION:	decode a single Layer II frame
 */
int mad_layer_II(struct mad_stream *stream, struct mad_frame *frame)
{
  80fc04:	dfc07115 	stw	ra,452(sp)
  80fc08:	df007015 	stw	fp,448(sp)
  80fc0c:	ddc06f15 	stw	r23,444(sp)
  80fc10:	dd406d15 	stw	r21,436(sp)
  80fc14:	dcc06b15 	stw	r19,428(sp)
  80fc18:	dc806a15 	stw	r18,424(sp)
  80fc1c:	dc406915 	stw	r17,420(sp)
  80fc20:	dc006815 	stw	r16,416(sp)
  80fc24:	d9006315 	stw	r4,396(sp)
  unsigned int index, sblimit, nbal, nch, bound, gr, ch, s, sb;
  unsigned char const *offsets;
  unsigned char allocation[2][32], scfsi[2][32], scalefactor[2][32][3];
  mad_fixed_t samples[3];

  nch = MAD_NCHANNELS(header);
  80fc28:	a5000044 	addi	r20,r20,1

  if (header->flags & MAD_FLAG_LSF_EXT)
  80fc2c:	10025826 	beq	r2,zero,810590 <mad_layer_II+0x9ac>
  80fc30:	00800104 	movi	r2,4
    freeformat:
      index = (header->samplerate == 48000) ? 0 : 1;
    }
  }

  sblimit = sbquant_table[index].sblimit;
  80fc34:	10800924 	muli	r2,r2,36
  80fc38:	00c020f4 	movhi	r3,131
  80fc3c:	18d45b04 	addi	r3,r3,20844
  offsets = sbquant_table[index].offsets;
  80fc40:	11000104 	addi	r4,r2,4
  80fc44:	20c9883a 	add	r4,r4,r3
    freeformat:
      index = (header->samplerate == 48000) ? 0 : 1;
    }
  }

  sblimit = sbquant_table[index].sblimit;
  80fc48:	10c5883a 	add	r2,r2,r3
  offsets = sbquant_table[index].offsets;

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
  80fc4c:	00c00084 	movi	r3,2
      index = (header->samplerate == 48000) ? 0 : 1;
    }
  }

  sblimit = sbquant_table[index].sblimit;
  offsets = sbquant_table[index].offsets;
  80fc50:	d9006015 	stw	r4,384(sp)
    freeformat:
      index = (header->samplerate == 48000) ? 0 : 1;
    }
  }

  sblimit = sbquant_table[index].sblimit;
  80fc54:	17000017 	ldw	fp,0(r2)
  offsets = sbquant_table[index].offsets;

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
  80fc58:	30c27526 	beq	r6,r3,810630 <mad_layer_II+0xa4c>
  80fc5c:	00800804 	movi	r2,32
    header->flags |= MAD_FLAG_I_STEREO;
    bound = 4 + header->mode_extension * 4;
  80fc60:	d8806215 	stw	r2,392(sp)
  80fc64:	e080012e 	bgeu	fp,r2,80fc6c <mad_layer_II+0x88>
  80fc68:	df006215 	stw	fp,392(sp)
  }

  if (bound > sblimit)
    bound = sblimit;

  start = stream->ptr;
  80fc6c:	d9406317 	ldw	r5,396(sp)

  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
  80fc70:	d9806217 	ldw	r6,392(sp)
  }

  if (bound > sblimit)
    bound = sblimit;

  start = stream->ptr;
  80fc74:	2880080b 	ldhu	r2,32(r5)
  80fc78:	28c00717 	ldw	r3,28(r5)
  80fc7c:	2900088b 	ldhu	r4,34(r5)
  80fc80:	d880010d 	sth	r2,4(sp)
  80fc84:	d8c00015 	stw	r3,0(sp)
  80fc88:	d900018d 	sth	r4,6(sp)

  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
  80fc8c:	30001c26 	beq	r6,zero,80fd00 <mad_layer_II+0x11c>
  80fc90:	a011003a 	cmpeq	r8,r20,zero
  80fc94:	002b883a 	mov	r21,zero
  80fc98:	da006715 	stw	r8,412(sp)
  80fc9c:	ddc01804 	addi	r23,sp,96
  80fca0:	2c800704 	addi	r18,r5,28
    nbal = bitalloc_table[offsets[sb]].nbal;
  80fca4:	d8806017 	ldw	r2,384(sp)

    for (ch = 0; ch < nch; ++ch)
  80fca8:	d9006717 	ldw	r4,412(sp)
  start = stream->ptr;

  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
    nbal = bitalloc_table[offsets[sb]].nbal;
  80fcac:	1547883a 	add	r3,r2,r21
  80fcb0:	18800003 	ldbu	r2,0(r3)
  80fcb4:	00c020f4 	movhi	r3,131
  80fcb8:	18d48804 	addi	r3,r3,21024
  80fcbc:	1085883a 	add	r2,r2,r2
  80fcc0:	1085883a 	add	r2,r2,r2
  80fcc4:	10c5883a 	add	r2,r2,r3
  80fcc8:	1400000b 	ldhu	r16,0(r2)

    for (ch = 0; ch < nch; ++ch)
  80fccc:	2000091e 	bne	r4,zero,80fcf4 <mad_layer_II+0x110>
  80fcd0:	bd63883a 	add	r17,r23,r21
  80fcd4:	0027883a 	mov	r19,zero
      allocation[ch][sb] = mad_bit_read(&stream->ptr, nbal);
  80fcd8:	9009883a 	mov	r4,r18
  80fcdc:	800b883a 	mov	r5,r16
  80fce0:	080e3300 	call	80e330 <mad_bit_read>
  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
    nbal = bitalloc_table[offsets[sb]].nbal;

    for (ch = 0; ch < nch; ++ch)
  80fce4:	9cc00044 	addi	r19,r19,1
      allocation[ch][sb] = mad_bit_read(&stream->ptr, nbal);
  80fce8:	88800005 	stb	r2,0(r17)
  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
    nbal = bitalloc_table[offsets[sb]].nbal;

    for (ch = 0; ch < nch; ++ch)
  80fcec:	8c400804 	addi	r17,r17,32
  80fcf0:	a4fff91e 	bne	r20,r19,80fcd8 <mad_layer_II+0xf4>

  start = stream->ptr;

  /* decode bit allocations */

  for (sb = 0; sb < bound; ++sb) {
  80fcf4:	d9406217 	ldw	r5,392(sp)
  80fcf8:	ad400044 	addi	r21,r21,1
  80fcfc:	2d7fe91e 	bne	r5,r21,80fca4 <mad_layer_II+0xc0>

    for (ch = 0; ch < nch; ++ch)
      allocation[ch][sb] = mad_bit_read(&stream->ptr, nbal);
  }

  for (sb = bound; sb < sblimit; ++sb) {
  80fd00:	d9806217 	ldw	r6,392(sp)
  80fd04:	3700172e 	bgeu	r6,fp,80fd64 <mad_layer_II+0x180>
  80fd08:	d8801804 	addi	r2,sp,96
  80fd0c:	31000804 	addi	r4,r6,32
  80fd10:	e0c00804 	addi	r3,fp,32
  80fd14:	10e7883a 	add	r19,r2,r3
  80fd18:	1121883a 	add	r16,r2,r4
  80fd1c:	da006017 	ldw	r8,384(sp)
  80fd20:	d8806317 	ldw	r2,396(sp)
  80fd24:	41a3883a 	add	r17,r8,r6
  80fd28:	14800704 	addi	r18,r2,28
    nbal = bitalloc_table[offsets[sb]].nbal;

    allocation[0][sb] =
  80fd2c:	88800003 	ldbu	r2,0(r17)
  80fd30:	00c020f4 	movhi	r3,131
  80fd34:	18d48804 	addi	r3,r3,21024
  80fd38:	9009883a 	mov	r4,r18
  80fd3c:	1085883a 	add	r2,r2,r2
  80fd40:	1085883a 	add	r2,r2,r2
  80fd44:	10c5883a 	add	r2,r2,r3
  80fd48:	1140000b 	ldhu	r5,0(r2)
  80fd4c:	8c400044 	addi	r17,r17,1
  80fd50:	080e3300 	call	80e330 <mad_bit_read>
  80fd54:	80bff805 	stb	r2,-32(r16)
  80fd58:	80800005 	stb	r2,0(r16)
  80fd5c:	84000044 	addi	r16,r16,1

    for (ch = 0; ch < nch; ++ch)
      allocation[ch][sb] = mad_bit_read(&stream->ptr, nbal);
  }

  for (sb = bound; sb < sblimit; ++sb) {
  80fd60:	9c3ff21e 	bne	r19,r16,80fd2c <mad_layer_II+0x148>
    allocation[1][sb] = mad_bit_read(&stream->ptr, nbal);
  }

  /* decode scalefactor selection info */

  for (sb = 0; sb < sblimit; ++sb) {
  80fd64:	e02b003a 	cmpeq	r21,fp,zero
  80fd68:	a8001a1e 	bne	r21,zero,80fdd4 <mad_layer_II+0x1f0>
  80fd6c:	a009003a 	cmpeq	r4,r20,zero
  80fd70:	0025883a 	mov	r18,zero
  80fd74:	d9006715 	stw	r4,412(sp)
    for (ch = 0; ch < nch; ++ch) {
  80fd78:	d9806717 	ldw	r6,412(sp)
  80fd7c:	3000131e 	bne	r6,zero,80fdcc <mad_layer_II+0x1e8>
  80fd80:	d8801804 	addi	r2,sp,96
  80fd84:	d8c00804 	addi	r3,sp,32
  80fd88:	14a7883a 	add	r19,r2,r18
  80fd8c:	1ca1883a 	add	r16,r3,r18
  80fd90:	0023883a 	mov	r17,zero
  80fd94:	00000206 	br	80fda0 <mad_layer_II+0x1bc>
  80fd98:	84000804 	addi	r16,r16,32
  80fd9c:	a4400b26 	beq	r20,r17,80fdcc <mad_layer_II+0x1e8>
      if (allocation[ch][sb])
	scfsi[ch][sb] = mad_bit_read(&stream->ptr, 2);
  80fda0:	d9406317 	ldw	r5,396(sp)

  /* decode scalefactor selection info */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
      if (allocation[ch][sb])
  80fda4:	98800003 	ldbu	r2,0(r19)
  }

  /* decode scalefactor selection info */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80fda8:	8c400044 	addi	r17,r17,1
      if (allocation[ch][sb])
	scfsi[ch][sb] = mad_bit_read(&stream->ptr, 2);
  80fdac:	29000704 	addi	r4,r5,28
  }

  /* decode scalefactor selection info */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80fdb0:	9cc00804 	addi	r19,r19,32
      if (allocation[ch][sb])
	scfsi[ch][sb] = mad_bit_read(&stream->ptr, 2);
  80fdb4:	01400084 	movi	r5,2

  /* decode scalefactor selection info */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
      if (allocation[ch][sb])
  80fdb8:	103ff726 	beq	r2,zero,80fd98 <mad_layer_II+0x1b4>
	scfsi[ch][sb] = mad_bit_read(&stream->ptr, 2);
  80fdbc:	080e3300 	call	80e330 <mad_bit_read>
  80fdc0:	80800005 	stb	r2,0(r16)
  }

  /* decode scalefactor selection info */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80fdc4:	84000804 	addi	r16,r16,32
  80fdc8:	a47ff51e 	bne	r20,r17,80fda0 <mad_layer_II+0x1bc>
    allocation[1][sb] = mad_bit_read(&stream->ptr, nbal);
  }

  /* decode scalefactor selection info */

  for (sb = 0; sb < sblimit; ++sb) {
  80fdcc:	94800044 	addi	r18,r18,1
  80fdd0:	e4bfe91e 	bne	fp,r18,80fd78 <mad_layer_II+0x194>
    }
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
  80fdd4:	b0800717 	ldw	r2,28(r22)
  80fdd8:	1080040c 	andi	r2,r2,16
  80fddc:	1001ff1e 	bne	r2,zero,8105dc <mad_layer_II+0x9f8>
    }
  }

  /* decode scalefactors */

  for (sb = 0; sb < sblimit; ++sb) {
  80fde0:	a8003e1e 	bne	r21,zero,80fedc <mad_layer_II+0x2f8>
  80fde4:	a00b003a 	cmpeq	r5,r20,zero
  80fde8:	d8005815 	stw	zero,352(sp)
  80fdec:	d9406715 	stw	r5,412(sp)
    for (ch = 0; ch < nch; ++ch) {
  80fdf0:	d9806717 	ldw	r6,412(sp)
  80fdf4:	3000351e 	bne	r6,zero,80fecc <mad_layer_II+0x2e8>
  80fdf8:	da005817 	ldw	r8,352(sp)
  80fdfc:	d8c05817 	ldw	r3,352(sp)
  80fe00:	d9005817 	ldw	r4,352(sp)
  80fe04:	4211883a 	add	r8,r8,r8
  80fe08:	40c5883a 	add	r2,r8,r3
  80fe0c:	d8c01804 	addi	r3,sp,96
  80fe10:	16c5883a 	add	r2,r2,sp
  80fe14:	1927883a 	add	r19,r3,r4
  80fe18:	d8c00804 	addi	r3,sp,32
  80fe1c:	14002844 	addi	r16,r2,161
  80fe20:	1925883a 	add	r18,r3,r4
  80fe24:	0023883a 	mov	r17,zero
  80fe28:	da006515 	stw	r8,404(sp)
  80fe2c:	00000506 	br	80fe44 <mad_layer_II+0x260>
  80fe30:	8c400044 	addi	r17,r17,1
  80fe34:	9cc00804 	addi	r19,r19,32
  80fe38:	84001804 	addi	r16,r16,96
  80fe3c:	94800804 	addi	r18,r18,32
  80fe40:	a4402226 	beq	r20,r17,80fecc <mad_layer_II+0x2e8>
      if (allocation[ch][sb]) {
  80fe44:	98800003 	ldbu	r2,0(r19)
  80fe48:	103ff926 	beq	r2,zero,80fe30 <mad_layer_II+0x24c>
	scalefactor[ch][sb][0] = mad_bit_read(&stream->ptr, 6);
  80fe4c:	d9806317 	ldw	r6,396(sp)
  80fe50:	01400184 	movi	r5,6
  80fe54:	35c00704 	addi	r23,r6,28
  80fe58:	b809883a 	mov	r4,r23
  80fe5c:	080e3300 	call	80e330 <mad_bit_read>

	switch (scfsi[ch][sb]) {
  80fe60:	95400003 	ldbu	r21,0(r18)
  /* decode scalefactors */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
      if (allocation[ch][sb]) {
	scalefactor[ch][sb][0] = mad_bit_read(&stream->ptr, 6);
  80fe64:	1007883a 	mov	r3,r2

	switch (scfsi[ch][sb]) {
  80fe68:	00800044 	movi	r2,1
  /* decode scalefactors */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
      if (allocation[ch][sb]) {
	scalefactor[ch][sb][0] = mad_bit_read(&stream->ptr, 6);
  80fe6c:	80ffffc5 	stb	r3,-1(r16)

	switch (scfsi[ch][sb]) {
  80fe70:	a880b526 	beq	r21,r2,810148 <mad_layer_II+0x564>
  80fe74:	a880b036 	bltu	r21,r2,810138 <mad_layer_II+0x554>
  80fe78:	00800084 	movi	r2,2
  80fe7c:	a881b326 	beq	r21,r2,81054c <mad_layer_II+0x968>
  80fe80:	008000c4 	movi	r2,3
  80fe84:	a880b026 	beq	r21,r2,810148 <mad_layer_II+0x564>
	case 1:
	case 3:
	  scalefactor[ch][sb][2] = mad_bit_read(&stream->ptr, 6);
	}

	if (scfsi[ch][sb] & 1)
  80fe88:	a880004c 	andi	r2,r21,1
  80fe8c:	1005003a 	cmpeq	r2,r2,zero
  80fe90:	103fe71e 	bne	r2,zero,80fe30 <mad_layer_II+0x24c>
	  scalefactor[ch][sb][1] = scalefactor[ch][sb][scfsi[ch][sb] - 1];
  80fe94:	da006517 	ldw	r8,404(sp)
  80fe98:	d9005817 	ldw	r4,352(sp)
  80fe9c:	88801824 	muli	r2,r17,96
  }

  /* decode scalefactors */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80fea0:	8c400044 	addi	r17,r17,1
	case 3:
	  scalefactor[ch][sb][2] = mad_bit_read(&stream->ptr, 6);
	}

	if (scfsi[ch][sb] & 1)
	  scalefactor[ch][sb][1] = scalefactor[ch][sb][scfsi[ch][sb] - 1];
  80fea4:	4107883a 	add	r3,r8,r4
  80fea8:	1887883a 	add	r3,r3,r2
  80feac:	1ec7883a 	add	r3,r3,sp
  80feb0:	1d47883a 	add	r3,r3,r21
  80feb4:	188027c3 	ldbu	r2,159(r3)
  }

  /* decode scalefactors */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80feb8:	9cc00804 	addi	r19,r19,32
  80febc:	94800804 	addi	r18,r18,32
	case 3:
	  scalefactor[ch][sb][2] = mad_bit_read(&stream->ptr, 6);
	}

	if (scfsi[ch][sb] & 1)
	  scalefactor[ch][sb][1] = scalefactor[ch][sb][scfsi[ch][sb] - 1];
  80fec0:	80800005 	stb	r2,0(r16)
  }

  /* decode scalefactors */

  for (sb = 0; sb < sblimit; ++sb) {
    for (ch = 0; ch < nch; ++ch) {
  80fec4:	84001804 	addi	r16,r16,96
  80fec8:	a47fde1e 	bne	r20,r17,80fe44 <mad_layer_II+0x260>
    }
  }

  /* decode scalefactors */

  for (sb = 0; sb < sblimit; ++sb) {
  80fecc:	d9405817 	ldw	r5,352(sp)
  80fed0:	29400044 	addi	r5,r5,1
  80fed4:	d9405815 	stw	r5,352(sp)
  80fed8:	e17fc51e 	bne	fp,r5,80fdf0 <mad_layer_II+0x20c>
    }

    for (ch = 0; ch < nch; ++ch) {
      for (s = 0; s < 3; ++s) {
	for (sb = sblimit; sb < 32; ++sb)
	  frame->sbsample[ch][3 * gr + s][sb] = 0;
  80fedc:	d8005915 	stw	zero,356(sp)
  80fee0:	d9005917 	ldw	r4,356(sp)
  80fee4:	a00cc03a 	cmpne	r6,r20,zero
  80fee8:	d8006115 	stw	zero,388(sp)
  80feec:	d9806615 	stw	r6,408(sp)
  }

  /* decode samples */

  for (gr = 0; gr < 12; ++gr) {
    for (sb = 0; sb < bound; ++sb) {
  80fef0:	d9406217 	ldw	r5,392(sp)
  80fef4:	2140b92e 	bgeu	r4,r5,8101dc <mad_layer_II+0x5f8>
      for (ch = 0; ch < nch; ++ch) {
  80fef8:	a000b226 	beq	r20,zero,8101c4 <mad_layer_II+0x5e0>
  80fefc:	d9806117 	ldw	r6,388(sp)
  80ff00:	d8c01804 	addi	r3,sp,96
  80ff04:	1907883a 	add	r3,r3,r4
  80ff08:	3185883a 	add	r2,r6,r6
  80ff0c:	1185883a 	add	r2,r2,r6
  80ff10:	1004917a 	slli	r2,r2,5
  80ff14:	002f883a 	mov	r23,zero
  80ff18:	180d883a 	mov	r6,r3
  80ff1c:	1105883a 	add	r2,r2,r4
  80ff20:	1085883a 	add	r2,r2,r2
  80ff24:	1085883a 	add	r2,r2,r2
  80ff28:	10800c04 	addi	r2,r2,48
  80ff2c:	b085883a 	add	r2,r22,r2
  80ff30:	d8c05e15 	stw	r3,376(sp)
  80ff34:	d8805d15 	stw	r2,372(sp)
  80ff38:	d8805c15 	stw	r2,368(sp)
  80ff3c:	00007506 	br	810114 <mad_layer_II+0x530>
	if ((index = allocation[ch][sb])) {
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);
  80ff40:	d8805917 	ldw	r2,356(sp)
  80ff44:	da006017 	ldw	r8,384(sp)
  80ff48:	010020f4 	movhi	r4,131
  80ff4c:	21148804 	addi	r4,r4,21024
  80ff50:	4087883a 	add	r3,r8,r2
  80ff54:	18800003 	ldbu	r2,0(r3)
  80ff58:	1085883a 	add	r2,r2,r2
  80ff5c:	1085883a 	add	r2,r2,r2
  80ff60:	1105883a 	add	r2,r2,r4
  80ff64:	10c0008b 	ldhu	r3,2(r2)
  80ff68:	008020f4 	movhi	r2,131
  80ff6c:	10949004 	addi	r2,r2,21056
  80ff70:	d9006317 	ldw	r4,396(sp)
  80ff74:	18c003e4 	muli	r3,r3,15
  80ff78:	24000704 	addi	r16,r4,28
  80ff7c:	1887883a 	add	r3,r3,r2
  80ff80:	1947883a 	add	r3,r3,r5
  80ff84:	18bfffc3 	ldbu	r2,-1(r3)
  80ff88:	00c020f4 	movhi	r3,131
  80ff8c:	18d4a704 	addi	r3,r3,21148
  80ff90:	10800324 	muli	r2,r2,12
  80ff94:	10eb883a 	add	r21,r2,r3
		struct quantclass const *quantclass,
		mad_fixed_t output[3])
{
  unsigned int nb, s, sample[3];

  if ((nb = quantclass->group)) {
  80ff98:	a8c00083 	ldbu	r3,2(r21)
  80ff9c:	18006f1e 	bne	r3,zero,81015c <mad_layer_II+0x578>
      sample[s] = c % nlevels;
      c /= nlevels;
    }
  }
  else {
    nb = quantclass->bits;
  80ffa0:	ac8000c3 	ldbu	r18,3(r21)

    for (s = 0; s < 3; ++s)
      sample[s] = mad_bit_read(ptr, nb);
  80ffa4:	8009883a 	mov	r4,r16
  80ffa8:	900b883a 	mov	r5,r18
  80ffac:	080e3300 	call	80e330 <mad_bit_read>
  80ffb0:	8009883a 	mov	r4,r16
  80ffb4:	900b883a 	mov	r5,r18
  80ffb8:	d8800515 	stw	r2,20(sp)
  80ffbc:	080e3300 	call	80e330 <mad_bit_read>
  80ffc0:	8009883a 	mov	r4,r16
  80ffc4:	900b883a 	mov	r5,r18
  80ffc8:	d8800615 	stw	r2,24(sp)
  80ffcc:	080e3300 	call	80e330 <mad_bit_read>
  80ffd0:	d8800715 	stw	r2,28(sp)
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  80ffd4:	d9805917 	ldw	r6,356(sp)
  80ffd8:	da005917 	ldw	r8,356(sp)
  }
  else {
    nb = quantclass->bits;

    for (s = 0; s < 3; ++s)
      sample[s] = mad_bit_read(ptr, nb);
  80ffdc:	90ffffc4 	addi	r3,r18,-1
  80ffe0:	01400044 	movi	r5,1
  80ffe4:	28ca983a 	sll	r5,r5,r3
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  80ffe8:	3187883a 	add	r3,r6,r6
  80ffec:	1a07883a 	add	r3,r3,r8
  80fff0:	da006117 	ldw	r8,388(sp)
  80fff4:	b8801824 	muli	r2,r23,96
  for (s = 0; s < 3; ++s) {
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
  80fff8:	d9800517 	ldw	r6,20(sp)
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  80fffc:	400ed0ba 	srli	r7,r8,2
  810000:	10c5883a 	add	r2,r2,r3
  for (s = 0; s < 3; ++s) {
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
  810004:	298cf03a 	xor	r6,r5,r6
    requantized |= -(requantized & (1 << (nb - 1)));
  810008:	3148703a 	and	r4,r6,r5
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  81000c:	16c5883a 	add	r2,r2,sp
  810010:	11c5883a 	add	r2,r2,r7
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
    requantized |= -(requantized & (1 << (nb - 1)));
  810014:	0109c83a 	sub	r4,zero,r4
  810018:	310cb03a 	or	r6,r6,r4
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  81001c:	11002803 	ldbu	r4,160(r2)
  for (s = 0; s < 3; ++s) {
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
  810020:	d8800717 	ldw	r2,28(sp)
  }
  else {
    nb = quantclass->bits;

    for (s = 0; s < 3; ++s)
      sample[s] = mad_bit_read(ptr, nb);
  810024:	02000744 	movi	r8,29
  for (s = 0; s < 3; ++s) {
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
  810028:	d8c00617 	ldw	r3,24(sp)
  }
  else {
    nb = quantclass->bits;

    for (s = 0; s < 3; ++s)
      sample[s] = mad_bit_read(ptr, nb);
  81002c:	4491c83a 	sub	r8,r8,r18
  for (s = 0; s < 3; ++s) {
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
  810030:	2884f03a 	xor	r2,r5,r2

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  810034:	aa800217 	ldw	r10,8(r21)
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
    requantized |= -(requantized & (1 << (nb - 1)));
  810038:	114e703a 	and	r7,r2,r5

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  81003c:	320c983a 	sll	r6,r6,r8
  for (s = 0; s < 3; ++s) {
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
  810040:	28c6f03a 	xor	r3,r5,r3
    requantized |= -(requantized & (1 << (nb - 1)));
  810044:	01cfc83a 	sub	r7,zero,r7
  810048:	194a703a 	and	r5,r3,r5
  81004c:	11c4b03a 	or	r2,r2,r7
  810050:	014bc83a 	sub	r5,zero,r5

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  810054:	1204983a 	sll	r2,r2,r8
  810058:	328d883a 	add	r6,r6,r10
  81005c:	aa40018f 	ldh	r9,6(r21)
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
    requantized |= -(requantized & (1 << (nb - 1)));
  810060:	1946b03a 	or	r3,r3,r5

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  810064:	300dd33a 	srai	r6,r6,12
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  810068:	2109883a 	add	r4,r4,r4

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  81006c:	1a06983a 	sll	r3,r3,r8
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  810070:	2109883a 	add	r4,r4,r4
  810074:	02c020f4 	movhi	r11,131
  810078:	5ad4da04 	addi	r11,r11,21352
  81007c:	22c9883a 	add	r4,r4,r11

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  810080:	1285883a 	add	r2,r2,r10
  810084:	324d383a 	mul	r6,r6,r9
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  810088:	21400017 	ldw	r5,0(r4)

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  81008c:	1005d33a 	srai	r2,r2,12
  810090:	1a87883a 	add	r3,r3,r10
  810094:	1807d33a 	srai	r3,r3,12
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  810098:	280bd43a 	srai	r5,r5,16

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  81009c:	1245383a 	mul	r2,r2,r9
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  8100a0:	3009d33a 	srai	r4,r6,12

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  8100a4:	1a47383a 	mul	r3,r3,r9
  8100a8:	d8800415 	stw	r2,16(sp)
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  8100ac:	2149383a 	mul	r4,r4,r5
  8100b0:	d8805d17 	ldw	r2,372(sp)

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  8100b4:	d8c00315 	stw	r3,12(sp)
  8100b8:	d9800215 	stw	r6,8(sp)
	  index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	  II_samples(&stream->ptr, &qc_table[index], samples);

	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  8100bc:	11000015 	stw	r4,0(r2)
  8100c0:	d8800317 	ldw	r2,12(sp)
  8100c4:	d8c05d17 	ldw	r3,372(sp)
  8100c8:	d9005d17 	ldw	r4,372(sp)
  8100cc:	1005d33a 	srai	r2,r2,12
  8100d0:	2011883a 	mov	r8,r4
  8100d4:	1145383a 	mul	r2,r2,r5
  8100d8:	18802015 	stw	r2,128(r3)
  8100dc:	d8c00417 	ldw	r3,16(sp)
  8100e0:	d8805c17 	ldw	r2,368(sp)
  8100e4:	1807d33a 	srai	r3,r3,12
  8100e8:	1947383a 	mul	r3,r3,r5
  8100ec:	20c04015 	stw	r3,256(r4)

  /* decode samples */

  for (gr = 0; gr < 12; ++gr) {
    for (sb = 0; sb < bound; ++sb) {
      for (ch = 0; ch < nch; ++ch) {
  8100f0:	d9805e17 	ldw	r6,376(sp)
  8100f4:	42048004 	addi	r8,r8,4608
  8100f8:	10848004 	addi	r2,r2,4608
  8100fc:	31800804 	addi	r6,r6,32
  810100:	bdc00044 	addi	r23,r23,1
  810104:	d9805e15 	stw	r6,376(sp)
  810108:	da005d15 	stw	r8,372(sp)
  81010c:	d8805c15 	stw	r2,368(sp)
  810110:	a5c02c26 	beq	r20,r23,8101c4 <mad_layer_II+0x5e0>
	if ((index = allocation[ch][sb])) {
  810114:	31400003 	ldbu	r5,0(r6)
  810118:	283f891e 	bne	r5,zero,80ff40 <mad_layer_II+0x35c>
	      mad_f_mul(samples[s], sf_table[scalefactor[ch][sb][gr / 4]]);
	  }
	}
	else {
	  for (s = 0; s < 3; ++s)
	    frame->sbsample[ch][3 * gr + s][sb] = 0;
  81011c:	d9405c17 	ldw	r5,368(sp)
  810120:	da005d17 	ldw	r8,372(sp)
  810124:	2805883a 	mov	r2,r5
  810128:	28000015 	stw	zero,0(r5)
  81012c:	28002015 	stw	zero,128(r5)
  810130:	28004015 	stw	zero,256(r5)
  810134:	003fee06 	br	8100f0 <mad_layer_II+0x50c>
	  scalefactor[ch][sb][1] =
	  scalefactor[ch][sb][0];
	  break;

	case 0:
	  scalefactor[ch][sb][1] = mad_bit_read(&stream->ptr, 6);
  810138:	b809883a 	mov	r4,r23
  81013c:	01400184 	movi	r5,6
  810140:	080e3300 	call	80e330 <mad_bit_read>
  810144:	80800005 	stb	r2,0(r16)
	  /* fall through */

	case 1:
	case 3:
	  scalefactor[ch][sb][2] = mad_bit_read(&stream->ptr, 6);
  810148:	b809883a 	mov	r4,r23
  81014c:	01400184 	movi	r5,6
  810150:	080e3300 	call	80e330 <mad_bit_read>
  810154:	80800045 	stb	r2,1(r16)
  810158:	003f4b06 	br	80fe88 <mad_layer_II+0x2a4>

  if ((nb = quantclass->group)) {
    unsigned int c, nlevels;

    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
  81015c:	a94000c3 	ldbu	r5,3(r21)
  810160:	8009883a 	mov	r4,r16
		struct quantclass const *quantclass,
		mad_fixed_t output[3])
{
  unsigned int nb, s, sample[3];

  if ((nb = quantclass->group)) {
  810164:	1825883a 	mov	r18,r3
    unsigned int c, nlevels;

    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
  810168:	080e3300 	call	80e330 <mad_bit_read>
    nlevels = quantclass->nlevels;
  81016c:	acc0000b 	ldhu	r19,0(r21)

  if ((nb = quantclass->group)) {
    unsigned int c, nlevels;

    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
  810170:	1023883a 	mov	r17,r2
    nlevels = quantclass->nlevels;

    for (s = 0; s < 3; ++s) {
      sample[s] = c % nlevels;
  810174:	1009883a 	mov	r4,r2
  810178:	980b883a 	mov	r5,r19
  81017c:	0820c100 	call	820c10 <__umodsi3>
      c /= nlevels;
  810180:	8809883a 	mov	r4,r17
  810184:	980b883a 	mov	r5,r19
    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
    nlevels = quantclass->nlevels;

    for (s = 0; s < 3; ++s) {
      sample[s] = c % nlevels;
  810188:	d8800515 	stw	r2,20(sp)
      c /= nlevels;
  81018c:	0820c080 	call	820c08 <__udivsi3>
  810190:	1023883a 	mov	r17,r2
    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
    nlevels = quantclass->nlevels;

    for (s = 0; s < 3; ++s) {
      sample[s] = c % nlevels;
  810194:	1009883a 	mov	r4,r2
  810198:	980b883a 	mov	r5,r19
  81019c:	0820c100 	call	820c10 <__umodsi3>
  8101a0:	8809883a 	mov	r4,r17
  8101a4:	980b883a 	mov	r5,r19
  8101a8:	d8800615 	stw	r2,24(sp)
  8101ac:	0820c080 	call	820c08 <__udivsi3>
  8101b0:	1009883a 	mov	r4,r2
  8101b4:	980b883a 	mov	r5,r19
  8101b8:	0820c100 	call	820c10 <__umodsi3>
  8101bc:	d8800715 	stw	r2,28(sp)
  8101c0:	003f8406 	br	80ffd4 <mad_layer_II+0x3f0>
  }

  /* decode samples */

  for (gr = 0; gr < 12; ++gr) {
    for (sb = 0; sb < bound; ++sb) {
  8101c4:	d8c05917 	ldw	r3,356(sp)
  8101c8:	d9406217 	ldw	r5,392(sp)
  8101cc:	18c00044 	addi	r3,r3,1
  8101d0:	1809883a 	mov	r4,r3
  8101d4:	d8c05915 	stw	r3,356(sp)
  8101d8:	217f4736 	bltu	r4,r5,80fef8 <mad_layer_II+0x314>
	    frame->sbsample[ch][3 * gr + s][sb] = 0;
	}
      }
    }

    for (sb = bound; sb < sblimit; ++sb) {
  8101dc:	2f002b2e 	bgeu	r5,fp,81028c <mad_layer_II+0x6a8>
  8101e0:	d8806117 	ldw	r2,388(sp)
  8101e4:	e149c83a 	sub	r4,fp,r5
  8101e8:	2825883a 	mov	r18,r5
  8101ec:	1087883a 	add	r3,r2,r2
  8101f0:	1887883a 	add	r3,r3,r2
  8101f4:	d8c05f15 	stw	r3,380(sp)
  8101f8:	d8c06017 	ldw	r3,384(sp)
  8101fc:	d8801804 	addi	r2,sp,96
  810200:	1145883a 	add	r2,r2,r5
  810204:	1947883a 	add	r3,r3,r5
  810208:	d8805b15 	stw	r2,364(sp)
  81020c:	d8c05a15 	stw	r3,360(sp)
  810210:	d9006415 	stw	r4,400(sp)
      if ((index = allocation[0][sb])) {
  810214:	d9805b17 	ldw	r6,364(sp)
  810218:	31400003 	ldbu	r5,0(r6)
  81021c:	28003e1e 	bne	r5,zero,810318 <mad_layer_II+0x734>
	      mad_f_mul(samples[s], sf_table[scalefactor[ch][sb][gr / 4]]);
	  }
	}
      }
      else {
	for (ch = 0; ch < nch; ++ch) {
  810220:	da006617 	ldw	r8,408(sp)
  810224:	40000e26 	beq	r8,zero,810260 <mad_layer_II+0x67c>
      if ((index = allocation[0][sb])) {
	index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	II_samples(&stream->ptr, &qc_table[index], samples);

	for (ch = 0; ch < nch; ++ch) {
  810228:	d9005f17 	ldw	r4,380(sp)
  81022c:	0007883a 	mov	r3,zero
  810230:	2004917a 	slli	r2,r4,5
  810234:	1485883a 	add	r2,r2,r18
  810238:	1085883a 	add	r2,r2,r2
  81023c:	1085883a 	add	r2,r2,r2
  810240:	10800c04 	addi	r2,r2,48
  810244:	b085883a 	add	r2,r22,r2
	      mad_f_mul(samples[s], sf_table[scalefactor[ch][sb][gr / 4]]);
	  }
	}
      }
      else {
	for (ch = 0; ch < nch; ++ch) {
  810248:	18c00044 	addi	r3,r3,1
	  for (s = 0; s < 3; ++s)
	    frame->sbsample[ch][3 * gr + s][sb] = 0;
  81024c:	10000015 	stw	zero,0(r2)
  810250:	10002015 	stw	zero,128(r2)
  810254:	10004015 	stw	zero,256(r2)
	      mad_f_mul(samples[s], sf_table[scalefactor[ch][sb][gr / 4]]);
	  }
	}
      }
      else {
	for (ch = 0; ch < nch; ++ch) {
  810258:	10848004 	addi	r2,r2,4608
  81025c:	a0fffa1e 	bne	r20,r3,810248 <mad_layer_II+0x664>
	    frame->sbsample[ch][3 * gr + s][sb] = 0;
	}
      }
    }

    for (sb = bound; sb < sblimit; ++sb) {
  810260:	d8c05b17 	ldw	r3,364(sp)
  810264:	d9005a17 	ldw	r4,360(sp)
  810268:	d9806217 	ldw	r6,392(sp)
  81026c:	da006417 	ldw	r8,400(sp)
  810270:	18c00044 	addi	r3,r3,1
  810274:	21000044 	addi	r4,r4,1
  810278:	94800044 	addi	r18,r18,1
  81027c:	3205883a 	add	r2,r6,r8
  810280:	d8c05b15 	stw	r3,364(sp)
  810284:	d9005a15 	stw	r4,360(sp)
  810288:	90bfe21e 	bne	r18,r2,810214 <mad_layer_II+0x630>
	    frame->sbsample[ch][3 * gr + s][sb] = 0;
	}
      }
    }

    for (ch = 0; ch < nch; ++ch) {
  81028c:	d9406617 	ldw	r5,408(sp)
  810290:	28001226 	beq	r5,zero,8102dc <mad_layer_II+0x6f8>
      for (s = 0; s < 3; ++s) {
	for (sb = sblimit; sb < 32; ++sb)
	  frame->sbsample[ch][3 * gr + s][sb] = 0;
  810294:	d9406117 	ldw	r5,388(sp)
  810298:	000d883a 	mov	r6,zero
  81029c:	2945883a 	add	r2,r5,r5
  8102a0:	114f883a 	add	r7,r2,r5
  8102a4:	e009883a 	mov	r4,fp
  8102a8:	000b883a 	mov	r5,zero
  8102ac:	30800924 	muli	r2,r6,36
      }
    }

    for (ch = 0; ch < nch; ++ch) {
      for (s = 0; s < 3; ++s) {
	for (sb = sblimit; sb < 32; ++sb)
  8102b0:	00c007c4 	movi	r3,31
	  frame->sbsample[ch][3 * gr + s][sb] = 0;
  8102b4:	1145883a 	add	r2,r2,r5
  8102b8:	11c5883a 	add	r2,r2,r7
  8102bc:	1004917a 	slli	r2,r2,5
      }
    }

    for (ch = 0; ch < nch; ++ch) {
      for (s = 0; s < 3; ++s) {
	for (sb = sblimit; sb < 32; ++sb)
  8102c0:	19000e2e 	bgeu	r3,r4,8102fc <mad_layer_II+0x718>
	}
      }
    }

    for (ch = 0; ch < nch; ++ch) {
      for (s = 0; s < 3; ++s) {
  8102c4:	29400044 	addi	r5,r5,1
  8102c8:	00800084 	movi	r2,2
  8102cc:	e009883a 	mov	r4,fp
  8102d0:	117ff62e 	bgeu	r2,r5,8102ac <mad_layer_II+0x6c8>
	    frame->sbsample[ch][3 * gr + s][sb] = 0;
	}
      }
    }

    for (ch = 0; ch < nch; ++ch) {
  8102d4:	31800044 	addi	r6,r6,1
  8102d8:	a1bff21e 	bne	r20,r6,8102a4 <mad_layer_II+0x6c0>
    }
  }

  /* decode samples */

  for (gr = 0; gr < 12; ++gr) {
  8102dc:	d9806117 	ldw	r6,388(sp)
  8102e0:	008002c4 	movi	r2,11
  8102e4:	31800044 	addi	r6,r6,1
  8102e8:	d9806115 	stw	r6,388(sp)
  8102ec:	11809a36 	bltu	r2,r6,810558 <mad_layer_II+0x974>
  8102f0:	d8005915 	stw	zero,356(sp)
  8102f4:	d9005917 	ldw	r4,356(sp)
  8102f8:	003efd06 	br	80fef0 <mad_layer_II+0x30c>
    }

    for (ch = 0; ch < nch; ++ch) {
      for (s = 0; s < 3; ++s) {
	for (sb = sblimit; sb < 32; ++sb)
	  frame->sbsample[ch][3 * gr + s][sb] = 0;
  8102fc:	1105883a 	add	r2,r2,r4
  810300:	1085883a 	add	r2,r2,r2
  810304:	1085883a 	add	r2,r2,r2
  810308:	1585883a 	add	r2,r2,r22
      }
    }

    for (ch = 0; ch < nch; ++ch) {
      for (s = 0; s < 3; ++s) {
	for (sb = sblimit; sb < 32; ++sb)
  81030c:	21000044 	addi	r4,r4,1
	  frame->sbsample[ch][3 * gr + s][sb] = 0;
  810310:	10000c15 	stw	zero,48(r2)
  810314:	003fe506 	br	8102ac <mad_layer_II+0x6c8>

    for (sb = bound; sb < sblimit; ++sb) {
      if ((index = allocation[0][sb])) {
	index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	II_samples(&stream->ptr, &qc_table[index], samples);
  810318:	d8c05a17 	ldw	r3,360(sp)
  81031c:	010020f4 	movhi	r4,131
  810320:	21148804 	addi	r4,r4,21024
  810324:	18800003 	ldbu	r2,0(r3)
  810328:	1085883a 	add	r2,r2,r2
  81032c:	1085883a 	add	r2,r2,r2
  810330:	1105883a 	add	r2,r2,r4
  810334:	10c0008b 	ldhu	r3,2(r2)
  810338:	008020f4 	movhi	r2,131
  81033c:	10949004 	addi	r2,r2,21056
  810340:	d9006317 	ldw	r4,396(sp)
  810344:	18c003e4 	muli	r3,r3,15
  810348:	24000704 	addi	r16,r4,28
  81034c:	1887883a 	add	r3,r3,r2
  810350:	1947883a 	add	r3,r3,r5
  810354:	18bfffc3 	ldbu	r2,-1(r3)
  810358:	00c020f4 	movhi	r3,131
  81035c:	18d4a704 	addi	r3,r3,21148
  810360:	10800324 	muli	r2,r2,12
  810364:	10ef883a 	add	r23,r2,r3
		struct quantclass const *quantclass,
		mad_fixed_t output[3])
{
  unsigned int nb, s, sample[3];

  if ((nb = quantclass->group)) {
  810368:	b8c00083 	ldbu	r3,2(r23)
  81036c:	18005c1e 	bne	r3,zero,8104e0 <mad_layer_II+0x8fc>
      sample[s] = c % nlevels;
      c /= nlevels;
    }
  }
  else {
    nb = quantclass->bits;
  810370:	bd4000c3 	ldbu	r21,3(r23)

    for (s = 0; s < 3; ++s)
      sample[s] = mad_bit_read(ptr, nb);
  810374:	8009883a 	mov	r4,r16
  810378:	a80b883a 	mov	r5,r21
  81037c:	080e3300 	call	80e330 <mad_bit_read>
  810380:	8009883a 	mov	r4,r16
  810384:	a80b883a 	mov	r5,r21
  810388:	d8800515 	stw	r2,20(sp)
  81038c:	080e3300 	call	80e330 <mad_bit_read>
  810390:	8009883a 	mov	r4,r16
  810394:	a80b883a 	mov	r5,r21
  810398:	d8800615 	stw	r2,24(sp)
  81039c:	080e3300 	call	80e330 <mad_bit_read>
  8103a0:	d8800715 	stw	r2,28(sp)
  8103a4:	1009883a 	mov	r4,r2
  8103a8:	a8ffffc4 	addi	r3,r21,-1
  8103ac:	00800044 	movi	r2,1
  8103b0:	10c4983a 	sll	r2,r2,r3
  for (s = 0; s < 3; ++s) {
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
  8103b4:	d9800517 	ldw	r6,20(sp)
  8103b8:	d9400617 	ldw	r5,24(sp)
  8103bc:	1108f03a 	xor	r4,r2,r4
  8103c0:	118cf03a 	xor	r6,r2,r6
  8103c4:	114af03a 	xor	r5,r2,r5
    requantized |= -(requantized & (1 << (nb - 1)));
  8103c8:	2090703a 	and	r8,r4,r2
  8103cc:	308e703a 	and	r7,r6,r2
  8103d0:	2884703a 	and	r2,r5,r2
  8103d4:	0085c83a 	sub	r2,zero,r2
  }
  else {
    nb = quantclass->bits;

    for (s = 0; s < 3; ++s)
      sample[s] = mad_bit_read(ptr, nb);
  8103d8:	00c00744 	movi	r3,29
  8103dc:	1d47c83a 	sub	r3,r3,r21
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
    requantized |= -(requantized & (1 << (nb - 1)));
  8103e0:	288ab03a 	or	r5,r5,r2

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  8103e4:	28ca983a 	sll	r5,r5,r3
  8103e8:	b8800217 	ldw	r2,8(r23)
    mad_fixed_t requantized;

    /* invert most significant bit, extend sign, then scale to fixed format */

    requantized  = sample[s] ^ (1 << (nb - 1));
    requantized |= -(requantized & (1 << (nb - 1)));
  8103ec:	01cfc83a 	sub	r7,zero,r7
  8103f0:	0211c83a 	sub	r8,zero,r8
  8103f4:	31ccb03a 	or	r6,r6,r7
  8103f8:	2208b03a 	or	r4,r4,r8

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  8103fc:	20c8983a 	sll	r4,r4,r3
  810400:	30cc983a 	sll	r6,r6,r3
  810404:	288b883a 	add	r5,r5,r2
  810408:	b8c0018f 	ldh	r3,6(r23)
  81040c:	280bd33a 	srai	r5,r5,12
  810410:	2089883a 	add	r4,r4,r2
  810414:	308d883a 	add	r6,r6,r2
  810418:	28cb383a 	mul	r5,r5,r3
  81041c:	300dd33a 	srai	r6,r6,12
  810420:	2009d33a 	srai	r4,r4,12
  810424:	d9400315 	stw	r5,12(sp)
  810428:	30cd383a 	mul	r6,r6,r3
  81042c:	20c9383a 	mul	r4,r4,r3
      if ((index = allocation[0][sb])) {
	index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	II_samples(&stream->ptr, &qc_table[index], samples);

	for (ch = 0; ch < nch; ++ch) {
  810430:	d9406617 	ldw	r5,408(sp)

    /* requantize the sample */

    /* s'' = C * (s''' + D) */

    output[s] = mad_f_mul(requantized + quantclass->D, quantclass->C);
  810434:	d9800215 	stw	r6,8(sp)
  810438:	d9000415 	stw	r4,16(sp)
      if ((index = allocation[0][sb])) {
	index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	II_samples(&stream->ptr, &qc_table[index], samples);

	for (ch = 0; ch < nch; ++ch) {
  81043c:	283f8826 	beq	r5,zero,810260 <mad_layer_II+0x67c>
    }
  }

  /* decode samples */

  for (gr = 0; gr < 12; ++gr) {
  810440:	da005f17 	ldw	r8,380(sp)
  810444:	d8c06117 	ldw	r3,388(sp)
  810448:	02c020f4 	movhi	r11,131
  81044c:	5ad4da04 	addi	r11,r11,21352
  810450:	4004917a 	slli	r2,r8,5
  810454:	1808d0ba 	srli	r4,r3,2
  810458:	9487883a 	add	r3,r18,r18
  81045c:	1485883a 	add	r2,r2,r18
  810460:	1085883a 	add	r2,r2,r2
  810464:	1c87883a 	add	r3,r3,r18
  810468:	1085883a 	add	r2,r2,r2
  81046c:	20c9883a 	add	r4,r4,r3
  810470:	10800c04 	addi	r2,r2,48
  810474:	d8c02804 	addi	r3,sp,160
  810478:	190f883a 	add	r7,r3,r4
  81047c:	b08d883a 	add	r6,r22,r2
  810480:	0011883a 	mov	r8,zero

	II_samples(&stream->ptr, &qc_table[index], samples);

	for (ch = 0; ch < nch; ++ch) {
	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  810484:	38800003 	ldbu	r2,0(r7)
  810488:	d8c00317 	ldw	r3,12(sp)
  81048c:	d9000217 	ldw	r4,8(sp)
  810490:	1085883a 	add	r2,r2,r2
  810494:	1085883a 	add	r2,r2,r2
  810498:	12c5883a 	add	r2,r2,r11
  81049c:	11400017 	ldw	r5,0(r2)
  8104a0:	1807d33a 	srai	r3,r3,12
  8104a4:	2009d33a 	srai	r4,r4,12
  8104a8:	280bd43a 	srai	r5,r5,16
      if ((index = allocation[0][sb])) {
	index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	II_samples(&stream->ptr, &qc_table[index], samples);

	for (ch = 0; ch < nch; ++ch) {
  8104ac:	42000044 	addi	r8,r8,1
  8104b0:	39c01804 	addi	r7,r7,96
	  for (s = 0; s < 3; ++s) {
	    frame->sbsample[ch][3 * gr + s][sb] =
  8104b4:	1947383a 	mul	r3,r3,r5
  8104b8:	2149383a 	mul	r4,r4,r5
  8104bc:	30c02015 	stw	r3,128(r6)
  8104c0:	d8800417 	ldw	r2,16(sp)
  8104c4:	31000015 	stw	r4,0(r6)
  8104c8:	1005d33a 	srai	r2,r2,12
  8104cc:	1145383a 	mul	r2,r2,r5
  8104d0:	30804015 	stw	r2,256(r6)
      if ((index = allocation[0][sb])) {
	index = offset_table[bitalloc_table[offsets[sb]].offset][index - 1];

	II_samples(&stream->ptr, &qc_table[index], samples);

	for (ch = 0; ch < nch; ++ch) {
  8104d4:	31848004 	addi	r6,r6,4608
  8104d8:	a23fea1e 	bne	r20,r8,810484 <mad_layer_II+0x8a0>
  8104dc:	003f6006 	br	810260 <mad_layer_II+0x67c>

  if ((nb = quantclass->group)) {
    unsigned int c, nlevels;

    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
  8104e0:	b94000c3 	ldbu	r5,3(r23)
  8104e4:	8009883a 	mov	r4,r16
		struct quantclass const *quantclass,
		mad_fixed_t output[3])
{
  unsigned int nb, s, sample[3];

  if ((nb = quantclass->group)) {
  8104e8:	182b883a 	mov	r21,r3
    unsigned int c, nlevels;

    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
  8104ec:	080e3300 	call	80e330 <mad_bit_read>
    nlevels = quantclass->nlevels;
  8104f0:	bcc0000b 	ldhu	r19,0(r23)

  if ((nb = quantclass->group)) {
    unsigned int c, nlevels;

    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
  8104f4:	1023883a 	mov	r17,r2
    nlevels = quantclass->nlevels;

    for (s = 0; s < 3; ++s) {
      sample[s] = c % nlevels;
  8104f8:	1009883a 	mov	r4,r2
  8104fc:	980b883a 	mov	r5,r19
  810500:	0820c100 	call	820c10 <__umodsi3>
      c /= nlevels;
  810504:	8809883a 	mov	r4,r17
  810508:	980b883a 	mov	r5,r19
    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
    nlevels = quantclass->nlevels;

    for (s = 0; s < 3; ++s) {
      sample[s] = c % nlevels;
  81050c:	d8800515 	stw	r2,20(sp)
      c /= nlevels;
  810510:	0820c080 	call	820c08 <__udivsi3>
  810514:	1023883a 	mov	r17,r2
    /* degrouping */
    c = mad_bit_read(ptr, quantclass->bits);
    nlevels = quantclass->nlevels;

    for (s = 0; s < 3; ++s) {
      sample[s] = c % nlevels;
  810518:	1009883a 	mov	r4,r2
  81051c:	980b883a 	mov	r5,r19
  810520:	0820c100 	call	820c10 <__umodsi3>
  810524:	8809883a 	mov	r4,r17
  810528:	980b883a 	mov	r5,r19
  81052c:	d8800615 	stw	r2,24(sp)
  810530:	0820c080 	call	820c08 <__udivsi3>
  810534:	1009883a 	mov	r4,r2
  810538:	980b883a 	mov	r5,r19
  81053c:	0820c100 	call	820c10 <__umodsi3>
  810540:	1009883a 	mov	r4,r2
  810544:	d8800715 	stw	r2,28(sp)
  810548:	003f9706 	br	8103a8 <mad_layer_II+0x7c4>
      if (allocation[ch][sb]) {
	scalefactor[ch][sb][0] = mad_bit_read(&stream->ptr, 6);

	switch (scfsi[ch][sb]) {
	case 2:
	  scalefactor[ch][sb][2] =
  81054c:	80c00045 	stb	r3,1(r16)
  810550:	80c00005 	stb	r3,0(r16)
  810554:	003e4c06 	br	80fe88 <mad_layer_II+0x2a4>
    }
  }

  /* decode samples */

  for (gr = 0; gr < 12; ++gr) {
  810558:	0007883a 	mov	r3,zero
      }
    }
  }

  return 0;
}
  81055c:	1805883a 	mov	r2,r3
  810560:	dfc07117 	ldw	ra,452(sp)
  810564:	df007017 	ldw	fp,448(sp)
  810568:	ddc06f17 	ldw	r23,444(sp)
  81056c:	dd806e17 	ldw	r22,440(sp)
  810570:	dd406d17 	ldw	r21,436(sp)
  810574:	dd006c17 	ldw	r20,432(sp)
  810578:	dcc06b17 	ldw	r19,428(sp)
  81057c:	dc806a17 	ldw	r18,424(sp)
  810580:	dc406917 	ldw	r17,420(sp)
  810584:	dc006817 	ldw	r16,416(sp)
  810588:	dec07204 	addi	sp,sp,456
  81058c:	f800283a 	ret

  nch = MAD_NCHANNELS(header);

  if (header->flags & MAD_FLAG_LSF_EXT)
    index = 4;
  else if (header->flags & MAD_FLAG_FREEFORMAT)
  810590:	2881000c 	andi	r2,r5,1024
  810594:	10000d1e 	bne	r2,zero,8105cc <mad_layer_II+0x9e8>
    goto freeformat;
  else {
    unsigned long bitrate_per_channel;

    bitrate_per_channel = header->bitrate;
    if (nch == 2) {
  810598:	00800084 	movi	r2,2
  else if (header->flags & MAD_FLAG_FREEFORMAT)
    goto freeformat;
  else {
    unsigned long bitrate_per_channel;

    bitrate_per_channel = header->bitrate;
  81059c:	b0c00417 	ldw	r3,16(r22)
    if (nch == 2) {
  8105a0:	a0803426 	beq	r20,r2,810674 <mad_layer_II+0xa90>
	return -1;
      }
# endif
    }
    else {  /* nch == 1 */
      if (bitrate_per_channel > 192000) {
  8105a4:	008000f4 	movhi	r2,3
  8105a8:	10bb8004 	addi	r2,r2,-4608
  8105ac:	10c02c36 	bltu	r2,r3,810660 <mad_layer_II+0xa7c>
	stream->error = MAD_ERROR_BADMODE;
	return -1;
      }
    }

    if (bitrate_per_channel <= 48000)
  8105b0:	00aee014 	movui	r2,48000
  8105b4:	10c02536 	bltu	r2,r3,81064c <mad_layer_II+0xa68>
      index = (header->samplerate == 32000) ? 3 : 2;
  8105b8:	b0800517 	ldw	r2,20(r22)
  8105bc:	00c000c4 	movi	r3,3
  8105c0:	109f4018 	cmpnei	r2,r2,32000
  8105c4:	1885c83a 	sub	r2,r3,r2
  8105c8:	003d9a06 	br	80fc34 <mad_layer_II+0x50>
    else if (bitrate_per_channel <= 80000)
      index = 0;
    else {
    freeformat:
      index = (header->samplerate == 48000) ? 0 : 1;
  8105cc:	b0c00517 	ldw	r3,20(r22)
  8105d0:	00aee014 	movui	r2,48000
  8105d4:	1884c03a 	cmpne	r2,r3,r2
  8105d8:	003d9606 	br	80fc34 <mad_layer_II+0x50>
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
    header->crc_check =
  8105dc:	da006317 	ldw	r8,396(sp)
  8105e0:	d809883a 	mov	r4,sp
  8105e4:	41400704 	addi	r5,r8,28
  8105e8:	080e2900 	call	80e290 <mad_bit_length>
  8105ec:	d9000017 	ldw	r4,0(sp)
  8105f0:	d9400117 	ldw	r5,4(sp)
  8105f4:	b1c0060b 	ldhu	r7,24(r22)
  8105f8:	100d883a 	mov	r6,r2
  8105fc:	080e40c0 	call	80e40c <mad_bit_crc>
      mad_bit_crc(start, mad_bit_length(&start, &stream->ptr),
		  header->crc_check);

    if (header->crc_check != header->crc_target &&
  810600:	b100068b 	ldhu	r4,26(r22)
  810604:	10ffffcc 	andi	r3,r2,65535
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
    header->crc_check =
  810608:	b080060d 	sth	r2,24(r22)
      mad_bit_crc(start, mad_bit_length(&start, &stream->ptr),
		  header->crc_check);

    if (header->crc_check != header->crc_target &&
  81060c:	193df426 	beq	r3,r4,80fde0 <mad_layer_II+0x1fc>
  810610:	b0800b17 	ldw	r2,44(r22)
  810614:	1080004c 	andi	r2,r2,1
  810618:	103df11e 	bne	r2,zero,80fde0 <mad_layer_II+0x1fc>
	!(frame->options & MAD_OPTION_IGNORECRC)) {
      stream->error = MAD_ERROR_BADCRC;
  81061c:	d9006317 	ldw	r4,396(sp)
  810620:	00808044 	movi	r2,513
  810624:	00ffffc4 	movi	r3,-1
  810628:	20800f15 	stw	r2,60(r4)
  81062c:	003fcb06 	br	81055c <mad_layer_II+0x978>
  offsets = sbquant_table[index].offsets;

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
    header->flags |= MAD_FLAG_I_STEREO;
    bound = 4 + header->mode_extension * 4;
  810630:	b0800217 	ldw	r2,8(r22)
  sblimit = sbquant_table[index].sblimit;
  offsets = sbquant_table[index].offsets;

  bound = 32;
  if (header->mode == MAD_MODE_JOINT_STEREO) {
    header->flags |= MAD_FLAG_I_STEREO;
  810634:	28c04014 	ori	r3,r5,256
  810638:	b0c00715 	stw	r3,28(r22)
    bound = 4 + header->mode_extension * 4;
  81063c:	1085883a 	add	r2,r2,r2
  810640:	1085883a 	add	r2,r2,r2
  810644:	10800104 	addi	r2,r2,4
  810648:	003d8506 	br	80fc60 <mad_layer_II+0x7c>
      }
    }

    if (bitrate_per_channel <= 48000)
      index = (header->samplerate == 32000) ? 3 : 2;
    else if (bitrate_per_channel <= 80000)
  81064c:	00800074 	movhi	r2,1
  810650:	108e2004 	addi	r2,r2,14464
  810654:	10ffdd36 	bltu	r2,r3,8105cc <mad_layer_II+0x9e8>
  810658:	0005883a 	mov	r2,zero
  81065c:	003d7506 	br	80fc34 <mad_layer_II+0x50>
      if (bitrate_per_channel > 192000) {
	/*
	 * ISO/IEC 11172-3 does not allow single channel mode for 224, 256,
	 * 320, or 384 kbps bitrates in Layer II.
	 */
	stream->error = MAD_ERROR_BADMODE;
  810660:	d9006317 	ldw	r4,396(sp)
  810664:	00808884 	movi	r2,546
  810668:	00ffffc4 	movi	r3,-1
  81066c:	20800f15 	stw	r2,60(r4)
  810670:	003fba06 	br	81055c <mad_layer_II+0x978>
  else {
    unsigned long bitrate_per_channel;

    bitrate_per_channel = header->bitrate;
    if (nch == 2) {
      bitrate_per_channel /= 2;
  810674:	1806d07a 	srli	r3,r3,1
  810678:	003fcd06 	br	8105b0 <mad_layer_II+0x9cc>

0081067c <III_imdct_s>:
 * NAME:	III_imdct_s()
 * DESCRIPTION:	perform IMDCT and windowing for short blocks
 */
static
void III_imdct_s(mad_fixed_t const X[18], mad_fixed_t z[36])
{
  81067c:	deffa704 	addi	sp,sp,-356
  810680:	d8801804 	addi	r2,sp,96
  810684:	df005815 	stw	fp,352(sp)
  810688:	ddc05715 	stw	r23,348(sp)
  81068c:	dd805615 	stw	r22,344(sp)
  810690:	dd405515 	stw	r21,340(sp)
  810694:	dd005415 	stw	r20,336(sp)
  810698:	dcc05315 	stw	r19,332(sp)
  81069c:	dc805215 	stw	r18,328(sp)
  8106a0:	dc405115 	stw	r17,324(sp)
  8106a4:	dc005015 	stw	r16,320(sp)
  8106a8:	d9002615 	stw	r4,152(sp)
  8106ac:	d9402715 	stw	r5,156(sp)
  8106b0:	dec02515 	stw	sp,148(sp)
  8106b4:	07002134 	movhi	fp,132
  8106b8:	e7359e04 	addi	fp,fp,-10632
  8106bc:	d8804f15 	stw	r2,316(sp)
  8106c0:	200d883a 	mov	r6,r4

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8106c4:	32000117 	ldw	r8,4(r6)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8106c8:	32400317 	ldw	r9,12(r6)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8106cc:	30800417 	ldw	r2,16(r6)
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8106d0:	30c00517 	ldw	r3,20(r6)

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8106d4:	4019d33a 	srai	r12,r8,12
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8106d8:	481bd33a 	srai	r13,r9,12

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8106dc:	e3800d8f 	ldh	r14,54(fp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8106e0:	e3c00f8f 	ldh	r15,62(fp)

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8106e4:	e480098f 	ldh	r18,38(fp)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8106e8:	e4c0108f 	ldh	r19,66(fp)
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8106ec:	e5400a8f 	ldh	r21,42(fp)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8106f0:	1005d33a 	srai	r2,r2,12
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8106f4:	1807d33a 	srai	r3,r3,12
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  8106f8:	31000017 	ldw	r4,0(r6)
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8106fc:	32800217 	ldw	r10,8(r6)

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810700:	e1800b8f 	ldh	r6,46(fp)

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810704:	db003015 	stw	r12,192(sp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810708:	db403115 	stw	r13,196(sp)

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  81070c:	db803915 	stw	r14,228(sp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810710:	dbc03a15 	stw	r15,232(sp)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810714:	d8803215 	stw	r2,200(sp)
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810718:	d8c03315 	stw	r3,204(sp)

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81071c:	dc803515 	stw	r18,212(sp)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810720:	dcc03b15 	stw	r19,236(sp)
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810724:	dd403715 	stw	r21,220(sp)

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810728:	e400018f 	ldh	r16,6(fp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81072c:	e440038f 	ldh	r17,14(fp)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810730:	e380048f 	ldh	r14,18(fp)
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810734:	e340058f 	ldh	r13,22(fp)
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810738:	e1c00017 	ldw	r7,0(fp)
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81073c:	e240028f 	ldh	r9,10(fp)
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810740:	e2000c8f 	ldh	r8,50(fp)
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810744:	e1400e8f 	ldh	r5,58(fp)
      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810748:	e0c0068f 	ldh	r3,26(fp)
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  81074c:	e300078f 	ldh	r12,30(fp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810750:	e080088f 	ldh	r2,34(fp)
    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810754:	e500118f 	ldh	r20,70(fp)

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810758:	d9803815 	stw	r6,224(sp)

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81075c:	e480158f 	ldh	r18,86(fp)

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810760:	dcc03017 	ldw	r19,192(sp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810764:	dd403117 	ldw	r21,196(sp)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810768:	e3c0138f 	ldh	r15,78(fp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81076c:	dc803f15 	stw	r18,252(sp)

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810770:	dc803917 	ldw	r18,228(sp)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810774:	dbc03d15 	stw	r15,244(sp)

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810778:	9c1f383a 	mul	r15,r19,r16
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81077c:	ac61383a 	mul	r16,r21,r17

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810780:	9ca3383a 	mul	r17,r19,r18
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810784:	dcc03a17 	ldw	r19,232(sp)
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810788:	2009d33a 	srai	r4,r4,12
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81078c:	5015d33a 	srai	r10,r10,12
  810790:	ace5383a 	mul	r18,r21,r19
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810794:	e540168f 	ldh	r21,90(fp)
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810798:	e4c0178f 	ldh	r19,94(fp)
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  81079c:	380fd43a 	srai	r7,r7,16
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8107a0:	dd404115 	stw	r21,260(sp)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8107a4:	dd403217 	ldw	r21,200(sp)

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8107a8:	dcc04315 	stw	r19,268(sp)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8107ac:	dcc03017 	ldw	r19,192(sp)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8107b0:	abaf383a 	mul	r23,r21,r14
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8107b4:	db803317 	ldw	r14,204(sp)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8107b8:	9b19383a 	mul	r12,r19,r12
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8107bc:	dd403117 	ldw	r21,196(sp)
    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8107c0:	736d383a 	mul	r22,r14,r13

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8107c4:	db803b17 	ldw	r14,236(sp)
  8107c8:	db403217 	ldw	r13,200(sp)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8107cc:	db003415 	stw	r12,208(sp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8107d0:	db003517 	ldw	r12,212(sp)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8107d4:	6b9b383a 	mul	r13,r13,r14
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8107d8:	dcc03317 	ldw	r19,204(sp)

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8107dc:	ab2b383a 	mul	r21,r21,r12

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8107e0:	db403c15 	stw	r13,240(sp)
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8107e4:	db003217 	ldw	r12,200(sp)
  8107e8:	db403717 	ldw	r13,220(sp)

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8107ec:	dd403615 	stw	r21,216(sp)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8107f0:	db803817 	ldw	r14,224(sp)
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8107f4:	636b383a 	mul	r21,r12,r13
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8107f8:	db403d17 	ldw	r13,244(sp)
  8107fc:	db003017 	ldw	r12,192(sp)
    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810800:	9d29383a 	mul	r20,r19,r20

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810804:	9ba7383a 	mul	r19,r19,r14
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810808:	6359383a 	mul	r12,r12,r13
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81080c:	db803117 	ldw	r14,196(sp)
      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810810:	e2c0128f 	ldh	r11,74(fp)
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810814:	db003e15 	stw	r12,248(sp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810818:	db003f17 	ldw	r12,252(sp)
  81081c:	e180148f 	ldh	r6,82(fp)
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810820:	21cf383a 	mul	r7,r4,r7

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810824:	731d383a 	mul	r14,r14,r12
    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810828:	514b383a 	mul	r5,r10,r5

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  81082c:	3bcf883a 	add	r7,r7,r15

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810830:	db804015 	stw	r14,256(sp)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810834:	db804117 	ldw	r14,260(sp)
  810838:	db403217 	ldw	r13,200(sp)
    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81083c:	2c8b883a 	add	r5,r5,r18

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810840:	dbc03317 	ldw	r15,204(sp)
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810844:	6b9b383a 	mul	r13,r13,r14
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810848:	dc804317 	ldw	r18,268(sp)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  81084c:	db003417 	ldw	r12,208(sp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810850:	db404215 	stw	r13,264(sp)
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810854:	7c9f383a 	mul	r15,r15,r18

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810858:	db403617 	ldw	r13,216(sp)
      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  81085c:	20c7383a 	mul	r3,r4,r3
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810860:	5085383a 	mul	r2,r10,r2
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810864:	dbc04415 	stw	r15,272(sp)

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810868:	dc804017 	ldw	r18,256(sp)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  81086c:	dbc03e17 	ldw	r15,248(sp)
      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810870:	22d7383a 	mul	r11,r4,r11
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810874:	518d383a 	mul	r6,r10,r6
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810878:	1b07883a 	add	r3,r3,r12
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81087c:	1345883a 	add	r2,r2,r13
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810880:	14c5883a 	add	r2,r2,r19
    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810884:	5253383a 	mul	r9,r10,r9
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810888:	dcc04217 	ldw	r19,264(sp)
  81088c:	1d47883a 	add	r3,r3,r21
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810890:	dd404417 	ldw	r21,272(sp)
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810894:	2211383a 	mul	r8,r4,r8
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810898:	5bd7883a 	add	r11,r11,r15
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81089c:	348d883a 	add	r6,r6,r18

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8108a0:	db803c17 	ldw	r14,240(sp)

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8108a4:	354d883a 	add	r6,r6,r21
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8108a8:	5cd7883a 	add	r11,r11,r19
    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8108ac:	4c13883a 	add	r9,r9,r16
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
  8108b0:	5997883a 	add	r11,r11,r6
    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8108b4:	4d93883a 	add	r9,r9,r22
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];
  8108b8:	d9802517 	ldw	r6,148(sp)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8108bc:	3dcf883a 	add	r7,r7,r23
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
  8108c0:	3a4f883a 	add	r7,r7,r9

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8108c4:	4451883a 	add	r8,r8,r17
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
  8108c8:	1887883a 	add	r3,r3,r2
    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  8108cc:	2d0b883a 	add	r5,r5,r20
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];
  8108d0:	01c5c83a 	sub	r2,zero,r7

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  8108d4:	4391883a 	add	r8,r8,r14

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8108d8:	dc803017 	ldw	r18,192(sp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
  8108dc:	4151883a 	add	r8,r8,r5
      yptr[5 - i] = -yptr[i + 0];
  8108e0:	30800515 	stw	r2,20(r6)

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  8108e4:	e3001f8f 	ldh	r12,126(fp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8108e8:	e340208f 	ldh	r13,130(fp)
    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  8108ec:	e0801a8f 	ldh	r2,106(fp)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];
  8108f0:	020bc83a 	sub	r5,zero,r8
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
      yptr[11 - i] = yptr[i + 6];
  8108f4:	30c00b15 	stw	r3,44(r6)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];
  8108f8:	31400415 	stw	r5,16(r6)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
  8108fc:	30c00615 	stw	r3,24(r6)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
  810900:	32000115 	stw	r8,4(r6)
    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810904:	dcc03117 	ldw	r19,196(sp)
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810908:	e0c0188f 	ldh	r3,98(fp)
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  81090c:	e200198f 	ldh	r8,102(fp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810910:	e1401b8f 	ldh	r5,110(fp)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
  810914:	31c00015 	stw	r7,0(r6)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810918:	e2401e8f 	ldh	r9,122(fp)
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81091c:	e380218f 	ldh	r14,134(fp)
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810920:	932b383a 	mul	r21,r18,r12
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
  810924:	32c00715 	stw	r11,28(r6)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810928:	db003217 	ldw	r12,200(sp)
  81092c:	e1801c8f 	ldh	r6,114(fp)
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810930:	e1c01d8f 	ldh	r7,118(fp)

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810934:	e500238f 	ldh	r20,142(fp)
    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810938:	5085383a 	mul	r2,r10,r2

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81093c:	5355383a 	mul	r10,r10,r13
    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810940:	db403317 	ldw	r13,204(sp)
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810944:	e3c0228f 	ldh	r15,138(fp)
    register mad_fixed_t const (*s)[6];

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810948:	20c7383a 	mul	r3,r4,r3
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  81094c:	9211383a 	mul	r8,r18,r8
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810950:	994b383a 	mul	r5,r19,r5
      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
  810954:	2249383a 	mul	r4,r4,r9
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810958:	6d29383a 	mul	r20,r13,r20

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  81095c:	9b93383a 	mul	r9,r19,r14

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810960:	618d383a 	mul	r6,r12,r6
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810964:	69cf383a 	mul	r7,r13,r7
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810968:	63dd383a 	mul	r14,r12,r15

    s = imdct_s;

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  81096c:	1a07883a 	add	r3,r3,r8
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810970:	1145883a 	add	r2,r2,r5

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810974:	dd004c15 	stw	r20,304(sp)
    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810978:	11c5883a 	add	r2,r2,r7
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
      yptr[11 - i] = yptr[i + 6];
  81097c:	dbc02517 	ldw	r15,148(sp)

    for (i = 0; i < 3; ++i) {
      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810980:	1987883a 	add	r3,r3,r6
      yptr[5 - i] = -yptr[i + 0];

      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
  810984:	2549883a 	add	r4,r4,r21
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
  810988:	5255883a 	add	r10,r10,r9

  /* IMDCT */

  yptr = &y[0];

  for (w = 0; w < 3; ++w) {
  81098c:	dc804f17 	ldw	r18,316(sp)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
  810990:	1887883a 	add	r3,r3,r2
      ++s;

      MAD_F_ML0(hi, lo, X[0], (*s)[0]);
      MAD_F_MLA(hi, lo, X[1], (*s)[1]);
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
  810994:	2389883a 	add	r4,r4,r14
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
  810998:	5515883a 	add	r10,r10,r20
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
  81099c:	2289883a 	add	r4,r4,r10
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];
  8109a0:	00c5c83a 	sub	r2,zero,r3
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
      yptr[11 - i] = yptr[i + 6];
  8109a4:	7ac00a15 	stw	r11,40(r15)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
      yptr[5 - i] = -yptr[i + 0];
  8109a8:	78800315 	stw	r2,12(r15)
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
      yptr[11 - i] = yptr[i + 6];
  8109ac:	79000915 	stw	r4,36(r15)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[i + 0] = MAD_F_MLZ(hi, lo);
  8109b0:	78c00215 	stw	r3,8(r15)
      MAD_F_MLA(hi, lo, X[2], (*s)[2]);
      MAD_F_MLA(hi, lo, X[3], (*s)[3]);
      MAD_F_MLA(hi, lo, X[4], (*s)[4]);
      MAD_F_MLA(hi, lo, X[5], (*s)[5]);

      yptr[ i + 6] = MAD_F_MLZ(hi, lo);
  8109b4:	79000815 	stw	r4,32(r15)

  /* IMDCT */

  yptr = &y[0];

  for (w = 0; w < 3; ++w) {
  8109b8:	7c800726 	beq	r15,r18,8109d8 <III_imdct_s+0x35c>

      ++s;
    }

    yptr += 12;
    X    += 6;
  8109bc:	d9402617 	ldw	r5,152(sp)
      yptr[11 - i] = yptr[i + 6];

      ++s;
    }

    yptr += 12;
  8109c0:	79000c04 	addi	r4,r15,48
  8109c4:	d9002515 	stw	r4,148(sp)
    X    += 6;
  8109c8:	29400604 	addi	r5,r5,24
  8109cc:	280d883a 	mov	r6,r5
  8109d0:	d9402615 	stw	r5,152(sp)
  8109d4:	003f3b06 	br	8106c4 <III_imdct_s+0x48>
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  8109d8:	d9000c17 	ldw	r4,48(sp)

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  8109dc:	d9401817 	ldw	r5,96(sp)
    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  8109e0:	d8801217 	ldw	r2,72(sp)
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  8109e4:	da801e17 	ldw	r10,120(sp)
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  8109e8:	d9800017 	ldw	r6,0(sp)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  8109ec:	2007d33a 	srai	r3,r4,12

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  8109f0:	1005d33a 	srai	r2,r2,12
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  8109f4:	2809d33a 	srai	r4,r5,12

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  8109f8:	5013d33a 	srai	r9,r10,12

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  8109fc:	d9c00617 	ldw	r7,24(sp)
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810a00:	db000d17 	ldw	r12,52(sp)

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810a04:	d9401317 	ldw	r5,76(sp)
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810a08:	dac01917 	ldw	r11,100(sp)
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810a0c:	3011d33a 	srai	r8,r6,12
    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810a10:	254085a4 	muli	r21,r4,534

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810a14:	d9800717 	ldw	r6,28(sp)
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810a18:	1083f724 	muli	r2,r2,4060
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810a1c:	db400117 	ldw	r13,4(sp)
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810a20:	4a43f724 	muli	r9,r9,4060
  810a24:	db801f17 	ldw	r14,124(sp)

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810a28:	380fd33a 	srai	r7,r7,12
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810a2c:	dbc00e17 	ldw	r15,56(sp)

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810a30:	d9000817 	ldw	r4,32(sp)
    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810a34:	da801a17 	ldw	r10,104(sp)
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810a38:	1dc085a4 	muli	r23,r3,534

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810a3c:	1545883a 	add	r2,r2,r21
    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810a40:	d8c01417 	ldw	r3,80(sp)
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810a44:	dd402717 	ldw	r21,156(sp)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810a48:	6039d33a 	srai	fp,r12,12

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810a4c:	300dd33a 	srai	r6,r6,12
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810a50:	280bd33a 	srai	r5,r5,12
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810a54:	5817d33a 	srai	r11,r11,12

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810a58:	da402815 	stw	r9,160(sp)
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810a5c:	681bd33a 	srai	r13,r13,12
  810a60:	da400217 	ldw	r9,8(sp)
  810a64:	450085a4 	muli	r20,r8,534
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810a68:	da002017 	ldw	r8,128(sp)
  810a6c:	701dd33a 	srai	r14,r14,12

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810a70:	39c3f724 	muli	r7,r7,4060
    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810a74:	a8801215 	stw	r2,72(r21)
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810a78:	782dd33a 	srai	r22,r15,12
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810a7c:	d8802817 	ldw	r2,160(sp)
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810a80:	e70187e4 	muli	fp,fp,1567

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810a84:	5ac187e4 	muli	r11,r11,1567

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810a88:	2009d33a 	srai	r4,r4,12
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810a8c:	1807d33a 	srai	r3,r3,12
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810a90:	5015d33a 	srai	r10,r10,12

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810a94:	3183b224 	muli	r6,r6,3784
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810a98:	2943b224 	muli	r5,r5,3784
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810a9c:	6c8187e4 	muli	r18,r13,1567
  810aa0:	4813d33a 	srai	r9,r9,12
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810aa4:	4011d33a 	srai	r8,r8,12
  810aa8:	74c3b224 	muli	r19,r14,3784
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810aac:	3dcf883a 	add	r7,r7,r23
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810ab0:	ad000615 	stw	r20,24(r21)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810ab4:	a9c00c15 	stw	r7,48(r21)
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810ab8:	a8801815 	stw	r2,96(r21)

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810abc:	a8000015 	stw	zero,0(r21)
  810ac0:	a8800104 	addi	r2,r21,4
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
    z[i + 30] = 0;
  810ac4:	a8001e15 	stw	zero,120(r21)

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810ac8:	a8000115 	stw	zero,4(r21)
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810acc:	db402915 	stw	r13,164(sp)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810ad0:	370d883a 	add	r6,r6,fp
  810ad4:	b3426f64 	muli	r13,r22,2493

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810ad8:	2acb883a 	add	r5,r5,r11
  810adc:	52826f64 	muli	r10,r10,2493

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810ae0:	21032c64 	muli	r4,r4,3249
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810ae4:	18c32c64 	muli	r3,r3,3249
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810ae8:	db802b15 	stw	r14,172(sp)
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810aec:	14800615 	stw	r18,24(r2)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810af0:	11800c15 	stw	r6,48(r2)

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810af4:	11401215 	stw	r5,72(r2)
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810af8:	4a426f64 	muli	r9,r9,2493
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810afc:	42032c64 	muli	r8,r8,3249
  810b00:	14c01815 	stw	r19,96(r2)
    z[i + 30] = 0;
  810b04:	10001e15 	stw	zero,120(r2)

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810b08:	a8000215 	stw	zero,8(r21)
  810b0c:	a9400204 	addi	r5,r21,8
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810b10:	2349883a 	add	r4,r4,r13

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810b14:	1a87883a 	add	r3,r3,r10
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810b18:	2a400615 	stw	r9,24(r5)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810b1c:	29000c15 	stw	r4,48(r5)

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810b20:	28c01215 	stw	r3,72(r5)

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810b24:	2a001815 	stw	r8,96(r5)
  810b28:	da802117 	ldw	r10,132(sp)
    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810b2c:	d8c01517 	ldw	r3,84(sp)
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810b30:	d8801b17 	ldw	r2,108(sp)
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810b34:	d9c00f17 	ldw	r7,60(sp)
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810b38:	da000317 	ldw	r8,12(sp)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810b3c:	d9800917 	ldw	r6,36(sp)
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810b40:	502bd33a 	srai	r21,r10,12
    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810b44:	1807d33a 	srai	r3,r3,12
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810b48:	1005d33a 	srai	r2,r2,12
  810b4c:	db401c17 	ldw	r13,112(sp)

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810b50:	d9402415 	stw	r5,144(sp)
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810b54:	3813d33a 	srai	r9,r7,12
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810b58:	4009d33a 	srai	r4,r8,12

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810b5c:	db001017 	ldw	r12,64(sp)

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810b60:	d9c00a17 	ldw	r7,40(sp)
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810b64:	d9401617 	ldw	r5,88(sp)
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
    z[i + 30] = 0;
  810b68:	dc802417 	ldw	r18,144(sp)

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810b6c:	300dd33a 	srai	r6,r6,12
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810b70:	da800417 	ldw	r10,16(sp)
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810b74:	dac02217 	ldw	r11,136(sp)

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810b78:	dcc02717 	ldw	r19,156(sp)
    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810b7c:	10832c64 	muli	r2,r2,3249

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810b80:	ad426f64 	muli	r21,r21,2493
    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810b84:	18c26f64 	muli	r3,r3,2493
  810b88:	da001717 	ldw	r8,92(sp)
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810b8c:	dbc01d17 	ldw	r15,116(sp)
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810b90:	4d032c64 	muli	r20,r9,3249
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810b94:	25832c64 	muli	r22,r4,3249

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810b98:	da401117 	ldw	r9,68(sp)

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810b9c:	d9000b17 	ldw	r4,44(sp)
    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810ba0:	6839d33a 	srai	fp,r13,12
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810ba4:	db800517 	ldw	r14,20(sp)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810ba8:	602fd33a 	srai	r23,r12,12
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
    z[i + 30] = 0;
  810bac:	90001e15 	stw	zero,120(r18)

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810bb0:	380fd33a 	srai	r7,r7,12
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810bb4:	280bd33a 	srai	r5,r5,12

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810bb8:	31826f64 	muli	r6,r6,2493

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810bbc:	98000315 	stw	zero,12(r19)
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810bc0:	dd402d15 	stw	r21,180(sp)
    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810bc4:	1887883a 	add	r3,r3,r2
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810bc8:	5015d33a 	srai	r10,r10,12

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810bcc:	98800304 	addi	r2,r19,12
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810bd0:	5817d33a 	srai	r11,r11,12
    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810bd4:	e343b224 	muli	r13,fp,3784
  810bd8:	10c01215 	stw	r3,72(r2)
  810bdc:	7839d33a 	srai	fp,r15,12

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810be0:	d8c02d17 	ldw	r3,180(sp)

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810be4:	2009d33a 	srai	r4,r4,12
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810be8:	4813d33a 	srai	r9,r9,12

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810bec:	4011d33a 	srai	r8,r8,12
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810bf0:	bd43b224 	muli	r21,r23,3784
  810bf4:	350d883a 	add	r6,r6,r20
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810bf8:	702fd33a 	srai	r23,r14,12

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810bfc:	39c187e4 	muli	r7,r7,1567
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810c00:	294187e4 	muli	r5,r5,1567
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810c04:	15800615 	stw	r22,24(r2)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810c08:	11800c15 	stw	r6,48(r2)
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810c0c:	5283b224 	muli	r10,r10,3784
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810c10:	5ac187e4 	muli	r11,r11,1567
  810c14:	10c01815 	stw	r3,96(r2)
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810c18:	4a43f724 	muli	r9,r9,4060
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
    z[i + 30] = 0;
  810c1c:	10001e15 	stw	zero,120(r2)
    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810c20:	e303f724 	muli	r12,fp,4060

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
  810c24:	210085a4 	muli	r4,r4,534
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
  810c28:	420085a4 	muli	r8,r8,534

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810c2c:	98000415 	stw	zero,16(r19)
  810c30:	98800404 	addi	r2,r19,16
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810c34:	3d4f883a 	add	r7,r7,r21

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810c38:	2b4b883a 	add	r5,r5,r13
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810c3c:	b983f724 	muli	r6,r23,4060
  810c40:	12800615 	stw	r10,24(r2)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810c44:	11c00c15 	stw	r7,48(r2)

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810c48:	11401215 	stw	r5,72(r2)

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810c4c:	12c01815 	stw	r11,96(r2)
    z[i + 30] = 0;
  810c50:	10001e15 	stw	zero,120(r2)

  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
  810c54:	98000515 	stw	zero,20(r19)
  810c58:	98c00504 	addi	r3,r19,20
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810c5c:	2249883a 	add	r4,r4,r9

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810c60:	4311883a 	add	r8,r8,r12
  yptr = &y[0];
  wptr = &window_s[0];

  for (i = 0; i < 6; ++i) {
    z[i +  0] = 0;
    z[i +  6] = mad_f_mul(yptr[ 0 + 0], wptr[0]);
  810c64:	19800615 	stw	r6,24(r3)

    MAD_F_ML0(hi, lo, yptr[ 0 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[12 + 0], wptr[0]);

    z[i + 12] = MAD_F_MLZ(hi, lo);
  810c68:	19000c15 	stw	r4,48(r3)

    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);
  810c6c:	1a001215 	stw	r8,72(r3)

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810c70:	d8802317 	ldw	r2,140(sp)
    z[i + 30] = 0;
  810c74:	18001e15 	stw	zero,120(r3)
    MAD_F_ML0(hi, lo, yptr[12 + 6], wptr[6]);
    MAD_F_MLA(hi, lo, yptr[24 + 0], wptr[0]);

    z[i + 18] = MAD_F_MLZ(hi, lo);

    z[i + 24] = mad_f_mul(yptr[24 + 6], wptr[6]);
  810c78:	1005d33a 	srai	r2,r2,12
  810c7c:	108085a4 	muli	r2,r2,534
  810c80:	18801815 	stw	r2,96(r3)
    z[i + 30] = 0;

    ++yptr;
    ++wptr;
  }
}
  810c84:	df005817 	ldw	fp,352(sp)
  810c88:	ddc05717 	ldw	r23,348(sp)
  810c8c:	dd805617 	ldw	r22,344(sp)
  810c90:	dd405517 	ldw	r21,340(sp)
  810c94:	dd005417 	ldw	r20,336(sp)
  810c98:	dcc05317 	ldw	r19,332(sp)
  810c9c:	dc805217 	ldw	r18,328(sp)
  810ca0:	dc405117 	ldw	r17,324(sp)
  810ca4:	dc005017 	ldw	r16,320(sp)
  810ca8:	dec05904 	addi	sp,sp,356
  810cac:	f800283a 	ret

00810cb0 <III_imdct_l>:
 * DESCRIPTION:	perform IMDCT and windowing for long blocks
 */
static
void III_imdct_l(mad_fixed_t const X[18], mad_fixed_t z[36],
		 unsigned int block_type)
{
  810cb0:	deff7704 	addi	sp,sp,-548
  810cb4:	dd808615 	stw	r22,536(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810cb8:	25800c04 	addi	r22,r4,48
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810cbc:	b0800217 	ldw	r2,8(r22)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810cc0:	22800617 	ldw	r10,24(r4)
 * DESCRIPTION:	perform IMDCT and windowing for long blocks
 */
static
void III_imdct_l(mad_fixed_t const X[18], mad_fixed_t z[36],
		 unsigned int block_type)
{
  810cc4:	df008815 	stw	fp,544(sp)
  810cc8:	dd408515 	stw	r21,532(sp)

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810ccc:	27000117 	ldw	fp,4(r4)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810cd0:	25400904 	addi	r21,r4,36
  810cd4:	22400317 	ldw	r9,12(r4)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810cd8:	abc00117 	ldw	r15,4(r21)
 * DESCRIPTION:	perform IMDCT and windowing for long blocks
 */
static
void III_imdct_l(mad_fixed_t const X[18], mad_fixed_t z[36],
		 unsigned int block_type)
{
  810cdc:	dd008415 	stw	r20,528(sp)
  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810ce0:	ad000217 	ldw	r20,8(r21)

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810ce4:	b5400117 	ldw	r21,4(r22)
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810ce8:	d8805a15 	stw	r2,360(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810cec:	da805615 	stw	r10,344(sp)
  810cf0:	21c00304 	addi	r7,r4,12
 * DESCRIPTION:	perform IMDCT and windowing for long blocks
 */
static
void III_imdct_l(mad_fixed_t const X[18], mad_fixed_t z[36],
		 unsigned int block_type)
{
  810cf4:	ddc08715 	stw	r23,540(sp)

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810cf8:	e02dd33a 	srai	r22,fp,12
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810cfc:	dac05617 	ldw	r11,344(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d00:	ddc05a17 	ldw	r23,360(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d04:	23000604 	addi	r12,r4,24
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d08:	3b800217 	ldw	r14,8(r7)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d0c:	20800017 	ldw	r2,0(r4)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d10:	20c00217 	ldw	r3,8(r4)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d14:	22800917 	ldw	r10,36(r4)
 * DESCRIPTION:	perform IMDCT and windowing for long blocks
 */
static
void III_imdct_l(mad_fixed_t const X[18], mad_fixed_t z[36],
		 unsigned int block_type)
{
  810d18:	dcc08315 	stw	r19,524(sp)
  810d1c:	dc808215 	stw	r18,520(sp)

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d20:	3cc00117 	ldw	r19,4(r7)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d24:	24800f17 	ldw	r18,60(r4)
  810d28:	21c00c17 	ldw	r7,48(r4)
  810d2c:	4839d33a 	srai	fp,r9,12
  810d30:	21000f04 	addi	r4,r4,60
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d34:	a82bd33a 	srai	r21,r21,12
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d38:	62000217 	ldw	r8,8(r12)
 * DESCRIPTION:	perform IMDCT and windowing for long blocks
 */
static
void III_imdct_l(mad_fixed_t const X[18], mad_fixed_t z[36],
		 unsigned int block_type)
{
  810d3c:	dc408115 	stw	r17,516(sp)

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d40:	64400117 	ldw	r17,4(r12)
  810d44:	23000117 	ldw	r12,4(r4)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d48:	5817d33a 	srai	r11,r11,12
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d4c:	b82fd33a 	srai	r23,r23,12

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d50:	b587ee64 	muli	r22,r22,8121
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d54:	e707a124 	muli	fp,fp,7812
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d58:	ad430fa4 	muli	r21,r21,3134
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d5c:	1005d33a 	srai	r2,r2,12
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d60:	1807d33a 	srai	r3,r3,12

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d64:	9827d33a 	srai	r19,r19,12
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d68:	701dd33a 	srai	r14,r14,12

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d6c:	8823d33a 	srai	r17,r17,12
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d70:	4011d33a 	srai	r8,r8,12
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d74:	5015d33a 	srai	r10,r10,12
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d78:	781fd33a 	srai	r15,r15,12
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d7c:	a029d33a 	srai	r20,r20,12
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d80:	380fd33a 	srai	r7,r7,12
  810d84:	9025d33a 	srai	r18,r18,12
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d88:	6019d33a 	srai	r12,r12,12
 * DESCRIPTION:	perform IMDCT and windowing for long blocks
 */
static
void III_imdct_l(mad_fixed_t const X[18], mad_fixed_t z[36],
		 unsigned int block_type)
{
  810d8c:	dc008015 	stw	r16,512(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d90:	dac05515 	stw	r11,340(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810d94:	ddc05915 	stw	r23,356(sp)

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810d98:	dd805215 	stw	r22,328(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810d9c:	df005415 	stw	fp,336(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810da0:	dd405815 	stw	r21,352(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810da4:	5a46bf64 	muli	r9,r11,6909
  810da8:	528567a4 	muli	r10,r10,5534
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810dac:	7bc4dea4 	muli	r15,r15,4986
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810db0:	39c3b1a4 	muli	r7,r7,3782
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810db4:	bac267e4 	muli	r11,r23,2463
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810db8:	9481bb64 	muli	r18,r18,1773
  810dbc:	1087fe24 	muli	r2,r2,8184
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810dc0:	18c7cf64 	muli	r3,r3,7997

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810dc4:	9cc76424 	muli	r19,r19,7568
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810dc8:	738718a4 	muli	r14,r14,7266

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810dcc:	8c4658e4 	muli	r17,r17,6499
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810dd0:	4205e5e4 	muli	r8,r8,6039
  810dd4:	a5044c64 	muli	r20,r20,4401

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810dd8:	63010b64 	muli	r12,r12,1069
  810ddc:	dd800a15 	stw	r22,40(sp)
  810de0:	dd805817 	ldw	r22,352(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810de4:	d8800915 	stw	r2,36(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810de8:	d8c00b15 	stw	r3,44(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810dec:	df000c15 	stw	fp,48(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810df0:	dcc00d15 	stw	r19,52(sp)
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810df4:	db800e15 	stw	r14,56(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810df8:	da400f15 	stw	r9,60(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810dfc:	dc401015 	stw	r17,64(sp)
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810e00:	da001115 	stw	r8,68(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810e04:	da801215 	stw	r10,72(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810e08:	dbc01315 	stw	r15,76(sp)
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810e0c:	dd001415 	stw	r20,80(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810e10:	d9c01515 	stw	r7,84(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810e14:	dd801615 	stw	r22,88(sp)
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810e18:	dac01715 	stw	r11,92(sp)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810e1c:	dc801815 	stw	r18,96(sp)
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
  810e20:	db001915 	stw	r12,100(sp)
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810e24:	21000217 	ldw	r4,8(r4)
  };

  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
  810e28:	da405715 	stw	r9,348(sp)
  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810e2c:	71d3c83a 	sub	r9,r14,r7
  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810e30:	2009d33a 	srai	r4,r4,12
  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810e34:	da406b15 	stw	r9,428(sp)
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810e38:	e2efc83a 	sub	r23,fp,r11
  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810e3c:	21005964 	muli	r4,r4,357
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810e40:	ddc06915 	stw	r23,420(sp)
  /* scaling */

  for (i = 0; i < 18; i += 3) {
    tmp[i + 0] = mad_f_mul(y[i + 0], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(y[i + 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(y[i + 2], scale[i + 2]);
  810e44:	dac05b15 	stw	r11,364(sp)
  810e48:	d9001a15 	stw	r4,104(sp)
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810e4c:	da401a17 	ldw	r9,104(sp)
  810e50:	d9005717 	ldw	r4,348(sp)
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810e54:	4297c83a 	sub	r11,r8,r10

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810e58:	dd405217 	ldw	r21,328(sp)
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810e5c:	2539c83a 	sub	fp,r4,r20
  810e60:	1249c83a 	sub	r4,r2,r9
  810e64:	da406917 	ldw	r9,420(sp)
  810e68:	2009d33a 	srai	r4,r4,12
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810e6c:	ab2fc83a 	sub	r23,r21,r12
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810e70:	4821d33a 	srai	r16,r9,12
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810e74:	da406b17 	ldw	r9,428(sp)
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810e78:	2107f824 	muli	r4,r4,8160
  810e7c:	84068da4 	muli	r16,r16,6710
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810e80:	481bd33a 	srai	r13,r9,12
  810e84:	5813d33a 	srai	r9,r11,12
  810e88:	1cadc83a 	sub	r22,r3,r18
  810e8c:	6b4496a4 	muli	r13,r13,4698
  810e90:	4a40b264 	muli	r9,r9,713

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810e94:	8bebc83a 	sub	r21,r17,r15
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810e98:	d9006715 	stw	r4,412(sp)
  810e9c:	dc000315 	stw	r16,12(sp)
  /* divide the 18-point SDCT-II into two 9-point SDCT-IIs */

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
  810ea0:	dac01a17 	ldw	r11,104(sp)
  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810ea4:	b02dd33a 	srai	r22,r22,12
  810ea8:	db400515 	stw	r13,20(sp)

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810eac:	a82bd33a 	srai	r21,r21,12
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810eb0:	da400815 	stw	r9,32(sp)
  /* divide the 18-point SDCT-II into two 9-point SDCT-IIs */

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
  810eb4:	d9005417 	ldw	r4,336(sp)
  810eb8:	da405b17 	ldw	r9,364(sp)

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810ebc:	b82fd33a 	srai	r23,r23,12
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810ec0:	e039d33a 	srai	fp,fp,12
  /* divide the 18-point SDCT-II into two 9-point SDCT-IIs */

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
  810ec4:	2249883a 	add	r4,r4,r9
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
    tmp[i + 2] = x[i + 2] + x[18 - (i + 2) - 1];
  810ec8:	71dd883a 	add	r14,r14,r7
  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810ecc:	b5874024 	muli	r22,r22,7424

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810ed0:	ad421224 	muli	r21,r21,2120
  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
    tmp[i + 2] = x[i + 2] + x[18 - (i + 2) - 1];
  810ed4:	4291883a 	add	r8,r8,r10
    c5 =  MAD_F(0x058e86a0),  /* 2 * cos( 8 * PI / 18) */
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  810ed8:	2395c83a 	sub	r10,r4,r14
  810edc:	da804515 	stw	r10,276(sp)

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810ee0:	bdc7ba24 	muli	r23,r23,7912
  /* divide the 18-point SDCT-II into two 9-point SDCT-IIs */

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
  810ee4:	da805717 	ldw	r10,348(sp)
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810ee8:	e70361a4 	muli	fp,fp,3462
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
    tmp[i + 2] = mad_f_mul(x[i + 2] - x[18 - (i + 2) - 1], scale[i + 2]);
  810eec:	dd800215 	stw	r22,8(sp)

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810ef0:	dd400715 	stw	r21,28(sp)
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  a5 = x[1] - x[7];
  a6 = x[8] + x[0];
  a7 = x[8] - x[0];
  810ef4:	dd806717 	ldw	r22,412(sp)
  810ef8:	dd400817 	ldw	r21,32(sp)
  /* divide the 18-point SDCT-II into two 9-point SDCT-IIs */

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
  810efc:	12c5883a 	add	r2,r2,r11
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  810f00:	df000615 	stw	fp,24(sp)
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  a5 = x[1] - x[7];
  a6 = x[8] + x[0];
  a7 = x[8] - x[0];
  810f04:	4097c83a 	sub	r11,r8,r2
  /* divide the 18-point SDCT-II into two 9-point SDCT-IIs */

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
  810f08:	5529883a 	add	r20,r10,r20

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810f0c:	ddc00115 	stw	r23,4(sp)
  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
    tmp[i + 2] = x[i + 2] + x[18 - (i + 2) - 1];
  810f10:	1c87883a 	add	r3,r3,r18

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810f14:	ddc05817 	ldw	r23,352(sp)
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  a5 = x[1] - x[7];
  a6 = x[8] + x[0];
  a7 = x[8] - x[0];
  810f18:	adb9c83a 	sub	fp,r21,r22
  810f1c:	dac04715 	stw	r11,284(sp)
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  810f20:	a0ebc83a 	sub	r21,r20,r3

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
  810f24:	da405217 	ldw	r9,328(sp)
  /* divide the 18-point SDCT-II into two 9-point SDCT-IIs */

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
  810f28:	dd005e15 	stw	r20,376(sp)
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  810f2c:	dac00617 	ldw	r11,24(sp)
  810f30:	dd000217 	ldw	r20,8(sp)

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810f34:	9dcfc83a 	sub	r7,r19,r23

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
  810f38:	4b19883a 	add	r12,r9,r12
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  810f3c:	5d2dc83a 	sub	r22,r11,r20
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  810f40:	da804517 	ldw	r10,276(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810f44:	ddc00117 	ldw	r23,4(sp)
  810f48:	da400717 	ldw	r9,28(sp)
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  810f4c:	dac04717 	ldw	r11,284(sp)

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810f50:	380fd33a 	srai	r7,r7,12
  /* divide the 18-point SDCT-II into two 9-point SDCT-IIs */

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
  810f54:	d9005d15 	stw	r4,372(sp)
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
  810f58:	8be3883a 	add	r17,r17,r15
    c5 =  MAD_F(0x058e86a0),  /* 2 * cos( 8 * PI / 18) */
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  810f5c:	8349c83a 	sub	r4,r16,r13

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810f60:	645fc83a 	sub	r15,r12,r17
  810f64:	ba65c83a 	sub	r18,r23,r9
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  810f68:	dd005e17 	ldw	r20,376(sp)

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
  810f6c:	db005c15 	stw	r12,368(sp)

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810f70:	d9c06a15 	stw	r7,424(sp)
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  810f74:	2719c83a 	sub	r12,r4,fp
  810f78:	52cfc83a 	sub	r7,r10,r11
    c4 =  MAD_F(0x0af1d43a),  /* 2 * cos( 7 * PI / 18) */
    c5 =  MAD_F(0x058e86a0),  /* 2 * cos( 8 * PI / 18) */
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  810f7c:	da405d17 	ldw	r9,372(sp)
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  810f80:	380fd33a 	srai	r7,r7,12
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810f84:	781fd33a 	srai	r15,r15,12
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  810f88:	6019d33a 	srai	r12,r12,12
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810f8c:	9025d33a 	srai	r18,r18,12
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  a5 = x[1] - x[7];
  a6 = x[8] + x[0];
  810f90:	4091883a 	add	r8,r8,r2
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  810f94:	a0c7883a 	add	r3,r20,r3
  810f98:	ddc00617 	ldw	r23,24(sp)
  810f9c:	d8800217 	ldw	r2,8(sp)
    c4 =  MAD_F(0x0af1d43a),  /* 2 * cos( 7 * PI / 18) */
    c5 =  MAD_F(0x058e86a0),  /* 2 * cos( 8 * PI / 18) */
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  810fa0:	4b9d883a 	add	r14,r9,r14
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  810fa4:	d9c06015 	stw	r7,384(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810fa8:	dbc06115 	stw	r15,388(sp)
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  810fac:	db006c15 	stw	r12,432(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810fb0:	dc806d15 	stw	r18,436(sp)
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  810fb4:	d8c04615 	stw	r3,280(sp)
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  a5 = x[1] - x[7];
  a6 = x[8] + x[0];
  810fb8:	d9c06717 	ldw	r7,412(sp)
  810fbc:	d8c00817 	ldw	r3,32(sp)
    c4 =  MAD_F(0x0af1d43a),  /* 2 * cos( 7 * PI / 18) */
    c5 =  MAD_F(0x058e86a0),  /* 2 * cos( 8 * PI / 18) */
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  810fc0:	db804415 	stw	r14,272(sp)
  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  810fc4:	dac04617 	ldw	r11,280(sp)
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  810fc8:	b89f883a 	add	r15,r23,r2

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810fcc:	ddc06a17 	ldw	r23,424(sp)

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810fd0:	da406117 	ldw	r9,388(sp)
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  a5 = x[1] - x[7];
  a6 = x[8] + x[0];
  810fd4:	19c5883a 	add	r2,r3,r7
  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  810fd8:	5a19c83a 	sub	r12,r11,r8
  a14 = a13 + a7;
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  810fdc:	258f883a 	add	r7,r4,r22
  810fe0:	5547883a 	add	r3,r10,r21
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);
  810fe4:	72ddc83a 	sub	r14,r14,r11

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810fe8:	dac06d17 	ldw	r11,436(sp)
  a14 = a13 + a7;
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  810fec:	1815d33a 	srai	r10,r3,12

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  810ff0:	bdc5a824 	muli	r23,r23,5792
  a14 = a13 + a7;
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  810ff4:	3807d33a 	srai	r3,r7,12
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  810ff8:	4a791264 	muli	r9,r9,-7095
  810ffc:	5af91264 	muli	r11,r11,-7095

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
    tmp[i + 1] = mad_f_mul(x[i + 1] - x[18 - (i + 1) - 1], scale[i + 1]);
  811000:	ddc00415 	stw	r23,16(sp)
  a14 = a13 + a7;
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  811004:	18fadba4 	muli	r3,r3,-5266
  m1 = mad_f_mul(a16, -c0);
  811008:	ddc06017 	ldw	r23,384(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  81100c:	da404c15 	stw	r9,304(sp)
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  811010:	da406c17 	ldw	r9,432(sp)
    c4 =  MAD_F(0x0af1d43a),  /* 2 * cos( 7 * PI / 18) */
    c5 =  MAD_F(0x058e86a0),  /* 2 * cos( 8 * PI / 18) */
    c6 = -MAD_F(0x1e11f642)   /* 2 * cos(16 * PI / 18) */
  };

  a0 = x[3] + x[5];
  811014:	8365883a 	add	r18,r16,r13

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  811018:	dac04215 	stw	r11,264(sp)
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  81101c:	dac04517 	ldw	r11,276(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);
  811020:	93e9c83a 	sub	r20,r18,r15
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  811024:	bdf81f24 	muli	r23,r23,-8068
  a14 = a13 + a7;
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  811028:	d8c04015 	stw	r3,256(sp)

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  81102c:	d8c05c17 	ldw	r3,368(sp)
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  811030:	4a781f24 	muli	r9,r9,-8068
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);
  811034:	a029d33a 	srai	r20,r20,12
  a14 = a13 + a7;
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  811038:	52badba4 	muli	r10,r10,-5266
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  81103c:	5d57c83a 	sub	r11,r11,r21
  811040:	dac06315 	stw	r11,396(sp)
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  811044:	ddc04b15 	stw	r23,300(sp)

  a8  = a0  + a2;
  a9  = a0  - a2;
  a10 = a0  - a6;
  a11 = a2  - a6;
  a12 = a8  + a6;
  811048:	dac04417 	ldw	r11,272(sp)

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  81104c:	1c6f883a 	add	r23,r3,r17

  a8  = a0  + a2;
  a9  = a0  - a2;
  a10 = a0  - a6;
  a11 = a2  - a6;
  a12 = a8  + a6;
  811050:	d8c04617 	ldw	r3,280(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);
  811054:	dd006e15 	stw	r20,440(sp)
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  811058:	da404115 	stw	r9,260(sp)

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
  81105c:	dd005817 	ldw	r20,352(sp)

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  811060:	da400117 	ldw	r9,4(sp)
  a14 = a13 + a7;
  a15 = a3  + a7;
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  811064:	da804a15 	stw	r10,296(sp)

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  811068:	da800717 	ldw	r10,28(sp)

  a8  = a0  + a2;
  a9  = a0  - a2;
  a10 = a0  - a6;
  a11 = a2  - a6;
  a12 = a8  + a6;
  81106c:	58d7883a 	add	r11,r11,r3

  /* even input butterfly */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = x[i + 0] + x[18 - (i + 0) - 1];
    tmp[i + 1] = x[i + 1] + x[18 - (i + 1) - 1];
  811070:	9d27883a 	add	r19,r19,r20

  a8  = a0  + a2;
  a9  = a0  - a2;
  a10 = a0  - a6;
  a11 = a2  - a6;
  a12 = a8  + a6;
  811074:	dac05f15 	stw	r11,380(sp)

  a0 = x[3] + x[5];
  a1 = x[3] - x[5];
  a2 = x[6] + x[2];
  a3 = x[6] - x[2];
  a4 = x[1] + x[7];
  811078:	4aa9883a 	add	r20,r9,r10

  a8  = a0  + a2;
  a9  = a0  - a2;
  a10 = a0  - a6;
  a11 = a2  - a6;
  a12 = a8  + a6;
  81107c:	42d7883a 	add	r11,r8,r11
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  811080:	da404717 	ldw	r9,284(sp)
  811084:	da806317 	ldw	r10,396(sp)

  a8  = a0  + a2;
  a9  = a0  - a2;
  a10 = a0  - a6;
  a11 = a2  - a6;
  a12 = a8  + a6;
  811088:	dac04815 	stw	r11,288(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);
  81108c:	701dd33a 	srai	r14,r14,12
  811090:	dac06e17 	ldw	r11,440(sp)
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  811094:	4a87883a 	add	r3,r9,r10
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);

  a18 =     x[4] + a4;
  811098:	da800417 	ldw	r10,16(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);
  81109c:	73b9df24 	muli	r14,r14,-6276
  8110a0:	5af9df24 	muli	r11,r11,-6276
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  8110a4:	1807d33a 	srai	r3,r3,12
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);

  a18 =     x[4] + a4;
  8110a8:	bcd3883a 	add	r9,r23,r19
  8110ac:	a295883a 	add	r10,r20,r10
  8110b0:	da404915 	stw	r9,292(sp)
  8110b4:	da803e15 	stw	r10,248(sp)
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);
  8110b8:	db804e15 	stw	r14,312(sp)
  8110bc:	dac04315 	stw	r11,268(sp)
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  8110c0:	db804417 	ldw	r14,272(sp)
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  8110c4:	d8c06415 	stw	r3,400(sp)
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);

  a18 =     x[4] + a4;
  a19 = 2 * x[4] - a4;
  8110c8:	d8c00417 	ldw	r3,16(sp)
  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  8110cc:	788fc83a 	sub	r7,r15,r2

  a8  = a0  + a2;
  a9  = a0  - a2;
  a10 = a0  - a6;
  a11 = a2  - a6;
  a12 = a8  + a6;
  8110d0:	93df883a 	add	r15,r18,r15
  8110d4:	13df883a 	add	r15,r2,r15
  a25 = m4  + m1;

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  8110d8:	dac04b17 	ldw	r11,300(sp)
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  8110dc:	7211c83a 	sub	r8,r14,r8
  8110e0:	90a5c83a 	sub	r18,r18,r2
  a24 = m4  - m2;
  a25 = m4  + m1;

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  8110e4:	7a9d883a 	add	r14,r15,r10
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);

  a18 =     x[4] + a4;
  a19 = 2 * x[4] - a4;
  8110e8:	18c5883a 	add	r2,r3,r3
  a24 = m4  - m2;
  a25 = m4  + m1;

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  8110ec:	da804817 	ldw	r10,288(sp)
  y[ 2] = m0  - a25;
  8110f0:	d8c04c17 	ldw	r3,304(sp)
  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  8110f4:	6019d33a 	srai	r12,r12,12
  a24 = m4  - m2;
  a25 = m4  + m1;

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  8110f8:	5263883a 	add	r17,r10,r9
  y[ 2] = m0  - a25;
  8110fc:	58d5883a 	add	r10,r11,r3
  811100:	da404117 	ldw	r9,260(sp)
  811104:	dac04217 	ldw	r11,264(sp)
  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  811108:	380fd33a 	srai	r7,r7,12
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);

  a18 =     x[4] + a4;
  a19 = 2 * x[4] - a4;
  81110c:	1505c83a 	sub	r2,r2,r20
  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  811110:	63078464 	muli	r12,r12,7697
  m6 = mad_f_mul(a10, -c5);
  811114:	4011d33a 	srai	r8,r8,12
  m7 = mad_f_mul(a9,  -c2);

  a18 =     x[4] + a4;
  a19 = 2 * x[4] - a4;
  811118:	d8803f15 	stw	r2,252(sp)
  a25 = m4  + m1;

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  81111c:	4ac7883a 	add	r3,r9,r11
  811120:	dd004a17 	ldw	r20,296(sp)
  y[ 4] = m7  - a20;
  811124:	dac04e17 	ldw	r11,312(sp)
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  m7 = mad_f_mul(a9,  -c2);

  a18 =     x[4] + a4;
  a19 = 2 * x[4] - a4;
  811128:	9ce7883a 	add	r19,r19,r19
  81112c:	9de7c83a 	sub	r19,r19,r23
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  811130:	d8804717 	ldw	r2,284(sp)

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  811134:	da403f17 	ldw	r9,252(sp)
  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  811138:	39c78464 	muli	r7,r7,7697
  m6 = mad_f_mul(a10, -c5);
  81113c:	da006215 	stw	r8,392(sp)
  a25 = m4  + m1;

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  811140:	ddc04017 	ldw	r23,256(sp)
  y[ 4] = m7  - a20;
  811144:	64d1883a 	add	r8,r12,r19
  a25 = m4  + m1;

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  811148:	a295c83a 	sub	r10,r20,r10
  y[ 4] = m7  - a20;
  81114c:	5a11c83a 	sub	r8,r11,r8
  y[ 6] = m3;
  811150:	2589c83a 	sub	r4,r4,r22

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  811154:	dac04317 	ldw	r11,268(sp)

  sdctII(tmp, X);

  /* scale reduction and output accumulation */

  X[0] /= 2;
  811158:	8828d7fa 	srli	r20,r17,31
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  81115c:	e109883a 	add	r4,fp,r4
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  811160:	a8ab883a 	add	r21,r21,r2

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  811164:	3a45883a 	add	r2,r7,r9
  y[ 6] = m3;
  811168:	da406417 	ldw	r9,400(sp)
  a25 = m4  + m1;

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  81116c:	b8c7c83a 	sub	r3,r23,r3
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811170:	5020d7fa 	srli	r16,r10,31
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  811174:	2009d33a 	srai	r4,r4,12
  fastsdct(tmp, &X[1]);

  /* output accumulation */

  for (i = 3; i < 18; i += 8) {
    X[i + 0] -= X[(i + 0) - 2];
  811178:	1b87c83a 	sub	r3,r3,r14

  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  81117c:	5885c83a 	sub	r2,r11,r2

  sdctII(tmp, X);

  /* scale reduction and output accumulation */

  X[0] /= 2;
  811180:	a463883a 	add	r17,r20,r17

  /* output accumulation */

  for (i = 3; i < 18; i += 8) {
    X[i + 0] -= X[(i + 0) - 2];
    X[i + 2] -= X[(i + 2) - 2];
  811184:	10c5c83a 	sub	r2,r2,r3

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  811188:	702ed7fa 	srli	r23,r14,31
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  81118c:	4a791264 	muli	r9,r9,-7095

  sdctII(tmp, X);

  /* scale reduction and output accumulation */

  X[0] /= 2;
  811190:	8823d07a 	srai	r17,r17,1
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811194:	8295883a 	add	r10,r16,r10
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  811198:	21391264 	muli	r4,r4,-7095

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  81119c:	1020d7fa 	srli	r16,r2,31
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  8111a0:	b72d883a 	add	r22,r22,fp
  /* output to every other slot for convenience */

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  8111a4:	da406515 	stw	r9,404(sp)

  sdctII(tmp, X);

  /* scale reduction and output accumulation */

  X[0] /= 2;
  8111a8:	dc401b15 	stw	r17,108(sp)

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  8111ac:	da403f17 	ldw	r9,252(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8111b0:	bb9d883a 	add	r14,r23,r14
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  8111b4:	b02dd33a 	srai	r22,r22,12
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8111b8:	402ed7fa 	srli	r23,r8,31
  /* output accumulation */

  for (i = 3; i < 18; i += 8) {
    X[i + 0] -= X[(i + 0) - 2];
    X[i + 2] -= X[(i + 2) - 2];
    X[i + 4] -= X[(i + 4) - 2];
  8111bc:	2089c83a 	sub	r4,r4,r2
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  8111c0:	dd006217 	ldw	r20,392(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8111c4:	80a1883a 	add	r16,r16,r2
  8111c8:	701dd07a 	srai	r14,r14,1
  8111cc:	d8801b17 	ldw	r2,108(sp)
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  8111d0:	1838d7fa 	srli	fp,r3,31
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  8111d4:	b5bd43a4 	muli	r22,r22,-2802

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  8111d8:	49cfc83a 	sub	r7,r9,r7
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8111dc:	ba11883a 	add	r8,r23,r8
  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  8111e0:	da404217 	ldw	r9,264(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8111e4:	709dc83a 	sub	r14,r14,r2
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  8111e8:	a53e9c64 	muli	r20,r20,-1423
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8111ec:	4011d07a 	srai	r8,r8,1
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  8111f0:	a82bd33a 	srai	r21,r21,12
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  8111f4:	dac06517 	ldw	r11,404(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8111f8:	db801c15 	stw	r14,112(sp)
  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  8111fc:	4d85c83a 	sub	r2,r9,r22

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811200:	e0c7883a 	add	r3,fp,r3
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811204:	da401c17 	ldw	r9,112(sp)
  811208:	5015d07a 	srai	r10,r10,1
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  81120c:	dd004d15 	stw	r20,308(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  811210:	8021d07a 	srai	r16,r16,1
  a16 = a1  - a7;
  a17 = a1  + a3;

  m0 = mad_f_mul(a17, -c3);
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  811214:	ad7d43a4 	muli	r21,r21,-2802

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811218:	1839d07a 	srai	fp,r3,1
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  81121c:	da007115 	stw	r8,452(sp)
  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  811220:	da004c17 	ldw	r8,304(sp)

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  811224:	ddc04d17 	ldw	r23,308(sp)
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811228:	5828d7fa 	srli	r20,r11,31
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  81122c:	9025d33a 	srai	r18,r18,12
  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  811230:	dac04b17 	ldw	r11,300(sp)
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811234:	5255c83a 	sub	r10,r10,r9
  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  811238:	4547c83a 	sub	r3,r8,r21

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  81123c:	e2b9c83a 	sub	fp,fp,r10

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  811240:	9b19c83a 	sub	r12,r19,r12
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811244:	da801d15 	stw	r10,116(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  811248:	dc007215 	stw	r16,456(sp)

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  81124c:	65d9c83a 	sub	r12,r12,r23
  y[10] = a24 - m1;
  811250:	1ac7c83a 	sub	r3,r3,r11
  811254:	ddc04117 	ldw	r23,260(sp)
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811258:	da006517 	ldw	r8,404(sp)
  m1 = mad_f_mul(a16, -c0);
  m2 = mad_f_mul(a15, -c4);
  m3 = mad_f_mul(a14, -c1);
  m4 = mad_f_mul(a5,  -c1);
  m5 = mad_f_mul(a11, -c6);
  m6 = mad_f_mul(a10, -c5);
  81125c:	94be9c64 	muli	r18,r18,-1423

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811260:	df001e15 	stw	fp,120(sp)
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  811264:	dac04917 	ldw	r11,292(sp)
  811268:	da404817 	ldw	r9,288(sp)

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  81126c:	2022d7fa 	srli	r17,r4,31

  y[ 0] = a18 + a12;
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  811270:	3c8fc83a 	sub	r7,r7,r18
  y[10] = a24 - m1;
  811274:	15c5c83a 	sub	r2,r2,r23
  y[12] = a12 - 2 * a18;
  811278:	5ad5883a 	add	r10,r11,r11
  81127c:	ddc03e17 	ldw	r23,248(sp)

  for (i = 3; i < 18; i += 8) {
    X[i + 0] -= X[(i + 0) - 2];
    X[i + 2] -= X[(i + 2) - 2];
    X[i + 4] -= X[(i + 4) - 2];
    X[i + 6] -= X[(i + 6) - 2];
  811280:	390fc83a 	sub	r7,r7,r4
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  811284:	4a95c83a 	sub	r10,r9,r10

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811288:	8923883a 	add	r17,r17,r4
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  81128c:	1808d7fa 	srli	r4,r3,31
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  811290:	da806615 	stw	r10,408(sp)
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811294:	dac01e17 	ldw	r11,120(sp)
  811298:	da807117 	ldw	r10,452(sp)
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  81129c:	bdf9883a 	add	fp,r23,r23
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  8112a0:	a229883a 	add	r20,r20,r8
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  8112a4:	ddc04c17 	ldw	r23,304(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8112a8:	3810d7fa 	srli	r8,r7,31
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  8112ac:	d9007415 	stw	r4,464(sp)
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  8112b0:	da404a17 	ldw	r9,296(sp)
  8112b4:	d9004217 	ldw	r4,264(sp)
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8112b8:	52d5c83a 	sub	r10,r10,r11
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  8112bc:	dac04017 	ldw	r11,256(sp)
  8112c0:	adeb883a 	add	r21,r21,r23

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8112c4:	41d1883a 	add	r8,r8,r7
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8112c8:	601cd7fa 	srli	r14,r12,31

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8112cc:	da007315 	stw	r8,460(sp)
  y[ 2] = m0  - a25;
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  8112d0:	7f1fc83a 	sub	r15,r15,fp
  y[14] = a23 + m0;
  8112d4:	b12d883a 	add	r22,r22,r4
  8112d8:	4d79883a 	add	fp,r9,r21
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  8112dc:	dd407417 	ldw	r21,464(sp)
  y[ 4] = m7  - a20;
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  8112e0:	5d89883a 	add	r4,r11,r22
  y[16] = a22 + m7;
  8112e4:	ddc04d17 	ldw	r23,308(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8112e8:	dd807317 	ldw	r22,460(sp)
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  8112ec:	a029d07a 	srai	r20,r20,1
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8112f0:	731d883a 	add	r14,r14,r12

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  8112f4:	8823d07a 	srai	r17,r17,1
  fastsdct(tmp, &X[1]);

  /* output accumulation */

  for (i = 3; i < 18; i += 8) {
    X[i + 0] -= X[(i + 0) - 2];
  8112f8:	11c5c83a 	sub	r2,r2,r7
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8112fc:	da006617 	ldw	r8,408(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  811300:	828fc83a 	sub	r7,r16,r10
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811304:	a8c7883a 	add	r3,r21,r3
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811308:	701dd07a 	srai	r14,r14,1
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  81130c:	a1e9c83a 	sub	r20,r20,r7
  811310:	d8c07515 	stw	r3,468(sp)
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  y[16] = a22 + m7;
  811314:	bce7883a 	add	r19,r23,r19

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  811318:	b007d07a 	srai	r3,r22,1

  /* output accumulation */

  for (i = 3; i < 18; i += 8) {
    X[i + 0] -= X[(i + 0) - 2];
    X[i + 2] -= X[(i + 2) - 2];
  81131c:	789fc83a 	sub	r15,r15,r2

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811320:	8d23c83a 	sub	r17,r17,r20
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  y[16] = a22 + m7;
  811324:	dcc06f15 	stw	r19,444(sp)
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811328:	745dc83a 	sub	r14,r14,r17
  /* output accumulation */

  for (i = 3; i < 18; i += 8) {
    X[i + 0] -= X[(i + 0) - 2];
    X[i + 2] -= X[(i + 2) - 2];
    X[i + 4] -= X[(i + 4) - 2];
  81132c:	23e7c83a 	sub	r19,r4,r15
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811330:	da801f15 	stw	r10,124(sp)
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811334:	da407517 	ldw	r9,468(sp)
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  y[16] = a22 + m7;
  811338:	dac04e17 	ldw	r11,312(sp)
  81133c:	dd806f17 	ldw	r22,444(sp)
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811340:	d9006617 	ldw	r4,408(sp)

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811344:	1018d7fa 	srli	r12,r2,31
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811348:	4014d7fa 	srli	r10,r8,31

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  81134c:	d9c02015 	stw	r7,128(sp)
  811350:	1b87c83a 	sub	r3,r3,r14
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  y[16] = a22 + m7;
  811354:	d9c03f17 	ldw	r7,252(sp)
  811358:	ddc04317 	ldw	r23,268(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  81135c:	d8c02d15 	stw	r3,180(sp)
  811360:	7810d7fa 	srli	r8,r15,31
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811364:	482bd07a 	srai	r21,r9,1
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811368:	6099883a 	add	r12,r12,r2
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  y[16] = a22 + m7;
  81136c:	5d93883a 	add	r9,r11,r22
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811370:	5115883a 	add	r10,r10,r4
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811374:	dac02d17 	ldw	r11,180(sp)
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811378:	9808d7fa 	srli	r4,r19,31
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  y[16] = a22 + m7;
  81137c:	91e5883a 	add	r18,r18,r7

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811380:	6019d07a 	srai	r12,r12,1
  y[ 6] = m3;
  y[ 8] = a21 - m6;
  y[10] = a24 - m1;
  y[12] = a12 - 2 * a18;
  y[14] = a23 + m0;
  y[16] = a22 + m7;
  811384:	bc85883a 	add	r2,r23,r18
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811388:	e00ed7fa 	srli	r7,fp,31

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  81138c:	43d1883a 	add	r8,r8,r15
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811390:	5015d07a 	srai	r10,r10,1
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811394:	aadfc83a 	sub	r15,r21,r11

  for (i = 3; i < 18; i += 8) {
    X[i + 0] -= X[(i + 0) - 2];
    X[i + 2] -= X[(i + 2) - 2];
    X[i + 4] -= X[(i + 4) - 2];
    X[i + 6] -= X[(i + 6) - 2];
  811398:	14e5c83a 	sub	r18,r2,r19
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  81139c:	dd801e17 	ldw	r22,120(sp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  8113a0:	ddc01d17 	ldw	r23,116(sp)
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8113a4:	4806d7fa 	srli	r3,r9,31

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8113a8:	4011d07a 	srai	r8,r8,1
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  8113ac:	24c9883a 	add	r4,r4,r19
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  8113b0:	dcc02017 	ldw	r19,128(sp)

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  8113b4:	63dbc83a 	sub	r13,r12,r15
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8113b8:	5361c83a 	sub	r16,r10,r13
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  8113bc:	3f0f883a 	add	r7,r7,fp
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  8113c0:	dd401f17 	ldw	r21,124(sp)
 * DESCRIPTION:	perform IMDCT and windowing for long blocks
 */
static
void III_imdct_l(mad_fixed_t const X[18], mad_fixed_t z[36],
		 unsigned int block_type)
{
  8113c4:	2839883a 	mov	fp,r5
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  8113c8:	380fd07a 	srai	r7,r7,1
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  8113cc:	04cbc83a 	sub	r5,zero,r19
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8113d0:	1a47883a 	add	r3,r3,r9
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  8113d4:	05e7c83a 	sub	r19,zero,r23

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  8113d8:	4413c83a 	sub	r9,r8,r16
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  8113dc:	ddc01b17 	ldw	r23,108(sp)
  8113e0:	0591c83a 	sub	r8,zero,r22
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  8113e4:	dd801c17 	ldw	r22,112(sp)
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  }
  X[17] = X[17] / 2 - X[16];
  8113e8:	9004d7fa 	srli	r2,r18,31

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  8113ec:	2009d07a 	srai	r4,r4,1
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  8113f0:	1807d07a 	srai	r3,r3,1
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  8113f4:	3a55c83a 	sub	r10,r7,r9
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  8113f8:	054fc83a 	sub	r7,zero,r21
  8113fc:	05abc83a 	sub	r21,zero,r22
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811400:	05edc83a 	sub	r22,zero,r23
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  811404:	ddc06717 	ldw	r23,412(sp)

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811408:	2297c83a 	sub	r11,r4,r10
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  }
  X[17] = X[17] / 2 - X[16];
  81140c:	1485883a 	add	r2,r2,r18
  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811410:	1ad9c83a 	sub	r12,r3,r11
  }
  X[17] = X[17] / 2 - X[16];
  811414:	1005d07a 	srai	r2,r2,1
  fastsdct(tmp, &X[0]);

  /* odd input butterfly and scaling */

  for (i = 0; i < 9; i += 3) {
    tmp[i + 0] = mad_f_mul(x[i + 0] - x[18 - (i + 0) - 1], scale[i + 0]);
  811418:	ddc00015 	stw	r23,0(sp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  81141c:	0387c83a 	sub	r3,zero,r14
  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811420:	dd002115 	stw	r20,132(sp)
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811424:	db802315 	stw	r14,140(sp)
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811428:	0509c83a 	sub	r4,zero,r20

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  81142c:	db802d17 	ldw	r14,180(sp)
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811430:	0329c83a 	sub	r20,zero,r12
  811434:	dd007f15 	stw	r20,508(sp)
  811438:	0269c83a 	sub	r20,zero,r9
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  }
  X[17] = X[17] / 2 - X[16];
  81143c:	1325c83a 	sub	r18,r2,r12
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811440:	dd007715 	stw	r20,476(sp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811444:	0369c83a 	sub	r20,zero,r13

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811448:	dc402215 	stw	r17,136(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  81144c:	db802415 	stw	r14,144(sp)
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811450:	dbc02515 	stw	r15,148(sp)
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811454:	db402615 	stw	r13,152(sp)
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811458:	dc002715 	stw	r16,156(sp)

  /* scale reduction and output accumulation */

  X[0] /= 2;
  for (i = 1; i < 17; i += 4) {
    X[i + 0] = X[i + 0] / 2 - X[(i + 0) - 1];
  81145c:	da402815 	stw	r9,160(sp)
    X[i + 1] = X[i + 1] / 2 - X[(i + 1) - 1];
  811460:	da802915 	stw	r10,164(sp)
    X[i + 2] = X[i + 2] / 2 - X[(i + 2) - 1];
  811464:	dac02a15 	stw	r11,168(sp)
    X[i + 3] = X[i + 3] / 2 - X[(i + 3) - 1];
  811468:	db002b15 	stw	r12,172(sp)
  }
  X[17] = X[17] / 2 - X[16];
  81146c:	dc802c15 	stw	r18,176(sp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811470:	dd007915 	stw	r20,484(sp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811474:	dd002d17 	ldw	r20,180(sp)
  dctIV(x, tmp);

  /* convert 18-point DCT-IV to 36-point IMDCT */

  for (i =  0; i <  9; i += 3) {
    y[i + 0] =  tmp[9 + (i + 0)];
  811478:	e3800015 	stw	r14,0(fp)
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  81147c:	029dc83a 	sub	r14,zero,r10
  811480:	db807615 	stw	r14,472(sp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811484:	041dc83a 	sub	r14,zero,r16
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811488:	0445c83a 	sub	r2,zero,r17
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  81148c:	db807815 	stw	r14,480(sp)
  811490:	0529c83a 	sub	r20,zero,r20
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811494:	03ddc83a 	sub	r14,zero,r15
  811498:	db807a15 	stw	r14,488(sp)
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  81149c:	dd007b15 	stw	r20,492(sp)
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  8114a0:	e2001e15 	stw	r8,120(fp)
    y[i + 1] = -tmp[(i + 1) - 27];
  8114a4:	e1c01f15 	stw	r7,124(fp)
    y[i + 2] = -tmp[(i + 2) - 27];
  8114a8:	e1402015 	stw	r5,128(fp)
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  8114ac:	e1002115 	stw	r4,132(fp)
    y[i + 1] = -tmp[(i + 1) - 27];
  8114b0:	e0802215 	stw	r2,136(fp)
    y[i + 2] = -tmp[(i + 2) - 27];
  8114b4:	e0c02315 	stw	r3,140(fp)

  /* convert 18-point DCT-IV to 36-point IMDCT */

  for (i =  0; i <  9; i += 3) {
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
  8114b8:	e3c00115 	stw	r15,4(fp)
    y[i + 2] =  tmp[9 + (i + 2)];
  8114bc:	e3400215 	stw	r13,8(fp)
  dctIV(x, tmp);

  /* convert 18-point DCT-IV to 36-point IMDCT */

  for (i =  0; i <  9; i += 3) {
    y[i + 0] =  tmp[9 + (i + 0)];
  8114c0:	e4000315 	stw	r16,12(fp)
    y[i + 1] =  tmp[9 + (i + 1)];
  8114c4:	e2400415 	stw	r9,16(fp)
    y[i + 2] =  tmp[9 + (i + 2)];
  8114c8:	e2800515 	stw	r10,20(fp)
  dctIV(x, tmp);

  /* convert 18-point DCT-IV to 36-point IMDCT */

  for (i =  0; i <  9; i += 3) {
    y[i + 0] =  tmp[9 + (i + 0)];
  8114cc:	e2c00615 	stw	r11,24(fp)
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  8114d0:	db807f17 	ldw	r14,508(sp)
  8114d4:	e0801315 	stw	r2,76(fp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  8114d8:	e0800c04 	addi	r2,fp,48
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  8114dc:	e3800a15 	stw	r14,40(fp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  8114e0:	db807617 	ldw	r14,472(sp)
  8114e4:	d8803215 	stw	r2,200(sp)
  8114e8:	04afc83a 	sub	r23,zero,r18
  8114ec:	e3800c15 	stw	r14,48(fp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  8114f0:	db807717 	ldw	r14,476(sp)
  8114f4:	e0801304 	addi	r2,fp,76
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  8114f8:	02e3c83a 	sub	r17,zero,r11
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  8114fc:	e3800d15 	stw	r14,52(fp)
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811500:	db807817 	ldw	r14,480(sp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811504:	e0c01215 	stw	r3,72(fp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811508:	e1001415 	stw	r4,80(fp)
  81150c:	e3800e15 	stw	r14,56(fp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811510:	db807917 	ldw	r14,484(sp)
  811514:	e1401515 	stw	r5,84(fp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811518:	e1c01615 	stw	r7,88(fp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  81151c:	e3800f15 	stw	r14,60(fp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811520:	db807a17 	ldw	r14,488(sp)
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811524:	e2001715 	stw	r8,92(fp)
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811528:	d8803715 	stw	r2,220(sp)
  81152c:	e3801015 	stw	r14,64(fp)
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811530:	db807b17 	ldw	r14,492(sp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811534:	e0801504 	addi	r2,fp,84

  /* convert 18-point DCT-IV to 36-point IMDCT */

  for (i =  0; i <  9; i += 3) {
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
  811538:	e3000715 	stw	r12,28(fp)
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  81153c:	e3801115 	stw	r14,68(fp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811540:	e3801204 	addi	r14,fp,72
  811544:	db803115 	stw	r14,196(sp)
  /* convert 18-point DCT-IV to 36-point IMDCT */

  for (i =  0; i <  9; i += 3) {
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  811548:	e4800815 	stw	r18,32(fp)
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  81154c:	e3801404 	addi	r14,fp,80
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811550:	e5c00915 	stw	r23,36(fp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811554:	e4400b15 	stw	r17,44(fp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811558:	e4c01815 	stw	r19,96(fp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  81155c:	e5401915 	stw	r21,100(fp)
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811560:	e5801a15 	stw	r22,104(fp)
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  811564:	e5801b15 	stw	r22,108(fp)
    y[i + 1] = -tmp[(i + 1) - 27];
  811568:	e5401c15 	stw	r21,112(fp)
    y[i + 2] = -tmp[(i + 2) - 27];
  81156c:	e4c01d15 	stw	r19,116(fp)
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811570:	db803c15 	stw	r14,240(sp)
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811574:	e3801604 	addi	r14,fp,88
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811578:	d8803015 	stw	r2,192(sp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  81157c:	e0801704 	addi	r2,fp,92
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811580:	db803615 	stw	r14,216(sp)
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811584:	d8803b15 	stw	r2,236(sp)
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811588:	e3801804 	addi	r14,fp,96
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  81158c:	e0801904 	addi	r2,fp,100
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  811590:	db803315 	stw	r14,204(sp)
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
  811594:	d8803815 	stw	r2,224(sp)
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  811598:	e3801a04 	addi	r14,fp,104
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  81159c:	e0801b04 	addi	r2,fp,108
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  8115a0:	db803d15 	stw	r14,244(sp)
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  8115a4:	d8802f15 	stw	r2,188(sp)
    y[i + 1] = -tmp[(i + 1) - 27];
  8115a8:	e3801c04 	addi	r14,fp,112
    y[i + 2] = -tmp[(i + 2) - 27];
  8115ac:	e0801d04 	addi	r2,fp,116
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
    y[i + 1] = -tmp[(i + 1) - 27];
  8115b0:	db803515 	stw	r14,212(sp)
    y[i + 2] = -tmp[(i + 2) - 27];
  8115b4:	d8803a15 	stw	r2,232(sp)
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  8115b8:	e3801e04 	addi	r14,fp,120
    y[i + 1] = -tmp[(i + 1) - 27];
  8115bc:	e0801f04 	addi	r2,fp,124
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  8115c0:	db802e15 	stw	r14,184(sp)
    y[i + 1] = -tmp[(i + 1) - 27];
  8115c4:	d8803415 	stw	r2,208(sp)
    y[i + 2] = -tmp[(i + 2) - 27];
  8115c8:	e3802004 	addi	r14,fp,128
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  8115cc:	e0802104 	addi	r2,fp,132
    y[i + 1] = -tmp[(i + 1) - 27];
    y[i + 2] = -tmp[(i + 2) - 27];
  8115d0:	db803915 	stw	r14,228(sp)
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
  8115d4:	d8804f15 	stw	r2,316(sp)
    y[i + 1] = -tmp[(i + 1) - 27];
  8115d8:	e3802204 	addi	r14,fp,136
    y[i + 2] = -tmp[(i + 2) - 27];
  8115dc:	e0802304 	addi	r2,fp,140

  imdct36(X, z);

  /* windowing */

  switch (block_type) {
  8115e0:	05000044 	movi	r20,1

  /* convert 18-point DCT-IV to 36-point IMDCT */

  for (i =  0; i <  9; i += 3) {
    y[i + 0] =  tmp[9 + (i + 0)];
    y[i + 1] =  tmp[9 + (i + 1)];
  8115e4:	e1000104 	addi	r4,fp,4
    y[i + 2] =  tmp[9 + (i + 2)];
  8115e8:	e1400204 	addi	r5,fp,8
  dctIV(x, tmp);

  /* convert 18-point DCT-IV to 36-point IMDCT */

  for (i =  0; i <  9; i += 3) {
    y[i + 0] =  tmp[9 + (i + 0)];
  8115ec:	e0c00304 	addi	r3,fp,12
  8115f0:	e1c00604 	addi	r7,fp,24
    y[i + 1] =  tmp[9 + (i + 1)];
    y[i + 2] =  tmp[9 + (i + 2)];
  }
  for (i =  9; i < 27; i += 3) {
    y[i + 0] = -tmp[36 - (9 + (i + 0)) - 1];
  8115f4:	e2000904 	addi	r8,fp,36
    y[i + 1] = -tmp[36 - (9 + (i + 1)) - 1];
    y[i + 2] = -tmp[36 - (9 + (i + 2)) - 1];
  }
  for (i = 27; i < 36; i += 3) {
    y[i + 0] = -tmp[(i + 0) - 27];
    y[i + 1] = -tmp[(i + 1) - 27];
  8115f8:	db805015 	stw	r14,320(sp)
    y[i + 2] = -tmp[(i + 2) - 27];
  8115fc:	d8805115 	stw	r2,324(sp)

  imdct36(X, z);

  /* windowing */

  switch (block_type) {
  811600:	35009726 	beq	r6,r20,811860 <III_imdct_l+0xbb0>
  811604:	35000d36 	bltu	r6,r20,81163c <III_imdct_l+0x98c>
  811608:	008000c4 	movi	r2,3
  81160c:	3080ee26 	beq	r6,r2,8119c8 <III_imdct_l+0xd18>
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
    }
    break;
  }
}
  811610:	df008817 	ldw	fp,544(sp)
  811614:	ddc08717 	ldw	r23,540(sp)
  811618:	dd808617 	ldw	r22,536(sp)
  81161c:	dd408517 	ldw	r21,532(sp)
  811620:	dd008417 	ldw	r20,528(sp)
  811624:	dcc08317 	ldw	r19,524(sp)
  811628:	dc808217 	ldw	r18,520(sp)
  81162c:	dc408117 	ldw	r17,516(sp)
  811630:	dc008017 	ldw	r16,512(sp)
  811634:	dec08904 	addi	sp,sp,548
  811638:	f800283a 	ret

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81163c:	d8c02d17 	ldw	r3,180(sp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811640:	dd407717 	ldw	r21,476(sp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811644:	480dd33a 	srai	r6,r9,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811648:	5811d33a 	srai	r8,r11,12
  81164c:	da407f17 	ldw	r9,508(sp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811650:	dac07617 	ldw	r11,472(sp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811654:	dd807817 	ldw	r22,480(sp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811658:	6027d33a 	srai	r19,r12,12
  81165c:	8829d33a 	srai	r20,r17,12

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811660:	1805d33a 	srai	r2,r3,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811664:	500fd33a 	srai	r7,r10,12
  811668:	7807d33a 	srai	r3,r15,12

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81166c:	9015d33a 	srai	r10,r18,12
  811670:	581dd33a 	srai	r14,r11,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811674:	b825d33a 	srai	r18,r23,12
  811678:	a81fd33a 	srai	r15,r21,12
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  81167c:	6809d33a 	srai	r4,r13,12
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811680:	800bd33a 	srai	r5,r16,12
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811684:	4819d33a 	srai	r12,r9,12
  811688:	b02bd33a 	srai	r21,r22,12

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81168c:	10802ca4 	muli	r2,r2,178
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811690:	18c085a4 	muli	r3,r3,534
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811694:	2100dda4 	muli	r4,r4,886
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811698:	294133e4 	muli	r5,r5,1231

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81169c:	318187e4 	muli	r6,r6,1567
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8116a0:	39c1d8e4 	muli	r7,r7,1891
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8116a4:	42022624 	muli	r8,r8,2200
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8116a8:	9c426f64 	muli	r17,r19,2493

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8116ac:	5282b3e4 	muli	r10,r10,2767
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8116b0:	a4c35fa4 	muli	r19,r20,3454
      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8116b4:	9482f2e4 	muli	r18,r18,3019
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8116b8:	63032c64 	muli	r12,r12,3249

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8116bc:	73838c64 	muli	r14,r14,3633
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8116c0:	7bc3b224 	muli	r15,r15,3784
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8116c4:	ad03d0a4 	muli	r20,r21,3906
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8116c8:	ddc03217 	ldw	r23,200(sp)
      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8116cc:	e0c00115 	stw	r3,4(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8116d0:	e1000215 	stw	r4,8(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8116d4:	e1400315 	stw	r5,12(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8116d8:	e1800415 	stw	r6,16(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8116dc:	e1c00515 	stw	r7,20(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8116e0:	e2000615 	stw	r8,24(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8116e4:	e2800815 	stw	r10,32(fp)
  8116e8:	e0800015 	stw	r2,0(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8116ec:	e4400715 	stw	r17,28(fp)
      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8116f0:	e4800915 	stw	r18,36(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8116f4:	e3000a15 	stw	r12,40(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8116f8:	e4c00b15 	stw	r19,44(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8116fc:	e3800c15 	stw	r14,48(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811700:	e3c00d15 	stw	r15,52(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811704:	e5000e15 	stw	r20,56(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811708:	b8800317 	ldw	r2,12(r23)
  81170c:	1005d33a 	srai	r2,r2,12
  811710:	1083e7a4 	muli	r2,r2,3998
  811714:	b8800315 	stw	r2,12(r23)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811718:	e0c01017 	ldw	r3,64(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  81171c:	e0801117 	ldw	r2,68(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811720:	e1001217 	ldw	r4,72(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811724:	1807d33a 	srai	r3,r3,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811728:	1005d33a 	srai	r2,r2,12
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  81172c:	e1401317 	ldw	r5,76(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811730:	18c3f724 	muli	r3,r3,4060
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811734:	1083ff24 	muli	r2,r2,4092

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811738:	e1801417 	ldw	r6,80(fp)
  81173c:	e0c01015 	stw	r3,64(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811740:	e1c01517 	ldw	r7,84(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811744:	e2001617 	ldw	r8,88(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811748:	e2c01717 	ldw	r11,92(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81174c:	e2801817 	ldw	r10,96(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811750:	e0801115 	stw	r2,68(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811754:	e0c01a17 	ldw	r3,104(fp)
      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811758:	e0801917 	ldw	r2,100(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  81175c:	2009d33a 	srai	r4,r4,12
  811760:	1807d33a 	srai	r3,r3,12
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811764:	280bd33a 	srai	r5,r5,12

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811768:	300dd33a 	srai	r6,r6,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  81176c:	380fd33a 	srai	r7,r7,12
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811770:	4011d33a 	srai	r8,r8,12
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811774:	5817d33a 	srai	r11,r11,12

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811778:	5015d33a 	srai	r10,r10,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  81177c:	1005d33a 	srai	r2,r2,12
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811780:	18c2f2e4 	muli	r3,r3,3019
  811784:	2103ff24 	muli	r4,r4,4092
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811788:	2943f724 	muli	r5,r5,4060

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81178c:	3183e7a4 	muli	r6,r6,3998
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811790:	39c3d0a4 	muli	r7,r7,3906
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811794:	4203b224 	muli	r8,r8,3784

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811798:	52835fa4 	muli	r10,r10,3454
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  81179c:	10832c64 	muli	r2,r2,3249
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8117a0:	5ac38c64 	muli	r11,r11,3633
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8117a4:	e0c01a15 	stw	r3,104(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8117a8:	d8c03317 	ldw	r3,204(sp)
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8117ac:	e1001215 	stw	r4,72(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8117b0:	e1401315 	stw	r5,76(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8117b4:	e1801415 	stw	r6,80(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8117b8:	e1c01515 	stw	r7,84(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8117bc:	e2001615 	stw	r8,88(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8117c0:	e2801815 	stw	r10,96(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8117c4:	e2c01715 	stw	r11,92(fp)
      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8117c8:	e0801915 	stw	r2,100(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8117cc:	18800317 	ldw	r2,12(r3)
  8117d0:	1005d33a 	srai	r2,r2,12
  8117d4:	1082b3e4 	muli	r2,r2,2767
  8117d8:	18800315 	stw	r2,12(r3)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8117dc:	e0c01c17 	ldw	r3,112(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8117e0:	e1001d17 	ldw	r4,116(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8117e4:	e1401e17 	ldw	r5,120(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8117e8:	e1801f17 	ldw	r6,124(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8117ec:	e1c02017 	ldw	r7,128(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8117f0:	e2002117 	ldw	r8,132(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8117f4:	e2802217 	ldw	r10,136(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  8117f8:	e0802317 	ldw	r2,140(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8117fc:	1807d33a 	srai	r3,r3,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811800:	2009d33a 	srai	r4,r4,12
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811804:	280bd33a 	srai	r5,r5,12
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811808:	300dd33a 	srai	r6,r6,12

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81180c:	380fd33a 	srai	r7,r7,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811810:	4011d33a 	srai	r8,r8,12
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811814:	5015d33a 	srai	r10,r10,12
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811818:	1005d33a 	srai	r2,r2,12

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81181c:	18c26f64 	muli	r3,r3,2493
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811820:	21022624 	muli	r4,r4,2200
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811824:	2941d8e4 	muli	r5,r5,1891
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811828:	318187e4 	muli	r6,r6,1567

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81182c:	39c133e4 	muli	r7,r7,1231
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811830:	4200dda4 	muli	r8,r8,886
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811834:	528085a4 	muli	r10,r10,534
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811838:	10802ca4 	muli	r2,r2,178

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81183c:	e0c01c15 	stw	r3,112(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811840:	e1001d15 	stw	r4,116(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  811844:	e0802315 	stw	r2,140(fp)
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811848:	e1401e15 	stw	r5,120(fp)
      z[i + 3] = mad_f_mul(z[i + 3], window_l[i + 3]);
  81184c:	e1801f15 	stw	r6,124(fp)

      z[35] = mad_f_mul(tmp1, tmp2);
    }
# elif 1
    for (i = 0; i < 36; i += 4) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811850:	e1c02015 	stw	r7,128(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811854:	e2002115 	stw	r8,132(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811858:	e2802215 	stw	r10,136(fp)
  81185c:	003f6c06 	br	811610 <III_imdct_l+0x960>
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811860:	480dd33a 	srai	r6,r9,12
  811864:	6019d33a 	srai	r12,r12,12
  811868:	da407f17 	ldw	r9,508(sp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
    }
    /*  (i = 18; i < 24; ++i) z[i] unchanged */
    for (i = 24; i < 30; ++i) z[i] = mad_f_mul(z[i], window_s[i - 18]);
  81186c:	9829d33a 	srai	r20,r19,12
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811870:	db007c15 	stw	r12,496(sp)
  811874:	4819d33a 	srai	r12,r9,12
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811878:	da407817 	ldw	r9,480(sp)
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  81187c:	dcc07717 	ldw	r19,476(sp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811880:	5811d33a 	srai	r8,r11,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811884:	4813d33a 	srai	r9,r9,12
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811888:	dac07617 	ldw	r11,472(sp)
  81188c:	b82fd33a 	srai	r23,r23,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811890:	8823d33a 	srai	r17,r17,12
  811894:	da407e15 	stw	r9,504(sp)
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811898:	7807d33a 	srai	r3,r15,12
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  81189c:	da407b17 	ldw	r9,492(sp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8118a0:	581dd33a 	srai	r14,r11,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8118a4:	981fd33a 	srai	r15,r19,12
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8118a8:	dac07917 	ldw	r11,484(sp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8118ac:	dcc07a17 	ldw	r19,488(sp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8118b0:	bdc2f2e4 	muli	r23,r23,3019
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8118b4:	dc407d15 	stw	r17,500(sp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8118b8:	d9002d17 	ldw	r4,180(sp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8118bc:	500fd33a 	srai	r7,r10,12
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8118c0:	5823d33a 	srai	r17,r11,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8118c4:	9015d33a 	srai	r10,r18,12
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8118c8:	dac07c17 	ldw	r11,496(sp)
  8118cc:	9825d33a 	srai	r18,r19,12
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8118d0:	e5c00915 	stw	r23,36(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8118d4:	4827d33a 	srai	r19,r9,12
  8118d8:	ddc07d17 	ldw	r23,500(sp)
  8118dc:	da407e17 	ldw	r9,504(sp)
    }
    /*  (i = 18; i < 24; ++i) z[i] unchanged */
    for (i = 24; i < 30; ++i) z[i] = mad_f_mul(z[i], window_s[i - 18]);
  8118e0:	a82bd33a 	srai	r21,r21,12
  8118e4:	b02dd33a 	srai	r22,r22,12
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8118e8:	2005d33a 	srai	r2,r4,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8118ec:	5ac26f64 	muli	r11,r11,2493
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8118f0:	bdc35fa4 	muli	r23,r23,3454
  8118f4:	4a43d0a4 	muli	r9,r9,3906
  8118f8:	6809d33a 	srai	r4,r13,12
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8118fc:	800bd33a 	srai	r5,r16,12
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811900:	e2c00715 	stw	r11,28(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811904:	e5c00b15 	stw	r23,44(fp)
  811908:	e2400e15 	stw	r9,56(fp)
    }
    /*  (i = 18; i < 24; ++i) z[i] unchanged */
    for (i = 24; i < 30; ++i) z[i] = mad_f_mul(z[i], window_s[i - 18]);
  81190c:	b2c26f64 	muli	r11,r22,2493
  811910:	adc187e4 	muli	r23,r21,1567
  811914:	a24085a4 	muli	r9,r20,534
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811918:	10802ca4 	muli	r2,r2,178
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  81191c:	18c085a4 	muli	r3,r3,534
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811920:	2100dda4 	muli	r4,r4,886
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811924:	294133e4 	muli	r5,r5,1231
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811928:	318187e4 	muli	r6,r6,1567
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  81192c:	39c1d8e4 	muli	r7,r7,1891
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811930:	42022624 	muli	r8,r8,2200
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811934:	5282b3e4 	muli	r10,r10,2767
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811938:	63032c64 	muli	r12,r12,3249
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81193c:	73838c64 	muli	r14,r14,3633
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811940:	7bc3b224 	muli	r15,r15,3784
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811944:	8c43e7a4 	muli	r17,r17,3998
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811948:	9483f724 	muli	r18,r18,4060
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  81194c:	9cc3ff24 	muli	r19,r19,4092
    }
    /*  (i = 18; i < 24; ++i) z[i] unchanged */
    for (i = 24; i < 30; ++i) z[i] = mad_f_mul(z[i], window_s[i - 18]);
  811950:	a503f724 	muli	r20,r20,4060
  811954:	ad43b224 	muli	r21,r21,3784
  811958:	b5832c64 	muli	r22,r22,3249
  81195c:	e2c01b15 	stw	r11,108(fp)
  811960:	e5c01c15 	stw	r23,112(fp)
  811964:	e2401d15 	stw	r9,116(fp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811968:	e0800015 	stw	r2,0(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  81196c:	e0c00115 	stw	r3,4(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811970:	e1000215 	stw	r4,8(fp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811974:	e1400315 	stw	r5,12(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811978:	e1800415 	stw	r6,16(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  81197c:	e1c00515 	stw	r7,20(fp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811980:	e2000615 	stw	r8,24(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811984:	e2800815 	stw	r10,32(fp)
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811988:	e3000a15 	stw	r12,40(fp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  81198c:	e3800c15 	stw	r14,48(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811990:	e3c00d15 	stw	r15,52(fp)
# endif
    break;

  case 1:  /* start block */
    for (i =  0; i < 18; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811994:	e4400f15 	stw	r17,60(fp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811998:	e4801015 	stw	r18,64(fp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  81199c:	e4c01115 	stw	r19,68(fp)
    }
    /*  (i = 18; i < 24; ++i) z[i] unchanged */
    for (i = 24; i < 30; ++i) z[i] = mad_f_mul(z[i], window_s[i - 18]);
  8119a0:	e5001815 	stw	r20,96(fp)
  8119a4:	e5401915 	stw	r21,100(fp)
  8119a8:	e5801a15 	stw	r22,104(fp)
    for (i = 30; i < 36; ++i) z[i] = 0;
  8119ac:	e0002315 	stw	zero,140(fp)
  8119b0:	e0001e15 	stw	zero,120(fp)
  8119b4:	e0001f15 	stw	zero,124(fp)
  8119b8:	e0002015 	stw	zero,128(fp)
  8119bc:	e0002115 	stw	zero,132(fp)
  8119c0:	e0002215 	stw	zero,136(fp)
  8119c4:	003f1206 	br	811610 <III_imdct_l+0x960>
    break;

  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
  8119c8:	e0000015 	stw	zero,0(fp)
  8119cc:	20000015 	stw	zero,0(r4)
  8119d0:	28000015 	stw	zero,0(r5)
  8119d4:	18000015 	stw	zero,0(r3)
  8119d8:	e0000415 	stw	zero,16(fp)
  8119dc:	e0000515 	stw	zero,20(fp)
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
  8119e0:	38800017 	ldw	r2,0(r7)
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8119e4:	da803117 	ldw	r10,196(sp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8119e8:	dac03717 	ldw	r11,220(sp)
    for (i = 30; i < 36; ++i) z[i] = 0;
    break;

  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
  8119ec:	1005d33a 	srai	r2,r2,12
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  8119f0:	db803c17 	ldw	r14,240(sp)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  8119f4:	dcc03017 	ldw	r19,192(sp)
    for (i = 30; i < 36; ++i) z[i] = 0;
    break;

  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
  8119f8:	108085a4 	muli	r2,r2,534
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  8119fc:	dd003617 	ldw	r20,216(sp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811a00:	dd403b17 	ldw	r21,236(sp)
    for (i = 30; i < 36; ++i) z[i] = 0;
    break;

  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
  811a04:	38800015 	stw	r2,0(r7)
  811a08:	e0c00717 	ldw	r3,28(fp)
  811a0c:	e1000817 	ldw	r4,32(fp)
  811a10:	1807d33a 	srai	r3,r3,12
  811a14:	2009d33a 	srai	r4,r4,12
  811a18:	18c187e4 	muli	r3,r3,1567
  811a1c:	21026f64 	muli	r4,r4,2493
  811a20:	e0c00715 	stw	r3,28(fp)
  811a24:	e1000815 	stw	r4,32(fp)
  811a28:	40800017 	ldw	r2,0(r8)
  811a2c:	1005d33a 	srai	r2,r2,12
  811a30:	10832c64 	muli	r2,r2,3249
  811a34:	40800015 	stw	r2,0(r8)
  811a38:	e0c00a17 	ldw	r3,40(fp)
  811a3c:	e1000b17 	ldw	r4,44(fp)
  811a40:	1807d33a 	srai	r3,r3,12
  811a44:	2009d33a 	srai	r4,r4,12
  811a48:	18c3b224 	muli	r3,r3,3784
  811a4c:	2103f724 	muli	r4,r4,4060
  811a50:	e0c00a15 	stw	r3,40(fp)
  811a54:	e1000b15 	stw	r4,44(fp)
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811a58:	50800017 	ldw	r2,0(r10)
  811a5c:	1005d33a 	srai	r2,r2,12
  811a60:	1083ff24 	muli	r2,r2,4092
  811a64:	50800015 	stw	r2,0(r10)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811a68:	58c00017 	ldw	r3,0(r11)
  811a6c:	1807d33a 	srai	r3,r3,12
  811a70:	18c3f724 	muli	r3,r3,4060
  811a74:	58c00015 	stw	r3,0(r11)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811a78:	70800017 	ldw	r2,0(r14)
  811a7c:	1005d33a 	srai	r2,r2,12
  811a80:	1083e7a4 	muli	r2,r2,3998
  811a84:	70800015 	stw	r2,0(r14)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811a88:	98c00017 	ldw	r3,0(r19)
  811a8c:	1807d33a 	srai	r3,r3,12
  811a90:	18c3d0a4 	muli	r3,r3,3906
  811a94:	98c00015 	stw	r3,0(r19)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811a98:	a0800017 	ldw	r2,0(r20)
  811a9c:	1005d33a 	srai	r2,r2,12
  811aa0:	1083b224 	muli	r2,r2,3784
  811aa4:	a0800015 	stw	r2,0(r20)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811aa8:	a8c00017 	ldw	r3,0(r21)
  811aac:	1807d33a 	srai	r3,r3,12
  811ab0:	18c38c64 	muli	r3,r3,3633
  811ab4:	a8c00015 	stw	r3,0(r21)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811ab8:	dd803317 	ldw	r22,204(sp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811abc:	ddc03817 	ldw	r23,224(sp)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811ac0:	d9002f17 	ldw	r4,188(sp)
  811ac4:	b0800017 	ldw	r2,0(r22)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811ac8:	d9c03517 	ldw	r7,212(sp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811acc:	da003a17 	ldw	r8,232(sp)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811ad0:	1005d33a 	srai	r2,r2,12
  811ad4:	da402e17 	ldw	r9,184(sp)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811ad8:	da803417 	ldw	r10,208(sp)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811adc:	10835fa4 	muli	r2,r2,3454
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811ae0:	dac03917 	ldw	r11,228(sp)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811ae4:	db804f17 	ldw	r14,316(sp)
  811ae8:	b0800015 	stw	r2,0(r22)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811aec:	b8c00017 	ldw	r3,0(r23)
  811af0:	dcc05017 	ldw	r19,320(sp)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811af4:	dd005117 	ldw	r20,324(sp)
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811af8:	1807d33a 	srai	r3,r3,12
  811afc:	18c32c64 	muli	r3,r3,3249
  811b00:	b8c00015 	stw	r3,0(r23)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811b04:	d8c03d17 	ldw	r3,244(sp)
  811b08:	18800017 	ldw	r2,0(r3)
  811b0c:	1005d33a 	srai	r2,r2,12
  811b10:	1082f2e4 	muli	r2,r2,3019
  811b14:	18800015 	stw	r2,0(r3)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811b18:	20c00017 	ldw	r3,0(r4)
  811b1c:	1807d33a 	srai	r3,r3,12
  811b20:	18c2b3e4 	muli	r3,r3,2767
  811b24:	20c00015 	stw	r3,0(r4)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811b28:	38800017 	ldw	r2,0(r7)
  811b2c:	1005d33a 	srai	r2,r2,12
  811b30:	10826f64 	muli	r2,r2,2493
  811b34:	38800015 	stw	r2,0(r7)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811b38:	40c00017 	ldw	r3,0(r8)
  811b3c:	1807d33a 	srai	r3,r3,12
  811b40:	18c22624 	muli	r3,r3,2200
  811b44:	40c00015 	stw	r3,0(r8)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811b48:	48800017 	ldw	r2,0(r9)
  811b4c:	1005d33a 	srai	r2,r2,12
  811b50:	1081d8e4 	muli	r2,r2,1891
  811b54:	48800015 	stw	r2,0(r9)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811b58:	50c00017 	ldw	r3,0(r10)
  811b5c:	1807d33a 	srai	r3,r3,12
  811b60:	18c187e4 	muli	r3,r3,1567
  811b64:	50c00015 	stw	r3,0(r10)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811b68:	58800017 	ldw	r2,0(r11)
  811b6c:	1005d33a 	srai	r2,r2,12
  811b70:	108133e4 	muli	r2,r2,1231
  811b74:	58800015 	stw	r2,0(r11)
  case 3:  /* stop block */
    for (i =  0; i <  6; ++i) z[i] = 0;
    for (i =  6; i < 12; ++i) z[i] = mad_f_mul(z[i], window_s[i - 6]);
    /*  (i = 12; i < 18; ++i) z[i] unchanged */
    for (i = 18; i < 36; i += 3) {
      z[i + 0] = mad_f_mul(z[i + 0], window_l[i + 0]);
  811b78:	70c00017 	ldw	r3,0(r14)
  811b7c:	1807d33a 	srai	r3,r3,12
  811b80:	18c0dda4 	muli	r3,r3,886
  811b84:	70c00015 	stw	r3,0(r14)
      z[i + 1] = mad_f_mul(z[i + 1], window_l[i + 1]);
  811b88:	98800017 	ldw	r2,0(r19)
  811b8c:	1005d33a 	srai	r2,r2,12
  811b90:	108085a4 	muli	r2,r2,534
  811b94:	98800015 	stw	r2,0(r19)
      z[i + 2] = mad_f_mul(z[i + 2], window_l[i + 2]);
  811b98:	a0c00017 	ldw	r3,0(r20)
  811b9c:	1807d33a 	srai	r3,r3,12
  811ba0:	18c02ca4 	muli	r3,r3,178
  811ba4:	a0c00015 	stw	r3,0(r20)
  811ba8:	003e9906 	br	811610 <III_imdct_l+0x960>

00811bac <III_decode>:
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811bac:	def85e04 	addi	sp,sp,-7816
  811bb0:	d9477015 	stw	r5,7616(sp)

  {
    unsigned int sfreq;

    sfreq = header->samplerate;
    if (header->flags & MAD_FLAG_MPEG_2_5_EXT)
  811bb4:	29400717 	ldw	r5,28(r5)
  unsigned int sfreqi, ngr, gr;

  {
    unsigned int sfreq;

    sfreq = header->samplerate;
  811bb8:	d8c77017 	ldw	r3,7616(sp)
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811bbc:	d9076f15 	stw	r4,7612(sp)

  {
    unsigned int sfreq;

    sfreq = header->samplerate;
    if (header->flags & MAD_FLAG_MPEG_2_5_EXT)
  811bc0:	2890000c 	andi	r2,r5,16384
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811bc4:	dfc7a115 	stw	ra,7812(sp)
  811bc8:	df07a015 	stw	fp,7808(sp)
  811bcc:	ddc79f15 	stw	r23,7804(sp)
  811bd0:	dd879e15 	stw	r22,7800(sp)
  811bd4:	dd479d15 	stw	r21,7796(sp)
  811bd8:	dd079c15 	stw	r20,7792(sp)
  811bdc:	dcc79b15 	stw	r19,7788(sp)
  811be0:	dc879a15 	stw	r18,7784(sp)
  811be4:	dc479915 	stw	r17,7780(sp)
  811be8:	dc079815 	stw	r16,7776(sp)
  811bec:	d9877115 	stw	r6,7620(sp)
  811bf0:	d9c77215 	stw	r7,7624(sp)
  unsigned int sfreqi, ngr, gr;

  {
    unsigned int sfreq;

    sfreq = header->samplerate;
  811bf4:	19000517 	ldw	r4,20(r3)
    if (header->flags & MAD_FLAG_MPEG_2_5_EXT)
  811bf8:	10069e26 	beq	r2,zero,813674 <III_decode+0x1ac8>
      sfreq *= 2;
  811bfc:	2107883a 	add	r3,r4,r4
       24000 => 3, 22050 => 4, 16000 => 5 */
    sfreqi = ((sfreq >>  7) & 0x000f) +
             ((sfreq >> 15) & 0x0001) - 8;

    if (header->flags & MAD_FLAG_MPEG_2_5_EXT)
      sfreqi += 3;
  811c00:	1804d3fa 	srli	r2,r3,15
  811c04:	1806d1fa 	srli	r3,r3,7
  811c08:	1080004c 	andi	r2,r2,1
  811c0c:	10bffec4 	addi	r2,r2,-5
  811c10:	18c003cc 	andi	r3,r3,15
  811c14:	10c5883a 	add	r2,r2,r3
  811c18:	d8876d15 	stw	r2,7604(sp)
  }

  /* scalefactors, Huffman decoding, requantization */

  ngr = (header->flags & MAD_FLAG_LSF_EXT) ? 1 : 2;
  811c1c:	2884000c 	andi	r2,r5,4096
  811c20:	10069126 	beq	r2,zero,813668 <III_decode+0x1abc>
  811c24:	01000044 	movi	r4,1
  811c28:	d9076c15 	stw	r4,7600(sp)
  811c2c:	d9877217 	ldw	r6,7624(sp)
  811c30:	da877117 	ldw	r10,7620(sp)
  811c34:	d8076b15 	stw	zero,7596(sp)
  811c38:	300d003a 	cmpeq	r6,r6,zero
  811c3c:	52800284 	addi	r10,r10,10
  811c40:	d8074c15 	stw	zero,7472(sp)
  811c44:	d9879215 	stw	r6,7752(sp)
  811c48:	da879515 	stw	r10,7764(sp)
    unsigned char const *sfbwidth[2];
    mad_fixed_t xr[2][576];
    unsigned int ch;
    enum mad_error error;

    for (ch = 0; ch < nch; ++ch) {
  811c4c:	dac79217 	ldw	r11,7752(sp)
  811c50:	5806991e 	bne	r11,zero,8136b8 <III_decode+0x1b0c>
      struct channel *channel = &granule->ch[ch];
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
  811c54:	db076d17 	ldw	r12,7604(sp)
  811c58:	048020f4 	movhi	r18,131
  811c5c:	94952804 	addi	r18,r18,21664
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811c60:	d8c00204 	addi	r3,sp,8

    for (ch = 0; ch < nch; ++ch) {
      struct channel *channel = &granule->ch[ch];
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
  811c64:	63000324 	muli	r12,r12,12
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811c68:	dbc4fd04 	addi	r15,sp,5108
  811c6c:	dbc74f15 	stw	r15,7484(sp)

    for (ch = 0; ch < nch; ++ch) {
      struct channel *channel = &granule->ch[ch];
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
  811c70:	6485883a 	add	r2,r12,r18
  811c74:	10800017 	ldw	r2,0(r2)
  811c78:	db079115 	stw	r12,7748(sp)
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811c7c:	d8073d15 	stw	zero,7412(sp)

    for (ch = 0; ch < nch; ++ch) {
      struct channel *channel = &granule->ch[ch];
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
  811c80:	d8876e15 	stw	r2,7608(sp)
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811c84:	d8877117 	ldw	r2,7620(sp)
  811c88:	d8c75015 	stw	r3,7488(sp)
  811c8c:	d8074e15 	stw	zero,7480(sp)
  811c90:	d8874d15 	stw	r2,7476(sp)
  811c94:	180d883a 	mov	r6,r3
    mad_fixed_t xr[2][576];
    unsigned int ch;
    enum mad_error error;

    for (ch = 0; ch < nch; ++ch) {
      struct channel *channel = &granule->ch[ch];
  811c98:	d9073d17 	ldw	r4,7412(sp)
  811c9c:	da879517 	ldw	r10,7764(sp)
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
  811ca0:	d9476e17 	ldw	r5,7608(sp)
    mad_fixed_t xr[2][576];
    unsigned int ch;
    enum mad_error error;

    for (ch = 0; ch < nch; ++ch) {
      struct channel *channel = &granule->ch[ch];
  811ca4:	20800ea4 	muli	r2,r4,58
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
  811ca8:	31400015 	stw	r5,0(r6)
    mad_fixed_t xr[2][576];
    unsigned int ch;
    enum mad_error error;

    for (ch = 0; ch < nch; ++ch) {
      struct channel *channel = &granule->ch[ch];
  811cac:	5085883a 	add	r2,r10,r2
  811cb0:	d8876915 	stw	r2,7588(sp)
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
      if (channel->block_type == 2) {
  811cb4:	10c00243 	ldbu	r3,9(r2)
  811cb8:	00800084 	movi	r2,2
  811cbc:	18844d26 	beq	r3,r2,812df4 <III_decode+0x1248>
	sfbwidth[ch] = (channel->flags & mixed_block_flag) ?
	  sfbwidth_table[sfreqi].m : sfbwidth_table[sfreqi].s;
      }

      if (header->flags & MAD_FLAG_LSF_EXT) {
  811cc0:	d9477017 	ldw	r5,7616(sp)
  811cc4:	28800717 	ldw	r2,28(r5)
  811cc8:	1084000c 	andi	r2,r2,4096
  811ccc:	10038526 	beq	r2,zero,812ae4 <III_decode+0xf38>
	part2_length = III_scalefactors_lsf(ptr, channel,
  811cd0:	d9873d17 	ldw	r6,7412(sp)
  811cd4:	3004cd1e 	bne	r6,zero,81300c <III_decode+0x1460>
  811cd8:	0039883a 	mov	fp,zero
{
  struct mad_bitptr start;
  unsigned int scalefac_compress, index, slen[4], part, n, i;
  unsigned char const *nsfb;

  start = *ptr;
  811cdc:	dac76f17 	ldw	r11,7612(sp)

  scalefac_compress = channel->scalefac_compress;
  index = (channel->block_type == 2) ?
  811ce0:	db076917 	ldw	r12,7588(sp)
	sfbwidth[ch] = (channel->flags & mixed_block_flag) ?
	  sfbwidth_table[sfreqi].m : sfbwidth_table[sfreqi].s;
      }

      if (header->flags & MAD_FLAG_LSF_EXT) {
	part2_length = III_scalefactors_lsf(ptr, channel,
  811ce4:	dbc77017 	ldw	r15,7616(sp)
{
  struct mad_bitptr start;
  unsigned int scalefac_compress, index, slen[4], part, n, i;
  unsigned char const *nsfb;

  start = *ptr;
  811ce8:	58c0010b 	ldhu	r3,4(r11)
  811cec:	5880018b 	ldhu	r2,6(r11)

  scalefac_compress = channel->scalefac_compress;
  index = (channel->block_type == 2) ?
  811cf0:	61400243 	ldbu	r5,9(r12)
{
  struct mad_bitptr start;
  unsigned int scalefac_compress, index, slen[4], part, n, i;
  unsigned char const *nsfb;

  start = *ptr;
  811cf4:	59000017 	ldw	r4,0(r11)
  811cf8:	d880018d 	sth	r2,6(sp)
  811cfc:	d8c0010d 	sth	r3,4(sp)

  scalefac_compress = channel->scalefac_compress;
  index = (channel->block_type == 2) ?
  811d00:	00800084 	movi	r2,2
{
  struct mad_bitptr start;
  unsigned int scalefac_compress, index, slen[4], part, n, i;
  unsigned char const *nsfb;

  start = *ptr;
  811d04:	d9000015 	stw	r4,0(sp)
	sfbwidth[ch] = (channel->flags & mixed_block_flag) ?
	  sfbwidth_table[sfreqi].m : sfbwidth_table[sfreqi].s;
      }

      if (header->flags & MAD_FLAG_LSF_EXT) {
	part2_length = III_scalefactors_lsf(ptr, channel,
  811d08:	78c00217 	ldw	r3,8(r15)
  unsigned int scalefac_compress, index, slen[4], part, n, i;
  unsigned char const *nsfb;

  start = *ptr;

  scalefac_compress = channel->scalefac_compress;
  811d0c:	6400018b 	ldhu	r16,6(r12)
  index = (channel->block_type == 2) ?
  811d10:	2885c726 	beq	r5,r2,813430 <III_decode+0x1884>
  811d14:	0027883a 	mov	r19,zero
    ((channel->flags & mixed_block_flag) ? 2 : 1) : 0;

  if (!((mode_extension & I_STEREO) && gr1ch)) {
  811d18:	1880004c 	andi	r2,r3,1
  811d1c:	1005003a 	cmpeq	r2,r2,zero
  811d20:	1003fd1e 	bne	r2,zero,812d18 <III_decode+0x116c>
  811d24:	e003fc26 	beq	fp,zero,812d18 <III_decode+0x116c>

    while (n < 39)
      channel->scalefac[n++] = 0;
  }
  else {  /* (mode_extension & I_STEREO) && gr1ch (i.e. ch == 1) */
    scalefac_compress >>= 1;
  811d28:	8020d07a 	srli	r16,r16,1

    if (scalefac_compress < 180) {
  811d2c:	00802cc4 	movi	r2,179
  811d30:	1405fc36 	bltu	r2,r16,813524 <III_decode+0x1978>
      slen[0] =  scalefac_compress / 36;
  811d34:	8009883a 	mov	r4,r16
  811d38:	01400904 	movi	r5,36
  811d3c:	0820c080 	call	820c08 <__udivsi3>
      slen[1] = (scalefac_compress % 36) / 6;
  811d40:	8009883a 	mov	r4,r16
  811d44:	01400904 	movi	r5,36
  }
  else {  /* (mode_extension & I_STEREO) && gr1ch (i.e. ch == 1) */
    scalefac_compress >>= 1;

    if (scalefac_compress < 180) {
      slen[0] =  scalefac_compress / 36;
  811d48:	d8800a15 	stw	r2,40(sp)
      slen[1] = (scalefac_compress % 36) / 6;
  811d4c:	0820c100 	call	820c10 <__umodsi3>
  811d50:	1023883a 	mov	r17,r2
  811d54:	1009883a 	mov	r4,r2
  811d58:	01400184 	movi	r5,6
  811d5c:	0820c080 	call	820c08 <__udivsi3>
      slen[2] = (scalefac_compress % 36) % 6;
  811d60:	8809883a 	mov	r4,r17
  811d64:	01400184 	movi	r5,6
  else {  /* (mode_extension & I_STEREO) && gr1ch (i.e. ch == 1) */
    scalefac_compress >>= 1;

    if (scalefac_compress < 180) {
      slen[0] =  scalefac_compress / 36;
      slen[1] = (scalefac_compress % 36) / 6;
  811d68:	d8800b15 	stw	r2,44(sp)
      slen[2] = (scalefac_compress % 36) % 6;
  811d6c:	0820c100 	call	820c10 <__umodsi3>
      slen[3] = 0;

      nsfb = nsfb_table[3][index];
  811d70:	00c020f4 	movhi	r3,131
  811d74:	18d54c04 	addi	r3,r3,21808
  811d78:	98cd883a 	add	r6,r19,r3
    scalefac_compress >>= 1;

    if (scalefac_compress < 180) {
      slen[0] =  scalefac_compress / 36;
      slen[1] = (scalefac_compress % 36) / 6;
      slen[2] = (scalefac_compress % 36) % 6;
  811d7c:	d8800c15 	stw	r2,48(sp)
      slen[3] = 0;
  811d80:	d8000d15 	stw	zero,52(sp)
      slen[0] = scalefac_compress / 3;
      slen[1] = scalefac_compress % 3;
      slen[2] = 0;
      slen[3] = 0;

      nsfb = nsfb_table[5][index];
  811d84:	ddc00a04 	addi	r23,sp,40
  811d88:	3027883a 	mov	r19,r6
  811d8c:	002d883a 	mov	r22,zero

    n = 0;
    for (part = 0; part < 4; ++part) {
      unsigned int max, is_pos;

      max = (1 << slen[part]) - 1;
  811d90:	bd400017 	ldw	r21,0(r23)
  811d94:	00800044 	movi	r2,1

      for (i = 0; i < nsfb[part]; ++i) {
  811d98:	98c00003 	ldbu	r3,0(r19)

    n = 0;
    for (part = 0; part < 4; ++part) {
      unsigned int max, is_pos;

      max = (1 << slen[part]) - 1;
  811d9c:	1544983a 	sll	r2,r2,r21
  811da0:	153fffc4 	addi	r20,r2,-1

      for (i = 0; i < nsfb[part]; ++i) {
  811da4:	18001326 	beq	r3,zero,811df4 <III_decode+0x248>
  811da8:	da876917 	ldw	r10,7588(sp)
  811dac:	b0800404 	addi	r2,r22,16
  811db0:	e087883a 	add	r3,fp,r2
  811db4:	5085883a 	add	r2,r10,r2
  811db8:	14400084 	addi	r17,r2,2
  811dbc:	1c000084 	addi	r16,r3,2
  811dc0:	0025883a 	mov	r18,zero
	is_pos = mad_bit_read(ptr, slen[part]);
  811dc4:	d9076f17 	ldw	r4,7612(sp)
  811dc8:	a80b883a 	mov	r5,r21
    for (part = 0; part < 4; ++part) {
      unsigned int max, is_pos;

      max = (1 << slen[part]) - 1;

      for (i = 0; i < nsfb[part]; ++i) {
  811dcc:	94800044 	addi	r18,r18,1
	is_pos = mad_bit_read(ptr, slen[part]);
  811dd0:	080e3300 	call	80e330 <mad_bit_read>

	channel->scalefac[n] = is_pos;
  811dd4:	88800005 	stb	r2,0(r17)
	gr1ch->scalefac[n++] = (is_pos == max);
  811dd8:	a085003a 	cmpeq	r2,r20,r2
  811ddc:	80800005 	stb	r2,0(r16)
    for (part = 0; part < 4; ++part) {
      unsigned int max, is_pos;

      max = (1 << slen[part]) - 1;

      for (i = 0; i < nsfb[part]; ++i) {
  811de0:	98800003 	ldbu	r2,0(r19)
  811de4:	8c400044 	addi	r17,r17,1
  811de8:	84000044 	addi	r16,r16,1
  811dec:	90bff536 	bltu	r18,r2,811dc4 <III_decode+0x218>
  811df0:	b4ad883a 	add	r22,r22,r18

      nsfb = nsfb_table[5][index];
    }

    n = 0;
    for (part = 0; part < 4; ++part) {
  811df4:	dac00a04 	addi	r11,sp,40
      unsigned int max, is_pos;

      max = (1 << slen[part]) - 1;

      for (i = 0; i < nsfb[part]; ++i) {
  811df8:	bdc00104 	addi	r23,r23,4

      nsfb = nsfb_table[5][index];
    }

    n = 0;
    for (part = 0; part < 4; ++part) {
  811dfc:	58800404 	addi	r2,r11,16
      unsigned int max, is_pos;

      max = (1 << slen[part]) - 1;

      for (i = 0; i < nsfb[part]; ++i) {
  811e00:	9cc00044 	addi	r19,r19,1

      nsfb = nsfb_table[5][index];
    }

    n = 0;
    for (part = 0; part < 4; ++part) {
  811e04:	b8bfe21e 	bne	r23,r2,811d90 <III_decode+0x1e4>
	channel->scalefac[n] = is_pos;
	gr1ch->scalefac[n++] = (is_pos == max);
      }
    }

    while (n < 39) {
  811e08:	00800984 	movi	r2,38
  811e0c:	15800d36 	bltu	r2,r22,811e44 <III_decode+0x298>
  811e10:	db076917 	ldw	r12,7588(sp)
  811e14:	b0800404 	addi	r2,r22,16
  811e18:	e087883a 	add	r3,fp,r2
  811e1c:	6085883a 	add	r2,r12,r2
  811e20:	10800084 	addi	r2,r2,2
  811e24:	18c00084 	addi	r3,r3,2
  811e28:	010009c4 	movi	r4,39
      channel->scalefac[n] = 0;
  811e2c:	10000005 	stb	zero,0(r2)
      gr1ch->scalefac[n++] = 0;  /* apparently not illegal */
  811e30:	b5800044 	addi	r22,r22,1
  811e34:	18000005 	stb	zero,0(r3)
  811e38:	10800044 	addi	r2,r2,1
  811e3c:	18c00044 	addi	r3,r3,1
	channel->scalefac[n] = is_pos;
	gr1ch->scalefac[n++] = (is_pos == max);
      }
    }

    while (n < 39) {
  811e40:	b13ffa1e 	bne	r22,r4,811e2c <III_decode+0x280>
    }

    channel->scalefac[21] = 0;
  }

  return mad_bit_length(&start, ptr);
  811e44:	d9476f17 	ldw	r5,7612(sp)
  811e48:	d809883a 	mov	r4,sp
  811e4c:	080e2900 	call	80e290 <mad_bit_length>
  signed int bits_left, cachesz;
  register mad_fixed_t *xrptr;
  mad_fixed_t const *sfbound;
  register unsigned long bitcache;

  bits_left = (signed) channel->part2_3_length - (signed) part2_length;
  811e50:	dc876917 	ldw	r18,7588(sp)
    }

    channel->scalefac[21] = 0;
  }

  return mad_bit_length(&start, ptr);
  811e54:	1007883a 	mov	r3,r2
      else {
	part2_length = III_scalefactors(ptr, channel, &si->gr[0].ch[ch],
					gr == 0 ? 0 : si->scfsi[ch]);
      }

      error = III_huffdecode(ptr, xr[ch], channel, sfbwidth[ch], part2_length);
  811e58:	d9075017 	ldw	r4,7488(sp)
  signed int bits_left, cachesz;
  register mad_fixed_t *xrptr;
  mad_fixed_t const *sfbound;
  register unsigned long bitcache;

  bits_left = (signed) channel->part2_3_length - (signed) part2_length;
  811e5c:	9080000b 	ldhu	r2,0(r18)
      else {
	part2_length = III_scalefactors(ptr, channel, &si->gr[0].ch[ch],
					gr == 0 ? 0 : si->scfsi[ch]);
      }

      error = III_huffdecode(ptr, xr[ch], channel, sfbwidth[ch], part2_length);
  811e60:	25800017 	ldw	r22,0(r4)
  signed int bits_left, cachesz;
  register mad_fixed_t *xrptr;
  mad_fixed_t const *sfbound;
  register unsigned long bitcache;

  bits_left = (signed) channel->part2_3_length - (signed) part2_length;
  811e64:	10e5c83a 	sub	r18,r2,r3
  if (bits_left < 0)
  811e68:	90061116 	blt	r18,zero,8136b0 <III_decode+0x1b04>
{
  signed int gain;
  unsigned int scalefac_multiplier, sfbi;

  gain = (signed int) channel->global_gain - 210;
  scalefac_multiplier = (channel->flags & scalefac_scale) ? 2 : 1;
  811e6c:	d9476917 	ldw	r5,7588(sp)
  811e70:	00c00084 	movi	r3,2
  811e74:	29800203 	ldbu	r6,8(r5)
		   unsigned char const *sfbwidth, signed int exponents[39])
{
  signed int gain;
  unsigned int scalefac_multiplier, sfbi;

  gain = (signed int) channel->global_gain - 210;
  811e78:	2900010b 	ldhu	r4,4(r5)
  scalefac_multiplier = (channel->flags & scalefac_scale) ? 2 : 1;

  if (channel->block_type == 2) {
  811e7c:	29400243 	ldbu	r5,9(r5)
{
  signed int gain;
  unsigned int scalefac_multiplier, sfbi;

  gain = (signed int) channel->global_gain - 210;
  scalefac_multiplier = (channel->flags & scalefac_scale) ? 2 : 1;
  811e80:	3080008c 	andi	r2,r6,2
  811e84:	100f003a 	cmpeq	r7,r2,zero
		   unsigned char const *sfbwidth, signed int exponents[39])
{
  signed int gain;
  unsigned int scalefac_multiplier, sfbi;

  gain = (signed int) channel->global_gain - 210;
  811e88:	223fcb84 	addi	r8,r4,-210
  scalefac_multiplier = (channel->flags & scalefac_scale) ? 2 : 1;
  811e8c:	19cfc83a 	sub	r7,r3,r7

  if (channel->block_type == 2) {
  811e90:	28c3e426 	beq	r5,r3,812e24 <III_decode+0x1278>
      l    += 3 * sfbwidth[sfbi];
      sfbi += 3;
    }
  }
  else {  /* channel->block_type != 2 */
    if (channel->flags & preflag) {
  811e94:	3080010c 	andi	r2,r6,4
  811e98:	10038e26 	beq	r2,zero,812cd4 <III_decode+0x1128>
  811e9c:	d9076917 	ldw	r4,7588(sp)
  811ea0:	014020f4 	movhi	r5,131
  811ea4:	29555d04 	addi	r5,r5,21876
  811ea8:	db805604 	addi	r14,sp,344
  811eac:	700d883a 	mov	r6,r14
  811eb0:	2a400584 	addi	r9,r5,22
      for (sfbi = 0; sfbi < 22; ++sfbi) {
	exponents[sfbi] = gain -
  811eb4:	20800483 	ldbu	r2,18(r4)
  811eb8:	28c00003 	ldbu	r3,0(r5)
  811ebc:	29400044 	addi	r5,r5,1
  811ec0:	21000044 	addi	r4,r4,1
  811ec4:	10c5883a 	add	r2,r2,r3
  811ec8:	11c4983a 	sll	r2,r2,r7
  811ecc:	4085c83a 	sub	r2,r8,r2
  811ed0:	30800015 	stw	r2,0(r6)
  811ed4:	31800104 	addi	r6,r6,4
      sfbi += 3;
    }
  }
  else {  /* channel->block_type != 2 */
    if (channel->flags & preflag) {
      for (sfbi = 0; sfbi < 22; ++sfbi) {
  811ed8:	2a7ff61e 	bne	r5,r9,811eb4 <III_decode+0x308>
  if (bits_left < 0)
    return MAD_ERROR_BADPART3LEN;

  III_exponents(channel, sfbwidth, exponents);

  peek = *ptr;
  811edc:	da876f17 	ldw	r10,7612(sp)
  mad_bit_skip(ptr, bits_left);
  811ee0:	900b883a 	mov	r5,r18
  811ee4:	db879715 	stw	r14,7772(sp)
  if (bits_left < 0)
    return MAD_ERROR_BADPART3LEN;

  III_exponents(channel, sfbwidth, exponents);

  peek = *ptr;
  811ee8:	50c0010b 	ldhu	r3,4(r10)
  811eec:	5080018b 	ldhu	r2,6(r10)
  811ef0:	51800017 	ldw	r6,0(r10)
  mad_bit_skip(ptr, bits_left);
  811ef4:	5009883a 	mov	r4,r10
  if (bits_left < 0)
    return MAD_ERROR_BADPART3LEN;

  III_exponents(channel, sfbwidth, exponents);

  peek = *ptr;
  811ef8:	d880018d 	sth	r2,6(sp)
  811efc:	d8c0010d 	sth	r3,4(sp)
  811f00:	d9800015 	stw	r6,0(sp)
  mad_bit_skip(ptr, bits_left);
  811f04:	080e2d40 	call	80e2d4 <mad_bit_skip>

  /* align bit reads to byte boundaries */
  cachesz  = mad_bit_bitsleft(&peek);
  811f08:	d900018b 	ldhu	r4,6(sp)
  cachesz += ((32 - 1 - 24) + (24 - cachesz)) & ~7;
  811f0c:	040007c4 	movi	r16,31
  811f10:	00fffe04 	movi	r3,-8
  811f14:	8105c83a 	sub	r2,r16,r4
  811f18:	10c4703a 	and	r2,r2,r3
  811f1c:	20a3883a 	add	r17,r4,r2

  bitcache   = mad_bit_read(&peek, cachesz);
  811f20:	880b883a 	mov	r5,r17
  811f24:	d809883a 	mov	r4,sp
  811f28:	080e3300 	call	80e330 <mad_bit_read>
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
    rcount  = channel->region0_count + 1;

    entry     = &mad_huff_pair_table[channel->table_select[region = 0]];
  811f2c:	dac76917 	ldw	r11,7588(sp)

  /* align bit reads to byte boundaries */
  cachesz  = mad_bit_bitsleft(&peek);
  cachesz += ((32 - 1 - 24) + (24 - cachesz)) & ~7;

  bitcache   = mad_bit_read(&peek, cachesz);
  811f30:	1027883a 	mov	r19,r2
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
    rcount  = channel->region0_count + 1;

    entry     = &mad_huff_pair_table[channel->table_select[region = 0]];
  811f34:	030020f4 	movhi	r12,131
  811f38:	630fd404 	addi	r12,r12,16208
  811f3c:	58800283 	ldbu	r2,10(r11)
    struct hufftable const *entry;
    union huffpair const *table;
    unsigned int linbits, startbits, big_values, reqhits;
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
  811f40:	b0c00003 	ldbu	r3,0(r22)
    rcount  = channel->region0_count + 1;
  811f44:	59400403 	ldbu	r5,16(r11)

    entry     = &mad_huff_pair_table[channel->table_select[region = 0]];
  811f48:	100490fa 	slli	r2,r2,3
    table     = entry->table;
    linbits   = entry->linbits;
    startbits = entry->startbits;

    if (table == 0)
  811f4c:	db879717 	ldw	r14,7772(sp)
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
    rcount  = channel->region0_count + 1;

    entry     = &mad_huff_pair_table[channel->table_select[region = 0]];
  811f50:	1305883a 	add	r2,r2,r12
    table     = entry->table;
  811f54:	15400017 	ldw	r21,0(r2)
    linbits   = entry->linbits;
    startbits = entry->startbits;
  811f58:	11c0018b 	ldhu	r7,6(r2)
    sfbound = xrptr + *sfbwidth++;
    rcount  = channel->region0_count + 1;

    entry     = &mad_huff_pair_table[channel->table_select[region = 0]];
    table     = entry->table;
    linbits   = entry->linbits;
  811f5c:	1100010b 	ldhu	r4,4(r2)
    startbits = entry->startbits;

    if (table == 0)
  811f60:	a805a526 	beq	r21,zero,8135f8 <III_decode+0x1a4c>
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811f64:	dbc74f17 	ldw	r15,7484(sp)
    struct hufftable const *entry;
    union huffpair const *table;
    unsigned int linbits, startbits, big_values, reqhits;
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
  811f68:	18803fcc 	andi	r2,r3,255

    expptr  = &exponents[0];
    exp     = *expptr++;
    reqhits = 0;

    big_values = channel->big_values;
  811f6c:	58c0008b 	ldhu	r3,2(r11)
    struct hufftable const *entry;
    union huffpair const *table;
    unsigned int linbits, startbits, big_values, reqhits;
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
  811f70:	1085883a 	add	r2,r2,r2
  811f74:	b5800044 	addi	r22,r22,1
  811f78:	1085883a 	add	r2,r2,r2
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  811f7c:	7d3dc004 	addi	r20,r15,-2304
  /* align bit reads to byte boundaries */
  cachesz  = mad_bit_bitsleft(&peek);
  cachesz += ((32 - 1 - 24) + (24 - cachesz)) & ~7;

  bitcache   = mad_bit_read(&peek, cachesz);
  bits_left -= cachesz;
  811f80:	9465c83a 	sub	r18,r18,r17
    struct hufftable const *entry;
    union huffpair const *table;
    unsigned int linbits, startbits, big_values, reqhits;
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
  811f84:	dd876015 	stw	r22,7552(sp)
  /* align bit reads to byte boundaries */
  cachesz  = mad_bit_bitsleft(&peek);
  cachesz += ((32 - 1 - 24) + (24 - cachesz)) & ~7;

  bitcache   = mad_bit_read(&peek, cachesz);
  bits_left -= cachesz;
  811f88:	dc876215 	stw	r18,7560(sp)
    struct hufftable const *entry;
    union huffpair const *table;
    unsigned int linbits, startbits, big_values, reqhits;
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
  811f8c:	152f883a 	add	r23,r2,r20

    if (table == 0)
      return MAD_ERROR_BADHUFFTABLE;

    expptr  = &exponents[0];
    exp     = *expptr++;
  811f90:	dd805617 	ldw	r22,344(sp)
    reqhits = 0;

    big_values = channel->big_values;

    while (big_values-- && cachesz + bits_left > 0) {
  811f94:	1f3fffc4 	addi	fp,r3,-1
  811f98:	1805be26 	beq	r3,zero,813694 <III_decode+0x1ae8>
  811f9c:	8c8d883a 	add	r6,r17,r18
  811fa0:	0185c00e 	bge	zero,r6,8136a4 <III_decode+0x1af8>
    union huffpair const *table;
    unsigned int linbits, startbits, big_values, reqhits;
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
    rcount  = channel->region0_count + 1;
  811fa4:	28803fcc 	andi	r2,r5,255
  811fa8:	10800044 	addi	r2,r2,1

    entry     = &mad_huff_pair_table[channel->table_select[region = 0]];
    table     = entry->table;
    linbits   = entry->linbits;
  811fac:	213fffcc 	andi	r4,r4,65535
    startbits = entry->startbits;
  811fb0:	39ffffcc 	andi	r7,r7,65535
  811fb4:	73800104 	addi	r14,r14,4
    union huffpair const *table;
    unsigned int linbits, startbits, big_values, reqhits;
    mad_fixed_t reqcache[16];

    sfbound = xrptr + *sfbwidth++;
    rcount  = channel->region0_count + 1;
  811fb8:	d8876415 	stw	r2,7568(sp)

    entry     = &mad_huff_pair_table[channel->table_select[region = 0]];
    table     = entry->table;
    linbits   = entry->linbits;
  811fbc:	d9076515 	stw	r4,7572(sp)
    startbits = entry->startbits;
  811fc0:	d9c76615 	stw	r7,7576(sp)
  811fc4:	db876115 	stw	r14,7556(sp)
  811fc8:	d8076315 	stw	zero,7564(sp)
  811fcc:	0013883a 	mov	r9,zero
    while (big_values-- && cachesz + bits_left > 0) {
      union huffpair const *pair;
      unsigned int clumpsz, value;
      register mad_fixed_t requantized;

      if (xrptr == sfbound) {
  811fd0:	bd016c26 	beq	r23,r20,812584 <III_decode+0x9d8>
	}

	++expptr;
      }

      if (cachesz < 21) {
  811fd4:	00800504 	movi	r2,20
  811fd8:	14413e0e 	bge	r2,r17,8124d4 <III_decode+0x928>
      }

      /* hcod (0..19) */

      clumpsz = startbits;
      pair    = &table[MASK(bitcache, cachesz, clumpsz)];
  811fdc:	da876617 	ldw	r10,7576(sp)
  811fe0:	02c00044 	movi	r11,1
  811fe4:	8a89c83a 	sub	r4,r17,r10
  811fe8:	5a84983a 	sll	r2,r11,r10
  811fec:	9906d83a 	srl	r3,r19,r4
  811ff0:	10bfffc4 	addi	r2,r2,-1
  811ff4:	1886703a 	and	r3,r3,r2
  811ff8:	18c7883a 	add	r3,r3,r3
  811ffc:	a8e1883a 	add	r16,r21,r3

      while (!pair->final) {
  812000:	8080000b 	ldhu	r2,0(r16)
  812004:	12c4703a 	and	r2,r2,r11
  812008:	1000121e 	bne	r2,zero,812054 <III_decode+0x4a8>
  81200c:	580d883a 	mov	r6,r11
	cachesz -= clumpsz;

	clumpsz = pair->ptr.bits;
  812010:	80c0000b 	ldhu	r3,0(r16)

      clumpsz = startbits;
      pair    = &table[MASK(bitcache, cachesz, clumpsz)];

      while (!pair->final) {
	cachesz -= clumpsz;
  812014:	2023883a 	mov	r17,r4

	clumpsz = pair->ptr.bits;
  812018:	1808d07a 	srli	r4,r3,1
	pair    = &table[pair->ptr.offset + MASK(bitcache, cachesz, clumpsz)];
  81201c:	1806d13a 	srli	r3,r3,4
      pair    = &table[MASK(bitcache, cachesz, clumpsz)];

      while (!pair->final) {
	cachesz -= clumpsz;

	clumpsz = pair->ptr.bits;
  812020:	210001cc 	andi	r4,r4,7
	pair    = &table[pair->ptr.offset + MASK(bitcache, cachesz, clumpsz)];
  812024:	310a983a 	sll	r5,r6,r4
  812028:	8909c83a 	sub	r4,r17,r4
  81202c:	9904d83a 	srl	r2,r19,r4
  812030:	297fffc4 	addi	r5,r5,-1
  812034:	1144703a 	and	r2,r2,r5
  812038:	1887883a 	add	r3,r3,r2
  81203c:	18c7883a 	add	r3,r3,r3
  812040:	a8e1883a 	add	r16,r21,r3
      /* hcod (0..19) */

      clumpsz = startbits;
      pair    = &table[MASK(bitcache, cachesz, clumpsz)];

      while (!pair->final) {
  812044:	8080000b 	ldhu	r2,0(r16)
  812048:	1080004c 	andi	r2,r2,1
  81204c:	1005003a 	cmpeq	r2,r2,zero
  812050:	103fef1e 	bne	r2,zero,812010 <III_decode+0x464>

	clumpsz = pair->ptr.bits;
	pair    = &table[pair->ptr.offset + MASK(bitcache, cachesz, clumpsz)];
      }

      cachesz -= pair->value.hlen;
  812054:	80c0000b 	ldhu	r3,0(r16)

      if (linbits) {
  812058:	db076517 	ldw	r12,7572(sp)

	clumpsz = pair->ptr.bits;
	pair    = &table[pair->ptr.offset + MASK(bitcache, cachesz, clumpsz)];
      }

      cachesz -= pair->value.hlen;
  81205c:	1804d07a 	srli	r2,r3,1
  812060:	108001cc 	andi	r2,r2,7
  812064:	88a3c83a 	sub	r17,r17,r2

      if (linbits) {
  812068:	6000d026 	beq	r12,zero,8123ac <III_decode+0x800>
	/* x (0..14) */

	value = pair->value.x;
  81206c:	1804d13a 	srli	r2,r3,4
  812070:	148003cc 	andi	r18,r2,15

	switch (value) {
  812074:	90013726 	beq	r18,zero,812554 <III_decode+0x9a8>
  812078:	008003c4 	movi	r2,15
  81207c:	90826726 	beq	r18,r2,812a1c <III_decode+0xe70>

	  requantized = III_requantize(value, exp);
	  goto x_final;

	default:
	  if (reqhits & (1 << value))
  812080:	01400044 	movi	r5,1
  812084:	2c90983a 	sll	r8,r5,r18
  812088:	4a04703a 	and	r2,r9,r8
  81208c:	10021026 	beq	r2,zero,8128d0 <III_decode+0xd24>
	    requantized = reqcache[value];
  812090:	9485883a 	add	r2,r18,r18
  812094:	1085883a 	add	r2,r2,r2
  812098:	16c5883a 	add	r2,r2,sp
  81209c:	10c00e17 	ldw	r3,56(r2)
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
	  }

	x_final:
	  xrptr[0] = MASK1BIT(bitcache, cachesz--) ?
  8120a0:	8c7fffc4 	addi	r17,r17,-1
  8120a4:	04800044 	movi	r18,1
  8120a8:	9444983a 	sll	r2,r18,r17
  8120ac:	9884703a 	and	r2,r19,r2
  8120b0:	10000126 	beq	r2,zero,8120b8 <III_decode+0x50c>
  8120b4:	00c7c83a 	sub	r3,zero,r3
  8120b8:	a0c00015 	stw	r3,0(r20)
	    -requantized : requantized;
	}

	/* y (0..14) */

	value = pair->value.y;
  8120bc:	8080000b 	ldhu	r2,0(r16)
  8120c0:	1004d23a 	srli	r2,r2,8
  8120c4:	140003cc 	andi	r16,r2,15

	switch (value) {
  8120c8:	8000cf26 	beq	r16,zero,812408 <III_decode+0x85c>
  8120cc:	008003c4 	movi	r2,15
  8120d0:	80822426 	beq	r16,r2,812964 <III_decode+0xdb8>

	  requantized = III_requantize(value, exp);
	  goto y_final;

	default:
	  if (reqhits & (1 << value))
  8120d4:	01400044 	movi	r5,1
  8120d8:	2c10983a 	sll	r8,r5,r16
  8120dc:	4a04703a 	and	r2,r9,r8
  8120e0:	1001d626 	beq	r2,zero,81283c <III_decode+0xc90>
	    requantized = reqcache[value];
  8120e4:	8405883a 	add	r2,r16,r16
  8120e8:	1085883a 	add	r2,r2,r2
  8120ec:	16c5883a 	add	r2,r2,sp
  8120f0:	10c00e17 	ldw	r3,56(r2)
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
	  }

	y_final:
	  xrptr[1] = MASK1BIT(bitcache, cachesz--) ?
  8120f4:	8c7fffc4 	addi	r17,r17,-1
  8120f8:	04800044 	movi	r18,1
  8120fc:	9444983a 	sll	r2,r18,r17
  812100:	9884703a 	and	r2,r19,r2
  812104:	1000be1e 	bne	r2,zero,812400 <III_decode+0x854>
    exp     = *expptr++;
    reqhits = 0;

    big_values = channel->big_values;

    while (big_values-- && cachesz + bits_left > 0) {
  812108:	e73fffc4 	addi	fp,fp,-1
  81210c:	00bfffc4 	movi	r2,-1
	  else {
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
	  }

	  xrptr[1] = MASK1BIT(bitcache, cachesz--) ?
  812110:	a0c00115 	stw	r3,4(r20)
	    -requantized : requantized;
	}
      }

      xrptr += 2;
  812114:	a5000204 	addi	r20,r20,8
    exp     = *expptr++;
    reqhits = 0;

    big_values = channel->big_values;

    while (big_values-- && cachesz + bits_left > 0) {
  812118:	e080c026 	beq	fp,r2,81241c <III_decode+0x870>
  81211c:	da876217 	ldw	r10,7560(sp)
  812120:	544d883a 	add	r6,r10,r17
  812124:	01bfaa16 	blt	zero,r6,811fd0 <III_decode+0x424>

      xrptr += 2;
    }
  }

  if (cachesz + bits_left < 0)
  812128:	3000bf16 	blt	r6,zero,812428 <III_decode+0x87c>
  /* count1 */
  {
    union huffquad const *table;
    register mad_fixed_t requantized;

    table = mad_huff_quad_table[channel->flags & count1table_select];
  81212c:	dac76917 	ldw	r11,7588(sp)
  812130:	00c02134 	movhi	r3,132
  812134:	18c2db04 	addi	r3,r3,2924
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812138:	01200034 	movhi	r4,32768
  81213c:	210000c4 	addi	r4,r4,3
  /* count1 */
  {
    union huffquad const *table;
    register mad_fixed_t requantized;

    table = mad_huff_quad_table[channel->flags & count1table_select];
  812140:	58800203 	ldbu	r2,8(r11)
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812144:	b10e703a 	and	r7,r22,r4
  /* count1 */
  {
    union huffquad const *table;
    register mad_fixed_t requantized;

    table = mad_huff_quad_table[channel->flags & count1table_select];
  812148:	1080004c 	andi	r2,r2,1
  81214c:	1085883a 	add	r2,r2,r2
  812150:	1085883a 	add	r2,r2,r2
  812154:	10c5883a 	add	r2,r2,r3
  812158:	17000017 	ldw	fp,0(r2)
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  81215c:	3803ff16 	blt	r7,zero,81315c <III_decode+0x15b0>
  exp /= 4;
  812160:	b00b883a 	mov	r5,r22
  812164:	b0040316 	blt	r22,zero,813174 <III_decode+0x15c8>

  power = &rq_table[value];
  requantized = power->mantissa;
  812168:	030020f4 	movhi	r12,131
  81216c:	63156404 	addi	r12,r12,21904
  812170:	60c00017 	ldw	r3,0(r12)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  812174:	280bd0ba 	srai	r5,r5,2

  power = &rq_table[value];
  requantized = power->mantissa;
  812178:	00820034 	movhi	r2,2048
  81217c:	10bfffc4 	addi	r2,r2,-1
  exp += power->exponent;
  812180:	1808d6fa 	srli	r4,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  812184:	1890703a 	and	r8,r3,r2
  exp += power->exponent;
  812188:	2907883a 	add	r3,r5,r4

  if (exp < 0) {
  81218c:	18040416 	blt	r3,zero,8131a0 <III_decode+0x15f4>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  812190:	00800104 	movi	r2,4
  812194:	10c2b90e 	bge	r2,r3,812c7c <III_decode+0x10d0>
  812198:	04200034 	movhi	r16,32768
  81219c:	843fffc4 	addi	r16,r16,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  8121a0:	38000826 	beq	r7,zero,8121c4 <III_decode+0x618>
  8121a4:	39c5883a 	add	r2,r7,r7
  8121a8:	00c02134 	movhi	r3,132
  8121ac:	18f57204 	addi	r3,r3,-10808
  8121b0:	1085883a 	add	r2,r2,r2
  8121b4:	10c5883a 	add	r2,r2,r3
  8121b8:	8009d33a 	srai	r4,r16,12
  8121bc:	10c0038f 	ldh	r3,14(r2)
  8121c0:	20e1383a 	mul	r16,r4,r3

    table = mad_huff_quad_table[channel->flags & count1table_select];

    requantized = III_requantize(1, exp);

    while (cachesz + bits_left > 0 && xrptr <= &xr[572]) {
  8121c4:	3000a526 	beq	r6,zero,81245c <III_decode+0x8b0>
  8121c8:	dbc74f17 	ldw	r15,7484(sp)
  8121cc:	7d7ffc04 	addi	r21,r15,-16
  8121d0:	ad00a236 	bltu	r21,r20,81245c <III_decode+0x8b0>
  8121d4:	04800044 	movi	r18,1
  8121d8:	00001706 	br	812238 <III_decode+0x68c>
      xrptr[0] = quad->value.v ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* w (0..1) */

      xrptr[1] = quad->value.w ?
  8121dc:	0007883a 	mov	r3,zero
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
  8121e0:	a0800204 	addi	r2,r20,8
      xrptr[0] = quad->value.v ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* w (0..1) */

      xrptr[1] = quad->value.w ?
  8121e4:	a0c00115 	stw	r3,4(r20)
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
  8121e8:	b8804226 	beq	r23,r2,8122f4 <III_decode+0x748>
	++expptr;
      }

      /* x (0..1) */

      xrptr[0] = quad->value.x ?
  8121ec:	3080000b 	ldhu	r2,0(r6)
  8121f0:	1080100c 	andi	r2,r2,64
  8121f4:	10000526 	beq	r2,zero,81220c <III_decode+0x660>
  8121f8:	8c7fffc4 	addi	r17,r17,-1
  8121fc:	9444983a 	sll	r2,r18,r17
  812200:	9884703a 	and	r2,r19,r2
  812204:	10010d1e 	bne	r2,zero,81263c <III_decode+0xa90>
  812208:	8005883a 	mov	r2,r16
  81220c:	a0800215 	stw	r2,8(r20)
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* y (0..1) */

      xrptr[1] = quad->value.y ?
  812210:	3080000b 	ldhu	r2,0(r6)
  812214:	1080200c 	andi	r2,r2,128
  812218:	1000851e 	bne	r2,zero,812430 <III_decode+0x884>
  81221c:	0007883a 	mov	r3,zero

    table = mad_huff_quad_table[channel->flags & count1table_select];

    requantized = III_requantize(1, exp);

    while (cachesz + bits_left > 0 && xrptr <= &xr[572]) {
  812220:	d9076217 	ldw	r4,7560(sp)
      xrptr[0] = quad->value.x ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* y (0..1) */

      xrptr[1] = quad->value.y ?
  812224:	a0c00315 	stw	r3,12(r20)
  812228:	a5000404 	addi	r20,r20,16

    table = mad_huff_quad_table[channel->flags & count1table_select];

    requantized = III_requantize(1, exp);

    while (cachesz + bits_left > 0 && xrptr <= &xr[572]) {
  81222c:	2445883a 	add	r2,r4,r17
  812230:	0080890e 	bge	zero,r2,812458 <III_decode+0x8ac>
  812234:	ad008936 	bltu	r21,r20,81245c <III_decode+0x8b0>
      union huffquad const *quad;

      /* hcod (1..6) */

      if (cachesz < 10) {
  812238:	00800244 	movi	r2,9
  81223c:	1440c70e 	bge	r2,r17,81255c <III_decode+0x9b0>
	bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	cachesz   += 16;
	bits_left -= 16;
      }

      quad = &table[MASK(bitcache, cachesz, 4)];
  812240:	897fff04 	addi	r5,r17,-4
  812244:	9944d83a 	srl	r2,r19,r5
  812248:	108003cc 	andi	r2,r2,15
  81224c:	1085883a 	add	r2,r2,r2
  812250:	e08d883a 	add	r6,fp,r2

      /* quad tables guaranteed to have at most one extra lookup */
      if (!quad->final) {
  812254:	31c0000b 	ldhu	r7,0(r6)
  812258:	3880004c 	andi	r2,r7,1
  81225c:	10000d1e 	bne	r2,zero,812294 <III_decode+0x6e8>
	cachesz -= 4;

	quad = &table[quad->ptr.offset +
  812260:	3806d07a 	srli	r3,r7,1
  812264:	3804d13a 	srli	r2,r7,4
  812268:	2823883a 	mov	r17,r5
  81226c:	18c001cc 	andi	r3,r3,7
  812270:	90c8983a 	sll	r4,r18,r3
  812274:	28c7c83a 	sub	r3,r5,r3
  812278:	98c6d83a 	srl	r3,r19,r3
  81227c:	213fffc4 	addi	r4,r4,-1
  812280:	1906703a 	and	r3,r3,r4
  812284:	10c5883a 	add	r2,r2,r3
  812288:	1085883a 	add	r2,r2,r2
  81228c:	e08d883a 	add	r6,fp,r2
  812290:	31c0000b 	ldhu	r7,0(r6)
		      MASK(bitcache, cachesz, quad->ptr.bits)];
      }

      cachesz -= quad->value.hlen;
  812294:	3080000b 	ldhu	r2,0(r6)
  812298:	1004d07a 	srli	r2,r2,1
  81229c:	108001cc 	andi	r2,r2,7
  8122a0:	88a3c83a 	sub	r17,r17,r2

      if (xrptr == sfbound) {
  8122a4:	a5c13726 	beq	r20,r23,812784 <III_decode+0xbd8>
	++expptr;
      }

      /* v (0..1) */

      xrptr[0] = quad->value.v ?
  8122a8:	3880040c 	andi	r2,r7,16
  8122ac:	10000526 	beq	r2,zero,8122c4 <III_decode+0x718>
  8122b0:	8c7fffc4 	addi	r17,r17,-1
  8122b4:	9444983a 	sll	r2,r18,r17
  8122b8:	9884703a 	and	r2,r19,r2
  8122bc:	1000e31e 	bne	r2,zero,81264c <III_decode+0xaa0>
  8122c0:	8005883a 	mov	r2,r16
  8122c4:	a0800015 	stw	r2,0(r20)
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* w (0..1) */

      xrptr[1] = quad->value.w ?
  8122c8:	3080000b 	ldhu	r2,0(r6)
  8122cc:	1080080c 	andi	r2,r2,32
  8122d0:	103fc226 	beq	r2,zero,8121dc <III_decode+0x630>
  8122d4:	8c7fffc4 	addi	r17,r17,-1
  8122d8:	9444983a 	sll	r2,r18,r17
  8122dc:	9884703a 	and	r2,r19,r2
  8122e0:	1000d81e 	bne	r2,zero,812644 <III_decode+0xa98>
  8122e4:	8007883a 	mov	r3,r16
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
  8122e8:	a0800204 	addi	r2,r20,8
      xrptr[0] = quad->value.v ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* w (0..1) */

      xrptr[1] = quad->value.w ?
  8122ec:	a0c00115 	stw	r3,4(r20)
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
  8122f0:	b8bfbe1e 	bne	r23,r2,8121ec <III_decode+0x640>
	sfbound += *sfbwidth++;

	if (exp != *expptr) {
  8122f4:	d9076117 	ldw	r4,7556(sp)
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  8122f8:	d9476017 	ldw	r5,7552(sp)

	if (exp != *expptr) {
  8122fc:	22000017 	ldw	r8,0(r4)
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  812300:	2a800003 	ldbu	r10,0(r5)

	if (exp != *expptr) {
  812304:	b2001d26 	beq	r22,r8,81237c <III_decode+0x7d0>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812308:	00a00034 	movhi	r2,32768
  81230c:	108000c4 	addi	r2,r2,3
  812310:	408e703a 	and	r7,r8,r2
  812314:	38037116 	blt	r7,zero,8130dc <III_decode+0x1530>
  exp /= 4;
  812318:	400b883a 	mov	r5,r8
  81231c:	40037516 	blt	r8,zero,8130f4 <III_decode+0x1548>

  power = &rq_table[value];
  requantized = power->mantissa;
  812320:	02c020f4 	movhi	r11,131
  812324:	5ad56404 	addi	r11,r11,21904
  812328:	58c00017 	ldw	r3,0(r11)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  81232c:	280bd0ba 	srai	r5,r5,2

  power = &rq_table[value];
  requantized = power->mantissa;
  812330:	00820034 	movhi	r2,2048
  812334:	10bfffc4 	addi	r2,r2,-1
  exp += power->exponent;
  812338:	1808d6fa 	srli	r4,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  81233c:	1892703a 	and	r9,r3,r2
  exp += power->exponent;
  812340:	2907883a 	add	r3,r5,r4

  if (exp < 0) {
  812344:	18037616 	blt	r3,zero,813120 <III_decode+0x1574>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  812348:	00800104 	movi	r2,4
  81234c:	10c23f0e 	bge	r2,r3,812c4c <III_decode+0x10a0>
  812350:	04200034 	movhi	r16,32768
  812354:	843fffc4 	addi	r16,r16,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  812358:	38000826 	beq	r7,zero,81237c <III_decode+0x7d0>
  81235c:	39c5883a 	add	r2,r7,r7
  812360:	1085883a 	add	r2,r2,r2
  812364:	03002134 	movhi	r12,132
  812368:	63357204 	addi	r12,r12,-10808
  81236c:	1305883a 	add	r2,r2,r12
  812370:	8009d33a 	srai	r4,r16,12
  812374:	10c0038f 	ldh	r3,14(r2)
  812378:	20e1383a 	mul	r16,r4,r3
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  81237c:	50803fcc 	andi	r2,r10,255
  812380:	1085883a 	add	r2,r2,r2
  812384:	1085883a 	add	r2,r2,r2
  812388:	dbc76017 	ldw	r15,7552(sp)
  81238c:	b8af883a 	add	r23,r23,r2
	if (exp != *expptr) {
	  exp = *expptr;
	  requantized = III_requantize(1, exp);
	}

	++expptr;
  812390:	d8876117 	ldw	r2,7556(sp)
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  812394:	7bc00044 	addi	r15,r15,1
	if (exp != *expptr) {
	  exp = *expptr;
	  requantized = III_requantize(1, exp);
	}

	++expptr;
  812398:	402d883a 	mov	r22,r8
  81239c:	10800104 	addi	r2,r2,4
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  8123a0:	dbc76015 	stw	r15,7552(sp)
	if (exp != *expptr) {
	  exp = *expptr;
	  requantized = III_requantize(1, exp);
	}

	++expptr;
  8123a4:	d8876115 	stw	r2,7556(sp)
  8123a8:	003f9006 	br	8121ec <III_decode+0x640>
	}
      }
      else {
	/* x (0..1) */

	value = pair->value.x;
  8123ac:	1804d13a 	srli	r2,r3,4

	if (value == 0)
  8123b0:	10c003cc 	andi	r3,r2,15
  8123b4:	1800571e 	bne	r3,zero,812514 <III_decode+0x968>
	  xrptr[0] = 0;
  8123b8:	a0000015 	stw	zero,0(r20)
	    -requantized : requantized;
	}

	/* y (0..1) */

	value = pair->value.y;
  8123bc:	8080000b 	ldhu	r2,0(r16)
  8123c0:	1004d23a 	srli	r2,r2,8

	if (value == 0)
  8123c4:	10c003cc 	andi	r3,r2,15
  8123c8:	18000f26 	beq	r3,zero,812408 <III_decode+0x85c>
	  xrptr[1] = 0;
	else {
	  if (reqhits & (1 << value))
  8123cc:	02000044 	movi	r8,1
  8123d0:	40ce983a 	sll	r7,r8,r3
  8123d4:	49c4703a 	and	r2,r9,r7
  8123d8:	1000c526 	beq	r2,zero,8126f0 <III_decode+0xb44>
	    requantized = reqcache[value];
  8123dc:	18c5883a 	add	r2,r3,r3
  8123e0:	1085883a 	add	r2,r2,r2
  8123e4:	16c5883a 	add	r2,r2,sp
  8123e8:	10c00e17 	ldw	r3,56(r2)
	  else {
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
	  }

	  xrptr[1] = MASK1BIT(bitcache, cachesz--) ?
  8123ec:	8c7fffc4 	addi	r17,r17,-1
  8123f0:	01400044 	movi	r5,1
  8123f4:	2c44983a 	sll	r2,r5,r17
  8123f8:	9884703a 	and	r2,r19,r2
  8123fc:	103f4226 	beq	r2,zero,812108 <III_decode+0x55c>
  812400:	00c7c83a 	sub	r3,zero,r3
  812404:	003f4006 	br	812108 <III_decode+0x55c>
    exp     = *expptr++;
    reqhits = 0;

    big_values = channel->big_values;

    while (big_values-- && cachesz + bits_left > 0) {
  812408:	e73fffc4 	addi	fp,fp,-1
  81240c:	00bfffc4 	movi	r2,-1
	/* y (0..1) */

	value = pair->value.y;

	if (value == 0)
	  xrptr[1] = 0;
  812410:	a0000115 	stw	zero,4(r20)
	  xrptr[1] = MASK1BIT(bitcache, cachesz--) ?
	    -requantized : requantized;
	}
      }

      xrptr += 2;
  812414:	a5000204 	addi	r20,r20,8
    exp     = *expptr++;
    reqhits = 0;

    big_values = channel->big_values;

    while (big_values-- && cachesz + bits_left > 0) {
  812418:	e0bf401e 	bne	fp,r2,81211c <III_decode+0x570>
  81241c:	d8876217 	ldw	r2,7560(sp)
  812420:	144d883a 	add	r6,r2,r17

      xrptr += 2;
    }
  }

  if (cachesz + bits_left < 0)
  812424:	303f410e 	bge	r6,zero,81212c <III_decode+0x580>
  812428:	00808e04 	movi	r2,568
  81242c:	00047306 	br	8135fc <III_decode+0x1a50>
      xrptr[0] = quad->value.x ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* y (0..1) */

      xrptr[1] = quad->value.y ?
  812430:	8c7fffc4 	addi	r17,r17,-1
  812434:	9444983a 	sll	r2,r18,r17
  812438:	9884703a 	and	r2,r19,r2
  81243c:	1000851e 	bne	r2,zero,812654 <III_decode+0xaa8>

    table = mad_huff_quad_table[channel->flags & count1table_select];

    requantized = III_requantize(1, exp);

    while (cachesz + bits_left > 0 && xrptr <= &xr[572]) {
  812440:	d9076217 	ldw	r4,7560(sp)
      xrptr[0] = quad->value.x ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* y (0..1) */

      xrptr[1] = quad->value.y ?
  812444:	8007883a 	mov	r3,r16
  812448:	a0c00315 	stw	r3,12(r20)

    table = mad_huff_quad_table[channel->flags & count1table_select];

    requantized = III_requantize(1, exp);

    while (cachesz + bits_left > 0 && xrptr <= &xr[572]) {
  81244c:	2445883a 	add	r2,r4,r17
      xrptr[0] = quad->value.x ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* y (0..1) */

      xrptr[1] = quad->value.y ?
  812450:	a5000404 	addi	r20,r20,16

    table = mad_huff_quad_table[channel->flags & count1table_select];

    requantized = III_requantize(1, exp);

    while (cachesz + bits_left > 0 && xrptr <= &xr[572]) {
  812454:	00bf7716 	blt	zero,r2,812234 <III_decode+0x688>
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      xrptr += 2;
    }

    if (cachesz + bits_left < 0) {
  812458:	1001fe16 	blt	r2,zero,812c54 <III_decode+0x10a8>

      xrptr -= 4;
    }
  }

  assert(-bits_left <= MAD_BUFFER_GUARD * CHAR_BIT);
  81245c:	d9476217 	ldw	r5,7560(sp)
  812460:	00801004 	movi	r2,64
  812464:	0147c83a 	sub	r3,zero,r5
  812468:	10c1ff16 	blt	r2,r3,812c68 <III_decode+0x10bc>
  else if (cachesz + bits_left > 0)
    fprintf(stderr, "%d stuffing bits\n", cachesz + bits_left);
# endif

  /* rzero */
  while (xrptr < &xr[576]) {
  81246c:	d9874f17 	ldw	r6,7484(sp)
  812470:	a180052e 	bgeu	r20,r6,812488 <III_decode+0x8dc>
  812474:	da874f17 	ldw	r10,7484(sp)
    xrptr[0] = 0;
  812478:	a0000015 	stw	zero,0(r20)
    xrptr[1] = 0;
  81247c:	a0000115 	stw	zero,4(r20)

    xrptr += 2;
  812480:	a5000204 	addi	r20,r20,8
  else if (cachesz + bits_left > 0)
    fprintf(stderr, "%d stuffing bits\n", cachesz + bits_left);
# endif

  /* rzero */
  while (xrptr < &xr[576]) {
  812484:	a2bffb36 	bltu	r20,r10,812474 <III_decode+0x8c8>
    unsigned char const *sfbwidth[2];
    mad_fixed_t xr[2][576];
    unsigned int ch;
    enum mad_error error;

    for (ch = 0; ch < nch; ++ch) {
  812488:	d9873d17 	ldw	r6,7412(sp)
  81248c:	da875017 	ldw	r10,7488(sp)
  812490:	dac74f17 	ldw	r11,7484(sp)
  812494:	db074e17 	ldw	r12,7480(sp)
  812498:	dbc74d17 	ldw	r15,7476(sp)
  81249c:	dc877217 	ldw	r18,7624(sp)
  8124a0:	31800044 	addi	r6,r6,1
  8124a4:	52800104 	addi	r10,r10,4
  8124a8:	5ac24004 	addi	r11,r11,2304
  8124ac:	63000e84 	addi	r12,r12,58
  8124b0:	7bc00044 	addi	r15,r15,1
  8124b4:	d9873d15 	stw	r6,7412(sp)
  8124b8:	da875015 	stw	r10,7488(sp)
  8124bc:	dac74f15 	stw	r11,7484(sp)
  8124c0:	db074e15 	stw	r12,7480(sp)
  8124c4:	dbc74d15 	stw	r15,7476(sp)
  8124c8:	91847b26 	beq	r18,r6,8136b8 <III_decode+0x1b0c>
  8124cc:	d9875017 	ldw	r6,7488(sp)
  8124d0:	003df106 	br	811c98 <III_decode+0xec>
      }

      if (cachesz < 21) {
	unsigned int bits;

	bits       = ((32 - 1 - 21) + (21 - cachesz)) & ~7;
  8124d4:	014007c4 	movi	r5,31
  8124d8:	2c61c83a 	sub	r16,r5,r17
  8124dc:	00bffe04 	movi	r2,-8
  8124e0:	80a0703a 	and	r16,r16,r2
	bitcache   = (bitcache << bits) | mad_bit_read(&peek, bits);
  8124e4:	d809883a 	mov	r4,sp
  8124e8:	800b883a 	mov	r5,r16
  8124ec:	da479615 	stw	r9,7768(sp)
  8124f0:	080e3300 	call	80e330 <mad_bit_read>
  8124f4:	9c06983a 	sll	r3,r19,r16
	cachesz   += bits;
	bits_left -= bits;
  8124f8:	d9876217 	ldw	r6,7560(sp)

      if (cachesz < 21) {
	unsigned int bits;

	bits       = ((32 - 1 - 21) + (21 - cachesz)) & ~7;
	bitcache   = (bitcache << bits) | mad_bit_read(&peek, bits);
  8124fc:	da479617 	ldw	r9,7768(sp)
	cachesz   += bits;
  812500:	8c23883a 	add	r17,r17,r16
	bits_left -= bits;
  812504:	340dc83a 	sub	r6,r6,r16

      if (cachesz < 21) {
	unsigned int bits;

	bits       = ((32 - 1 - 21) + (21 - cachesz)) & ~7;
	bitcache   = (bitcache << bits) | mad_bit_read(&peek, bits);
  812508:	18a6b03a 	or	r19,r3,r2
	cachesz   += bits;
	bits_left -= bits;
  81250c:	d9876215 	stw	r6,7560(sp)
  812510:	003eb206 	br	811fdc <III_decode+0x430>
	value = pair->value.x;

	if (value == 0)
	  xrptr[0] = 0;
	else {
	  if (reqhits & (1 << value))
  812514:	02000044 	movi	r8,1
  812518:	40ce983a 	sll	r7,r8,r3
  81251c:	49c4703a 	and	r2,r9,r7
  812520:	10004e26 	beq	r2,zero,81265c <III_decode+0xab0>
	    requantized = reqcache[value];
  812524:	18c5883a 	add	r2,r3,r3
  812528:	1085883a 	add	r2,r2,r2
  81252c:	16c5883a 	add	r2,r2,sp
  812530:	10c00e17 	ldw	r3,56(r2)
	  else {
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
	  }

	  xrptr[0] = MASK1BIT(bitcache, cachesz--) ?
  812534:	8c7fffc4 	addi	r17,r17,-1
  812538:	01000044 	movi	r4,1
  81253c:	2444983a 	sll	r2,r4,r17
  812540:	9884703a 	and	r2,r19,r2
  812544:	10000126 	beq	r2,zero,81254c <III_decode+0x9a0>
  812548:	00c7c83a 	sub	r3,zero,r3
  81254c:	a0c00015 	stw	r3,0(r20)
  812550:	003f9a06 	br	8123bc <III_decode+0x810>

	value = pair->value.x;

	switch (value) {
	case 0:
	  xrptr[0] = 0;
  812554:	a0000015 	stw	zero,0(r20)
  812558:	003ed806 	br	8120bc <III_decode+0x510>
      union huffquad const *quad;

      /* hcod (1..6) */

      if (cachesz < 10) {
	bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
  81255c:	d809883a 	mov	r4,sp
  812560:	01400404 	movi	r5,16
  812564:	080e3300 	call	80e330 <mad_bit_read>
  812568:	9806943a 	slli	r3,r19,16
	cachesz   += 16;
	bits_left -= 16;
  81256c:	d9076217 	ldw	r4,7560(sp)

      /* hcod (1..6) */

      if (cachesz < 10) {
	bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	cachesz   += 16;
  812570:	8c400404 	addi	r17,r17,16
      union huffquad const *quad;

      /* hcod (1..6) */

      if (cachesz < 10) {
	bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
  812574:	18a6b03a 	or	r19,r3,r2
	cachesz   += 16;
	bits_left -= 16;
  812578:	213ffc04 	addi	r4,r4,-16
  81257c:	d9076215 	stw	r4,7560(sp)
  812580:	003f2f06 	br	812240 <III_decode+0x694>
      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;

	/* change table if region boundary */

	if (--rcount == 0) {
  812584:	d8c76417 	ldw	r3,7568(sp)
      union huffpair const *pair;
      unsigned int clumpsz, value;
      register mad_fixed_t requantized;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  812588:	d9476017 	ldw	r5,7552(sp)

	/* change table if region boundary */

	if (--rcount == 0) {
  81258c:	18ffffc4 	addi	r3,r3,-1
  812590:	d8c76415 	stw	r3,7568(sp)
      union huffpair const *pair;
      unsigned int clumpsz, value;
      register mad_fixed_t requantized;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  812594:	29000003 	ldbu	r4,0(r5)

	/* change table if region boundary */

	if (--rcount == 0) {
  812598:	1800181e 	bne	r3,zero,8125fc <III_decode+0xa50>
	  if (region == 0)
  81259c:	d9876317 	ldw	r6,7564(sp)
  8125a0:	3000041e 	bne	r6,zero,8125b4 <III_decode+0xa08>
	    rcount = channel->region1_count + 1;
  8125a4:	da876917 	ldw	r10,7588(sp)
  8125a8:	50800443 	ldbu	r2,17(r10)
  8125ac:	10800044 	addi	r2,r2,1
  8125b0:	d8876415 	stw	r2,7568(sp)
	  else
	    rcount = 0;  /* all remaining */

	  entry     = &mad_huff_pair_table[channel->table_select[++region]];
  8125b4:	dac76317 	ldw	r11,7564(sp)
  8125b8:	db076917 	ldw	r12,7588(sp)
  8125bc:	03c020f4 	movhi	r15,131
  8125c0:	7bcfd404 	addi	r15,r15,16208
  8125c4:	5ac00044 	addi	r11,r11,1
  8125c8:	5b07883a 	add	r3,r11,r12
  8125cc:	dac76315 	stw	r11,7564(sp)
  8125d0:	18800283 	ldbu	r2,10(r3)
  8125d4:	100490fa 	slli	r2,r2,3
  8125d8:	13c5883a 	add	r2,r2,r15
	  table     = entry->table;
  8125dc:	15400017 	ldw	r21,0(r2)
	  linbits   = entry->linbits;
	  startbits = entry->startbits;
  8125e0:	10c0018b 	ldhu	r3,6(r2)
	  else
	    rcount = 0;  /* all remaining */

	  entry     = &mad_huff_pair_table[channel->table_select[++region]];
	  table     = entry->table;
	  linbits   = entry->linbits;
  8125e4:	1080010b 	ldhu	r2,4(r2)
	  startbits = entry->startbits;

	  if (table == 0)
  8125e8:	a8040326 	beq	r21,zero,8135f8 <III_decode+0x1a4c>
	  else
	    rcount = 0;  /* all remaining */

	  entry     = &mad_huff_pair_table[channel->table_select[++region]];
	  table     = entry->table;
	  linbits   = entry->linbits;
  8125ec:	10bfffcc 	andi	r2,r2,65535
	  startbits = entry->startbits;
  8125f0:	18ffffcc 	andi	r3,r3,65535
	  else
	    rcount = 0;  /* all remaining */

	  entry     = &mad_huff_pair_table[channel->table_select[++region]];
	  table     = entry->table;
	  linbits   = entry->linbits;
  8125f4:	d8876515 	stw	r2,7572(sp)
	  startbits = entry->startbits;
  8125f8:	d8c76615 	stw	r3,7576(sp)

	  if (table == 0)
	    return MAD_ERROR_BADHUFFTABLE;
	}

	if (exp != *expptr) {
  8125fc:	dc876117 	ldw	r18,7556(sp)
  812600:	90c00017 	ldw	r3,0(r18)
  812604:	b0c00126 	beq	r22,r3,81260c <III_decode+0xa60>
  812608:	0013883a 	mov	r9,zero
      union huffpair const *pair;
      unsigned int clumpsz, value;
      register mad_fixed_t requantized;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  81260c:	20803fcc 	andi	r2,r4,255
  812610:	1085883a 	add	r2,r2,r2
  812614:	1085883a 	add	r2,r2,r2
	if (exp != *expptr) {
	  exp = *expptr;
	  reqhits = 0;
	}

	++expptr;
  812618:	d9076117 	ldw	r4,7556(sp)
      union huffpair const *pair;
      unsigned int clumpsz, value;
      register mad_fixed_t requantized;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  81261c:	b8af883a 	add	r23,r23,r2
  812620:	d8876017 	ldw	r2,7552(sp)
	if (exp != *expptr) {
	  exp = *expptr;
	  reqhits = 0;
	}

	++expptr;
  812624:	21000104 	addi	r4,r4,4
  812628:	182d883a 	mov	r22,r3
      union huffpair const *pair;
      unsigned int clumpsz, value;
      register mad_fixed_t requantized;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  81262c:	10800044 	addi	r2,r2,1
  812630:	d8876015 	stw	r2,7552(sp)
	if (exp != *expptr) {
	  exp = *expptr;
	  reqhits = 0;
	}

	++expptr;
  812634:	d9076115 	stw	r4,7556(sp)
  812638:	003e6606 	br	811fd4 <III_decode+0x428>
	++expptr;
      }

      /* x (0..1) */

      xrptr[0] = quad->value.x ?
  81263c:	0405c83a 	sub	r2,zero,r16
  812640:	003ef206 	br	81220c <III_decode+0x660>
      xrptr[0] = quad->value.v ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* w (0..1) */

      xrptr[1] = quad->value.w ?
  812644:	0407c83a 	sub	r3,zero,r16
  812648:	003ee506 	br	8121e0 <III_decode+0x634>
	++expptr;
      }

      /* v (0..1) */

      xrptr[0] = quad->value.v ?
  81264c:	0405c83a 	sub	r2,zero,r16
  812650:	003f1c06 	br	8122c4 <III_decode+0x718>
      xrptr[0] = quad->value.x ?
	(MASK1BIT(bitcache, cachesz--) ? -requantized : requantized) : 0;

      /* y (0..1) */

      xrptr[1] = quad->value.y ?
  812654:	0407c83a 	sub	r3,zero,r16
  812658:	003ef106 	br	812220 <III_decode+0x674>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  81265c:	00a00034 	movhi	r2,32768
  812660:	108000c4 	addi	r2,r2,3
  812664:	b08a703a 	and	r5,r22,r2
  812668:	28018d16 	blt	r5,zero,812ca0 <III_decode+0x10f4>
  exp /= 4;
  81266c:	b009883a 	mov	r4,r22
  812670:	b0019116 	blt	r22,zero,812cb8 <III_decode+0x110c>

  power = &rq_table[value];
  812674:	18cd883a 	add	r6,r3,r3
  812678:	3185883a 	add	r2,r6,r6
  81267c:	028020f4 	movhi	r10,131
  812680:	52956304 	addi	r10,r10,21900
  812684:	1285883a 	add	r2,r2,r10
  requantized = power->mantissa;
  812688:	10c00017 	ldw	r3,0(r2)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  81268c:	2009d0ba 	srai	r4,r4,2

  power = &rq_table[value];
  requantized = power->mantissa;
  812690:	02c20034 	movhi	r11,2048
  812694:	5affffc4 	addi	r11,r11,-1
  exp += power->exponent;
  812698:	1804d6fa 	srli	r2,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  81269c:	1ac6703a 	and	r3,r3,r11
  exp += power->exponent;
  8126a0:	2085883a 	add	r2,r4,r2

  if (exp < 0) {
  8126a4:	10018616 	blt	r2,zero,812cc0 <III_decode+0x1114>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  8126a8:	03c00104 	movi	r15,4
  8126ac:	7881090e 	bge	r15,r2,812ad4 <III_decode+0xf28>
  8126b0:	00e00034 	movhi	r3,32768
  8126b4:	18ffffc4 	addi	r3,r3,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  8126b8:	28000826 	beq	r5,zero,8126dc <III_decode+0xb30>
  8126bc:	2945883a 	add	r2,r5,r5
  8126c0:	1085883a 	add	r2,r2,r2
  8126c4:	04802134 	movhi	r18,132
  8126c8:	94b57204 	addi	r18,r18,-10808
  8126cc:	1485883a 	add	r2,r2,r18
  8126d0:	1809d33a 	srai	r4,r3,12
  8126d4:	10c0038f 	ldh	r3,14(r2)
  8126d8:	20c7383a 	mul	r3,r4,r3
	else {
	  if (reqhits & (1 << value))
	    requantized = reqcache[value];
	  else {
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
  8126dc:	3185883a 	add	r2,r6,r6
  8126e0:	16c5883a 	add	r2,r2,sp
	  xrptr[0] = 0;
	else {
	  if (reqhits & (1 << value))
	    requantized = reqcache[value];
	  else {
	    reqhits |= (1 << value);
  8126e4:	49d2b03a 	or	r9,r9,r7
	    requantized = reqcache[value] = III_requantize(value, exp);
  8126e8:	10c00e15 	stw	r3,56(r2)
  8126ec:	003f9106 	br	812534 <III_decode+0x988>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  8126f0:	01a00034 	movhi	r6,32768
  8126f4:	318000c4 	addi	r6,r6,3
  8126f8:	b18a703a 	and	r5,r22,r6
  8126fc:	28016316 	blt	r5,zero,812c8c <III_decode+0x10e0>
  exp /= 4;
  812700:	b009883a 	mov	r4,r22
  812704:	b0015f16 	blt	r22,zero,812c84 <III_decode+0x10d8>

  power = &rq_table[value];
  812708:	18cd883a 	add	r6,r3,r3
  81270c:	3185883a 	add	r2,r6,r6
  812710:	02c020f4 	movhi	r11,131
  812714:	5ad56304 	addi	r11,r11,21900
  812718:	12c5883a 	add	r2,r2,r11
  requantized = power->mantissa;
  81271c:	10c00017 	ldw	r3,0(r2)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  812720:	2009d0ba 	srai	r4,r4,2

  power = &rq_table[value];
  requantized = power->mantissa;
  812724:	03020034 	movhi	r12,2048
  812728:	633fffc4 	addi	r12,r12,-1
  exp += power->exponent;
  81272c:	1804d6fa 	srli	r2,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  812730:	1b06703a 	and	r3,r3,r12
  exp += power->exponent;
  812734:	2085883a 	add	r2,r4,r2

  if (exp < 0) {
  812738:	10017216 	blt	r2,zero,812d04 <III_decode+0x1158>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  81273c:	04800104 	movi	r18,4
  812740:	9080e60e 	bge	r18,r2,812adc <III_decode+0xf30>
  812744:	00e00034 	movhi	r3,32768
  812748:	18ffffc4 	addi	r3,r3,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  81274c:	28000826 	beq	r5,zero,812770 <III_decode+0xbc4>
  812750:	2945883a 	add	r2,r5,r5
  812754:	01002134 	movhi	r4,132
  812758:	21357204 	addi	r4,r4,-10808
  81275c:	1085883a 	add	r2,r2,r2
  812760:	1105883a 	add	r2,r2,r4
  812764:	1809d33a 	srai	r4,r3,12
  812768:	10c0038f 	ldh	r3,14(r2)
  81276c:	20c7383a 	mul	r3,r4,r3
	else {
	  if (reqhits & (1 << value))
	    requantized = reqcache[value];
	  else {
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
  812770:	3185883a 	add	r2,r6,r6
  812774:	16c5883a 	add	r2,r2,sp
	  xrptr[1] = 0;
	else {
	  if (reqhits & (1 << value))
	    requantized = reqcache[value];
	  else {
	    reqhits |= (1 << value);
  812778:	49d2b03a 	or	r9,r9,r7
	    requantized = reqcache[value] = III_requantize(value, exp);
  81277c:	10c00e15 	stw	r3,56(r2)
  812780:	003f1a06 	br	8123ec <III_decode+0x840>
      cachesz -= quad->value.hlen;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;

	if (exp != *expptr) {
  812784:	d9476117 	ldw	r5,7556(sp)
      }

      cachesz -= quad->value.hlen;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  812788:	da876017 	ldw	r10,7552(sp)

	if (exp != *expptr) {
  81278c:	2a400017 	ldw	r9,0(r5)
      }

      cachesz -= quad->value.hlen;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  812790:	52c00003 	ldbu	r11,0(r10)

	if (exp != *expptr) {
  812794:	b2401d26 	beq	r22,r9,81280c <III_decode+0xc60>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812798:	00a00034 	movhi	r2,32768
  81279c:	108000c4 	addi	r2,r2,3
  8127a0:	4890703a 	and	r8,r9,r2
  8127a4:	40024816 	blt	r8,zero,8130c8 <III_decode+0x151c>
  exp /= 4;
  8127a8:	480b883a 	mov	r5,r9
  8127ac:	48023616 	blt	r9,zero,813088 <III_decode+0x14dc>

  power = &rq_table[value];
  requantized = power->mantissa;
  8127b0:	030020f4 	movhi	r12,131
  8127b4:	63156404 	addi	r12,r12,21904
  8127b8:	60c00017 	ldw	r3,0(r12)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  8127bc:	280bd0ba 	srai	r5,r5,2

  power = &rq_table[value];
  requantized = power->mantissa;
  8127c0:	00820034 	movhi	r2,2048
  8127c4:	10bfffc4 	addi	r2,r2,-1
  exp += power->exponent;
  8127c8:	1808d6fa 	srli	r4,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  8127cc:	1894703a 	and	r10,r3,r2
  exp += power->exponent;
  8127d0:	2907883a 	add	r3,r5,r4

  if (exp < 0) {
  8127d4:	18023716 	blt	r3,zero,8130b4 <III_decode+0x1508>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  8127d8:	00800104 	movi	r2,4
  8127dc:	10c1190e 	bge	r2,r3,812c44 <III_decode+0x1098>
  8127e0:	04200034 	movhi	r16,32768
  8127e4:	843fffc4 	addi	r16,r16,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  8127e8:	40000826 	beq	r8,zero,81280c <III_decode+0xc60>
  8127ec:	4205883a 	add	r2,r8,r8
  8127f0:	1085883a 	add	r2,r2,r2
  8127f4:	03c02134 	movhi	r15,132
  8127f8:	7bf57204 	addi	r15,r15,-10808
  8127fc:	13c5883a 	add	r2,r2,r15
  812800:	8009d33a 	srai	r4,r16,12
  812804:	10c0038f 	ldh	r3,14(r2)
  812808:	20e1383a 	mul	r16,r4,r3
      }

      cachesz -= quad->value.hlen;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  81280c:	58803fcc 	andi	r2,r11,255
  812810:	1085883a 	add	r2,r2,r2
  812814:	1085883a 	add	r2,r2,r2
	if (exp != *expptr) {
	  exp = *expptr;
	  requantized = III_requantize(1, exp);
	}

	++expptr;
  812818:	d8c76117 	ldw	r3,7556(sp)
      }

      cachesz -= quad->value.hlen;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  81281c:	b8af883a 	add	r23,r23,r2
  812820:	d8876017 	ldw	r2,7552(sp)
	if (exp != *expptr) {
	  exp = *expptr;
	  requantized = III_requantize(1, exp);
	}

	++expptr;
  812824:	18c00104 	addi	r3,r3,4
  812828:	482d883a 	mov	r22,r9
      }

      cachesz -= quad->value.hlen;

      if (xrptr == sfbound) {
	sfbound += *sfbwidth++;
  81282c:	10800044 	addi	r2,r2,1
  812830:	d8876015 	stw	r2,7552(sp)
	if (exp != *expptr) {
	  exp = *expptr;
	  requantized = III_requantize(1, exp);
	}

	++expptr;
  812834:	d8c76115 	stw	r3,7556(sp)
  812838:	003e9b06 	br	8122a8 <III_decode+0x6fc>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  81283c:	03200034 	movhi	r12,32768
  812840:	630000c4 	addi	r12,r12,3
  812844:	b30c703a 	and	r6,r22,r12
  812848:	3001f816 	blt	r6,zero,81302c <III_decode+0x1480>
  exp /= 4;
  81284c:	b009883a 	mov	r4,r22
  812850:	b001fc16 	blt	r22,zero,813044 <III_decode+0x1498>

  power = &rq_table[value];
  812854:	840f883a 	add	r7,r16,r16
  812858:	39c5883a 	add	r2,r7,r7
  81285c:	048020f4 	movhi	r18,131
  812860:	94956304 	addi	r18,r18,21900
  812864:	1485883a 	add	r2,r2,r18
  requantized = power->mantissa;
  812868:	10c00017 	ldw	r3,0(r2)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  81286c:	2009d0ba 	srai	r4,r4,2

  power = &rq_table[value];
  requantized = power->mantissa;
  812870:	02820034 	movhi	r10,2048
  812874:	52bfffc4 	addi	r10,r10,-1
  exp += power->exponent;
  812878:	1804d6fa 	srli	r2,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  81287c:	1a86703a 	and	r3,r3,r10
  exp += power->exponent;
  812880:	2085883a 	add	r2,r4,r2

  if (exp < 0) {
  812884:	1001fb16 	blt	r2,zero,813074 <III_decode+0x14c8>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  812888:	03000104 	movi	r12,4
  81288c:	6080eb0e 	bge	r12,r2,812c3c <III_decode+0x1090>
  812890:	00e00034 	movhi	r3,32768
  812894:	18ffffc4 	addi	r3,r3,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  812898:	30000826 	beq	r6,zero,8128bc <III_decode+0xd10>
  81289c:	3185883a 	add	r2,r6,r6
  8128a0:	1085883a 	add	r2,r2,r2
  8128a4:	03c02134 	movhi	r15,132
  8128a8:	7bf57204 	addi	r15,r15,-10808
  8128ac:	13c5883a 	add	r2,r2,r15
  8128b0:	1809d33a 	srai	r4,r3,12
  8128b4:	10c0038f 	ldh	r3,14(r2)
  8128b8:	20c7383a 	mul	r3,r4,r3
	default:
	  if (reqhits & (1 << value))
	    requantized = reqcache[value];
	  else {
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
  8128bc:	39c5883a 	add	r2,r7,r7
  8128c0:	16c5883a 	add	r2,r2,sp

	default:
	  if (reqhits & (1 << value))
	    requantized = reqcache[value];
	  else {
	    reqhits |= (1 << value);
  8128c4:	4a12b03a 	or	r9,r9,r8
	    requantized = reqcache[value] = III_requantize(value, exp);
  8128c8:	10c00e15 	stw	r3,56(r2)
  8128cc:	003e0906 	br	8120f4 <III_decode+0x548>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  8128d0:	03200034 	movhi	r12,32768
  8128d4:	630000c4 	addi	r12,r12,3
  8128d8:	b30c703a 	and	r6,r22,r12
  8128dc:	3001dd16 	blt	r6,zero,813054 <III_decode+0x14a8>
  exp /= 4;
  8128e0:	b009883a 	mov	r4,r22
  8128e4:	b001d916 	blt	r22,zero,81304c <III_decode+0x14a0>

  power = &rq_table[value];
  8128e8:	948f883a 	add	r7,r18,r18
  8128ec:	39c5883a 	add	r2,r7,r7
  8128f0:	048020f4 	movhi	r18,131
  8128f4:	94956304 	addi	r18,r18,21900
  8128f8:	1485883a 	add	r2,r2,r18
  requantized = power->mantissa;
  8128fc:	10c00017 	ldw	r3,0(r2)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  812900:	2009d0ba 	srai	r4,r4,2

  power = &rq_table[value];
  requantized = power->mantissa;
  812904:	02820034 	movhi	r10,2048
  812908:	52bfffc4 	addi	r10,r10,-1
  exp += power->exponent;
  81290c:	1804d6fa 	srli	r2,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  812910:	1a86703a 	and	r3,r3,r10
  exp += power->exponent;
  812914:	2085883a 	add	r2,r4,r2

  if (exp < 0) {
  812918:	1001bf16 	blt	r2,zero,813018 <III_decode+0x146c>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  81291c:	03000104 	movi	r12,4
  812920:	6080c40e 	bge	r12,r2,812c34 <III_decode+0x1088>
  812924:	00e00034 	movhi	r3,32768
  812928:	18ffffc4 	addi	r3,r3,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  81292c:	30000826 	beq	r6,zero,812950 <III_decode+0xda4>
  812930:	3185883a 	add	r2,r6,r6
  812934:	1085883a 	add	r2,r2,r2
  812938:	03c02134 	movhi	r15,132
  81293c:	7bf57204 	addi	r15,r15,-10808
  812940:	13c5883a 	add	r2,r2,r15
  812944:	1809d33a 	srai	r4,r3,12
  812948:	10c0038f 	ldh	r3,14(r2)
  81294c:	20c7383a 	mul	r3,r4,r3
	default:
	  if (reqhits & (1 << value))
	    requantized = reqcache[value];
	  else {
	    reqhits |= (1 << value);
	    requantized = reqcache[value] = III_requantize(value, exp);
  812950:	39c5883a 	add	r2,r7,r7
  812954:	16c5883a 	add	r2,r2,sp

	default:
	  if (reqhits & (1 << value))
	    requantized = reqcache[value];
	  else {
	    reqhits |= (1 << value);
  812958:	4a12b03a 	or	r9,r9,r8
	    requantized = reqcache[value] = III_requantize(value, exp);
  81295c:	10c00e15 	stw	r3,56(r2)
  812960:	003dcf06 	br	8120a0 <III_decode+0x4f4>
	case 0:
	  xrptr[1] = 0;
	  break;

	case 15:
	  if (cachesz < linbits + 1) {
  812964:	d8c76517 	ldw	r3,7572(sp)
  812968:	8809883a 	mov	r4,r17
  81296c:	04800044 	movi	r18,1
  812970:	18800044 	addi	r2,r3,1
  812974:	88817336 	bltu	r17,r2,812f44 <III_decode+0x1398>
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
	  }

	  value += MASK(bitcache, cachesz, linbits);
  812978:	da876517 	ldw	r10,7572(sp)
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  81297c:	01600034 	movhi	r5,32768
  812980:	294000c4 	addi	r5,r5,3
  812984:	b14c703a 	and	r6,r22,r5
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
	  }

	  value += MASK(bitcache, cachesz, linbits);
  812988:	22a3c83a 	sub	r17,r4,r10
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  81298c:	30017e16 	blt	r6,zero,812f88 <III_decode+0x13dc>
  exp /= 4;
  812990:	b00b883a 	mov	r5,r22
  812994:	b0018216 	blt	r22,zero,812fa0 <III_decode+0x13f4>

  power = &rq_table[value];
  812998:	db076517 	ldw	r12,7572(sp)
  81299c:	9c44d83a 	srl	r2,r19,r17
  8129a0:	03c020f4 	movhi	r15,131
  8129a4:	7bd56304 	addi	r15,r15,21900
  8129a8:	9306983a 	sll	r3,r18,r12
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  8129ac:	280bd0ba 	srai	r5,r5,2

  power = &rq_table[value];
  8129b0:	18ffffc4 	addi	r3,r3,-1
  8129b4:	10c4703a 	and	r2,r2,r3
  8129b8:	1405883a 	add	r2,r2,r16
  8129bc:	1085883a 	add	r2,r2,r2
  8129c0:	1085883a 	add	r2,r2,r2
  8129c4:	13c5883a 	add	r2,r2,r15
  requantized = power->mantissa;
  8129c8:	10c00017 	ldw	r3,0(r2)
  8129cc:	00820034 	movhi	r2,2048
  8129d0:	10bfffc4 	addi	r2,r2,-1
  exp += power->exponent;
  8129d4:	1808d6fa 	srli	r4,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  8129d8:	1886703a 	and	r3,r3,r2
  exp += power->exponent;
  8129dc:	2905883a 	add	r2,r5,r4

  if (exp < 0) {
  8129e0:	1001d916 	blt	r2,zero,813148 <III_decode+0x159c>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  8129e4:	02800104 	movi	r10,4
  8129e8:	5080a20e 	bge	r10,r2,812c74 <III_decode+0x10c8>
  8129ec:	00e00034 	movhi	r3,32768
  8129f0:	18ffffc4 	addi	r3,r3,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  8129f4:	303dbf26 	beq	r6,zero,8120f4 <III_decode+0x548>
  8129f8:	3185883a 	add	r2,r6,r6
  8129fc:	1085883a 	add	r2,r2,r2
  812a00:	02c02134 	movhi	r11,132
  812a04:	5af57204 	addi	r11,r11,-10808
  812a08:	12c5883a 	add	r2,r2,r11
  812a0c:	1809d33a 	srai	r4,r3,12
  812a10:	10c0038f 	ldh	r3,14(r2)
  812a14:	20c7383a 	mul	r3,r4,r3
  812a18:	003db606 	br	8120f4 <III_decode+0x548>
	case 0:
	  xrptr[0] = 0;
	  break;

	case 15:
	  if (cachesz < linbits + 2) {
  812a1c:	dbc76517 	ldw	r15,7572(sp)
  812a20:	8809883a 	mov	r4,r17
  812a24:	78800084 	addi	r2,r15,2
  812a28:	88815f36 	bltu	r17,r2,812fa8 <III_decode+0x13fc>
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
	  }

	  value += MASK(bitcache, cachesz, linbits);
  812a2c:	da876517 	ldw	r10,7572(sp)
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812a30:	01600034 	movhi	r5,32768
  812a34:	294000c4 	addi	r5,r5,3
  812a38:	b14c703a 	and	r6,r22,r5
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
	  }

	  value += MASK(bitcache, cachesz, linbits);
  812a3c:	22a3c83a 	sub	r17,r4,r10
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812a40:	30016a16 	blt	r6,zero,812fec <III_decode+0x1440>
  exp /= 4;
  812a44:	b00b883a 	mov	r5,r22
  812a48:	b0016e16 	blt	r22,zero,813004 <III_decode+0x1458>

  power = &rq_table[value];
  812a4c:	db076517 	ldw	r12,7572(sp)
  812a50:	01c00044 	movi	r7,1
  812a54:	9c44d83a 	srl	r2,r19,r17
  812a58:	3b06983a 	sll	r3,r7,r12
  812a5c:	03c020f4 	movhi	r15,131
  812a60:	7bd56304 	addi	r15,r15,21900
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  812a64:	280bd0ba 	srai	r5,r5,2

  power = &rq_table[value];
  812a68:	18ffffc4 	addi	r3,r3,-1
  812a6c:	10c4703a 	and	r2,r2,r3
  812a70:	1485883a 	add	r2,r2,r18
  812a74:	1085883a 	add	r2,r2,r2
  812a78:	1085883a 	add	r2,r2,r2
  812a7c:	13c5883a 	add	r2,r2,r15
  requantized = power->mantissa;
  812a80:	10c00017 	ldw	r3,0(r2)
  812a84:	04820034 	movhi	r18,2048
  812a88:	94bfffc4 	addi	r18,r18,-1
  exp += power->exponent;
  812a8c:	1808d6fa 	srli	r4,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  812a90:	1c86703a 	and	r3,r3,r18
  exp += power->exponent;
  812a94:	2905883a 	add	r2,r5,r4

  if (exp < 0) {
  812a98:	1001a616 	blt	r2,zero,813134 <III_decode+0x1588>
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
    }
  }
  else {
    if (exp >= 5) {
  812a9c:	02800104 	movi	r10,4
  812aa0:	5080720e 	bge	r10,r2,812c6c <III_decode+0x10c0>
  812aa4:	00e00034 	movhi	r3,32768
  812aa8:	18ffffc4 	addi	r3,r3,-1
    }
    else
      requantized <<= exp;
  }

  return frac ? mad_f_mul(requantized, root_table[3 + frac]) : requantized;
  812aac:	303d7c26 	beq	r6,zero,8120a0 <III_decode+0x4f4>
  812ab0:	3185883a 	add	r2,r6,r6
  812ab4:	1085883a 	add	r2,r2,r2
  812ab8:	02c02134 	movhi	r11,132
  812abc:	5af57204 	addi	r11,r11,-10808
  812ac0:	12c5883a 	add	r2,r2,r11
  812ac4:	1809d33a 	srai	r4,r3,12
  812ac8:	10c0038f 	ldh	r3,14(r2)
  812acc:	20c7383a 	mul	r3,r4,r3
  812ad0:	003d7306 	br	8120a0 <III_decode+0x4f4>
	      mad_f_todouble(requantized), exp);
# endif
      requantized = MAD_F_MAX;
    }
    else
      requantized <<= exp;
  812ad4:	1886983a 	sll	r3,r3,r2
  812ad8:	003ef706 	br	8126b8 <III_decode+0xb0c>
  812adc:	1886983a 	sll	r3,r3,r2
  812ae0:	003f1a06 	br	81274c <III_decode+0xba0>
	part2_length = III_scalefactors_lsf(ptr, channel,
					    ch == 0 ? 0 : &si->gr[1].ch[1],
					    header->mode_extension);
      }
      else {
	part2_length = III_scalefactors(ptr, channel, &si->gr[0].ch[ch],
  812ae4:	dbc76b17 	ldw	r15,7596(sp)
  812ae8:	78015f1e 	bne	r15,zero,813068 <III_decode+0x14bc>
  812aec:	0023883a 	mov	r17,zero
  struct mad_bitptr start;
  unsigned int slen1, slen2, sfbi;

  start = *ptr;

  slen1 = sflen_table[channel->scalefac_compress].slen1;
  812af0:	d8c76917 	ldw	r3,7588(sp)
			      struct channel const *gr0ch, unsigned int scfsi)
{
  struct mad_bitptr start;
  unsigned int slen1, slen2, sfbi;

  start = *ptr;
  812af4:	d9076f17 	ldw	r4,7612(sp)

  slen1 = sflen_table[channel->scalefac_compress].slen1;
  812af8:	1880018b 	ldhu	r2,6(r3)
  slen2 = sflen_table[channel->scalefac_compress].slen2;

  if (channel->block_type == 2) {
  812afc:	19c00243 	ldbu	r7,9(r3)
			      struct channel const *gr0ch, unsigned int scfsi)
{
  struct mad_bitptr start;
  unsigned int slen1, slen2, sfbi;

  start = *ptr;
  812b00:	2140010b 	ldhu	r5,4(r4)
  812b04:	21800017 	ldw	r6,0(r4)
  812b08:	2100018b 	ldhu	r4,6(r4)

  slen1 = sflen_table[channel->scalefac_compress].slen1;
  812b0c:	00c020f4 	movhi	r3,131
  812b10:	18d55504 	addi	r3,r3,21844
  812b14:	1085883a 	add	r2,r2,r2
  812b18:	10c5883a 	add	r2,r2,r3
  slen2 = sflen_table[channel->scalefac_compress].slen2;

  if (channel->block_type == 2) {
  812b1c:	00c00084 	movi	r3,2
			      struct channel const *gr0ch, unsigned int scfsi)
{
  struct mad_bitptr start;
  unsigned int slen1, slen2, sfbi;

  start = *ptr;
  812b20:	d900018d 	sth	r4,6(sp)
  812b24:	d940010d 	sth	r5,4(sp)
  812b28:	d9800015 	stw	r6,0(sp)

  slen1 = sflen_table[channel->scalefac_compress].slen1;
  slen2 = sflen_table[channel->scalefac_compress].slen2;
  812b2c:	15000043 	ldbu	r20,1(r2)
  struct mad_bitptr start;
  unsigned int slen1, slen2, sfbi;

  start = *ptr;

  slen1 = sflen_table[channel->scalefac_compress].slen1;
  812b30:	14800003 	ldbu	r18,0(r2)
  slen2 = sflen_table[channel->scalefac_compress].slen2;

  if (channel->block_type == 2) {
  812b34:	38c24326 	beq	r7,r3,813444 <III_decode+0x1898>
	part2_length = III_scalefactors_lsf(ptr, channel,
					    ch == 0 ? 0 : &si->gr[1].ch[1],
					    header->mode_extension);
      }
      else {
	part2_length = III_scalefactors(ptr, channel, &si->gr[0].ch[ch],
  812b38:	dac77117 	ldw	r11,7620(sp)
  812b3c:	db074e17 	ldw	r12,7480(sp)
    nsfb = 1 * 3;
    while (nsfb--)
      channel->scalefac[sfbi++] = 0;
  }
  else {  /* channel->block_type != 2 */
    if (scfsi & 0x8) {
  812b40:	88c0020c 	andi	r3,r17,8
	part2_length = III_scalefactors_lsf(ptr, channel,
					    ch == 0 ? 0 : &si->gr[1].ch[1],
					    header->mode_extension);
      }
      else {
	part2_length = III_scalefactors(ptr, channel, &si->gr[0].ch[ch],
  812b44:	58800284 	addi	r2,r11,10
  812b48:	1321883a 	add	r16,r2,r12
    nsfb = 1 * 3;
    while (nsfb--)
      channel->scalefac[sfbi++] = 0;
  }
  else {  /* channel->block_type != 2 */
    if (scfsi & 0x8) {
  812b4c:	1801f026 	beq	r3,zero,813310 <III_decode+0x1764>
      for (sfbi = 0; sfbi < 6; ++sfbi)
	channel->scalefac[sfbi] = gr0ch->scalefac[sfbi];
  812b50:	80800483 	ldbu	r2,18(r16)
  812b54:	dbc76917 	ldw	r15,7588(sp)
  812b58:	78800485 	stb	r2,18(r15)
  812b5c:	80c004c3 	ldbu	r3,19(r16)
  812b60:	78c004c5 	stb	r3,19(r15)
  812b64:	80800503 	ldbu	r2,20(r16)
  812b68:	78800505 	stb	r2,20(r15)
  812b6c:	80c00543 	ldbu	r3,21(r16)
  812b70:	78c00545 	stb	r3,21(r15)
  812b74:	80800583 	ldbu	r2,22(r16)
  812b78:	78800585 	stb	r2,22(r15)
  812b7c:	80c005c3 	ldbu	r3,23(r16)
  812b80:	78c005c5 	stb	r3,23(r15)
    else {
      for (sfbi = 0; sfbi < 6; ++sfbi)
	channel->scalefac[sfbi] = mad_bit_read(ptr, slen1);
    }

    if (scfsi & 0x4) {
  812b84:	8880010c 	andi	r2,r17,4
  812b88:	1001c726 	beq	r2,zero,8132a8 <III_decode+0x16fc>
      for (sfbi = 6; sfbi < 11; ++sfbi)
	channel->scalefac[sfbi] = gr0ch->scalefac[sfbi];
  812b8c:	80800603 	ldbu	r2,24(r16)
  812b90:	db076917 	ldw	r12,7588(sp)
  812b94:	60800605 	stb	r2,24(r12)
  812b98:	80c00643 	ldbu	r3,25(r16)
  812b9c:	60c00645 	stb	r3,25(r12)
  812ba0:	80800683 	ldbu	r2,26(r16)
  812ba4:	60800685 	stb	r2,26(r12)
  812ba8:	80c006c3 	ldbu	r3,27(r16)
  812bac:	60c006c5 	stb	r3,27(r12)
  812bb0:	80800703 	ldbu	r2,28(r16)
  812bb4:	60800705 	stb	r2,28(r12)
    else {
      for (sfbi = 6; sfbi < 11; ++sfbi)
	channel->scalefac[sfbi] = mad_bit_read(ptr, slen1);
    }

    if (scfsi & 0x2) {
  812bb8:	8880008c 	andi	r2,r17,2
  812bbc:	1001a126 	beq	r2,zero,813244 <III_decode+0x1698>
      for (sfbi = 11; sfbi < 16; ++sfbi)
	channel->scalefac[sfbi] = gr0ch->scalefac[sfbi];
  812bc0:	80800743 	ldbu	r2,29(r16)
  812bc4:	da876917 	ldw	r10,7588(sp)
  812bc8:	50800745 	stb	r2,29(r10)
  812bcc:	80c00783 	ldbu	r3,30(r16)
  812bd0:	50c00785 	stb	r3,30(r10)
  812bd4:	808007c3 	ldbu	r2,31(r16)
  812bd8:	508007c5 	stb	r2,31(r10)
  812bdc:	80c00803 	ldbu	r3,32(r16)
  812be0:	50c00805 	stb	r3,32(r10)
  812be4:	80800843 	ldbu	r2,33(r16)
  812be8:	50800845 	stb	r2,33(r10)
    else {
      for (sfbi = 11; sfbi < 16; ++sfbi)
	channel->scalefac[sfbi] = mad_bit_read(ptr, slen2);
    }

    if (scfsi & 0x1) {
  812bec:	8880004c 	andi	r2,r17,1
  812bf0:	1005003a 	cmpeq	r2,r2,zero
  812bf4:	1001791e 	bne	r2,zero,8131dc <III_decode+0x1630>
      for (sfbi = 16; sfbi < 21; ++sfbi)
	channel->scalefac[sfbi] = gr0ch->scalefac[sfbi];
  812bf8:	80800883 	ldbu	r2,34(r16)
  812bfc:	d8c76917 	ldw	r3,7588(sp)
  812c00:	18800885 	stb	r2,34(r3)
  812c04:	80c008c3 	ldbu	r3,35(r16)
  812c08:	d9076917 	ldw	r4,7588(sp)
  812c0c:	20c008c5 	stb	r3,35(r4)
  812c10:	80800903 	ldbu	r2,36(r16)
  812c14:	20800905 	stb	r2,36(r4)
  812c18:	80c00943 	ldbu	r3,37(r16)
  812c1c:	20c00945 	stb	r3,37(r4)
  812c20:	80800983 	ldbu	r2,38(r16)
  812c24:	20800985 	stb	r2,38(r4)
    else {
      for (sfbi = 16; sfbi < 21; ++sfbi)
	channel->scalefac[sfbi] = mad_bit_read(ptr, slen2);
    }

    channel->scalefac[21] = 0;
  812c28:	dbc76917 	ldw	r15,7588(sp)
  812c2c:	780009c5 	stb	zero,39(r15)
  812c30:	003c8406 	br	811e44 <III_decode+0x298>
	      mad_f_todouble(requantized), exp);
# endif
      requantized = MAD_F_MAX;
    }
    else
      requantized <<= exp;
  812c34:	1886983a 	sll	r3,r3,r2
  812c38:	003f3c06 	br	81292c <III_decode+0xd80>
  812c3c:	1886983a 	sll	r3,r3,r2
  812c40:	003f1506 	br	812898 <III_decode+0xcec>
  812c44:	50e0983a 	sll	r16,r10,r3
  812c48:	003ee706 	br	8127e8 <III_decode+0xc3c>
  812c4c:	48e0983a 	sll	r16,r9,r3
  812c50:	003dc106 	br	812358 <III_decode+0x7ac>

      xrptr -= 4;
    }
  }

  assert(-bits_left <= MAD_BUFFER_GUARD * CHAR_BIT);
  812c54:	d9476217 	ldw	r5,7560(sp)
  812c58:	00801004 	movi	r2,64
# endif

      /* technically the bitstream is misformatted, but apparently
	 some encoders are just a bit sloppy with stuffing bits */

      xrptr -= 4;
  812c5c:	a53ffc04 	addi	r20,r20,-16
    }
  }

  assert(-bits_left <= MAD_BUFFER_GUARD * CHAR_BIT);
  812c60:	0147c83a 	sub	r3,zero,r5
  812c64:	10fe010e 	bge	r2,r3,81246c <III_decode+0x8c0>
  812c68:	08215400 	call	821540 <abort>
	      mad_f_todouble(requantized), exp);
# endif
      requantized = MAD_F_MAX;
    }
    else
      requantized <<= exp;
  812c6c:	1886983a 	sll	r3,r3,r2
  812c70:	003f8e06 	br	812aac <III_decode+0xf00>
  812c74:	1886983a 	sll	r3,r3,r2
  812c78:	003f5e06 	br	8129f4 <III_decode+0xe48>
  812c7c:	40e0983a 	sll	r16,r8,r3
  812c80:	003d4706 	br	8121a0 <III_decode+0x5f4>
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  812c84:	b10000c4 	addi	r4,r22,3
  812c88:	003e9f06 	br	812708 <III_decode+0xb5c>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812c8c:	297fffc4 	addi	r5,r5,-1
  812c90:	02bfff04 	movi	r10,-4
  812c94:	2a8ab03a 	or	r5,r5,r10
  812c98:	29400044 	addi	r5,r5,1
  812c9c:	003e9806 	br	812700 <III_decode+0xb54>
  812ca0:	013fff04 	movi	r4,-4
  812ca4:	297fffc4 	addi	r5,r5,-1
  812ca8:	290ab03a 	or	r5,r5,r4
  812cac:	29400044 	addi	r5,r5,1
  exp /= 4;
  812cb0:	b009883a 	mov	r4,r22
  812cb4:	b03e6f0e 	bge	r22,zero,812674 <III_decode+0xac8>
  812cb8:	b10000c4 	addi	r4,r22,3
  812cbc:	003e6d06 	br	812674 <III_decode+0xac8>
  power = &rq_table[value];
  requantized = power->mantissa;
  exp += power->exponent;

  if (exp < 0) {
    if (-exp >= sizeof(mad_fixed_t) * CHAR_BIT) {
  812cc0:	0089c83a 	sub	r4,zero,r2
  812cc4:	030007c4 	movi	r12,31
  812cc8:	61013a2e 	bgeu	r12,r4,8131b4 <III_decode+0x1608>
  812ccc:	0007883a 	mov	r3,zero
  812cd0:	003e7906 	br	8126b8 <III_decode+0xb0c>
      sfbi += 3;
    }
  }
  else {  /* channel->block_type != 2 */
    if (channel->flags & preflag) {
      for (sfbi = 0; sfbi < 22; ++sfbi) {
  812cd4:	d8c76917 	ldw	r3,7588(sp)
  812cd8:	db805604 	addi	r14,sp,344
  812cdc:	7009883a 	mov	r4,r14
  812ce0:	d9406c04 	addi	r5,sp,432
			scalefac_multiplier);
      }
    }
    else {
      for (sfbi = 0; sfbi < 22; ++sfbi) {
	exponents[sfbi] = gain -
  812ce4:	18800483 	ldbu	r2,18(r3)
  812ce8:	18c00044 	addi	r3,r3,1
  812cec:	11c4983a 	sll	r2,r2,r7
  812cf0:	4085c83a 	sub	r2,r8,r2
  812cf4:	20800015 	stw	r2,0(r4)
  812cf8:	21000104 	addi	r4,r4,4
	  (signed int) ((channel->scalefac[sfbi] + pretab[sfbi]) <<
			scalefac_multiplier);
      }
    }
    else {
      for (sfbi = 0; sfbi < 22; ++sfbi) {
  812cfc:	217ff91e 	bne	r4,r5,812ce4 <III_decode+0x1138>
  812d00:	003c7606 	br	811edc <III_decode+0x330>
  power = &rq_table[value];
  requantized = power->mantissa;
  exp += power->exponent;

  if (exp < 0) {
    if (-exp >= sizeof(mad_fixed_t) * CHAR_BIT) {
  812d04:	0089c83a 	sub	r4,zero,r2
  812d08:	03c007c4 	movi	r15,31
  812d0c:	79012e2e 	bgeu	r15,r4,8131c8 <III_decode+0x161c>
  812d10:	0007883a 	mov	r3,zero
  812d14:	003e8d06 	br	81274c <III_decode+0xba0>
  scalefac_compress = channel->scalefac_compress;
  index = (channel->block_type == 2) ?
    ((channel->flags & mixed_block_flag) ? 2 : 1) : 0;

  if (!((mode_extension & I_STEREO) && gr1ch)) {
    if (scalefac_compress < 400) {
  812d18:	008063c4 	movi	r2,399
  812d1c:	14019b36 	bltu	r2,r16,81338c <III_decode+0x17e0>
      slen[0] = (scalefac_compress >> 4) / 5;
  812d20:	8022d13a 	srli	r17,r16,4
  812d24:	01400144 	movi	r5,5
  812d28:	8809883a 	mov	r4,r17
  812d2c:	0820c080 	call	820c08 <__udivsi3>
      slen[1] = (scalefac_compress >> 4) % 5;
  812d30:	8809883a 	mov	r4,r17
  812d34:	01400144 	movi	r5,5
  index = (channel->block_type == 2) ?
    ((channel->flags & mixed_block_flag) ? 2 : 1) : 0;

  if (!((mode_extension & I_STEREO) && gr1ch)) {
    if (scalefac_compress < 400) {
      slen[0] = (scalefac_compress >> 4) / 5;
  812d38:	d8800a15 	stw	r2,40(sp)
      slen[1] = (scalefac_compress >> 4) % 5;
  812d3c:	0820c100 	call	820c10 <__umodsi3>
      slen[2] = (scalefac_compress % 16) >> 2;
  812d40:	810003cc 	andi	r4,r16,15
  812d44:	2008d0ba 	srli	r4,r4,2
      slen[3] =  scalefac_compress %  4;

      nsfb = nsfb_table[0][index];
  812d48:	00c020f4 	movhi	r3,131
  812d4c:	18d54304 	addi	r3,r3,21772
  if (!((mode_extension & I_STEREO) && gr1ch)) {
    if (scalefac_compress < 400) {
      slen[0] = (scalefac_compress >> 4) / 5;
      slen[1] = (scalefac_compress >> 4) % 5;
      slen[2] = (scalefac_compress % 16) >> 2;
      slen[3] =  scalefac_compress %  4;
  812d50:	814000cc 	andi	r5,r16,3

      nsfb = nsfb_table[0][index];
  812d54:	98ed883a 	add	r22,r19,r3
    ((channel->flags & mixed_block_flag) ? 2 : 1) : 0;

  if (!((mode_extension & I_STEREO) && gr1ch)) {
    if (scalefac_compress < 400) {
      slen[0] = (scalefac_compress >> 4) / 5;
      slen[1] = (scalefac_compress >> 4) % 5;
  812d58:	d8800b15 	stw	r2,44(sp)
      slen[2] = (scalefac_compress % 16) >> 2;
  812d5c:	d9000c15 	stw	r4,48(sp)
      slen[3] =  scalefac_compress %  4;
  812d60:	d9400d15 	stw	r5,52(sp)
  812d64:	d9476917 	ldw	r5,7588(sp)
      slen[2] = 0;
      slen[3] = 0;

      channel->flags |= preflag;

      nsfb = nsfb_table[2][index];
  812d68:	0025883a 	mov	r18,zero
  812d6c:	0023883a 	mov	r17,zero
  812d70:	0021883a 	mov	r16,zero
  812d74:	b027883a 	mov	r19,r22
  812d78:	05c000c4 	movi	r23,3
  812d7c:	2d400484 	addi	r21,r5,18
  812d80:	dd000a04 	addi	r20,sp,40
    }

    n = 0;
    for (part = 0; part < 4; ++part) {
      for (i = 0; i < nsfb[part]; ++i)
  812d84:	98800003 	ldbu	r2,0(r19)
  812d88:	88800736 	bltu	r17,r2,812da8 <III_decode+0x11fc>

      nsfb = nsfb_table[2][index];
    }

    n = 0;
    for (part = 0; part < 4; ++part) {
  812d8c:	84000044 	addi	r16,r16,1
  812d90:	a5000104 	addi	r20,r20,4
  812d94:	bc000c36 	bltu	r23,r16,812dc8 <III_decode+0x121c>
  812d98:	b427883a 	add	r19,r22,r16
      for (i = 0; i < nsfb[part]; ++i)
  812d9c:	98800003 	ldbu	r2,0(r19)

      nsfb = nsfb_table[2][index];
    }

    n = 0;
    for (part = 0; part < 4; ++part) {
  812da0:	0023883a 	mov	r17,zero
      for (i = 0; i < nsfb[part]; ++i)
  812da4:	88bff92e 	bgeu	r17,r2,812d8c <III_decode+0x11e0>
	channel->scalefac[n++] = mad_bit_read(ptr, slen[part]);
  812da8:	a1400017 	ldw	r5,0(r20)
  812dac:	d9076f17 	ldw	r4,7612(sp)
  812db0:	94800044 	addi	r18,r18,1
      nsfb = nsfb_table[2][index];
    }

    n = 0;
    for (part = 0; part < 4; ++part) {
      for (i = 0; i < nsfb[part]; ++i)
  812db4:	8c400044 	addi	r17,r17,1
	channel->scalefac[n++] = mad_bit_read(ptr, slen[part]);
  812db8:	080e3300 	call	80e330 <mad_bit_read>
  812dbc:	a8800005 	stb	r2,0(r21)
  812dc0:	ad400044 	addi	r21,r21,1
  812dc4:	003fef06 	br	812d84 <III_decode+0x11d8>
    }

    while (n < 39)
  812dc8:	00800984 	movi	r2,38
  812dcc:	14bc1d36 	bltu	r2,r18,811e44 <III_decode+0x298>
  812dd0:	d9876917 	ldw	r6,7588(sp)
  812dd4:	00c009c4 	movi	r3,39
  812dd8:	9185883a 	add	r2,r18,r6
  812ddc:	10800484 	addi	r2,r2,18
      channel->scalefac[n++] = 0;
  812de0:	94800044 	addi	r18,r18,1
  812de4:	10000005 	stb	zero,0(r2)
  812de8:	10800044 	addi	r2,r2,1
    for (part = 0; part < 4; ++part) {
      for (i = 0; i < nsfb[part]; ++i)
	channel->scalefac[n++] = mad_bit_read(ptr, slen[part]);
    }

    while (n < 39)
  812dec:	90fffc1e 	bne	r18,r3,812de0 <III_decode+0x1234>
  812df0:	003c1406 	br	811e44 <III_decode+0x298>
      struct channel *channel = &granule->ch[ch];
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
      if (channel->block_type == 2) {
	sfbwidth[ch] = (channel->flags & mixed_block_flag) ?
  812df4:	dac76917 	ldw	r11,7588(sp)
  812df8:	58800203 	ldbu	r2,8(r11)
  812dfc:	1080020c 	andi	r2,r2,8
  812e00:	10018526 	beq	r2,zero,813418 <III_decode+0x186c>
  812e04:	db079117 	ldw	r12,7748(sp)
  812e08:	03c020f4 	movhi	r15,131
  812e0c:	7bd52804 	addi	r15,r15,21664
  812e10:	63c5883a 	add	r2,r12,r15
  812e14:	10800217 	ldw	r2,8(r2)
  812e18:	d9075017 	ldw	r4,7488(sp)
  812e1c:	20800015 	stw	r2,0(r4)
  812e20:	003ba706 	br	811cc0 <III_decode+0x114>
    unsigned int l;
    signed int gain0, gain1, gain2;

    sfbi = l = 0;

    if (channel->flags & mixed_block_flag) {
  812e24:	3080020c 	andi	r2,r6,8
  812e28:	10016b26 	beq	r2,zero,8133d8 <III_decode+0x182c>
      unsigned int premask;

      premask = (channel->flags & preflag) ? ~0 : 0;
  812e2c:	3016977a 	slli	r11,r6,29
  812e30:	d9476917 	ldw	r5,7588(sp)
  812e34:	034020f4 	movhi	r13,131
  812e38:	6b555d04 	addi	r13,r13,21876
  812e3c:	5817d7fa 	srai	r11,r11,31
  812e40:	db805604 	addi	r14,sp,344
  812e44:	b009883a 	mov	r4,r22
  812e48:	0013883a 	mov	r9,zero
  812e4c:	6815883a 	mov	r10,r13
  812e50:	700d883a 	mov	r6,r14
  812e54:	030008c4 	movi	r12,35

      /* long block subbands 0-1 */

      while (l < 36) {
	exponents[sfbi] = gain -
  812e58:	50800003 	ldbu	r2,0(r10)
  812e5c:	28c00483 	ldbu	r3,18(r5)
	  (signed int) ((channel->scalefac[sfbi] + (pretab[sfbi] & premask)) <<
			scalefac_multiplier);

	l += sfbwidth[sfbi++];
  812e60:	52800044 	addi	r10,r10,1
      premask = (channel->flags & preflag) ? ~0 : 0;

      /* long block subbands 0-1 */

      while (l < 36) {
	exponents[sfbi] = gain -
  812e64:	5884703a 	and	r2,r11,r2
  812e68:	1887883a 	add	r3,r3,r2
  812e6c:	19c6983a 	sll	r3,r3,r7
	  (signed int) ((channel->scalefac[sfbi] + (pretab[sfbi] & premask)) <<
			scalefac_multiplier);

	l += sfbwidth[sfbi++];
  812e70:	29400044 	addi	r5,r5,1
      premask = (channel->flags & preflag) ? ~0 : 0;

      /* long block subbands 0-1 */

      while (l < 36) {
	exponents[sfbi] = gain -
  812e74:	40c7c83a 	sub	r3,r8,r3
  812e78:	30c00015 	stw	r3,0(r6)
	  (signed int) ((channel->scalefac[sfbi] + (pretab[sfbi] & premask)) <<
			scalefac_multiplier);

	l += sfbwidth[sfbi++];
  812e7c:	20800003 	ldbu	r2,0(r4)
  812e80:	31800104 	addi	r6,r6,4
  812e84:	21000044 	addi	r4,r4,1
  812e88:	4893883a 	add	r9,r9,r2

      premask = (channel->flags & preflag) ? ~0 : 0;

      /* long block subbands 0-1 */

      while (l < 36) {
  812e8c:	627ff22e 	bgeu	r12,r9,812e58 <III_decode+0x12ac>
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  812e90:	d9876917 	ldw	r6,7588(sp)
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];

    while (l < 576) {
  812e94:	00808fc4 	movi	r2,575
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  812e98:	5355c83a 	sub	r10,r10,r13
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  812e9c:	31400343 	ldbu	r5,13(r6)
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
  812ea0:	30c00383 	ldbu	r3,14(r6)
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  812ea4:	310003c3 	ldbu	r4,15(r6)

    while (l < 576) {
  812ea8:	127c0c36 	bltu	r2,r9,811edc <III_decode+0x330>
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  812eac:	28803fcc 	andi	r2,r5,255
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
  812eb0:	18c03fcc 	andi	r3,r3,255
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  812eb4:	21003fcc 	andi	r4,r4,255
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  812eb8:	100490fa 	slli	r2,r2,3
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
  812ebc:	180690fa 	slli	r3,r3,3
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  812ec0:	200890fa 	slli	r4,r4,3
  812ec4:	d9876917 	ldw	r6,7588(sp)
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  812ec8:	4099c83a 	sub	r12,r8,r2
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
  812ecc:	40d7c83a 	sub	r11,r8,r3
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  812ed0:	4109c83a 	sub	r4,r8,r4
  812ed4:	5285883a 	add	r2,r10,r10
  812ed8:	1085883a 	add	r2,r2,r2
  812edc:	5187883a 	add	r3,r10,r6
  812ee0:	19800484 	addi	r6,r3,18
  812ee4:	708b883a 	add	r5,r14,r2
  812ee8:	b291883a 	add	r8,r22,r10

    while (l < 576) {
      exponents[sfbi + 0] = gain0 -
  812eec:	30800003 	ldbu	r2,0(r6)
  812ef0:	11c4983a 	sll	r2,r2,r7
  812ef4:	6085c83a 	sub	r2,r12,r2
  812ef8:	28800015 	stw	r2,0(r5)
	(signed int) (channel->scalefac[sfbi + 0] << scalefac_multiplier);
      exponents[sfbi + 1] = gain1 -
  812efc:	30c00043 	ldbu	r3,1(r6)
  812f00:	19c6983a 	sll	r3,r3,r7
  812f04:	58c7c83a 	sub	r3,r11,r3
  812f08:	28c00115 	stw	r3,4(r5)
	(signed int) (channel->scalefac[sfbi + 1] << scalefac_multiplier);
      exponents[sfbi + 2] = gain2 -
  812f0c:	30800083 	ldbu	r2,2(r6)
	(signed int) (channel->scalefac[sfbi + 2] << scalefac_multiplier);

      l    += 3 * sfbwidth[sfbi];
  812f10:	318000c4 	addi	r6,r6,3
    while (l < 576) {
      exponents[sfbi + 0] = gain0 -
	(signed int) (channel->scalefac[sfbi + 0] << scalefac_multiplier);
      exponents[sfbi + 1] = gain1 -
	(signed int) (channel->scalefac[sfbi + 1] << scalefac_multiplier);
      exponents[sfbi + 2] = gain2 -
  812f14:	11c4983a 	sll	r2,r2,r7
  812f18:	2085c83a 	sub	r2,r4,r2
  812f1c:	28800215 	stw	r2,8(r5)
	(signed int) (channel->scalefac[sfbi + 2] << scalefac_multiplier);

      l    += 3 * sfbwidth[sfbi];
  812f20:	40c00003 	ldbu	r3,0(r8)
  812f24:	29400304 	addi	r5,r5,12
  812f28:	420000c4 	addi	r8,r8,3
  812f2c:	18c5883a 	add	r2,r3,r3
  812f30:	10c5883a 	add	r2,r2,r3
  812f34:	4893883a 	add	r9,r9,r2

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];

    while (l < 576) {
  812f38:	00c08fc4 	movi	r3,575
  812f3c:	1a7feb2e 	bgeu	r3,r9,812eec <III_decode+0x1340>
  812f40:	003be606 	br	811edc <III_decode+0x330>
	  xrptr[1] = 0;
	  break;

	case 15:
	  if (cachesz < linbits + 1) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
  812f44:	d809883a 	mov	r4,sp
  812f48:	01400404 	movi	r5,16
  812f4c:	da479615 	stw	r9,7768(sp)
  812f50:	080e3300 	call	80e330 <mad_bit_read>
	    cachesz   += 16;
	    bits_left -= 16;
  812f54:	d9076217 	ldw	r4,7560(sp)
	  xrptr[1] = 0;
	  break;

	case 15:
	  if (cachesz < linbits + 1) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
  812f58:	9806943a 	slli	r3,r19,16
	    cachesz   += 16;
	    bits_left -= 16;
	  }

	  value += MASK(bitcache, cachesz, linbits);
  812f5c:	da876517 	ldw	r10,7572(sp)

	case 15:
	  if (cachesz < linbits + 1) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
  812f60:	213ffc04 	addi	r4,r4,-16
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812f64:	01600034 	movhi	r5,32768
  812f68:	294000c4 	addi	r5,r5,3

	case 15:
	  if (cachesz < linbits + 1) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
  812f6c:	d9076215 	stw	r4,7560(sp)
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812f70:	b14c703a 	and	r6,r22,r5

	case 15:
	  if (cachesz < linbits + 1) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
  812f74:	89000404 	addi	r4,r17,16
	  xrptr[1] = 0;
	  break;

	case 15:
	  if (cachesz < linbits + 1) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
  812f78:	18a6b03a 	or	r19,r3,r2
  812f7c:	da479617 	ldw	r9,7768(sp)
	    cachesz   += 16;
	    bits_left -= 16;
	  }

	  value += MASK(bitcache, cachesz, linbits);
  812f80:	22a3c83a 	sub	r17,r4,r10
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812f84:	303e820e 	bge	r6,zero,812990 <III_decode+0xde4>
  812f88:	31bfffc4 	addi	r6,r6,-1
  812f8c:	02ffff04 	movi	r11,-4
  812f90:	32ccb03a 	or	r6,r6,r11
  812f94:	31800044 	addi	r6,r6,1
  exp /= 4;
  812f98:	b00b883a 	mov	r5,r22
  812f9c:	b03e7e0e 	bge	r22,zero,812998 <III_decode+0xdec>
  812fa0:	b14000c4 	addi	r5,r22,3
  812fa4:	003e7c06 	br	812998 <III_decode+0xdec>
	  xrptr[0] = 0;
	  break;

	case 15:
	  if (cachesz < linbits + 2) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
  812fa8:	d809883a 	mov	r4,sp
  812fac:	01400404 	movi	r5,16
  812fb0:	da479615 	stw	r9,7768(sp)
  812fb4:	080e3300 	call	80e330 <mad_bit_read>
	    cachesz   += 16;
	    bits_left -= 16;
  812fb8:	d9076217 	ldw	r4,7560(sp)
	  xrptr[0] = 0;
	  break;

	case 15:
	  if (cachesz < linbits + 2) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
  812fbc:	9806943a 	slli	r3,r19,16
	    cachesz   += 16;
	    bits_left -= 16;
	  }

	  value += MASK(bitcache, cachesz, linbits);
  812fc0:	da876517 	ldw	r10,7572(sp)

	case 15:
	  if (cachesz < linbits + 2) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
  812fc4:	213ffc04 	addi	r4,r4,-16
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812fc8:	01600034 	movhi	r5,32768
  812fcc:	294000c4 	addi	r5,r5,3

	case 15:
	  if (cachesz < linbits + 2) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
  812fd0:	d9076215 	stw	r4,7560(sp)
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812fd4:	b14c703a 	and	r6,r22,r5

	case 15:
	  if (cachesz < linbits + 2) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
	    cachesz   += 16;
	    bits_left -= 16;
  812fd8:	89000404 	addi	r4,r17,16
	  xrptr[0] = 0;
	  break;

	case 15:
	  if (cachesz < linbits + 2) {
	    bitcache   = (bitcache << 16) | mad_bit_read(&peek, 16);
  812fdc:	18a6b03a 	or	r19,r3,r2
  812fe0:	da479617 	ldw	r9,7768(sp)
	    cachesz   += 16;
	    bits_left -= 16;
	  }

	  value += MASK(bitcache, cachesz, linbits);
  812fe4:	22a3c83a 	sub	r17,r4,r10
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  812fe8:	303e960e 	bge	r6,zero,812a44 <III_decode+0xe98>
  812fec:	31bfffc4 	addi	r6,r6,-1
  812ff0:	02ffff04 	movi	r11,-4
  812ff4:	32ccb03a 	or	r6,r6,r11
  812ff8:	31800044 	addi	r6,r6,1
  exp /= 4;
  812ffc:	b00b883a 	mov	r5,r22
  813000:	b03e920e 	bge	r22,zero,812a4c <III_decode+0xea0>
  813004:	b14000c4 	addi	r5,r22,3
  813008:	003e9006 	br	812a4c <III_decode+0xea0>
	sfbwidth[ch] = (channel->flags & mixed_block_flag) ?
	  sfbwidth_table[sfreqi].m : sfbwidth_table[sfreqi].s;
      }

      if (header->flags & MAD_FLAG_LSF_EXT) {
	part2_length = III_scalefactors_lsf(ptr, channel,
  81300c:	da877117 	ldw	r10,7620(sp)
  813010:	57002e04 	addi	fp,r10,184
  813014:	003b3106 	br	811cdc <III_decode+0x130>
  power = &rq_table[value];
  requantized = power->mantissa;
  exp += power->exponent;

  if (exp < 0) {
    if (-exp >= sizeof(mad_fixed_t) * CHAR_BIT) {
  813018:	0089c83a 	sub	r4,zero,r2
  81301c:	02c007c4 	movi	r11,31
  813020:	59012c2e 	bgeu	r11,r4,8134d4 <III_decode+0x1928>
  813024:	0007883a 	mov	r3,zero
  813028:	003e4006 	br	81292c <III_decode+0xd80>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  81302c:	31bfffc4 	addi	r6,r6,-1
  813030:	03ffff04 	movi	r15,-4
  813034:	33ccb03a 	or	r6,r6,r15
  813038:	31800044 	addi	r6,r6,1
  exp /= 4;
  81303c:	b009883a 	mov	r4,r22
  813040:	b03e040e 	bge	r22,zero,812854 <III_decode+0xca8>
  813044:	b10000c4 	addi	r4,r22,3
  813048:	003e0206 	br	812854 <III_decode+0xca8>
  81304c:	b10000c4 	addi	r4,r22,3
  813050:	003e2506 	br	8128e8 <III_decode+0xd3c>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  813054:	31bfffc4 	addi	r6,r6,-1
  813058:	03ffff04 	movi	r15,-4
  81305c:	33ccb03a 	or	r6,r6,r15
  813060:	31800044 	addi	r6,r6,1
  813064:	003e1e06 	br	8128e0 <III_decode+0xd34>
	part2_length = III_scalefactors_lsf(ptr, channel,
					    ch == 0 ? 0 : &si->gr[1].ch[1],
					    header->mode_extension);
      }
      else {
	part2_length = III_scalefactors(ptr, channel, &si->gr[0].ch[ch],
  813068:	dc874d17 	ldw	r18,7476(sp)
  81306c:	94400203 	ldbu	r17,8(r18)
  813070:	003e9f06 	br	812af0 <III_decode+0xf44>
  power = &rq_table[value];
  requantized = power->mantissa;
  exp += power->exponent;

  if (exp < 0) {
    if (-exp >= sizeof(mad_fixed_t) * CHAR_BIT) {
  813074:	0089c83a 	sub	r4,zero,r2
  813078:	02c007c4 	movi	r11,31
  81307c:	5901242e 	bgeu	r11,r4,813510 <III_decode+0x1964>
  813080:	0007883a 	mov	r3,zero
  813084:	003e0406 	br	812898 <III_decode+0xcec>

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  813088:	030020f4 	movhi	r12,131
  81308c:	63156404 	addi	r12,r12,21904
  813090:	60c00017 	ldw	r3,0(r12)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  813094:	494000c4 	addi	r5,r9,3
  813098:	280bd0ba 	srai	r5,r5,2

  power = &rq_table[value];
  requantized = power->mantissa;
  exp += power->exponent;
  81309c:	1808d6fa 	srli	r4,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  8130a0:	00820034 	movhi	r2,2048
  8130a4:	10bfffc4 	addi	r2,r2,-1
  8130a8:	1894703a 	and	r10,r3,r2
  exp += power->exponent;
  8130ac:	2907883a 	add	r3,r5,r4

  if (exp < 0) {
  8130b0:	183dc90e 	bge	r3,zero,8127d8 <III_decode+0xc2c>
    if (-exp >= sizeof(mad_fixed_t) * CHAR_BIT) {
  8130b4:	00c9c83a 	sub	r4,zero,r3
  8130b8:	008007c4 	movi	r2,31
  8130bc:	11010a2e 	bgeu	r2,r4,8134e8 <III_decode+0x193c>
  8130c0:	0021883a 	mov	r16,zero
  8130c4:	003dc806 	br	8127e8 <III_decode+0xc3c>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  8130c8:	423fffc4 	addi	r8,r8,-1
  8130cc:	00bfff04 	movi	r2,-4
  8130d0:	4090b03a 	or	r8,r8,r2
  8130d4:	42000044 	addi	r8,r8,1
  8130d8:	003db306 	br	8127a8 <III_decode+0xbfc>
  8130dc:	39ffffc4 	addi	r7,r7,-1
  8130e0:	00bfff04 	movi	r2,-4
  8130e4:	388eb03a 	or	r7,r7,r2
  8130e8:	39c00044 	addi	r7,r7,1
  exp /= 4;
  8130ec:	400b883a 	mov	r5,r8
  8130f0:	403c8b0e 	bge	r8,zero,812320 <III_decode+0x774>

  power = &rq_table[value];
  requantized = power->mantissa;
  8130f4:	02c020f4 	movhi	r11,131
  8130f8:	5ad56404 	addi	r11,r11,21904
  8130fc:	58c00017 	ldw	r3,0(r11)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  813100:	414000c4 	addi	r5,r8,3
  813104:	280bd0ba 	srai	r5,r5,2

  power = &rq_table[value];
  requantized = power->mantissa;
  exp += power->exponent;
  813108:	1808d6fa 	srli	r4,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  81310c:	00820034 	movhi	r2,2048
  813110:	10bfffc4 	addi	r2,r2,-1
  813114:	1892703a 	and	r9,r3,r2
  exp += power->exponent;
  813118:	2907883a 	add	r3,r5,r4

  if (exp < 0) {
  81311c:	183c8a0e 	bge	r3,zero,812348 <III_decode+0x79c>
    if (-exp >= sizeof(mad_fixed_t) * CHAR_BIT) {
  813120:	00c9c83a 	sub	r4,zero,r3
  813124:	008007c4 	movi	r2,31
  813128:	1100f42e 	bgeu	r2,r4,8134fc <III_decode+0x1950>
  81312c:	0021883a 	mov	r16,zero
  813130:	003c8906 	br	812358 <III_decode+0x7ac>
  813134:	0089c83a 	sub	r4,zero,r2
  813138:	014007c4 	movi	r5,31
  81313c:	2901092e 	bgeu	r5,r4,813564 <III_decode+0x19b8>
  813140:	0007883a 	mov	r3,zero
  813144:	003e5906 	br	812aac <III_decode+0xf00>
  813148:	0089c83a 	sub	r4,zero,r2
  81314c:	014007c4 	movi	r5,31
  813150:	29010f2e 	bgeu	r5,r4,813590 <III_decode+0x19e4>
  813154:	0007883a 	mov	r3,zero
  813158:	003e2606 	br	8129f4 <III_decode+0xe48>
{
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  81315c:	39ffffc4 	addi	r7,r7,-1
  813160:	00bfff04 	movi	r2,-4
  813164:	388eb03a 	or	r7,r7,r2
  813168:	39c00044 	addi	r7,r7,1
  exp /= 4;
  81316c:	b00b883a 	mov	r5,r22
  813170:	b03bfd0e 	bge	r22,zero,812168 <III_decode+0x5bc>

  power = &rq_table[value];
  requantized = power->mantissa;
  813174:	030020f4 	movhi	r12,131
  813178:	63156404 	addi	r12,r12,21904
  81317c:	60c00017 	ldw	r3,0(r12)
  mad_fixed_t requantized;
  signed int frac;
  struct fixedfloat const *power;

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;
  813180:	b14000c4 	addi	r5,r22,3
  813184:	280bd0ba 	srai	r5,r5,2

  power = &rq_table[value];
  requantized = power->mantissa;
  exp += power->exponent;
  813188:	1808d6fa 	srli	r4,r3,27

  frac = exp % 4;  /* assumes sign(frac) == sign(exp) */
  exp /= 4;

  power = &rq_table[value];
  requantized = power->mantissa;
  81318c:	00820034 	movhi	r2,2048
  813190:	10bfffc4 	addi	r2,r2,-1
  813194:	1890703a 	and	r8,r3,r2
  exp += power->exponent;
  813198:	2907883a 	add	r3,r5,r4

  if (exp < 0) {
  81319c:	183bfc0e 	bge	r3,zero,812190 <III_decode+0x5e4>
    if (-exp >= sizeof(mad_fixed_t) * CHAR_BIT) {
  8131a0:	00c9c83a 	sub	r4,zero,r3
  8131a4:	008007c4 	movi	r2,31
  8131a8:	1100f32e 	bgeu	r2,r4,813578 <III_decode+0x19cc>
  8131ac:	0021883a 	mov	r16,zero
  8131b0:	003bfb06 	br	8121a0 <III_decode+0x5f4>
      /* underflow */
      requantized = 0;
    }
    else {
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
  8131b4:	0084303a 	nor	r2,zero,r2
  8131b8:	4084983a 	sll	r2,r8,r2
  8131bc:	1885883a 	add	r2,r3,r2
  8131c0:	1107d83a 	sra	r3,r2,r4
  8131c4:	003d3c06 	br	8126b8 <III_decode+0xb0c>
  8131c8:	0084303a 	nor	r2,zero,r2
  8131cc:	4084983a 	sll	r2,r8,r2
  8131d0:	1885883a 	add	r2,r3,r2
  8131d4:	1107d83a 	sra	r3,r2,r4
  8131d8:	003d5c06 	br	81274c <III_decode+0xba0>
      for (sfbi = 16; sfbi < 21; ++sfbi)
	channel->scalefac[sfbi] = gr0ch->scalefac[sfbi];
    }
    else {
      for (sfbi = 16; sfbi < 21; ++sfbi)
	channel->scalefac[sfbi] = mad_bit_read(ptr, slen2);
  8131dc:	d9076f17 	ldw	r4,7612(sp)
  8131e0:	a00b883a 	mov	r5,r20
  8131e4:	080e3300 	call	80e330 <mad_bit_read>
  8131e8:	d9476917 	ldw	r5,7588(sp)
  8131ec:	28800885 	stb	r2,34(r5)
  8131f0:	d9076f17 	ldw	r4,7612(sp)
  8131f4:	a00b883a 	mov	r5,r20
  8131f8:	080e3300 	call	80e330 <mad_bit_read>
  8131fc:	d9876917 	ldw	r6,7588(sp)
  813200:	a00b883a 	mov	r5,r20
  813204:	308008c5 	stb	r2,35(r6)
  813208:	d9076f17 	ldw	r4,7612(sp)
  81320c:	080e3300 	call	80e330 <mad_bit_read>
  813210:	da876917 	ldw	r10,7588(sp)
  813214:	a00b883a 	mov	r5,r20
  813218:	50800905 	stb	r2,36(r10)
  81321c:	d9076f17 	ldw	r4,7612(sp)
  813220:	080e3300 	call	80e330 <mad_bit_read>
  813224:	dac76917 	ldw	r11,7588(sp)
  813228:	a00b883a 	mov	r5,r20
  81322c:	58800945 	stb	r2,37(r11)
  813230:	d9076f17 	ldw	r4,7612(sp)
  813234:	080e3300 	call	80e330 <mad_bit_read>
  813238:	db076917 	ldw	r12,7588(sp)
  81323c:	60800985 	stb	r2,38(r12)
  813240:	003e7906 	br	812c28 <III_decode+0x107c>
      for (sfbi = 11; sfbi < 16; ++sfbi)
	channel->scalefac[sfbi] = gr0ch->scalefac[sfbi];
    }
    else {
      for (sfbi = 11; sfbi < 16; ++sfbi)
	channel->scalefac[sfbi] = mad_bit_read(ptr, slen2);
  813244:	d9076f17 	ldw	r4,7612(sp)
  813248:	a00b883a 	mov	r5,r20
  81324c:	080e3300 	call	80e330 <mad_bit_read>
  813250:	dac76917 	ldw	r11,7588(sp)
  813254:	a00b883a 	mov	r5,r20
  813258:	58800745 	stb	r2,29(r11)
  81325c:	d9076f17 	ldw	r4,7612(sp)
  813260:	080e3300 	call	80e330 <mad_bit_read>
  813264:	db076917 	ldw	r12,7588(sp)
  813268:	a00b883a 	mov	r5,r20
  81326c:	60800785 	stb	r2,30(r12)
  813270:	d9076f17 	ldw	r4,7612(sp)
  813274:	080e3300 	call	80e330 <mad_bit_read>
  813278:	dbc76917 	ldw	r15,7588(sp)
  81327c:	a00b883a 	mov	r5,r20
  813280:	788007c5 	stb	r2,31(r15)
  813284:	d9076f17 	ldw	r4,7612(sp)
  813288:	080e3300 	call	80e330 <mad_bit_read>
  81328c:	dc876917 	ldw	r18,7588(sp)
  813290:	a00b883a 	mov	r5,r20
  813294:	90800805 	stb	r2,32(r18)
  813298:	d9076f17 	ldw	r4,7612(sp)
  81329c:	080e3300 	call	80e330 <mad_bit_read>
  8132a0:	90800845 	stb	r2,33(r18)
  8132a4:	003e5106 	br	812bec <III_decode+0x1040>
      for (sfbi = 6; sfbi < 11; ++sfbi)
	channel->scalefac[sfbi] = gr0ch->scalefac[sfbi];
    }
    else {
      for (sfbi = 6; sfbi < 11; ++sfbi)
	channel->scalefac[sfbi] = mad_bit_read(ptr, slen1);
  8132a8:	d9076f17 	ldw	r4,7612(sp)
  8132ac:	900b883a 	mov	r5,r18
  8132b0:	080e3300 	call	80e330 <mad_bit_read>
  8132b4:	dbc76917 	ldw	r15,7588(sp)
  8132b8:	900b883a 	mov	r5,r18
  8132bc:	78800605 	stb	r2,24(r15)
  8132c0:	d9076f17 	ldw	r4,7612(sp)
  8132c4:	080e3300 	call	80e330 <mad_bit_read>
  8132c8:	d8c76917 	ldw	r3,7588(sp)
  8132cc:	900b883a 	mov	r5,r18
  8132d0:	18800645 	stb	r2,25(r3)
  8132d4:	d9076f17 	ldw	r4,7612(sp)
  8132d8:	080e3300 	call	80e330 <mad_bit_read>
  8132dc:	d9076917 	ldw	r4,7588(sp)
  8132e0:	900b883a 	mov	r5,r18
  8132e4:	20800685 	stb	r2,26(r4)
  8132e8:	d9076f17 	ldw	r4,7612(sp)
  8132ec:	080e3300 	call	80e330 <mad_bit_read>
  8132f0:	d9476917 	ldw	r5,7588(sp)
  8132f4:	288006c5 	stb	r2,27(r5)
  8132f8:	d9076f17 	ldw	r4,7612(sp)
  8132fc:	900b883a 	mov	r5,r18
  813300:	080e3300 	call	80e330 <mad_bit_read>
  813304:	d9876917 	ldw	r6,7588(sp)
  813308:	30800705 	stb	r2,28(r6)
  81330c:	003e2a06 	br	812bb8 <III_decode+0x100c>
      for (sfbi = 0; sfbi < 6; ++sfbi)
	channel->scalefac[sfbi] = gr0ch->scalefac[sfbi];
    }
    else {
      for (sfbi = 0; sfbi < 6; ++sfbi)
	channel->scalefac[sfbi] = mad_bit_read(ptr, slen1);
  813310:	d9076f17 	ldw	r4,7612(sp)
  813314:	900b883a 	mov	r5,r18
  813318:	080e3300 	call	80e330 <mad_bit_read>
  81331c:	d8c76917 	ldw	r3,7588(sp)
  813320:	900b883a 	mov	r5,r18
  813324:	18800485 	stb	r2,18(r3)
  813328:	d9076f17 	ldw	r4,7612(sp)
  81332c:	080e3300 	call	80e330 <mad_bit_read>
  813330:	d9076917 	ldw	r4,7588(sp)
  813334:	900b883a 	mov	r5,r18
  813338:	208004c5 	stb	r2,19(r4)
  81333c:	d9076f17 	ldw	r4,7612(sp)
  813340:	080e3300 	call	80e330 <mad_bit_read>
  813344:	d9476917 	ldw	r5,7588(sp)
  813348:	28800505 	stb	r2,20(r5)
  81334c:	d9076f17 	ldw	r4,7612(sp)
  813350:	900b883a 	mov	r5,r18
  813354:	080e3300 	call	80e330 <mad_bit_read>
  813358:	d9876917 	ldw	r6,7588(sp)
  81335c:	900b883a 	mov	r5,r18
  813360:	30800545 	stb	r2,21(r6)
  813364:	d9076f17 	ldw	r4,7612(sp)
  813368:	080e3300 	call	80e330 <mad_bit_read>
  81336c:	da876917 	ldw	r10,7588(sp)
  813370:	900b883a 	mov	r5,r18
  813374:	50800585 	stb	r2,22(r10)
  813378:	d9076f17 	ldw	r4,7612(sp)
  81337c:	080e3300 	call	80e330 <mad_bit_read>
  813380:	dac76917 	ldw	r11,7588(sp)
  813384:	588005c5 	stb	r2,23(r11)
  813388:	003dfe06 	br	812b84 <III_decode+0xfd8>
      slen[2] = (scalefac_compress % 16) >> 2;
      slen[3] =  scalefac_compress %  4;

      nsfb = nsfb_table[0][index];
    }
    else if (scalefac_compress < 500) {
  81338c:	00807cc4 	movi	r2,499
  813390:	14008636 	bltu	r2,r16,8135ac <III_decode+0x1a00>
      scalefac_compress -= 400;
  813394:	843f9c04 	addi	r16,r16,-400

      slen[0] = (scalefac_compress >> 2) / 5;
  813398:	8024d0ba 	srli	r18,r16,2
  81339c:	01400144 	movi	r5,5
      slen[1] = (scalefac_compress >> 2) % 5;
      slen[2] =  scalefac_compress %  4;
  8133a0:	840000cc 	andi	r16,r16,3
      nsfb = nsfb_table[0][index];
    }
    else if (scalefac_compress < 500) {
      scalefac_compress -= 400;

      slen[0] = (scalefac_compress >> 2) / 5;
  8133a4:	9009883a 	mov	r4,r18
  8133a8:	0820c080 	call	820c08 <__udivsi3>
      slen[1] = (scalefac_compress >> 2) % 5;
  8133ac:	9009883a 	mov	r4,r18
  8133b0:	01400144 	movi	r5,5
      nsfb = nsfb_table[0][index];
    }
    else if (scalefac_compress < 500) {
      scalefac_compress -= 400;

      slen[0] = (scalefac_compress >> 2) / 5;
  8133b4:	d8800a15 	stw	r2,40(sp)
      slen[1] = (scalefac_compress >> 2) % 5;
  8133b8:	0820c100 	call	820c10 <__umodsi3>
      slen[2] =  scalefac_compress %  4;
      slen[3] = 0;

      nsfb = nsfb_table[1][index];
  8133bc:	00c020f4 	movhi	r3,131
  8133c0:	18d54604 	addi	r3,r3,21784
  8133c4:	98ed883a 	add	r22,r19,r3
    }
    else if (scalefac_compress < 500) {
      scalefac_compress -= 400;

      slen[0] = (scalefac_compress >> 2) / 5;
      slen[1] = (scalefac_compress >> 2) % 5;
  8133c8:	d8800b15 	stw	r2,44(sp)
      slen[2] =  scalefac_compress %  4;
  8133cc:	dc000c15 	stw	r16,48(sp)
      slen[3] = 0;
  8133d0:	d8000d15 	stw	zero,52(sp)
  8133d4:	003e6306 	br	812d64 <III_decode+0x11b8>
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  8133d8:	d8c76917 	ldw	r3,7588(sp)
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  8133dc:	d9476917 	ldw	r5,7588(sp)
  8133e0:	0015883a 	mov	r10,zero
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  8133e4:	18800343 	ldbu	r2,13(r3)
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  8133e8:	290003c3 	ldbu	r4,15(r5)
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
  8133ec:	18c00383 	ldbu	r3,14(r3)
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  8133f0:	100490fa 	slli	r2,r2,3
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  8133f4:	200890fa 	slli	r4,r4,3
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
  8133f8:	180690fa 	slli	r3,r3,3
      }
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
  8133fc:	4099c83a 	sub	r12,r8,r2
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  813400:	4109c83a 	sub	r4,r8,r4
    }

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
  813404:	40d7c83a 	sub	r11,r8,r3
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  813408:	0013883a 	mov	r9,zero
  81340c:	db805604 	addi	r14,sp,344
  813410:	280d883a 	mov	r6,r5
  813414:	003eaf06 	br	812ed4 <III_decode+0x1328>
      struct channel *channel = &granule->ch[ch];
      unsigned int part2_length;

      sfbwidth[ch] = sfbwidth_table[sfreqi].l;
      if (channel->block_type == 2) {
	sfbwidth[ch] = (channel->flags & mixed_block_flag) ?
  813418:	dc879117 	ldw	r18,7748(sp)
  81341c:	00c020f4 	movhi	r3,131
  813420:	18d52804 	addi	r3,r3,21664
  813424:	90c5883a 	add	r2,r18,r3
  813428:	10800117 	ldw	r2,4(r2)
  81342c:	003e7a06 	br	812e18 <III_decode+0x126c>
  unsigned char const *nsfb;

  start = *ptr;

  scalefac_compress = channel->scalefac_compress;
  index = (channel->block_type == 2) ?
  813430:	60800203 	ldbu	r2,8(r12)
  813434:	1080020c 	andi	r2,r2,8
  813438:	10005a26 	beq	r2,zero,8135a4 <III_decode+0x19f8>
  81343c:	04c00204 	movi	r19,8
  813440:	003a3506 	br	811d18 <III_decode+0x16c>
  if (channel->block_type == 2) {
    unsigned int nsfb;

    sfbi = 0;

    nsfb = (channel->flags & mixed_block_flag) ? 8 + 3 * 3 : 6 * 3;
  813444:	d9476917 	ldw	r5,7588(sp)
  813448:	057fffc4 	movi	r21,-1
  81344c:	28800203 	ldbu	r2,8(r5)
  813450:	2823883a 	mov	r17,r5
  813454:	1080020c 	andi	r2,r2,8
  813458:	1027003a 	cmpeq	r19,r2,zero
  81345c:	9cc00404 	addi	r19,r19,16
  813460:	9821883a 	mov	r16,r19
    while (nsfb--)
      channel->scalefac[sfbi++] = mad_bit_read(ptr, slen1);
  813464:	d9076f17 	ldw	r4,7612(sp)
  813468:	900b883a 	mov	r5,r18
    unsigned int nsfb;

    sfbi = 0;

    nsfb = (channel->flags & mixed_block_flag) ? 8 + 3 * 3 : 6 * 3;
    while (nsfb--)
  81346c:	843fffc4 	addi	r16,r16,-1
      channel->scalefac[sfbi++] = mad_bit_read(ptr, slen1);
  813470:	080e3300 	call	80e330 <mad_bit_read>
  813474:	88800485 	stb	r2,18(r17)
    unsigned int nsfb;

    sfbi = 0;

    nsfb = (channel->flags & mixed_block_flag) ? 8 + 3 * 3 : 6 * 3;
    while (nsfb--)
  813478:	8c400044 	addi	r17,r17,1
  81347c:	857ff91e 	bne	r16,r21,813464 <III_decode+0x18b8>
  813480:	d9876917 	ldw	r6,7588(sp)
  813484:	04400444 	movi	r17,17
  813488:	04bfffc4 	movi	r18,-1
  81348c:	9985883a 	add	r2,r19,r6
  813490:	140004c4 	addi	r16,r2,19
  813494:	9cc00044 	addi	r19,r19,1
      channel->scalefac[sfbi++] = mad_bit_read(ptr, slen1);

    nsfb = 6 * 3;
    while (nsfb--)
      channel->scalefac[sfbi++] = mad_bit_read(ptr, slen2);
  813498:	d9076f17 	ldw	r4,7612(sp)
  81349c:	a00b883a 	mov	r5,r20
    nsfb = (channel->flags & mixed_block_flag) ? 8 + 3 * 3 : 6 * 3;
    while (nsfb--)
      channel->scalefac[sfbi++] = mad_bit_read(ptr, slen1);

    nsfb = 6 * 3;
    while (nsfb--)
  8134a0:	8c7fffc4 	addi	r17,r17,-1
      channel->scalefac[sfbi++] = mad_bit_read(ptr, slen2);
  8134a4:	080e3300 	call	80e330 <mad_bit_read>
  8134a8:	80800005 	stb	r2,0(r16)
    nsfb = (channel->flags & mixed_block_flag) ? 8 + 3 * 3 : 6 * 3;
    while (nsfb--)
      channel->scalefac[sfbi++] = mad_bit_read(ptr, slen1);

    nsfb = 6 * 3;
    while (nsfb--)
  8134ac:	84000044 	addi	r16,r16,1
  8134b0:	8cbff91e 	bne	r17,r18,813498 <III_decode+0x18ec>
      channel->scalefac[sfbi++] = mad_bit_read(ptr, slen2);

    nsfb = 1 * 3;
    while (nsfb--)
      channel->scalefac[sfbi++] = 0;
  8134b4:	da876917 	ldw	r10,7588(sp)
  8134b8:	988004c4 	addi	r2,r19,19
  8134bc:	9a87883a 	add	r3,r19,r10
  8134c0:	18000905 	stb	zero,36(r3)
  8134c4:	1285883a 	add	r2,r2,r10
  8134c8:	100004c5 	stb	zero,19(r2)
  8134cc:	10000485 	stb	zero,18(r2)
  8134d0:	003a5c06 	br	811e44 <III_decode+0x298>
      /* underflow */
      requantized = 0;
    }
    else {
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
  8134d4:	0084303a 	nor	r2,zero,r2
  8134d8:	2884983a 	sll	r2,r5,r2
  8134dc:	1885883a 	add	r2,r3,r2
  8134e0:	1107d83a 	sra	r3,r2,r4
  8134e4:	003d1106 	br	81292c <III_decode+0xd80>
  8134e8:	00c4303a 	nor	r2,zero,r3
  8134ec:	9084983a 	sll	r2,r18,r2
  8134f0:	5085883a 	add	r2,r10,r2
  8134f4:	1121d83a 	sra	r16,r2,r4
  8134f8:	003cbb06 	br	8127e8 <III_decode+0xc3c>
  8134fc:	00c4303a 	nor	r2,zero,r3
  813500:	9084983a 	sll	r2,r18,r2
  813504:	4885883a 	add	r2,r9,r2
  813508:	1121d83a 	sra	r16,r2,r4
  81350c:	003b9206 	br	812358 <III_decode+0x7ac>
  813510:	0084303a 	nor	r2,zero,r2
  813514:	2884983a 	sll	r2,r5,r2
  813518:	1885883a 	add	r2,r3,r2
  81351c:	1107d83a 	sra	r3,r2,r4
  813520:	003cdd06 	br	812898 <III_decode+0xcec>
      slen[2] = (scalefac_compress % 36) % 6;
      slen[3] = 0;

      nsfb = nsfb_table[3][index];
    }
    else if (scalefac_compress < 244) {
  813524:	00803cc4 	movi	r2,243
  813528:	14004036 	bltu	r2,r16,81362c <III_decode+0x1a80>
      scalefac_compress -= 180;
  81352c:	80ffd304 	addi	r3,r16,-180

      slen[0] = (scalefac_compress % 64) >> 4;
  813530:	19000fcc 	andi	r4,r3,63
      slen[1] = (scalefac_compress % 16) >> 2;
  813534:	194003cc 	andi	r5,r3,15
      nsfb = nsfb_table[3][index];
    }
    else if (scalefac_compress < 244) {
      scalefac_compress -= 180;

      slen[0] = (scalefac_compress % 64) >> 4;
  813538:	2008d13a 	srli	r4,r4,4
      slen[1] = (scalefac_compress % 16) >> 2;
  81353c:	280ad0ba 	srli	r5,r5,2
      slen[2] =  scalefac_compress %  4;
      slen[3] = 0;

      nsfb = nsfb_table[4][index];
  813540:	008020f4 	movhi	r2,131
  813544:	10954f04 	addi	r2,r2,21820
    else if (scalefac_compress < 244) {
      scalefac_compress -= 180;

      slen[0] = (scalefac_compress % 64) >> 4;
      slen[1] = (scalefac_compress % 16) >> 2;
      slen[2] =  scalefac_compress %  4;
  813548:	18c000cc 	andi	r3,r3,3
      slen[3] = 0;

      nsfb = nsfb_table[4][index];
  81354c:	988d883a 	add	r6,r19,r2
      nsfb = nsfb_table[3][index];
    }
    else if (scalefac_compress < 244) {
      scalefac_compress -= 180;

      slen[0] = (scalefac_compress % 64) >> 4;
  813550:	d9000a15 	stw	r4,40(sp)
      slen[1] = (scalefac_compress % 16) >> 2;
  813554:	d9400b15 	stw	r5,44(sp)
      slen[2] =  scalefac_compress %  4;
  813558:	d8c00c15 	stw	r3,48(sp)
      slen[3] = 0;
  81355c:	d8000d15 	stw	zero,52(sp)
  813560:	003a0806 	br	811d84 <III_decode+0x1d8>
      /* underflow */
      requantized = 0;
    }
    else {
      requantized += 1L << (-exp - 1);
      requantized >>= -exp;
  813564:	0084303a 	nor	r2,zero,r2
  813568:	3884983a 	sll	r2,r7,r2
  81356c:	1885883a 	add	r2,r3,r2
  813570:	1107d83a 	sra	r3,r2,r4
  813574:	003d4d06 	br	812aac <III_decode+0xf00>
  813578:	00c6303a 	nor	r3,zero,r3
  81357c:	00800044 	movi	r2,1
  813580:	10c4983a 	sll	r2,r2,r3
  813584:	4085883a 	add	r2,r8,r2
  813588:	1121d83a 	sra	r16,r2,r4
  81358c:	003b0406 	br	8121a0 <III_decode+0x5f4>
  813590:	0084303a 	nor	r2,zero,r2
  813594:	9084983a 	sll	r2,r18,r2
  813598:	1885883a 	add	r2,r3,r2
  81359c:	1107d83a 	sra	r3,r2,r4
  8135a0:	003d1406 	br	8129f4 <III_decode+0xe48>
  unsigned char const *nsfb;

  start = *ptr;

  scalefac_compress = channel->scalefac_compress;
  index = (channel->block_type == 2) ?
  8135a4:	04c00104 	movi	r19,4
  8135a8:	0039db06 	br	811d18 <III_decode+0x16c>
      slen[3] = 0;

      nsfb = nsfb_table[1][index];
    }
    else {
      scalefac_compress -= 500;
  8135ac:	847f8304 	addi	r17,r16,-500

      slen[0] = scalefac_compress / 3;
  8135b0:	8809883a 	mov	r4,r17
  8135b4:	014000c4 	movi	r5,3
  8135b8:	0820c080 	call	820c08 <__udivsi3>
      slen[1] = scalefac_compress % 3;
  8135bc:	8809883a 	mov	r4,r17
  8135c0:	014000c4 	movi	r5,3
      nsfb = nsfb_table[1][index];
    }
    else {
      scalefac_compress -= 500;

      slen[0] = scalefac_compress / 3;
  8135c4:	d8800a15 	stw	r2,40(sp)
      slen[1] = scalefac_compress % 3;
  8135c8:	0820c100 	call	820c10 <__umodsi3>
      slen[2] = 0;
      slen[3] = 0;

      channel->flags |= preflag;
  8135cc:	d9076917 	ldw	r4,7588(sp)
  8135d0:	20c00203 	ldbu	r3,8(r4)
    }
    else {
      scalefac_compress -= 500;

      slen[0] = scalefac_compress / 3;
      slen[1] = scalefac_compress % 3;
  8135d4:	d8800b15 	stw	r2,44(sp)
      slen[2] = 0;
      slen[3] = 0;

      channel->flags |= preflag;

      nsfb = nsfb_table[2][index];
  8135d8:	008020f4 	movhi	r2,131
  8135dc:	10954904 	addi	r2,r2,21796
      slen[0] = scalefac_compress / 3;
      slen[1] = scalefac_compress % 3;
      slen[2] = 0;
      slen[3] = 0;

      channel->flags |= preflag;
  8135e0:	18c00114 	ori	r3,r3,4
  8135e4:	20c00205 	stb	r3,8(r4)

      nsfb = nsfb_table[2][index];
  8135e8:	98ad883a 	add	r22,r19,r2
    else {
      scalefac_compress -= 500;

      slen[0] = scalefac_compress / 3;
      slen[1] = scalefac_compress % 3;
      slen[2] = 0;
  8135ec:	d8000c15 	stw	zero,48(sp)
      slen[3] = 0;
  8135f0:	d8000d15 	stw	zero,52(sp)
  8135f4:	003ddb06 	br	812d64 <III_decode+0x11b8>
  else if (cachesz + bits_left > 0)
    fprintf(stderr, "%d stuffing bits\n", cachesz + bits_left);
# endif

  /* rzero */
  while (xrptr < &xr[576]) {
  8135f8:	00808dc4 	movi	r2,567
      }
    }
  }

  return MAD_ERROR_NONE;
}
  8135fc:	dfc7a117 	ldw	ra,7812(sp)
  813600:	df07a017 	ldw	fp,7808(sp)
  813604:	ddc79f17 	ldw	r23,7804(sp)
  813608:	dd879e17 	ldw	r22,7800(sp)
  81360c:	dd479d17 	ldw	r21,7796(sp)
  813610:	dd079c17 	ldw	r20,7792(sp)
  813614:	dcc79b17 	ldw	r19,7788(sp)
  813618:	dc879a17 	ldw	r18,7784(sp)
  81361c:	dc479917 	ldw	r17,7780(sp)
  813620:	dc079817 	ldw	r16,7776(sp)
  813624:	dec7a204 	addi	sp,sp,7816
  813628:	f800283a 	ret
      slen[3] = 0;

      nsfb = nsfb_table[4][index];
    }
    else {
      scalefac_compress -= 244;
  81362c:	847fc304 	addi	r17,r16,-244

      slen[0] = scalefac_compress / 3;
  813630:	8809883a 	mov	r4,r17
  813634:	014000c4 	movi	r5,3
  813638:	0820c080 	call	820c08 <__udivsi3>
      slen[1] = scalefac_compress % 3;
  81363c:	8809883a 	mov	r4,r17
  813640:	014000c4 	movi	r5,3
      nsfb = nsfb_table[4][index];
    }
    else {
      scalefac_compress -= 244;

      slen[0] = scalefac_compress / 3;
  813644:	d8800a15 	stw	r2,40(sp)
      slen[1] = scalefac_compress % 3;
  813648:	0820c100 	call	820c10 <__umodsi3>
  81364c:	d8800b15 	stw	r2,44(sp)
      slen[2] = 0;
      slen[3] = 0;

      nsfb = nsfb_table[5][index];
  813650:	008020f4 	movhi	r2,131
  813654:	10955204 	addi	r2,r2,21832
  813658:	988d883a 	add	r6,r19,r2
    else {
      scalefac_compress -= 244;

      slen[0] = scalefac_compress / 3;
      slen[1] = scalefac_compress % 3;
      slen[2] = 0;
  81365c:	d8000c15 	stw	zero,48(sp)
      slen[3] = 0;
  813660:	d8000d15 	stw	zero,52(sp)
  813664:	0039c706 	br	811d84 <III_decode+0x1d8>
      sfreqi += 3;
  }

  /* scalefactors, Huffman decoding, requantization */

  ngr = (header->flags & MAD_FLAG_LSF_EXT) ? 1 : 2;
  813668:	01400084 	movi	r5,2
  81366c:	d9476c15 	stw	r5,7600(sp)
  813670:	00396e06 	br	811c2c <III_decode+0x80>
    if (header->flags & MAD_FLAG_MPEG_2_5_EXT)
      sfreq *= 2;

    /* 48000 => 0, 44100 => 1, 32000 => 2,
       24000 => 3, 22050 => 4, 16000 => 5 */
    sfreqi = ((sfreq >>  7) & 0x000f) +
  813674:	2006d3fa 	srli	r3,r4,15
  813678:	2004d1fa 	srli	r2,r4,7
  81367c:	18c0004c 	andi	r3,r3,1
  813680:	108003cc 	andi	r2,r2,15
  813684:	10c5883a 	add	r2,r2,r3
  813688:	10bffe04 	addi	r2,r2,-8
  81368c:	d8876d15 	stw	r2,7604(sp)
  813690:	00396206 	br	811c1c <III_decode+0x70>
    exp     = *expptr++;
    reqhits = 0;

    big_values = channel->big_values;

    while (big_values-- && cachesz + bits_left > 0) {
  813694:	73800104 	addi	r14,r14,4
  813698:	8c8d883a 	add	r6,r17,r18
  81369c:	db876115 	stw	r14,7556(sp)
  8136a0:	003aa106 	br	812128 <III_decode+0x57c>
  8136a4:	73800104 	addi	r14,r14,4
  8136a8:	db876115 	stw	r14,7556(sp)
  8136ac:	003a9e06 	br	812128 <III_decode+0x57c>
  else if (cachesz + bits_left > 0)
    fprintf(stderr, "%d stuffing bits\n", cachesz + bits_left);
# endif

  /* rzero */
  while (xrptr < &xr[576]) {
  8136b0:	00808d84 	movi	r2,566
  8136b4:	003fd106 	br	8135fc <III_decode+0x1a50>
	return error;
    }

    /* joint stereo processing */

    if (header->mode == MAD_MODE_JOINT_STEREO && header->mode_extension) {
  8136b8:	dac77017 	ldw	r11,7616(sp)
  8136bc:	00800084 	movi	r2,2
  8136c0:	59000117 	ldw	r4,4(r11)
  8136c4:	20837126 	beq	r4,r2,81448c <III_decode+0x28e0>
	return error;
    }

    /* reordering, alias reduction, IMDCT, overlap-add, frequency inversion */

    for (ch = 0; ch < nch; ++ch) {
  8136c8:	d9479217 	ldw	r5,7752(sp)
  8136cc:	28022d1e 	bne	r5,zero,813f84 <III_decode+0x23d8>
  8136d0:	d8877017 	ldw	r2,7616(sp)
  8136d4:	d9874c17 	ldw	r6,7472(sp)
  8136d8:	da82bd04 	addi	r10,sp,2804
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  8136dc:	dac2cf04 	addi	r11,sp,2876
  8136e0:	db02e104 	addi	r12,sp,2948
  8136e4:	dbc00204 	addi	r15,sp,8
  8136e8:	04802404 	movi	r18,144
  8136ec:	10800c04 	addi	r2,r2,48
	return error;
    }

    /* reordering, alias reduction, IMDCT, overlap-add, frequency inversion */

    for (ch = 0; ch < nch; ++ch) {
  8136f0:	d9875715 	stw	r6,7516(sp)
  8136f4:	da875615 	stw	r10,7512(sp)
 * DESCRIPTION:	decode frame main_data
 */
static
enum mad_error III_decode(struct mad_bitptr *ptr, struct mad_frame *frame,
			  struct sideinfo *si, unsigned int nch)
{
  8136f8:	dac75415 	stw	r11,7504(sp)
  8136fc:	db075315 	stw	r12,7500(sp)
  813700:	d8076a15 	stw	zero,7592(sp)
  813704:	d8075815 	stw	zero,7520(sp)
  813708:	d8075515 	stw	zero,7508(sp)
  81370c:	dbc75215 	stw	r15,7496(sp)
  813710:	dc875115 	stw	r18,7492(sp)
  813714:	d8879415 	stw	r2,7760(sp)
    }

    /* reordering, alias reduction, IMDCT, overlap-add, frequency inversion */

    for (ch = 0; ch < nch; ++ch) {
      struct channel const *channel = &granule->ch[ch];
  813718:	d8c79517 	ldw	r3,7764(sp)
  81371c:	d9075817 	ldw	r4,7520(sp)
      mad_fixed_t (*sample)[32] = &frame->sbsample[ch][18 * gr];
  813720:	d9479417 	ldw	r5,7760(sp)
  813724:	da875717 	ldw	r10,7516(sp)
    }

    /* reordering, alias reduction, IMDCT, overlap-add, frequency inversion */

    for (ch = 0; ch < nch; ++ch) {
      struct channel const *channel = &granule->ch[ch];
  813728:	1907883a 	add	r3,r3,r4
  81372c:	d8c76815 	stw	r3,7584(sp)
      mad_fixed_t (*sample)[32] = &frame->sbsample[ch][18 * gr];
      unsigned int sb, l, i, sblimit;
      mad_fixed_t output[36];

      if (channel->block_type == 2) {
  813730:	19800243 	ldbu	r6,9(r3)

    /* reordering, alias reduction, IMDCT, overlap-add, frequency inversion */

    for (ch = 0; ch < nch; ++ch) {
      struct channel const *channel = &granule->ch[ch];
      mad_fixed_t (*sample)[32] = &frame->sbsample[ch][18 * gr];
  813734:	2a8b883a 	add	r5,r5,r10
      unsigned int sb, l, i, sblimit;
      mad_fixed_t output[36];

      if (channel->block_type == 2) {
  813738:	00800084 	movi	r2,2

    /* reordering, alias reduction, IMDCT, overlap-add, frequency inversion */

    for (ch = 0; ch < nch; ++ch) {
      struct channel const *channel = &granule->ch[ch];
      mad_fixed_t (*sample)[32] = &frame->sbsample[ch][18 * gr];
  81373c:	d9476715 	stw	r5,7580(sp)
      unsigned int sb, l, i, sblimit;
      mad_fixed_t output[36];

      if (channel->block_type == 2) {
  813740:	30824226 	beq	r6,r2,81404c <III_decode+0x24a0>
{
  mad_fixed_t const *bound;
  int i;

  bound = &xr[lines];
  for (xr += 18; xr < bound; xr += 18) {
  813744:	d9475617 	ldw	r5,7512(sp)
  813748:	df075417 	ldw	fp,7504(sp)
  81374c:	29424004 	addi	r5,r5,2304
  813750:	d9478f15 	stw	r5,7740(sp)
  813754:	e143872e 	bgeu	fp,r5,814574 <III_decode+0x29c8>
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813758:	e3000217 	ldw	r12,8(fp)
  81375c:	e2c00117 	ldw	r11,4(fp)
  813760:	e3c00317 	ldw	r15,12(fp)
  813764:	0329c83a 	sub	r20,zero,r12
  813768:	e3000517 	ldw	r12,20(fp)
  81376c:	02e7c83a 	sub	r19,zero,r11
  813770:	e2c00417 	ldw	r11,16(fp)
  813774:	0319c83a 	sub	r12,zero,r12
  813778:	db078a15 	stw	r12,7720(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
  81377c:	e3000317 	ldw	r12,12(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813780:	03ebc83a 	sub	r21,zero,r15
  813784:	02edc83a 	sub	r22,zero,r11

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813788:	6019d33a 	srai	r12,r12,12
  81378c:	e3c00117 	ldw	r15,4(fp)
  813790:	e2c00217 	ldw	r11,8(fp)
  813794:	db078615 	stw	r12,7704(sp)
  813798:	e3000517 	ldw	r12,20(fp)
  81379c:	781fd33a 	srai	r15,r15,12
  8137a0:	5817d33a 	srai	r11,r11,12
  8137a4:	6019d33a 	srai	r12,r12,12
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8137a8:	e0bfff17 	ldw	r2,-4(fp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8137ac:	dbc78215 	stw	r15,7688(sp)
  8137b0:	dac78415 	stw	r11,7696(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8137b4:	dac78a17 	ldw	r11,7720(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8137b8:	db078d15 	stw	r12,7732(sp)
  8137bc:	db078217 	ldw	r12,7688(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8137c0:	e0fffe17 	ldw	r3,-8(fp)
  8137c4:	1005d33a 	srai	r2,r2,12
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8137c8:	5817d33a 	srai	r11,r11,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8137cc:	630386e4 	muli	r12,r12,3611
  8137d0:	e3c00417 	ldw	r15,16(fp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8137d4:	1807d33a 	srai	r3,r3,12
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8137d8:	dac78b15 	stw	r11,7724(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8137dc:	12fdf124 	muli	r11,r2,-2108
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8137e0:	db074115 	stw	r12,7428(sp)
  8137e4:	db078417 	ldw	r12,7696(sp)
  8137e8:	781fd33a 	srai	r15,r15,12
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8137ec:	dac78115 	stw	r11,7684(sp)
  8137f0:	1afe1ce4 	muli	r11,r3,-1933
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8137f4:	6303cc64 	muli	r12,r12,3889
  8137f8:	dbc78815 	stw	r15,7712(sp)
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8137fc:	dac78315 	stw	r11,7692(sp)
      register mad_fixed_t a, b;
      register mad_fixed64hi_t hi;
      register mad_fixed64lo_t lo;

      a = xr[-1 - i];
      b = xr[     i];
  813800:	e2800017 	ldw	r10,0(fp)
  813804:	e4000617 	ldw	r16,24(fp)
  813808:	e4400717 	ldw	r17,28(fp)

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81380c:	e13ffd17 	ldw	r4,-12(fp)
  813810:	e17ffc17 	ldw	r5,-16(fp)
  813814:	e1bffb17 	ldw	r6,-20(fp)
  813818:	e1fffa17 	ldw	r7,-24(fp)
  81381c:	e23ff917 	ldw	r8,-28(fp)
  813820:	e27ff817 	ldw	r9,-32(fp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813824:	db074015 	stw	r12,7424(sp)
  813828:	db078617 	ldw	r12,7704(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81382c:	2009d33a 	srai	r4,r4,12
  813830:	280bd33a 	srai	r5,r5,12
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813834:	6303eee4 	muli	r12,r12,4027
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813838:	22febf24 	muli	r11,r4,-1284
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81383c:	300dd33a 	srai	r6,r6,12
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813840:	db073f15 	stw	r12,7420(sp)
  813844:	db078817 	ldw	r12,7712(sp)
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813848:	dac78515 	stw	r11,7700(sp)
  81384c:	2aff45a4 	muli	r11,r5,-746
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813850:	6303fb64 	muli	r12,r12,4077
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  813854:	380fd33a 	srai	r7,r7,12
	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813858:	dac78715 	stw	r11,7708(sp)
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  81385c:	db073e15 	stw	r12,7416(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813860:	db078b17 	ldw	r12,7724(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813864:	32ff9f24 	muli	r11,r6,-388
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813868:	02a5c83a 	sub	r18,zero,r10
  81386c:	633fd624 	muli	r12,r12,-168
  813870:	046fc83a 	sub	r23,zero,r17

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813874:	dac78915 	stw	r11,7716(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813878:	db078c15 	stw	r12,7728(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
  81387c:	db078d17 	ldw	r12,7732(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813880:	b81fd33a 	srai	r15,r23,12
  813884:	9025d33a 	srai	r18,r18,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813888:	62c3ff24 	muli	r11,r12,4092
  81388c:	5015d33a 	srai	r10,r10,12
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813890:	3b3fd624 	muli	r12,r7,-168
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813894:	94bdf124 	muli	r18,r18,-2108

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813898:	52836e24 	muli	r10,r10,3512
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  81389c:	db078e15 	stw	r12,7736(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8138a0:	10836e24 	muli	r2,r2,3512
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8138a4:	7b3ffc24 	muli	r12,r15,-16

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8138a8:	dbc78117 	ldw	r15,7684(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8138ac:	1485883a 	add	r2,r2,r18

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8138b0:	dc874117 	ldw	r18,7428(sp)
  8138b4:	53d5883a 	add	r10,r10,r15
  8138b8:	dbc78317 	ldw	r15,7692(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8138bc:	9827d33a 	srai	r19,r19,12
  8138c0:	a029d33a 	srai	r20,r20,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8138c4:	93e5883a 	add	r18,r18,r15
  8138c8:	e4800115 	stw	r18,4(fp)
  8138cc:	dbc78517 	ldw	r15,7700(sp)
  8138d0:	dc874017 	ldw	r18,7424(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8138d4:	a82bd33a 	srai	r21,r21,12
  8138d8:	b02dd33a 	srai	r22,r22,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8138dc:	93e5883a 	add	r18,r18,r15
  8138e0:	e4800215 	stw	r18,8(fp)
  8138e4:	dbc78717 	ldw	r15,7708(sp)
  8138e8:	dc873f17 	ldw	r18,7420(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8138ec:	043fc83a 	sub	ra,zero,r16
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8138f0:	4011d33a 	srai	r8,r8,12
	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8138f4:	93e5883a 	add	r18,r18,r15
  8138f8:	e4800315 	stw	r18,12(fp)
  8138fc:	dbc78917 	ldw	r15,7716(sp)
  813900:	dc873e17 	ldw	r18,7416(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  813904:	4813d33a 	srai	r9,r9,12
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813908:	f83fd33a 	srai	ra,ra,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  81390c:	93e5883a 	add	r18,r18,r15
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813910:	8021d33a 	srai	r16,r16,12
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813914:	dbc78e17 	ldw	r15,7736(sp)
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813918:	8823d33a 	srai	r17,r17,12
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  81391c:	9cfe1ce4 	muli	r19,r19,-1933
  813920:	a53ebf24 	muli	r20,r20,-1284
  813924:	ad7f45a4 	muli	r21,r21,-746
  813928:	b5bf9f24 	muli	r22,r22,-388
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81392c:	18c386e4 	muli	r3,r3,3611
  813930:	2103cc64 	muli	r4,r4,3889
  813934:	2943eee4 	muli	r5,r5,4027
  813938:	3183fb64 	muli	r6,r6,4077
	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  81393c:	e4800415 	stw	r18,16(fp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  813940:	39c3ff24 	muli	r7,r7,4092
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813944:	dc878c17 	ldw	r18,7728(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813948:	437ff164 	muli	r13,r8,-59
  81394c:	4bbffc24 	muli	r14,r9,-16
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813950:	fffff164 	muli	ra,ra,-59

	MAD_F_ML0(hi, lo,  b, cs[i]);
  813954:	8403ffe4 	muli	r16,r16,4095
  813958:	8c43ffe4 	muli	r17,r17,4095
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81395c:	4203ffe4 	muli	r8,r8,4095
  813960:	4a43ffe4 	muli	r9,r9,4095
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813964:	1cc7883a 	add	r3,r3,r19
  813968:	2509883a 	add	r4,r4,r20
  81396c:	2d4b883a 	add	r5,r5,r21
  813970:	358d883a 	add	r6,r6,r22

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813974:	5bd7883a 	add	r11,r11,r15
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813978:	3c8f883a 	add	r7,r7,r18

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  81397c:	e2c00515 	stw	r11,20(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813980:	e0bfff15 	stw	r2,-4(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  813984:	e2800015 	stw	r10,0(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  813988:	e0fffe15 	stw	r3,-8(fp)
  81398c:	e13ffd15 	stw	r4,-12(fp)
  813990:	e17ffc15 	stw	r5,-16(fp)
  813994:	e1bffb15 	stw	r6,-20(fp)
  813998:	e1fffa15 	stw	r7,-24(fp)
{
  mad_fixed_t const *bound;
  int i;

  bound = &xr[lines];
  for (xr += 18; xr < bound; xr += 18) {
  81399c:	dc878f17 	ldw	r18,7740(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8139a0:	47d1883a 	add	r8,r8,ra

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8139a4:	8361883a 	add	r16,r16,r13
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8139a8:	4b13883a 	add	r9,r9,r12

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8139ac:	8ba3883a 	add	r17,r17,r14
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8139b0:	e23ff915 	stw	r8,-28(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8139b4:	e4000615 	stw	r16,24(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8139b8:	e27ff815 	stw	r9,-32(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8139bc:	e4400715 	stw	r17,28(fp)
{
  mad_fixed_t const *bound;
  int i;

  bound = &xr[lines];
  for (xr += 18; xr < bound; xr += 18) {
  8139c0:	e7001204 	addi	fp,fp,72
  8139c4:	e4bf6436 	bltu	fp,r18,813758 <III_decode+0x1bac>
  8139c8:	d8876817 	ldw	r2,7584(sp)
  8139cc:	10c00203 	ldbu	r3,8(r2)
  8139d0:	1019883a 	mov	r12,r2

      l = 0;

      /* subbands 0-1 */

      if (channel->block_type != 2 || (channel->flags & mixed_block_flag)) {
  8139d4:	61800243 	ldbu	r6,9(r12)
  8139d8:	00800084 	movi	r2,2
  8139dc:	30817826 	beq	r6,r2,813fc0 <III_decode+0x2414>
	unsigned int block_type;

	block_type = channel->block_type;
	if (channel->flags & mixed_block_flag)
  8139e0:	1880020c 	andi	r2,r3,8
  8139e4:	1001741e 	bne	r2,zero,813fb8 <III_decode+0x240c>
      /* subbands 0-1 */

      if (channel->block_type != 2 || (channel->flags & mixed_block_flag)) {
	unsigned int block_type;

	block_type = channel->block_type;
  8139e8:	3029883a 	mov	r20,r6
  8139ec:	dc875617 	ldw	r18,7512(sp)
  8139f0:	dc475517 	ldw	r17,7508(sp)
  8139f4:	dbc03204 	addi	r15,sp,200
  8139f8:	0027883a 	mov	r19,zero
  8139fc:	7c001204 	addi	r16,r15,72
  813a00:	05400084 	movi	r21,2
	if (channel->flags & mixed_block_flag)
	  block_type = 0;

	/* long blocks */
	for (sb = 0; sb < 2; ++sb, l += 18) {
	  III_imdct_l(&xr[ch][l], output, block_type);
  813a04:	9009883a 	mov	r4,r18
  813a08:	d9403204 	addi	r5,sp,200
  813a0c:	a00d883a 	mov	r6,r20
  813a10:	0810cb00 	call	810cb0 <III_imdct_l>
  813a14:	d8877017 	ldw	r2,7616(sp)
  813a18:	d8c76717 	ldw	r3,7580(sp)
  813a1c:	d9403204 	addi	r5,sp,200
  813a20:	10890c17 	ldw	r2,9264(r2)
  813a24:	d8879015 	stw	r2,7744(sp)
  813a28:	d9079017 	ldw	r4,7744(sp)
  813a2c:	9cc5883a 	add	r2,r19,r19
  813a30:	1085883a 	add	r2,r2,r2
  813a34:	188f883a 	add	r7,r3,r2
  813a38:	890d883a 	add	r6,r17,r4
    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = output[i +  0] + overlap[i];
  813a3c:	30800017 	ldw	r2,0(r6)
  813a40:	28c00017 	ldw	r3,0(r5)
    overlap[i]    = output[i + 18];
  813a44:	29001217 	ldw	r4,72(r5)
  813a48:	29400104 	addi	r5,r5,4
    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = output[i +  0] + overlap[i];
  813a4c:	1887883a 	add	r3,r3,r2
  813a50:	38c00015 	stw	r3,0(r7)
    overlap[i]    = output[i + 18];
  813a54:	31000015 	stw	r4,0(r6)
  813a58:	39c02004 	addi	r7,r7,128
  813a5c:	31800104 	addi	r6,r6,4

    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
  813a60:	2c3ff61e 	bne	r5,r16,813a3c <III_decode+0x1e90>
	block_type = channel->block_type;
	if (channel->flags & mixed_block_flag)
	  block_type = 0;

	/* long blocks */
	for (sb = 0; sb < 2; ++sb, l += 18) {
  813a64:	9cc00044 	addi	r19,r19,1
  813a68:	94801204 	addi	r18,r18,72
  813a6c:	8c401204 	addi	r17,r17,72
  813a70:	9d7fe41e 	bne	r19,r21,813a04 <III_decode+0x1e58>

# if 1 || defined(ASO_INTERLEAVE1) || defined(ASO_INTERLEAVE2)
  {
    register mad_fixed_t tmp1, tmp2;

    tmp1 = sample[1][sb];
  813a74:	dac76717 	ldw	r11,7580(sp)
    tmp2 = sample[3][sb];
  813a78:	db076717 	ldw	r12,7580(sp)

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813a7c:	dbc76717 	ldw	r15,7580(sp)

# if 1 || defined(ASO_INTERLEAVE1) || defined(ASO_INTERLEAVE2)
  {
    register mad_fixed_t tmp1, tmp2;

    tmp1 = sample[1][sb];
  813a80:	5ac02004 	addi	r11,r11,128
    tmp2 = sample[3][sb];
  813a84:	63006004 	addi	r12,r12,384
  813a88:	60c00117 	ldw	r3,4(r12)

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813a8c:	58800117 	ldw	r2,4(r11)
      tmp1 = sample[i + 4][sb];
  813a90:	59008117 	ldw	r4,516(r11)
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813a94:	5980c117 	ldw	r6,772(r11)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813a98:	0085c83a 	sub	r2,zero,r2
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813a9c:	00c7c83a 	sub	r3,zero,r3

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813aa0:	58800115 	stw	r2,4(r11)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813aa4:	58c04115 	stw	r3,260(r11)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813aa8:	7880a004 	addi	r2,r15,640
  813aac:	0109c83a 	sub	r4,zero,r4
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813ab0:	018dc83a 	sub	r6,zero,r6

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813ab4:	11000115 	stw	r4,4(r2)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813ab8:	11804115 	stw	r6,260(r2)
      tmp2 = sample[i + 6][sb];
  813abc:	1140c117 	ldw	r5,772(r2)
    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
  813ac0:	10c08117 	ldw	r3,516(r2)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813ac4:	79012004 	addi	r4,r15,1152
      tmp1 = sample[i + 4][sb];
  813ac8:	20808117 	ldw	r2,516(r4)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813acc:	00c7c83a 	sub	r3,zero,r3
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813ad0:	014bc83a 	sub	r5,zero,r5

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813ad4:	20c00115 	stw	r3,4(r4)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813ad8:	21404115 	stw	r5,260(r4)
      tmp2 = sample[i + 6][sb];
  813adc:	20c0c117 	ldw	r3,772(r4)
    }

    sample[13][sb] = -tmp1;
  813ae0:	0085c83a 	sub	r2,zero,r2
  813ae4:	7c81a004 	addi	r18,r15,1664
  813ae8:	d9076a17 	ldw	r4,7592(sp)
  813aec:	90800115 	stw	r2,4(r18)
    tmp1 = sample[17][sb];
  813af0:	78822004 	addi	r2,r15,2176
  813af4:	d8875d15 	stw	r2,7540(sp)
  813af8:	10800117 	ldw	r2,4(r2)
    sample[15][sb] = -tmp2;
    sample[17][sb] = -tmp1;
  813afc:	da875d17 	ldw	r10,7540(sp)
  813b00:	21809024 	muli	r6,r4,576
      tmp2 = sample[i + 6][sb];
    }

    sample[13][sb] = -tmp1;
    tmp1 = sample[17][sb];
    sample[15][sb] = -tmp2;
  813b04:	7941e004 	addi	r5,r15,1920
  813b08:	00c7c83a 	sub	r3,zero,r3
  813b0c:	28c00115 	stw	r3,4(r5)
  813b10:	d9475e15 	stw	r5,7544(sp)
    sample[17][sb] = -tmp1;
  813b14:	0085c83a 	sub	r2,zero,r2
  813b18:	01409004 	movi	r5,576
  813b1c:	01c00904 	movi	r7,36

# if 1 || defined(ASO_INTERLEAVE1) || defined(ASO_INTERLEAVE2)
  {
    register mad_fixed_t tmp1, tmp2;

    tmp1 = sample[1][sb];
  813b20:	dac75a15 	stw	r11,7528(sp)
    tmp2 = sample[3][sb];
  813b24:	db075b15 	stw	r12,7532(sp)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
    }

    sample[13][sb] = -tmp1;
  813b28:	dc875c15 	stw	r18,7536(sp)
    tmp1 = sample[17][sb];
    sample[15][sb] = -tmp2;
    sample[17][sb] = -tmp1;
  813b2c:	50800115 	stw	r2,4(r10)
  813b30:	00000206 	br	813b3c <III_decode+0x1f90>
      III_freqinver(sample, 1);

      /* (nonzero) subbands 2-31 */

      i = 576;
      while (i > 36 && xr[ch][i - 1] == 0)
  813b34:	21c25326 	beq	r4,r7,814484 <III_decode+0x28d8>
  813b38:	200b883a 	mov	r5,r4
  813b3c:	293fffc4 	addi	r4,r5,-1
  813b40:	3105883a 	add	r2,r6,r4
  813b44:	1085883a 	add	r2,r2,r2
  813b48:	1085883a 	add	r2,r2,r2
  813b4c:	16c5883a 	add	r2,r2,sp
  813b50:	10c2bd17 	ldw	r3,2804(r2)
  813b54:	183ff726 	beq	r3,zero,813b34 <III_decode+0x1f88>
	--i;

      sblimit = 32 - (576 - i) / 18;
  813b58:	01009004 	movi	r4,576
  813b5c:	2149c83a 	sub	r4,r4,r5
  813b60:	01400484 	movi	r5,18
  813b64:	0820c080 	call	820c08 <__udivsi3>

      if (channel->block_type != 2) {
  813b68:	dac76817 	ldw	r11,7584(sp)

      i = 576;
      while (i > 36 && xr[ch][i - 1] == 0)
	--i;

      sblimit = 32 - (576 - i) / 18;
  813b6c:	00c00804 	movi	r3,32

      if (channel->block_type != 2) {
  813b70:	01000084 	movi	r4,2
  813b74:	59800243 	ldbu	r6,9(r11)

      i = 576;
      while (i > 36 && xr[ch][i - 1] == 0)
	--i;

      sblimit = 32 - (576 - i) / 18;
  813b78:	1893c83a 	sub	r9,r3,r2

      if (channel->block_type != 2) {
  813b7c:	31004e26 	beq	r6,r4,813cb8 <III_decode+0x210c>
	/* long blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
  813b80:	22409c2e 	bgeu	r4,r9,813df4 <III_decode+0x2248>
	    III_freqinver(sample, sb);
	}
      }
      else {
	/* short blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
  813b84:	df075317 	ldw	fp,7500(sp)
  813b88:	dc875117 	ldw	r18,7492(sp)
  813b8c:	ddc75a17 	ldw	r23,7528(sp)
  813b90:	dd875b17 	ldw	r22,7532(sp)
  813b94:	dc076717 	ldw	r16,7580(sp)
  813b98:	dd475c17 	ldw	r21,7536(sp)
  813b9c:	dc475d17 	ldw	r17,7540(sp)
  813ba0:	dd075e17 	ldw	r20,7544(sp)
  813ba4:	2027883a 	mov	r19,r4
      sblimit = 32 - (576 - i) / 18;

      if (channel->block_type != 2) {
	/* long blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
	  III_imdct_l(&xr[ch][l], output, channel->block_type);
  813ba8:	d9403204 	addi	r5,sp,200
  813bac:	e009883a 	mov	r4,fp
  813bb0:	da479615 	stw	r9,7768(sp)
  813bb4:	0810cb00 	call	810cb0 <III_imdct_l>
  813bb8:	dbc77017 	ldw	r15,7616(sp)
  813bbc:	d8c76717 	ldw	r3,7580(sp)
  813bc0:	9cc5883a 	add	r2,r19,r19
  813bc4:	7bc90c17 	ldw	r15,9264(r15)
  813bc8:	da479617 	ldw	r9,7768(sp)
  813bcc:	1085883a 	add	r2,r2,r2
  813bd0:	d9403204 	addi	r5,sp,200
  813bd4:	dbc79015 	stw	r15,7744(sp)
  813bd8:	188f883a 	add	r7,r3,r2
  813bdc:	93cd883a 	add	r6,r18,r15
  813be0:	2a001204 	addi	r8,r5,72
    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = output[i +  0] + overlap[i];
  813be4:	30800017 	ldw	r2,0(r6)
  813be8:	28c00017 	ldw	r3,0(r5)
    overlap[i]    = output[i + 18];
  813bec:	29001217 	ldw	r4,72(r5)
  813bf0:	29400104 	addi	r5,r5,4
    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = output[i +  0] + overlap[i];
  813bf4:	1887883a 	add	r3,r3,r2
  813bf8:	38c00015 	stw	r3,0(r7)
    overlap[i]    = output[i + 18];
  813bfc:	31000015 	stw	r4,0(r6)
  813c00:	39c02004 	addi	r7,r7,128
  813c04:	31800104 	addi	r6,r6,4

    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
  813c08:	417ff61e 	bne	r8,r5,813be4 <III_decode+0x2038>
	/* long blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
	  III_imdct_l(&xr[ch][l], output, channel->block_type);
	  III_overlap(output, (*frame->overlap)[ch][sb], sample, sb);

	  if (sb & 1)
  813c0c:	9880004c 	andi	r2,r19,1
  813c10:	1005003a 	cmpeq	r2,r2,zero
  813c14:	10001b1e 	bne	r2,zero,813c84 <III_decode+0x20d8>
# if 1 || defined(ASO_INTERLEAVE1) || defined(ASO_INTERLEAVE2)
  {
    register mad_fixed_t tmp1, tmp2;

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];
  813c18:	b1c00217 	ldw	r7,8(r22)

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813c1c:	b8800217 	ldw	r2,8(r23)
      tmp1 = sample[i + 4][sb];
  813c20:	80c0a217 	ldw	r3,648(r16)
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813c24:	8100e217 	ldw	r4,904(r16)
    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
  813c28:	81412217 	ldw	r5,1160(r16)
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813c2c:	81816217 	ldw	r6,1416(r16)
    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
  813c30:	8201a217 	ldw	r8,1672(r16)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813c34:	0085c83a 	sub	r2,zero,r2
  813c38:	00c7c83a 	sub	r3,zero,r3
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813c3c:	01cfc83a 	sub	r7,zero,r7
  813c40:	0109c83a 	sub	r4,zero,r4

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813c44:	014bc83a 	sub	r5,zero,r5
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813c48:	018dc83a 	sub	r6,zero,r6

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813c4c:	80802215 	stw	r2,136(r16)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813c50:	81c06215 	stw	r7,392(r16)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813c54:	80c0a215 	stw	r3,648(r16)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813c58:	8100e215 	stw	r4,904(r16)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813c5c:	81412215 	stw	r5,1160(r16)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813c60:	81816215 	stw	r6,1416(r16)
      tmp2 = sample[i + 6][sb];
    }

    sample[13][sb] = -tmp1;
  813c64:	0211c83a 	sub	r8,zero,r8

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813c68:	8081e217 	ldw	r2,1928(r16)
    }

    sample[13][sb] = -tmp1;
  813c6c:	aa000215 	stw	r8,8(r21)
    tmp1 = sample[17][sb];
  813c70:	88c00217 	ldw	r3,8(r17)
    sample[15][sb] = -tmp2;
  813c74:	0085c83a 	sub	r2,zero,r2
  813c78:	a0800215 	stw	r2,8(r20)
    sample[17][sb] = -tmp1;
  813c7c:	00c7c83a 	sub	r3,zero,r3
  813c80:	88c00215 	stw	r3,8(r17)

      sblimit = 32 - (576 - i) / 18;

      if (channel->block_type != 2) {
	/* long blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
  813c84:	9cc00044 	addi	r19,r19,1
  813c88:	e7001204 	addi	fp,fp,72
  813c8c:	94801204 	addi	r18,r18,72
  813c90:	bdc00104 	addi	r23,r23,4
  813c94:	b5800104 	addi	r22,r22,4
  813c98:	84000104 	addi	r16,r16,4
  813c9c:	ad400104 	addi	r21,r21,4
  813ca0:	8c400104 	addi	r17,r17,4
  813ca4:	a5000104 	addi	r20,r20,4
  813ca8:	4cc05226 	beq	r9,r19,813df4 <III_decode+0x2248>
  813cac:	db076817 	ldw	r12,7584(sp)
  813cb0:	61800243 	ldbu	r6,9(r12)
  813cb4:	003fbc06 	br	813ba8 <III_decode+0x1ffc>
	    III_freqinver(sample, sb);
	}
      }
      else {
	/* short blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
  813cb8:	32404e2e 	bgeu	r6,r9,813df4 <III_decode+0x2248>

      sblimit = 32 - (576 - i) / 18;

      if (channel->block_type != 2) {
	/* long blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
  813cbc:	d9075317 	ldw	r4,7500(sp)
  813cc0:	df075117 	ldw	fp,7492(sp)
  813cc4:	ddc75a17 	ldw	r23,7528(sp)
  813cc8:	dd875b17 	ldw	r22,7532(sp)
  813ccc:	dc476717 	ldw	r17,7580(sp)
  813cd0:	dd475c17 	ldw	r21,7536(sp)
  813cd4:	dd075d17 	ldw	r20,7540(sp)
  813cd8:	dcc75e17 	ldw	r19,7544(sp)
  813cdc:	d9403204 	addi	r5,sp,200
  813ce0:	3025883a 	mov	r18,r6
  813ce4:	d9075915 	stw	r4,7524(sp)
  813ce8:	2c001204 	addi	r16,r5,72
	}
      }
      else {
	/* short blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
	  III_imdct_s(&xr[ch][l], output);
  813cec:	d9075917 	ldw	r4,7524(sp)
  813cf0:	d9403204 	addi	r5,sp,200
  813cf4:	da479615 	stw	r9,7768(sp)
  813cf8:	081067c0 	call	81067c <III_imdct_s>
  813cfc:	d9877017 	ldw	r6,7616(sp)
  813d00:	da876717 	ldw	r10,7580(sp)
  813d04:	9485883a 	add	r2,r18,r18
  813d08:	31890c17 	ldw	r6,9264(r6)
  813d0c:	da479617 	ldw	r9,7768(sp)
  813d10:	1085883a 	add	r2,r2,r2
  813d14:	d9879015 	stw	r6,7744(sp)
  813d18:	508f883a 	add	r7,r10,r2
  813d1c:	e18d883a 	add	r6,fp,r6
  813d20:	d9403204 	addi	r5,sp,200
    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = output[i +  0] + overlap[i];
  813d24:	30800017 	ldw	r2,0(r6)
  813d28:	28c00017 	ldw	r3,0(r5)
    overlap[i]    = output[i + 18];
  813d2c:	29001217 	ldw	r4,72(r5)
  813d30:	29400104 	addi	r5,r5,4
    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = output[i +  0] + overlap[i];
  813d34:	1887883a 	add	r3,r3,r2
  813d38:	38c00015 	stw	r3,0(r7)
    overlap[i]    = output[i + 18];
  813d3c:	31000015 	stw	r4,0(r6)
  813d40:	39c02004 	addi	r7,r7,128
  813d44:	31800104 	addi	r6,r6,4

    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
  813d48:	2c3ff61e 	bne	r5,r16,813d24 <III_decode+0x2178>
	/* short blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
	  III_imdct_s(&xr[ch][l], output);
	  III_overlap(output, (*frame->overlap)[ch][sb], sample, sb);

	  if (sb & 1)
  813d4c:	9080004c 	andi	r2,r18,1
  813d50:	1005003a 	cmpeq	r2,r2,zero
  813d54:	10001b1e 	bne	r2,zero,813dc4 <III_decode+0x2218>
# if 1 || defined(ASO_INTERLEAVE1) || defined(ASO_INTERLEAVE2)
  {
    register mad_fixed_t tmp1, tmp2;

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];
  813d58:	b1c00217 	ldw	r7,8(r22)

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813d5c:	b8800217 	ldw	r2,8(r23)
      tmp1 = sample[i + 4][sb];
  813d60:	88c0a217 	ldw	r3,648(r17)
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813d64:	8900e217 	ldw	r4,904(r17)
    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
  813d68:	89412217 	ldw	r5,1160(r17)
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813d6c:	89816217 	ldw	r6,1416(r17)
    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
  813d70:	8a01a217 	ldw	r8,1672(r17)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813d74:	0085c83a 	sub	r2,zero,r2
  813d78:	00c7c83a 	sub	r3,zero,r3
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813d7c:	01cfc83a 	sub	r7,zero,r7
  813d80:	0109c83a 	sub	r4,zero,r4

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813d84:	014bc83a 	sub	r5,zero,r5
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813d88:	018dc83a 	sub	r6,zero,r6

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813d8c:	88802215 	stw	r2,136(r17)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813d90:	89c06215 	stw	r7,392(r17)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813d94:	88c0a215 	stw	r3,648(r17)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813d98:	8900e215 	stw	r4,904(r17)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813d9c:	89412215 	stw	r5,1160(r17)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813da0:	89816215 	stw	r6,1416(r17)
      tmp2 = sample[i + 6][sb];
    }

    sample[13][sb] = -tmp1;
  813da4:	0211c83a 	sub	r8,zero,r8

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813da8:	8881e217 	ldw	r2,1928(r17)
    }

    sample[13][sb] = -tmp1;
  813dac:	aa000215 	stw	r8,8(r21)
    tmp1 = sample[17][sb];
  813db0:	a0c00217 	ldw	r3,8(r20)
    sample[15][sb] = -tmp2;
  813db4:	0085c83a 	sub	r2,zero,r2
  813db8:	98800215 	stw	r2,8(r19)
    sample[17][sb] = -tmp1;
  813dbc:	00c7c83a 	sub	r3,zero,r3
  813dc0:	a0c00215 	stw	r3,8(r20)
	    III_freqinver(sample, sb);
	}
      }
      else {
	/* short blocks */
	for (sb = 2; sb < sblimit; ++sb, l += 18) {
  813dc4:	dac75917 	ldw	r11,7524(sp)
  813dc8:	94800044 	addi	r18,r18,1
  813dcc:	e7001204 	addi	fp,fp,72
  813dd0:	5ac01204 	addi	r11,r11,72
  813dd4:	dac75915 	stw	r11,7524(sp)
  813dd8:	bdc00104 	addi	r23,r23,4
  813ddc:	b5800104 	addi	r22,r22,4
  813de0:	8c400104 	addi	r17,r17,4
  813de4:	ad400104 	addi	r21,r21,4
  813de8:	a5000104 	addi	r20,r20,4
  813dec:	9cc00104 	addi	r19,r19,4
  813df0:	4cbfbe1e 	bne	r9,r18,813cec <III_decode+0x2140>
	}
      }

      /* remaining (zero) subbands */

      for (sb = sblimit; sb < 32; ++sb) {
  813df4:	008007c4 	movi	r2,31
  813df8:	12404636 	bltu	r2,r9,813f14 <III_decode+0x2368>
  813dfc:	48c01224 	muli	r3,r9,72
  813e00:	db075a17 	ldw	r12,7528(sp)
  813e04:	dc875517 	ldw	r18,7508(sp)
  813e08:	4a45883a 	add	r2,r9,r9
  813e0c:	1085883a 	add	r2,r2,r2
  813e10:	60a1883a 	add	r16,r12,r2
  813e14:	dbc75e17 	ldw	r15,7544(sp)
  813e18:	1c99883a 	add	r12,r3,r18
  813e1c:	d9075c17 	ldw	r4,7536(sp)
  813e20:	d8c75b17 	ldw	r3,7532(sp)
  813e24:	d9475d17 	ldw	r5,7540(sp)
  813e28:	789d883a 	add	r14,r15,r2
  813e2c:	4815883a 	mov	r10,r9
  813e30:	189f883a 	add	r15,r3,r2
  813e34:	209b883a 	add	r13,r4,r2
  813e38:	2897883a 	add	r11,r5,r2
  813e3c:	8013883a 	mov	r9,r16
	III_overlap_z((*frame->overlap)[ch][sb], sample, sb);
  813e40:	d9879017 	ldw	r6,7744(sp)
  813e44:	dc876717 	ldw	r18,7580(sp)
  813e48:	5285883a 	add	r2,r10,r10
  813e4c:	1085883a 	add	r2,r2,r2
  813e50:	6187883a 	add	r3,r12,r6
  813e54:	9089883a 	add	r4,r18,r2
  813e58:	19401204 	addi	r5,r3,72
    sample[17][sb] = tmp2;
    overlap[17]    = 0;
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = overlap[i];
  813e5c:	18800017 	ldw	r2,0(r3)
  813e60:	20800015 	stw	r2,0(r4)
    overlap[i]    = 0;
  813e64:	18000015 	stw	zero,0(r3)
  813e68:	18c00104 	addi	r3,r3,4
  813e6c:	21002004 	addi	r4,r4,128
    overlap[16]    = 0;
    sample[17][sb] = tmp2;
    overlap[17]    = 0;
  }
# else
  for (i = 0; i < 18; ++i) {
  813e70:	28fffa1e 	bne	r5,r3,813e5c <III_decode+0x22b0>
      /* remaining (zero) subbands */

      for (sb = sblimit; sb < 32; ++sb) {
	III_overlap_z((*frame->overlap)[ch][sb], sample, sb);

	if (sb & 1)
  813e74:	5080004c 	andi	r2,r10,1
  813e78:	1005003a 	cmpeq	r2,r2,zero
  813e7c:	10001b1e 	bne	r2,zero,813eec <III_decode+0x2340>
# if 1 || defined(ASO_INTERLEAVE1) || defined(ASO_INTERLEAVE2)
  {
    register mad_fixed_t tmp1, tmp2;

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];
  813e80:	79c00017 	ldw	r7,0(r15)

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813e84:	80800017 	ldw	r2,0(r16)
      tmp1 = sample[i + 4][sb];
  813e88:	48c08017 	ldw	r3,512(r9)
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813e8c:	4900c017 	ldw	r4,768(r9)
    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
  813e90:	49410017 	ldw	r5,1024(r9)
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813e94:	49814017 	ldw	r6,1280(r9)
    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
  813e98:	4a018017 	ldw	r8,1536(r9)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813e9c:	0085c83a 	sub	r2,zero,r2
  813ea0:	00c7c83a 	sub	r3,zero,r3
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813ea4:	01cfc83a 	sub	r7,zero,r7
  813ea8:	0109c83a 	sub	r4,zero,r4

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813eac:	014bc83a 	sub	r5,zero,r5
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813eb0:	018dc83a 	sub	r6,zero,r6

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813eb4:	48800015 	stw	r2,0(r9)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813eb8:	49c04015 	stw	r7,256(r9)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813ebc:	48c08015 	stw	r3,512(r9)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813ec0:	4900c015 	stw	r4,768(r9)

    tmp1 = sample[1][sb];
    tmp2 = sample[3][sb];

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
  813ec4:	49410015 	stw	r5,1024(r9)
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
  813ec8:	49814015 	stw	r6,1280(r9)
      tmp2 = sample[i + 6][sb];
    }

    sample[13][sb] = -tmp1;
  813ecc:	0211c83a 	sub	r8,zero,r8

    for (i = 1; i < 13; i += 4) {
      sample[i + 0][sb] = -tmp1;
      tmp1 = sample[i + 4][sb];
      sample[i + 2][sb] = -tmp2;
      tmp2 = sample[i + 6][sb];
  813ed0:	4881c017 	ldw	r2,1792(r9)
    }

    sample[13][sb] = -tmp1;
  813ed4:	6a000015 	stw	r8,0(r13)
    tmp1 = sample[17][sb];
  813ed8:	58c00017 	ldw	r3,0(r11)
    sample[15][sb] = -tmp2;
  813edc:	0085c83a 	sub	r2,zero,r2
  813ee0:	70800015 	stw	r2,0(r14)
    sample[17][sb] = -tmp1;
  813ee4:	00c7c83a 	sub	r3,zero,r3
  813ee8:	58c00015 	stw	r3,0(r11)
	}
      }

      /* remaining (zero) subbands */

      for (sb = sblimit; sb < 32; ++sb) {
  813eec:	52800044 	addi	r10,r10,1
  813ef0:	00800804 	movi	r2,32
  813ef4:	63001204 	addi	r12,r12,72
  813ef8:	84000104 	addi	r16,r16,4
  813efc:	7bc00104 	addi	r15,r15,4
  813f00:	4a400104 	addi	r9,r9,4
  813f04:	6b400104 	addi	r13,r13,4
  813f08:	5ac00104 	addi	r11,r11,4
  813f0c:	73800104 	addi	r14,r14,4
  813f10:	50bfcb1e 	bne	r10,r2,813e40 <III_decode+0x2294>
	return error;
    }

    /* reordering, alias reduction, IMDCT, overlap-add, frequency inversion */

    for (ch = 0; ch < nch; ++ch) {
  813f14:	d8876a17 	ldw	r2,7592(sp)
  813f18:	d8c75817 	ldw	r3,7520(sp)
  813f1c:	d9075717 	ldw	r4,7516(sp)
  813f20:	d9875517 	ldw	r6,7508(sp)
  813f24:	da875417 	ldw	r10,7504(sp)
  813f28:	dac75317 	ldw	r11,7500(sp)
  813f2c:	db075217 	ldw	r12,7496(sp)
  813f30:	dbc75117 	ldw	r15,7492(sp)
  813f34:	d9478f17 	ldw	r5,7740(sp)
  813f38:	dc877217 	ldw	r18,7624(sp)
  813f3c:	10800044 	addi	r2,r2,1
  813f40:	18c00e84 	addi	r3,r3,58
  813f44:	21048004 	addi	r4,r4,4608
  813f48:	31824004 	addi	r6,r6,2304
  813f4c:	52824004 	addi	r10,r10,2304
  813f50:	5ac24004 	addi	r11,r11,2304
  813f54:	63000104 	addi	r12,r12,4
  813f58:	7bc24004 	addi	r15,r15,2304
  813f5c:	d8876a15 	stw	r2,7592(sp)
  813f60:	d8c75815 	stw	r3,7520(sp)
  813f64:	d9075715 	stw	r4,7516(sp)
  813f68:	d9475615 	stw	r5,7512(sp)
  813f6c:	d9875515 	stw	r6,7508(sp)
  813f70:	da875415 	stw	r10,7504(sp)
  813f74:	dac75315 	stw	r11,7500(sp)
  813f78:	db075215 	stw	r12,7496(sp)
  813f7c:	dbc75115 	stw	r15,7492(sp)
  813f80:	90bde51e 	bne	r18,r2,813718 <III_decode+0x1b6c>

  /* scalefactors, Huffman decoding, requantization */

  ngr = (header->flags & MAD_FLAG_LSF_EXT) ? 1 : 2;

  for (gr = 0; gr < ngr; ++gr) {
  813f84:	d8876b17 	ldw	r2,7596(sp)
  813f88:	d8c79517 	ldw	r3,7764(sp)
  813f8c:	d9074c17 	ldw	r4,7472(sp)
  813f90:	d9476c17 	ldw	r5,7600(sp)
  813f94:	10800044 	addi	r2,r2,1
  813f98:	18c01d04 	addi	r3,r3,116
  813f9c:	21024004 	addi	r4,r4,2304
  813fa0:	d8876b15 	stw	r2,7596(sp)
  813fa4:	d8c79515 	stw	r3,7764(sp)
  813fa8:	d9074c15 	stw	r4,7472(sp)
  813fac:	11772736 	bltu	r2,r5,811c4c <III_decode+0xa0>
  813fb0:	0005883a 	mov	r2,zero
  813fb4:	003d9106 	br	8135fc <III_decode+0x1a50>
      /* subbands 0-1 */

      if (channel->block_type != 2 || (channel->flags & mixed_block_flag)) {
	unsigned int block_type;

	block_type = channel->block_type;
  813fb8:	0029883a 	mov	r20,zero
  813fbc:	003e8b06 	br	8139ec <III_decode+0x1e40>

      l = 0;

      /* subbands 0-1 */

      if (channel->block_type != 2 || (channel->flags & mixed_block_flag)) {
  813fc0:	1880020c 	andi	r2,r3,8
  813fc4:	103ffc1e 	bne	r2,zero,813fb8 <III_decode+0x240c>
	block_type = channel->block_type;
	if (channel->flags & mixed_block_flag)
	  block_type = 0;

	/* long blocks */
	for (sb = 0; sb < 2; ++sb, l += 18) {
  813fc8:	dc875617 	ldw	r18,7512(sp)
  813fcc:	dc475517 	ldw	r17,7508(sp)
  813fd0:	d9403204 	addi	r5,sp,200
  813fd4:	0021883a 	mov	r16,zero
  813fd8:	2cc01204 	addi	r19,r5,72
  813fdc:	05000084 	movi	r20,2
	}
      }
      else {
	/* short blocks */
	for (sb = 0; sb < 2; ++sb, l += 18) {
	  III_imdct_s(&xr[ch][l], output);
  813fe0:	d9403204 	addi	r5,sp,200
  813fe4:	9009883a 	mov	r4,r18
  813fe8:	081067c0 	call	81067c <III_imdct_s>
  813fec:	d9877017 	ldw	r6,7616(sp)
  813ff0:	da876717 	ldw	r10,7580(sp)
  813ff4:	8405883a 	add	r2,r16,r16
  813ff8:	31890c17 	ldw	r6,9264(r6)
  813ffc:	1085883a 	add	r2,r2,r2
  814000:	508f883a 	add	r7,r10,r2
  814004:	d9879015 	stw	r6,7744(sp)
  814008:	d9403204 	addi	r5,sp,200
  81400c:	898d883a 	add	r6,r17,r6
    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = output[i +  0] + overlap[i];
  814010:	30800017 	ldw	r2,0(r6)
  814014:	28c00017 	ldw	r3,0(r5)
    overlap[i]    = output[i + 18];
  814018:	29001217 	ldw	r4,72(r5)
  81401c:	29400104 	addi	r5,r5,4
    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
    sample[i][sb] = output[i +  0] + overlap[i];
  814020:	1887883a 	add	r3,r3,r2
  814024:	38c00015 	stw	r3,0(r7)
    overlap[i]    = output[i + 18];
  814028:	31000015 	stw	r4,0(r6)
  81402c:	39c02004 	addi	r7,r7,128
  814030:	31800104 	addi	r6,r6,4

    sample[i + 1][sb] = output[i + 1 +  0] + overlap[i + 1];
    overlap[i + 1]    = output[i + 1 + 18];
  }
# else
  for (i = 0; i < 18; ++i) {
  814034:	2cfff61e 	bne	r5,r19,814010 <III_decode+0x2464>
	  III_overlap(output, (*frame->overlap)[ch][sb], sample, sb);
	}
      }
      else {
	/* short blocks */
	for (sb = 0; sb < 2; ++sb, l += 18) {
  814038:	84000044 	addi	r16,r16,1
  81403c:	94801204 	addi	r18,r18,72
  814040:	8c401204 	addi	r17,r17,72
  814044:	853fe61e 	bne	r16,r20,813fe0 <III_decode+0x2434>
  814048:	003e8a06 	br	813a74 <III_decode+0x1ec8>
  unsigned int sb, l, f, w, sbw[3], sw[3];

  /* this is probably wrong for 8000 Hz mixed blocks */

  sb = 0;
  if (channel->flags & mixed_block_flag) {
  81404c:	18800203 	ldbu	r2,8(r3)
      mad_fixed_t (*sample)[32] = &frame->sbsample[ch][18 * gr];
      unsigned int sb, l, i, sblimit;
      mad_fixed_t output[36];

      if (channel->block_type == 2) {
	III_reorder(xr[ch], channel, sfbwidth[ch]);
  814050:	dac75217 	ldw	r11,7496(sp)
  unsigned int sb, l, f, w, sbw[3], sw[3];

  /* this is probably wrong for 8000 Hz mixed blocks */

  sb = 0;
  if (channel->flags & mixed_block_flag) {
  814054:	1080020c 	andi	r2,r2,8
      mad_fixed_t (*sample)[32] = &frame->sbsample[ch][18 * gr];
      unsigned int sb, l, i, sblimit;
      mad_fixed_t output[36];

      if (channel->block_type == 2) {
	III_reorder(xr[ch], channel, sfbwidth[ch]);
  814058:	59000017 	ldw	r4,0(r11)
  unsigned int sb, l, f, w, sbw[3], sw[3];

  /* this is probably wrong for 8000 Hz mixed blocks */

  sb = 0;
  if (channel->flags & mixed_block_flag) {
  81405c:	1001011e 	bne	r2,zero,814464 <III_decode+0x28b8>
  814060:	0029883a 	mov	r20,zero
  }

  f = *sfbwidth++;
  w = 0;

  for (l = 18 * sb; l < 576; ++l) {
  814064:	a48004a4 	muli	r18,r20,18
    while (l < 36)
      l += *sfbwidth++;
  }

  for (w = 0; w < 3; ++w) {
    sbw[w] = sb;
  814068:	dd000415 	stw	r20,16(sp)
    sw[w]  = 0;
  81406c:	d8000715 	stw	zero,28(sp)
    while (l < 36)
      l += *sfbwidth++;
  }

  for (w = 0; w < 3; ++w) {
    sbw[w] = sb;
  814070:	dd000515 	stw	r20,20(sp)
    sw[w]  = 0;
  814074:	d8000815 	stw	zero,32(sp)
    while (l < 36)
      l += *sfbwidth++;
  }

  for (w = 0; w < 3; ++w) {
    sbw[w] = sb;
  814078:	dd000615 	stw	r20,24(sp)
    sw[w]  = 0;
  81407c:	d8000915 	stw	zero,36(sp)
  }

  f = *sfbwidth++;
  814080:	20c00003 	ldbu	r3,0(r4)
  814084:	db075617 	ldw	r12,7512(sp)
  814088:	9485883a 	add	r2,r18,r18
  81408c:	1085883a 	add	r2,r2,r2
  814090:	1823883a 	mov	r17,r3
  814094:	24c00044 	addi	r19,r4,1
  814098:	1321883a 	add	r16,r2,r12
  81409c:	0013883a 	mov	r9,zero
  8140a0:	057fffc4 	movi	r21,-1
  8140a4:	05800184 	movi	r22,6
  8140a8:	00001506 	br	814100 <III_decode+0x2554>
    if (f-- == 0) {
      f = *sfbwidth++ - 1;
      w = (w + 1) % 3;
    }

    tmp[sbw[w]][w][sw[w]++] = xr[l];
  8140ac:	4a45883a 	add	r2,r9,r9
  8140b0:	1085883a 	add	r2,r2,r2
  8140b4:	16cf883a 	add	r7,r2,sp
  8140b8:	3a000417 	ldw	r8,16(r7)
  8140bc:	488001a4 	muli	r2,r9,6
  8140c0:	39000717 	ldw	r4,28(r7)
  8140c4:	40c004a4 	muli	r3,r8,18
  8140c8:	81800017 	ldw	r6,0(r16)
  8140cc:	21400044 	addi	r5,r4,1
  8140d0:	10c5883a 	add	r2,r2,r3
  8140d4:	1105883a 	add	r2,r2,r4
  8140d8:	1085883a 	add	r2,r2,r2
  8140dc:	1085883a 	add	r2,r2,r2
  8140e0:	16c5883a 	add	r2,r2,sp
  8140e4:	11807d15 	stw	r6,500(r2)
  8140e8:	39400715 	stw	r5,28(r7)

    if (sw[w] == 6) {
  8140ec:	2d800e26 	beq	r5,r22,814128 <III_decode+0x257c>
  }

  f = *sfbwidth++;
  w = 0;

  for (l = 18 * sb; l < 576; ++l) {
  8140f0:	94800044 	addi	r18,r18,1
  8140f4:	00809004 	movi	r2,576
  8140f8:	84000104 	addi	r16,r16,4
  8140fc:	90801126 	beq	r18,r2,814144 <III_decode+0x2598>
    if (f-- == 0) {
  814100:	8c7fffc4 	addi	r17,r17,-1
  814104:	8d7fe91e 	bne	r17,r21,8140ac <III_decode+0x2500>
      f = *sfbwidth++ - 1;
  814108:	98800003 	ldbu	r2,0(r19)
      w = (w + 1) % 3;
  81410c:	49000044 	addi	r4,r9,1
  814110:	014000c4 	movi	r5,3
  f = *sfbwidth++;
  w = 0;

  for (l = 18 * sb; l < 576; ++l) {
    if (f-- == 0) {
      f = *sfbwidth++ - 1;
  814114:	1463883a 	add	r17,r2,r17
      w = (w + 1) % 3;
  814118:	0820c100 	call	820c10 <__umodsi3>
  81411c:	1013883a 	mov	r9,r2
  f = *sfbwidth++;
  w = 0;

  for (l = 18 * sb; l < 576; ++l) {
    if (f-- == 0) {
      f = *sfbwidth++ - 1;
  814120:	9cc00044 	addi	r19,r19,1
  814124:	003fe106 	br	8140ac <III_decode+0x2500>

    tmp[sbw[w]][w][sw[w]++] = xr[l];

    if (sw[w] == 6) {
      sw[w] = 0;
      ++sbw[w];
  814128:	40800044 	addi	r2,r8,1
  81412c:	38800415 	stw	r2,16(r7)
  }

  f = *sfbwidth++;
  w = 0;

  for (l = 18 * sb; l < 576; ++l) {
  814130:	94800044 	addi	r18,r18,1
  814134:	00809004 	movi	r2,576
    }

    tmp[sbw[w]][w][sw[w]++] = xr[l];

    if (sw[w] == 6) {
      sw[w] = 0;
  814138:	38000715 	stw	zero,28(r7)
  }

  f = *sfbwidth++;
  w = 0;

  for (l = 18 * sb; l < 576; ++l) {
  81413c:	84000104 	addi	r16,r16,4
  814140:	90bfef1e 	bne	r18,r2,814100 <III_decode+0x2554>
      sw[w] = 0;
      ++sbw[w];
    }
  }

  memcpy(&xr[18 * sb], &tmp[sb], (576 - 18 * sb) * sizeof(mad_fixed_t));
  814144:	a1001224 	muli	r4,r20,72
  814148:	dbc75617 	ldw	r15,7512(sp)
  81414c:	01824004 	movi	r6,2304
  814150:	d9407d04 	addi	r5,sp,500
  814154:	310dc83a 	sub	r6,r6,r4
  814158:	290b883a 	add	r5,r5,r4
  81415c:	23c9883a 	add	r4,r4,r15
  814160:	0821e500 	call	821e50 <memcpy>
	 * granules with block_type == 2 (short block)." However, other
	 * sources suggest alias reduction should indeed be performed on the
	 * lower two subbands of mixed blocks. Most other implementations do
	 * this, so by default we will too.
	 */
	if (channel->flags & mixed_block_flag)
  814164:	dc876817 	ldw	r18,7584(sp)
  814168:	90c00203 	ldbu	r3,8(r18)
  81416c:	1880020c 	andi	r2,r3,8
  814170:	1000b726 	beq	r2,zero,814450 <III_decode+0x28a4>
  814174:	df075417 	ldw	fp,7504(sp)
{
  mad_fixed_t const *bound;
  int i;

  bound = &xr[lines];
  for (xr += 18; xr < bound; xr += 18) {
  814178:	d8875317 	ldw	r2,7500(sp)
  81417c:	e0800536 	bltu	fp,r2,814194 <III_decode+0x25e8>
  814180:	d9075617 	ldw	r4,7512(sp)
  814184:	db076817 	ldw	r12,7584(sp)
  814188:	21024004 	addi	r4,r4,2304
  81418c:	d9078f15 	stw	r4,7740(sp)
  814190:	003e1006 	br	8139d4 <III_decode+0x1e28>
      register mad_fixed_t a, b;
      register mad_fixed64hi_t hi;
      register mad_fixed64lo_t lo;

      a = xr[-1 - i];
      b = xr[     i];
  814194:	e1c00517 	ldw	r7,20(fp)

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  814198:	e3fffe17 	ldw	r15,-8(fp)
      register mad_fixed_t a, b;
      register mad_fixed64hi_t hi;
      register mad_fixed64lo_t lo;

      a = xr[-1 - i];
      b = xr[     i];
  81419c:	e2400717 	ldw	r9,28(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8141a0:	01d7c83a 	sub	r11,zero,r7
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8141a4:	781fd33a 	srai	r15,r15,12
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8141a8:	dac77815 	stw	r11,7648(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8141ac:	e2fffd17 	ldw	r11,-12(fp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8141b0:	0259c83a 	sub	r12,zero,r9
  8141b4:	db077d15 	stw	r12,7668(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8141b8:	dbc74615 	stw	r15,7448(sp)
  8141bc:	e33ffc17 	ldw	r12,-16(fp)
  8141c0:	e3fffb17 	ldw	r15,-20(fp)
  8141c4:	5817d33a 	srai	r11,r11,12
  8141c8:	6019d33a 	srai	r12,r12,12
  8141cc:	781fd33a 	srai	r15,r15,12
  8141d0:	e2bfff17 	ldw	r10,-4(fp)
  8141d4:	dac74515 	stw	r11,7444(sp)
  8141d8:	e2fffa17 	ldw	r11,-24(fp)
  8141dc:	db074415 	stw	r12,7440(sp)
  8141e0:	dbc74315 	stw	r15,7436(sp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8141e4:	db077817 	ldw	r12,7648(sp)
  8141e8:	dbc77d17 	ldw	r15,7668(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8141ec:	5015d33a 	srai	r10,r10,12
  8141f0:	5817d33a 	srai	r11,r11,12
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8141f4:	6019d33a 	srai	r12,r12,12
  8141f8:	781fd33a 	srai	r15,r15,12
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8141fc:	dac74215 	stw	r11,7432(sp)
	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814200:	52fdf124 	muli	r11,r10,-2108
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814204:	db077915 	stw	r12,7652(sp)
  814208:	dbc77e15 	stw	r15,7672(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  81420c:	db074617 	ldw	r12,7448(sp)
  814210:	dbc74517 	ldw	r15,7444(sp)
  814214:	dac77315 	stw	r11,7628(sp)
  814218:	dac74417 	ldw	r11,7440(sp)
  81421c:	633e1ce4 	muli	r12,r12,-1933
  814220:	7bfebf24 	muli	r15,r15,-1284
  814224:	5aff45a4 	muli	r11,r11,-746
  814228:	db077415 	stw	r12,7632(sp)
  81422c:	dbc77515 	stw	r15,7636(sp)
      register mad_fixed_t a, b;
      register mad_fixed64hi_t hi;
      register mad_fixed64lo_t lo;

      a = xr[-1 - i];
      b = xr[     i];
  814230:	e0800017 	ldw	r2,0(fp)
  814234:	e0c00117 	ldw	r3,4(fp)
  814238:	e1000217 	ldw	r4,8(fp)
  81423c:	e1400317 	ldw	r5,12(fp)
  814240:	e1800417 	ldw	r6,16(fp)
  814244:	e2000617 	ldw	r8,24(fp)

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  814248:	e43ff917 	ldw	r16,-28(fp)
  81424c:	e47ff817 	ldw	r17,-32(fp)
	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814250:	dac77615 	stw	r11,7640(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814254:	dbc77917 	ldw	r15,7652(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814258:	db074317 	ldw	r12,7436(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81425c:	8021d33a 	srai	r16,r16,12
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814260:	7bffd624 	muli	r15,r15,-168

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814264:	633f9f24 	muli	r12,r12,-388
  814268:	dac74217 	ldw	r11,7432(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  81426c:	dbc77a15 	stw	r15,7656(sp)
  814270:	dbc77e17 	ldw	r15,7672(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814274:	db077715 	stw	r12,7644(sp)
  814278:	833ff164 	muli	r12,r16,-59
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81427c:	8823d33a 	srai	r17,r17,12
	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814280:	5affd624 	muli	r11,r11,-168
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814284:	7bfffc24 	muli	r15,r15,-16

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814288:	db077c15 	stw	r12,7664(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81428c:	db074617 	ldw	r12,7448(sp)
	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814290:	dac77b15 	stw	r11,7660(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814294:	dbc77f15 	stw	r15,7676(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814298:	8afffc24 	muli	r11,r17,-16
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  81429c:	dbc74517 	ldw	r15,7444(sp)
  8142a0:	630386e4 	muli	r12,r12,3611
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8142a4:	00a5c83a 	sub	r18,zero,r2

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8142a8:	dac78015 	stw	r11,7680(sp)
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8142ac:	7bc3cc64 	muli	r15,r15,3889
  8142b0:	dac74417 	ldw	r11,7440(sp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8142b4:	9025d33a 	srai	r18,r18,12
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8142b8:	db074b15 	stw	r12,7468(sp)
  8142bc:	db074317 	ldw	r12,7436(sp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8142c0:	00e7c83a 	sub	r19,zero,r3
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8142c4:	dbc74a15 	stw	r15,7464(sp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8142c8:	94bdf124 	muli	r18,r18,-2108
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8142cc:	5ac3eee4 	muli	r11,r11,4027
  8142d0:	dbc74217 	ldw	r15,7432(sp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8142d4:	1005d33a 	srai	r2,r2,12
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8142d8:	9827d33a 	srai	r19,r19,12
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8142dc:	52836e24 	muli	r10,r10,3512
  8142e0:	6303fb64 	muli	r12,r12,4077
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8142e4:	1807d33a 	srai	r3,r3,12
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8142e8:	0129c83a 	sub	r20,zero,r4
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8142ec:	dac74915 	stw	r11,7460(sp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8142f0:	016bc83a 	sub	r21,zero,r5
  8142f4:	dac74b17 	ldw	r11,7468(sp)
  8142f8:	9cfe1ce4 	muli	r19,r19,-1933
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8142fc:	7bc3ff24 	muli	r15,r15,4092
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814300:	5495883a 	add	r10,r10,r18
  814304:	a029d33a 	srai	r20,r20,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814308:	dc877317 	ldw	r18,7628(sp)
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  81430c:	2009d33a 	srai	r4,r4,12
  814310:	10836e24 	muli	r2,r2,3512
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  814314:	db074815 	stw	r12,7456(sp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814318:	a82bd33a 	srai	r21,r21,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  81431c:	db077417 	ldw	r12,7632(sp)
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  814320:	18c386e4 	muli	r3,r3,3611
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814324:	01adc83a 	sub	r22,zero,r6
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  814328:	dbc74715 	stw	r15,7452(sp)
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  81432c:	a53ebf24 	muli	r20,r20,-1284
  814330:	dbc74a17 	ldw	r15,7464(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814334:	1485883a 	add	r2,r2,r18
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  814338:	280bd33a 	srai	r5,r5,12
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  81433c:	5ce5883a 	add	r18,r11,r19
  814340:	b02dd33a 	srai	r22,r22,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814344:	dac77517 	ldw	r11,7636(sp)
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  814348:	2103cc64 	muli	r4,r4,3889
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  81434c:	ad7f45a4 	muli	r21,r21,-746

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814350:	1b07883a 	add	r3,r3,r12
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  814354:	300dd33a 	srai	r6,r6,12
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814358:	db074917 	ldw	r12,7460(sp)
  81435c:	7d27883a 	add	r19,r15,r20
  814360:	b5bf9f24 	muli	r22,r22,-388

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814364:	dbc77617 	ldw	r15,7640(sp)
  814368:	22c9883a 	add	r4,r4,r11
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  81436c:	2943eee4 	muli	r5,r5,4027
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814370:	dac74817 	ldw	r11,7456(sp)
  814374:	6569883a 	add	r20,r12,r21

	MAD_F_ML0(hi, lo,  b, cs[i]);
  814378:	380fd33a 	srai	r7,r7,12
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  81437c:	db077717 	ldw	r12,7644(sp)
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  814380:	3183fb64 	muli	r6,r6,4077
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814384:	5dab883a 	add	r21,r11,r22
  814388:	023fc83a 	sub	ra,zero,r8
  81438c:	dac77a17 	ldw	r11,7656(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814390:	2bcb883a 	add	r5,r5,r15
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  814394:	4011d33a 	srai	r8,r8,12
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814398:	dbc74717 	ldw	r15,7452(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  81439c:	330d883a 	add	r6,r6,r12
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8143a0:	f83fd33a 	srai	ra,ra,12

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8143a4:	db077b17 	ldw	r12,7660(sp)
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8143a8:	4813d33a 	srai	r9,r9,12
  8143ac:	39c3ff24 	muli	r7,r7,4092
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8143b0:	7aed883a 	add	r22,r15,r11

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8143b4:	4203ffe4 	muli	r8,r8,4095
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8143b8:	dbc77c17 	ldw	r15,7664(sp)
  8143bc:	3b0f883a 	add	r7,r7,r12
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8143c0:	dac77f17 	ldw	r11,7676(sp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8143c4:	db078017 	ldw	r12,7680(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8143c8:	fffff164 	muli	ra,ra,-59

	MAD_F_ML0(hi, lo,  b, cs[i]);
  8143cc:	4a43ffe4 	muli	r9,r9,4095
      b = xr[     i];

# if defined(ASO_ZEROCHECK)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
  8143d0:	8403ffe4 	muli	r16,r16,4095
  8143d4:	8c43ffe4 	muli	r17,r17,4095
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8143d8:	e2bfff15 	stw	r10,-4(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8143dc:	43d1883a 	add	r8,r8,r15
{
  mad_fixed_t const *bound;
  int i;

  bound = &xr[lines];
  for (xr += 18; xr < bound; xr += 18) {
  8143e0:	dbc75317 	ldw	r15,7500(sp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8143e4:	87e1883a 	add	r16,r16,ra
  8143e8:	8ae3883a 	add	r17,r17,r11

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8143ec:	4b13883a 	add	r9,r9,r12
  8143f0:	e0800015 	stw	r2,0(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8143f4:	e4bffe15 	stw	r18,-8(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  8143f8:	e0c00115 	stw	r3,4(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  8143fc:	e4fffd15 	stw	r19,-12(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814400:	e1000215 	stw	r4,8(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814404:	e53ffc15 	stw	r20,-16(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814408:	e1400315 	stw	r5,12(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  81440c:	e57ffb15 	stw	r21,-20(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814410:	e1800415 	stw	r6,16(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814414:	e5bffa15 	stw	r22,-24(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814418:	e1c00515 	stw	r7,20(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  81441c:	e43ff915 	stw	r16,-28(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814420:	e2000615 	stw	r8,24(fp)
      if (a | b) {
# endif
	MAD_F_ML0(hi, lo,  a, cs[i]);
	MAD_F_MLA(hi, lo, -b, ca[i]);

	xr[-1 - i] = MAD_F_MLZ(hi, lo);
  814424:	e47ff815 	stw	r17,-32(fp)

	MAD_F_ML0(hi, lo,  b, cs[i]);
	MAD_F_MLA(hi, lo,  a, ca[i]);

	xr[     i] = MAD_F_MLZ(hi, lo);
  814428:	e2400715 	stw	r9,28(fp)
{
  mad_fixed_t const *bound;
  int i;

  bound = &xr[lines];
  for (xr += 18; xr < bound; xr += 18) {
  81442c:	e7001204 	addi	fp,fp,72
  814430:	e3ff581e 	bne	fp,r15,814194 <III_decode+0x25e8>
  814434:	dc876817 	ldw	r18,7584(sp)
  814438:	d8875617 	ldw	r2,7512(sp)
  81443c:	90c00203 	ldbu	r3,8(r18)
  814440:	10824004 	addi	r2,r2,2304
  814444:	9019883a 	mov	r12,r18
  814448:	d8878f15 	stw	r2,7740(sp)
  81444c:	003d6106 	br	8139d4 <III_decode+0x1e28>
  814450:	dac75617 	ldw	r11,7512(sp)
  814454:	db076817 	ldw	r12,7584(sp)
  814458:	5ac24004 	addi	r11,r11,2304
  81445c:	dac78f15 	stw	r11,7740(sp)
  814460:	003d5c06 	br	8139d4 <III_decode+0x1e28>
  unsigned int sb, l, f, w, sbw[3], sw[3];

  /* this is probably wrong for 8000 Hz mixed blocks */

  sb = 0;
  if (channel->flags & mixed_block_flag) {
  814464:	0007883a 	mov	r3,zero
  814468:	014008c4 	movi	r5,35
    sb = 2;

    l = 0;
    while (l < 36)
      l += *sfbwidth++;
  81446c:	20800003 	ldbu	r2,0(r4)
  814470:	21000044 	addi	r4,r4,1
  814474:	1887883a 	add	r3,r3,r2
  sb = 0;
  if (channel->flags & mixed_block_flag) {
    sb = 2;

    l = 0;
    while (l < 36)
  814478:	28fffc2e 	bgeu	r5,r3,81446c <III_decode+0x28c0>
  81447c:	05000084 	movi	r20,2
  814480:	003ef806 	br	814064 <III_decode+0x24b8>
      III_freqinver(sample, 1);

      /* (nonzero) subbands 2-31 */

      i = 576;
      while (i > 36 && xr[ch][i - 1] == 0)
  814484:	200b883a 	mov	r5,r4
  814488:	003db306 	br	813b58 <III_decode+0x1fac>
	return error;
    }

    /* joint stereo processing */

    if (header->mode == MAD_MODE_JOINT_STEREO && header->mode_extension) {
  81448c:	5b000217 	ldw	r12,8(r11)
  814490:	db079315 	stw	r12,7756(sp)
  814494:	603c8c26 	beq	r12,zero,8136c8 <III_decode+0x1b1c>
			  unsigned char const *sfbwidth)
{
  short modes[39];
  unsigned int sfbi, l, n, i;

  if (granule->ch[0].block_type !=
  814498:	dbc79517 	ldw	r15,7764(sp)
    }

    /* joint stereo processing */

    if (header->mode == MAD_MODE_JOINT_STEREO && header->mode_extension) {
      error = III_stereo(xr, granule, header, sfbwidth[0]);
  81449c:	df000217 	ldw	fp,8(sp)
			  unsigned char const *sfbwidth)
{
  short modes[39];
  unsigned int sfbi, l, n, i;

  if (granule->ch[0].block_type !=
  8144a0:	78c00243 	ldbu	r3,9(r15)
  8144a4:	788010c3 	ldbu	r2,67(r15)
  8144a8:	1880751e 	bne	r3,r2,814680 <III_decode+0x2ad4>
  8144ac:	78c00203 	ldbu	r3,8(r15)
  8144b0:	78801083 	ldbu	r2,66(r15)
  8144b4:	18c0020c 	andi	r3,r3,8
  8144b8:	1080020c 	andi	r2,r2,8
  8144bc:	1880701e 	bne	r3,r2,814680 <III_decode+0x2ad4>
  8144c0:	200b883a 	mov	r5,r4
  8144c4:	6007883a 	mov	r3,r12
  8144c8:	d8801e04 	addi	r2,sp,120
  8144cc:	d9003184 	addi	r4,sp,198
      (granule->ch[0].flags & mixed_block_flag) !=
      (granule->ch[1].flags & mixed_block_flag))
    return MAD_ERROR_BADSTEREO;

  for (i = 0; i < 39; ++i)
    modes[i] = header->mode_extension;
  8144d0:	10c0000d 	sth	r3,0(r2)
  8144d4:	10800084 	addi	r2,r2,2
      granule->ch[1].block_type ||
      (granule->ch[0].flags & mixed_block_flag) !=
      (granule->ch[1].flags & mixed_block_flag))
    return MAD_ERROR_BADSTEREO;

  for (i = 0; i < 39; ++i)
  8144d8:	113ffd1e 	bne	r2,r4,8144d0 <III_decode+0x2924>
    modes[i] = header->mode_extension;

  /* intensity stereo */

  if (header->mode_extension & I_STEREO) {
  8144dc:	dc879317 	ldw	r18,7756(sp)
  8144e0:	9080004c 	andi	r2,r18,1
  8144e4:	1005003a 	cmpeq	r2,r2,zero
  8144e8:	10006e1e 	bne	r2,zero,8146a4 <III_decode+0x2af8>
    struct channel const *right_ch = &granule->ch[1];
    mad_fixed_t const *right_xr = xr[1];
    unsigned int is_pos;

    header->flags |= MAD_FLAG_I_STEREO;
  8144ec:	d8c77017 	ldw	r3,7616(sp)
    modes[i] = header->mode_extension;

  /* intensity stereo */

  if (header->mode_extension & I_STEREO) {
    struct channel const *right_ch = &granule->ch[1];
  8144f0:	d9079517 	ldw	r4,7764(sp)
    mad_fixed_t const *right_xr = xr[1];
  8144f4:	dd44fd04 	addi	r21,sp,5108
    unsigned int is_pos;

    header->flags |= MAD_FLAG_I_STEREO;
  8144f8:	18800717 	ldw	r2,28(r3)
    modes[i] = header->mode_extension;

  /* intensity stereo */

  if (header->mode_extension & I_STEREO) {
    struct channel const *right_ch = &granule->ch[1];
  8144fc:	21000e84 	addi	r4,r4,58
  814500:	d9075f15 	stw	r4,7548(sp)
    mad_fixed_t const *right_xr = xr[1];
    unsigned int is_pos;

    header->flags |= MAD_FLAG_I_STEREO;
  814504:	15804014 	ori	r22,r2,256
  814508:	1d800715 	stw	r22,28(r3)

    /* first determine which scalefactor bands are to be processed */

    if (right_ch->block_type == 2) {
  81450c:	20800243 	ldbu	r2,9(r4)
  814510:	11401b26 	beq	r2,r5,814580 <III_decode+0x29d4>
      w = 0;
      for (i = start; i < max; ++i) {
	if (i < bound[w])
	  modes[i] = header->mode_extension & ~I_STEREO;

	w = (w + 1) % 3;
  814514:	000f883a 	mov	r7,zero
  814518:	000d883a 	mov	r6,zero
  81451c:	0011883a 	mov	r8,zero
  814520:	02408fc4 	movi	r9,575
    else {  /* right_ch->block_type != 2 */
      unsigned int bound;

      bound = 0;
      for (sfbi = l = 0; l < 576; l += n) {
	n = sfbwidth[sfbi++];
  814524:	e1c5883a 	add	r2,fp,r7
  814528:	11000003 	ldbu	r4,0(r2)
  81452c:	39c00044 	addi	r7,r7,1

	for (i = 0; i < n; ++i) {
  814530:	20000a26 	beq	r4,zero,81455c <III_decode+0x29b0>
	  if (right_xr[i]) {
  814534:	a8800017 	ldw	r2,0(r21)
  814538:	10010f1e 	bne	r2,zero,814978 <III_decode+0x2dcc>
  81453c:	a807883a 	mov	r3,r21
  814540:	000b883a 	mov	r5,zero
  814544:	00000306 	br	814554 <III_decode+0x29a8>
  814548:	18800117 	ldw	r2,4(r3)
  81454c:	18c00104 	addi	r3,r3,4
  814550:	1001091e 	bne	r2,zero,814978 <III_decode+0x2dcc>

      bound = 0;
      for (sfbi = l = 0; l < 576; l += n) {
	n = sfbwidth[sfbi++];

	for (i = 0; i < n; ++i) {
  814554:	29400044 	addi	r5,r5,1
  814558:	217ffb1e 	bne	r4,r5,814548 <III_decode+0x299c>
    }
    else {  /* right_ch->block_type != 2 */
      unsigned int bound;

      bound = 0;
      for (sfbi = l = 0; l < 576; l += n) {
  81455c:	310d883a 	add	r6,r6,r4
  814560:	49807836 	bltu	r9,r6,814744 <III_decode+0x2b98>
	    bound = sfbi;
	    break;
	  }
	}

	right_xr += n;
  814564:	2105883a 	add	r2,r4,r4
  814568:	1085883a 	add	r2,r2,r2
  81456c:	a8ab883a 	add	r21,r21,r2
  814570:	003fec06 	br	814524 <III_decode+0x2978>
  814574:	da876817 	ldw	r10,7584(sp)
  814578:	50c00203 	ldbu	r3,8(r10)
  81457c:	003d1806 	br	8139e0 <III_decode+0x1e34>

      lower = start = max = bound[0] = bound[1] = bound[2] = 0;

      sfbi = l = 0;

      if (right_ch->flags & mixed_block_flag) {
  814580:	20800203 	ldbu	r2,8(r4)
    /* first determine which scalefactor bands are to be processed */

    if (right_ch->block_type == 2) {
      unsigned int lower, start, max, bound[3], w;

      lower = start = max = bound[0] = bound[1] = bound[2] = 0;
  814584:	d8000615 	stw	zero,24(sp)
  814588:	d8000515 	stw	zero,20(sp)

      sfbi = l = 0;

      if (right_ch->flags & mixed_block_flag) {
  81458c:	1080020c 	andi	r2,r2,8
    /* first determine which scalefactor bands are to be processed */

    if (right_ch->block_type == 2) {
      unsigned int lower, start, max, bound[3], w;

      lower = start = max = bound[0] = bound[1] = bound[2] = 0;
  814590:	d8000415 	stw	zero,16(sp)

      sfbi = l = 0;

      if (right_ch->flags & mixed_block_flag) {
  814594:	1000fa26 	beq	r2,zero,814980 <III_decode+0x2dd4>
  814598:	0023883a 	mov	r17,zero
  81459c:	0027883a 	mov	r19,zero
  8145a0:	002f883a 	mov	r23,zero
  8145a4:	018008c4 	movi	r6,35
	while (l < 36) {
	  n = sfbwidth[sfbi++];
  8145a8:	e445883a 	add	r2,fp,r17
  8145ac:	11000003 	ldbu	r4,0(r2)
  8145b0:	8c400044 	addi	r17,r17,1

	  for (i = 0; i < n; ++i) {
  8145b4:	20000a26 	beq	r4,zero,8145e0 <III_decode+0x2a34>
	    if (right_xr[i]) {
  8145b8:	a8800017 	ldw	r2,0(r21)
  8145bc:	10011b1e 	bne	r2,zero,814a2c <III_decode+0x2e80>
  8145c0:	a807883a 	mov	r3,r21
  8145c4:	000b883a 	mov	r5,zero
  8145c8:	00000306 	br	8145d8 <III_decode+0x2a2c>
  8145cc:	18800117 	ldw	r2,4(r3)
  8145d0:	18c00104 	addi	r3,r3,4
  8145d4:	1001151e 	bne	r2,zero,814a2c <III_decode+0x2e80>

      if (right_ch->flags & mixed_block_flag) {
	while (l < 36) {
	  n = sfbwidth[sfbi++];

	  for (i = 0; i < n; ++i) {
  8145d8:	29400044 	addi	r5,r5,1
  8145dc:	217ffb1e 	bne	r4,r5,8145cc <III_decode+0x2a20>
	      lower = sfbi;
	      break;
	    }
	  }

	  right_xr += n;
  8145e0:	2105883a 	add	r2,r4,r4
  8145e4:	1085883a 	add	r2,r2,r2
	  l += n;
  8145e8:	9927883a 	add	r19,r19,r4
	      lower = sfbi;
	      break;
	    }
	  }

	  right_xr += n;
  8145ec:	a8ab883a 	add	r21,r21,r2
      lower = start = max = bound[0] = bound[1] = bound[2] = 0;

      sfbi = l = 0;

      if (right_ch->flags & mixed_block_flag) {
	while (l < 36) {
  8145f0:	34ffed2e 	bgeu	r6,r19,8145a8 <III_decode+0x29fc>

	start = sfbi;
      }

      w = 0;
      while (l < 576) {
  8145f4:	00808fc4 	movi	r2,575
  8145f8:	14c0e636 	bltu	r2,r19,814994 <III_decode+0x2de8>
  8145fc:	8821883a 	mov	r16,r17

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  814600:	e465883a 	add	r18,fp,r17
  814604:	0029883a 	mov	r20,zero
  814608:	000d883a 	mov	r6,zero
	start = sfbi;
      }

      w = 0;
      while (l < 576) {
	n = sfbwidth[sfbi++];
  81460c:	91000003 	ldbu	r4,0(r18)
  814610:	8c400044 	addi	r17,r17,1

	for (i = 0; i < n; ++i) {
  814614:	20000e26 	beq	r4,zero,814650 <III_decode+0x2aa4>
	  if (right_xr[i]) {
  814618:	a8800017 	ldw	r2,0(r21)
  81461c:	1000071e 	bne	r2,zero,81463c <III_decode+0x2a90>
	    max = bound[w] = sfbi;
  814620:	a807883a 	mov	r3,r21
  814624:	000b883a 	mov	r5,zero

      w = 0;
      while (l < 576) {
	n = sfbwidth[sfbi++];

	for (i = 0; i < n; ++i) {
  814628:	29400044 	addi	r5,r5,1
  81462c:	21400826 	beq	r4,r5,814650 <III_decode+0x2aa4>
	  if (right_xr[i]) {
  814630:	18800117 	ldw	r2,4(r3)
  814634:	18c00104 	addi	r3,r3,4
  814638:	103ffb26 	beq	r2,zero,814628 <III_decode+0x2a7c>
	    max = bound[w] = sfbi;
  81463c:	3185883a 	add	r2,r6,r6
  814640:	1085883a 	add	r2,r2,r2
  814644:	16c5883a 	add	r2,r2,sp
  814648:	8829883a 	mov	r20,r17
  81464c:	14400415 	stw	r17,16(r2)
	    break;
	  }
	}

	right_xr += n;
	l += n;
  814650:	9927883a 	add	r19,r19,r4

	start = sfbi;
      }

      w = 0;
      while (l < 576) {
  814654:	00808fc4 	movi	r2,575
	    break;
	  }
	}

	right_xr += n;
	l += n;
  814658:	94800044 	addi	r18,r18,1

	start = sfbi;
      }

      w = 0;
      while (l < 576) {
  81465c:	14c0f036 	bltu	r2,r19,814a20 <III_decode+0x2e74>
	    max = bound[w] = sfbi;
	    break;
	  }
	}

	right_xr += n;
  814660:	2105883a 	add	r2,r4,r4
  814664:	1085883a 	add	r2,r2,r2
	l += n;
	w = (w + 1) % 3;
  814668:	31000044 	addi	r4,r6,1
  81466c:	014000c4 	movi	r5,3
	    max = bound[w] = sfbi;
	    break;
	  }
	}

	right_xr += n;
  814670:	a8ab883a 	add	r21,r21,r2
	l += n;
	w = (w + 1) % 3;
  814674:	0820c100 	call	820c10 <__umodsi3>
  814678:	100d883a 	mov	r6,r2
  81467c:	003fe306 	br	81460c <III_decode+0x2a60>

  /* scalefactors, Huffman decoding, requantization */

  ngr = (header->flags & MAD_FLAG_LSF_EXT) ? 1 : 2;

  for (gr = 0; gr < ngr; ++gr) {
  814680:	00808e44 	movi	r2,569
  814684:	003bdd06 	br	8135fc <III_decode+0x1a50>
	  continue;

	is_pos = right_ch->scalefac[sfbi];

	if (is_pos >= 7) {  /* illegal intensity position */
	  modes[sfbi] &= ~I_STEREO;
  814688:	2344703a 	and	r2,r4,r13
  81468c:	5880000d 	sth	r2,0(r11)
	  }
	}
      }
    }
    else {  /* !(header->flags & MAD_FLAG_LSF_EXT) */
      for (sfbi = l = 0; l < 576; ++sfbi, l += n) {
  814690:	4a13883a 	add	r9,r9,r8
  814694:	63000044 	addi	r12,r12,1
  814698:	5ac00084 	addi	r11,r11,2
  81469c:	52800044 	addi	r10,r10,1
  8146a0:	7a405b2e 	bgeu	r15,r9,814810 <III_decode+0x2c64>
    }
  }

  /* middle/side stereo */

  if (header->mode_extension & MS_STEREO) {
  8146a4:	d8c79317 	ldw	r3,7756(sp)
  8146a8:	1880008c 	andi	r2,r3,2
  8146ac:	103c0626 	beq	r2,zero,8136c8 <III_decode+0x1b1c>
    register mad_fixed_t invsqrt2;

    header->flags |= MAD_FLAG_MS_STEREO;
  8146b0:	d9077017 	ldw	r4,7616(sp)
  8146b4:	e011883a 	mov	r8,fp
  8146b8:	0013883a 	mov	r9,zero
  8146bc:	20800717 	ldw	r2,28(r4)
  8146c0:	da801e04 	addi	r10,sp,120
  8146c4:	02c00084 	movi	r11,2
  8146c8:	10808014 	ori	r2,r2,512
  8146cc:	db02bd04 	addi	r12,sp,2804
  8146d0:	03408fc4 	movi	r13,575
  8146d4:	20800715 	stw	r2,28(r4)
  8146d8:	00000406 	br	8146ec <III_decode+0x2b40>

    invsqrt2 = root_table[3 + -2];

    for (sfbi = l = 0; l < 576; ++sfbi, l += n) {
  8146dc:	4993883a 	add	r9,r9,r6
  8146e0:	42000044 	addi	r8,r8,1
  8146e4:	52800084 	addi	r10,r10,2
  8146e8:	6a7bf736 	bltu	r13,r9,8136c8 <III_decode+0x1b1c>
      n = sfbwidth[sfbi];

      if (modes[sfbi] != MS_STEREO)
  8146ec:	5080000f 	ldh	r2,0(r10)
    header->flags |= MAD_FLAG_MS_STEREO;

    invsqrt2 = root_table[3 + -2];

    for (sfbi = l = 0; l < 576; ++sfbi, l += n) {
      n = sfbwidth[sfbi];
  8146f0:	41800003 	ldbu	r6,0(r8)

      if (modes[sfbi] != MS_STEREO)
  8146f4:	12fff91e 	bne	r2,r11,8146dc <III_decode+0x2b30>
	continue;

      for (i = 0; i < n; ++i) {
  8146f8:	303ff826 	beq	r6,zero,8146dc <III_decode+0x2b30>
  8146fc:	4a45883a 	add	r2,r9,r9
  814700:	1085883a 	add	r2,r2,r2
  814704:	608b883a 	add	r5,r12,r2
  814708:	000f883a 	mov	r7,zero
	register mad_fixed_t m, s;

	m = xr[0][l + i];
  81470c:	28800017 	ldw	r2,0(r5)
	s = xr[1][l + i];
  814710:	29024017 	ldw	r4,2304(r5)
      n = sfbwidth[sfbi];

      if (modes[sfbi] != MS_STEREO)
	continue;

      for (i = 0; i < n; ++i) {
  814714:	39c00044 	addi	r7,r7,1

	m = xr[0][l + i];
	s = xr[1][l + i];

	xr[0][l + i] = mad_f_mul(m + s, invsqrt2);  /* l = (m + s) / sqrt(2) */
	xr[1][l + i] = mad_f_mul(m - s, invsqrt2);  /* r = (m - s) / sqrt(2) */
  814718:	1107c83a 	sub	r3,r2,r4
	register mad_fixed_t m, s;

	m = xr[0][l + i];
	s = xr[1][l + i];

	xr[0][l + i] = mad_f_mul(m + s, invsqrt2);  /* l = (m + s) / sqrt(2) */
  81471c:	1105883a 	add	r2,r2,r4
  814720:	1005d33a 	srai	r2,r2,12
	xr[1][l + i] = mad_f_mul(m - s, invsqrt2);  /* r = (m - s) / sqrt(2) */
  814724:	1807d33a 	srai	r3,r3,12
	register mad_fixed_t m, s;

	m = xr[0][l + i];
	s = xr[1][l + i];

	xr[0][l + i] = mad_f_mul(m + s, invsqrt2);  /* l = (m + s) / sqrt(2) */
  814728:	1082d424 	muli	r2,r2,2896
	xr[1][l + i] = mad_f_mul(m - s, invsqrt2);  /* r = (m - s) / sqrt(2) */
  81472c:	18c2d424 	muli	r3,r3,2896
	register mad_fixed_t m, s;

	m = xr[0][l + i];
	s = xr[1][l + i];

	xr[0][l + i] = mad_f_mul(m + s, invsqrt2);  /* l = (m + s) / sqrt(2) */
  814730:	28800015 	stw	r2,0(r5)
	xr[1][l + i] = mad_f_mul(m - s, invsqrt2);  /* r = (m - s) / sqrt(2) */
  814734:	28c24015 	stw	r3,2304(r5)
      n = sfbwidth[sfbi];

      if (modes[sfbi] != MS_STEREO)
	continue;

      for (i = 0; i < n; ++i) {
  814738:	29400104 	addi	r5,r5,4
  81473c:	31fff31e 	bne	r6,r7,81470c <III_decode+0x2b60>
  814740:	003fe606 	br	8146dc <III_decode+0x2b30>
	}

	right_xr += n;
      }

      for (i = 0; i < bound; ++i)
  814744:	40000926 	beq	r8,zero,81476c <III_decode+0x2bc0>
	modes[i] = header->mode_extension & ~I_STEREO;
  814748:	dac79317 	ldw	r11,7756(sp)
  81474c:	00bfff84 	movi	r2,-2
  814750:	0007883a 	mov	r3,zero
  814754:	5888703a 	and	r4,r11,r2
  814758:	d8801e04 	addi	r2,sp,120
	}

	right_xr += n;
      }

      for (i = 0; i < bound; ++i)
  81475c:	18c00044 	addi	r3,r3,1
	modes[i] = header->mode_extension & ~I_STEREO;
  814760:	1100000d 	sth	r4,0(r2)
	}

	right_xr += n;
      }

      for (i = 0; i < bound; ++i)
  814764:	10800084 	addi	r2,r2,2
  814768:	40fffc1e 	bne	r8,r3,81475c <III_decode+0x2bb0>
	modes[i] = header->mode_extension & ~I_STEREO;
    }

    /* now do the actual processing */

    if (header->flags & MAD_FLAG_LSF_EXT) {
  81476c:	b084000c 	andi	r2,r22,4096
  814770:	10001f26 	beq	r2,zero,8147f0 <III_decode+0x2c44>
      unsigned char const *illegal_pos = granule[1].ch[1].scalefac;
      mad_fixed_t const *lsf_scale;

      /* intensity_scale */
      lsf_scale = is_lsf_table[right_ch->scalefac_compress & 0x1];
  814774:	db075f17 	ldw	r12,7548(sp)
    }

    /* now do the actual processing */

    if (header->flags & MAD_FLAG_LSF_EXT) {
      unsigned char const *illegal_pos = granule[1].ch[1].scalefac;
  814778:	dbc79517 	ldw	r15,7764(sp)
      mad_fixed_t const *lsf_scale;

      /* intensity_scale */
      lsf_scale = is_lsf_table[right_ch->scalefac_compress & 0x1];
  81477c:	00802134 	movhi	r2,132
  814780:	10b57904 	addi	r2,r2,-10780
  814784:	60c0018b 	ldhu	r3,6(r12)
  814788:	6015883a 	mov	r10,r12
  81478c:	0013883a 	mov	r9,zero
  814790:	18c0004c 	andi	r3,r3,1
  814794:	18c00f24 	muli	r3,r3,60
    }

    /* now do the actual processing */

    if (header->flags & MAD_FLAG_LSF_EXT) {
      unsigned char const *illegal_pos = granule[1].ch[1].scalefac;
  814798:	7b003004 	addi	r12,r15,192
      mad_fixed_t const *lsf_scale;

      /* intensity_scale */
      lsf_scale = is_lsf_table[right_ch->scalefac_compress & 0x1];
  81479c:	000d883a 	mov	r6,zero
  8147a0:	189b883a 	add	r13,r3,r2
  8147a4:	dac01e04 	addi	r11,sp,120

      for (sfbi = l = 0; l < 576; ++sfbi, l += n) {
	n = sfbwidth[sfbi];

	if (!(modes[sfbi] & I_STEREO))
  8147a8:	5900000b 	ldhu	r4,0(r11)

      /* intensity_scale */
      lsf_scale = is_lsf_table[right_ch->scalefac_compress & 0x1];

      for (sfbi = l = 0; l < 576; ++sfbi, l += n) {
	n = sfbwidth[sfbi];
  8147ac:	e247883a 	add	r3,fp,r9
  8147b0:	19c00003 	ldbu	r7,0(r3)

	if (!(modes[sfbi] & I_STEREO))
  8147b4:	2080004c 	andi	r2,r4,1
  8147b8:	1005003a 	cmpeq	r2,r2,zero
  8147bc:	1000051e 	bne	r2,zero,8147d4 <III_decode+0x2c28>
	  continue;

	if (illegal_pos[sfbi]) {
  8147c0:	6245883a 	add	r2,r12,r9
  8147c4:	10c00003 	ldbu	r3,0(r2)
  8147c8:	18003426 	beq	r3,zero,81489c <III_decode+0x2cf0>
	  modes[sfbi] &= ~I_STEREO;
  8147cc:	20bfff8c 	andi	r2,r4,65534
  8147d0:	5880000d 	sth	r2,0(r11)
      mad_fixed_t const *lsf_scale;

      /* intensity_scale */
      lsf_scale = is_lsf_table[right_ch->scalefac_compress & 0x1];

      for (sfbi = l = 0; l < 576; ++sfbi, l += n) {
  8147d4:	31cd883a 	add	r6,r6,r7
  8147d8:	00808fc4 	movi	r2,575
  8147dc:	5ac00084 	addi	r11,r11,2
  8147e0:	52800044 	addi	r10,r10,1
  8147e4:	11bfaf36 	bltu	r2,r6,8146a4 <III_decode+0x2af8>
  8147e8:	4a400044 	addi	r9,r9,1
  8147ec:	003fee06 	br	8147a8 <III_decode+0x2bfc>
  8147f0:	da875f17 	ldw	r10,7548(sp)
  8147f4:	e019883a 	mov	r12,fp
  8147f8:	0013883a 	mov	r9,zero
  8147fc:	dac01e04 	addi	r11,sp,120
  814800:	037fff84 	movi	r13,-2
  814804:	03802134 	movhi	r14,132
  814808:	73b59704 	addi	r14,r14,-10660
  81480c:	03c08fc4 	movi	r15,575
    }
    else {  /* !(header->flags & MAD_FLAG_LSF_EXT) */
      for (sfbi = l = 0; l < 576; ++sfbi, l += n) {
	n = sfbwidth[sfbi];

	if (!(modes[sfbi] & I_STEREO))
  814810:	5900000b 	ldhu	r4,0(r11)
	}
      }
    }
    else {  /* !(header->flags & MAD_FLAG_LSF_EXT) */
      for (sfbi = l = 0; l < 576; ++sfbi, l += n) {
	n = sfbwidth[sfbi];
  814814:	62000003 	ldbu	r8,0(r12)

	if (!(modes[sfbi] & I_STEREO))
  814818:	2080004c 	andi	r2,r4,1
  81481c:	1005003a 	cmpeq	r2,r2,zero
  814820:	103f9b1e 	bne	r2,zero,814690 <III_decode+0x2ae4>
	  continue;

	is_pos = right_ch->scalefac[sfbi];
  814824:	50c00483 	ldbu	r3,18(r10)

	if (is_pos >= 7) {  /* illegal intensity position */
  814828:	00800184 	movi	r2,6
  81482c:	10ff9636 	bltu	r2,r3,814688 <III_decode+0x2adc>
	  modes[sfbi] &= ~I_STEREO;
	  continue;
	}

	for (i = 0; i < n; ++i) {
  814830:	403f9726 	beq	r8,zero,814690 <III_decode+0x2ae4>
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
	  xr[1][l + i] = mad_f_mul(left, is_table[6 - is_pos]);
  814834:	10c5c83a 	sub	r2,r2,r3
  814838:	1085883a 	add	r2,r2,r2
	for (i = 0; i < n; ++i) {
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
  81483c:	18c7883a 	add	r3,r3,r3
  814840:	18c7883a 	add	r3,r3,r3
	  xr[1][l + i] = mad_f_mul(left, is_table[6 - is_pos]);
  814844:	1085883a 	add	r2,r2,r2
	for (i = 0; i < n; ++i) {
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
  814848:	1b87883a 	add	r3,r3,r14
	  xr[1][l + i] = mad_f_mul(left, is_table[6 - is_pos]);
  81484c:	1385883a 	add	r2,r2,r14
	for (i = 0; i < n; ++i) {
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
  814850:	19000017 	ldw	r4,0(r3)
	  xr[1][l + i] = mad_f_mul(left, is_table[6 - is_pos]);
  814854:	11400017 	ldw	r5,0(r2)
  814858:	4a47883a 	add	r3,r9,r9
	for (i = 0; i < n; ++i) {
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
  81485c:	2009d43a 	srai	r4,r4,16
	  xr[1][l + i] = mad_f_mul(left, is_table[6 - is_pos]);
  814860:	280bd43a 	srai	r5,r5,16
  814864:	18c7883a 	add	r3,r3,r3
  814868:	dc82bd04 	addi	r18,sp,2804
  81486c:	90cd883a 	add	r6,r18,r3
  814870:	000f883a 	mov	r7,zero
	for (i = 0; i < n; ++i) {
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
  814874:	30800017 	ldw	r2,0(r6)
	if (is_pos >= 7) {  /* illegal intensity position */
	  modes[sfbi] &= ~I_STEREO;
	  continue;
	}

	for (i = 0; i < n; ++i) {
  814878:	39c00044 	addi	r7,r7,1
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
  81487c:	1005d33a 	srai	r2,r2,12
	  xr[1][l + i] = mad_f_mul(left, is_table[6 - is_pos]);
  814880:	1147383a 	mul	r3,r2,r5
	for (i = 0; i < n; ++i) {
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
  814884:	1105383a 	mul	r2,r2,r4
	  xr[1][l + i] = mad_f_mul(left, is_table[6 - is_pos]);
  814888:	30c24015 	stw	r3,2304(r6)
	for (i = 0; i < n; ++i) {
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  xr[0][l + i] = mad_f_mul(left, is_table[    is_pos]);
  81488c:	30800015 	stw	r2,0(r6)
	if (is_pos >= 7) {  /* illegal intensity position */
	  modes[sfbi] &= ~I_STEREO;
	  continue;
	}

	for (i = 0; i < n; ++i) {
  814890:	31800104 	addi	r6,r6,4
  814894:	41fff71e 	bne	r8,r7,814874 <III_decode+0x2cc8>
  814898:	003f7d06 	br	814690 <III_decode+0x2ae4>
	if (illegal_pos[sfbi]) {
	  modes[sfbi] &= ~I_STEREO;
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];
  81489c:	50c00483 	ldbu	r3,18(r10)

	for (i = 0; i < n; ++i) {
  8148a0:	383fcc26 	beq	r7,zero,8147d4 <III_decode+0x2c28>
	  if (is_pos == 0)
	    xr[1][l + i] = left;
	  else {
	    register mad_fixed_t opposite;

	    opposite = mad_f_mul(left, lsf_scale[(is_pos - 1) / 2]);
  8148a4:	18bfffc4 	addi	r2,r3,-1
  8148a8:	1004d07a 	srli	r2,r2,1

	    if (is_pos & 1) {
  8148ac:	1940004c 	andi	r5,r3,1
	  if (is_pos == 0)
	    xr[1][l + i] = left;
	  else {
	    register mad_fixed_t opposite;

	    opposite = mad_f_mul(left, lsf_scale[(is_pos - 1) / 2]);
  8148b0:	1085883a 	add	r2,r2,r2
  8148b4:	1085883a 	add	r2,r2,r2
  8148b8:	6889883a 	add	r4,r13,r2

	    if (is_pos & 1) {
  8148bc:	18002126 	beq	r3,zero,814944 <III_decode+0x2d98>
  8148c0:	2804c03a 	cmpne	r2,r5,zero
  8148c4:	10000f1e 	bne	r2,zero,814904 <III_decode+0x2d58>
  8148c8:	21000017 	ldw	r4,0(r4)
  8148cc:	3185883a 	add	r2,r6,r6
  8148d0:	1085883a 	add	r2,r2,r2
  8148d4:	dc82bd04 	addi	r18,sp,2804
  8148d8:	200bd43a 	srai	r5,r4,16
  8148dc:	9087883a 	add	r3,r18,r2
  8148e0:	0009883a 	mov	r4,zero
	      xr[0][l + i] = opposite;
	      xr[1][l + i] = left;
	    }
	    else
	      xr[1][l + i] = opposite;
  8148e4:	18800017 	ldw	r2,0(r3)
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  8148e8:	21000044 	addi	r4,r4,1
	    if (is_pos & 1) {
	      xr[0][l + i] = opposite;
	      xr[1][l + i] = left;
	    }
	    else
	      xr[1][l + i] = opposite;
  8148ec:	1005d33a 	srai	r2,r2,12
  8148f0:	1145383a 	mul	r2,r2,r5
  8148f4:	18824015 	stw	r2,2304(r3)
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  8148f8:	18c00104 	addi	r3,r3,4
  8148fc:	393ff91e 	bne	r7,r4,8148e4 <III_decode+0x2d38>
  814900:	003fb406 	br	8147d4 <III_decode+0x2c28>
  814904:	21000017 	ldw	r4,0(r4)
  814908:	3185883a 	add	r2,r6,r6
  81490c:	1085883a 	add	r2,r2,r2
  814910:	d8c2bd04 	addi	r3,sp,2804
  814914:	2011d43a 	srai	r8,r4,16
  814918:	000b883a 	mov	r5,zero
  81491c:	1889883a 	add	r4,r3,r2
	  register mad_fixed_t left;

	  left = xr[0][l + i];
  814920:	20c00017 	ldw	r3,0(r4)
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  814924:	29400044 	addi	r5,r5,1
	    register mad_fixed_t opposite;

	    opposite = mad_f_mul(left, lsf_scale[(is_pos - 1) / 2]);

	    if (is_pos & 1) {
	      xr[0][l + i] = opposite;
  814928:	1805d33a 	srai	r2,r3,12
	      xr[1][l + i] = left;
  81492c:	20c24015 	stw	r3,2304(r4)
	    register mad_fixed_t opposite;

	    opposite = mad_f_mul(left, lsf_scale[(is_pos - 1) / 2]);

	    if (is_pos & 1) {
	      xr[0][l + i] = opposite;
  814930:	1205383a 	mul	r2,r2,r8
  814934:	20800015 	stw	r2,0(r4)
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  814938:	21000104 	addi	r4,r4,4
  81493c:	29fff81e 	bne	r5,r7,814920 <III_decode+0x2d74>
  814940:	003fa406 	br	8147d4 <III_decode+0x2c28>
  814944:	2804c03a 	cmpne	r2,r5,zero
  814948:	10003a1e 	bne	r2,zero,814a34 <III_decode+0x2e88>
  81494c:	3185883a 	add	r2,r6,r6
  814950:	d902bd04 	addi	r4,sp,2804
  814954:	1085883a 	add	r2,r2,r2
  814958:	2087883a 	add	r3,r4,r2
  81495c:	0009883a 	mov	r4,zero
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  if (is_pos == 0)
	    xr[1][l + i] = left;
  814960:	18800017 	ldw	r2,0(r3)
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  814964:	21000044 	addi	r4,r4,1
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  if (is_pos == 0)
	    xr[1][l + i] = left;
  814968:	18824015 	stw	r2,2304(r3)
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  81496c:	18c00104 	addi	r3,r3,4
  814970:	21fffb1e 	bne	r4,r7,814960 <III_decode+0x2db4>
  814974:	003f9706 	br	8147d4 <III_decode+0x2c28>

      bound = 0;
      for (sfbi = l = 0; l < 576; l += n) {
	n = sfbwidth[sfbi++];

	for (i = 0; i < n; ++i) {
  814978:	3811883a 	mov	r8,r7
  81497c:	003ef706 	br	81455c <III_decode+0x29b0>

    /* this is probably wrong for 8000 Hz short/mixed blocks */

    gain0 = gain - 8 * (signed int) channel->subblock_gain[0];
    gain1 = gain - 8 * (signed int) channel->subblock_gain[1];
    gain2 = gain - 8 * (signed int) channel->subblock_gain[2];
  814980:	0023883a 	mov	r17,zero
  814984:	0027883a 	mov	r19,zero
  814988:	002f883a 	mov	r23,zero
  81498c:	0021883a 	mov	r16,zero
  814990:	003f1b06 	br	814600 <III_decode+0x2a54>

	start = sfbi;
      }

      w = 0;
      while (l < 576) {
  814994:	8821883a 	mov	r16,r17
  814998:	0029883a 	mov	r20,zero
      if (max)
	lower = start;

      /* long blocks */

      for (i = 0; i < lower; ++i)
  81499c:	b8000926 	beq	r23,zero,8149c4 <III_decode+0x2e18>
	modes[i] = header->mode_extension & ~I_STEREO;
  8149a0:	d9479317 	ldw	r5,7756(sp)
  8149a4:	00bfff84 	movi	r2,-2
  8149a8:	0007883a 	mov	r3,zero
  8149ac:	2888703a 	and	r4,r5,r2
  8149b0:	d8801e04 	addi	r2,sp,120
      if (max)
	lower = start;

      /* long blocks */

      for (i = 0; i < lower; ++i)
  8149b4:	18c00044 	addi	r3,r3,1
	modes[i] = header->mode_extension & ~I_STEREO;
  8149b8:	1100000d 	sth	r4,0(r2)
      if (max)
	lower = start;

      /* long blocks */

      for (i = 0; i < lower; ++i)
  8149bc:	10800084 	addi	r2,r2,2
  8149c0:	b8fffc1e 	bne	r23,r3,8149b4 <III_decode+0x2e08>
	modes[i] = header->mode_extension & ~I_STEREO;

      /* short blocks */

      w = 0;
      for (i = start; i < max; ++i) {
  8149c4:	853f692e 	bgeu	r16,r20,81476c <III_decode+0x2bc0>
  8149c8:	da879317 	ldw	r10,7756(sp)
  8149cc:	8405883a 	add	r2,r16,r16
  8149d0:	d9801e04 	addi	r6,sp,120
  8149d4:	30a3883a 	add	r17,r6,r2
  8149d8:	00bfff84 	movi	r2,-2
  8149dc:	50a4703a 	and	r18,r10,r2
  8149e0:	a027883a 	mov	r19,r20
  8149e4:	0009883a 	mov	r4,zero
	if (i < bound[w])
  8149e8:	2105883a 	add	r2,r4,r4
  8149ec:	1085883a 	add	r2,r2,r2
  8149f0:	16c5883a 	add	r2,r2,sp
  8149f4:	10c00417 	ldw	r3,16(r2)
  8149f8:	80c0012e 	bgeu	r16,r3,814a00 <III_decode+0x2e54>
	  modes[i] = header->mode_extension & ~I_STEREO;
  8149fc:	8c80000d 	sth	r18,0(r17)
	modes[i] = header->mode_extension & ~I_STEREO;

      /* short blocks */

      w = 0;
      for (i = start; i < max; ++i) {
  814a00:	84000044 	addi	r16,r16,1
  814a04:	8c400084 	addi	r17,r17,2
  814a08:	84ff5826 	beq	r16,r19,81476c <III_decode+0x2bc0>
	if (i < bound[w])
	  modes[i] = header->mode_extension & ~I_STEREO;

	w = (w + 1) % 3;
  814a0c:	21000044 	addi	r4,r4,1
  814a10:	014000c4 	movi	r5,3
  814a14:	0820c100 	call	820c10 <__umodsi3>
  814a18:	1009883a 	mov	r4,r2
  814a1c:	003ff206 	br	8149e8 <III_decode+0x2e3c>
	right_xr += n;
	l += n;
	w = (w + 1) % 3;
      }

      if (max)
  814a20:	a03fde26 	beq	r20,zero,81499c <III_decode+0x2df0>
  814a24:	802f883a 	mov	r23,r16
  814a28:	003fdc06 	br	81499c <III_decode+0x2df0>

      if (right_ch->flags & mixed_block_flag) {
	while (l < 36) {
	  n = sfbwidth[sfbi++];

	  for (i = 0; i < n; ++i) {
  814a2c:	882f883a 	mov	r23,r17
  814a30:	003eeb06 	br	8145e0 <III_decode+0x2a34>
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  814a34:	3185883a 	add	r2,r6,r6
  814a38:	1085883a 	add	r2,r2,r2
  814a3c:	d942bd04 	addi	r5,sp,2804
  814a40:	2887883a 	add	r3,r5,r2
  814a44:	0009883a 	mov	r4,zero
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  if (is_pos == 0)
	    xr[1][l + i] = left;
  814a48:	18800017 	ldw	r2,0(r3)
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  814a4c:	21000044 	addi	r4,r4,1
	  register mad_fixed_t left;

	  left = xr[0][l + i];

	  if (is_pos == 0)
	    xr[1][l + i] = left;
  814a50:	18824015 	stw	r2,2304(r3)
	  continue;
	}

	is_pos = right_ch->scalefac[sfbi];

	for (i = 0; i < n; ++i) {
  814a54:	18c00104 	addi	r3,r3,4
  814a58:	393ffb1e 	bne	r7,r4,814a48 <III_decode+0x2e9c>
  814a5c:	003f5d06 	br	8147d4 <III_decode+0x2c28>

00814a60 <mad_layer_III>:
  enum mad_error error;
  int result = 0;

  /* allocate Layer III dynamic structures */

  if (stream->main_data == 0) {
  814a60:	20800c17 	ldw	r2,48(r4)
/*
 * NAME:	layer->III()
 * DESCRIPTION:	decode a single Layer III frame
 */
int mad_layer_III(struct mad_stream *stream, struct mad_frame *frame)
{
  814a64:	deffad04 	addi	sp,sp,-332
  814a68:	dfc05215 	stw	ra,328(sp)
  814a6c:	df005115 	stw	fp,324(sp)
  814a70:	ddc05015 	stw	r23,320(sp)
  814a74:	dd804f15 	stw	r22,316(sp)
  814a78:	dd404e15 	stw	r21,312(sp)
  814a7c:	dd004d15 	stw	r20,308(sp)
  814a80:	dcc04c15 	stw	r19,304(sp)
  814a84:	dc804b15 	stw	r18,300(sp)
  814a88:	dc404a15 	stw	r17,296(sp)
  814a8c:	dc004915 	stw	r16,292(sp)
  814a90:	d9004515 	stw	r4,276(sp)
  814a94:	d9404615 	stw	r5,280(sp)
  enum mad_error error;
  int result = 0;

  /* allocate Layer III dynamic structures */

  if (stream->main_data == 0) {
  814a98:	1001bb26 	beq	r2,zero,815188 <mad_layer_III+0x728>
      stream->error = MAD_ERROR_NOMEM;
      return -1;
    }
  }

  if (frame->overlap == 0) {
  814a9c:	d9404617 	ldw	r5,280(sp)
  814aa0:	28890c17 	ldw	r2,9264(r5)
  814aa4:	1001c326 	beq	r2,zero,8151b4 <mad_layer_III+0x754>
      stream->error = MAD_ERROR_NOMEM;
      return -1;
    }
  }

  nch = MAD_NCHANNELS(header);
  814aa8:	d8c04617 	ldw	r3,280(sp)
  814aac:	18800117 	ldw	r2,4(r3)
  si_len = (header->flags & MAD_FLAG_LSF_EXT) ?
  814ab0:	18c00717 	ldw	r3,28(r3)
      stream->error = MAD_ERROR_NOMEM;
      return -1;
    }
  }

  nch = MAD_NCHANNELS(header);
  814ab4:	102d003a 	cmpeq	r22,r2,zero
  si_len = (header->flags & MAD_FLAG_LSF_EXT) ?
  814ab8:	18c4000c 	andi	r3,r3,4096
      stream->error = MAD_ERROR_NOMEM;
      return -1;
    }
  }

  nch = MAD_NCHANNELS(header);
  814abc:	00800084 	movi	r2,2
  814ac0:	15adc83a 	sub	r22,r2,r22
  si_len = (header->flags & MAD_FLAG_LSF_EXT) ?
  814ac4:	18007126 	beq	r3,zero,814c8c <mad_layer_III+0x22c>
  814ac8:	00800044 	movi	r2,1
  814acc:	b0818426 	beq	r22,r2,8150e0 <mad_layer_III+0x680>
  814ad0:	04c00444 	movi	r19,17
  814ad4:	9823883a 	mov	r17,r19
    (nch == 1 ? 9 : 17) : (nch == 1 ? 17 : 32);

  /* check frame sanity */

  if (stream->next_frame - mad_bit_nextbyte(&stream->ptr) <
  814ad8:	d9004517 	ldw	r4,276(sp)
  814adc:	24000617 	ldw	r16,24(r4)
  814ae0:	24800704 	addi	r18,r4,28
  814ae4:	9009883a 	mov	r4,r18
  814ae8:	080e2b40 	call	80e2b4 <mad_bit_nextbyte>
  814aec:	80a1c83a 	sub	r16,r16,r2
  814af0:	8441d516 	blt	r16,r17,815248 <mad_layer_III+0x7e8>
    return -1;
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
  814af4:	d9004617 	ldw	r4,280(sp)
  814af8:	20c00717 	ldw	r3,28(r4)
  814afc:	1880040c 	andi	r2,r3,16
  814b00:	1000801e 	bne	r2,zero,814d04 <mad_layer_III+0x2a4>
    header->crc_check =
      mad_bit_crc(stream->ptr, si_len * CHAR_BIT, header->crc_check);

    if (header->crc_check != header->crc_target &&
	!(frame->options & MAD_OPTION_IGNORECRC)) {
      stream->error = MAD_ERROR_BADCRC;
  814b04:	d8004315 	stw	zero,268(sp)
    }
  }

  /* decode frame side information */

  error = III_sideinfo(&stream->ptr, nch, header->flags & MAD_FLAG_LSF_EXT,
  814b08:	1cc4000c 	andi	r19,r3,4096
{
  unsigned int ngr, gr, ch, i;
  enum mad_error result = MAD_ERROR_NONE;

  *data_bitlen = 0;
  *priv_bitlen = lsf ? ((nch == 1) ? 1 : 2) : ((nch == 1) ? 5 : 3);
  814b0c:	9807003a 	cmpeq	r3,r19,zero
  814b10:	d8c04715 	stw	r3,284(sp)
  814b14:	1800621e 	bne	r3,zero,814ca0 <mad_layer_III+0x240>
  814b18:	00800044 	movi	r2,1
  814b1c:	b0818726 	beq	r22,r2,81513c <mad_layer_III+0x6dc>
  814b20:	01000084 	movi	r4,2
  814b24:	d9004415 	stw	r4,272(sp)

  si->main_data_begin = mad_bit_read(ptr, lsf ? 8 : 9);
  814b28:	9009883a 	mov	r4,r18
  814b2c:	01400204 	movi	r5,8
  814b30:	080e3300 	call	80e330 <mad_bit_read>
  si->private_bits    = mad_bit_read(ptr, *priv_bitlen);
  814b34:	d9404417 	ldw	r5,272(sp)
  814b38:	9009883a 	mov	r4,r18
  enum mad_error result = MAD_ERROR_NONE;

  *data_bitlen = 0;
  *priv_bitlen = lsf ? ((nch == 1) ? 1 : 2) : ((nch == 1) ? 5 : 3);

  si->main_data_begin = mad_bit_read(ptr, lsf ? 8 : 9);
  814b3c:	d8800415 	stw	r2,16(sp)
  si->private_bits    = mad_bit_read(ptr, *priv_bitlen);
  814b40:	080e3300 	call	80e330 <mad_bit_read>
  814b44:	01400044 	movi	r5,1
  814b48:	d9404115 	stw	r5,260(sp)
  814b4c:	d8800515 	stw	r2,20(sp)
  814b50:	b008c03a 	cmpne	r4,r22,zero
  814b54:	982ec03a 	cmpne	r23,r19,zero

  ngr = 1;
  if (!lsf) {
    ngr = 2;

    for (ch = 0; ch < nch; ++ch)
  814b58:	002b883a 	mov	r21,zero
  814b5c:	0039883a 	mov	fp,zero
  814b60:	d8004215 	stw	zero,264(sp)
  814b64:	d9004815 	stw	r4,288(sp)
  }

  for (gr = 0; gr < ngr; ++gr) {
    struct granule *granule = &si->gr[gr];

    for (ch = 0; ch < nch; ++ch) {
  814b68:	d9404817 	ldw	r5,288(sp)
  814b6c:	2800aa26 	beq	r5,zero,814e18 <mad_layer_III+0x3b8>
  814b70:	d9404217 	ldw	r5,264(sp)
  814b74:	d8c00404 	addi	r3,sp,16

  ngr = 1;
  if (!lsf) {
    ngr = 2;

    for (ch = 0; ch < nch; ++ch)
  814b78:	0027883a 	mov	r19,zero
  814b7c:	28801d24 	muli	r2,r5,116
  814b80:	dd000604 	addi	r20,sp,24
  814b84:	10c5883a 	add	r2,r2,r3
  814b88:	14400204 	addi	r17,r2,8
  814b8c:	00003006 	br	814c50 <mad_layer_III+0x1f0>
      struct channel *channel = &granule->ch[ch];

      channel->part2_3_length    = mad_bit_read(ptr, 12);
      channel->big_values        = mad_bit_read(ptr, 9);
      channel->global_gain       = mad_bit_read(ptr, 8);
      channel->scalefac_compress = mad_bit_read(ptr, lsf ? 9 : 4);
  814b90:	01400104 	movi	r5,4
  814b94:	9009883a 	mov	r4,r18
  814b98:	080e3300 	call	80e330 <mad_bit_read>

      *data_bitlen += channel->part2_3_length;
  814b9c:	88c0008b 	ldhu	r3,2(r17)

      if (channel->big_values > 288 && result == 0)
  814ba0:	8900010b 	ldhu	r4,4(r17)
      struct channel *channel = &granule->ch[ch];

      channel->part2_3_length    = mad_bit_read(ptr, 12);
      channel->big_values        = mad_bit_read(ptr, 9);
      channel->global_gain       = mad_bit_read(ptr, 8);
      channel->scalefac_compress = mad_bit_read(ptr, lsf ? 9 : 4);
  814ba4:	8880020d 	sth	r2,8(r17)

      *data_bitlen += channel->part2_3_length;

      if (channel->big_values > 288 && result == 0)
  814ba8:	00804804 	movi	r2,288
      channel->part2_3_length    = mad_bit_read(ptr, 12);
      channel->big_values        = mad_bit_read(ptr, 9);
      channel->global_gain       = mad_bit_read(ptr, 8);
      channel->scalefac_compress = mad_bit_read(ptr, lsf ? 9 : 4);

      *data_bitlen += channel->part2_3_length;
  814bac:	e0f9883a 	add	fp,fp,r3

      if (channel->big_values > 288 && result == 0)
  814bb0:	1100022e 	bgeu	r2,r4,814bbc <mad_layer_III+0x15c>
  814bb4:	a800011e 	bne	r21,zero,814bbc <mad_layer_III+0x15c>
  814bb8:	05408c84 	movi	r21,562
	result = MAD_ERROR_BADBIGVALUES;

      channel->flags = 0;

      /* window_switching_flag */
      if (mad_bit_read(ptr, 1)) {
  814bbc:	9009883a 	mov	r4,r18
  814bc0:	01400044 	movi	r5,1
      *data_bitlen += channel->part2_3_length;

      if (channel->big_values > 288 && result == 0)
	result = MAD_ERROR_BADBIGVALUES;

      channel->flags = 0;
  814bc4:	88000285 	stb	zero,10(r17)

      /* window_switching_flag */
      if (mad_bit_read(ptr, 1)) {
  814bc8:	080e3300 	call	80e330 <mad_bit_read>
  814bcc:	1000611e 	bne	r2,zero,814d54 <mad_layer_III+0x2f4>
      }
      else {
	channel->block_type = 0;

	for (i = 0; i < 3; ++i)
	  channel->table_select[i] = mad_bit_read(ptr, 5);
  814bd0:	9009883a 	mov	r4,r18
  814bd4:	01400144 	movi	r5,5

	for (i = 0; i < 3; ++i)
	  channel->subblock_gain[i] = mad_bit_read(ptr, 3);
      }
      else {
	channel->block_type = 0;
  814bd8:	880002c5 	stb	zero,11(r17)

	for (i = 0; i < 3; ++i)
	  channel->table_select[i] = mad_bit_read(ptr, 5);
  814bdc:	080e3300 	call	80e330 <mad_bit_read>
  814be0:	88800305 	stb	r2,12(r17)
  814be4:	9009883a 	mov	r4,r18
  814be8:	01400144 	movi	r5,5
  814bec:	080e3300 	call	80e330 <mad_bit_read>
  814bf0:	88800345 	stb	r2,13(r17)
  814bf4:	9009883a 	mov	r4,r18
  814bf8:	01400144 	movi	r5,5
  814bfc:	080e3300 	call	80e330 <mad_bit_read>
  814c00:	88800385 	stb	r2,14(r17)

	channel->region0_count = mad_bit_read(ptr, 4);
  814c04:	9009883a 	mov	r4,r18
  814c08:	01400104 	movi	r5,4
  814c0c:	080e3300 	call	80e330 <mad_bit_read>
  814c10:	88800485 	stb	r2,18(r17)
	channel->region1_count = mad_bit_read(ptr, 3);
  814c14:	9009883a 	mov	r4,r18
  814c18:	014000c4 	movi	r5,3
  814c1c:	080e3300 	call	80e330 <mad_bit_read>
  814c20:	888004c5 	stb	r2,19(r17)
      }

      /* [preflag,] scalefac_scale, count1table_select */
      channel->flags |= mad_bit_read(ptr, lsf ? 2 : 3);
  814c24:	d8804717 	ldw	r2,284(sp)
  814c28:	8c000283 	ldbu	r16,10(r17)
  814c2c:	9009883a 	mov	r4,r18
  814c30:	11400084 	addi	r5,r2,2
  814c34:	080e3300 	call	80e330 <mad_bit_read>
  814c38:	1404b03a 	or	r2,r2,r16
  }

  for (gr = 0; gr < ngr; ++gr) {
    struct granule *granule = &si->gr[gr];

    for (ch = 0; ch < nch; ++ch) {
  814c3c:	9cc00044 	addi	r19,r19,1
	channel->region0_count = mad_bit_read(ptr, 4);
	channel->region1_count = mad_bit_read(ptr, 3);
      }

      /* [preflag,] scalefac_scale, count1table_select */
      channel->flags |= mad_bit_read(ptr, lsf ? 2 : 3);
  814c40:	88800285 	stb	r2,10(r17)
  }

  for (gr = 0; gr < ngr; ++gr) {
    struct granule *granule = &si->gr[gr];

    for (ch = 0; ch < nch; ++ch) {
  814c44:	a5000044 	addi	r20,r20,1
  814c48:	8c400e84 	addi	r17,r17,58
  814c4c:	b4c07226 	beq	r22,r19,814e18 <mad_layer_III+0x3b8>
      struct channel *channel = &granule->ch[ch];

      channel->part2_3_length    = mad_bit_read(ptr, 12);
  814c50:	9009883a 	mov	r4,r18
  814c54:	01400304 	movi	r5,12
  814c58:	080e3300 	call	80e330 <mad_bit_read>
  814c5c:	8880008d 	sth	r2,2(r17)
      channel->big_values        = mad_bit_read(ptr, 9);
  814c60:	9009883a 	mov	r4,r18
  814c64:	01400244 	movi	r5,9
  814c68:	080e3300 	call	80e330 <mad_bit_read>
  814c6c:	8880010d 	sth	r2,4(r17)
      channel->global_gain       = mad_bit_read(ptr, 8);
  814c70:	9009883a 	mov	r4,r18
  814c74:	01400204 	movi	r5,8
  814c78:	080e3300 	call	80e330 <mad_bit_read>
  814c7c:	8880018d 	sth	r2,6(r17)
      channel->scalefac_compress = mad_bit_read(ptr, lsf ? 9 : 4);
  814c80:	b83fc326 	beq	r23,zero,814b90 <mad_layer_III+0x130>
  814c84:	01400244 	movi	r5,9
  814c88:	003fc206 	br	814b94 <mad_layer_III+0x134>
      return -1;
    }
  }

  nch = MAD_NCHANNELS(header);
  si_len = (header->flags & MAD_FLAG_LSF_EXT) ?
  814c8c:	00800044 	movi	r2,1
  814c90:	b0bf8f26 	beq	r22,r2,814ad0 <mad_layer_III+0x70>
  814c94:	04c00804 	movi	r19,32
  814c98:	9823883a 	mov	r17,r19
  814c9c:	003f8e06 	br	814ad8 <mad_layer_III+0x78>
{
  unsigned int ngr, gr, ch, i;
  enum mad_error result = MAD_ERROR_NONE;

  *data_bitlen = 0;
  *priv_bitlen = lsf ? ((nch == 1) ? 1 : 2) : ((nch == 1) ? 5 : 3);
  814ca0:	00800044 	movi	r2,1
  814ca4:	b0812726 	beq	r22,r2,815144 <mad_layer_III+0x6e4>

  si->main_data_begin = mad_bit_read(ptr, lsf ? 8 : 9);
  814ca8:	9009883a 	mov	r4,r18
  814cac:	01400244 	movi	r5,9
  814cb0:	080e3300 	call	80e330 <mad_bit_read>
  si->private_bits    = mad_bit_read(ptr, *priv_bitlen);
  814cb4:	9009883a 	mov	r4,r18
  814cb8:	014000c4 	movi	r5,3
  enum mad_error result = MAD_ERROR_NONE;

  *data_bitlen = 0;
  *priv_bitlen = lsf ? ((nch == 1) ? 1 : 2) : ((nch == 1) ? 5 : 3);

  si->main_data_begin = mad_bit_read(ptr, lsf ? 8 : 9);
  814cbc:	d8800415 	stw	r2,16(sp)
  si->private_bits    = mad_bit_read(ptr, *priv_bitlen);
  814cc0:	080e3300 	call	80e330 <mad_bit_read>
  814cc4:	d8800515 	stw	r2,20(sp)

  ngr = 1;
  if (!lsf) {
    ngr = 2;

    for (ch = 0; ch < nch; ++ch)
  814cc8:	b0000926 	beq	r22,zero,814cf0 <mad_layer_III+0x290>
  814ccc:	dc400404 	addi	r17,sp,16
  814cd0:	8821883a 	mov	r16,r17
      si->scfsi[ch] = mad_bit_read(ptr, 4);
  814cd4:	9009883a 	mov	r4,r18
  814cd8:	01400104 	movi	r5,4
  814cdc:	080e3300 	call	80e330 <mad_bit_read>
  814ce0:	80800205 	stb	r2,8(r16)
  814ce4:	84000044 	addi	r16,r16,1

  ngr = 1;
  if (!lsf) {
    ngr = 2;

    for (ch = 0; ch < nch; ++ch)
  814ce8:	8d85883a 	add	r2,r17,r22
  814cec:	143ff91e 	bne	r2,r16,814cd4 <mad_layer_III+0x274>
  814cf0:	00800084 	movi	r2,2
  814cf4:	00c000c4 	movi	r3,3
  814cf8:	d8804115 	stw	r2,260(sp)
  814cfc:	d8c04415 	stw	r3,272(sp)
  814d00:	003f9306 	br	814b50 <mad_layer_III+0xf0>
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
    header->crc_check =
  814d04:	d9404517 	ldw	r5,276(sp)
  814d08:	21c0060b 	ldhu	r7,24(r4)
  814d0c:	980c90fa 	slli	r6,r19,3
  814d10:	28800717 	ldw	r2,28(r5)
  814d14:	28c00817 	ldw	r3,32(r5)
  814d18:	1009883a 	mov	r4,r2
  814d1c:	180b883a 	mov	r5,r3
  814d20:	080e40c0 	call	80e40c <mad_bit_crc>
      mad_bit_crc(stream->ptr, si_len * CHAR_BIT, header->crc_check);

    if (header->crc_check != header->crc_target &&
  814d24:	d8c04617 	ldw	r3,280(sp)
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
    header->crc_check =
  814d28:	d9404617 	ldw	r5,280(sp)
      mad_bit_crc(stream->ptr, si_len * CHAR_BIT, header->crc_check);

    if (header->crc_check != header->crc_target &&
  814d2c:	1900068b 	ldhu	r4,26(r3)
  814d30:	10ffffcc 	andi	r3,r2,65535
  }

  /* check CRC word */

  if (header->flags & MAD_FLAG_PROTECTION) {
    header->crc_check =
  814d34:	2880060d 	sth	r2,24(r5)
      mad_bit_crc(stream->ptr, si_len * CHAR_BIT, header->crc_check);

    if (header->crc_check != header->crc_target &&
  814d38:	19012b26 	beq	r3,r4,8151e8 <mad_layer_III+0x788>
  814d3c:	28800b17 	ldw	r2,44(r5)
  814d40:	1080004c 	andi	r2,r2,1
  814d44:	1000e926 	beq	r2,zero,8150ec <mad_layer_III+0x68c>
  814d48:	d8804617 	ldw	r2,280(sp)
  814d4c:	10c00717 	ldw	r3,28(r2)
  814d50:	003f6c06 	br	814b04 <mad_layer_III+0xa4>

      channel->flags = 0;

      /* window_switching_flag */
      if (mad_bit_read(ptr, 1)) {
	channel->block_type = mad_bit_read(ptr, 2);
  814d54:	9009883a 	mov	r4,r18
  814d58:	01400084 	movi	r5,2
  814d5c:	080e3300 	call	80e330 <mad_bit_read>

	if (channel->block_type == 0 && result == 0)
  814d60:	10c03fcc 	andi	r3,r2,255

      channel->flags = 0;

      /* window_switching_flag */
      if (mad_bit_read(ptr, 1)) {
	channel->block_type = mad_bit_read(ptr, 2);
  814d64:	888002c5 	stb	r2,11(r17)

	if (channel->block_type == 0 && result == 0)
  814d68:	1800021e 	bne	r3,zero,814d74 <mad_layer_III+0x314>
  814d6c:	a800011e 	bne	r21,zero,814d74 <mad_layer_III+0x314>
  814d70:	05408cc4 	movi	r21,563
	  result = MAD_ERROR_BADBLOCKTYPE;

	if (!lsf && channel->block_type == 2 && si->scfsi[ch] && result == 0)
  814d74:	b800021e 	bne	r23,zero,814d80 <mad_layer_III+0x320>
  814d78:	00800084 	movi	r2,2
  814d7c:	18808b26 	beq	r3,r2,814fac <mad_layer_III+0x54c>
	  result = MAD_ERROR_BADSCFSI;

	channel->region0_count = 7;
  814d80:	008001c4 	movi	r2,7
	channel->region1_count = 36;
  814d84:	00c00904 	movi	r3,36

	if (mad_bit_read(ptr, 1))
  814d88:	9009883a 	mov	r4,r18
  814d8c:	01400044 	movi	r5,1
	  result = MAD_ERROR_BADBLOCKTYPE;

	if (!lsf && channel->block_type == 2 && si->scfsi[ch] && result == 0)
	  result = MAD_ERROR_BADSCFSI;

	channel->region0_count = 7;
  814d90:	88800485 	stb	r2,18(r17)
	channel->region1_count = 36;
  814d94:	88c004c5 	stb	r3,19(r17)

	if (mad_bit_read(ptr, 1))
  814d98:	080e3300 	call	80e330 <mad_bit_read>
  814d9c:	10001826 	beq	r2,zero,814e00 <mad_layer_III+0x3a0>
	  channel->flags |= mixed_block_flag;
  814da0:	88800283 	ldbu	r2,10(r17)
  814da4:	10800214 	ori	r2,r2,8
  814da8:	88800285 	stb	r2,10(r17)
	else if (channel->block_type == 2)
	  channel->region0_count = 8;

	for (i = 0; i < 2; ++i)
	  channel->table_select[i] = mad_bit_read(ptr, 5);
  814dac:	9009883a 	mov	r4,r18
  814db0:	01400144 	movi	r5,5
  814db4:	080e3300 	call	80e330 <mad_bit_read>
  814db8:	88800305 	stb	r2,12(r17)
  814dbc:	9009883a 	mov	r4,r18
  814dc0:	01400144 	movi	r5,5
  814dc4:	080e3300 	call	80e330 <mad_bit_read>
  814dc8:	88800345 	stb	r2,13(r17)
# if defined(DEBUG)
	channel->table_select[2] = 4;  /* not used */
# endif

	for (i = 0; i < 3; ++i)
	  channel->subblock_gain[i] = mad_bit_read(ptr, 3);
  814dcc:	9009883a 	mov	r4,r18
  814dd0:	014000c4 	movi	r5,3
  814dd4:	080e3300 	call	80e330 <mad_bit_read>
  814dd8:	888003c5 	stb	r2,15(r17)
  814ddc:	9009883a 	mov	r4,r18
  814de0:	014000c4 	movi	r5,3
  814de4:	080e3300 	call	80e330 <mad_bit_read>
  814de8:	88800405 	stb	r2,16(r17)
  814dec:	9009883a 	mov	r4,r18
  814df0:	014000c4 	movi	r5,3
  814df4:	080e3300 	call	80e330 <mad_bit_read>
  814df8:	88800445 	stb	r2,17(r17)
  814dfc:	003f8906 	br	814c24 <mad_layer_III+0x1c4>
	channel->region0_count = 7;
	channel->region1_count = 36;

	if (mad_bit_read(ptr, 1))
	  channel->flags |= mixed_block_flag;
	else if (channel->block_type == 2)
  814e00:	88c002c3 	ldbu	r3,11(r17)
  814e04:	00800084 	movi	r2,2
  814e08:	18bfe81e 	bne	r3,r2,814dac <mad_layer_III+0x34c>
	  channel->region0_count = 8;
  814e0c:	00800204 	movi	r2,8
  814e10:	88800485 	stb	r2,18(r17)
  814e14:	003fe506 	br	814dac <mad_layer_III+0x34c>

    for (ch = 0; ch < nch; ++ch)
      si->scfsi[ch] = mad_bit_read(ptr, 4);
  }

  for (gr = 0; gr < ngr; ++gr) {
  814e18:	d8c04217 	ldw	r3,264(sp)
  814e1c:	d9004117 	ldw	r4,260(sp)
  814e20:	18c00044 	addi	r3,r3,1
  814e24:	d8c04215 	stw	r3,264(sp)
  814e28:	193f4f36 	bltu	r3,r4,814b68 <mad_layer_III+0x108>

  /* decode frame side information */

  error = III_sideinfo(&stream->ptr, nch, header->flags & MAD_FLAG_LSF_EXT,
		       &si, &data_bitlen, &priv_bitlen);
  if (error && result == 0) {
  814e2c:	a8000726 	beq	r21,zero,814e4c <mad_layer_III+0x3ec>
  814e30:	d8c04317 	ldw	r3,268(sp)
  814e34:	1804c03a 	cmpne	r2,r3,zero
  814e38:	1000041e 	bne	r2,zero,814e4c <mad_layer_III+0x3ec>
    stream->error = error;
  814e3c:	d9004517 	ldw	r4,276(sp)
  814e40:	017fffc4 	movi	r5,-1
  814e44:	d9404315 	stw	r5,268(sp)
  814e48:	25400f15 	stw	r21,60(r4)
    result = -1;
  }

  header->flags        |= priv_bitlen;
  814e4c:	d8804617 	ldw	r2,280(sp)
  814e50:	10c00717 	ldw	r3,28(r2)
  header->private_bits |= si.private_bits;
  814e54:	11000817 	ldw	r4,32(r2)

  {
    struct mad_bitptr peek;
    unsigned long header;

    mad_bit_init(&peek, stream->next_frame);
  814e58:	d8804517 	ldw	r2,276(sp)
  814e5c:	11400617 	ldw	r5,24(r2)
  if (error && result == 0) {
    stream->error = error;
    result = -1;
  }

  header->flags        |= priv_bitlen;
  814e60:	d8804417 	ldw	r2,272(sp)
  814e64:	1886b03a 	or	r3,r3,r2
  header->private_bits |= si.private_bits;
  814e68:	d8800517 	ldw	r2,20(sp)
  814e6c:	2088b03a 	or	r4,r4,r2
  if (error && result == 0) {
    stream->error = error;
    result = -1;
  }

  header->flags        |= priv_bitlen;
  814e70:	d8804617 	ldw	r2,280(sp)
  814e74:	10c00715 	stw	r3,28(r2)
  header->private_bits |= si.private_bits;
  814e78:	11000815 	stw	r4,32(r2)

  {
    struct mad_bitptr peek;
    unsigned long header;

    mad_bit_init(&peek, stream->next_frame);
  814e7c:	d809883a 	mov	r4,sp
  814e80:	080e27c0 	call	80e27c <mad_bit_init>

    header = mad_bit_read(&peek, 32);
  814e84:	d809883a 	mov	r4,sp
  814e88:	01400804 	movi	r5,32
  814e8c:	080e3300 	call	80e330 <mad_bit_read>
  814e90:	1021883a 	mov	r16,r2
    if ((header & 0xffe60000L) /* syncword | layer */ == 0xffe20000L) {
  814e94:	10fff9ac 	andhi	r3,r2,65510
  814e98:	00bff8b4 	movhi	r2,65506
  814e9c:	1880481e 	bne	r3,r2,814fc0 <mad_layer_III+0x560>
      if (!(header & 0x00010000L))  /* protection_bit */
  814ea0:	8080006c 	andhi	r2,r16,1
  814ea4:	1000a126 	beq	r2,zero,81512c <mad_layer_III+0x6cc>
	mad_bit_skip(&peek, 16);  /* crc_check */

      next_md_begin =
  814ea8:	8140022c 	andhi	r5,r16,8
  814eac:	00800244 	movi	r2,9
  814eb0:	280b003a 	cmpeq	r5,r5,zero
  814eb4:	114bc83a 	sub	r5,r2,r5
  814eb8:	d809883a 	mov	r4,sp
  814ebc:	080e3300 	call	80e330 <mad_bit_read>
    mad_bit_finish(&peek);
  }

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);
  814ec0:	d8c04517 	ldw	r3,276(sp)
  814ec4:	9009883a 	mov	r4,r18
    header = mad_bit_read(&peek, 32);
    if ((header & 0xffe60000L) /* syncword | layer */ == 0xffe20000L) {
      if (!(header & 0x00010000L))  /* protection_bit */
	mad_bit_skip(&peek, 16);  /* crc_check */

      next_md_begin =
  814ec8:	1023883a 	mov	r17,r2
    mad_bit_finish(&peek);
  }

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);
  814ecc:	1c000617 	ldw	r16,24(r3)
  814ed0:	080e2b40 	call	80e2b4 <mad_bit_nextbyte>

  if (next_md_begin > si.main_data_begin + frame_space)
  814ed4:	d8c00417 	ldw	r3,16(sp)
    mad_bit_finish(&peek);
  }

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);
  814ed8:	80a9c83a 	sub	r20,r16,r2

  if (next_md_begin > si.main_data_begin + frame_space)
  814edc:	a0c5883a 	add	r2,r20,r3
  814ee0:	1440572e 	bgeu	r2,r17,815040 <mad_layer_III+0x5e0>
  814ee4:	002b883a 	mov	r21,zero
    next_md_begin = 0;

  md_len = si.main_data_begin + frame_space - next_md_begin;
  814ee8:	1567c83a 	sub	r19,r2,r21

  frame_used = 0;

  if (si.main_data_begin == 0) {
  814eec:	18003e1e 	bne	r3,zero,814fe8 <mad_layer_III+0x588>
    ptr = stream->ptr;
  814ef0:	d9004517 	ldw	r4,276(sp)
  814ef4:	d9404517 	ldw	r5,276(sp)
    stream->md_len = 0;
  814ef8:	9821883a 	mov	r16,r19
  md_len = si.main_data_begin + frame_space - next_md_begin;

  frame_used = 0;

  if (si.main_data_begin == 0) {
    ptr = stream->ptr;
  814efc:	2080080b 	ldhu	r2,32(r4)
  814f00:	28c0088b 	ldhu	r3,34(r5)
  814f04:	21000717 	ldw	r4,28(r4)
  814f08:	d880030d 	sth	r2,12(sp)
  814f0c:	d8c0038d 	sth	r3,14(sp)
  814f10:	d9000215 	stw	r4,8(sp)
    stream->md_len = 0;
  814f14:	28000d15 	stw	zero,52(r5)

  frame_free = frame_space - frame_used;

  /* decode main_data */

  if (result == 0) {
  814f18:	d9404317 	ldw	r5,268(sp)
	stream->md_len += frame_used;
      }
    }
  }

  frame_free = frame_space - frame_used;
  814f1c:	a421c83a 	sub	r16,r20,r16

  /* decode main_data */

  if (result == 0) {
  814f20:	2804c03a 	cmpne	r2,r5,zero
  814f24:	10004826 	beq	r2,zero,815048 <mad_layer_III+0x5e8>
	  data_bitlen, stream->anc_bitlen);
# endif

  /* preload main_data buffer with up to 511 bytes for next frame(s) */

  if (frame_free >= next_md_begin) {
  814f28:	8540372e 	bgeu	r16,r21,815008 <mad_layer_III+0x5a8>
    memcpy(*stream->main_data,
	   stream->next_frame - next_md_begin, next_md_begin);
    stream->md_len = next_md_begin;
  }
  else {
    if (md_len < si.main_data_begin) {
  814f2c:	d8800417 	ldw	r2,16(sp)
  814f30:	98803f2e 	bgeu	r19,r2,815030 <mad_layer_III+0x5d0>
      unsigned int extra;

      extra = si.main_data_begin - md_len;
  814f34:	14e3c83a 	sub	r17,r2,r19
      if (extra + frame_free > next_md_begin)
  814f38:	8c05883a 	add	r2,r17,r16
  814f3c:	a8805b36 	bltu	r21,r2,8150ac <mad_layer_III+0x64c>
	extra = next_md_begin - frame_free;

      if (extra < stream->md_len) {
  814f40:	d9004517 	ldw	r4,276(sp)
  814f44:	20c00d17 	ldw	r3,52(r4)
  814f48:	88c05c36 	bltu	r17,r3,8150bc <mad_layer_III+0x65c>
      }
    }
    else
      stream->md_len = 0;

    memcpy(*stream->main_data + stream->md_len,
  814f4c:	d9404517 	ldw	r5,276(sp)
  814f50:	800d883a 	mov	r6,r16
  814f54:	29000c17 	ldw	r4,48(r5)
  814f58:	29400617 	ldw	r5,24(r5)
  814f5c:	20c9883a 	add	r4,r4,r3
  814f60:	2c0bc83a 	sub	r5,r5,r16
  814f64:	0821e500 	call	821e50 <memcpy>
	   stream->next_frame - frame_free, frame_free);
    stream->md_len += frame_free;
  814f68:	d8804517 	ldw	r2,276(sp)
  814f6c:	10c00d17 	ldw	r3,52(r2)
  814f70:	1c07883a 	add	r3,r3,r16
  814f74:	10c00d15 	stw	r3,52(r2)
  814f78:	d8804317 	ldw	r2,268(sp)
  }

  return result;
}
  814f7c:	dfc05217 	ldw	ra,328(sp)
  814f80:	df005117 	ldw	fp,324(sp)
  814f84:	ddc05017 	ldw	r23,320(sp)
  814f88:	dd804f17 	ldw	r22,316(sp)
  814f8c:	dd404e17 	ldw	r21,312(sp)
  814f90:	dd004d17 	ldw	r20,308(sp)
  814f94:	dcc04c17 	ldw	r19,304(sp)
  814f98:	dc804b17 	ldw	r18,300(sp)
  814f9c:	dc404a17 	ldw	r17,296(sp)
  814fa0:	dc004917 	ldw	r16,292(sp)
  814fa4:	dec05304 	addi	sp,sp,332
  814fa8:	f800283a 	ret
	channel->block_type = mad_bit_read(ptr, 2);

	if (channel->block_type == 0 && result == 0)
	  result = MAD_ERROR_BADBLOCKTYPE;

	if (!lsf && channel->block_type == 2 && si->scfsi[ch] && result == 0)
  814fac:	a0800003 	ldbu	r2,0(r20)
  814fb0:	103f7326 	beq	r2,zero,814d80 <mad_layer_III+0x320>
  814fb4:	a83f721e 	bne	r21,zero,814d80 <mad_layer_III+0x320>
  814fb8:	05408d04 	movi	r21,564
  814fbc:	003f7006 	br	814d80 <mad_layer_III+0x320>
    mad_bit_finish(&peek);
  }

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);
  814fc0:	d8c04517 	ldw	r3,276(sp)
  814fc4:	9009883a 	mov	r4,r18

  if (next_md_begin > si.main_data_begin + frame_space)
  814fc8:	002b883a 	mov	r21,zero
    mad_bit_finish(&peek);
  }

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);
  814fcc:	1c000617 	ldw	r16,24(r3)
  814fd0:	080e2b40 	call	80e2b4 <mad_bit_nextbyte>

  if (next_md_begin > si.main_data_begin + frame_space)
  814fd4:	d8c00417 	ldw	r3,16(sp)
    mad_bit_finish(&peek);
  }

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);
  814fd8:	80a9c83a 	sub	r20,r16,r2

  if (next_md_begin > si.main_data_begin + frame_space)
  814fdc:	a0c5883a 	add	r2,r20,r3
    next_md_begin = 0;

  md_len = si.main_data_begin + frame_space - next_md_begin;
  814fe0:	1567c83a 	sub	r19,r2,r21

  frame_used = 0;

  if (si.main_data_begin == 0) {
  814fe4:	183fc226 	beq	r3,zero,814ef0 <mad_layer_III+0x490>
    stream->md_len = 0;

    frame_used = md_len;
  }
  else {
    if (si.main_data_begin > stream->md_len) {
  814fe8:	d9004517 	ldw	r4,276(sp)
  814fec:	20800d17 	ldw	r2,52(r4)
  814ff0:	10c0452e 	bgeu	r2,r3,815108 <mad_layer_III+0x6a8>
      if (result == 0) {
  814ff4:	d9404317 	ldw	r5,268(sp)
  814ff8:	2804c03a 	cmpne	r2,r5,zero
  814ffc:	10002526 	beq	r2,zero,815094 <mad_layer_III+0x634>

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);

  if (next_md_begin > si.main_data_begin + frame_space)
  815000:	a021883a 	mov	r16,r20
	  data_bitlen, stream->anc_bitlen);
# endif

  /* preload main_data buffer with up to 511 bytes for next frame(s) */

  if (frame_free >= next_md_begin) {
  815004:	857fc936 	bltu	r16,r21,814f2c <mad_layer_III+0x4cc>
    memcpy(*stream->main_data,
  815008:	d8804517 	ldw	r2,276(sp)
  81500c:	a80d883a 	mov	r6,r21
  815010:	11400617 	ldw	r5,24(r2)
  815014:	11000c17 	ldw	r4,48(r2)
  815018:	2d4bc83a 	sub	r5,r5,r21
  81501c:	0821e500 	call	821e50 <memcpy>
	   stream->next_frame - next_md_begin, next_md_begin);
    stream->md_len = next_md_begin;
  815020:	d8c04517 	ldw	r3,276(sp)
  815024:	d8804317 	ldw	r2,268(sp)
  815028:	1d400d15 	stw	r21,52(r3)
  81502c:	003fd306 	br	814f7c <mad_layer_III+0x51c>
		*stream->main_data + stream->md_len - extra, extra);
	stream->md_len = extra;
      }
    }
    else
      stream->md_len = 0;
  815030:	d8804517 	ldw	r2,276(sp)
  815034:	0007883a 	mov	r3,zero
  815038:	10000d15 	stw	zero,52(r2)
  81503c:	003fc306 	br	814f4c <mad_layer_III+0x4ec>

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);

  if (next_md_begin > si.main_data_begin + frame_space)
  815040:	882b883a 	mov	r21,r17
  815044:	003fa806 	br	814ee8 <mad_layer_III+0x488>
  frame_free = frame_space - frame_used;

  /* decode main_data */

  if (result == 0) {
    error = III_decode(&ptr, frame, &si, nch);
  815048:	d9404617 	ldw	r5,280(sp)
  81504c:	b00f883a 	mov	r7,r22
  815050:	d9000204 	addi	r4,sp,8
  815054:	d9800404 	addi	r6,sp,16
  815058:	0811bac0 	call	811bac <III_decode>
    if (error) {
  81505c:	10000426 	beq	r2,zero,815070 <mad_layer_III+0x610>
      stream->error = error;
  815060:	d8c04517 	ldw	r3,276(sp)
  815064:	013fffc4 	movi	r4,-1
  815068:	d9004315 	stw	r4,268(sp)
  81506c:	18800f15 	stw	r2,60(r3)
    }

    /* designate ancillary bits */

    stream->anc_ptr    = ptr;
    stream->anc_bitlen = md_len * CHAR_BIT - data_bitlen;
  815070:	980490fa 	slli	r2,r19,3
      result = -1;
    }

    /* designate ancillary bits */

    stream->anc_ptr    = ptr;
  815074:	d9404517 	ldw	r5,276(sp)
  815078:	d9000317 	ldw	r4,12(sp)
  81507c:	d8c00217 	ldw	r3,8(sp)
    stream->anc_bitlen = md_len * CHAR_BIT - data_bitlen;
  815080:	1705c83a 	sub	r2,r2,fp
      result = -1;
    }

    /* designate ancillary bits */

    stream->anc_ptr    = ptr;
  815084:	29000a15 	stw	r4,40(r5)
  815088:	28c00915 	stw	r3,36(r5)
    stream->anc_bitlen = md_len * CHAR_BIT - data_bitlen;
  81508c:	28800b15 	stw	r2,44(r5)
  815090:	003fa506 	br	814f28 <mad_layer_III+0x4c8>
    frame_used = md_len;
  }
  else {
    if (si.main_data_begin > stream->md_len) {
      if (result == 0) {
	stream->error = MAD_ERROR_BADDATAPTR;
  815094:	00bfffc4 	movi	r2,-1
  815098:	d8804315 	stw	r2,268(sp)

  /* find main_data of this frame */

  frame_space = stream->next_frame - mad_bit_nextbyte(&stream->ptr);

  if (next_md_begin > si.main_data_begin + frame_space)
  81509c:	a021883a 	mov	r16,r20
    frame_used = md_len;
  }
  else {
    if (si.main_data_begin > stream->md_len) {
      if (result == 0) {
	stream->error = MAD_ERROR_BADDATAPTR;
  8150a0:	00808d44 	movi	r2,565
  8150a4:	20800f15 	stw	r2,60(r4)
  8150a8:	003fd606 	br	815004 <mad_layer_III+0x5a4>

      extra = si.main_data_begin - md_len;
      if (extra + frame_free > next_md_begin)
	extra = next_md_begin - frame_free;

      if (extra < stream->md_len) {
  8150ac:	d9004517 	ldw	r4,276(sp)
    if (md_len < si.main_data_begin) {
      unsigned int extra;

      extra = si.main_data_begin - md_len;
      if (extra + frame_free > next_md_begin)
	extra = next_md_begin - frame_free;
  8150b0:	ac23c83a 	sub	r17,r21,r16

      if (extra < stream->md_len) {
  8150b4:	20c00d17 	ldw	r3,52(r4)
  8150b8:	88ffa42e 	bgeu	r17,r3,814f4c <mad_layer_III+0x4ec>
	memmove(*stream->main_data,
  8150bc:	21000c17 	ldw	r4,48(r4)
  8150c0:	880d883a 	mov	r6,r17
  8150c4:	20cb883a 	add	r5,r4,r3
  8150c8:	2c4bc83a 	sub	r5,r5,r17
  8150cc:	0821ef00 	call	821ef0 <memmove>
		*stream->main_data + stream->md_len - extra, extra);
	stream->md_len = extra;
  8150d0:	d9404517 	ldw	r5,276(sp)
  8150d4:	8807883a 	mov	r3,r17
  8150d8:	2c400d15 	stw	r17,52(r5)
  8150dc:	003f9b06 	br	814f4c <mad_layer_III+0x4ec>
      return -1;
    }
  }

  nch = MAD_NCHANNELS(header);
  si_len = (header->flags & MAD_FLAG_LSF_EXT) ?
  8150e0:	04c00244 	movi	r19,9
  8150e4:	9823883a 	mov	r17,r19
  8150e8:	003e7b06 	br	814ad8 <mad_layer_III+0x78>
    header->crc_check =
      mad_bit_crc(stream->ptr, si_len * CHAR_BIT, header->crc_check);

    if (header->crc_check != header->crc_target &&
	!(frame->options & MAD_OPTION_IGNORECRC)) {
      stream->error = MAD_ERROR_BADCRC;
  8150ec:	d9004517 	ldw	r4,276(sp)
  8150f0:	28c00717 	ldw	r3,28(r5)
  8150f4:	00bfffc4 	movi	r2,-1
  8150f8:	d8804315 	stw	r2,268(sp)
  8150fc:	00808044 	movi	r2,513
  815100:	20800f15 	stw	r2,60(r4)
  815104:	003e8006 	br	814b08 <mad_layer_III+0xa8>
	stream->error = MAD_ERROR_BADDATAPTR;
	result = -1;
      }
    }
    else {
      mad_bit_init(&ptr,
  815108:	21400c17 	ldw	r5,48(r4)
  81510c:	d9000204 	addi	r4,sp,8
  815110:	114b883a 	add	r5,r2,r5
  815114:	28cbc83a 	sub	r5,r5,r3
  815118:	080e27c0 	call	80e27c <mad_bit_init>
		   *stream->main_data + stream->md_len - si.main_data_begin);

      if (md_len > si.main_data_begin) {
  81511c:	d8c00417 	ldw	r3,16(sp)
  815120:	1cc03336 	bltu	r3,r19,8151f0 <mad_layer_III+0x790>
  815124:	0021883a 	mov	r16,zero
  815128:	003f7b06 	br	814f18 <mad_layer_III+0x4b8>
    mad_bit_init(&peek, stream->next_frame);

    header = mad_bit_read(&peek, 32);
    if ((header & 0xffe60000L) /* syncword | layer */ == 0xffe20000L) {
      if (!(header & 0x00010000L))  /* protection_bit */
	mad_bit_skip(&peek, 16);  /* crc_check */
  81512c:	d809883a 	mov	r4,sp
  815130:	01400404 	movi	r5,16
  815134:	080e2d40 	call	80e2d4 <mad_bit_skip>
  815138:	003f5b06 	br	814ea8 <mad_layer_III+0x448>
{
  unsigned int ngr, gr, ch, i;
  enum mad_error result = MAD_ERROR_NONE;

  *data_bitlen = 0;
  *priv_bitlen = lsf ? ((nch == 1) ? 1 : 2) : ((nch == 1) ? 5 : 3);
  81513c:	dd804415 	stw	r22,272(sp)
  815140:	003e7906 	br	814b28 <mad_layer_III+0xc8>

  si->main_data_begin = mad_bit_read(ptr, lsf ? 8 : 9);
  815144:	9009883a 	mov	r4,r18
  815148:	01400244 	movi	r5,9
  81514c:	080e3300 	call	80e330 <mad_bit_read>
  si->private_bits    = mad_bit_read(ptr, *priv_bitlen);
  815150:	9009883a 	mov	r4,r18
  815154:	01400144 	movi	r5,5
  enum mad_error result = MAD_ERROR_NONE;

  *data_bitlen = 0;
  *priv_bitlen = lsf ? ((nch == 1) ? 1 : 2) : ((nch == 1) ? 5 : 3);

  si->main_data_begin = mad_bit_read(ptr, lsf ? 8 : 9);
  815158:	d8800415 	stw	r2,16(sp)
  si->private_bits    = mad_bit_read(ptr, *priv_bitlen);
  81515c:	080e3300 	call	80e330 <mad_bit_read>
  ngr = 1;
  if (!lsf) {
    ngr = 2;

    for (ch = 0; ch < nch; ++ch)
      si->scfsi[ch] = mad_bit_read(ptr, 4);
  815160:	9009883a 	mov	r4,r18
  815164:	01400104 	movi	r5,4

  *data_bitlen = 0;
  *priv_bitlen = lsf ? ((nch == 1) ? 1 : 2) : ((nch == 1) ? 5 : 3);

  si->main_data_begin = mad_bit_read(ptr, lsf ? 8 : 9);
  si->private_bits    = mad_bit_read(ptr, *priv_bitlen);
  815168:	d8800515 	stw	r2,20(sp)
  ngr = 1;
  if (!lsf) {
    ngr = 2;

    for (ch = 0; ch < nch; ++ch)
      si->scfsi[ch] = mad_bit_read(ptr, 4);
  81516c:	080e3300 	call	80e330 <mad_bit_read>
  815170:	01000084 	movi	r4,2
  815174:	01400144 	movi	r5,5
  815178:	d9004115 	stw	r4,260(sp)
  81517c:	d9404415 	stw	r5,272(sp)
  815180:	d8800605 	stb	r2,24(sp)
  815184:	003e7206 	br	814b50 <mad_layer_III+0xf0>
  int result = 0;

  /* allocate Layer III dynamic structures */

  if (stream->main_data == 0) {
    stream->main_data = malloc(MAD_BUFFER_MDLEN);
  815188:	010281c4 	movi	r4,2567
  81518c:	08216fc0 	call	8216fc <malloc>
  815190:	d8c04517 	ldw	r3,276(sp)
  815194:	18800c15 	stw	r2,48(r3)
    if (stream->main_data == 0) {
  815198:	103e401e 	bne	r2,zero,814a9c <mad_layer_III+0x3c>
      stream->error = MAD_ERROR_NOMEM;
  81519c:	013fffc4 	movi	r4,-1
  8151a0:	00800c44 	movi	r2,49
  8151a4:	18800f15 	stw	r2,60(r3)
  8151a8:	2005883a 	mov	r2,r4
  8151ac:	d9004315 	stw	r4,268(sp)
  8151b0:	003f7206 	br	814f7c <mad_layer_III+0x51c>
      return -1;
    }
  }

  if (frame->overlap == 0) {
    frame->overlap = calloc(2 * 32 * 18, sizeof(mad_fixed_t));
  8151b4:	01012004 	movi	r4,1152
  8151b8:	01400104 	movi	r5,4
  8151bc:	08215700 	call	821570 <calloc>
  8151c0:	d8c04617 	ldw	r3,280(sp)
  8151c4:	18890c15 	stw	r2,9264(r3)
    if (frame->overlap == 0) {
  8151c8:	103e371e 	bne	r2,zero,814aa8 <mad_layer_III+0x48>
      stream->error = MAD_ERROR_NOMEM;
  8151cc:	d9404517 	ldw	r5,276(sp)
  8151d0:	013fffc4 	movi	r4,-1
  8151d4:	00800c44 	movi	r2,49
  8151d8:	28800f15 	stw	r2,60(r5)
  8151dc:	2005883a 	mov	r2,r4
  8151e0:	d9004315 	stw	r4,268(sp)
  8151e4:	003f6506 	br	814f7c <mad_layer_III+0x51c>
  8151e8:	28c00717 	ldw	r3,28(r5)
  8151ec:	003e4506 	br	814b04 <mad_layer_III+0xa4>
    else {
      mad_bit_init(&ptr,
		   *stream->main_data + stream->md_len - si.main_data_begin);

      if (md_len > si.main_data_begin) {
	assert(stream->md_len + md_len -
  8151f0:	d8804517 	ldw	r2,276(sp)
  8151f4:	11400d17 	ldw	r5,52(r2)
  8151f8:	9945883a 	add	r2,r19,r5
  8151fc:	10c5c83a 	sub	r2,r2,r3
  815200:	00c281c4 	movi	r3,2567
  815204:	18801836 	bltu	r3,r2,815268 <mad_layer_III+0x808>
	       si.main_data_begin <= MAD_BUFFER_MDLEN);

	memcpy(*stream->main_data + stream->md_len,
  815208:	d8c04517 	ldw	r3,276(sp)
  81520c:	9009883a 	mov	r4,r18
  815210:	1c400c17 	ldw	r17,48(r3)
  815214:	2c63883a 	add	r17,r5,r17
  815218:	080e2b40 	call	80e2b4 <mad_bit_nextbyte>
  81521c:	100b883a 	mov	r5,r2
  815220:	d8800417 	ldw	r2,16(sp)
  815224:	8809883a 	mov	r4,r17
  815228:	98a1c83a 	sub	r16,r19,r2
  81522c:	800d883a 	mov	r6,r16
  815230:	0821e500 	call	821e50 <memcpy>
	       mad_bit_nextbyte(&stream->ptr),
	       frame_used = md_len - si.main_data_begin);
	stream->md_len += frame_used;
  815234:	d9004517 	ldw	r4,276(sp)
  815238:	20c00d17 	ldw	r3,52(r4)
  81523c:	1c07883a 	add	r3,r3,r16
  815240:	20c00d15 	stw	r3,52(r4)
  815244:	003f3406 	br	814f18 <mad_layer_III+0x4b8>

  /* check frame sanity */

  if (stream->next_frame - mad_bit_nextbyte(&stream->ptr) <
      (signed int) si_len) {
    stream->error = MAD_ERROR_BADFRAMELEN;
  815248:	d8c04517 	ldw	r3,276(sp)
    stream->md_len = 0;
  81524c:	017fffc4 	movi	r5,-1

  /* check frame sanity */

  if (stream->next_frame - mad_bit_nextbyte(&stream->ptr) <
      (signed int) si_len) {
    stream->error = MAD_ERROR_BADFRAMELEN;
  815250:	00808c44 	movi	r2,561
  815254:	18800f15 	stw	r2,60(r3)
  815258:	2805883a 	mov	r2,r5
    stream->md_len = 0;
  81525c:	d9404315 	stw	r5,268(sp)
  815260:	18000d15 	stw	zero,52(r3)
  815264:	003f4506 	br	814f7c <mad_layer_III+0x51c>
    else {
      mad_bit_init(&ptr,
		   *stream->main_data + stream->md_len - si.main_data_begin);

      if (md_len > si.main_data_begin) {
	assert(stream->md_len + md_len -
  815268:	08215400 	call	821540 <abort>

0081526c <mad_stream_skip>:
 * NAME:	stream->skip()
 * DESCRIPTION:	arrange to skip bytes before the next frame
 */
void mad_stream_skip(struct mad_stream *stream, unsigned long length)
{
  stream->skiplen += length;
  81526c:	20800217 	ldw	r2,8(r4)
  815270:	1145883a 	add	r2,r2,r5
  815274:	20800215 	stw	r2,8(r4)
}
  815278:	f800283a 	ret

0081527c <mad_stream_errorstr>:
 * NAME:	stream->errorstr()
 * DESCRIPTION:	return a string description of the current error condition
 */
char const *mad_stream_errorstr(struct mad_stream const *stream)
{
  switch (stream->error) {
  81527c:	20c00f17 	ldw	r3,60(r4)
  815280:	00808444 	movi	r2,529
  815284:	18801b26 	beq	r3,r2,8152f4 <mad_stream_errorstr+0x78>
  815288:	10c00d2e 	bgeu	r2,r3,8152c0 <mad_stream_errorstr+0x44>
  81528c:	00808d04 	movi	r2,564
  815290:	18802f26 	beq	r3,r2,815350 <mad_stream_errorstr+0xd4>
  815294:	10c01a2e 	bgeu	r2,r3,815300 <mad_stream_errorstr+0x84>
  815298:	00808dc4 	movi	r2,567
  81529c:	18804926 	beq	r3,r2,8153c4 <mad_stream_errorstr+0x148>
  8152a0:	10c0412e 	bgeu	r2,r3,8153a8 <mad_stream_errorstr+0x12c>
  8152a4:	00808e04 	movi	r2,568
  8152a8:	18805e26 	beq	r3,r2,815424 <mad_stream_errorstr+0x1a8>
  8152ac:	00808e44 	movi	r2,569
  8152b0:	1880311e 	bne	r3,r2,815378 <mad_stream_errorstr+0xfc>
  8152b4:	00802134 	movhi	r2,132
  8152b8:	10b66904 	addi	r2,r2,-9820
  8152bc:	f800283a 	ret
  8152c0:	00804044 	movi	r2,257
  8152c4:	18802526 	beq	r3,r2,81535c <mad_stream_errorstr+0xe0>
  8152c8:	10c0172e 	bgeu	r2,r3,815328 <mad_stream_errorstr+0xac>
  8152cc:	00804104 	movi	r2,260
  8152d0:	18804226 	beq	r3,r2,8153dc <mad_stream_errorstr+0x160>
  8152d4:	10c0242e 	bgeu	r2,r3,815368 <mad_stream_errorstr+0xec>
  8152d8:	00804144 	movi	r2,261
  8152dc:	18804526 	beq	r3,r2,8153f4 <mad_stream_errorstr+0x178>
  8152e0:	00808044 	movi	r2,513
  8152e4:	1880241e 	bne	r3,r2,815378 <mad_stream_errorstr+0xfc>

  case MAD_ERROR_LOSTSYNC:	 return "lost synchronization";
  case MAD_ERROR_BADLAYER:	 return "reserved header layer value";
  case MAD_ERROR_BADBITRATE:	 return "forbidden bitrate value";
  case MAD_ERROR_BADSAMPLERATE:	 return "reserved sample frequency value";
  case MAD_ERROR_BADEMPHASIS:	 return "reserved emphasis value";
  8152e8:	00802134 	movhi	r2,132
  8152ec:	10b6aa04 	addi	r2,r2,-9560
  8152f0:	f800283a 	ret

  case MAD_ERROR_BADCRC:	 return "CRC check failed";
  8152f4:	00802134 	movhi	r2,132
  8152f8:	10b6af04 	addi	r2,r2,-9540
  8152fc:	f800283a 	ret
 * NAME:	stream->errorstr()
 * DESCRIPTION:	return a string description of the current error condition
 */
char const *mad_stream_errorstr(struct mad_stream const *stream)
{
  switch (stream->error) {
  815300:	00808c44 	movi	r2,561
  815304:	18803226 	beq	r3,r2,8153d0 <mad_stream_errorstr+0x154>
  815308:	10c0202e 	bgeu	r2,r3,81538c <mad_stream_errorstr+0x110>
  81530c:	00808c84 	movi	r2,562
  815310:	18803e26 	beq	r3,r2,81540c <mad_stream_errorstr+0x190>
  815314:	00808cc4 	movi	r2,563
  815318:	1880171e 	bne	r3,r2,815378 <mad_stream_errorstr+0xfc>
  case MAD_ERROR_BADCRC:	 return "CRC check failed";
  case MAD_ERROR_BADBITALLOC:	 return "forbidden bit allocation value";
  case MAD_ERROR_BADSCALEFACTOR: return "bad scalefactor index";
  case MAD_ERROR_BADMODE:	 return "bad bitrate/mode combination";
  case MAD_ERROR_BADFRAMELEN:	 return "bad frame length";
  case MAD_ERROR_BADBIGVALUES:	 return "bad big_values count";
  81531c:	00802134 	movhi	r2,132
  815320:	10b6d004 	addi	r2,r2,-9408
  815324:	f800283a 	ret
 * NAME:	stream->errorstr()
 * DESCRIPTION:	return a string description of the current error condition
 */
char const *mad_stream_errorstr(struct mad_stream const *stream)
{
  switch (stream->error) {
  815328:	00800044 	movi	r2,1
  81532c:	18802e26 	beq	r3,r2,8153e8 <mad_stream_errorstr+0x16c>
  815330:	18801336 	bltu	r3,r2,815380 <mad_stream_errorstr+0x104>
  815334:	00800084 	movi	r2,2
  815338:	18803126 	beq	r3,r2,815400 <mad_stream_errorstr+0x184>
  81533c:	00800c44 	movi	r2,49
  815340:	18800d1e 	bne	r3,r2,815378 <mad_stream_errorstr+0xfc>
  case MAD_ERROR_NONE:		 return "no error";

  case MAD_ERROR_BUFLEN:	 return "input buffer too small (or EOF)";
  case MAD_ERROR_BUFPTR:	 return "invalid (null) buffer pointer";
  815344:	00802134 	movhi	r2,132
  815348:	10b68404 	addi	r2,r2,-9712
  81534c:	f800283a 	ret
  case MAD_ERROR_BADBITALLOC:	 return "forbidden bit allocation value";
  case MAD_ERROR_BADSCALEFACTOR: return "bad scalefactor index";
  case MAD_ERROR_BADMODE:	 return "bad bitrate/mode combination";
  case MAD_ERROR_BADFRAMELEN:	 return "bad frame length";
  case MAD_ERROR_BADBIGVALUES:	 return "bad big_values count";
  case MAD_ERROR_BADBLOCKTYPE:	 return "reserved block_type";
  815350:	00802134 	movhi	r2,132
  815354:	10b6d504 	addi	r2,r2,-9388
  815358:	f800283a 	ret
  case MAD_ERROR_NONE:		 return "no error";

  case MAD_ERROR_BUFLEN:	 return "input buffer too small (or EOF)";
  case MAD_ERROR_BUFPTR:	 return "invalid (null) buffer pointer";

  case MAD_ERROR_NOMEM:		 return "not enough memory";
  81535c:	00802134 	movhi	r2,132
  815360:	10b68904 	addi	r2,r2,-9692
  815364:	f800283a 	ret
 * NAME:	stream->errorstr()
 * DESCRIPTION:	return a string description of the current error condition
 */
char const *mad_stream_errorstr(struct mad_stream const *stream)
{
  switch (stream->error) {
  815368:	00804084 	movi	r2,258
  81536c:	18803326 	beq	r3,r2,81543c <mad_stream_errorstr+0x1c0>
  815370:	008040c4 	movi	r2,259
  815374:	18803426 	beq	r3,r2,815448 <mad_stream_errorstr+0x1cc>
  815378:	0005883a 	mov	r2,zero
  81537c:	f800283a 	ret
  815380:	00802134 	movhi	r2,132
  815384:	10b67104 	addi	r2,r2,-9788
  815388:	f800283a 	ret
  81538c:	00808844 	movi	r2,545
  815390:	18802726 	beq	r3,r2,815430 <mad_stream_errorstr+0x1b4>
  815394:	00808884 	movi	r2,546
  815398:	18bff71e 	bne	r3,r2,815378 <mad_stream_errorstr+0xfc>
  case MAD_ERROR_BADSAMPLERATE:	 return "reserved sample frequency value";
  case MAD_ERROR_BADEMPHASIS:	 return "reserved emphasis value";

  case MAD_ERROR_BADCRC:	 return "CRC check failed";
  case MAD_ERROR_BADBITALLOC:	 return "forbidden bit allocation value";
  case MAD_ERROR_BADSCALEFACTOR: return "bad scalefactor index";
  81539c:	00802134 	movhi	r2,132
  8153a0:	10b6bd04 	addi	r2,r2,-9484
  8153a4:	f800283a 	ret
 * NAME:	stream->errorstr()
 * DESCRIPTION:	return a string description of the current error condition
 */
char const *mad_stream_errorstr(struct mad_stream const *stream)
{
  switch (stream->error) {
  8153a8:	00808d44 	movi	r2,565
  8153ac:	18801a26 	beq	r3,r2,815418 <mad_stream_errorstr+0x19c>
  8153b0:	00808d84 	movi	r2,566
  8153b4:	18bff01e 	bne	r3,r2,815378 <mad_stream_errorstr+0xfc>
  case MAD_ERROR_BADMODE:	 return "bad bitrate/mode combination";
  case MAD_ERROR_BADFRAMELEN:	 return "bad frame length";
  case MAD_ERROR_BADBIGVALUES:	 return "bad big_values count";
  case MAD_ERROR_BADBLOCKTYPE:	 return "reserved block_type";
  case MAD_ERROR_BADSCFSI:	 return "bad scalefactor selection info";
  case MAD_ERROR_BADDATAPTR:	 return "bad main_data_begin pointer";
  8153b8:	00802134 	movhi	r2,132
  8153bc:	10b6e404 	addi	r2,r2,-9328
  8153c0:	f800283a 	ret
  case MAD_ERROR_BADPART3LEN:	 return "bad audio data length";
  8153c4:	00802134 	movhi	r2,132
  8153c8:	10b6ea04 	addi	r2,r2,-9304
  8153cc:	f800283a 	ret
  case MAD_ERROR_BADEMPHASIS:	 return "reserved emphasis value";

  case MAD_ERROR_BADCRC:	 return "CRC check failed";
  case MAD_ERROR_BADBITALLOC:	 return "forbidden bit allocation value";
  case MAD_ERROR_BADSCALEFACTOR: return "bad scalefactor index";
  case MAD_ERROR_BADMODE:	 return "bad bitrate/mode combination";
  8153d0:	00802134 	movhi	r2,132
  8153d4:	10b6c504 	addi	r2,r2,-9452
  8153d8:	f800283a 	ret

  case MAD_ERROR_NOMEM:		 return "not enough memory";

  case MAD_ERROR_LOSTSYNC:	 return "lost synchronization";
  case MAD_ERROR_BADLAYER:	 return "reserved header layer value";
  case MAD_ERROR_BADBITRATE:	 return "forbidden bitrate value";
  8153dc:	00802134 	movhi	r2,132
  8153e0:	10b69c04 	addi	r2,r2,-9616
  8153e4:	f800283a 	ret
 * DESCRIPTION:	return a string description of the current error condition
 */
char const *mad_stream_errorstr(struct mad_stream const *stream)
{
  switch (stream->error) {
  case MAD_ERROR_NONE:		 return "no error";
  8153e8:	00802134 	movhi	r2,132
  8153ec:	10b67404 	addi	r2,r2,-9776
  8153f0:	f800283a 	ret
  case MAD_ERROR_NOMEM:		 return "not enough memory";

  case MAD_ERROR_LOSTSYNC:	 return "lost synchronization";
  case MAD_ERROR_BADLAYER:	 return "reserved header layer value";
  case MAD_ERROR_BADBITRATE:	 return "forbidden bitrate value";
  case MAD_ERROR_BADSAMPLERATE:	 return "reserved sample frequency value";
  8153f4:	00802134 	movhi	r2,132
  8153f8:	10b6a404 	addi	r2,r2,-9584
  8153fc:	f800283a 	ret
char const *mad_stream_errorstr(struct mad_stream const *stream)
{
  switch (stream->error) {
  case MAD_ERROR_NONE:		 return "no error";

  case MAD_ERROR_BUFLEN:	 return "input buffer too small (or EOF)";
  815400:	00802134 	movhi	r2,132
  815404:	10b67c04 	addi	r2,r2,-9744
  815408:	f800283a 	ret

  case MAD_ERROR_BADCRC:	 return "CRC check failed";
  case MAD_ERROR_BADBITALLOC:	 return "forbidden bit allocation value";
  case MAD_ERROR_BADSCALEFACTOR: return "bad scalefactor index";
  case MAD_ERROR_BADMODE:	 return "bad bitrate/mode combination";
  case MAD_ERROR_BADFRAMELEN:	 return "bad frame length";
  81540c:	00802134 	movhi	r2,132
  815410:	10b6ca04 	addi	r2,r2,-9432
  815414:	f800283a 	ret
  case MAD_ERROR_BADBIGVALUES:	 return "bad big_values count";
  case MAD_ERROR_BADBLOCKTYPE:	 return "reserved block_type";
  case MAD_ERROR_BADSCFSI:	 return "bad scalefactor selection info";
  815418:	00802134 	movhi	r2,132
  81541c:	10b6dd04 	addi	r2,r2,-9356
  815420:	f800283a 	ret
  case MAD_ERROR_BADDATAPTR:	 return "bad main_data_begin pointer";
  case MAD_ERROR_BADPART3LEN:	 return "bad audio data length";
  case MAD_ERROR_BADHUFFTABLE:	 return "bad Huffman table select";
  815424:	00802134 	movhi	r2,132
  815428:	10b6f104 	addi	r2,r2,-9276
  case MAD_ERROR_BADHUFFDATA:	 return "Huffman data overrun";
  case MAD_ERROR_BADSTEREO:	 return "incompatible block_type for JS";
  }

  return 0;
}
  81542c:	f800283a 	ret
  case MAD_ERROR_BADBITRATE:	 return "forbidden bitrate value";
  case MAD_ERROR_BADSAMPLERATE:	 return "reserved sample frequency value";
  case MAD_ERROR_BADEMPHASIS:	 return "reserved emphasis value";

  case MAD_ERROR_BADCRC:	 return "CRC check failed";
  case MAD_ERROR_BADBITALLOC:	 return "forbidden bit allocation value";
  815430:	00802134 	movhi	r2,132
  815434:	10b6b704 	addi	r2,r2,-9508
  815438:	f800283a 	ret
  case MAD_ERROR_BUFLEN:	 return "input buffer too small (or EOF)";
  case MAD_ERROR_BUFPTR:	 return "invalid (null) buffer pointer";

  case MAD_ERROR_NOMEM:		 return "not enough memory";

  case MAD_ERROR_LOSTSYNC:	 return "lost synchronization";
  81543c:	00802134 	movhi	r2,132
  815440:	10b68f04 	addi	r2,r2,-9668
  815444:	f800283a 	ret
  case MAD_ERROR_BADLAYER:	 return "reserved header layer value";
  815448:	00802134 	movhi	r2,132
  81544c:	10b69604 	addi	r2,r2,-9640
  815450:	f800283a 	ret

00815454 <mad_stream_sync>:
/*
 * NAME:	stream->sync()
 * DESCRIPTION:	locate the next stream sync word
 */
int mad_stream_sync(struct mad_stream *stream)
{
  815454:	defffd04 	addi	sp,sp,-12
  815458:	dc000015 	stw	r16,0(sp)
  register unsigned char const *ptr, *end;

  ptr = mad_bit_nextbyte(&stream->ptr);
  81545c:	24000704 	addi	r16,r4,28
/*
 * NAME:	stream->sync()
 * DESCRIPTION:	locate the next stream sync word
 */
int mad_stream_sync(struct mad_stream *stream)
{
  815460:	dc400115 	stw	r17,4(sp)
  815464:	2023883a 	mov	r17,r4
  register unsigned char const *ptr, *end;

  ptr = mad_bit_nextbyte(&stream->ptr);
  815468:	8009883a 	mov	r4,r16
/*
 * NAME:	stream->sync()
 * DESCRIPTION:	locate the next stream sync word
 */
int mad_stream_sync(struct mad_stream *stream)
{
  81546c:	dfc00215 	stw	ra,8(sp)
  register unsigned char const *ptr, *end;

  ptr = mad_bit_nextbyte(&stream->ptr);
  815470:	080e2b40 	call	80e2b4 <mad_bit_nextbyte>
  end = stream->bufend;
  815474:	88c00117 	ldw	r3,4(r17)
 */
int mad_stream_sync(struct mad_stream *stream)
{
  register unsigned char const *ptr, *end;

  ptr = mad_bit_nextbyte(&stream->ptr);
  815478:	100b883a 	mov	r5,r2
  end = stream->bufend;

  while (ptr < end - 1 &&
  81547c:	19bfffc4 	addi	r6,r3,-1
  815480:	1180072e 	bgeu	r2,r6,8154a0 <mad_stream_sync+0x4c>
  815484:	01c03fc4 	movi	r7,255
  815488:	02003804 	movi	r8,224
  81548c:	28800003 	ldbu	r2,0(r5)
  815490:	29000044 	addi	r4,r5,1
  815494:	11c00b26 	beq	r2,r7,8154c4 <mad_stream_sync+0x70>
  815498:	29400044 	addi	r5,r5,1
  81549c:	29bffb36 	bltu	r5,r6,81548c <mad_stream_sync+0x38>
	 !(ptr[0] == 0xff && (ptr[1] & 0xe0) == 0xe0))
    ++ptr;

  if (end - ptr < MAD_BUFFER_GUARD)
  8154a0:	1947c83a 	sub	r3,r3,r5
  8154a4:	008001c4 	movi	r2,7
  8154a8:	10c00c16 	blt	r2,r3,8154dc <mad_stream_sync+0x88>
  8154ac:	00bfffc4 	movi	r2,-1
    return -1;

  mad_bit_init(&stream->ptr, ptr);

  return 0;
}
  8154b0:	dfc00217 	ldw	ra,8(sp)
  8154b4:	dc400117 	ldw	r17,4(sp)
  8154b8:	dc000017 	ldw	r16,0(sp)
  8154bc:	dec00304 	addi	sp,sp,12
  8154c0:	f800283a 	ret
  register unsigned char const *ptr, *end;

  ptr = mad_bit_nextbyte(&stream->ptr);
  end = stream->bufend;

  while (ptr < end - 1 &&
  8154c4:	28800043 	ldbu	r2,1(r5)
  8154c8:	1080380c 	andi	r2,r2,224
  8154cc:	123ff426 	beq	r2,r8,8154a0 <mad_stream_sync+0x4c>
  8154d0:	200b883a 	mov	r5,r4
  8154d4:	29bfed36 	bltu	r5,r6,81548c <mad_stream_sync+0x38>
  8154d8:	003ff106 	br	8154a0 <mad_stream_sync+0x4c>
    ++ptr;

  if (end - ptr < MAD_BUFFER_GUARD)
    return -1;

  mad_bit_init(&stream->ptr, ptr);
  8154dc:	8009883a 	mov	r4,r16
  8154e0:	080e27c0 	call	80e27c <mad_bit_init>
  8154e4:	0005883a 	mov	r2,zero

  return 0;
}
  8154e8:	dfc00217 	ldw	ra,8(sp)
  8154ec:	dc400117 	ldw	r17,4(sp)
  8154f0:	dc000017 	ldw	r16,0(sp)
  8154f4:	dec00304 	addi	sp,sp,12
  8154f8:	f800283a 	ret

008154fc <mad_stream_buffer>:
 */
void mad_stream_buffer(struct mad_stream *stream,
		       unsigned char const *buffer, unsigned long length)
{
  stream->buffer = buffer;
  stream->bufend = buffer + length;
  8154fc:	298d883a 	add	r6,r5,r6

  stream->this_frame = buffer;
  stream->next_frame = buffer;

  stream->sync = 1;
  815500:	00800044 	movi	r2,1
 */
void mad_stream_buffer(struct mad_stream *stream,
		       unsigned char const *buffer, unsigned long length)
{
  stream->buffer = buffer;
  stream->bufend = buffer + length;
  815504:	21800115 	stw	r6,4(r4)

  stream->this_frame = buffer;
  stream->next_frame = buffer;
  815508:	21400615 	stw	r5,24(r4)

  stream->sync = 1;
  81550c:	20800315 	stw	r2,12(r4)
 * DESCRIPTION:	set stream buffer pointers
 */
void mad_stream_buffer(struct mad_stream *stream,
		       unsigned char const *buffer, unsigned long length)
{
  stream->buffer = buffer;
  815510:	21400015 	stw	r5,0(r4)
  stream->bufend = buffer + length;

  stream->this_frame = buffer;
  815514:	21400515 	stw	r5,20(r4)
  stream->next_frame = buffer;

  stream->sync = 1;

  mad_bit_init(&stream->ptr, buffer);
  815518:	21000704 	addi	r4,r4,28
  81551c:	080e27c1 	jmpi	80e27c <mad_bit_init>

00815520 <mad_stream_init>:
/*
 * NAME:	stream->init()
 * DESCRIPTION:	initialize stream struct
 */
void mad_stream_init(struct mad_stream *stream)
{
  815520:	defffe04 	addi	sp,sp,-8
  815524:	dc400015 	stw	r17,0(sp)
  stream->buffer     = 0;
  815528:	20000015 	stw	zero,0(r4)
/*
 * NAME:	stream->init()
 * DESCRIPTION:	initialize stream struct
 */
void mad_stream_init(struct mad_stream *stream)
{
  81552c:	2023883a 	mov	r17,r4
  stream->buffer     = 0;
  stream->bufend     = 0;
  815530:	20000115 	stw	zero,4(r4)
  stream->skiplen    = 0;
  815534:	20000215 	stw	zero,8(r4)

  stream->sync       = 0;
  815538:	20000315 	stw	zero,12(r4)
  stream->freerate   = 0;
  81553c:	20000415 	stw	zero,16(r4)

  stream->this_frame = 0;
  815540:	20000515 	stw	zero,20(r4)
  stream->next_frame = 0;
  815544:	20000615 	stw	zero,24(r4)
  mad_bit_init(&stream->ptr, 0);
  815548:	000b883a 	mov	r5,zero
  81554c:	21000704 	addi	r4,r4,28
/*
 * NAME:	stream->init()
 * DESCRIPTION:	initialize stream struct
 */
void mad_stream_init(struct mad_stream *stream)
{
  815550:	dfc00115 	stw	ra,4(sp)
  stream->sync       = 0;
  stream->freerate   = 0;

  stream->this_frame = 0;
  stream->next_frame = 0;
  mad_bit_init(&stream->ptr, 0);
  815554:	080e27c0 	call	80e27c <mad_bit_init>

  mad_bit_init(&stream->anc_ptr, 0);
  815558:	89000904 	addi	r4,r17,36
  81555c:	000b883a 	mov	r5,zero
  815560:	080e27c0 	call	80e27c <mad_bit_init>

  stream->main_data  = 0;
  stream->md_len     = 0;

  stream->options    = 0;
  stream->error      = MAD_ERROR_NONE;
  815564:	88000f15 	stw	zero,60(r17)
  stream->this_frame = 0;
  stream->next_frame = 0;
  mad_bit_init(&stream->ptr, 0);

  mad_bit_init(&stream->anc_ptr, 0);
  stream->anc_bitlen = 0;
  815568:	88000b15 	stw	zero,44(r17)

  stream->main_data  = 0;
  81556c:	88000c15 	stw	zero,48(r17)
  stream->md_len     = 0;
  815570:	88000d15 	stw	zero,52(r17)

  stream->options    = 0;
  815574:	88000e15 	stw	zero,56(r17)
  stream->error      = MAD_ERROR_NONE;
}
  815578:	dfc00117 	ldw	ra,4(sp)
  81557c:	dc400017 	ldw	r17,0(sp)
  815580:	dec00204 	addi	sp,sp,8
  815584:	f800283a 	ret

00815588 <mad_stream_finish>:
 * NAME:	stream->finish()
 * DESCRIPTION:	deallocate any dynamic memory associated with stream
 */
void mad_stream_finish(struct mad_stream *stream)
{
  if (stream->main_data) {
  815588:	20800c17 	ldw	r2,48(r4)
/*
 * NAME:	stream->finish()
 * DESCRIPTION:	deallocate any dynamic memory associated with stream
 */
void mad_stream_finish(struct mad_stream *stream)
{
  81558c:	defffe04 	addi	sp,sp,-8
  815590:	dc000015 	stw	r16,0(sp)
  815594:	dfc00115 	stw	ra,4(sp)
  815598:	2021883a 	mov	r16,r4
  if (stream->main_data) {
    free(stream->main_data);
  81559c:	1009883a 	mov	r4,r2
 * NAME:	stream->finish()
 * DESCRIPTION:	deallocate any dynamic memory associated with stream
 */
void mad_stream_finish(struct mad_stream *stream)
{
  if (stream->main_data) {
  8155a0:	10000226 	beq	r2,zero,8155ac <mad_stream_finish+0x24>
    free(stream->main_data);
  8155a4:	08216e80 	call	8216e8 <free>
    stream->main_data = 0;
  8155a8:	80000c15 	stw	zero,48(r16)
  }

  mad_bit_finish(&stream->anc_ptr);
  mad_bit_finish(&stream->ptr);
}
  8155ac:	dfc00117 	ldw	ra,4(sp)
  8155b0:	dc000017 	ldw	r16,0(sp)
  8155b4:	dec00204 	addi	sp,sp,8
  8155b8:	f800283a 	ret

008155bc <mad_synth_mute>:
/*
 * NAME:	synth->mute()
 * DESCRIPTION:	zero all polyphase filterbank values, resetting synthesis
 */
void mad_synth_mute(struct mad_synth *synth)
{
  8155bc:	000f883a 	mov	r7,zero
  8155c0:	02000084 	movi	r8,2
  8155c4:	01800404 	movi	r6,16
  unsigned int ch, s, v;

  for (ch = 0; ch < 2; ++ch) {
    for (s = 0; s < 16; ++s) {
  8155c8:	380492fa 	slli	r2,r7,11
  8155cc:	000b883a 	mov	r5,zero
  8155d0:	2085883a 	add	r2,r4,r2
  8155d4:	1007883a 	mov	r3,r2
      for (v = 0; v < 8; ++v) {
	synth->filter[ch][0][0][s][v] = synth->filter[ch][0][1][s][v] =
  8155d8:	10018015 	stw	zero,1536(r2)
  8155dc:	10010015 	stw	zero,1024(r2)
  8155e0:	10008015 	stw	zero,512(r2)
  8155e4:	18000015 	stw	zero,0(r3)
void mad_synth_mute(struct mad_synth *synth)
{
  unsigned int ch, s, v;

  for (ch = 0; ch < 2; ++ch) {
    for (s = 0; s < 16; ++s) {
  8155e8:	29400044 	addi	r5,r5,1
      for (v = 0; v < 8; ++v) {
	synth->filter[ch][0][0][s][v] = synth->filter[ch][0][1][s][v] =
  8155ec:	10018115 	stw	zero,1540(r2)
  8155f0:	10010115 	stw	zero,1028(r2)
  8155f4:	10008115 	stw	zero,516(r2)
  8155f8:	10000115 	stw	zero,4(r2)
  8155fc:	10018215 	stw	zero,1544(r2)
  815600:	10010215 	stw	zero,1032(r2)
  815604:	10008215 	stw	zero,520(r2)
  815608:	10000215 	stw	zero,8(r2)
  81560c:	10018315 	stw	zero,1548(r2)
  815610:	10010315 	stw	zero,1036(r2)
  815614:	10008315 	stw	zero,524(r2)
  815618:	10000315 	stw	zero,12(r2)
  81561c:	10018415 	stw	zero,1552(r2)
  815620:	10010415 	stw	zero,1040(r2)
  815624:	10008415 	stw	zero,528(r2)
  815628:	10000415 	stw	zero,16(r2)
  81562c:	10018515 	stw	zero,1556(r2)
  815630:	10010515 	stw	zero,1044(r2)
  815634:	10008515 	stw	zero,532(r2)
  815638:	10000515 	stw	zero,20(r2)
  81563c:	10018615 	stw	zero,1560(r2)
  815640:	10010615 	stw	zero,1048(r2)
  815644:	10008615 	stw	zero,536(r2)
  815648:	10000615 	stw	zero,24(r2)
  81564c:	10018715 	stw	zero,1564(r2)
  815650:	10010715 	stw	zero,1052(r2)
  815654:	10008715 	stw	zero,540(r2)
  815658:	10000715 	stw	zero,28(r2)
void mad_synth_mute(struct mad_synth *synth)
{
  unsigned int ch, s, v;

  for (ch = 0; ch < 2; ++ch) {
    for (s = 0; s < 16; ++s) {
  81565c:	18c00804 	addi	r3,r3,32
  815660:	10800804 	addi	r2,r2,32
  815664:	29bfdc1e 	bne	r5,r6,8155d8 <mad_synth_mute+0x1c>
 */
void mad_synth_mute(struct mad_synth *synth)
{
  unsigned int ch, s, v;

  for (ch = 0; ch < 2; ++ch) {
  815668:	39c00044 	addi	r7,r7,1
  81566c:	3a3fd61e 	bne	r7,r8,8155c8 <mad_synth_mute+0xc>
  815670:	f800283a 	ret

00815674 <dct32>:
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815674:	20801517 	ldw	r2,84(r4)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  815678:	20c00017 	ldw	r3,0(r4)
  81567c:	22001f17 	ldw	r8,124(r4)
 * DESCRIPTION:	perform fast in[32]->out[32] DCT
 */
static
void dct32(mad_fixed_t const in[32], unsigned int slot,
	   mad_fixed_t lo[16][8], mad_fixed_t hi[16][8])
{
  815680:	defea004 	addi	sp,sp,-1408
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  815684:	22400f17 	ldw	r9,60(r4)
  815688:	22801017 	ldw	r10,64(r4)
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  81568c:	22c00717 	ldw	r11,28(r4)
  815690:	23001817 	ldw	r12,96(r4)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  815694:	23400817 	ldw	r13,32(r4)
  815698:	23801717 	ldw	r14,92(r4)
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  81569c:	23c00317 	ldw	r15,12(r4)
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  8156a0:	d8808f15 	stw	r2,572(sp)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8156a4:	d8c0aa15 	stw	r3,680(sp)
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  8156a8:	20801c17 	ldw	r2,112(r4)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  8156ac:	20c00c17 	ldw	r3,48(r4)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8156b0:	da00a915 	stw	r8,676(sp)
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  8156b4:	22001317 	ldw	r8,76(r4)
 * DESCRIPTION:	perform fast in[32]->out[32] DCT
 */
static
void dct32(mad_fixed_t const in[32], unsigned int slot,
	   mad_fixed_t lo[16][8], mad_fixed_t hi[16][8])
{
  8156b8:	df015f15 	stw	fp,1404(sp)
  8156bc:	ddc15e15 	stw	r23,1400(sp)
  8156c0:	dd815d15 	stw	r22,1396(sp)
  8156c4:	dd415c15 	stw	r21,1392(sp)
  8156c8:	dd015b15 	stw	r20,1388(sp)
  8156cc:	dcc15a15 	stw	r19,1384(sp)
  8156d0:	dc815915 	stw	r18,1380(sp)
  8156d4:	dc415815 	stw	r17,1376(sp)
  8156d8:	dc015715 	stw	r16,1372(sp)
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  8156dc:	da40a815 	stw	r9,672(sp)
  8156e0:	da80a715 	stw	r10,668(sp)
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  8156e4:	dac0a615 	stw	r11,664(sp)
  8156e8:	db00a515 	stw	r12,660(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  8156ec:	db40a415 	stw	r13,656(sp)
  8156f0:	db80a315 	stw	r14,652(sp)
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  8156f4:	dbc0a215 	stw	r15,648(sp)
  8156f8:	d880a115 	stw	r2,644(sp)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  8156fc:	d8c0a015 	stw	r3,640(sp)
  815700:	da009f15 	stw	r8,636(sp)
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  815704:	22400417 	ldw	r9,16(r4)
  815708:	22801b17 	ldw	r10,108(r4)
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  81570c:	22c00b17 	ldw	r11,44(r4)
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  815710:	23000117 	ldw	r12,4(r4)
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815714:	23800e17 	ldw	r14,56(r4)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815718:	20800617 	ldw	r2,24(r4)
  81571c:	20c01917 	ldw	r3,100(r4)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815720:	23c01117 	ldw	r15,68(r4)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815724:	22000917 	ldw	r8,36(r4)
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  815728:	da409e15 	stw	r9,632(sp)
  81572c:	da809d15 	stw	r10,628(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815730:	22401617 	ldw	r9,88(r4)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815734:	22800217 	ldw	r10,8(r4)
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815738:	dac09c15 	stw	r11,624(sp)
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  81573c:	db009b15 	stw	r12,620(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815740:	22c01d17 	ldw	r11,116(r4)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815744:	23000d17 	ldw	r12,52(r4)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815748:	db809a15 	stw	r14,616(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  81574c:	23800517 	ldw	r14,20(r4)
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815750:	24801417 	ldw	r18,80(r4)
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  815754:	23401e17 	ldw	r13,120(r4)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815758:	d8809815 	stw	r2,608(sp)
  81575c:	d8c09715 	stw	r3,604(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815760:	20801a17 	ldw	r2,104(r4)
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815764:	20c01217 	ldw	r3,72(r4)
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815768:	21000a17 	ldw	r4,40(r4)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  81576c:	dbc09915 	stw	r15,612(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815770:	da009615 	stw	r8,600(sp)
  815774:	da409515 	stw	r9,596(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815778:	da809415 	stw	r10,592(sp)
  81577c:	dac09315 	stw	r11,588(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815780:	db009215 	stw	r12,584(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815784:	db809115 	stw	r14,580(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815788:	d9009015 	stw	r4,576(sp)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  81578c:	dbc0aa17 	ldw	r15,680(sp)
  815790:	da00a917 	ldw	r8,676(sp)
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  815794:	da40a817 	ldw	r9,672(sp)
  815798:	da80a717 	ldw	r10,668(sp)
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  81579c:	dac0a617 	ldw	r11,664(sp)
  8157a0:	db00a517 	ldw	r12,660(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  8157a4:	db80a417 	ldw	r14,656(sp)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8157a8:	7a09c83a 	sub	r4,r15,r8
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  8157ac:	dbc0a317 	ldw	r15,652(sp)
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  8157b0:	4aa1c83a 	sub	r16,r9,r10
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  8157b4:	5b29c83a 	sub	r20,r11,r12
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  8157b8:	da80a017 	ldw	r10,640(sp)
  8157bc:	dac09f17 	ldw	r11,636(sp)
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  8157c0:	db009e17 	ldw	r12,632(sp)
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  8157c4:	73e3c83a 	sub	r17,r14,r15
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  8157c8:	db809d17 	ldw	r14,628(sp)
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  8157cc:	da00a217 	ldw	r8,648(sp)
  8157d0:	da40a117 	ldw	r9,644(sp)
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  8157d4:	dbc09c17 	ldw	r15,624(sp)
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  8157d8:	52f9c83a 	sub	fp,r10,r11
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  8157dc:	da809b17 	ldw	r10,620(sp)
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  8157e0:	6397c83a 	sub	r11,r12,r14
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  8157e4:	db809917 	ldw	r14,612(sp)
  8157e8:	db009a17 	ldw	r12,616(sp)
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  8157ec:	426bc83a 	sub	r21,r8,r9
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  8157f0:	7c91c83a 	sub	r8,r15,r18
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  8157f4:	5353c83a 	sub	r9,r10,r13
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  8157f8:	dbc09817 	ldw	r15,608(sp)
  8157fc:	da809717 	ldw	r10,604(sp)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815800:	6399c83a 	sub	r12,r12,r14
  815804:	db00b715 	stw	r12,732(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815808:	db809517 	ldw	r14,596(sp)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  81580c:	7a9fc83a 	sub	r15,r15,r10
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815810:	db009617 	ldw	r12,600(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815814:	da809317 	ldw	r10,588(sp)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815818:	dbc0bc15 	stw	r15,752(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  81581c:	dbc09417 	ldw	r15,592(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815820:	6399c83a 	sub	r12,r12,r14
  815824:	db00be15 	stw	r12,760(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815828:	7a9fc83a 	sub	r15,r15,r10
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  81582c:	db009217 	ldw	r12,584(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815830:	db809117 	ldw	r14,580(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815834:	da808f17 	ldw	r10,572(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815838:	dbc0c315 	stw	r15,780(sp)
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  81583c:	dbc09017 	ldw	r15,576(sp)
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815840:	60d9c83a 	sub	r12,r12,r3
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815844:	709dc83a 	sub	r14,r14,r2
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815848:	db00c515 	stw	r12,788(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  81584c:	db80ca15 	stw	r14,808(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815850:	7a9fc83a 	sub	r15,r15,r10
  815854:	dbc0cc15 	stw	r15,816(sp)
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  815858:	5815d33a 	srai	r10,r11,12
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  81585c:	dac0b717 	ldw	r11,732(sp)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815860:	db00bc17 	ldw	r12,752(sp)
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815864:	4011d33a 	srai	r8,r8,12
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815868:	5817d33a 	srai	r11,r11,12
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  81586c:	6019d33a 	srai	r12,r12,12
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815870:	da00b315 	stw	r8,716(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815874:	db80be17 	ldw	r14,760(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815878:	dbc0c317 	ldw	r15,780(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  81587c:	da00c517 	ldw	r8,788(sp)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815880:	dac0b815 	stw	r11,736(sp)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  815884:	2009d33a 	srai	r4,r4,12
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815888:	dac0ca17 	ldw	r11,808(sp)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  81588c:	db00bd15 	stw	r12,756(sp)
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815890:	db00cc17 	ldw	r12,816(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815894:	701dd33a 	srai	r14,r14,12
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815898:	781fd33a 	srai	r15,r15,12
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  81589c:	4011d33a 	srai	r8,r8,12
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  8158a0:	5817d33a 	srai	r11,r11,12
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8158a4:	2103fee4 	muli	r4,r4,4091
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  8158a8:	52839da4 	muli	r10,r10,3702
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  8158ac:	6019d33a 	srai	r12,r12,12
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  8158b0:	db80bf15 	stw	r14,764(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  8158b4:	dbc0c415 	stw	r15,784(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  8158b8:	da00c615 	stw	r8,792(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  8158bc:	dac0cb15 	stw	r11,812(sp)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8158c0:	d9007e15 	stw	r4,504(sp)
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  8158c4:	da807915 	stw	r10,484(sp)
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  8158c8:	db80b317 	ldw	r14,716(sp)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  8158cc:	dbc0b817 	ldw	r15,736(sp)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  8158d0:	d900bd17 	ldw	r4,756(sp)
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  8158d4:	da00bf17 	ldw	r8,764(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  8158d8:	da80c417 	ldw	r10,784(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  8158dc:	dac0c617 	ldw	r11,792(sp)
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  8158e0:	8021d33a 	srai	r16,r16,12
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  8158e4:	a029d33a 	srai	r20,r20,12
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  8158e8:	a82bd33a 	srai	r21,r21,12
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  8158ec:	e039d33a 	srai	fp,fp,12
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  8158f0:	db00cd15 	stw	r12,820(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  8158f4:	db00cb17 	ldw	r12,812(sp)
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  8158f8:	84003224 	muli	r16,r16,200
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  8158fc:	a502f6a4 	muli	r20,r20,3034
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  815900:	ad43c424 	muli	r21,r21,3856
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  815904:	e70158e4 	muli	fp,fp,1379
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815908:	7381b5e4 	muli	r14,r14,1751
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  81590c:	7bc09664 	muli	r15,r15,601
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815910:	21033664 	muli	r4,r4,3289
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815914:	420261e4 	muli	r8,r8,2439
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815918:	5283e164 	muli	r10,r10,3973
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  81591c:	5ac0f8e4 	muli	r11,r11,995
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815920:	63036e64 	muli	r12,r12,3513
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  815924:	dc007d15 	stw	r16,500(sp)
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  815928:	dd007c15 	stw	r20,496(sp)
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  81592c:	dd407b15 	stw	r21,492(sp)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  815930:	df007a15 	stw	fp,488(sp)
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815934:	db807815 	stw	r14,480(sp)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815938:	dbc07715 	stw	r15,476(sp)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  81593c:	d9007615 	stw	r4,472(sp)
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815940:	da007515 	stw	r8,468(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815944:	da807415 	stw	r10,464(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815948:	dac07315 	stw	r11,460(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  81594c:	db007215 	stw	r12,456(sp)
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  815950:	8823d33a 	srai	r17,r17,12
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815954:	db80cd17 	ldw	r14,820(sp)

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  815958:	dbc07e17 	ldw	r15,504(sp)

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  81595c:	da007a17 	ldw	r8,488(sp)
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  815960:	8c42afa4 	muli	r17,r17,2750
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815964:	73820e64 	muli	r14,r14,2105
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  815968:	4813d33a 	srai	r9,r9,12

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  81596c:	a449c83a 	sub	r4,r20,r17
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815970:	db807115 	stw	r14,452(sp)

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815974:	dac07817 	ldw	r11,480(sp)

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  815978:	7c39c83a 	sub	fp,r15,r16

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  81597c:	aa11c83a 	sub	r8,r21,r8

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  815980:	dbc07517 	ldw	r15,468(sp)

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815984:	da807917 	ldw	r10,484(sp)

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  815988:	db007717 	ldw	r12,476(sp)

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  81598c:	db807617 	ldw	r14,472(sp)
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  815990:	4a43f4e4 	muli	r9,r9,4051

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  815994:	d900ad15 	stw	r4,692(sp)

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  815998:	da00b015 	stw	r8,704(sp)

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  81599c:	d9007417 	ldw	r4,464(sp)
  8159a0:	da007317 	ldw	r8,460(sp)

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  8159a4:	52d5c83a 	sub	r10,r10,r11

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  8159a8:	4b19c83a 	sub	r12,r9,r12

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  8159ac:	73ddc83a 	sub	r14,r14,r15

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  8159b0:	dac07117 	ldw	r11,452(sp)

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  8159b4:	da80b415 	stw	r10,720(sp)

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  8159b8:	db00b915 	stw	r12,740(sp)

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  8159bc:	db80c015 	stw	r14,768(sp)

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  8159c0:	2209c83a 	sub	r4,r4,r8
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8159c4:	db80a917 	ldw	r14,676(sp)

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  8159c8:	da807217 	ldw	r10,456(sp)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8159cc:	db00aa17 	ldw	r12,680(sp)

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  8159d0:	d900c715 	stw	r4,796(sp)
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  8159d4:	dbc0a817 	ldw	r15,672(sp)
  8159d8:	d900a717 	ldw	r4,668(sp)

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  8159dc:	52d5c83a 	sub	r10,r10,r11
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8159e0:	6399883a 	add	r12,r12,r14

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  8159e4:	da80ce15 	stw	r10,824(sp)
#  define costab29	MAD_F(0x0259020e)  /* 0.146730474 */
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  8159e8:	db008e15 	stw	r12,568(sp)
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  8159ec:	da80a517 	ldw	r10,660(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  8159f0:	db00a317 	ldw	r12,652(sp)
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  8159f4:	791f883a 	add	r15,r15,r4
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  8159f8:	da00a617 	ldw	r8,664(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  8159fc:	dac0a417 	ldw	r11,656(sp)
#  define costab30	MAD_F(0x01917a6c)  /* 0.098017140 */
#  define costab31	MAD_F(0x00c8fb30)  /* 0.049067674 */
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);
  815a00:	dbc08d15 	stw	r15,564(sp)
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  815a04:	db80a217 	ldw	r14,648(sp)
  815a08:	dbc0a117 	ldw	r15,644(sp)
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  815a0c:	4291883a 	add	r8,r8,r10
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  815a10:	5b17883a 	add	r11,r11,r12
  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  815a14:	da008c15 	stw	r8,560(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);
  815a18:	dac08b15 	stw	r11,556(sp)
  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  815a1c:	73dd883a 	add	r14,r14,r15
  815a20:	db808a15 	stw	r14,552(sp)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  815a24:	da009f17 	ldw	r8,636(sp)
  815a28:	d900a017 	ldw	r4,640(sp)
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  815a2c:	dac09d17 	ldw	r11,628(sp)
  815a30:	da809e17 	ldw	r10,632(sp)
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);
  815a34:	2209883a 	add	r4,r4,r8
  815a38:	d9008915 	stw	r4,548(sp)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815a3c:	dbc09a17 	ldw	r15,616(sp)
  815a40:	d9009917 	ldw	r4,612(sp)
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  815a44:	db809b17 	ldw	r14,620(sp)
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815a48:	db009c17 	ldw	r12,624(sp)
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  815a4c:	52d5883a 	add	r10,r10,r11
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815a50:	791f883a 	add	r15,r15,r4
  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  815a54:	da808815 	stw	r10,544(sp)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);
  815a58:	dbc08515 	stw	r15,532(sp)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815a5c:	da809717 	ldw	r10,604(sp)
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815a60:	dbc09217 	ldw	r15,584(sp)
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  815a64:	735b883a 	add	r13,r14,r13
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815a68:	da009817 	ldw	r8,608(sp)
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815a6c:	64a5883a 	add	r18,r12,r18
  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  815a70:	db408615 	stw	r13,536(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815a74:	db009517 	ldw	r12,596(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815a78:	db809317 	ldw	r14,588(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815a7c:	dac09617 	ldw	r11,600(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815a80:	db409417 	ldw	r13,592(sp)
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815a84:	4291883a 	add	r8,r8,r10
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815a88:	78c7883a 	add	r3,r15,r3
  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  815a8c:	da008415 	stw	r8,528(sp)
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);
  815a90:	d8c08115 	stw	r3,516(sp)
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815a94:	da008f17 	ldw	r8,572(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815a98:	d8c09117 	ldw	r3,580(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815a9c:	5b17883a 	add	r11,r11,r12
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815aa0:	6b9b883a 	add	r13,r13,r14
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815aa4:	d9009017 	ldw	r4,576(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);
  815aa8:	dac08315 	stw	r11,524(sp)
  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  815aac:	db408215 	stw	r13,520(sp)
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);
  815ab0:	da808e17 	ldw	r10,568(sp)
  815ab4:	dac08d17 	ldw	r11,564(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);
  815ab8:	db008c17 	ldw	r12,560(sp)
  815abc:	db408b17 	ldw	r13,556(sp)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);
  815ac0:	db808a17 	ldw	r14,552(sp)
  815ac4:	dbc08917 	ldw	r15,548(sp)
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815ac8:	1885883a 	add	r2,r3,r2
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815acc:	2209883a 	add	r4,r4,r8
  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  815ad0:	d8808015 	stw	r2,512(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);
  815ad4:	d9007f15 	stw	r4,508(sp)
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);
  815ad8:	52c5c83a 	sub	r2,r10,r11
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);
  815adc:	6347c83a 	sub	r3,r12,r13
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);
  815ae0:	da808817 	ldw	r10,544(sp)
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);
  815ae4:	dac08617 	ldw	r11,536(sp)
  815ae8:	db008517 	ldw	r12,532(sp)
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);
  815aec:	db408417 	ldw	r13,528(sp)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);
  815af0:	73c9c83a 	sub	r4,r14,r15
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);
  815af4:	db808317 	ldw	r14,524(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);
  815af8:	dbc08217 	ldw	r15,520(sp)
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);
  815afc:	5491c83a 	sub	r8,r10,r18
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);
  815b00:	5b15c83a 	sub	r10,r11,r12
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);
  815b04:	6b97c83a 	sub	r11,r13,r14
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);
  815b08:	db408117 	ldw	r13,516(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);
  815b0c:	db808017 	ldw	r14,512(sp)

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  815b10:	e039d33a 	srai	fp,fp,12
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);
  815b14:	7b59c83a 	sub	r12,r15,r13
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);
  815b18:	dbc07f17 	ldw	r15,508(sp)
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);
  815b1c:	dc808715 	stw	r18,540(sp)

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  815b20:	df00ab15 	stw	fp,684(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);
  815b24:	73dbc83a 	sub	r13,r14,r15

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  815b28:	db80ad17 	ldw	r14,692(sp)

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  815b2c:	dbc0b017 	ldw	r15,704(sp)
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);
  815b30:	4011d33a 	srai	r8,r8,12

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  815b34:	701dd33a 	srai	r14,r14,12

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  815b38:	781fd33a 	srai	r15,r15,12
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);
  815b3c:	5015d33a 	srai	r10,r10,12

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  815b40:	db80ae15 	stw	r14,696(sp)

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815b44:	db80b417 	ldw	r14,720(sp)

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  815b48:	dbc0b115 	stw	r15,708(sp)

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  815b4c:	dbc0b917 	ldw	r15,740(sp)

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815b50:	701dd33a 	srai	r14,r14,12
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);
  815b54:	5817d33a 	srai	r11,r11,12

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  815b58:	781fd33a 	srai	r15,r15,12

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815b5c:	db80b515 	stw	r14,724(sp)

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  815b60:	db80c017 	ldw	r14,768(sp)

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  815b64:	dbc0ba15 	stw	r15,744(sp)

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  815b68:	dbc0c717 	ldw	r15,796(sp)

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  815b6c:	701dd33a 	srai	r14,r14,12
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);
  815b70:	6019d33a 	srai	r12,r12,12

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  815b74:	781fd33a 	srai	r15,r15,12

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  815b78:	db80c115 	stw	r14,772(sp)

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  815b7c:	db80ce17 	ldw	r14,824(sp)
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);
  815b80:	1005d33a 	srai	r2,r2,12
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);
  815b84:	1807d33a 	srai	r3,r3,12

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  815b88:	701dd33a 	srai	r14,r14,12
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);
  815b8c:	2009d33a 	srai	r4,r4,12

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  815b90:	dbc0c815 	stw	r15,800(sp)
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);
  815b94:	da00b615 	stw	r8,728(sp)
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);
  815b98:	da80bb15 	stw	r10,748(sp)
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);
  815b9c:	dac0c215 	stw	r11,776(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);
  815ba0:	db00c915 	stw	r12,804(sp)

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  815ba4:	dbc0ab17 	ldw	r15,684(sp)

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  815ba8:	da00ae17 	ldw	r8,696(sp)

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  815bac:	da80b117 	ldw	r10,708(sp)

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815bb0:	dac0b517 	ldw	r11,724(sp)

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  815bb4:	db00ba17 	ldw	r12,744(sp)

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  815bb8:	db80cf15 	stw	r14,828(sp)

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  815bbc:	db80c117 	ldw	r14,772(sp)
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);
  815bc0:	d880ac15 	stw	r2,688(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);
  815bc4:	d8c0af15 	stw	r3,700(sp)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);
  815bc8:	d900b215 	stw	r4,712(sp)

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  815bcc:	0083fb04 	movi	r2,4076

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  815bd0:	00c06444 	movi	r3,401

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  815bd4:	01031784 	movi	r4,3166

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815bd8:	04828984 	movi	r18,2598

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  815bdc:	0703d3c4 	movi	fp,3919

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  815be0:	789f383a 	mul	r15,r15,r2

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  815be4:	40d1383a 	mul	r8,r8,r3

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  815be8:	5115383a 	mul	r10,r10,r4

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815bec:	5c97383a 	mul	r11,r11,r18

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  815bf0:	6719383a 	mul	r12,r12,fp
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);
  815bf4:	681bd33a 	srai	r13,r13,12

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  815bf8:	73812964 	muli	r14,r14,1189

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  815bfc:	dbc05615 	stw	r15,344(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);
  815c00:	db40d015 	stw	r13,832(sp)

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  815c04:	da005515 	stw	r8,340(sp)

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  815c08:	da805415 	stw	r10,336(sp)

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  815c0c:	dac05315 	stw	r11,332(sp)

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  815c10:	db005215 	stw	r12,328(sp)

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  815c14:	db805115 	stw	r14,324(sp)
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);
  815c18:	da80ac17 	ldw	r10,688(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);
  815c1c:	dac0af17 	ldw	r11,700(sp)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);
  815c20:	db00b217 	ldw	r12,712(sp)

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  815c24:	dbc0c817 	ldw	r15,800(sp)
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);
  815c28:	5085383a 	mul	r2,r10,r2
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);
  815c2c:	58c7383a 	mul	r3,r11,r3
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);
  815c30:	6109383a 	mul	r4,r12,r4

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  815c34:	da00cf17 	ldw	r8,828(sp)
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  t50  = MUL(t0  - t1,  costab2);
  815c38:	d8805f15 	stw	r2,380(sp)
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  t51  = MUL(t2  - t3,  costab30);
  815c3c:	d8c05e15 	stw	r3,376(sp)
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  t52  = MUL(t4  - t5,  costab14);
  815c40:	d9005d15 	stw	r4,372(sp)
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);
  815c44:	d880c217 	ldw	r2,776(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);
  815c48:	d900d017 	ldw	r4,832(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);
  815c4c:	d8c0c917 	ldw	r3,804(sp)

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  815c50:	0341e284 	movi	r13,1930

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  815c54:	7bc38724 	muli	r15,r15,3612
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);
  815c58:	db80b617 	ldw	r14,728(sp)

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  815c5c:	4351383a 	mul	r8,r8,r13

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  815c60:	dbc05015 	stw	r15,320(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);
  815c64:	235b383a 	mul	r13,r4,r13
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);
  815c68:	dbc0bb17 	ldw	r15,748(sp)
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);
  815c6c:	10812964 	muli	r2,r2,1189
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);
  815c70:	18c38724 	muli	r3,r3,3612

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  815c74:	da004f15 	stw	r8,316(sp)
  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  815c78:	da805517 	ldw	r10,340(sp)
  815c7c:	da005617 	ldw	r8,344(sp)
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);
  815c80:	74a5383a 	mul	r18,r14,r18
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815c84:	db005317 	ldw	r12,332(sp)
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815c88:	db805117 	ldw	r14,324(sp)
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);
  815c8c:	7f39383a 	mul	fp,r15,fp
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  t55  = MUL(t10 - t11, costab26);
  815c90:	d8805a15 	stw	r2,360(sp)
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  t56  = MUL(t12 - t13, costab10);
  815c94:	d8c05915 	stw	r3,356(sp)
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815c98:	d8804f17 	ldw	r2,316(sp)
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);
  815c9c:	db405815 	stw	r13,352(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815ca0:	dac05417 	ldw	r11,336(sp)
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815ca4:	db405217 	ldw	r13,328(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815ca8:	dbc05017 	ldw	r15,320(sp)
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  815cac:	d8c07e17 	ldw	r3,504(sp)
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  t53  = MUL(t6  - t7,  costab18);
  815cb0:	dc805c15 	stw	r18,368(sp)
  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  815cb4:	42a5c83a 	sub	r18,r8,r10
  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  815cb8:	da808d17 	ldw	r10,564(sp)
  815cbc:	da008e17 	ldw	r8,568(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815cc0:	5b17c83a 	sub	r11,r11,r12
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815cc4:	6b9bc83a 	sub	r13,r13,r14
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815cc8:	789fc83a 	sub	r15,r15,r2
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  815ccc:	1c07883a 	add	r3,r3,r16
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  t54  = MUL(t8  - t9,  costab6);
  815cd0:	df005b15 	stw	fp,364(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815cd4:	dac0db15 	stw	r11,876(sp)
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815cd8:	db40dd15 	stw	r13,884(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815cdc:	dbc0df15 	stw	r15,892(sp)
# endif

  t0   = in[0]  + in[31];  t16  = MUL(in[0]  - in[31], costab1);
  t1   = in[15] + in[16];  t17  = MUL(in[15] - in[16], costab31);

  t41  = t16 + t17;
  815ce0:	d8c06715 	stw	r3,412(sp)
  t59  = MUL(t16 - t17, costab2);
  t33  = t0  + t1;
  815ce4:	4291883a 	add	r8,r8,r10
  815ce8:	da006f15 	stw	r8,444(sp)
  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  815cec:	db408b17 	ldw	r13,556(sp)
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  815cf0:	dbc07a17 	ldw	r15,488(sp)
  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  815cf4:	db008c17 	ldw	r12,560(sp)
  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  815cf8:	d8c08917 	ldw	r3,548(sp)
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  815cfc:	abdd883a 	add	r14,r21,r15
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  815d00:	da007817 	ldw	r8,480(sp)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  815d04:	dac08717 	ldw	r11,540(sp)
  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  815d08:	6359883a 	add	r12,r12,r13
  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  815d0c:	d8808a17 	ldw	r2,552(sp)
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  815d10:	d9007917 	ldw	r4,484(sp)
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  815d14:	da808817 	ldw	r10,544(sp)
  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  t60  = MUL(t18 - t19, costab30);
  t34  = t2  + t3;
  815d18:	db006e15 	stw	r12,440(sp)
  t51  = MUL(t2  - t3,  costab30);

  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  815d1c:	db806515 	stw	r14,404(sp)
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  815d20:	db007717 	ldw	r12,476(sp)
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  815d24:	db808517 	ldw	r14,532(sp)
  815d28:	db408617 	ldw	r13,536(sp)
  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  815d2c:	10c5883a 	add	r2,r2,r3
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  815d30:	2209883a 	add	r4,r4,r8
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  815d34:	52d5883a 	add	r10,r10,r11
  t4   = in[3]  + in[28];  t20  = MUL(in[3]  - in[28], costab7);
  t5   = in[12] + in[19];  t21  = MUL(in[12] - in[19], costab25);

  t43  = t20 + t21;
  t61  = MUL(t20 - t21, costab14);
  t35  = t4  + t5;
  815d38:	d8806d15 	stw	r2,436(sp)
  t52  = MUL(t4  - t5,  costab14);

  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  815d3c:	d9006415 	stw	r4,400(sp)
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  815d40:	d8807517 	ldw	r2,468(sp)
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  815d44:	d9008317 	ldw	r4,524(sp)
  t6   = in[4]  + in[27];  t22  = MUL(in[4]  - in[27], costab9);
  t7   = in[11] + in[20];  t23  = MUL(in[11] - in[20], costab23);

  t44  = t22 + t23;
  t62  = MUL(t22 - t23, costab18);
  t36  = t6  + t7;
  815d48:	da806c15 	stw	r10,432(sp)
  t53  = MUL(t6  - t7,  costab18);

  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  815d4c:	4b13883a 	add	r9,r9,r12
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  815d50:	da807317 	ldw	r10,460(sp)
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  815d54:	db008117 	ldw	r12,516(sp)
  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  815d58:	6b9b883a 	add	r13,r13,r14
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  815d5c:	dbc07617 	ldw	r15,472(sp)
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  815d60:	d8c08417 	ldw	r3,528(sp)
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  815d64:	da007417 	ldw	r8,464(sp)
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  815d68:	dac08217 	ldw	r11,520(sp)
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  815d6c:	db807117 	ldw	r14,452(sp)
  t8   = in[1]  + in[30];  t24  = MUL(in[1]  - in[30], costab3);
  t9   = in[14] + in[17];  t25  = MUL(in[14] - in[17], costab29);

  t45  = t24 + t25;
  t63  = MUL(t24 - t25, costab6);
  t37  = t8  + t9;
  815d70:	db406b15 	stw	r13,428(sp)
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  815d74:	db407217 	ldw	r13,456(sp)
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  815d78:	a463883a 	add	r17,r20,r17
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  815d7c:	789f883a 	add	r15,r15,r2
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  815d80:	1907883a 	add	r3,r3,r4
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  815d84:	4291883a 	add	r8,r8,r10
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  815d88:	5b17883a 	add	r11,r11,r12
  t50  = MUL(t0  - t1,  costab2);

  t2   = in[7]  + in[24];  t18  = MUL(in[7]  - in[24], costab15);
  t3   = in[8]  + in[23];  t19  = MUL(in[8]  - in[23], costab17);

  t42  = t18 + t19;
  815d8c:	dc406615 	stw	r17,408(sp)
  t54  = MUL(t8  - t9,  costab6);

  t10  = in[6]  + in[25];  t26  = MUL(in[6]  - in[25], costab13);
  t11  = in[9]  + in[22];  t27  = MUL(in[9]  - in[22], costab19);

  t46  = t26 + t27;
  815d90:	dbc06315 	stw	r15,396(sp)
  t64  = MUL(t26 - t27, costab26);
  t38  = t10 + t11;
  815d94:	d8c06a15 	stw	r3,424(sp)
  t55  = MUL(t10 - t11, costab26);

  t12  = in[2]  + in[29];  t28  = MUL(in[2]  - in[29], costab5);
  t13  = in[13] + in[18];  t29  = MUL(in[13] - in[18], costab27);

  t47  = t28 + t29;
  815d98:	da006215 	stw	r8,392(sp)
  t65  = MUL(t28 - t29, costab10);
  t39  = t12 + t13;
  815d9c:	dac06915 	stw	r11,420(sp)
  t56  = MUL(t12 - t13, costab10);

  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  815da0:	6b9b883a 	add	r13,r13,r14
  815da4:	db406115 	stw	r13,388(sp)
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  815da8:	d8807f17 	ldw	r2,508(sp)
  815dac:	dbc08017 	ldw	r15,512(sp)
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815db0:	d8c06f17 	ldw	r3,444(sp)
  815db4:	d9006e17 	ldw	r4,440(sp)
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815db8:	da006d17 	ldw	r8,436(sp)
  815dbc:	da806c17 	ldw	r10,432(sp)
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815dc0:	db406917 	ldw	r13,420(sp)
  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  815dc4:	789f883a 	add	r15,r15,r2
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815dc8:	dac06b17 	ldw	r11,428(sp)
  815dcc:	db006a17 	ldw	r12,424(sp)
  t14  = in[5]  + in[26];  t30  = MUL(in[5]  - in[26], costab11);
  t15  = in[10] + in[21];  t31  = MUL(in[10] - in[21], costab21);

  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  815dd0:	dbc06815 	stw	r15,416(sp)
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815dd4:	1905c83a 	sub	r2,r3,r4
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815dd8:	4287c83a 	sub	r3,r8,r10
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  815ddc:	da806417 	ldw	r10,400(sp)
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815de0:	6bd1c83a 	sub	r8,r13,r15
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  815de4:	dbc06517 	ldw	r15,404(sp)

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  815de8:	db806717 	ldw	r14,412(sp)
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815dec:	5b09c83a 	sub	r4,r11,r12
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  815df0:	db006317 	ldw	r12,396(sp)
  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  815df4:	7a97c83a 	sub	r11,r15,r10
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);
  815df8:	dbc06217 	ldw	r15,392(sp)
  815dfc:	da806117 	ldw	r10,388(sp)

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  815e00:	7463c83a 	sub	r17,r14,r17
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  815e04:	4b1dc83a 	sub	r14,r9,r12
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);
  815e08:	7a9bc83a 	sub	r13,r15,r10

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  815e0c:	db005f17 	ldw	r12,380(sp)
  815e10:	dbc05e17 	ldw	r15,376(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815e14:	da805d17 	ldw	r10,372(sp)
  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815e18:	1005d33a 	srai	r2,r2,12
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  815e1c:	63f9c83a 	sub	fp,r12,r15
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815e20:	db005c17 	ldw	r12,368(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815e24:	dbc05b17 	ldw	r15,364(sp)
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815e28:	1807d33a 	srai	r3,r3,12
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815e2c:	5315c83a 	sub	r10,r10,r12
  815e30:	da80d515 	stw	r10,852(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815e34:	da805a17 	ldw	r10,360(sp)
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815e38:	db005917 	ldw	r12,356(sp)
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815e3c:	2009d33a 	srai	r4,r4,12
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815e40:	7a9fc83a 	sub	r15,r15,r10
  815e44:	dbc0d715 	stw	r15,860(sp)
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815e48:	dbc05817 	ldw	r15,352(sp)

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815e4c:	da80db17 	ldw	r10,876(sp)
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815e50:	4011d33a 	srai	r8,r8,12
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815e54:	63d9c83a 	sub	r12,r12,r15
  815e58:	db00d915 	stw	r12,868(sp)

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815e5c:	dbc0df17 	ldw	r15,892(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815e60:	db00dd17 	ldw	r12,884(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815e64:	5015d33a 	srai	r10,r10,12
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815e68:	781fd33a 	srai	r15,r15,12
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815e6c:	6019d33a 	srai	r12,r12,12
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815e70:	da80dc15 	stw	r10,880(sp)
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815e74:	dbc0e015 	stw	r15,896(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815e78:	db00de15 	stw	r12,888(sp)
  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815e7c:	d880d115 	stw	r2,836(sp)
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815e80:	d8c0d215 	stw	r3,840(sp)
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815e84:	d900d315 	stw	r4,844(sp)
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815e88:	d8c0d717 	ldw	r3,860(sp)
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815e8c:	d900d917 	ldw	r4,868(sp)
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815e90:	d880d517 	ldw	r2,852(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815e94:	1807d33a 	srai	r3,r3,12
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815e98:	2009d33a 	srai	r4,r4,12
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815e9c:	1005d33a 	srai	r2,r2,12
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815ea0:	d8c0d815 	stw	r3,864(sp)
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815ea4:	d900da15 	stw	r4,872(sp)
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815ea8:	00c0c7c4 	movi	r3,799
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815eac:	01035344 	movi	r4,3405
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815eb0:	da00d415 	stw	r8,848(sp)
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  815eb4:	701dd33a 	srai	r14,r14,12
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815eb8:	50d1383a 	mul	r8,r10,r3
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815ebc:	6115383a 	mul	r10,r12,r4
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815ec0:	7b0238e4 	muli	r12,r15,2275
  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815ec4:	dbc0d117 	ldw	r15,836(sp)
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815ec8:	d880d615 	stw	r2,856(sp)
  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815ecc:	0083ec44 	movi	r2,4017
  815ed0:	789f383a 	mul	r15,r15,r2
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  815ed4:	711d383a 	mul	r14,r14,r4
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815ed8:	da002f15 	stw	r8,188(sp)
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815edc:	da802e15 	stw	r10,184(sp)
  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815ee0:	dbc03b15 	stw	r15,236(sp)
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815ee4:	da00d217 	ldw	r8,840(sp)
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815ee8:	dbc0d817 	ldw	r15,864(sp)
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815eec:	da80d317 	ldw	r10,844(sp)
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  815ef0:	db803615 	stw	r14,216(sp)
  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  815ef4:	5817d33a 	srai	r11,r11,12
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815ef8:	db80d617 	ldw	r14,856(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  815efc:	9025d33a 	srai	r18,r18,12

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  815f00:	8823d33a 	srai	r17,r17,12
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  815f04:	e039d33a 	srai	fp,fp,12
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815f08:	40d1383a 	mul	r8,r8,r3
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815f0c:	5115383a 	mul	r10,r10,r4
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  815f10:	58d7383a 	mul	r11,r11,r3
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815f14:	7909383a 	mul	r4,r15,r4
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815f18:	70c7383a 	mul	r3,r14,r3
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  815f1c:	90a5383a 	mul	r18,r18,r2
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815f20:	db002d15 	stw	r12,180(sp)

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  815f24:	88a3383a 	mul	r17,r17,r2
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815f28:	db00d417 	ldw	r12,848(sp)
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  815f2c:	e0b9383a 	mul	fp,fp,r2
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815f30:	d880da17 	ldw	r2,872(sp)
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  815f34:	d8c03315 	stw	r3,204(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  815f38:	d9003215 	stw	r4,200(sp)
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  815f3c:	d8c05617 	ldw	r3,344(sp)
  815f40:	d9005517 	ldw	r4,340(sp)
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815f44:	da003a15 	stw	r8,232(sp)
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815f48:	da803915 	stw	r10,228(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815f4c:	da005417 	ldw	r8,336(sp)
  815f50:	da805317 	ldw	r10,332(sp)
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815f54:	630238e4 	muli	r12,r12,2275
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815f58:	108238e4 	muli	r2,r2,2275

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  815f5c:	1907883a 	add	r3,r3,r4
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815f60:	4291883a 	add	r8,r8,r10
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815f64:	db003815 	stw	r12,224(sp)
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  815f68:	dac03715 	stw	r11,220(sp)
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  815f6c:	df003415 	stw	fp,208(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  815f70:	d8803115 	stw	r2,196(sp)

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  815f74:	d8c04015 	stw	r3,256(sp)
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  815f78:	da003f15 	stw	r8,252(sp)
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815f7c:	db005117 	ldw	r12,324(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815f80:	dbc04f17 	ldw	r15,316(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815f84:	dac05217 	ldw	r11,328(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815f88:	db805017 	ldw	r14,320(sp)

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  815f8c:	1a05c83a 	sub	r2,r3,r8
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815f90:	5b17883a 	add	r11,r11,r12
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815f94:	73dd883a 	add	r14,r14,r15
  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815f98:	db006e17 	ldw	r12,440(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  815f9c:	dac03e15 	stw	r11,248(sp)
  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  815fa0:	5b87c83a 	sub	r3,r11,r14
  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815fa4:	dac06f17 	ldw	r11,444(sp)
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  815fa8:	da802d17 	ldw	r10,180(sp)
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  815fac:	d9002f17 	ldw	r4,188(sp)
  t172 = MUL(t108 - t109, costab24);
  815fb0:	da002e17 	ldw	r8,184(sp)
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815fb4:	dbc06c17 	ldw	r15,432(sp)
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);

  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);
  815fb8:	db803d15 	stw	r14,244(sp)
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815fbc:	db806d17 	ldw	r14,436(sp)
  t48  = t30 + t31;
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  815fc0:	5b17883a 	add	r11,r11,r12
  815fc4:	dac04d15 	stw	r11,308(sp)
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  815fc8:	9109c83a 	sub	r4,r18,r4
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815fcc:	dac06817 	ldw	r11,416(sp)
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  815fd0:	4291c83a 	sub	r8,r8,r10
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815fd4:	da806917 	ldw	r10,420(sp)
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  815fd8:	d9012d15 	stw	r4,1204(sp)
  t172 = MUL(t108 - t109, costab24);
  815fdc:	da012f15 	stw	r8,1212(sp)
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815fe0:	73dd883a 	add	r14,r14,r15
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  815fe4:	da006a17 	ldw	r8,424(sp)
  815fe8:	d9006b17 	ldw	r4,428(sp)
  t66  = MUL(t30 - t31, costab22);
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  815fec:	db804c15 	stw	r14,304(sp)
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  815ff0:	db006717 	ldw	r12,412(sp)
  815ff4:	db806617 	ldw	r14,408(sp)
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  815ff8:	52d5883a 	add	r10,r10,r11
  815ffc:	da804a15 	stw	r10,296(sp)
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);
  816000:	dac06117 	ldw	r11,388(sp)
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  816004:	2209883a 	add	r4,r4,r8
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);
  816008:	da806217 	ldw	r10,392(sp)
  t40  = t14 + t15;
  t57  = MUL(t14 - t15, costab22);

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  81600c:	d9004b15 	stw	r4,300(sp)
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  816010:	6399883a 	add	r12,r12,r14
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  816014:	d9006417 	ldw	r4,400(sp)
  816018:	dbc06517 	ldw	r15,404(sp)

  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  81601c:	db004915 	stw	r12,292(sp)

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  816020:	db804c17 	ldw	r14,304(sp)
  816024:	db004d17 	ldw	r12,308(sp)
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);
  816028:	52d5883a 	add	r10,r10,r11
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  81602c:	da006317 	ldw	r8,396(sp)
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);
  816030:	da804715 	stw	r10,284(sp)
  t69  = t33 + t34;  t89  = MUL(t33 - t34, costab4);
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  816034:	791f883a 	add	r15,r15,r4
  816038:	dbc04815 	stw	r15,288(sp)

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  81603c:	6389c83a 	sub	r4,r12,r14
  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  816040:	db004717 	ldw	r12,284(sp)

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  816044:	da804917 	ldw	r10,292(sp)
  816048:	dac04817 	ldw	r11,288(sp)
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);
  81604c:	681bd33a 	srai	r13,r13,12
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  816050:	dbc04b17 	ldw	r15,300(sp)
  t70  = t35 + t36;  t90  = MUL(t35 - t36, costab28);
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  816054:	4a13883a 	add	r9,r9,r8
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  816058:	da004a17 	ldw	r8,296(sp)
  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  81605c:	4b19c83a 	sub	r12,r9,r12
  816060:	db00fc15 	stw	r12,1008(sp)

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  816064:	52f9c83a 	sub	fp,r10,r11
  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  816068:	db003617 	ldw	r12,216(sp)

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  81606c:	dac03717 	ldw	r11,220(sp)
  t71  = t37 + t38;  t91  = MUL(t37 - t38, costab12);
  t72  = t39 + t40;  t92  = MUL(t39 - t40, costab20);
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);
  816070:	6b4238e4 	muli	r13,r13,2275
  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  816074:	da803817 	ldw	r10,224(sp)
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  816078:	7a2fc83a 	sub	r23,r15,r8

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  81607c:	db803b17 	ldw	r14,236(sp)
  816080:	dbc03a17 	ldw	r15,232(sp)
  t158 = MUL(t91 - t92, costab24);
  816084:	da003917 	ldw	r8,228(sp)

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  816088:	8ad7c83a 	sub	r11,r17,r11
  t162 = MUL(t96 - t97, costab24);
  81608c:	6359c83a 	sub	r12,r12,r13

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  816090:	73ddc83a 	sub	r14,r14,r15
  t158 = MUL(t91 - t92, costab24);
  816094:	4291c83a 	sub	r8,r8,r10

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  816098:	dac10f15 	stw	r11,1084(sp)
  t162 = MUL(t96 - t97, costab24);
  81609c:	db011115 	stw	r12,1092(sp)
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  8160a0:	dac12d17 	ldw	r11,1204(sp)
  t172 = MUL(t108 - t109, costab24);
  8160a4:	db012f17 	ldw	r12,1212(sp)

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  8160a8:	dbc03317 	ldw	r15,204(sp)
  t167 = MUL(t102 - t103, costab24);
  8160ac:	da803117 	ldw	r10,196(sp)

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  8160b0:	db810615 	stw	r14,1048(sp)
  t158 = MUL(t91 - t92, costab24);
  8160b4:	da010815 	stw	r8,1056(sp)

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  8160b8:	db803417 	ldw	r14,208(sp)
  t167 = MUL(t102 - t103, costab24);
  8160bc:	da003217 	ldw	r8,200(sp)

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  8160c0:	1005d33a 	srai	r2,r2,12
  t153 = MUL(t85 - t86, costab24);
  8160c4:	1807d33a 	srai	r3,r3,12
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  8160c8:	5817d33a 	srai	r11,r11,12
  t172 = MUL(t108 - t109, costab24);
  8160cc:	6019d33a 	srai	r12,r12,12

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  8160d0:	73ddc83a 	sub	r14,r14,r15
  t167 = MUL(t102 - t103, costab24);
  8160d4:	4291c83a 	sub	r8,r8,r10
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  8160d8:	dbc05e17 	ldw	r15,376(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  8160dc:	da805a17 	ldw	r10,360(sp)

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  8160e0:	db811515 	stw	r14,1108(sp)
  t167 = MUL(t102 - t103, costab24);
  8160e4:	da011715 	stw	r8,1116(sp)

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  8160e8:	d8810315 	stw	r2,1036(sp)
  t153 = MUL(t85 - t86, costab24);
  8160ec:	d8c10415 	stw	r3,1040(sp)
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  8160f0:	db805f17 	ldw	r14,380(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  8160f4:	d8c05c17 	ldw	r3,368(sp)
  8160f8:	d8805d17 	ldw	r2,372(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  8160fc:	da005b17 	ldw	r8,364(sp)
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  816100:	dac12e15 	stw	r11,1208(sp)
  t172 = MUL(t108 - t109, costab24);
  816104:	db013015 	stw	r12,1216(sp)
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  816108:	dac05917 	ldw	r11,356(sp)
  81610c:	db005817 	ldw	r12,352(sp)
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  816110:	73dd883a 	add	r14,r14,r15
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  816114:	4291883a 	add	r8,r8,r10
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  816118:	10c5883a 	add	r2,r2,r3
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  81611c:	5b17883a 	add	r11,r11,r12
  t73  = t41 + t42;  t94  = MUL(t41 - t42, costab4);
  t74  = t43 + t44;  t95  = MUL(t43 - t44, costab28);
  t75  = t45 + t46;  t96  = MUL(t45 - t46, costab12);
  t76  = t47 + t48;  t97  = MUL(t47 - t48, costab20);

  t78  = t50 + t51;  t100 = MUL(t50 - t51, costab4);
  816120:	db804515 	stw	r14,276(sp)
  t79  = t52 + t53;  t101 = MUL(t52 - t53, costab28);
  816124:	d8804415 	stw	r2,272(sp)
  t80  = t54 + t55;  t102 = MUL(t54 - t55, costab12);
  816128:	da004315 	stw	r8,268(sp)
  t81  = t56 + t57;  t103 = MUL(t56 - t57, costab20);
  81612c:	dac04215 	stw	r11,264(sp)

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  816130:	dbc10617 	ldw	r15,1048(sp)

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  816134:	7085c83a 	sub	r2,r14,r2
  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  816138:	db80fc17 	ldw	r14,1008(sp)

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  81613c:	781fd33a 	srai	r15,r15,12
  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  816140:	42c7c83a 	sub	r3,r8,r11

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  816144:	da810f17 	ldw	r10,1084(sp)
  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  816148:	da010817 	ldw	r8,1056(sp)

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  81614c:	1005d33a 	srai	r2,r2,12

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  816150:	dbc10715 	stw	r15,1052(sp)

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  816154:	db011517 	ldw	r12,1108(sp)
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  816158:	dbc12e17 	ldw	r15,1208(sp)
  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  81615c:	701dd33a 	srai	r14,r14,12
  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  816160:	dac11117 	ldw	r11,1092(sp)

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  816164:	d880fe15 	stw	r2,1016(sp)
  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  816168:	4011d33a 	srai	r8,r8,12

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  81616c:	0083b204 	movi	r2,3784

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  816170:	5015d33a 	srai	r10,r10,12
  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  816174:	db80fd15 	stw	r14,1012(sp)
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  816178:	789f383a 	mul	r15,r15,r2
  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  81617c:	db811717 	ldw	r14,1116(sp)

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  816180:	6019d33a 	srai	r12,r12,12
  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  816184:	5817d33a 	srai	r11,r11,12
  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  816188:	1807d33a 	srai	r3,r3,12
  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  81618c:	da010915 	stw	r8,1060(sp)

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  816190:	da811015 	stw	r10,1088(sp)
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  816194:	da013017 	ldw	r8,1216(sp)

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  816198:	da810317 	ldw	r10,1036(sp)

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  81619c:	db011615 	stw	r12,1112(sp)
  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  8161a0:	dbc00315 	stw	r15,12(sp)

  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);

  t121 = t83  + t84;
  8161a4:	db004017 	ldw	r12,256(sp)
  8161a8:	dbc03f17 	ldw	r15,252(sp)
  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  8161ac:	701dd33a 	srai	r14,r14,12
  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  8161b0:	dac11215 	stw	r11,1096(sp)
  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  8161b4:	d8c0ff15 	stw	r3,1020(sp)
  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  8161b8:	dac10417 	ldw	r11,1040(sp)
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  8161bc:	00c187c4 	movi	r3,1567
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  8161c0:	40d1383a 	mul	r8,r8,r3

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  8161c4:	5095383a 	mul	r10,r10,r2

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  8161c8:	2009d33a 	srai	r4,r4,12
  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  8161cc:	db811815 	stw	r14,1120(sp)

  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);

  t121 = t83  + t84;
  8161d0:	63dd883a 	add	r14,r12,r15
  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);

  t136 = t106 + t107;
  t137 = t108 + t109;
  8161d4:	dbc02d17 	ldw	r15,180(sp)
  8161d8:	db002e17 	ldw	r12,184(sp)
  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  8161dc:	58d7383a 	mul	r11,r11,r3
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  8161e0:	b82fd33a 	srai	r23,r23,12
  /* 30 */ lo[14][slot] =
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  8161e4:	da000215 	stw	r8,8(sp)

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  8161e8:	da800f15 	stw	r10,60(sp)
  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);

  t121 = t83  + t84;
  t122 = t85  + t86;
  8161ec:	da003e17 	ldw	r8,248(sp)
  8161f0:	da803d17 	ldw	r10,244(sp)

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  8161f4:	2089383a 	mul	r4,r4,r2
  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);

  t136 = t106 + t107;
  t137 = t108 + t109;
  8161f8:	63d9883a 	add	r12,r12,r15
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  8161fc:	ddc0f415 	stw	r23,976(sp)
  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  816200:	dac00e15 	stw	r11,56(sp)
  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);

  t136 = t106 + t107;
  t137 = t108 + t109;
  816204:	db001a15 	stw	r12,104(sp)
  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);

  t121 = t83  + t84;
  t122 = t85  + t86;
  816208:	42af883a 	add	r23,r8,r10

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);

  t136 = t106 + t107;
  81620c:	dac02f17 	ldw	r11,188(sp)

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  816210:	d9001715 	stw	r4,92(sp)
  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  816214:	da00fd17 	ldw	r8,1012(sp)

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  816218:	db011017 	ldw	r12,1088(sp)
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  81621c:	d900f417 	ldw	r4,976(sp)
  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  816220:	40d1383a 	mul	r8,r8,r3

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  816224:	6099383a 	mul	r12,r12,r2

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);

  t136 = t106 + t107;
  816228:	92e5883a 	add	r18,r18,r11
  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  81622c:	da001315 	stw	r8,76(sp)
  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  816230:	da011817 	ldw	r8,1120(sp)

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  816234:	da810717 	ldw	r10,1052(sp)
  t158 = MUL(t91 - t92, costab24);
  816238:	dac10917 	ldw	r11,1060(sp)
  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  81623c:	40d1383a 	mul	r8,r8,r3
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  816240:	20c9383a 	mul	r4,r4,r3

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  816244:	db000815 	stw	r12,32(sp)
  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  816248:	da000415 	stw	r8,16(sp)

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));

  t115 = t73  + t74;
  t116 = t75  + t76;
  81624c:	db004717 	ldw	r12,284(sp)
  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);

  t128 = t94  + t95;
  t129 = t96  + t97;
  816250:	da003617 	ldw	r8,216(sp)

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  816254:	5095383a 	mul	r10,r10,r2
  t158 = MUL(t91 - t92, costab24);
  816258:	58d7383a 	mul	r11,r11,r3
  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  81625c:	dbc11217 	ldw	r15,1096(sp)

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  816260:	e039d33a 	srai	fp,fp,12

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));

  t115 = t73  + t74;
  t116 = t75  + t76;
  816264:	4b13883a 	add	r9,r9,r12
  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  816268:	d9001615 	stw	r4,88(sp)

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  81626c:	db00fe17 	ldw	r12,1016(sp)

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  816270:	d9011617 	ldw	r4,1112(sp)
  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);

  t128 = t94  + t95;
  t129 = t96  + t97;
  816274:	435b883a 	add	r13,r8,r13
  816278:	db402015 	stw	r13,128(sp)
  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  81627c:	db40ff17 	ldw	r13,1020(sp)

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  816280:	e0b9383a 	mul	fp,fp,r2

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  816284:	da800b15 	stw	r10,44(sp)
  t158 = MUL(t91 - t92, costab24);
  816288:	dac00a15 	stw	r11,40(sp)
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));

  t115 = t73  + t74;
  81628c:	da804917 	ldw	r10,292(sp)
  816290:	dac04817 	ldw	r11,288(sp)
  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  816294:	78df383a 	mul	r15,r15,r3

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  816298:	2089383a 	mul	r4,r4,r2

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  81629c:	6085383a 	mul	r2,r12,r2
  t149 = MUL(t80 - t81, costab24);
  8162a0:	68c7383a 	mul	r3,r13,r3

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  8162a4:	df001415 	stw	fp,80(sp)
  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  8162a8:	dbc00715 	stw	r15,28(sp)
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));

  t115 = t73  + t74;
  8162ac:	52f9883a 	add	fp,r10,r11

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);

  t128 = t94  + t95;
  8162b0:	dbc03717 	ldw	r15,220(sp)
  /*  6 */ hi[ 9][slot] = SHIFT(t82);

  t136 = t106 + t107;
  t137 = t108 + t109;

  t110 = t136 + t137;
  8162b4:	da801a17 	ldw	r10,104(sp)

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  8162b8:	d9000515 	stw	r4,20(sp)

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  8162bc:	d8801115 	stw	r2,68(sp)
  /*  2 */ hi[13][slot] = SHIFT(t58);

  t121 = t83  + t84;
  t122 = t85  + t86;

  t67  = t121 + t122;
  8162c0:	75c9883a 	add	r4,r14,r23
  /*  4 */ hi[11][slot] = SHIFT(t93);

  t128 = t94  + t95;
  t129 = t96  + t97;

  t98  = t128 + t129;
  8162c4:	d8802017 	ldw	r2,128(sp)

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;
  8162c8:	75efc83a 	sub	r23,r14,r23
  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  8162cc:	d8c01015 	stw	r3,64(sp)
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));

  t115 = t73  + t74;
  t116 = t75  + t76;

  t32  = t115 + t116;
  8162d0:	e25d883a 	add	r14,fp,r9

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;
  8162d4:	b82fd33a 	srai	r23,r23,12
  t121 = t83  + t84;
  t122 = t85  + t86;

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;
  8162d8:	2107883a 	add	r3,r4,r4
  /*  6 */ hi[ 9][slot] = SHIFT(t82);

  t136 = t106 + t107;
  t137 = t108 + t109;

  t110 = t136 + t137;
  8162dc:	9295883a 	add	r10,r18,r10
  t121 = t83  + t84;
  t122 = t85  + t86;

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;
  8162e0:	1b87c83a 	sub	r3,r3,r14

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);

  t128 = t94  + t95;
  8162e4:	8be3883a 	add	r17,r17,r15
  t129 = t96  + t97;

  t98  = t128 + t129;
  8162e8:	889f883a 	add	r15,r17,r2
  /*  6 */ hi[ 9][slot] = SHIFT(t82);

  t136 = t106 + t107;
  t137 = t108 + t109;

  t110 = t136 + t137;
  8162ec:	da802c15 	stw	r10,176(sp)
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));

  t115 = t73  + t74;
  t116 = t75  + t76;

  t32  = t115 + t116;
  8162f0:	db807015 	stw	r14,448(sp)
  t121 = t83  + t84;
  t122 = t85  + t86;

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;
  8162f4:	d8c06015 	stw	r3,384(sp)
  t136 = t106 + t107;
  t137 = t108 + t109;

  t110 = t136 + t137;

  t87  = (t110 * 2) - t67;
  8162f8:	5285883a 	add	r2,r10,r10

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;
  8162fc:	dac01a17 	ldw	r11,104(sp)
  t136 = t106 + t107;
  t137 = t108 + t109;

  t110 = t136 + t137;

  t87  = (t110 * 2) - t67;
  816300:	1105c83a 	sub	r2,r2,r4

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;
  816304:	d8c02017 	ldw	r3,128(sp)

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  816308:	e249c83a 	sub	r4,fp,r9

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;
  81630c:	ddc13215 	stw	r23,1224(sp)
  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  816310:	da404c17 	ldw	r9,304(sp)

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  816314:	db403317 	ldw	r13,204(sp)
  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  816318:	da004d17 	ldw	r8,308(sp)

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  81631c:	db003417 	ldw	r12,208(sp)
  t133 = t102 + t103;
  816320:	db803217 	ldw	r14,200(sp)
  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  816324:	4251883a 	add	r8,r8,r9

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  816328:	6359883a 	add	r12,r12,r13

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;
  81632c:	88e3c83a 	sub	r17,r17,r3
  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  t133 = t102 + t103;
  816330:	d8c03117 	ldw	r3,196(sp)
  t83  = t59 + t60;  t106 = MUL(t59 - t60, costab4);
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  816334:	da002a15 	stw	r8,168(sp)

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  816338:	db001d15 	stw	r12,116(sp)

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;
  81633c:	da400e17 	ldw	r9,56(sp)
  t128 = t94  + t95;
  t129 = t96  + t97;

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;
  816340:	db006017 	ldw	r12,384(sp)
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;
  816344:	da804b17 	ldw	r10,300(sp)

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;
  816348:	da000f17 	ldw	r8,60(sp)

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;
  81634c:	92e5c83a 	sub	r18,r18,r11
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;
  816350:	dac04a17 	ldw	r11,296(sp)
  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  t133 = t102 + t103;
  816354:	70dd883a 	add	r14,r14,r3
  t128 = t94  + t95;
  t129 = t96  + t97;

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;
  816358:	7bc7883a 	add	r3,r15,r15
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;
  81635c:	52d5883a 	add	r10,r10,r11

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;
  816360:	4251883a 	add	r8,r8,r9
  t128 = t94  + t95;
  t129 = t96  + t97;

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;
  816364:	1b07c83a 	sub	r3,r3,r12
  t84  = t61 + t62;  t107 = MUL(t61 - t62, costab28);
  t85  = t63 + t64;  t108 = MUL(t63 - t64, costab12);
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;
  816368:	da802915 	stw	r10,164(sp)
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;
  81636c:	dac00217 	ldw	r11,8(sp)

  /* 10 */ hi[ 5][slot] = SHIFT(t105);

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;
  816370:	da000d15 	stw	r8,52(sp)
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;
  816374:	da800317 	ldw	r10,12(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816378:	da001617 	ldw	r8,88(sp)
  t128 = t94  + t95;
  t129 = t96  + t97;

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;
  81637c:	d8c04e15 	stw	r3,312(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816380:	d8c01717 	ldw	r3,92(sp)
  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  t133 = t102 + t103;
  816384:	db801c15 	stw	r14,112(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  816388:	db402a17 	ldw	r13,168(sp)
  81638c:	db802917 	ldw	r14,164(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  816390:	db001c17 	ldw	r12,112(sp)
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;
  816394:	52d5883a 	add	r10,r10,r11
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816398:	1a07c83a 	sub	r3,r3,r8

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  81639c:	dac01d17 	ldw	r11,116(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8163a0:	6b9bc83a 	sub	r13,r13,r14
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8163a4:	d8c0f715 	stw	r3,988(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  8163a8:	db800517 	ldw	r14,20(sp)
  8163ac:	d8c00417 	ldw	r3,16(sp)
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  8163b0:	da400b17 	ldw	r9,44(sp)
	     SHIFT((((((MUL(t166 - t167, costab16) * 2) -
		       t168) * 2) - t169) * 2) - t170);

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;
  8163b4:	da800115 	stw	r10,4(sp)
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  8163b8:	da800a17 	ldw	r10,40(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  8163bc:	5b17c83a 	sub	r11,r11,r12

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8163c0:	db40e315 	stw	r13,908(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  8163c4:	dac11b15 	stw	r11,1132(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  8163c8:	70ddc83a 	sub	r14,r14,r3
  8163cc:	db812415 	stw	r14,1168(sp)
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  8163d0:	4a9bc83a 	sub	r13,r9,r10

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8163d4:	dac00217 	ldw	r11,8(sp)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  8163d8:	da400e17 	ldw	r9,56(sp)
  8163dc:	da000f17 	ldw	r8,60(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8163e0:	da800317 	ldw	r10,12(sp)

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  8163e4:	2009d33a 	srai	r4,r4,12

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  8163e8:	4251c83a 	sub	r8,r8,r9

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8163ec:	52d5c83a 	sub	r10,r10,r11

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  8163f0:	d9013415 	stw	r4,1232(sp)
  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  t119 = t80  + t81;
  8163f4:	d8c04317 	ldw	r3,268(sp)
  8163f8:	d9004217 	ldw	r4,264(sp)

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  8163fc:	db804417 	ldw	r14,272(sp)

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);

  t125 = t89  + t90;
  816400:	da403a17 	ldw	r9,232(sp)
  t126 = t91  + t92;
  816404:	dac03817 	ldw	r11,224(sp)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  816408:	da013e15 	stw	r8,1272(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  81640c:	da814c15 	stw	r10,1328(sp)

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  816410:	db004517 	ldw	r12,276(sp)

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);

  t125 = t89  + t90;
  816414:	da003b17 	ldw	r8,236(sp)
  t126 = t91  + t92;
  816418:	da803917 	ldw	r10,228(sp)
  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  t119 = t80  + t81;
  81641c:	1907883a 	add	r3,r3,r4
  816420:	d8c02615 	stw	r3,152(sp)
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;
  816424:	d9000717 	ldw	r4,28(sp)

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  816428:	6399883a 	add	r12,r12,r14

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);

  t125 = t89  + t90;
  81642c:	4251883a 	add	r8,r8,r9
  t126 = t91  + t92;
  816430:	52d5883a 	add	r10,r10,r11
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;
  816434:	d8c00817 	ldw	r3,32(sp)

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  816438:	db002715 	stw	r12,156(sp)

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);

  t125 = t89  + t90;
  81643c:	da002315 	stw	r8,140(sp)
  t126 = t91  + t92;
  816440:	da802215 	stw	r10,136(sp)
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;
  816444:	db801317 	ldw	r14,76(sp)

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;

  t111 = (t154 * 2) - t87;
  816448:	da000d17 	ldw	r8,52(sp)

  t110 = t136 + t137;

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;
  81644c:	da804e17 	ldw	r10,312(sp)
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;
  816450:	db001417 	ldw	r12,80(sp)
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;
  816454:	1907883a 	add	r3,r3,r4

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;

  t138 = (t173 * 2) - t110;
  816458:	da400117 	ldw	r9,4(sp)

  t110 = t136 + t137;

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;
  81645c:	1089883a 	add	r4,r2,r2
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;
  816460:	6399883a 	add	r12,r12,r14
  /* 28 */ lo[12][slot] =
	     SHIFT((((MUL(t157 - t158, costab16) * 2) - t159) * 2) - t160);

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;
  816464:	d8c00615 	stw	r3,24(sp)

  t110 = t136 + t137;

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;
  816468:	2289c83a 	sub	r4,r4,r10

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;

  t111 = (t154 * 2) - t87;
  81646c:	4207883a 	add	r3,r8,r8

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816470:	da801017 	ldw	r10,64(sp)
  816474:	da001117 	ldw	r8,68(sp)

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;

  t138 = (t173 * 2) - t110;
  816478:	dac02c17 	ldw	r11,176(sp)

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  81647c:	db802217 	ldw	r14,136(sp)
  /* 24 */ lo[ 8][slot] =
	     SHIFT((MUL(t141 - t142, costab16) * 2) - t143);

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;
  816480:	db001215 	stw	r12,72(sp)

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  816484:	db002317 	ldw	r12,140(sp)

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;

  t138 = (t173 * 2) - t110;
  816488:	4a53883a 	add	r9,r9,r9
  81648c:	da413115 	stw	r9,1220(sp)

  t110 = t136 + t137;

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;
  816490:	d9004615 	stw	r4,280(sp)

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816494:	4291c83a 	sub	r8,r8,r10

  t171 = MUL(t106 - t107, costab8);
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;

  t138 = (t173 * 2) - t110;
  816498:	4ae1c83a 	sub	r16,r9,r11

  t152 = MUL(t83 - t84, costab8);
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;

  t111 = (t154 * 2) - t87;
  81649c:	1887c83a 	sub	r3,r3,r2

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  8164a0:	d9002617 	ldw	r4,152(sp)
  8164a4:	d8802717 	ldw	r2,156(sp)

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  8164a8:	63b9c83a 	sub	fp,r12,r14

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  8164ac:	da011e15 	stw	r8,1144(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  8164b0:	db001317 	ldw	r12,76(sp)
  8164b4:	dac01417 	ldw	r11,80(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8164b8:	da00f717 	ldw	r8,988(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  8164bc:	da811b17 	ldw	r10,1132(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  8164c0:	5b17c83a 	sub	r11,r11,r12
  8164c4:	dac13815 	stw	r11,1248(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  8164c8:	dac12417 	ldw	r11,1168(sp)

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  8164cc:	1113c83a 	sub	r9,r2,r4
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8164d0:	4011d33a 	srai	r8,r8,12

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8164d4:	d900e317 	ldw	r4,908(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  8164d8:	5015d33a 	srai	r10,r10,12

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  8164dc:	d8800717 	ldw	r2,28(sp)
  8164e0:	db800817 	ldw	r14,32(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  8164e4:	5817d33a 	srai	r11,r11,12

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  8164e8:	db013e17 	ldw	r12,1272(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8164ec:	da00f815 	stw	r8,992(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  8164f0:	da811c15 	stw	r10,1136(sp)

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;

  t88  = (t146 * 2) - t77;
  8164f4:	da001217 	ldw	r8,72(sp)

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;
  8164f8:	da800617 	ldw	r10,24(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8164fc:	2009d33a 	srai	r4,r4,12

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816500:	709dc83a 	sub	r14,r14,r2
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816504:	dac12515 	stw	r11,1172(sp)

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;

  t88  = (t146 * 2) - t77;
  816508:	dac04617 	ldw	r11,280(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  81650c:	db814315 	stw	r14,1292(sp)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  816510:	6019d33a 	srai	r12,r12,12

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816514:	db814c17 	ldw	r14,1328(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  816518:	d900e415 	stw	r4,912(sp)

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;
  81651c:	5295883a 	add	r10,r10,r10

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;

  t88  = (t146 * 2) - t77;
  816520:	4209883a 	add	r4,r8,r8
  816524:	22c9c83a 	sub	r4,r4,r11

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;
  816528:	53dfc83a 	sub	r15,r10,r15

  t144 = MUL(t73 - t74, costab8);
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;

  t88  = (t146 * 2) - t77;
  81652c:	d9003c15 	stw	r4,240(sp)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  816530:	db013f15 	stw	r12,1276(sp)

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;
  816534:	dbc01f15 	stw	r15,124(sp)

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816538:	db011e17 	ldw	r12,1144(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  81653c:	dbc13817 	ldw	r15,1248(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816540:	d9014317 	ldw	r4,1292(sp)
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816544:	701dd33a 	srai	r14,r14,12
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816548:	0085a804 	movi	r2,5792

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  81654c:	4813d33a 	srai	r9,r9,12
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;
  816550:	da003c17 	ldw	r8,240(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816554:	db814d15 	stw	r14,1332(sp)

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  816558:	e039d33a 	srai	fp,fp,12

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;
  81655c:	b89d383a 	mul	r14,r23,r2

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816560:	6019d33a 	srai	r12,r12,12

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816564:	781fd33a 	srai	r15,r15,12

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816568:	2009d33a 	srai	r4,r4,12

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  81656c:	da411915 	stw	r9,1124(sp)
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;
  816570:	18d3883a 	add	r9,r3,r3

  t161 = MUL(t94 - t95, costab8);
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;
  816574:	da811315 	stw	r10,1100(sp)

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  816578:	df010d15 	stw	fp,1076(sp)

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  81657c:	db011f15 	stw	r12,1148(sp)

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;
  816580:	db813315 	stw	r14,1228(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816584:	dbc13915 	stw	r15,1252(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816588:	d9014415 	stw	r4,1296(sp)
  t153 = MUL(t85 - t86, costab24);
  t154 = t152 + t153;

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;
  81658c:	4a13c83a 	sub	r9,r9,r8
  816590:	da403515 	stw	r9,212(sp)

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  816594:	da413417 	ldw	r9,1232(sp)
  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  t133 = t102 + t103;

  t104 = t132 + t133;
  816598:	da801d17 	ldw	r10,116(sp)
  81659c:	dac01c17 	ldw	r11,112(sp)

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  8165a0:	4893383a 	mul	r9,r9,r2

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  t168 = t166 + t167;
  8165a4:	db000517 	ldw	r12,20(sp)
  /*  5 */ hi[10][slot] = SHIFT(t68);

  t132 = t100 + t101;
  t133 = t102 + t103;

  t104 = t132 + t133;
  8165a8:	52f9883a 	add	fp,r10,r11

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8165ac:	da80e417 	ldw	r10,912(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8165b0:	dac0f817 	ldw	r11,992(sp)

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  t168 = t166 + t167;
  8165b4:	db800417 	ldw	r14,16(sp)

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  8165b8:	da413515 	stw	r9,1236(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8165bc:	da414d17 	ldw	r9,1332(sp)
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;
  8165c0:	dbc01f17 	ldw	r15,124(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8165c4:	5897383a 	mul	r11,r11,r2

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8165c8:	5282d424 	muli	r10,r10,2896

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  t168 = t166 + t167;
  8165cc:	63ab883a 	add	r21,r12,r14
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;
  8165d0:	da003517 	ldw	r8,212(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8165d4:	4893383a 	mul	r9,r9,r2

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  8165d8:	db011c17 	ldw	r12,1136(sp)
  t172 = MUL(t108 - t109, costab24);
  t173 = t171 + t172;

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;
  8165dc:	8409883a 	add	r4,r16,r16
  8165e0:	20c9c83a 	sub	r4,r4,r3
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  8165e4:	db812517 	ldw	r14,1172(sp)
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;
  8165e8:	7bc7883a 	add	r3,r15,r15

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  8165ec:	dbc13f17 	ldw	r15,1276(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8165f0:	da80e515 	stw	r10,916(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8165f4:	dac0f915 	stw	r11,996(sp)

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;
  8165f8:	da801117 	ldw	r10,68(sp)
  8165fc:	dac01017 	ldw	r11,64(sp)
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;
  816600:	1a07c83a 	sub	r3,r3,r8

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816604:	da414e15 	stw	r9,1336(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  816608:	6099383a 	mul	r12,r12,r2
  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;
  81660c:	da402617 	ldw	r9,152(sp)
  816610:	da002717 	ldw	r8,156(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816614:	709d383a 	mul	r14,r14,r2

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  816618:	789f383a 	mul	r15,r15,r2

  /*  9 */ hi[ 6][slot] = SHIFT(t88);

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;
  81661c:	52e7883a 	add	r19,r10,r11

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  816620:	da810d17 	ldw	r10,1076(sp)
  t162 = MUL(t96 - t97, costab24);
  t163 = t161 + t162;

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;
  816624:	d8c02b15 	stw	r3,172(sp)
  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;
  816628:	4251883a 	add	r8,r8,r9

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  81662c:	db011d15 	stw	r12,1140(sp)

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  816630:	dac11917 	ldw	r11,1124(sp)
  t132 = t100 + t101;
  t133 = t102 + t103;

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;
  816634:	e719883a 	add	r12,fp,fp
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816638:	db812615 	stw	r14,1176(sp)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  81663c:	dbc14015 	stw	r15,1280(sp)
  t132 = t100 + t101;
  t133 = t102 + t103;

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;
  816640:	621dc83a 	sub	r14,r12,r8

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;

  t117 = (t123 * 2) - t112;
  816644:	dbc02b17 	ldw	r15,172(sp)
  /*  1 */ hi[14][slot] = SHIFT(t32);

  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;
  816648:	da005715 	stw	r8,348(sp)

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;
  81664c:	da013317 	ldw	r8,1228(sp)

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  816650:	5095383a 	mul	r10,r10,r2

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  816654:	5897383a 	mul	r11,r11,r2

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;

  t117 = (t123 * 2) - t112;
  816658:	212d883a 	add	r22,r4,r4
  81665c:	b3edc83a 	sub	r22,r22,r15

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;
  816660:	4109c83a 	sub	r4,r8,r4
  t132 = t100 + t101;
  t133 = t102 + t103;

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;
  816664:	db804115 	stw	r14,260(sp)

  t138 = (t173 * 2) - t110;

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;
  816668:	d9001915 	stw	r4,100(sp)

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  81666c:	da810e15 	stw	r10,1080(sp)

  t123 = (t138 * 2) - t111;

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;

  t117 = (t123 * 2) - t112;
  816670:	dd802815 	stw	r22,160(sp)

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  816674:	dac11a15 	stw	r11,1128(sp)

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;
  816678:	9025d33a 	srai	r18,r18,12

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  81667c:	dbc14417 	ldw	r15,1296(sp)

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816680:	db011f17 	ldw	r12,1148(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816684:	db813917 	ldw	r14,1252(sp)

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;
  816688:	8823d33a 	srai	r17,r17,12
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  81668c:	681bd33a 	srai	r13,r13,12

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816690:	6099383a 	mul	r12,r12,r2

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816694:	709d383a 	mul	r14,r14,r2

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;
  816698:	90a5383a 	mul	r18,r18,r2

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;
  81669c:	88a3383a 	mul	r17,r17,r2
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  8166a0:	689b383a 	mul	r13,r13,r2

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  8166a4:	7885383a 	mul	r2,r15,r2

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;
  8166a8:	d9000a17 	ldw	r4,40(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8166ac:	da002a17 	ldw	r8,168(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  8166b0:	d8814515 	stw	r2,1300(sp)

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;
  8166b4:	dac04117 	ldw	r11,260(sp)

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;
  8166b8:	d8800b17 	ldw	r2,44(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8166bc:	00c20004 	movi	r3,2048
  8166c0:	dbc02917 	ldw	r15,164(sp)

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;
  8166c4:	9cd5883a 	add	r10,r19,r19

  t166 = MUL(t100 - t101, costab8);
  t167 = MUL(t102 - t103, costab24);
  t168 = t166 + t167;

  t134 = (t168 * 2) - t104;
  8166c8:	ad53883a 	add	r9,r21,r21
  8166cc:	4f13c83a 	sub	r9,r9,fp

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;
  8166d0:	52d7c83a 	sub	r11,r10,r11

  /* 11 */ hi[ 4][slot] = SHIFT(t99);

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;
  8166d4:	1139883a 	add	fp,r2,r4

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;
  8166d8:	da801617 	ldw	r10,88(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8166dc:	40c9883a 	add	r4,r8,r3

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;
  8166e0:	da001717 	ldw	r8,92(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  8166e4:	db813a15 	stw	r14,1256(sp)

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  8166e8:	db813517 	ldw	r14,1236(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8166ec:	7909883a 	add	r4,r15,r4

  t148 = MUL(t78 - t79, costab8);
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;
  8166f0:	dac03015 	stw	r11,192(sp)
  /*  3 */ hi[12][slot] = SHIFT(t49);

  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;
  8166f4:	d8802317 	ldw	r2,140(sp)

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  8166f8:	db012015 	stw	r12,1152(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8166fc:	d900e115 	stw	r4,900(sp)

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;
  816700:	db001f17 	ldw	r12,124(sp)
  /*  3 */ hi[12][slot] = SHIFT(t49);

  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;
  816704:	d9002217 	ldw	r4,136(sp)

  /*  7 */ hi[ 8][slot] = SHIFT(t77);

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;
  816708:	4291883a 	add	r8,r8,r10
  81670c:	da001515 	stw	r8,84(sp)

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  816710:	759dc83a 	sub	r14,r14,r22
  t167 = MUL(t102 - t103, costab24);
  t168 = t166 + t167;

  t134 = (t168 * 2) - t104;

  t120 = (t134 * 2) - t105;
  816714:	da003017 	ldw	r8,192(sp)

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;
  816718:	db802415 	stw	r14,144(sp)

  /* 17 */ lo[ 1][slot] = SHIFT(t124);

  t131 = (t139 * 2) - t124;
  81671c:	db801917 	ldw	r14,100(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  816720:	da811d17 	ldw	r10,1140(sp)

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;
  816724:	9425c83a 	sub	r18,r18,r16

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);

  t164 = (MUL(t128 - t129, costab16) * 2) - t130;
  816728:	8b23c83a 	sub	r17,r17,r12

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;
  81672c:	e717883a 	add	r11,fp,fp
  /*  3 */ hi[12][slot] = SHIFT(t49);

  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;
  816730:	1119883a 	add	r12,r2,r4
  t167 = MUL(t102 - t103, costab24);
  t168 = t166 + t167;

  t134 = (t168 * 2) - t104;

  t120 = (t134 * 2) - t105;
  816734:	4a49883a 	add	r4,r9,r9

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;
  816738:	5b1fc83a 	sub	r15,r11,r12
  t167 = MUL(t102 - t103, costab24);
  t168 = t166 + t167;

  t134 = (t168 * 2) - t104;

  t120 = (t134 * 2) - t105;
  81673c:	2209c83a 	sub	r4,r4,r8

  /* 21 */ lo[ 5][slot] = SHIFT(t140);

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;

  t155 = (t174 * 2) - t139;
  816740:	9485883a 	add	r2,r18,r18

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;

  /* 17 */ lo[ 1][slot] = SHIFT(t124);

  t131 = (t139 * 2) - t124;
  816744:	dac02417 	ldw	r11,144(sp)

  t157 = MUL(t89 - t90, costab8);
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;
  816748:	dbc02115 	stw	r15,132(sp)
  t167 = MUL(t102 - t103, costab24);
  t168 = t166 + t167;

  t134 = (t168 * 2) - t104;

  t120 = (t134 * 2) - t105;
  81674c:	d9002515 	stw	r4,148(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816750:	dbc01517 	ldw	r15,84(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816754:	d9012617 	ldw	r4,1176(sp)

  /* 21 */ lo[ 5][slot] = SHIFT(t140);

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;

  t155 = (t174 * 2) - t139;
  816758:	1385c83a 	sub	r2,r2,r14

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;

  /* 17 */ lo[ 1][slot] = SHIFT(t124);

  t131 = (t139 * 2) - t124;
  81675c:	73af883a 	add	r23,r14,r14
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816760:	db80f917 	ldw	r14,996(sp)

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;
  816764:	5269c83a 	sub	r20,r10,r9

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  816768:	da014017 	ldw	r8,1280(sp)
  81676c:	da400d17 	ldw	r9,52(sp)

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;

  /* 17 */ lo[ 1][slot] = SHIFT(t124);

  t131 = (t139 * 2) - t124;
  816770:	baefc83a 	sub	r23,r23,r11
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816774:	256bc83a 	sub	r21,r4,r21
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816778:	73ddc83a 	sub	r14,r14,r15

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;

  /* 17 */ lo[ 1][slot] = SHIFT(t124);

  t131 = (t139 * 2) - t124;
  81677c:	ddc01e15 	stw	r23,120(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816780:	db80fa15 	stw	r14,1000(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816784:	dd412715 	stw	r21,1180(sp)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  816788:	4251c83a 	sub	r8,r8,r9
  81678c:	da014115 	stw	r8,1284(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  816790:	db80e117 	ldw	r14,900(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816794:	dac00117 	ldw	r11,4(sp)
  816798:	da814e17 	ldw	r10,1336(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  81679c:	dbc0e517 	ldw	r15,916(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8167a0:	701dd33a 	srai	r14,r14,12
  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);
  8167a4:	60d9883a 	add	r12,r12,r3

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8167a8:	52d5c83a 	sub	r10,r10,r11
  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);
  8167ac:	db00eb15 	stw	r12,940(sp)

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);
  8167b0:	dac06017 	ldw	r11,384(sp)

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);
  8167b4:	db004e17 	ldw	r12,312(sp)
  t115 = t73  + t74;
  t116 = t75  + t76;

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);
  8167b8:	da007017 	ldw	r8,448(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8167bc:	db80e215 	stw	r14,904(sp)
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  8167c0:	6f1bc83a 	sub	r13,r13,fp

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);
  8167c4:	db804117 	ldw	r14,260(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8167c8:	78f9883a 	add	fp,r15,r3

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);
  8167cc:	dbc04617 	ldw	r15,280(sp)

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);
  8167d0:	58d7883a 	add	r11,r11,r3

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);
  8167d4:	60d9883a 	add	r12,r12,r3

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8167d8:	da814f15 	stw	r10,1340(sp)
  t115 = t73  + t74;
  t116 = t75  + t76;

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);
  8167dc:	40c9883a 	add	r4,r8,r3
  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);
  8167e0:	da805717 	ldw	r10,348(sp)

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);
  8167e4:	dac0e915 	stw	r11,932(sp)

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);
  8167e8:	db00ed15 	stw	r12,948(sp)

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);
  8167ec:	70dd883a 	add	r14,r14,r3

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  8167f0:	db002117 	ldw	r12,132(sp)

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);
  8167f4:	78df883a 	add	r15,r15,r3

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  8167f8:	da001517 	ldw	r8,84(sp)

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  8167fc:	dac10e17 	ldw	r11,1080(sp)

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);
  816800:	db80f015 	stw	r14,960(sp)

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);
  816804:	dbc0f215 	stw	r15,968(sp)

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  816808:	db811a17 	ldw	r14,1128(sp)
  81680c:	dbc02517 	ldw	r15,148(sp)
  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);
  816810:	50d3883a 	add	r9,r10,r3

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  816814:	40d1883a 	add	r8,r8,r3

  t131 = (t139 * 2) - t124;

  /* 19 */ lo[ 3][slot] = SHIFT(t131);

  t140 = (t164 * 2) - t131;
  816818:	8c55883a 	add	r10,r17,r17

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  81681c:	5b17c83a 	sub	r11,r11,r12

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  816820:	da00f515 	stw	r8,980(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816824:	db001217 	ldw	r12,72(sp)

  t131 = (t139 * 2) - t124;

  /* 19 */ lo[ 3][slot] = SHIFT(t131);

  t140 = (t164 * 2) - t131;
  816828:	55d1c83a 	sub	r8,r10,r23

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;
  81682c:	dac00915 	stw	r11,36(sp)

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816830:	da812017 	ldw	r10,1152(sp)

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  816834:	73ddc83a 	sub	r14,r14,r15

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816838:	dac13a17 	ldw	r11,1256(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  81683c:	dbc00617 	ldw	r15,24(sp)

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;
  816840:	db801b15 	stw	r14,108(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816844:	db814517 	ldw	r14,1300(sp)
  t115 = t73  + t74;
  t116 = t75  + t76;

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);
  816848:	2009d33a 	srai	r4,r4,12

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  81684c:	54e7c83a 	sub	r19,r10,r19

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816850:	5b17c83a 	sub	r11,r11,r12

  t131 = (t139 * 2) - t124;

  /* 19 */ lo[ 3][slot] = SHIFT(t131);

  t140 = (t164 * 2) - t131;
  816854:	da001815 	stw	r8,96(sp)

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816858:	dcc12115 	stw	r19,1156(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  81685c:	dac13b15 	stw	r11,1260(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816860:	73ddc83a 	sub	r14,r14,r15
  816864:	db814615 	stw	r14,1304(sp)
  t115 = t73  + t74;
  t116 = t75  + t76;

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);
  816868:	d900e715 	stw	r4,924(sp)

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);
  81686c:	d900e917 	ldw	r4,932(sp)
  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);
  816870:	da00eb17 	ldw	r8,940(sp)

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  816874:	db00f517 	ldw	r12,980(sp)

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);
  816878:	2009d33a 	srai	r4,r4,12
  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);
  81687c:	4813d33a 	srai	r9,r9,12

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);
  816880:	dac0f217 	ldw	r11,968(sp)

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);
  816884:	d900ea15 	stw	r4,936(sp)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  816888:	d9014117 	ldw	r4,1284(sp)
  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);
  81688c:	da40e815 	stw	r9,928(sp)
  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);
  816890:	4011d33a 	srai	r8,r8,12

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);
  816894:	da40ed17 	ldw	r9,948(sp)

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  816898:	6019d33a 	srai	r12,r12,12

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  81689c:	2109883a 	add	r4,r4,r4
  8168a0:	d9014215 	stw	r4,1288(sp)

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);
  8168a4:	5817d33a 	srai	r11,r11,12
  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);
  8168a8:	da00ec15 	stw	r8,944(sp)

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);
  8168ac:	da80f017 	ldw	r10,960(sp)

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  8168b0:	db00f615 	stw	r12,984(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8168b4:	da014f17 	ldw	r8,1340(sp)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  8168b8:	db014217 	ldw	r12,1288(sp)

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);
  8168bc:	4813d33a 	srai	r9,r9,12
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8168c0:	db80fa17 	ldw	r14,1000(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8168c4:	e039d33a 	srai	fp,fp,12

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);
  8168c8:	dac0f315 	stw	r11,972(sp)

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;

  t155 = (t174 * 2) - t139;

  t147 = (t155 * 2) - t140;
  8168cc:	dac01817 	ldw	r11,96(sp)

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);
  8168d0:	da40ee15 	stw	r9,952(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8168d4:	4211883a 	add	r8,r8,r8

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);
  8168d8:	5015d33a 	srai	r10,r10,12

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;

  t155 = (t174 * 2) - t139;

  t147 = (t155 * 2) - t140;
  8168dc:	1093883a 	add	r9,r2,r2

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  8168e0:	6085c83a 	sub	r2,r12,r2

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8168e4:	df00e615 	stw	fp,920(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8168e8:	da015015 	stw	r8,1344(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  8168ec:	70f9883a 	add	fp,r14,r3

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;
  8168f0:	d8800015 	stw	r2,0(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8168f4:	44a5c83a 	sub	r18,r8,r18

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  8168f8:	d8813b17 	ldw	r2,1260(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  8168fc:	da014617 	ldw	r8,1304(sp)

  t174 = (MUL(t136 - t137, costab16) * 2) - t138;

  t155 = (t174 * 2) - t139;

  t147 = (t155 * 2) - t140;
  816900:	4ad3c83a 	sub	r9,r9,r11
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816904:	e039d33a 	srai	fp,fp,12
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);
  816908:	dac03017 	ldw	r11,192(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  81690c:	ad5f883a 	add	r15,r21,r21
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  816910:	db800917 	ldw	r14,36(sp)

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);
  816914:	da80f115 	stw	r10,964(sp)

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;

  t151 = (t169 * 2) - t135;
  816918:	da801b17 	ldw	r10,108(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  81691c:	4211883a 	add	r8,r8,r8

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;

  t151 = (t169 * 2) - t135;
  816920:	a509883a 	add	r4,r20,r20

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816924:	1085883a 	add	r2,r2,r2
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816928:	7d29c83a 	sub	r20,r15,r20
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);
  81692c:	58d7883a 	add	r11,r11,r3
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816930:	dbc12815 	stw	r15,1184(sp)
  816934:	dd012915 	stw	r20,1188(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816938:	dc815115 	stw	r18,1348(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  81693c:	df00fb15 	stw	fp,1004(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816940:	d8813c15 	stw	r2,1264(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816944:	da014715 	stw	r8,1308(sp)
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  816948:	6b5b883a 	add	r13,r13,r13

  /* 18 */ lo[ 2][slot] = SHIFT(t135);

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;

  t151 = (t169 * 2) - t135;
  81694c:	2289c83a 	sub	r4,r4,r10
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  816950:	6b9bc83a 	sub	r13,r13,r14
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);
  816954:	da803c17 	ldw	r10,240(sp)
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);
  816958:	dac10115 	stw	r11,1028(sp)
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);
  81695c:	db802117 	ldw	r14,132(sp)

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);
  816960:	db003517 	ldw	r12,212(sp)

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;
  816964:	9cdf883a 	add	r15,r19,r19
  816968:	792fc83a 	sub	r23,r15,r4

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  81696c:	dbc13c17 	ldw	r15,1264(sp)
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);
  816970:	70dd883a 	add	r14,r14,r3

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816974:	4463c83a 	sub	r17,r8,r17
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  816978:	294b883a 	add	r5,r5,r5
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);
  81697c:	5811d33a 	srai	r8,r11,12
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);
  816980:	50c5883a 	add	r2,r10,r3

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);
  816984:	60e5883a 	add	r18,r12,r3
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);
  816988:	7015d33a 	srai	r10,r14,12

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  81698c:	db015117 	ldw	r12,1348(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  816990:	294b883a 	add	r5,r5,r5
  816994:	29cf883a 	add	r7,r5,r7

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  816998:	7a5fc83a 	sub	r15,r15,r9

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  81699c:	298b883a 	add	r5,r5,r6
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8169a0:	d980e217 	ldw	r6,904(sp)

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;
  8169a4:	dbc00c15 	stw	r15,48(sp)
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);
  8169a8:	da010215 	stw	r8,1032(sp)

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;

  t165 = (t175 * 2) - t156;
  8169ac:	dbc00017 	ldw	r15,0(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8169b0:	da00e617 	ldw	r8,920(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  8169b4:	a517883a 	add	r11,r20,r20
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);
  8169b8:	db810b15 	stw	r14,1068(sp)
  8169bc:	da810c15 	stw	r10,1072(sp)

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  8169c0:	db800917 	ldw	r14,36(sp)

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;

  t165 = (t175 * 2) - t156;
  8169c4:	da800c17 	ldw	r10,48(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  8169c8:	dac12a15 	stw	r11,1192(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8169cc:	6319883a 	add	r12,r12,r12
  t115 = t73  + t74;
  t116 = t75  + t76;

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);
  8169d0:	dac0e717 	ldw	r11,924(sp)
  t86  = t65 + t66;  t109 = MUL(t65 - t66, costab20);

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  8169d4:	39807815 	stw	r6,480(r7)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  8169d8:	db015215 	stw	r12,1352(sp)
  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);
  8169dc:	db00e817 	ldw	r12,928(sp)

  t113 = t69  + t70;
  t114 = t71  + t72;

  /*  0 */ hi[15][slot] = SHIFT(t113 + t114);
  /* 16 */ lo[ 0][slot] = SHIFT(MUL(t113 - t114, costab16));
  8169e0:	2a000015 	stw	r8,0(r5)
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);
  8169e4:	1039d33a 	srai	fp,r2,12

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;

  t165 = (t175 * 2) - t156;
  8169e8:	7bc5883a 	add	r2,r15,r15

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  8169ec:	70cd883a 	add	r6,r14,r3
  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);
  8169f0:	dbc0ec17 	ldw	r15,944(sp)

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);
  8169f4:	db80ea17 	ldw	r14,936(sp)

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);
  8169f8:	da00ee17 	ldw	r8,952(sp)

  /* 25 */ lo[ 9][slot] = SHIFT(t156);

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;

  t165 = (t175 * 2) - t156;
  8169fc:	1285c83a 	sub	r2,r2,r10
  t115 = t73  + t74;
  t116 = t75  + t76;

  t32  = t115 + t116;

  /*  1 */ hi[14][slot] = SHIFT(t32);
  816a00:	3ac07015 	stw	r11,448(r7)

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);
  816a04:	da80f117 	ldw	r10,964(sp)

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);
  816a08:	dac0f317 	ldw	r11,972(sp)

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);
  816a0c:	9025d33a 	srai	r18,r18,12
  t118 = t78  + t79;
  t119 = t80  + t81;

  t58  = t118 + t119;

  /*  2 */ hi[13][slot] = SHIFT(t58);
  816a10:	3b006815 	stw	r12,416(r7)

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  816a14:	db00f617 	ldw	r12,984(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816a18:	dc414815 	stw	r17,1312(sp)

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);
  816a1c:	dc810515 	stw	r18,1044(sp)

  t67  = t121 + t122;

  t49  = (t67 * 2) - t32;

  /*  3 */ hi[12][slot] = SHIFT(t49);
  816a20:	3b806015 	stw	r14,384(r7)
  t125 = t89  + t90;
  t126 = t91  + t92;

  t93  = t125 + t126;

  /*  4 */ hi[11][slot] = SHIFT(t93);
  816a24:	3bc05815 	stw	r15,352(r7)

  t98  = t128 + t129;

  t68  = (t98 * 2) - t49;

  /*  5 */ hi[10][slot] = SHIFT(t68);
  816a28:	3a005015 	stw	r8,320(r7)

  t104 = t132 + t133;

  t82  = (t104 * 2) - t58;

  /*  6 */ hi[ 9][slot] = SHIFT(t82);
  816a2c:	3a804815 	stw	r10,288(r7)

  t87  = (t110 * 2) - t67;

  t77  = (t87 * 2) - t68;

  /*  7 */ hi[ 8][slot] = SHIFT(t77);
  816a30:	3ac04015 	stw	r11,256(r7)

  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  816a34:	3b003815 	stw	r12,224(r7)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816a38:	da000017 	ldw	r8,0(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816a3c:	db812a17 	ldw	r14,1192(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816a40:	dbc15217 	ldw	r15,1352(sp)

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);
  816a44:	dac02b17 	ldw	r11,172(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816a48:	75ddc83a 	sub	r14,r14,r23

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816a4c:	7a1fc83a 	sub	r15,r15,r8
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816a50:	db812b15 	stw	r14,1196(sp)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816a54:	dbc15315 	stw	r15,1356(sp)

  t134 = (t168 * 2) - t104;

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);
  816a58:	db002517 	ldw	r12,148(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816a5c:	dbc0fb17 	ldw	r15,1004(sp)

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  816a60:	301dd33a 	srai	r14,r6,12

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);
  816a64:	58cd883a 	add	r6,r11,r3
  816a68:	300dd33a 	srai	r6,r6,12

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816a6c:	da015317 	ldw	r8,1356(sp)
  t141 = MUL(t69 - t70, costab8);
  t142 = MUL(t71 - t72, costab24);
  t143 = t141 + t142;

  /*  8 */ hi[ 7][slot] = SHIFT(t143);
  /* 24 */ lo[ 8][slot] =
  816a70:	2bc04015 	stw	r15,256(r5)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816a74:	8c55883a 	add	r10,r17,r17
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);
  816a78:	dac10217 	ldw	r11,1032(sp)
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);
  816a7c:	dbc10c17 	ldw	r15,1072(sp)

  t134 = (t168 * 2) - t104;

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);
  816a80:	60e3883a 	add	r17,r12,r3

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);
  816a84:	db010517 	ldw	r12,1044(sp)

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);
  816a88:	d9811415 	stw	r6,1104(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816a8c:	d9812b17 	ldw	r6,1196(sp)

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
  816a90:	50a5c83a 	sub	r18,r10,r2
  816a94:	da814915 	stw	r10,1316(sp)
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816a98:	4211883a 	add	r8,r8,r8

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);
  816a9c:	da801b17 	ldw	r10,108(sp)
  t145 = MUL(t75 - t76, costab24);
  t146 = t144 + t145;

  t88  = (t146 * 2) - t77;

  /*  9 */ hi[ 6][slot] = SHIFT(t88);
  816aa0:	3f003015 	stw	fp,192(r7)
  t149 = MUL(t80 - t81, costab24);
  t150 = t148 + t149;

  t105 = (t150 * 2) - t82;

  /* 10 */ hi[ 5][slot] = SHIFT(t105);
  816aa4:	3ac02815 	stw	r11,160(r7)

  t111 = (t154 * 2) - t87;

  t99  = (t111 * 2) - t88;

  /* 11 */ hi[ 4][slot] = SHIFT(t99);
  816aa8:	3b002015 	stw	r12,128(r7)
  t158 = MUL(t91 - t92, costab24);
  t159 = t157 + t158;

  t127 = (t159 * 2) - t93;

  /* 12 */ hi[ 3][slot] = SHIFT(t127);
  816aac:	3bc01815 	stw	r15,96(r7)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816ab0:	da015415 	stw	r8,1360(sp)
  816ab4:	4491c83a 	sub	r8,r8,r18
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816ab8:	30cd883a 	add	r6,r6,r3

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816abc:	da015515 	stw	r8,1364(sp)

  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  816ac0:	2b802015 	stw	r14,128(r5)
  /* 28 */ lo[12][slot] =
  816ac4:	68db883a 	add	r13,r13,r3

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816ac8:	40dd883a 	add	r14,r8,r3

  /* 19 */ lo[ 3][slot] = SHIFT(t131);

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);
  816acc:	da001817 	ldw	r8,96(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816ad0:	d9812c15 	stw	r6,1200(sp)
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  816ad4:	681bd33a 	srai	r13,r13,12

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);
  816ad8:	50cd883a 	add	r6,r10,r3

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);
  816adc:	da800c17 	ldw	r10,48(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816ae0:	dac12c17 	ldw	r11,1200(sp)

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  816ae4:	b8ef883a 	add	r23,r23,r3

  /* 19 */ lo[ 3][slot] = SHIFT(t131);

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);
  816ae8:	40d1883a 	add	r8,r8,r3

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);
  816aec:	50d5883a 	add	r10,r10,r3
  /* 12 */ hi[ 3][slot] = SHIFT(t127);

  t160 = (MUL(t125 - t126, costab16) * 2) - t127;

  /* 20 */ lo[ 4][slot] = SHIFT(t160);
  /* 28 */ lo[12][slot] =
  816af0:	2b406015 	stw	r13,384(r5)

  /* 17 */ lo[ 1][slot] = SHIFT(t124);

  t131 = (t139 * 2) - t124;

  /* 19 */ lo[ 3][slot] = SHIFT(t131);
  816af4:	dbc01e17 	ldw	r15,120(sp)

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;

  /* 17 */ lo[ 1][slot] = SHIFT(t124);
  816af8:	db402417 	ldw	r13,144(sp)

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  816afc:	ddc12315 	stw	r23,1164(sp)

  /* 19 */ lo[ 3][slot] = SHIFT(t131);

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);
  816b00:	da013715 	stw	r8,1244(sp)

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);
  816b04:	da813d15 	stw	r10,1268(sp)
  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  /* 30 */ lo[14][slot] =
  816b08:	5829d33a 	srai	r20,r11,12

  t134 = (t168 * 2) - t104;

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);
  816b0c:	8823d33a 	srai	r17,r17,12

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);
  816b10:	20c9883a 	add	r4,r4,r3

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);
  816b14:	dac11417 	ldw	r11,1104(sp)

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);
  816b18:	3039d33a 	srai	fp,r6,12

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);
  816b1c:	2009d33a 	srai	r4,r4,12

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);
  816b20:	b0cd883a 	add	r6,r22,r3

  /* 22 */ lo[ 6][slot] = SHIFT(t151);

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  816b24:	b82bd33a 	srai	r21,r23,12
  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  816b28:	90e5883a 	add	r18,r18,r3

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);
  816b2c:	3027d33a 	srai	r19,r6,12

  t155 = (t174 * 2) - t139;

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);
  816b30:	48d3883a 	add	r9,r9,r3

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;

  /* 17 */ lo[ 1][slot] = SHIFT(t124);
  816b34:	68cd883a 	add	r6,r13,r3

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);
  816b38:	10c5883a 	add	r2,r2,r3

  /* 17 */ lo[ 1][slot] = SHIFT(t124);

  t131 = (t139 * 2) - t124;

  /* 19 */ lo[ 3][slot] = SHIFT(t131);
  816b3c:	78db883a 	add	r13,r15,r3

  t134 = (t168 * 2) - t104;

  t120 = (t134 * 2) - t105;

  /* 14 */ hi[ 1][slot] = SHIFT(t120);
  816b40:	3c400815 	stw	r17,32(r7)

  t130 = (t163 * 2) - t98;

  t112 = (t130 * 2) - t99;

  /* 13 */ hi[ 2][slot] = SHIFT(t112);
  816b44:	3ac01015 	stw	r11,64(r7)

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;

  /* 17 */ lo[ 1][slot] = SHIFT(t124);
  816b48:	3007d33a 	srai	r3,r6,12
  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  816b4c:	9019d33a 	srai	r12,r18,12

  /* 17 */ lo[ 1][slot] = SHIFT(t124);

  t131 = (t139 * 2) - t124;

  /* 19 */ lo[ 3][slot] = SHIFT(t131);
  816b50:	680dd33a 	srai	r6,r13,12

  t155 = (t174 * 2) - t139;

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);
  816b54:	4813d33a 	srai	r9,r9,12

  /* 19 */ lo[ 3][slot] = SHIFT(t131);

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);
  816b58:	401bd33a 	srai	r13,r8,12

  /* 23 */ lo[ 7][slot] = SHIFT(t147);

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);
  816b5c:	5023d33a 	srai	r17,r10,12

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);
  816b60:	1005d33a 	srai	r2,r2,12

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  /* 31 */ lo[15][slot] =
  816b64:	701dd33a 	srai	r14,r14,12

  /* 14 */ hi[ 1][slot] = SHIFT(t120);

  t135 = (MUL(t118 - t119, costab16) * 2) - t120;

  /* 18 */ lo[ 2][slot] = SHIFT(t135);
  816b68:	2f001015 	stw	fp,64(r5)

  t169 = (MUL(t132 - t133, costab16) * 2) - t134;

  t151 = (t169 * 2) - t135;

  /* 22 */ lo[ 6][slot] = SHIFT(t151);
  816b6c:	29003015 	stw	r4,192(r5)

  t170 = (((MUL(t148 - t149, costab16) * 2) - t150) * 2) - t151;

  /* 26 */ lo[10][slot] = SHIFT(t170);
  816b70:	2d405015 	stw	r21,320(r5)
  /* 30 */ lo[14][slot] =
  816b74:	2d007015 	stw	r20,448(r5)

  t139 = (MUL(t121 - t122, costab16) * 2) - t123;

  t117 = (t123 * 2) - t112;

  /* 15 */ hi[ 0][slot] = SHIFT(t117);
  816b78:	3cc00015 	stw	r19,0(r7)
  /* 27 */ lo[11][slot] = SHIFT(t165);

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  816b7c:	dc814a15 	stw	r18,1320(sp)
  816b80:	db014b15 	stw	r12,1324(sp)
  /* 31 */ lo[15][slot] =
  816b84:	2b807815 	stw	r14,480(r5)

  /* 15 */ hi[ 0][slot] = SHIFT(t117);

  t124 = (MUL(t115 - t116, costab16) * 2) - t117;

  /* 17 */ lo[ 1][slot] = SHIFT(t124);
  816b88:	28c00815 	stw	r3,32(r5)

  t131 = (t139 * 2) - t124;

  /* 19 */ lo[ 3][slot] = SHIFT(t131);
  816b8c:	29801815 	stw	r6,96(r5)

  t140 = (t164 * 2) - t131;

  /* 21 */ lo[ 5][slot] = SHIFT(t140);
  816b90:	2b402815 	stw	r13,160(r5)

  t155 = (t174 * 2) - t139;

  t147 = (t155 * 2) - t140;

  /* 23 */ lo[ 7][slot] = SHIFT(t147);
  816b94:	2a403815 	stw	r9,224(r5)

  t156 = (((MUL(t144 - t145, costab16) * 2) - t146) * 2) - t147;

  /* 25 */ lo[ 9][slot] = SHIFT(t156);
  816b98:	2c404815 	stw	r17,288(r5)

  t175 = (((MUL(t152 - t153, costab16) * 2) - t154) * 2) - t155;

  t165 = (t175 * 2) - t156;

  /* 27 */ lo[11][slot] = SHIFT(t165);
  816b9c:	28805815 	stw	r2,352(r5)

  t176 = (((((MUL(t161 - t162, costab16) * 2) -
	     t163) * 2) - t164) * 2) - t165;

  /* 29 */ lo[13][slot] = SHIFT(t176);
  816ba0:	2b006815 	stw	r12,416(r5)
   *  80 multiplies
   *  80 additions
   * 119 subtractions
   *  49 shifts (not counting SSO)
   */
}
  816ba4:	df015f17 	ldw	fp,1404(sp)
  816ba8:	ddc15e17 	ldw	r23,1400(sp)
  816bac:	dd815d17 	ldw	r22,1396(sp)
  816bb0:	dd415c17 	ldw	r21,1392(sp)
  816bb4:	dd015b17 	ldw	r20,1388(sp)
  816bb8:	dcc15a17 	ldw	r19,1384(sp)
  816bbc:	dc815917 	ldw	r18,1380(sp)
  816bc0:	dc415817 	ldw	r17,1376(sp)
  816bc4:	dc015717 	ldw	r16,1372(sp)
  816bc8:	dec16004 	addi	sp,sp,1408
  816bcc:	f800283a 	ret

00816bd0 <synth_full>:
 * DESCRIPTION:	perform full frequency PCM synthesis
 */
static
void synth_full(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  816bd0:	deffc004 	addi	sp,sp,-256
  816bd4:	dfc03f15 	stw	ra,252(sp)
  816bd8:	df003e15 	stw	fp,248(sp)
  816bdc:	ddc03d15 	stw	r23,244(sp)
  816be0:	dd803c15 	stw	r22,240(sp)
  816be4:	dd403b15 	stw	r21,236(sp)
  816be8:	dd003a15 	stw	r20,232(sp)
  816bec:	dcc03915 	stw	r19,228(sp)
  816bf0:	dc803815 	stw	r18,224(sp)
  816bf4:	dc403715 	stw	r17,220(sp)
  816bf8:	dc003615 	stw	r16,216(sp)
  816bfc:	d9800b15 	stw	r6,44(sp)
  816c00:	d9000915 	stw	r4,36(sp)
  816c04:	d9400a15 	stw	r5,40(sp)
  816c08:	d9c00c15 	stw	r7,48(sp)
  register mad_fixed_t (*fe)[8], (*fx)[8], (*fo)[8];
  register mad_fixed_t const (*Dptr)[32], *ptr;
  register mad_fixed64hi_t hi;
  register mad_fixed64lo_t lo;

  for (ch = 0; ch < nch; ++ch) {
  816c0c:	3001a126 	beq	r6,zero,817294 <synth_full+0x6c4>
  816c10:	3805003a 	cmpeq	r2,r7,zero
  816c14:	d8000715 	stw	zero,28(sp)
  816c18:	d8802d15 	stw	r2,180(sp)
  816c1c:	d9002f15 	stw	r4,188(sp)
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
  816c20:	d8c00917 	ldw	r3,36(sp)
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  816c24:	d9002d17 	ldw	r4,180(sp)
  register mad_fixed64lo_t lo;

  for (ch = 0; ch < nch; ++ch) {
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
  816c28:	18c40017 	ldw	r3,4096(r3)
  816c2c:	d8c00815 	stw	r3,32(sp)
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  816c30:	2001901e 	bne	r4,zero,817274 <synth_full+0x6a4>
  816c34:	d9400717 	ldw	r5,28(sp)
  816c38:	d9800917 	ldw	r6,36(sp)
  816c3c:	d9c00a17 	ldw	r7,40(sp)
  816c40:	28848024 	muli	r2,r5,4608
  816c44:	da000817 	ldw	r8,32(sp)
  816c48:	da400817 	ldw	r9,32(sp)
  816c4c:	1187883a 	add	r3,r2,r6
  816c50:	10800c04 	addi	r2,r2,48
  816c54:	3885883a 	add	r2,r7,r2
  816c58:	18c42204 	addi	r3,r3,4232
  816c5c:	d8000615 	stw	zero,24(sp)
  816c60:	d8800315 	stw	r2,12(sp)
  816c64:	d8c00215 	stw	r3,8(sp)
  816c68:	1009883a 	mov	r4,r2
      dct32((*sbsample)[s], phase >> 1,
  816c6c:	4200004c 	andi	r8,r8,1
  816c70:	4004927a 	slli	r2,r8,9
  816c74:	d8c02f17 	ldw	r3,188(sp)
  816c78:	480ad07a 	srli	r5,r9,1
  816c7c:	da000d15 	stw	r8,52(sp)
  816c80:	18b9883a 	add	fp,r3,r2
  816c84:	e00d883a 	mov	r6,fp
  816c88:	e1c10004 	addi	r7,fp,1024
  816c8c:	08156740 	call	815674 <dct32>
      po = ((phase - 1) & 0xf) | 1;

      /* calculate 32 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
  816c90:	d9400817 	ldw	r5,32(sp)
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
  816c94:	02002134 	movhi	r8,132
  816c98:	4236f704 	addi	r8,r8,-9252
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  816c9c:	01ffff84 	movi	r7,-2
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
  816ca0:	28bfffc4 	addi	r2,r5,-1
  816ca4:	108003cc 	andi	r2,r2,15
  816ca8:	10800054 	ori	r2,r2,1
  816cac:	1085883a 	add	r2,r2,r2
  816cb0:	1085883a 	add	r2,r2,r2
  816cb4:	1211883a 	add	r8,r2,r8
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  816cb8:	40c00e17 	ldw	r3,56(r8)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  816cbc:	29ce703a 	and	r7,r5,r7
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
  816cc0:	d8800e15 	stw	r2,56(sp)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  816cc4:	40800017 	ldw	r2,0(r8)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  816cc8:	d9c01515 	stw	r7,84(sp)
  816ccc:	39cf883a 	add	r7,r7,r7
  816cd0:	39cf883a 	add	r7,r7,r7
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
  816cd4:	da000415 	stw	r8,16(sp)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  816cd8:	d8803015 	stw	r2,192(sp)
      MLA(hi, lo, (*fx)[1], ptr[14]);
  816cdc:	d8c03115 	stw	r3,196(sp)
      MLA(hi, lo, (*fx)[2], ptr[12]);
  816ce0:	40800a17 	ldw	r2,40(r8)
  816ce4:	40c00c17 	ldw	r3,48(r8)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  816ce8:	d9c01615 	stw	r7,88(sp)

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  816cec:	41c00817 	ldw	r7,32(r8)
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  816cf0:	42000617 	ldw	r8,24(r8)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  816cf4:	da401617 	ldw	r9,88(sp)

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  816cf8:	d9c03215 	stw	r7,200(sp)
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  816cfc:	da003315 	stw	r8,204(sp)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  816d00:	02002134 	movhi	r8,132
  816d04:	4236f704 	addi	r8,r8,-9252
  816d08:	4a0f883a 	add	r7,r9,r8
      po = ((phase - 1) & 0xf) | 1;

      /* calculate 32 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
  816d0c:	0148303a 	nor	r4,zero,r5
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  816d10:	da400417 	ldw	r9,16(sp)
      po = ((phase - 1) & 0xf) | 1;

      /* calculate 32 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
  816d14:	2100004c 	andi	r4,r4,1
  816d18:	d9802f17 	ldw	r6,188(sp)
  816d1c:	2008927a 	slli	r4,r4,9
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  816d20:	4a400417 	ldw	r9,16(r9)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816d24:	da000417 	ldw	r8,16(sp)
      po = ((phase - 1) & 0xf) | 1;

      /* calculate 32 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
  816d28:	3109883a 	add	r4,r6,r4
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  816d2c:	21400017 	ldw	r5,0(r4)
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816d30:	42000217 	ldw	r8,8(r8)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  816d34:	da403415 	stw	r9,208(sp)
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  816d38:	da403017 	ldw	r9,192(sp)
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816d3c:	da003515 	stw	r8,212(sp)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  816d40:	22000117 	ldw	r8,4(r4)
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  816d44:	2a4b383a 	mul	r5,r5,r9
      MLA(hi, lo, (*fx)[1], ptr[14]);
  816d48:	da403117 	ldw	r9,196(sp)
      MLA(hi, lo, (*fx)[2], ptr[12]);
  816d4c:	25c00317 	ldw	r23,12(r4)
  816d50:	21800217 	ldw	r6,8(r4)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  816d54:	4251383a 	mul	r8,r8,r9
      MLA(hi, lo, (*fx)[2], ptr[12]);
  816d58:	b8af383a 	mul	r23,r23,r2
      MLA(hi, lo, (*fx)[3], ptr[10]);
  816d5c:	20800417 	ldw	r2,16(r4)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  816d60:	da000f15 	stw	r8,60(sp)
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  816d64:	da003217 	ldw	r8,200(sp)
      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
  816d68:	ddc01015 	stw	r23,64(sp)
  816d6c:	30cd383a 	mul	r6,r6,r3
      MLA(hi, lo, (*fx)[3], ptr[10]);
  816d70:	1205383a 	mul	r2,r2,r8
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  816d74:	e0c00017 	ldw	r3,0(fp)
      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
  816d78:	35cd883a 	add	r6,r6,r23
      MLA(hi, lo, (*fx)[3], ptr[10]);
  816d7c:	d8801115 	stw	r2,68(sp)
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  816d80:	22400517 	ldw	r9,20(r4)
  816d84:	d8803317 	ldw	r2,204(sp)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  816d88:	22000617 	ldw	r8,24(r4)
 * DESCRIPTION:	perform full frequency PCM synthesis
 */
static
void synth_full(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  816d8c:	3829883a 	mov	r20,r7
      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  816d90:	4893383a 	mul	r9,r9,r2
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
  816d94:	e0800217 	ldw	r2,8(fp)
      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  816d98:	da401215 	stw	r9,72(sp)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  816d9c:	da403417 	ldw	r9,208(sp)
  816da0:	4251383a 	mul	r8,r8,r9
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816da4:	da403517 	ldw	r9,212(sp)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  816da8:	da001315 	stw	r8,76(sp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816dac:	22000717 	ldw	r8,28(r4)

      /* calculate 32 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];
  816db0:	21010004 	addi	r4,r4,1024
  816db4:	d9000115 	stw	r4,4(sp)
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816db8:	4251383a 	mul	r8,r8,r9
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  816dbc:	3a400017 	ldw	r9,0(r7)
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816dc0:	da001415 	stw	r8,80(sp)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  816dc4:	da000f17 	ldw	r8,60(sp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  816dc8:	1a47383a 	mul	r3,r3,r9
  816dcc:	3a400e17 	ldw	r9,56(r7)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  816dd0:	2a0b883a 	add	r5,r5,r8
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  816dd4:	e2000117 	ldw	r8,4(fp)
  816dd8:	426f383a 	mul	r23,r8,r9

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  816ddc:	da001117 	ldw	r8,68(sp)
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  816de0:	da401217 	ldw	r9,72(sp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  816de4:	1dc7883a 	add	r3,r3,r23

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  816de8:	2a0b883a 	add	r5,r5,r8
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
  816dec:	3a000c17 	ldw	r8,48(r7)
      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  816df0:	324d883a 	add	r6,r6,r9
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
  816df4:	e2400317 	ldw	r9,12(fp)
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
  816df8:	1205383a 	mul	r2,r2,r8
      MLA(hi, lo, (*fe)[2], ptr[12]);
  816dfc:	3a000a17 	ldw	r8,40(r7)
 * DESCRIPTION:	perform full frequency PCM synthesis
 */
static
void synth_full(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  816e00:	e02f883a 	mov	r23,fp
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
  816e04:	4a27383a 	mul	r19,r9,r8
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  816e08:	da401317 	ldw	r9,76(sp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816e0c:	da001417 	ldw	r8,80(sp)
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
  816e10:	1cc7883a 	add	r3,r3,r19
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  816e14:	2a4b883a 	add	r5,r5,r9
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  816e18:	320d883a 	add	r6,r6,r8

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
  816e1c:	e2400417 	ldw	r9,16(fp)
  816e20:	3a000817 	ldw	r8,32(r7)
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
  816e24:	298b883a 	add	r5,r5,r6
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
  816e28:	1145c83a 	sub	r2,r2,r5
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
  816e2c:	4a23383a 	mul	r17,r9,r8
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
  816e30:	e2400517 	ldw	r9,20(fp)
  816e34:	3a000617 	ldw	r8,24(r7)

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
  816e38:	1445883a 	add	r2,r2,r17
 * DESCRIPTION:	perform full frequency PCM synthesis
 */
static
void synth_full(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  816e3c:	dcc00417 	ldw	r19,16(sp)
      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
  816e40:	4a25383a 	mul	r18,r9,r8
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
  816e44:	e2400617 	ldw	r9,24(fp)
  816e48:	3a000417 	ldw	r8,16(r7)
      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
  816e4c:	1c87883a 	add	r3,r3,r18
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
  816e50:	4a0d383a 	mul	r6,r9,r8
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
  816e54:	e2400717 	ldw	r9,28(fp)
  816e58:	3a000217 	ldw	r8,8(r7)
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
  816e5c:	1185883a 	add	r2,r2,r6
  816e60:	b9807804 	addi	r6,r23,480
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
  816e64:	4a1f383a 	mul	r15,r9,r8
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  816e68:	da400217 	ldw	r9,8(sp)
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
  816e6c:	1bc7883a 	add	r3,r3,r15
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  816e70:	10c5883a 	add	r2,r2,r3
  816e74:	1005d0ba 	srai	r2,r2,2
  816e78:	493fe204 	addi	r4,r9,-120
 * DESCRIPTION:	perform full frequency PCM synthesis
 */
static
void synth_full(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  816e7c:	00c02134 	movhi	r3,132
  816e80:	18f6f704 	addi	r3,r3,-9252
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  816e84:	48bfe115 	stw	r2,-124(r9)
 * DESCRIPTION:	perform full frequency PCM synthesis
 */
static
void synth_full(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  816e88:	d8801617 	ldw	r2,88(sp)
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  816e8c:	d9000015 	stw	r4,0(sp)
 * DESCRIPTION:	perform full frequency PCM synthesis
 */
static
void synth_full(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  816e90:	d9400e17 	ldw	r5,56(sp)
  816e94:	df000117 	ldw	fp,4(sp)
  816e98:	18abc83a 	sub	r21,r3,r2
  816e9c:	196dc83a 	sub	r22,r3,r5
  816ea0:	da400515 	stw	r9,20(sp)
  816ea4:	d9802e15 	stw	r6,184(sp)
	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
  816ea8:	98802a17 	ldw	r2,168(r19)
	++Dptr;

	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
  816eac:	9a002017 	ldw	r8,128(r19)
  816eb0:	e1000017 	ldw	r4,0(fp)
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
  816eb4:	e1800317 	ldw	r6,12(fp)

	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
  816eb8:	9a402e17 	ldw	r9,184(r19)
	++Dptr;

	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
  816ebc:	2209383a 	mul	r4,r4,r8
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
  816ec0:	308d383a 	mul	r6,r6,r2
	MLA(hi, lo, (*fo)[3], ptr[10]);
  816ec4:	9a002817 	ldw	r8,160(r19)
  816ec8:	e0800417 	ldw	r2,16(fp)

	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
  816ecc:	e1c00117 	ldw	r7,4(fp)
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
  816ed0:	9c402417 	ldw	r17,144(r19)

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
  816ed4:	1205383a 	mul	r2,r2,r8

	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
  816ed8:	3a4f383a 	mul	r7,r7,r9
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
  816edc:	e2400517 	ldw	r9,20(fp)

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
  816ee0:	d8801715 	stw	r2,92(sp)
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
  816ee4:	98802617 	ldw	r2,152(r19)
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
  816ee8:	e2000617 	ldw	r8,24(fp)
      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 30;

      for (sb = 1; sb < 16; ++sb) {
	++fe;
  816eec:	bdc00804 	addi	r23,r23,32
	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
  816ef0:	4893383a 	mul	r9,r9,r2
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
  816ef4:	4463383a 	mul	r17,r8,r17
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
  816ef8:	9a002217 	ldw	r8,136(r19)
	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
  816efc:	da401815 	stw	r9,96(sp)
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
  816f00:	e2400717 	ldw	r9,28(fp)
	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
  816f04:	98c02c17 	ldw	r3,176(r19)
  816f08:	e1400217 	ldw	r5,8(fp)
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
  816f0c:	4a13383a 	mul	r9,r9,r8
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
  816f10:	a3402417 	ldw	r13,144(r20)

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
  816f14:	da001717 	ldw	r8,92(sp)
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
  816f18:	da401a15 	stw	r9,104(sp)
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
  816f1c:	ba400617 	ldw	r9,24(r23)
	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
  816f20:	28cb383a 	mul	r5,r5,r3

	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
  816f24:	21c9883a 	add	r4,r4,r7
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
  816f28:	4b5b383a 	mul	r13,r9,r13
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
  816f2c:	b8800517 	ldw	r2,20(r23)
	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
  816f30:	da401817 	ldw	r9,96(sp)

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
  816f34:	2209883a 	add	r4,r4,r8
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
  816f38:	a2002617 	ldw	r8,152(r20)
	/* D[32 - sb][i] == -D[sb][31 - i] */

	ptr = *Dptr + po;
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
  816f3c:	298b883a 	add	r5,r5,r6
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
  816f40:	2a4b883a 	add	r5,r5,r9
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
  816f44:	1205383a 	mul	r2,r2,r8
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
  816f48:	ba400417 	ldw	r9,16(r23)
  816f4c:	a2002817 	ldw	r8,160(r20)
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
  816f50:	dc401915 	stw	r17,100(sp)
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
  816f54:	db401b15 	stw	r13,108(sp)
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
  816f58:	4a13383a 	mul	r9,r9,r8
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
  816f5c:	a3802217 	ldw	r14,136(r20)
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
  816f60:	a3002a17 	ldw	r12,168(r20)
	MLA(hi, lo, (*fe)[3], ptr[10]);
  816f64:	a2c02c17 	ldw	r11,176(r20)
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
  816f68:	b8c00717 	ldw	r3,28(r23)
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
	MLA(hi, lo, (*fe)[3], ptr[10]);
	MLA(hi, lo, (*fe)[2], ptr[12]);
  816f6c:	b9800117 	ldw	r6,4(r23)
	MLA(hi, lo, (*fe)[1], ptr[14]);
  816f70:	b9c00017 	ldw	r7,0(r23)
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
  816f74:	da401c15 	stw	r9,112(sp)
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
  816f78:	da401a17 	ldw	r9,104(sp)

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
  816f7c:	ba000317 	ldw	r8,12(r23)
	ML0(hi, lo, (*fo)[0], ptr[ 0]);
	MLA(hi, lo, (*fo)[1], ptr[14]);
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
  816f80:	2449883a 	add	r4,r4,r17
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
  816f84:	2a4b883a 	add	r5,r5,r9
	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
	MLA(hi, lo, (*fe)[3], ptr[10]);
  816f88:	ba400217 	ldw	r9,8(r23)

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
  816f8c:	4319383a 	mul	r12,r8,r12
	MLA(hi, lo, (*fo)[2], ptr[12]);
	MLA(hi, lo, (*fo)[3], ptr[10]);
	MLA(hi, lo, (*fo)[4], ptr[ 8]);
	MLA(hi, lo, (*fo)[5], ptr[ 6]);
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
  816f90:	2149883a 	add	r4,r4,r5
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
	MLA(hi, lo, (*fe)[3], ptr[10]);
	MLA(hi, lo, (*fe)[2], ptr[12]);
	MLA(hi, lo, (*fe)[1], ptr[14]);
  816f94:	a2002017 	ldw	r8,128(r20)
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
	MLA(hi, lo, (*fe)[3], ptr[10]);
	MLA(hi, lo, (*fe)[2], ptr[12]);
  816f98:	a1402e17 	ldw	r5,184(r20)
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
  816f9c:	1b87383a 	mul	r3,r3,r14
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
	MLA(hi, lo, (*fe)[3], ptr[10]);
  816fa0:	4ad7383a 	mul	r11,r9,r11
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
  816fa4:	da401c17 	ldw	r9,112(sp)
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
	MLA(hi, lo, (*fe)[3], ptr[10]);
	MLA(hi, lo, (*fe)[2], ptr[12]);
  816fa8:	314d383a 	mul	r6,r6,r5
	MLA(hi, lo, (*fe)[1], ptr[14]);
  816fac:	3a0f383a 	mul	r7,r7,r8
	MLA(hi, lo, (*fo)[6], ptr[ 4]);
	MLA(hi, lo, (*fo)[7], ptr[ 2]);
	MLN(hi, lo);

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
  816fb0:	1b47883a 	add	r3,r3,r13
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
  816fb4:	1105c83a 	sub	r2,r2,r4
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
  816fb8:	1a47883a 	add	r3,r3,r9
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
  816fbc:	1305883a 	add	r2,r2,r12
	MLA(hi, lo, (*fe)[3], ptr[10]);
  816fc0:	1ac7883a 	add	r3,r3,r11
	MLA(hi, lo, (*fe)[2], ptr[12]);
	MLA(hi, lo, (*fe)[1], ptr[14]);
  816fc4:	19c7883a 	add	r3,r3,r7
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
	MLA(hi, lo, (*fe)[3], ptr[10]);
	MLA(hi, lo, (*fe)[2], ptr[12]);
  816fc8:	1185883a 	add	r2,r2,r6
	MLA(hi, lo, (*fe)[1], ptr[14]);
	MLA(hi, lo, (*fe)[0], ptr[ 0]);

	*pcm1++ = SHIFT(MLZ(hi, lo));
  816fcc:	10c5883a 	add	r2,r2,r3
  816fd0:	1005d0ba 	srai	r2,r2,2
  816fd4:	d8c00017 	ldw	r3,0(sp)

	ptr = *Dptr + pe;
	MLA(hi, lo, (*fe)[7], ptr[ 2]);
	MLA(hi, lo, (*fe)[6], ptr[ 4]);
	MLA(hi, lo, (*fe)[5], ptr[ 6]);
	MLA(hi, lo, (*fe)[4], ptr[ 8]);
  816fd8:	db001d15 	stw	r12,116(sp)
	MLA(hi, lo, (*fe)[3], ptr[10]);
  816fdc:	dac01e15 	stw	r11,120(sp)
	MLA(hi, lo, (*fe)[2], ptr[12]);
	MLA(hi, lo, (*fe)[1], ptr[14]);
	MLA(hi, lo, (*fe)[0], ptr[ 0]);

	*pcm1++ = SHIFT(MLZ(hi, lo));
  816fe0:	18800015 	stw	r2,0(r3)

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
  816fe4:	a9802f17 	ldw	r6,188(r21)
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  816fe8:	a9c03117 	ldw	r7,196(r21)
	MLA(hi, lo, (*fe)[0], ptr[ 0]);

	*pcm1++ = SHIFT(MLZ(hi, lo));

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
  816fec:	b8800017 	ldw	r2,0(r23)
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  816ff0:	b9400117 	ldw	r5,4(r23)
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  816ff4:	b8c00217 	ldw	r3,8(r23)
  816ff8:	b9000317 	ldw	r4,12(r23)

	*pcm1++ = SHIFT(MLZ(hi, lo));

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  816ffc:	29cb383a 	mul	r5,r5,r7
	MLA(hi, lo, (*fe)[0], ptr[ 0]);

	*pcm1++ = SHIFT(MLZ(hi, lo));

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
  817000:	1185383a 	mul	r2,r2,r6
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  817004:	a9c03517 	ldw	r7,212(r21)
  817008:	a9803317 	ldw	r6,204(r21)
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  81700c:	aa803b17 	ldw	r10,236(r21)
	*pcm1++ = SHIFT(MLZ(hi, lo));

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  817010:	21c9383a 	mul	r4,r4,r7
  817014:	1987383a 	mul	r3,r3,r6
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  817018:	a9c03717 	ldw	r7,220(r21)
  81701c:	b9800417 	ldw	r6,16(r23)
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  817020:	aa403d17 	ldw	r9,244(r21)
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);
  817024:	e2000717 	ldw	r8,28(fp)

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  817028:	31cd383a 	mul	r6,r6,r7
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  81702c:	a9c03917 	ldw	r7,228(r21)
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);
  817030:	b4003d17 	ldw	r16,244(r22)

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  817034:	d9801f15 	stw	r6,124(sp)
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  817038:	b9800517 	ldw	r6,20(r23)
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);
  81703c:	4411383a 	mul	r8,r8,r16

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  817040:	b3c03517 	ldw	r15,212(r22)
	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  817044:	31cd383a 	mul	r6,r6,r7
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  817048:	b9c00717 	ldw	r7,28(r23)
	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  81704c:	b4803317 	ldw	r18,204(r22)
	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  817050:	d9802015 	stw	r6,128(sp)
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  817054:	b9800617 	ldw	r6,24(r23)
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  817058:	3a53383a 	mul	r9,r7,r9

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  81705c:	e1c00317 	ldw	r7,12(fp)
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  817060:	3295383a 	mul	r10,r6,r10
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  817064:	da402215 	stw	r9,136(sp)
	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  817068:	e1800217 	ldw	r6,8(fp)
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  81706c:	da802115 	stw	r10,132(sp)
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);
  817070:	da002315 	stw	r8,140(sp)

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
  817074:	b2403b17 	ldw	r9,236(r22)
  817078:	e2000617 	ldw	r8,24(fp)

	*pcm1++ = SHIFT(MLZ(hi, lo));

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  81707c:	1145883a 	add	r2,r2,r5
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  817080:	1907883a 	add	r3,r3,r4
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
  817084:	4251383a 	mul	r8,r8,r9
	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  817088:	da402017 	ldw	r9,128(sp)
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  81708c:	e1400117 	ldw	r5,4(fp)
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
  817090:	da002415 	stw	r8,144(sp)

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  817094:	da001f17 	ldw	r8,124(sp)
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  817098:	1a47883a 	add	r3,r3,r9
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  81709c:	b2403917 	ldw	r9,228(r22)

	ptr = *Dptr - pe;
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  8170a0:	1205883a 	add	r2,r2,r8
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  8170a4:	e2000517 	ldw	r8,20(fp)
	ML0(hi, lo, (*fe)[0], ptr[31 - 16]);
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  8170a8:	1285883a 	add	r2,r2,r10
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
  8170ac:	e1000017 	ldw	r4,0(fp)
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  8170b0:	4251383a 	mul	r8,r8,r9
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  8170b4:	b2403717 	ldw	r9,220(r22)
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  8170b8:	3bcf383a 	mul	r7,r7,r15
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  8170bc:	da002515 	stw	r8,148(sp)
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  8170c0:	e2000417 	ldw	r8,16(fp)
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  8170c4:	348d383a 	mul	r6,r6,r18
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	*pcm2-- = SHIFT(MLZ(hi, lo));

	++fo;
  8170c8:	9cc02004 	addi	r19,r19,128
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  8170cc:	4251383a 	mul	r8,r8,r9
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);
  8170d0:	da402317 	ldw	r9,140(sp)
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	*pcm2-- = SHIFT(MLZ(hi, lo));

	++fo;
  8170d4:	a5002004 	addi	r20,r20,128
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  8170d8:	da002615 	stw	r8,152(sp)
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  8170dc:	da002217 	ldw	r8,136(sp)
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);
  8170e0:	1245883a 	add	r2,r2,r9
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  8170e4:	b2403117 	ldw	r9,196(r22)
	MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  8170e8:	1a07883a 	add	r3,r3,r8
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
  8170ec:	da002417 	ldw	r8,144(sp)
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  8170f0:	2a4b383a 	mul	r5,r5,r9
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  8170f4:	da402517 	ldw	r9,148(sp)
	MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
  8170f8:	1a07883a 	add	r3,r3,r8
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
  8170fc:	b2002f17 	ldw	r8,188(r22)
	MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  817100:	1245883a 	add	r2,r2,r9
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  817104:	11c5883a 	add	r2,r2,r7
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
  817108:	2209383a 	mul	r4,r4,r8
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  81710c:	da002617 	ldw	r8,152(sp)
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  817110:	1145883a 	add	r2,r2,r5
	MLA(hi, lo, (*fe)[3], ptr[10]);
	MLA(hi, lo, (*fe)[2], ptr[12]);
	MLA(hi, lo, (*fe)[1], ptr[14]);
	MLA(hi, lo, (*fe)[0], ptr[ 0]);

	*pcm1++ = SHIFT(MLZ(hi, lo));
  817114:	da400017 	ldw	r9,0(sp)
	MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	ptr = *Dptr - po;
	MLA(hi, lo, (*fo)[7], ptr[31 -  2]);
	MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  817118:	1a07883a 	add	r3,r3,r8
	MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  81711c:	1987883a 	add	r3,r3,r6
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
  817120:	1907883a 	add	r3,r3,r4
	MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	*pcm2-- = SHIFT(MLZ(hi, lo));
  817124:	10c5883a 	add	r2,r2,r3
  817128:	1005d0ba 	srai	r2,r2,2
  81712c:	d8c00517 	ldw	r3,20(sp)

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 30;

      for (sb = 1; sb < 16; ++sb) {
  817130:	d9002e17 	ldw	r4,184(sp)
	MLA(hi, lo, (*fe)[3], ptr[10]);
	MLA(hi, lo, (*fe)[2], ptr[12]);
	MLA(hi, lo, (*fe)[1], ptr[14]);
	MLA(hi, lo, (*fe)[0], ptr[ 0]);

	*pcm1++ = SHIFT(MLZ(hi, lo));
  817134:	4a400104 	addi	r9,r9,4
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	*pcm2-- = SHIFT(MLZ(hi, lo));
  817138:	18800015 	stw	r2,0(r3)
  81713c:	18ffff04 	addi	r3,r3,-4
	MLA(hi, lo, (*fe)[3], ptr[10]);
	MLA(hi, lo, (*fe)[2], ptr[12]);
	MLA(hi, lo, (*fe)[1], ptr[14]);
	MLA(hi, lo, (*fe)[0], ptr[ 0]);

	*pcm1++ = SHIFT(MLZ(hi, lo));
  817140:	da400015 	stw	r9,0(sp)
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	*pcm2-- = SHIFT(MLZ(hi, lo));

	++fo;
  817144:	e7000804 	addi	fp,fp,32
  817148:	ad402004 	addi	r21,r21,128
	MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	*pcm2-- = SHIFT(MLZ(hi, lo));
  81714c:	d8c00515 	stw	r3,20(sp)

	++fo;
  817150:	b5802004 	addi	r22,r22,128

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 30;

      for (sb = 1; sb < 16; ++sb) {
  817154:	b93f541e 	bne	r23,r4,816ea8 <synth_full+0x2d8>
  817158:	d9800117 	ldw	r6,4(sp)
	++fo;
      }

      ++Dptr;

      ptr = *Dptr + po;
  81715c:	d9400e17 	ldw	r5,56(sp)
  817160:	00802134 	movhi	r2,132
  817164:	10b8f704 	addi	r2,r2,-7204

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 30;

      for (sb = 1; sb < 16; ++sb) {
  817168:	31007804 	addi	r4,r6,480
	++fo;
      }

      ++Dptr;

      ptr = *Dptr + po;
  81716c:	2885883a 	add	r2,r5,r2
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  817170:	11c00017 	ldw	r7,0(r2)
      MLA(hi, lo, (*fo)[1], ptr[14]);
  817174:	22000117 	ldw	r8,4(r4)
  817178:	12400e17 	ldw	r9,56(r2)
      }

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  81717c:	30c07817 	ldw	r3,480(r6)
  817180:	d9c02715 	stw	r7,156(sp)
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
  817184:	11800c17 	ldw	r6,48(r2)
  817188:	21c00317 	ldw	r7,12(r4)

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
  81718c:	da002815 	stw	r8,160(sp)
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
  817190:	22000417 	ldw	r8,16(r4)

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
  817194:	da402915 	stw	r9,164(sp)
      MLA(hi, lo, (*fo)[2], ptr[12]);
  817198:	21400217 	ldw	r5,8(r4)
  81719c:	d9802a15 	stw	r6,168(sp)
  8171a0:	d9c02b15 	stw	r7,172(sp)
      MLA(hi, lo, (*fo)[3], ptr[10]);
  8171a4:	da002c15 	stw	r8,176(sp)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
  8171a8:	21c00517 	ldw	r7,20(r4)
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
  8171ac:	25c00717 	ldw	r23,28(r4)
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
  8171b0:	21800617 	ldw	r6,24(r4)
      }

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  8171b4:	da402717 	ldw	r9,156(sp)
      MLA(hi, lo, (*fo)[1], ptr[14]);
  8171b8:	d9002817 	ldw	r4,160(sp)
  8171bc:	da002917 	ldw	r8,164(sp)
      MLA(hi, lo, (*fo)[2], ptr[12]);
  8171c0:	17000a17 	ldw	fp,40(r2)
      }

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  8171c4:	1a47383a 	mul	r3,r3,r9
      MLA(hi, lo, (*fo)[1], ptr[14]);
  8171c8:	2225383a 	mul	r18,r4,r8
      MLA(hi, lo, (*fo)[2], ptr[12]);
  8171cc:	da402a17 	ldw	r9,168(sp)
  8171d0:	d9002b17 	ldw	r4,172(sp)
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
  8171d4:	15000617 	ldw	r20,24(r2)

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
  8171d8:	15800817 	ldw	r22,32(r2)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
  8171dc:	15400217 	ldw	r21,8(r2)

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
  8171e0:	da002c17 	ldw	r8,176(sp)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
  8171e4:	10800417 	ldw	r2,16(r2)
      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
  8171e8:	2a4b383a 	mul	r5,r5,r9
  8171ec:	2721383a 	mul	r16,r4,fp
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
  8171f0:	3d0f383a 	mul	r7,r7,r20

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
  8171f4:	4589383a 	mul	r4,r8,r22
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
  8171f8:	308d383a 	mul	r6,r6,r2
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
  8171fc:	bd45383a 	mul	r2,r23,r21
      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
  817200:	2c0b883a 	add	r5,r5,r16
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817204:	da400617 	ldw	r9,24(sp)

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
  817208:	1c87883a 	add	r3,r3,r18
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
  81720c:	29cb883a 	add	r5,r5,r7
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
  817210:	288b883a 	add	r5,r5,r2

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
  817214:	1907883a 	add	r3,r3,r4
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817218:	d8800317 	ldw	r2,12(sp)
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
  81721c:	1987883a 	add	r3,r3,r6
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
  817220:	1947883a 	add	r3,r3,r5
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817224:	4a400044 	addi	r9,r9,1
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
  817228:	00c7c83a 	sub	r3,zero,r3
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  81722c:	da400615 	stw	r9,24(sp)
  817230:	10802004 	addi	r2,r2,128
  817234:	d8800315 	stw	r2,12(sp)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
  817238:	1807d0ba 	srai	r3,r3,2
  81723c:	d9000217 	ldw	r4,8(sp)
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817240:	d9400c17 	ldw	r5,48(sp)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
  817244:	20fff115 	stw	r3,-60(r4)
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817248:	21002004 	addi	r4,r4,128
  81724c:	d9000215 	stw	r4,8(sp)
  817250:	2a400826 	beq	r5,r9,817274 <synth_full+0x6a4>
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
      pcm1 += 16;

      phase = (phase + 1) % 16;
  817254:	d9800817 	ldw	r6,32(sp)
  817258:	d9000317 	ldw	r4,12(sp)
  81725c:	30800044 	addi	r2,r6,1
  817260:	108003cc 	andi	r2,r2,15
  817264:	1011883a 	mov	r8,r2
  817268:	1013883a 	mov	r9,r2
  81726c:	d8800815 	stw	r2,32(sp)
  817270:	003e7e06 	br	816c6c <synth_full+0x9c>
  register mad_fixed_t (*fe)[8], (*fx)[8], (*fo)[8];
  register mad_fixed_t const (*Dptr)[32], *ptr;
  register mad_fixed64hi_t hi;
  register mad_fixed64lo_t lo;

  for (ch = 0; ch < nch; ++ch) {
  817274:	d9c00717 	ldw	r7,28(sp)
  817278:	da002f17 	ldw	r8,188(sp)
  81727c:	da400b17 	ldw	r9,44(sp)
  817280:	39c00044 	addi	r7,r7,1
  817284:	42020004 	addi	r8,r8,2048
  817288:	d9c00715 	stw	r7,28(sp)
  81728c:	da002f15 	stw	r8,188(sp)
  817290:	49fe631e 	bne	r9,r7,816c20 <synth_full+0x50>
      pcm1 += 16;

      phase = (phase + 1) % 16;
    }
  }
}
  817294:	dfc03f17 	ldw	ra,252(sp)
  817298:	df003e17 	ldw	fp,248(sp)
  81729c:	ddc03d17 	ldw	r23,244(sp)
  8172a0:	dd803c17 	ldw	r22,240(sp)
  8172a4:	dd403b17 	ldw	r21,236(sp)
  8172a8:	dd003a17 	ldw	r20,232(sp)
  8172ac:	dcc03917 	ldw	r19,228(sp)
  8172b0:	dc803817 	ldw	r18,224(sp)
  8172b4:	dc403717 	ldw	r17,220(sp)
  8172b8:	dc003617 	ldw	r16,216(sp)
  8172bc:	dec04004 	addi	sp,sp,256
  8172c0:	f800283a 	ret

008172c4 <synth_half>:
 * DESCRIPTION:	perform half frequency PCM synthesis
 */
static
void synth_half(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  8172c4:	deffbd04 	addi	sp,sp,-268
  8172c8:	dfc04215 	stw	ra,264(sp)
  8172cc:	df004115 	stw	fp,260(sp)
  8172d0:	ddc04015 	stw	r23,256(sp)
  8172d4:	dd803f15 	stw	r22,252(sp)
  8172d8:	dd403e15 	stw	r21,248(sp)
  8172dc:	dd003d15 	stw	r20,244(sp)
  8172e0:	dcc03c15 	stw	r19,240(sp)
  8172e4:	dc803b15 	stw	r18,236(sp)
  8172e8:	dc403a15 	stw	r17,232(sp)
  8172ec:	dc003915 	stw	r16,228(sp)
  8172f0:	d9800d15 	stw	r6,52(sp)
  8172f4:	d9000b15 	stw	r4,44(sp)
  8172f8:	d9400c15 	stw	r5,48(sp)
  8172fc:	d9c00e15 	stw	r7,56(sp)
  register mad_fixed_t (*fe)[8], (*fx)[8], (*fo)[8];
  register mad_fixed_t const (*Dptr)[32], *ptr;
  register mad_fixed64hi_t hi;
  register mad_fixed64lo_t lo;

  for (ch = 0; ch < nch; ++ch) {
  817300:	3001ac26 	beq	r6,zero,8179b4 <synth_half+0x6f0>
  817304:	3805003a 	cmpeq	r2,r7,zero
  817308:	d8000815 	stw	zero,32(sp)
  81730c:	d8803115 	stw	r2,196(sp)
  817310:	d9003215 	stw	r4,200(sp)
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
  817314:	d8c00b17 	ldw	r3,44(sp)
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817318:	d9003117 	ldw	r4,196(sp)
  register mad_fixed64lo_t lo;

  for (ch = 0; ch < nch; ++ch) {
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
  81731c:	18c40017 	ldw	r3,4096(r3)
  817320:	d8c00915 	stw	r3,36(sp)
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817324:	20019b1e 	bne	r4,zero,817994 <synth_half+0x6d0>

  for (ch = 0; ch < nch; ++ch) {
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];
  817328:	d9400817 	ldw	r5,32(sp)
  81732c:	d9800b17 	ldw	r6,44(sp)
  817330:	d9c00c17 	ldw	r7,48(sp)
  817334:	28848024 	muli	r2,r5,4608
  817338:	da000917 	ldw	r8,36(sp)
  81733c:	d8000715 	stw	zero,28(sp)
  817340:	10c00c04 	addi	r3,r2,48
  817344:	10840304 	addi	r2,r2,4108
  817348:	38c7883a 	add	r3,r7,r3
  81734c:	3085883a 	add	r2,r6,r2
  817350:	d8800015 	stw	r2,0(sp)
  817354:	d8c00215 	stw	r3,8(sp)
  817358:	1809883a 	mov	r4,r3

    for (s = 0; s < ns; ++s) {
      dct32((*sbsample)[s], phase >> 1,
  81735c:	4200004c 	andi	r8,r8,1
  817360:	d8800917 	ldw	r2,36(sp)
  817364:	4012927a 	slli	r9,r8,9
  817368:	d8c03217 	ldw	r3,200(sp)
  81736c:	100ad07a 	srli	r5,r2,1
  817370:	da000f15 	stw	r8,60(sp)
  817374:	48f9883a 	add	fp,r9,r3
  817378:	e00d883a 	mov	r6,fp
  81737c:	e1c10004 	addi	r7,fp,1024
  817380:	08156740 	call	815674 <dct32>
      po = ((phase - 1) & 0xf) | 1;

      /* calculate 16 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
  817384:	d9400917 	ldw	r5,36(sp)
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
  817388:	02002134 	movhi	r8,132
  81738c:	4236f704 	addi	r8,r8,-9252
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  817390:	01ffff84 	movi	r7,-2
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
  817394:	28bfffc4 	addi	r2,r5,-1
  817398:	108003cc 	andi	r2,r2,15
  81739c:	10800054 	ori	r2,r2,1
  8173a0:	1085883a 	add	r2,r2,r2
  8173a4:	1085883a 	add	r2,r2,r2
  8173a8:	4091883a 	add	r8,r8,r2
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  8173ac:	40c00e17 	ldw	r3,56(r8)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  8173b0:	29ce703a 	and	r7,r5,r7
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
  8173b4:	d8801015 	stw	r2,64(sp)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  8173b8:	40800017 	ldw	r2,0(r8)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  8173bc:	d9c01715 	stw	r7,92(sp)
  8173c0:	39cf883a 	add	r7,r7,r7
  8173c4:	39cf883a 	add	r7,r7,r7
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
  8173c8:	da000315 	stw	r8,12(sp)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  8173cc:	d8803315 	stw	r2,204(sp)
      MLA(hi, lo, (*fx)[1], ptr[14]);
  8173d0:	d8c03415 	stw	r3,208(sp)
      MLA(hi, lo, (*fx)[2], ptr[12]);
  8173d4:	40800a17 	ldw	r2,40(r8)
  8173d8:	40c00c17 	ldw	r3,48(r8)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  8173dc:	d9c01815 	stw	r7,96(sp)

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  8173e0:	41c00817 	ldw	r7,32(r8)
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  8173e4:	42000617 	ldw	r8,24(r8)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  8173e8:	da401817 	ldw	r9,96(sp)

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  8173ec:	d9c03515 	stw	r7,212(sp)
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  8173f0:	da003615 	stw	r8,216(sp)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
  8173f4:	02002134 	movhi	r8,132
  8173f8:	4236f704 	addi	r8,r8,-9252
  8173fc:	424f883a 	add	r7,r8,r9
      po = ((phase - 1) & 0xf) | 1;

      /* calculate 16 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
  817400:	0148303a 	nor	r4,zero,r5
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  817404:	da400317 	ldw	r9,12(sp)
      po = ((phase - 1) & 0xf) | 1;

      /* calculate 16 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
  817408:	2100004c 	andi	r4,r4,1
  81740c:	d9803217 	ldw	r6,200(sp)
  817410:	2008927a 	slli	r4,r4,9
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  817414:	4a400417 	ldw	r9,16(r9)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  817418:	da000317 	ldw	r8,12(sp)
      po = ((phase - 1) & 0xf) | 1;

      /* calculate 16 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
  81741c:	2189883a 	add	r4,r4,r6
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  817420:	21400017 	ldw	r5,0(r4)
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  817424:	42000217 	ldw	r8,8(r8)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  817428:	da403715 	stw	r9,220(sp)
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  81742c:	da403317 	ldw	r9,204(sp)
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  817430:	da003815 	stw	r8,224(sp)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  817434:	22000117 	ldw	r8,4(r4)
      fo = &(*filter)[1][~phase & 1][0];

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
  817438:	2a4b383a 	mul	r5,r5,r9
      MLA(hi, lo, (*fx)[1], ptr[14]);
  81743c:	da403417 	ldw	r9,208(sp)
      MLA(hi, lo, (*fx)[2], ptr[12]);
  817440:	25800317 	ldw	r22,12(r4)
  817444:	21800217 	ldw	r6,8(r4)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  817448:	4251383a 	mul	r8,r8,r9
      MLA(hi, lo, (*fx)[2], ptr[12]);
  81744c:	b0ad383a 	mul	r22,r22,r2
      MLA(hi, lo, (*fx)[3], ptr[10]);
  817450:	20800417 	ldw	r2,16(r4)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  817454:	da001115 	stw	r8,68(sp)
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  817458:	da003517 	ldw	r8,212(sp)
      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
  81745c:	dd801215 	stw	r22,72(sp)
  817460:	30cd383a 	mul	r6,r6,r3
      MLA(hi, lo, (*fx)[3], ptr[10]);
  817464:	1205383a 	mul	r2,r2,r8
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  817468:	e0c00017 	ldw	r3,0(fp)
      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
  81746c:	358d883a 	add	r6,r6,r22
      MLA(hi, lo, (*fx)[3], ptr[10]);
  817470:	d8801315 	stw	r2,76(sp)
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  817474:	22400517 	ldw	r9,20(r4)
  817478:	d8803617 	ldw	r2,216(sp)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  81747c:	22000617 	ldw	r8,24(r4)
      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
	++fe;
  817480:	e5c00804 	addi	r23,fp,32
      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  817484:	4893383a 	mul	r9,r9,r2
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
  817488:	e0800217 	ldw	r2,8(fp)
      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  81748c:	da401415 	stw	r9,80(sp)
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  817490:	da403717 	ldw	r9,220(sp)
  817494:	4251383a 	mul	r8,r8,r9
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  817498:	da403817 	ldw	r9,224(sp)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  81749c:	da001515 	stw	r8,84(sp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  8174a0:	22000717 	ldw	r8,28(r4)
  8174a4:	4251383a 	mul	r8,r8,r9
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  8174a8:	3a400017 	ldw	r9,0(r7)
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  8174ac:	da001615 	stw	r8,88(sp)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  8174b0:	da001117 	ldw	r8,68(sp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  8174b4:	1a47383a 	mul	r3,r3,r9
  8174b8:	3a400e17 	ldw	r9,56(r7)

      Dptr = &D[0];

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
  8174bc:	2a0b883a 	add	r5,r5,r8
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  8174c0:	e2000117 	ldw	r8,4(fp)
  8174c4:	4251383a 	mul	r8,r8,r9
      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  8174c8:	da401417 	ldw	r9,80(sp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  8174cc:	da001915 	stw	r8,100(sp)

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  8174d0:	da001317 	ldw	r8,76(sp)
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
  8174d4:	324d883a 	add	r6,r6,r9
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
  8174d8:	e2400317 	ldw	r9,12(fp)

      ptr = *Dptr + po;
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
  8174dc:	2a0b883a 	add	r5,r5,r8
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
  8174e0:	3a000c17 	ldw	r8,48(r7)
  8174e4:	1205383a 	mul	r2,r2,r8
      MLA(hi, lo, (*fe)[2], ptr[12]);
  8174e8:	3a000a17 	ldw	r8,40(r7)
  8174ec:	4a29383a 	mul	r20,r9,r8
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  8174f0:	da401517 	ldw	r9,84(sp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  8174f4:	da001617 	ldw	r8,88(sp)
      ML0(hi, lo, (*fx)[0], ptr[ 0]);
      MLA(hi, lo, (*fx)[1], ptr[14]);
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
  8174f8:	2a4b883a 	add	r5,r5,r9
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
  8174fc:	320d883a 	add	r6,r6,r8

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
  817500:	e2400417 	ldw	r9,16(fp)
  817504:	3a000817 	ldw	r8,32(r7)
      MLA(hi, lo, (*fx)[2], ptr[12]);
      MLA(hi, lo, (*fx)[3], ptr[10]);
      MLA(hi, lo, (*fx)[4], ptr[ 8]);
      MLA(hi, lo, (*fx)[5], ptr[ 6]);
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
  817508:	298b883a 	add	r5,r5,r6
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
  81750c:	1145c83a 	sub	r2,r2,r5
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
  817510:	4a23383a 	mul	r17,r9,r8
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
  817514:	e2400517 	ldw	r9,20(fp)
  817518:	3a000617 	ldw	r8,24(r7)

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
  81751c:	1445883a 	add	r2,r2,r17
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  817520:	d9400017 	ldw	r5,0(sp)
      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
  817524:	4a25383a 	mul	r18,r9,r8
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  817528:	da401917 	ldw	r9,100(sp)
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
  81752c:	e2000617 	ldw	r8,24(fp)
      MLA(hi, lo, (*fx)[6], ptr[ 4]);
      MLA(hi, lo, (*fx)[7], ptr[ 2]);
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
  817530:	1a47883a 	add	r3,r3,r9
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
  817534:	3a400417 	ldw	r9,16(r7)
      MLN(hi, lo);

      ptr = *Dptr + pe;
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
  817538:	1d07883a 	add	r3,r3,r20
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
  81753c:	1c87883a 	add	r3,r3,r18
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
  817540:	424d383a 	mul	r6,r8,r9
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
  817544:	e2000717 	ldw	r8,28(fp)
  817548:	3a400217 	ldw	r9,8(r7)
      MLA(hi, lo, (*fe)[0], ptr[ 0]);
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
  81754c:	1185883a 	add	r2,r2,r6
 * DESCRIPTION:	perform half frequency PCM synthesis
 */
static
void synth_half(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  817550:	3829883a 	mov	r20,r7
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
  817554:	425f383a 	mul	r15,r8,r9
 * DESCRIPTION:	perform half frequency PCM synthesis
 */
static
void synth_half(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  817558:	01c02134 	movhi	r7,132
  81755c:	39f6f704 	addi	r7,r7,-9252
	  MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	  *pcm2-- = SHIFT(MLZ(hi, lo));
	}

	++fo;
  817560:	27010804 	addi	fp,r4,1056
      MLA(hi, lo, (*fe)[1], ptr[14]);
      MLA(hi, lo, (*fe)[2], ptr[12]);
      MLA(hi, lo, (*fe)[3], ptr[10]);
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
  817564:	1bc7883a 	add	r3,r3,r15
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  817568:	10c5883a 	add	r2,r2,r3

      pcm2 = pcm1 + 14;
  81756c:	d8c00017 	ldw	r3,0(sp)
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  817570:	1005d0ba 	srai	r2,r2,2

      /* calculate 16 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];
  817574:	21010004 	addi	r4,r4,1024
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;
  817578:	18c00f04 	addi	r3,r3,60
  81757c:	d8c00415 	stw	r3,16(sp)
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  817580:	28800015 	stw	r2,0(r5)
 * DESCRIPTION:	perform half frequency PCM synthesis
 */
static
void synth_half(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  817584:	d9801817 	ldw	r6,96(sp)
  817588:	da401017 	ldw	r9,64(sp)
      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
	++fe;
  81758c:	dcc00317 	ldw	r19,12(sp)
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  817590:	2a000104 	addi	r8,r5,4

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
  817594:	00800084 	movi	r2,2
 * DESCRIPTION:	perform half frequency PCM synthesis
 */
static
void synth_half(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  817598:	39abc83a 	sub	r21,r7,r6

      /* calculate 16 samples */

      fe = &(*filter)[0][ phase & 1][0];
      fx = &(*filter)[0][~phase & 1][0];
      fo = &(*filter)[1][~phase & 1][0];
  81759c:	d9000115 	stw	r4,4(sp)
      MLA(hi, lo, (*fe)[4], ptr[ 8]);
      MLA(hi, lo, (*fe)[5], ptr[ 6]);
      MLA(hi, lo, (*fe)[6], ptr[ 4]);
      MLA(hi, lo, (*fe)[7], ptr[ 2]);

      *pcm1++ = SHIFT(MLZ(hi, lo));
  8175a0:	da000515 	stw	r8,20(sp)
 * DESCRIPTION:	perform half frequency PCM synthesis
 */
static
void synth_half(struct mad_synth *synth, struct mad_frame const *frame,
		unsigned int nch, unsigned int ns)
{
  8175a4:	3a6dc83a 	sub	r22,r7,r9

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
  8175a8:	d8800615 	stw	r2,24(sp)
	++fe;
	++Dptr;

	/* D[32 - sb][i] == -D[sb][31 - i] */

	if (!(sb & 1)) {
  8175ac:	d8c00617 	ldw	r3,24(sp)
      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
	++fe;
  8175b0:	bdc00804 	addi	r23,r23,32
	++Dptr;

	/* D[32 - sb][i] == -D[sb][31 - i] */

	if (!(sb & 1)) {
  8175b4:	1880004c 	andi	r2,r3,1
  8175b8:	1000a41e 	bne	r2,zero,81784c <synth_half+0x588>
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
  8175bc:	98c04a17 	ldw	r3,296(r19)

	/* D[32 - sb][i] == -D[sb][31 - i] */

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
  8175c0:	9a004017 	ldw	r8,256(r19)
  8175c4:	e1000017 	ldw	r4,0(fp)
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
  8175c8:	e1800317 	ldw	r6,12(fp)
	/* D[32 - sb][i] == -D[sb][31 - i] */

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
  8175cc:	9a404e17 	ldw	r9,312(r19)

	/* D[32 - sb][i] == -D[sb][31 - i] */

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
  8175d0:	2209383a 	mul	r4,r4,r8
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
  8175d4:	30cd383a 	mul	r6,r6,r3
	  MLA(hi, lo, (*fo)[3], ptr[10]);
  8175d8:	9a004817 	ldw	r8,288(r19)
  8175dc:	e0c00417 	ldw	r3,16(fp)
	/* D[32 - sb][i] == -D[sb][31 - i] */

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
  8175e0:	e1c00117 	ldw	r7,4(fp)
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
  8175e4:	9b804417 	ldw	r14,272(r19)
	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
  8175e8:	1a07383a 	mul	r3,r3,r8
	/* D[32 - sb][i] == -D[sb][31 - i] */

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
  8175ec:	3a4f383a 	mul	r7,r7,r9
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
  8175f0:	e2400517 	ldw	r9,20(fp)
	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
  8175f4:	d8c01a15 	stw	r3,104(sp)
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
  8175f8:	98c04617 	ldw	r3,280(r19)
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
  8175fc:	e2000617 	ldw	r8,24(fp)

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
  817600:	98804c17 	ldw	r2,304(r19)
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
  817604:	48d3383a 	mul	r9,r9,r3
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
  817608:	439d383a 	mul	r14,r8,r14

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
  81760c:	e1400217 	ldw	r5,8(fp)
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
  817610:	da401b15 	stw	r9,108(sp)
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
  817614:	9a004217 	ldw	r8,264(r19)
  817618:	e2400717 	ldw	r9,28(fp)

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
  81761c:	288b383a 	mul	r5,r5,r2
	/* D[32 - sb][i] == -D[sb][31 - i] */

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
  817620:	21c9883a 	add	r4,r4,r7
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
  817624:	4a13383a 	mul	r9,r9,r8

	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
  817628:	298b883a 	add	r5,r5,r6
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  81762c:	a1804417 	ldw	r6,272(r20)
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
  817630:	da401d15 	stw	r9,116(sp)
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  817634:	ba400617 	ldw	r9,24(r23)
	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
  817638:	da001a17 	ldw	r8,104(sp)
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
  81763c:	b8c00517 	ldw	r3,20(r23)
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  817640:	4993383a 	mul	r9,r9,r6
	if (!(sb & 1)) {
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
  817644:	2209883a 	add	r4,r4,r8
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
  817648:	a2004617 	ldw	r8,280(r20)
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  81764c:	da401e15 	stw	r9,120(sp)
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
  817650:	da401b17 	ldw	r9,108(sp)
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
  817654:	1a07383a 	mul	r3,r3,r8
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
  817658:	a2004817 	ldw	r8,288(r20)
	  ptr = *Dptr + po;
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
  81765c:	2a4b883a 	add	r5,r5,r9
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
  817660:	ba400417 	ldw	r9,16(r23)
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
  817664:	db801c15 	stw	r14,112(sp)
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  817668:	b8800717 	ldw	r2,28(r23)
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
  81766c:	4a13383a 	mul	r9,r9,r8
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  817670:	a3404217 	ldw	r13,264(r20)
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
  817674:	a3004a17 	ldw	r12,296(r20)
	  MLA(hi, lo, (*fe)[3], ptr[10]);
  817678:	a4804c17 	ldw	r18,304(r20)
	  MLA(hi, lo, (*fe)[2], ptr[12]);
  81767c:	b9c00117 	ldw	r7,4(r23)
	  MLA(hi, lo, (*fe)[1], ptr[14]);
  817680:	b9800017 	ldw	r6,0(r23)
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
  817684:	da401f15 	stw	r9,124(sp)
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
  817688:	da401d17 	ldw	r9,116(sp)

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
  81768c:	ba000317 	ldw	r8,12(r23)
	  ML0(hi, lo, (*fo)[0], ptr[ 0]);
	  MLA(hi, lo, (*fo)[1], ptr[14]);
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
  817690:	2389883a 	add	r4,r4,r14
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
  817694:	2a4b883a 	add	r5,r5,r9
	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
	  MLA(hi, lo, (*fe)[3], ptr[10]);
  817698:	ba400217 	ldw	r9,8(r23)

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
  81769c:	4319383a 	mul	r12,r8,r12
	  MLA(hi, lo, (*fo)[2], ptr[12]);
	  MLA(hi, lo, (*fo)[3], ptr[10]);
	  MLA(hi, lo, (*fo)[4], ptr[ 8]);
	  MLA(hi, lo, (*fo)[5], ptr[ 6]);
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
  8176a0:	2149883a 	add	r4,r4,r5
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
	  MLA(hi, lo, (*fe)[3], ptr[10]);
	  MLA(hi, lo, (*fe)[2], ptr[12]);
  8176a4:	a2004e17 	ldw	r8,312(r20)
	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
	  MLA(hi, lo, (*fe)[3], ptr[10]);
  8176a8:	4ca5383a 	mul	r18,r9,r18
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  8176ac:	d9401e17 	ldw	r5,120(sp)
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
	  MLA(hi, lo, (*fe)[3], ptr[10]);
	  MLA(hi, lo, (*fe)[2], ptr[12]);
	  MLA(hi, lo, (*fe)[1], ptr[14]);
  8176b0:	a2404017 	ldw	r9,256(r20)
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  8176b4:	1345383a 	mul	r2,r2,r13
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
  8176b8:	1907c83a 	sub	r3,r3,r4
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
  8176bc:	d9001f17 	ldw	r4,124(sp)
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
	  MLA(hi, lo, (*fe)[3], ptr[10]);
	  MLA(hi, lo, (*fe)[2], ptr[12]);
  8176c0:	3a0f383a 	mul	r7,r7,r8
	  MLA(hi, lo, (*fe)[1], ptr[14]);
  8176c4:	324d383a 	mul	r6,r6,r9
	  MLA(hi, lo, (*fo)[6], ptr[ 4]);
	  MLA(hi, lo, (*fo)[7], ptr[ 2]);
	  MLN(hi, lo);

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
  8176c8:	1145883a 	add	r2,r2,r5
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
  8176cc:	1105883a 	add	r2,r2,r4
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
  8176d0:	1b07883a 	add	r3,r3,r12
	  MLA(hi, lo, (*fe)[3], ptr[10]);
  8176d4:	1485883a 	add	r2,r2,r18
	  MLA(hi, lo, (*fe)[2], ptr[12]);
	  MLA(hi, lo, (*fe)[1], ptr[14]);
  8176d8:	1185883a 	add	r2,r2,r6
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
	  MLA(hi, lo, (*fe)[3], ptr[10]);
	  MLA(hi, lo, (*fe)[2], ptr[12]);
  8176dc:	19c7883a 	add	r3,r3,r7
	  MLA(hi, lo, (*fe)[1], ptr[14]);
	  MLA(hi, lo, (*fe)[0], ptr[ 0]);

	  *pcm1++ = SHIFT(MLZ(hi, lo));
  8176e0:	1887883a 	add	r3,r3,r2
  8176e4:	d9400517 	ldw	r5,20(sp)
  8176e8:	1807d0ba 	srai	r3,r3,2

	  ptr = *Dptr + pe;
	  MLA(hi, lo, (*fe)[7], ptr[ 2]);
	  MLA(hi, lo, (*fe)[6], ptr[ 4]);
	  MLA(hi, lo, (*fe)[5], ptr[ 6]);
	  MLA(hi, lo, (*fe)[4], ptr[ 8]);
  8176ec:	db002015 	stw	r12,128(sp)
	  MLA(hi, lo, (*fe)[3], ptr[10]);
  8176f0:	dc802115 	stw	r18,132(sp)
	  MLA(hi, lo, (*fe)[2], ptr[12]);
	  MLA(hi, lo, (*fe)[1], ptr[14]);
	  MLA(hi, lo, (*fe)[0], ptr[ 0]);

	  *pcm1++ = SHIFT(MLZ(hi, lo));
  8176f4:	28c00015 	stw	r3,0(r5)

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  8176f8:	b1c05917 	ldw	r7,356(r22)
  8176fc:	b1805717 	ldw	r6,348(r22)
  817700:	e0c00517 	ldw	r3,20(fp)
  817704:	e1000417 	ldw	r4,16(fp)
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  817708:	b2c05117 	ldw	r11,324(r22)
	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  81770c:	19c7383a 	mul	r3,r3,r7
  817710:	2189383a 	mul	r4,r4,r6
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  817714:	b1c05517 	ldw	r7,340(r22)
  817718:	e1800317 	ldw	r6,12(fp)
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
  81771c:	e2800017 	ldw	r10,0(fp)
  817720:	b4404f17 	ldw	r17,316(r22)

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  817724:	31cd383a 	mul	r6,r6,r7
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  817728:	b1c05317 	ldw	r7,332(r22)
	  MLA(hi, lo, (*fe)[0], ptr[ 0]);

	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
  81772c:	b2005d17 	ldw	r8,372(r22)
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  817730:	d9802215 	stw	r6,136(sp)
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  817734:	e1800217 	ldw	r6,8(fp)

	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  817738:	b2405b17 	ldw	r9,364(r22)
	  MLA(hi, lo, (*fe)[0], ptr[ 0]);

	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
  81773c:	e0800717 	ldw	r2,28(fp)
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  817740:	31cd383a 	mul	r6,r6,r7

	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  817744:	e1400617 	ldw	r5,24(fp)
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
  817748:	5455383a 	mul	r10,r10,r17
	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  81774c:	d9802315 	stw	r6,140(sp)
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  817750:	e1800117 	ldw	r6,4(fp)

	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  817754:	2a4b383a 	mul	r5,r5,r9
	  MLA(hi, lo, (*fe)[0], ptr[ 0]);

	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
  817758:	1205383a 	mul	r2,r2,r8
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  81775c:	32d7383a 	mul	r11,r6,r11
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);
  817760:	aa404f17 	ldw	r9,316(r21)

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
  817764:	ba000117 	ldw	r8,4(r23)
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  817768:	dac02415 	stw	r11,144(sp)
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
  81776c:	ac005117 	ldw	r16,324(r21)
	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
  817770:	1907883a 	add	r3,r3,r4
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
  817774:	da802515 	stw	r10,148(sp)
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);
  817778:	b9000017 	ldw	r4,0(r23)

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
  81777c:	4411383a 	mul	r8,r8,r16

	  *pcm1++ = SHIFT(MLZ(hi, lo));

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
  817780:	1145883a 	add	r2,r2,r5
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);
  817784:	2253383a 	mul	r9,r4,r9

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
  817788:	da002715 	stw	r8,156(sp)

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  81778c:	da002217 	ldw	r8,136(sp)
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);
  817790:	da402615 	stw	r9,152(sp)
	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  817794:	da402317 	ldw	r9,140(sp)

	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
  817798:	1205883a 	add	r2,r2,r8
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  81779c:	ba000217 	ldw	r8,8(r23)
	  ptr = *Dptr - po;
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
  8177a0:	1a47883a 	add	r3,r3,r9
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  8177a4:	aa405317 	ldw	r9,332(r21)
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  8177a8:	b9c00417 	ldw	r7,16(r23)
	  ML0(hi, lo, (*fo)[7], ptr[31 -  2]);
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
  8177ac:	12c5883a 	add	r2,r2,r11
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  8177b0:	4251383a 	mul	r8,r8,r9
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  8177b4:	aa405517 	ldw	r9,340(r21)
	  MLA(hi, lo, (*fo)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
  8177b8:	1a87883a 	add	r3,r3,r10
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  8177bc:	da002815 	stw	r8,160(sp)
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  8177c0:	ba000317 	ldw	r8,12(r23)
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  8177c4:	b9400617 	ldw	r5,24(r23)
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  8177c8:	b9000717 	ldw	r4,28(r23)
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  8177cc:	4251383a 	mul	r8,r8,r9
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);
  8177d0:	da402617 	ldw	r9,152(sp)
	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  8177d4:	b9800517 	ldw	r6,20(r23)
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  8177d8:	da002915 	stw	r8,164(sp)
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  8177dc:	aa005717 	ldw	r8,348(r21)
	  MLA(hi, lo, (*fo)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fo)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fo)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);
  8177e0:	1245883a 	add	r2,r2,r9
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  8177e4:	aa405b17 	ldw	r9,364(r21)

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  8177e8:	3a0f383a 	mul	r7,r7,r8
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
  8177ec:	da002717 	ldw	r8,156(sp)
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  8177f0:	abc05917 	ldw	r15,356(r21)
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  8177f4:	2a4b383a 	mul	r5,r5,r9
	  MLA(hi, lo, (*fo)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
  8177f8:	1a07883a 	add	r3,r3,r8
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  8177fc:	aa005d17 	ldw	r8,372(r21)
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  817800:	da402817 	ldw	r9,160(sp)
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  817804:	33cd383a 	mul	r6,r6,r15
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  817808:	2209383a 	mul	r4,r4,r8
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  81780c:	da002917 	ldw	r8,164(sp)
	  MLA(hi, lo, (*fo)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
  817810:	1245883a 	add	r2,r2,r9
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
  817814:	11c5883a 	add	r2,r2,r7
	  MLA(hi, lo, (*fo)[0], ptr[31 - 16]);

	  ptr = *Dptr - pe;
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
  817818:	1a07883a 	add	r3,r3,r8
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
  81781c:	1987883a 	add	r3,r3,r6
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
  817820:	1907883a 	add	r3,r3,r4
	  MLA(hi, lo, (*fe)[0], ptr[31 - 16]);
	  MLA(hi, lo, (*fe)[1], ptr[31 - 14]);
	  MLA(hi, lo, (*fe)[2], ptr[31 - 12]);
	  MLA(hi, lo, (*fe)[3], ptr[31 - 10]);
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
  817824:	1145883a 	add	r2,r2,r5
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	  *pcm2-- = SHIFT(MLZ(hi, lo));
  817828:	10c5883a 	add	r2,r2,r3
	  MLA(hi, lo, (*fe)[3], ptr[10]);
	  MLA(hi, lo, (*fe)[2], ptr[12]);
	  MLA(hi, lo, (*fe)[1], ptr[14]);
	  MLA(hi, lo, (*fe)[0], ptr[ 0]);

	  *pcm1++ = SHIFT(MLZ(hi, lo));
  81782c:	da400517 	ldw	r9,20(sp)
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	  *pcm2-- = SHIFT(MLZ(hi, lo));
  817830:	d8c00417 	ldw	r3,16(sp)
  817834:	1005d0ba 	srai	r2,r2,2
	  MLA(hi, lo, (*fe)[3], ptr[10]);
	  MLA(hi, lo, (*fe)[2], ptr[12]);
	  MLA(hi, lo, (*fe)[1], ptr[14]);
	  MLA(hi, lo, (*fe)[0], ptr[ 0]);

	  *pcm1++ = SHIFT(MLZ(hi, lo));
  817838:	4a400104 	addi	r9,r9,4
  81783c:	da400515 	stw	r9,20(sp)
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	  *pcm2-- = SHIFT(MLZ(hi, lo));
  817840:	18800015 	stw	r2,0(r3)
  817844:	18ffff04 	addi	r3,r3,-4
  817848:	d8c00415 	stw	r3,16(sp)

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
  81784c:	d9000617 	ldw	r4,24(sp)
  817850:	00800404 	movi	r2,16
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	  *pcm2-- = SHIFT(MLZ(hi, lo));
  817854:	9cc02004 	addi	r19,r19,128

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
  817858:	21000044 	addi	r4,r4,1
  81785c:	d9000615 	stw	r4,24(sp)
	  MLA(hi, lo, (*fe)[4], ptr[31 -  8]);
	  MLA(hi, lo, (*fe)[5], ptr[31 -  6]);
	  MLA(hi, lo, (*fe)[6], ptr[31 -  4]);
	  MLA(hi, lo, (*fe)[7], ptr[31 -  2]);

	  *pcm2-- = SHIFT(MLZ(hi, lo));
  817860:	a5002004 	addi	r20,r20,128
  817864:	b5802004 	addi	r22,r22,128
  817868:	ad402004 	addi	r21,r21,128
	}

	++fo;
  81786c:	e7000804 	addi	fp,fp,32

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
  817870:	20bf4e1e 	bne	r4,r2,8175ac <synth_half+0x2e8>
  817874:	d9c00117 	ldw	r7,4(sp)
	++fo;
      }

      ++Dptr;

      ptr = *Dptr + po;
  817878:	d9401017 	ldw	r5,64(sp)
  81787c:	01802134 	movhi	r6,132
  817880:	31b8f704 	addi	r6,r6,-7204

      *pcm1++ = SHIFT(MLZ(hi, lo));

      pcm2 = pcm1 + 14;

      for (sb = 1; sb < 16; ++sb) {
  817884:	38c07804 	addi	r3,r7,480
	++fo;
      }

      ++Dptr;

      ptr = *Dptr + po;
  817888:	2989883a 	add	r4,r5,r6
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  81788c:	22000017 	ldw	r8,0(r4)
      MLA(hi, lo, (*fo)[1], ptr[14]);
  817890:	1a400117 	ldw	r9,4(r3)
  817894:	21400e17 	ldw	r5,56(r4)
      }

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  817898:	da002a15 	stw	r8,168(sp)
      MLA(hi, lo, (*fo)[1], ptr[14]);
  81789c:	da402b15 	stw	r9,172(sp)
      MLA(hi, lo, (*fo)[2], ptr[12]);
  8178a0:	22000a17 	ldw	r8,40(r4)
      MLA(hi, lo, (*fo)[3], ptr[10]);
  8178a4:	1a400417 	ldw	r9,16(r3)
      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
  8178a8:	21800c17 	ldw	r6,48(r4)
      }

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  8178ac:	38807817 	ldw	r2,480(r7)
      MLA(hi, lo, (*fo)[1], ptr[14]);
  8178b0:	d9402c15 	stw	r5,176(sp)
      MLA(hi, lo, (*fo)[2], ptr[12]);
  8178b4:	19c00317 	ldw	r7,12(r3)
  8178b8:	da002f15 	stw	r8,188(sp)
      MLA(hi, lo, (*fo)[3], ptr[10]);
  8178bc:	da403015 	stw	r9,192(sp)

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
  8178c0:	da002b17 	ldw	r8,172(sp)
  8178c4:	da402c17 	ldw	r9,176(sp)
      MLA(hi, lo, (*fo)[2], ptr[12]);
  8178c8:	19400217 	ldw	r5,8(r3)
  8178cc:	d9802d15 	stw	r6,180(sp)
  8178d0:	d9c02e15 	stw	r7,184(sp)
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
  8178d4:	1f000717 	ldw	fp,28(r3)
      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
  8178d8:	19c00517 	ldw	r7,20(r3)
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
  8178dc:	19800617 	ldw	r6,24(r3)
      }

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  8178e0:	d8c02a17 	ldw	r3,168(sp)
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
  8178e4:	25c00817 	ldw	r23,32(r4)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
  8178e8:	25400617 	ldw	r21,24(r4)
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
  8178ec:	25800217 	ldw	r22,8(r4)
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
  8178f0:	25000417 	ldw	r20,16(r4)

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
  8178f4:	4249383a 	mul	r4,r8,r9
      MLA(hi, lo, (*fo)[2], ptr[12]);
  8178f8:	da002e17 	ldw	r8,184(sp)
  8178fc:	da402f17 	ldw	r9,188(sp)
      }

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
  817900:	10c5383a 	mul	r2,r2,r3
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
  817904:	d8c02d17 	ldw	r3,180(sp)
  817908:	4261383a 	mul	r16,r8,r9
      MLA(hi, lo, (*fo)[3], ptr[10]);
  81790c:	da003017 	ldw	r8,192(sp)
      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
  817910:	28cb383a 	mul	r5,r5,r3
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
  817914:	3d4f383a 	mul	r7,r7,r21

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
  817918:	45c7383a 	mul	r3,r8,r23
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
  81791c:	350d383a 	mul	r6,r6,r20
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
  817920:	e599383a 	mul	r12,fp,r22

      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
  817924:	1105883a 	add	r2,r2,r4
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817928:	da400717 	ldw	r9,28(sp)
      ++Dptr;

      ptr = *Dptr + po;
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
  81792c:	2c0b883a 	add	r5,r5,r16
      MLA(hi, lo, (*fo)[3], ptr[10]);
  817930:	10c5883a 	add	r2,r2,r3
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
  817934:	29cb883a 	add	r5,r5,r7
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
  817938:	2b0b883a 	add	r5,r5,r12
      ML0(hi, lo, (*fo)[0], ptr[ 0]);
      MLA(hi, lo, (*fo)[1], ptr[14]);
      MLA(hi, lo, (*fo)[2], ptr[12]);
      MLA(hi, lo, (*fo)[3], ptr[10]);
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
  81793c:	1185883a 	add	r2,r2,r6
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
  817940:	1145883a 	add	r2,r2,r5
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817944:	4a400044 	addi	r9,r9,1
  817948:	da400715 	stw	r9,28(sp)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
  81794c:	0085c83a 	sub	r2,zero,r2
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  817950:	d8c00217 	ldw	r3,8(sp)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
  817954:	1005d0ba 	srai	r2,r2,2
  817958:	d9000517 	ldw	r4,20(sp)
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  81795c:	d9400e17 	ldw	r5,56(sp)
  817960:	18c02004 	addi	r3,r3,128
  817964:	d8c00215 	stw	r3,8(sp)
      MLA(hi, lo, (*fo)[4], ptr[ 8]);
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
  817968:	20800015 	stw	r2,0(r4)
    sbsample = &frame->sbsample[ch];
    filter   = &synth->filter[ch];
    phase    = synth->phase;
    pcm1     = synth->pcm.samples[ch];

    for (s = 0; s < ns; ++s) {
  81796c:	2a400926 	beq	r5,r9,817994 <synth_half+0x6d0>
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
      pcm1 += 8;

      phase = (phase + 1) % 16;
  817970:	d9800917 	ldw	r6,36(sp)
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
      pcm1 += 8;
  817974:	21c00804 	addi	r7,r4,32
  817978:	d9000217 	ldw	r4,8(sp)

      phase = (phase + 1) % 16;
  81797c:	30800044 	addi	r2,r6,1
  817980:	108003cc 	andi	r2,r2,15
  817984:	1011883a 	mov	r8,r2
      MLA(hi, lo, (*fo)[5], ptr[ 6]);
      MLA(hi, lo, (*fo)[6], ptr[ 4]);
      MLA(hi, lo, (*fo)[7], ptr[ 2]);

      *pcm1 = SHIFT(-MLZ(hi, lo));
      pcm1 += 8;
  817988:	d9c00015 	stw	r7,0(sp)

      phase = (phase + 1) % 16;
  81798c:	d8800915 	stw	r2,36(sp)
  817990:	003e7206 	br	81735c <synth_half+0x98>
  register mad_fixed_t (*fe)[8], (*fx)[8], (*fo)[8];
  register mad_fixed_t const (*Dptr)[32], *ptr;
  register mad_fixed64hi_t hi;
  register mad_fixed64lo_t lo;

  for (ch = 0; ch < nch; ++ch) {
  817994:	da000817 	ldw	r8,32(sp)
  817998:	da403217 	ldw	r9,200(sp)
  81799c:	d8800d17 	ldw	r2,52(sp)
  8179a0:	42000044 	addi	r8,r8,1
  8179a4:	4a420004 	addi	r9,r9,2048
  8179a8:	da000815 	stw	r8,32(sp)
  8179ac:	da403215 	stw	r9,200(sp)
  8179b0:	123e581e 	bne	r2,r8,817314 <synth_half+0x50>
      pcm1 += 8;

      phase = (phase + 1) % 16;
    }
  }
}
  8179b4:	dfc04217 	ldw	ra,264(sp)
  8179b8:	df004117 	ldw	fp,260(sp)
  8179bc:	ddc04017 	ldw	r23,256(sp)
  8179c0:	dd803f17 	ldw	r22,252(sp)
  8179c4:	dd403e17 	ldw	r21,248(sp)
  8179c8:	dd003d17 	ldw	r20,244(sp)
  8179cc:	dcc03c17 	ldw	r19,240(sp)
  8179d0:	dc803b17 	ldw	r18,236(sp)
  8179d4:	dc403a17 	ldw	r17,232(sp)
  8179d8:	dc003917 	ldw	r16,228(sp)
  8179dc:	dec04304 	addi	sp,sp,268
  8179e0:	f800283a 	ret

008179e4 <mad_synth_frame>:
{
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  8179e4:	28800117 	ldw	r2,4(r5)
/*
 * NAME:	synth->frame()
 * DESCRIPTION:	perform PCM synthesis of frame subband samples
 */
void mad_synth_frame(struct mad_synth *synth, struct mad_frame const *frame)
{
  8179e8:	defffd04 	addi	sp,sp,-12
  8179ec:	dc000015 	stw	r16,0(sp)
  8179f0:	dfc00215 	stw	ra,8(sp)
  8179f4:	dc400115 	stw	r17,4(sp)
  8179f8:	2021883a 	mov	r16,r4
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  8179fc:	10002326 	beq	r2,zero,817a8c <mad_synth_frame+0xa8>
  ns  = MAD_NSBSAMPLES(&frame->header);
  817a00:	28c00017 	ldw	r3,0(r5)
{
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  817a04:	01800084 	movi	r6,2
  ns  = MAD_NSBSAMPLES(&frame->header);
  817a08:	00800044 	movi	r2,1
{
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  817a0c:	3009883a 	mov	r4,r6
  ns  = MAD_NSBSAMPLES(&frame->header);
  817a10:	18802326 	beq	r3,r2,817aa0 <mad_synth_frame+0xbc>
  817a14:	008000c4 	movi	r2,3
  817a18:	18802d26 	beq	r3,r2,817ad0 <mad_synth_frame+0xec>
  817a1c:	04400904 	movi	r17,36
  817a20:	00812004 	movi	r2,1152

  synth->pcm.samplerate = frame->header.samplerate;
  817a24:	28c00517 	ldw	r3,20(r5)
  synth->pcm.channels   = nch;
  synth->pcm.length     = 32 * ns;
  817a28:	8084028d 	sth	r2,4106(r16)

  nch = MAD_NCHANNELS(&frame->header);
  ns  = MAD_NSBSAMPLES(&frame->header);

  synth->pcm.samplerate = frame->header.samplerate;
  synth->pcm.channels   = nch;
  817a2c:	8104020d 	sth	r4,4104(r16)
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  ns  = MAD_NSBSAMPLES(&frame->header);

  synth->pcm.samplerate = frame->header.samplerate;
  817a30:	80c40115 	stw	r3,4100(r16)
  synth->pcm.channels   = nch;
  synth->pcm.length     = 32 * ns;

  synth_frame = synth_full;

  if (frame->options & MAD_OPTION_HALFSAMPLERATE) {
  817a34:	28800b17 	ldw	r2,44(r5)
  817a38:	1080008c 	andi	r2,r2,2
  817a3c:	10002126 	beq	r2,zero,817ac4 <mad_synth_frame+0xe0>
    synth->pcm.samplerate /= 2;
    synth->pcm.length     /= 2;
  817a40:	8084028b 	ldhu	r2,4106(r16)
  synth->pcm.length     = 32 * ns;

  synth_frame = synth_full;

  if (frame->options & MAD_OPTION_HALFSAMPLERATE) {
    synth->pcm.samplerate /= 2;
  817a44:	1806d07a 	srli	r3,r3,1
    synth->pcm.length     /= 2;
  817a48:	02002074 	movhi	r8,129
  817a4c:	421cb104 	addi	r8,r8,29380
  817a50:	1004d07a 	srli	r2,r2,1
  synth->pcm.length     = 32 * ns;

  synth_frame = synth_full;

  if (frame->options & MAD_OPTION_HALFSAMPLERATE) {
    synth->pcm.samplerate /= 2;
  817a54:	80c40115 	stw	r3,4100(r16)
    synth->pcm.length     /= 2;
  817a58:	8084028d 	sth	r2,4106(r16)

    synth_frame = synth_half;
  }

  synth_frame(synth, frame, nch, ns);
  817a5c:	8009883a 	mov	r4,r16
  817a60:	880f883a 	mov	r7,r17
  817a64:	403ee83a 	callr	r8

  synth->phase = (synth->phase + ns) % 16;
  817a68:	80840017 	ldw	r2,4096(r16)
  817a6c:	8885883a 	add	r2,r17,r2
  817a70:	108003cc 	andi	r2,r2,15
  817a74:	80840015 	stw	r2,4096(r16)
}
  817a78:	dfc00217 	ldw	ra,8(sp)
  817a7c:	dc400117 	ldw	r17,4(sp)
  817a80:	dc000017 	ldw	r16,0(sp)
  817a84:	dec00304 	addi	sp,sp,12
  817a88:	f800283a 	ret
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  ns  = MAD_NSBSAMPLES(&frame->header);
  817a8c:	28c00017 	ldw	r3,0(r5)
{
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  817a90:	01800044 	movi	r6,1
  ns  = MAD_NSBSAMPLES(&frame->header);
  817a94:	00800044 	movi	r2,1
{
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  817a98:	3009883a 	mov	r4,r6
  ns  = MAD_NSBSAMPLES(&frame->header);
  817a9c:	18bfdd1e 	bne	r3,r2,817a14 <mad_synth_frame+0x30>

  synth->pcm.samplerate = frame->header.samplerate;
  817aa0:	28c00517 	ldw	r3,20(r5)
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  ns  = MAD_NSBSAMPLES(&frame->header);
  817aa4:	00806004 	movi	r2,384

  synth->pcm.samplerate = frame->header.samplerate;
  synth->pcm.channels   = nch;
  synth->pcm.length     = 32 * ns;
  817aa8:	8084028d 	sth	r2,4106(r16)
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  ns  = MAD_NSBSAMPLES(&frame->header);

  synth->pcm.samplerate = frame->header.samplerate;
  817aac:	80c40115 	stw	r3,4100(r16)
  synth->pcm.channels   = nch;
  synth->pcm.length     = 32 * ns;

  synth_frame = synth_full;

  if (frame->options & MAD_OPTION_HALFSAMPLERATE) {
  817ab0:	28800b17 	ldw	r2,44(r5)
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  ns  = MAD_NSBSAMPLES(&frame->header);
  817ab4:	04400304 	movi	r17,12

  synth->pcm.samplerate = frame->header.samplerate;
  synth->pcm.channels   = nch;
  817ab8:	8104020d 	sth	r4,4104(r16)
  synth->pcm.length     = 32 * ns;

  synth_frame = synth_full;

  if (frame->options & MAD_OPTION_HALFSAMPLERATE) {
  817abc:	1080008c 	andi	r2,r2,2
  817ac0:	103fdf1e 	bne	r2,zero,817a40 <mad_synth_frame+0x5c>
  817ac4:	02002074 	movhi	r8,129
  817ac8:	421af404 	addi	r8,r8,27600
  817acc:	003fe306 	br	817a5c <mad_synth_frame+0x78>
  unsigned int nch, ns;
  void (*synth_frame)(struct mad_synth *, struct mad_frame const *,
		      unsigned int, unsigned int);

  nch = MAD_NCHANNELS(&frame->header);
  ns  = MAD_NSBSAMPLES(&frame->header);
  817ad0:	28800717 	ldw	r2,28(r5)
  817ad4:	1084000c 	andi	r2,r2,4096
  817ad8:	103fd026 	beq	r2,zero,817a1c <mad_synth_frame+0x38>
  817adc:	04400484 	movi	r17,18
  817ae0:	00809004 	movi	r2,576
  817ae4:	003fcf06 	br	817a24 <mad_synth_frame+0x40>

00817ae8 <mad_synth_init>:
/*
 * NAME:	synth->init()
 * DESCRIPTION:	initialize synth struct
 */
void mad_synth_init(struct mad_synth *synth)
{
  817ae8:	000f883a 	mov	r7,zero
void mad_synth_mute(struct mad_synth *synth)
{
  unsigned int ch, s, v;

  for (ch = 0; ch < 2; ++ch) {
    for (s = 0; s < 16; ++s) {
  817aec:	380492fa 	slli	r2,r7,11
  817af0:	000d883a 	mov	r6,zero
  817af4:	2087883a 	add	r3,r4,r2
  817af8:	180b883a 	mov	r5,r3
      for (v = 0; v < 8; ++v) {
	synth->filter[ch][0][0][s][v] = synth->filter[ch][0][1][s][v] =
  817afc:	18018015 	stw	zero,1536(r3)
  817b00:	18010015 	stw	zero,1024(r3)
  817b04:	18008015 	stw	zero,512(r3)
  817b08:	28000015 	stw	zero,0(r5)
void mad_synth_mute(struct mad_synth *synth)
{
  unsigned int ch, s, v;

  for (ch = 0; ch < 2; ++ch) {
    for (s = 0; s < 16; ++s) {
  817b0c:	31800044 	addi	r6,r6,1
  817b10:	00800404 	movi	r2,16
      for (v = 0; v < 8; ++v) {
	synth->filter[ch][0][0][s][v] = synth->filter[ch][0][1][s][v] =
  817b14:	18018115 	stw	zero,1540(r3)
  817b18:	18010115 	stw	zero,1028(r3)
  817b1c:	18008115 	stw	zero,516(r3)
  817b20:	18000115 	stw	zero,4(r3)
  817b24:	18018215 	stw	zero,1544(r3)
  817b28:	18010215 	stw	zero,1032(r3)
  817b2c:	18008215 	stw	zero,520(r3)
  817b30:	18000215 	stw	zero,8(r3)
  817b34:	18018315 	stw	zero,1548(r3)
  817b38:	18010315 	stw	zero,1036(r3)
  817b3c:	18008315 	stw	zero,524(r3)
  817b40:	18000315 	stw	zero,12(r3)
  817b44:	18018415 	stw	zero,1552(r3)
  817b48:	18010415 	stw	zero,1040(r3)
  817b4c:	18008415 	stw	zero,528(r3)
  817b50:	18000415 	stw	zero,16(r3)
  817b54:	18018515 	stw	zero,1556(r3)
  817b58:	18010515 	stw	zero,1044(r3)
  817b5c:	18008515 	stw	zero,532(r3)
  817b60:	18000515 	stw	zero,20(r3)
  817b64:	18018615 	stw	zero,1560(r3)
  817b68:	18010615 	stw	zero,1048(r3)
  817b6c:	18008615 	stw	zero,536(r3)
  817b70:	18000615 	stw	zero,24(r3)
  817b74:	18018715 	stw	zero,1564(r3)
  817b78:	18010715 	stw	zero,1052(r3)
  817b7c:	18008715 	stw	zero,540(r3)
  817b80:	18000715 	stw	zero,28(r3)
void mad_synth_mute(struct mad_synth *synth)
{
  unsigned int ch, s, v;

  for (ch = 0; ch < 2; ++ch) {
    for (s = 0; s < 16; ++s) {
  817b84:	29400804 	addi	r5,r5,32
  817b88:	18c00804 	addi	r3,r3,32
  817b8c:	30bfdb1e 	bne	r6,r2,817afc <mad_synth_init+0x14>
 */
void mad_synth_mute(struct mad_synth *synth)
{
  unsigned int ch, s, v;

  for (ch = 0; ch < 2; ++ch) {
  817b90:	39c00044 	addi	r7,r7,1
  817b94:	00800084 	movi	r2,2
  817b98:	38bfd41e 	bne	r7,r2,817aec <mad_synth_init+0x4>

  synth->phase = 0;

  synth->pcm.samplerate = 0;
  synth->pcm.channels   = 0;
  synth->pcm.length     = 0;
  817b9c:	2004028d 	sth	zero,4106(r4)
 */
void mad_synth_init(struct mad_synth *synth)
{
  mad_synth_mute(synth);

  synth->phase = 0;
  817ba0:	20040015 	stw	zero,4096(r4)

  synth->pcm.samplerate = 0;
  817ba4:	20040115 	stw	zero,4100(r4)
  synth->pcm.channels   = 0;
  817ba8:	2004020d 	sth	zero,4104(r4)
  synth->pcm.length     = 0;
}
  817bac:	f800283a 	ret

00817bb0 <mad_timer_compare>:
 */
int mad_timer_compare(mad_timer_t timer1, mad_timer_t timer2)
{
  signed long diff;

  diff = timer1.seconds - timer2.seconds;
  817bb0:	2189c83a 	sub	r4,r4,r6
  if (diff < 0)
  817bb4:	20000616 	blt	r4,zero,817bd0 <mad_timer_compare+0x20>
    return -1;
  else if (diff > 0)
    return +1;

  diff = timer1.fraction - timer2.fraction;
  817bb8:	29d1c83a 	sub	r8,r5,r7
  signed long diff;

  diff = timer1.seconds - timer2.seconds;
  if (diff < 0)
    return -1;
  else if (diff > 0)
  817bbc:	00800044 	movi	r2,1
  817bc0:	20000126 	beq	r4,zero,817bc8 <mad_timer_compare+0x18>
    return -1;
  else if (diff > 0)
    return +1;

  return 0;
}
  817bc4:	f800283a 	ret
    return -1;
  else if (diff > 0)
    return +1;

  diff = timer1.fraction - timer2.fraction;
  if (diff < 0)
  817bc8:	4004c03a 	cmpne	r2,r8,zero
  817bcc:	403ffd0e 	bge	r8,zero,817bc4 <mad_timer_compare+0x14>
  817bd0:	00bfffc4 	movi	r2,-1
    return -1;
  else if (diff > 0)
    return +1;

  return 0;
}
  817bd4:	f800283a 	ret

00817bd8 <mad_timer_negate>:
 * NAME:	timer->negate()
 * DESCRIPTION:	invert the sign of a timer
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;
  817bd8:	20800017 	ldw	r2,0(r4)
/*
 * NAME:	timer->negate()
 * DESCRIPTION:	invert the sign of a timer
 */
void mad_timer_negate(mad_timer_t *timer)
{
  817bdc:	200b883a 	mov	r5,r4
  timer->seconds = -timer->seconds;

  if (timer->fraction) {
  817be0:	21000117 	ldw	r4,4(r4)
 * NAME:	timer->negate()
 * DESCRIPTION:	invert the sign of a timer
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;
  817be4:	0085c83a 	sub	r2,zero,r2

  if (timer->fraction) {
    timer->seconds -= 1;
    timer->fraction = MAD_TIMER_RESOLUTION - timer->fraction;
  817be8:	00c541f4 	movhi	r3,5383
  817bec:	18d34004 	addi	r3,r3,19712
  817bf0:	1907c83a 	sub	r3,r3,r4
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;

  if (timer->fraction) {
    timer->seconds -= 1;
  817bf4:	11bfffc4 	addi	r6,r2,-1
 * NAME:	timer->negate()
 * DESCRIPTION:	invert the sign of a timer
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;
  817bf8:	28800015 	stw	r2,0(r5)

  if (timer->fraction) {
  817bfc:	20000226 	beq	r4,zero,817c08 <mad_timer_negate+0x30>
    timer->seconds -= 1;
    timer->fraction = MAD_TIMER_RESOLUTION - timer->fraction;
  817c00:	28c00115 	stw	r3,4(r5)
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;

  if (timer->fraction) {
    timer->seconds -= 1;
  817c04:	29800015 	stw	r6,0(r5)
  817c08:	f800283a 	ret

00817c0c <mad_timer_abs>:
/*
 * NAME:	timer->abs()
 * DESCRIPTION:	return the absolute value of a timer
 */
mad_timer_t mad_timer_abs(mad_timer_t timer)
{
  817c0c:	2807883a 	mov	r3,r5
  817c10:	2011883a 	mov	r8,r4
  if (timer.seconds < 0)
  817c14:	20000216 	blt	r4,zero,817c20 <mad_timer_abs+0x14>
    mad_timer_negate(&timer);

  return timer;
}
  817c18:	4005883a 	mov	r2,r8
  817c1c:	f800283a 	ret
 * NAME:	timer->negate()
 * DESCRIPTION:	invert the sign of a timer
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;
  817c20:	0111c83a 	sub	r8,zero,r4

  if (timer->fraction) {
  817c24:	283ffc26 	beq	r5,zero,817c18 <mad_timer_abs+0xc>
    timer->seconds -= 1;
    timer->fraction = MAD_TIMER_RESOLUTION - timer->fraction;
  817c28:	008541f4 	movhi	r2,5383
  817c2c:	10934004 	addi	r2,r2,19712
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;

  if (timer->fraction) {
    timer->seconds -= 1;
  817c30:	423fffc4 	addi	r8,r8,-1
    timer->fraction = MAD_TIMER_RESOLUTION - timer->fraction;
  817c34:	1147c83a 	sub	r3,r2,r5
{
  if (timer.seconds < 0)
    mad_timer_negate(&timer);

  return timer;
}
  817c38:	4005883a 	mov	r2,r8
  817c3c:	f800283a 	ret

00817c40 <mad_timer_add>:
/*
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  817c40:	defffc04 	addi	sp,sp,-16
  timer->seconds  += incr.seconds;
  817c44:	21c00017 	ldw	r7,0(r4)
/*
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  817c48:	dc400115 	stw	r17,4(sp)
  817c4c:	2023883a 	mov	r17,r4
  timer->seconds  += incr.seconds;
  timer->fraction += incr.fraction;
  817c50:	21000117 	ldw	r4,4(r4)
/*
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  817c54:	2805883a 	mov	r2,r5
  817c58:	dc800215 	stw	r18,8(sp)
  817c5c:	dc000015 	stw	r16,0(sp)
  timer->seconds  += incr.seconds;
  817c60:	38a5883a 	add	r18,r7,r2
  timer->fraction += incr.fraction;
  817c64:	21a1883a 	add	r16,r4,r6

  if (timer->fraction >= MAD_TIMER_RESOLUTION)
  817c68:	008541f4 	movhi	r2,5383
  817c6c:	10933fc4 	addi	r2,r2,19711
/*
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  817c70:	dfc00315 	stw	ra,12(sp)
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  817c74:	014541f4 	movhi	r5,5383
  817c78:	29534004 	addi	r5,r5,19712
  817c7c:	8009883a 	mov	r4,r16
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  timer->seconds  += incr.seconds;
  817c80:	8c800015 	stw	r18,0(r17)
  timer->fraction += incr.fraction;
  817c84:	8c000115 	stw	r16,4(r17)

  if (timer->fraction >= MAD_TIMER_RESOLUTION)
  817c88:	1400082e 	bgeu	r2,r16,817cac <mad_timer_add+0x6c>
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  817c8c:	0820c080 	call	820c08 <__udivsi3>
  817c90:	9085883a 	add	r2,r18,r2
  817c94:	88800015 	stw	r2,0(r17)
  timer->fraction %= MAD_TIMER_RESOLUTION;
  817c98:	8009883a 	mov	r4,r16
  817c9c:	014541f4 	movhi	r5,5383
  817ca0:	29534004 	addi	r5,r5,19712
  817ca4:	0820c100 	call	820c10 <__umodsi3>
  817ca8:	88800115 	stw	r2,4(r17)
  timer->seconds  += incr.seconds;
  timer->fraction += incr.fraction;

  if (timer->fraction >= MAD_TIMER_RESOLUTION)
    reduce_timer(timer);
}
  817cac:	dfc00317 	ldw	ra,12(sp)
  817cb0:	dc800217 	ldw	r18,8(sp)
  817cb4:	dc400117 	ldw	r17,4(sp)
  817cb8:	dc000017 	ldw	r16,0(sp)
  817cbc:	dec00404 	addi	sp,sp,16
  817cc0:	f800283a 	ret

00817cc4 <mad_timer_multiply>:
/*
 * NAME:	timer->multiply()
 * DESCRIPTION:	multiply a timer by a scalar value
 */
void mad_timer_multiply(mad_timer_t *timer, signed long scalar)
{
  817cc4:	defff804 	addi	sp,sp,-32
  817cc8:	dd000415 	stw	r20,16(sp)
  817ccc:	dfc00715 	stw	ra,28(sp)
  817cd0:	dd800615 	stw	r22,24(sp)
  817cd4:	dd400515 	stw	r21,20(sp)
  817cd8:	dcc00315 	stw	r19,12(sp)
  817cdc:	dc800215 	stw	r18,8(sp)
  817ce0:	dc400115 	stw	r17,4(sp)
  817ce4:	dc000015 	stw	r16,0(sp)
  817ce8:	2029883a 	mov	r20,r4
  mad_timer_t addend;
  unsigned long factor;

  factor = scalar;
  if (scalar < 0) {
  817cec:	28003c16 	blt	r5,zero,817de0 <mad_timer_multiply+0x11c>
  817cf0:	24c00017 	ldw	r19,0(r4)
  817cf4:	24400117 	ldw	r17,4(r4)
void mad_timer_multiply(mad_timer_t *timer, signed long scalar)
{
  mad_timer_t addend;
  unsigned long factor;

  factor = scalar;
  817cf8:	282b883a 	mov	r21,r5
    factor = -scalar;
    mad_timer_negate(timer);
  }

  addend = *timer;
  *timer = mad_timer_zero;
  817cfc:	00802134 	movhi	r2,132
  817d00:	1082df04 	addi	r2,r2,2940
  817d04:	10c00017 	ldw	r3,0(r2)
  817d08:	d0a00317 	ldw	r2,-32756(gp)
  if (scalar < 0) {
    factor = -scalar;
    mad_timer_negate(timer);
  }

  addend = *timer;
  817d0c:	8821883a 	mov	r16,r17
  *timer = mad_timer_zero;
  817d10:	a0c00115 	stw	r3,4(r20)
  817d14:	a0800015 	stw	r2,0(r20)
  if (scalar < 0) {
    factor = -scalar;
    mad_timer_negate(timer);
  }

  addend = *timer;
  817d18:	9825883a 	mov	r18,r19
  *timer = mad_timer_zero;

  while (factor) {
  817d1c:	a8002626 	beq	r21,zero,817db8 <mad_timer_multiply+0xf4>
  817d20:	058541f4 	movhi	r22,5383
  817d24:	b5933fc4 	addi	r22,r22,19711
    if (factor & 1)
  817d28:	a880004c 	andi	r2,r21,1
  817d2c:	1005003a 	cmpeq	r2,r2,zero
      mad_timer_add(timer, addend);

    mad_timer_add(&addend, addend);
    factor >>= 1;
  817d30:	a82ad07a 	srli	r21,r21,1

  addend = *timer;
  *timer = mad_timer_zero;

  while (factor) {
    if (factor & 1)
  817d34:	1000121e 	bne	r2,zero,817d80 <mad_timer_multiply+0xbc>
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  timer->seconds  += incr.seconds;
  817d38:	a4c00017 	ldw	r19,0(r20)
  timer->fraction += incr.fraction;
  817d3c:	a0800117 	ldw	r2,4(r20)
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  817d40:	014541f4 	movhi	r5,5383
  817d44:	29534004 	addi	r5,r5,19712
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  timer->seconds  += incr.seconds;
  817d48:	9ca7883a 	add	r19,r19,r18
  timer->fraction += incr.fraction;
  817d4c:	80a3883a 	add	r17,r16,r2
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  817d50:	8809883a 	mov	r4,r17
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  timer->seconds  += incr.seconds;
  817d54:	a4c00015 	stw	r19,0(r20)
  timer->fraction += incr.fraction;
  817d58:	a4400115 	stw	r17,4(r20)

  if (timer->fraction >= MAD_TIMER_RESOLUTION)
  817d5c:	b440082e 	bgeu	r22,r17,817d80 <mad_timer_multiply+0xbc>
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  817d60:	0820c080 	call	820c08 <__udivsi3>
  817d64:	9885883a 	add	r2,r19,r2
  817d68:	a0800015 	stw	r2,0(r20)
  timer->fraction %= MAD_TIMER_RESOLUTION;
  817d6c:	8809883a 	mov	r4,r17
  817d70:	014541f4 	movhi	r5,5383
  817d74:	29534004 	addi	r5,r5,19712
  817d78:	0820c100 	call	820c10 <__umodsi3>
  817d7c:	a0800115 	stw	r2,4(r20)
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  timer->seconds  += incr.seconds;
  timer->fraction += incr.fraction;
  817d80:	8421883a 	add	r16,r16,r16
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  817d84:	014541f4 	movhi	r5,5383
  817d88:	29534004 	addi	r5,r5,19712
  817d8c:	8009883a 	mov	r4,r16
 * NAME:	timer->add()
 * DESCRIPTION:	add one timer to another
 */
void mad_timer_add(mad_timer_t *timer, mad_timer_t incr)
{
  timer->seconds  += incr.seconds;
  817d90:	94a5883a 	add	r18,r18,r18
  timer->fraction += incr.fraction;

  if (timer->fraction >= MAD_TIMER_RESOLUTION)
  817d94:	b400072e 	bgeu	r22,r16,817db4 <mad_timer_multiply+0xf0>
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  817d98:	0820c080 	call	820c08 <__udivsi3>
  timer->fraction %= MAD_TIMER_RESOLUTION;
  817d9c:	8009883a 	mov	r4,r16
  817da0:	014541f4 	movhi	r5,5383
  817da4:	29534004 	addi	r5,r5,19712
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  817da8:	90a5883a 	add	r18,r18,r2
  timer->fraction %= MAD_TIMER_RESOLUTION;
  817dac:	0820c100 	call	820c10 <__umodsi3>
  817db0:	1021883a 	mov	r16,r2
  }

  addend = *timer;
  *timer = mad_timer_zero;

  while (factor) {
  817db4:	a83fdc1e 	bne	r21,zero,817d28 <mad_timer_multiply+0x64>
      mad_timer_add(timer, addend);

    mad_timer_add(&addend, addend);
    factor >>= 1;
  }
}
  817db8:	dfc00717 	ldw	ra,28(sp)
  817dbc:	dd800617 	ldw	r22,24(sp)
  817dc0:	dd400517 	ldw	r21,20(sp)
  817dc4:	dd000417 	ldw	r20,16(sp)
  817dc8:	dcc00317 	ldw	r19,12(sp)
  817dcc:	dc800217 	ldw	r18,8(sp)
  817dd0:	dc400117 	ldw	r17,4(sp)
  817dd4:	dc000017 	ldw	r16,0(sp)
  817dd8:	dec00804 	addi	sp,sp,32
  817ddc:	f800283a 	ret
 * NAME:	timer->negate()
 * DESCRIPTION:	invert the sign of a timer
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;
  817de0:	24c00017 	ldw	r19,0(r4)

  if (timer->fraction) {
  817de4:	24400117 	ldw	r17,4(r4)
  mad_timer_t addend;
  unsigned long factor;

  factor = scalar;
  if (scalar < 0) {
    factor = -scalar;
  817de8:	016bc83a 	sub	r21,zero,r5
 * NAME:	timer->negate()
 * DESCRIPTION:	invert the sign of a timer
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;
  817dec:	04e7c83a 	sub	r19,zero,r19
  817df0:	24c00015 	stw	r19,0(r4)

  if (timer->fraction) {
  817df4:	883fc126 	beq	r17,zero,817cfc <mad_timer_multiply+0x38>
    timer->seconds -= 1;
    timer->fraction = MAD_TIMER_RESOLUTION - timer->fraction;
  817df8:	008541f4 	movhi	r2,5383
  817dfc:	10934004 	addi	r2,r2,19712
  817e00:	1463c83a 	sub	r17,r2,r17
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;

  if (timer->fraction) {
    timer->seconds -= 1;
  817e04:	9cffffc4 	addi	r19,r19,-1
  817e08:	24c00015 	stw	r19,0(r4)
    timer->fraction = MAD_TIMER_RESOLUTION - timer->fraction;
  817e0c:	24400115 	stw	r17,4(r4)
  817e10:	003fba06 	br	817cfc <mad_timer_multiply+0x38>

00817e14 <scale_rational>:
 * DESCRIPTION:	solve numer/denom == ?/scale avoiding overflowing
 */
static
unsigned long scale_rational(unsigned long numer, unsigned long denom,
			     unsigned long scale)
{
  817e14:	defffa04 	addi	sp,sp,-24
  817e18:	dd000415 	stw	r20,16(sp)
  817e1c:	dcc00315 	stw	r19,12(sp)
  817e20:	dc000015 	stw	r16,0(sp)
  817e24:	dfc00515 	stw	ra,20(sp)
  817e28:	dc800215 	stw	r18,8(sp)
  817e2c:	dc400115 	stw	r17,4(sp)
  817e30:	2821883a 	mov	r16,r5
  817e34:	2027883a 	mov	r19,r4
  817e38:	3029883a 	mov	r20,r6
static
unsigned long gcd(unsigned long num1, unsigned long num2)
{
  unsigned long tmp;

  while (num2) {
  817e3c:	28005626 	beq	r5,zero,817f98 <scale_rational+0x184>
  817e40:	2823883a 	mov	r17,r5
  817e44:	00000206 	br	817e50 <scale_rational+0x3c>
  817e48:	8809883a 	mov	r4,r17
  817e4c:	1023883a 	mov	r17,r2
    tmp  = num2;
    num2 = num1 % num2;
  817e50:	880b883a 	mov	r5,r17
  817e54:	0820c100 	call	820c10 <__umodsi3>
static
unsigned long gcd(unsigned long num1, unsigned long num2)
{
  unsigned long tmp;

  while (num2) {
  817e58:	103ffb1e 	bne	r2,zero,817e48 <scale_rational+0x34>
{
  unsigned long factor;

  factor = gcd(*numer, *denom);

  assert(factor != 0);
  817e5c:	88005226 	beq	r17,zero,817fa8 <scale_rational+0x194>

  *numer /= factor;
  *denom /= factor;
  817e60:	8009883a 	mov	r4,r16
  817e64:	880b883a 	mov	r5,r17
  817e68:	0820c080 	call	820c08 <__udivsi3>
  817e6c:	1025883a 	mov	r18,r2
static
unsigned long gcd(unsigned long num1, unsigned long num2)
{
  unsigned long tmp;

  while (num2) {
  817e70:	10004b26 	beq	r2,zero,817fa0 <scale_rational+0x18c>
  817e74:	1021883a 	mov	r16,r2
  817e78:	a009883a 	mov	r4,r20
  817e7c:	00000206 	br	817e88 <scale_rational+0x74>
  817e80:	8009883a 	mov	r4,r16
  817e84:	1021883a 	mov	r16,r2
    tmp  = num2;
    num2 = num1 % num2;
  817e88:	800b883a 	mov	r5,r16
  817e8c:	0820c100 	call	820c10 <__umodsi3>
static
unsigned long gcd(unsigned long num1, unsigned long num2)
{
  unsigned long tmp;

  while (num2) {
  817e90:	103ffb1e 	bne	r2,zero,817e80 <scale_rational+0x6c>
{
  unsigned long factor;

  factor = gcd(*numer, *denom);

  assert(factor != 0);
  817e94:	80004426 	beq	r16,zero,817fa8 <scale_rational+0x194>

  *numer /= factor;
  *denom /= factor;
  817e98:	9009883a 	mov	r4,r18
  817e9c:	800b883a 	mov	r5,r16
  817ea0:	0820c080 	call	820c08 <__udivsi3>
  817ea4:	1025883a 	mov	r18,r2
			     unsigned long scale)
{
  reduce_rational(&numer, &denom);
  reduce_rational(&scale, &denom);

  assert(denom != 0);
  817ea8:	10003f26 	beq	r2,zero,817fa8 <scale_rational+0x194>

  factor = gcd(*numer, *denom);

  assert(factor != 0);

  *numer /= factor;
  817eac:	9809883a 	mov	r4,r19
  817eb0:	880b883a 	mov	r5,r17
  817eb4:	0820c080 	call	820c08 <__udivsi3>
  817eb8:	a009883a 	mov	r4,r20
  817ebc:	800b883a 	mov	r5,r16
  817ec0:	1027883a 	mov	r19,r2
  817ec4:	0820c080 	call	820c08 <__udivsi3>
  817ec8:	1023883a 	mov	r17,r2
  reduce_rational(&numer, &denom);
  reduce_rational(&scale, &denom);

  assert(denom != 0);

  if (denom < scale)
  817ecc:	90801436 	bltu	r18,r2,817f20 <scale_rational+0x10c>
    return numer * (scale / denom) + numer * (scale % denom) / denom;
  if (denom < numer)
  817ed0:	94c0262e 	bgeu	r18,r19,817f6c <scale_rational+0x158>
    return scale * (numer / denom) + scale * (numer % denom) / denom;
  817ed4:	9809883a 	mov	r4,r19
  817ed8:	900b883a 	mov	r5,r18
  817edc:	0820c080 	call	820c08 <__udivsi3>
  817ee0:	9809883a 	mov	r4,r19
  817ee4:	900b883a 	mov	r5,r18
  817ee8:	88a1383a 	mul	r16,r17,r2
  817eec:	0820c100 	call	820c10 <__umodsi3>
  817ef0:	8889383a 	mul	r4,r17,r2
  817ef4:	900b883a 	mov	r5,r18
  817ef8:	0820c080 	call	820c08 <__udivsi3>
  817efc:	8085883a 	add	r2,r16,r2

  return numer * scale / denom;
}
  817f00:	dfc00517 	ldw	ra,20(sp)
  817f04:	dd000417 	ldw	r20,16(sp)
  817f08:	dcc00317 	ldw	r19,12(sp)
  817f0c:	dc800217 	ldw	r18,8(sp)
  817f10:	dc400117 	ldw	r17,4(sp)
  817f14:	dc000017 	ldw	r16,0(sp)
  817f18:	dec00604 	addi	sp,sp,24
  817f1c:	f800283a 	ret
  reduce_rational(&scale, &denom);

  assert(denom != 0);

  if (denom < scale)
    return numer * (scale / denom) + numer * (scale % denom) / denom;
  817f20:	900b883a 	mov	r5,r18
  817f24:	1009883a 	mov	r4,r2
  817f28:	0820c080 	call	820c08 <__udivsi3>
  817f2c:	8809883a 	mov	r4,r17
  817f30:	900b883a 	mov	r5,r18
  817f34:	98a1383a 	mul	r16,r19,r2
  817f38:	0820c100 	call	820c10 <__umodsi3>
  817f3c:	9889383a 	mul	r4,r19,r2
  817f40:	900b883a 	mov	r5,r18
  817f44:	0820c080 	call	820c08 <__udivsi3>
  817f48:	8085883a 	add	r2,r16,r2
  if (denom < numer)
    return scale * (numer / denom) + scale * (numer % denom) / denom;

  return numer * scale / denom;
}
  817f4c:	dfc00517 	ldw	ra,20(sp)
  817f50:	dd000417 	ldw	r20,16(sp)
  817f54:	dcc00317 	ldw	r19,12(sp)
  817f58:	dc800217 	ldw	r18,8(sp)
  817f5c:	dc400117 	ldw	r17,4(sp)
  817f60:	dc000017 	ldw	r16,0(sp)
  817f64:	dec00604 	addi	sp,sp,24
  817f68:	f800283a 	ret
  if (denom < scale)
    return numer * (scale / denom) + numer * (scale % denom) / denom;
  if (denom < numer)
    return scale * (numer / denom) + scale * (numer % denom) / denom;

  return numer * scale / denom;
  817f6c:	9889383a 	mul	r4,r19,r2
  817f70:	900b883a 	mov	r5,r18
  817f74:	0820c080 	call	820c08 <__udivsi3>
}
  817f78:	dfc00517 	ldw	ra,20(sp)
  817f7c:	dd000417 	ldw	r20,16(sp)
  817f80:	dcc00317 	ldw	r19,12(sp)
  817f84:	dc800217 	ldw	r18,8(sp)
  817f88:	dc400117 	ldw	r17,4(sp)
  817f8c:	dc000017 	ldw	r16,0(sp)
  817f90:	dec00604 	addi	sp,sp,24
  817f94:	f800283a 	ret
static
unsigned long gcd(unsigned long num1, unsigned long num2)
{
  unsigned long tmp;

  while (num2) {
  817f98:	2023883a 	mov	r17,r4
  817f9c:	003faf06 	br	817e5c <scale_rational+0x48>
  817fa0:	a021883a 	mov	r16,r20
  817fa4:	003fbb06 	br	817e94 <scale_rational+0x80>
			     unsigned long scale)
{
  reduce_rational(&numer, &denom);
  reduce_rational(&scale, &denom);

  assert(denom != 0);
  817fa8:	08215400 	call	821540 <abort>

00817fac <mad_timer_fraction>:
/*
 * NAME:	timer->fraction()
 * DESCRIPTION:	return fractional part of timer in arbitrary terms
 */
unsigned long mad_timer_fraction(mad_timer_t timer, unsigned long denom)
{
  817fac:	deffff04 	addi	sp,sp,-4
  817fb0:	2005883a 	mov	r2,r4
  817fb4:	dfc00015 	stw	ra,0(sp)
  817fb8:	2809883a 	mov	r4,r5
 * NAME:	timer->abs()
 * DESCRIPTION:	return the absolute value of a timer
 */
mad_timer_t mad_timer_abs(mad_timer_t timer)
{
  if (timer.seconds < 0)
  817fbc:	10000f16 	blt	r2,zero,817ffc <mad_timer_fraction+0x50>
 */
unsigned long mad_timer_fraction(mad_timer_t timer, unsigned long denom)
{
  timer = mad_timer_abs(timer);

  switch (denom) {
  817fc0:	30000626 	beq	r6,zero,817fdc <mad_timer_fraction+0x30>
  817fc4:	014541f4 	movhi	r5,5383
  817fc8:	29534004 	addi	r5,r5,19712
  817fcc:	31401526 	beq	r6,r5,818024 <mad_timer_fraction+0x78>
    return timer.fraction;

  default:
    return scale_rational(timer.fraction, MAD_TIMER_RESOLUTION, denom);
  }
}
  817fd0:	dfc00017 	ldw	ra,0(sp)
  817fd4:	dec00104 	addi	sp,sp,4

  case MAD_TIMER_RESOLUTION:
    return timer.fraction;

  default:
    return scale_rational(timer.fraction, MAD_TIMER_RESOLUTION, denom);
  817fd8:	0817e141 	jmpi	817e14 <scale_rational>
{
  timer = mad_timer_abs(timer);

  switch (denom) {
  case 0:
    return timer.fraction ?
  817fdc:	20000c26 	beq	r4,zero,818010 <mad_timer_fraction+0x64>
  817fe0:	200b883a 	mov	r5,r4
  817fe4:	010541f4 	movhi	r4,5383
  817fe8:	21134004 	addi	r4,r4,19712
  817fec:	0820c080 	call	820c08 <__udivsi3>
    return timer.fraction;

  default:
    return scale_rational(timer.fraction, MAD_TIMER_RESOLUTION, denom);
  }
}
  817ff0:	dfc00017 	ldw	ra,0(sp)
  817ff4:	dec00104 	addi	sp,sp,4
  817ff8:	f800283a 	ret
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;

  if (timer->fraction) {
  817ffc:	283ff026 	beq	r5,zero,817fc0 <mad_timer_fraction+0x14>
    timer->seconds -= 1;
    timer->fraction = MAD_TIMER_RESOLUTION - timer->fraction;
  818000:	008541f4 	movhi	r2,5383
  818004:	10934004 	addi	r2,r2,19712
  818008:	1149c83a 	sub	r4,r2,r5
  81800c:	003fec06 	br	817fc0 <mad_timer_fraction+0x14>
{
  timer = mad_timer_abs(timer);

  switch (denom) {
  case 0:
    return timer.fraction ?
  818010:	008541f4 	movhi	r2,5383
  818014:	10934044 	addi	r2,r2,19713
    return timer.fraction;

  default:
    return scale_rational(timer.fraction, MAD_TIMER_RESOLUTION, denom);
  }
}
  818018:	dfc00017 	ldw	ra,0(sp)
  81801c:	dec00104 	addi	sp,sp,4
  818020:	f800283a 	ret
 */
unsigned long mad_timer_fraction(mad_timer_t timer, unsigned long denom)
{
  timer = mad_timer_abs(timer);

  switch (denom) {
  818024:	2005883a 	mov	r2,r4
    return timer.fraction;

  default:
    return scale_rational(timer.fraction, MAD_TIMER_RESOLUTION, denom);
  }
}
  818028:	dfc00017 	ldw	ra,0(sp)
  81802c:	dec00104 	addi	sp,sp,4
  818030:	f800283a 	ret

00818034 <mad_timer_set>:
 * NAME:	timer->set()
 * DESCRIPTION:	set timer to specific (positive) value
 */
void mad_timer_set(mad_timer_t *timer, unsigned long seconds,
		   unsigned long numer, unsigned long denom)
{
  818034:	defffb04 	addi	sp,sp,-20
  818038:	dc400315 	stw	r17,12(sp)
  81803c:	2023883a 	mov	r17,r4
  818040:	dc000215 	stw	r16,8(sp)
  818044:	dfc00415 	stw	ra,16(sp)
  818048:	2821883a 	mov	r16,r5
  timer->seconds = seconds;
  81804c:	89400015 	stw	r5,0(r17)
  if (numer >= denom && denom > 0) {
  818050:	31c01536 	bltu	r6,r7,8180a8 <mad_timer_set+0x74>
  818054:	3800061e 	bne	r7,zero,818070 <mad_timer_set+0x3c>
  }

  switch (denom) {
  case 0:
  case 1:
    timer->fraction = 0;
  818058:	88000115 	stw	zero,4(r17)
    break;
  }

  if (timer->fraction >= MAD_TIMER_RESOLUTION)
    reduce_timer(timer);
}
  81805c:	dfc00417 	ldw	ra,16(sp)
  818060:	dc400317 	ldw	r17,12(sp)
  818064:	dc000217 	ldw	r16,8(sp)
  818068:	dec00504 	addi	sp,sp,20
  81806c:	f800283a 	ret
void mad_timer_set(mad_timer_t *timer, unsigned long seconds,
		   unsigned long numer, unsigned long denom)
{
  timer->seconds = seconds;
  if (numer >= denom && denom > 0) {
    timer->seconds += numer / denom;
  818070:	3009883a 	mov	r4,r6
  818074:	380b883a 	mov	r5,r7
  818078:	d9800015 	stw	r6,0(sp)
  81807c:	d9c00115 	stw	r7,4(sp)
  818080:	0820c080 	call	820c08 <__udivsi3>
    numer %= denom;
  818084:	d9800017 	ldw	r6,0(sp)
  818088:	d9c00117 	ldw	r7,4(sp)
void mad_timer_set(mad_timer_t *timer, unsigned long seconds,
		   unsigned long numer, unsigned long denom)
{
  timer->seconds = seconds;
  if (numer >= denom && denom > 0) {
    timer->seconds += numer / denom;
  81808c:	8085883a 	add	r2,r16,r2
    numer %= denom;
  818090:	3009883a 	mov	r4,r6
  818094:	380b883a 	mov	r5,r7
void mad_timer_set(mad_timer_t *timer, unsigned long seconds,
		   unsigned long numer, unsigned long denom)
{
  timer->seconds = seconds;
  if (numer >= denom && denom > 0) {
    timer->seconds += numer / denom;
  818098:	88800015 	stw	r2,0(r17)
    numer %= denom;
  81809c:	0820c100 	call	820c10 <__umodsi3>
  8180a0:	d9c00117 	ldw	r7,4(sp)
  8180a4:	100d883a 	mov	r6,r2
  }

  switch (denom) {
  8180a8:	008fa004 	movi	r2,16000
  8180ac:	38801626 	beq	r7,r2,818108 <mad_timer_set+0xd4>
  8180b0:	11c00f2e 	bgeu	r2,r7,8180f0 <mad_timer_set+0xbc>
  8180b4:	009f4004 	movi	r2,32000
  8180b8:	38802a26 	beq	r7,r2,818164 <mad_timer_set+0x130>
  8180bc:	11c03e36 	bltu	r2,r7,8181b8 <mad_timer_set+0x184>
  8180c0:	00958884 	movi	r2,22050
  8180c4:	38805226 	beq	r7,r2,818210 <mad_timer_set+0x1dc>
  8180c8:	00977004 	movi	r2,24000
  8180cc:	38804c26 	beq	r7,r2,818200 <mad_timer_set+0x1cc>
  case 48000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 48000);
    break;

  default:
    timer->fraction = scale_rational(numer, denom, MAD_TIMER_RESOLUTION);
  8180d0:	3009883a 	mov	r4,r6
  8180d4:	380b883a 	mov	r5,r7
  8180d8:	018541f4 	movhi	r6,5383
  8180dc:	31934004 	addi	r6,r6,19712
  8180e0:	0817e140 	call	817e14 <scale_rational>
  8180e4:	1021883a 	mov	r16,r2
  8180e8:	88800115 	stw	r2,4(r17)
  8180ec:	00000906 	br	818114 <mad_timer_set+0xe0>
  if (numer >= denom && denom > 0) {
    timer->seconds += numer / denom;
    numer %= denom;
  }

  switch (denom) {
  8180f0:	0080fa04 	movi	r2,1000
  8180f4:	38801f26 	beq	r7,r2,818174 <mad_timer_set+0x140>
  8180f8:	11c02436 	bltu	r2,r7,81818c <mad_timer_set+0x158>
  8180fc:	00800044 	movi	r2,1
  818100:	11fff336 	bltu	r2,r7,8180d0 <mad_timer_set+0x9c>
  818104:	003fd406 	br	818058 <mad_timer_set+0x24>
  case 12000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 12000);
    break;

  case 16000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 16000);
  818108:	309588a4 	muli	r2,r6,22050
  81810c:	88800115 	stw	r2,4(r17)
  818110:	1021883a 	mov	r16,r2
  default:
    timer->fraction = scale_rational(numer, denom, MAD_TIMER_RESOLUTION);
    break;
  }

  if (timer->fraction >= MAD_TIMER_RESOLUTION)
  818114:	008541f4 	movhi	r2,5383
  818118:	10933fc4 	addi	r2,r2,19711
  81811c:	143fcf2e 	bgeu	r2,r16,81805c <mad_timer_set+0x28>
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  818120:	8009883a 	mov	r4,r16
  818124:	014541f4 	movhi	r5,5383
  818128:	29534004 	addi	r5,r5,19712
  81812c:	0820c080 	call	820c08 <__udivsi3>
  818130:	88c00017 	ldw	r3,0(r17)
  timer->fraction %= MAD_TIMER_RESOLUTION;
  818134:	8009883a 	mov	r4,r16
  818138:	014541f4 	movhi	r5,5383
  81813c:	29534004 	addi	r5,r5,19712
 * DESCRIPTION:	carry timer fraction into seconds
 */
static
void reduce_timer(mad_timer_t *timer)
{
  timer->seconds  += timer->fraction / MAD_TIMER_RESOLUTION;
  818140:	1887883a 	add	r3,r3,r2
  818144:	88c00015 	stw	r3,0(r17)
  timer->fraction %= MAD_TIMER_RESOLUTION;
  818148:	0820c100 	call	820c10 <__umodsi3>
  81814c:	88800115 	stw	r2,4(r17)
    break;
  }

  if (timer->fraction >= MAD_TIMER_RESOLUTION)
    reduce_timer(timer);
}
  818150:	dfc00417 	ldw	ra,16(sp)
  818154:	dc400317 	ldw	r17,12(sp)
  818158:	dc000217 	ldw	r16,8(sp)
  81815c:	dec00504 	addi	sp,sp,20
  818160:	f800283a 	ret
  case 24000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 24000);
    break;

  case 32000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 32000);
  818164:	308ac464 	muli	r2,r6,11025
  818168:	1021883a 	mov	r16,r2
  81816c:	88800115 	stw	r2,4(r17)
  818170:	003fe806 	br	818114 <mad_timer_set+0xe0>
  case MAD_TIMER_RESOLUTION:
    timer->fraction = numer;
    break;

  case 1000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION /  1000);
  818174:	00800174 	movhi	r2,5
  818178:	10988804 	addi	r2,r2,25120
  81817c:	3085383a 	mul	r2,r6,r2
  818180:	1021883a 	mov	r16,r2
  818184:	88800115 	stw	r2,4(r17)
  818188:	003fe206 	br	818114 <mad_timer_set+0xe0>
  if (numer >= denom && denom > 0) {
    timer->seconds += numer / denom;
    numer %= denom;
  }

  switch (denom) {
  81818c:	008ac444 	movi	r2,11025
  818190:	38802726 	beq	r7,r2,818230 <mad_timer_set+0x1fc>
  818194:	008bb804 	movi	r2,12000
  818198:	38801526 	beq	r7,r2,8181f0 <mad_timer_set+0x1bc>
  81819c:	0087d004 	movi	r2,8000
  8181a0:	38bfcb1e 	bne	r7,r2,8180d0 <mad_timer_set+0x9c>
  case 1000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION /  1000);
    break;

  case 8000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION /  8000);
  8181a4:	00ab1114 	movui	r2,44100
  8181a8:	3085383a 	mul	r2,r6,r2
  8181ac:	1021883a 	mov	r16,r2
  8181b0:	88800115 	stw	r2,4(r17)
  8181b4:	003fd706 	br	818114 <mad_timer_set+0xe0>
  if (numer >= denom && denom > 0) {
    timer->seconds += numer / denom;
    numer %= denom;
  }

  switch (denom) {
  8181b8:	00aee014 	movui	r2,48000
  8181bc:	38801826 	beq	r7,r2,818220 <mad_timer_set+0x1ec>
  8181c0:	008541f4 	movhi	r2,5383
  8181c4:	10934004 	addi	r2,r2,19712
  8181c8:	38800626 	beq	r7,r2,8181e4 <mad_timer_set+0x1b0>
  8181cc:	00ab1114 	movui	r2,44100
  8181d0:	38bfbf1e 	bne	r7,r2,8180d0 <mad_timer_set+0x9c>
  case 32000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 32000);
    break;

  case 44100:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 44100);
  8181d4:	3087d024 	muli	r2,r6,8000
  8181d8:	1021883a 	mov	r16,r2
  8181dc:	88800115 	stw	r2,4(r17)
  8181e0:	003fcc06 	br	818114 <mad_timer_set+0xe0>
  8181e4:	3021883a 	mov	r16,r6
  case 1:
    timer->fraction = 0;
    break;

  case MAD_TIMER_RESOLUTION:
    timer->fraction = numer;
  8181e8:	89800115 	stw	r6,4(r17)
  8181ec:	003fc906 	br	818114 <mad_timer_set+0xe0>
  case 11025:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 11025);
    break;

  case 12000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 12000);
  8181f0:	309cb624 	muli	r2,r6,29400
  8181f4:	1021883a 	mov	r16,r2
  8181f8:	88800115 	stw	r2,4(r17)
  8181fc:	003fc506 	br	818114 <mad_timer_set+0xe0>
  case 22050:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 22050);
    break;

  case 24000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 24000);
  818200:	308e5b24 	muli	r2,r6,14700
  818204:	1021883a 	mov	r16,r2
  818208:	88800115 	stw	r2,4(r17)
  81820c:	003fc106 	br	818114 <mad_timer_set+0xe0>
  case 16000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 16000);
    break;

  case 22050:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 22050);
  818210:	308fa024 	muli	r2,r6,16000
  818214:	1021883a 	mov	r16,r2
  818218:	88800115 	stw	r2,4(r17)
  81821c:	003fbd06 	br	818114 <mad_timer_set+0xe0>
  case 44100:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 44100);
    break;

  case 48000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 48000);
  818220:	30872da4 	muli	r2,r6,7350
  818224:	1021883a 	mov	r16,r2
  818228:	88800115 	stw	r2,4(r17)
  81822c:	003fb906 	br	818114 <mad_timer_set+0xe0>
  case 8000:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION /  8000);
    break;

  case 11025:
    timer->fraction = numer * (MAD_TIMER_RESOLUTION / 11025);
  818230:	309f4024 	muli	r2,r6,32000
  818234:	1021883a 	mov	r16,r2
  818238:	88800115 	stw	r2,4(r17)
  81823c:	003fb506 	br	818114 <mad_timer_set+0xe0>

00818240 <mad_timer_count>:
/*
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  818240:	defffc04 	addi	sp,sp,-16
  818244:	200f883a 	mov	r7,r4
  switch (units) {
  818248:	00800c04 	movi	r2,48
/*
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  81824c:	dc400115 	stw	r17,4(sp)
  818250:	dc000015 	stw	r16,0(sp)
  818254:	dfc00315 	stw	ra,12(sp)
  818258:	dc800215 	stw	r18,8(sp)
  81825c:	3021883a 	mov	r16,r6
  818260:	2809883a 	mov	r4,r5
  818264:	3823883a 	mov	r17,r7
  switch (units) {
  818268:	30802126 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  81826c:	1180140e 	bge	r2,r6,8182c0 <mad_timer_count+0x80>
  818270:	008ac444 	movi	r2,11025
  818274:	30801e26 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  818278:	11802a0e 	bge	r2,r6,818324 <mad_timer_count+0xe4>
  81827c:	00977004 	movi	r2,24000
  818280:	30801b26 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  818284:	11807b0e 	bge	r2,r6,818474 <mad_timer_count+0x234>
  818288:	00ab1114 	movui	r2,44100
  81828c:	30801826 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  818290:	00aee014 	movui	r2,48000
  818294:	30801626 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  818298:	009f4004 	movi	r2,32000
  81829c:	30801426 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  8182a0:	0023883a 	mov	r17,zero
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  }

  /* unsupported units */
  return 0;
}
  8182a4:	8805883a 	mov	r2,r17
  8182a8:	dfc00317 	ldw	ra,12(sp)
  8182ac:	dc800217 	ldw	r18,8(sp)
  8182b0:	dc400117 	ldw	r17,4(sp)
  8182b4:	dc000017 	ldw	r16,0(sp)
  8182b8:	dec00404 	addi	sp,sp,16
  8182bc:	f800283a 	ret
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  8182c0:	00bfff84 	movi	r2,-2
  8182c4:	30804b26 	beq	r6,r2,8183f4 <mad_timer_count+0x1b4>
  8182c8:	1180210e 	bge	r2,r6,818350 <mad_timer_count+0x110>
  8182cc:	00800284 	movi	r2,10
  8182d0:	30800726 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  8182d4:	11805d0e 	bge	r2,r6,81844c <mad_timer_count+0x20c>
  8182d8:	00800604 	movi	r2,24
  8182dc:	30bff016 	blt	r6,r2,8182a0 <mad_timer_count+0x60>
  8182e0:	00800644 	movi	r2,25
  8182e4:	1180020e 	bge	r2,r6,8182f0 <mad_timer_count+0xb0>
  8182e8:	00800784 	movi	r2,30
  8182ec:	30bfec1e 	bne	r6,r2,8182a0 <mad_timer_count+0x60>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  8182f0:	014541f4 	movhi	r5,5383
  8182f4:	29534004 	addi	r5,r5,19712
  8182f8:	800d883a 	mov	r6,r16
  8182fc:	0817e140 	call	817e14 <scale_rational>
  818300:	8447383a 	mul	r3,r16,r17
  818304:	18a3883a 	add	r17,r3,r2
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  }

  /* unsupported units */
  return 0;
}
  818308:	8805883a 	mov	r2,r17
  81830c:	dfc00317 	ldw	ra,12(sp)
  818310:	dc800217 	ldw	r18,8(sp)
  818314:	dc400117 	ldw	r17,4(sp)
  818318:	dc000017 	ldw	r16,0(sp)
  81831c:	dec00404 	addi	sp,sp,16
  818320:	f800283a 	ret
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818324:	008012c4 	movi	r2,75
  818328:	30bff126 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  81832c:	1180590e 	bge	r2,r6,818494 <mad_timer_count+0x254>
  818330:	0080fa04 	movi	r2,1000
  818334:	30bfee26 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  818338:	0087d004 	movi	r2,8000
  81833c:	30bfec26 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  818340:	00801904 	movi	r2,100
  818344:	30bfea26 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  818348:	0023883a 	mov	r17,zero
  81834c:	003fd506 	br	8182a4 <mad_timer_count+0x64>
  818350:	00bff404 	movi	r2,-48
  818354:	30800726 	beq	r6,r2,818374 <mad_timer_count+0x134>
  818358:	1180400e 	bge	r2,r6,81845c <mad_timer_count+0x21c>
  81835c:	00bff884 	movi	r2,-30
  818360:	30800426 	beq	r6,r2,818374 <mad_timer_count+0x134>
  818364:	30bfce16 	blt	r6,r2,8182a0 <mad_timer_count+0x60>
  818368:	30c00644 	addi	r3,r6,25
  81836c:	00800044 	movi	r2,1
  818370:	10ffcb36 	bltu	r2,r3,8182a0 <mad_timer_count+0x60>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  818374:	0425c83a 	sub	r18,zero,r16
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818378:	00800c04 	movi	r2,48
  81837c:	90800b26 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818380:	14804a0e 	bge	r2,r18,8184ac <mad_timer_count+0x26c>
  818384:	008ac444 	movi	r2,11025
  818388:	90800826 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  81838c:	14809f16 	blt	r2,r18,81860c <mad_timer_count+0x3cc>
  818390:	008012c4 	movi	r2,75
  818394:	90800526 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818398:	1480f316 	blt	r2,r18,818768 <mad_timer_count+0x528>
  81839c:	00800c84 	movi	r2,50
  8183a0:	90800226 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  8183a4:	00800f04 	movi	r2,60
  8183a8:	90bfbd1e 	bne	r18,r2,8182a0 <mad_timer_count+0x60>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  8183ac:	014541f4 	movhi	r5,5383
  8183b0:	29534004 	addi	r5,r5,19712
  8183b4:	900d883a 	mov	r6,r18
  8183b8:	0817e140 	call	817e14 <scale_rational>
  8183bc:	9447383a 	mul	r3,r18,r17
  8183c0:	1887883a 	add	r3,r3,r2
  8183c4:	18c0fa24 	muli	r3,r3,1000
  8183c8:	008003c4 	movi	r2,15
  8183cc:	18c0fa04 	addi	r3,r3,1000
  8183d0:	1900fa54 	ori	r4,r3,1001
  8183d4:	11006b36 	bltu	r2,r4,818584 <mad_timer_count+0x344>
  8183d8:	1804913a 	slli	r2,r3,4
  8183dc:	00c02134 	movhi	r3,132
  8183e0:	18fbb104 	addi	r3,r3,-4412
  8183e4:	1080fa54 	ori	r2,r2,1001
  8183e8:	10c5883a 	add	r2,r2,r3
  8183ec:	14400003 	ldbu	r17,0(r2)
  8183f0:	003fc506 	br	818308 <mad_timer_count+0xc8>
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  case MAD_UNITS_HOURS:
    return timer.seconds / 60 / 60;
  8183f4:	38c38414 	ori	r3,r7,3600
  8183f8:	008003c4 	movi	r2,15
  8183fc:	10c00e36 	bltu	r2,r3,818438 <mad_timer_count+0x1f8>
  818400:	3804913a 	slli	r2,r7,4
  818404:	00c02134 	movhi	r3,132
  818408:	18fbb104 	addi	r3,r3,-4412
  81840c:	10838414 	ori	r2,r2,3600
  818410:	10c5883a 	add	r2,r2,r3
  818414:	10800003 	ldbu	r2,0(r2)
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  818418:	1023883a 	mov	r17,r2
  }

  /* unsupported units */
  return 0;
}
  81841c:	8805883a 	mov	r2,r17
  818420:	dfc00317 	ldw	ra,12(sp)
  818424:	dc800217 	ldw	r18,8(sp)
  818428:	dc400117 	ldw	r17,4(sp)
  81842c:	dc000017 	ldw	r16,0(sp)
  818430:	dec00404 	addi	sp,sp,16
  818434:	f800283a 	ret
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  case MAD_UNITS_HOURS:
    return timer.seconds / 60 / 60;
  818438:	3809883a 	mov	r4,r7
  81843c:	01438404 	movi	r5,3600
  818440:	0820b480 	call	820b48 <__divsi3>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  818444:	1023883a 	mov	r17,r2
  818448:	003ff406 	br	81841c <mad_timer_count+0x1dc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  81844c:	00bfffc4 	movi	r2,-1
  818450:	30805126 	beq	r6,r2,818598 <mad_timer_count+0x358>
  818454:	303fac26 	beq	r6,zero,818308 <mad_timer_count+0xc8>
  818458:	003f9106 	br	8182a0 <mad_timer_count+0x60>
  81845c:	00bff104 	movi	r2,-60
  818460:	30bfc426 	beq	r6,r2,818374 <mad_timer_count+0x134>
  818464:	00bff384 	movi	r2,-50
  818468:	30bfc226 	beq	r6,r2,818374 <mad_timer_count+0x134>
  81846c:	0023883a 	mov	r17,zero
  818470:	003f8c06 	br	8182a4 <mad_timer_count+0x64>
  818474:	008fa004 	movi	r2,16000
  818478:	30bf9d26 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  81847c:	00958884 	movi	r2,22050
  818480:	30bf9b26 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  818484:	008bb804 	movi	r2,12000
  818488:	30bf9926 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  81848c:	0023883a 	mov	r17,zero
  818490:	003f8406 	br	8182a4 <mad_timer_count+0x64>
  818494:	00800c84 	movi	r2,50
  818498:	30bf9526 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  81849c:	00800f04 	movi	r2,60
  8184a0:	30bf9326 	beq	r6,r2,8182f0 <mad_timer_count+0xb0>
  8184a4:	0023883a 	mov	r17,zero
  8184a8:	003f7e06 	br	8182a4 <mad_timer_count+0x64>
  8184ac:	00bfff84 	movi	r2,-2
  8184b0:	90806126 	beq	r18,r2,818638 <mad_timer_count+0x3f8>
  8184b4:	14804316 	blt	r2,r18,8185c4 <mad_timer_count+0x384>
  8184b8:	00bff404 	movi	r2,-48
  8184bc:	90800526 	beq	r18,r2,8184d4 <mad_timer_count+0x294>
  8184c0:	14809916 	blt	r2,r18,818728 <mad_timer_count+0x4e8>
  8184c4:	00bff104 	movi	r2,-60
  8184c8:	90800226 	beq	r18,r2,8184d4 <mad_timer_count+0x294>
  8184cc:	00bff384 	movi	r2,-50
  8184d0:	90bf731e 	bne	r18,r2,8182a0 <mad_timer_count+0x60>
  8184d4:	00800c04 	movi	r2,48
  8184d8:	80807926 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  8184dc:	14006e16 	blt	r2,r16,818698 <mad_timer_count+0x458>
  8184e0:	00bfff84 	movi	r2,-2
  8184e4:	8080ce26 	beq	r16,r2,818820 <mad_timer_count+0x5e0>
  8184e8:	1400b516 	blt	r2,r16,8187c0 <mad_timer_count+0x580>
  8184ec:	00bff404 	movi	r2,-48
  8184f0:	80801526 	beq	r16,r2,818548 <mad_timer_count+0x308>
  8184f4:	14000e16 	blt	r2,r16,818530 <mad_timer_count+0x2f0>
  8184f8:	00bff104 	movi	r2,-60
  8184fc:	80801226 	beq	r16,r2,818548 <mad_timer_count+0x308>
  818500:	00bff384 	movi	r2,-50
  818504:	80801026 	beq	r16,r2,818548 <mad_timer_count+0x308>
  818508:	0005883a 	mov	r2,zero
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  81850c:	1080fa24 	muli	r2,r2,1000
  818510:	1100fa04 	addi	r4,r2,1000
  818514:	20c0fa54 	ori	r3,r4,1001
  818518:	008003c4 	movi	r2,15
  81851c:	10c0342e 	bgeu	r2,r3,8185f0 <mad_timer_count+0x3b0>
  818520:	0140fa44 	movi	r5,1001
  818524:	0820b480 	call	820b48 <__divsi3>
  818528:	1023883a 	mov	r17,r2
  81852c:	003fbb06 	br	81841c <mad_timer_count+0x1dc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818530:	00bff884 	movi	r2,-30
  818534:	80800426 	beq	r16,r2,818548 <mad_timer_count+0x308>
  818538:	80bff316 	blt	r16,r2,818508 <mad_timer_count+0x2c8>
  81853c:	80c00644 	addi	r3,r16,25
  818540:	00800044 	movi	r2,1
  818544:	10fff036 	bltu	r2,r3,818508 <mad_timer_count+0x2c8>
  818548:	00800c04 	movi	r2,48
  81854c:	9080d726 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818550:	1480cc16 	blt	r2,r18,818884 <mad_timer_count+0x644>
  818554:	00bfff84 	movi	r2,-2
  818558:	90811b26 	beq	r18,r2,8189c8 <mad_timer_count+0x788>
  81855c:	14810c16 	blt	r2,r18,818990 <mad_timer_count+0x750>
  818560:	00bff404 	movi	r2,-48
  818564:	90815626 	beq	r18,r2,818ac0 <mad_timer_count+0x880>
  818568:	14814f16 	blt	r2,r18,818aa8 <mad_timer_count+0x868>
  81856c:	00bff104 	movi	r2,-60
  818570:	90815326 	beq	r18,r2,818ac0 <mad_timer_count+0x880>
  818574:	00bff384 	movi	r2,-50
  818578:	90815126 	beq	r18,r2,818ac0 <mad_timer_count+0x880>
  81857c:	0005883a 	mov	r2,zero
  818580:	0000b006 	br	818844 <mad_timer_count+0x604>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  818584:	1809883a 	mov	r4,r3
  818588:	0140fa44 	movi	r5,1001
  81858c:	0820b480 	call	820b48 <__divsi3>
  818590:	1023883a 	mov	r17,r2
  818594:	003f5c06 	br	818308 <mad_timer_count+0xc8>
  switch (units) {
  case MAD_UNITS_HOURS:
    return timer.seconds / 60 / 60;

  case MAD_UNITS_MINUTES:
    return timer.seconds / 60;
  818598:	38c00f14 	ori	r3,r7,60
  81859c:	008003c4 	movi	r2,15
  8185a0:	10c03436 	bltu	r2,r3,818674 <mad_timer_count+0x434>
  8185a4:	3804913a 	slli	r2,r7,4
  8185a8:	00c02134 	movhi	r3,132
  8185ac:	18fbb104 	addi	r3,r3,-4412
  8185b0:	10800f14 	ori	r2,r2,60
  8185b4:	10c5883a 	add	r2,r2,r3
  8185b8:	10800003 	ldbu	r2,0(r2)
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  8185bc:	1023883a 	mov	r17,r2
  8185c0:	003f9606 	br	81841c <mad_timer_count+0x1dc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  8185c4:	00800284 	movi	r2,10
  8185c8:	90bf7826 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  8185cc:	14805e16 	blt	r2,r18,818748 <mad_timer_count+0x508>
  8185d0:	00bfffc4 	movi	r2,-1
  8185d4:	90807026 	beq	r18,r2,818798 <mad_timer_count+0x558>
  8185d8:	903f311e 	bne	r18,zero,8182a0 <mad_timer_count+0x60>
  8185dc:	8880fa24 	muli	r2,r17,1000
  8185e0:	1100fa04 	addi	r4,r2,1000
  8185e4:	20c0fa54 	ori	r3,r4,1001
  8185e8:	008003c4 	movi	r2,15
  8185ec:	10ffe636 	bltu	r2,r3,818588 <mad_timer_count+0x348>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  8185f0:	2004913a 	slli	r2,r4,4
  8185f4:	00c02134 	movhi	r3,132
  8185f8:	18fbb104 	addi	r3,r3,-4412
  8185fc:	1080fa54 	ori	r2,r2,1001
  818600:	10c5883a 	add	r2,r2,r3
  818604:	14400003 	ldbu	r17,0(r2)
  818608:	003f3f06 	br	818308 <mad_timer_count+0xc8>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  81860c:	00977004 	movi	r2,24000
  818610:	90bf6626 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818614:	14803c16 	blt	r2,r18,818708 <mad_timer_count+0x4c8>
  818618:	008fa004 	movi	r2,16000
  81861c:	90bf6326 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818620:	00958884 	movi	r2,22050
  818624:	90bf6126 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818628:	008bb804 	movi	r2,12000
  81862c:	90bf5f26 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818630:	0023883a 	mov	r17,zero
  818634:	003f1b06 	br	8182a4 <mad_timer_count+0x64>
  818638:	88c38414 	ori	r3,r17,3600
  81863c:	008003c4 	movi	r2,15
  818640:	10c01136 	bltu	r2,r3,818688 <mad_timer_count+0x448>
  818644:	8804913a 	slli	r2,r17,4
  818648:	00c02134 	movhi	r3,132
  81864c:	18fbb104 	addi	r3,r3,-4412
  818650:	10838414 	ori	r2,r2,3600
  818654:	10c5883a 	add	r2,r2,r3
  818658:	10800003 	ldbu	r2,0(r2)
  81865c:	1080fa24 	muli	r2,r2,1000
  818660:	1100fa04 	addi	r4,r2,1000
  818664:	20c0fa54 	ori	r3,r4,1001
  818668:	008003c4 	movi	r2,15
  81866c:	10ffe02e 	bgeu	r2,r3,8185f0 <mad_timer_count+0x3b0>
  818670:	003fc506 	br	818588 <mad_timer_count+0x348>
  case MAD_UNITS_HOURS:
    return timer.seconds / 60 / 60;

  case MAD_UNITS_MINUTES:
    return timer.seconds / 60;
  818674:	3809883a 	mov	r4,r7
  818678:	01400f04 	movi	r5,60
  81867c:	0820b480 	call	820b48 <__divsi3>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  818680:	1023883a 	mov	r17,r2
  818684:	003f6506 	br	81841c <mad_timer_count+0x1dc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818688:	8809883a 	mov	r4,r17
  81868c:	01438404 	movi	r5,3600
  818690:	0820b480 	call	820b48 <__divsi3>
  818694:	003ff106 	br	81865c <mad_timer_count+0x41c>
  818698:	008ac444 	movi	r2,11025
  81869c:	80800826 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  8186a0:	14005516 	blt	r2,r16,8187f8 <mad_timer_count+0x5b8>
  8186a4:	008012c4 	movi	r2,75
  8186a8:	80800526 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  8186ac:	14009816 	blt	r2,r16,818910 <mad_timer_count+0x6d0>
  8186b0:	00800c84 	movi	r2,50
  8186b4:	80800226 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  8186b8:	00800f04 	movi	r2,60
  8186bc:	80bf921e 	bne	r16,r2,818508 <mad_timer_count+0x2c8>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  8186c0:	014541f4 	movhi	r5,5383
  8186c4:	29534004 	addi	r5,r5,19712
  8186c8:	800d883a 	mov	r6,r16
  8186cc:	0817e140 	call	817e14 <scale_rational>
  8186d0:	8447383a 	mul	r3,r16,r17
  8186d4:	1887883a 	add	r3,r3,r2
  8186d8:	18c0fa24 	muli	r3,r3,1000
  8186dc:	008003c4 	movi	r2,15
  8186e0:	18c0fa04 	addi	r3,r3,1000
  8186e4:	1900fa54 	ori	r4,r3,1001
  8186e8:	11002736 	bltu	r2,r4,818788 <mad_timer_count+0x548>
  8186ec:	1804913a 	slli	r2,r3,4
  8186f0:	00c02134 	movhi	r3,132
  8186f4:	18fbb104 	addi	r3,r3,-4412
  8186f8:	1080fa54 	ori	r2,r2,1001
  8186fc:	10c5883a 	add	r2,r2,r3
  818700:	10800003 	ldbu	r2,0(r2)
  818704:	003f8106 	br	81850c <mad_timer_count+0x2cc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818708:	00ab1114 	movui	r2,44100
  81870c:	90bf2726 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818710:	00aee014 	movui	r2,48000
  818714:	90bf2526 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818718:	009f4004 	movi	r2,32000
  81871c:	90bf2326 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818720:	0023883a 	mov	r17,zero
  818724:	003edf06 	br	8182a4 <mad_timer_count+0x64>
  818728:	00bff884 	movi	r2,-30
  81872c:	90bf6926 	beq	r18,r2,8184d4 <mad_timer_count+0x294>
  818730:	90bedb16 	blt	r18,r2,8182a0 <mad_timer_count+0x60>
  818734:	90c00644 	addi	r3,r18,25
  818738:	00800044 	movi	r2,1
  81873c:	10ff652e 	bgeu	r2,r3,8184d4 <mad_timer_count+0x294>
  818740:	0023883a 	mov	r17,zero
  818744:	003ed706 	br	8182a4 <mad_timer_count+0x64>
  818748:	00800604 	movi	r2,24
  81874c:	90bed416 	blt	r18,r2,8182a0 <mad_timer_count+0x60>
  818750:	00800644 	movi	r2,25
  818754:	14bf150e 	bge	r2,r18,8183ac <mad_timer_count+0x16c>
  818758:	00800784 	movi	r2,30
  81875c:	90bf1326 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818760:	0023883a 	mov	r17,zero
  818764:	003ecf06 	br	8182a4 <mad_timer_count+0x64>
  818768:	0080fa04 	movi	r2,1000
  81876c:	90bf0f26 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818770:	0087d004 	movi	r2,8000
  818774:	90bf0d26 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818778:	00801904 	movi	r2,100
  81877c:	90bf0b26 	beq	r18,r2,8183ac <mad_timer_count+0x16c>
  818780:	0023883a 	mov	r17,zero
  818784:	003ec706 	br	8182a4 <mad_timer_count+0x64>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  818788:	1809883a 	mov	r4,r3
  81878c:	0140fa44 	movi	r5,1001
  818790:	0820b480 	call	820b48 <__divsi3>
  818794:	003f5d06 	br	81850c <mad_timer_count+0x2cc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818798:	88c00f14 	ori	r3,r17,60
  81879c:	008003c4 	movi	r2,15
  8187a0:	10c03436 	bltu	r2,r3,818874 <mad_timer_count+0x634>
  8187a4:	8804913a 	slli	r2,r17,4
  8187a8:	00c02134 	movhi	r3,132
  8187ac:	18fbb104 	addi	r3,r3,-4412
  8187b0:	10800f14 	ori	r2,r2,60
  8187b4:	10c5883a 	add	r2,r2,r3
  8187b8:	10800003 	ldbu	r2,0(r2)
  8187bc:	003fa706 	br	81865c <mad_timer_count+0x41c>
  8187c0:	00800284 	movi	r2,10
  8187c4:	80bfbe26 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  8187c8:	14004a16 	blt	r2,r16,8188f4 <mad_timer_count+0x6b4>
  8187cc:	00bfffc4 	movi	r2,-1
  8187d0:	80806526 	beq	r16,r2,818968 <mad_timer_count+0x728>
  8187d4:	803f4c1e 	bne	r16,zero,818508 <mad_timer_count+0x2c8>
  8187d8:	8880fa24 	muli	r2,r17,1000
  8187dc:	1100fa04 	addi	r4,r2,1000
  8187e0:	20c0fa54 	ori	r3,r4,1001
  8187e4:	008003c4 	movi	r2,15
  8187e8:	10c01b2e 	bgeu	r2,r3,818858 <mad_timer_count+0x618>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  8187ec:	0140fa44 	movi	r5,1001
  8187f0:	0820b480 	call	820b48 <__divsi3>
  8187f4:	003f4506 	br	81850c <mad_timer_count+0x2cc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  8187f8:	00977004 	movi	r2,24000
  8187fc:	80bfb026 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  818800:	14004e16 	blt	r2,r16,81893c <mad_timer_count+0x6fc>
  818804:	008fa004 	movi	r2,16000
  818808:	80bfad26 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  81880c:	00958884 	movi	r2,22050
  818810:	80bfab26 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  818814:	008bb804 	movi	r2,12000
  818818:	80bf3b1e 	bne	r16,r2,818508 <mad_timer_count+0x2c8>
  81881c:	003fa806 	br	8186c0 <mad_timer_count+0x480>
  818820:	88c38414 	ori	r3,r17,3600
  818824:	008003c4 	movi	r2,15
  818828:	10c04036 	bltu	r2,r3,81892c <mad_timer_count+0x6ec>
  81882c:	8804913a 	slli	r2,r17,4
  818830:	00c02134 	movhi	r3,132
  818834:	18fbb104 	addi	r3,r3,-4412
  818838:	10838414 	ori	r2,r2,3600
  81883c:	10c5883a 	add	r2,r2,r3
  818840:	10800003 	ldbu	r2,0(r2)
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  818844:	1080fa24 	muli	r2,r2,1000
  818848:	1100fa04 	addi	r4,r2,1000
  81884c:	20c0fa54 	ori	r3,r4,1001
  818850:	008003c4 	movi	r2,15
  818854:	10ffe536 	bltu	r2,r3,8187ec <mad_timer_count+0x5ac>
  818858:	2004913a 	slli	r2,r4,4
  81885c:	00c02134 	movhi	r3,132
  818860:	18fbb104 	addi	r3,r3,-4412
  818864:	1080fa54 	ori	r2,r2,1001
  818868:	10c5883a 	add	r2,r2,r3
  81886c:	10800003 	ldbu	r2,0(r2)
  818870:	003f2606 	br	81850c <mad_timer_count+0x2cc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818874:	8809883a 	mov	r4,r17
  818878:	01400f04 	movi	r5,60
  81887c:	0820b480 	call	820b48 <__divsi3>
  818880:	003f7606 	br	81865c <mad_timer_count+0x41c>
  818884:	008ac444 	movi	r2,11025
  818888:	90800826 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  81888c:	14806316 	blt	r2,r18,818a1c <mad_timer_count+0x7dc>
  818890:	008012c4 	movi	r2,75
  818894:	90800526 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818898:	14806f16 	blt	r2,r18,818a58 <mad_timer_count+0x818>
  81889c:	00800c84 	movi	r2,50
  8188a0:	90800226 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  8188a4:	00800f04 	movi	r2,60
  8188a8:	90bf341e 	bne	r18,r2,81857c <mad_timer_count+0x33c>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  8188ac:	014541f4 	movhi	r5,5383
  8188b0:	29534004 	addi	r5,r5,19712
  8188b4:	900d883a 	mov	r6,r18
  8188b8:	0817e140 	call	817e14 <scale_rational>
  8188bc:	9447383a 	mul	r3,r18,r17
  8188c0:	1887883a 	add	r3,r3,r2
  8188c4:	18c0fa24 	muli	r3,r3,1000
  8188c8:	008003c4 	movi	r2,15
  8188cc:	18c0fa04 	addi	r3,r3,1000
  8188d0:	1900fa54 	ori	r4,r3,1001
  8188d4:	11002036 	bltu	r2,r4,818958 <mad_timer_count+0x718>
  8188d8:	1804913a 	slli	r2,r3,4
  8188dc:	00c02134 	movhi	r3,132
  8188e0:	18fbb104 	addi	r3,r3,-4412
  8188e4:	1080fa54 	ori	r2,r2,1001
  8188e8:	10c5883a 	add	r2,r2,r3
  8188ec:	10800003 	ldbu	r2,0(r2)
  8188f0:	003fd406 	br	818844 <mad_timer_count+0x604>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  8188f4:	00800604 	movi	r2,24
  8188f8:	80bf0316 	blt	r16,r2,818508 <mad_timer_count+0x2c8>
  8188fc:	00800644 	movi	r2,25
  818900:	143f6f0e 	bge	r2,r16,8186c0 <mad_timer_count+0x480>
  818904:	00800784 	movi	r2,30
  818908:	80beff1e 	bne	r16,r2,818508 <mad_timer_count+0x2c8>
  81890c:	003f6c06 	br	8186c0 <mad_timer_count+0x480>
  818910:	0080fa04 	movi	r2,1000
  818914:	80bf6a26 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  818918:	0087d004 	movi	r2,8000
  81891c:	80bf6826 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  818920:	00801904 	movi	r2,100
  818924:	80bef81e 	bne	r16,r2,818508 <mad_timer_count+0x2c8>
  818928:	003f6506 	br	8186c0 <mad_timer_count+0x480>
  81892c:	8809883a 	mov	r4,r17
  818930:	01438404 	movi	r5,3600
  818934:	0820b480 	call	820b48 <__divsi3>
  818938:	003fc206 	br	818844 <mad_timer_count+0x604>
  81893c:	00ab1114 	movui	r2,44100
  818940:	80bf5f26 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  818944:	00aee014 	movui	r2,48000
  818948:	80bf5d26 	beq	r16,r2,8186c0 <mad_timer_count+0x480>
  81894c:	009f4004 	movi	r2,32000
  818950:	80beed1e 	bne	r16,r2,818508 <mad_timer_count+0x2c8>
  818954:	003f5a06 	br	8186c0 <mad_timer_count+0x480>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  818958:	1809883a 	mov	r4,r3
  81895c:	0140fa44 	movi	r5,1001
  818960:	0820b480 	call	820b48 <__divsi3>
  818964:	003fb706 	br	818844 <mad_timer_count+0x604>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818968:	88c00f14 	ori	r3,r17,60
  81896c:	008003c4 	movi	r2,15
  818970:	10c04936 	bltu	r2,r3,818a98 <mad_timer_count+0x858>
  818974:	8804913a 	slli	r2,r17,4
  818978:	00c02134 	movhi	r3,132
  81897c:	18fbb104 	addi	r3,r3,-4412
  818980:	10800f14 	ori	r2,r2,60
  818984:	10c5883a 	add	r2,r2,r3
  818988:	10800003 	ldbu	r2,0(r2)
  81898c:	003fad06 	br	818844 <mad_timer_count+0x604>
  818990:	00800284 	movi	r2,10
  818994:	90bfc526 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818998:	14806416 	blt	r2,r18,818b2c <mad_timer_count+0x8ec>
  81899c:	00bfffc4 	movi	r2,-1
  8189a0:	90805826 	beq	r18,r2,818b04 <mad_timer_count+0x8c4>
  8189a4:	903ef51e 	bne	r18,zero,81857c <mad_timer_count+0x33c>
  8189a8:	8880fa24 	muli	r2,r17,1000
  8189ac:	1100fa04 	addi	r4,r2,1000
  8189b0:	20c0fa54 	ori	r3,r4,1001
  8189b4:	008003c4 	movi	r2,15
  8189b8:	10c0112e 	bgeu	r2,r3,818a00 <mad_timer_count+0x7c0>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  8189bc:	0140fa44 	movi	r5,1001
  8189c0:	0820b480 	call	820b48 <__divsi3>
  8189c4:	003f9f06 	br	818844 <mad_timer_count+0x604>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  8189c8:	88c38414 	ori	r3,r17,3600
  8189cc:	008003c4 	movi	r2,15
  8189d0:	10c01d36 	bltu	r2,r3,818a48 <mad_timer_count+0x808>
  8189d4:	8804913a 	slli	r2,r17,4
  8189d8:	00c02134 	movhi	r3,132
  8189dc:	18fbb104 	addi	r3,r3,-4412
  8189e0:	10838414 	ori	r2,r2,3600
  8189e4:	10c5883a 	add	r2,r2,r3
  8189e8:	10800003 	ldbu	r2,0(r2)
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  8189ec:	1080fa24 	muli	r2,r2,1000
  8189f0:	1100fa04 	addi	r4,r2,1000
  8189f4:	20c0fa54 	ori	r3,r4,1001
  8189f8:	008003c4 	movi	r2,15
  8189fc:	10ffef36 	bltu	r2,r3,8189bc <mad_timer_count+0x77c>
  818a00:	2004913a 	slli	r2,r4,4
  818a04:	00c02134 	movhi	r3,132
  818a08:	18fbb104 	addi	r3,r3,-4412
  818a0c:	1080fa54 	ori	r2,r2,1001
  818a10:	10c5883a 	add	r2,r2,r3
  818a14:	10800003 	ldbu	r2,0(r2)
  818a18:	003f8a06 	br	818844 <mad_timer_count+0x604>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818a1c:	00977004 	movi	r2,24000
  818a20:	90bfa226 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a24:	14801416 	blt	r2,r18,818a78 <mad_timer_count+0x838>
  818a28:	008fa004 	movi	r2,16000
  818a2c:	90bf9f26 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a30:	00958884 	movi	r2,22050
  818a34:	90bf9d26 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a38:	008bb804 	movi	r2,12000
  818a3c:	90bf9b26 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a40:	0005883a 	mov	r2,zero
  818a44:	003f7f06 	br	818844 <mad_timer_count+0x604>
  818a48:	8809883a 	mov	r4,r17
  818a4c:	01438404 	movi	r5,3600
  818a50:	0820b480 	call	820b48 <__divsi3>
  818a54:	003fe506 	br	8189ec <mad_timer_count+0x7ac>
  818a58:	0080fa04 	movi	r2,1000
  818a5c:	90bf9326 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a60:	0087d004 	movi	r2,8000
  818a64:	90bf9126 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a68:	00801904 	movi	r2,100
  818a6c:	90bf8f26 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a70:	0005883a 	mov	r2,zero
  818a74:	003f7306 	br	818844 <mad_timer_count+0x604>
  818a78:	00ab1114 	movui	r2,44100
  818a7c:	90bf8b26 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a80:	00aee014 	movui	r2,48000
  818a84:	90bf8926 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a88:	009f4004 	movi	r2,32000
  818a8c:	90bf8726 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818a90:	0005883a 	mov	r2,zero
  818a94:	003f6b06 	br	818844 <mad_timer_count+0x604>
  818a98:	8809883a 	mov	r4,r17
  818a9c:	01400f04 	movi	r5,60
  818aa0:	0820b480 	call	820b48 <__divsi3>
  818aa4:	003f6706 	br	818844 <mad_timer_count+0x604>
  818aa8:	00bff884 	movi	r2,-30
  818aac:	90800426 	beq	r18,r2,818ac0 <mad_timer_count+0x880>
  818ab0:	90beb216 	blt	r18,r2,81857c <mad_timer_count+0x33c>
  818ab4:	90c00644 	addi	r3,r18,25
  818ab8:	00800044 	movi	r2,1
  818abc:	10feaf36 	bltu	r2,r3,81857c <mad_timer_count+0x33c>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  818ac0:	2015883a 	mov	r10,r4
  818ac4:	500b883a 	mov	r5,r10
  818ac8:	8809883a 	mov	r4,r17
  818acc:	800d883a 	mov	r6,r16
  818ad0:	08182400 	call	818240 <mad_timer_count>
  818ad4:	1080fa24 	muli	r2,r2,1000
  818ad8:	1100fa04 	addi	r4,r2,1000
  818adc:	20c0fa54 	ori	r3,r4,1001
  818ae0:	008003c4 	movi	r2,15
  818ae4:	10c01936 	bltu	r2,r3,818b4c <mad_timer_count+0x90c>
  818ae8:	2004913a 	slli	r2,r4,4
  818aec:	00c02134 	movhi	r3,132
  818af0:	18fbb104 	addi	r3,r3,-4412
  818af4:	1080fa54 	ori	r2,r2,1001
  818af8:	10c5883a 	add	r2,r2,r3
  818afc:	10800003 	ldbu	r2,0(r2)
  818b00:	003fba06 	br	8189ec <mad_timer_count+0x7ac>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818b04:	88c00f14 	ori	r3,r17,60
  818b08:	008003c4 	movi	r2,15
  818b0c:	10c01236 	bltu	r2,r3,818b58 <mad_timer_count+0x918>
  818b10:	8804913a 	slli	r2,r17,4
  818b14:	00c02134 	movhi	r3,132
  818b18:	18fbb104 	addi	r3,r3,-4412
  818b1c:	10800f14 	ori	r2,r2,60
  818b20:	10c5883a 	add	r2,r2,r3
  818b24:	10800003 	ldbu	r2,0(r2)
  818b28:	003fb006 	br	8189ec <mad_timer_count+0x7ac>
  818b2c:	00800604 	movi	r2,24
  818b30:	90be9216 	blt	r18,r2,81857c <mad_timer_count+0x33c>
  818b34:	00800644 	movi	r2,25
  818b38:	14bf5c0e 	bge	r2,r18,8188ac <mad_timer_count+0x66c>
  818b3c:	00800784 	movi	r2,30
  818b40:	90bf5a26 	beq	r18,r2,8188ac <mad_timer_count+0x66c>
  818b44:	0005883a 	mov	r2,zero
  818b48:	003f3e06 	br	818844 <mad_timer_count+0x604>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  818b4c:	0140fa44 	movi	r5,1001
  818b50:	0820b480 	call	820b48 <__divsi3>
  818b54:	003fa506 	br	8189ec <mad_timer_count+0x7ac>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818b58:	8809883a 	mov	r4,r17
  818b5c:	01400f04 	movi	r5,60
  818b60:	0820b480 	call	820b48 <__divsi3>
  818b64:	003fa106 	br	8189ec <mad_timer_count+0x7ac>

00818b68 <mad_timer_string>:
 * DESCRIPTION:	write a string representation of a timer using a template
 */
void mad_timer_string(mad_timer_t timer,
		      char *dest, char const *format, enum mad_units units,
		      enum mad_units fracunits, unsigned long subparts)
{
  818b68:	defff204 	addi	sp,sp,-56
  818b6c:	2011883a 	mov	r8,r4
  818b70:	dd800a15 	stw	r22,40(sp)
  818b74:	dcc00715 	stw	r19,28(sp)
  818b78:	dc000415 	stw	r16,16(sp)
  818b7c:	dfc00d15 	stw	ra,52(sp)
  818b80:	df000c15 	stw	fp,48(sp)
  818b84:	ddc00b15 	stw	r23,44(sp)
  818b88:	dd400915 	stw	r21,36(sp)
  818b8c:	dd000815 	stw	r20,32(sp)
  818b90:	dc800615 	stw	r18,24(sp)
  818b94:	dc400515 	stw	r17,20(sp)
  818b98:	d9800215 	stw	r6,8(sp)
  818b9c:	d9c00315 	stw	r7,12(sp)
  818ba0:	dc000e17 	ldw	r16,56(sp)
  818ba4:	dcc00f17 	ldw	r19,60(sp)
  818ba8:	dd801017 	ldw	r22,64(sp)
 * NAME:	timer->abs()
 * DESCRIPTION:	return the absolute value of a timer
 */
mad_timer_t mad_timer_abs(mad_timer_t timer)
{
  if (timer.seconds < 0)
  818bac:	40009316 	blt	r8,zero,818dfc <mad_timer_string+0x294>
  818bb0:	402f883a 	mov	r23,r8
  818bb4:	2839883a 	mov	fp,r5
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  818bb8:	00800f04 	movi	r2,60
  unsigned long hours, minutes, seconds, sub;
  unsigned int frac;

  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  818bbc:	b825883a 	mov	r18,r23
  frac = sub = 0;

  switch (fracunits) {
  818bc0:	98802826 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818bc4:	14c0210e 	bge	r2,r19,818c4c <mad_timer_string+0xe4>
  818bc8:	008bb804 	movi	r2,12000
  818bcc:	98802526 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818bd0:	14c0ae0e 	bge	r2,r19,818e8c <mad_timer_string+0x324>
  818bd4:	00977004 	movi	r2,24000
  818bd8:	98802226 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818bdc:	14c1660e 	bge	r2,r19,819178 <mad_timer_string+0x610>
  818be0:	00ab1114 	movui	r2,44100
  818be4:	98801f26 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818be8:	00aee014 	movui	r2,48000
  818bec:	98801d26 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818bf0:	009f4004 	movi	r2,32000
  818bf4:	98801b26 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
      seconds = frame / -fracunits;
    }
    break;
  }

  switch (units) {
  818bf8:	00800c04 	movi	r2,48
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  818bfc:	002d883a 	mov	r22,zero
  818c00:	d8000115 	stw	zero,4(sp)
      seconds = frame / -fracunits;
    }
    break;
  }

  switch (units) {
  818c04:	80802a1e 	bne	r16,r2,818cb0 <mad_timer_string+0x148>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818c08:	00800c04 	movi	r2,48
  818c0c:	80806526 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818c10:	1400420e 	bge	r2,r16,818d1c <mad_timer_string+0x1b4>
  818c14:	008ac444 	movi	r2,11025
  818c18:	80806226 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818c1c:	14005816 	blt	r2,r16,818d80 <mad_timer_string+0x218>
  818c20:	008012c4 	movi	r2,75
  818c24:	80805f26 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818c28:	14017f0e 	bge	r2,r16,819228 <mad_timer_string+0x6c0>
  818c2c:	0080fa04 	movi	r2,1000
  818c30:	80805c26 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818c34:	0087d004 	movi	r2,8000
  818c38:	80805a26 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818c3c:	00801904 	movi	r2,100
  818c40:	80805826 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818c44:	000d883a 	mov	r6,zero
  818c48:	00005d06 	br	818dc0 <mad_timer_string+0x258>
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  818c4c:	00bffa04 	movi	r2,-24
  818c50:	14c0710e 	bge	r2,r19,818e18 <mad_timer_string+0x2b0>
  818c54:	00800644 	movi	r2,25
  818c58:	14c0e216 	blt	r2,r19,818fe4 <mad_timer_string+0x47c>
  818c5c:	00800604 	movi	r2,24
  818c60:	98815416 	blt	r19,r2,8191b4 <mad_timer_string+0x64c>
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    {
      unsigned long denom;

      denom = MAD_TIMER_RESOLUTION / fracunits;
  818c64:	010541f4 	movhi	r4,5383
  818c68:	21134004 	addi	r4,r4,19712
  818c6c:	980b883a 	mov	r5,r19
  818c70:	0820c080 	call	820c08 <__udivsi3>
  818c74:	1023883a 	mov	r17,r2

      frac = timer.fraction / denom;
  818c78:	e009883a 	mov	r4,fp
  818c7c:	100b883a 	mov	r5,r2
  818c80:	0820c080 	call	820c08 <__udivsi3>
      sub  = scale_rational(timer.fraction % denom, denom, subparts);
  818c84:	e009883a 	mov	r4,fp
  818c88:	880b883a 	mov	r5,r17
    {
      unsigned long denom;

      denom = MAD_TIMER_RESOLUTION / fracunits;

      frac = timer.fraction / denom;
  818c8c:	d8800115 	stw	r2,4(sp)
      sub  = scale_rational(timer.fraction % denom, denom, subparts);
  818c90:	0820c100 	call	820c10 <__umodsi3>
  818c94:	b00d883a 	mov	r6,r22
  818c98:	1009883a 	mov	r4,r2
  818c9c:	880b883a 	mov	r5,r17
  818ca0:	0817e140 	call	817e14 <scale_rational>
  818ca4:	102d883a 	mov	r22,r2
      seconds = frame / -fracunits;
    }
    break;
  }

  switch (units) {
  818ca8:	00800c04 	movi	r2,48
  818cac:	80bfd626 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818cb0:	14000d0e 	bge	r2,r16,818ce8 <mad_timer_string+0x180>
  818cb4:	008ac444 	movi	r2,11025
  818cb8:	80bfd326 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818cbc:	1400870e 	bge	r2,r16,818edc <mad_timer_string+0x374>
  818cc0:	00977004 	movi	r2,24000
  818cc4:	80bfd026 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818cc8:	1401100e 	bge	r2,r16,81910c <mad_timer_string+0x5a4>
  818ccc:	00ab1114 	movui	r2,44100
  818cd0:	80bfcd26 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818cd4:	00aee014 	movui	r2,48000
  818cd8:	80bfcb26 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818cdc:	009f4004 	movi	r2,32000
  818ce0:	8080fe1e 	bne	r16,r2,8190dc <mad_timer_string+0x574>
  818ce4:	003fc806 	br	818c08 <mad_timer_string+0xa0>
  818ce8:	00bfff84 	movi	r2,-2
  818cec:	80808f26 	beq	r16,r2,818f2c <mad_timer_string+0x3c4>
  818cf0:	14006e0e 	bge	r2,r16,818eac <mad_timer_string+0x344>
  818cf4:	00800284 	movi	r2,10
  818cf8:	80bfc326 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818cfc:	14010a0e 	bge	r2,r16,819128 <mad_timer_string+0x5c0>
  818d00:	00800604 	movi	r2,24
  818d04:	8080f516 	blt	r16,r2,8190dc <mad_timer_string+0x574>
  818d08:	00800644 	movi	r2,25
  818d0c:	143fbe0e 	bge	r2,r16,818c08 <mad_timer_string+0xa0>
  818d10:	00800784 	movi	r2,30
  818d14:	8080f11e 	bne	r16,r2,8190dc <mad_timer_string+0x574>
  818d18:	003fbb06 	br	818c08 <mad_timer_string+0xa0>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818d1c:	00bfff84 	movi	r2,-2
  818d20:	80807a26 	beq	r16,r2,818f0c <mad_timer_string+0x3a4>
  818d24:	1400a416 	blt	r2,r16,818fb8 <mad_timer_string+0x450>
  818d28:	00bff404 	movi	r2,-48
  818d2c:	80800726 	beq	r16,r2,818d4c <mad_timer_string+0x1e4>
  818d30:	1401370e 	bge	r2,r16,819210 <mad_timer_string+0x6a8>
  818d34:	00bff884 	movi	r2,-30
  818d38:	80800426 	beq	r16,r2,818d4c <mad_timer_string+0x1e4>
  818d3c:	80bfc116 	blt	r16,r2,818c44 <mad_timer_string+0xdc>
  818d40:	80c00644 	addi	r3,r16,25
  818d44:	00800044 	movi	r2,1
  818d48:	10ffbe36 	bltu	r2,r3,818c44 <mad_timer_string+0xdc>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  818d4c:	b809883a 	mov	r4,r23
  818d50:	e00b883a 	mov	r5,fp
  818d54:	040dc83a 	sub	r6,zero,r16
  818d58:	08182400 	call	818240 <mad_timer_count>
  818d5c:	1080fa24 	muli	r2,r2,1000
  818d60:	1100fa04 	addi	r4,r2,1000
  818d64:	20c0fa54 	ori	r3,r4,1001
  818d68:	008003c4 	movi	r2,15
  818d6c:	10c1372e 	bgeu	r2,r3,81924c <mad_timer_string+0x6e4>
  818d70:	0140fa44 	movi	r5,1001
  818d74:	0820b480 	call	820b48 <__divsi3>
  818d78:	100d883a 	mov	r6,r2
  818d7c:	00001006 	br	818dc0 <mad_timer_string+0x258>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818d80:	00977004 	movi	r2,24000
  818d84:	80800726 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818d88:	14011916 	blt	r2,r16,8191f0 <mad_timer_string+0x688>
  818d8c:	008fa004 	movi	r2,16000
  818d90:	80800426 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818d94:	00958884 	movi	r2,22050
  818d98:	80800226 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818d9c:	008bb804 	movi	r2,12000
  818da0:	80bfa81e 	bne	r16,r2,818c44 <mad_timer_string+0xdc>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  818da4:	800d883a 	mov	r6,r16
  818da8:	e009883a 	mov	r4,fp
  818dac:	014541f4 	movhi	r5,5383
  818db0:	29534004 	addi	r5,r5,19712
  818db4:	0817e140 	call	817e14 <scale_rational>
  818db8:	85c7383a 	mul	r3,r16,r23
  818dbc:	188d883a 	add	r6,r3,r2
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    sprintf(dest, format, mad_timer_count(timer, units), sub);
  818dc0:	d9000217 	ldw	r4,8(sp)
  818dc4:	d9400317 	ldw	r5,12(sp)
  818dc8:	b00f883a 	mov	r7,r22
    break;
  }
}
  818dcc:	dfc00d17 	ldw	ra,52(sp)
  818dd0:	df000c17 	ldw	fp,48(sp)
  818dd4:	ddc00b17 	ldw	r23,44(sp)
  818dd8:	dd800a17 	ldw	r22,40(sp)
  818ddc:	dd400917 	ldw	r21,36(sp)
  818de0:	dd000817 	ldw	r20,32(sp)
  818de4:	dcc00717 	ldw	r19,28(sp)
  818de8:	dc800617 	ldw	r18,24(sp)
  818dec:	dc400517 	ldw	r17,20(sp)
  818df0:	dc000417 	ldw	r16,16(sp)
  818df4:	dec00e04 	addi	sp,sp,56
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    sprintf(dest, format, mad_timer_count(timer, units), sub);
  818df8:	0822b641 	jmpi	822b64 <sprintf>
 * NAME:	timer->negate()
 * DESCRIPTION:	invert the sign of a timer
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;
  818dfc:	022fc83a 	sub	r23,zero,r8

  if (timer->fraction) {
  818e00:	28004026 	beq	r5,zero,818f04 <mad_timer_string+0x39c>
    timer->seconds -= 1;
    timer->fraction = MAD_TIMER_RESOLUTION - timer->fraction;
  818e04:	008541f4 	movhi	r2,5383
  818e08:	10934004 	addi	r2,r2,19712
  818e0c:	1179c83a 	sub	fp,r2,r5
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;

  if (timer->fraction) {
    timer->seconds -= 1;
  818e10:	bdffffc4 	addi	r23,r23,-1
  818e14:	003f6806 	br	818bb8 <mad_timer_string+0x50>
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  818e18:	00bff9c4 	movi	r2,-25
  818e1c:	9880070e 	bge	r19,r2,818e3c <mad_timer_string+0x2d4>
  818e20:	00bff384 	movi	r2,-50
  818e24:	98800526 	beq	r19,r2,818e3c <mad_timer_string+0x2d4>
  818e28:	14c1050e 	bge	r2,r19,819240 <mad_timer_string+0x6d8>
  818e2c:	00bff404 	movi	r2,-48
  818e30:	98800226 	beq	r19,r2,818e3c <mad_timer_string+0x2d4>
  818e34:	00bff884 	movi	r2,-30
  818e38:	98bf6f1e 	bne	r19,r2,818bf8 <mad_timer_string+0x90>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818e3c:	00800c04 	movi	r2,48
  818e40:	98807926 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  818e44:	14c06e16 	blt	r2,r19,819000 <mad_timer_string+0x498>
  818e48:	00bfff84 	movi	r2,-2
  818e4c:	98811d26 	beq	r19,r2,8192c4 <mad_timer_string+0x75c>
  818e50:	14c10f16 	blt	r2,r19,819290 <mad_timer_string+0x728>
  818e54:	00bff404 	movi	r2,-48
  818e58:	98814b26 	beq	r19,r2,819388 <mad_timer_string+0x820>
  818e5c:	14c14416 	blt	r2,r19,819370 <mad_timer_string+0x808>
  818e60:	00bff104 	movi	r2,-60
  818e64:	98814826 	beq	r19,r2,819388 <mad_timer_string+0x820>
  818e68:	00bff384 	movi	r2,-50
  818e6c:	98814626 	beq	r19,r2,819388 <mad_timer_string+0x820>
  818e70:	98bf6a24 	muli	r2,r19,-600
  818e74:	04c7c83a 	sub	r3,zero,r19
  818e78:	0025883a 	mov	r18,zero
  818e7c:	15bffb84 	addi	r22,r2,-18
  818e80:	0023883a 	mov	r17,zero
  818e84:	d8c00015 	stw	r3,0(sp)
  818e88:	00007606 	br	819064 <mad_timer_string+0x4fc>
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  818e8c:	0080fa04 	movi	r2,1000
  818e90:	98bf7426 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818e94:	14c0bd0e 	bge	r2,r19,81918c <mad_timer_string+0x624>
  818e98:	0087d004 	movi	r2,8000
  818e9c:	98bf7126 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818ea0:	008ac444 	movi	r2,11025
  818ea4:	98bf541e 	bne	r19,r2,818bf8 <mad_timer_string+0x90>
  818ea8:	003f6e06 	br	818c64 <mad_timer_string+0xfc>
      seconds = frame / -fracunits;
    }
    break;
  }

  switch (units) {
  818eac:	00bff404 	movi	r2,-48
  818eb0:	80800726 	beq	r16,r2,818ed0 <mad_timer_string+0x368>
  818eb4:	1400ba0e 	bge	r2,r16,8191a0 <mad_timer_string+0x638>
  818eb8:	00bff884 	movi	r2,-30
  818ebc:	80800426 	beq	r16,r2,818ed0 <mad_timer_string+0x368>
  818ec0:	80808616 	blt	r16,r2,8190dc <mad_timer_string+0x574>
  818ec4:	80c00644 	addi	r3,r16,25
  818ec8:	00800044 	movi	r2,1
  818ecc:	10c08336 	bltu	r2,r3,8190dc <mad_timer_string+0x574>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    if (fracunits < 0) {
  818ed0:	983f4d0e 	bge	r19,zero,818c08 <mad_timer_string+0xa0>
  818ed4:	002d883a 	mov	r22,zero
  818ed8:	003f4b06 	br	818c08 <mad_timer_string+0xa0>
      seconds = frame / -fracunits;
    }
    break;
  }

  switch (units) {
  818edc:	008012c4 	movi	r2,75
  818ee0:	80bf4926 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818ee4:	1400790e 	bge	r2,r16,8190cc <mad_timer_string+0x564>
  818ee8:	0080fa04 	movi	r2,1000
  818eec:	80bf4626 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818ef0:	0087d004 	movi	r2,8000
  818ef4:	80bf4426 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  818ef8:	00801904 	movi	r2,100
  818efc:	8080771e 	bne	r16,r2,8190dc <mad_timer_string+0x574>
  818f00:	003f4106 	br	818c08 <mad_timer_string+0xa0>
 */
void mad_timer_negate(mad_timer_t *timer)
{
  timer->seconds = -timer->seconds;

  if (timer->fraction) {
  818f04:	0039883a 	mov	fp,zero
  818f08:	003f2b06 	br	818bb8 <mad_timer_string+0x50>
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  case MAD_UNITS_HOURS:
    return timer.seconds / 60 / 60;
  818f0c:	b8c38414 	ori	r3,r23,3600
  818f10:	008003c4 	movi	r2,15
  818f14:	10c0aa2e 	bgeu	r2,r3,8191c0 <mad_timer_string+0x658>
  818f18:	b809883a 	mov	r4,r23
  818f1c:	01438404 	movi	r5,3600
  818f20:	0820b480 	call	820b48 <__divsi3>
  818f24:	100d883a 	mov	r6,r2
  818f28:	003fa506 	br	818dc0 <mad_timer_string+0x258>
    break;
  }

  switch (units) {
  case MAD_UNITS_HOURS:
    minutes = seconds / 60;
  818f2c:	9009883a 	mov	r4,r18
  818f30:	01400f04 	movi	r5,60
  818f34:	0820c080 	call	820c08 <__udivsi3>
  818f38:	1023883a 	mov	r17,r2
    hours   = minutes / 60;

    sprintf(dest, format,
  818f3c:	1009883a 	mov	r4,r2
  818f40:	01400f04 	movi	r5,60
  818f44:	0820c080 	call	820c08 <__udivsi3>
  818f48:	8809883a 	mov	r4,r17
  818f4c:	01400f04 	movi	r5,60
  818f50:	1027883a 	mov	r19,r2
  818f54:	0820c100 	call	820c10 <__umodsi3>
  818f58:	9009883a 	mov	r4,r18
  818f5c:	01400f04 	movi	r5,60
  818f60:	1023883a 	mov	r17,r2
  818f64:	0820c100 	call	820c10 <__umodsi3>
  818f68:	d8c00117 	ldw	r3,4(sp)
  818f6c:	d9000217 	ldw	r4,8(sp)
  818f70:	d9400317 	ldw	r5,12(sp)
  818f74:	980d883a 	mov	r6,r19
  818f78:	880f883a 	mov	r7,r17
  818f7c:	d8800e15 	stw	r2,56(sp)
  818f80:	d8c00f15 	stw	r3,60(sp)
  818f84:	dd801015 	stw	r22,64(sp)
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    sprintf(dest, format, mad_timer_count(timer, units), sub);
    break;
  }
}
  818f88:	dfc00d17 	ldw	ra,52(sp)
  818f8c:	df000c17 	ldw	fp,48(sp)
  818f90:	ddc00b17 	ldw	r23,44(sp)
  818f94:	dd800a17 	ldw	r22,40(sp)
  818f98:	dd400917 	ldw	r21,36(sp)
  818f9c:	dd000817 	ldw	r20,32(sp)
  818fa0:	dcc00717 	ldw	r19,28(sp)
  818fa4:	dc800617 	ldw	r18,24(sp)
  818fa8:	dc400517 	ldw	r17,20(sp)
  818fac:	dc000417 	ldw	r16,16(sp)
  818fb0:	dec00e04 	addi	sp,sp,56
  switch (units) {
  case MAD_UNITS_HOURS:
    minutes = seconds / 60;
    hours   = minutes / 60;

    sprintf(dest, format,
  818fb4:	0822b641 	jmpi	822b64 <sprintf>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  818fb8:	00800284 	movi	r2,10
  818fbc:	80bf7926 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818fc0:	1400860e 	bge	r2,r16,8191dc <mad_timer_string+0x674>
  818fc4:	00800604 	movi	r2,24
  818fc8:	80bf1e16 	blt	r16,r2,818c44 <mad_timer_string+0xdc>
  818fcc:	00800644 	movi	r2,25
  818fd0:	143f740e 	bge	r2,r16,818da4 <mad_timer_string+0x23c>
  818fd4:	00800784 	movi	r2,30
  818fd8:	80bf7226 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  818fdc:	000d883a 	mov	r6,zero
  818fe0:	003f7706 	br	818dc0 <mad_timer_string+0x258>
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  818fe4:	00800c04 	movi	r2,48
  818fe8:	98bf1e26 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818fec:	00800c84 	movi	r2,50
  818ff0:	98bf1c26 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  818ff4:	00800784 	movi	r2,30
  818ff8:	98beff1e 	bne	r19,r2,818bf8 <mad_timer_string+0x90>
  818ffc:	003f1906 	br	818c64 <mad_timer_string+0xfc>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  819000:	008ac444 	movi	r2,11025
  819004:	98800826 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819008:	14c09716 	blt	r2,r19,819268 <mad_timer_string+0x700>
  81900c:	008012c4 	movi	r2,75
  819010:	98800526 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819014:	14c10a16 	blt	r2,r19,819440 <mad_timer_string+0x8d8>
  819018:	00800c84 	movi	r2,50
  81901c:	98800226 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819020:	00800f04 	movi	r2,60
  819024:	98bf921e 	bne	r19,r2,818e70 <mad_timer_string+0x308>
  case MAD_UNITS_30_FPS:
  case MAD_UNITS_48_FPS:
  case MAD_UNITS_50_FPS:
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    return timer.seconds * (signed long) units +
  819028:	e009883a 	mov	r4,fp
  81902c:	014541f4 	movhi	r5,5383
  819030:	29534004 	addi	r5,r5,19712
  819034:	980d883a 	mov	r6,r19
  819038:	0817e140 	call	817e14 <scale_rational>
  81903c:	9dc7383a 	mul	r3,r19,r23
  819040:	993f6a24 	muli	r4,r19,-600
  819044:	04cbc83a 	sub	r5,zero,r19
  819048:	18a5883a 	add	r18,r3,r2
  81904c:	25bffb84 	addi	r22,r4,-18
  819050:	d9400015 	stw	r5,0(sp)
  819054:	9009883a 	mov	r4,r18
  819058:	b00b883a 	mov	r5,r22
  81905c:	0820c100 	call	820c10 <__umodsi3>
  819060:	1023883a 	mov	r17,r2

      cycle = -fracunits * 60 * 10 - (10 - 1) * 2;

      d = frame / cycle;
      m = frame % cycle;
      frame += (10 - 1) * 2 * d;
  819064:	9009883a 	mov	r4,r18
  819068:	b00b883a 	mov	r5,r22
  81906c:	0820c080 	call	820c08 <__udivsi3>
  819070:	108004a4 	muli	r2,r2,18
  819074:	90a5883a 	add	r18,r18,r2
      if (m > 2)
  819078:	00800084 	movi	r2,2
  81907c:	1440092e 	bgeu	r2,r17,8190a4 <mad_timer_string+0x53c>
	frame += 2 * ((m - 2) / (cycle / 10));
  819080:	b009883a 	mov	r4,r22
  819084:	01400284 	movi	r5,10
  819088:	0820c080 	call	820c08 <__udivsi3>
  81908c:	8c7fff84 	addi	r17,r17,-2
  819090:	8809883a 	mov	r4,r17
  819094:	100b883a 	mov	r5,r2
  819098:	0820c080 	call	820c08 <__udivsi3>
  81909c:	1085883a 	add	r2,r2,r2
  8190a0:	90a5883a 	add	r18,r18,r2

      frac    = frame % -fracunits;
  8190a4:	d9400017 	ldw	r5,0(sp)
  8190a8:	9009883a 	mov	r4,r18
      seconds = frame / -fracunits;
  8190ac:	002d883a 	mov	r22,zero
      m = frame % cycle;
      frame += (10 - 1) * 2 * d;
      if (m > 2)
	frame += 2 * ((m - 2) / (cycle / 10));

      frac    = frame % -fracunits;
  8190b0:	0820c100 	call	820c10 <__umodsi3>
      seconds = frame / -fracunits;
  8190b4:	d9400017 	ldw	r5,0(sp)
  8190b8:	9009883a 	mov	r4,r18
      m = frame % cycle;
      frame += (10 - 1) * 2 * d;
      if (m > 2)
	frame += 2 * ((m - 2) / (cycle / 10));

      frac    = frame % -fracunits;
  8190bc:	d8800115 	stw	r2,4(sp)
      seconds = frame / -fracunits;
  8190c0:	0820c080 	call	820c08 <__udivsi3>
  8190c4:	1025883a 	mov	r18,r2
  8190c8:	003ef706 	br	818ca8 <mad_timer_string+0x140>
    }
    break;
  }

  switch (units) {
  8190cc:	00800c84 	movi	r2,50
  8190d0:	80becd26 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  8190d4:	00800f04 	movi	r2,60
  8190d8:	80becb26 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    sprintf(dest, format, mad_timer_count(timer, units), sub);
    break;
  }
}
  8190dc:	dfc00d17 	ldw	ra,52(sp)
  8190e0:	df000c17 	ldw	fp,48(sp)
  8190e4:	ddc00b17 	ldw	r23,44(sp)
  8190e8:	dd800a17 	ldw	r22,40(sp)
  8190ec:	dd400917 	ldw	r21,36(sp)
  8190f0:	dd000817 	ldw	r20,32(sp)
  8190f4:	dcc00717 	ldw	r19,28(sp)
  8190f8:	dc800617 	ldw	r18,24(sp)
  8190fc:	dc400517 	ldw	r17,20(sp)
  819100:	dc000417 	ldw	r16,16(sp)
  819104:	dec00e04 	addi	sp,sp,56
  819108:	f800283a 	ret
      seconds = frame / -fracunits;
    }
    break;
  }

  switch (units) {
  81910c:	008fa004 	movi	r2,16000
  819110:	80bebd26 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  819114:	00958884 	movi	r2,22050
  819118:	80bebb26 	beq	r16,r2,818c08 <mad_timer_string+0xa0>
  81911c:	008bb804 	movi	r2,12000
  819120:	80bfee1e 	bne	r16,r2,8190dc <mad_timer_string+0x574>
  819124:	003eb806 	br	818c08 <mad_timer_string+0xa0>
  819128:	00bfffc4 	movi	r2,-1
  81912c:	80807626 	beq	r16,r2,819308 <mad_timer_string+0x7a0>
  819130:	803fea1e 	bne	r16,zero,8190dc <mad_timer_string+0x574>
	    (unsigned int) (seconds % 60),
	    frac, sub);
    break;

  case MAD_UNITS_SECONDS:
    sprintf(dest, format,
  819134:	d9000217 	ldw	r4,8(sp)
  819138:	d9400317 	ldw	r5,12(sp)
  81913c:	d9c00117 	ldw	r7,4(sp)
  819140:	900d883a 	mov	r6,r18
  819144:	dd800e15 	stw	r22,56(sp)
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    sprintf(dest, format, mad_timer_count(timer, units), sub);
    break;
  }
}
  819148:	dfc00d17 	ldw	ra,52(sp)
  81914c:	df000c17 	ldw	fp,48(sp)
  819150:	ddc00b17 	ldw	r23,44(sp)
  819154:	dd800a17 	ldw	r22,40(sp)
  819158:	dd400917 	ldw	r21,36(sp)
  81915c:	dd000817 	ldw	r20,32(sp)
  819160:	dcc00717 	ldw	r19,28(sp)
  819164:	dc800617 	ldw	r18,24(sp)
  819168:	dc400517 	ldw	r17,20(sp)
  81916c:	dc000417 	ldw	r16,16(sp)
  819170:	dec00e04 	addi	sp,sp,56
	    (unsigned int) (seconds % 60),
	    frac, sub);
    break;

  case MAD_UNITS_SECONDS:
    sprintf(dest, format,
  819174:	0822b641 	jmpi	822b64 <sprintf>
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  819178:	008fa004 	movi	r2,16000
  81917c:	98beb926 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  819180:	00958884 	movi	r2,22050
  819184:	98be9c1e 	bne	r19,r2,818bf8 <mad_timer_string+0x90>
  819188:	003eb606 	br	818c64 <mad_timer_string+0xfc>
  81918c:	008012c4 	movi	r2,75
  819190:	98beb426 	beq	r19,r2,818c64 <mad_timer_string+0xfc>
  819194:	00801904 	movi	r2,100
  819198:	98be971e 	bne	r19,r2,818bf8 <mad_timer_string+0x90>
  81919c:	003eb106 	br	818c64 <mad_timer_string+0xfc>
      seconds = frame / -fracunits;
    }
    break;
  }

  switch (units) {
  8191a0:	00bff104 	movi	r2,-60
  8191a4:	80bf4a26 	beq	r16,r2,818ed0 <mad_timer_string+0x368>
  8191a8:	00bff384 	movi	r2,-50
  8191ac:	80bfcb1e 	bne	r16,r2,8190dc <mad_timer_string+0x574>
  8191b0:	003f4706 	br	818ed0 <mad_timer_string+0x368>
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  8191b4:	00800284 	movi	r2,10
  8191b8:	98be8f1e 	bne	r19,r2,818bf8 <mad_timer_string+0x90>
  8191bc:	003ea906 	br	818c64 <mad_timer_string+0xfc>
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  case MAD_UNITS_HOURS:
    return timer.seconds / 60 / 60;
  8191c0:	b804913a 	slli	r2,r23,4
  8191c4:	00c02134 	movhi	r3,132
  8191c8:	18fbb104 	addi	r3,r3,-4412
  8191cc:	10838414 	ori	r2,r2,3600
  8191d0:	10c5883a 	add	r2,r2,r3
  8191d4:	11800003 	ldbu	r6,0(r2)
  8191d8:	003ef906 	br	818dc0 <mad_timer_string+0x258>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  8191dc:	00bfffc4 	movi	r2,-1
  8191e0:	80808126 	beq	r16,r2,8193e8 <mad_timer_string+0x880>
  8191e4:	803e971e 	bne	r16,zero,818c44 <mad_timer_string+0xdc>
  8191e8:	b80d883a 	mov	r6,r23
  8191ec:	003ef406 	br	818dc0 <mad_timer_string+0x258>
  8191f0:	00ab1114 	movui	r2,44100
  8191f4:	80beeb26 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  8191f8:	00aee014 	movui	r2,48000
  8191fc:	80bee926 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  819200:	009f4004 	movi	r2,32000
  819204:	80bee726 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  819208:	000d883a 	mov	r6,zero
  81920c:	003eec06 	br	818dc0 <mad_timer_string+0x258>
  819210:	00bff104 	movi	r2,-60
  819214:	80becd26 	beq	r16,r2,818d4c <mad_timer_string+0x1e4>
  819218:	00bff384 	movi	r2,-50
  81921c:	80becb26 	beq	r16,r2,818d4c <mad_timer_string+0x1e4>
  819220:	000d883a 	mov	r6,zero
  819224:	003ee606 	br	818dc0 <mad_timer_string+0x258>
  819228:	00800c84 	movi	r2,50
  81922c:	80bedd26 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  819230:	00800f04 	movi	r2,60
  819234:	80bedb26 	beq	r16,r2,818da4 <mad_timer_string+0x23c>
  819238:	000d883a 	mov	r6,zero
  81923c:	003ee006 	br	818dc0 <mad_timer_string+0x258>
  timer = mad_timer_abs(timer);

  seconds = timer.seconds;
  frac = sub = 0;

  switch (fracunits) {
  819240:	00bff104 	movi	r2,-60
  819244:	98be6c1e 	bne	r19,r2,818bf8 <mad_timer_string+0x90>
  819248:	003efc06 	br	818e3c <mad_timer_string+0x2d4>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  81924c:	2004913a 	slli	r2,r4,4
  819250:	00c02134 	movhi	r3,132
  819254:	18fbb104 	addi	r3,r3,-4412
  819258:	1080fa54 	ori	r2,r2,1001
  81925c:	10c5883a 	add	r2,r2,r3
  819260:	11800003 	ldbu	r6,0(r2)
  819264:	003ed606 	br	818dc0 <mad_timer_string+0x258>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  819268:	00977004 	movi	r2,24000
  81926c:	98bf6e26 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819270:	14c07a16 	blt	r2,r19,81945c <mad_timer_string+0x8f4>
  819274:	008fa004 	movi	r2,16000
  819278:	98bf6b26 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  81927c:	00958884 	movi	r2,22050
  819280:	98bf6926 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819284:	008bb804 	movi	r2,12000
  819288:	98bef91e 	bne	r19,r2,818e70 <mad_timer_string+0x308>
  81928c:	003f6606 	br	819028 <mad_timer_string+0x4c0>
  819290:	00800284 	movi	r2,10
  819294:	98bf6426 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819298:	14c06216 	blt	r2,r19,819424 <mad_timer_string+0x8bc>
  81929c:	00bfffc4 	movi	r2,-1
  8192a0:	98807e26 	beq	r19,r2,81949c <mad_timer_string+0x934>
  8192a4:	983ef21e 	bne	r19,zero,818e70 <mad_timer_string+0x308>
  8192a8:	013ffb84 	movi	r4,-18
  8192ac:	b905403a 	cmpgeu	r2,r23,r4
  8192b0:	1105383a 	mul	r2,r2,r4
  8192b4:	202d883a 	mov	r22,r4
  8192b8:	d8000015 	stw	zero,0(sp)
  8192bc:	b8a3c83a 	sub	r17,r23,r2
  8192c0:	003f6806 	br	819064 <mad_timer_string+0x4fc>
  8192c4:	b8c38414 	ori	r3,r23,3600
  8192c8:	008003c4 	movi	r2,15
  8192cc:	10c05036 	bltu	r2,r3,819410 <mad_timer_string+0x8a8>
  8192d0:	b804913a 	slli	r2,r23,4
  8192d4:	00c02134 	movhi	r3,132
  8192d8:	18fbb104 	addi	r3,r3,-4412
  8192dc:	10838414 	ori	r2,r2,3600
  8192e0:	10c5883a 	add	r2,r2,r3
  8192e4:	14800003 	ldbu	r18,0(r2)
  8192e8:	01412784 	movi	r5,1182
  8192ec:	9009883a 	mov	r4,r18
  8192f0:	0820c100 	call	820c10 <__umodsi3>
  8192f4:	1023883a 	mov	r17,r2
  8192f8:	01400084 	movi	r5,2
  8192fc:	05812784 	movi	r22,1182
  819300:	d9400015 	stw	r5,0(sp)
  819304:	003f5706 	br	819064 <mad_timer_string+0x4fc>
    break;

  case MAD_UNITS_MINUTES:
    minutes = seconds / 60;

    sprintf(dest, format,
  819308:	9009883a 	mov	r4,r18
  81930c:	01400f04 	movi	r5,60
  819310:	0820c080 	call	820c08 <__udivsi3>
  819314:	9009883a 	mov	r4,r18
  819318:	01400f04 	movi	r5,60
  81931c:	1023883a 	mov	r17,r2
  819320:	0820c100 	call	820c10 <__umodsi3>
  819324:	100f883a 	mov	r7,r2
  819328:	d9000217 	ldw	r4,8(sp)
  81932c:	d8800117 	ldw	r2,4(sp)
  819330:	d9400317 	ldw	r5,12(sp)
  819334:	880d883a 	mov	r6,r17
  819338:	d8800e15 	stw	r2,56(sp)
  81933c:	dd800f15 	stw	r22,60(sp)
  case MAD_UNITS_60_FPS:
  case MAD_UNITS_75_FPS:
    sprintf(dest, format, mad_timer_count(timer, units), sub);
    break;
  }
}
  819340:	dfc00d17 	ldw	ra,52(sp)
  819344:	df000c17 	ldw	fp,48(sp)
  819348:	ddc00b17 	ldw	r23,44(sp)
  81934c:	dd800a17 	ldw	r22,40(sp)
  819350:	dd400917 	ldw	r21,36(sp)
  819354:	dd000817 	ldw	r20,32(sp)
  819358:	dcc00717 	ldw	r19,28(sp)
  81935c:	dc800617 	ldw	r18,24(sp)
  819360:	dc400517 	ldw	r17,20(sp)
  819364:	dc000417 	ldw	r16,16(sp)
  819368:	dec00e04 	addi	sp,sp,56
    break;

  case MAD_UNITS_MINUTES:
    minutes = seconds / 60;

    sprintf(dest, format,
  81936c:	0822b641 	jmpi	822b64 <sprintf>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  819370:	00bff884 	movi	r2,-30
  819374:	98800426 	beq	r19,r2,819388 <mad_timer_string+0x820>
  819378:	98bebd16 	blt	r19,r2,818e70 <mad_timer_string+0x308>
  81937c:	98c00644 	addi	r3,r19,25
  819380:	00800044 	movi	r2,1
  819384:	10feba36 	bltu	r2,r3,818e70 <mad_timer_string+0x308>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  819388:	04c5c83a 	sub	r2,zero,r19
  81938c:	b809883a 	mov	r4,r23
  819390:	e00b883a 	mov	r5,fp
  819394:	100d883a 	mov	r6,r2
  819398:	d8800015 	stw	r2,0(sp)
  81939c:	08182400 	call	818240 <mad_timer_count>
  8193a0:	1080fa24 	muli	r2,r2,1000
  8193a4:	1100fa04 	addi	r4,r2,1000
  8193a8:	20c0fa54 	ori	r3,r4,1001
  8193ac:	008003c4 	movi	r2,15
  8193b0:	10c03136 	bltu	r2,r3,819478 <mad_timer_string+0x910>
  8193b4:	2004913a 	slli	r2,r4,4
  8193b8:	00c02134 	movhi	r3,132
  8193bc:	18fbb104 	addi	r3,r3,-4412
  8193c0:	1080fa54 	ori	r2,r2,1001
  8193c4:	10c5883a 	add	r2,r2,r3
  8193c8:	14800003 	ldbu	r18,0(r2)
  8193cc:	98bf6a24 	muli	r2,r19,-600
  8193d0:	9009883a 	mov	r4,r18
  8193d4:	15bffb84 	addi	r22,r2,-18
  8193d8:	b00b883a 	mov	r5,r22
  8193dc:	0820c100 	call	820c10 <__umodsi3>
  8193e0:	1023883a 	mov	r17,r2
  8193e4:	003f1f06 	br	819064 <mad_timer_string+0x4fc>
  switch (units) {
  case MAD_UNITS_HOURS:
    return timer.seconds / 60 / 60;

  case MAD_UNITS_MINUTES:
    return timer.seconds / 60;
  8193e8:	b8c00f14 	ori	r3,r23,60
  8193ec:	008003c4 	movi	r2,15
  8193f0:	10c02536 	bltu	r2,r3,819488 <mad_timer_string+0x920>
  8193f4:	b804913a 	slli	r2,r23,4
  8193f8:	00c02134 	movhi	r3,132
  8193fc:	18fbb104 	addi	r3,r3,-4412
  819400:	10800f14 	ori	r2,r2,60
  819404:	10c5883a 	add	r2,r2,r3
  819408:	11800003 	ldbu	r6,0(r2)
  81940c:	003e6c06 	br	818dc0 <mad_timer_string+0x258>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  819410:	b809883a 	mov	r4,r23
  819414:	01438404 	movi	r5,3600
  819418:	0820b480 	call	820b48 <__divsi3>
  81941c:	1025883a 	mov	r18,r2
  819420:	003fb106 	br	8192e8 <mad_timer_string+0x780>
  819424:	00800604 	movi	r2,24
  819428:	98be9116 	blt	r19,r2,818e70 <mad_timer_string+0x308>
  81942c:	00800644 	movi	r2,25
  819430:	14fefd0e 	bge	r2,r19,819028 <mad_timer_string+0x4c0>
  819434:	00800784 	movi	r2,30
  819438:	98be8d1e 	bne	r19,r2,818e70 <mad_timer_string+0x308>
  81943c:	003efa06 	br	819028 <mad_timer_string+0x4c0>
  819440:	0080fa04 	movi	r2,1000
  819444:	98bef826 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819448:	0087d004 	movi	r2,8000
  81944c:	98bef626 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819450:	00801904 	movi	r2,100
  819454:	98be861e 	bne	r19,r2,818e70 <mad_timer_string+0x308>
  819458:	003ef306 	br	819028 <mad_timer_string+0x4c0>
  81945c:	00ab1114 	movui	r2,44100
  819460:	98bef126 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  819464:	00aee014 	movui	r2,48000
  819468:	98beef26 	beq	r19,r2,819028 <mad_timer_string+0x4c0>
  81946c:	009f4004 	movi	r2,32000
  819470:	98be7f1e 	bne	r19,r2,818e70 <mad_timer_string+0x308>
  819474:	003eec06 	br	819028 <mad_timer_string+0x4c0>
  case MAD_UNITS_24_975_FPS:
  case MAD_UNITS_29_97_FPS:
  case MAD_UNITS_47_952_FPS:
  case MAD_UNITS_49_95_FPS:
  case MAD_UNITS_59_94_FPS:
    return (mad_timer_count(timer, -units) + 1) * 1000 / 1001;
  819478:	0140fa44 	movi	r5,1001
  81947c:	0820b480 	call	820b48 <__divsi3>
  819480:	1025883a 	mov	r18,r2
  819484:	003fd106 	br	8193cc <mad_timer_string+0x864>
  switch (units) {
  case MAD_UNITS_HOURS:
    return timer.seconds / 60 / 60;

  case MAD_UNITS_MINUTES:
    return timer.seconds / 60;
  819488:	b809883a 	mov	r4,r23
  81948c:	01400f04 	movi	r5,60
  819490:	0820b480 	call	820b48 <__divsi3>
  819494:	100d883a 	mov	r6,r2
  819498:	003e4906 	br	818dc0 <mad_timer_string+0x258>
 * NAME:	timer->count()
 * DESCRIPTION:	return timer value in selected units
 */
signed long mad_timer_count(mad_timer_t timer, enum mad_units units)
{
  switch (units) {
  81949c:	b8c00f14 	ori	r3,r23,60
  8194a0:	008003c4 	movi	r2,15
  8194a4:	10c00e36 	bltu	r2,r3,8194e0 <mad_timer_string+0x978>
  8194a8:	b804913a 	slli	r2,r23,4
  8194ac:	00c02134 	movhi	r3,132
  8194b0:	18fbb104 	addi	r3,r3,-4412
  8194b4:	10800f14 	ori	r2,r2,60
  8194b8:	10c5883a 	add	r2,r2,r3
  8194bc:	14800003 	ldbu	r18,0(r2)
  8194c0:	9009883a 	mov	r4,r18
  8194c4:	01409184 	movi	r5,582
  8194c8:	0820c100 	call	820c10 <__umodsi3>
  8194cc:	1023883a 	mov	r17,r2
  8194d0:	05809184 	movi	r22,582
  8194d4:	00800044 	movi	r2,1
  8194d8:	d8800015 	stw	r2,0(sp)
  8194dc:	003ee106 	br	819064 <mad_timer_string+0x4fc>
  8194e0:	b809883a 	mov	r4,r23
  8194e4:	01400f04 	movi	r5,60
  8194e8:	0820b480 	call	820b48 <__divsi3>
  8194ec:	1025883a 	mov	r18,r2
  8194f0:	003ff306 	br	8194c0 <mad_timer_string+0x958>

008194f4 <disableAudioDeviceController>:
	alt_irq_register(AUDIO_IRQ, up_dev.audio_dev, (void*) audio_ISR);
	//alt_irq_enable(AUDIO_IRQ);
}

void disableAudioDeviceController() {
	alt_up_audio_disable_write_interrupt(up_dev.audio_dev);
  8194f4:	00802174 	movhi	r2,133
  8194f8:	10b3a104 	addi	r2,r2,-12668
  8194fc:	11000117 	ldw	r4,4(r2)
  819500:	082beb01 	jmpi	82beb0 <alt_up_audio_disable_write_interrupt>

00819504 <enableAudioDeviceController>:
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
}

void enableAudioDeviceController() {
  819504:	defffe04 	addi	sp,sp,-8
  819508:	dc000015 	stw	r16,0(sp)
	alt_up_audio_enable_write_interrupt(up_dev.audio_dev);
  81950c:	04002174 	movhi	r16,133
  819510:	8433a104 	addi	r16,r16,-12668
  819514:	81000117 	ldw	r4,4(r16)
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
}

void enableAudioDeviceController() {
  819518:	dfc00115 	stw	ra,4(sp)
	alt_up_audio_enable_write_interrupt(up_dev.audio_dev);
  81951c:	082bec80 	call	82bec8 <alt_up_audio_enable_write_interrupt>
	alt_irq_register(AUDIO_IRQ, up_dev.audio_dev, (void*) audio_ISR);
  819520:	81400117 	ldw	r5,4(r16)
  819524:	01000044 	movi	r4,1
  819528:	01802074 	movhi	r6,129
  81952c:	31a83004 	addi	r6,r6,-24384
	//alt_irq_enable(AUDIO_IRQ);
}
  819530:	dfc00117 	ldw	ra,4(sp)
  819534:	dc000017 	ldw	r16,0(sp)
  819538:	dec00204 	addi	sp,sp,8
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
}

void enableAudioDeviceController() {
	alt_up_audio_enable_write_interrupt(up_dev.audio_dev);
	alt_irq_register(AUDIO_IRQ, up_dev.audio_dev, (void*) audio_ISR);
  81953c:	082acec1 	jmpi	82acec <alt_irq_register>

00819540 <av_config_setup>:

/**
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
  819540:	defffe04 	addi	sp,sp,-8
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  819544:	01002134 	movhi	r4,132
  819548:	21391704 	addi	r4,r4,-7076

/**
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
  81954c:	dc000015 	stw	r16,0(sp)
  819550:	dfc00115 	stw	ra,4(sp)
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  819554:	082c1200 	call	82c120 <alt_up_av_config_open_dev>
  819558:	1021883a 	mov	r16,r2
	while (!alt_up_av_config_read_ready(av_config));
  81955c:	8009883a 	mov	r4,r16
  819560:	082c0c40 	call	82c0c4 <alt_up_av_config_read_ready>
  819564:	103ffd26 	beq	r2,zero,81955c <av_config_setup+0x1c>
}
  819568:	dfc00117 	ldw	ra,4(sp)
  81956c:	dc000017 	ldw	r16,0(sp)
  819570:	dec00204 	addi	sp,sp,8
  819574:	f800283a 	ret

00819578 <initAudioDeviceController>:

void initAudioDeviceController() {
  819578:	defffe04 	addi	sp,sp,-8
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  81957c:	01002134 	movhi	r4,132
  819580:	21391704 	addi	r4,r4,-7076
	while (!alt_up_av_config_read_ready(av_config));
}

void initAudioDeviceController() {
  819584:	dc000015 	stw	r16,0(sp)
  819588:	dfc00115 	stw	ra,4(sp)
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  81958c:	082c1200 	call	82c120 <alt_up_av_config_open_dev>
  819590:	1021883a 	mov	r16,r2
	while (!alt_up_av_config_read_ready(av_config));
  819594:	8009883a 	mov	r4,r16
  819598:	082c0c40 	call	82c0c4 <alt_up_av_config_read_ready>
  81959c:	103ffd26 	beq	r2,zero,819594 <initAudioDeviceController+0x1c>
}

void initAudioDeviceController() {
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
  8195a0:	01002134 	movhi	r4,132
  8195a4:	21391f04 	addi	r4,r4,-7044
  8195a8:	082bf080 	call	82bf08 <alt_up_audio_open_dev>
  8195ac:	00c02174 	movhi	r3,133
  8195b0:	18f3a104 	addi	r3,r3,-12668
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
  8195b4:	1009883a 	mov	r4,r2
	while (!alt_up_av_config_read_ready(av_config));
}

void initAudioDeviceController() {
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
  8195b8:	18800115 	stw	r2,4(r3)
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
}
  8195bc:	dfc00117 	ldw	ra,4(sp)
  8195c0:	dc000017 	ldw	r16,0(sp)
  8195c4:	dec00204 	addi	sp,sp,8
}

void initAudioDeviceController() {
	av_config_setup();
	up_dev.audio_dev = alt_up_audio_open_dev(AUDIO_NAME);
	alt_up_audio_reset_audio_core(up_dev.audio_dev);
  8195c8:	082be641 	jmpi	82be64 <alt_up_audio_reset_audio_core>

008195cc <getBitRateKbps>:
	printf("AudioFormat sampleRate: %d, sampleSizeInBits: %d, channels: %d, bitRate(Kbps): %d\n",
			sampleRate, sampleSizeInBits, channels, this->bitRateKbps);
	return this;
}

float getBitRateKbps(struct AudioFormat* this) {
  8195cc:	21000317 	ldw	r4,12(r4)
  8195d0:	deffff04 	addi	sp,sp,-4
  8195d4:	dfc00015 	stw	ra,0(sp)
  8195d8:	081f8d00 	call	81f8d0 <__floatsisf>
	return this->bitRateKbps;
}
  8195dc:	dfc00017 	ldw	ra,0(sp)
  8195e0:	dec00104 	addi	sp,sp,4
  8195e4:	f800283a 	ret

008195e8 <getSampleRate>:

int getSampleRate(struct AudioFormat* this) {
	return this->sampleRate;
}
  8195e8:	20800117 	ldw	r2,4(r4)
  8195ec:	f800283a 	ret

008195f0 <getSampleSizeInBits>:

int getSampleSizeInBits(struct AudioFormat* this) {
	return this->sampleSizeInBits;
}
  8195f0:	20800217 	ldw	r2,8(r4)
  8195f4:	f800283a 	ret

008195f8 <getSampleSizeInBytes>:

int getSampleSizeInBytes(struct AudioFormat* this) {
  8195f8:	20800217 	ldw	r2,8(r4)
  8195fc:	10000216 	blt	r2,zero,819608 <getSampleSizeInBytes+0x10>
	return this->sampleSizeInBits / 8;
}
  819600:	1005d0fa 	srai	r2,r2,3
  819604:	f800283a 	ret

int getSampleSizeInBits(struct AudioFormat* this) {
	return this->sampleSizeInBits;
}

int getSampleSizeInBytes(struct AudioFormat* this) {
  819608:	108001c4 	addi	r2,r2,7
	return this->sampleSizeInBits / 8;
}
  81960c:	1005d0fa 	srai	r2,r2,3
  819610:	f800283a 	ret

00819614 <getNumChannels>:

int getNumChannels(struct AudioFormat* this) {
	return this->channels;
}
  819614:	20800017 	ldw	r2,0(r4)
  819618:	f800283a 	ret

0081961c <setSampleRate>:

void setSampleRate(struct AudioFormat* this, int sampleRate) {
	this->sampleRate = sampleRate;
  81961c:	21400115 	stw	r5,4(r4)
}
  819620:	f800283a 	ret

00819624 <initAudioFormat>:
 */

#include "AudioFormat.h"

struct AudioFormat* initAudioFormat(int sampleRate, int sampleSizeInBits,
		int channels, int byteRate) {
  819624:	defff904 	addi	sp,sp,-28
  819628:	ddc00515 	stw	r23,20(sp)
  81962c:	dcc00315 	stw	r19,12(sp)
  819630:	202f883a 	mov	r23,r4
  819634:	3827883a 	mov	r19,r7
	struct AudioFormat* this = (struct AudioFormat*) malloc(sizeof(struct AudioFormat));
  819638:	01000404 	movi	r4,16
 */

#include "AudioFormat.h"

struct AudioFormat* initAudioFormat(int sampleRate, int sampleSizeInBits,
		int channels, int byteRate) {
  81963c:	dfc00615 	stw	ra,24(sp)
  819640:	dd400415 	stw	r21,16(sp)
  819644:	dc400215 	stw	r17,8(sp)
  819648:	282b883a 	mov	r21,r5
  81964c:	dc000115 	stw	r16,4(sp)
  819650:	3021883a 	mov	r16,r6
	struct AudioFormat* this = (struct AudioFormat*) malloc(sizeof(struct AudioFormat));
  819654:	08216fc0 	call	8216fc <malloc>
	this->sampleRate = sampleRate;
	this->sampleSizeInBits = sampleSizeInBits;
	this->channels = channels;
	this->bitRateKbps = (float) (byteRate * 8) / 1000;
  819658:	980890fa 	slli	r4,r19,3
#include "AudioFormat.h"

struct AudioFormat* initAudioFormat(int sampleRate, int sampleSizeInBits,
		int channels, int byteRate) {
	struct AudioFormat* this = (struct AudioFormat*) malloc(sizeof(struct AudioFormat));
	this->sampleRate = sampleRate;
  81965c:	15c00115 	stw	r23,4(r2)
	this->sampleSizeInBits = sampleSizeInBits;
  819660:	15400215 	stw	r21,8(r2)
	this->channels = channels;
  819664:	14000015 	stw	r16,0(r2)

#include "AudioFormat.h"

struct AudioFormat* initAudioFormat(int sampleRate, int sampleSizeInBits,
		int channels, int byteRate) {
	struct AudioFormat* this = (struct AudioFormat*) malloc(sizeof(struct AudioFormat));
  819668:	1023883a 	mov	r17,r2
	this->sampleRate = sampleRate;
	this->sampleSizeInBits = sampleSizeInBits;
	this->channels = channels;
	this->bitRateKbps = (float) (byteRate * 8) / 1000;
  81966c:	081f8d00 	call	81f8d0 <__floatsisf>
  819670:	01511eb4 	movhi	r5,17530
  819674:	1009883a 	mov	r4,r2
  819678:	081f5f40 	call	81f5f4 <__divsf3>
  81967c:	1009883a 	mov	r4,r2
  819680:	081f9680 	call	81f968 <__fixsfsi>
	printf("AudioFormat sampleRate: %d, sampleSizeInBits: %d, channels: %d, bitRate(Kbps): %d\n",
  819684:	b80b883a 	mov	r5,r23
  819688:	a80d883a 	mov	r6,r21
  81968c:	800f883a 	mov	r7,r16
  819690:	01002134 	movhi	r4,132
  819694:	21392204 	addi	r4,r4,-7032
  819698:	d8800015 	stw	r2,0(sp)
		int channels, int byteRate) {
	struct AudioFormat* this = (struct AudioFormat*) malloc(sizeof(struct AudioFormat));
	this->sampleRate = sampleRate;
	this->sampleSizeInBits = sampleSizeInBits;
	this->channels = channels;
	this->bitRateKbps = (float) (byteRate * 8) / 1000;
  81969c:	88800315 	stw	r2,12(r17)
	printf("AudioFormat sampleRate: %d, sampleSizeInBits: %d, channels: %d, bitRate(Kbps): %d\n",
  8196a0:	08220680 	call	822068 <printf>
			sampleRate, sampleSizeInBits, channels, this->bitRateKbps);
	return this;
}
  8196a4:	8805883a 	mov	r2,r17
  8196a8:	dfc00617 	ldw	ra,24(sp)
  8196ac:	ddc00517 	ldw	r23,20(sp)
  8196b0:	dd400417 	ldw	r21,16(sp)
  8196b4:	dcc00317 	ldw	r19,12(sp)
  8196b8:	dc400217 	ldw	r17,8(sp)
  8196bc:	dc000117 	ldw	r16,4(sp)
  8196c0:	dec00704 	addi	sp,sp,28
  8196c4:	f800283a 	ret

008196c8 <convertFromMS>:
 * in the sound buffer
 */
unsigned int convertFromMS(int value) {

	return (unsigned int) (value * 32);
}
  8196c8:	2004917a 	slli	r2,r4,5
  8196cc:	f800283a 	ret

008196d0 <convertToMS>:

/**
 * Helper function to convert a value to its millisecond equivalent based on the
 * sampling rate
 */
unsigned int convertToMS(unsigned int value) {
  8196d0:	2100fa24 	muli	r4,r4,1000
  8196d4:	deffff04 	addi	sp,sp,-4
  8196d8:	015f4004 	movi	r5,32000
  8196dc:	dfc00015 	stw	ra,0(sp)
  8196e0:	0820c080 	call	820c08 <__udivsi3>
	return (unsigned int) ((value * 1000) / DEFAULT_SAMPLE_RATE);
}
  8196e4:	dfc00017 	ldw	ra,0(sp)
  8196e8:	dec00104 	addi	sp,sp,4
  8196ec:	f800283a 	ret

008196f0 <getMaxSoundValue>:
}

int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
  8196f0:	21800517 	ldw	r6,20(r4)
  8196f4:	30001226 	beq	r6,zero,819740 <getMaxSoundValue+0x50>
		nextVal = this->buffer[i] < 0 ? -this->buffer[i] : this->buffer[i];
  8196f8:	21000717 	ldw	r4,28(r4)
  8196fc:	000b883a 	mov	r5,zero
  819700:	000f883a 	mov	r7,zero
  819704:	0007883a 	mov	r3,zero
		maxVal = nextVal > maxVal ? nextVal : maxVal;
  819708:	18c5883a 	add	r2,r3,r3
  81970c:	1085883a 	add	r2,r2,r2
  819710:	1105883a 	add	r2,r2,r4
  819714:	10800017 	ldw	r2,0(r2)
}

int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
  819718:	29400044 	addi	r5,r5,1
  81971c:	2807883a 	mov	r3,r5
		nextVal = this->buffer[i] < 0 ? -this->buffer[i] : this->buffer[i];
		maxVal = nextVal > maxVal ? nextVal : maxVal;
  819720:	10000516 	blt	r2,zero,819738 <getMaxSoundValue+0x48>
  819724:	3880010e 	bge	r7,r2,81972c <getMaxSoundValue+0x3c>
  819728:	100f883a 	mov	r7,r2
}

int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
  81972c:	29bff61e 	bne	r5,r6,819708 <getMaxSoundValue+0x18>
		nextVal = this->buffer[i] < 0 ? -this->buffer[i] : this->buffer[i];
		maxVal = nextVal > maxVal ? nextVal : maxVal;
	}
	return maxVal;
}
  819730:	3805883a 	mov	r2,r7
  819734:	f800283a 	ret
int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
		nextVal = this->buffer[i] < 0 ? -this->buffer[i] : this->buffer[i];
		maxVal = nextVal > maxVal ? nextVal : maxVal;
  819738:	0085c83a 	sub	r2,zero,r2
  81973c:	003ff906 	br	819724 <getMaxSoundValue+0x34>
}

int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
  819740:	000f883a 	mov	r7,zero
		nextVal = this->buffer[i] < 0 ? -this->buffer[i] : this->buffer[i];
		maxVal = nextVal > maxVal ? nextVal : maxVal;
	}
	return maxVal;
}
  819744:	3805883a 	mov	r2,r7
  819748:	f800283a 	ret

0081974c <allowFade>:
	this->audioFormat = NULL;
	return this;
}

bool allowFade(struct Sound* this) {
	return !(this->inFadePosition == 0 && this->outFadePosition == this->length);
  81974c:	20800117 	ldw	r2,4(r4)
  819750:	00c00044 	movi	r3,1
  819754:	1000031e 	bne	r2,zero,819764 <allowFade+0x18>
  819758:	20c00517 	ldw	r3,20(r4)
  81975c:	20800217 	ldw	r2,8(r4)
  819760:	10c6c03a 	cmpne	r3,r2,r3
}
  819764:	1805883a 	mov	r2,r3
  819768:	f800283a 	ret

0081976c <setFadeInLength>:
		return loadWavSound(this->song_name);
	return NULL;
}

void setFadeInLength(struct Sound* this, unsigned int inFadeLength) {
	this->inFadePosition = inFadeLength;
  81976c:	21400115 	stw	r5,4(r4)
}
  819770:	f800283a 	ret

00819774 <setFadeOutLength>:

void setFadeOutLength(struct Sound* this, unsigned int len) {
	this->outFadePosition = this->length - len;
  819774:	20800517 	ldw	r2,20(r4)
  819778:	1145c83a 	sub	r2,r2,r5
  81977c:	20800215 	stw	r2,8(r4)
}
  819780:	f800283a 	ret

00819784 <setSoundVolume>:
/**
 * Changes the sound volume so that it can be taken into account when
 * adding the sound to the SoundMixer.
 */
void setSoundVolume(struct Sound* this, float volume) {
	this->volume = volume;
  819784:	21400815 	stw	r5,32(r4)
	this->fadeVolume = volume;
  819788:	21400915 	stw	r5,36(r4)
}
  81978c:	f800283a 	ret

00819790 <seekSound>:
 *
 * @param this - The sound to change
 * @param position - The position to seek to in MilliSeconds
 */
void seekSound(struct Sound* this, unsigned int position) {
	this->position = convertFromMS(position);
  819790:	280a917a 	slli	r5,r5,5
  819794:	21400315 	stw	r5,12(r4)
}
  819798:	f800283a 	ret

0081979c <stopSound>:
	setSoundVolume(sound, volume);
	sound->loops = loops;
}

void stopSound(struct Sound* sound) {
	sound->position = 0;
  81979c:	20000315 	stw	zero,12(r4)
}
  8197a0:	f800283a 	ret

008197a4 <checkEnd>:
	free(sound);
	sound = NULL;
}*/

bool checkEnd(struct Sound* this) {
	return (this->position >= this->length) && this->length != 0;
  8197a4:	20800317 	ldw	r2,12(r4)
  8197a8:	20c00517 	ldw	r3,20(r4)
  8197ac:	0009883a 	mov	r4,zero
  8197b0:	10c00136 	bltu	r2,r3,8197b8 <checkEnd+0x14>
  8197b4:	1808c03a 	cmpne	r4,r3,zero
}
  8197b8:	2005883a 	mov	r2,r4
  8197bc:	f800283a 	ret

008197c0 <output>:
	nchannels = pcm->channels;
	nsamples = pcm->length;
	left_ch = pcm->samples[0];
	right_ch = pcm->samples[1];

	for (i = 0; i < nsamples; i++) {
  8197c0:	3240018b 	ldhu	r9,6(r6)
 * is to output (or play) the decoded PCM audio.
 *
 * (In our case, we simply put the PCM values into a buffer)
 */
static enum mad_flow output(void *data, struct mad_header const *header,
		struct mad_pcm *pcm) {
  8197c4:	deffff04 	addi	sp,sp,-4
  8197c8:	dfc00015 	stw	ra,0(sp)
  8197cc:	200b883a 	mov	r5,r4
	mad_fixed_t const *left_ch, *right_ch;
	int i;

	nchannels = pcm->channels;
	nsamples = pcm->length;
	left_ch = pcm->samples[0];
  8197d0:	31800204 	addi	r6,r6,8
	right_ch = pcm->samples[1];

	for (i = 0; i < nsamples; i++) {
  8197d4:	48001826 	beq	r9,zero,819838 <output+0x78>
		if (sound->position > sound->length) {
  8197d8:	20c00317 	ldw	r3,12(r4)
  8197dc:	20800517 	ldw	r2,20(r4)
  8197e0:	10c01936 	bltu	r2,r3,819848 <output+0x88>
  8197e4:	22000717 	ldw	r8,28(r4)
			printf("Trying to write more space than allocated");
			break;
  8197e8:	000f883a 	mov	r7,zero
  8197ec:	0009883a 	mov	r4,zero
  8197f0:	00000206 	br	8197fc <output+0x3c>
	nsamples = pcm->length;
	left_ch = pcm->samples[0];
	right_ch = pcm->samples[1];

	for (i = 0; i < nsamples; i++) {
		if (sound->position > sound->length) {
  8197f4:	28800517 	ldw	r2,20(r5)
  8197f8:	10c01336 	bltu	r2,r3,819848 <output+0x88>
			printf("Trying to write more space than allocated");
			break;
		}
		sound->buffer[sound->position] = (left_ch[i] & 0xFFFFFF00) >> 8;
  8197fc:	2105883a 	add	r2,r4,r4
  819800:	1085883a 	add	r2,r2,r2
  819804:	1185883a 	add	r2,r2,r6
  819808:	11000017 	ldw	r4,0(r2)
  81980c:	18c7883a 	add	r3,r3,r3
  819810:	18c7883a 	add	r3,r3,r3
  819814:	2008d23a 	srli	r4,r4,8
  819818:	1a07883a 	add	r3,r3,r8
	nchannels = pcm->channels;
	nsamples = pcm->length;
	left_ch = pcm->samples[0];
	right_ch = pcm->samples[1];

	for (i = 0; i < nsamples; i++) {
  81981c:	39c00044 	addi	r7,r7,1
		if (sound->position > sound->length) {
			printf("Trying to write more space than allocated");
			break;
		}
		sound->buffer[sound->position] = (left_ch[i] & 0xFFFFFF00) >> 8;
  819820:	19000015 	stw	r4,0(r3)
		sound->position++;
  819824:	28800317 	ldw	r2,12(r5)
	nchannels = pcm->channels;
	nsamples = pcm->length;
	left_ch = pcm->samples[0];
	right_ch = pcm->samples[1];

	for (i = 0; i < nsamples; i++) {
  819828:	3809883a 	mov	r4,r7
		if (sound->position > sound->length) {
			printf("Trying to write more space than allocated");
			break;
		}
		sound->buffer[sound->position] = (left_ch[i] & 0xFFFFFF00) >> 8;
		sound->position++;
  81982c:	10c00044 	addi	r3,r2,1
  819830:	28c00315 	stw	r3,12(r5)
	nchannels = pcm->channels;
	nsamples = pcm->length;
	left_ch = pcm->samples[0];
	right_ch = pcm->samples[1];

	for (i = 0; i < nsamples; i++) {
  819834:	49ffef1e 	bne	r9,r7,8197f4 <output+0x34>
		sound->buffer[sound->position] = (left_ch[i] & 0xFFFFFF00) >> 8;
		sound->position++;
	}

	return MAD_FLOW_CONTINUE;
}
  819838:	0005883a 	mov	r2,zero
  81983c:	dfc00017 	ldw	ra,0(sp)
  819840:	dec00104 	addi	sp,sp,4
  819844:	f800283a 	ret
	left_ch = pcm->samples[0];
	right_ch = pcm->samples[1];

	for (i = 0; i < nsamples; i++) {
		if (sound->position > sound->length) {
			printf("Trying to write more space than allocated");
  819848:	01002134 	movhi	r4,132
  81984c:	21393704 	addi	r4,r4,-6948
  819850:	08220680 	call	822068 <printf>
		sound->buffer[sound->position] = (left_ch[i] & 0xFFFFFF00) >> 8;
		sound->position++;
	}

	return MAD_FLOW_CONTINUE;
}
  819854:	0005883a 	mov	r2,zero
  819858:	dfc00017 	ldw	ra,0(sp)
  81985c:	dec00104 	addi	sp,sp,4
  819860:	f800283a 	ret

00819864 <readFileTilOffset>:
	printf("Sound loading complete\n");

	return sound;
}

int readFileTilOffset(int filePointer, int startIndex, int offset) {
  819864:	defffb04 	addi	sp,sp,-20
  819868:	dc800315 	stw	r18,12(sp)
  81986c:	dfc00415 	stw	ra,16(sp)
  819870:	dc400215 	stw	r17,8(sp)
  819874:	dc000115 	stw	r16,4(sp)
  819878:	2825883a 	mov	r18,r5
	while (startIndex < offset) {
  81987c:	2980140e 	bge	r5,r6,8198d0 <readFileTilOffset+0x6c>
  819880:	247fffcc 	andi	r17,r4,65535
  819884:	8c60001c 	xori	r17,r17,32768
  819888:	8c600004 	addi	r17,r17,-32768
  81988c:	0021883a 	mov	r16,zero
  819890:	00000106 	br	819898 <readFileTilOffset+0x34>
  819894:	80c00e26 	beq	r16,r3,8198d0 <readFileTilOffset+0x6c>
		if (alt_up_sd_card_read(filePointer) < 0) {
  819898:	8809883a 	mov	r4,r17
  81989c:	d9800015 	stw	r6,0(sp)
  8198a0:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  8198a4:	10bfffcc 	andi	r2,r2,65535

	return sound;
}

int readFileTilOffset(int filePointer, int startIndex, int offset) {
	while (startIndex < offset) {
  8198a8:	d9800017 	ldw	r6,0(sp)
		if (alt_up_sd_card_read(filePointer) < 0) {
  8198ac:	10a0001c 	xori	r2,r2,32768
  8198b0:	10a00004 	addi	r2,r2,-32768
			printf("read file invalid\n");
			return -1;
  8198b4:	84000044 	addi	r16,r16,1

	return sound;
}

int readFileTilOffset(int filePointer, int startIndex, int offset) {
	while (startIndex < offset) {
  8198b8:	3487c83a 	sub	r3,r6,r18
		if (alt_up_sd_card_read(filePointer) < 0) {
  8198bc:	103ff50e 	bge	r2,zero,819894 <readFileTilOffset+0x30>
			printf("read file invalid\n");
  8198c0:	01002134 	movhi	r4,132
  8198c4:	21394204 	addi	r4,r4,-6904
  8198c8:	08221800 	call	822180 <puts>
  8198cc:	01bfffc4 	movi	r6,-1
			return -1;
		}
		startIndex++;
	}
	return offset;
}
  8198d0:	3005883a 	mov	r2,r6
  8198d4:	dfc00417 	ldw	ra,16(sp)
  8198d8:	dc800317 	ldw	r18,12(sp)
  8198dc:	dc400217 	ldw	r17,8(sp)
  8198e0:	dc000117 	ldw	r16,4(sp)
  8198e4:	dec00504 	addi	sp,sp,20
  8198e8:	f800283a 	ret

008198ec <initSound>:
	if (!this->buffer)
		printf("Failed to allocate sound buffer\n");
	clearSoundBuffer(this);
}

struct Sound* initSound(unsigned int length) {
  8198ec:	defffd04 	addi	sp,sp,-12
  8198f0:	dc400115 	stw	r17,4(sp)
  8198f4:	2023883a 	mov	r17,r4
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  8198f8:	01000a04 	movi	r4,40
	if (!this->buffer)
		printf("Failed to allocate sound buffer\n");
	clearSoundBuffer(this);
}

struct Sound* initSound(unsigned int length) {
  8198fc:	dc000015 	stw	r16,0(sp)
  819900:	dfc00215 	stw	ra,8(sp)
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  819904:	08216fc0 	call	8216fc <malloc>
  819908:	1021883a 	mov	r16,r2
	if (!this)
		printf("Failed to allocate space for sound\n");
  81990c:	01002134 	movhi	r4,132
  819910:	21394704 	addi	r4,r4,-6884
	clearSoundBuffer(this);
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	if (!this)
  819914:	10001026 	beq	r2,zero,819958 <initSound+0x6c>
		printf("Failed to allocate space for sound\n");
	this->length = length;
	this->position = 0;
	this->buffer = NULL;
	this->volume = 1;
  819918:	008fe034 	movhi	r2,16256
  81991c:	80800815 	stw	r2,32(r16)
	this->fadeVolume = 1;
  819920:	80800915 	stw	r2,36(r16)
	this->inFadePosition = 0;
	this->outFadePosition = this->length;
	this->loading_pos = 0;
	this->audioFormat = NULL;
	return this;
}
  819924:	8005883a 	mov	r2,r16
	this->position = 0;
	this->buffer = NULL;
	this->volume = 1;
	this->fadeVolume = 1;
	this->inFadePosition = 0;
	this->outFadePosition = this->length;
  819928:	84400215 	stw	r17,8(r16)

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	if (!this)
		printf("Failed to allocate space for sound\n");
	this->length = length;
  81992c:	84400515 	stw	r17,20(r16)
	this->position = 0;
  819930:	80000315 	stw	zero,12(r16)
	this->buffer = NULL;
  819934:	80000715 	stw	zero,28(r16)
	this->volume = 1;
	this->fadeVolume = 1;
	this->inFadePosition = 0;
  819938:	80000115 	stw	zero,4(r16)
	this->outFadePosition = this->length;
	this->loading_pos = 0;
  81993c:	80000415 	stw	zero,16(r16)
	this->audioFormat = NULL;
  819940:	80000015 	stw	zero,0(r16)
	return this;
}
  819944:	dfc00217 	ldw	ra,8(sp)
  819948:	dc400117 	ldw	r17,4(sp)
  81994c:	dc000017 	ldw	r16,0(sp)
  819950:	dec00304 	addi	sp,sp,12
  819954:	f800283a 	ret
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	if (!this)
		printf("Failed to allocate space for sound\n");
  819958:	08221800 	call	822180 <puts>
  81995c:	003fee06 	br	819918 <initSound+0x2c>

00819960 <allocateSoundBuffer>:
void clearSoundBuffer(struct Sound* sound) {
	memset(sound->buffer, 0, sizeof(sound->buffer));
}

void allocateSoundBuffer(struct Sound* this, int length) {
	if (memMgr.used_memory + length > MAX_CACHE_MEMORY) {
  819960:	00802174 	movhi	r2,133
  819964:	10b39a04 	addi	r2,r2,-12696
  819968:	10c00017 	ldw	r3,0(r2)

void clearSoundBuffer(struct Sound* sound) {
	memset(sound->buffer, 0, sizeof(sound->buffer));
}

void allocateSoundBuffer(struct Sound* this, int length) {
  81996c:	defffd04 	addi	sp,sp,-12
	if (memMgr.used_memory + length > MAX_CACHE_MEMORY) {
  819970:	008003f4 	movhi	r2,15
  819974:	10909004 	addi	r2,r2,16960
  819978:	28c7883a 	add	r3,r5,r3

void clearSoundBuffer(struct Sound* sound) {
	memset(sound->buffer, 0, sizeof(sound->buffer));
}

void allocateSoundBuffer(struct Sound* this, int length) {
  81997c:	dc400115 	stw	r17,4(sp)
  819980:	dc000015 	stw	r16,0(sp)
  819984:	2023883a 	mov	r17,r4
  819988:	dfc00215 	stw	ra,8(sp)
  81998c:	2821883a 	mov	r16,r5
	if (memMgr.used_memory + length > MAX_CACHE_MEMORY) {
		freeMem(length);
  819990:	2809883a 	mov	r4,r5
void clearSoundBuffer(struct Sound* sound) {
	memset(sound->buffer, 0, sizeof(sound->buffer));
}

void allocateSoundBuffer(struct Sound* this, int length) {
	if (memMgr.used_memory + length > MAX_CACHE_MEMORY) {
  819994:	10c01236 	bltu	r2,r3,8199e0 <allocateSoundBuffer+0x80>
		freeMem(length);
	}
	if (this->buffer != NULL) {
  819998:	88800717 	ldw	r2,28(r17)
		free(this->buffer);
  81999c:	1009883a 	mov	r4,r2

void allocateSoundBuffer(struct Sound* this, int length) {
	if (memMgr.used_memory + length > MAX_CACHE_MEMORY) {
		freeMem(length);
	}
	if (this->buffer != NULL) {
  8199a0:	10000126 	beq	r2,zero,8199a8 <allocateSoundBuffer+0x48>
		free(this->buffer);
  8199a4:	08216e80 	call	8216e8 <free>
	}
	this->buffer = (int*) malloc(sizeof(int) * length);
  8199a8:	8409883a 	add	r4,r16,r16
  8199ac:	2109883a 	add	r4,r4,r4
  8199b0:	08216fc0 	call	8216fc <malloc>
  8199b4:	88800715 	stw	r2,28(r17)

	this->length = length;
	if (!this->buffer)
		printf("Failed to allocate sound buffer\n");
  8199b8:	01002134 	movhi	r4,132
  8199bc:	21395004 	addi	r4,r4,-6848
	if (this->buffer != NULL) {
		free(this->buffer);
	}
	this->buffer = (int*) malloc(sizeof(int) * length);

	this->length = length;
  8199c0:	8c000515 	stw	r16,20(r17)
	if (!this->buffer)
  8199c4:	10000826 	beq	r2,zero,8199e8 <allocateSoundBuffer+0x88>
	}
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	memset(sound->buffer, 0, sizeof(sound->buffer));
  8199c8:	10000015 	stw	zero,0(r2)

	this->length = length;
	if (!this->buffer)
		printf("Failed to allocate sound buffer\n");
	clearSoundBuffer(this);
}
  8199cc:	dfc00217 	ldw	ra,8(sp)
  8199d0:	dc400117 	ldw	r17,4(sp)
  8199d4:	dc000017 	ldw	r16,0(sp)
  8199d8:	dec00304 	addi	sp,sp,12
  8199dc:	f800283a 	ret
	memset(sound->buffer, 0, sizeof(sound->buffer));
}

void allocateSoundBuffer(struct Sound* this, int length) {
	if (memMgr.used_memory + length > MAX_CACHE_MEMORY) {
		freeMem(length);
  8199e0:	080abd40 	call	80abd4 <freeMem>
  8199e4:	003fec06 	br	819998 <allocateSoundBuffer+0x38>
	}
	this->buffer = (int*) malloc(sizeof(int) * length);

	this->length = length;
	if (!this->buffer)
		printf("Failed to allocate sound buffer\n");
  8199e8:	08221800 	call	822180 <puts>
  8199ec:	88800717 	ldw	r2,28(r17)
	}
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	memset(sound->buffer, 0, sizeof(sound->buffer));
  8199f0:	10000015 	stw	zero,0(r2)

	this->length = length;
	if (!this->buffer)
		printf("Failed to allocate sound buffer\n");
	clearSoundBuffer(this);
}
  8199f4:	dfc00217 	ldw	ra,8(sp)
  8199f8:	dc400117 	ldw	r17,4(sp)
  8199fc:	dc000017 	ldw	r16,0(sp)
  819a00:	dec00304 	addi	sp,sp,12
  819a04:	f800283a 	ret

00819a08 <clearSoundBuffer>:
	}
	return ret;
}

void clearSoundBuffer(struct Sound* sound) {
	memset(sound->buffer, 0, sizeof(sound->buffer));
  819a08:	20800717 	ldw	r2,28(r4)
  819a0c:	10000015 	stw	zero,0(r2)
}
  819a10:	f800283a 	ret

00819a14 <readInt>:
}

/**
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
  819a14:	defff604 	addi	sp,sp,-40
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
  819a18:	31803fcc 	andi	r6,r6,255
}

/**
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
  819a1c:	df000815 	stw	fp,32(sp)
  819a20:	dd800615 	stw	r22,24(sp)
  819a24:	dcc00315 	stw	r19,12(sp)
  819a28:	dfc00915 	stw	ra,36(sp)
  819a2c:	ddc00715 	stw	r23,28(sp)
  819a30:	dd400515 	stw	r21,20(sp)
  819a34:	dd000415 	stw	r20,16(sp)
  819a38:	dc800215 	stw	r18,8(sp)
  819a3c:	dc400115 	stw	r17,4(sp)
  819a40:	dc000015 	stw	r16,0(sp)
  819a44:	d839883a 	mov	fp,sp
  819a48:	2827883a 	mov	r19,r5
  819a4c:	d82d883a 	mov	r22,sp
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
  819a50:	3000341e 	bne	r6,zero,819b24 <readInt+0x110>
  819a54:	0021883a 	mov	r16,zero
	int bytes[numBytesToRead];
  819a58:	9cc5883a 	add	r2,r19,r19
  819a5c:	1085883a 	add	r2,r2,r2
  819a60:	10800184 	addi	r2,r2,6
  819a64:	00ffff04 	movi	r3,-4
  819a68:	10c4703a 	and	r2,r2,r3
  819a6c:	d8b7c83a 	sub	sp,sp,r2
  819a70:	d825883a 	mov	r18,sp
	while (numBytesRead < numBytesToRead) {
  819a74:	04c02d0e 	bge	zero,r19,819b2c <readInt+0x118>
  819a78:	257fffcc 	andi	r21,r4,65535
  819a7c:	ad60001c 	xori	r21,r21,32768
  819a80:	ad600004 	addi	r21,r21,-32768
  819a84:	30002b1e 	bne	r6,zero,819b34 <readInt+0x120>
  819a88:	8405883a 	add	r2,r16,r16
  819a8c:	802290fa 	slli	r17,r16,3
  819a90:	1085883a 	add	r2,r2,r2
  819a94:	d8a1883a 	add	r16,sp,r2
  819a98:	0029883a 	mov	r20,zero
  819a9c:	0025883a 	mov	r18,zero
  819aa0:	00000306 	br	819ab0 <readInt+0x9c>
		ret |= (bytes[i] << (8 * i));
		if (bigEndian)
			i--;
		else
			i++;
		numBytesRead++;
  819aa4:	84000104 	addi	r16,r16,4
  819aa8:	8c400204 	addi	r17,r17,8
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
	int bytes[numBytesToRead];
	while (numBytesRead < numBytesToRead) {
  819aac:	9c800e26 	beq	r19,r18,819ae8 <readInt+0xd4>
		if ((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  819ab0:	a809883a 	mov	r4,r21
  819ab4:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  819ab8:	10bfffcc 	andi	r2,r2,65535
  819abc:	10a0001c 	xori	r2,r2,32768
  819ac0:	10a00004 	addi	r2,r2,-32768
			printf("read file invalid\n");
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
  819ac4:	1446983a 	sll	r3,r2,r17
		if (bigEndian)
			i--;
		else
			i++;
		numBytesRead++;
  819ac8:	94800044 	addi	r18,r18,1
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
	int bytes[numBytesToRead];
	while (numBytesRead < numBytesToRead) {
		if ((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  819acc:	80800015 	stw	r2,0(r16)
			printf("read file invalid\n");
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
  819ad0:	a0e8b03a 	or	r20,r20,r3
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
	int bytes[numBytesToRead];
	while (numBytesRead < numBytesToRead) {
		if ((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  819ad4:	103ff30e 	bge	r2,zero,819aa4 <readInt+0x90>
			printf("read file invalid\n");
  819ad8:	01002134 	movhi	r4,132
  819adc:	21394204 	addi	r4,r4,-6904
  819ae0:	08221800 	call	822180 <puts>
  819ae4:	053fffc4 	movi	r20,-1
		else
			i++;
		numBytesRead++;
	}
	return ret;
}
  819ae8:	a005883a 	mov	r2,r20
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
	int bytes[numBytesToRead];
	while (numBytesRead < numBytesToRead) {
  819aec:	b037883a 	mov	sp,r22
		else
			i++;
		numBytesRead++;
	}
	return ret;
}
  819af0:	e037883a 	mov	sp,fp
  819af4:	dfc00917 	ldw	ra,36(sp)
  819af8:	df000817 	ldw	fp,32(sp)
  819afc:	ddc00717 	ldw	r23,28(sp)
  819b00:	dd800617 	ldw	r22,24(sp)
  819b04:	dd400517 	ldw	r21,20(sp)
  819b08:	dd000417 	ldw	r20,16(sp)
  819b0c:	dcc00317 	ldw	r19,12(sp)
  819b10:	dc800217 	ldw	r18,8(sp)
  819b14:	dc400117 	ldw	r17,4(sp)
  819b18:	dc000017 	ldw	r16,0(sp)
  819b1c:	dec00a04 	addi	sp,sp,40
  819b20:	f800283a 	ret

/**
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
  819b24:	2c3fffc4 	addi	r16,r5,-1
  819b28:	003fcb06 	br	819a58 <readInt+0x44>
	int bytes[numBytesToRead];
	while (numBytesRead < numBytesToRead) {
  819b2c:	0029883a 	mov	r20,zero
  819b30:	003fed06 	br	819ae8 <readInt+0xd4>
  819b34:	802290fa 	slli	r17,r16,3
  819b38:	0029883a 	mov	r20,zero
  819b3c:	002f883a 	mov	r23,zero
		if ((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  819b40:	a809883a 	mov	r4,r21
  819b44:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  819b48:	10bfffcc 	andi	r2,r2,65535
  819b4c:	10a0001c 	xori	r2,r2,32768
  819b50:	10a00004 	addi	r2,r2,-32768
  819b54:	8407883a 	add	r3,r16,r16
			printf("read file invalid\n");
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
  819b58:	1448983a 	sll	r4,r2,r17
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
	int bytes[numBytesToRead];
	while (numBytesRead < numBytesToRead) {
		if ((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  819b5c:	18c7883a 	add	r3,r3,r3
  819b60:	1c87883a 	add	r3,r3,r18
		ret |= (bytes[i] << (8 * i));
		if (bigEndian)
			i--;
		else
			i++;
		numBytesRead++;
  819b64:	bdc00044 	addi	r23,r23,1
			printf("read file invalid\n");
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
		if (bigEndian)
			i--;
  819b68:	843fffc4 	addi	r16,r16,-1
	while (numBytesRead < numBytesToRead) {
		if ((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
			printf("read file invalid\n");
			return -1;
		}
		ret |= (bytes[i] << (8 * i));
  819b6c:	a128b03a 	or	r20,r20,r4
		if (bigEndian)
			i--;
		else
			i++;
		numBytesRead++;
  819b70:	8c7ffe04 	addi	r17,r17,-8
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
	int bytes[numBytesToRead];
	while (numBytesRead < numBytesToRead) {
		if ((bytes[i] = alt_up_sd_card_read(file_pointer)) < 0) {
  819b74:	18800015 	stw	r2,0(r3)
  819b78:	103fd716 	blt	r2,zero,819ad8 <readInt+0xc4>
 * Helper function to read multiple bytes and return the representative int value
 */
int readInt(int file_pointer, int numBytesToRead, bool bigEndian) {
	int ret = 0, numBytesRead = 0, i = bigEndian ? numBytesToRead - 1 : 0;
	int bytes[numBytesToRead];
	while (numBytesRead < numBytesToRead) {
  819b7c:	9dfff01e 	bne	r19,r23,819b40 <readInt+0x12c>
  819b80:	003fd906 	br	819ae8 <readInt+0xd4>

00819b84 <changeBitsPerSample>:
/**
 * Checks to see if the values need to be shifted to match given bytesPerSample
 * @param this - sound to change values of
 * @param bitsPerSampleTo - Number of bits per sample to convert to
 */
void changeBitsPerSample(struct Sound* this, int bitsPerSampleTo) {
  819b84:	defffd04 	addi	sp,sp,-12
  819b88:	dc400115 	stw	r17,4(sp)
  819b8c:	dc000015 	stw	r16,0(sp)
  819b90:	dfc00215 	stw	ra,8(sp)
  819b94:	2021883a 	mov	r16,r4
  819b98:	2823883a 	mov	r17,r5
	if(this == NULL) return;
  819b9c:	20001726 	beq	r4,zero,819bfc <changeBitsPerSample+0x78>
	int bitsPerSampleFrom = getSampleSizeInBits(this->audioFormat);
  819ba0:	21000017 	ldw	r4,0(r4)
  819ba4:	08195f00 	call	8195f0 <getSampleSizeInBits>
  819ba8:	1007883a 	mov	r3,r2
	if (bitsPerSampleTo == bitsPerSampleFrom)
  819bac:	14401326 	beq	r2,r17,819bfc <changeBitsPerSample+0x78>
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  819bb0:	80800517 	ldw	r2,20(r16)
	int bitsPerSampleFrom = getSampleSizeInBits(this->audioFormat);
	if (bitsPerSampleTo == bitsPerSampleFrom)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;
  819bb4:	88cbc83a 	sub	r5,r17,r3

	for (i = 0; i < this->length; i++) {
  819bb8:	10001026 	beq	r2,zero,819bfc <changeBitsPerSample+0x78>
  819bbc:	00800044 	movi	r2,1
  819bc0:	11401316 	blt	r2,r5,819c10 <changeBitsPerSample+0x8c>
  819bc4:	82000717 	ldw	r8,28(r16)
  819bc8:	014bc83a 	sub	r5,zero,r5
  819bcc:	000f883a 	mov	r7,zero
  819bd0:	000d883a 	mov	r6,zero
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
  819bd4:	3185883a 	add	r2,r6,r6
  819bd8:	1085883a 	add	r2,r2,r2
  819bdc:	1205883a 	add	r2,r2,r8
  819be0:	10c00017 	ldw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  819be4:	39800044 	addi	r6,r7,1
  819be8:	300f883a 	mov	r7,r6
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
  819bec:	1947d83a 	sra	r3,r3,r5
  819bf0:	10c00015 	stw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  819bf4:	81000517 	ldw	r4,20(r16)
  819bf8:	313ff636 	bltu	r6,r4,819bd4 <changeBitsPerSample+0x50>
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
	}
}
  819bfc:	dfc00217 	ldw	ra,8(sp)
  819c00:	dc400117 	ldw	r17,4(sp)
  819c04:	dc000017 	ldw	r16,0(sp)
  819c08:	dec00304 	addi	sp,sp,12
  819c0c:	f800283a 	ret
  819c10:	82000717 	ldw	r8,28(r16)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  819c14:	000f883a 	mov	r7,zero
  819c18:	000d883a 	mov	r6,zero
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
  819c1c:	3185883a 	add	r2,r6,r6
  819c20:	1085883a 	add	r2,r2,r2
  819c24:	1205883a 	add	r2,r2,r8
  819c28:	10c00017 	ldw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  819c2c:	39800044 	addi	r6,r7,1
  819c30:	300f883a 	mov	r7,r6
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
  819c34:	1946983a 	sll	r3,r3,r5
  819c38:	10c00015 	stw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  819c3c:	81000517 	ldw	r4,20(r16)
  819c40:	313ff636 	bltu	r6,r4,819c1c <changeBitsPerSample+0x98>
  819c44:	003fed06 	br	819bfc <changeBitsPerSample+0x78>

00819c48 <resampleSound>:
}

/**
 * Resamples a sound from it's current sample rate
 */
int resampleSound(struct Sound* this, int toSampleRate, bool fromFile, int filePointer) {
  819c48:	deffec04 	addi	sp,sp,-80
  819c4c:	dd400f15 	stw	r21,60(sp)
  819c50:	202b883a 	mov	r21,r4
	int fromSampleRate = getSampleRate(this->audioFormat);
  819c54:	21000017 	ldw	r4,0(r4)
}

/**
 * Resamples a sound from it's current sample rate
 */
int resampleSound(struct Sound* this, int toSampleRate, bool fromFile, int filePointer) {
  819c58:	dfc01315 	stw	ra,76(sp)
  819c5c:	dc400b15 	stw	r17,44(sp)
  819c60:	dc000a15 	stw	r16,40(sp)
  819c64:	d9400715 	stw	r5,28(sp)
  819c68:	d9c00815 	stw	r7,32(sp)
  819c6c:	3023883a 	mov	r17,r6
  819c70:	df001215 	stw	fp,72(sp)
  819c74:	ddc01115 	stw	r23,68(sp)
  819c78:	dd801015 	stw	r22,64(sp)
  819c7c:	dd000e15 	stw	r20,56(sp)
  819c80:	dcc00d15 	stw	r19,52(sp)
  819c84:	dc800c15 	stw	r18,48(sp)
	int fromSampleRate = getSampleRate(this->audioFormat);
  819c88:	08195e80 	call	8195e8 <getSampleRate>
	int bytesPerSample = getSampleSizeInBytes(this->audioFormat);
  819c8c:	a9000017 	ldw	r4,0(r21)

/**
 * Resamples a sound from it's current sample rate
 */
int resampleSound(struct Sound* this, int toSampleRate, bool fromFile, int filePointer) {
	int fromSampleRate = getSampleRate(this->audioFormat);
  819c90:	1021883a 	mov	r16,r2
	int bytesPerSample = getSampleSizeInBytes(this->audioFormat);
  819c94:	08195f80 	call	8195f8 <getSampleSizeInBytes>
  819c98:	d8800315 	stw	r2,12(sp)
	float x0 = 0, x1 = 0, x = 0;
	int y0 = 0, y1 = 0;
	int i, j = 0, k;
	int* bufferToWriteTo;

	if(fromSampleRate == toSampleRate) {
  819c9c:	d8c00717 	ldw	r3,28(sp)
 * Resamples a sound from it's current sample rate
 */
int resampleSound(struct Sound* this, int toSampleRate, bool fromFile, int filePointer) {
	int fromSampleRate = getSampleRate(this->audioFormat);
	int bytesPerSample = getSampleSizeInBytes(this->audioFormat);
	int srcLength =  this->length;
  819ca0:	a8800517 	ldw	r2,20(r21)
  819ca4:	d8800615 	stw	r2,24(sp)
	float x0 = 0, x1 = 0, x = 0;
	int y0 = 0, y1 = 0;
	int i, j = 0, k;
	int* bufferToWriteTo;

	if(fromSampleRate == toSampleRate) {
  819ca8:	80c09226 	beq	r16,r3,819ef4 <resampleSound+0x2ac>
  819cac:	1809883a 	mov	r4,r3
 */
int resampleSound(struct Sound* this, int toSampleRate, bool fromFile, int filePointer) {
	int fromSampleRate = getSampleRate(this->audioFormat);
	int bytesPerSample = getSampleSizeInBytes(this->audioFormat);
	int srcLength =  this->length;
	int destLength = ((float)srcLength * toSampleRate) / fromSampleRate;
  819cb0:	081f8d00 	call	81f8d0 <__floatsisf>
  819cb4:	8009883a 	mov	r4,r16
  819cb8:	d8800515 	stw	r2,20(sp)
  819cbc:	081f8d00 	call	81f8d0 <__floatsisf>
  819cc0:	d9000617 	ldw	r4,24(sp)
  819cc4:	d8800415 	stw	r2,16(sp)

	if(fromSampleRate == toSampleRate) {
		return 0;
	}

	if(fromFile) {
  819cc8:	8c403fcc 	andi	r17,r17,255
 */
int resampleSound(struct Sound* this, int toSampleRate, bool fromFile, int filePointer) {
	int fromSampleRate = getSampleRate(this->audioFormat);
	int bytesPerSample = getSampleSizeInBytes(this->audioFormat);
	int srcLength =  this->length;
	int destLength = ((float)srcLength * toSampleRate) / fromSampleRate;
  819ccc:	081f8d00 	call	81f8d0 <__floatsisf>
  819cd0:	d9400517 	ldw	r5,20(sp)
  819cd4:	1009883a 	mov	r4,r2
  819cd8:	081f4140 	call	81f414 <__mulsf3>
  819cdc:	d9400417 	ldw	r5,16(sp)
  819ce0:	1009883a 	mov	r4,r2
  819ce4:	081f5f40 	call	81f5f4 <__divsf3>
  819ce8:	1009883a 	mov	r4,r2

	if(fromSampleRate == toSampleRate) {
		return 0;
	}

	if(fromFile) {
  819cec:	dc400915 	stw	r17,36(sp)
 */
int resampleSound(struct Sound* this, int toSampleRate, bool fromFile, int filePointer) {
	int fromSampleRate = getSampleRate(this->audioFormat);
	int bytesPerSample = getSampleSizeInBytes(this->audioFormat);
	int srcLength =  this->length;
	int destLength = ((float)srcLength * toSampleRate) / fromSampleRate;
  819cf0:	081f9680 	call	81f968 <__fixsfsi>

	if(fromSampleRate == toSampleRate) {
		return 0;
	}

	if(fromFile) {
  819cf4:	dc400917 	ldw	r17,36(sp)
  819cf8:	88006726 	beq	r17,zero,819e98 <resampleSound+0x250>
		allocateSoundBuffer(this, destLength);
  819cfc:	100b883a 	mov	r5,r2
  819d00:	a809883a 	mov	r4,r21
  819d04:	08199600 	call	819960 <allocateSoundBuffer>
		bufferToWriteTo = this->buffer;
  819d08:	a8800717 	ldw	r2,28(r21)
  819d0c:	d8800115 	stw	r2,4(sp)
	} else {
		this->length = destLength;
		bufferToWriteTo = (int*) malloc(sizeof(int) * this->length);
	}

	for (i = 0; i < srcLength; i++) {
  819d10:	d8c00617 	ldw	r3,24(sp)
  819d14:	00c0720e 	bge	zero,r3,819ee0 <resampleSound+0x298>
		if (j >= this->length)
  819d18:	a8800517 	ldw	r2,20(r21)
  819d1c:	10007026 	beq	r2,zero,819ee0 <resampleSound+0x298>
  819d20:	dcc00117 	ldw	r19,4(sp)
			break;
  819d24:	002f883a 	mov	r23,zero
  819d28:	0023883a 	mov	r17,zero
  819d2c:	0039883a 	mov	fp,zero
  819d30:	0029883a 	mov	r20,zero
  819d34:	d8000215 	stw	zero,8(sp)
  819d38:	002d883a 	mov	r22,zero
  819d3c:	d8000015 	stw	zero,0(sp)
		x1 = i / (float) fromSampleRate;
		if (fromFile) {
  819d40:	d8800917 	ldw	r2,36(sp)
  819d44:	10006d26 	beq	r2,zero,819efc <resampleSound+0x2b4>
  819d48:	0021883a 	mov	r16,zero
  819d4c:	00000406 	br	819d60 <resampleSound+0x118>
			for (k = 0; k < getNumChannels(this->audioFormat); k++) {
				if ((y1 = readInt(filePointer, bytesPerSample, false)) < 0) {
  819d50:	0819a140 	call	819a14 <readInt>
  819d54:	1029883a 	mov	r20,r2
  819d58:	10006d16 	blt	r2,zero,819f10 <resampleSound+0x2c8>
	for (i = 0; i < srcLength; i++) {
		if (j >= this->length)
			break;
		x1 = i / (float) fromSampleRate;
		if (fromFile) {
			for (k = 0; k < getNumChannels(this->audioFormat); k++) {
  819d5c:	84000044 	addi	r16,r16,1
  819d60:	a9000017 	ldw	r4,0(r21)
  819d64:	08196140 	call	819614 <getNumChannels>
				if ((y1 = readInt(filePointer, bytesPerSample, false)) < 0) {
  819d68:	000d883a 	mov	r6,zero
  819d6c:	d9400317 	ldw	r5,12(sp)
  819d70:	d9000817 	ldw	r4,32(sp)
	for (i = 0; i < srcLength; i++) {
		if (j >= this->length)
			break;
		x1 = i / (float) fromSampleRate;
		if (fromFile) {
			for (k = 0; k < getNumChannels(this->audioFormat); k++) {
  819d74:	80bff616 	blt	r16,r2,819d50 <resampleSound+0x108>
				}
			}
		} else {
			y1 = this->buffer[i];
		}
		if (y1 > 0x07FFFFF) {
  819d78:	00802034 	movhi	r2,128
  819d7c:	10bfffc4 	addi	r2,r2,-1
  819d80:	1500010e 	bge	r2,r20,819d88 <resampleSound+0x140>
			y1 = y1 | 0xFF000000;
  819d84:	a53fc034 	orhi	r20,r20,65280
	}

	for (i = 0; i < srcLength; i++) {
		if (j >= this->length)
			break;
		x1 = i / (float) fromSampleRate;
  819d88:	d9000217 	ldw	r4,8(sp)
  819d8c:	081f8d00 	call	81f8d0 <__floatsisf>
  819d90:	d9400417 	ldw	r5,16(sp)
  819d94:	1009883a 	mov	r4,r2
  819d98:	081f5f40 	call	81f5f4 <__divsf3>
			y1 = this->buffer[i];
		}
		if (y1 > 0x07FFFFF) {
			y1 = y1 | 0xFF000000;
		}
		while (x <= x1) {
  819d9c:	1009883a 	mov	r4,r2
  819da0:	880b883a 	mov	r5,r17
	}

	for (i = 0; i < srcLength; i++) {
		if (j >= this->length)
			break;
		x1 = i / (float) fromSampleRate;
  819da4:	1025883a 	mov	r18,r2
			y1 = this->buffer[i];
		}
		if (y1 > 0x07FFFFF) {
			y1 = y1 | 0xFF000000;
		}
		while (x <= x1) {
  819da8:	081f8580 	call	81f858 <__gesf2>
  819dac:	10000e0e 	bge	r2,zero,819de8 <resampleSound+0x1a0>
  819db0:	00003f06 	br	819eb0 <resampleSound+0x268>
			if (x == x1) {
				bufferToWriteTo[j++] = y1;
  819db4:	9d000015 	stw	r20,0(r19)
  819db8:	b5800044 	addi	r22,r22,1
  819dbc:	9cc00104 	addi	r19,r19,4
			} else if (x < x1) {
				bufferToWriteTo[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
				if (bufferToWriteTo[j - 1] > 0x07FFFFF)
					bufferToWriteTo[j - 1] &= 0x00FFFFFF;
			}
			x = j / (float) toSampleRate;
  819dc0:	b009883a 	mov	r4,r22
  819dc4:	081f8d00 	call	81f8d0 <__floatsisf>
  819dc8:	d9400517 	ldw	r5,20(sp)
  819dcc:	1009883a 	mov	r4,r2
  819dd0:	081f5f40 	call	81f5f4 <__divsf3>
			y1 = this->buffer[i];
		}
		if (y1 > 0x07FFFFF) {
			y1 = y1 | 0xFF000000;
		}
		while (x <= x1) {
  819dd4:	100b883a 	mov	r5,r2
  819dd8:	9009883a 	mov	r4,r18
			} else if (x < x1) {
				bufferToWriteTo[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
				if (bufferToWriteTo[j - 1] > 0x07FFFFF)
					bufferToWriteTo[j - 1] &= 0x00FFFFFF;
			}
			x = j / (float) toSampleRate;
  819ddc:	1023883a 	mov	r17,r2
			y1 = this->buffer[i];
		}
		if (y1 > 0x07FFFFF) {
			y1 = y1 | 0xFF000000;
		}
		while (x <= x1) {
  819de0:	081f8580 	call	81f858 <__gesf2>
  819de4:	10003216 	blt	r2,zero,819eb0 <resampleSound+0x268>
			if (x == x1) {
  819de8:	880b883a 	mov	r5,r17
  819dec:	9009883a 	mov	r4,r18
  819df0:	081f7680 	call	81f768 <__eqsf2>
				bufferToWriteTo[j++] = y1;
			} else if (x < x1) {
  819df4:	880b883a 	mov	r5,r17
  819df8:	9009883a 	mov	r4,r18
		}
		if (y1 > 0x07FFFFF) {
			y1 = y1 | 0xFF000000;
		}
		while (x <= x1) {
			if (x == x1) {
  819dfc:	103fed26 	beq	r2,zero,819db4 <resampleSound+0x16c>
				bufferToWriteTo[j++] = y1;
			} else if (x < x1) {
  819e00:	081f7e00 	call	81f7e0 <__gtsf2>
				bufferToWriteTo[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
  819e04:	a709c83a 	sub	r4,r20,fp
			y1 = y1 | 0xFF000000;
		}
		while (x <= x1) {
			if (x == x1) {
				bufferToWriteTo[j++] = y1;
			} else if (x < x1) {
  819e08:	00bfed0e 	bge	zero,r2,819dc0 <resampleSound+0x178>
				bufferToWriteTo[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
  819e0c:	081f8d00 	call	81f8d0 <__floatsisf>
  819e10:	b80b883a 	mov	r5,r23
  819e14:	8809883a 	mov	r4,r17
  819e18:	1021883a 	mov	r16,r2
  819e1c:	081f3400 	call	81f340 <__subsf3>
  819e20:	100b883a 	mov	r5,r2
  819e24:	8009883a 	mov	r4,r16
  819e28:	081f4140 	call	81f414 <__mulsf3>
  819e2c:	9009883a 	mov	r4,r18
  819e30:	b80b883a 	mov	r5,r23
  819e34:	1021883a 	mov	r16,r2
  819e38:	081f3400 	call	81f340 <__subsf3>
  819e3c:	100b883a 	mov	r5,r2
  819e40:	8009883a 	mov	r4,r16
  819e44:	081f5f40 	call	81f5f4 <__divsf3>
  819e48:	e009883a 	mov	r4,fp
  819e4c:	1021883a 	mov	r16,r2
  819e50:	081f8d00 	call	81f8d0 <__floatsisf>
  819e54:	100b883a 	mov	r5,r2
  819e58:	8009883a 	mov	r4,r16
  819e5c:	081f3b00 	call	81f3b0 <__addsf3>
  819e60:	1009883a 	mov	r4,r2
  819e64:	081f9680 	call	81f968 <__fixsfsi>
  819e68:	98800015 	stw	r2,0(r19)
  819e6c:	9cc00104 	addi	r19,r19,4
				if (bufferToWriteTo[j - 1] > 0x07FFFFF)
  819e70:	98ffff17 	ldw	r3,-4(r19)
					bufferToWriteTo[j - 1] &= 0x00FFFFFF;
  819e74:	00804034 	movhi	r2,256
  819e78:	10bfffc4 	addi	r2,r2,-1
		}
		while (x <= x1) {
			if (x == x1) {
				bufferToWriteTo[j++] = y1;
			} else if (x < x1) {
				bufferToWriteTo[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
  819e7c:	b5800044 	addi	r22,r22,1
				if (bufferToWriteTo[j - 1] > 0x07FFFFF)
					bufferToWriteTo[j - 1] &= 0x00FFFFFF;
  819e80:	1888703a 	and	r4,r3,r2
		while (x <= x1) {
			if (x == x1) {
				bufferToWriteTo[j++] = y1;
			} else if (x < x1) {
				bufferToWriteTo[j++] = (y1 - y0) * (x - x0) / (x1 - x0) + y0;
				if (bufferToWriteTo[j - 1] > 0x07FFFFF)
  819e84:	00802034 	movhi	r2,128
  819e88:	10bfffc4 	addi	r2,r2,-1
  819e8c:	10ffcc0e 	bge	r2,r3,819dc0 <resampleSound+0x178>
					bufferToWriteTo[j - 1] &= 0x00FFFFFF;
  819e90:	993fff15 	stw	r4,-4(r19)
  819e94:	003fca06 	br	819dc0 <resampleSound+0x178>
	if(fromFile) {
		allocateSoundBuffer(this, destLength);
		bufferToWriteTo = this->buffer;
	} else {
		this->length = destLength;
		bufferToWriteTo = (int*) malloc(sizeof(int) * this->length);
  819e98:	1089883a 	add	r4,r2,r2

	if(fromFile) {
		allocateSoundBuffer(this, destLength);
		bufferToWriteTo = this->buffer;
	} else {
		this->length = destLength;
  819e9c:	a8800515 	stw	r2,20(r21)
		bufferToWriteTo = (int*) malloc(sizeof(int) * this->length);
  819ea0:	2109883a 	add	r4,r4,r4
  819ea4:	08216fc0 	call	8216fc <malloc>
  819ea8:	d8800115 	stw	r2,4(sp)
  819eac:	003f9806 	br	819d10 <resampleSound+0xc8>
	}

	for (i = 0; i < srcLength; i++) {
  819eb0:	d8800217 	ldw	r2,8(sp)
  819eb4:	d8c00617 	ldw	r3,24(sp)
  819eb8:	10800044 	addi	r2,r2,1
  819ebc:	d8800215 	stw	r2,8(sp)
  819ec0:	18800726 	beq	r3,r2,819ee0 <resampleSound+0x298>
		if (j >= this->length)
			break;
  819ec4:	d8c00017 	ldw	r3,0(sp)
		this->length = destLength;
		bufferToWriteTo = (int*) malloc(sizeof(int) * this->length);
	}

	for (i = 0; i < srcLength; i++) {
		if (j >= this->length)
  819ec8:	a8800517 	ldw	r2,20(r21)
			break;
  819ecc:	902f883a 	mov	r23,r18
  819ed0:	18c00104 	addi	r3,r3,4
  819ed4:	d8c00015 	stw	r3,0(sp)
  819ed8:	a039883a 	mov	fp,r20
		this->length = destLength;
		bufferToWriteTo = (int*) malloc(sizeof(int) * this->length);
	}

	for (i = 0; i < srcLength; i++) {
		if (j >= this->length)
  819edc:	b0bf9836 	bltu	r22,r2,819d40 <resampleSound+0xf8>
			x = j / (float) toSampleRate;
		}
		x0 = x1;
		y0 = y1;
	}
	if (!fromFile) {
  819ee0:	d8800917 	ldw	r2,36(sp)
  819ee4:	10001f26 	beq	r2,zero,819f64 <resampleSound+0x31c>
		free(this->buffer);
		this->buffer = bufferToWriteTo;
	}
	setSampleRate(this->audioFormat, toSampleRate);
  819ee8:	a9000017 	ldw	r4,0(r21)
  819eec:	d9400717 	ldw	r5,28(sp)
  819ef0:	081961c0 	call	81961c <setSampleRate>
  819ef4:	0005883a 	mov	r2,zero
  819ef8:	00000e06 	br	819f34 <resampleSound+0x2ec>
					this = NULL;
					return -1;
				}
			}
		} else {
			y1 = this->buffer[i];
  819efc:	a8800717 	ldw	r2,28(r21)
  819f00:	d8c00017 	ldw	r3,0(sp)
  819f04:	1885883a 	add	r2,r3,r2
  819f08:	15000017 	ldw	r20,0(r2)
  819f0c:	003f9a06 	br	819d78 <resampleSound+0x130>
			break;
		x1 = i / (float) fromSampleRate;
		if (fromFile) {
			for (k = 0; k < getNumChannels(this->audioFormat); k++) {
				if ((y1 = readInt(filePointer, bytesPerSample, false)) < 0) {
					free(this->audioFormat);
  819f10:	a9000017 	ldw	r4,0(r21)
  819f14:	08216e80 	call	8216e8 <free>
					this->audioFormat = NULL;
					free(this->buffer);
  819f18:	a9000717 	ldw	r4,28(r21)
		x1 = i / (float) fromSampleRate;
		if (fromFile) {
			for (k = 0; k < getNumChannels(this->audioFormat); k++) {
				if ((y1 = readInt(filePointer, bytesPerSample, false)) < 0) {
					free(this->audioFormat);
					this->audioFormat = NULL;
  819f1c:	a8000015 	stw	zero,0(r21)
					free(this->buffer);
  819f20:	08216e80 	call	8216e8 <free>
					this->buffer = NULL;
  819f24:	a8000715 	stw	zero,28(r21)
					free(this);
  819f28:	a809883a 	mov	r4,r21
  819f2c:	08216e80 	call	8216e8 <free>
  819f30:	00bfffc4 	movi	r2,-1
		free(this->buffer);
		this->buffer = bufferToWriteTo;
	}
	setSampleRate(this->audioFormat, toSampleRate);
	return 0;
}
  819f34:	dfc01317 	ldw	ra,76(sp)
  819f38:	df001217 	ldw	fp,72(sp)
  819f3c:	ddc01117 	ldw	r23,68(sp)
  819f40:	dd801017 	ldw	r22,64(sp)
  819f44:	dd400f17 	ldw	r21,60(sp)
  819f48:	dd000e17 	ldw	r20,56(sp)
  819f4c:	dcc00d17 	ldw	r19,52(sp)
  819f50:	dc800c17 	ldw	r18,48(sp)
  819f54:	dc400b17 	ldw	r17,44(sp)
  819f58:	dc000a17 	ldw	r16,40(sp)
  819f5c:	dec01404 	addi	sp,sp,80
  819f60:	f800283a 	ret
		}
		x0 = x1;
		y0 = y1;
	}
	if (!fromFile) {
		free(this->buffer);
  819f64:	a9000717 	ldw	r4,28(r21)
  819f68:	08216e80 	call	8216e8 <free>
		this->buffer = bufferToWriteTo;
  819f6c:	d8c00117 	ldw	r3,4(sp)
  819f70:	a8c00715 	stw	r3,28(r21)
  819f74:	003fdc06 	br	819ee8 <resampleSound+0x2a0>

00819f78 <loadSoundBuffer>:
 * Loads the sound using linear interpolation to convert to correct sample rate
 */
int loadSoundBuffer(struct Sound* this, int filePointer) {
	int i = 0, j, bytesPerSample;

	if(this->audioFormat->sampleRate != DEFAULT_SAMPLE_RATE)
  819f78:	20c00017 	ldw	r3,0(r4)
}

/**
 * Loads the sound using linear interpolation to convert to correct sample rate
 */
int loadSoundBuffer(struct Sound* this, int filePointer) {
  819f7c:	defff804 	addi	sp,sp,-32
	int i = 0, j, bytesPerSample;

	if(this->audioFormat->sampleRate != DEFAULT_SAMPLE_RATE)
  819f80:	019f4004 	movi	r6,32000
  819f84:	18800117 	ldw	r2,4(r3)
}

/**
 * Loads the sound using linear interpolation to convert to correct sample rate
 */
int loadSoundBuffer(struct Sound* this, int filePointer) {
  819f88:	dd000415 	stw	r20,16(sp)
  819f8c:	dc800215 	stw	r18,8(sp)
  819f90:	dfc00715 	stw	ra,28(sp)
  819f94:	dd800615 	stw	r22,24(sp)
  819f98:	dd400515 	stw	r21,20(sp)
  819f9c:	dcc00315 	stw	r19,12(sp)
  819fa0:	dc400115 	stw	r17,4(sp)
  819fa4:	dc000015 	stw	r16,0(sp)
  819fa8:	2025883a 	mov	r18,r4
  819fac:	2829883a 	mov	r20,r5
	int i = 0, j, bytesPerSample;

	if(this->audioFormat->sampleRate != DEFAULT_SAMPLE_RATE)
  819fb0:	11800d26 	beq	r2,r6,819fe8 <loadSoundBuffer+0x70>
		return resampleSound(this, DEFAULT_SAMPLE_RATE, true, filePointer);
  819fb4:	300b883a 	mov	r5,r6
  819fb8:	a00f883a 	mov	r7,r20
  819fbc:	01800044 	movi	r6,1
				}
			}
		}
	}
	return 0;
}
  819fc0:	dfc00717 	ldw	ra,28(sp)
  819fc4:	dd800617 	ldw	r22,24(sp)
  819fc8:	dd400517 	ldw	r21,20(sp)
  819fcc:	dd000417 	ldw	r20,16(sp)
  819fd0:	dcc00317 	ldw	r19,12(sp)
  819fd4:	dc800217 	ldw	r18,8(sp)
  819fd8:	dc400117 	ldw	r17,4(sp)
  819fdc:	dc000017 	ldw	r16,0(sp)
  819fe0:	dec00804 	addi	sp,sp,32
 */
int loadSoundBuffer(struct Sound* this, int filePointer) {
	int i = 0, j, bytesPerSample;

	if(this->audioFormat->sampleRate != DEFAULT_SAMPLE_RATE)
		return resampleSound(this, DEFAULT_SAMPLE_RATE, true, filePointer);
  819fe4:	0819c481 	jmpi	819c48 <resampleSound>
	else {
		bytesPerSample = getSampleSizeInBytes(this->audioFormat);
  819fe8:	1809883a 	mov	r4,r3
  819fec:	08195f80 	call	8195f8 <getSampleSizeInBytes>
		allocateSoundBuffer(this, this->length);
  819ff0:	91400517 	ldw	r5,20(r18)
  819ff4:	9009883a 	mov	r4,r18
	int i = 0, j, bytesPerSample;

	if(this->audioFormat->sampleRate != DEFAULT_SAMPLE_RATE)
		return resampleSound(this, DEFAULT_SAMPLE_RATE, true, filePointer);
	else {
		bytesPerSample = getSampleSizeInBytes(this->audioFormat);
  819ff8:	102b883a 	mov	r21,r2
		allocateSoundBuffer(this, this->length);
  819ffc:	08199600 	call	819960 <allocateSoundBuffer>
		for (i = 0; i < this->length; i++) {
  81a000:	90800517 	ldw	r2,20(r18)
  81a004:	10001626 	beq	r2,zero,81a060 <loadSoundBuffer+0xe8>
  81a008:	002d883a 	mov	r22,zero
  81a00c:	0007883a 	mov	r3,zero
			for (j = 0; j < getNumChannels(this->audioFormat); j++) {
				if ((this->buffer[i] = readInt(filePointer, bytesPerSample,
  81a010:	18c5883a 	add	r2,r3,r3
  81a014:	10a7883a 	add	r19,r2,r2
  81a018:	0023883a 	mov	r17,zero
  81a01c:	00000606 	br	81a038 <loadSoundBuffer+0xc0>
  81a020:	94000717 	ldw	r16,28(r18)
  81a024:	0819a140 	call	819a14 <readInt>
		return resampleSound(this, DEFAULT_SAMPLE_RATE, true, filePointer);
	else {
		bytesPerSample = getSampleSizeInBytes(this->audioFormat);
		allocateSoundBuffer(this, this->length);
		for (i = 0; i < this->length; i++) {
			for (j = 0; j < getNumChannels(this->audioFormat); j++) {
  81a028:	8c400044 	addi	r17,r17,1
				if ((this->buffer[i] = readInt(filePointer, bytesPerSample,
  81a02c:	9c21883a 	add	r16,r19,r16
  81a030:	80800015 	stw	r2,0(r16)
  81a034:	10000c16 	blt	r2,zero,81a068 <loadSoundBuffer+0xf0>
		return resampleSound(this, DEFAULT_SAMPLE_RATE, true, filePointer);
	else {
		bytesPerSample = getSampleSizeInBytes(this->audioFormat);
		allocateSoundBuffer(this, this->length);
		for (i = 0; i < this->length; i++) {
			for (j = 0; j < getNumChannels(this->audioFormat); j++) {
  81a038:	91000017 	ldw	r4,0(r18)
  81a03c:	08196140 	call	819614 <getNumChannels>
				if ((this->buffer[i] = readInt(filePointer, bytesPerSample,
  81a040:	a80b883a 	mov	r5,r21
  81a044:	a009883a 	mov	r4,r20
  81a048:	000d883a 	mov	r6,zero
		return resampleSound(this, DEFAULT_SAMPLE_RATE, true, filePointer);
	else {
		bytesPerSample = getSampleSizeInBytes(this->audioFormat);
		allocateSoundBuffer(this, this->length);
		for (i = 0; i < this->length; i++) {
			for (j = 0; j < getNumChannels(this->audioFormat); j++) {
  81a04c:	88bff416 	blt	r17,r2,81a020 <loadSoundBuffer+0xa8>
	if(this->audioFormat->sampleRate != DEFAULT_SAMPLE_RATE)
		return resampleSound(this, DEFAULT_SAMPLE_RATE, true, filePointer);
	else {
		bytesPerSample = getSampleSizeInBytes(this->audioFormat);
		allocateSoundBuffer(this, this->length);
		for (i = 0; i < this->length; i++) {
  81a050:	90800517 	ldw	r2,20(r18)
  81a054:	b0c00044 	addi	r3,r22,1
  81a058:	182d883a 	mov	r22,r3
  81a05c:	18bfec36 	bltu	r3,r2,81a010 <loadSoundBuffer+0x98>
			for (j = 0; j < getNumChannels(this->audioFormat); j++) {
				if ((this->buffer[i] = readInt(filePointer, bytesPerSample,
  81a060:	0005883a 	mov	r2,zero
  81a064:	00000906 	br	81a08c <loadSoundBuffer+0x114>
						false)) < 0) {
					free(this->audioFormat);
  81a068:	91000017 	ldw	r4,0(r18)
  81a06c:	08216e80 	call	8216e8 <free>
					this->audioFormat = NULL;
					free(this->buffer);
  81a070:	91000717 	ldw	r4,28(r18)
		for (i = 0; i < this->length; i++) {
			for (j = 0; j < getNumChannels(this->audioFormat); j++) {
				if ((this->buffer[i] = readInt(filePointer, bytesPerSample,
						false)) < 0) {
					free(this->audioFormat);
					this->audioFormat = NULL;
  81a074:	90000015 	stw	zero,0(r18)
					free(this->buffer);
  81a078:	08216e80 	call	8216e8 <free>
					this->buffer = NULL;
  81a07c:	90000715 	stw	zero,28(r18)
					free(this);
  81a080:	9009883a 	mov	r4,r18
  81a084:	08216e80 	call	8216e8 <free>
  81a088:	00bfffc4 	movi	r2,-1
				}
			}
		}
	}
	return 0;
}
  81a08c:	dfc00717 	ldw	ra,28(sp)
  81a090:	dd800617 	ldw	r22,24(sp)
  81a094:	dd400517 	ldw	r21,20(sp)
  81a098:	dd000417 	ldw	r20,16(sp)
  81a09c:	dcc00317 	ldw	r19,12(sp)
  81a0a0:	dc800217 	ldw	r18,8(sp)
  81a0a4:	dc400117 	ldw	r17,4(sp)
  81a0a8:	dc000017 	ldw	r16,0(sp)
  81a0ac:	dec00804 	addi	sp,sp,32
  81a0b0:	f800283a 	ret

0081a0b4 <setSoundPlaybackSpeed>:
	free(soundBuffer);
	soundBuffer = NULL;
	printf("Pitch Successfully Updated");
}

void setSoundPlaybackSpeed(struct Sound* this, float speed) {
  81a0b4:	defffd04 	addi	sp,sp,-12
  81a0b8:	dc800115 	stw	r18,4(sp)
  81a0bc:	2025883a 	mov	r18,r4
	resampleSound(this, (int)(getSampleRate(this->audioFormat) / speed), false, 0);
  81a0c0:	21000017 	ldw	r4,0(r4)
	free(soundBuffer);
	soundBuffer = NULL;
	printf("Pitch Successfully Updated");
}

void setSoundPlaybackSpeed(struct Sound* this, float speed) {
  81a0c4:	dfc00215 	stw	ra,8(sp)
  81a0c8:	dc000015 	stw	r16,0(sp)
  81a0cc:	2821883a 	mov	r16,r5
	resampleSound(this, (int)(getSampleRate(this->audioFormat) / speed), false, 0);
  81a0d0:	08195e80 	call	8195e8 <getSampleRate>
  81a0d4:	1009883a 	mov	r4,r2
  81a0d8:	081f8d00 	call	81f8d0 <__floatsisf>
  81a0dc:	800b883a 	mov	r5,r16
  81a0e0:	1009883a 	mov	r4,r2
  81a0e4:	081f5f40 	call	81f5f4 <__divsf3>
  81a0e8:	1009883a 	mov	r4,r2
  81a0ec:	081f9680 	call	81f968 <__fixsfsi>
  81a0f0:	100b883a 	mov	r5,r2
  81a0f4:	9009883a 	mov	r4,r18
  81a0f8:	000d883a 	mov	r6,zero
  81a0fc:	000f883a 	mov	r7,zero
}
  81a100:	dfc00217 	ldw	ra,8(sp)
  81a104:	dc800117 	ldw	r18,4(sp)
  81a108:	dc000017 	ldw	r16,0(sp)
  81a10c:	dec00304 	addi	sp,sp,12
	soundBuffer = NULL;
	printf("Pitch Successfully Updated");
}

void setSoundPlaybackSpeed(struct Sound* this, float speed) {
	resampleSound(this, (int)(getSampleRate(this->audioFormat) / speed), false, 0);
  81a110:	0819c481 	jmpi	819c48 <resampleSound>

0081a114 <error>:
 * possible MAD_ERROR_* errors can be found in the mad.h (or stream.h)
 * header file.
 */
static enum mad_flow error(void *data, struct mad_stream *stream,
		struct mad_frame *frame) {
	fprintf(stderr, "decoding error 0x%04x (%s) at byte offset %ld\n",
  81a114:	00802134 	movhi	r2,132
  81a118:	1082e104 	addi	r2,r2,2948
  81a11c:	10c00017 	ldw	r3,0(r2)
 * error occurs. The error is indicated by stream->error; the list of
 * possible MAD_ERROR_* errors can be found in the mad.h (or stream.h)
 * header file.
 */
static enum mad_flow error(void *data, struct mad_stream *stream,
		struct mad_frame *frame) {
  81a120:	defffb04 	addi	sp,sp,-20
  81a124:	dc400115 	stw	r17,4(sp)
	fprintf(stderr, "decoding error 0x%04x (%s) at byte offset %ld\n",
  81a128:	2809883a 	mov	r4,r5
 * error occurs. The error is indicated by stream->error; the list of
 * possible MAD_ERROR_* errors can be found in the mad.h (or stream.h)
 * header file.
 */
static enum mad_flow error(void *data, struct mad_stream *stream,
		struct mad_frame *frame) {
  81a12c:	2823883a 	mov	r17,r5
  81a130:	dfc00415 	stw	ra,16(sp)
  81a134:	dd400315 	stw	r21,12(sp)
  81a138:	dcc00215 	stw	r19,8(sp)
	fprintf(stderr, "decoding error 0x%04x (%s) at byte offset %ld\n",
  81a13c:	2d400f17 	ldw	r21,60(r5)
  81a140:	1cc00317 	ldw	r19,12(r3)
  81a144:	081527c0 	call	81527c <mad_stream_errorstr>
  81a148:	8a000517 	ldw	r8,20(r17)
  81a14c:	d0e76017 	ldw	r3,-25216(gp)
  81a150:	9809883a 	mov	r4,r19
  81a154:	a80d883a 	mov	r6,r21
  81a158:	40d1c83a 	sub	r8,r8,r3
  81a15c:	100f883a 	mov	r7,r2
  81a160:	01402134 	movhi	r5,132
  81a164:	29795804 	addi	r5,r5,-6816
  81a168:	da000015 	stw	r8,0(sp)
  81a16c:	08216880 	call	821688 <fprintf>

	/* return MAD_FLOW_BREAK here to stop decoding (and propagate an error) */
	return MAD_FLOW_BREAK;

	return MAD_FLOW_CONTINUE;
}
  81a170:	00800444 	movi	r2,17
  81a174:	dfc00417 	ldw	ra,16(sp)
  81a178:	dd400317 	ldw	r21,12(sp)
  81a17c:	dcc00217 	ldw	r19,8(sp)
  81a180:	dc400117 	ldw	r17,4(sp)
  81a184:	dec00504 	addi	sp,sp,20
  81a188:	f800283a 	ret

0081a18c <input>:
 * the stream buffer which is to be decoded. In this example, an entire file
 * has been mapped into memory, so we just call mad_stream_buffer() with the
 * address and length of the mapping. When this callback is called a second
 * time, we are finished decoding.
 */
static enum mad_flow input(void *data, struct mad_stream *stream) {
  81a18c:	defffd04 	addi	sp,sp,-12
  81a190:	dc400115 	stw	r17,4(sp)
	struct Sound* sound = data;
	unsigned char * buf = tempBuffer.start;
  81a194:	d4676004 	addi	r17,gp,-25216
	/* The buffer is the full pre-loaded song, so this function will only
	 * be called twice:
	 * 1. At the beginning of processing
	 * 2. When this buffer is exhausted (end of the song)
	 */
	if (tempBuffer.length) {
  81a198:	88800117 	ldw	r2,4(r17)
 * the stream buffer which is to be decoded. In this example, an entire file
 * has been mapped into memory, so we just call mad_stream_buffer() with the
 * address and length of the mapping. When this callback is called a second
 * time, we are finished decoding.
 */
static enum mad_flow input(void *data, struct mad_stream *stream) {
  81a19c:	dc000015 	stw	r16,0(sp)
  81a1a0:	2807883a 	mov	r3,r5
  81a1a4:	2021883a 	mov	r16,r4
  81a1a8:	dfc00215 	stw	ra,8(sp)
	if (tempBuffer.length) {
		mad_stream_buffer(stream, buf, tempBuffer.length);
		tempBuffer.length = 0;
		return MAD_FLOW_CONTINUE;
	} else {
		printf("MP3 Successfully decoded\n");
  81a1ac:	01002134 	movhi	r4,132
  81a1b0:	21396404 	addi	r4,r4,-6768
	 * be called twice:
	 * 1. At the beginning of processing
	 * 2. When this buffer is exhausted (end of the song)
	 */
	if (tempBuffer.length) {
		mad_stream_buffer(stream, buf, tempBuffer.length);
  81a1b4:	100d883a 	mov	r6,r2
 * address and length of the mapping. When this callback is called a second
 * time, we are finished decoding.
 */
static enum mad_flow input(void *data, struct mad_stream *stream) {
	struct Sound* sound = data;
	unsigned char * buf = tempBuffer.start;
  81a1b8:	d1676017 	ldw	r5,-25216(gp)
	/* The buffer is the full pre-loaded song, so this function will only
	 * be called twice:
	 * 1. At the beginning of processing
	 * 2. When this buffer is exhausted (end of the song)
	 */
	if (tempBuffer.length) {
  81a1bc:	10000d1e 	bne	r2,zero,81a1f4 <input+0x68>
		mad_stream_buffer(stream, buf, tempBuffer.length);
		tempBuffer.length = 0;
		return MAD_FLOW_CONTINUE;
	} else {
		printf("MP3 Successfully decoded\n");
  81a1c0:	08221800 	call	822180 <puts>
		free(tempBuffer.start);
  81a1c4:	d1276017 	ldw	r4,-25216(gp)
  81a1c8:	08216e80 	call	8216e8 <free>
		sound->length = sound->position;
  81a1cc:	80800317 	ldw	r2,12(r16)
		sound->position = 0;
  81a1d0:	00c00404 	movi	r3,16
  81a1d4:	80000315 	stw	zero,12(r16)
		tempBuffer.length = 0;
		return MAD_FLOW_CONTINUE;
	} else {
		printf("MP3 Successfully decoded\n");
		free(tempBuffer.start);
		sound->length = sound->position;
  81a1d8:	80800515 	stw	r2,20(r16)
		sound->position = 0;
		return MAD_FLOW_STOP;
	}
}
  81a1dc:	1805883a 	mov	r2,r3
  81a1e0:	dfc00217 	ldw	ra,8(sp)
  81a1e4:	dc400117 	ldw	r17,4(sp)
  81a1e8:	dc000017 	ldw	r16,0(sp)
  81a1ec:	dec00304 	addi	sp,sp,12
  81a1f0:	f800283a 	ret
	 * be called twice:
	 * 1. At the beginning of processing
	 * 2. When this buffer is exhausted (end of the song)
	 */
	if (tempBuffer.length) {
		mad_stream_buffer(stream, buf, tempBuffer.length);
  81a1f4:	1809883a 	mov	r4,r3
  81a1f8:	08154fc0 	call	8154fc <mad_stream_buffer>
		tempBuffer.length = 0;
  81a1fc:	0007883a 	mov	r3,zero
  81a200:	88000115 	stw	zero,4(r17)
  81a204:	003ff506 	br	81a1dc <input+0x50>

0081a208 <playSound>:
 *
 * @param this - The sound to change
 * @param position - The position to seek to in MilliSeconds
 */
void seekSound(struct Sound* this, unsigned int position) {
	this->position = convertFromMS(position);
  81a208:	300c917a 	slli	r6,r6,5
/**
 * Changes the sound volume so that it can be taken into account when
 * adding the sound to the SoundMixer.
 */
void setSoundVolume(struct Sound* this, float volume) {
	this->volume = volume;
  81a20c:	21400815 	stw	r5,32(r4)
}

void playSound(struct Sound* sound, float volume, int startTime, int loops) {
	seekSound(sound, startTime);
	setSoundVolume(sound, volume);
	sound->loops = loops;
  81a210:	21c00615 	stw	r7,24(r4)
 *
 * @param this - The sound to change
 * @param position - The position to seek to in MilliSeconds
 */
void seekSound(struct Sound* this, unsigned int position) {
	this->position = convertFromMS(position);
  81a214:	21800315 	stw	r6,12(r4)
 * Changes the sound volume so that it can be taken into account when
 * adding the sound to the SoundMixer.
 */
void setSoundVolume(struct Sound* this, float volume) {
	this->volume = volume;
	this->fadeVolume = volume;
  81a218:	21400915 	stw	r5,36(r4)

void playSound(struct Sound* sound, float volume, int startTime, int loops) {
	seekSound(sound, startTime);
	setSoundVolume(sound, volume);
	sound->loops = loops;
}
  81a21c:	f800283a 	ret

0081a220 <getSoundLengthMS>:
}

/**
 * Returns the length of the sound in milliseconds
 */
unsigned int getSoundLengthMS(struct Sound* this) {
  81a220:	21000517 	ldw	r4,20(r4)
  81a224:	deffff04 	addi	sp,sp,-4
  81a228:	015f4004 	movi	r5,32000
  81a22c:	2100fa24 	muli	r4,r4,1000
  81a230:	dfc00015 	stw	ra,0(sp)
  81a234:	0820c080 	call	820c08 <__udivsi3>
	return convertToMS(this->length);
}
  81a238:	dfc00017 	ldw	ra,0(sp)
  81a23c:	dec00104 	addi	sp,sp,4
  81a240:	f800283a 	ret

0081a244 <getSoundPositionMS>:
}

/**
 * Returns the length of the sound in milliseconds
 */
unsigned int getSoundPositionMS(struct Sound* this) {
  81a244:	21000317 	ldw	r4,12(r4)
  81a248:	deffff04 	addi	sp,sp,-4
  81a24c:	015f4004 	movi	r5,32000
  81a250:	2100fa24 	muli	r4,r4,1000
  81a254:	dfc00015 	stw	ra,0(sp)
  81a258:	0820c080 	call	820c08 <__udivsi3>
	return convertToMS(this->position);
}
  81a25c:	dfc00017 	ldw	ra,0(sp)
  81a260:	dec00104 	addi	sp,sp,4
  81a264:	f800283a 	ret

0081a268 <setSoundPitch>:
		maxVal = nextVal > maxVal ? nextVal : maxVal;
	}
	return maxVal;
}

void setSoundPitch(struct Sound* this, float pitch, int quality) {
  81a268:	defff004 	addi	sp,sp,-64
  81a26c:	dd800c15 	stw	r22,48(sp)
  81a270:	202d883a 	mov	r22,r4
	int i, origSampleRate, maxVal, fftFrameSize = 2048;
	float *soundBuffer;
	long oSamp, downSampleAmount;

	printf("Changing sound pitch to: %f with quality: %d\n", pitch, quality);
  81a274:	2809883a 	mov	r4,r5
		maxVal = nextVal > maxVal ? nextVal : maxVal;
	}
	return maxVal;
}

void setSoundPitch(struct Sound* this, float pitch, int quality) {
  81a278:	dfc00f15 	stw	ra,60(sp)
  81a27c:	dc000615 	stw	r16,24(sp)
  81a280:	d9400415 	stw	r5,16(sp)
  81a284:	3021883a 	mov	r16,r6
  81a288:	df000e15 	stw	fp,56(sp)
  81a28c:	ddc00d15 	stw	r23,52(sp)
  81a290:	dd400b15 	stw	r21,44(sp)
  81a294:	dd000a15 	stw	r20,40(sp)
  81a298:	dcc00915 	stw	r19,36(sp)
  81a29c:	dc800815 	stw	r18,32(sp)
  81a2a0:	dc400715 	stw	r17,28(sp)
	int i, origSampleRate, maxVal, fftFrameSize = 2048;
	float *soundBuffer;
	long oSamp, downSampleAmount;

	printf("Changing sound pitch to: %f with quality: %d\n", pitch, quality);
  81a2a4:	081f9fc0 	call	81f9fc <__extendsfdf2>
  81a2a8:	100b883a 	mov	r5,r2
  81a2ac:	180d883a 	mov	r6,r3
  81a2b0:	01002134 	movhi	r4,132
  81a2b4:	21396b04 	addi	r4,r4,-6740
  81a2b8:	800f883a 	mov	r7,r16
  81a2bc:	08220680 	call	822068 <printf>

	switch (quality) {
  81a2c0:	01400084 	movi	r5,2
  81a2c4:	81409a26 	beq	r16,r5,81a530 <setSoundPitch+0x2c8>
  81a2c8:	2c00790e 	bge	r5,r16,81a4b0 <setSoundPitch+0x248>
  81a2cc:	008000c4 	movi	r2,3
  81a2d0:	80809c26 	beq	r16,r2,81a544 <setSoundPitch+0x2dc>
  81a2d4:	00800104 	movi	r2,4
  81a2d8:	80809826 	beq	r16,r2,81a53c <setSoundPitch+0x2d4>
  81a2dc:	00800044 	movi	r2,1
  81a2e0:	d8800315 	stw	r2,12(sp)
  81a2e4:	01400284 	movi	r5,10
		downSampleAmount = 10;
		oSamp = 1;
		break;
	}

	origSampleRate = getSampleRate(this->audioFormat);
  81a2e8:	b1000017 	ldw	r4,0(r22)
  81a2ec:	d9400515 	stw	r5,20(sp)
  81a2f0:	08195e80 	call	8195e8 <getSampleRate>
	resampleSound(this, origSampleRate / downSampleAmount, false, 0);
  81a2f4:	d9400517 	ldw	r5,20(sp)
		downSampleAmount = 10;
		oSamp = 1;
		break;
	}

	origSampleRate = getSampleRate(this->audioFormat);
  81a2f8:	1039883a 	mov	fp,r2
	resampleSound(this, origSampleRate / downSampleAmount, false, 0);
  81a2fc:	1146b03a 	or	r3,r2,r5
  81a300:	008003c4 	movi	r2,15
  81a304:	10c08636 	bltu	r2,r3,81a520 <setSoundPitch+0x2b8>
  81a308:	e004913a 	slli	r2,fp,4
  81a30c:	00c02134 	movhi	r3,132
  81a310:	18fbb104 	addi	r3,r3,-4412
  81a314:	1144b03a 	or	r2,r2,r5
  81a318:	10c5883a 	add	r2,r2,r3
  81a31c:	11400003 	ldbu	r5,0(r2)
  81a320:	b009883a 	mov	r4,r22
  81a324:	000d883a 	mov	r6,zero
  81a328:	000f883a 	mov	r7,zero
  81a32c:	0819c480 	call	819c48 <resampleSound>
}

int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
  81a330:	b1400517 	ldw	r5,20(r22)
  81a334:	28008626 	beq	r5,zero,81a550 <setSoundPitch+0x2e8>
		nextVal = this->buffer[i] < 0 ? -this->buffer[i] : this->buffer[i];
  81a338:	b1800717 	ldw	r6,28(r22)
  81a33c:	0007883a 	mov	r3,zero
  81a340:	002f883a 	mov	r23,zero
  81a344:	0005883a 	mov	r2,zero
		maxVal = nextVal > maxVal ? nextVal : maxVal;
  81a348:	1085883a 	add	r2,r2,r2
  81a34c:	1085883a 	add	r2,r2,r2
  81a350:	1185883a 	add	r2,r2,r6
  81a354:	11000017 	ldw	r4,0(r2)
}

int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
  81a358:	18c00044 	addi	r3,r3,1
  81a35c:	1805883a 	mov	r2,r3
		nextVal = this->buffer[i] < 0 ? -this->buffer[i] : this->buffer[i];
		maxVal = nextVal > maxVal ? nextVal : maxVal;
  81a360:	20006d16 	blt	r4,zero,81a518 <setSoundPitch+0x2b0>
  81a364:	b900010e 	bge	r23,r4,81a36c <setSoundPitch+0x104>
  81a368:	202f883a 	mov	r23,r4
}

int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
  81a36c:	28fff61e 	bne	r5,r3,81a348 <setSoundPitch+0xe0>
	}

	origSampleRate = getSampleRate(this->audioFormat);
	resampleSound(this, origSampleRate / downSampleAmount, false, 0);
	maxVal = getMaxSoundValue(this);
	soundBuffer = (float *) malloc(sizeof(float) * this->length);
  81a370:	2949883a 	add	r4,r5,r5
  81a374:	2109883a 	add	r4,r4,r4
  81a378:	08216fc0 	call	8216fc <malloc>

	for (i = 0; i < this->length; i++) {
  81a37c:	b4800517 	ldw	r18,20(r22)
	}

	origSampleRate = getSampleRate(this->audioFormat);
	resampleSound(this, origSampleRate / downSampleAmount, false, 0);
	maxVal = getMaxSoundValue(this);
	soundBuffer = (float *) malloc(sizeof(float) * this->length);
  81a380:	1027883a 	mov	r19,r2

	for (i = 0; i < this->length; i++) {
  81a384:	90001326 	beq	r18,zero,81a3d4 <setSoundPitch+0x16c>
  81a388:	b809883a 	mov	r4,r23
  81a38c:	081f8d00 	call	81f8d0 <__floatsisf>
		soundBuffer[i] = (float) (this->buffer[i]) / maxVal;
  81a390:	b5000717 	ldw	r20,28(r22)
	origSampleRate = getSampleRate(this->audioFormat);
	resampleSound(this, origSampleRate / downSampleAmount, false, 0);
	maxVal = getMaxSoundValue(this);
	soundBuffer = (float *) malloc(sizeof(float) * this->length);

	for (i = 0; i < this->length; i++) {
  81a394:	102b883a 	mov	r21,r2
		soundBuffer[i] = (float) (this->buffer[i]) / maxVal;
  81a398:	0023883a 	mov	r17,zero
  81a39c:	0021883a 	mov	r16,zero
  81a3a0:	8421883a 	add	r16,r16,r16
  81a3a4:	8421883a 	add	r16,r16,r16
  81a3a8:	a405883a 	add	r2,r20,r16
  81a3ac:	11000017 	ldw	r4,0(r2)
  81a3b0:	9c21883a 	add	r16,r19,r16
	origSampleRate = getSampleRate(this->audioFormat);
	resampleSound(this, origSampleRate / downSampleAmount, false, 0);
	maxVal = getMaxSoundValue(this);
	soundBuffer = (float *) malloc(sizeof(float) * this->length);

	for (i = 0; i < this->length; i++) {
  81a3b4:	8c400044 	addi	r17,r17,1
		soundBuffer[i] = (float) (this->buffer[i]) / maxVal;
  81a3b8:	081f8d00 	call	81f8d0 <__floatsisf>
  81a3bc:	1009883a 	mov	r4,r2
  81a3c0:	a80b883a 	mov	r5,r21
  81a3c4:	081f5f40 	call	81f5f4 <__divsf3>
  81a3c8:	80800015 	stw	r2,0(r16)
	origSampleRate = getSampleRate(this->audioFormat);
	resampleSound(this, origSampleRate / downSampleAmount, false, 0);
	maxVal = getMaxSoundValue(this);
	soundBuffer = (float *) malloc(sizeof(float) * this->length);

	for (i = 0; i < this->length; i++) {
  81a3cc:	8821883a 	mov	r16,r17
  81a3d0:	947ff31e 	bne	r18,r17,81a3a0 <setSoundPitch+0x138>
		soundBuffer[i] = (float) (this->buffer[i]) / maxVal;
	}

	pitchShift(pitch, this->length, fftFrameSize, oSamp, getSampleRate(this->audioFormat), soundBuffer, soundBuffer);
  81a3d4:	b1000017 	ldw	r4,0(r22)
  81a3d8:	08195e80 	call	8195e8 <getSampleRate>
  81a3dc:	1009883a 	mov	r4,r2
  81a3e0:	081f8d00 	call	81f8d0 <__floatsisf>
  81a3e4:	d9000417 	ldw	r4,16(sp)
  81a3e8:	d9c00317 	ldw	r7,12(sp)
  81a3ec:	900b883a 	mov	r5,r18
  81a3f0:	01820004 	movi	r6,2048
  81a3f4:	d8800015 	stw	r2,0(sp)
  81a3f8:	dcc00115 	stw	r19,4(sp)
  81a3fc:	dcc00215 	stw	r19,8(sp)
  81a400:	0804d100 	call	804d10 <pitchShift>

	for (i = 0; i < this->length; i++) {
  81a404:	b0800517 	ldw	r2,20(r22)
  81a408:	10001426 	beq	r2,zero,81a45c <setSoundPitch+0x1f4>
  81a40c:	b809883a 	mov	r4,r23
  81a410:	081f8d00 	call	81f8d0 <__floatsisf>
  81a414:	b4800717 	ldw	r18,28(r22)
  81a418:	1029883a 	mov	r20,r2
  81a41c:	0023883a 	mov	r17,zero
  81a420:	0021883a 	mov	r16,zero
		this->buffer[i] = (int) (soundBuffer[i] * maxVal);
  81a424:	8421883a 	add	r16,r16,r16
  81a428:	8421883a 	add	r16,r16,r16
  81a42c:	9c05883a 	add	r2,r19,r16
  81a430:	11400017 	ldw	r5,0(r2)
  81a434:	a009883a 	mov	r4,r20
  81a438:	9421883a 	add	r16,r18,r16
  81a43c:	081f4140 	call	81f414 <__mulsf3>
  81a440:	1009883a 	mov	r4,r2
  81a444:	081f9680 	call	81f968 <__fixsfsi>
  81a448:	80800015 	stw	r2,0(r16)
		soundBuffer[i] = (float) (this->buffer[i]) / maxVal;
	}

	pitchShift(pitch, this->length, fftFrameSize, oSamp, getSampleRate(this->audioFormat), soundBuffer, soundBuffer);

	for (i = 0; i < this->length; i++) {
  81a44c:	b0800517 	ldw	r2,20(r22)
  81a450:	8c000044 	addi	r16,r17,1
  81a454:	8023883a 	mov	r17,r16
  81a458:	80bff236 	bltu	r16,r2,81a424 <setSoundPitch+0x1bc>
		this->buffer[i] = (int) (soundBuffer[i] * maxVal);
	}

	resampleSound(this, origSampleRate, false, 0);
  81a45c:	e00b883a 	mov	r5,fp
  81a460:	b009883a 	mov	r4,r22
  81a464:	000d883a 	mov	r6,zero
  81a468:	000f883a 	mov	r7,zero
  81a46c:	0819c480 	call	819c48 <resampleSound>
	free(soundBuffer);
  81a470:	9809883a 	mov	r4,r19
  81a474:	08216e80 	call	8216e8 <free>
	soundBuffer = NULL;
	printf("Pitch Successfully Updated");
  81a478:	01002134 	movhi	r4,132
  81a47c:	21397704 	addi	r4,r4,-6692
}
  81a480:	dfc00f17 	ldw	ra,60(sp)
  81a484:	df000e17 	ldw	fp,56(sp)
  81a488:	ddc00d17 	ldw	r23,52(sp)
  81a48c:	dd800c17 	ldw	r22,48(sp)
  81a490:	dd400b17 	ldw	r21,44(sp)
  81a494:	dd000a17 	ldw	r20,40(sp)
  81a498:	dcc00917 	ldw	r19,36(sp)
  81a49c:	dc800817 	ldw	r18,32(sp)
  81a4a0:	dc400717 	ldw	r17,28(sp)
  81a4a4:	dc000617 	ldw	r16,24(sp)
  81a4a8:	dec01004 	addi	sp,sp,64
	}

	resampleSound(this, origSampleRate, false, 0);
	free(soundBuffer);
	soundBuffer = NULL;
	printf("Pitch Successfully Updated");
  81a4ac:	08220681 	jmpi	822068 <printf>
	float *soundBuffer;
	long oSamp, downSampleAmount;

	printf("Changing sound pitch to: %f with quality: %d\n", pitch, quality);

	switch (quality) {
  81a4b0:	803f8a1e 	bne	r16,zero,81a2dc <setSoundPitch+0x74>
	soundBuffer = NULL;
	printf("Pitch Successfully Updated");
}

void setSoundPlaybackSpeed(struct Sound* this, float speed) {
	resampleSound(this, (int)(getSampleRate(this->audioFormat) / speed), false, 0);
  81a4b4:	b1000017 	ldw	r4,0(r22)
  81a4b8:	08195e80 	call	8195e8 <getSampleRate>
  81a4bc:	1009883a 	mov	r4,r2
  81a4c0:	081f8d00 	call	81f8d0 <__floatsisf>
  81a4c4:	d9400417 	ldw	r5,16(sp)
  81a4c8:	1009883a 	mov	r4,r2
  81a4cc:	081f5f40 	call	81f5f4 <__divsf3>
  81a4d0:	1009883a 	mov	r4,r2
  81a4d4:	081f9680 	call	81f968 <__fixsfsi>
  81a4d8:	100b883a 	mov	r5,r2
  81a4dc:	b009883a 	mov	r4,r22
  81a4e0:	000d883a 	mov	r6,zero
  81a4e4:	000f883a 	mov	r7,zero

	resampleSound(this, origSampleRate, false, 0);
	free(soundBuffer);
	soundBuffer = NULL;
	printf("Pitch Successfully Updated");
}
  81a4e8:	dfc00f17 	ldw	ra,60(sp)
  81a4ec:	df000e17 	ldw	fp,56(sp)
  81a4f0:	ddc00d17 	ldw	r23,52(sp)
  81a4f4:	dd800c17 	ldw	r22,48(sp)
  81a4f8:	dd400b17 	ldw	r21,44(sp)
  81a4fc:	dd000a17 	ldw	r20,40(sp)
  81a500:	dcc00917 	ldw	r19,36(sp)
  81a504:	dc800817 	ldw	r18,32(sp)
  81a508:	dc400717 	ldw	r17,28(sp)
  81a50c:	dc000617 	ldw	r16,24(sp)
  81a510:	dec01004 	addi	sp,sp,64

void setSoundPlaybackSpeed(struct Sound* this, float speed) {
	resampleSound(this, (int)(getSampleRate(this->audioFormat) / speed), false, 0);
  81a514:	0819c481 	jmpi	819c48 <resampleSound>
int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
		nextVal = this->buffer[i] < 0 ? -this->buffer[i] : this->buffer[i];
		maxVal = nextVal > maxVal ? nextVal : maxVal;
  81a518:	0109c83a 	sub	r4,zero,r4
  81a51c:	003f9106 	br	81a364 <setSoundPitch+0xfc>
		oSamp = 1;
		break;
	}

	origSampleRate = getSampleRate(this->audioFormat);
	resampleSound(this, origSampleRate / downSampleAmount, false, 0);
  81a520:	e009883a 	mov	r4,fp
  81a524:	0820b480 	call	820b48 <__divsi3>
  81a528:	100b883a 	mov	r5,r2
  81a52c:	003f7c06 	br	81a320 <setSoundPitch+0xb8>
	soundBuffer = NULL;
	printf("Pitch Successfully Updated");
}

void setSoundPlaybackSpeed(struct Sound* this, float speed) {
	resampleSound(this, (int)(getSampleRate(this->audioFormat) / speed), false, 0);
  81a530:	01400144 	movi	r5,5
  81a534:	dc000315 	stw	r16,12(sp)
  81a538:	003f6b06 	br	81a2e8 <setSoundPitch+0x80>
	float *soundBuffer;
	long oSamp, downSampleAmount;

	printf("Changing sound pitch to: %f with quality: %d\n", pitch, quality);

	switch (quality) {
  81a53c:	dc000315 	stw	r16,12(sp)
  81a540:	003f6906 	br	81a2e8 <setSoundPitch+0x80>
		oSamp = 1;
		break;
	case 2:
		downSampleAmount = 5;
		oSamp = 2;
		break;
  81a544:	800b883a 	mov	r5,r16
  81a548:	dc000315 	stw	r16,12(sp)
  81a54c:	003f6606 	br	81a2e8 <setSoundPitch+0x80>
}

int getMaxSoundValue(struct Sound* this) {
	int i, maxVal = 0, nextVal;

	for (i = 0; i < this->length; i++) {
  81a550:	002f883a 	mov	r23,zero
  81a554:	003f8606 	br	81a370 <setSoundPitch+0x108>

0081a558 <loadMP3Sound>:
	mad_decoder_finish(&decoder);

	return result;
}

struct Sound* loadMP3Sound(char * file) {
  81a558:	deffe704 	addi	sp,sp,-100
	unsigned char * buf = NULL;
	int byte = 0;
	unsigned int tempBufferSize;
	unsigned int decodedBufferSize;

	printf("Reading %s file size\n", file);
  81a55c:	200b883a 	mov	r5,r4
	mad_decoder_finish(&decoder);

	return result;
}

struct Sound* loadMP3Sound(char * file) {
  81a560:	dd801715 	stw	r22,92(sp)
  81a564:	202d883a 	mov	r22,r4
	unsigned char * buf = NULL;
	int byte = 0;
	unsigned int tempBufferSize;
	unsigned int decodedBufferSize;

	printf("Reading %s file size\n", file);
  81a568:	01002134 	movhi	r4,132
  81a56c:	21397e04 	addi	r4,r4,-6664
	mad_decoder_finish(&decoder);

	return result;
}

struct Sound* loadMP3Sound(char * file) {
  81a570:	dfc01815 	stw	ra,96(sp)
  81a574:	dcc01415 	stw	r19,80(sp)
  81a578:	dc801315 	stw	r18,76(sp)
  81a57c:	dc401215 	stw	r17,72(sp)
  81a580:	dc001115 	stw	r16,68(sp)
  81a584:	dd401615 	stw	r21,88(sp)
  81a588:	dd001515 	stw	r20,84(sp)
	unsigned char * buf = NULL;
	int byte = 0;
	unsigned int tempBufferSize;
	unsigned int decodedBufferSize;

	printf("Reading %s file size\n", file);
  81a58c:	08220680 	call	822068 <printf>
	filePointer = alt_up_sd_card_fopen(file, false);
  81a590:	b009883a 	mov	r4,r22
  81a594:	000b883a 	mov	r5,zero
  81a598:	08324500 	call	832450 <alt_up_sd_card_fopen>
  81a59c:	14ffffcc 	andi	r19,r2,65535
  81a5a0:	9ce0001c 	xori	r19,r19,32768
  81a5a4:	9ce00004 	addi	r19,r19,-32768
  81a5a8:	9cbfffcc 	andi	r18,r19,65535
  81a5ac:	94a0001c 	xori	r18,r18,32768
  81a5b0:	94a00004 	addi	r18,r18,-32768
  81a5b4:	0021883a 	mov	r16,zero
  81a5b8:	04400844 	movi	r17,33
	while (i != 33) {
		byte = alt_up_sd_card_read(filePointer);
		i++;
  81a5bc:	84000044 	addi	r16,r16,1
	unsigned int decodedBufferSize;

	printf("Reading %s file size\n", file);
	filePointer = alt_up_sd_card_fopen(file, false);
	while (i != 33) {
		byte = alt_up_sd_card_read(filePointer);
  81a5c0:	9009883a 	mov	r4,r18
  81a5c4:	08305d80 	call	8305d8 <alt_up_sd_card_read>
	unsigned int tempBufferSize;
	unsigned int decodedBufferSize;

	printf("Reading %s file size\n", file);
	filePointer = alt_up_sd_card_fopen(file, false);
	while (i != 33) {
  81a5c8:	847ffc1e 	bne	r16,r17,81a5bc <loadMP3Sound+0x64>
		byte = alt_up_sd_card_read(filePointer);
		i++;
	}
	tempBufferSize = readInt(filePointer, 4, true);
  81a5cc:	9809883a 	mov	r4,r19
  81a5d0:	01400104 	movi	r5,4
  81a5d4:	01800044 	movi	r6,1
  81a5d8:	0819a140 	call	819a14 <readInt>
  81a5dc:	1027883a 	mov	r19,r2

	// The final buffer size will depend on the mp3 bitrate
	// For now I'm multiplying by this multiplier which will save slightly more space than needed
	decodedBufferSize = tempBufferSize * MP3_DECODE_MULTIPLIER;

	alt_up_sd_card_fclose(filePointer);
  81a5e0:	9009883a 	mov	r4,r18
	}
	tempBufferSize = readInt(filePointer, 4, true);

	// The final buffer size will depend on the mp3 bitrate
	// For now I'm multiplying by this multiplier which will save slightly more space than needed
	decodedBufferSize = tempBufferSize * MP3_DECODE_MULTIPLIER;
  81a5e4:	1085883a 	add	r2,r2,r2
  81a5e8:	10a1883a 	add	r16,r2,r2

	alt_up_sd_card_fclose(filePointer);
  81a5ec:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
	printf("File Size: %d bytes\n", tempBufferSize);
  81a5f0:	980b883a 	mov	r5,r19
  81a5f4:	01002134 	movhi	r4,132
  81a5f8:	21398404 	addi	r4,r4,-6640
  81a5fc:	08220680 	call	822068 <printf>
	if (decodedBufferSize > MAX_CACHE_MEMORY) {
  81a600:	00c003f4 	movhi	r3,15
  81a604:	18d09004 	addi	r3,r3,16960
  81a608:	1c006336 	bltu	r3,r16,81a798 <loadMP3Sound+0x240>
		printf("Failed to allocate sound buffer\n");
	clearSoundBuffer(this);
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  81a60c:	01000a04 	movi	r4,40
  81a610:	08216fc0 	call	8216fc <malloc>
  81a614:	102b883a 	mov	r21,r2
	if (!this)
  81a618:	10006a26 	beq	r2,zero,81a7c4 <loadMP3Sound+0x26c>
		printf("Failed to allocate space for sound\n");
	this->length = length;
	this->position = 0;
	this->buffer = NULL;
	this->volume = 1;
  81a61c:	008fe034 	movhi	r2,16256
  81a620:	a8800815 	stw	r2,32(r21)
	this->fadeVolume = 1;
  81a624:	a8800915 	stw	r2,36(r21)
		alt_up_sd_card_fclose(filePointer);
		printf("FILE size too big");
		return NULL;
	}
	struct Sound* this = initSound(decodedBufferSize);
	allocateSoundBuffer(this, this->length);
  81a628:	800b883a 	mov	r5,r16
  81a62c:	a809883a 	mov	r4,r21

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	if (!this)
		printf("Failed to allocate space for sound\n");
	this->length = length;
  81a630:	ac000515 	stw	r16,20(r21)
	this->position = 0;
  81a634:	a8000315 	stw	zero,12(r21)
	this->buffer = NULL;
  81a638:	a8000715 	stw	zero,28(r21)
	this->volume = 1;
	this->fadeVolume = 1;
	this->inFadePosition = 0;
  81a63c:	a8000115 	stw	zero,4(r21)
	this->outFadePosition = this->length;
  81a640:	ac000215 	stw	r16,8(r21)
	this->loading_pos = 0;
  81a644:	a8000415 	stw	zero,16(r21)
	this->audioFormat = NULL;
  81a648:	a8000015 	stw	zero,0(r21)
		alt_up_sd_card_fclose(filePointer);
		printf("FILE size too big");
		return NULL;
	}
	struct Sound* this = initSound(decodedBufferSize);
	allocateSoundBuffer(this, this->length);
  81a64c:	08199600 	call	819960 <allocateSoundBuffer>

	buf = malloc(tempBufferSize);
  81a650:	9809883a 	mov	r4,r19
  81a654:	08216fc0 	call	8216fc <malloc>
  81a658:	1029883a 	mov	r20,r2
	if (!buf) {
  81a65c:	10005d26 	beq	r2,zero,81a7d4 <loadMP3Sound+0x27c>
		printf("Malloc failed\n");
		exit(0);
	}

	printf("Preloading mp3\n");
  81a660:	01002134 	movhi	r4,132
  81a664:	21399304 	addi	r4,r4,-6580
  81a668:	08221800 	call	822180 <puts>
	filePointer = alt_up_sd_card_fopen(file, false);
  81a66c:	000b883a 	mov	r5,zero
  81a670:	b009883a 	mov	r4,r22
  81a674:	08324500 	call	832450 <alt_up_sd_card_fopen>
  81a678:	10bfffcc 	andi	r2,r2,65535
  81a67c:	10a0001c 	xori	r2,r2,32768
  81a680:	10a00004 	addi	r2,r2,-32768
	for (i = 0; i < tempBufferSize; i++) {
  81a684:	98004b26 	beq	r19,zero,81a7b4 <loadMP3Sound+0x25c>
		buf[i] = alt_up_sd_card_read(filePointer);
  81a688:	14bfffcc 	andi	r18,r2,65535
  81a68c:	94a0001c 	xori	r18,r18,32768
  81a690:	94a00004 	addi	r18,r18,-32768
  81a694:	9009883a 	mov	r4,r18
  81a698:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  81a69c:	0021883a 	mov	r16,zero
  81a6a0:	a0800005 	stb	r2,0(r20)
		if (i % (1024 * 1024) == 0) {
			printf("%d MB | ", i / (1024 * 1024));
  81a6a4:	800b883a 	mov	r5,r16
  81a6a8:	80003716 	blt	r16,zero,81a788 <loadMP3Sound+0x230>
  81a6ac:	280bd53a 	srai	r5,r5,20
  81a6b0:	01002134 	movhi	r4,132
  81a6b4:	21399704 	addi	r4,r4,-6564
  81a6b8:	a423883a 	add	r17,r20,r16
		exit(0);
	}

	printf("Preloading mp3\n");
	filePointer = alt_up_sd_card_fopen(file, false);
	for (i = 0; i < tempBufferSize; i++) {
  81a6bc:	84000044 	addi	r16,r16,1
		buf[i] = alt_up_sd_card_read(filePointer);
		if (i % (1024 * 1024) == 0) {
			printf("%d MB | ", i / (1024 * 1024));
  81a6c0:	08220680 	call	822068 <printf>
		exit(0);
	}

	printf("Preloading mp3\n");
	filePointer = alt_up_sd_card_fopen(file, false);
	for (i = 0; i < tempBufferSize; i++) {
  81a6c4:	84c00a2e 	bgeu	r16,r19,81a6f0 <loadMP3Sound+0x198>
		buf[i] = alt_up_sd_card_read(filePointer);
  81a6c8:	9009883a 	mov	r4,r18
  81a6cc:	08305d80 	call	8305d8 <alt_up_sd_card_read>
		if (i % (1024 * 1024) == 0) {
  81a6d0:	00c00434 	movhi	r3,16
  81a6d4:	18ffffc4 	addi	r3,r3,-1
  81a6d8:	80c6703a 	and	r3,r16,r3
	}

	printf("Preloading mp3\n");
	filePointer = alt_up_sd_card_fopen(file, false);
	for (i = 0; i < tempBufferSize; i++) {
		buf[i] = alt_up_sd_card_read(filePointer);
  81a6dc:	88800045 	stb	r2,1(r17)
  81a6e0:	8c400044 	addi	r17,r17,1
		if (i % (1024 * 1024) == 0) {
  81a6e4:	183fef26 	beq	r3,zero,81a6a4 <loadMP3Sound+0x14c>
		exit(0);
	}

	printf("Preloading mp3\n");
	filePointer = alt_up_sd_card_fopen(file, false);
	for (i = 0; i < tempBufferSize; i++) {
  81a6e8:	84000044 	addi	r16,r16,1
  81a6ec:	84fff636 	bltu	r16,r19,81a6c8 <loadMP3Sound+0x170>
		buf[i] = alt_up_sd_card_read(filePointer);
		if (i % (1024 * 1024) == 0) {
			printf("%d MB | ", i / (1024 * 1024));
		}
	}
	alt_up_sd_card_fclose(filePointer);
  81a6f0:	9009883a 	mov	r4,r18
  81a6f4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
	printf("\nPreloading complete\n");
  81a6f8:	01002134 	movhi	r4,132
  81a6fc:	21399a04 	addi	r4,r4,-6552
  81a700:	08221800 	call	822180 <puts>

	/* initialize our private message structure -
	 * this structure is for our own purposes, it is
	 * not a data type that belongs to libMAD*/
	tempBuffer.start = start;
	tempBuffer.length = length;
  81a704:	d0a76004 	addi	r2,gp,-25216
  81a708:	14c00115 	stw	r19,4(r2)

	/* configure input, output, and error functions */
	mad_decoder_init(&decoder, this, input, 0 /* header */, 0 /* filter */,
  81a70c:	00c020b4 	movhi	r3,130
  81a710:	18e84504 	addi	r3,r3,-24300
  81a714:	008020b4 	movhi	r2,130
  81a718:	10a5f004 	addi	r2,r2,-26688
  81a71c:	a80b883a 	mov	r5,r21
  81a720:	018020b4 	movhi	r6,130
  81a724:	31a86304 	addi	r6,r6,-24180
  81a728:	000f883a 	mov	r7,zero
  81a72c:	d9000404 	addi	r4,sp,16
  81a730:	d8800115 	stw	r2,4(sp)
  81a734:	d8c00215 	stw	r3,8(sp)
	int result;

	/* initialize our private message structure -
	 * this structure is for our own purposes, it is
	 * not a data type that belongs to libMAD*/
	tempBuffer.start = start;
  81a738:	d5276015 	stw	r20,-25216(gp)
	tempBuffer.length = length;

	/* configure input, output, and error functions */
	mad_decoder_init(&decoder, this, input, 0 /* header */, 0 /* filter */,
  81a73c:	d8000015 	stw	zero,0(sp)
  81a740:	d8000315 	stw	zero,12(sp)
  81a744:	080e9440 	call	80e944 <mad_decoder_init>
			output, error, 0 /* message */);

	/* start decoding */
	result = mad_decoder_run(&decoder, MAD_DECODER_MODE_SYNC);
  81a748:	d9000404 	addi	r4,sp,16
  81a74c:	000b883a 	mov	r5,zero
  81a750:	080e9a00 	call	80e9a0 <mad_decoder_run>

	/* release the decoder */
	mad_decoder_finish(&decoder);
  81a754:	d9000404 	addi	r4,sp,16
  81a758:	080e9900 	call	80e990 <mad_decoder_finish>
	alt_up_sd_card_fclose(filePointer);
	printf("\nPreloading complete\n");

	decodeMP3(this, buf, tempBufferSize);
	return this;
}
  81a75c:	a805883a 	mov	r2,r21
  81a760:	dfc01817 	ldw	ra,96(sp)
  81a764:	dd801717 	ldw	r22,92(sp)
  81a768:	dd401617 	ldw	r21,88(sp)
  81a76c:	dd001517 	ldw	r20,84(sp)
  81a770:	dcc01417 	ldw	r19,80(sp)
  81a774:	dc801317 	ldw	r18,76(sp)
  81a778:	dc401217 	ldw	r17,72(sp)
  81a77c:	dc001117 	ldw	r16,68(sp)
  81a780:	dec01904 	addi	sp,sp,100
  81a784:	f800283a 	ret
	printf("Preloading mp3\n");
	filePointer = alt_up_sd_card_fopen(file, false);
	for (i = 0; i < tempBufferSize; i++) {
		buf[i] = alt_up_sd_card_read(filePointer);
		if (i % (1024 * 1024) == 0) {
			printf("%d MB | ", i / (1024 * 1024));
  81a788:	00800434 	movhi	r2,16
  81a78c:	10bfffc4 	addi	r2,r2,-1
  81a790:	808b883a 	add	r5,r16,r2
  81a794:	003fc506 	br	81a6ac <loadMP3Sound+0x154>
	decodedBufferSize = tempBufferSize * MP3_DECODE_MULTIPLIER;

	alt_up_sd_card_fclose(filePointer);
	printf("File Size: %d bytes\n", tempBufferSize);
	if (decodedBufferSize > MAX_CACHE_MEMORY) {
		alt_up_sd_card_fclose(filePointer);
  81a798:	9009883a 	mov	r4,r18
  81a79c:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
		printf("FILE size too big");
  81a7a0:	01002134 	movhi	r4,132
  81a7a4:	21398a04 	addi	r4,r4,-6616
  81a7a8:	08220680 	call	822068 <printf>
  81a7ac:	002b883a 	mov	r21,zero
  81a7b0:	003fea06 	br	81a75c <loadMP3Sound+0x204>
		exit(0);
	}

	printf("Preloading mp3\n");
	filePointer = alt_up_sd_card_fopen(file, false);
	for (i = 0; i < tempBufferSize; i++) {
  81a7b4:	14bfffcc 	andi	r18,r2,65535
  81a7b8:	94a0001c 	xori	r18,r18,32768
  81a7bc:	94a00004 	addi	r18,r18,-32768
  81a7c0:	003fcb06 	br	81a6f0 <loadMP3Sound+0x198>
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	if (!this)
		printf("Failed to allocate space for sound\n");
  81a7c4:	01002134 	movhi	r4,132
  81a7c8:	21394704 	addi	r4,r4,-6884
  81a7cc:	08221800 	call	822180 <puts>
  81a7d0:	003f9206 	br	81a61c <loadMP3Sound+0xc4>
	struct Sound* this = initSound(decodedBufferSize);
	allocateSoundBuffer(this, this->length);

	buf = malloc(tempBufferSize);
	if (!buf) {
		printf("Malloc failed\n");
  81a7d4:	01002134 	movhi	r4,132
  81a7d8:	21398f04 	addi	r4,r4,-6596
  81a7dc:	08221800 	call	822180 <puts>
		exit(0);
  81a7e0:	0009883a 	mov	r4,zero
  81a7e4:	08216500 	call	821650 <exit>

0081a7e8 <loadWavHeader>:
		startIndex++;
	}
	return offset;
}

struct Sound* loadWavHeader(int filePointer) {
  81a7e8:	defff904 	addi	sp,sp,-28
  81a7ec:	dc800215 	stw	r18,8(sp)
  81a7f0:	24bfffcc 	andi	r18,r4,65535
  81a7f4:	94a0001c 	xori	r18,r18,32768
  81a7f8:	dcc00315 	stw	r19,12(sp)
  81a7fc:	dc400115 	stw	r17,4(sp)
  81a800:	dc000015 	stw	r16,0(sp)
  81a804:	2027883a 	mov	r19,r4
  81a808:	94a00004 	addi	r18,r18,-32768
  81a80c:	0021883a 	mov	r16,zero
  81a810:	04400584 	movi	r17,22
  81a814:	dfc00615 	stw	ra,24(sp)
  81a818:	dd400515 	stw	r21,20(sp)
  81a81c:	dd000415 	stw	r20,16(sp)
  81a820:	00000106 	br	81a828 <loadWavHeader+0x40>

	return sound;
}

int readFileTilOffset(int filePointer, int startIndex, int offset) {
	while (startIndex < offset) {
  81a824:	84401526 	beq	r16,r17,81a87c <loadWavHeader+0x94>
		if (alt_up_sd_card_read(filePointer) < 0) {
  81a828:	9009883a 	mov	r4,r18
  81a82c:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  81a830:	10bfffcc 	andi	r2,r2,65535
  81a834:	10a0001c 	xori	r2,r2,32768
  81a838:	10a00004 	addi	r2,r2,-32768
			printf("read file invalid\n");
			return -1;
		}
		startIndex++;
  81a83c:	84000044 	addi	r16,r16,1
	return sound;
}

int readFileTilOffset(int filePointer, int startIndex, int offset) {
	while (startIndex < offset) {
		if (alt_up_sd_card_read(filePointer) < 0) {
  81a840:	103ff80e 	bge	r2,zero,81a824 <loadWavHeader+0x3c>
			printf("read file invalid\n");
  81a844:	01002134 	movhi	r4,132
  81a848:	21394204 	addi	r4,r4,-6904
  81a84c:	08221800 	call	822180 <puts>
  81a850:	0021883a 	mov	r16,zero
	int srcLength = (read / getSampleSizeInBytes(audioFormat)) / getNumChannels(audioFormat);
	printf("length: %u\n", srcLength);
	struct Sound* this = initSound(srcLength);
	this->audioFormat = audioFormat;
	return this;
}
  81a854:	8005883a 	mov	r2,r16
  81a858:	dfc00617 	ldw	ra,24(sp)
  81a85c:	dd400517 	ldw	r21,20(sp)
  81a860:	dd000417 	ldw	r20,16(sp)
  81a864:	dcc00317 	ldw	r19,12(sp)
  81a868:	dc800217 	ldw	r18,8(sp)
  81a86c:	dc400117 	ldw	r17,4(sp)
  81a870:	dc000017 	ldw	r16,0(sp)
  81a874:	dec00704 	addi	sp,sp,28
  81a878:	f800283a 	ret
	if((index = readFileTilOffset(filePointer, index, NUM_CHANNELS_OFFSET)) < 0) {
		return NULL;
	}

	int numChannels;
	if((numChannels = readInt(filePointer, 2, false)) < 0)
  81a87c:	9809883a 	mov	r4,r19
  81a880:	01400084 	movi	r5,2
  81a884:	000d883a 	mov	r6,zero
  81a888:	0819a140 	call	819a14 <readInt>
  81a88c:	1021883a 	mov	r16,r2
  81a890:	103fef16 	blt	r2,zero,81a850 <loadWavHeader+0x68>
		return NULL;
	index += 2;

	//Start reading the wav header
	int sampleRate;
	if((sampleRate = readInt(filePointer, 4, false)) < 0)
  81a894:	9809883a 	mov	r4,r19
  81a898:	01400104 	movi	r5,4
  81a89c:	000d883a 	mov	r6,zero
  81a8a0:	0819a140 	call	819a14 <readInt>
  81a8a4:	1023883a 	mov	r17,r2
  81a8a8:	103fe916 	blt	r2,zero,81a850 <loadWavHeader+0x68>
		return NULL;
	index += 4;
	int byteRate;
	if((byteRate = readInt(filePointer, 4, false)) < 0)
  81a8ac:	9809883a 	mov	r4,r19
  81a8b0:	01400104 	movi	r5,4
  81a8b4:	000d883a 	mov	r6,zero
  81a8b8:	0819a140 	call	819a14 <readInt>
  81a8bc:	102b883a 	mov	r21,r2
  81a8c0:	103fe316 	blt	r2,zero,81a850 <loadWavHeader+0x68>
	return sound;
}

int readFileTilOffset(int filePointer, int startIndex, int offset) {
	while (startIndex < offset) {
		if (alt_up_sd_card_read(filePointer) < 0) {
  81a8c4:	9009883a 	mov	r4,r18
  81a8c8:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  81a8cc:	10bfffcc 	andi	r2,r2,65535
  81a8d0:	10a0001c 	xori	r2,r2,32768
  81a8d4:	10a00004 	addi	r2,r2,-32768
  81a8d8:	103fda16 	blt	r2,zero,81a844 <loadWavHeader+0x5c>
  81a8dc:	9009883a 	mov	r4,r18
  81a8e0:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  81a8e4:	10bfffcc 	andi	r2,r2,65535
  81a8e8:	10a0001c 	xori	r2,r2,32768
  81a8ec:	10a00004 	addi	r2,r2,-32768
  81a8f0:	103fd416 	blt	r2,zero,81a844 <loadWavHeader+0x5c>
	index += 4;

	if((index = readFileTilOffset(filePointer, index, BITS_PER_SAMPLE_OFFSET)) < 0)
		return NULL;
	int sampleSizeInBits;
	if((sampleSizeInBits = readInt(filePointer, 2, false)) < 0)
  81a8f4:	9809883a 	mov	r4,r19
  81a8f8:	01400084 	movi	r5,2
  81a8fc:	000d883a 	mov	r6,zero
  81a900:	0819a140 	call	819a14 <readInt>
  81a904:	1029883a 	mov	r20,r2
  81a908:	103fd116 	blt	r2,zero,81a850 <loadWavHeader+0x68>
	return sound;
}

int readFileTilOffset(int filePointer, int startIndex, int offset) {
	while (startIndex < offset) {
		if (alt_up_sd_card_read(filePointer) < 0) {
  81a90c:	9009883a 	mov	r4,r18
  81a910:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  81a914:	10bfffcc 	andi	r2,r2,65535
  81a918:	10a0001c 	xori	r2,r2,32768
  81a91c:	10a00004 	addi	r2,r2,-32768
  81a920:	10005116 	blt	r2,zero,81aa68 <loadWavHeader+0x280>
  81a924:	9009883a 	mov	r4,r18
  81a928:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  81a92c:	10bfffcc 	andi	r2,r2,65535
  81a930:	10a0001c 	xori	r2,r2,32768
  81a934:	10a00004 	addi	r2,r2,-32768
  81a938:	10004b16 	blt	r2,zero,81aa68 <loadWavHeader+0x280>
  81a93c:	9009883a 	mov	r4,r18
  81a940:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  81a944:	10bfffcc 	andi	r2,r2,65535
  81a948:	10a0001c 	xori	r2,r2,32768
  81a94c:	10a00004 	addi	r2,r2,-32768
  81a950:	10004516 	blt	r2,zero,81aa68 <loadWavHeader+0x280>
  81a954:	9009883a 	mov	r4,r18
  81a958:	08305d80 	call	8305d8 <alt_up_sd_card_read>
  81a95c:	10bfffcc 	andi	r2,r2,65535
  81a960:	10a0001c 	xori	r2,r2,32768
  81a964:	10a00004 	addi	r2,r2,-32768
  81a968:	10003f16 	blt	r2,zero,81aa68 <loadWavHeader+0x280>

	if((index = readFileTilOffset(filePointer, index, DATA_LENGTH_OFFSET)) < 0)
		return NULL;

	struct AudioFormat* audioFormat = initAudioFormat(sampleRate,
			sampleSizeInBits, numChannels, byteRate);
  81a96c:	a80f883a 	mov	r7,r21
  81a970:	a00b883a 	mov	r5,r20
  81a974:	800d883a 	mov	r6,r16
  81a978:	8809883a 	mov	r4,r17
  81a97c:	08196240 	call	819624 <initAudioFormat>
  81a980:	1029883a 	mov	r20,r2
	int read = readInt(filePointer, 4, false);
  81a984:	01400104 	movi	r5,4
  81a988:	000d883a 	mov	r6,zero
  81a98c:	9809883a 	mov	r4,r19
  81a990:	0819a140 	call	819a14 <readInt>
	int srcLength = (read / getSampleSizeInBytes(audioFormat)) / getNumChannels(audioFormat);
  81a994:	a009883a 	mov	r4,r20
	if((index = readFileTilOffset(filePointer, index, DATA_LENGTH_OFFSET)) < 0)
		return NULL;

	struct AudioFormat* audioFormat = initAudioFormat(sampleRate,
			sampleSizeInBits, numChannels, byteRate);
	int read = readInt(filePointer, 4, false);
  81a998:	1021883a 	mov	r16,r2
	int srcLength = (read / getSampleSizeInBytes(audioFormat)) / getNumChannels(audioFormat);
  81a99c:	08195f80 	call	8195f8 <getSampleSizeInBytes>
  81a9a0:	a009883a 	mov	r4,r20
  81a9a4:	1023883a 	mov	r17,r2
  81a9a8:	08196140 	call	819614 <getNumChannels>
  81a9ac:	1025883a 	mov	r18,r2
  81a9b0:	8446b03a 	or	r3,r16,r17
  81a9b4:	008003c4 	movi	r2,15
  81a9b8:	10c02236 	bltu	r2,r3,81aa44 <loadWavHeader+0x25c>
  81a9bc:	8004913a 	slli	r2,r16,4
  81a9c0:	00c02134 	movhi	r3,132
  81a9c4:	18fbb104 	addi	r3,r3,-4412
  81a9c8:	1444b03a 	or	r2,r2,r17
  81a9cc:	10c5883a 	add	r2,r2,r3
  81a9d0:	11000003 	ldbu	r4,0(r2)
  81a9d4:	2486b03a 	or	r3,r4,r18
  81a9d8:	008003c4 	movi	r2,15
  81a9dc:	10c01e36 	bltu	r2,r3,81aa58 <loadWavHeader+0x270>
  81a9e0:	2004913a 	slli	r2,r4,4
  81a9e4:	00c02134 	movhi	r3,132
  81a9e8:	18fbb104 	addi	r3,r3,-4412
  81a9ec:	1484b03a 	or	r2,r2,r18
  81a9f0:	10c5883a 	add	r2,r2,r3
  81a9f4:	14400003 	ldbu	r17,0(r2)
	printf("length: %u\n", srcLength);
  81a9f8:	01002134 	movhi	r4,132
  81a9fc:	2139a004 	addi	r4,r4,-6528
  81aa00:	880b883a 	mov	r5,r17
  81aa04:	08220680 	call	822068 <printf>
		printf("Failed to allocate sound buffer\n");
	clearSoundBuffer(this);
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
  81aa08:	01000a04 	movi	r4,40
  81aa0c:	08216fc0 	call	8216fc <malloc>
  81aa10:	1021883a 	mov	r16,r2
	if (!this)
  81aa14:	10001926 	beq	r2,zero,81aa7c <loadWavHeader+0x294>
		printf("Failed to allocate space for sound\n");
	this->length = length;
	this->position = 0;
	this->buffer = NULL;
	this->volume = 1;
  81aa18:	008fe034 	movhi	r2,16256
  81aa1c:	80800815 	stw	r2,32(r16)
	this->fadeVolume = 1;
  81aa20:	80800915 	stw	r2,36(r16)
	this->inFadePosition = 0;
	this->outFadePosition = this->length;
  81aa24:	84400215 	stw	r17,8(r16)
			sampleSizeInBits, numChannels, byteRate);
	int read = readInt(filePointer, 4, false);
	int srcLength = (read / getSampleSizeInBytes(audioFormat)) / getNumChannels(audioFormat);
	printf("length: %u\n", srcLength);
	struct Sound* this = initSound(srcLength);
	this->audioFormat = audioFormat;
  81aa28:	85000015 	stw	r20,0(r16)

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	if (!this)
		printf("Failed to allocate space for sound\n");
	this->length = length;
  81aa2c:	84400515 	stw	r17,20(r16)
	this->position = 0;
  81aa30:	80000315 	stw	zero,12(r16)
	this->buffer = NULL;
  81aa34:	80000715 	stw	zero,28(r16)
	this->volume = 1;
	this->fadeVolume = 1;
	this->inFadePosition = 0;
  81aa38:	80000115 	stw	zero,4(r16)
	this->outFadePosition = this->length;
	this->loading_pos = 0;
  81aa3c:	80000415 	stw	zero,16(r16)
  81aa40:	003f8406 	br	81a854 <loadWavHeader+0x6c>
		return NULL;

	struct AudioFormat* audioFormat = initAudioFormat(sampleRate,
			sampleSizeInBits, numChannels, byteRate);
	int read = readInt(filePointer, 4, false);
	int srcLength = (read / getSampleSizeInBytes(audioFormat)) / getNumChannels(audioFormat);
  81aa44:	8009883a 	mov	r4,r16
  81aa48:	880b883a 	mov	r5,r17
  81aa4c:	0820b480 	call	820b48 <__divsi3>
  81aa50:	1009883a 	mov	r4,r2
  81aa54:	003fdf06 	br	81a9d4 <loadWavHeader+0x1ec>
  81aa58:	900b883a 	mov	r5,r18
  81aa5c:	0820b480 	call	820b48 <__divsi3>
  81aa60:	1023883a 	mov	r17,r2
  81aa64:	003fe406 	br	81a9f8 <loadWavHeader+0x210>
}

int readFileTilOffset(int filePointer, int startIndex, int offset) {
	while (startIndex < offset) {
		if (alt_up_sd_card_read(filePointer) < 0) {
			printf("read file invalid\n");
  81aa68:	01002134 	movhi	r4,132
  81aa6c:	21394204 	addi	r4,r4,-6904
  81aa70:	08221800 	call	822180 <puts>
  81aa74:	0021883a 	mov	r16,zero
  81aa78:	003f7606 	br	81a854 <loadWavHeader+0x6c>
}

struct Sound* initSound(unsigned int length) {
	struct Sound* this = (struct Sound*) malloc(sizeof(struct Sound));
	if (!this)
		printf("Failed to allocate space for sound\n");
  81aa7c:	01002134 	movhi	r4,132
  81aa80:	21394704 	addi	r4,r4,-6884
  81aa84:	08221800 	call	822180 <puts>
  81aa88:	003fe306 	br	81aa18 <loadWavHeader+0x230>

0081aa8c <loadWavSound>:
 *
 * @param id - id of the sound to load
 * @param buffer - buffer to save the sound wave into
 * return NULL if failed to read the wave file
 */
struct Sound* loadWavSound(char * filename) {
  81aa8c:	defffc04 	addi	sp,sp,-16
  81aa90:	dc800215 	stw	r18,8(sp)
	struct Sound* sound;
	SDIO_lock = 1;
	int filePointer = alt_up_sd_card_fopen(filename, false);
  81aa94:	000b883a 	mov	r5,zero
 * @param buffer - buffer to save the sound wave into
 * return NULL if failed to read the wave file
 */
struct Sound* loadWavSound(char * filename) {
	struct Sound* sound;
	SDIO_lock = 1;
  81aa98:	04800044 	movi	r18,1
 *
 * @param id - id of the sound to load
 * @param buffer - buffer to save the sound wave into
 * return NULL if failed to read the wave file
 */
struct Sound* loadWavSound(char * filename) {
  81aa9c:	dc000015 	stw	r16,0(sp)
  81aaa0:	dfc00315 	stw	ra,12(sp)
  81aaa4:	dc400115 	stw	r17,4(sp)
	struct Sound* sound;
	SDIO_lock = 1;
  81aaa8:	d4a75a15 	stw	r18,-25240(gp)
	int filePointer = alt_up_sd_card_fopen(filename, false);
  81aaac:	08324500 	call	832450 <alt_up_sd_card_fopen>
  81aab0:	143fffcc 	andi	r16,r2,65535
  81aab4:	8420001c 	xori	r16,r16,32768
  81aab8:	84200004 	addi	r16,r16,-32768

	if (filePointer < 0) {
  81aabc:	80003016 	blt	r16,zero,81ab80 <loadWavSound+0xf4>
		alt_up_sd_card_fclose(filePointer); //close the file
		printf("sound file open failed\n");
		return NULL;
	}

	sound = loadWavHeader(filePointer);
  81aac0:	8009883a 	mov	r4,r16
  81aac4:	081a7e80 	call	81a7e8 <loadWavHeader>
  81aac8:	1023883a 	mov	r17,r2
	if (!sound) {
  81aacc:	10003326 	beq	r2,zero,81ab9c <loadWavSound+0x110>
		alt_up_sd_card_fclose(filePointer);
		return NULL;
	}

	if(loadSoundBuffer(sound, filePointer) != 0) {
  81aad0:	1009883a 	mov	r4,r2
  81aad4:	800b883a 	mov	r5,r16
  81aad8:	0819f780 	call	819f78 <loadSoundBuffer>
  81aadc:	1000241e 	bne	r2,zero,81ab70 <loadWavSound+0xe4>
		alt_up_sd_card_fclose(filePointer);
		return NULL;
	}

	alt_up_sd_card_fclose(filePointer);
  81aae0:	8009883a 	mov	r4,r16
  81aae4:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
 * @param this - sound to change values of
 * @param bitsPerSampleTo - Number of bits per sample to convert to
 */
void changeBitsPerSample(struct Sound* this, int bitsPerSampleTo) {
	if(this == NULL) return;
	int bitsPerSampleFrom = getSampleSizeInBits(this->audioFormat);
  81aae8:	89000017 	ldw	r4,0(r17)
		alt_up_sd_card_fclose(filePointer);
		return NULL;
	}

	alt_up_sd_card_fclose(filePointer);
	SDIO_lock = 0;
  81aaec:	d0275a15 	stw	zero,-25240(gp)
 * @param this - sound to change values of
 * @param bitsPerSampleTo - Number of bits per sample to convert to
 */
void changeBitsPerSample(struct Sound* this, int bitsPerSampleTo) {
	if(this == NULL) return;
	int bitsPerSampleFrom = getSampleSizeInBits(this->audioFormat);
  81aaf0:	08195f00 	call	8195f0 <getSampleSizeInBits>
	if (bitsPerSampleTo == bitsPerSampleFrom)
  81aaf4:	01000604 	movi	r4,24
 * @param this - sound to change values of
 * @param bitsPerSampleTo - Number of bits per sample to convert to
 */
void changeBitsPerSample(struct Sound* this, int bitsPerSampleTo) {
	if(this == NULL) return;
	int bitsPerSampleFrom = getSampleSizeInBits(this->audioFormat);
  81aaf8:	1007883a 	mov	r3,r2
	if (bitsPerSampleTo == bitsPerSampleFrom)
  81aafc:	11001226 	beq	r2,r4,81ab48 <loadWavSound+0xbc>
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  81ab00:	88800517 	ldw	r2,20(r17)
	int bitsPerSampleFrom = getSampleSizeInBits(this->audioFormat);
	if (bitsPerSampleTo == bitsPerSampleFrom)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;
  81ab04:	20cbc83a 	sub	r5,r4,r3

	for (i = 0; i < this->length; i++) {
  81ab08:	10000f26 	beq	r2,zero,81ab48 <loadWavSound+0xbc>
  81ab0c:	91402616 	blt	r18,r5,81aba8 <loadWavSound+0x11c>
  81ab10:	89c00717 	ldw	r7,28(r17)
  81ab14:	0151c83a 	sub	r8,zero,r5
  81ab18:	000d883a 	mov	r6,zero
  81ab1c:	000b883a 	mov	r5,zero
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
  81ab20:	2945883a 	add	r2,r5,r5
  81ab24:	1085883a 	add	r2,r2,r2
  81ab28:	11c5883a 	add	r2,r2,r7
  81ab2c:	10c00017 	ldw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  81ab30:	31400044 	addi	r5,r6,1
  81ab34:	280d883a 	mov	r6,r5
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
		else
			this->buffer[i] = this->buffer[i] >> -numToShift;
  81ab38:	1a07d83a 	sra	r3,r3,r8
  81ab3c:	10c00015 	stw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  81ab40:	89000517 	ldw	r4,20(r17)
  81ab44:	293ff636 	bltu	r5,r4,81ab20 <loadWavSound+0x94>

	alt_up_sd_card_fclose(filePointer);
	SDIO_lock = 0;

	changeBitsPerSample(sound, DEFAULT_BITS_PER_SAMPLE);
	printf("Sound loading complete\n");
  81ab48:	01002134 	movhi	r4,132
  81ab4c:	2139a904 	addi	r4,r4,-6492
  81ab50:	08221800 	call	822180 <puts>

	return sound;
}
  81ab54:	8805883a 	mov	r2,r17
  81ab58:	dfc00317 	ldw	ra,12(sp)
  81ab5c:	dc800217 	ldw	r18,8(sp)
  81ab60:	dc400117 	ldw	r17,4(sp)
  81ab64:	dc000017 	ldw	r16,0(sp)
  81ab68:	dec00404 	addi	sp,sp,16
  81ab6c:	f800283a 	ret
		alt_up_sd_card_fclose(filePointer);
		return NULL;
	}

	if(loadSoundBuffer(sound, filePointer) != 0) {
		alt_up_sd_card_fclose(filePointer);
  81ab70:	8009883a 	mov	r4,r16
  81ab74:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  81ab78:	0023883a 	mov	r17,zero
  81ab7c:	003ff506 	br	81ab54 <loadWavSound+0xc8>
	struct Sound* sound;
	SDIO_lock = 1;
	int filePointer = alt_up_sd_card_fopen(filename, false);

	if (filePointer < 0) {
		alt_up_sd_card_fclose(filePointer); //close the file
  81ab80:	8009883a 	mov	r4,r16
  81ab84:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
		printf("sound file open failed\n");
  81ab88:	01002134 	movhi	r4,132
  81ab8c:	2139a304 	addi	r4,r4,-6516
  81ab90:	08221800 	call	822180 <puts>
  81ab94:	0023883a 	mov	r17,zero
  81ab98:	003fee06 	br	81ab54 <loadWavSound+0xc8>
		return NULL;
	}

	sound = loadWavHeader(filePointer);
	if (!sound) {
		alt_up_sd_card_fclose(filePointer);
  81ab9c:	8009883a 	mov	r4,r16
  81aba0:	082e9680 	call	82e968 <alt_up_sd_card_fclose>
  81aba4:	003feb06 	br	81ab54 <loadWavSound+0xc8>
  81aba8:	89c00717 	ldw	r7,28(r17)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  81abac:	0011883a 	mov	r8,zero
  81abb0:	000d883a 	mov	r6,zero
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
  81abb4:	3185883a 	add	r2,r6,r6
  81abb8:	1085883a 	add	r2,r2,r2
  81abbc:	11c5883a 	add	r2,r2,r7
  81abc0:	10c00017 	ldw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  81abc4:	41800044 	addi	r6,r8,1
  81abc8:	3011883a 	mov	r8,r6
		if (numToShift > 1)
			this->buffer[i] = this->buffer[i] << numToShift;
  81abcc:	1946983a 	sll	r3,r3,r5
  81abd0:	10c00015 	stw	r3,0(r2)
		return;

	int i;
	int numToShift = bitsPerSampleTo - bitsPerSampleFrom;

	for (i = 0; i < this->length; i++) {
  81abd4:	89000517 	ldw	r4,20(r17)
  81abd8:	313ff636 	bltu	r6,r4,81abb4 <loadWavSound+0x128>
  81abdc:	003fda06 	br	81ab48 <loadWavSound+0xbc>

0081abe0 <loadSound>:
	struct Sound* this = initSound(srcLength);
	this->audioFormat = audioFormat;
	return this;
}

struct Sound* loadSound(struct Song* this) {
  81abe0:	defffd04 	addi	sp,sp,-12
  81abe4:	dc400115 	stw	r17,4(sp)
  81abe8:	dc000015 	stw	r16,0(sp)
	if (this == NULL)
		return NULL;
	if (strcmp(this->ext, "MP3") == 0)
  81abec:	24400604 	addi	r17,r4,24
	struct Sound* this = initSound(srcLength);
	this->audioFormat = audioFormat;
	return this;
}

struct Sound* loadSound(struct Song* this) {
  81abf0:	2021883a 	mov	r16,r4
  81abf4:	dfc00215 	stw	ra,8(sp)
	if (this == NULL)
		return NULL;
	if (strcmp(this->ext, "MP3") == 0)
  81abf8:	01402134 	movhi	r5,132
  81abfc:	2979af04 	addi	r5,r5,-6468
  81ac00:	8809883a 	mov	r4,r17
	this->audioFormat = audioFormat;
	return this;
}

struct Sound* loadSound(struct Song* this) {
	if (this == NULL)
  81ac04:	80000e26 	beq	r16,zero,81ac40 <loadSound+0x60>
		return NULL;
	if (strcmp(this->ext, "MP3") == 0)
  81ac08:	0822cc80 	call	822cc8 <strcmp>
		return loadMP3Sound(this->song_name);
	else if (strcmp(this->ext, "WAV") == 0)
  81ac0c:	8809883a 	mov	r4,r17
  81ac10:	01402134 	movhi	r5,132
  81ac14:	2979b004 	addi	r5,r5,-6464
}

struct Sound* loadSound(struct Song* this) {
	if (this == NULL)
		return NULL;
	if (strcmp(this->ext, "MP3") == 0)
  81ac18:	1000061e 	bne	r2,zero,81ac34 <loadSound+0x54>
		return loadMP3Sound(this->song_name);
  81ac1c:	81000104 	addi	r4,r16,4
	else if (strcmp(this->ext, "WAV") == 0)
		return loadWavSound(this->song_name);
	return NULL;
}
  81ac20:	dfc00217 	ldw	ra,8(sp)
  81ac24:	dc400117 	ldw	r17,4(sp)
  81ac28:	dc000017 	ldw	r16,0(sp)
  81ac2c:	dec00304 	addi	sp,sp,12

struct Sound* loadSound(struct Song* this) {
	if (this == NULL)
		return NULL;
	if (strcmp(this->ext, "MP3") == 0)
		return loadMP3Sound(this->song_name);
  81ac30:	081a5581 	jmpi	81a558 <loadMP3Sound>
	else if (strcmp(this->ext, "WAV") == 0)
  81ac34:	0822cc80 	call	822cc8 <strcmp>
		return loadWavSound(this->song_name);
  81ac38:	81000104 	addi	r4,r16,4
struct Sound* loadSound(struct Song* this) {
	if (this == NULL)
		return NULL;
	if (strcmp(this->ext, "MP3") == 0)
		return loadMP3Sound(this->song_name);
	else if (strcmp(this->ext, "WAV") == 0)
  81ac3c:	10000626 	beq	r2,zero,81ac58 <loadSound+0x78>
		return loadWavSound(this->song_name);
	return NULL;
}
  81ac40:	0005883a 	mov	r2,zero
  81ac44:	dfc00217 	ldw	ra,8(sp)
  81ac48:	dc400117 	ldw	r17,4(sp)
  81ac4c:	dc000017 	ldw	r16,0(sp)
  81ac50:	dec00304 	addi	sp,sp,12
  81ac54:	f800283a 	ret
  81ac58:	dfc00217 	ldw	ra,8(sp)
  81ac5c:	dc400117 	ldw	r17,4(sp)
  81ac60:	dc000017 	ldw	r16,0(sp)
  81ac64:	dec00304 	addi	sp,sp,12
	if (this == NULL)
		return NULL;
	if (strcmp(this->ext, "MP3") == 0)
		return loadMP3Sound(this->song_name);
	else if (strcmp(this->ext, "WAV") == 0)
		return loadWavSound(this->song_name);
  81ac68:	081aa8c1 	jmpi	81aa8c <loadWavSound>

0081ac6c <loadToSoundBuffer>:
	}
}
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
  81ac6c:	defff604 	addi	sp,sp,-40
  81ac70:	ddc00715 	stw	r23,28(sp)
		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  81ac74:	d5e75917 	ldw	r23,-25244(gp)
  81ac78:	008000b4 	movhi	r2,2
  81ac7c:	10b08104 	addi	r2,r2,-15868
	}
}
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
  81ac80:	df000815 	stw	fp,32(sp)
  81ac84:	dd800615 	stw	r22,24(sp)
  81ac88:	dd000415 	stw	r20,16(sp)
  81ac8c:	b8b9883a 	add	fp,r23,r2
  81ac90:	2029883a 	mov	r20,r4
		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  81ac94:	002d883a 	mov	r22,zero
	}
}
/*
 * Load sound's 96 samples to mix buffer
 */
void loadToSoundBuffer(struct Sound* sound) {
  81ac98:	dfc00915 	stw	ra,36(sp)
  81ac9c:	dd400515 	stw	r21,20(sp)
  81aca0:	dcc00315 	stw	r19,12(sp)
  81aca4:	dc800215 	stw	r18,8(sp)
  81aca8:	dc400115 	stw	r17,4(sp)
  81acac:	dc000015 	stw	r16,0(sp)
  81acb0:	00001906 	br	81ad18 <loadToSoundBuffer+0xac>
		}

		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  81acb4:	e4000017 	ldw	r16,0(fp)
  81acb8:	a4400917 	ldw	r17,36(r20)
  81acbc:	081f8d00 	call	81f8d0 <__floatsisf>
  81acc0:	84001824 	muli	r16,r16,96
  81acc4:	1009883a 	mov	r4,r2
  81acc8:	880b883a 	mov	r5,r17
  81accc:	85a1883a 	add	r16,r16,r22
  81acd0:	8421883a 	add	r16,r16,r16
  81acd4:	081f4140 	call	81f414 <__mulsf3>
  81acd8:	8421883a 	add	r16,r16,r16
  81acdc:	85e1883a 	add	r16,r16,r23
  81ace0:	1009883a 	mov	r4,r2
  81ace4:	081f9680 	call	81f968 <__fixsfsi>
  81ace8:	80c00017 	ldw	r3,0(r16)
  81acec:	01004034 	movhi	r4,256
  81acf0:	2085c83a 	sub	r2,r4,r2
  81acf4:	213fffc4 	addi	r4,r4,-1
  81acf8:	1104703a 	and	r2,r2,r4
  81acfc:	1887883a 	add	r3,r3,r2
  81ad00:	80c00015 	stw	r3,0(r16)
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		}
		sound->position++;
  81ad04:	a8c00044 	addi	r3,r21,1
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81ad08:	b5800044 	addi	r22,r22,1
  81ad0c:	00801804 	movi	r2,96
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		}
		sound->position++;
  81ad10:	a0c00315 	stw	r3,12(r20)
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81ad14:	b0803b26 	beq	r22,r2,81ae04 <loadToSoundBuffer+0x198>
		if(sound->position >= sound->length) return;
  81ad18:	a5400317 	ldw	r21,12(r20)
  81ad1c:	a0800517 	ldw	r2,20(r20)
  81ad20:	a880382e 	bgeu	r21,r2,81ae04 <loadToSoundBuffer+0x198>

		if (sound->position > sound->outFadePosition) {
  81ad24:	a0800217 	ldw	r2,8(r20)
  81ad28:	15400f2e 	bgeu	r2,r21,81ad68 <loadToSoundBuffer+0xfc>
			sound->fadeVolume *= 0.9999;
  81ad2c:	a1000917 	ldw	r4,36(r20)
  81ad30:	081f9fc0 	call	81f9fc <__extendsfdf2>
  81ad34:	02123a74 	movhi	r8,18665
  81ad38:	4229c784 	addi	r8,r8,-22754
  81ad3c:	024ffc34 	movhi	r9,16368
  81ad40:	4a7fcb84 	addi	r9,r9,-210
  81ad44:	180b883a 	mov	r5,r3
  81ad48:	480f883a 	mov	r7,r9
  81ad4c:	400d883a 	mov	r6,r8
  81ad50:	1009883a 	mov	r4,r2
  81ad54:	08200140 	call	820014 <__muldf3>
  81ad58:	180b883a 	mov	r5,r3
  81ad5c:	1009883a 	mov	r4,r2
  81ad60:	0820a580 	call	820a58 <__truncdfsf2>
  81ad64:	a0800915 	stw	r2,36(r20)
		}

		data = sound->buffer[sound->position];
  81ad68:	a0c00717 	ldw	r3,28(r20)
  81ad6c:	ad45883a 	add	r2,r21,r21
  81ad70:	1085883a 	add	r2,r2,r2
  81ad74:	10c5883a 	add	r2,r2,r3
  81ad78:	14c00017 	ldw	r19,0(r2)
		if(data != 0) {
  81ad7c:	983fe126 	beq	r19,zero,81ad04 <loadToSoundBuffer+0x98>
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  81ad80:	00804034 	movhi	r2,256
  81ad84:	14c9c83a 	sub	r4,r2,r19
  81ad88:	10bfffc4 	addi	r2,r2,-1
  81ad8c:	2088703a 	and	r4,r4,r2
			sound->fadeVolume *= 0.9999;
		}

		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
  81ad90:	00802034 	movhi	r2,128
  81ad94:	10bfffc4 	addi	r2,r2,-1
  81ad98:	14ffc636 	bltu	r2,r19,81acb4 <loadToSoundBuffer+0x48>
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  81ad9c:	e4000017 	ldw	r16,0(fp)
  81ada0:	a4800917 	ldw	r18,36(r20)
  81ada4:	84001824 	muli	r16,r16,96
  81ada8:	85a1883a 	add	r16,r16,r22
  81adac:	8421883a 	add	r16,r16,r16
  81adb0:	8421883a 	add	r16,r16,r16
  81adb4:	85e1883a 	add	r16,r16,r23
  81adb8:	81000017 	ldw	r4,0(r16)
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81adbc:	b5800044 	addi	r22,r22,1
		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  81adc0:	081fa500 	call	81fa50 <__floatunsisf>
  81adc4:	9809883a 	mov	r4,r19
  81adc8:	1023883a 	mov	r17,r2
  81adcc:	081fa500 	call	81fa50 <__floatunsisf>
  81add0:	1009883a 	mov	r4,r2
  81add4:	900b883a 	mov	r5,r18
  81add8:	081f4140 	call	81f414 <__mulsf3>
  81addc:	100b883a 	mov	r5,r2
  81ade0:	8809883a 	mov	r4,r17
  81ade4:	081f3b00 	call	81f3b0 <__addsf3>
  81ade8:	1009883a 	mov	r4,r2
  81adec:	081f0ec0 	call	81f0ec <__fixunssfsi>
  81adf0:	80800015 	stw	r2,0(r16)
		}
		sound->position++;
  81adf4:	a8c00044 	addi	r3,r21,1
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81adf8:	00801804 	movi	r2,96
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		}
		sound->position++;
  81adfc:	a0c00315 	stw	r3,12(r20)
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81ae00:	b0bfc51e 	bne	r22,r2,81ad18 <loadToSoundBuffer+0xac>
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		}
		sound->position++;
	}
}
  81ae04:	dfc00917 	ldw	ra,36(sp)
  81ae08:	df000817 	ldw	fp,32(sp)
  81ae0c:	ddc00717 	ldw	r23,28(sp)
  81ae10:	dd800617 	ldw	r22,24(sp)
  81ae14:	dd400517 	ldw	r21,20(sp)
  81ae18:	dd000417 	ldw	r20,16(sp)
  81ae1c:	dcc00317 	ldw	r19,12(sp)
  81ae20:	dc800217 	ldw	r18,8(sp)
  81ae24:	dc400117 	ldw	r17,4(sp)
  81ae28:	dc000017 	ldw	r16,0(sp)
  81ae2c:	dec00a04 	addi	sp,sp,40
  81ae30:	f800283a 	ret

0081ae34 <negativeToPositive>:

		clearIndexBuffer(soundMixer->endIndex);
	}
}

int negativeToPositive(int value) {
  81ae34:	00804034 	movhi	r2,256
  81ae38:	1105c83a 	sub	r2,r2,r4
	return (0xFFFFFF - (value - 1)) & 0xFFFFFF;
}
  81ae3c:	00c04034 	movhi	r3,256
  81ae40:	18ffffc4 	addi	r3,r3,-1
  81ae44:	10c4703a 	and	r2,r2,r3
  81ae48:	f800283a 	ret

0081ae4c <positiveToNegative>:
int positiveToNegative(int value) {
  81ae4c:	00804034 	movhi	r2,256
  81ae50:	1105c83a 	sub	r2,r2,r4
	return ((0xFFFFFF - value) + 1) & 0xFFFFFF;
}
  81ae54:	00c04034 	movhi	r3,256
  81ae58:	18ffffc4 	addi	r3,r3,-1
  81ae5c:	10c4703a 	and	r2,r2,r3
  81ae60:	f800283a 	ret

0081ae64 <incIndex>:
void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
}

void incIndex() {
	soundMixer->currIndex++;
  81ae64:	d1a75917 	ldw	r6,-25244(gp)
  81ae68:	008000b4 	movhi	r2,2
  81ae6c:	10b08004 	addi	r2,r2,-15872
	if(soundMixer->currIndex > 299) {
		soundMixer->currIndex = 0;
	}
	soundMixer->indexSize--;
  81ae70:	00c000b4 	movhi	r3,2
  81ae74:	18f08204 	addi	r3,r3,-15864
void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
}

void incIndex() {
	soundMixer->currIndex++;
  81ae78:	308b883a 	add	r5,r6,r2
  81ae7c:	28800017 	ldw	r2,0(r5)
	if(soundMixer->currIndex > 299) {
		soundMixer->currIndex = 0;
	}
	soundMixer->indexSize--;
  81ae80:	30c9883a 	add	r4,r6,r3
void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
}

void incIndex() {
	soundMixer->currIndex++;
  81ae84:	10800044 	addi	r2,r2,1
  81ae88:	28800015 	stw	r2,0(r5)
	if(soundMixer->currIndex > 299) {
  81ae8c:	28c00017 	ldw	r3,0(r5)
  81ae90:	00804ac4 	movi	r2,299
  81ae94:	10c0010e 	bge	r2,r3,81ae9c <incIndex+0x38>
		soundMixer->currIndex = 0;
  81ae98:	28000015 	stw	zero,0(r5)
	}
	soundMixer->indexSize--;
  81ae9c:	20800017 	ldw	r2,0(r4)
  81aea0:	10bfffc4 	addi	r2,r2,-1
  81aea4:	20800015 	stw	r2,0(r4)
	if(soundMixer->indexSize <= 0 && db.total_songs_playing <= 1) {
  81aea8:	20c00017 	ldw	r3,0(r4)
  81aeac:	00c0010e 	bge	zero,r3,81aeb4 <incIndex+0x50>
  81aeb0:	f800283a 	ret
  81aeb4:	00802134 	movhi	r2,132
  81aeb8:	108a6204 	addi	r2,r2,10632
  81aebc:	1100a617 	ldw	r4,664(r2)
		soundMixer->currIndex = soundMixer->endIndex;
  81aec0:	00c000b4 	movhi	r3,2
  81aec4:	18f08104 	addi	r3,r3,-15868
  81aec8:	30cd883a 	add	r6,r6,r3
	soundMixer->currIndex++;
	if(soundMixer->currIndex > 299) {
		soundMixer->currIndex = 0;
	}
	soundMixer->indexSize--;
	if(soundMixer->indexSize <= 0 && db.total_songs_playing <= 1) {
  81aecc:	00c00044 	movi	r3,1
  81aed0:	193ff716 	blt	r3,r4,81aeb0 <incIndex+0x4c>
		soundMixer->currIndex = soundMixer->endIndex;
  81aed4:	30800017 	ldw	r2,0(r6)
  81aed8:	28800015 	stw	r2,0(r5)
		disableAudioDeviceController();
  81aedc:	08194f41 	jmpi	8194f4 <disableAudioDeviceController>

0081aee0 <clearIndexBuffer>:
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81aee0:	01806004 	movi	r6,384
  81aee4:	2185383a 	mul	r2,r4,r6
  81aee8:	d1275917 	ldw	r4,-25244(gp)
  81aeec:	000b883a 	mov	r5,zero
  81aef0:	1109883a 	add	r4,r2,r4
  81aef4:	0821fd01 	jmpi	821fd0 <memset>

0081aef8 <setGlobalVolume>:
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
	clearSoundMixer();
}

void setGlobalVolume(float volume) {
  81aef8:	defffb04 	addi	sp,sp,-20
  81aefc:	dc400115 	stw	r17,4(sp)
	db.songs[db.curr_song_id]->volume = volume;
  81af00:	04402134 	movhi	r17,132
  81af04:	8c4a6204 	addi	r17,r17,10632
  81af08:	88800017 	ldw	r2,0(r17)
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
	clearSoundMixer();
}

void setGlobalVolume(float volume) {
  81af0c:	dcc00315 	stw	r19,12(sp)
	db.songs[db.curr_song_id]->volume = volume;
  81af10:	04c03604 	movi	r19,216
  81af14:	1085883a 	add	r2,r2,r2
  81af18:	1085883a 	add	r2,r2,r2
  81af1c:	1445883a 	add	r2,r2,r17
  81af20:	14c5883a 	add	r2,r2,r19
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
	clearSoundMixer();
}

void setGlobalVolume(float volume) {
  81af24:	dc000015 	stw	r16,0(sp)
	db.songs[db.curr_song_id]->volume = volume;
  81af28:	14000017 	ldw	r16,0(r2)
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
	clearSoundMixer();
}

void setGlobalVolume(float volume) {
  81af2c:	dfc00415 	stw	ra,16(sp)
  81af30:	dc800215 	stw	r18,8(sp)
  81af34:	2025883a 	mov	r18,r4
	db.songs[db.curr_song_id]->volume = volume;
  81af38:	081f9680 	call	81f968 <__fixsfsi>
  81af3c:	80800715 	stw	r2,28(r16)
	setSoundVolume(db.songs[db.curr_song_id]->sound, (float)volume/100.0);
  81af40:	88800017 	ldw	r2,0(r17)
  81af44:	9009883a 	mov	r4,r18
  81af48:	0150b234 	movhi	r5,17096
  81af4c:	1085883a 	add	r2,r2,r2
  81af50:	1085883a 	add	r2,r2,r2
  81af54:	1445883a 	add	r2,r2,r17
  81af58:	14c5883a 	add	r2,r2,r19
  81af5c:	14000017 	ldw	r16,0(r2)
  81af60:	081f5f40 	call	81f5f4 <__divsf3>
  81af64:	100b883a 	mov	r5,r2
  81af68:	81000017 	ldw	r4,0(r16)
}
  81af6c:	dfc00417 	ldw	ra,16(sp)
  81af70:	dcc00317 	ldw	r19,12(sp)
  81af74:	dc800217 	ldw	r18,8(sp)
  81af78:	dc400117 	ldw	r17,4(sp)
  81af7c:	dc000017 	ldw	r16,0(sp)
  81af80:	dec00504 	addi	sp,sp,20
	clearSoundMixer();
}

void setGlobalVolume(float volume) {
	db.songs[db.curr_song_id]->volume = volume;
	setSoundVolume(db.songs[db.curr_song_id]->sound, (float)volume/100.0);
  81af84:	08197841 	jmpi	819784 <setSoundVolume>

0081af88 <clearSoundMixer>:
}

void clearSoundMixer() {
  81af88:	defffd04 	addi	sp,sp,-12
  81af8c:	dc400115 	stw	r17,4(sp)
  81af90:	dc000015 	stw	r16,0(sp)
  81af94:	dfc00215 	stw	ra,8(sp)
  81af98:	0021883a 	mov	r16,zero
  81af9c:	04404ac4 	movi	r17,299
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81afa0:	80806024 	muli	r2,r16,384
  81afa4:	d1275917 	ldw	r4,-25244(gp)
	setSoundVolume(db.songs[db.curr_song_id]->sound, (float)volume/100.0);
}

void clearSoundMixer() {
	int i;
	for(i = 0; i < 299; i++) {
  81afa8:	84000044 	addi	r16,r16,1
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81afac:	000b883a 	mov	r5,zero
  81afb0:	1109883a 	add	r4,r2,r4
  81afb4:	01806004 	movi	r6,384
  81afb8:	0821fd00 	call	821fd0 <memset>
	setSoundVolume(db.songs[db.curr_song_id]->sound, (float)volume/100.0);
}

void clearSoundMixer() {
	int i;
	for(i = 0; i < 299; i++) {
  81afbc:	847ff81e 	bne	r16,r17,81afa0 <clearSoundMixer+0x18>
		clearIndexBuffer(i);
	}
}
  81afc0:	dfc00217 	ldw	ra,8(sp)
  81afc4:	dc400117 	ldw	r17,4(sp)
  81afc8:	dc000017 	ldw	r16,0(sp)
  81afcc:	dec00304 	addi	sp,sp,12
  81afd0:	f800283a 	ret

0081afd4 <initSoundMixer>:

int MIX_LOCK;
/**
 * Initializes the sound mixer to loop indefinitely
 */
void initSoundMixer() {
  81afd4:	defffd04 	addi	sp,sp,-12
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
  81afd8:	010000b4 	movhi	r4,2
  81afdc:	21308304 	addi	r4,r4,-15860

int MIX_LOCK;
/**
 * Initializes the sound mixer to loop indefinitely
 */
void initSoundMixer() {
  81afe0:	dc400115 	stw	r17,4(sp)
  81afe4:	dc000015 	stw	r16,0(sp)
  81afe8:	dfc00215 	stw	ra,8(sp)
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
  81afec:	08216fc0 	call	8216fc <malloc>
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
  81aff0:	00c000b4 	movhi	r3,2
  81aff4:	18f08204 	addi	r3,r3,-15864
  81aff8:	10c7883a 	add	r3,r2,r3
  81affc:	18000015 	stw	zero,0(r3)
  81b000:	19400017 	ldw	r5,0(r3)
  81b004:	010000b4 	movhi	r4,2
  81b008:	21308104 	addi	r4,r4,-15868
  81b00c:	1109883a 	add	r4,r2,r4
  81b010:	21400015 	stw	r5,0(r4)
  81b014:	21800017 	ldw	r6,0(r4)
  81b018:	00c000b4 	movhi	r3,2
  81b01c:	18f08004 	addi	r3,r3,-15872
  81b020:	10c7883a 	add	r3,r2,r3
  81b024:	19800015 	stw	r6,0(r3)
int MIX_LOCK;
/**
 * Initializes the sound mixer to loop indefinitely
 */
void initSoundMixer() {
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
  81b028:	d0a75915 	stw	r2,-25244(gp)
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
  81b02c:	0021883a 	mov	r16,zero
  81b030:	04404ac4 	movi	r17,299
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81b034:	80806024 	muli	r2,r16,384
  81b038:	d1275917 	ldw	r4,-25244(gp)
	setSoundVolume(db.songs[db.curr_song_id]->sound, (float)volume/100.0);
}

void clearSoundMixer() {
	int i;
	for(i = 0; i < 299; i++) {
  81b03c:	84000044 	addi	r16,r16,1
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81b040:	000b883a 	mov	r5,zero
  81b044:	1109883a 	add	r4,r2,r4
  81b048:	01806004 	movi	r6,384
  81b04c:	0821fd00 	call	821fd0 <memset>
	setSoundVolume(db.songs[db.curr_song_id]->sound, (float)volume/100.0);
}

void clearSoundMixer() {
	int i;
	for(i = 0; i < 299; i++) {
  81b050:	847ff81e 	bne	r16,r17,81b034 <initSoundMixer+0x60>
 */
void initSoundMixer() {
	soundMixer = (struct SoundMixer*) malloc(sizeof(struct SoundMixer));
	soundMixer->currIndex = soundMixer->endIndex = soundMixer->indexSize = 0;
	clearSoundMixer();
}
  81b054:	dfc00217 	ldw	ra,8(sp)
  81b058:	dc400117 	ldw	r17,4(sp)
  81b05c:	dc000017 	ldw	r16,0(sp)
  81b060:	dec00304 	addi	sp,sp,12
  81b064:	f800283a 	ret

0081b068 <updateMixer>:
		soundMixer->currIndex = soundMixer->endIndex;
		disableAudioDeviceController();
	}
}

void updateMixer() {
  81b068:	defff404 	addi	sp,sp,-48
  81b06c:	df000a15 	stw	fp,40(sp)
  81b070:	dfc00b15 	stw	ra,44(sp)
  81b074:	ddc00915 	stw	r23,36(sp)
  81b078:	dd800815 	stw	r22,32(sp)
  81b07c:	dd400715 	stw	r21,28(sp)
  81b080:	dd000615 	stw	r20,24(sp)
  81b084:	dcc00515 	stw	r19,20(sp)
  81b088:	dc800415 	stw	r18,16(sp)
  81b08c:	dc400315 	stw	r17,12(sp)
  81b090:	dc000215 	stw	r16,8(sp)
  81b094:	0039883a 	mov	fp,zero
  81b098:	d8000015 	stw	zero,0(sp)
	int i, j;
	for(i = 0; i < 150; i++) {
		//if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
  81b09c:	00c02134 	movhi	r3,132
  81b0a0:	18ca6204 	addi	r3,r3,10632
  81b0a4:	1880a617 	ldw	r2,664(r3)
  81b0a8:	e0802216 	blt	fp,r2,81b134 <updateMixer+0xcc>
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
			}
		}

		soundMixer->indexSize++;
  81b0ac:	d1e75917 	ldw	r7,-25244(gp)
  81b0b0:	010000b4 	movhi	r4,2
  81b0b4:	21308204 	addi	r4,r4,-15864
		soundMixer->endIndex++;
  81b0b8:	008000b4 	movhi	r2,2
  81b0bc:	10b08104 	addi	r2,r2,-15868
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
			}
		}

		soundMixer->indexSize++;
  81b0c0:	3909883a 	add	r4,r7,r4
  81b0c4:	20c00017 	ldw	r3,0(r4)
		soundMixer->endIndex++;
  81b0c8:	388b883a 	add	r5,r7,r2
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
			}
		}

		soundMixer->indexSize++;
  81b0cc:	18c00044 	addi	r3,r3,1
  81b0d0:	20c00015 	stw	r3,0(r4)
		soundMixer->endIndex++;
  81b0d4:	28800017 	ldw	r2,0(r5)
  81b0d8:	10800044 	addi	r2,r2,1
  81b0dc:	28800015 	stw	r2,0(r5)

		if(soundMixer->endIndex > 299)
  81b0e0:	28c00017 	ldw	r3,0(r5)
  81b0e4:	00804ac4 	movi	r2,299
  81b0e8:	10c0010e 	bge	r2,r3,81b0f0 <updateMixer+0x88>
			soundMixer->endIndex = 0;
  81b0ec:	28000015 	stw	zero,0(r5)

		clearIndexBuffer(soundMixer->endIndex);
  81b0f0:	29000017 	ldw	r4,0(r5)
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81b0f4:	01806004 	movi	r6,384
	}
}

void updateMixer() {
	int i, j;
	for(i = 0; i < 150; i++) {
  81b0f8:	d8800017 	ldw	r2,0(sp)
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81b0fc:	2189383a 	mul	r4,r4,r6
  81b100:	000b883a 	mov	r5,zero
	}
}

void updateMixer() {
	int i, j;
	for(i = 0; i < 150; i++) {
  81b104:	10800044 	addi	r2,r2,1
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81b108:	3909883a 	add	r4,r7,r4
	}
}

void updateMixer() {
	int i, j;
	for(i = 0; i < 150; i++) {
  81b10c:	d8800015 	stw	r2,0(sp)
		sound->position++;
	}
}

void clearIndexBuffer(int index){
	memset(soundMixer->buffer[index], 0, MAX_SOUNDMIXBUF*sizeof(int));
  81b110:	0821fd00 	call	821fd0 <memset>
	}
}

void updateMixer() {
	int i, j;
	for(i = 0; i < 150; i++) {
  81b114:	d9000017 	ldw	r4,0(sp)
  81b118:	00c02544 	movi	r3,149
  81b11c:	19007d16 	blt	r3,r4,81b314 <updateMixer+0x2ac>
		//if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
  81b120:	00c02134 	movhi	r3,132
  81b124:	18ca6204 	addi	r3,r3,10632
  81b128:	1880a617 	ldw	r2,664(r3)
	}
}

void updateMixer() {
	int i, j;
	for(i = 0; i < 150; i++) {
  81b12c:	0039883a 	mov	fp,zero
		//if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
  81b130:	e0bfde0e 	bge	fp,r2,81b0ac <updateMixer+0x44>
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
  81b134:	e707883a 	add	r3,fp,fp
  81b138:	18c7883a 	add	r3,r3,r3
  81b13c:	00802134 	movhi	r2,132
  81b140:	108a6204 	addi	r2,r2,10632
  81b144:	18a1883a 	add	r16,r3,r2
  81b148:	80809b17 	ldw	r2,620(r16)
  81b14c:	00c02134 	movhi	r3,132
  81b150:	18ca6204 	addi	r3,r3,10632
  81b154:	1085883a 	add	r2,r2,r2
  81b158:	1085883a 	add	r2,r2,r2
  81b15c:	10c5883a 	add	r2,r2,r3
  81b160:	10c03617 	ldw	r3,216(r2)
  81b164:	19000017 	ldw	r4,0(r3)
  81b168:	08197a40 	call	8197a4 <checkEnd>
  81b16c:	10803fcc 	andi	r2,r2,255
  81b170:	1000661e 	bne	r2,zero,81b30c <updateMixer+0x2a4>
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
  81b174:	80809b17 	ldw	r2,620(r16)
  81b178:	01002134 	movhi	r4,132
  81b17c:	210a6204 	addi	r4,r4,10632
		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  81b180:	d5e75917 	ldw	r23,-25244(gp)
	int i, j;
	for(i = 0; i < 150; i++) {
		//if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
			if(!checkEnd(db.songs[db.curr_song_ids[j]]->sound)) {
				loadToSoundBuffer(db.songs[db.curr_song_ids[j]]->sound);
  81b184:	1085883a 	add	r2,r2,r2
  81b188:	1085883a 	add	r2,r2,r2
  81b18c:	1105883a 	add	r2,r2,r4
  81b190:	11003617 	ldw	r4,216(r2)
  81b194:	00c000b4 	movhi	r3,2
  81b198:	18f08104 	addi	r3,r3,-15868
  81b19c:	b8c7883a 	add	r3,r23,r3
  81b1a0:	25000017 	ldw	r20,0(r4)
		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  81b1a4:	002d883a 	mov	r22,zero
  81b1a8:	d8c00115 	stw	r3,4(sp)
  81b1ac:	00001a06 	br	81b218 <updateMixer+0x1b0>
		}

		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  81b1b0:	d8800117 	ldw	r2,4(sp)
  81b1b4:	14000017 	ldw	r16,0(r2)
  81b1b8:	a4400917 	ldw	r17,36(r20)
  81b1bc:	081f8d00 	call	81f8d0 <__floatsisf>
  81b1c0:	84001824 	muli	r16,r16,96
  81b1c4:	1009883a 	mov	r4,r2
  81b1c8:	880b883a 	mov	r5,r17
  81b1cc:	85a1883a 	add	r16,r16,r22
  81b1d0:	8421883a 	add	r16,r16,r16
  81b1d4:	081f4140 	call	81f414 <__mulsf3>
  81b1d8:	8421883a 	add	r16,r16,r16
  81b1dc:	85e1883a 	add	r16,r16,r23
  81b1e0:	1009883a 	mov	r4,r2
  81b1e4:	081f9680 	call	81f968 <__fixsfsi>
  81b1e8:	80c00017 	ldw	r3,0(r16)
  81b1ec:	01004034 	movhi	r4,256
  81b1f0:	2085c83a 	sub	r2,r4,r2
  81b1f4:	213fffc4 	addi	r4,r4,-1
  81b1f8:	1104703a 	and	r2,r2,r4
  81b1fc:	1887883a 	add	r3,r3,r2
  81b200:	80c00015 	stw	r3,0(r16)
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		}
		sound->position++;
  81b204:	a8c00044 	addi	r3,r21,1
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81b208:	b5800044 	addi	r22,r22,1
  81b20c:	00801804 	movi	r2,96
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		}
		sound->position++;
  81b210:	a0c00315 	stw	r3,12(r20)
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81b214:	b0803d26 	beq	r22,r2,81b30c <updateMixer+0x2a4>
		if(sound->position >= sound->length) return;
  81b218:	a5400317 	ldw	r21,12(r20)
  81b21c:	a0800517 	ldw	r2,20(r20)
  81b220:	a8803a2e 	bgeu	r21,r2,81b30c <updateMixer+0x2a4>

		if (sound->position > sound->outFadePosition) {
  81b224:	a0800217 	ldw	r2,8(r20)
  81b228:	15400f2e 	bgeu	r2,r21,81b268 <updateMixer+0x200>
			sound->fadeVolume *= 0.9999;
  81b22c:	a1000917 	ldw	r4,36(r20)
  81b230:	081f9fc0 	call	81f9fc <__extendsfdf2>
  81b234:	02123a74 	movhi	r8,18665
  81b238:	4229c784 	addi	r8,r8,-22754
  81b23c:	024ffc34 	movhi	r9,16368
  81b240:	4a7fcb84 	addi	r9,r9,-210
  81b244:	180b883a 	mov	r5,r3
  81b248:	480f883a 	mov	r7,r9
  81b24c:	400d883a 	mov	r6,r8
  81b250:	1009883a 	mov	r4,r2
  81b254:	08200140 	call	820014 <__muldf3>
  81b258:	180b883a 	mov	r5,r3
  81b25c:	1009883a 	mov	r4,r2
  81b260:	0820a580 	call	820a58 <__truncdfsf2>
  81b264:	a0800915 	stw	r2,36(r20)
		}

		data = sound->buffer[sound->position];
  81b268:	a0c00717 	ldw	r3,28(r20)
  81b26c:	ad45883a 	add	r2,r21,r21
  81b270:	1085883a 	add	r2,r2,r2
  81b274:	10c5883a 	add	r2,r2,r3
  81b278:	14c00017 	ldw	r19,0(r2)
		if(data != 0) {
  81b27c:	983fe126 	beq	r19,zero,81b204 <updateMixer+0x19c>
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  81b280:	00804034 	movhi	r2,256
  81b284:	14c9c83a 	sub	r4,r2,r19
  81b288:	00c04034 	movhi	r3,256
  81b28c:	18ffffc4 	addi	r3,r3,-1
			sound->fadeVolume *= 0.9999;
		}

		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
  81b290:	00802034 	movhi	r2,128
  81b294:	10bfffc4 	addi	r2,r2,-1
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
  81b298:	20c8703a 	and	r4,r4,r3
			sound->fadeVolume *= 0.9999;
		}

		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
  81b29c:	14ffc436 	bltu	r2,r19,81b1b0 <updateMixer+0x148>
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  81b2a0:	d8800117 	ldw	r2,4(sp)
  81b2a4:	14000017 	ldw	r16,0(r2)
  81b2a8:	a4800917 	ldw	r18,36(r20)
  81b2ac:	84001824 	muli	r16,r16,96
  81b2b0:	85a1883a 	add	r16,r16,r22
  81b2b4:	8421883a 	add	r16,r16,r16
  81b2b8:	8421883a 	add	r16,r16,r16
  81b2bc:	85e1883a 	add	r16,r16,r23
  81b2c0:	81000017 	ldw	r4,0(r16)
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81b2c4:	b5800044 	addi	r22,r22,1
		data = sound->buffer[sound->position];
		if(data != 0) {
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
  81b2c8:	081fa500 	call	81fa50 <__floatunsisf>
  81b2cc:	9809883a 	mov	r4,r19
  81b2d0:	1023883a 	mov	r17,r2
  81b2d4:	081fa500 	call	81fa50 <__floatunsisf>
  81b2d8:	1009883a 	mov	r4,r2
  81b2dc:	900b883a 	mov	r5,r18
  81b2e0:	081f4140 	call	81f414 <__mulsf3>
  81b2e4:	100b883a 	mov	r5,r2
  81b2e8:	8809883a 	mov	r4,r17
  81b2ec:	081f3b00 	call	81f3b0 <__addsf3>
  81b2f0:	1009883a 	mov	r4,r2
  81b2f4:	081f0ec0 	call	81f0ec <__fixunssfsi>
  81b2f8:	80800015 	stw	r2,0(r16)
		}
		sound->position++;
  81b2fc:	a8c00044 	addi	r3,r21,1
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81b300:	00801804 	movi	r2,96
			if(data > 0x07FFFFF)
				soundMixer->buffer[soundMixer->endIndex][i] += positiveToNegative((negativeToPositive(data)*sound->fadeVolume));
			else
				soundMixer->buffer[soundMixer->endIndex][i] += data *sound->fadeVolume;
		}
		sound->position++;
  81b304:	a0c00315 	stw	r3,12(r20)
 */
void loadToSoundBuffer(struct Sound* sound) {
	//if(soundMixer->indexSize >=299) return;
	int i;
	unsigned int data;
	for(i = 0; i < MAX_SOUNDMIXBUF; i++) {
  81b308:	b0bfc31e 	bne	r22,r2,81b218 <updateMixer+0x1b0>

void updateMixer() {
	int i, j;
	for(i = 0; i < 150; i++) {
		//if(soundMixer->indexSize >=299) return;
		for(j = 0; j < db.total_songs_playing; j++) {
  81b30c:	e7000044 	addi	fp,fp,1
  81b310:	003f6206 	br	81b09c <updateMixer+0x34>
		if(soundMixer->endIndex > 299)
			soundMixer->endIndex = 0;

		clearIndexBuffer(soundMixer->endIndex);
	}
}
  81b314:	dfc00b17 	ldw	ra,44(sp)
  81b318:	df000a17 	ldw	fp,40(sp)
  81b31c:	ddc00917 	ldw	r23,36(sp)
  81b320:	dd800817 	ldw	r22,32(sp)
  81b324:	dd400717 	ldw	r21,28(sp)
  81b328:	dd000617 	ldw	r20,24(sp)
  81b32c:	dcc00517 	ldw	r19,20(sp)
  81b330:	dc800417 	ldw	r18,16(sp)
  81b334:	dc400317 	ldw	r17,12(sp)
  81b338:	dc000217 	ldw	r16,8(sp)
  81b33c:	dec00c04 	addi	sp,sp,48
  81b340:	f800283a 	ret

0081b344 <cos>:
  81b344:	00a00034 	movhi	r2,32768
  81b348:	10bfffc4 	addi	r2,r2,-1
  81b34c:	defffa04 	addi	sp,sp,-24
  81b350:	114c703a 	and	r6,r2,r5
  81b354:	008ffa74 	movhi	r2,16361
  81b358:	10887ec4 	addi	r2,r2,8699
  81b35c:	dfc00515 	stw	ra,20(sp)
  81b360:	2011883a 	mov	r8,r4
  81b364:	1180210e 	bge	r2,r6,81b3ec <cos+0xa8>
  81b368:	009ffc34 	movhi	r2,32752
  81b36c:	10bfffc4 	addi	r2,r2,-1
  81b370:	11800a0e 	bge	r2,r6,81b39c <cos+0x58>
  81b374:	280f883a 	mov	r7,r5
  81b378:	400d883a 	mov	r6,r8
  81b37c:	081ff200 	call	81ff20 <__subdf3>
  81b380:	100d883a 	mov	r6,r2
  81b384:	180f883a 	mov	r7,r3
  81b388:	3005883a 	mov	r2,r6
  81b38c:	3807883a 	mov	r3,r7
  81b390:	dfc00517 	ldw	ra,20(sp)
  81b394:	dec00604 	addi	sp,sp,24
  81b398:	f800283a 	ret
  81b39c:	d9800104 	addi	r6,sp,4
  81b3a0:	081c41c0 	call	81c41c <__ieee754_rem_pio2>
  81b3a4:	10c000cc 	andi	r3,r2,3
  81b3a8:	01000044 	movi	r4,1
  81b3ac:	19001926 	beq	r3,r4,81b414 <cos+0xd0>
  81b3b0:	00800084 	movi	r2,2
  81b3b4:	18803126 	beq	r3,r2,81b47c <cos+0x138>
  81b3b8:	1800231e 	bne	r3,zero,81b448 <cos+0x104>
  81b3bc:	d8800117 	ldw	r2,4(sp)
  81b3c0:	da000317 	ldw	r8,12(sp)
  81b3c4:	d8c00217 	ldw	r3,8(sp)
  81b3c8:	da400417 	ldw	r9,16(sp)
  81b3cc:	400d883a 	mov	r6,r8
  81b3d0:	180b883a 	mov	r5,r3
  81b3d4:	480f883a 	mov	r7,r9
  81b3d8:	1009883a 	mov	r4,r2
  81b3dc:	081cf0c0 	call	81cf0c <__kernel_cos>
  81b3e0:	100d883a 	mov	r6,r2
  81b3e4:	180f883a 	mov	r7,r3
  81b3e8:	003fe706 	br	81b388 <cos+0x44>
  81b3ec:	000d883a 	mov	r6,zero
  81b3f0:	000f883a 	mov	r7,zero
  81b3f4:	081cf0c0 	call	81cf0c <__kernel_cos>
  81b3f8:	100d883a 	mov	r6,r2
  81b3fc:	180f883a 	mov	r7,r3
  81b400:	3005883a 	mov	r2,r6
  81b404:	3807883a 	mov	r3,r7
  81b408:	dfc00517 	ldw	ra,20(sp)
  81b40c:	dec00604 	addi	sp,sp,24
  81b410:	f800283a 	ret
  81b414:	d8800117 	ldw	r2,4(sp)
  81b418:	da000317 	ldw	r8,12(sp)
  81b41c:	d8c00217 	ldw	r3,8(sp)
  81b420:	da400417 	ldw	r9,16(sp)
  81b424:	d9000015 	stw	r4,0(sp)
  81b428:	400d883a 	mov	r6,r8
  81b42c:	480f883a 	mov	r7,r9
  81b430:	180b883a 	mov	r5,r3
  81b434:	1009883a 	mov	r4,r2
  81b438:	081e2b40 	call	81e2b4 <__kernel_sin>
  81b43c:	100d883a 	mov	r6,r2
  81b440:	19e0003c 	xorhi	r7,r3,32768
  81b444:	003fd006 	br	81b388 <cos+0x44>
  81b448:	d8800117 	ldw	r2,4(sp)
  81b44c:	da000317 	ldw	r8,12(sp)
  81b450:	d8c00217 	ldw	r3,8(sp)
  81b454:	da400417 	ldw	r9,16(sp)
  81b458:	d9000015 	stw	r4,0(sp)
  81b45c:	400d883a 	mov	r6,r8
  81b460:	480f883a 	mov	r7,r9
  81b464:	180b883a 	mov	r5,r3
  81b468:	1009883a 	mov	r4,r2
  81b46c:	081e2b40 	call	81e2b4 <__kernel_sin>
  81b470:	100d883a 	mov	r6,r2
  81b474:	180f883a 	mov	r7,r3
  81b478:	003fc306 	br	81b388 <cos+0x44>
  81b47c:	d8800117 	ldw	r2,4(sp)
  81b480:	da000317 	ldw	r8,12(sp)
  81b484:	d8c00217 	ldw	r3,8(sp)
  81b488:	da400417 	ldw	r9,16(sp)
  81b48c:	400d883a 	mov	r6,r8
  81b490:	180b883a 	mov	r5,r3
  81b494:	480f883a 	mov	r7,r9
  81b498:	1009883a 	mov	r4,r2
  81b49c:	081cf0c0 	call	81cf0c <__kernel_cos>
  81b4a0:	100d883a 	mov	r6,r2
  81b4a4:	19e0003c 	xorhi	r7,r3,32768
  81b4a8:	003fb706 	br	81b388 <cos+0x44>

0081b4ac <sin>:
  81b4ac:	00a00034 	movhi	r2,32768
  81b4b0:	10bfffc4 	addi	r2,r2,-1
  81b4b4:	defffa04 	addi	sp,sp,-24
  81b4b8:	114c703a 	and	r6,r2,r5
  81b4bc:	008ffa74 	movhi	r2,16361
  81b4c0:	10887ec4 	addi	r2,r2,8699
  81b4c4:	dfc00515 	stw	ra,20(sp)
  81b4c8:	2011883a 	mov	r8,r4
  81b4cc:	1180220e 	bge	r2,r6,81b558 <sin+0xac>
  81b4d0:	009ffc34 	movhi	r2,32752
  81b4d4:	10bfffc4 	addi	r2,r2,-1
  81b4d8:	11800a0e 	bge	r2,r6,81b504 <sin+0x58>
  81b4dc:	280f883a 	mov	r7,r5
  81b4e0:	400d883a 	mov	r6,r8
  81b4e4:	081ff200 	call	81ff20 <__subdf3>
  81b4e8:	100d883a 	mov	r6,r2
  81b4ec:	180f883a 	mov	r7,r3
  81b4f0:	3005883a 	mov	r2,r6
  81b4f4:	3807883a 	mov	r3,r7
  81b4f8:	dfc00517 	ldw	ra,20(sp)
  81b4fc:	dec00604 	addi	sp,sp,24
  81b500:	f800283a 	ret
  81b504:	d9800104 	addi	r6,sp,4
  81b508:	081c41c0 	call	81c41c <__ieee754_rem_pio2>
  81b50c:	10c000cc 	andi	r3,r2,3
  81b510:	01000044 	movi	r4,1
  81b514:	19001b26 	beq	r3,r4,81b584 <sin+0xd8>
  81b518:	00800084 	movi	r2,2
  81b51c:	18803126 	beq	r3,r2,81b5e4 <sin+0x138>
  81b520:	1800241e 	bne	r3,zero,81b5b4 <sin+0x108>
  81b524:	d8800117 	ldw	r2,4(sp)
  81b528:	da000317 	ldw	r8,12(sp)
  81b52c:	d8c00217 	ldw	r3,8(sp)
  81b530:	da400417 	ldw	r9,16(sp)
  81b534:	d9000015 	stw	r4,0(sp)
  81b538:	400d883a 	mov	r6,r8
  81b53c:	480f883a 	mov	r7,r9
  81b540:	180b883a 	mov	r5,r3
  81b544:	1009883a 	mov	r4,r2
  81b548:	081e2b40 	call	81e2b4 <__kernel_sin>
  81b54c:	100d883a 	mov	r6,r2
  81b550:	180f883a 	mov	r7,r3
  81b554:	003fe606 	br	81b4f0 <sin+0x44>
  81b558:	000d883a 	mov	r6,zero
  81b55c:	000f883a 	mov	r7,zero
  81b560:	d8000015 	stw	zero,0(sp)
  81b564:	081e2b40 	call	81e2b4 <__kernel_sin>
  81b568:	100d883a 	mov	r6,r2
  81b56c:	180f883a 	mov	r7,r3
  81b570:	3005883a 	mov	r2,r6
  81b574:	3807883a 	mov	r3,r7
  81b578:	dfc00517 	ldw	ra,20(sp)
  81b57c:	dec00604 	addi	sp,sp,24
  81b580:	f800283a 	ret
  81b584:	d8800117 	ldw	r2,4(sp)
  81b588:	da000317 	ldw	r8,12(sp)
  81b58c:	d8c00217 	ldw	r3,8(sp)
  81b590:	da400417 	ldw	r9,16(sp)
  81b594:	400d883a 	mov	r6,r8
  81b598:	180b883a 	mov	r5,r3
  81b59c:	480f883a 	mov	r7,r9
  81b5a0:	1009883a 	mov	r4,r2
  81b5a4:	081cf0c0 	call	81cf0c <__kernel_cos>
  81b5a8:	100d883a 	mov	r6,r2
  81b5ac:	180f883a 	mov	r7,r3
  81b5b0:	003fcf06 	br	81b4f0 <sin+0x44>
  81b5b4:	d8800117 	ldw	r2,4(sp)
  81b5b8:	da000317 	ldw	r8,12(sp)
  81b5bc:	d8c00217 	ldw	r3,8(sp)
  81b5c0:	da400417 	ldw	r9,16(sp)
  81b5c4:	400d883a 	mov	r6,r8
  81b5c8:	180b883a 	mov	r5,r3
  81b5cc:	480f883a 	mov	r7,r9
  81b5d0:	1009883a 	mov	r4,r2
  81b5d4:	081cf0c0 	call	81cf0c <__kernel_cos>
  81b5d8:	100d883a 	mov	r6,r2
  81b5dc:	19e0003c 	xorhi	r7,r3,32768
  81b5e0:	003fc306 	br	81b4f0 <sin+0x44>
  81b5e4:	d8800117 	ldw	r2,4(sp)
  81b5e8:	da000317 	ldw	r8,12(sp)
  81b5ec:	d8c00217 	ldw	r3,8(sp)
  81b5f0:	da400417 	ldw	r9,16(sp)
  81b5f4:	d9000015 	stw	r4,0(sp)
  81b5f8:	400d883a 	mov	r6,r8
  81b5fc:	480f883a 	mov	r7,r9
  81b600:	180b883a 	mov	r5,r3
  81b604:	1009883a 	mov	r4,r2
  81b608:	081e2b40 	call	81e2b4 <__kernel_sin>
  81b60c:	100d883a 	mov	r6,r2
  81b610:	19e0003c 	xorhi	r7,r3,32768
  81b614:	003fb606 	br	81b4f0 <sin+0x44>

0081b618 <atan2>:
  81b618:	081b8d41 	jmpi	81b8d4 <__ieee754_atan2>

0081b61c <log>:
  81b61c:	defff104 	addi	sp,sp,-60
  81b620:	dd000d15 	stw	r20,52(sp)
  81b624:	05002134 	movhi	r20,132
  81b628:	a502e004 	addi	r20,r20,2944
  81b62c:	dcc00c15 	stw	r19,48(sp)
  81b630:	dc800b15 	stw	r18,44(sp)
  81b634:	dc400a15 	stw	r17,40(sp)
  81b638:	dc000915 	stw	r16,36(sp)
  81b63c:	2025883a 	mov	r18,r4
  81b640:	dfc00e15 	stw	ra,56(sp)
  81b644:	2827883a 	mov	r19,r5
  81b648:	081bc240 	call	81bc24 <__ieee754_log>
  81b64c:	a1000017 	ldw	r4,0(r20)
  81b650:	1021883a 	mov	r16,r2
  81b654:	00bfffc4 	movi	r2,-1
  81b658:	1823883a 	mov	r17,r3
  81b65c:	20800a26 	beq	r4,r2,81b688 <log+0x6c>
  81b660:	9009883a 	mov	r4,r18
  81b664:	980b883a 	mov	r5,r19
  81b668:	081eea00 	call	81eea0 <__isnand>
  81b66c:	1000061e 	bne	r2,zero,81b688 <log+0x6c>
  81b670:	000d883a 	mov	r6,zero
  81b674:	000f883a 	mov	r7,zero
  81b678:	9009883a 	mov	r4,r18
  81b67c:	980b883a 	mov	r5,r19
  81b680:	08206b80 	call	8206b8 <__gtdf2>
  81b684:	00800a0e 	bge	zero,r2,81b6b0 <log+0x94>
  81b688:	8005883a 	mov	r2,r16
  81b68c:	8807883a 	mov	r3,r17
  81b690:	dfc00e17 	ldw	ra,56(sp)
  81b694:	dd000d17 	ldw	r20,52(sp)
  81b698:	dcc00c17 	ldw	r19,48(sp)
  81b69c:	dc800b17 	ldw	r18,44(sp)
  81b6a0:	dc400a17 	ldw	r17,40(sp)
  81b6a4:	dc000917 	ldw	r16,36(sp)
  81b6a8:	dec00f04 	addi	sp,sp,60
  81b6ac:	f800283a 	ret
  81b6b0:	a4000017 	ldw	r16,0(r20)
  81b6b4:	00802134 	movhi	r2,132
  81b6b8:	10b9b104 	addi	r2,r2,-6460
  81b6bc:	d8800115 	stw	r2,4(sp)
  81b6c0:	d8000815 	stw	zero,32(sp)
  81b6c4:	dc800215 	stw	r18,8(sp)
  81b6c8:	dcc00315 	stw	r19,12(sp)
  81b6cc:	dc800415 	stw	r18,16(sp)
  81b6d0:	dcc00515 	stw	r19,20(sp)
  81b6d4:	8000231e 	bne	r16,zero,81b764 <log+0x148>
  81b6d8:	00b80034 	movhi	r2,57344
  81b6dc:	00f1fc34 	movhi	r3,51184
  81b6e0:	18ffffc4 	addi	r3,r3,-1
  81b6e4:	d8800615 	stw	r2,24(sp)
  81b6e8:	d8c00715 	stw	r3,28(sp)
  81b6ec:	000d883a 	mov	r6,zero
  81b6f0:	000f883a 	mov	r7,zero
  81b6f4:	980b883a 	mov	r5,r19
  81b6f8:	9009883a 	mov	r4,r18
  81b6fc:	08206300 	call	820630 <__eqdf2>
  81b700:	10000b1e 	bne	r2,zero,81b730 <log+0x114>
  81b704:	00800084 	movi	r2,2
  81b708:	d8800015 	stw	r2,0(sp)
  81b70c:	80801d26 	beq	r16,r2,81b784 <log+0x168>
  81b710:	d809883a 	mov	r4,sp
  81b714:	081eed00 	call	81eed0 <matherr>
  81b718:	10001a26 	beq	r2,zero,81b784 <log+0x168>
  81b71c:	d8800817 	ldw	r2,32(sp)
  81b720:	10001c1e 	bne	r2,zero,81b794 <log+0x178>
  81b724:	dc000617 	ldw	r16,24(sp)
  81b728:	dc400717 	ldw	r17,28(sp)
  81b72c:	003fd606 	br	81b688 <log+0x6c>
  81b730:	00800044 	movi	r2,1
  81b734:	00c00084 	movi	r3,2
  81b738:	d8800015 	stw	r2,0(sp)
  81b73c:	80c00d26 	beq	r16,r3,81b774 <log+0x158>
  81b740:	d809883a 	mov	r4,sp
  81b744:	081eed00 	call	81eed0 <matherr>
  81b748:	10000a26 	beq	r2,zero,81b774 <log+0x158>
  81b74c:	010020f4 	movhi	r4,131
  81b750:	210ed604 	addi	r4,r4,15192
  81b754:	081eed80 	call	81eed8 <nan>
  81b758:	d8c00715 	stw	r3,28(sp)
  81b75c:	d8800615 	stw	r2,24(sp)
  81b760:	003fee06 	br	81b71c <log+0x100>
  81b764:	00bffc34 	movhi	r2,65520
  81b768:	d8800715 	stw	r2,28(sp)
  81b76c:	d8000615 	stw	zero,24(sp)
  81b770:	003fde06 	br	81b6ec <log+0xd0>
  81b774:	08216400 	call	821640 <__errno>
  81b778:	00c00844 	movi	r3,33
  81b77c:	10c00015 	stw	r3,0(r2)
  81b780:	003ff206 	br	81b74c <log+0x130>
  81b784:	08216400 	call	821640 <__errno>
  81b788:	00c00884 	movi	r3,34
  81b78c:	10c00015 	stw	r3,0(r2)
  81b790:	003fe206 	br	81b71c <log+0x100>
  81b794:	08216400 	call	821640 <__errno>
  81b798:	d8c00817 	ldw	r3,32(sp)
  81b79c:	10c00015 	stw	r3,0(r2)
  81b7a0:	003fe006 	br	81b724 <log+0x108>

0081b7a4 <sqrt>:
  81b7a4:	defff104 	addi	sp,sp,-60
  81b7a8:	dd000d15 	stw	r20,52(sp)
  81b7ac:	05002134 	movhi	r20,132
  81b7b0:	a502e004 	addi	r20,r20,2944
  81b7b4:	dcc00c15 	stw	r19,48(sp)
  81b7b8:	dc800b15 	stw	r18,44(sp)
  81b7bc:	dc400a15 	stw	r17,40(sp)
  81b7c0:	dc000915 	stw	r16,36(sp)
  81b7c4:	2025883a 	mov	r18,r4
  81b7c8:	dfc00e15 	stw	ra,56(sp)
  81b7cc:	2827883a 	mov	r19,r5
  81b7d0:	081cc440 	call	81cc44 <__ieee754_sqrt>
  81b7d4:	a1000017 	ldw	r4,0(r20)
  81b7d8:	1021883a 	mov	r16,r2
  81b7dc:	00bfffc4 	movi	r2,-1
  81b7e0:	1823883a 	mov	r17,r3
  81b7e4:	20800a26 	beq	r4,r2,81b810 <sqrt+0x6c>
  81b7e8:	9009883a 	mov	r4,r18
  81b7ec:	980b883a 	mov	r5,r19
  81b7f0:	081eea00 	call	81eea0 <__isnand>
  81b7f4:	1000061e 	bne	r2,zero,81b810 <sqrt+0x6c>
  81b7f8:	000d883a 	mov	r6,zero
  81b7fc:	000f883a 	mov	r7,zero
  81b800:	9009883a 	mov	r4,r18
  81b804:	980b883a 	mov	r5,r19
  81b808:	08207c80 	call	8207c8 <__ltdf2>
  81b80c:	10000a16 	blt	r2,zero,81b838 <sqrt+0x94>
  81b810:	8005883a 	mov	r2,r16
  81b814:	8807883a 	mov	r3,r17
  81b818:	dfc00e17 	ldw	ra,56(sp)
  81b81c:	dd000d17 	ldw	r20,52(sp)
  81b820:	dcc00c17 	ldw	r19,48(sp)
  81b824:	dc800b17 	ldw	r18,44(sp)
  81b828:	dc400a17 	ldw	r17,40(sp)
  81b82c:	dc000917 	ldw	r16,36(sp)
  81b830:	dec00f04 	addi	sp,sp,60
  81b834:	f800283a 	ret
  81b838:	a4000017 	ldw	r16,0(r20)
  81b83c:	00800044 	movi	r2,1
  81b840:	00c02134 	movhi	r3,132
  81b844:	18f9b204 	addi	r3,r3,-6456
  81b848:	d8800015 	stw	r2,0(sp)
  81b84c:	d8c00115 	stw	r3,4(sp)
  81b850:	dcc00315 	stw	r19,12(sp)
  81b854:	d8000815 	stw	zero,32(sp)
  81b858:	dc800415 	stw	r18,16(sp)
  81b85c:	dcc00515 	stw	r19,20(sp)
  81b860:	dc800215 	stw	r18,8(sp)
  81b864:	80000a1e 	bne	r16,zero,81b890 <sqrt+0xec>
  81b868:	d8000615 	stw	zero,24(sp)
  81b86c:	d8000715 	stw	zero,28(sp)
  81b870:	d809883a 	mov	r4,sp
  81b874:	081eed00 	call	81eed0 <matherr>
  81b878:	10000e26 	beq	r2,zero,81b8b4 <sqrt+0x110>
  81b87c:	d8800817 	ldw	r2,32(sp)
  81b880:	1000101e 	bne	r2,zero,81b8c4 <sqrt+0x120>
  81b884:	dc000617 	ldw	r16,24(sp)
  81b888:	dc400717 	ldw	r17,28(sp)
  81b88c:	003fe006 	br	81b810 <sqrt+0x6c>
  81b890:	0009883a 	mov	r4,zero
  81b894:	000d883a 	mov	r6,zero
  81b898:	000b883a 	mov	r5,zero
  81b89c:	000f883a 	mov	r7,zero
  81b8a0:	08203d80 	call	8203d8 <__divdf3>
  81b8a4:	d8800615 	stw	r2,24(sp)
  81b8a8:	00800084 	movi	r2,2
  81b8ac:	d8c00715 	stw	r3,28(sp)
  81b8b0:	80bfef1e 	bne	r16,r2,81b870 <sqrt+0xcc>
  81b8b4:	08216400 	call	821640 <__errno>
  81b8b8:	00c00844 	movi	r3,33
  81b8bc:	10c00015 	stw	r3,0(r2)
  81b8c0:	003fee06 	br	81b87c <sqrt+0xd8>
  81b8c4:	08216400 	call	821640 <__errno>
  81b8c8:	d8c00817 	ldw	r3,32(sp)
  81b8cc:	10c00015 	stw	r3,0(r2)
  81b8d0:	003fec06 	br	81b884 <sqrt+0xe0>

0081b8d4 <__ieee754_atan2>:
  81b8d4:	3015883a 	mov	r10,r6
  81b8d8:	3019883a 	mov	r12,r6
  81b8dc:	018dc83a 	sub	r6,zero,r6
  81b8e0:	518cb03a 	or	r6,r10,r6
  81b8e4:	300cd7fa 	srli	r6,r6,31
  81b8e8:	03a00034 	movhi	r14,32768
  81b8ec:	73bfffc4 	addi	r14,r14,-1
  81b8f0:	3b9e703a 	and	r15,r7,r14
  81b8f4:	defffc04 	addi	sp,sp,-16
  81b8f8:	33ccb03a 	or	r6,r6,r15
  81b8fc:	035ffc34 	movhi	r13,32752
  81b900:	dc000015 	stw	r16,0(sp)
  81b904:	dfc00315 	stw	ra,12(sp)
  81b908:	dc800215 	stw	r18,8(sp)
  81b90c:	dc400115 	stw	r17,4(sp)
  81b910:	3817883a 	mov	r11,r7
  81b914:	2011883a 	mov	r8,r4
  81b918:	2813883a 	mov	r9,r5
  81b91c:	3821883a 	mov	r16,r7
  81b920:	69800736 	bltu	r13,r6,81b940 <__ieee754_atan2+0x6c>
  81b924:	0105c83a 	sub	r2,zero,r4
  81b928:	2084b03a 	or	r2,r4,r2
  81b92c:	1004d7fa 	srli	r2,r2,31
  81b930:	2b8c703a 	and	r6,r5,r14
  81b934:	2823883a 	mov	r17,r5
  81b938:	1184b03a 	or	r2,r2,r6
  81b93c:	68800d2e 	bgeu	r13,r2,81b974 <__ieee754_atan2+0xa0>
  81b940:	4009883a 	mov	r4,r8
  81b944:	500d883a 	mov	r6,r10
  81b948:	081ffa00 	call	81ffa0 <__adddf3>
  81b94c:	1011883a 	mov	r8,r2
  81b950:	1813883a 	mov	r9,r3
  81b954:	4005883a 	mov	r2,r8
  81b958:	4807883a 	mov	r3,r9
  81b95c:	dfc00317 	ldw	ra,12(sp)
  81b960:	dc800217 	ldw	r18,8(sp)
  81b964:	dc400117 	ldw	r17,4(sp)
  81b968:	dc000017 	ldw	r16,0(sp)
  81b96c:	dec00404 	addi	sp,sp,16
  81b970:	f800283a 	ret
  81b974:	00b00434 	movhi	r2,49168
  81b978:	3885883a 	add	r2,r7,r2
  81b97c:	5084b03a 	or	r2,r10,r2
  81b980:	10001026 	beq	r2,zero,81b9c4 <__ieee754_atan2+0xf0>
  81b984:	3805d7ba 	srai	r2,r7,30
  81b988:	2806d7fa 	srli	r3,r5,31
  81b98c:	2188b03a 	or	r4,r4,r6
  81b990:	1080008c 	andi	r2,r2,2
  81b994:	18a4b03a 	or	r18,r3,r2
  81b998:	00800084 	movi	r2,2
  81b99c:	2000101e 	bne	r4,zero,81b9e0 <__ieee754_atan2+0x10c>
  81b9a0:	90803826 	beq	r18,r2,81ba84 <__ieee754_atan2+0x1b0>
  81b9a4:	14bfeb0e 	bge	r2,r18,81b954 <__ieee754_atan2+0x80>
  81b9a8:	008000c4 	movi	r2,3
  81b9ac:	90800c1e 	bne	r18,r2,81b9e0 <__ieee754_atan2+0x10c>
  81b9b0:	02151134 	movhi	r8,21572
  81b9b4:	420b4604 	addi	r8,r8,11544
  81b9b8:	02700274 	movhi	r9,49161
  81b9bc:	4a487ec4 	addi	r9,r9,8699
  81b9c0:	003fe406 	br	81b954 <__ieee754_atan2+0x80>
  81b9c4:	4009883a 	mov	r4,r8
  81b9c8:	dfc00317 	ldw	ra,12(sp)
  81b9cc:	dc800217 	ldw	r18,8(sp)
  81b9d0:	dc400117 	ldw	r17,4(sp)
  81b9d4:	dc000017 	ldw	r16,0(sp)
  81b9d8:	dec00404 	addi	sp,sp,16
  81b9dc:	081e5cc1 	jmpi	81e5cc <atan>
  81b9e0:	63c4b03a 	or	r2,r12,r15
  81b9e4:	10001426 	beq	r2,zero,81ba38 <__ieee754_atan2+0x164>
  81b9e8:	009ffc34 	movhi	r2,32752
  81b9ec:	78801d26 	beq	r15,r2,81ba64 <__ieee754_atan2+0x190>
  81b9f0:	009ffc34 	movhi	r2,32752
  81b9f4:	30801026 	beq	r6,r2,81ba38 <__ieee754_atan2+0x164>
  81b9f8:	33c5c83a 	sub	r2,r6,r15
  81b9fc:	1009d53a 	srai	r4,r2,20
  81ba00:	00c00f04 	movi	r3,60
  81ba04:	1900240e 	bge	r3,r4,81ba98 <__ieee754_atan2+0x1c4>
  81ba08:	02951134 	movhi	r10,21572
  81ba0c:	528b4604 	addi	r10,r10,11544
  81ba10:	02cffe74 	movhi	r11,16377
  81ba14:	5ac87ec4 	addi	r11,r11,8699
  81ba18:	00800044 	movi	r2,1
  81ba1c:	90802d26 	beq	r18,r2,81bad4 <__ieee754_atan2+0x200>
  81ba20:	00800084 	movi	r2,2
  81ba24:	90804426 	beq	r18,r2,81bb38 <__ieee754_atan2+0x264>
  81ba28:	90002e1e 	bne	r18,zero,81bae4 <__ieee754_atan2+0x210>
  81ba2c:	5011883a 	mov	r8,r10
  81ba30:	5813883a 	mov	r9,r11
  81ba34:	003fc706 	br	81b954 <__ieee754_atan2+0x80>
  81ba38:	88000516 	blt	r17,zero,81ba50 <__ieee754_atan2+0x17c>
  81ba3c:	02151134 	movhi	r8,21572
  81ba40:	420b4604 	addi	r8,r8,11544
  81ba44:	024ffe74 	movhi	r9,16377
  81ba48:	4a487ec4 	addi	r9,r9,8699
  81ba4c:	003fc106 	br	81b954 <__ieee754_atan2+0x80>
  81ba50:	02151134 	movhi	r8,21572
  81ba54:	420b4604 	addi	r8,r8,11544
  81ba58:	026ffe74 	movhi	r9,49145
  81ba5c:	4a487ec4 	addi	r9,r9,8699
  81ba60:	003fbc06 	br	81b954 <__ieee754_atan2+0x80>
  81ba64:	33c04b26 	beq	r6,r15,81bb94 <__ieee754_atan2+0x2c0>
  81ba68:	00800044 	movi	r2,1
  81ba6c:	90805726 	beq	r18,r2,81bbcc <__ieee754_atan2+0x2f8>
  81ba70:	14805116 	blt	r2,r18,81bbb8 <__ieee754_atan2+0x2e4>
  81ba74:	903fde1e 	bne	r18,zero,81b9f0 <__ieee754_atan2+0x11c>
  81ba78:	0011883a 	mov	r8,zero
  81ba7c:	0013883a 	mov	r9,zero
  81ba80:	003fb406 	br	81b954 <__ieee754_atan2+0x80>
  81ba84:	02151134 	movhi	r8,21572
  81ba88:	420b4604 	addi	r8,r8,11544
  81ba8c:	02500274 	movhi	r9,16393
  81ba90:	4a487ec4 	addi	r9,r9,8699
  81ba94:	003faf06 	br	81b954 <__ieee754_atan2+0x80>
  81ba98:	80003916 	blt	r16,zero,81bb80 <__ieee754_atan2+0x2ac>
  81ba9c:	580f883a 	mov	r7,r11
  81baa0:	480b883a 	mov	r5,r9
  81baa4:	500d883a 	mov	r6,r10
  81baa8:	4009883a 	mov	r4,r8
  81baac:	08203d80 	call	8203d8 <__divdf3>
  81bab0:	180b883a 	mov	r5,r3
  81bab4:	1009883a 	mov	r4,r2
  81bab8:	081ec640 	call	81ec64 <fabs>
  81babc:	180b883a 	mov	r5,r3
  81bac0:	1009883a 	mov	r4,r2
  81bac4:	081e5cc0 	call	81e5cc <atan>
  81bac8:	1015883a 	mov	r10,r2
  81bacc:	1817883a 	mov	r11,r3
  81bad0:	003fd106 	br	81ba18 <__ieee754_atan2+0x144>
  81bad4:	59a0003c 	xorhi	r6,r11,32768
  81bad8:	5011883a 	mov	r8,r10
  81badc:	3013883a 	mov	r9,r6
  81bae0:	003f9c06 	br	81b954 <__ieee754_atan2+0x80>
  81bae4:	008cc534 	movhi	r2,13076
  81bae8:	109701c4 	addi	r2,r2,23559
  81baec:	00cf28b4 	movhi	r3,15522
  81baf0:	18e98984 	addi	r3,r3,-23002
  81baf4:	580b883a 	mov	r5,r11
  81baf8:	180f883a 	mov	r7,r3
  81bafc:	5009883a 	mov	r4,r10
  81bb00:	100d883a 	mov	r6,r2
  81bb04:	081ff200 	call	81ff20 <__subdf3>
  81bb08:	02151134 	movhi	r8,21572
  81bb0c:	420b4604 	addi	r8,r8,11544
  81bb10:	02500274 	movhi	r9,16393
  81bb14:	4a487ec4 	addi	r9,r9,8699
  81bb18:	180b883a 	mov	r5,r3
  81bb1c:	480f883a 	mov	r7,r9
  81bb20:	1009883a 	mov	r4,r2
  81bb24:	400d883a 	mov	r6,r8
  81bb28:	081ff200 	call	81ff20 <__subdf3>
  81bb2c:	1011883a 	mov	r8,r2
  81bb30:	1813883a 	mov	r9,r3
  81bb34:	003f8706 	br	81b954 <__ieee754_atan2+0x80>
  81bb38:	008cc534 	movhi	r2,13076
  81bb3c:	109701c4 	addi	r2,r2,23559
  81bb40:	00cf28b4 	movhi	r3,15522
  81bb44:	18e98984 	addi	r3,r3,-23002
  81bb48:	580b883a 	mov	r5,r11
  81bb4c:	180f883a 	mov	r7,r3
  81bb50:	5009883a 	mov	r4,r10
  81bb54:	100d883a 	mov	r6,r2
  81bb58:	081ff200 	call	81ff20 <__subdf3>
  81bb5c:	02151134 	movhi	r8,21572
  81bb60:	420b4604 	addi	r8,r8,11544
  81bb64:	02500274 	movhi	r9,16393
  81bb68:	4a487ec4 	addi	r9,r9,8699
  81bb6c:	480b883a 	mov	r5,r9
  81bb70:	180f883a 	mov	r7,r3
  81bb74:	4009883a 	mov	r4,r8
  81bb78:	100d883a 	mov	r6,r2
  81bb7c:	003fea06 	br	81bb28 <__ieee754_atan2+0x254>
  81bb80:	00bff104 	movi	r2,-60
  81bb84:	20bfc50e 	bge	r4,r2,81ba9c <__ieee754_atan2+0x1c8>
  81bb88:	0015883a 	mov	r10,zero
  81bb8c:	0017883a 	mov	r11,zero
  81bb90:	003fa106 	br	81ba18 <__ieee754_atan2+0x144>
  81bb94:	00800044 	movi	r2,1
  81bb98:	90801826 	beq	r18,r2,81bbfc <__ieee754_atan2+0x328>
  81bb9c:	14800e16 	blt	r2,r18,81bbd8 <__ieee754_atan2+0x304>
  81bba0:	903f931e 	bne	r18,zero,81b9f0 <__ieee754_atan2+0x11c>
  81bba4:	02151134 	movhi	r8,21572
  81bba8:	420b4604 	addi	r8,r8,11544
  81bbac:	024ffa74 	movhi	r9,16361
  81bbb0:	4a487ec4 	addi	r9,r9,8699
  81bbb4:	003f6706 	br	81b954 <__ieee754_atan2+0x80>
  81bbb8:	00800084 	movi	r2,2
  81bbbc:	90bfb126 	beq	r18,r2,81ba84 <__ieee754_atan2+0x1b0>
  81bbc0:	008000c4 	movi	r2,3
  81bbc4:	90bf8a1e 	bne	r18,r2,81b9f0 <__ieee754_atan2+0x11c>
  81bbc8:	003f7906 	br	81b9b0 <__ieee754_atan2+0xdc>
  81bbcc:	0011883a 	mov	r8,zero
  81bbd0:	02600034 	movhi	r9,32768
  81bbd4:	003f5f06 	br	81b954 <__ieee754_atan2+0x80>
  81bbd8:	00800084 	movi	r2,2
  81bbdc:	90800c26 	beq	r18,r2,81bc10 <__ieee754_atan2+0x33c>
  81bbe0:	008000c4 	movi	r2,3
  81bbe4:	90bf821e 	bne	r18,r2,81b9f0 <__ieee754_atan2+0x11c>
  81bbe8:	021fccf4 	movhi	r8,32563
  81bbec:	42087484 	addi	r8,r8,8658
  81bbf0:	027000f4 	movhi	r9,49155
  81bbf4:	4a765f04 	addi	r9,r9,-9860
  81bbf8:	003f5606 	br	81b954 <__ieee754_atan2+0x80>
  81bbfc:	02151134 	movhi	r8,21572
  81bc00:	420b4604 	addi	r8,r8,11544
  81bc04:	026ffa74 	movhi	r9,49129
  81bc08:	4a487ec4 	addi	r9,r9,8699
  81bc0c:	003f5106 	br	81b954 <__ieee754_atan2+0x80>
  81bc10:	021fccf4 	movhi	r8,32563
  81bc14:	42087484 	addi	r8,r8,8658
  81bc18:	025000f4 	movhi	r9,16387
  81bc1c:	4a765f04 	addi	r9,r9,-9860
  81bc20:	003f4c06 	br	81b954 <__ieee754_atan2+0x80>

0081bc24 <__ieee754_log>:
  81bc24:	deffe604 	addi	sp,sp,-104
  81bc28:	2015883a 	mov	r10,r4
  81bc2c:	01000434 	movhi	r4,16
  81bc30:	213fffc4 	addi	r4,r4,-1
  81bc34:	dfc01915 	stw	ra,100(sp)
  81bc38:	df001815 	stw	fp,96(sp)
  81bc3c:	ddc01715 	stw	r23,92(sp)
  81bc40:	dd801615 	stw	r22,88(sp)
  81bc44:	dd401515 	stw	r21,84(sp)
  81bc48:	dd001415 	stw	r20,80(sp)
  81bc4c:	dcc01315 	stw	r19,76(sp)
  81bc50:	dc801215 	stw	r18,72(sp)
  81bc54:	dc401115 	stw	r17,68(sp)
  81bc58:	dc001015 	stw	r16,64(sp)
  81bc5c:	2817883a 	mov	r11,r5
  81bc60:	2813883a 	mov	r9,r5
  81bc64:	2140190e 	bge	r4,r5,81bccc <__ieee754_log+0xa8>
  81bc68:	000d883a 	mov	r6,zero
  81bc6c:	009ffc34 	movhi	r2,32752
  81bc70:	10bfffc4 	addi	r2,r2,-1
  81bc74:	1240230e 	bge	r2,r9,81bd04 <__ieee754_log+0xe0>
  81bc78:	580f883a 	mov	r7,r11
  81bc7c:	5009883a 	mov	r4,r10
  81bc80:	580b883a 	mov	r5,r11
  81bc84:	500d883a 	mov	r6,r10
  81bc88:	081ffa00 	call	81ffa0 <__adddf3>
  81bc8c:	100d883a 	mov	r6,r2
  81bc90:	180f883a 	mov	r7,r3
  81bc94:	3005883a 	mov	r2,r6
  81bc98:	3807883a 	mov	r3,r7
  81bc9c:	dfc01917 	ldw	ra,100(sp)
  81bca0:	df001817 	ldw	fp,96(sp)
  81bca4:	ddc01717 	ldw	r23,92(sp)
  81bca8:	dd801617 	ldw	r22,88(sp)
  81bcac:	dd401517 	ldw	r21,84(sp)
  81bcb0:	dd001417 	ldw	r20,80(sp)
  81bcb4:	dcc01317 	ldw	r19,76(sp)
  81bcb8:	dc801217 	ldw	r18,72(sp)
  81bcbc:	dc401117 	ldw	r17,68(sp)
  81bcc0:	dc001017 	ldw	r16,64(sp)
  81bcc4:	dec01a04 	addi	sp,sp,104
  81bcc8:	f800283a 	ret
  81bccc:	00a00034 	movhi	r2,32768
  81bcd0:	10bfffc4 	addi	r2,r2,-1
  81bcd4:	2884703a 	and	r2,r5,r2
  81bcd8:	5084b03a 	or	r2,r10,r2
  81bcdc:	1000e31e 	bne	r2,zero,81c06c <__ieee754_log+0x448>
  81bce0:	00f0d434 	movhi	r3,50000
  81bce4:	000d883a 	mov	r6,zero
  81bce8:	000f883a 	mov	r7,zero
  81bcec:	180b883a 	mov	r5,r3
  81bcf0:	1009883a 	mov	r4,r2
  81bcf4:	08203d80 	call	8203d8 <__divdf3>
  81bcf8:	100d883a 	mov	r6,r2
  81bcfc:	180f883a 	mov	r7,r3
  81bd00:	003fe406 	br	81bc94 <__ieee754_log+0x70>
  81bd04:	04000434 	movhi	r16,16
  81bd08:	843fffc4 	addi	r16,r16,-1
  81bd0c:	4c38703a 	and	fp,r9,r16
  81bd10:	02000274 	movhi	r8,9
  81bd14:	4217d904 	addi	r8,r8,24420
  81bd18:	e211883a 	add	r8,fp,r8
  81bd1c:	4813d53a 	srai	r9,r9,20
  81bd20:	4200042c 	andhi	r8,r8,16
  81bd24:	41cffc3c 	xorhi	r7,r8,16368
  81bd28:	4011d53a 	srai	r8,r8,20
  81bd2c:	3253883a 	add	r9,r6,r9
  81bd30:	e1ceb03a 	or	r7,fp,r7
  81bd34:	0005883a 	mov	r2,zero
  81bd38:	00cffc34 	movhi	r3,16368
  81bd3c:	4a7f0044 	addi	r9,r9,-1023
  81bd40:	5009883a 	mov	r4,r10
  81bd44:	380b883a 	mov	r5,r7
  81bd48:	4a13883a 	add	r9,r9,r8
  81bd4c:	180f883a 	mov	r7,r3
  81bd50:	100d883a 	mov	r6,r2
  81bd54:	da400015 	stw	r9,0(sp)
  81bd58:	081ff200 	call	81ff20 <__subdf3>
  81bd5c:	d8c00b15 	stw	r3,44(sp)
  81bd60:	d9000b17 	ldw	r4,44(sp)
  81bd64:	e0c00084 	addi	r3,fp,2
  81bd68:	d8800a15 	stw	r2,40(sp)
  81bd6c:	d8800815 	stw	r2,32(sp)
  81bd70:	1c06703a 	and	r3,r3,r16
  81bd74:	00800084 	movi	r2,2
  81bd78:	d9000915 	stw	r4,36(sp)
  81bd7c:	10c0c70e 	bge	r2,r3,81c09c <__ieee754_log+0x478>
  81bd80:	d9000817 	ldw	r4,32(sp)
  81bd84:	d9400b17 	ldw	r5,44(sp)
  81bd88:	0005883a 	mov	r2,zero
  81bd8c:	00d00034 	movhi	r3,16384
  81bd90:	180f883a 	mov	r7,r3
  81bd94:	100d883a 	mov	r6,r2
  81bd98:	081ffa00 	call	81ffa0 <__adddf3>
  81bd9c:	d9400b17 	ldw	r5,44(sp)
  81bda0:	d9000817 	ldw	r4,32(sp)
  81bda4:	180f883a 	mov	r7,r3
  81bda8:	100d883a 	mov	r6,r2
  81bdac:	08203d80 	call	8203d8 <__divdf3>
  81bdb0:	d9000017 	ldw	r4,0(sp)
  81bdb4:	d8800c15 	stw	r2,48(sp)
  81bdb8:	d8c00d15 	stw	r3,52(sp)
  81bdbc:	d8800615 	stw	r2,24(sp)
  81bdc0:	08208500 	call	820850 <__floatsidf>
  81bdc4:	d9000d17 	ldw	r4,52(sp)
  81bdc8:	d9400d17 	ldw	r5,52(sp)
  81bdcc:	d8800e15 	stw	r2,56(sp)
  81bdd0:	d9000715 	stw	r4,28(sp)
  81bdd4:	d9000617 	ldw	r4,24(sp)
  81bdd8:	280f883a 	mov	r7,r5
  81bddc:	d8c00f15 	stw	r3,60(sp)
  81bde0:	200d883a 	mov	r6,r4
  81bde4:	08200140 	call	820014 <__muldf3>
  81bde8:	1009883a 	mov	r4,r2
  81bdec:	100d883a 	mov	r6,r2
  81bdf0:	d8800415 	stw	r2,16(sp)
  81bdf4:	00bffeb4 	movhi	r2,65530
  81bdf8:	10bae184 	addi	r2,r2,-5242
  81bdfc:	180b883a 	mov	r5,r3
  81be00:	180f883a 	mov	r7,r3
  81be04:	e085883a 	add	r2,fp,r2
  81be08:	182b883a 	mov	r21,r3
  81be0c:	d8c00515 	stw	r3,20(sp)
  81be10:	d8800115 	stw	r2,4(sp)
  81be14:	08200140 	call	820014 <__muldf3>
  81be18:	1021883a 	mov	r16,r2
  81be1c:	1823883a 	mov	r17,r3
  81be20:	00b41e74 	movhi	r2,53369
  81be24:	10b1a7c4 	addi	r2,r2,-14689
  81be28:	00cff134 	movhi	r3,16324
  81be2c:	18e68244 	addi	r3,r3,-26103
  81be30:	8009883a 	mov	r4,r16
  81be34:	880b883a 	mov	r5,r17
  81be38:	180f883a 	mov	r7,r3
  81be3c:	100d883a 	mov	r6,r2
  81be40:	08200140 	call	820014 <__muldf3>
  81be44:	020763b4 	movhi	r8,7566
  81be48:	421e2bc4 	addi	r8,r8,30895
  81be4c:	024ff334 	movhi	r9,16332
  81be50:	4a5c7144 	addi	r9,r9,29125
  81be54:	480f883a 	mov	r7,r9
  81be58:	400d883a 	mov	r6,r8
  81be5c:	180b883a 	mov	r5,r3
  81be60:	1009883a 	mov	r4,r2
  81be64:	081ffa00 	call	81ffa0 <__adddf3>
  81be68:	180f883a 	mov	r7,r3
  81be6c:	8009883a 	mov	r4,r16
  81be70:	880b883a 	mov	r5,r17
  81be74:	100d883a 	mov	r6,r2
  81be78:	08200140 	call	820014 <__muldf3>
  81be7c:	02266634 	movhi	r8,39320
  81be80:	423e8104 	addi	r8,r8,-1532
  81be84:	024ff6b4 	movhi	r9,16346
  81be88:	4a666644 	addi	r9,r9,-26215
  81be8c:	480f883a 	mov	r7,r9
  81be90:	400d883a 	mov	r6,r8
  81be94:	180b883a 	mov	r5,r3
  81be98:	1009883a 	mov	r4,r2
  81be9c:	081ffa00 	call	81ffa0 <__adddf3>
  81bea0:	180f883a 	mov	r7,r3
  81bea4:	8009883a 	mov	r4,r16
  81bea8:	880b883a 	mov	r5,r17
  81beac:	100d883a 	mov	r6,r2
  81beb0:	08200140 	call	820014 <__muldf3>
  81beb4:	0237cfb4 	movhi	r8,57150
  81beb8:	42149104 	addi	r8,r8,21060
  81bebc:	024ff0f4 	movhi	r9,16323
  81bec0:	4a7c4484 	addi	r9,r9,-3822
  81bec4:	480f883a 	mov	r7,r9
  81bec8:	8009883a 	mov	r4,r16
  81becc:	880b883a 	mov	r5,r17
  81bed0:	400d883a 	mov	r6,r8
  81bed4:	102d883a 	mov	r22,r2
  81bed8:	182f883a 	mov	r23,r3
  81bedc:	08200140 	call	820014 <__muldf3>
  81bee0:	0225b2f4 	movhi	r8,38603
  81bee4:	4200f784 	addi	r8,r8,990
  81bee8:	024ff1f4 	movhi	r9,16327
  81beec:	4a519904 	addi	r9,r9,18020
  81bef0:	480f883a 	mov	r7,r9
  81bef4:	400d883a 	mov	r6,r8
  81bef8:	180b883a 	mov	r5,r3
  81befc:	1009883a 	mov	r4,r2
  81bf00:	081ffa00 	call	81ffa0 <__adddf3>
  81bf04:	180f883a 	mov	r7,r3
  81bf08:	8009883a 	mov	r4,r16
  81bf0c:	880b883a 	mov	r5,r17
  81bf10:	100d883a 	mov	r6,r2
  81bf14:	08200140 	call	820014 <__muldf3>
  81bf18:	022508f4 	movhi	r8,37923
  81bf1c:	4224d644 	addi	r8,r8,-27815
  81bf20:	024ff4b4 	movhi	r9,16338
  81bf24:	4a524904 	addi	r9,r9,18724
  81bf28:	480f883a 	mov	r7,r9
  81bf2c:	400d883a 	mov	r6,r8
  81bf30:	180b883a 	mov	r5,r3
  81bf34:	1009883a 	mov	r4,r2
  81bf38:	081ffa00 	call	81ffa0 <__adddf3>
  81bf3c:	180f883a 	mov	r7,r3
  81bf40:	8009883a 	mov	r4,r16
  81bf44:	880b883a 	mov	r5,r17
  81bf48:	100d883a 	mov	r6,r2
  81bf4c:	08200140 	call	820014 <__muldf3>
  81bf50:	02155574 	movhi	r8,21845
  81bf54:	421564c4 	addi	r8,r8,21907
  81bf58:	024ff974 	movhi	r9,16357
  81bf5c:	4a555544 	addi	r9,r9,21845
  81bf60:	480f883a 	mov	r7,r9
  81bf64:	400d883a 	mov	r6,r8
  81bf68:	180b883a 	mov	r5,r3
  81bf6c:	1009883a 	mov	r4,r2
  81bf70:	081ffa00 	call	81ffa0 <__adddf3>
  81bf74:	d9000417 	ldw	r4,16(sp)
  81bf78:	a80b883a 	mov	r5,r21
  81bf7c:	180f883a 	mov	r7,r3
  81bf80:	100d883a 	mov	r6,r2
  81bf84:	08200140 	call	820014 <__muldf3>
  81bf88:	180f883a 	mov	r7,r3
  81bf8c:	b009883a 	mov	r4,r22
  81bf90:	b80b883a 	mov	r5,r23
  81bf94:	100d883a 	mov	r6,r2
  81bf98:	081ffa00 	call	81ffa0 <__adddf3>
  81bf9c:	d9000117 	ldw	r4,4(sp)
  81bfa0:	1021883a 	mov	r16,r2
  81bfa4:	008001f4 	movhi	r2,7
  81bfa8:	10ae1444 	addi	r2,r2,-18351
  81bfac:	1705c83a 	sub	r2,r2,fp
  81bfb0:	1823883a 	mov	r17,r3
  81bfb4:	2086b03a 	or	r3,r4,r2
  81bfb8:	d8800e17 	ldw	r2,56(sp)
  81bfbc:	d9000f17 	ldw	r4,60(sp)
  81bfc0:	d8800215 	stw	r2,8(sp)
  81bfc4:	d9000315 	stw	r4,12(sp)
  81bfc8:	00c0df0e 	bge	zero,r3,81c348 <__ieee754_log+0x724>
  81bfcc:	d9000817 	ldw	r4,32(sp)
  81bfd0:	d9400b17 	ldw	r5,44(sp)
  81bfd4:	0005883a 	mov	r2,zero
  81bfd8:	00cff834 	movhi	r3,16352
  81bfdc:	180f883a 	mov	r7,r3
  81bfe0:	100d883a 	mov	r6,r2
  81bfe4:	08200140 	call	820014 <__muldf3>
  81bfe8:	d9000817 	ldw	r4,32(sp)
  81bfec:	d9400b17 	ldw	r5,44(sp)
  81bff0:	180f883a 	mov	r7,r3
  81bff4:	100d883a 	mov	r6,r2
  81bff8:	08200140 	call	820014 <__muldf3>
  81bffc:	1029883a 	mov	r20,r2
  81c000:	d8800017 	ldw	r2,0(sp)
  81c004:	182b883a 	mov	r21,r3
  81c008:	1000971e 	bne	r2,zero,81c268 <__ieee754_log+0x644>
  81c00c:	8009883a 	mov	r4,r16
  81c010:	880b883a 	mov	r5,r17
  81c014:	a00d883a 	mov	r6,r20
  81c018:	180f883a 	mov	r7,r3
  81c01c:	081ffa00 	call	81ffa0 <__adddf3>
  81c020:	d9000617 	ldw	r4,24(sp)
  81c024:	d9400d17 	ldw	r5,52(sp)
  81c028:	180f883a 	mov	r7,r3
  81c02c:	100d883a 	mov	r6,r2
  81c030:	08200140 	call	820014 <__muldf3>
  81c034:	180f883a 	mov	r7,r3
  81c038:	a009883a 	mov	r4,r20
  81c03c:	a80b883a 	mov	r5,r21
  81c040:	100d883a 	mov	r6,r2
  81c044:	081ff200 	call	81ff20 <__subdf3>
  81c048:	d9000817 	ldw	r4,32(sp)
  81c04c:	d9400b17 	ldw	r5,44(sp)
  81c050:	1011883a 	mov	r8,r2
  81c054:	180f883a 	mov	r7,r3
  81c058:	400d883a 	mov	r6,r8
  81c05c:	081ff200 	call	81ff20 <__subdf3>
  81c060:	100d883a 	mov	r6,r2
  81c064:	180f883a 	mov	r7,r3
  81c068:	003f0a06 	br	81bc94 <__ieee754_log+0x70>
  81c06c:	28002f16 	blt	r5,zero,81c12c <__ieee754_log+0x508>
  81c070:	0005883a 	mov	r2,zero
  81c074:	00d0d434 	movhi	r3,17232
  81c078:	5009883a 	mov	r4,r10
  81c07c:	100d883a 	mov	r6,r2
  81c080:	180f883a 	mov	r7,r3
  81c084:	08200140 	call	820014 <__muldf3>
  81c088:	1015883a 	mov	r10,r2
  81c08c:	1813883a 	mov	r9,r3
  81c090:	1817883a 	mov	r11,r3
  81c094:	01bff284 	movi	r6,-54
  81c098:	003ef406 	br	81bc6c <__ieee754_log+0x48>
  81c09c:	d9000817 	ldw	r4,32(sp)
  81c0a0:	d9400b17 	ldw	r5,44(sp)
  81c0a4:	000d883a 	mov	r6,zero
  81c0a8:	000f883a 	mov	r7,zero
  81c0ac:	08206300 	call	820630 <__eqdf2>
  81c0b0:	1000271e 	bne	r2,zero,81c150 <__ieee754_log+0x52c>
  81c0b4:	d8800017 	ldw	r2,0(sp)
  81c0b8:	1000b026 	beq	r2,zero,81c37c <__ieee754_log+0x758>
  81c0bc:	d9000017 	ldw	r4,0(sp)
  81c0c0:	08208500 	call	820850 <__floatsidf>
  81c0c4:	1021883a 	mov	r16,r2
  81c0c8:	1823883a 	mov	r17,r3
  81c0cc:	00bfb834 	movhi	r2,65248
  81c0d0:	00cff9b4 	movhi	r3,16358
  81c0d4:	18cb9084 	addi	r3,r3,11842
  81c0d8:	8009883a 	mov	r4,r16
  81c0dc:	880b883a 	mov	r5,r17
  81c0e0:	180f883a 	mov	r7,r3
  81c0e4:	100d883a 	mov	r6,r2
  81c0e8:	08200140 	call	820014 <__muldf3>
  81c0ec:	020d5e74 	movhi	r8,13689
  81c0f0:	420f1d84 	addi	r8,r8,15478
  81c0f4:	024f7ab4 	movhi	r9,15850
  81c0f8:	4a4e7bc4 	addi	r9,r9,14831
  81c0fc:	8009883a 	mov	r4,r16
  81c100:	880b883a 	mov	r5,r17
  81c104:	480f883a 	mov	r7,r9
  81c108:	400d883a 	mov	r6,r8
  81c10c:	1021883a 	mov	r16,r2
  81c110:	1823883a 	mov	r17,r3
  81c114:	08200140 	call	820014 <__muldf3>
  81c118:	180f883a 	mov	r7,r3
  81c11c:	880b883a 	mov	r5,r17
  81c120:	8009883a 	mov	r4,r16
  81c124:	100d883a 	mov	r6,r2
  81c128:	003ed706 	br	81bc88 <__ieee754_log+0x64>
  81c12c:	280f883a 	mov	r7,r5
  81c130:	5009883a 	mov	r4,r10
  81c134:	500d883a 	mov	r6,r10
  81c138:	081ff200 	call	81ff20 <__subdf3>
  81c13c:	180b883a 	mov	r5,r3
  81c140:	000d883a 	mov	r6,zero
  81c144:	000f883a 	mov	r7,zero
  81c148:	1009883a 	mov	r4,r2
  81c14c:	003ee906 	br	81bcf4 <__ieee754_log+0xd0>
  81c150:	d9000817 	ldw	r4,32(sp)
  81c154:	d9400b17 	ldw	r5,44(sp)
  81c158:	200d883a 	mov	r6,r4
  81c15c:	280f883a 	mov	r7,r5
  81c160:	08200140 	call	820014 <__muldf3>
  81c164:	d9000817 	ldw	r4,32(sp)
  81c168:	d9400b17 	ldw	r5,44(sp)
  81c16c:	02155574 	movhi	r8,21845
  81c170:	42155544 	addi	r8,r8,21845
  81c174:	026ff574 	movhi	r9,49109
  81c178:	4a555544 	addi	r9,r9,21845
  81c17c:	480f883a 	mov	r7,r9
  81c180:	400d883a 	mov	r6,r8
  81c184:	1021883a 	mov	r16,r2
  81c188:	1823883a 	mov	r17,r3
  81c18c:	08200140 	call	820014 <__muldf3>
  81c190:	0011883a 	mov	r8,zero
  81c194:	024ff834 	movhi	r9,16352
  81c198:	480f883a 	mov	r7,r9
  81c19c:	400d883a 	mov	r6,r8
  81c1a0:	180b883a 	mov	r5,r3
  81c1a4:	1009883a 	mov	r4,r2
  81c1a8:	081ffa00 	call	81ffa0 <__adddf3>
  81c1ac:	180f883a 	mov	r7,r3
  81c1b0:	8009883a 	mov	r4,r16
  81c1b4:	880b883a 	mov	r5,r17
  81c1b8:	100d883a 	mov	r6,r2
  81c1bc:	08200140 	call	820014 <__muldf3>
  81c1c0:	d9000017 	ldw	r4,0(sp)
  81c1c4:	1029883a 	mov	r20,r2
  81c1c8:	182b883a 	mov	r21,r3
  81c1cc:	20005926 	beq	r4,zero,81c334 <__ieee754_log+0x710>
  81c1d0:	d9000017 	ldw	r4,0(sp)
  81c1d4:	08208500 	call	820850 <__floatsidf>
  81c1d8:	1021883a 	mov	r16,r2
  81c1dc:	1823883a 	mov	r17,r3
  81c1e0:	00bfb834 	movhi	r2,65248
  81c1e4:	00cff9b4 	movhi	r3,16358
  81c1e8:	18cb9084 	addi	r3,r3,11842
  81c1ec:	8009883a 	mov	r4,r16
  81c1f0:	880b883a 	mov	r5,r17
  81c1f4:	180f883a 	mov	r7,r3
  81c1f8:	100d883a 	mov	r6,r2
  81c1fc:	08200140 	call	820014 <__muldf3>
  81c200:	020d5e74 	movhi	r8,13689
  81c204:	420f1d84 	addi	r8,r8,15478
  81c208:	026f7ab4 	movhi	r9,48618
  81c20c:	4a4e7bc4 	addi	r9,r9,14831
  81c210:	400d883a 	mov	r6,r8
  81c214:	480f883a 	mov	r7,r9
  81c218:	8009883a 	mov	r4,r16
  81c21c:	880b883a 	mov	r5,r17
  81c220:	1021883a 	mov	r16,r2
  81c224:	1823883a 	mov	r17,r3
  81c228:	08200140 	call	820014 <__muldf3>
  81c22c:	180f883a 	mov	r7,r3
  81c230:	a009883a 	mov	r4,r20
  81c234:	a80b883a 	mov	r5,r21
  81c238:	100d883a 	mov	r6,r2
  81c23c:	081ffa00 	call	81ffa0 <__adddf3>
  81c240:	d9c00b17 	ldw	r7,44(sp)
  81c244:	d9800817 	ldw	r6,32(sp)
  81c248:	180b883a 	mov	r5,r3
  81c24c:	1009883a 	mov	r4,r2
  81c250:	081ff200 	call	81ff20 <__subdf3>
  81c254:	1011883a 	mov	r8,r2
  81c258:	880b883a 	mov	r5,r17
  81c25c:	180f883a 	mov	r7,r3
  81c260:	8009883a 	mov	r4,r16
  81c264:	003f7c06 	br	81c058 <__ieee754_log+0x434>
  81c268:	d9000217 	ldw	r4,8(sp)
  81c26c:	d9400f17 	ldw	r5,60(sp)
  81c270:	00bfb834 	movhi	r2,65248
  81c274:	00cff9b4 	movhi	r3,16358
  81c278:	18cb9084 	addi	r3,r3,11842
  81c27c:	180f883a 	mov	r7,r3
  81c280:	100d883a 	mov	r6,r2
  81c284:	08200140 	call	820014 <__muldf3>
  81c288:	8009883a 	mov	r4,r16
  81c28c:	880b883a 	mov	r5,r17
  81c290:	a00d883a 	mov	r6,r20
  81c294:	a80f883a 	mov	r7,r21
  81c298:	1025883a 	mov	r18,r2
  81c29c:	1827883a 	mov	r19,r3
  81c2a0:	081ffa00 	call	81ffa0 <__adddf3>
  81c2a4:	d9000617 	ldw	r4,24(sp)
  81c2a8:	d9400d17 	ldw	r5,52(sp)
  81c2ac:	180f883a 	mov	r7,r3
  81c2b0:	100d883a 	mov	r6,r2
  81c2b4:	08200140 	call	820014 <__muldf3>
  81c2b8:	d9000217 	ldw	r4,8(sp)
  81c2bc:	d9400f17 	ldw	r5,60(sp)
  81c2c0:	020d5e74 	movhi	r8,13689
  81c2c4:	420f1d84 	addi	r8,r8,15478
  81c2c8:	024f7ab4 	movhi	r9,15850
  81c2cc:	4a4e7bc4 	addi	r9,r9,14831
  81c2d0:	480f883a 	mov	r7,r9
  81c2d4:	400d883a 	mov	r6,r8
  81c2d8:	1021883a 	mov	r16,r2
  81c2dc:	1823883a 	mov	r17,r3
  81c2e0:	08200140 	call	820014 <__muldf3>
  81c2e4:	180f883a 	mov	r7,r3
  81c2e8:	880b883a 	mov	r5,r17
  81c2ec:	8009883a 	mov	r4,r16
  81c2f0:	100d883a 	mov	r6,r2
  81c2f4:	081ffa00 	call	81ffa0 <__adddf3>
  81c2f8:	180f883a 	mov	r7,r3
  81c2fc:	a009883a 	mov	r4,r20
  81c300:	a80b883a 	mov	r5,r21
  81c304:	100d883a 	mov	r6,r2
  81c308:	081ff200 	call	81ff20 <__subdf3>
  81c30c:	d9c00b17 	ldw	r7,44(sp)
  81c310:	d9800817 	ldw	r6,32(sp)
  81c314:	180b883a 	mov	r5,r3
  81c318:	1009883a 	mov	r4,r2
  81c31c:	081ff200 	call	81ff20 <__subdf3>
  81c320:	1011883a 	mov	r8,r2
  81c324:	980b883a 	mov	r5,r19
  81c328:	180f883a 	mov	r7,r3
  81c32c:	9009883a 	mov	r4,r18
  81c330:	003f4906 	br	81c058 <__ieee754_log+0x434>
  81c334:	d9000817 	ldw	r4,32(sp)
  81c338:	d9400b17 	ldw	r5,44(sp)
  81c33c:	100d883a 	mov	r6,r2
  81c340:	180f883a 	mov	r7,r3
  81c344:	003f4506 	br	81c05c <__ieee754_log+0x438>
  81c348:	d9000017 	ldw	r4,0(sp)
  81c34c:	20000e1e 	bne	r4,zero,81c388 <__ieee754_log+0x764>
  81c350:	d9000817 	ldw	r4,32(sp)
  81c354:	d9400b17 	ldw	r5,44(sp)
  81c358:	800d883a 	mov	r6,r16
  81c35c:	880f883a 	mov	r7,r17
  81c360:	081ff200 	call	81ff20 <__subdf3>
  81c364:	d9000617 	ldw	r4,24(sp)
  81c368:	d9400d17 	ldw	r5,52(sp)
  81c36c:	180f883a 	mov	r7,r3
  81c370:	100d883a 	mov	r6,r2
  81c374:	08200140 	call	820014 <__muldf3>
  81c378:	003f3306 	br	81c048 <__ieee754_log+0x424>
  81c37c:	000d883a 	mov	r6,zero
  81c380:	000f883a 	mov	r7,zero
  81c384:	003e4306 	br	81bc94 <__ieee754_log+0x70>
  81c388:	d9000217 	ldw	r4,8(sp)
  81c38c:	d9400f17 	ldw	r5,60(sp)
  81c390:	00bfb834 	movhi	r2,65248
  81c394:	00cff9b4 	movhi	r3,16358
  81c398:	18cb9084 	addi	r3,r3,11842
  81c39c:	180f883a 	mov	r7,r3
  81c3a0:	100d883a 	mov	r6,r2
  81c3a4:	08200140 	call	820014 <__muldf3>
  81c3a8:	d9000817 	ldw	r4,32(sp)
  81c3ac:	d9400b17 	ldw	r5,44(sp)
  81c3b0:	800d883a 	mov	r6,r16
  81c3b4:	880f883a 	mov	r7,r17
  81c3b8:	1025883a 	mov	r18,r2
  81c3bc:	1827883a 	mov	r19,r3
  81c3c0:	081ff200 	call	81ff20 <__subdf3>
  81c3c4:	d9000617 	ldw	r4,24(sp)
  81c3c8:	d9400d17 	ldw	r5,52(sp)
  81c3cc:	180f883a 	mov	r7,r3
  81c3d0:	100d883a 	mov	r6,r2
  81c3d4:	08200140 	call	820014 <__muldf3>
  81c3d8:	d9000217 	ldw	r4,8(sp)
  81c3dc:	d9400f17 	ldw	r5,60(sp)
  81c3e0:	020d5e74 	movhi	r8,13689
  81c3e4:	420f1d84 	addi	r8,r8,15478
  81c3e8:	026f7ab4 	movhi	r9,48618
  81c3ec:	4a4e7bc4 	addi	r9,r9,14831
  81c3f0:	480f883a 	mov	r7,r9
  81c3f4:	400d883a 	mov	r6,r8
  81c3f8:	1021883a 	mov	r16,r2
  81c3fc:	1823883a 	mov	r17,r3
  81c400:	08200140 	call	820014 <__muldf3>
  81c404:	180f883a 	mov	r7,r3
  81c408:	880b883a 	mov	r5,r17
  81c40c:	8009883a 	mov	r4,r16
  81c410:	100d883a 	mov	r6,r2
  81c414:	081ffa00 	call	81ffa0 <__adddf3>
  81c418:	003fbc06 	br	81c30c <__ieee754_log+0x6e8>

0081c41c <__ieee754_rem_pio2>:
  81c41c:	deffe304 	addi	sp,sp,-116
  81c420:	00a00034 	movhi	r2,32768
  81c424:	10bfffc4 	addi	r2,r2,-1
  81c428:	dd801915 	stw	r22,100(sp)
  81c42c:	28ac703a 	and	r22,r5,r2
  81c430:	008ffa74 	movhi	r2,16361
  81c434:	10887ec4 	addi	r2,r2,8699
  81c438:	df001b15 	stw	fp,108(sp)
  81c43c:	dfc01c15 	stw	ra,112(sp)
  81c440:	ddc01a15 	stw	r23,104(sp)
  81c444:	dd401815 	stw	r21,96(sp)
  81c448:	dd001715 	stw	r20,92(sp)
  81c44c:	dcc01615 	stw	r19,88(sp)
  81c450:	dc801515 	stw	r18,84(sp)
  81c454:	dc401415 	stw	r17,80(sp)
  81c458:	dc001315 	stw	r16,76(sp)
  81c45c:	2013883a 	mov	r9,r4
  81c460:	d9400a15 	stw	r5,40(sp)
  81c464:	3039883a 	mov	fp,r6
  81c468:	15801216 	blt	r2,r22,81c4b4 <__ieee754_rem_pio2+0x98>
  81c46c:	e1400115 	stw	r5,4(fp)
  81c470:	30000315 	stw	zero,12(r6)
  81c474:	e1000015 	stw	r4,0(fp)
  81c478:	d8000b15 	stw	zero,44(sp)
  81c47c:	30000215 	stw	zero,8(r6)
  81c480:	d8800b17 	ldw	r2,44(sp)
  81c484:	dfc01c17 	ldw	ra,112(sp)
  81c488:	df001b17 	ldw	fp,108(sp)
  81c48c:	ddc01a17 	ldw	r23,104(sp)
  81c490:	dd801917 	ldw	r22,100(sp)
  81c494:	dd401817 	ldw	r21,96(sp)
  81c498:	dd001717 	ldw	r20,92(sp)
  81c49c:	dcc01617 	ldw	r19,88(sp)
  81c4a0:	dc801517 	ldw	r18,84(sp)
  81c4a4:	dc401417 	ldw	r17,80(sp)
  81c4a8:	dc001317 	ldw	r16,76(sp)
  81c4ac:	dec01d04 	addi	sp,sp,116
  81c4b0:	f800283a 	ret
  81c4b4:	009000f4 	movhi	r2,16387
  81c4b8:	10b65ec4 	addi	r2,r2,-9861
  81c4bc:	15800f0e 	bge	r2,r22,81c4fc <__ieee754_rem_pio2+0xe0>
  81c4c0:	00904e74 	movhi	r2,16697
  81c4c4:	10887ec4 	addi	r2,r2,8699
  81c4c8:	1580330e 	bge	r2,r22,81c598 <__ieee754_rem_pio2+0x17c>
  81c4cc:	009ffc34 	movhi	r2,32752
  81c4d0:	10bfffc4 	addi	r2,r2,-1
  81c4d4:	1580fe0e 	bge	r2,r22,81c8d0 <__ieee754_rem_pio2+0x4b4>
  81c4d8:	280f883a 	mov	r7,r5
  81c4dc:	480d883a 	mov	r6,r9
  81c4e0:	081ff200 	call	81ff20 <__subdf3>
  81c4e4:	e0c00115 	stw	r3,4(fp)
  81c4e8:	d8000b15 	stw	zero,44(sp)
  81c4ec:	e0800015 	stw	r2,0(fp)
  81c4f0:	e0800215 	stw	r2,8(fp)
  81c4f4:	e0c00315 	stw	r3,12(fp)
  81c4f8:	003fe106 	br	81c480 <__ieee754_rem_pio2+0x64>
  81c4fc:	d9000a17 	ldw	r4,40(sp)
  81c500:	0100ce0e 	bge	zero,r4,81c83c <__ieee754_rem_pio2+0x420>
  81c504:	04151034 	movhi	r16,21568
  81c508:	044ffe74 	movhi	r17,16377
  81c50c:	8c487ec4 	addi	r17,r17,8699
  81c510:	4809883a 	mov	r4,r9
  81c514:	800d883a 	mov	r6,r16
  81c518:	880f883a 	mov	r7,r17
  81c51c:	081ff200 	call	81ff20 <__subdf3>
  81c520:	1025883a 	mov	r18,r2
  81c524:	1827883a 	mov	r19,r3
  81c528:	b4413c26 	beq	r22,r17,81ca1c <__ieee754_rem_pio2+0x600>
  81c52c:	040698b4 	movhi	r16,6754
  81c530:	8418cc44 	addi	r16,r16,25393
  81c534:	044f7474 	movhi	r17,15825
  81c538:	8c6d1844 	addi	r17,r17,-19359
  81c53c:	1009883a 	mov	r4,r2
  81c540:	180b883a 	mov	r5,r3
  81c544:	800d883a 	mov	r6,r16
  81c548:	880f883a 	mov	r7,r17
  81c54c:	081ff200 	call	81ff20 <__subdf3>
  81c550:	100d883a 	mov	r6,r2
  81c554:	9009883a 	mov	r4,r18
  81c558:	980b883a 	mov	r5,r19
  81c55c:	180f883a 	mov	r7,r3
  81c560:	e0800015 	stw	r2,0(fp)
  81c564:	e0c00115 	stw	r3,4(fp)
  81c568:	081ff200 	call	81ff20 <__subdf3>
  81c56c:	1009883a 	mov	r4,r2
  81c570:	800d883a 	mov	r6,r16
  81c574:	880f883a 	mov	r7,r17
  81c578:	180b883a 	mov	r5,r3
  81c57c:	081ff200 	call	81ff20 <__subdf3>
  81c580:	1009883a 	mov	r4,r2
  81c584:	00800044 	movi	r2,1
  81c588:	d8800b15 	stw	r2,44(sp)
  81c58c:	e0c00315 	stw	r3,12(fp)
  81c590:	e1000215 	stw	r4,8(fp)
  81c594:	003fba06 	br	81c480 <__ieee754_rem_pio2+0x64>
  81c598:	081ec640 	call	81ec64 <fabs>
  81c59c:	021b72b4 	movhi	r8,28106
  81c5a0:	423220c4 	addi	r8,r8,-14205
  81c5a4:	024ff934 	movhi	r9,16356
  81c5a8:	4a57cc04 	addi	r9,r9,24368
  81c5ac:	480f883a 	mov	r7,r9
  81c5b0:	400d883a 	mov	r6,r8
  81c5b4:	1009883a 	mov	r4,r2
  81c5b8:	180b883a 	mov	r5,r3
  81c5bc:	1025883a 	mov	r18,r2
  81c5c0:	1827883a 	mov	r19,r3
  81c5c4:	08200140 	call	820014 <__muldf3>
  81c5c8:	0011883a 	mov	r8,zero
  81c5cc:	024ff834 	movhi	r9,16352
  81c5d0:	480f883a 	mov	r7,r9
  81c5d4:	400d883a 	mov	r6,r8
  81c5d8:	180b883a 	mov	r5,r3
  81c5dc:	1009883a 	mov	r4,r2
  81c5e0:	081ffa00 	call	81ffa0 <__adddf3>
  81c5e4:	180b883a 	mov	r5,r3
  81c5e8:	1009883a 	mov	r4,r2
  81c5ec:	08209480 	call	820948 <__fixdfsi>
  81c5f0:	1009883a 	mov	r4,r2
  81c5f4:	d8800b15 	stw	r2,44(sp)
  81c5f8:	08208500 	call	820850 <__floatsidf>
  81c5fc:	1823883a 	mov	r17,r3
  81c600:	1009883a 	mov	r4,r2
  81c604:	d8800c15 	stw	r2,48(sp)
  81c608:	00effe74 	movhi	r3,49145
  81c60c:	18c87ec4 	addi	r3,r3,8699
  81c610:	00951034 	movhi	r2,21568
  81c614:	880b883a 	mov	r5,r17
  81c618:	180f883a 	mov	r7,r3
  81c61c:	100d883a 	mov	r6,r2
  81c620:	dc400d15 	stw	r17,52(sp)
  81c624:	08200140 	call	820014 <__muldf3>
  81c628:	180f883a 	mov	r7,r3
  81c62c:	980b883a 	mov	r5,r19
  81c630:	9009883a 	mov	r4,r18
  81c634:	100d883a 	mov	r6,r2
  81c638:	081ffa00 	call	81ffa0 <__adddf3>
  81c63c:	d9000c17 	ldw	r4,48(sp)
  81c640:	020698b4 	movhi	r8,6754
  81c644:	4218cc44 	addi	r8,r8,25393
  81c648:	024f7474 	movhi	r9,15825
  81c64c:	4a6d1844 	addi	r9,r9,-19359
  81c650:	880b883a 	mov	r5,r17
  81c654:	480f883a 	mov	r7,r9
  81c658:	400d883a 	mov	r6,r8
  81c65c:	1025883a 	mov	r18,r2
  81c660:	1827883a 	mov	r19,r3
  81c664:	08200140 	call	820014 <__muldf3>
  81c668:	d9000b17 	ldw	r4,44(sp)
  81c66c:	100f883a 	mov	r7,r2
  81c670:	1811883a 	mov	r8,r3
  81c674:	008007c4 	movi	r2,31
  81c678:	dc800e15 	stw	r18,56(sp)
  81c67c:	3821883a 	mov	r16,r7
  81c680:	dcc00f15 	stw	r19,60(sp)
  81c684:	4023883a 	mov	r17,r8
  81c688:	11010a0e 	bge	r2,r4,81cab4 <__ieee754_rem_pio2+0x698>
  81c68c:	d9000e17 	ldw	r4,56(sp)
  81c690:	d9400f17 	ldw	r5,60(sp)
  81c694:	800d883a 	mov	r6,r16
  81c698:	880f883a 	mov	r7,r17
  81c69c:	081ff200 	call	81ff20 <__subdf3>
  81c6a0:	1810d53a 	srli	r8,r3,20
  81c6a4:	b02dd53a 	srai	r22,r22,20
  81c6a8:	1009883a 	mov	r4,r2
  81c6ac:	4201ffcc 	andi	r8,r8,2047
  81c6b0:	180b883a 	mov	r5,r3
  81c6b4:	b211c83a 	sub	r8,r22,r8
  81c6b8:	00800404 	movi	r2,16
  81c6bc:	dd801015 	stw	r22,64(sp)
  81c6c0:	e1000015 	stw	r4,0(fp)
  81c6c4:	e1400115 	stw	r5,4(fp)
  81c6c8:	1200430e 	bge	r2,r8,81c7d8 <__ieee754_rem_pio2+0x3bc>
  81c6cc:	d9000c17 	ldw	r4,48(sp)
  81c6d0:	d9400d17 	ldw	r5,52(sp)
  81c6d4:	00869834 	movhi	r2,6752
  81c6d8:	00cf7474 	movhi	r3,15825
  81c6dc:	18ed1844 	addi	r3,r3,-19359
  81c6e0:	180f883a 	mov	r7,r3
  81c6e4:	100d883a 	mov	r6,r2
  81c6e8:	08200140 	call	820014 <__muldf3>
  81c6ec:	d9000e17 	ldw	r4,56(sp)
  81c6f0:	d9400f17 	ldw	r5,60(sp)
  81c6f4:	100d883a 	mov	r6,r2
  81c6f8:	180f883a 	mov	r7,r3
  81c6fc:	1025883a 	mov	r18,r2
  81c700:	1827883a 	mov	r19,r3
  81c704:	081ff200 	call	81ff20 <__subdf3>
  81c708:	d9000c17 	ldw	r4,48(sp)
  81c70c:	d9400d17 	ldw	r5,52(sp)
  81c710:	058b80f4 	movhi	r22,11779
  81c714:	b59c1cc4 	addi	r22,r22,28787
  81c718:	05cee8f4 	movhi	r23,15267
  81c71c:	bdc66284 	addi	r23,r23,6538
  81c720:	b00d883a 	mov	r6,r22
  81c724:	b80f883a 	mov	r7,r23
  81c728:	d8801115 	stw	r2,68(sp)
  81c72c:	d8c01215 	stw	r3,72(sp)
  81c730:	d8800815 	stw	r2,32(sp)
  81c734:	08200140 	call	820014 <__muldf3>
  81c738:	d9001217 	ldw	r4,72(sp)
  81c73c:	d9400f17 	ldw	r5,60(sp)
  81c740:	d9800817 	ldw	r6,32(sp)
  81c744:	d9000915 	stw	r4,36(sp)
  81c748:	d9c01217 	ldw	r7,72(sp)
  81c74c:	d9000e17 	ldw	r4,56(sp)
  81c750:	1021883a 	mov	r16,r2
  81c754:	1823883a 	mov	r17,r3
  81c758:	081ff200 	call	81ff20 <__subdf3>
  81c75c:	180b883a 	mov	r5,r3
  81c760:	900d883a 	mov	r6,r18
  81c764:	980f883a 	mov	r7,r19
  81c768:	1009883a 	mov	r4,r2
  81c76c:	081ff200 	call	81ff20 <__subdf3>
  81c770:	180f883a 	mov	r7,r3
  81c774:	880b883a 	mov	r5,r17
  81c778:	8009883a 	mov	r4,r16
  81c77c:	100d883a 	mov	r6,r2
  81c780:	081ff200 	call	81ff20 <__subdf3>
  81c784:	d9000817 	ldw	r4,32(sp)
  81c788:	d9401217 	ldw	r5,72(sp)
  81c78c:	180f883a 	mov	r7,r3
  81c790:	100d883a 	mov	r6,r2
  81c794:	1021883a 	mov	r16,r2
  81c798:	1823883a 	mov	r17,r3
  81c79c:	081ff200 	call	81ff20 <__subdf3>
  81c7a0:	1810d53a 	srli	r8,r3,20
  81c7a4:	1009883a 	mov	r4,r2
  81c7a8:	d8801017 	ldw	r2,64(sp)
  81c7ac:	4201ffcc 	andi	r8,r8,2047
  81c7b0:	180b883a 	mov	r5,r3
  81c7b4:	1211c83a 	sub	r8,r2,r8
  81c7b8:	00800c44 	movi	r2,49
  81c7bc:	e1000015 	stw	r4,0(fp)
  81c7c0:	e1400115 	stw	r5,4(fp)
  81c7c4:	1200f016 	blt	r2,r8,81cb88 <__ieee754_rem_pio2+0x76c>
  81c7c8:	d8c00817 	ldw	r3,32(sp)
  81c7cc:	d9001217 	ldw	r4,72(sp)
  81c7d0:	d8c00e15 	stw	r3,56(sp)
  81c7d4:	d9000f15 	stw	r4,60(sp)
  81c7d8:	e1800017 	ldw	r6,0(fp)
  81c7dc:	e1c00117 	ldw	r7,4(fp)
  81c7e0:	d9400f17 	ldw	r5,60(sp)
  81c7e4:	d9000e17 	ldw	r4,56(sp)
  81c7e8:	081ff200 	call	81ff20 <__subdf3>
  81c7ec:	180b883a 	mov	r5,r3
  81c7f0:	800d883a 	mov	r6,r16
  81c7f4:	880f883a 	mov	r7,r17
  81c7f8:	1009883a 	mov	r4,r2
  81c7fc:	081ff200 	call	81ff20 <__subdf3>
  81c800:	d9400a17 	ldw	r5,40(sp)
  81c804:	e0800215 	stw	r2,8(fp)
  81c808:	e1800204 	addi	r6,fp,8
  81c80c:	30c00115 	stw	r3,4(r6)
  81c810:	283f1b0e 	bge	r5,zero,81c480 <__ieee754_rem_pio2+0x64>
  81c814:	e0c00117 	ldw	r3,4(fp)
  81c818:	d8800b17 	ldw	r2,44(sp)
  81c81c:	18e0003c 	xorhi	r3,r3,32768
  81c820:	0085c83a 	sub	r2,zero,r2
  81c824:	e0c00115 	stw	r3,4(fp)
  81c828:	d8800b15 	stw	r2,44(sp)
  81c82c:	30800117 	ldw	r2,4(r6)
  81c830:	10a0003c 	xorhi	r2,r2,32768
  81c834:	30800115 	stw	r2,4(r6)
  81c838:	003f1106 	br	81c480 <__ieee754_rem_pio2+0x64>
  81c83c:	04151034 	movhi	r16,21568
  81c840:	044ffe74 	movhi	r17,16377
  81c844:	8c487ec4 	addi	r17,r17,8699
  81c848:	4809883a 	mov	r4,r9
  81c84c:	800d883a 	mov	r6,r16
  81c850:	880f883a 	mov	r7,r17
  81c854:	081ffa00 	call	81ffa0 <__adddf3>
  81c858:	1025883a 	mov	r18,r2
  81c85c:	1827883a 	mov	r19,r3
  81c860:	b440a326 	beq	r22,r17,81caf0 <__ieee754_rem_pio2+0x6d4>
  81c864:	040698b4 	movhi	r16,6754
  81c868:	8418cc44 	addi	r16,r16,25393
  81c86c:	044f7474 	movhi	r17,15825
  81c870:	8c6d1844 	addi	r17,r17,-19359
  81c874:	1009883a 	mov	r4,r2
  81c878:	180b883a 	mov	r5,r3
  81c87c:	800d883a 	mov	r6,r16
  81c880:	880f883a 	mov	r7,r17
  81c884:	081ffa00 	call	81ffa0 <__adddf3>
  81c888:	100d883a 	mov	r6,r2
  81c88c:	9009883a 	mov	r4,r18
  81c890:	980b883a 	mov	r5,r19
  81c894:	180f883a 	mov	r7,r3
  81c898:	e0800015 	stw	r2,0(fp)
  81c89c:	e0c00115 	stw	r3,4(fp)
  81c8a0:	081ff200 	call	81ff20 <__subdf3>
  81c8a4:	1009883a 	mov	r4,r2
  81c8a8:	800d883a 	mov	r6,r16
  81c8ac:	880f883a 	mov	r7,r17
  81c8b0:	180b883a 	mov	r5,r3
  81c8b4:	081ffa00 	call	81ffa0 <__adddf3>
  81c8b8:	1009883a 	mov	r4,r2
  81c8bc:	00bfffc4 	movi	r2,-1
  81c8c0:	d8800b15 	stw	r2,44(sp)
  81c8c4:	e0c00315 	stw	r3,12(fp)
  81c8c8:	e1000215 	stw	r4,8(fp)
  81c8cc:	003eec06 	br	81c480 <__ieee754_rem_pio2+0x64>
  81c8d0:	b005d53a 	srai	r2,r22,20
  81c8d4:	4821883a 	mov	r16,r9
  81c8d8:	05505c34 	movhi	r21,16752
  81c8dc:	15fefa84 	addi	r23,r2,-1046
  81c8e0:	b826953a 	slli	r19,r23,20
  81c8e4:	0029883a 	mov	r20,zero
  81c8e8:	048000c4 	movi	r18,3
  81c8ec:	b4e7c83a 	sub	r19,r22,r19
  81c8f0:	980b883a 	mov	r5,r19
  81c8f4:	08209480 	call	820948 <__fixdfsi>
  81c8f8:	1009883a 	mov	r4,r2
  81c8fc:	08208500 	call	820850 <__floatsidf>
  81c900:	980b883a 	mov	r5,r19
  81c904:	8009883a 	mov	r4,r16
  81c908:	180f883a 	mov	r7,r3
  81c90c:	100d883a 	mov	r6,r2
  81c910:	d8800215 	stw	r2,8(sp)
  81c914:	d8c00315 	stw	r3,12(sp)
  81c918:	081ff200 	call	81ff20 <__subdf3>
  81c91c:	180b883a 	mov	r5,r3
  81c920:	a00d883a 	mov	r6,r20
  81c924:	a80f883a 	mov	r7,r21
  81c928:	1009883a 	mov	r4,r2
  81c92c:	08200140 	call	820014 <__muldf3>
  81c930:	180b883a 	mov	r5,r3
  81c934:	1009883a 	mov	r4,r2
  81c938:	1823883a 	mov	r17,r3
  81c93c:	1021883a 	mov	r16,r2
  81c940:	08209480 	call	820948 <__fixdfsi>
  81c944:	1009883a 	mov	r4,r2
  81c948:	08208500 	call	820850 <__floatsidf>
  81c94c:	880b883a 	mov	r5,r17
  81c950:	8009883a 	mov	r4,r16
  81c954:	180f883a 	mov	r7,r3
  81c958:	100d883a 	mov	r6,r2
  81c95c:	d8800415 	stw	r2,16(sp)
  81c960:	d8c00515 	stw	r3,20(sp)
  81c964:	081ff200 	call	81ff20 <__subdf3>
  81c968:	180b883a 	mov	r5,r3
  81c96c:	000d883a 	mov	r6,zero
  81c970:	a80f883a 	mov	r7,r21
  81c974:	1009883a 	mov	r4,r2
  81c978:	08200140 	call	820014 <__muldf3>
  81c97c:	d8c00715 	stw	r3,28(sp)
  81c980:	d8800615 	stw	r2,24(sp)
  81c984:	00000106 	br	81c98c <__ieee754_rem_pio2+0x570>
  81c988:	8025883a 	mov	r18,r16
  81c98c:	943fffc4 	addi	r16,r18,-1
  81c990:	800890fa 	slli	r4,r16,3
  81c994:	d9400204 	addi	r5,sp,8
  81c998:	000d883a 	mov	r6,zero
  81c99c:	2149883a 	add	r4,r4,r5
  81c9a0:	20c00117 	ldw	r3,4(r4)
  81c9a4:	20800017 	ldw	r2,0(r4)
  81c9a8:	000f883a 	mov	r7,zero
  81c9ac:	180b883a 	mov	r5,r3
  81c9b0:	1009883a 	mov	r4,r2
  81c9b4:	08206300 	call	820630 <__eqdf2>
  81c9b8:	103ff326 	beq	r2,zero,81c988 <__ieee754_rem_pio2+0x56c>
  81c9bc:	00800084 	movi	r2,2
  81c9c0:	00c02134 	movhi	r3,132
  81c9c4:	18f9d404 	addi	r3,r3,-6320
  81c9c8:	b80d883a 	mov	r6,r23
  81c9cc:	900f883a 	mov	r7,r18
  81c9d0:	d9000204 	addi	r4,sp,8
  81c9d4:	e00b883a 	mov	r5,fp
  81c9d8:	d8800015 	stw	r2,0(sp)
  81c9dc:	d8c00115 	stw	r3,4(sp)
  81c9e0:	081d4380 	call	81d438 <__kernel_rem_pio2>
  81c9e4:	d8800b15 	stw	r2,44(sp)
  81c9e8:	d8800a17 	ldw	r2,40(sp)
  81c9ec:	103ea40e 	bge	r2,zero,81c480 <__ieee754_rem_pio2+0x64>
  81c9f0:	e0800117 	ldw	r2,4(fp)
  81c9f4:	d8c00b17 	ldw	r3,44(sp)
  81c9f8:	e1000204 	addi	r4,fp,8
  81c9fc:	10a0003c 	xorhi	r2,r2,32768
  81ca00:	00c7c83a 	sub	r3,zero,r3
  81ca04:	e0800115 	stw	r2,4(fp)
  81ca08:	d8c00b15 	stw	r3,44(sp)
  81ca0c:	20c00117 	ldw	r3,4(r4)
  81ca10:	18e0003c 	xorhi	r3,r3,32768
  81ca14:	20c00115 	stw	r3,4(r4)
  81ca18:	003e9906 	br	81c480 <__ieee754_rem_pio2+0x64>
  81ca1c:	00869834 	movhi	r2,6752
  81ca20:	00cf7474 	movhi	r3,15825
  81ca24:	18ed1844 	addi	r3,r3,-19359
  81ca28:	9009883a 	mov	r4,r18
  81ca2c:	980b883a 	mov	r5,r19
  81ca30:	180f883a 	mov	r7,r3
  81ca34:	100d883a 	mov	r6,r2
  81ca38:	081ff200 	call	81ff20 <__subdf3>
  81ca3c:	048b80f4 	movhi	r18,11779
  81ca40:	949c1cc4 	addi	r18,r18,28787
  81ca44:	04cee8f4 	movhi	r19,15267
  81ca48:	9cc66284 	addi	r19,r19,6538
  81ca4c:	1009883a 	mov	r4,r2
  81ca50:	180b883a 	mov	r5,r3
  81ca54:	900d883a 	mov	r6,r18
  81ca58:	980f883a 	mov	r7,r19
  81ca5c:	1021883a 	mov	r16,r2
  81ca60:	1823883a 	mov	r17,r3
  81ca64:	081ff200 	call	81ff20 <__subdf3>
  81ca68:	100d883a 	mov	r6,r2
  81ca6c:	8009883a 	mov	r4,r16
  81ca70:	880b883a 	mov	r5,r17
  81ca74:	180f883a 	mov	r7,r3
  81ca78:	e0800015 	stw	r2,0(fp)
  81ca7c:	e0c00115 	stw	r3,4(fp)
  81ca80:	081ff200 	call	81ff20 <__subdf3>
  81ca84:	180b883a 	mov	r5,r3
  81ca88:	1009883a 	mov	r4,r2
  81ca8c:	900d883a 	mov	r6,r18
  81ca90:	980f883a 	mov	r7,r19
  81ca94:	081ff200 	call	81ff20 <__subdf3>
  81ca98:	180b883a 	mov	r5,r3
  81ca9c:	1009883a 	mov	r4,r2
  81caa0:	00c00044 	movi	r3,1
  81caa4:	d8c00b15 	stw	r3,44(sp)
  81caa8:	e1400315 	stw	r5,12(fp)
  81caac:	e1000215 	stw	r4,8(fp)
  81cab0:	003e7306 	br	81c480 <__ieee754_rem_pio2+0x64>
  81cab4:	2105883a 	add	r2,r4,r4
  81cab8:	1085883a 	add	r2,r2,r2
  81cabc:	00c02134 	movhi	r3,132
  81cac0:	18f9b404 	addi	r3,r3,-6448
  81cac4:	10c5883a 	add	r2,r2,r3
  81cac8:	113fff17 	ldw	r4,-4(r2)
  81cacc:	b13eef26 	beq	r22,r4,81c68c <__ieee754_rem_pio2+0x270>
  81cad0:	980b883a 	mov	r5,r19
  81cad4:	400f883a 	mov	r7,r8
  81cad8:	9009883a 	mov	r4,r18
  81cadc:	800d883a 	mov	r6,r16
  81cae0:	081ff200 	call	81ff20 <__subdf3>
  81cae4:	e0c00115 	stw	r3,4(fp)
  81cae8:	e0800015 	stw	r2,0(fp)
  81caec:	003f3a06 	br	81c7d8 <__ieee754_rem_pio2+0x3bc>
  81caf0:	00869834 	movhi	r2,6752
  81caf4:	00cf7474 	movhi	r3,15825
  81caf8:	18ed1844 	addi	r3,r3,-19359
  81cafc:	9009883a 	mov	r4,r18
  81cb00:	980b883a 	mov	r5,r19
  81cb04:	180f883a 	mov	r7,r3
  81cb08:	100d883a 	mov	r6,r2
  81cb0c:	081ffa00 	call	81ffa0 <__adddf3>
  81cb10:	048b80f4 	movhi	r18,11779
  81cb14:	949c1cc4 	addi	r18,r18,28787
  81cb18:	04cee8f4 	movhi	r19,15267
  81cb1c:	9cc66284 	addi	r19,r19,6538
  81cb20:	1009883a 	mov	r4,r2
  81cb24:	180b883a 	mov	r5,r3
  81cb28:	900d883a 	mov	r6,r18
  81cb2c:	980f883a 	mov	r7,r19
  81cb30:	1021883a 	mov	r16,r2
  81cb34:	1823883a 	mov	r17,r3
  81cb38:	081ffa00 	call	81ffa0 <__adddf3>
  81cb3c:	100d883a 	mov	r6,r2
  81cb40:	8009883a 	mov	r4,r16
  81cb44:	880b883a 	mov	r5,r17
  81cb48:	180f883a 	mov	r7,r3
  81cb4c:	e0800015 	stw	r2,0(fp)
  81cb50:	e0c00115 	stw	r3,4(fp)
  81cb54:	081ff200 	call	81ff20 <__subdf3>
  81cb58:	180b883a 	mov	r5,r3
  81cb5c:	1009883a 	mov	r4,r2
  81cb60:	900d883a 	mov	r6,r18
  81cb64:	980f883a 	mov	r7,r19
  81cb68:	081ffa00 	call	81ffa0 <__adddf3>
  81cb6c:	180b883a 	mov	r5,r3
  81cb70:	1009883a 	mov	r4,r2
  81cb74:	00ffffc4 	movi	r3,-1
  81cb78:	d8c00b15 	stw	r3,44(sp)
  81cb7c:	e1400315 	stw	r5,12(fp)
  81cb80:	e1000215 	stw	r4,8(fp)
  81cb84:	003e3e06 	br	81c480 <__ieee754_rem_pio2+0x64>
  81cb88:	d9000c17 	ldw	r4,48(sp)
  81cb8c:	d9400d17 	ldw	r5,52(sp)
  81cb90:	018b8034 	movhi	r6,11776
  81cb94:	b80f883a 	mov	r7,r23
  81cb98:	08200140 	call	820014 <__muldf3>
  81cb9c:	d9000817 	ldw	r4,32(sp)
  81cba0:	d9401217 	ldw	r5,72(sp)
  81cba4:	100d883a 	mov	r6,r2
  81cba8:	180f883a 	mov	r7,r3
  81cbac:	1025883a 	mov	r18,r2
  81cbb0:	1827883a 	mov	r19,r3
  81cbb4:	081ff200 	call	81ff20 <__subdf3>
  81cbb8:	d9400d17 	ldw	r5,52(sp)
  81cbbc:	d9000c17 	ldw	r4,48(sp)
  81cbc0:	02094834 	movhi	r8,9504
  81cbc4:	42127044 	addi	r8,r8,18881
  81cbc8:	024e5f34 	movhi	r9,14716
  81cbcc:	4a60e684 	addi	r9,r9,-31846
  81cbd0:	480f883a 	mov	r7,r9
  81cbd4:	400d883a 	mov	r6,r8
  81cbd8:	182b883a 	mov	r21,r3
  81cbdc:	d8800e15 	stw	r2,56(sp)
  81cbe0:	08200140 	call	820014 <__muldf3>
  81cbe4:	d9000817 	ldw	r4,32(sp)
  81cbe8:	d9401217 	ldw	r5,72(sp)
  81cbec:	d9800e17 	ldw	r6,56(sp)
  81cbf0:	a80f883a 	mov	r7,r21
  81cbf4:	1021883a 	mov	r16,r2
  81cbf8:	1823883a 	mov	r17,r3
  81cbfc:	dd400f15 	stw	r21,60(sp)
  81cc00:	081ff200 	call	81ff20 <__subdf3>
  81cc04:	180b883a 	mov	r5,r3
  81cc08:	900d883a 	mov	r6,r18
  81cc0c:	980f883a 	mov	r7,r19
  81cc10:	1009883a 	mov	r4,r2
  81cc14:	081ff200 	call	81ff20 <__subdf3>
  81cc18:	180f883a 	mov	r7,r3
  81cc1c:	880b883a 	mov	r5,r17
  81cc20:	8009883a 	mov	r4,r16
  81cc24:	100d883a 	mov	r6,r2
  81cc28:	081ff200 	call	81ff20 <__subdf3>
  81cc2c:	d9000e17 	ldw	r4,56(sp)
  81cc30:	1021883a 	mov	r16,r2
  81cc34:	1823883a 	mov	r17,r3
  81cc38:	a80b883a 	mov	r5,r21
  81cc3c:	180f883a 	mov	r7,r3
  81cc40:	003fa606 	br	81cadc <__ieee754_rem_pio2+0x6c0>

0081cc44 <__ieee754_sqrt>:
  81cc44:	defffd04 	addi	sp,sp,-12
  81cc48:	dc000015 	stw	r16,0(sp)
  81cc4c:	009ffc34 	movhi	r2,32752
  81cc50:	2021883a 	mov	r16,r4
  81cc54:	291ffc2c 	andhi	r4,r5,32752
  81cc58:	dc400115 	stw	r17,4(sp)
  81cc5c:	dfc00215 	stw	ra,8(sp)
  81cc60:	2823883a 	mov	r17,r5
  81cc64:	280f883a 	mov	r7,r5
  81cc68:	2807883a 	mov	r3,r5
  81cc6c:	8011883a 	mov	r8,r16
  81cc70:	20807d26 	beq	r4,r2,81ce68 <__ieee754_sqrt+0x224>
  81cc74:	01408d0e 	bge	zero,r5,81ceac <__ieee754_sqrt+0x268>
  81cc78:	380dd53a 	srai	r6,r7,20
  81cc7c:	3000131e 	bne	r6,zero,81cccc <__ieee754_sqrt+0x88>
  81cc80:	1800041e 	bne	r3,zero,81cc94 <__ieee754_sqrt+0x50>
  81cc84:	400ed2fa 	srli	r7,r8,11
  81cc88:	31bffac4 	addi	r6,r6,-21
  81cc8c:	4010957a 	slli	r8,r8,21
  81cc90:	383ffc26 	beq	r7,zero,81cc84 <__ieee754_sqrt+0x40>
  81cc94:	3880042c 	andhi	r2,r7,16
  81cc98:	1000991e 	bne	r2,zero,81cf00 <__ieee754_sqrt+0x2bc>
  81cc9c:	0009883a 	mov	r4,zero
  81cca0:	39cf883a 	add	r7,r7,r7
  81cca4:	3880042c 	andhi	r2,r7,16
  81cca8:	21000044 	addi	r4,r4,1
  81ccac:	103ffc26 	beq	r2,zero,81cca0 <__ieee754_sqrt+0x5c>
  81ccb0:	00800804 	movi	r2,32
  81ccb4:	1105c83a 	sub	r2,r2,r4
  81ccb8:	4086d83a 	srl	r3,r8,r2
  81ccbc:	4110983a 	sll	r8,r8,r4
  81ccc0:	3105c83a 	sub	r2,r6,r4
  81ccc4:	38ceb03a 	or	r7,r7,r3
  81ccc8:	11800044 	addi	r6,r2,1
  81cccc:	31bf0044 	addi	r6,r6,-1023
  81ccd0:	30c0004c 	andi	r3,r6,1
  81ccd4:	00800434 	movhi	r2,16
  81ccd8:	10bfffc4 	addi	r2,r2,-1
  81ccdc:	3884703a 	and	r2,r7,r2
  81cce0:	1807003a 	cmpeq	r3,r3,zero
  81cce4:	11000434 	orhi	r4,r2,16
  81cce8:	18005426 	beq	r3,zero,81ce3c <__ieee754_sqrt+0x1f8>
  81ccec:	4004d7fa 	srli	r2,r8,31
  81ccf0:	4207883a 	add	r3,r8,r8
  81ccf4:	02800834 	movhi	r10,32
  81ccf8:	1105883a 	add	r2,r2,r4
  81ccfc:	2089883a 	add	r4,r4,r2
  81cd00:	0011883a 	mov	r8,zero
  81cd04:	000b883a 	mov	r5,zero
  81cd08:	0013883a 	mov	r9,zero
  81cd0c:	02c00584 	movi	r11,22
  81cd10:	520f883a 	add	r7,r10,r8
  81cd14:	1804d7fa 	srli	r2,r3,31
  81cd18:	4a400044 	addi	r9,r9,1
  81cd1c:	18c7883a 	add	r3,r3,r3
  81cd20:	21c00316 	blt	r4,r7,81cd30 <__ieee754_sqrt+0xec>
  81cd24:	21c9c83a 	sub	r4,r4,r7
  81cd28:	2a8b883a 	add	r5,r5,r10
  81cd2c:	51d1883a 	add	r8,r10,r7
  81cd30:	1105883a 	add	r2,r2,r4
  81cd34:	5014d07a 	srli	r10,r10,1
  81cd38:	2089883a 	add	r4,r4,r2
  81cd3c:	4afff41e 	bne	r9,r11,81cd10 <__ieee754_sqrt+0xcc>
  81cd40:	02600034 	movhi	r9,32768
  81cd44:	0017883a 	mov	r11,zero
  81cd48:	0019883a 	mov	r12,zero
  81cd4c:	0015883a 	mov	r10,zero
  81cd50:	4821883a 	mov	r16,r9
  81cd54:	03c00804 	movi	r15,32
  81cd58:	00000806 	br	81cd7c <__ieee754_sqrt+0x138>
  81cd5c:	22003426 	beq	r4,r8,81ce30 <__ieee754_sqrt+0x1ec>
  81cd60:	1804d7fa 	srli	r2,r3,31
  81cd64:	52800044 	addi	r10,r10,1
  81cd68:	18c7883a 	add	r3,r3,r3
  81cd6c:	1105883a 	add	r2,r2,r4
  81cd70:	2089883a 	add	r4,r4,r2
  81cd74:	4812d07a 	srli	r9,r9,1
  81cd78:	53c01326 	beq	r10,r15,81cdc8 <__ieee754_sqrt+0x184>
  81cd7c:	4acf883a 	add	r7,r9,r11
  81cd80:	413ff60e 	bge	r8,r4,81cd5c <__ieee754_sqrt+0x118>
  81cd84:	38a0002c 	andhi	r2,r7,32768
  81cd88:	3a57883a 	add	r11,r7,r9
  81cd8c:	14002426 	beq	r2,r16,81ce20 <__ieee754_sqrt+0x1dc>
  81cd90:	4005883a 	mov	r2,r8
  81cd94:	2209c83a 	sub	r4,r4,r8
  81cd98:	19c0012e 	bgeu	r3,r7,81cda0 <__ieee754_sqrt+0x15c>
  81cd9c:	213fffc4 	addi	r4,r4,-1
  81cda0:	19c7c83a 	sub	r3,r3,r7
  81cda4:	1011883a 	mov	r8,r2
  81cda8:	1804d7fa 	srli	r2,r3,31
  81cdac:	52800044 	addi	r10,r10,1
  81cdb0:	6259883a 	add	r12,r12,r9
  81cdb4:	1105883a 	add	r2,r2,r4
  81cdb8:	18c7883a 	add	r3,r3,r3
  81cdbc:	2089883a 	add	r4,r4,r2
  81cdc0:	4812d07a 	srli	r9,r9,1
  81cdc4:	53ffed1e 	bne	r10,r15,81cd7c <__ieee754_sqrt+0x138>
  81cdc8:	20c4b03a 	or	r2,r4,r3
  81cdcc:	1000201e 	bne	r2,zero,81ce50 <__ieee754_sqrt+0x20c>
  81cdd0:	600ed07a 	srli	r7,r12,1
  81cdd4:	2880004c 	andi	r2,r5,1
  81cdd8:	1005003a 	cmpeq	r2,r2,zero
  81cddc:	1000011e 	bne	r2,zero,81cde4 <__ieee754_sqrt+0x1a0>
  81cde0:	39e00034 	orhi	r7,r7,32768
  81cde4:	300dd07a 	srai	r6,r6,1
  81cde8:	280bd07a 	srai	r5,r5,1
  81cdec:	010ff834 	movhi	r4,16352
  81cdf0:	300c953a 	slli	r6,r6,20
  81cdf4:	290b883a 	add	r5,r5,r4
  81cdf8:	3821883a 	mov	r16,r7
  81cdfc:	299d883a 	add	r14,r5,r6
  81ce00:	7023883a 	mov	r17,r14
  81ce04:	8005883a 	mov	r2,r16
  81ce08:	8807883a 	mov	r3,r17
  81ce0c:	dfc00217 	ldw	ra,8(sp)
  81ce10:	dc400117 	ldw	r17,4(sp)
  81ce14:	dc000017 	ldw	r16,0(sp)
  81ce18:	dec00304 	addi	sp,sp,12
  81ce1c:	f800283a 	ret
  81ce20:	5884703a 	and	r2,r11,r2
  81ce24:	103fda1e 	bne	r2,zero,81cd90 <__ieee754_sqrt+0x14c>
  81ce28:	40800044 	addi	r2,r8,1
  81ce2c:	003fd906 	br	81cd94 <__ieee754_sqrt+0x150>
  81ce30:	19ffd42e 	bgeu	r3,r7,81cd84 <__ieee754_sqrt+0x140>
  81ce34:	2011883a 	mov	r8,r4
  81ce38:	003fc906 	br	81cd60 <__ieee754_sqrt+0x11c>
  81ce3c:	4004d7fa 	srli	r2,r8,31
  81ce40:	4211883a 	add	r8,r8,r8
  81ce44:	1105883a 	add	r2,r2,r4
  81ce48:	2089883a 	add	r4,r4,r2
  81ce4c:	003fa706 	br	81ccec <__ieee754_sqrt+0xa8>
  81ce50:	00bfffc4 	movi	r2,-1
  81ce54:	60802726 	beq	r12,r2,81cef4 <__ieee754_sqrt+0x2b0>
  81ce58:	6080004c 	andi	r2,r12,1
  81ce5c:	6085883a 	add	r2,r12,r2
  81ce60:	100ed07a 	srli	r7,r2,1
  81ce64:	003fdb06 	br	81cdd4 <__ieee754_sqrt+0x190>
  81ce68:	8009883a 	mov	r4,r16
  81ce6c:	800d883a 	mov	r6,r16
  81ce70:	08200140 	call	820014 <__muldf3>
  81ce74:	180f883a 	mov	r7,r3
  81ce78:	880b883a 	mov	r5,r17
  81ce7c:	8009883a 	mov	r4,r16
  81ce80:	100d883a 	mov	r6,r2
  81ce84:	081ffa00 	call	81ffa0 <__adddf3>
  81ce88:	1021883a 	mov	r16,r2
  81ce8c:	1823883a 	mov	r17,r3
  81ce90:	8005883a 	mov	r2,r16
  81ce94:	8807883a 	mov	r3,r17
  81ce98:	dfc00217 	ldw	ra,8(sp)
  81ce9c:	dc400117 	ldw	r17,4(sp)
  81cea0:	dc000017 	ldw	r16,0(sp)
  81cea4:	dec00304 	addi	sp,sp,12
  81cea8:	f800283a 	ret
  81ceac:	00a00034 	movhi	r2,32768
  81ceb0:	10bfffc4 	addi	r2,r2,-1
  81ceb4:	2884703a 	and	r2,r5,r2
  81ceb8:	8084b03a 	or	r2,r16,r2
  81cebc:	103fd126 	beq	r2,zero,81ce04 <__ieee754_sqrt+0x1c0>
  81cec0:	283f6d26 	beq	r5,zero,81cc78 <__ieee754_sqrt+0x34>
  81cec4:	280f883a 	mov	r7,r5
  81cec8:	8009883a 	mov	r4,r16
  81cecc:	800d883a 	mov	r6,r16
  81ced0:	081ff200 	call	81ff20 <__subdf3>
  81ced4:	1009883a 	mov	r4,r2
  81ced8:	180b883a 	mov	r5,r3
  81cedc:	100d883a 	mov	r6,r2
  81cee0:	180f883a 	mov	r7,r3
  81cee4:	08203d80 	call	8203d8 <__divdf3>
  81cee8:	1021883a 	mov	r16,r2
  81ceec:	1823883a 	mov	r17,r3
  81cef0:	003fc406 	br	81ce04 <__ieee754_sqrt+0x1c0>
  81cef4:	29400044 	addi	r5,r5,1
  81cef8:	000f883a 	mov	r7,zero
  81cefc:	003fb506 	br	81cdd4 <__ieee754_sqrt+0x190>
  81cf00:	0009883a 	mov	r4,zero
  81cf04:	00800804 	movi	r2,32
  81cf08:	003f6b06 	br	81ccb8 <__ieee754_sqrt+0x74>

0081cf0c <__kernel_cos>:
  81cf0c:	defff104 	addi	sp,sp,-60
  81cf10:	00a00034 	movhi	r2,32768
  81cf14:	10bfffc4 	addi	r2,r2,-1
  81cf18:	dd800c15 	stw	r22,48(sp)
  81cf1c:	116c703a 	and	r22,r2,r5
  81cf20:	0005883a 	mov	r2,zero
  81cf24:	dd000a15 	stw	r20,40(sp)
  81cf28:	d8800215 	stw	r2,8(sp)
  81cf2c:	2029883a 	mov	r20,r4
  81cf30:	008f9034 	movhi	r2,15936
  81cf34:	10bfffc4 	addi	r2,r2,-1
  81cf38:	0009883a 	mov	r4,zero
  81cf3c:	dd400b15 	stw	r21,44(sp)
  81cf40:	dfc00e15 	stw	ra,56(sp)
  81cf44:	ddc00d15 	stw	r23,52(sp)
  81cf48:	dcc00915 	stw	r19,36(sp)
  81cf4c:	dc800815 	stw	r18,32(sp)
  81cf50:	dc400715 	stw	r17,28(sp)
  81cf54:	dc000615 	stw	r16,24(sp)
  81cf58:	282b883a 	mov	r21,r5
  81cf5c:	d9800415 	stw	r6,16(sp)
  81cf60:	d9c00515 	stw	r7,20(sp)
  81cf64:	d9000315 	stw	r4,12(sp)
  81cf68:	15809216 	blt	r2,r22,81d1b4 <__kernel_cos+0x2a8>
  81cf6c:	a009883a 	mov	r4,r20
  81cf70:	08209480 	call	820948 <__fixdfsi>
  81cf74:	10011c26 	beq	r2,zero,81d3e8 <__kernel_cos+0x4dc>
  81cf78:	a009883a 	mov	r4,r20
  81cf7c:	a80b883a 	mov	r5,r21
  81cf80:	a00d883a 	mov	r6,r20
  81cf84:	a80f883a 	mov	r7,r21
  81cf88:	08200140 	call	820014 <__muldf3>
  81cf8c:	1021883a 	mov	r16,r2
  81cf90:	1823883a 	mov	r17,r3
  81cf94:	1025883a 	mov	r18,r2
  81cf98:	1827883a 	mov	r19,r3
  81cf9c:	00afa234 	movhi	r2,48776
  81cfa0:	108e3504 	addi	r2,r2,14548
  81cfa4:	00ef6a74 	movhi	r3,48553
  81cfa8:	18feba44 	addi	r3,r3,-1303
  81cfac:	8009883a 	mov	r4,r16
  81cfb0:	880b883a 	mov	r5,r17
  81cfb4:	180f883a 	mov	r7,r3
  81cfb8:	100d883a 	mov	r6,r2
  81cfbc:	08200140 	call	820014 <__muldf3>
  81cfc0:	022f6d74 	movhi	r8,48565
  81cfc4:	422c7104 	addi	r8,r8,-20028
  81cfc8:	024f88b4 	movhi	r9,15906
  81cfcc:	4a7ba784 	addi	r9,r9,-4450
  81cfd0:	480f883a 	mov	r7,r9
  81cfd4:	400d883a 	mov	r6,r8
  81cfd8:	180b883a 	mov	r5,r3
  81cfdc:	1009883a 	mov	r4,r2
  81cfe0:	081ffa00 	call	81ffa0 <__adddf3>
  81cfe4:	180f883a 	mov	r7,r3
  81cfe8:	8009883a 	mov	r4,r16
  81cfec:	880b883a 	mov	r5,r17
  81cff0:	100d883a 	mov	r6,r2
  81cff4:	08200140 	call	820014 <__muldf3>
  81cff8:	02202734 	movhi	r8,32924
  81cffc:	4214ab44 	addi	r8,r8,21165
  81d000:	024fa4b4 	movhi	r9,16018
  81d004:	4a5f93c4 	addi	r9,r9,32335
  81d008:	480f883a 	mov	r7,r9
  81d00c:	400d883a 	mov	r6,r8
  81d010:	180b883a 	mov	r5,r3
  81d014:	1009883a 	mov	r4,r2
  81d018:	081ff200 	call	81ff20 <__subdf3>
  81d01c:	180f883a 	mov	r7,r3
  81d020:	8009883a 	mov	r4,r16
  81d024:	880b883a 	mov	r5,r17
  81d028:	100d883a 	mov	r6,r2
  81d02c:	08200140 	call	820014 <__muldf3>
  81d030:	020672f4 	movhi	r8,6603
  81d034:	42056404 	addi	r8,r8,5520
  81d038:	024fbeb4 	movhi	r9,16122
  81d03c:	4a406804 	addi	r9,r9,416
  81d040:	480f883a 	mov	r7,r9
  81d044:	400d883a 	mov	r6,r8
  81d048:	180b883a 	mov	r5,r3
  81d04c:	1009883a 	mov	r4,r2
  81d050:	081ffa00 	call	81ffa0 <__adddf3>
  81d054:	180f883a 	mov	r7,r3
  81d058:	8009883a 	mov	r4,r16
  81d05c:	880b883a 	mov	r5,r17
  81d060:	100d883a 	mov	r6,r2
  81d064:	08200140 	call	820014 <__muldf3>
  81d068:	0205b074 	movhi	r8,5825
  81d06c:	42145dc4 	addi	r8,r8,20855
  81d070:	024fd5f4 	movhi	r9,16215
  81d074:	4a705b04 	addi	r9,r9,-16020
  81d078:	480f883a 	mov	r7,r9
  81d07c:	400d883a 	mov	r6,r8
  81d080:	180b883a 	mov	r5,r3
  81d084:	1009883a 	mov	r4,r2
  81d088:	081ff200 	call	81ff20 <__subdf3>
  81d08c:	180f883a 	mov	r7,r3
  81d090:	8009883a 	mov	r4,r16
  81d094:	880b883a 	mov	r5,r17
  81d098:	100d883a 	mov	r6,r2
  81d09c:	08200140 	call	820014 <__muldf3>
  81d0a0:	02155574 	movhi	r8,21845
  81d0a4:	42155304 	addi	r8,r8,21836
  81d0a8:	024fe974 	movhi	r9,16293
  81d0ac:	4a555544 	addi	r9,r9,21845
  81d0b0:	480f883a 	mov	r7,r9
  81d0b4:	400d883a 	mov	r6,r8
  81d0b8:	180b883a 	mov	r5,r3
  81d0bc:	1009883a 	mov	r4,r2
  81d0c0:	081ffa00 	call	81ffa0 <__adddf3>
  81d0c4:	180f883a 	mov	r7,r3
  81d0c8:	880b883a 	mov	r5,r17
  81d0cc:	8009883a 	mov	r4,r16
  81d0d0:	100d883a 	mov	r6,r2
  81d0d4:	08200140 	call	820014 <__muldf3>
  81d0d8:	1021883a 	mov	r16,r2
  81d0dc:	1823883a 	mov	r17,r3
  81d0e0:	0005883a 	mov	r2,zero
  81d0e4:	00cff834 	movhi	r3,16352
  81d0e8:	9009883a 	mov	r4,r18
  81d0ec:	980b883a 	mov	r5,r19
  81d0f0:	180f883a 	mov	r7,r3
  81d0f4:	100d883a 	mov	r6,r2
  81d0f8:	08200140 	call	820014 <__muldf3>
  81d0fc:	980b883a 	mov	r5,r19
  81d100:	880f883a 	mov	r7,r17
  81d104:	9009883a 	mov	r4,r18
  81d108:	800d883a 	mov	r6,r16
  81d10c:	1025883a 	mov	r18,r2
  81d110:	1827883a 	mov	r19,r3
  81d114:	08200140 	call	820014 <__muldf3>
  81d118:	d9c00517 	ldw	r7,20(sp)
  81d11c:	d9800417 	ldw	r6,16(sp)
  81d120:	a80b883a 	mov	r5,r21
  81d124:	a009883a 	mov	r4,r20
  81d128:	1021883a 	mov	r16,r2
  81d12c:	1823883a 	mov	r17,r3
  81d130:	08200140 	call	820014 <__muldf3>
  81d134:	180f883a 	mov	r7,r3
  81d138:	880b883a 	mov	r5,r17
  81d13c:	8009883a 	mov	r4,r16
  81d140:	100d883a 	mov	r6,r2
  81d144:	081ff200 	call	81ff20 <__subdf3>
  81d148:	180f883a 	mov	r7,r3
  81d14c:	980b883a 	mov	r5,r19
  81d150:	9009883a 	mov	r4,r18
  81d154:	100d883a 	mov	r6,r2
  81d158:	081ff200 	call	81ff20 <__subdf3>
  81d15c:	0011883a 	mov	r8,zero
  81d160:	024ffc34 	movhi	r9,16368
  81d164:	480b883a 	mov	r5,r9
  81d168:	180f883a 	mov	r7,r3
  81d16c:	4009883a 	mov	r4,r8
  81d170:	100d883a 	mov	r6,r2
  81d174:	081ff200 	call	81ff20 <__subdf3>
  81d178:	100d883a 	mov	r6,r2
  81d17c:	180f883a 	mov	r7,r3
  81d180:	3005883a 	mov	r2,r6
  81d184:	3807883a 	mov	r3,r7
  81d188:	dfc00e17 	ldw	ra,56(sp)
  81d18c:	ddc00d17 	ldw	r23,52(sp)
  81d190:	dd800c17 	ldw	r22,48(sp)
  81d194:	dd400b17 	ldw	r21,44(sp)
  81d198:	dd000a17 	ldw	r20,40(sp)
  81d19c:	dcc00917 	ldw	r19,36(sp)
  81d1a0:	dc800817 	ldw	r18,32(sp)
  81d1a4:	dc400717 	ldw	r17,28(sp)
  81d1a8:	dc000617 	ldw	r16,24(sp)
  81d1ac:	dec00f04 	addi	sp,sp,60
  81d1b0:	f800283a 	ret
  81d1b4:	280f883a 	mov	r7,r5
  81d1b8:	a009883a 	mov	r4,r20
  81d1bc:	a00d883a 	mov	r6,r20
  81d1c0:	08200140 	call	820014 <__muldf3>
  81d1c4:	1021883a 	mov	r16,r2
  81d1c8:	1823883a 	mov	r17,r3
  81d1cc:	1025883a 	mov	r18,r2
  81d1d0:	1827883a 	mov	r19,r3
  81d1d4:	00afa234 	movhi	r2,48776
  81d1d8:	108e3504 	addi	r2,r2,14548
  81d1dc:	00ef6a74 	movhi	r3,48553
  81d1e0:	18feba44 	addi	r3,r3,-1303
  81d1e4:	8009883a 	mov	r4,r16
  81d1e8:	880b883a 	mov	r5,r17
  81d1ec:	180f883a 	mov	r7,r3
  81d1f0:	100d883a 	mov	r6,r2
  81d1f4:	08200140 	call	820014 <__muldf3>
  81d1f8:	022f6d74 	movhi	r8,48565
  81d1fc:	422c7104 	addi	r8,r8,-20028
  81d200:	024f88b4 	movhi	r9,15906
  81d204:	4a7ba784 	addi	r9,r9,-4450
  81d208:	480f883a 	mov	r7,r9
  81d20c:	400d883a 	mov	r6,r8
  81d210:	180b883a 	mov	r5,r3
  81d214:	1009883a 	mov	r4,r2
  81d218:	081ffa00 	call	81ffa0 <__adddf3>
  81d21c:	180f883a 	mov	r7,r3
  81d220:	8009883a 	mov	r4,r16
  81d224:	880b883a 	mov	r5,r17
  81d228:	100d883a 	mov	r6,r2
  81d22c:	08200140 	call	820014 <__muldf3>
  81d230:	02202734 	movhi	r8,32924
  81d234:	4214ab44 	addi	r8,r8,21165
  81d238:	024fa4b4 	movhi	r9,16018
  81d23c:	4a5f93c4 	addi	r9,r9,32335
  81d240:	480f883a 	mov	r7,r9
  81d244:	400d883a 	mov	r6,r8
  81d248:	180b883a 	mov	r5,r3
  81d24c:	1009883a 	mov	r4,r2
  81d250:	081ff200 	call	81ff20 <__subdf3>
  81d254:	180f883a 	mov	r7,r3
  81d258:	8009883a 	mov	r4,r16
  81d25c:	880b883a 	mov	r5,r17
  81d260:	100d883a 	mov	r6,r2
  81d264:	08200140 	call	820014 <__muldf3>
  81d268:	020672f4 	movhi	r8,6603
  81d26c:	42056404 	addi	r8,r8,5520
  81d270:	024fbeb4 	movhi	r9,16122
  81d274:	4a406804 	addi	r9,r9,416
  81d278:	480f883a 	mov	r7,r9
  81d27c:	400d883a 	mov	r6,r8
  81d280:	180b883a 	mov	r5,r3
  81d284:	1009883a 	mov	r4,r2
  81d288:	081ffa00 	call	81ffa0 <__adddf3>
  81d28c:	180f883a 	mov	r7,r3
  81d290:	8009883a 	mov	r4,r16
  81d294:	880b883a 	mov	r5,r17
  81d298:	100d883a 	mov	r6,r2
  81d29c:	08200140 	call	820014 <__muldf3>
  81d2a0:	0205b074 	movhi	r8,5825
  81d2a4:	42145dc4 	addi	r8,r8,20855
  81d2a8:	024fd5f4 	movhi	r9,16215
  81d2ac:	4a705b04 	addi	r9,r9,-16020
  81d2b0:	480f883a 	mov	r7,r9
  81d2b4:	400d883a 	mov	r6,r8
  81d2b8:	180b883a 	mov	r5,r3
  81d2bc:	1009883a 	mov	r4,r2
  81d2c0:	081ff200 	call	81ff20 <__subdf3>
  81d2c4:	180f883a 	mov	r7,r3
  81d2c8:	8009883a 	mov	r4,r16
  81d2cc:	880b883a 	mov	r5,r17
  81d2d0:	100d883a 	mov	r6,r2
  81d2d4:	08200140 	call	820014 <__muldf3>
  81d2d8:	02155574 	movhi	r8,21845
  81d2dc:	42155304 	addi	r8,r8,21836
  81d2e0:	024fe974 	movhi	r9,16293
  81d2e4:	4a555544 	addi	r9,r9,21845
  81d2e8:	480f883a 	mov	r7,r9
  81d2ec:	400d883a 	mov	r6,r8
  81d2f0:	180b883a 	mov	r5,r3
  81d2f4:	1009883a 	mov	r4,r2
  81d2f8:	081ffa00 	call	81ffa0 <__adddf3>
  81d2fc:	180f883a 	mov	r7,r3
  81d300:	880b883a 	mov	r5,r17
  81d304:	8009883a 	mov	r4,r16
  81d308:	100d883a 	mov	r6,r2
  81d30c:	08200140 	call	820014 <__muldf3>
  81d310:	1021883a 	mov	r16,r2
  81d314:	008ff4f4 	movhi	r2,16339
  81d318:	108ccc84 	addi	r2,r2,13106
  81d31c:	1823883a 	mov	r17,r3
  81d320:	15bf6f0e 	bge	r2,r22,81d0e0 <__kernel_cos+0x1d4>
  81d324:	008ffa74 	movhi	r2,16361
  81d328:	1580320e 	bge	r2,r22,81d3f4 <__kernel_cos+0x4e8>
  81d32c:	0005883a 	mov	r2,zero
  81d330:	010ff9f4 	movhi	r4,16359
  81d334:	002d883a 	mov	r22,zero
  81d338:	d8800015 	stw	r2,0(sp)
  81d33c:	05cff4b4 	movhi	r23,16338
  81d340:	d9000115 	stw	r4,4(sp)
  81d344:	0005883a 	mov	r2,zero
  81d348:	00cff834 	movhi	r3,16352
  81d34c:	9009883a 	mov	r4,r18
  81d350:	980b883a 	mov	r5,r19
  81d354:	180f883a 	mov	r7,r3
  81d358:	100d883a 	mov	r6,r2
  81d35c:	08200140 	call	820014 <__muldf3>
  81d360:	180b883a 	mov	r5,r3
  81d364:	b80f883a 	mov	r7,r23
  81d368:	1009883a 	mov	r4,r2
  81d36c:	b00d883a 	mov	r6,r22
  81d370:	081ff200 	call	81ff20 <__subdf3>
  81d374:	980b883a 	mov	r5,r19
  81d378:	880f883a 	mov	r7,r17
  81d37c:	9009883a 	mov	r4,r18
  81d380:	800d883a 	mov	r6,r16
  81d384:	1025883a 	mov	r18,r2
  81d388:	1827883a 	mov	r19,r3
  81d38c:	08200140 	call	820014 <__muldf3>
  81d390:	d9c00517 	ldw	r7,20(sp)
  81d394:	d9800417 	ldw	r6,16(sp)
  81d398:	a80b883a 	mov	r5,r21
  81d39c:	a009883a 	mov	r4,r20
  81d3a0:	1021883a 	mov	r16,r2
  81d3a4:	1823883a 	mov	r17,r3
  81d3a8:	08200140 	call	820014 <__muldf3>
  81d3ac:	180f883a 	mov	r7,r3
  81d3b0:	880b883a 	mov	r5,r17
  81d3b4:	8009883a 	mov	r4,r16
  81d3b8:	100d883a 	mov	r6,r2
  81d3bc:	081ff200 	call	81ff20 <__subdf3>
  81d3c0:	180f883a 	mov	r7,r3
  81d3c4:	980b883a 	mov	r5,r19
  81d3c8:	9009883a 	mov	r4,r18
  81d3cc:	100d883a 	mov	r6,r2
  81d3d0:	081ff200 	call	81ff20 <__subdf3>
  81d3d4:	d9400117 	ldw	r5,4(sp)
  81d3d8:	d9000017 	ldw	r4,0(sp)
  81d3dc:	180f883a 	mov	r7,r3
  81d3e0:	100d883a 	mov	r6,r2
  81d3e4:	003f6306 	br	81d174 <__kernel_cos+0x268>
  81d3e8:	000d883a 	mov	r6,zero
  81d3ec:	01cffc34 	movhi	r7,16368
  81d3f0:	003f6306 	br	81d180 <__kernel_cos+0x274>
  81d3f4:	00bff834 	movhi	r2,65504
  81d3f8:	b0ad883a 	add	r22,r22,r2
  81d3fc:	dd800315 	stw	r22,12(sp)
  81d400:	d9000317 	ldw	r4,12(sp)
  81d404:	0005883a 	mov	r2,zero
  81d408:	00cffc34 	movhi	r3,16368
  81d40c:	002d883a 	mov	r22,zero
  81d410:	200f883a 	mov	r7,r4
  81d414:	202f883a 	mov	r23,r4
  81d418:	180b883a 	mov	r5,r3
  81d41c:	1009883a 	mov	r4,r2
  81d420:	b00d883a 	mov	r6,r22
  81d424:	d8800215 	stw	r2,8(sp)
  81d428:	081ff200 	call	81ff20 <__subdf3>
  81d42c:	d8800015 	stw	r2,0(sp)
  81d430:	d8c00115 	stw	r3,4(sp)
  81d434:	003fc306 	br	81d344 <__kernel_cos+0x438>

0081d438 <__kernel_rem_pio2>:
  81d438:	deff5304 	addi	sp,sp,-692
  81d43c:	d880ad17 	ldw	r2,692(sp)
  81d440:	d9009615 	stw	r4,600(sp)
  81d444:	d9409715 	stw	r5,604(sp)
  81d448:	1087883a 	add	r3,r2,r2
  81d44c:	18c7883a 	add	r3,r3,r3
  81d450:	00802134 	movhi	r2,132
  81d454:	10ba1604 	addi	r2,r2,-6056
  81d458:	1887883a 	add	r3,r3,r2
  81d45c:	18c00017 	ldw	r3,0(r3)
  81d460:	313fff44 	addi	r4,r6,-3
  81d464:	01400604 	movi	r5,24
  81d468:	df00ab15 	stw	fp,684(sp)
  81d46c:	dc00a315 	stw	r16,652(sp)
  81d470:	d8c09515 	stw	r3,596(sp)
  81d474:	dfc0ac15 	stw	ra,688(sp)
  81d478:	ddc0aa15 	stw	r23,680(sp)
  81d47c:	dd80a915 	stw	r22,676(sp)
  81d480:	dd40a815 	stw	r21,672(sp)
  81d484:	dd00a715 	stw	r20,668(sp)
  81d488:	dcc0a615 	stw	r19,664(sp)
  81d48c:	dc80a515 	stw	r18,660(sp)
  81d490:	dc40a415 	stw	r17,656(sp)
  81d494:	3021883a 	mov	r16,r6
  81d498:	d9c09815 	stw	r7,608(sp)
  81d49c:	0820b480 	call	820b48 <__divsi3>
  81d4a0:	d8c09817 	ldw	r3,608(sp)
  81d4a4:	d8808c15 	stw	r2,560(sp)
  81d4a8:	1f3fffc4 	addi	fp,r3,-1
  81d4ac:	10031816 	blt	r2,zero,81e110 <__kernel_rem_pio2+0xcd8>
  81d4b0:	d9008c17 	ldw	r4,560(sp)
  81d4b4:	d9409517 	ldw	r5,596(sp)
  81d4b8:	20bffa24 	muli	r2,r4,-24
  81d4bc:	2f07883a 	add	r3,r5,fp
  81d4c0:	8085883a 	add	r2,r16,r2
  81d4c4:	10bffa04 	addi	r2,r2,-24
  81d4c8:	d8809315 	stw	r2,588(sp)
  81d4cc:	18001516 	blt	r3,zero,81d524 <__kernel_rem_pio2+0xec>
  81d4d0:	2721c83a 	sub	r16,r4,fp
  81d4d4:	d980ae17 	ldw	r6,696(sp)
  81d4d8:	8405883a 	add	r2,r16,r16
  81d4dc:	1085883a 	add	r2,r2,r2
  81d4e0:	30a3883a 	add	r17,r6,r2
  81d4e4:	80e7883a 	add	r19,r16,r3
  81d4e8:	dc801404 	addi	r18,sp,80
  81d4ec:	00000106 	br	81d4f4 <__kernel_rem_pio2+0xbc>
  81d4f0:	84000044 	addi	r16,r16,1
  81d4f4:	0009883a 	mov	r4,zero
  81d4f8:	000b883a 	mov	r5,zero
  81d4fc:	80000416 	blt	r16,zero,81d510 <__kernel_rem_pio2+0xd8>
  81d500:	89000017 	ldw	r4,0(r17)
  81d504:	08208500 	call	820850 <__floatsidf>
  81d508:	1009883a 	mov	r4,r2
  81d50c:	180b883a 	mov	r5,r3
  81d510:	91400115 	stw	r5,4(r18)
  81d514:	91000015 	stw	r4,0(r18)
  81d518:	8c400104 	addi	r17,r17,4
  81d51c:	94800204 	addi	r18,r18,8
  81d520:	84fff31e 	bne	r16,r19,81d4f0 <__kernel_rem_pio2+0xb8>
  81d524:	d9c09517 	ldw	r7,596(sp)
  81d528:	38002416 	blt	r7,zero,81d5bc <__kernel_rem_pio2+0x184>
  81d52c:	da809817 	ldw	r10,608(sp)
  81d530:	e029883a 	mov	r20,fp
  81d534:	dd406404 	addi	r21,sp,400
  81d538:	3aaf883a 	add	r23,r7,r10
  81d53c:	e02c403a 	cmpge	r22,fp,zero
  81d540:	b0023e26 	beq	r22,zero,81de3c <__kernel_rem_pio2+0xa04>
  81d544:	dcc09617 	ldw	r19,600(sp)
  81d548:	0021883a 	mov	r16,zero
  81d54c:	0025883a 	mov	r18,zero
  81d550:	0023883a 	mov	r17,zero
  81d554:	a489c83a 	sub	r4,r20,r18
  81d558:	200890fa 	slli	r4,r4,3
  81d55c:	99800017 	ldw	r6,0(r19)
  81d560:	99c00117 	ldw	r7,4(r19)
  81d564:	26c9883a 	add	r4,r4,sp
  81d568:	20c01517 	ldw	r3,84(r4)
  81d56c:	20801417 	ldw	r2,80(r4)
  81d570:	94800044 	addi	r18,r18,1
  81d574:	180b883a 	mov	r5,r3
  81d578:	1009883a 	mov	r4,r2
  81d57c:	08200140 	call	820014 <__muldf3>
  81d580:	180f883a 	mov	r7,r3
  81d584:	880b883a 	mov	r5,r17
  81d588:	8009883a 	mov	r4,r16
  81d58c:	100d883a 	mov	r6,r2
  81d590:	081ffa00 	call	81ffa0 <__adddf3>
  81d594:	1021883a 	mov	r16,r2
  81d598:	d8809817 	ldw	r2,608(sp)
  81d59c:	9cc00204 	addi	r19,r19,8
  81d5a0:	1823883a 	mov	r17,r3
  81d5a4:	14bfeb1e 	bne	r2,r18,81d554 <__kernel_rem_pio2+0x11c>
  81d5a8:	a5000044 	addi	r20,r20,1
  81d5ac:	ac400115 	stw	r17,4(r21)
  81d5b0:	ac000015 	stw	r16,0(r21)
  81d5b4:	ad400204 	addi	r21,r21,8
  81d5b8:	a5ffe11e 	bne	r20,r23,81d540 <__kernel_rem_pio2+0x108>
  81d5bc:	d8c09517 	ldw	r3,596(sp)
  81d5c0:	d9409317 	ldw	r5,588(sp)
  81d5c4:	e038403a 	cmpge	fp,fp,zero
  81d5c8:	d8c08d15 	stw	r3,564(sp)
  81d5cc:	d9008d17 	ldw	r4,564(sp)
  81d5d0:	18c5883a 	add	r2,r3,r3
  81d5d4:	10c7883a 	add	r3,r2,r3
  81d5d8:	1907883a 	add	r3,r3,r4
  81d5dc:	1085883a 	add	r2,r2,r2
  81d5e0:	16c5883a 	add	r2,r2,sp
  81d5e4:	1ec7883a 	add	r3,r3,sp
  81d5e8:	29400050 	cmplti	r5,r5,1
  81d5ec:	df00a215 	stw	fp,648(sp)
  81d5f0:	d8809915 	stw	r2,612(sp)
  81d5f4:	d8c0a115 	stw	r3,644(sp)
  81d5f8:	d940a015 	stw	r5,640(sp)
  81d5fc:	d9808d17 	ldw	r6,564(sp)
  81d600:	300490fa 	slli	r2,r6,3
  81d604:	16c5883a 	add	r2,r2,sp
  81d608:	15006417 	ldw	r20,400(r2)
  81d60c:	15406517 	ldw	r21,404(r2)
  81d610:	01802e0e 	bge	zero,r6,81d6cc <__kernel_rem_pio2+0x294>
  81d614:	102d883a 	mov	r22,r2
  81d618:	302f883a 	mov	r23,r6
  81d61c:	d839883a 	mov	fp,sp
  81d620:	0005883a 	mov	r2,zero
  81d624:	00cf9c34 	movhi	r3,15984
  81d628:	180f883a 	mov	r7,r3
  81d62c:	100d883a 	mov	r6,r2
  81d630:	a009883a 	mov	r4,r20
  81d634:	a80b883a 	mov	r5,r21
  81d638:	08200140 	call	820014 <__muldf3>
  81d63c:	180b883a 	mov	r5,r3
  81d640:	1009883a 	mov	r4,r2
  81d644:	08209480 	call	820948 <__fixdfsi>
  81d648:	1009883a 	mov	r4,r2
  81d64c:	08208500 	call	820850 <__floatsidf>
  81d650:	1021883a 	mov	r16,r2
  81d654:	1823883a 	mov	r17,r3
  81d658:	0005883a 	mov	r2,zero
  81d65c:	00f05c34 	movhi	r3,49520
  81d660:	180f883a 	mov	r7,r3
  81d664:	8009883a 	mov	r4,r16
  81d668:	880b883a 	mov	r5,r17
  81d66c:	100d883a 	mov	r6,r2
  81d670:	08200140 	call	820014 <__muldf3>
  81d674:	180b883a 	mov	r5,r3
  81d678:	a80f883a 	mov	r7,r21
  81d67c:	a00d883a 	mov	r6,r20
  81d680:	1009883a 	mov	r4,r2
  81d684:	081ffa00 	call	81ffa0 <__adddf3>
  81d688:	180b883a 	mov	r5,r3
  81d68c:	1009883a 	mov	r4,r2
  81d690:	08209480 	call	820948 <__fixdfsi>
  81d694:	e0800015 	stw	r2,0(fp)
  81d698:	b5bffe04 	addi	r22,r22,-8
  81d69c:	b0806417 	ldw	r2,400(r22)
  81d6a0:	b0c06517 	ldw	r3,404(r22)
  81d6a4:	8009883a 	mov	r4,r16
  81d6a8:	880b883a 	mov	r5,r17
  81d6ac:	180f883a 	mov	r7,r3
  81d6b0:	100d883a 	mov	r6,r2
  81d6b4:	081ffa00 	call	81ffa0 <__adddf3>
  81d6b8:	bdffffc4 	addi	r23,r23,-1
  81d6bc:	e7000104 	addi	fp,fp,4
  81d6c0:	1029883a 	mov	r20,r2
  81d6c4:	182b883a 	mov	r21,r3
  81d6c8:	b83fd51e 	bne	r23,zero,81d620 <__kernel_rem_pio2+0x1e8>
  81d6cc:	d9809317 	ldw	r6,588(sp)
  81d6d0:	a80b883a 	mov	r5,r21
  81d6d4:	a009883a 	mov	r4,r20
  81d6d8:	081eee80 	call	81eee8 <scalbn>
  81d6dc:	0009883a 	mov	r4,zero
  81d6e0:	014ff034 	movhi	r5,16320
  81d6e4:	280f883a 	mov	r7,r5
  81d6e8:	200d883a 	mov	r6,r4
  81d6ec:	180b883a 	mov	r5,r3
  81d6f0:	1009883a 	mov	r4,r2
  81d6f4:	1021883a 	mov	r16,r2
  81d6f8:	1823883a 	mov	r17,r3
  81d6fc:	08200140 	call	820014 <__muldf3>
  81d700:	180b883a 	mov	r5,r3
  81d704:	1009883a 	mov	r4,r2
  81d708:	081ec7c0 	call	81ec7c <floor>
  81d70c:	0011883a 	mov	r8,zero
  81d710:	02700834 	movhi	r9,49184
  81d714:	480f883a 	mov	r7,r9
  81d718:	400d883a 	mov	r6,r8
  81d71c:	180b883a 	mov	r5,r3
  81d720:	1009883a 	mov	r4,r2
  81d724:	08200140 	call	820014 <__muldf3>
  81d728:	180f883a 	mov	r7,r3
  81d72c:	100d883a 	mov	r6,r2
  81d730:	880b883a 	mov	r5,r17
  81d734:	8009883a 	mov	r4,r16
  81d738:	081ffa00 	call	81ffa0 <__adddf3>
  81d73c:	180b883a 	mov	r5,r3
  81d740:	1009883a 	mov	r4,r2
  81d744:	1823883a 	mov	r17,r3
  81d748:	1021883a 	mov	r16,r2
  81d74c:	08209480 	call	820948 <__fixdfsi>
  81d750:	1009883a 	mov	r4,r2
  81d754:	d8809415 	stw	r2,592(sp)
  81d758:	08208500 	call	820850 <__floatsidf>
  81d75c:	880b883a 	mov	r5,r17
  81d760:	8009883a 	mov	r4,r16
  81d764:	180f883a 	mov	r7,r3
  81d768:	100d883a 	mov	r6,r2
  81d76c:	081ff200 	call	81ff20 <__subdf3>
  81d770:	d9c0a017 	ldw	r7,640(sp)
  81d774:	180d883a 	mov	r6,r3
  81d778:	1021883a 	mov	r16,r2
  81d77c:	1823883a 	mov	r17,r3
  81d780:	38017d1e 	bne	r7,zero,81dd78 <__kernel_rem_pio2+0x940>
  81d784:	da808d17 	ldw	r10,564(sp)
  81d788:	d9009317 	ldw	r4,588(sp)
  81d78c:	00c00604 	movi	r3,24
  81d790:	50bfffc4 	addi	r2,r10,-1
  81d794:	1085883a 	add	r2,r2,r2
  81d798:	1085883a 	add	r2,r2,r2
  81d79c:	16c5883a 	add	r2,r2,sp
  81d7a0:	11400017 	ldw	r5,0(r2)
  81d7a4:	1907c83a 	sub	r3,r3,r4
  81d7a8:	d9c09317 	ldw	r7,588(sp)
  81d7ac:	28cdd83a 	sra	r6,r5,r3
  81d7b0:	010005c4 	movi	r4,23
  81d7b4:	da809417 	ldw	r10,592(sp)
  81d7b8:	30c6983a 	sll	r3,r6,r3
  81d7bc:	21c9c83a 	sub	r4,r4,r7
  81d7c0:	5195883a 	add	r10,r10,r6
  81d7c4:	28cbc83a 	sub	r5,r5,r3
  81d7c8:	2909d83a 	sra	r4,r5,r4
  81d7cc:	da809415 	stw	r10,592(sp)
  81d7d0:	11400015 	stw	r5,0(r2)
  81d7d4:	d9009215 	stw	r4,584(sp)
  81d7d8:	d9409217 	ldw	r5,584(sp)
  81d7dc:	0140270e 	bge	zero,r5,81d87c <__kernel_rem_pio2+0x444>
  81d7e0:	d9809417 	ldw	r6,592(sp)
  81d7e4:	d9c08d17 	ldw	r7,564(sp)
  81d7e8:	31800044 	addi	r6,r6,1
  81d7ec:	d9809415 	stw	r6,592(sp)
  81d7f0:	01c1a50e 	bge	zero,r7,81de88 <__kernel_rem_pio2+0xa50>
  81d7f4:	002d883a 	mov	r22,zero
  81d7f8:	000b883a 	mov	r5,zero
  81d7fc:	d809883a 	mov	r4,sp
  81d800:	01c04034 	movhi	r7,256
  81d804:	01804034 	movhi	r6,256
  81d808:	31bfffc4 	addi	r6,r6,-1
  81d80c:	00000806 	br	81d830 <__kernel_rem_pio2+0x3f8>
  81d810:	38c5c83a 	sub	r2,r7,r3
  81d814:	18000226 	beq	r3,zero,81d820 <__kernel_rem_pio2+0x3e8>
  81d818:	05800044 	movi	r22,1
  81d81c:	20800015 	stw	r2,0(r4)
  81d820:	da808d17 	ldw	r10,564(sp)
  81d824:	29400044 	addi	r5,r5,1
  81d828:	21000104 	addi	r4,r4,4
  81d82c:	51400926 	beq	r10,r5,81d854 <__kernel_rem_pio2+0x41c>
  81d830:	b004c03a 	cmpne	r2,r22,zero
  81d834:	20c00017 	ldw	r3,0(r4)
  81d838:	103ff526 	beq	r2,zero,81d810 <__kernel_rem_pio2+0x3d8>
  81d83c:	da808d17 	ldw	r10,564(sp)
  81d840:	30c5c83a 	sub	r2,r6,r3
  81d844:	29400044 	addi	r5,r5,1
  81d848:	20800015 	stw	r2,0(r4)
  81d84c:	21000104 	addi	r4,r4,4
  81d850:	517ff71e 	bne	r10,r5,81d830 <__kernel_rem_pio2+0x3f8>
  81d854:	d880a017 	ldw	r2,640(sp)
  81d858:	1000051e 	bne	r2,zero,81d870 <__kernel_rem_pio2+0x438>
  81d85c:	d8c09317 	ldw	r3,588(sp)
  81d860:	00800044 	movi	r2,1
  81d864:	18814e26 	beq	r3,r2,81dda0 <__kernel_rem_pio2+0x968>
  81d868:	00800084 	movi	r2,2
  81d86c:	18815826 	beq	r3,r2,81ddd0 <__kernel_rem_pio2+0x998>
  81d870:	d9c09217 	ldw	r7,584(sp)
  81d874:	00800084 	movi	r2,2
  81d878:	38806926 	beq	r7,r2,81da20 <__kernel_rem_pio2+0x5e8>
  81d87c:	000d883a 	mov	r6,zero
  81d880:	000f883a 	mov	r7,zero
  81d884:	8009883a 	mov	r4,r16
  81d888:	880b883a 	mov	r5,r17
  81d88c:	08206300 	call	820630 <__eqdf2>
  81d890:	1000811e 	bne	r2,zero,81da98 <__kernel_rem_pio2+0x660>
  81d894:	da808d17 	ldw	r10,564(sp)
  81d898:	d8809517 	ldw	r2,596(sp)
  81d89c:	51bfffc4 	addi	r6,r10,-1
  81d8a0:	30800c16 	blt	r6,r2,81d8d4 <__kernel_rem_pio2+0x49c>
  81d8a4:	3185883a 	add	r2,r6,r6
  81d8a8:	1085883a 	add	r2,r2,r2
  81d8ac:	16c9883a 	add	r4,r2,sp
  81d8b0:	3007883a 	mov	r3,r6
  81d8b4:	000b883a 	mov	r5,zero
  81d8b8:	20800017 	ldw	r2,0(r4)
  81d8bc:	d9c09517 	ldw	r7,596(sp)
  81d8c0:	18ffffc4 	addi	r3,r3,-1
  81d8c4:	213fff04 	addi	r4,r4,-4
  81d8c8:	288ab03a 	or	r5,r5,r2
  81d8cc:	19fffa0e 	bge	r3,r7,81d8b8 <__kernel_rem_pio2+0x480>
  81d8d0:	2800791e 	bne	r5,zero,81dab8 <__kernel_rem_pio2+0x680>
  81d8d4:	da809917 	ldw	r10,612(sp)
  81d8d8:	50bfff17 	ldw	r2,-4(r10)
  81d8dc:	1001511e 	bne	r2,zero,81de24 <__kernel_rem_pio2+0x9ec>
  81d8e0:	d880a117 	ldw	r2,644(sp)
  81d8e4:	01000044 	movi	r4,1
  81d8e8:	10ffff04 	addi	r3,r2,-4
  81d8ec:	18ffff04 	addi	r3,r3,-4
  81d8f0:	18800017 	ldw	r2,0(r3)
  81d8f4:	21000044 	addi	r4,r4,1
  81d8f8:	103ffc26 	beq	r2,zero,81d8ec <__kernel_rem_pio2+0x4b4>
  81d8fc:	d8c08d17 	ldw	r3,564(sp)
  81d900:	192f883a 	add	r23,r3,r4
  81d904:	1f000044 	addi	fp,r3,1
  81d908:	bf00020e 	bge	r23,fp,81d914 <__kernel_rem_pio2+0x4dc>
  81d90c:	ddc08d15 	stw	r23,564(sp)
  81d910:	003f3a06 	br	81d5fc <__kernel_rem_pio2+0x1c4>
  81d914:	d9408c17 	ldw	r5,560(sp)
  81d918:	d9009817 	ldw	r4,608(sp)
  81d91c:	da80ae17 	ldw	r10,696(sp)
  81d920:	1945883a 	add	r2,r3,r5
  81d924:	190f883a 	add	r7,r3,r4
  81d928:	1085883a 	add	r2,r2,r2
  81d92c:	380a90fa 	slli	r5,r7,3
  81d930:	e00c90fa 	slli	r6,fp,3
  81d934:	1085883a 	add	r2,r2,r2
  81d938:	5085883a 	add	r2,r10,r2
  81d93c:	d8c01404 	addi	r3,sp,80
  81d940:	d9006404 	addi	r4,sp,400
  81d944:	10800104 	addi	r2,r2,4
  81d948:	196b883a 	add	r21,r3,r5
  81d94c:	21a1883a 	add	r16,r4,r6
  81d950:	d8809115 	stw	r2,580(sp)
  81d954:	d9c09015 	stw	r7,576(sp)
  81d958:	d8809117 	ldw	r2,580(sp)
  81d95c:	11000017 	ldw	r4,0(r2)
  81d960:	08208500 	call	820850 <__floatsidf>
  81d964:	a8c00115 	stw	r3,4(r21)
  81d968:	d8c0a217 	ldw	r3,648(sp)
  81d96c:	a8800015 	stw	r2,0(r21)
  81d970:	18002826 	beq	r3,zero,81da14 <__kernel_rem_pio2+0x5dc>
  81d974:	d9009017 	ldw	r4,576(sp)
  81d978:	dd009617 	ldw	r20,600(sp)
  81d97c:	0023883a 	mov	r17,zero
  81d980:	200490fa 	slli	r2,r4,3
  81d984:	002d883a 	mov	r22,zero
  81d988:	0025883a 	mov	r18,zero
  81d98c:	16e7883a 	add	r19,r2,sp
  81d990:	98801417 	ldw	r2,80(r19)
  81d994:	98c01517 	ldw	r3,84(r19)
  81d998:	a1800017 	ldw	r6,0(r20)
  81d99c:	a1c00117 	ldw	r7,4(r20)
  81d9a0:	180b883a 	mov	r5,r3
  81d9a4:	1009883a 	mov	r4,r2
  81d9a8:	08200140 	call	820014 <__muldf3>
  81d9ac:	180f883a 	mov	r7,r3
  81d9b0:	900b883a 	mov	r5,r18
  81d9b4:	8809883a 	mov	r4,r17
  81d9b8:	100d883a 	mov	r6,r2
  81d9bc:	081ffa00 	call	81ffa0 <__adddf3>
  81d9c0:	d9409817 	ldw	r5,608(sp)
  81d9c4:	b5800044 	addi	r22,r22,1
  81d9c8:	9cfffe04 	addi	r19,r19,-8
  81d9cc:	1023883a 	mov	r17,r2
  81d9d0:	1825883a 	mov	r18,r3
  81d9d4:	a5000204 	addi	r20,r20,8
  81d9d8:	2dbfed1e 	bne	r5,r22,81d990 <__kernel_rem_pio2+0x558>
  81d9dc:	d9809117 	ldw	r6,580(sp)
  81d9e0:	d9c09017 	ldw	r7,576(sp)
  81d9e4:	e7000044 	addi	fp,fp,1
  81d9e8:	31800104 	addi	r6,r6,4
  81d9ec:	39c00044 	addi	r7,r7,1
  81d9f0:	84800115 	stw	r18,4(r16)
  81d9f4:	84400015 	stw	r17,0(r16)
  81d9f8:	d9809115 	stw	r6,580(sp)
  81d9fc:	ad400204 	addi	r21,r21,8
  81da00:	84000204 	addi	r16,r16,8
  81da04:	d9c09015 	stw	r7,576(sp)
  81da08:	bf3fd30e 	bge	r23,fp,81d958 <__kernel_rem_pio2+0x520>
  81da0c:	ddc08d15 	stw	r23,564(sp)
  81da10:	003efa06 	br	81d5fc <__kernel_rem_pio2+0x1c4>
  81da14:	0023883a 	mov	r17,zero
  81da18:	0025883a 	mov	r18,zero
  81da1c:	003fef06 	br	81d9dc <__kernel_rem_pio2+0x5a4>
  81da20:	0029883a 	mov	r20,zero
  81da24:	054ffc34 	movhi	r21,16368
  81da28:	880f883a 	mov	r7,r17
  81da2c:	800d883a 	mov	r6,r16
  81da30:	a009883a 	mov	r4,r20
  81da34:	a80b883a 	mov	r5,r21
  81da38:	081ff200 	call	81ff20 <__subdf3>
  81da3c:	1025883a 	mov	r18,r2
  81da40:	b005003a 	cmpeq	r2,r22,zero
  81da44:	1827883a 	mov	r19,r3
  81da48:	9021883a 	mov	r16,r18
  81da4c:	1823883a 	mov	r17,r3
  81da50:	103f8a1e 	bne	r2,zero,81d87c <__kernel_rem_pio2+0x444>
  81da54:	d9809317 	ldw	r6,588(sp)
  81da58:	0009883a 	mov	r4,zero
  81da5c:	a80b883a 	mov	r5,r21
  81da60:	081eee80 	call	81eee8 <scalbn>
  81da64:	180f883a 	mov	r7,r3
  81da68:	9009883a 	mov	r4,r18
  81da6c:	980b883a 	mov	r5,r19
  81da70:	100d883a 	mov	r6,r2
  81da74:	081ff200 	call	81ff20 <__subdf3>
  81da78:	1021883a 	mov	r16,r2
  81da7c:	1823883a 	mov	r17,r3
  81da80:	000d883a 	mov	r6,zero
  81da84:	000f883a 	mov	r7,zero
  81da88:	8009883a 	mov	r4,r16
  81da8c:	880b883a 	mov	r5,r17
  81da90:	08206300 	call	820630 <__eqdf2>
  81da94:	103f7f26 	beq	r2,zero,81d894 <__kernel_rem_pio2+0x45c>
  81da98:	000d883a 	mov	r6,zero
  81da9c:	000f883a 	mov	r7,zero
  81daa0:	8009883a 	mov	r4,r16
  81daa4:	880b883a 	mov	r5,r17
  81daa8:	08206300 	call	820630 <__eqdf2>
  81daac:	10019a1e 	bne	r2,zero,81e118 <__kernel_rem_pio2+0xce0>
  81dab0:	da808d17 	ldw	r10,564(sp)
  81dab4:	51bfffc4 	addi	r6,r10,-1
  81dab8:	3185883a 	add	r2,r6,r6
  81dabc:	1085883a 	add	r2,r2,r2
  81dac0:	d9009317 	ldw	r4,588(sp)
  81dac4:	16c5883a 	add	r2,r2,sp
  81dac8:	10c00017 	ldw	r3,0(r2)
  81dacc:	213ffa04 	addi	r4,r4,-24
  81dad0:	d9009315 	stw	r4,588(sp)
  81dad4:	1801d41e 	bne	r3,zero,81e228 <__kernel_rem_pio2+0xdf0>
  81dad8:	d9808d15 	stw	r6,564(sp)
  81dadc:	1007883a 	mov	r3,r2
  81dae0:	d9408d17 	ldw	r5,564(sp)
  81dae4:	d9809317 	ldw	r6,588(sp)
  81dae8:	18ffff04 	addi	r3,r3,-4
  81daec:	18800017 	ldw	r2,0(r3)
  81daf0:	297fffc4 	addi	r5,r5,-1
  81daf4:	31bffa04 	addi	r6,r6,-24
  81daf8:	d9408d15 	stw	r5,564(sp)
  81dafc:	d9809315 	stw	r6,588(sp)
  81db00:	103ff726 	beq	r2,zero,81dae0 <__kernel_rem_pio2+0x6a8>
  81db04:	d9809317 	ldw	r6,588(sp)
  81db08:	0005883a 	mov	r2,zero
  81db0c:	00cffc34 	movhi	r3,16368
  81db10:	180b883a 	mov	r5,r3
  81db14:	1009883a 	mov	r4,r2
  81db18:	081eee80 	call	81eee8 <scalbn>
  81db1c:	d9808d17 	ldw	r6,564(sp)
  81db20:	1021883a 	mov	r16,r2
  81db24:	1823883a 	mov	r17,r3
  81db28:	30004616 	blt	r6,zero,81dc44 <__kernel_rem_pio2+0x80c>
  81db2c:	300690fa 	slli	r3,r6,3
  81db30:	3185883a 	add	r2,r6,r6
  81db34:	1085883a 	add	r2,r2,r2
  81db38:	16e9883a 	add	r20,r2,sp
  81db3c:	1ee5883a 	add	r18,r3,sp
  81db40:	3027883a 	mov	r19,r6
  81db44:	057fffc4 	movi	r21,-1
  81db48:	a1000017 	ldw	r4,0(r20)
  81db4c:	9cffffc4 	addi	r19,r19,-1
  81db50:	a53fff04 	addi	r20,r20,-4
  81db54:	08208500 	call	820850 <__floatsidf>
  81db58:	800d883a 	mov	r6,r16
  81db5c:	880f883a 	mov	r7,r17
  81db60:	180b883a 	mov	r5,r3
  81db64:	1009883a 	mov	r4,r2
  81db68:	08200140 	call	820014 <__muldf3>
  81db6c:	0015883a 	mov	r10,zero
  81db70:	02cf9c34 	movhi	r11,15984
  81db74:	880b883a 	mov	r5,r17
  81db78:	8009883a 	mov	r4,r16
  81db7c:	90c06515 	stw	r3,404(r18)
  81db80:	90806415 	stw	r2,400(r18)
  81db84:	580f883a 	mov	r7,r11
  81db88:	500d883a 	mov	r6,r10
  81db8c:	08200140 	call	820014 <__muldf3>
  81db90:	1021883a 	mov	r16,r2
  81db94:	1823883a 	mov	r17,r3
  81db98:	94bffe04 	addi	r18,r18,-8
  81db9c:	9d7fea1e 	bne	r19,r21,81db48 <__kernel_rem_pio2+0x710>
  81dba0:	d9c09517 	ldw	r7,596(sp)
  81dba4:	dd808d17 	ldw	r22,564(sp)
  81dba8:	002b883a 	mov	r21,zero
  81dbac:	382e403a 	cmpge	r23,r7,zero
  81dbb0:	b800aa26 	beq	r23,zero,81de5c <__kernel_rem_pio2+0xa24>
  81dbb4:	a800a916 	blt	r21,zero,81de5c <__kernel_rem_pio2+0xa24>
  81dbb8:	b00690fa 	slli	r3,r22,3
  81dbbc:	d8806404 	addi	r2,sp,400
  81dbc0:	0021883a 	mov	r16,zero
  81dbc4:	10e9883a 	add	r20,r2,r3
  81dbc8:	0027883a 	mov	r19,zero
  81dbcc:	0023883a 	mov	r17,zero
  81dbd0:	04802134 	movhi	r18,132
  81dbd4:	94ba1a04 	addi	r18,r18,-6040
  81dbd8:	00000106 	br	81dbe0 <__kernel_rem_pio2+0x7a8>
  81dbdc:	acc01116 	blt	r21,r19,81dc24 <__kernel_rem_pio2+0x7ec>
  81dbe0:	91000017 	ldw	r4,0(r18)
  81dbe4:	91400117 	ldw	r5,4(r18)
  81dbe8:	a1800017 	ldw	r6,0(r20)
  81dbec:	a1c00117 	ldw	r7,4(r20)
  81dbf0:	9cc00044 	addi	r19,r19,1
  81dbf4:	94800204 	addi	r18,r18,8
  81dbf8:	08200140 	call	820014 <__muldf3>
  81dbfc:	180f883a 	mov	r7,r3
  81dc00:	880b883a 	mov	r5,r17
  81dc04:	8009883a 	mov	r4,r16
  81dc08:	100d883a 	mov	r6,r2
  81dc0c:	081ffa00 	call	81ffa0 <__adddf3>
  81dc10:	da809517 	ldw	r10,596(sp)
  81dc14:	a5000204 	addi	r20,r20,8
  81dc18:	1021883a 	mov	r16,r2
  81dc1c:	1823883a 	mov	r17,r3
  81dc20:	54ffee0e 	bge	r10,r19,81dbdc <__kernel_rem_pio2+0x7a4>
  81dc24:	a80490fa 	slli	r2,r21,3
  81dc28:	b5bfffc4 	addi	r22,r22,-1
  81dc2c:	ad400044 	addi	r21,r21,1
  81dc30:	16c5883a 	add	r2,r2,sp
  81dc34:	14403d15 	stw	r17,244(r2)
  81dc38:	14003c15 	stw	r16,240(r2)
  81dc3c:	00bfffc4 	movi	r2,-1
  81dc40:	b0bfdb1e 	bne	r22,r2,81dbb0 <__kernel_rem_pio2+0x778>
  81dc44:	d8c0ad17 	ldw	r3,692(sp)
  81dc48:	00800084 	movi	r2,2
  81dc4c:	10c09316 	blt	r2,r3,81de9c <__kernel_rem_pio2+0xa64>
  81dc50:	00c1120e 	bge	zero,r3,81e09c <__kernel_rem_pio2+0xc64>
  81dc54:	d9808d17 	ldw	r6,564(sp)
  81dc58:	30018d16 	blt	r6,zero,81e290 <__kernel_rem_pio2+0xe58>
  81dc5c:	d8c08d17 	ldw	r3,564(sp)
  81dc60:	0011883a 	mov	r8,zero
  81dc64:	0013883a 	mov	r9,zero
  81dc68:	180490fa 	slli	r2,r3,3
  81dc6c:	1823883a 	mov	r17,r3
  81dc70:	04bfffc4 	movi	r18,-1
  81dc74:	16e1883a 	add	r16,r2,sp
  81dc78:	80803c17 	ldw	r2,240(r16)
  81dc7c:	80c03d17 	ldw	r3,244(r16)
  81dc80:	480b883a 	mov	r5,r9
  81dc84:	4009883a 	mov	r4,r8
  81dc88:	180f883a 	mov	r7,r3
  81dc8c:	100d883a 	mov	r6,r2
  81dc90:	081ffa00 	call	81ffa0 <__adddf3>
  81dc94:	8c7fffc4 	addi	r17,r17,-1
  81dc98:	843ffe04 	addi	r16,r16,-8
  81dc9c:	1011883a 	mov	r8,r2
  81dca0:	1813883a 	mov	r9,r3
  81dca4:	8cbff41e 	bne	r17,r18,81dc78 <__kernel_rem_pio2+0x840>
  81dca8:	d9009217 	ldw	r4,584(sp)
  81dcac:	20015b1e 	bne	r4,zero,81e21c <__kernel_rem_pio2+0xde4>
  81dcb0:	4009883a 	mov	r4,r8
  81dcb4:	480b883a 	mov	r5,r9
  81dcb8:	d9809717 	ldw	r6,604(sp)
  81dcbc:	d8803c17 	ldw	r2,240(sp)
  81dcc0:	480f883a 	mov	r7,r9
  81dcc4:	31400115 	stw	r5,4(r6)
  81dcc8:	31000015 	stw	r4,0(r6)
  81dccc:	d8c03d17 	ldw	r3,244(sp)
  81dcd0:	400d883a 	mov	r6,r8
  81dcd4:	1009883a 	mov	r4,r2
  81dcd8:	180b883a 	mov	r5,r3
  81dcdc:	081ff200 	call	81ff20 <__subdf3>
  81dce0:	d9c08d17 	ldw	r7,564(sp)
  81dce4:	1011883a 	mov	r8,r2
  81dce8:	1813883a 	mov	r9,r3
  81dcec:	01c00d0e 	bge	zero,r7,81dd24 <__kernel_rem_pio2+0x8ec>
  81dcf0:	0023883a 	mov	r17,zero
  81dcf4:	dc003e04 	addi	r16,sp,248
  81dcf8:	81800017 	ldw	r6,0(r16)
  81dcfc:	81c00117 	ldw	r7,4(r16)
  81dd00:	480b883a 	mov	r5,r9
  81dd04:	4009883a 	mov	r4,r8
  81dd08:	081ffa00 	call	81ffa0 <__adddf3>
  81dd0c:	da808d17 	ldw	r10,564(sp)
  81dd10:	8c400044 	addi	r17,r17,1
  81dd14:	1011883a 	mov	r8,r2
  81dd18:	1813883a 	mov	r9,r3
  81dd1c:	84000204 	addi	r16,r16,8
  81dd20:	8abff51e 	bne	r17,r10,81dcf8 <__kernel_rem_pio2+0x8c0>
  81dd24:	d8809217 	ldw	r2,584(sp)
  81dd28:	10000226 	beq	r2,zero,81dd34 <__kernel_rem_pio2+0x8fc>
  81dd2c:	48e0003c 	xorhi	r3,r9,32768
  81dd30:	1813883a 	mov	r9,r3
  81dd34:	d8c09717 	ldw	r3,604(sp)
  81dd38:	1a400315 	stw	r9,12(r3)
  81dd3c:	1a000215 	stw	r8,8(r3)
  81dd40:	d8c09417 	ldw	r3,592(sp)
  81dd44:	188001cc 	andi	r2,r3,7
  81dd48:	dfc0ac17 	ldw	ra,688(sp)
  81dd4c:	df00ab17 	ldw	fp,684(sp)
  81dd50:	ddc0aa17 	ldw	r23,680(sp)
  81dd54:	dd80a917 	ldw	r22,676(sp)
  81dd58:	dd40a817 	ldw	r21,672(sp)
  81dd5c:	dd00a717 	ldw	r20,668(sp)
  81dd60:	dcc0a617 	ldw	r19,664(sp)
  81dd64:	dc80a517 	ldw	r18,660(sp)
  81dd68:	dc40a417 	ldw	r17,656(sp)
  81dd6c:	dc00a317 	ldw	r16,652(sp)
  81dd70:	dec0ad04 	addi	sp,sp,692
  81dd74:	f800283a 	ret
  81dd78:	d8809317 	ldw	r2,588(sp)
  81dd7c:	10001f1e 	bne	r2,zero,81ddfc <__kernel_rem_pio2+0x9c4>
  81dd80:	d8c08d17 	ldw	r3,564(sp)
  81dd84:	18c5883a 	add	r2,r3,r3
  81dd88:	1085883a 	add	r2,r2,r2
  81dd8c:	16c5883a 	add	r2,r2,sp
  81dd90:	10ffff17 	ldw	r3,-4(r2)
  81dd94:	1807d5fa 	srai	r3,r3,23
  81dd98:	d8c09215 	stw	r3,584(sp)
  81dd9c:	003e8e06 	br	81d7d8 <__kernel_rem_pio2+0x3a0>
  81dda0:	d9008d17 	ldw	r4,564(sp)
  81dda4:	d9409317 	ldw	r5,588(sp)
  81dda8:	2145c83a 	sub	r2,r4,r5
  81ddac:	1085883a 	add	r2,r2,r2
  81ddb0:	1085883a 	add	r2,r2,r2
  81ddb4:	16c5883a 	add	r2,r2,sp
  81ddb8:	10c00017 	ldw	r3,0(r2)
  81ddbc:	01002034 	movhi	r4,128
  81ddc0:	213fffc4 	addi	r4,r4,-1
  81ddc4:	1906703a 	and	r3,r3,r4
  81ddc8:	10c00015 	stw	r3,0(r2)
  81ddcc:	003ea806 	br	81d870 <__kernel_rem_pio2+0x438>
  81ddd0:	d9808d17 	ldw	r6,564(sp)
  81ddd4:	01001034 	movhi	r4,64
  81ddd8:	213fffc4 	addi	r4,r4,-1
  81dddc:	30bfffc4 	addi	r2,r6,-1
  81dde0:	1085883a 	add	r2,r2,r2
  81dde4:	1085883a 	add	r2,r2,r2
  81dde8:	16c5883a 	add	r2,r2,sp
  81ddec:	10c00017 	ldw	r3,0(r2)
  81ddf0:	1906703a 	and	r3,r3,r4
  81ddf4:	10c00015 	stw	r3,0(r2)
  81ddf8:	003e9d06 	br	81d870 <__kernel_rem_pio2+0x438>
  81ddfc:	0005883a 	mov	r2,zero
  81de00:	00cff834 	movhi	r3,16352
  81de04:	300b883a 	mov	r5,r6
  81de08:	180f883a 	mov	r7,r3
  81de0c:	8009883a 	mov	r4,r16
  81de10:	100d883a 	mov	r6,r2
  81de14:	08207400 	call	820740 <__gedf2>
  81de18:	10001d0e 	bge	r2,zero,81de90 <__kernel_rem_pio2+0xa58>
  81de1c:	d8009215 	stw	zero,584(sp)
  81de20:	003e9606 	br	81d87c <__kernel_rem_pio2+0x444>
  81de24:	d8c08d17 	ldw	r3,564(sp)
  81de28:	01000044 	movi	r4,1
  81de2c:	192f883a 	add	r23,r3,r4
  81de30:	1f000044 	addi	fp,r3,1
  81de34:	bf3eb516 	blt	r23,fp,81d90c <__kernel_rem_pio2+0x4d4>
  81de38:	003eb606 	br	81d914 <__kernel_rem_pio2+0x4dc>
  81de3c:	0021883a 	mov	r16,zero
  81de40:	0023883a 	mov	r17,zero
  81de44:	a5000044 	addi	r20,r20,1
  81de48:	ac400115 	stw	r17,4(r21)
  81de4c:	ac000015 	stw	r16,0(r21)
  81de50:	ad400204 	addi	r21,r21,8
  81de54:	a5fdba1e 	bne	r20,r23,81d540 <__kernel_rem_pio2+0x108>
  81de58:	003dd806 	br	81d5bc <__kernel_rem_pio2+0x184>
  81de5c:	a80490fa 	slli	r2,r21,3
  81de60:	0021883a 	mov	r16,zero
  81de64:	0023883a 	mov	r17,zero
  81de68:	16c5883a 	add	r2,r2,sp
  81de6c:	14403d15 	stw	r17,244(r2)
  81de70:	14003c15 	stw	r16,240(r2)
  81de74:	b5bfffc4 	addi	r22,r22,-1
  81de78:	00bfffc4 	movi	r2,-1
  81de7c:	ad400044 	addi	r21,r21,1
  81de80:	b0bf4b1e 	bne	r22,r2,81dbb0 <__kernel_rem_pio2+0x778>
  81de84:	003f6f06 	br	81dc44 <__kernel_rem_pio2+0x80c>
  81de88:	002d883a 	mov	r22,zero
  81de8c:	003e7106 	br	81d854 <__kernel_rem_pio2+0x41c>
  81de90:	01000084 	movi	r4,2
  81de94:	d9009215 	stw	r4,584(sp)
  81de98:	003e5106 	br	81d7e0 <__kernel_rem_pio2+0x3a8>
  81de9c:	d900ad17 	ldw	r4,692(sp)
  81dea0:	008000c4 	movi	r2,3
  81dea4:	20bfa61e 	bne	r4,r2,81dd40 <__kernel_rem_pio2+0x908>
  81dea8:	d9c08d17 	ldw	r7,564(sp)
  81deac:	01c02c0e 	bge	zero,r7,81df60 <__kernel_rem_pio2+0xb28>
  81deb0:	3805883a 	mov	r2,r7
  81deb4:	00000106 	br	81debc <__kernel_rem_pio2+0xa84>
  81deb8:	d8808e17 	ldw	r2,568(sp)
  81debc:	113fffc4 	addi	r4,r2,-1
  81dec0:	100690fa 	slli	r3,r2,3
  81dec4:	200490fa 	slli	r2,r4,3
  81dec8:	d9008e15 	stw	r4,568(sp)
  81decc:	1ef9883a 	add	fp,r3,sp
  81ded0:	16c5883a 	add	r2,r2,sp
  81ded4:	d8809a15 	stw	r2,616(sp)
  81ded8:	11403c04 	addi	r5,r2,240
  81dedc:	e1803c04 	addi	r6,fp,240
  81dee0:	14003c17 	ldw	r16,240(r2)
  81dee4:	e5003c17 	ldw	r20,240(fp)
  81dee8:	d9409b15 	stw	r5,620(sp)
  81deec:	d9809c15 	stw	r6,624(sp)
  81def0:	35400117 	ldw	r21,4(r6)
  81def4:	2c400117 	ldw	r17,4(r5)
  81def8:	8009883a 	mov	r4,r16
  81defc:	a00d883a 	mov	r6,r20
  81df00:	880b883a 	mov	r5,r17
  81df04:	a80f883a 	mov	r7,r21
  81df08:	081ffa00 	call	81ffa0 <__adddf3>
  81df0c:	100d883a 	mov	r6,r2
  81df10:	880b883a 	mov	r5,r17
  81df14:	8009883a 	mov	r4,r16
  81df18:	180f883a 	mov	r7,r3
  81df1c:	1025883a 	mov	r18,r2
  81df20:	1827883a 	mov	r19,r3
  81df24:	081ff200 	call	81ff20 <__subdf3>
  81df28:	180f883a 	mov	r7,r3
  81df2c:	a80b883a 	mov	r5,r21
  81df30:	a009883a 	mov	r4,r20
  81df34:	100d883a 	mov	r6,r2
  81df38:	081ffa00 	call	81ffa0 <__adddf3>
  81df3c:	e0803c15 	stw	r2,240(fp)
  81df40:	d9c09c17 	ldw	r7,624(sp)
  81df44:	38c00115 	stw	r3,4(r7)
  81df48:	da809a17 	ldw	r10,616(sp)
  81df4c:	54803c15 	stw	r18,240(r10)
  81df50:	d8809b17 	ldw	r2,620(sp)
  81df54:	14c00115 	stw	r19,4(r2)
  81df58:	d8c08e17 	ldw	r3,568(sp)
  81df5c:	183fd61e 	bne	r3,zero,81deb8 <__kernel_rem_pio2+0xa80>
  81df60:	d9008d17 	ldw	r4,564(sp)
  81df64:	00800044 	movi	r2,1
  81df68:	1100cc0e 	bge	r2,r4,81e29c <__kernel_rem_pio2+0xe64>
  81df6c:	d8808d17 	ldw	r2,564(sp)
  81df70:	117fffc4 	addi	r5,r2,-1
  81df74:	100690fa 	slli	r3,r2,3
  81df78:	280490fa 	slli	r2,r5,3
  81df7c:	d9408f15 	stw	r5,572(sp)
  81df80:	1ef9883a 	add	fp,r3,sp
  81df84:	16c5883a 	add	r2,r2,sp
  81df88:	d8809d15 	stw	r2,628(sp)
  81df8c:	11803c04 	addi	r6,r2,240
  81df90:	e1c03c04 	addi	r7,fp,240
  81df94:	14003c17 	ldw	r16,240(r2)
  81df98:	e5003c17 	ldw	r20,240(fp)
  81df9c:	d9809e15 	stw	r6,632(sp)
  81dfa0:	d9c09f15 	stw	r7,636(sp)
  81dfa4:	34400117 	ldw	r17,4(r6)
  81dfa8:	3d400117 	ldw	r21,4(r7)
  81dfac:	8009883a 	mov	r4,r16
  81dfb0:	880b883a 	mov	r5,r17
  81dfb4:	a00d883a 	mov	r6,r20
  81dfb8:	a80f883a 	mov	r7,r21
  81dfbc:	081ffa00 	call	81ffa0 <__adddf3>
  81dfc0:	100d883a 	mov	r6,r2
  81dfc4:	880b883a 	mov	r5,r17
  81dfc8:	8009883a 	mov	r4,r16
  81dfcc:	180f883a 	mov	r7,r3
  81dfd0:	1025883a 	mov	r18,r2
  81dfd4:	1827883a 	mov	r19,r3
  81dfd8:	081ff200 	call	81ff20 <__subdf3>
  81dfdc:	180f883a 	mov	r7,r3
  81dfe0:	a80b883a 	mov	r5,r21
  81dfe4:	a009883a 	mov	r4,r20
  81dfe8:	100d883a 	mov	r6,r2
  81dfec:	081ffa00 	call	81ffa0 <__adddf3>
  81dff0:	e0803c15 	stw	r2,240(fp)
  81dff4:	da809f17 	ldw	r10,636(sp)
  81dff8:	50c00115 	stw	r3,4(r10)
  81dffc:	d8c09d17 	ldw	r3,628(sp)
  81e000:	d8808f17 	ldw	r2,572(sp)
  81e004:	1c803c15 	stw	r18,240(r3)
  81e008:	d9009e17 	ldw	r4,632(sp)
  81e00c:	00c00044 	movi	r3,1
  81e010:	24c00115 	stw	r19,4(r4)
  81e014:	d9408f17 	ldw	r5,572(sp)
  81e018:	28ffd51e 	bne	r5,r3,81df70 <__kernel_rem_pio2+0xb38>
  81e01c:	dc008d17 	ldw	r16,564(sp)
  81e020:	0011883a 	mov	r8,zero
  81e024:	1825883a 	mov	r18,r3
  81e028:	800490fa 	slli	r2,r16,3
  81e02c:	0013883a 	mov	r9,zero
  81e030:	16e3883a 	add	r17,r2,sp
  81e034:	88803c17 	ldw	r2,240(r17)
  81e038:	88c03d17 	ldw	r3,244(r17)
  81e03c:	480b883a 	mov	r5,r9
  81e040:	4009883a 	mov	r4,r8
  81e044:	180f883a 	mov	r7,r3
  81e048:	100d883a 	mov	r6,r2
  81e04c:	081ffa00 	call	81ffa0 <__adddf3>
  81e050:	843fffc4 	addi	r16,r16,-1
  81e054:	8c7ffe04 	addi	r17,r17,-8
  81e058:	1011883a 	mov	r8,r2
  81e05c:	1813883a 	mov	r9,r3
  81e060:	84bff41e 	bne	r16,r18,81e034 <__kernel_rem_pio2+0xbfc>
  81e064:	d9809217 	ldw	r6,584(sp)
  81e068:	30007a1e 	bne	r6,zero,81e254 <__kernel_rem_pio2+0xe1c>
  81e06c:	d9c09717 	ldw	r7,604(sp)
  81e070:	d8803c17 	ldw	r2,240(sp)
  81e074:	d9003e17 	ldw	r4,248(sp)
  81e078:	3a400515 	stw	r9,20(r7)
  81e07c:	d8c03d17 	ldw	r3,244(sp)
  81e080:	d9403f17 	ldw	r5,252(sp)
  81e084:	3a000415 	stw	r8,16(r7)
  81e088:	38c00115 	stw	r3,4(r7)
  81e08c:	39400315 	stw	r5,12(r7)
  81e090:	38800015 	stw	r2,0(r7)
  81e094:	39000215 	stw	r4,8(r7)
  81e098:	003f2906 	br	81dd40 <__kernel_rem_pio2+0x908>
  81e09c:	183f281e 	bne	r3,zero,81dd40 <__kernel_rem_pio2+0x908>
  81e0a0:	d9408d17 	ldw	r5,564(sp)
  81e0a4:	28008016 	blt	r5,zero,81e2a8 <__kernel_rem_pio2+0xe70>
  81e0a8:	dc008d17 	ldw	r16,564(sp)
  81e0ac:	000d883a 	mov	r6,zero
  81e0b0:	000f883a 	mov	r7,zero
  81e0b4:	800490fa 	slli	r2,r16,3
  81e0b8:	04bfffc4 	movi	r18,-1
  81e0bc:	16e3883a 	add	r17,r2,sp
  81e0c0:	88803c17 	ldw	r2,240(r17)
  81e0c4:	88c03d17 	ldw	r3,244(r17)
  81e0c8:	380b883a 	mov	r5,r7
  81e0cc:	3009883a 	mov	r4,r6
  81e0d0:	180f883a 	mov	r7,r3
  81e0d4:	100d883a 	mov	r6,r2
  81e0d8:	081ffa00 	call	81ffa0 <__adddf3>
  81e0dc:	843fffc4 	addi	r16,r16,-1
  81e0e0:	8c7ffe04 	addi	r17,r17,-8
  81e0e4:	100d883a 	mov	r6,r2
  81e0e8:	180f883a 	mov	r7,r3
  81e0ec:	84bff41e 	bne	r16,r18,81e0c0 <__kernel_rem_pio2+0xc88>
  81e0f0:	da809217 	ldw	r10,584(sp)
  81e0f4:	50000226 	beq	r10,zero,81e100 <__kernel_rem_pio2+0xcc8>
  81e0f8:	38e0003c 	xorhi	r3,r7,32768
  81e0fc:	180f883a 	mov	r7,r3
  81e100:	d8809717 	ldw	r2,604(sp)
  81e104:	11c00115 	stw	r7,4(r2)
  81e108:	11800015 	stw	r6,0(r2)
  81e10c:	003f0c06 	br	81dd40 <__kernel_rem_pio2+0x908>
  81e110:	d8008c15 	stw	zero,560(sp)
  81e114:	003ce606 	br	81d4b0 <__kernel_rem_pio2+0x78>
  81e118:	d9c09317 	ldw	r7,588(sp)
  81e11c:	880b883a 	mov	r5,r17
  81e120:	8009883a 	mov	r4,r16
  81e124:	01cdc83a 	sub	r6,zero,r7
  81e128:	081eee80 	call	81eee8 <scalbn>
  81e12c:	0011883a 	mov	r8,zero
  81e130:	02505c34 	movhi	r9,16752
  81e134:	480f883a 	mov	r7,r9
  81e138:	1009883a 	mov	r4,r2
  81e13c:	180b883a 	mov	r5,r3
  81e140:	400d883a 	mov	r6,r8
  81e144:	102d883a 	mov	r22,r2
  81e148:	182f883a 	mov	r23,r3
  81e14c:	08207400 	call	820740 <__gedf2>
  81e150:	10003716 	blt	r2,zero,81e230 <__kernel_rem_pio2+0xdf8>
  81e154:	0005883a 	mov	r2,zero
  81e158:	00cf9c34 	movhi	r3,15984
  81e15c:	180f883a 	mov	r7,r3
  81e160:	100d883a 	mov	r6,r2
  81e164:	b009883a 	mov	r4,r22
  81e168:	b80b883a 	mov	r5,r23
  81e16c:	08200140 	call	820014 <__muldf3>
  81e170:	180b883a 	mov	r5,r3
  81e174:	1009883a 	mov	r4,r2
  81e178:	08209480 	call	820948 <__fixdfsi>
  81e17c:	1009883a 	mov	r4,r2
  81e180:	08208500 	call	820850 <__floatsidf>
  81e184:	da808d17 	ldw	r10,564(sp)
  81e188:	1023883a 	mov	r17,r2
  81e18c:	1825883a 	mov	r18,r3
  81e190:	0005883a 	mov	r2,zero
  81e194:	00f05c34 	movhi	r3,49520
  81e198:	180f883a 	mov	r7,r3
  81e19c:	8809883a 	mov	r4,r17
  81e1a0:	900b883a 	mov	r5,r18
  81e1a4:	100d883a 	mov	r6,r2
  81e1a8:	52ab883a 	add	r21,r10,r10
  81e1ac:	08200140 	call	820014 <__muldf3>
  81e1b0:	180f883a 	mov	r7,r3
  81e1b4:	b80b883a 	mov	r5,r23
  81e1b8:	100d883a 	mov	r6,r2
  81e1bc:	b009883a 	mov	r4,r22
  81e1c0:	081ffa00 	call	81ffa0 <__adddf3>
  81e1c4:	100d883a 	mov	r6,r2
  81e1c8:	d8808d17 	ldw	r2,564(sp)
  81e1cc:	180b883a 	mov	r5,r3
  81e1d0:	3009883a 	mov	r4,r6
  81e1d4:	10800044 	addi	r2,r2,1
  81e1d8:	ad6b883a 	add	r21,r21,r21
  81e1dc:	d8808d15 	stw	r2,564(sp)
  81e1e0:	08209480 	call	820948 <__fixdfsi>
  81e1e4:	d8c08d17 	ldw	r3,564(sp)
  81e1e8:	aeeb883a 	add	r21,r21,sp
  81e1ec:	8809883a 	mov	r4,r17
  81e1f0:	900b883a 	mov	r5,r18
  81e1f4:	a8800015 	stw	r2,0(r21)
  81e1f8:	18e1883a 	add	r16,r3,r3
  81e1fc:	08209480 	call	820948 <__fixdfsi>
  81e200:	d9009317 	ldw	r4,588(sp)
  81e204:	8421883a 	add	r16,r16,r16
  81e208:	86e1883a 	add	r16,r16,sp
  81e20c:	21000604 	addi	r4,r4,24
  81e210:	d9009315 	stw	r4,588(sp)
  81e214:	80800015 	stw	r2,0(r16)
  81e218:	003e3a06 	br	81db04 <__kernel_rem_pio2+0x6cc>
  81e21c:	4009883a 	mov	r4,r8
  81e220:	4960003c 	xorhi	r5,r9,32768
  81e224:	003ea406 	br	81dcb8 <__kernel_rem_pio2+0x880>
  81e228:	d9808d15 	stw	r6,564(sp)
  81e22c:	003e3506 	br	81db04 <__kernel_rem_pio2+0x6cc>
  81e230:	d9408d17 	ldw	r5,564(sp)
  81e234:	b009883a 	mov	r4,r22
  81e238:	2961883a 	add	r16,r5,r5
  81e23c:	8421883a 	add	r16,r16,r16
  81e240:	b80b883a 	mov	r5,r23
  81e244:	86e1883a 	add	r16,r16,sp
  81e248:	08209480 	call	820948 <__fixdfsi>
  81e24c:	80800015 	stw	r2,0(r16)
  81e250:	003e2c06 	br	81db04 <__kernel_rem_pio2+0x6cc>
  81e254:	d8c03d17 	ldw	r3,244(sp)
  81e258:	d9403f17 	ldw	r5,252(sp)
  81e25c:	da809717 	ldw	r10,604(sp)
  81e260:	d8803c17 	ldw	r2,240(sp)
  81e264:	d9003e17 	ldw	r4,248(sp)
  81e268:	49e0003c 	xorhi	r7,r9,32768
  81e26c:	51c00515 	stw	r7,20(r10)
  81e270:	19a0003c 	xorhi	r6,r3,32768
  81e274:	29e0003c 	xorhi	r7,r5,32768
  81e278:	51800115 	stw	r6,4(r10)
  81e27c:	51c00315 	stw	r7,12(r10)
  81e280:	50800015 	stw	r2,0(r10)
  81e284:	51000215 	stw	r4,8(r10)
  81e288:	52000415 	stw	r8,16(r10)
  81e28c:	003eac06 	br	81dd40 <__kernel_rem_pio2+0x908>
  81e290:	0011883a 	mov	r8,zero
  81e294:	0013883a 	mov	r9,zero
  81e298:	003e8306 	br	81dca8 <__kernel_rem_pio2+0x870>
  81e29c:	0011883a 	mov	r8,zero
  81e2a0:	0013883a 	mov	r9,zero
  81e2a4:	003f6f06 	br	81e064 <__kernel_rem_pio2+0xc2c>
  81e2a8:	000d883a 	mov	r6,zero
  81e2ac:	000f883a 	mov	r7,zero
  81e2b0:	003f8f06 	br	81e0f0 <__kernel_rem_pio2+0xcb8>

0081e2b4 <__kernel_sin>:
  81e2b4:	00a00034 	movhi	r2,32768
  81e2b8:	10bfffc4 	addi	r2,r2,-1
  81e2bc:	deffef04 	addi	sp,sp,-68
  81e2c0:	1144703a 	and	r2,r2,r5
  81e2c4:	00cf9034 	movhi	r3,15936
  81e2c8:	18ffffc4 	addi	r3,r3,-1
  81e2cc:	dd400d15 	stw	r21,52(sp)
  81e2d0:	dd000c15 	stw	r20,48(sp)
  81e2d4:	dfc01015 	stw	ra,64(sp)
  81e2d8:	ddc00f15 	stw	r23,60(sp)
  81e2dc:	dd800e15 	stw	r22,56(sp)
  81e2e0:	dcc00b15 	stw	r19,44(sp)
  81e2e4:	dc800a15 	stw	r18,40(sp)
  81e2e8:	dc400915 	stw	r17,36(sp)
  81e2ec:	dc000815 	stw	r16,32(sp)
  81e2f0:	2029883a 	mov	r20,r4
  81e2f4:	282b883a 	mov	r21,r5
  81e2f8:	d9800415 	stw	r6,16(sp)
  81e2fc:	d9c00515 	stw	r7,20(sp)
  81e300:	18800216 	blt	r3,r2,81e30c <__kernel_sin+0x58>
  81e304:	08209480 	call	820948 <__fixdfsi>
  81e308:	10008826 	beq	r2,zero,81e52c <__kernel_sin+0x278>
  81e30c:	a009883a 	mov	r4,r20
  81e310:	a80b883a 	mov	r5,r21
  81e314:	a00d883a 	mov	r6,r20
  81e318:	a80f883a 	mov	r7,r21
  81e31c:	08200140 	call	820014 <__muldf3>
  81e320:	102d883a 	mov	r22,r2
  81e324:	a009883a 	mov	r4,r20
  81e328:	a80b883a 	mov	r5,r21
  81e32c:	b00d883a 	mov	r6,r22
  81e330:	180f883a 	mov	r7,r3
  81e334:	182f883a 	mov	r23,r3
  81e338:	d8800215 	stw	r2,8(sp)
  81e33c:	d8c00315 	stw	r3,12(sp)
  81e340:	08200140 	call	820014 <__muldf3>
  81e344:	d9000217 	ldw	r4,8(sp)
  81e348:	0216b434 	movhi	r8,23248
  81e34c:	42355f04 	addi	r8,r8,-10884
  81e350:	024f79b4 	movhi	r9,15846
  81e354:	4a764e84 	addi	r9,r9,-9926
  81e358:	480f883a 	mov	r7,r9
  81e35c:	400d883a 	mov	r6,r8
  81e360:	b80b883a 	mov	r5,r23
  81e364:	d8800615 	stw	r2,24(sp)
  81e368:	d8c00715 	stw	r3,28(sp)
  81e36c:	08200140 	call	820014 <__muldf3>
  81e370:	02228b34 	movhi	r8,35372
  81e374:	42273ac4 	addi	r8,r8,-25365
  81e378:	024f96f4 	movhi	r9,15963
  81e37c:	4a797984 	addi	r9,r9,-6682
  81e380:	480f883a 	mov	r7,r9
  81e384:	400d883a 	mov	r6,r8
  81e388:	180b883a 	mov	r5,r3
  81e38c:	1009883a 	mov	r4,r2
  81e390:	081ff200 	call	81ff20 <__subdf3>
  81e394:	d9000217 	ldw	r4,8(sp)
  81e398:	180f883a 	mov	r7,r3
  81e39c:	b80b883a 	mov	r5,r23
  81e3a0:	100d883a 	mov	r6,r2
  81e3a4:	08200140 	call	820014 <__muldf3>
  81e3a8:	0215ecb4 	movhi	r8,22450
  81e3ac:	423f9f44 	addi	r8,r8,-387
  81e3b0:	024fb1f4 	movhi	r9,16071
  81e3b4:	4a4778c4 	addi	r9,r9,7651
  81e3b8:	480f883a 	mov	r7,r9
  81e3bc:	400d883a 	mov	r6,r8
  81e3c0:	180b883a 	mov	r5,r3
  81e3c4:	1009883a 	mov	r4,r2
  81e3c8:	081ffa00 	call	81ffa0 <__adddf3>
  81e3cc:	d9000217 	ldw	r4,8(sp)
  81e3d0:	180f883a 	mov	r7,r3
  81e3d4:	b80b883a 	mov	r5,r23
  81e3d8:	100d883a 	mov	r6,r2
  81e3dc:	08200140 	call	820014 <__muldf3>
  81e3e0:	02067074 	movhi	r8,6593
  81e3e4:	42187544 	addi	r8,r8,25045
  81e3e8:	024fcab4 	movhi	r9,16170
  81e3ec:	4a406804 	addi	r9,r9,416
  81e3f0:	480f883a 	mov	r7,r9
  81e3f4:	400d883a 	mov	r6,r8
  81e3f8:	180b883a 	mov	r5,r3
  81e3fc:	1009883a 	mov	r4,r2
  81e400:	081ff200 	call	81ff20 <__subdf3>
  81e404:	d9000217 	ldw	r4,8(sp)
  81e408:	180f883a 	mov	r7,r3
  81e40c:	b80b883a 	mov	r5,r23
  81e410:	100d883a 	mov	r6,r2
  81e414:	08200140 	call	820014 <__muldf3>
  81e418:	02044474 	movhi	r8,4369
  81e41c:	423e2984 	addi	r8,r8,-1882
  81e420:	024fe074 	movhi	r9,16257
  81e424:	4a444444 	addi	r9,r9,4369
  81e428:	180b883a 	mov	r5,r3
  81e42c:	480f883a 	mov	r7,r9
  81e430:	1009883a 	mov	r4,r2
  81e434:	400d883a 	mov	r6,r8
  81e438:	081ffa00 	call	81ffa0 <__adddf3>
  81e43c:	1021883a 	mov	r16,r2
  81e440:	d8800617 	ldw	r2,24(sp)
  81e444:	1823883a 	mov	r17,r3
  81e448:	d8800015 	stw	r2,0(sp)
  81e44c:	d8800717 	ldw	r2,28(sp)
  81e450:	d8800115 	stw	r2,4(sp)
  81e454:	d8801117 	ldw	r2,68(sp)
  81e458:	10004126 	beq	r2,zero,81e560 <__kernel_sin+0x2ac>
  81e45c:	d9000417 	ldw	r4,16(sp)
  81e460:	d9400517 	ldw	r5,20(sp)
  81e464:	0005883a 	mov	r2,zero
  81e468:	00cff834 	movhi	r3,16352
  81e46c:	180f883a 	mov	r7,r3
  81e470:	100d883a 	mov	r6,r2
  81e474:	08200140 	call	820014 <__muldf3>
  81e478:	d9000017 	ldw	r4,0(sp)
  81e47c:	d9400717 	ldw	r5,28(sp)
  81e480:	800d883a 	mov	r6,r16
  81e484:	880f883a 	mov	r7,r17
  81e488:	1021883a 	mov	r16,r2
  81e48c:	1823883a 	mov	r17,r3
  81e490:	08200140 	call	820014 <__muldf3>
  81e494:	180f883a 	mov	r7,r3
  81e498:	880b883a 	mov	r5,r17
  81e49c:	8009883a 	mov	r4,r16
  81e4a0:	100d883a 	mov	r6,r2
  81e4a4:	081ff200 	call	81ff20 <__subdf3>
  81e4a8:	d9000217 	ldw	r4,8(sp)
  81e4ac:	b80b883a 	mov	r5,r23
  81e4b0:	180f883a 	mov	r7,r3
  81e4b4:	100d883a 	mov	r6,r2
  81e4b8:	08200140 	call	820014 <__muldf3>
  81e4bc:	d9c00517 	ldw	r7,20(sp)
  81e4c0:	d9800417 	ldw	r6,16(sp)
  81e4c4:	180b883a 	mov	r5,r3
  81e4c8:	1009883a 	mov	r4,r2
  81e4cc:	081ff200 	call	81ff20 <__subdf3>
  81e4d0:	d9000017 	ldw	r4,0(sp)
  81e4d4:	d9400717 	ldw	r5,28(sp)
  81e4d8:	02155574 	movhi	r8,21845
  81e4dc:	42155244 	addi	r8,r8,21833
  81e4e0:	024ff174 	movhi	r9,16325
  81e4e4:	4a555544 	addi	r9,r9,21845
  81e4e8:	480f883a 	mov	r7,r9
  81e4ec:	400d883a 	mov	r6,r8
  81e4f0:	1021883a 	mov	r16,r2
  81e4f4:	1823883a 	mov	r17,r3
  81e4f8:	08200140 	call	820014 <__muldf3>
  81e4fc:	180f883a 	mov	r7,r3
  81e500:	880b883a 	mov	r5,r17
  81e504:	8009883a 	mov	r4,r16
  81e508:	100d883a 	mov	r6,r2
  81e50c:	081ffa00 	call	81ffa0 <__adddf3>
  81e510:	180f883a 	mov	r7,r3
  81e514:	a80b883a 	mov	r5,r21
  81e518:	a009883a 	mov	r4,r20
  81e51c:	100d883a 	mov	r6,r2
  81e520:	081ff200 	call	81ff20 <__subdf3>
  81e524:	1029883a 	mov	r20,r2
  81e528:	182b883a 	mov	r21,r3
  81e52c:	a005883a 	mov	r2,r20
  81e530:	a807883a 	mov	r3,r21
  81e534:	dfc01017 	ldw	ra,64(sp)
  81e538:	ddc00f17 	ldw	r23,60(sp)
  81e53c:	dd800e17 	ldw	r22,56(sp)
  81e540:	dd400d17 	ldw	r21,52(sp)
  81e544:	dd000c17 	ldw	r20,48(sp)
  81e548:	dcc00b17 	ldw	r19,44(sp)
  81e54c:	dc800a17 	ldw	r18,40(sp)
  81e550:	dc400917 	ldw	r17,36(sp)
  81e554:	dc000817 	ldw	r16,32(sp)
  81e558:	dec01104 	addi	sp,sp,68
  81e55c:	f800283a 	ret
  81e560:	d9000217 	ldw	r4,8(sp)
  81e564:	b80b883a 	mov	r5,r23
  81e568:	800d883a 	mov	r6,r16
  81e56c:	180f883a 	mov	r7,r3
  81e570:	08200140 	call	820014 <__muldf3>
  81e574:	02155574 	movhi	r8,21845
  81e578:	42155244 	addi	r8,r8,21833
  81e57c:	024ff174 	movhi	r9,16325
  81e580:	4a555544 	addi	r9,r9,21845
  81e584:	480f883a 	mov	r7,r9
  81e588:	400d883a 	mov	r6,r8
  81e58c:	180b883a 	mov	r5,r3
  81e590:	1009883a 	mov	r4,r2
  81e594:	081ff200 	call	81ff20 <__subdf3>
  81e598:	d9000017 	ldw	r4,0(sp)
  81e59c:	d9400717 	ldw	r5,28(sp)
  81e5a0:	180f883a 	mov	r7,r3
  81e5a4:	100d883a 	mov	r6,r2
  81e5a8:	08200140 	call	820014 <__muldf3>
  81e5ac:	180f883a 	mov	r7,r3
  81e5b0:	a80b883a 	mov	r5,r21
  81e5b4:	a009883a 	mov	r4,r20
  81e5b8:	100d883a 	mov	r6,r2
  81e5bc:	081ffa00 	call	81ffa0 <__adddf3>
  81e5c0:	1029883a 	mov	r20,r2
  81e5c4:	182b883a 	mov	r21,r3
  81e5c8:	003fd806 	br	81e52c <__kernel_sin+0x278>

0081e5cc <atan>:
  81e5cc:	defff304 	addi	sp,sp,-52
  81e5d0:	00a00034 	movhi	r2,32768
  81e5d4:	10bfffc4 	addi	r2,r2,-1
  81e5d8:	dc000315 	stw	r16,12(sp)
  81e5dc:	28a0703a 	and	r16,r5,r2
  81e5e0:	00910434 	movhi	r2,17424
  81e5e4:	10bfffc4 	addi	r2,r2,-1
  81e5e8:	df000b15 	stw	fp,44(sp)
  81e5ec:	dfc00c15 	stw	ra,48(sp)
  81e5f0:	ddc00a15 	stw	r23,40(sp)
  81e5f4:	dd800915 	stw	r22,36(sp)
  81e5f8:	dd400815 	stw	r21,32(sp)
  81e5fc:	dd000715 	stw	r20,28(sp)
  81e600:	dcc00615 	stw	r19,24(sp)
  81e604:	dc800515 	stw	r18,20(sp)
  81e608:	dc400415 	stw	r17,16(sp)
  81e60c:	d9000115 	stw	r4,4(sp)
  81e610:	d9400215 	stw	r5,8(sp)
  81e614:	2839883a 	mov	fp,r5
  81e618:	1400190e 	bge	r2,r16,81e680 <atan+0xb4>
  81e61c:	2005883a 	mov	r2,r4
  81e620:	011ffc34 	movhi	r4,32752
  81e624:	2400eb0e 	bge	r4,r16,81e9d4 <atan+0x408>
  81e628:	d9000117 	ldw	r4,4(sp)
  81e62c:	d9c00217 	ldw	r7,8(sp)
  81e630:	200d883a 	mov	r6,r4
  81e634:	081ffa00 	call	81ffa0 <__adddf3>
  81e638:	d8800115 	stw	r2,4(sp)
  81e63c:	d8c00215 	stw	r3,8(sp)
  81e640:	d9000117 	ldw	r4,4(sp)
  81e644:	2005883a 	mov	r2,r4
  81e648:	d9000217 	ldw	r4,8(sp)
  81e64c:	2007883a 	mov	r3,r4
  81e650:	dfc00c17 	ldw	ra,48(sp)
  81e654:	df000b17 	ldw	fp,44(sp)
  81e658:	ddc00a17 	ldw	r23,40(sp)
  81e65c:	dd800917 	ldw	r22,36(sp)
  81e660:	dd400817 	ldw	r21,32(sp)
  81e664:	dd000717 	ldw	r20,28(sp)
  81e668:	dcc00617 	ldw	r19,24(sp)
  81e66c:	dc800517 	ldw	r18,20(sp)
  81e670:	dc400417 	ldw	r17,16(sp)
  81e674:	dc000317 	ldw	r16,12(sp)
  81e678:	dec00d04 	addi	sp,sp,52
  81e67c:	f800283a 	ret
  81e680:	008ff734 	movhi	r2,16348
  81e684:	10bfffc4 	addi	r2,r2,-1
  81e688:	1400ec16 	blt	r2,r16,81ea3c <atan+0x470>
  81e68c:	008f8834 	movhi	r2,15904
  81e690:	10bfffc4 	addi	r2,r2,-1
  81e694:	1400d80e 	bge	r2,r16,81e9f8 <atan+0x42c>
  81e698:	00bfffc4 	movi	r2,-1
  81e69c:	d8800015 	stw	r2,0(sp)
  81e6a0:	d9000117 	ldw	r4,4(sp)
  81e6a4:	d9400217 	ldw	r5,8(sp)
  81e6a8:	200d883a 	mov	r6,r4
  81e6ac:	280f883a 	mov	r7,r5
  81e6b0:	08200140 	call	820014 <__muldf3>
  81e6b4:	1009883a 	mov	r4,r2
  81e6b8:	180b883a 	mov	r5,r3
  81e6bc:	100d883a 	mov	r6,r2
  81e6c0:	180f883a 	mov	r7,r3
  81e6c4:	1025883a 	mov	r18,r2
  81e6c8:	1827883a 	mov	r19,r3
  81e6cc:	08200140 	call	820014 <__muldf3>
  81e6d0:	1021883a 	mov	r16,r2
  81e6d4:	1823883a 	mov	r17,r3
  81e6d8:	00b8c8f4 	movhi	r2,58147
  81e6dc:	10b68444 	addi	r2,r2,-9711
  81e6e0:	00cfe474 	movhi	r3,16273
  81e6e4:	18eb4e84 	addi	r3,r3,-21190
  81e6e8:	180f883a 	mov	r7,r3
  81e6ec:	8009883a 	mov	r4,r16
  81e6f0:	880b883a 	mov	r5,r17
  81e6f4:	100d883a 	mov	r6,r2
  81e6f8:	08200140 	call	820014 <__muldf3>
  81e6fc:	02091db4 	movhi	r8,9334
  81e700:	42037ac4 	addi	r8,r8,3563
  81e704:	024fea74 	movhi	r9,16297
  81e708:	4a5ed2c4 	addi	r9,r9,31563
  81e70c:	480f883a 	mov	r7,r9
  81e710:	400d883a 	mov	r6,r8
  81e714:	180b883a 	mov	r5,r3
  81e718:	1009883a 	mov	r4,r2
  81e71c:	081ffa00 	call	81ffa0 <__adddf3>
  81e720:	180f883a 	mov	r7,r3
  81e724:	8009883a 	mov	r4,r16
  81e728:	880b883a 	mov	r5,r17
  81e72c:	100d883a 	mov	r6,r2
  81e730:	08200140 	call	820014 <__muldf3>
  81e734:	02283434 	movhi	r8,41168
  81e738:	420f5444 	addi	r8,r8,15697
  81e73c:	024fec74 	movhi	r9,16305
  81e740:	4a435984 	addi	r9,r9,3430
  81e744:	480f883a 	mov	r7,r9
  81e748:	400d883a 	mov	r6,r8
  81e74c:	180b883a 	mov	r5,r3
  81e750:	1009883a 	mov	r4,r2
  81e754:	081ffa00 	call	81ffa0 <__adddf3>
  81e758:	180f883a 	mov	r7,r3
  81e75c:	8009883a 	mov	r4,r16
  81e760:	880b883a 	mov	r5,r17
  81e764:	100d883a 	mov	r6,r2
  81e768:	08200140 	call	820014 <__muldf3>
  81e76c:	02315334 	movhi	r8,50508
  81e770:	42081b84 	addi	r8,r8,8302
  81e774:	024fedf4 	movhi	r9,16311
  81e778:	4a517344 	addi	r9,r9,17869
  81e77c:	480f883a 	mov	r7,r9
  81e780:	400d883a 	mov	r6,r8
  81e784:	180b883a 	mov	r5,r3
  81e788:	1009883a 	mov	r4,r2
  81e78c:	081ffa00 	call	81ffa0 <__adddf3>
  81e790:	180f883a 	mov	r7,r3
  81e794:	8009883a 	mov	r4,r16
  81e798:	880b883a 	mov	r5,r17
  81e79c:	100d883a 	mov	r6,r2
  81e7a0:	08200140 	call	820014 <__muldf3>
  81e7a4:	02248074 	movhi	r8,37377
  81e7a8:	4220ffc4 	addi	r8,r8,-31745
  81e7ac:	024ff0b4 	movhi	r9,16322
  81e7b0:	4a524904 	addi	r9,r9,18724
  81e7b4:	480f883a 	mov	r7,r9
  81e7b8:	400d883a 	mov	r6,r8
  81e7bc:	180b883a 	mov	r5,r3
  81e7c0:	1009883a 	mov	r4,r2
  81e7c4:	081ffa00 	call	81ffa0 <__adddf3>
  81e7c8:	180f883a 	mov	r7,r3
  81e7cc:	8009883a 	mov	r4,r16
  81e7d0:	880b883a 	mov	r5,r17
  81e7d4:	100d883a 	mov	r6,r2
  81e7d8:	08200140 	call	820014 <__muldf3>
  81e7dc:	02155574 	movhi	r8,21845
  81e7e0:	42154344 	addi	r8,r8,21773
  81e7e4:	024ff574 	movhi	r9,16341
  81e7e8:	4a555544 	addi	r9,r9,21845
  81e7ec:	480f883a 	mov	r7,r9
  81e7f0:	400d883a 	mov	r6,r8
  81e7f4:	180b883a 	mov	r5,r3
  81e7f8:	1009883a 	mov	r4,r2
  81e7fc:	081ffa00 	call	81ffa0 <__adddf3>
  81e800:	180f883a 	mov	r7,r3
  81e804:	9009883a 	mov	r4,r18
  81e808:	980b883a 	mov	r5,r19
  81e80c:	100d883a 	mov	r6,r2
  81e810:	08200140 	call	820014 <__muldf3>
  81e814:	020b1ab4 	movhi	r8,11370
  81e818:	421b0bc4 	addi	r8,r8,27695
  81e81c:	026fe8f4 	movhi	r9,49059
  81e820:	4a6d1104 	addi	r9,r9,-19388
  81e824:	480f883a 	mov	r7,r9
  81e828:	400d883a 	mov	r6,r8
  81e82c:	8009883a 	mov	r4,r16
  81e830:	880b883a 	mov	r5,r17
  81e834:	102d883a 	mov	r22,r2
  81e838:	182f883a 	mov	r23,r3
  81e83c:	08200140 	call	820014 <__muldf3>
  81e840:	0214b7f4 	movhi	r8,21215
  81e844:	423f6684 	addi	r8,r8,-614
  81e848:	024febb4 	movhi	r9,16302
  81e84c:	4a778b44 	addi	r9,r9,-8659
  81e850:	480f883a 	mov	r7,r9
  81e854:	400d883a 	mov	r6,r8
  81e858:	180b883a 	mov	r5,r3
  81e85c:	1009883a 	mov	r4,r2
  81e860:	081ff200 	call	81ff20 <__subdf3>
  81e864:	180f883a 	mov	r7,r3
  81e868:	8009883a 	mov	r4,r16
  81e86c:	880b883a 	mov	r5,r17
  81e870:	100d883a 	mov	r6,r2
  81e874:	08200140 	call	820014 <__muldf3>
  81e878:	022bdd74 	movhi	r8,44917
  81e87c:	42269b44 	addi	r8,r8,-26003
  81e880:	024fed34 	movhi	r9,16308
  81e884:	4a6c3c84 	addi	r9,r9,-20238
  81e888:	480f883a 	mov	r7,r9
  81e88c:	400d883a 	mov	r6,r8
  81e890:	180b883a 	mov	r5,r3
  81e894:	1009883a 	mov	r4,r2
  81e898:	081ff200 	call	81ff20 <__subdf3>
  81e89c:	180f883a 	mov	r7,r3
  81e8a0:	8009883a 	mov	r4,r16
  81e8a4:	880b883a 	mov	r5,r17
  81e8a8:	100d883a 	mov	r6,r2
  81e8ac:	08200140 	call	820014 <__muldf3>
  81e8b0:	023f88f4 	movhi	r8,65059
  81e8b4:	42059c44 	addi	r8,r8,5745
  81e8b8:	024fef34 	movhi	r9,16316
  81e8bc:	4a5c7184 	addi	r9,r9,29126
  81e8c0:	480f883a 	mov	r7,r9
  81e8c4:	400d883a 	mov	r6,r8
  81e8c8:	180b883a 	mov	r5,r3
  81e8cc:	1009883a 	mov	r4,r2
  81e8d0:	081ff200 	call	81ff20 <__subdf3>
  81e8d4:	180f883a 	mov	r7,r3
  81e8d8:	8009883a 	mov	r4,r16
  81e8dc:	880b883a 	mov	r5,r17
  81e8e0:	100d883a 	mov	r6,r2
  81e8e4:	08200140 	call	820014 <__muldf3>
  81e8e8:	02266674 	movhi	r8,39321
  81e8ec:	423af104 	addi	r8,r8,-5180
  81e8f0:	024ff2b4 	movhi	r9,16330
  81e8f4:	4a666644 	addi	r9,r9,-26215
  81e8f8:	480f883a 	mov	r7,r9
  81e8fc:	400d883a 	mov	r6,r8
  81e900:	180b883a 	mov	r5,r3
  81e904:	1009883a 	mov	r4,r2
  81e908:	081ff200 	call	81ff20 <__subdf3>
  81e90c:	180f883a 	mov	r7,r3
  81e910:	8009883a 	mov	r4,r16
  81e914:	880b883a 	mov	r5,r17
  81e918:	100d883a 	mov	r6,r2
  81e91c:	08200140 	call	820014 <__muldf3>
  81e920:	100f883a 	mov	r7,r2
  81e924:	d8800017 	ldw	r2,0(sp)
  81e928:	b009883a 	mov	r4,r22
  81e92c:	b80b883a 	mov	r5,r23
  81e930:	10006b16 	blt	r2,zero,81eae0 <atan+0x514>
  81e934:	d8800017 	ldw	r2,0(sp)
  81e938:	380d883a 	mov	r6,r7
  81e93c:	b80b883a 	mov	r5,r23
  81e940:	102490fa 	slli	r18,r2,3
  81e944:	00802134 	movhi	r2,132
  81e948:	10ba2a04 	addi	r2,r2,-5976
  81e94c:	180f883a 	mov	r7,r3
  81e950:	9085883a 	add	r2,r18,r2
  81e954:	14000017 	ldw	r16,0(r2)
  81e958:	14400117 	ldw	r17,4(r2)
  81e95c:	081ffa00 	call	81ffa0 <__adddf3>
  81e960:	d9000117 	ldw	r4,4(sp)
  81e964:	d9400217 	ldw	r5,8(sp)
  81e968:	180f883a 	mov	r7,r3
  81e96c:	100d883a 	mov	r6,r2
  81e970:	08200140 	call	820014 <__muldf3>
  81e974:	01002134 	movhi	r4,132
  81e978:	213a3204 	addi	r4,r4,-5944
  81e97c:	9125883a 	add	r18,r18,r4
  81e980:	92000017 	ldw	r8,0(r18)
  81e984:	92400117 	ldw	r9,4(r18)
  81e988:	180b883a 	mov	r5,r3
  81e98c:	400d883a 	mov	r6,r8
  81e990:	480f883a 	mov	r7,r9
  81e994:	1009883a 	mov	r4,r2
  81e998:	081ff200 	call	81ff20 <__subdf3>
  81e99c:	d9c00217 	ldw	r7,8(sp)
  81e9a0:	d9800117 	ldw	r6,4(sp)
  81e9a4:	180b883a 	mov	r5,r3
  81e9a8:	1009883a 	mov	r4,r2
  81e9ac:	081ff200 	call	81ff20 <__subdf3>
  81e9b0:	180f883a 	mov	r7,r3
  81e9b4:	880b883a 	mov	r5,r17
  81e9b8:	8009883a 	mov	r4,r16
  81e9bc:	100d883a 	mov	r6,r2
  81e9c0:	081ff200 	call	81ff20 <__subdf3>
  81e9c4:	e0003f16 	blt	fp,zero,81eac4 <atan+0x4f8>
  81e9c8:	d8800115 	stw	r2,4(sp)
  81e9cc:	d8c00215 	stw	r3,8(sp)
  81e9d0:	003f1b06 	br	81e640 <atan+0x74>
  81e9d4:	81003f26 	beq	r16,r4,81ead4 <atan+0x508>
  81e9d8:	07005e0e 	bge	zero,fp,81eb54 <atan+0x588>
  81e9dc:	01151134 	movhi	r4,21572
  81e9e0:	210b4604 	addi	r4,r4,11544
  81e9e4:	008ffe74 	movhi	r2,16377
  81e9e8:	10887ec4 	addi	r2,r2,8699
  81e9ec:	d9000115 	stw	r4,4(sp)
  81e9f0:	d8800215 	stw	r2,8(sp)
  81e9f4:	003f1206 	br	81e640 <atan+0x74>
  81e9f8:	d9000117 	ldw	r4,4(sp)
  81e9fc:	00a20034 	movhi	r2,34816
  81ea00:	109d6704 	addi	r2,r2,30108
  81ea04:	00df8e34 	movhi	r3,32312
  81ea08:	18f90f04 	addi	r3,r3,-7108
  81ea0c:	180f883a 	mov	r7,r3
  81ea10:	100d883a 	mov	r6,r2
  81ea14:	081ffa00 	call	81ffa0 <__adddf3>
  81ea18:	0011883a 	mov	r8,zero
  81ea1c:	024ffc34 	movhi	r9,16368
  81ea20:	180b883a 	mov	r5,r3
  81ea24:	480f883a 	mov	r7,r9
  81ea28:	1009883a 	mov	r4,r2
  81ea2c:	400d883a 	mov	r6,r8
  81ea30:	08206b80 	call	8206b8 <__gtdf2>
  81ea34:	00bf0216 	blt	zero,r2,81e640 <atan+0x74>
  81ea38:	003f1706 	br	81e698 <atan+0xcc>
  81ea3c:	d9000117 	ldw	r4,4(sp)
  81ea40:	081ec640 	call	81ec64 <fabs>
  81ea44:	102d883a 	mov	r22,r2
  81ea48:	008ffcf4 	movhi	r2,16371
  81ea4c:	10bfffc4 	addi	r2,r2,-1
  81ea50:	182f883a 	mov	r23,r3
  81ea54:	14003016 	blt	r2,r16,81eb18 <atan+0x54c>
  81ea58:	008ff9b4 	movhi	r2,16358
  81ea5c:	10bfffc4 	addi	r2,r2,-1
  81ea60:	1400430e 	bge	r2,r16,81eb70 <atan+0x5a4>
  81ea64:	044ffc34 	movhi	r17,16368
  81ea68:	0021883a 	mov	r16,zero
  81ea6c:	800d883a 	mov	r6,r16
  81ea70:	880f883a 	mov	r7,r17
  81ea74:	b009883a 	mov	r4,r22
  81ea78:	180b883a 	mov	r5,r3
  81ea7c:	081ff200 	call	81ff20 <__subdf3>
  81ea80:	880f883a 	mov	r7,r17
  81ea84:	000d883a 	mov	r6,zero
  81ea88:	b80b883a 	mov	r5,r23
  81ea8c:	b009883a 	mov	r4,r22
  81ea90:	1021883a 	mov	r16,r2
  81ea94:	1823883a 	mov	r17,r3
  81ea98:	081ffa00 	call	81ffa0 <__adddf3>
  81ea9c:	180f883a 	mov	r7,r3
  81eaa0:	8009883a 	mov	r4,r16
  81eaa4:	880b883a 	mov	r5,r17
  81eaa8:	100d883a 	mov	r6,r2
  81eaac:	08203d80 	call	8203d8 <__divdf3>
  81eab0:	01000044 	movi	r4,1
  81eab4:	d8800115 	stw	r2,4(sp)
  81eab8:	d8c00215 	stw	r3,8(sp)
  81eabc:	d9000015 	stw	r4,0(sp)
  81eac0:	003ef706 	br	81e6a0 <atan+0xd4>
  81eac4:	18e0003c 	xorhi	r3,r3,32768
  81eac8:	d8800115 	stw	r2,4(sp)
  81eacc:	d8c00215 	stw	r3,8(sp)
  81ead0:	003edb06 	br	81e640 <atan+0x74>
  81ead4:	103ed41e 	bne	r2,zero,81e628 <atan+0x5c>
  81ead8:	073fc016 	blt	zero,fp,81e9dc <atan+0x410>
  81eadc:	00001d06 	br	81eb54 <atan+0x588>
  81eae0:	380d883a 	mov	r6,r7
  81eae4:	180f883a 	mov	r7,r3
  81eae8:	081ffa00 	call	81ffa0 <__adddf3>
  81eaec:	d9000117 	ldw	r4,4(sp)
  81eaf0:	d9400217 	ldw	r5,8(sp)
  81eaf4:	180f883a 	mov	r7,r3
  81eaf8:	100d883a 	mov	r6,r2
  81eafc:	08200140 	call	820014 <__muldf3>
  81eb00:	d9400217 	ldw	r5,8(sp)
  81eb04:	d9000117 	ldw	r4,4(sp)
  81eb08:	180f883a 	mov	r7,r3
  81eb0c:	100d883a 	mov	r6,r2
  81eb10:	081ff200 	call	81ff20 <__subdf3>
  81eb14:	003ec806 	br	81e638 <atan+0x6c>
  81eb18:	009000f4 	movhi	r2,16387
  81eb1c:	109fffc4 	addi	r2,r2,32767
  81eb20:	1400310e 	bge	r2,r16,81ebe8 <atan+0x61c>
  81eb24:	0005883a 	mov	r2,zero
  81eb28:	00effc34 	movhi	r3,49136
  81eb2c:	1009883a 	mov	r4,r2
  81eb30:	180b883a 	mov	r5,r3
  81eb34:	b80f883a 	mov	r7,r23
  81eb38:	b00d883a 	mov	r6,r22
  81eb3c:	08203d80 	call	8203d8 <__divdf3>
  81eb40:	010000c4 	movi	r4,3
  81eb44:	d8800115 	stw	r2,4(sp)
  81eb48:	d8c00215 	stw	r3,8(sp)
  81eb4c:	d9000015 	stw	r4,0(sp)
  81eb50:	003ed306 	br	81e6a0 <atan+0xd4>
  81eb54:	01151134 	movhi	r4,21572
  81eb58:	210b4604 	addi	r4,r4,11544
  81eb5c:	00affe74 	movhi	r2,49145
  81eb60:	10887ec4 	addi	r2,r2,8699
  81eb64:	d9000115 	stw	r4,4(sp)
  81eb68:	d8800215 	stw	r2,8(sp)
  81eb6c:	003eb406 	br	81e640 <atan+0x74>
  81eb70:	b009883a 	mov	r4,r22
  81eb74:	180b883a 	mov	r5,r3
  81eb78:	b00d883a 	mov	r6,r22
  81eb7c:	180f883a 	mov	r7,r3
  81eb80:	081ffa00 	call	81ffa0 <__adddf3>
  81eb84:	0011883a 	mov	r8,zero
  81eb88:	024ffc34 	movhi	r9,16368
  81eb8c:	480f883a 	mov	r7,r9
  81eb90:	400d883a 	mov	r6,r8
  81eb94:	180b883a 	mov	r5,r3
  81eb98:	1009883a 	mov	r4,r2
  81eb9c:	081ff200 	call	81ff20 <__subdf3>
  81eba0:	0011883a 	mov	r8,zero
  81eba4:	02500034 	movhi	r9,16384
  81eba8:	480f883a 	mov	r7,r9
  81ebac:	400d883a 	mov	r6,r8
  81ebb0:	b80b883a 	mov	r5,r23
  81ebb4:	b009883a 	mov	r4,r22
  81ebb8:	1021883a 	mov	r16,r2
  81ebbc:	1823883a 	mov	r17,r3
  81ebc0:	081ffa00 	call	81ffa0 <__adddf3>
  81ebc4:	180f883a 	mov	r7,r3
  81ebc8:	880b883a 	mov	r5,r17
  81ebcc:	8009883a 	mov	r4,r16
  81ebd0:	100d883a 	mov	r6,r2
  81ebd4:	08203d80 	call	8203d8 <__divdf3>
  81ebd8:	d8800115 	stw	r2,4(sp)
  81ebdc:	d8c00215 	stw	r3,8(sp)
  81ebe0:	d8000015 	stw	zero,0(sp)
  81ebe4:	003eae06 	br	81e6a0 <atan+0xd4>
  81ebe8:	044ffe34 	movhi	r17,16376
  81ebec:	0021883a 	mov	r16,zero
  81ebf0:	800d883a 	mov	r6,r16
  81ebf4:	880f883a 	mov	r7,r17
  81ebf8:	b009883a 	mov	r4,r22
  81ebfc:	180b883a 	mov	r5,r3
  81ec00:	081ff200 	call	81ff20 <__subdf3>
  81ec04:	880f883a 	mov	r7,r17
  81ec08:	000d883a 	mov	r6,zero
  81ec0c:	b80b883a 	mov	r5,r23
  81ec10:	b009883a 	mov	r4,r22
  81ec14:	1021883a 	mov	r16,r2
  81ec18:	1823883a 	mov	r17,r3
  81ec1c:	08200140 	call	820014 <__muldf3>
  81ec20:	0011883a 	mov	r8,zero
  81ec24:	024ffc34 	movhi	r9,16368
  81ec28:	480f883a 	mov	r7,r9
  81ec2c:	400d883a 	mov	r6,r8
  81ec30:	180b883a 	mov	r5,r3
  81ec34:	1009883a 	mov	r4,r2
  81ec38:	081ffa00 	call	81ffa0 <__adddf3>
  81ec3c:	180f883a 	mov	r7,r3
  81ec40:	8009883a 	mov	r4,r16
  81ec44:	880b883a 	mov	r5,r17
  81ec48:	100d883a 	mov	r6,r2
  81ec4c:	08203d80 	call	8203d8 <__divdf3>
  81ec50:	01000084 	movi	r4,2
  81ec54:	d8800115 	stw	r2,4(sp)
  81ec58:	d8c00215 	stw	r3,8(sp)
  81ec5c:	d9000015 	stw	r4,0(sp)
  81ec60:	003e8f06 	br	81e6a0 <atan+0xd4>

0081ec64 <fabs>:
  81ec64:	01e00034 	movhi	r7,32768
  81ec68:	39ffffc4 	addi	r7,r7,-1
  81ec6c:	394e703a 	and	r7,r7,r5
  81ec70:	2005883a 	mov	r2,r4
  81ec74:	3807883a 	mov	r3,r7
  81ec78:	f800283a 	ret

0081ec7c <floor>:
  81ec7c:	2805d53a 	srai	r2,r5,20
  81ec80:	defff604 	addi	sp,sp,-40
  81ec84:	dd800615 	stw	r22,24(sp)
  81ec88:	10c1ffcc 	andi	r3,r2,2047
  81ec8c:	1dbf0044 	addi	r22,r3,-1023
  81ec90:	008004c4 	movi	r2,19
  81ec94:	ddc00715 	stw	r23,28(sp)
  81ec98:	dc800215 	stw	r18,8(sp)
  81ec9c:	dc400115 	stw	r17,4(sp)
  81eca0:	dc000015 	stw	r16,0(sp)
  81eca4:	dfc00915 	stw	ra,36(sp)
  81eca8:	df000815 	stw	fp,32(sp)
  81ecac:	dd400515 	stw	r21,20(sp)
  81ecb0:	dd000415 	stw	r20,16(sp)
  81ecb4:	dcc00315 	stw	r19,12(sp)
  81ecb8:	2021883a 	mov	r16,r4
  81ecbc:	2823883a 	mov	r17,r5
  81ecc0:	282f883a 	mov	r23,r5
  81ecc4:	2025883a 	mov	r18,r4
  81ecc8:	15802916 	blt	r2,r22,81ed70 <floor+0xf4>
  81eccc:	b0004816 	blt	r22,zero,81edf0 <floor+0x174>
  81ecd0:	00800434 	movhi	r2,16
  81ecd4:	10bfffc4 	addi	r2,r2,-1
  81ecd8:	15b9d83a 	sra	fp,r2,r22
  81ecdc:	282f883a 	mov	r23,r5
  81ece0:	e144703a 	and	r2,fp,r5
  81ece4:	1104b03a 	or	r2,r2,r4
  81ece8:	10001326 	beq	r2,zero,81ed38 <floor+0xbc>
  81ecec:	00a20034 	movhi	r2,34816
  81ecf0:	109d6704 	addi	r2,r2,30108
  81ecf4:	00df8e34 	movhi	r3,32312
  81ecf8:	18f90f04 	addi	r3,r3,-7108
  81ecfc:	180f883a 	mov	r7,r3
  81ed00:	100d883a 	mov	r6,r2
  81ed04:	081ffa00 	call	81ffa0 <__adddf3>
  81ed08:	180b883a 	mov	r5,r3
  81ed0c:	000d883a 	mov	r6,zero
  81ed10:	000f883a 	mov	r7,zero
  81ed14:	1009883a 	mov	r4,r2
  81ed18:	08206b80 	call	8206b8 <__gtdf2>
  81ed1c:	0080040e 	bge	zero,r2,81ed30 <floor+0xb4>
  81ed20:	88004416 	blt	r17,zero,81ee34 <floor+0x1b8>
  81ed24:	0704303a 	nor	r2,zero,fp
  81ed28:	b8ae703a 	and	r23,r23,r2
  81ed2c:	0025883a 	mov	r18,zero
  81ed30:	9021883a 	mov	r16,r18
  81ed34:	b823883a 	mov	r17,r23
  81ed38:	8005883a 	mov	r2,r16
  81ed3c:	8807883a 	mov	r3,r17
  81ed40:	dfc00917 	ldw	ra,36(sp)
  81ed44:	df000817 	ldw	fp,32(sp)
  81ed48:	ddc00717 	ldw	r23,28(sp)
  81ed4c:	dd800617 	ldw	r22,24(sp)
  81ed50:	dd400517 	ldw	r21,20(sp)
  81ed54:	dd000417 	ldw	r20,16(sp)
  81ed58:	dcc00317 	ldw	r19,12(sp)
  81ed5c:	dc800217 	ldw	r18,8(sp)
  81ed60:	dc400117 	ldw	r17,4(sp)
  81ed64:	dc000017 	ldw	r16,0(sp)
  81ed68:	dec00a04 	addi	sp,sp,40
  81ed6c:	f800283a 	ret
  81ed70:	00800cc4 	movi	r2,51
  81ed74:	15801616 	blt	r2,r22,81edd0 <floor+0x154>
  81ed78:	18befb44 	addi	r2,r3,-1043
  81ed7c:	00ffffc4 	movi	r3,-1
  81ed80:	18b8d83a 	srl	fp,r3,r2
  81ed84:	e104703a 	and	r2,fp,r4
  81ed88:	103feb26 	beq	r2,zero,81ed38 <floor+0xbc>
  81ed8c:	00a20034 	movhi	r2,34816
  81ed90:	109d6704 	addi	r2,r2,30108
  81ed94:	00df8e34 	movhi	r3,32312
  81ed98:	18f90f04 	addi	r3,r3,-7108
  81ed9c:	180f883a 	mov	r7,r3
  81eda0:	100d883a 	mov	r6,r2
  81eda4:	081ffa00 	call	81ffa0 <__adddf3>
  81eda8:	180b883a 	mov	r5,r3
  81edac:	000d883a 	mov	r6,zero
  81edb0:	000f883a 	mov	r7,zero
  81edb4:	1009883a 	mov	r4,r2
  81edb8:	08206b80 	call	8206b8 <__gtdf2>
  81edbc:	0080210e 	bge	zero,r2,81ee44 <floor+0x1c8>
  81edc0:	88002216 	blt	r17,zero,81ee4c <floor+0x1d0>
  81edc4:	0704303a 	nor	r2,zero,fp
  81edc8:	90a4703a 	and	r18,r18,r2
  81edcc:	003fd806 	br	81ed30 <floor+0xb4>
  81edd0:	00810004 	movi	r2,1024
  81edd4:	b0bfd81e 	bne	r22,r2,81ed38 <floor+0xbc>
  81edd8:	800d883a 	mov	r6,r16
  81eddc:	280f883a 	mov	r7,r5
  81ede0:	081ffa00 	call	81ffa0 <__adddf3>
  81ede4:	1021883a 	mov	r16,r2
  81ede8:	1823883a 	mov	r17,r3
  81edec:	003fd206 	br	81ed38 <floor+0xbc>
  81edf0:	00a20034 	movhi	r2,34816
  81edf4:	109d6704 	addi	r2,r2,30108
  81edf8:	00df8e34 	movhi	r3,32312
  81edfc:	18f90f04 	addi	r3,r3,-7108
  81ee00:	180f883a 	mov	r7,r3
  81ee04:	100d883a 	mov	r6,r2
  81ee08:	081ffa00 	call	81ffa0 <__adddf3>
  81ee0c:	180b883a 	mov	r5,r3
  81ee10:	000d883a 	mov	r6,zero
  81ee14:	000f883a 	mov	r7,zero
  81ee18:	1009883a 	mov	r4,r2
  81ee1c:	08206b80 	call	8206b8 <__gtdf2>
  81ee20:	00bfc30e 	bge	zero,r2,81ed30 <floor+0xb4>
  81ee24:	88001416 	blt	r17,zero,81ee78 <floor+0x1fc>
  81ee28:	002f883a 	mov	r23,zero
  81ee2c:	0025883a 	mov	r18,zero
  81ee30:	003fbf06 	br	81ed30 <floor+0xb4>
  81ee34:	00800434 	movhi	r2,16
  81ee38:	1585d83a 	sra	r2,r2,r22
  81ee3c:	88af883a 	add	r23,r17,r2
  81ee40:	003fb806 	br	81ed24 <floor+0xa8>
  81ee44:	882f883a 	mov	r23,r17
  81ee48:	003fb906 	br	81ed30 <floor+0xb4>
  81ee4c:	00800504 	movi	r2,20
  81ee50:	b0801126 	beq	r22,r2,81ee98 <floor+0x21c>
  81ee54:	00c00d04 	movi	r3,52
  81ee58:	1d87c83a 	sub	r3,r3,r22
  81ee5c:	00800044 	movi	r2,1
  81ee60:	10c4983a 	sll	r2,r2,r3
  81ee64:	8085883a 	add	r2,r16,r2
  81ee68:	1400012e 	bgeu	r2,r16,81ee70 <floor+0x1f4>
  81ee6c:	8dc00044 	addi	r23,r17,1
  81ee70:	1025883a 	mov	r18,r2
  81ee74:	003fd306 	br	81edc4 <floor+0x148>
  81ee78:	00a00034 	movhi	r2,32768
  81ee7c:	10bfffc4 	addi	r2,r2,-1
  81ee80:	8884703a 	and	r2,r17,r2
  81ee84:	8084b03a 	or	r2,r16,r2
  81ee88:	103fee26 	beq	r2,zero,81ee44 <floor+0x1c8>
  81ee8c:	05effc34 	movhi	r23,49136
  81ee90:	0025883a 	mov	r18,zero
  81ee94:	003fa606 	br	81ed30 <floor+0xb4>
  81ee98:	8dc00044 	addi	r23,r17,1
  81ee9c:	003fc906 	br	81edc4 <floor+0x148>

0081eea0 <__isnand>:
  81eea0:	200d883a 	mov	r6,r4
  81eea4:	0109c83a 	sub	r4,zero,r4
  81eea8:	2188b03a 	or	r4,r4,r6
  81eeac:	2008d7fa 	srli	r4,r4,31
  81eeb0:	00a00034 	movhi	r2,32768
  81eeb4:	10bfffc4 	addi	r2,r2,-1
  81eeb8:	1144703a 	and	r2,r2,r5
  81eebc:	2088b03a 	or	r4,r4,r2
  81eec0:	009ffc34 	movhi	r2,32752
  81eec4:	1105c83a 	sub	r2,r2,r4
  81eec8:	1004d7fa 	srli	r2,r2,31
  81eecc:	f800283a 	ret

0081eed0 <matherr>:
  81eed0:	0005883a 	mov	r2,zero
  81eed4:	f800283a 	ret

0081eed8 <nan>:
  81eed8:	015ffe34 	movhi	r5,32760
  81eedc:	0005883a 	mov	r2,zero
  81eee0:	2807883a 	mov	r3,r5
  81eee4:	f800283a 	ret

0081eee8 <scalbn>:
  81eee8:	2011883a 	mov	r8,r4
  81eeec:	291ffc2c 	andhi	r4,r5,32752
  81eef0:	2009d53a 	srai	r4,r4,20
  81eef4:	defffd04 	addi	sp,sp,-12
  81eef8:	dc000015 	stw	r16,0(sp)
  81eefc:	dfc00215 	stw	ra,8(sp)
  81ef00:	dc400115 	stw	r17,4(sp)
  81ef04:	2813883a 	mov	r9,r5
  81ef08:	2815883a 	mov	r10,r5
  81ef0c:	3021883a 	mov	r16,r6
  81ef10:	2000281e 	bne	r4,zero,81efb4 <scalbn+0xcc>
  81ef14:	00a00034 	movhi	r2,32768
  81ef18:	10bfffc4 	addi	r2,r2,-1
  81ef1c:	2884703a 	and	r2,r5,r2
  81ef20:	4084b03a 	or	r2,r8,r2
  81ef24:	10001826 	beq	r2,zero,81ef88 <scalbn+0xa0>
  81ef28:	0005883a 	mov	r2,zero
  81ef2c:	00d0d434 	movhi	r3,17232
  81ef30:	4009883a 	mov	r4,r8
  81ef34:	100d883a 	mov	r6,r2
  81ef38:	180f883a 	mov	r7,r3
  81ef3c:	08200140 	call	820014 <__muldf3>
  81ef40:	100b883a 	mov	r5,r2
  81ef44:	1011883a 	mov	r8,r2
  81ef48:	00bffff4 	movhi	r2,65535
  81ef4c:	108f2c04 	addi	r2,r2,15536
  81ef50:	180d883a 	mov	r6,r3
  81ef54:	1813883a 	mov	r9,r3
  81ef58:	8080120e 	bge	r16,r2,81efa4 <scalbn+0xbc>
  81ef5c:	00b0be74 	movhi	r2,49913
  81ef60:	10bcd644 	addi	r2,r2,-3239
  81ef64:	00c06974 	movhi	r3,421
  81ef68:	18db87c4 	addi	r3,r3,28191
  81ef6c:	2809883a 	mov	r4,r5
  81ef70:	180f883a 	mov	r7,r3
  81ef74:	300b883a 	mov	r5,r6
  81ef78:	100d883a 	mov	r6,r2
  81ef7c:	08200140 	call	820014 <__muldf3>
  81ef80:	1011883a 	mov	r8,r2
  81ef84:	1813883a 	mov	r9,r3
  81ef88:	4005883a 	mov	r2,r8
  81ef8c:	4807883a 	mov	r3,r9
  81ef90:	dfc00217 	ldw	ra,8(sp)
  81ef94:	dc400117 	ldw	r17,4(sp)
  81ef98:	dc000017 	ldw	r16,0(sp)
  81ef9c:	dec00304 	addi	sp,sp,12
  81efa0:	f800283a 	ret
  81efa4:	189ffc2c 	andhi	r2,r3,32752
  81efa8:	1005d53a 	srai	r2,r2,20
  81efac:	1815883a 	mov	r10,r3
  81efb0:	113ff284 	addi	r4,r2,-54
  81efb4:	0081ffc4 	movi	r2,2047
  81efb8:	20801126 	beq	r4,r2,81f000 <scalbn+0x118>
  81efbc:	2409883a 	add	r4,r4,r16
  81efc0:	0081ff84 	movi	r2,2046
  81efc4:	11001c16 	blt	r2,r4,81f038 <scalbn+0x150>
  81efc8:	0100290e 	bge	zero,r4,81f070 <scalbn+0x188>
  81efcc:	200a953a 	slli	r5,r4,20
  81efd0:	01200434 	movhi	r4,32784
  81efd4:	213fffc4 	addi	r4,r4,-1
  81efd8:	5108703a 	and	r4,r10,r4
  81efdc:	2148b03a 	or	r4,r4,r5
  81efe0:	2013883a 	mov	r9,r4
  81efe4:	4005883a 	mov	r2,r8
  81efe8:	4807883a 	mov	r3,r9
  81efec:	dfc00217 	ldw	ra,8(sp)
  81eff0:	dc400117 	ldw	r17,4(sp)
  81eff4:	dc000017 	ldw	r16,0(sp)
  81eff8:	dec00304 	addi	sp,sp,12
  81effc:	f800283a 	ret
  81f000:	480f883a 	mov	r7,r9
  81f004:	4009883a 	mov	r4,r8
  81f008:	480b883a 	mov	r5,r9
  81f00c:	400d883a 	mov	r6,r8
  81f010:	081ffa00 	call	81ffa0 <__adddf3>
  81f014:	1011883a 	mov	r8,r2
  81f018:	1813883a 	mov	r9,r3
  81f01c:	4005883a 	mov	r2,r8
  81f020:	4807883a 	mov	r3,r9
  81f024:	dfc00217 	ldw	ra,8(sp)
  81f028:	dc400117 	ldw	r17,4(sp)
  81f02c:	dc000017 	ldw	r16,0(sp)
  81f030:	dec00304 	addi	sp,sp,12
  81f034:	f800283a 	ret
  81f038:	04220034 	movhi	r16,34816
  81f03c:	841d6704 	addi	r16,r16,30108
  81f040:	045f8e34 	movhi	r17,32312
  81f044:	8c790f04 	addi	r17,r17,-7108
  81f048:	480f883a 	mov	r7,r9
  81f04c:	400d883a 	mov	r6,r8
  81f050:	8009883a 	mov	r4,r16
  81f054:	880b883a 	mov	r5,r17
  81f058:	081f0c80 	call	81f0c8 <copysign>
  81f05c:	180b883a 	mov	r5,r3
  81f060:	800d883a 	mov	r6,r16
  81f064:	880f883a 	mov	r7,r17
  81f068:	1009883a 	mov	r4,r2
  81f06c:	003fc306 	br	81ef7c <scalbn+0x94>
  81f070:	00bff284 	movi	r2,-54
  81f074:	11000716 	blt	r2,r4,81f094 <scalbn+0x1ac>
  81f078:	00b0d414 	movui	r2,50000
  81f07c:	143fee16 	blt	r2,r16,81f038 <scalbn+0x150>
  81f080:	0430be74 	movhi	r16,49913
  81f084:	843cd644 	addi	r16,r16,-3239
  81f088:	04406974 	movhi	r17,421
  81f08c:	8c5b87c4 	addi	r17,r17,28191
  81f090:	003fed06 	br	81f048 <scalbn+0x160>
  81f094:	21000d84 	addi	r4,r4,54
  81f098:	2008953a 	slli	r4,r4,20
  81f09c:	01e00434 	movhi	r7,32784
  81f0a0:	39ffffc4 	addi	r7,r7,-1
  81f0a4:	51ce703a 	and	r7,r10,r7
  81f0a8:	390eb03a 	or	r7,r7,r4
  81f0ac:	024f2434 	movhi	r9,15504
  81f0b0:	4009883a 	mov	r4,r8
  81f0b4:	0011883a 	mov	r8,zero
  81f0b8:	380b883a 	mov	r5,r7
  81f0bc:	400d883a 	mov	r6,r8
  81f0c0:	480f883a 	mov	r7,r9
  81f0c4:	003fad06 	br	81ef7c <scalbn+0x94>

0081f0c8 <copysign>:
  81f0c8:	3813883a 	mov	r9,r7
  81f0cc:	01e00034 	movhi	r7,32768
  81f0d0:	39ffffc4 	addi	r7,r7,-1
  81f0d4:	394e703a 	and	r7,r7,r5
  81f0d8:	4aa0002c 	andhi	r10,r9,32768
  81f0dc:	3a8eb03a 	or	r7,r7,r10
  81f0e0:	2005883a 	mov	r2,r4
  81f0e4:	3807883a 	mov	r3,r7
  81f0e8:	f800283a 	ret

0081f0ec <__fixunssfsi>:
  81f0ec:	defffd04 	addi	sp,sp,-12
  81f0f0:	dc000015 	stw	r16,0(sp)
  81f0f4:	0413c034 	movhi	r16,20224
  81f0f8:	800b883a 	mov	r5,r16
  81f0fc:	dc400115 	stw	r17,4(sp)
  81f100:	dfc00215 	stw	ra,8(sp)
  81f104:	2023883a 	mov	r17,r4
  81f108:	081f8580 	call	81f858 <__gesf2>
  81f10c:	800b883a 	mov	r5,r16
  81f110:	8809883a 	mov	r4,r17
  81f114:	10000a16 	blt	r2,zero,81f140 <__fixunssfsi+0x54>
  81f118:	081f3400 	call	81f340 <__subsf3>
  81f11c:	1009883a 	mov	r4,r2
  81f120:	081f9680 	call	81f968 <__fixsfsi>
  81f124:	00e00034 	movhi	r3,32768
  81f128:	10c5883a 	add	r2,r2,r3
  81f12c:	dfc00217 	ldw	ra,8(sp)
  81f130:	dc400117 	ldw	r17,4(sp)
  81f134:	dc000017 	ldw	r16,0(sp)
  81f138:	dec00304 	addi	sp,sp,12
  81f13c:	f800283a 	ret
  81f140:	8809883a 	mov	r4,r17
  81f144:	081f9680 	call	81f968 <__fixsfsi>
  81f148:	dfc00217 	ldw	ra,8(sp)
  81f14c:	dc400117 	ldw	r17,4(sp)
  81f150:	dc000017 	ldw	r16,0(sp)
  81f154:	dec00304 	addi	sp,sp,12
  81f158:	f800283a 	ret

0081f15c <_fpadd_parts>:
  81f15c:	21c00017 	ldw	r7,0(r4)
  81f160:	02000044 	movi	r8,1
  81f164:	41c0332e 	bgeu	r8,r7,81f234 <_fpadd_parts+0xd8>
  81f168:	28800017 	ldw	r2,0(r5)
  81f16c:	4080462e 	bgeu	r8,r2,81f288 <_fpadd_parts+0x12c>
  81f170:	00c00104 	movi	r3,4
  81f174:	38c06b26 	beq	r7,r3,81f324 <_fpadd_parts+0x1c8>
  81f178:	10c04326 	beq	r2,r3,81f288 <_fpadd_parts+0x12c>
  81f17c:	00c00084 	movi	r3,2
  81f180:	10c02e26 	beq	r2,r3,81f23c <_fpadd_parts+0xe0>
  81f184:	38c04026 	beq	r7,r3,81f288 <_fpadd_parts+0x12c>
  81f188:	22800217 	ldw	r10,8(r4)
  81f18c:	28c00217 	ldw	r3,8(r5)
  81f190:	23000317 	ldw	r12,12(r4)
  81f194:	2a400317 	ldw	r9,12(r5)
  81f198:	50cfc83a 	sub	r7,r10,r3
  81f19c:	3817883a 	mov	r11,r7
  81f1a0:	38004f16 	blt	r7,zero,81f2e0 <_fpadd_parts+0x184>
  81f1a4:	008007c4 	movi	r2,31
  81f1a8:	11c03316 	blt	r2,r7,81f278 <_fpadd_parts+0x11c>
  81f1ac:	02c0540e 	bge	zero,r11,81f300 <_fpadd_parts+0x1a4>
  81f1b0:	41c4983a 	sll	r2,r8,r7
  81f1b4:	49c6d83a 	srl	r3,r9,r7
  81f1b8:	10bfffc4 	addi	r2,r2,-1
  81f1bc:	4884703a 	and	r2,r9,r2
  81f1c0:	1004c03a 	cmpne	r2,r2,zero
  81f1c4:	1892b03a 	or	r9,r3,r2
  81f1c8:	20c00117 	ldw	r3,4(r4)
  81f1cc:	28800117 	ldw	r2,4(r5)
  81f1d0:	18803c26 	beq	r3,r2,81f2c4 <_fpadd_parts+0x168>
  81f1d4:	18002f26 	beq	r3,zero,81f294 <_fpadd_parts+0x138>
  81f1d8:	4b05c83a 	sub	r2,r9,r12
  81f1dc:	10004216 	blt	r2,zero,81f2e8 <_fpadd_parts+0x18c>
  81f1e0:	32800215 	stw	r10,8(r6)
  81f1e4:	30800315 	stw	r2,12(r6)
  81f1e8:	30000115 	stw	zero,4(r6)
  81f1ec:	31000317 	ldw	r4,12(r6)
  81f1f0:	01d00034 	movhi	r7,16384
  81f1f4:	39ffff84 	addi	r7,r7,-2
  81f1f8:	20bfffc4 	addi	r2,r4,-1
  81f1fc:	2007883a 	mov	r3,r4
  81f200:	38800836 	bltu	r7,r2,81f224 <_fpadd_parts+0xc8>
  81f204:	31400217 	ldw	r5,8(r6)
  81f208:	18c9883a 	add	r4,r3,r3
  81f20c:	20bfffc4 	addi	r2,r4,-1
  81f210:	297fffc4 	addi	r5,r5,-1
  81f214:	2007883a 	mov	r3,r4
  81f218:	38bffb2e 	bgeu	r7,r2,81f208 <_fpadd_parts+0xac>
  81f21c:	31400215 	stw	r5,8(r6)
  81f220:	31000315 	stw	r4,12(r6)
  81f224:	008000c4 	movi	r2,3
  81f228:	30800015 	stw	r2,0(r6)
  81f22c:	20001b16 	blt	r4,zero,81f29c <_fpadd_parts+0x140>
  81f230:	3009883a 	mov	r4,r6
  81f234:	2005883a 	mov	r2,r4
  81f238:	f800283a 	ret
  81f23c:	38fffd1e 	bne	r7,r3,81f234 <_fpadd_parts+0xd8>
  81f240:	31c00015 	stw	r7,0(r6)
  81f244:	20800117 	ldw	r2,4(r4)
  81f248:	30800115 	stw	r2,4(r6)
  81f24c:	20c00217 	ldw	r3,8(r4)
  81f250:	30c00215 	stw	r3,8(r6)
  81f254:	20800317 	ldw	r2,12(r4)
  81f258:	30800315 	stw	r2,12(r6)
  81f25c:	20c00117 	ldw	r3,4(r4)
  81f260:	28800117 	ldw	r2,4(r5)
  81f264:	3009883a 	mov	r4,r6
  81f268:	1886703a 	and	r3,r3,r2
  81f26c:	2005883a 	mov	r2,r4
  81f270:	30c00115 	stw	r3,4(r6)
  81f274:	f800283a 	ret
  81f278:	1a801716 	blt	r3,r10,81f2d8 <_fpadd_parts+0x17c>
  81f27c:	1815883a 	mov	r10,r3
  81f280:	0019883a 	mov	r12,zero
  81f284:	003fd006 	br	81f1c8 <_fpadd_parts+0x6c>
  81f288:	2809883a 	mov	r4,r5
  81f28c:	2005883a 	mov	r2,r4
  81f290:	f800283a 	ret
  81f294:	6245c83a 	sub	r2,r12,r9
  81f298:	003fd006 	br	81f1dc <_fpadd_parts+0x80>
  81f29c:	30800217 	ldw	r2,8(r6)
  81f2a0:	2006d07a 	srli	r3,r4,1
  81f2a4:	2100004c 	andi	r4,r4,1
  81f2a8:	10800044 	addi	r2,r2,1
  81f2ac:	1906b03a 	or	r3,r3,r4
  81f2b0:	3009883a 	mov	r4,r6
  81f2b4:	30800215 	stw	r2,8(r6)
  81f2b8:	2005883a 	mov	r2,r4
  81f2bc:	30c00315 	stw	r3,12(r6)
  81f2c0:	f800283a 	ret
  81f2c4:	4b09883a 	add	r4,r9,r12
  81f2c8:	30c00115 	stw	r3,4(r6)
  81f2cc:	32800215 	stw	r10,8(r6)
  81f2d0:	31000315 	stw	r4,12(r6)
  81f2d4:	003fd306 	br	81f224 <_fpadd_parts+0xc8>
  81f2d8:	0013883a 	mov	r9,zero
  81f2dc:	003fba06 	br	81f1c8 <_fpadd_parts+0x6c>
  81f2e0:	01cfc83a 	sub	r7,zero,r7
  81f2e4:	003faf06 	br	81f1a4 <_fpadd_parts+0x48>
  81f2e8:	0089c83a 	sub	r4,zero,r2
  81f2ec:	00800044 	movi	r2,1
  81f2f0:	30800115 	stw	r2,4(r6)
  81f2f4:	32800215 	stw	r10,8(r6)
  81f2f8:	31000315 	stw	r4,12(r6)
  81f2fc:	003fbb06 	br	81f1ec <_fpadd_parts+0x90>
  81f300:	583fb126 	beq	r11,zero,81f1c8 <_fpadd_parts+0x6c>
  81f304:	41c4983a 	sll	r2,r8,r7
  81f308:	61c6d83a 	srl	r3,r12,r7
  81f30c:	51d5883a 	add	r10,r10,r7
  81f310:	10bfffc4 	addi	r2,r2,-1
  81f314:	6084703a 	and	r2,r12,r2
  81f318:	1004c03a 	cmpne	r2,r2,zero
  81f31c:	1898b03a 	or	r12,r3,r2
  81f320:	003fa906 	br	81f1c8 <_fpadd_parts+0x6c>
  81f324:	11ffc31e 	bne	r2,r7,81f234 <_fpadd_parts+0xd8>
  81f328:	28c00117 	ldw	r3,4(r5)
  81f32c:	20800117 	ldw	r2,4(r4)
  81f330:	10ffc026 	beq	r2,r3,81f234 <_fpadd_parts+0xd8>
  81f334:	01002134 	movhi	r4,132
  81f338:	213a3a04 	addi	r4,r4,-5912
  81f33c:	003fbd06 	br	81f234 <_fpadd_parts+0xd8>

0081f340 <__subsf3>:
  81f340:	deffef04 	addi	sp,sp,-68
  81f344:	dcc00f15 	stw	r19,60(sp)
  81f348:	dcc00204 	addi	r19,sp,8
  81f34c:	dc400e15 	stw	r17,56(sp)
  81f350:	d9000015 	stw	r4,0(sp)
  81f354:	d9400115 	stw	r5,4(sp)
  81f358:	d809883a 	mov	r4,sp
  81f35c:	980b883a 	mov	r5,r19
  81f360:	dc400604 	addi	r17,sp,24
  81f364:	dfc01015 	stw	ra,64(sp)
  81f368:	0820e900 	call	820e90 <__unpack_f>
  81f36c:	d9000104 	addi	r4,sp,4
  81f370:	880b883a 	mov	r5,r17
  81f374:	0820e900 	call	820e90 <__unpack_f>
  81f378:	d8800717 	ldw	r2,28(sp)
  81f37c:	9809883a 	mov	r4,r19
  81f380:	880b883a 	mov	r5,r17
  81f384:	d9800a04 	addi	r6,sp,40
  81f388:	1080005c 	xori	r2,r2,1
  81f38c:	d8800715 	stw	r2,28(sp)
  81f390:	081f15c0 	call	81f15c <_fpadd_parts>
  81f394:	1009883a 	mov	r4,r2
  81f398:	0820d300 	call	820d30 <__pack_f>
  81f39c:	dfc01017 	ldw	ra,64(sp)
  81f3a0:	dcc00f17 	ldw	r19,60(sp)
  81f3a4:	dc400e17 	ldw	r17,56(sp)
  81f3a8:	dec01104 	addi	sp,sp,68
  81f3ac:	f800283a 	ret

0081f3b0 <__addsf3>:
  81f3b0:	deffef04 	addi	sp,sp,-68
  81f3b4:	dcc00f15 	stw	r19,60(sp)
  81f3b8:	dcc00204 	addi	r19,sp,8
  81f3bc:	dc400e15 	stw	r17,56(sp)
  81f3c0:	d9000015 	stw	r4,0(sp)
  81f3c4:	d9400115 	stw	r5,4(sp)
  81f3c8:	d809883a 	mov	r4,sp
  81f3cc:	980b883a 	mov	r5,r19
  81f3d0:	dc400604 	addi	r17,sp,24
  81f3d4:	dfc01015 	stw	ra,64(sp)
  81f3d8:	0820e900 	call	820e90 <__unpack_f>
  81f3dc:	d9000104 	addi	r4,sp,4
  81f3e0:	880b883a 	mov	r5,r17
  81f3e4:	0820e900 	call	820e90 <__unpack_f>
  81f3e8:	d9800a04 	addi	r6,sp,40
  81f3ec:	9809883a 	mov	r4,r19
  81f3f0:	880b883a 	mov	r5,r17
  81f3f4:	081f15c0 	call	81f15c <_fpadd_parts>
  81f3f8:	1009883a 	mov	r4,r2
  81f3fc:	0820d300 	call	820d30 <__pack_f>
  81f400:	dfc01017 	ldw	ra,64(sp)
  81f404:	dcc00f17 	ldw	r19,60(sp)
  81f408:	dc400e17 	ldw	r17,56(sp)
  81f40c:	dec01104 	addi	sp,sp,68
  81f410:	f800283a 	ret

0081f414 <__mulsf3>:
  81f414:	deffef04 	addi	sp,sp,-68
  81f418:	dc400f15 	stw	r17,60(sp)
  81f41c:	dc400204 	addi	r17,sp,8
  81f420:	dc000e15 	stw	r16,56(sp)
  81f424:	d9000015 	stw	r4,0(sp)
  81f428:	d9400115 	stw	r5,4(sp)
  81f42c:	d809883a 	mov	r4,sp
  81f430:	880b883a 	mov	r5,r17
  81f434:	dc000604 	addi	r16,sp,24
  81f438:	dfc01015 	stw	ra,64(sp)
  81f43c:	0820e900 	call	820e90 <__unpack_f>
  81f440:	d9000104 	addi	r4,sp,4
  81f444:	800b883a 	mov	r5,r16
  81f448:	0820e900 	call	820e90 <__unpack_f>
  81f44c:	d9000217 	ldw	r4,8(sp)
  81f450:	00800044 	movi	r2,1
  81f454:	01400104 	movi	r5,4
  81f458:	1100142e 	bgeu	r2,r4,81f4ac <__mulsf3+0x98>
  81f45c:	d8c00617 	ldw	r3,24(sp)
  81f460:	10c0052e 	bgeu	r2,r3,81f478 <__mulsf3+0x64>
  81f464:	21400f26 	beq	r4,r5,81f4a4 <__mulsf3+0x90>
  81f468:	19405d26 	beq	r3,r5,81f5e0 <__mulsf3+0x1cc>
  81f46c:	00800084 	movi	r2,2
  81f470:	20800e26 	beq	r4,r2,81f4ac <__mulsf3+0x98>
  81f474:	1880181e 	bne	r3,r2,81f4d8 <__mulsf3+0xc4>
  81f478:	d8c00717 	ldw	r3,28(sp)
  81f47c:	d8800317 	ldw	r2,12(sp)
  81f480:	8009883a 	mov	r4,r16
  81f484:	10c4c03a 	cmpne	r2,r2,r3
  81f488:	d8800715 	stw	r2,28(sp)
  81f48c:	0820d300 	call	820d30 <__pack_f>
  81f490:	dfc01017 	ldw	ra,64(sp)
  81f494:	dc400f17 	ldw	r17,60(sp)
  81f498:	dc000e17 	ldw	r16,56(sp)
  81f49c:	dec01104 	addi	sp,sp,68
  81f4a0:	f800283a 	ret
  81f4a4:	00800084 	movi	r2,2
  81f4a8:	18804f26 	beq	r3,r2,81f5e8 <__mulsf3+0x1d4>
  81f4ac:	d8800317 	ldw	r2,12(sp)
  81f4b0:	d8c00717 	ldw	r3,28(sp)
  81f4b4:	8809883a 	mov	r4,r17
  81f4b8:	10c4c03a 	cmpne	r2,r2,r3
  81f4bc:	d8800315 	stw	r2,12(sp)
  81f4c0:	0820d300 	call	820d30 <__pack_f>
  81f4c4:	dfc01017 	ldw	ra,64(sp)
  81f4c8:	dc400f17 	ldw	r17,60(sp)
  81f4cc:	dc000e17 	ldw	r16,56(sp)
  81f4d0:	dec01104 	addi	sp,sp,68
  81f4d4:	f800283a 	ret
  81f4d8:	d8800517 	ldw	r2,20(sp)
  81f4dc:	da000917 	ldw	r8,36(sp)
  81f4e0:	0013883a 	mov	r9,zero
  81f4e4:	0007883a 	mov	r3,zero
  81f4e8:	480f883a 	mov	r7,r9
  81f4ec:	180b883a 	mov	r5,r3
  81f4f0:	400d883a 	mov	r6,r8
  81f4f4:	1009883a 	mov	r4,r2
  81f4f8:	0820c180 	call	820c18 <__muldi3>
  81f4fc:	da800417 	ldw	r10,16(sp)
  81f500:	d9800817 	ldw	r6,32(sp)
  81f504:	da400317 	ldw	r9,12(sp)
  81f508:	52800084 	addi	r10,r10,2
  81f50c:	3295883a 	add	r10,r6,r10
  81f510:	d9800717 	ldw	r6,28(sp)
  81f514:	180b883a 	mov	r5,r3
  81f518:	180f883a 	mov	r7,r3
  81f51c:	4992c03a 	cmpne	r9,r9,r6
  81f520:	da400b15 	stw	r9,44(sp)
  81f524:	1007883a 	mov	r3,r2
  81f528:	da800c15 	stw	r10,48(sp)
  81f52c:	2800070e 	bge	r5,zero,81f54c <__mulsf3+0x138>
  81f530:	2880004c 	andi	r2,r5,1
  81f534:	1005003a 	cmpeq	r2,r2,zero
  81f538:	500d883a 	mov	r6,r10
  81f53c:	10001e26 	beq	r2,zero,81f5b8 <__mulsf3+0x1a4>
  81f540:	380ed07a 	srli	r7,r7,1
  81f544:	31800044 	addi	r6,r6,1
  81f548:	d9800c15 	stw	r6,48(sp)
  81f54c:	01100034 	movhi	r4,16384
  81f550:	213fffc4 	addi	r4,r4,-1
  81f554:	21c00b36 	bltu	r4,r7,81f584 <__mulsf3+0x170>
  81f558:	d8800c17 	ldw	r2,48(sp)
  81f55c:	00000206 	br	81f568 <__mulsf3+0x154>
  81f560:	18c7883a 	add	r3,r3,r3
  81f564:	21c00636 	bltu	r4,r7,81f580 <__mulsf3+0x16c>
  81f568:	10bfffc4 	addi	r2,r2,-1
  81f56c:	39cf883a 	add	r7,r7,r7
  81f570:	183ffb0e 	bge	r3,zero,81f560 <__mulsf3+0x14c>
  81f574:	39c00054 	ori	r7,r7,1
  81f578:	18c7883a 	add	r3,r3,r3
  81f57c:	21fffa2e 	bgeu	r4,r7,81f568 <__mulsf3+0x154>
  81f580:	d8800c15 	stw	r2,48(sp)
  81f584:	39001fcc 	andi	r4,r7,127
  81f588:	00801004 	movi	r2,64
  81f58c:	20800d26 	beq	r4,r2,81f5c4 <__mulsf3+0x1b0>
  81f590:	008000c4 	movi	r2,3
  81f594:	d9000a04 	addi	r4,sp,40
  81f598:	d9c00d15 	stw	r7,52(sp)
  81f59c:	d8800a15 	stw	r2,40(sp)
  81f5a0:	0820d300 	call	820d30 <__pack_f>
  81f5a4:	dfc01017 	ldw	ra,64(sp)
  81f5a8:	dc400f17 	ldw	r17,60(sp)
  81f5ac:	dc000e17 	ldw	r16,56(sp)
  81f5b0:	dec01104 	addi	sp,sp,68
  81f5b4:	f800283a 	ret
  81f5b8:	1804d07a 	srli	r2,r3,1
  81f5bc:	10e00034 	orhi	r3,r2,32768
  81f5c0:	003fdf06 	br	81f540 <__mulsf3+0x12c>
  81f5c4:	3880200c 	andi	r2,r7,128
  81f5c8:	103ff11e 	bne	r2,zero,81f590 <__mulsf3+0x17c>
  81f5cc:	183ff026 	beq	r3,zero,81f590 <__mulsf3+0x17c>
  81f5d0:	3907883a 	add	r3,r7,r4
  81f5d4:	00bfe004 	movi	r2,-128
  81f5d8:	188e703a 	and	r7,r3,r2
  81f5dc:	003fec06 	br	81f590 <__mulsf3+0x17c>
  81f5e0:	00800084 	movi	r2,2
  81f5e4:	20bfa41e 	bne	r4,r2,81f478 <__mulsf3+0x64>
  81f5e8:	01002134 	movhi	r4,132
  81f5ec:	213a3a04 	addi	r4,r4,-5912
  81f5f0:	003fb306 	br	81f4c0 <__mulsf3+0xac>

0081f5f4 <__divsf3>:
  81f5f4:	defff304 	addi	sp,sp,-52
  81f5f8:	dc400b15 	stw	r17,44(sp)
  81f5fc:	dc400204 	addi	r17,sp,8
  81f600:	dc000a15 	stw	r16,40(sp)
  81f604:	d9000015 	stw	r4,0(sp)
  81f608:	d9400115 	stw	r5,4(sp)
  81f60c:	d809883a 	mov	r4,sp
  81f610:	880b883a 	mov	r5,r17
  81f614:	dc000604 	addi	r16,sp,24
  81f618:	dfc00c15 	stw	ra,48(sp)
  81f61c:	0820e900 	call	820e90 <__unpack_f>
  81f620:	d9000104 	addi	r4,sp,4
  81f624:	800b883a 	mov	r5,r16
  81f628:	0820e900 	call	820e90 <__unpack_f>
  81f62c:	d9000217 	ldw	r4,8(sp)
  81f630:	00800044 	movi	r2,1
  81f634:	01800104 	movi	r6,4
  81f638:	11000a2e 	bgeu	r2,r4,81f664 <__divsf3+0x70>
  81f63c:	d9400617 	ldw	r5,24(sp)
  81f640:	1140432e 	bgeu	r2,r5,81f750 <__divsf3+0x15c>
  81f644:	d8800317 	ldw	r2,12(sp)
  81f648:	d8c00717 	ldw	r3,28(sp)
  81f64c:	10c4f03a 	xor	r2,r2,r3
  81f650:	d8800315 	stw	r2,12(sp)
  81f654:	21800226 	beq	r4,r6,81f660 <__divsf3+0x6c>
  81f658:	00800084 	movi	r2,2
  81f65c:	2080101e 	bne	r4,r2,81f6a0 <__divsf3+0xac>
  81f660:	29000726 	beq	r5,r4,81f680 <__divsf3+0x8c>
  81f664:	8809883a 	mov	r4,r17
  81f668:	0820d300 	call	820d30 <__pack_f>
  81f66c:	dfc00c17 	ldw	ra,48(sp)
  81f670:	dc400b17 	ldw	r17,44(sp)
  81f674:	dc000a17 	ldw	r16,40(sp)
  81f678:	dec00d04 	addi	sp,sp,52
  81f67c:	f800283a 	ret
  81f680:	01002134 	movhi	r4,132
  81f684:	213a3a04 	addi	r4,r4,-5912
  81f688:	0820d300 	call	820d30 <__pack_f>
  81f68c:	dfc00c17 	ldw	ra,48(sp)
  81f690:	dc400b17 	ldw	r17,44(sp)
  81f694:	dc000a17 	ldw	r16,40(sp)
  81f698:	dec00d04 	addi	sp,sp,52
  81f69c:	f800283a 	ret
  81f6a0:	29802d26 	beq	r5,r6,81f758 <__divsf3+0x164>
  81f6a4:	28801a26 	beq	r5,r2,81f710 <__divsf3+0x11c>
  81f6a8:	d8c00417 	ldw	r3,16(sp)
  81f6ac:	d8800817 	ldw	r2,32(sp)
  81f6b0:	d9000517 	ldw	r4,20(sp)
  81f6b4:	d9800917 	ldw	r6,36(sp)
  81f6b8:	1885c83a 	sub	r2,r3,r2
  81f6bc:	d8800415 	stw	r2,16(sp)
  81f6c0:	2180032e 	bgeu	r4,r6,81f6d0 <__divsf3+0xdc>
  81f6c4:	10bfffc4 	addi	r2,r2,-1
  81f6c8:	d8800415 	stw	r2,16(sp)
  81f6cc:	2109883a 	add	r4,r4,r4
  81f6d0:	01500034 	movhi	r5,16384
  81f6d4:	0007883a 	mov	r3,zero
  81f6d8:	0005883a 	mov	r2,zero
  81f6dc:	01c007c4 	movi	r7,31
  81f6e0:	10800044 	addi	r2,r2,1
  81f6e4:	21800236 	bltu	r4,r6,81f6f0 <__divsf3+0xfc>
  81f6e8:	1946b03a 	or	r3,r3,r5
  81f6ec:	2189c83a 	sub	r4,r4,r6
  81f6f0:	280ad07a 	srli	r5,r5,1
  81f6f4:	2109883a 	add	r4,r4,r4
  81f6f8:	11fff91e 	bne	r2,r7,81f6e0 <__divsf3+0xec>
  81f6fc:	19401fcc 	andi	r5,r3,127
  81f700:	00801004 	movi	r2,64
  81f704:	28800a26 	beq	r5,r2,81f730 <__divsf3+0x13c>
  81f708:	d8c00515 	stw	r3,20(sp)
  81f70c:	003fd506 	br	81f664 <__divsf3+0x70>
  81f710:	8809883a 	mov	r4,r17
  81f714:	d9800215 	stw	r6,8(sp)
  81f718:	0820d300 	call	820d30 <__pack_f>
  81f71c:	dfc00c17 	ldw	ra,48(sp)
  81f720:	dc400b17 	ldw	r17,44(sp)
  81f724:	dc000a17 	ldw	r16,40(sp)
  81f728:	dec00d04 	addi	sp,sp,52
  81f72c:	f800283a 	ret
  81f730:	1880200c 	andi	r2,r3,128
  81f734:	103ff41e 	bne	r2,zero,81f708 <__divsf3+0x114>
  81f738:	203ff326 	beq	r4,zero,81f708 <__divsf3+0x114>
  81f73c:	1947883a 	add	r3,r3,r5
  81f740:	00bfe004 	movi	r2,-128
  81f744:	1886703a 	and	r3,r3,r2
  81f748:	d8c00515 	stw	r3,20(sp)
  81f74c:	003fc506 	br	81f664 <__divsf3+0x70>
  81f750:	8009883a 	mov	r4,r16
  81f754:	003fc406 	br	81f668 <__divsf3+0x74>
  81f758:	8809883a 	mov	r4,r17
  81f75c:	d8000515 	stw	zero,20(sp)
  81f760:	d8000415 	stw	zero,16(sp)
  81f764:	003fc006 	br	81f668 <__divsf3+0x74>

0081f768 <__eqsf2>:
  81f768:	defff304 	addi	sp,sp,-52
  81f76c:	dc400b15 	stw	r17,44(sp)
  81f770:	dc400204 	addi	r17,sp,8
  81f774:	dc000a15 	stw	r16,40(sp)
  81f778:	d9000015 	stw	r4,0(sp)
  81f77c:	d9400115 	stw	r5,4(sp)
  81f780:	d809883a 	mov	r4,sp
  81f784:	880b883a 	mov	r5,r17
  81f788:	dc000604 	addi	r16,sp,24
  81f78c:	dfc00c15 	stw	ra,48(sp)
  81f790:	0820e900 	call	820e90 <__unpack_f>
  81f794:	d9000104 	addi	r4,sp,4
  81f798:	800b883a 	mov	r5,r16
  81f79c:	0820e900 	call	820e90 <__unpack_f>
  81f7a0:	d8800217 	ldw	r2,8(sp)
  81f7a4:	00c00044 	movi	r3,1
  81f7a8:	180d883a 	mov	r6,r3
  81f7ac:	1880062e 	bgeu	r3,r2,81f7c8 <__eqsf2+0x60>
  81f7b0:	d8800617 	ldw	r2,24(sp)
  81f7b4:	8809883a 	mov	r4,r17
  81f7b8:	800b883a 	mov	r5,r16
  81f7bc:	1880022e 	bgeu	r3,r2,81f7c8 <__eqsf2+0x60>
  81f7c0:	0820f580 	call	820f58 <__fpcmp_parts_f>
  81f7c4:	100d883a 	mov	r6,r2
  81f7c8:	3005883a 	mov	r2,r6
  81f7cc:	dfc00c17 	ldw	ra,48(sp)
  81f7d0:	dc400b17 	ldw	r17,44(sp)
  81f7d4:	dc000a17 	ldw	r16,40(sp)
  81f7d8:	dec00d04 	addi	sp,sp,52
  81f7dc:	f800283a 	ret

0081f7e0 <__gtsf2>:
  81f7e0:	defff304 	addi	sp,sp,-52
  81f7e4:	dc400b15 	stw	r17,44(sp)
  81f7e8:	dc400204 	addi	r17,sp,8
  81f7ec:	dc000a15 	stw	r16,40(sp)
  81f7f0:	d9000015 	stw	r4,0(sp)
  81f7f4:	d9400115 	stw	r5,4(sp)
  81f7f8:	d809883a 	mov	r4,sp
  81f7fc:	880b883a 	mov	r5,r17
  81f800:	dc000604 	addi	r16,sp,24
  81f804:	dfc00c15 	stw	ra,48(sp)
  81f808:	0820e900 	call	820e90 <__unpack_f>
  81f80c:	d9000104 	addi	r4,sp,4
  81f810:	800b883a 	mov	r5,r16
  81f814:	0820e900 	call	820e90 <__unpack_f>
  81f818:	d8800217 	ldw	r2,8(sp)
  81f81c:	00c00044 	movi	r3,1
  81f820:	01bfffc4 	movi	r6,-1
  81f824:	1880062e 	bgeu	r3,r2,81f840 <__gtsf2+0x60>
  81f828:	d8800617 	ldw	r2,24(sp)
  81f82c:	8809883a 	mov	r4,r17
  81f830:	800b883a 	mov	r5,r16
  81f834:	1880022e 	bgeu	r3,r2,81f840 <__gtsf2+0x60>
  81f838:	0820f580 	call	820f58 <__fpcmp_parts_f>
  81f83c:	100d883a 	mov	r6,r2
  81f840:	3005883a 	mov	r2,r6
  81f844:	dfc00c17 	ldw	ra,48(sp)
  81f848:	dc400b17 	ldw	r17,44(sp)
  81f84c:	dc000a17 	ldw	r16,40(sp)
  81f850:	dec00d04 	addi	sp,sp,52
  81f854:	f800283a 	ret

0081f858 <__gesf2>:
  81f858:	defff304 	addi	sp,sp,-52
  81f85c:	dc400b15 	stw	r17,44(sp)
  81f860:	dc400204 	addi	r17,sp,8
  81f864:	dc000a15 	stw	r16,40(sp)
  81f868:	d9000015 	stw	r4,0(sp)
  81f86c:	d9400115 	stw	r5,4(sp)
  81f870:	d809883a 	mov	r4,sp
  81f874:	880b883a 	mov	r5,r17
  81f878:	dc000604 	addi	r16,sp,24
  81f87c:	dfc00c15 	stw	ra,48(sp)
  81f880:	0820e900 	call	820e90 <__unpack_f>
  81f884:	d9000104 	addi	r4,sp,4
  81f888:	800b883a 	mov	r5,r16
  81f88c:	0820e900 	call	820e90 <__unpack_f>
  81f890:	d8800217 	ldw	r2,8(sp)
  81f894:	00c00044 	movi	r3,1
  81f898:	01bfffc4 	movi	r6,-1
  81f89c:	1880062e 	bgeu	r3,r2,81f8b8 <__gesf2+0x60>
  81f8a0:	d8800617 	ldw	r2,24(sp)
  81f8a4:	8809883a 	mov	r4,r17
  81f8a8:	800b883a 	mov	r5,r16
  81f8ac:	1880022e 	bgeu	r3,r2,81f8b8 <__gesf2+0x60>
  81f8b0:	0820f580 	call	820f58 <__fpcmp_parts_f>
  81f8b4:	100d883a 	mov	r6,r2
  81f8b8:	3005883a 	mov	r2,r6
  81f8bc:	dfc00c17 	ldw	ra,48(sp)
  81f8c0:	dc400b17 	ldw	r17,44(sp)
  81f8c4:	dc000a17 	ldw	r16,40(sp)
  81f8c8:	dec00d04 	addi	sp,sp,52
  81f8cc:	f800283a 	ret

0081f8d0 <__floatsisf>:
  81f8d0:	2006d7fa 	srli	r3,r4,31
  81f8d4:	defffa04 	addi	sp,sp,-24
  81f8d8:	008000c4 	movi	r2,3
  81f8dc:	dfc00515 	stw	ra,20(sp)
  81f8e0:	dc000415 	stw	r16,16(sp)
  81f8e4:	d8800015 	stw	r2,0(sp)
  81f8e8:	d8c00115 	stw	r3,4(sp)
  81f8ec:	2000081e 	bne	r4,zero,81f910 <__floatsisf+0x40>
  81f8f0:	00800084 	movi	r2,2
  81f8f4:	d8800015 	stw	r2,0(sp)
  81f8f8:	d809883a 	mov	r4,sp
  81f8fc:	0820d300 	call	820d30 <__pack_f>
  81f900:	dfc00517 	ldw	ra,20(sp)
  81f904:	dc000417 	ldw	r16,16(sp)
  81f908:	dec00604 	addi	sp,sp,24
  81f90c:	f800283a 	ret
  81f910:	00800784 	movi	r2,30
  81f914:	1807003a 	cmpeq	r3,r3,zero
  81f918:	d8800215 	stw	r2,8(sp)
  81f91c:	18000e1e 	bne	r3,zero,81f958 <__floatsisf+0x88>
  81f920:	00a00034 	movhi	r2,32768
  81f924:	20800e26 	beq	r4,r2,81f960 <__floatsisf+0x90>
  81f928:	0121c83a 	sub	r16,zero,r4
  81f92c:	8009883a 	mov	r4,r16
  81f930:	dc000315 	stw	r16,12(sp)
  81f934:	0820cb00 	call	820cb0 <__clzsi2>
  81f938:	117fffc4 	addi	r5,r2,-1
  81f93c:	017fee0e 	bge	zero,r5,81f8f8 <__floatsisf+0x28>
  81f940:	d8800217 	ldw	r2,8(sp)
  81f944:	8146983a 	sll	r3,r16,r5
  81f948:	1145c83a 	sub	r2,r2,r5
  81f94c:	d8c00315 	stw	r3,12(sp)
  81f950:	d8800215 	stw	r2,8(sp)
  81f954:	003fe806 	br	81f8f8 <__floatsisf+0x28>
  81f958:	2021883a 	mov	r16,r4
  81f95c:	003ff306 	br	81f92c <__floatsisf+0x5c>
  81f960:	00b3c034 	movhi	r2,52992
  81f964:	003fe606 	br	81f900 <__floatsisf+0x30>

0081f968 <__fixsfsi>:
  81f968:	defffa04 	addi	sp,sp,-24
  81f96c:	d9000015 	stw	r4,0(sp)
  81f970:	d9400104 	addi	r5,sp,4
  81f974:	d809883a 	mov	r4,sp
  81f978:	dfc00515 	stw	ra,20(sp)
  81f97c:	0820e900 	call	820e90 <__unpack_f>
  81f980:	d8c00117 	ldw	r3,4(sp)
  81f984:	00800084 	movi	r2,2
  81f988:	1880041e 	bne	r3,r2,81f99c <__fixsfsi+0x34>
  81f98c:	0005883a 	mov	r2,zero
  81f990:	dfc00517 	ldw	ra,20(sp)
  81f994:	dec00604 	addi	sp,sp,24
  81f998:	f800283a 	ret
  81f99c:	00800044 	movi	r2,1
  81f9a0:	10fffa2e 	bgeu	r2,r3,81f98c <__fixsfsi+0x24>
  81f9a4:	00800104 	movi	r2,4
  81f9a8:	18800426 	beq	r3,r2,81f9bc <__fixsfsi+0x54>
  81f9ac:	d8800317 	ldw	r2,12(sp)
  81f9b0:	103ff616 	blt	r2,zero,81f98c <__fixsfsi+0x24>
  81f9b4:	00c00784 	movi	r3,30
  81f9b8:	1880070e 	bge	r3,r2,81f9d8 <__fixsfsi+0x70>
  81f9bc:	d8800217 	ldw	r2,8(sp)
  81f9c0:	10000c1e 	bne	r2,zero,81f9f4 <__fixsfsi+0x8c>
  81f9c4:	00a00034 	movhi	r2,32768
  81f9c8:	10bfffc4 	addi	r2,r2,-1
  81f9cc:	dfc00517 	ldw	ra,20(sp)
  81f9d0:	dec00604 	addi	sp,sp,24
  81f9d4:	f800283a 	ret
  81f9d8:	1885c83a 	sub	r2,r3,r2
  81f9dc:	d9000217 	ldw	r4,8(sp)
  81f9e0:	d8c00417 	ldw	r3,16(sp)
  81f9e4:	1884d83a 	srl	r2,r3,r2
  81f9e8:	203fe926 	beq	r4,zero,81f990 <__fixsfsi+0x28>
  81f9ec:	0085c83a 	sub	r2,zero,r2
  81f9f0:	003fe706 	br	81f990 <__fixsfsi+0x28>
  81f9f4:	00a00034 	movhi	r2,32768
  81f9f8:	003fe506 	br	81f990 <__fixsfsi+0x28>

0081f9fc <__extendsfdf2>:
  81f9fc:	defff904 	addi	sp,sp,-28
  81fa00:	d9000115 	stw	r4,4(sp)
  81fa04:	d9400204 	addi	r5,sp,8
  81fa08:	d9000104 	addi	r4,sp,4
  81fa0c:	dfc00615 	stw	ra,24(sp)
  81fa10:	0820e900 	call	820e90 <__unpack_f>
  81fa14:	d9c00517 	ldw	r7,20(sp)
  81fa18:	0011883a 	mov	r8,zero
  81fa1c:	400697ba 	slli	r3,r8,30
  81fa20:	3812d0ba 	srli	r9,r7,2
  81fa24:	380497ba 	slli	r2,r7,30
  81fa28:	d9000217 	ldw	r4,8(sp)
  81fa2c:	d9400317 	ldw	r5,12(sp)
  81fa30:	d9800417 	ldw	r6,16(sp)
  81fa34:	48c6b03a 	or	r3,r9,r3
  81fa38:	100f883a 	mov	r7,r2
  81fa3c:	d8c00015 	stw	r3,0(sp)
  81fa40:	0820a200 	call	820a20 <__make_dp>
  81fa44:	dfc00617 	ldw	ra,24(sp)
  81fa48:	dec00704 	addi	sp,sp,28
  81fa4c:	f800283a 	ret

0081fa50 <__floatunsisf>:
  81fa50:	defff904 	addi	sp,sp,-28
  81fa54:	dc400515 	stw	r17,20(sp)
  81fa58:	dc000415 	stw	r16,16(sp)
  81fa5c:	dfc00615 	stw	ra,24(sp)
  81fa60:	04400784 	movi	r17,30
  81fa64:	2021883a 	mov	r16,r4
  81fa68:	d8000115 	stw	zero,4(sp)
  81fa6c:	2000091e 	bne	r4,zero,81fa94 <__floatunsisf+0x44>
  81fa70:	00800084 	movi	r2,2
  81fa74:	d8800015 	stw	r2,0(sp)
  81fa78:	d809883a 	mov	r4,sp
  81fa7c:	0820d300 	call	820d30 <__pack_f>
  81fa80:	dfc00617 	ldw	ra,24(sp)
  81fa84:	dc400517 	ldw	r17,20(sp)
  81fa88:	dc000417 	ldw	r16,16(sp)
  81fa8c:	dec00704 	addi	sp,sp,28
  81fa90:	f800283a 	ret
  81fa94:	008000c4 	movi	r2,3
  81fa98:	d9000315 	stw	r4,12(sp)
  81fa9c:	d8800015 	stw	r2,0(sp)
  81faa0:	dc400215 	stw	r17,8(sp)
  81faa4:	0820cb00 	call	820cb0 <__clzsi2>
  81faa8:	117fffc4 	addi	r5,r2,-1
  81faac:	0147c83a 	sub	r3,zero,r5
  81fab0:	00800044 	movi	r2,1
  81fab4:	10c4983a 	sll	r2,r2,r3
  81fab8:	80c6d83a 	srl	r3,r16,r3
  81fabc:	8949c83a 	sub	r4,r17,r5
  81fac0:	10bfffc4 	addi	r2,r2,-1
  81fac4:	8084703a 	and	r2,r16,r2
  81fac8:	1004c03a 	cmpne	r2,r2,zero
  81facc:	1886b03a 	or	r3,r3,r2
  81fad0:	28000c16 	blt	r5,zero,81fb04 <__floatunsisf+0xb4>
  81fad4:	8144983a 	sll	r2,r16,r5
  81fad8:	8947c83a 	sub	r3,r17,r5
  81fadc:	283fe626 	beq	r5,zero,81fa78 <__floatunsisf+0x28>
  81fae0:	d809883a 	mov	r4,sp
  81fae4:	d8800315 	stw	r2,12(sp)
  81fae8:	d8c00215 	stw	r3,8(sp)
  81faec:	0820d300 	call	820d30 <__pack_f>
  81faf0:	dfc00617 	ldw	ra,24(sp)
  81faf4:	dc400517 	ldw	r17,20(sp)
  81faf8:	dc000417 	ldw	r16,16(sp)
  81fafc:	dec00704 	addi	sp,sp,28
  81fb00:	f800283a 	ret
  81fb04:	d8c00315 	stw	r3,12(sp)
  81fb08:	d9000215 	stw	r4,8(sp)
  81fb0c:	003fda06 	br	81fa78 <__floatunsisf+0x28>

0081fb10 <_fpadd_parts>:
  81fb10:	defff804 	addi	sp,sp,-32
  81fb14:	dcc00315 	stw	r19,12(sp)
  81fb18:	2027883a 	mov	r19,r4
  81fb1c:	21000017 	ldw	r4,0(r4)
  81fb20:	00c00044 	movi	r3,1
  81fb24:	dd400515 	stw	r21,20(sp)
  81fb28:	dd000415 	stw	r20,16(sp)
  81fb2c:	ddc00715 	stw	r23,28(sp)
  81fb30:	dd800615 	stw	r22,24(sp)
  81fb34:	dc800215 	stw	r18,8(sp)
  81fb38:	dc400115 	stw	r17,4(sp)
  81fb3c:	dc000015 	stw	r16,0(sp)
  81fb40:	282b883a 	mov	r21,r5
  81fb44:	3029883a 	mov	r20,r6
  81fb48:	1900632e 	bgeu	r3,r4,81fcd8 <_fpadd_parts+0x1c8>
  81fb4c:	28800017 	ldw	r2,0(r5)
  81fb50:	1880812e 	bgeu	r3,r2,81fd58 <_fpadd_parts+0x248>
  81fb54:	00c00104 	movi	r3,4
  81fb58:	20c0dc26 	beq	r4,r3,81fecc <_fpadd_parts+0x3bc>
  81fb5c:	10c07e26 	beq	r2,r3,81fd58 <_fpadd_parts+0x248>
  81fb60:	00c00084 	movi	r3,2
  81fb64:	10c06726 	beq	r2,r3,81fd04 <_fpadd_parts+0x1f4>
  81fb68:	20c07b26 	beq	r4,r3,81fd58 <_fpadd_parts+0x248>
  81fb6c:	9dc00217 	ldw	r23,8(r19)
  81fb70:	28c00217 	ldw	r3,8(r5)
  81fb74:	9c400317 	ldw	r17,12(r19)
  81fb78:	2bc00317 	ldw	r15,12(r5)
  81fb7c:	b8cdc83a 	sub	r6,r23,r3
  81fb80:	9c800417 	ldw	r18,16(r19)
  81fb84:	2c000417 	ldw	r16,16(r5)
  81fb88:	3009883a 	mov	r4,r6
  81fb8c:	30009716 	blt	r6,zero,81fdec <_fpadd_parts+0x2dc>
  81fb90:	00800fc4 	movi	r2,63
  81fb94:	11806b16 	blt	r2,r6,81fd44 <_fpadd_parts+0x234>
  81fb98:	0100a40e 	bge	zero,r4,81fe2c <_fpadd_parts+0x31c>
  81fb9c:	35bff804 	addi	r22,r6,-32
  81fba0:	b000bc16 	blt	r22,zero,81fe94 <_fpadd_parts+0x384>
  81fba4:	8596d83a 	srl	r11,r16,r22
  81fba8:	0019883a 	mov	r12,zero
  81fbac:	0013883a 	mov	r9,zero
  81fbb0:	01000044 	movi	r4,1
  81fbb4:	0015883a 	mov	r10,zero
  81fbb8:	b000be16 	blt	r22,zero,81feb4 <_fpadd_parts+0x3a4>
  81fbbc:	2590983a 	sll	r8,r4,r22
  81fbc0:	000f883a 	mov	r7,zero
  81fbc4:	00bfffc4 	movi	r2,-1
  81fbc8:	3889883a 	add	r4,r7,r2
  81fbcc:	408b883a 	add	r5,r8,r2
  81fbd0:	21cd803a 	cmpltu	r6,r4,r7
  81fbd4:	314b883a 	add	r5,r6,r5
  81fbd8:	7904703a 	and	r2,r15,r4
  81fbdc:	8146703a 	and	r3,r16,r5
  81fbe0:	10c4b03a 	or	r2,r2,r3
  81fbe4:	10000226 	beq	r2,zero,81fbf0 <_fpadd_parts+0xe0>
  81fbe8:	02400044 	movi	r9,1
  81fbec:	0015883a 	mov	r10,zero
  81fbf0:	5a5eb03a 	or	r15,r11,r9
  81fbf4:	62a0b03a 	or	r16,r12,r10
  81fbf8:	99400117 	ldw	r5,4(r19)
  81fbfc:	a8800117 	ldw	r2,4(r21)
  81fc00:	28806e26 	beq	r5,r2,81fdbc <_fpadd_parts+0x2ac>
  81fc04:	28006626 	beq	r5,zero,81fda0 <_fpadd_parts+0x290>
  81fc08:	7c45c83a 	sub	r2,r15,r17
  81fc0c:	7889803a 	cmpltu	r4,r15,r2
  81fc10:	8487c83a 	sub	r3,r16,r18
  81fc14:	1909c83a 	sub	r4,r3,r4
  81fc18:	100d883a 	mov	r6,r2
  81fc1c:	200f883a 	mov	r7,r4
  81fc20:	38007716 	blt	r7,zero,81fe00 <_fpadd_parts+0x2f0>
  81fc24:	a5c00215 	stw	r23,8(r20)
  81fc28:	a1c00415 	stw	r7,16(r20)
  81fc2c:	a0000115 	stw	zero,4(r20)
  81fc30:	a1800315 	stw	r6,12(r20)
  81fc34:	a2000317 	ldw	r8,12(r20)
  81fc38:	a2400417 	ldw	r9,16(r20)
  81fc3c:	00bfffc4 	movi	r2,-1
  81fc40:	408b883a 	add	r5,r8,r2
  81fc44:	2a09803a 	cmpltu	r4,r5,r8
  81fc48:	488d883a 	add	r6,r9,r2
  81fc4c:	01c40034 	movhi	r7,4096
  81fc50:	39ffffc4 	addi	r7,r7,-1
  81fc54:	218d883a 	add	r6,r4,r6
  81fc58:	39801736 	bltu	r7,r6,81fcb8 <_fpadd_parts+0x1a8>
  81fc5c:	31c06526 	beq	r6,r7,81fdf4 <_fpadd_parts+0x2e4>
  81fc60:	a3000217 	ldw	r12,8(r20)
  81fc64:	4209883a 	add	r4,r8,r8
  81fc68:	00bfffc4 	movi	r2,-1
  81fc6c:	220f803a 	cmpltu	r7,r4,r8
  81fc70:	4a4b883a 	add	r5,r9,r9
  81fc74:	394f883a 	add	r7,r7,r5
  81fc78:	2095883a 	add	r10,r4,r2
  81fc7c:	3897883a 	add	r11,r7,r2
  81fc80:	510d803a 	cmpltu	r6,r10,r4
  81fc84:	6099883a 	add	r12,r12,r2
  81fc88:	32d7883a 	add	r11,r6,r11
  81fc8c:	00840034 	movhi	r2,4096
  81fc90:	10bfffc4 	addi	r2,r2,-1
  81fc94:	2011883a 	mov	r8,r4
  81fc98:	3813883a 	mov	r9,r7
  81fc9c:	a1000315 	stw	r4,12(r20)
  81fca0:	a1c00415 	stw	r7,16(r20)
  81fca4:	a3000215 	stw	r12,8(r20)
  81fca8:	12c00336 	bltu	r2,r11,81fcb8 <_fpadd_parts+0x1a8>
  81fcac:	58bfed1e 	bne	r11,r2,81fc64 <_fpadd_parts+0x154>
  81fcb0:	00bfff84 	movi	r2,-2
  81fcb4:	12bfeb2e 	bgeu	r2,r10,81fc64 <_fpadd_parts+0x154>
  81fcb8:	a2800417 	ldw	r10,16(r20)
  81fcbc:	008000c4 	movi	r2,3
  81fcc0:	00c80034 	movhi	r3,8192
  81fcc4:	18ffffc4 	addi	r3,r3,-1
  81fcc8:	a2400317 	ldw	r9,12(r20)
  81fccc:	a0800015 	stw	r2,0(r20)
  81fcd0:	1a802336 	bltu	r3,r10,81fd60 <_fpadd_parts+0x250>
  81fcd4:	a027883a 	mov	r19,r20
  81fcd8:	9805883a 	mov	r2,r19
  81fcdc:	ddc00717 	ldw	r23,28(sp)
  81fce0:	dd800617 	ldw	r22,24(sp)
  81fce4:	dd400517 	ldw	r21,20(sp)
  81fce8:	dd000417 	ldw	r20,16(sp)
  81fcec:	dcc00317 	ldw	r19,12(sp)
  81fcf0:	dc800217 	ldw	r18,8(sp)
  81fcf4:	dc400117 	ldw	r17,4(sp)
  81fcf8:	dc000017 	ldw	r16,0(sp)
  81fcfc:	dec00804 	addi	sp,sp,32
  81fd00:	f800283a 	ret
  81fd04:	20fff41e 	bne	r4,r3,81fcd8 <_fpadd_parts+0x1c8>
  81fd08:	31000015 	stw	r4,0(r6)
  81fd0c:	98800117 	ldw	r2,4(r19)
  81fd10:	30800115 	stw	r2,4(r6)
  81fd14:	98c00217 	ldw	r3,8(r19)
  81fd18:	30c00215 	stw	r3,8(r6)
  81fd1c:	98800317 	ldw	r2,12(r19)
  81fd20:	30800315 	stw	r2,12(r6)
  81fd24:	98c00417 	ldw	r3,16(r19)
  81fd28:	30c00415 	stw	r3,16(r6)
  81fd2c:	98800117 	ldw	r2,4(r19)
  81fd30:	28c00117 	ldw	r3,4(r5)
  81fd34:	3027883a 	mov	r19,r6
  81fd38:	10c4703a 	and	r2,r2,r3
  81fd3c:	30800115 	stw	r2,4(r6)
  81fd40:	003fe506 	br	81fcd8 <_fpadd_parts+0x1c8>
  81fd44:	1dc02616 	blt	r3,r23,81fde0 <_fpadd_parts+0x2d0>
  81fd48:	0023883a 	mov	r17,zero
  81fd4c:	182f883a 	mov	r23,r3
  81fd50:	0025883a 	mov	r18,zero
  81fd54:	003fa806 	br	81fbf8 <_fpadd_parts+0xe8>
  81fd58:	a827883a 	mov	r19,r21
  81fd5c:	003fde06 	br	81fcd8 <_fpadd_parts+0x1c8>
  81fd60:	01800044 	movi	r6,1
  81fd64:	500497fa 	slli	r2,r10,31
  81fd68:	4808d07a 	srli	r4,r9,1
  81fd6c:	518ad83a 	srl	r5,r10,r6
  81fd70:	a2000217 	ldw	r8,8(r20)
  81fd74:	1108b03a 	or	r4,r2,r4
  81fd78:	0007883a 	mov	r3,zero
  81fd7c:	4984703a 	and	r2,r9,r6
  81fd80:	208cb03a 	or	r6,r4,r2
  81fd84:	28ceb03a 	or	r7,r5,r3
  81fd88:	42000044 	addi	r8,r8,1
  81fd8c:	a027883a 	mov	r19,r20
  81fd90:	a1c00415 	stw	r7,16(r20)
  81fd94:	a2000215 	stw	r8,8(r20)
  81fd98:	a1800315 	stw	r6,12(r20)
  81fd9c:	003fce06 	br	81fcd8 <_fpadd_parts+0x1c8>
  81fda0:	8bc5c83a 	sub	r2,r17,r15
  81fda4:	8889803a 	cmpltu	r4,r17,r2
  81fda8:	9407c83a 	sub	r3,r18,r16
  81fdac:	1909c83a 	sub	r4,r3,r4
  81fdb0:	100d883a 	mov	r6,r2
  81fdb4:	200f883a 	mov	r7,r4
  81fdb8:	003f9906 	br	81fc20 <_fpadd_parts+0x110>
  81fdbc:	7c45883a 	add	r2,r15,r17
  81fdc0:	13c9803a 	cmpltu	r4,r2,r15
  81fdc4:	8487883a 	add	r3,r16,r18
  81fdc8:	20c9883a 	add	r4,r4,r3
  81fdcc:	a1400115 	stw	r5,4(r20)
  81fdd0:	a5c00215 	stw	r23,8(r20)
  81fdd4:	a0800315 	stw	r2,12(r20)
  81fdd8:	a1000415 	stw	r4,16(r20)
  81fddc:	003fb606 	br	81fcb8 <_fpadd_parts+0x1a8>
  81fde0:	001f883a 	mov	r15,zero
  81fde4:	0021883a 	mov	r16,zero
  81fde8:	003f8306 	br	81fbf8 <_fpadd_parts+0xe8>
  81fdec:	018dc83a 	sub	r6,zero,r6
  81fdf0:	003f6706 	br	81fb90 <_fpadd_parts+0x80>
  81fdf4:	00bfff84 	movi	r2,-2
  81fdf8:	117faf36 	bltu	r2,r5,81fcb8 <_fpadd_parts+0x1a8>
  81fdfc:	003f9806 	br	81fc60 <_fpadd_parts+0x150>
  81fe00:	0005883a 	mov	r2,zero
  81fe04:	1189c83a 	sub	r4,r2,r6
  81fe08:	1105803a 	cmpltu	r2,r2,r4
  81fe0c:	01cbc83a 	sub	r5,zero,r7
  81fe10:	2885c83a 	sub	r2,r5,r2
  81fe14:	01800044 	movi	r6,1
  81fe18:	a1800115 	stw	r6,4(r20)
  81fe1c:	a5c00215 	stw	r23,8(r20)
  81fe20:	a1000315 	stw	r4,12(r20)
  81fe24:	a0800415 	stw	r2,16(r20)
  81fe28:	003f8206 	br	81fc34 <_fpadd_parts+0x124>
  81fe2c:	203f7226 	beq	r4,zero,81fbf8 <_fpadd_parts+0xe8>
  81fe30:	35bff804 	addi	r22,r6,-32
  81fe34:	b9af883a 	add	r23,r23,r6
  81fe38:	b0003116 	blt	r22,zero,81ff00 <_fpadd_parts+0x3f0>
  81fe3c:	959ad83a 	srl	r13,r18,r22
  81fe40:	001d883a 	mov	r14,zero
  81fe44:	000f883a 	mov	r7,zero
  81fe48:	01000044 	movi	r4,1
  81fe4c:	0011883a 	mov	r8,zero
  81fe50:	b0002516 	blt	r22,zero,81fee8 <_fpadd_parts+0x3d8>
  81fe54:	2594983a 	sll	r10,r4,r22
  81fe58:	0013883a 	mov	r9,zero
  81fe5c:	00bfffc4 	movi	r2,-1
  81fe60:	4889883a 	add	r4,r9,r2
  81fe64:	508b883a 	add	r5,r10,r2
  81fe68:	224d803a 	cmpltu	r6,r4,r9
  81fe6c:	314b883a 	add	r5,r6,r5
  81fe70:	8904703a 	and	r2,r17,r4
  81fe74:	9146703a 	and	r3,r18,r5
  81fe78:	10c4b03a 	or	r2,r2,r3
  81fe7c:	10000226 	beq	r2,zero,81fe88 <_fpadd_parts+0x378>
  81fe80:	01c00044 	movi	r7,1
  81fe84:	0011883a 	mov	r8,zero
  81fe88:	69e2b03a 	or	r17,r13,r7
  81fe8c:	7224b03a 	or	r18,r14,r8
  81fe90:	003f5906 	br	81fbf8 <_fpadd_parts+0xe8>
  81fe94:	8407883a 	add	r3,r16,r16
  81fe98:	008007c4 	movi	r2,31
  81fe9c:	1185c83a 	sub	r2,r2,r6
  81fea0:	1886983a 	sll	r3,r3,r2
  81fea4:	7996d83a 	srl	r11,r15,r6
  81fea8:	8198d83a 	srl	r12,r16,r6
  81feac:	1ad6b03a 	or	r11,r3,r11
  81feb0:	003f3e06 	br	81fbac <_fpadd_parts+0x9c>
  81feb4:	2006d07a 	srli	r3,r4,1
  81feb8:	008007c4 	movi	r2,31
  81febc:	1185c83a 	sub	r2,r2,r6
  81fec0:	1890d83a 	srl	r8,r3,r2
  81fec4:	218e983a 	sll	r7,r4,r6
  81fec8:	003f3e06 	br	81fbc4 <_fpadd_parts+0xb4>
  81fecc:	113f821e 	bne	r2,r4,81fcd8 <_fpadd_parts+0x1c8>
  81fed0:	28c00117 	ldw	r3,4(r5)
  81fed4:	98800117 	ldw	r2,4(r19)
  81fed8:	10ff7f26 	beq	r2,r3,81fcd8 <_fpadd_parts+0x1c8>
  81fedc:	04c02134 	movhi	r19,132
  81fee0:	9cfa3e04 	addi	r19,r19,-5896
  81fee4:	003f7c06 	br	81fcd8 <_fpadd_parts+0x1c8>
  81fee8:	2006d07a 	srli	r3,r4,1
  81feec:	008007c4 	movi	r2,31
  81fef0:	1185c83a 	sub	r2,r2,r6
  81fef4:	1894d83a 	srl	r10,r3,r2
  81fef8:	2192983a 	sll	r9,r4,r6
  81fefc:	003fd706 	br	81fe5c <_fpadd_parts+0x34c>
  81ff00:	9487883a 	add	r3,r18,r18
  81ff04:	008007c4 	movi	r2,31
  81ff08:	1185c83a 	sub	r2,r2,r6
  81ff0c:	1886983a 	sll	r3,r3,r2
  81ff10:	899ad83a 	srl	r13,r17,r6
  81ff14:	919cd83a 	srl	r14,r18,r6
  81ff18:	1b5ab03a 	or	r13,r3,r13
  81ff1c:	003fc906 	br	81fe44 <_fpadd_parts+0x334>

0081ff20 <__subdf3>:
  81ff20:	deffea04 	addi	sp,sp,-88
  81ff24:	dcc01415 	stw	r19,80(sp)
  81ff28:	dcc00404 	addi	r19,sp,16
  81ff2c:	2011883a 	mov	r8,r4
  81ff30:	2813883a 	mov	r9,r5
  81ff34:	dc401315 	stw	r17,76(sp)
  81ff38:	d809883a 	mov	r4,sp
  81ff3c:	980b883a 	mov	r5,r19
  81ff40:	dc400904 	addi	r17,sp,36
  81ff44:	dfc01515 	stw	ra,84(sp)
  81ff48:	da400115 	stw	r9,4(sp)
  81ff4c:	d9c00315 	stw	r7,12(sp)
  81ff50:	da000015 	stw	r8,0(sp)
  81ff54:	d9800215 	stw	r6,8(sp)
  81ff58:	08213400 	call	821340 <__unpack_d>
  81ff5c:	d9000204 	addi	r4,sp,8
  81ff60:	880b883a 	mov	r5,r17
  81ff64:	08213400 	call	821340 <__unpack_d>
  81ff68:	d8800a17 	ldw	r2,40(sp)
  81ff6c:	880b883a 	mov	r5,r17
  81ff70:	9809883a 	mov	r4,r19
  81ff74:	d9800e04 	addi	r6,sp,56
  81ff78:	1080005c 	xori	r2,r2,1
  81ff7c:	d8800a15 	stw	r2,40(sp)
  81ff80:	081fb100 	call	81fb10 <_fpadd_parts>
  81ff84:	1009883a 	mov	r4,r2
  81ff88:	082102c0 	call	82102c <__pack_d>
  81ff8c:	dfc01517 	ldw	ra,84(sp)
  81ff90:	dcc01417 	ldw	r19,80(sp)
  81ff94:	dc401317 	ldw	r17,76(sp)
  81ff98:	dec01604 	addi	sp,sp,88
  81ff9c:	f800283a 	ret

0081ffa0 <__adddf3>:
  81ffa0:	deffea04 	addi	sp,sp,-88
  81ffa4:	dcc01415 	stw	r19,80(sp)
  81ffa8:	dcc00404 	addi	r19,sp,16
  81ffac:	2011883a 	mov	r8,r4
  81ffb0:	2813883a 	mov	r9,r5
  81ffb4:	dc401315 	stw	r17,76(sp)
  81ffb8:	d809883a 	mov	r4,sp
  81ffbc:	980b883a 	mov	r5,r19
  81ffc0:	dc400904 	addi	r17,sp,36
  81ffc4:	dfc01515 	stw	ra,84(sp)
  81ffc8:	da400115 	stw	r9,4(sp)
  81ffcc:	d9c00315 	stw	r7,12(sp)
  81ffd0:	da000015 	stw	r8,0(sp)
  81ffd4:	d9800215 	stw	r6,8(sp)
  81ffd8:	08213400 	call	821340 <__unpack_d>
  81ffdc:	d9000204 	addi	r4,sp,8
  81ffe0:	880b883a 	mov	r5,r17
  81ffe4:	08213400 	call	821340 <__unpack_d>
  81ffe8:	d9800e04 	addi	r6,sp,56
  81ffec:	9809883a 	mov	r4,r19
  81fff0:	880b883a 	mov	r5,r17
  81fff4:	081fb100 	call	81fb10 <_fpadd_parts>
  81fff8:	1009883a 	mov	r4,r2
  81fffc:	082102c0 	call	82102c <__pack_d>
  820000:	dfc01517 	ldw	ra,84(sp)
  820004:	dcc01417 	ldw	r19,80(sp)
  820008:	dc401317 	ldw	r17,76(sp)
  82000c:	dec01604 	addi	sp,sp,88
  820010:	f800283a 	ret

00820014 <__muldf3>:
  820014:	deffe004 	addi	sp,sp,-128
  820018:	dc401815 	stw	r17,96(sp)
  82001c:	dc400404 	addi	r17,sp,16
  820020:	2011883a 	mov	r8,r4
  820024:	2813883a 	mov	r9,r5
  820028:	dc001715 	stw	r16,92(sp)
  82002c:	d809883a 	mov	r4,sp
  820030:	880b883a 	mov	r5,r17
  820034:	dc000904 	addi	r16,sp,36
  820038:	dfc01f15 	stw	ra,124(sp)
  82003c:	da400115 	stw	r9,4(sp)
  820040:	d9c00315 	stw	r7,12(sp)
  820044:	da000015 	stw	r8,0(sp)
  820048:	d9800215 	stw	r6,8(sp)
  82004c:	ddc01e15 	stw	r23,120(sp)
  820050:	dd801d15 	stw	r22,116(sp)
  820054:	dd401c15 	stw	r21,112(sp)
  820058:	dd001b15 	stw	r20,108(sp)
  82005c:	dcc01a15 	stw	r19,104(sp)
  820060:	dc801915 	stw	r18,100(sp)
  820064:	08213400 	call	821340 <__unpack_d>
  820068:	d9000204 	addi	r4,sp,8
  82006c:	800b883a 	mov	r5,r16
  820070:	08213400 	call	821340 <__unpack_d>
  820074:	d9000417 	ldw	r4,16(sp)
  820078:	00800044 	movi	r2,1
  82007c:	1100102e 	bgeu	r2,r4,8200c0 <__muldf3+0xac>
  820080:	d8c00917 	ldw	r3,36(sp)
  820084:	10c0062e 	bgeu	r2,r3,8200a0 <__muldf3+0x8c>
  820088:	00800104 	movi	r2,4
  82008c:	20800a26 	beq	r4,r2,8200b8 <__muldf3+0xa4>
  820090:	1880cc26 	beq	r3,r2,8203c4 <__muldf3+0x3b0>
  820094:	00800084 	movi	r2,2
  820098:	20800926 	beq	r4,r2,8200c0 <__muldf3+0xac>
  82009c:	1880191e 	bne	r3,r2,820104 <__muldf3+0xf0>
  8200a0:	d8c00a17 	ldw	r3,40(sp)
  8200a4:	d8800517 	ldw	r2,20(sp)
  8200a8:	8009883a 	mov	r4,r16
  8200ac:	10c4c03a 	cmpne	r2,r2,r3
  8200b0:	d8800a15 	stw	r2,40(sp)
  8200b4:	00000706 	br	8200d4 <__muldf3+0xc0>
  8200b8:	00800084 	movi	r2,2
  8200bc:	1880c326 	beq	r3,r2,8203cc <__muldf3+0x3b8>
  8200c0:	d8800517 	ldw	r2,20(sp)
  8200c4:	d8c00a17 	ldw	r3,40(sp)
  8200c8:	8809883a 	mov	r4,r17
  8200cc:	10c4c03a 	cmpne	r2,r2,r3
  8200d0:	d8800515 	stw	r2,20(sp)
  8200d4:	082102c0 	call	82102c <__pack_d>
  8200d8:	dfc01f17 	ldw	ra,124(sp)
  8200dc:	ddc01e17 	ldw	r23,120(sp)
  8200e0:	dd801d17 	ldw	r22,116(sp)
  8200e4:	dd401c17 	ldw	r21,112(sp)
  8200e8:	dd001b17 	ldw	r20,108(sp)
  8200ec:	dcc01a17 	ldw	r19,104(sp)
  8200f0:	dc801917 	ldw	r18,100(sp)
  8200f4:	dc401817 	ldw	r17,96(sp)
  8200f8:	dc001717 	ldw	r16,92(sp)
  8200fc:	dec02004 	addi	sp,sp,128
  820100:	f800283a 	ret
  820104:	dd800717 	ldw	r22,28(sp)
  820108:	dc800c17 	ldw	r18,48(sp)
  82010c:	002b883a 	mov	r21,zero
  820110:	0023883a 	mov	r17,zero
  820114:	a80b883a 	mov	r5,r21
  820118:	b00d883a 	mov	r6,r22
  82011c:	880f883a 	mov	r7,r17
  820120:	ddc00817 	ldw	r23,32(sp)
  820124:	dcc00d17 	ldw	r19,52(sp)
  820128:	9009883a 	mov	r4,r18
  82012c:	0820c180 	call	820c18 <__muldi3>
  820130:	001b883a 	mov	r13,zero
  820134:	680f883a 	mov	r7,r13
  820138:	b009883a 	mov	r4,r22
  82013c:	000b883a 	mov	r5,zero
  820140:	980d883a 	mov	r6,r19
  820144:	b82d883a 	mov	r22,r23
  820148:	002f883a 	mov	r23,zero
  82014c:	db401615 	stw	r13,88(sp)
  820150:	d8801315 	stw	r2,76(sp)
  820154:	d8c01415 	stw	r3,80(sp)
  820158:	dcc01515 	stw	r19,84(sp)
  82015c:	0820c180 	call	820c18 <__muldi3>
  820160:	b00d883a 	mov	r6,r22
  820164:	000b883a 	mov	r5,zero
  820168:	9009883a 	mov	r4,r18
  82016c:	b80f883a 	mov	r7,r23
  820170:	1021883a 	mov	r16,r2
  820174:	1823883a 	mov	r17,r3
  820178:	0820c180 	call	820c18 <__muldi3>
  82017c:	8085883a 	add	r2,r16,r2
  820180:	140d803a 	cmpltu	r6,r2,r16
  820184:	88c7883a 	add	r3,r17,r3
  820188:	30cd883a 	add	r6,r6,r3
  82018c:	1029883a 	mov	r20,r2
  820190:	302b883a 	mov	r21,r6
  820194:	da801317 	ldw	r10,76(sp)
  820198:	dac01417 	ldw	r11,80(sp)
  82019c:	db001517 	ldw	r12,84(sp)
  8201a0:	db401617 	ldw	r13,88(sp)
  8201a4:	3440612e 	bgeu	r6,r17,82032c <__muldf3+0x318>
  8201a8:	0009883a 	mov	r4,zero
  8201ac:	5105883a 	add	r2,r10,r4
  8201b0:	128d803a 	cmpltu	r6,r2,r10
  8201b4:	5d07883a 	add	r3,r11,r20
  8201b8:	30cd883a 	add	r6,r6,r3
  8201bc:	0021883a 	mov	r16,zero
  8201c0:	04400044 	movi	r17,1
  8201c4:	1025883a 	mov	r18,r2
  8201c8:	3027883a 	mov	r19,r6
  8201cc:	32c06236 	bltu	r6,r11,820358 <__muldf3+0x344>
  8201d0:	59807a26 	beq	r11,r6,8203bc <__muldf3+0x3a8>
  8201d4:	680b883a 	mov	r5,r13
  8201d8:	b80f883a 	mov	r7,r23
  8201dc:	6009883a 	mov	r4,r12
  8201e0:	b00d883a 	mov	r6,r22
  8201e4:	0820c180 	call	820c18 <__muldi3>
  8201e8:	1009883a 	mov	r4,r2
  8201ec:	000f883a 	mov	r7,zero
  8201f0:	1545883a 	add	r2,r2,r21
  8201f4:	1111803a 	cmpltu	r8,r2,r4
  8201f8:	19c7883a 	add	r3,r3,r7
  8201fc:	40c7883a 	add	r3,r8,r3
  820200:	88cb883a 	add	r5,r17,r3
  820204:	d8c00617 	ldw	r3,24(sp)
  820208:	8089883a 	add	r4,r16,r2
  82020c:	d8800b17 	ldw	r2,44(sp)
  820210:	18c00104 	addi	r3,r3,4
  820214:	240d803a 	cmpltu	r6,r4,r16
  820218:	10c7883a 	add	r3,r2,r3
  82021c:	2013883a 	mov	r9,r4
  820220:	d8800a17 	ldw	r2,40(sp)
  820224:	d9000517 	ldw	r4,20(sp)
  820228:	314d883a 	add	r6,r6,r5
  82022c:	3015883a 	mov	r10,r6
  820230:	2088c03a 	cmpne	r4,r4,r2
  820234:	00880034 	movhi	r2,8192
  820238:	10bfffc4 	addi	r2,r2,-1
  82023c:	d9000f15 	stw	r4,60(sp)
  820240:	d8c01015 	stw	r3,64(sp)
  820244:	1180162e 	bgeu	r2,r6,8202a0 <__muldf3+0x28c>
  820248:	1811883a 	mov	r8,r3
  82024c:	101f883a 	mov	r15,r2
  820250:	980497fa 	slli	r2,r19,31
  820254:	9016d07a 	srli	r11,r18,1
  820258:	500697fa 	slli	r3,r10,31
  82025c:	480cd07a 	srli	r6,r9,1
  820260:	500ed07a 	srli	r7,r10,1
  820264:	12d6b03a 	or	r11,r2,r11
  820268:	00800044 	movi	r2,1
  82026c:	198cb03a 	or	r6,r3,r6
  820270:	4888703a 	and	r4,r9,r2
  820274:	9818d07a 	srli	r12,r19,1
  820278:	001b883a 	mov	r13,zero
  82027c:	03a00034 	movhi	r14,32768
  820280:	3013883a 	mov	r9,r6
  820284:	3815883a 	mov	r10,r7
  820288:	4091883a 	add	r8,r8,r2
  82028c:	20000226 	beq	r4,zero,820298 <__muldf3+0x284>
  820290:	5b64b03a 	or	r18,r11,r13
  820294:	63a6b03a 	or	r19,r12,r14
  820298:	7abfed36 	bltu	r15,r10,820250 <__muldf3+0x23c>
  82029c:	da001015 	stw	r8,64(sp)
  8202a0:	00840034 	movhi	r2,4096
  8202a4:	10bfffc4 	addi	r2,r2,-1
  8202a8:	12801436 	bltu	r2,r10,8202fc <__muldf3+0x2e8>
  8202ac:	da001017 	ldw	r8,64(sp)
  8202b0:	101f883a 	mov	r15,r2
  8202b4:	4a45883a 	add	r2,r9,r9
  8202b8:	124d803a 	cmpltu	r6,r2,r9
  8202bc:	5287883a 	add	r3,r10,r10
  8202c0:	9497883a 	add	r11,r18,r18
  8202c4:	5c8f803a 	cmpltu	r7,r11,r18
  8202c8:	9cd9883a 	add	r12,r19,r19
  8202cc:	01000044 	movi	r4,1
  8202d0:	30cd883a 	add	r6,r6,r3
  8202d4:	3b0f883a 	add	r7,r7,r12
  8202d8:	423fffc4 	addi	r8,r8,-1
  8202dc:	1013883a 	mov	r9,r2
  8202e0:	3015883a 	mov	r10,r6
  8202e4:	111ab03a 	or	r13,r2,r4
  8202e8:	98003016 	blt	r19,zero,8203ac <__muldf3+0x398>
  8202ec:	5825883a 	mov	r18,r11
  8202f0:	3827883a 	mov	r19,r7
  8202f4:	7abfef2e 	bgeu	r15,r10,8202b4 <__muldf3+0x2a0>
  8202f8:	da001015 	stw	r8,64(sp)
  8202fc:	00803fc4 	movi	r2,255
  820300:	488e703a 	and	r7,r9,r2
  820304:	00802004 	movi	r2,128
  820308:	0007883a 	mov	r3,zero
  82030c:	0011883a 	mov	r8,zero
  820310:	38801826 	beq	r7,r2,820374 <__muldf3+0x360>
  820314:	008000c4 	movi	r2,3
  820318:	d9000e04 	addi	r4,sp,56
  82031c:	da801215 	stw	r10,72(sp)
  820320:	d8800e15 	stw	r2,56(sp)
  820324:	da401115 	stw	r9,68(sp)
  820328:	003f6a06 	br	8200d4 <__muldf3+0xc0>
  82032c:	89802126 	beq	r17,r6,8203b4 <__muldf3+0x3a0>
  820330:	0009883a 	mov	r4,zero
  820334:	5105883a 	add	r2,r10,r4
  820338:	128d803a 	cmpltu	r6,r2,r10
  82033c:	5d07883a 	add	r3,r11,r20
  820340:	30cd883a 	add	r6,r6,r3
  820344:	0021883a 	mov	r16,zero
  820348:	0023883a 	mov	r17,zero
  82034c:	1025883a 	mov	r18,r2
  820350:	3027883a 	mov	r19,r6
  820354:	32ff9e2e 	bgeu	r6,r11,8201d0 <__muldf3+0x1bc>
  820358:	00800044 	movi	r2,1
  82035c:	8089883a 	add	r4,r16,r2
  820360:	240d803a 	cmpltu	r6,r4,r16
  820364:	344d883a 	add	r6,r6,r17
  820368:	2021883a 	mov	r16,r4
  82036c:	3023883a 	mov	r17,r6
  820370:	003f9806 	br	8201d4 <__muldf3+0x1c0>
  820374:	403fe71e 	bne	r8,zero,820314 <__muldf3+0x300>
  820378:	01004004 	movi	r4,256
  82037c:	4904703a 	and	r2,r9,r4
  820380:	10c4b03a 	or	r2,r2,r3
  820384:	103fe31e 	bne	r2,zero,820314 <__muldf3+0x300>
  820388:	94c4b03a 	or	r2,r18,r19
  82038c:	103fe126 	beq	r2,zero,820314 <__muldf3+0x300>
  820390:	49c5883a 	add	r2,r9,r7
  820394:	1251803a 	cmpltu	r8,r2,r9
  820398:	4291883a 	add	r8,r8,r10
  82039c:	013fc004 	movi	r4,-256
  8203a0:	1112703a 	and	r9,r2,r4
  8203a4:	4015883a 	mov	r10,r8
  8203a8:	003fda06 	br	820314 <__muldf3+0x300>
  8203ac:	6813883a 	mov	r9,r13
  8203b0:	003fce06 	br	8202ec <__muldf3+0x2d8>
  8203b4:	143f7c36 	bltu	r2,r16,8201a8 <__muldf3+0x194>
  8203b8:	003fdd06 	br	820330 <__muldf3+0x31c>
  8203bc:	12bf852e 	bgeu	r2,r10,8201d4 <__muldf3+0x1c0>
  8203c0:	003fe506 	br	820358 <__muldf3+0x344>
  8203c4:	00800084 	movi	r2,2
  8203c8:	20bf351e 	bne	r4,r2,8200a0 <__muldf3+0x8c>
  8203cc:	01002134 	movhi	r4,132
  8203d0:	213a3e04 	addi	r4,r4,-5896
  8203d4:	003f3f06 	br	8200d4 <__muldf3+0xc0>

008203d8 <__divdf3>:
  8203d8:	deffed04 	addi	sp,sp,-76
  8203dc:	dcc01115 	stw	r19,68(sp)
  8203e0:	dcc00404 	addi	r19,sp,16
  8203e4:	2011883a 	mov	r8,r4
  8203e8:	2813883a 	mov	r9,r5
  8203ec:	dc000e15 	stw	r16,56(sp)
  8203f0:	d809883a 	mov	r4,sp
  8203f4:	980b883a 	mov	r5,r19
  8203f8:	dc000904 	addi	r16,sp,36
  8203fc:	dfc01215 	stw	ra,72(sp)
  820400:	da400115 	stw	r9,4(sp)
  820404:	d9c00315 	stw	r7,12(sp)
  820408:	da000015 	stw	r8,0(sp)
  82040c:	d9800215 	stw	r6,8(sp)
  820410:	dc801015 	stw	r18,64(sp)
  820414:	dc400f15 	stw	r17,60(sp)
  820418:	08213400 	call	821340 <__unpack_d>
  82041c:	d9000204 	addi	r4,sp,8
  820420:	800b883a 	mov	r5,r16
  820424:	08213400 	call	821340 <__unpack_d>
  820428:	d9000417 	ldw	r4,16(sp)
  82042c:	00800044 	movi	r2,1
  820430:	11000b2e 	bgeu	r2,r4,820460 <__divdf3+0x88>
  820434:	d9400917 	ldw	r5,36(sp)
  820438:	1140762e 	bgeu	r2,r5,820614 <__divdf3+0x23c>
  82043c:	d8800517 	ldw	r2,20(sp)
  820440:	d8c00a17 	ldw	r3,40(sp)
  820444:	01800104 	movi	r6,4
  820448:	10c4f03a 	xor	r2,r2,r3
  82044c:	d8800515 	stw	r2,20(sp)
  820450:	21800226 	beq	r4,r6,82045c <__divdf3+0x84>
  820454:	00800084 	movi	r2,2
  820458:	2080141e 	bne	r4,r2,8204ac <__divdf3+0xd4>
  82045c:	29000926 	beq	r5,r4,820484 <__divdf3+0xac>
  820460:	9809883a 	mov	r4,r19
  820464:	082102c0 	call	82102c <__pack_d>
  820468:	dfc01217 	ldw	ra,72(sp)
  82046c:	dcc01117 	ldw	r19,68(sp)
  820470:	dc801017 	ldw	r18,64(sp)
  820474:	dc400f17 	ldw	r17,60(sp)
  820478:	dc000e17 	ldw	r16,56(sp)
  82047c:	dec01304 	addi	sp,sp,76
  820480:	f800283a 	ret
  820484:	01002134 	movhi	r4,132
  820488:	213a3e04 	addi	r4,r4,-5896
  82048c:	082102c0 	call	82102c <__pack_d>
  820490:	dfc01217 	ldw	ra,72(sp)
  820494:	dcc01117 	ldw	r19,68(sp)
  820498:	dc801017 	ldw	r18,64(sp)
  82049c:	dc400f17 	ldw	r17,60(sp)
  8204a0:	dc000e17 	ldw	r16,56(sp)
  8204a4:	dec01304 	addi	sp,sp,76
  8204a8:	f800283a 	ret
  8204ac:	29805b26 	beq	r5,r6,82061c <__divdf3+0x244>
  8204b0:	28802d26 	beq	r5,r2,820568 <__divdf3+0x190>
  8204b4:	d8c00617 	ldw	r3,24(sp)
  8204b8:	d8800b17 	ldw	r2,44(sp)
  8204bc:	d9c00817 	ldw	r7,32(sp)
  8204c0:	dc400d17 	ldw	r17,52(sp)
  8204c4:	188bc83a 	sub	r5,r3,r2
  8204c8:	d9800717 	ldw	r6,28(sp)
  8204cc:	dc000c17 	ldw	r16,48(sp)
  8204d0:	d9400615 	stw	r5,24(sp)
  8204d4:	3c403836 	bltu	r7,r17,8205b8 <__divdf3+0x1e0>
  8204d8:	89c03626 	beq	r17,r7,8205b4 <__divdf3+0x1dc>
  8204dc:	0015883a 	mov	r10,zero
  8204e0:	001d883a 	mov	r14,zero
  8204e4:	02c40034 	movhi	r11,4096
  8204e8:	001f883a 	mov	r15,zero
  8204ec:	003f883a 	mov	ra,zero
  8204f0:	04800f44 	movi	r18,61
  8204f4:	00000f06 	br	820534 <__divdf3+0x15c>
  8204f8:	601d883a 	mov	r14,r12
  8204fc:	681f883a 	mov	r15,r13
  820500:	400d883a 	mov	r6,r8
  820504:	100f883a 	mov	r7,r2
  820508:	3191883a 	add	r8,r6,r6
  82050c:	5808d07a 	srli	r4,r11,1
  820510:	4185803a 	cmpltu	r2,r8,r6
  820514:	39d3883a 	add	r9,r7,r7
  820518:	28c6b03a 	or	r3,r5,r3
  82051c:	1245883a 	add	r2,r2,r9
  820520:	1815883a 	mov	r10,r3
  820524:	2017883a 	mov	r11,r4
  820528:	400d883a 	mov	r6,r8
  82052c:	100f883a 	mov	r7,r2
  820530:	fc801726 	beq	ra,r18,820590 <__divdf3+0x1b8>
  820534:	580a97fa 	slli	r5,r11,31
  820538:	5006d07a 	srli	r3,r10,1
  82053c:	ffc00044 	addi	ra,ra,1
  820540:	3c7ff136 	bltu	r7,r17,820508 <__divdf3+0x130>
  820544:	3411c83a 	sub	r8,r6,r16
  820548:	3205803a 	cmpltu	r2,r6,r8
  82054c:	3c53c83a 	sub	r9,r7,r17
  820550:	7298b03a 	or	r12,r14,r10
  820554:	7adab03a 	or	r13,r15,r11
  820558:	4885c83a 	sub	r2,r9,r2
  82055c:	89ffe61e 	bne	r17,r7,8204f8 <__divdf3+0x120>
  820560:	343fe936 	bltu	r6,r16,820508 <__divdf3+0x130>
  820564:	003fe406 	br	8204f8 <__divdf3+0x120>
  820568:	9809883a 	mov	r4,r19
  82056c:	d9800415 	stw	r6,16(sp)
  820570:	082102c0 	call	82102c <__pack_d>
  820574:	dfc01217 	ldw	ra,72(sp)
  820578:	dcc01117 	ldw	r19,68(sp)
  82057c:	dc801017 	ldw	r18,64(sp)
  820580:	dc400f17 	ldw	r17,60(sp)
  820584:	dc000e17 	ldw	r16,56(sp)
  820588:	dec01304 	addi	sp,sp,76
  82058c:	f800283a 	ret
  820590:	00803fc4 	movi	r2,255
  820594:	7090703a 	and	r8,r14,r2
  820598:	00802004 	movi	r2,128
  82059c:	0007883a 	mov	r3,zero
  8205a0:	0013883a 	mov	r9,zero
  8205a4:	40800d26 	beq	r8,r2,8205dc <__divdf3+0x204>
  8205a8:	dbc00815 	stw	r15,32(sp)
  8205ac:	db800715 	stw	r14,28(sp)
  8205b0:	003fab06 	br	820460 <__divdf3+0x88>
  8205b4:	343fc92e 	bgeu	r6,r16,8204dc <__divdf3+0x104>
  8205b8:	3185883a 	add	r2,r6,r6
  8205bc:	1189803a 	cmpltu	r4,r2,r6
  8205c0:	39c7883a 	add	r3,r7,r7
  8205c4:	20c9883a 	add	r4,r4,r3
  8205c8:	297fffc4 	addi	r5,r5,-1
  8205cc:	100d883a 	mov	r6,r2
  8205d0:	200f883a 	mov	r7,r4
  8205d4:	d9400615 	stw	r5,24(sp)
  8205d8:	003fc006 	br	8204dc <__divdf3+0x104>
  8205dc:	483ff21e 	bne	r9,zero,8205a8 <__divdf3+0x1d0>
  8205e0:	01004004 	movi	r4,256
  8205e4:	7104703a 	and	r2,r14,r4
  8205e8:	10c4b03a 	or	r2,r2,r3
  8205ec:	103fee1e 	bne	r2,zero,8205a8 <__divdf3+0x1d0>
  8205f0:	31c4b03a 	or	r2,r6,r7
  8205f4:	103fec26 	beq	r2,zero,8205a8 <__divdf3+0x1d0>
  8205f8:	7205883a 	add	r2,r14,r8
  8205fc:	1391803a 	cmpltu	r8,r2,r14
  820600:	43d1883a 	add	r8,r8,r15
  820604:	013fc004 	movi	r4,-256
  820608:	111c703a 	and	r14,r2,r4
  82060c:	401f883a 	mov	r15,r8
  820610:	003fe506 	br	8205a8 <__divdf3+0x1d0>
  820614:	8009883a 	mov	r4,r16
  820618:	003f9206 	br	820464 <__divdf3+0x8c>
  82061c:	9809883a 	mov	r4,r19
  820620:	d8000715 	stw	zero,28(sp)
  820624:	d8000815 	stw	zero,32(sp)
  820628:	d8000615 	stw	zero,24(sp)
  82062c:	003f8d06 	br	820464 <__divdf3+0x8c>

00820630 <__eqdf2>:
  820630:	deffef04 	addi	sp,sp,-68
  820634:	dc400f15 	stw	r17,60(sp)
  820638:	dc400404 	addi	r17,sp,16
  82063c:	2005883a 	mov	r2,r4
  820640:	2807883a 	mov	r3,r5
  820644:	dc000e15 	stw	r16,56(sp)
  820648:	d809883a 	mov	r4,sp
  82064c:	880b883a 	mov	r5,r17
  820650:	dc000904 	addi	r16,sp,36
  820654:	d8c00115 	stw	r3,4(sp)
  820658:	d8800015 	stw	r2,0(sp)
  82065c:	d9800215 	stw	r6,8(sp)
  820660:	dfc01015 	stw	ra,64(sp)
  820664:	d9c00315 	stw	r7,12(sp)
  820668:	08213400 	call	821340 <__unpack_d>
  82066c:	d9000204 	addi	r4,sp,8
  820670:	800b883a 	mov	r5,r16
  820674:	08213400 	call	821340 <__unpack_d>
  820678:	d8800417 	ldw	r2,16(sp)
  82067c:	00c00044 	movi	r3,1
  820680:	180d883a 	mov	r6,r3
  820684:	1880062e 	bgeu	r3,r2,8206a0 <__eqdf2+0x70>
  820688:	d8800917 	ldw	r2,36(sp)
  82068c:	8809883a 	mov	r4,r17
  820690:	800b883a 	mov	r5,r16
  820694:	1880022e 	bgeu	r3,r2,8206a0 <__eqdf2+0x70>
  820698:	08214780 	call	821478 <__fpcmp_parts_d>
  82069c:	100d883a 	mov	r6,r2
  8206a0:	3005883a 	mov	r2,r6
  8206a4:	dfc01017 	ldw	ra,64(sp)
  8206a8:	dc400f17 	ldw	r17,60(sp)
  8206ac:	dc000e17 	ldw	r16,56(sp)
  8206b0:	dec01104 	addi	sp,sp,68
  8206b4:	f800283a 	ret

008206b8 <__gtdf2>:
  8206b8:	deffef04 	addi	sp,sp,-68
  8206bc:	dc400f15 	stw	r17,60(sp)
  8206c0:	dc400404 	addi	r17,sp,16
  8206c4:	2005883a 	mov	r2,r4
  8206c8:	2807883a 	mov	r3,r5
  8206cc:	dc000e15 	stw	r16,56(sp)
  8206d0:	d809883a 	mov	r4,sp
  8206d4:	880b883a 	mov	r5,r17
  8206d8:	dc000904 	addi	r16,sp,36
  8206dc:	d8c00115 	stw	r3,4(sp)
  8206e0:	d8800015 	stw	r2,0(sp)
  8206e4:	d9800215 	stw	r6,8(sp)
  8206e8:	dfc01015 	stw	ra,64(sp)
  8206ec:	d9c00315 	stw	r7,12(sp)
  8206f0:	08213400 	call	821340 <__unpack_d>
  8206f4:	d9000204 	addi	r4,sp,8
  8206f8:	800b883a 	mov	r5,r16
  8206fc:	08213400 	call	821340 <__unpack_d>
  820700:	d8800417 	ldw	r2,16(sp)
  820704:	00c00044 	movi	r3,1
  820708:	01bfffc4 	movi	r6,-1
  82070c:	1880062e 	bgeu	r3,r2,820728 <__gtdf2+0x70>
  820710:	d8800917 	ldw	r2,36(sp)
  820714:	8809883a 	mov	r4,r17
  820718:	800b883a 	mov	r5,r16
  82071c:	1880022e 	bgeu	r3,r2,820728 <__gtdf2+0x70>
  820720:	08214780 	call	821478 <__fpcmp_parts_d>
  820724:	100d883a 	mov	r6,r2
  820728:	3005883a 	mov	r2,r6
  82072c:	dfc01017 	ldw	ra,64(sp)
  820730:	dc400f17 	ldw	r17,60(sp)
  820734:	dc000e17 	ldw	r16,56(sp)
  820738:	dec01104 	addi	sp,sp,68
  82073c:	f800283a 	ret

00820740 <__gedf2>:
  820740:	deffef04 	addi	sp,sp,-68
  820744:	dc400f15 	stw	r17,60(sp)
  820748:	dc400404 	addi	r17,sp,16
  82074c:	2005883a 	mov	r2,r4
  820750:	2807883a 	mov	r3,r5
  820754:	dc000e15 	stw	r16,56(sp)
  820758:	d809883a 	mov	r4,sp
  82075c:	880b883a 	mov	r5,r17
  820760:	dc000904 	addi	r16,sp,36
  820764:	d8c00115 	stw	r3,4(sp)
  820768:	d8800015 	stw	r2,0(sp)
  82076c:	d9800215 	stw	r6,8(sp)
  820770:	dfc01015 	stw	ra,64(sp)
  820774:	d9c00315 	stw	r7,12(sp)
  820778:	08213400 	call	821340 <__unpack_d>
  82077c:	d9000204 	addi	r4,sp,8
  820780:	800b883a 	mov	r5,r16
  820784:	08213400 	call	821340 <__unpack_d>
  820788:	d8800417 	ldw	r2,16(sp)
  82078c:	00c00044 	movi	r3,1
  820790:	01bfffc4 	movi	r6,-1
  820794:	1880062e 	bgeu	r3,r2,8207b0 <__gedf2+0x70>
  820798:	d8800917 	ldw	r2,36(sp)
  82079c:	8809883a 	mov	r4,r17
  8207a0:	800b883a 	mov	r5,r16
  8207a4:	1880022e 	bgeu	r3,r2,8207b0 <__gedf2+0x70>
  8207a8:	08214780 	call	821478 <__fpcmp_parts_d>
  8207ac:	100d883a 	mov	r6,r2
  8207b0:	3005883a 	mov	r2,r6
  8207b4:	dfc01017 	ldw	ra,64(sp)
  8207b8:	dc400f17 	ldw	r17,60(sp)
  8207bc:	dc000e17 	ldw	r16,56(sp)
  8207c0:	dec01104 	addi	sp,sp,68
  8207c4:	f800283a 	ret

008207c8 <__ltdf2>:
  8207c8:	deffef04 	addi	sp,sp,-68
  8207cc:	dc400f15 	stw	r17,60(sp)
  8207d0:	dc400404 	addi	r17,sp,16
  8207d4:	2005883a 	mov	r2,r4
  8207d8:	2807883a 	mov	r3,r5
  8207dc:	dc000e15 	stw	r16,56(sp)
  8207e0:	d809883a 	mov	r4,sp
  8207e4:	880b883a 	mov	r5,r17
  8207e8:	dc000904 	addi	r16,sp,36
  8207ec:	d8c00115 	stw	r3,4(sp)
  8207f0:	d8800015 	stw	r2,0(sp)
  8207f4:	d9800215 	stw	r6,8(sp)
  8207f8:	dfc01015 	stw	ra,64(sp)
  8207fc:	d9c00315 	stw	r7,12(sp)
  820800:	08213400 	call	821340 <__unpack_d>
  820804:	d9000204 	addi	r4,sp,8
  820808:	800b883a 	mov	r5,r16
  82080c:	08213400 	call	821340 <__unpack_d>
  820810:	d8800417 	ldw	r2,16(sp)
  820814:	00c00044 	movi	r3,1
  820818:	180d883a 	mov	r6,r3
  82081c:	1880062e 	bgeu	r3,r2,820838 <__ltdf2+0x70>
  820820:	d8800917 	ldw	r2,36(sp)
  820824:	8809883a 	mov	r4,r17
  820828:	800b883a 	mov	r5,r16
  82082c:	1880022e 	bgeu	r3,r2,820838 <__ltdf2+0x70>
  820830:	08214780 	call	821478 <__fpcmp_parts_d>
  820834:	100d883a 	mov	r6,r2
  820838:	3005883a 	mov	r2,r6
  82083c:	dfc01017 	ldw	ra,64(sp)
  820840:	dc400f17 	ldw	r17,60(sp)
  820844:	dc000e17 	ldw	r16,56(sp)
  820848:	dec01104 	addi	sp,sp,68
  82084c:	f800283a 	ret

00820850 <__floatsidf>:
  820850:	2006d7fa 	srli	r3,r4,31
  820854:	defff604 	addi	sp,sp,-40
  820858:	008000c4 	movi	r2,3
  82085c:	dfc00915 	stw	ra,36(sp)
  820860:	dcc00815 	stw	r19,32(sp)
  820864:	dc800715 	stw	r18,28(sp)
  820868:	dc400615 	stw	r17,24(sp)
  82086c:	dc000515 	stw	r16,20(sp)
  820870:	d8800015 	stw	r2,0(sp)
  820874:	d8c00115 	stw	r3,4(sp)
  820878:	20000f1e 	bne	r4,zero,8208b8 <__floatsidf+0x68>
  82087c:	00800084 	movi	r2,2
  820880:	d8800015 	stw	r2,0(sp)
  820884:	d809883a 	mov	r4,sp
  820888:	082102c0 	call	82102c <__pack_d>
  82088c:	1009883a 	mov	r4,r2
  820890:	180b883a 	mov	r5,r3
  820894:	2005883a 	mov	r2,r4
  820898:	2807883a 	mov	r3,r5
  82089c:	dfc00917 	ldw	ra,36(sp)
  8208a0:	dcc00817 	ldw	r19,32(sp)
  8208a4:	dc800717 	ldw	r18,28(sp)
  8208a8:	dc400617 	ldw	r17,24(sp)
  8208ac:	dc000517 	ldw	r16,20(sp)
  8208b0:	dec00a04 	addi	sp,sp,40
  8208b4:	f800283a 	ret
  8208b8:	00800f04 	movi	r2,60
  8208bc:	1807003a 	cmpeq	r3,r3,zero
  8208c0:	d8800215 	stw	r2,8(sp)
  8208c4:	18001126 	beq	r3,zero,82090c <__floatsidf+0xbc>
  8208c8:	0027883a 	mov	r19,zero
  8208cc:	2025883a 	mov	r18,r4
  8208d0:	d9000315 	stw	r4,12(sp)
  8208d4:	dcc00415 	stw	r19,16(sp)
  8208d8:	0820cb00 	call	820cb0 <__clzsi2>
  8208dc:	11000744 	addi	r4,r2,29
  8208e0:	013fe80e 	bge	zero,r4,820884 <__floatsidf+0x34>
  8208e4:	10bfff44 	addi	r2,r2,-3
  8208e8:	10000c16 	blt	r2,zero,82091c <__floatsidf+0xcc>
  8208ec:	90a2983a 	sll	r17,r18,r2
  8208f0:	0021883a 	mov	r16,zero
  8208f4:	d8800217 	ldw	r2,8(sp)
  8208f8:	dc400415 	stw	r17,16(sp)
  8208fc:	dc000315 	stw	r16,12(sp)
  820900:	1105c83a 	sub	r2,r2,r4
  820904:	d8800215 	stw	r2,8(sp)
  820908:	003fde06 	br	820884 <__floatsidf+0x34>
  82090c:	00a00034 	movhi	r2,32768
  820910:	20800a26 	beq	r4,r2,82093c <__floatsidf+0xec>
  820914:	0109c83a 	sub	r4,zero,r4
  820918:	003feb06 	br	8208c8 <__floatsidf+0x78>
  82091c:	9006d07a 	srli	r3,r18,1
  820920:	008007c4 	movi	r2,31
  820924:	1105c83a 	sub	r2,r2,r4
  820928:	1886d83a 	srl	r3,r3,r2
  82092c:	9922983a 	sll	r17,r19,r4
  820930:	9120983a 	sll	r16,r18,r4
  820934:	1c62b03a 	or	r17,r3,r17
  820938:	003fee06 	br	8208f4 <__floatsidf+0xa4>
  82093c:	0009883a 	mov	r4,zero
  820940:	01707834 	movhi	r5,49632
  820944:	003fd306 	br	820894 <__floatsidf+0x44>

00820948 <__fixdfsi>:
  820948:	defff804 	addi	sp,sp,-32
  82094c:	2005883a 	mov	r2,r4
  820950:	2807883a 	mov	r3,r5
  820954:	d809883a 	mov	r4,sp
  820958:	d9400204 	addi	r5,sp,8
  82095c:	d8c00115 	stw	r3,4(sp)
  820960:	d8800015 	stw	r2,0(sp)
  820964:	dfc00715 	stw	ra,28(sp)
  820968:	08213400 	call	821340 <__unpack_d>
  82096c:	d8c00217 	ldw	r3,8(sp)
  820970:	00800084 	movi	r2,2
  820974:	1880051e 	bne	r3,r2,82098c <__fixdfsi+0x44>
  820978:	0007883a 	mov	r3,zero
  82097c:	1805883a 	mov	r2,r3
  820980:	dfc00717 	ldw	ra,28(sp)
  820984:	dec00804 	addi	sp,sp,32
  820988:	f800283a 	ret
  82098c:	00800044 	movi	r2,1
  820990:	10fff92e 	bgeu	r2,r3,820978 <__fixdfsi+0x30>
  820994:	00800104 	movi	r2,4
  820998:	18800426 	beq	r3,r2,8209ac <__fixdfsi+0x64>
  82099c:	d8c00417 	ldw	r3,16(sp)
  8209a0:	183ff516 	blt	r3,zero,820978 <__fixdfsi+0x30>
  8209a4:	00800784 	movi	r2,30
  8209a8:	10c0080e 	bge	r2,r3,8209cc <__fixdfsi+0x84>
  8209ac:	d8800317 	ldw	r2,12(sp)
  8209b0:	1000121e 	bne	r2,zero,8209fc <__fixdfsi+0xb4>
  8209b4:	00e00034 	movhi	r3,32768
  8209b8:	18ffffc4 	addi	r3,r3,-1
  8209bc:	1805883a 	mov	r2,r3
  8209c0:	dfc00717 	ldw	ra,28(sp)
  8209c4:	dec00804 	addi	sp,sp,32
  8209c8:	f800283a 	ret
  8209cc:	00800f04 	movi	r2,60
  8209d0:	10d1c83a 	sub	r8,r2,r3
  8209d4:	40bff804 	addi	r2,r8,-32
  8209d8:	d9800517 	ldw	r6,20(sp)
  8209dc:	d9c00617 	ldw	r7,24(sp)
  8209e0:	10000816 	blt	r2,zero,820a04 <__fixdfsi+0xbc>
  8209e4:	3888d83a 	srl	r4,r7,r2
  8209e8:	d8800317 	ldw	r2,12(sp)
  8209ec:	2007883a 	mov	r3,r4
  8209f0:	103fe226 	beq	r2,zero,82097c <__fixdfsi+0x34>
  8209f4:	0107c83a 	sub	r3,zero,r4
  8209f8:	003fe006 	br	82097c <__fixdfsi+0x34>
  8209fc:	00e00034 	movhi	r3,32768
  820a00:	003fde06 	br	82097c <__fixdfsi+0x34>
  820a04:	39c7883a 	add	r3,r7,r7
  820a08:	008007c4 	movi	r2,31
  820a0c:	1205c83a 	sub	r2,r2,r8
  820a10:	1886983a 	sll	r3,r3,r2
  820a14:	3208d83a 	srl	r4,r6,r8
  820a18:	1908b03a 	or	r4,r3,r4
  820a1c:	003ff206 	br	8209e8 <__fixdfsi+0xa0>

00820a20 <__make_dp>:
  820a20:	defff904 	addi	sp,sp,-28
  820a24:	d8c00717 	ldw	r3,28(sp)
  820a28:	d9000015 	stw	r4,0(sp)
  820a2c:	d809883a 	mov	r4,sp
  820a30:	dfc00515 	stw	ra,20(sp)
  820a34:	d9c00615 	stw	r7,24(sp)
  820a38:	d9400115 	stw	r5,4(sp)
  820a3c:	d9800215 	stw	r6,8(sp)
  820a40:	d8c00415 	stw	r3,16(sp)
  820a44:	d9c00315 	stw	r7,12(sp)
  820a48:	082102c0 	call	82102c <__pack_d>
  820a4c:	dfc00517 	ldw	ra,20(sp)
  820a50:	dec00704 	addi	sp,sp,28
  820a54:	f800283a 	ret

00820a58 <__truncdfsf2>:
  820a58:	defff804 	addi	sp,sp,-32
  820a5c:	2005883a 	mov	r2,r4
  820a60:	2807883a 	mov	r3,r5
  820a64:	d809883a 	mov	r4,sp
  820a68:	d9400204 	addi	r5,sp,8
  820a6c:	d8c00115 	stw	r3,4(sp)
  820a70:	d8800015 	stw	r2,0(sp)
  820a74:	dfc00715 	stw	ra,28(sp)
  820a78:	08213400 	call	821340 <__unpack_d>
  820a7c:	d9c00517 	ldw	r7,20(sp)
  820a80:	da000617 	ldw	r8,24(sp)
  820a84:	02d00034 	movhi	r11,16384
  820a88:	5affffc4 	addi	r11,r11,-1
  820a8c:	3812d7ba 	srli	r9,r7,30
  820a90:	401a90ba 	slli	r13,r8,2
  820a94:	3ac4703a 	and	r2,r7,r11
  820a98:	0007883a 	mov	r3,zero
  820a9c:	6a52b03a 	or	r9,r13,r9
  820aa0:	10c4b03a 	or	r2,r2,r3
  820aa4:	d9000217 	ldw	r4,8(sp)
  820aa8:	d9400317 	ldw	r5,12(sp)
  820aac:	d9800417 	ldw	r6,16(sp)
  820ab0:	480f883a 	mov	r7,r9
  820ab4:	10000126 	beq	r2,zero,820abc <__truncdfsf2+0x64>
  820ab8:	49c00054 	ori	r7,r9,1
  820abc:	08210000 	call	821000 <__make_fp>
  820ac0:	dfc00717 	ldw	ra,28(sp)
  820ac4:	dec00804 	addi	sp,sp,32
  820ac8:	f800283a 	ret

00820acc <udivmodsi4>:
  820acc:	29001b2e 	bgeu	r5,r4,820b3c <udivmodsi4+0x70>
  820ad0:	28001a16 	blt	r5,zero,820b3c <udivmodsi4+0x70>
  820ad4:	00800044 	movi	r2,1
  820ad8:	0007883a 	mov	r3,zero
  820adc:	01c007c4 	movi	r7,31
  820ae0:	00000306 	br	820af0 <udivmodsi4+0x24>
  820ae4:	19c01326 	beq	r3,r7,820b34 <udivmodsi4+0x68>
  820ae8:	18c00044 	addi	r3,r3,1
  820aec:	28000416 	blt	r5,zero,820b00 <udivmodsi4+0x34>
  820af0:	294b883a 	add	r5,r5,r5
  820af4:	1085883a 	add	r2,r2,r2
  820af8:	293ffa36 	bltu	r5,r4,820ae4 <udivmodsi4+0x18>
  820afc:	10000d26 	beq	r2,zero,820b34 <udivmodsi4+0x68>
  820b00:	0007883a 	mov	r3,zero
  820b04:	21400236 	bltu	r4,r5,820b10 <udivmodsi4+0x44>
  820b08:	2149c83a 	sub	r4,r4,r5
  820b0c:	1886b03a 	or	r3,r3,r2
  820b10:	1004d07a 	srli	r2,r2,1
  820b14:	280ad07a 	srli	r5,r5,1
  820b18:	103ffa1e 	bne	r2,zero,820b04 <udivmodsi4+0x38>
  820b1c:	30000226 	beq	r6,zero,820b28 <udivmodsi4+0x5c>
  820b20:	2005883a 	mov	r2,r4
  820b24:	f800283a 	ret
  820b28:	1809883a 	mov	r4,r3
  820b2c:	2005883a 	mov	r2,r4
  820b30:	f800283a 	ret
  820b34:	0007883a 	mov	r3,zero
  820b38:	003ff806 	br	820b1c <udivmodsi4+0x50>
  820b3c:	00800044 	movi	r2,1
  820b40:	0007883a 	mov	r3,zero
  820b44:	003fef06 	br	820b04 <udivmodsi4+0x38>

00820b48 <__divsi3>:
  820b48:	defffe04 	addi	sp,sp,-8
  820b4c:	dc000015 	stw	r16,0(sp)
  820b50:	dfc00115 	stw	ra,4(sp)
  820b54:	0021883a 	mov	r16,zero
  820b58:	20000c16 	blt	r4,zero,820b8c <__divsi3+0x44>
  820b5c:	000d883a 	mov	r6,zero
  820b60:	28000e16 	blt	r5,zero,820b9c <__divsi3+0x54>
  820b64:	0820acc0 	call	820acc <udivmodsi4>
  820b68:	1007883a 	mov	r3,r2
  820b6c:	8005003a 	cmpeq	r2,r16,zero
  820b70:	1000011e 	bne	r2,zero,820b78 <__divsi3+0x30>
  820b74:	00c7c83a 	sub	r3,zero,r3
  820b78:	1805883a 	mov	r2,r3
  820b7c:	dfc00117 	ldw	ra,4(sp)
  820b80:	dc000017 	ldw	r16,0(sp)
  820b84:	dec00204 	addi	sp,sp,8
  820b88:	f800283a 	ret
  820b8c:	0109c83a 	sub	r4,zero,r4
  820b90:	04000044 	movi	r16,1
  820b94:	000d883a 	mov	r6,zero
  820b98:	283ff20e 	bge	r5,zero,820b64 <__divsi3+0x1c>
  820b9c:	014bc83a 	sub	r5,zero,r5
  820ba0:	8021003a 	cmpeq	r16,r16,zero
  820ba4:	003fef06 	br	820b64 <__divsi3+0x1c>

00820ba8 <__modsi3>:
  820ba8:	deffff04 	addi	sp,sp,-4
  820bac:	dfc00015 	stw	ra,0(sp)
  820bb0:	01800044 	movi	r6,1
  820bb4:	2807883a 	mov	r3,r5
  820bb8:	20000416 	blt	r4,zero,820bcc <__modsi3+0x24>
  820bbc:	28000c16 	blt	r5,zero,820bf0 <__modsi3+0x48>
  820bc0:	dfc00017 	ldw	ra,0(sp)
  820bc4:	dec00104 	addi	sp,sp,4
  820bc8:	0820acc1 	jmpi	820acc <udivmodsi4>
  820bcc:	0109c83a 	sub	r4,zero,r4
  820bd0:	28000b16 	blt	r5,zero,820c00 <__modsi3+0x58>
  820bd4:	180b883a 	mov	r5,r3
  820bd8:	01800044 	movi	r6,1
  820bdc:	0820acc0 	call	820acc <udivmodsi4>
  820be0:	0085c83a 	sub	r2,zero,r2
  820be4:	dfc00017 	ldw	ra,0(sp)
  820be8:	dec00104 	addi	sp,sp,4
  820bec:	f800283a 	ret
  820bf0:	014bc83a 	sub	r5,zero,r5
  820bf4:	dfc00017 	ldw	ra,0(sp)
  820bf8:	dec00104 	addi	sp,sp,4
  820bfc:	0820acc1 	jmpi	820acc <udivmodsi4>
  820c00:	0147c83a 	sub	r3,zero,r5
  820c04:	003ff306 	br	820bd4 <__modsi3+0x2c>

00820c08 <__udivsi3>:
  820c08:	000d883a 	mov	r6,zero
  820c0c:	0820acc1 	jmpi	820acc <udivmodsi4>

00820c10 <__umodsi3>:
  820c10:	01800044 	movi	r6,1
  820c14:	0820acc1 	jmpi	820acc <udivmodsi4>

00820c18 <__muldi3>:
  820c18:	2011883a 	mov	r8,r4
  820c1c:	427fffcc 	andi	r9,r8,65535
  820c20:	4018d43a 	srli	r12,r8,16
  820c24:	32bfffcc 	andi	r10,r6,65535
  820c28:	3016d43a 	srli	r11,r6,16
  820c2c:	4a85383a 	mul	r2,r9,r10
  820c30:	6295383a 	mul	r10,r12,r10
  820c34:	4ad3383a 	mul	r9,r9,r11
  820c38:	113fffcc 	andi	r4,r2,65535
  820c3c:	1004d43a 	srli	r2,r2,16
  820c40:	4a93883a 	add	r9,r9,r10
  820c44:	3807883a 	mov	r3,r7
  820c48:	1245883a 	add	r2,r2,r9
  820c4c:	280f883a 	mov	r7,r5
  820c50:	180b883a 	mov	r5,r3
  820c54:	1006943a 	slli	r3,r2,16
  820c58:	defffd04 	addi	sp,sp,-12
  820c5c:	dc800215 	stw	r18,8(sp)
  820c60:	1907883a 	add	r3,r3,r4
  820c64:	dc400115 	stw	r17,4(sp)
  820c68:	dc000015 	stw	r16,0(sp)
  820c6c:	4165383a 	mul	r18,r8,r5
  820c70:	31e3383a 	mul	r17,r6,r7
  820c74:	1012d43a 	srli	r9,r2,16
  820c78:	62d9383a 	mul	r12,r12,r11
  820c7c:	181f883a 	mov	r15,r3
  820c80:	1280022e 	bgeu	r2,r10,820c8c <__muldi3+0x74>
  820c84:	00800074 	movhi	r2,1
  820c88:	6099883a 	add	r12,r12,r2
  820c8c:	624d883a 	add	r6,r12,r9
  820c90:	9187883a 	add	r3,r18,r6
  820c94:	88c7883a 	add	r3,r17,r3
  820c98:	7805883a 	mov	r2,r15
  820c9c:	dc800217 	ldw	r18,8(sp)
  820ca0:	dc400117 	ldw	r17,4(sp)
  820ca4:	dc000017 	ldw	r16,0(sp)
  820ca8:	dec00304 	addi	sp,sp,12
  820cac:	f800283a 	ret

00820cb0 <__clzsi2>:
  820cb0:	00bfffd4 	movui	r2,65535
  820cb4:	11000e36 	bltu	r2,r4,820cf0 <__clzsi2+0x40>
  820cb8:	00803fc4 	movi	r2,255
  820cbc:	01400204 	movi	r5,8
  820cc0:	0007883a 	mov	r3,zero
  820cc4:	11001036 	bltu	r2,r4,820d08 <__clzsi2+0x58>
  820cc8:	000b883a 	mov	r5,zero
  820ccc:	20c6d83a 	srl	r3,r4,r3
  820cd0:	00802134 	movhi	r2,132
  820cd4:	10ba4304 	addi	r2,r2,-5876
  820cd8:	1887883a 	add	r3,r3,r2
  820cdc:	18800003 	ldbu	r2,0(r3)
  820ce0:	00c00804 	movi	r3,32
  820ce4:	2885883a 	add	r2,r5,r2
  820ce8:	1885c83a 	sub	r2,r3,r2
  820cec:	f800283a 	ret
  820cf0:	01400404 	movi	r5,16
  820cf4:	00804034 	movhi	r2,256
  820cf8:	10bfffc4 	addi	r2,r2,-1
  820cfc:	2807883a 	mov	r3,r5
  820d00:	113ff22e 	bgeu	r2,r4,820ccc <__clzsi2+0x1c>
  820d04:	01400604 	movi	r5,24
  820d08:	2807883a 	mov	r3,r5
  820d0c:	20c6d83a 	srl	r3,r4,r3
  820d10:	00802134 	movhi	r2,132
  820d14:	10ba4304 	addi	r2,r2,-5876
  820d18:	1887883a 	add	r3,r3,r2
  820d1c:	18800003 	ldbu	r2,0(r3)
  820d20:	00c00804 	movi	r3,32
  820d24:	2885883a 	add	r2,r5,r2
  820d28:	1885c83a 	sub	r2,r3,r2
  820d2c:	f800283a 	ret

00820d30 <__pack_f>:
  820d30:	20c00017 	ldw	r3,0(r4)
  820d34:	01c00044 	movi	r7,1
  820d38:	21800317 	ldw	r6,12(r4)
  820d3c:	21400117 	ldw	r5,4(r4)
  820d40:	38c02d2e 	bgeu	r7,r3,820df8 <__pack_f+0xc8>
  820d44:	00800104 	movi	r2,4
  820d48:	18802826 	beq	r3,r2,820dec <__pack_f+0xbc>
  820d4c:	00800084 	movi	r2,2
  820d50:	18800126 	beq	r3,r2,820d58 <__pack_f+0x28>
  820d54:	3000101e 	bne	r6,zero,820d98 <__pack_f+0x68>
  820d58:	000d883a 	mov	r6,zero
  820d5c:	0007883a 	mov	r3,zero
  820d60:	19003fcc 	andi	r4,r3,255
  820d64:	200895fa 	slli	r4,r4,23
  820d68:	00c02034 	movhi	r3,128
  820d6c:	18ffffc4 	addi	r3,r3,-1
  820d70:	30c6703a 	and	r3,r6,r3
  820d74:	10a0002c 	andhi	r2,r2,32768
  820d78:	10c4b03a 	or	r2,r2,r3
  820d7c:	280a97fa 	slli	r5,r5,31
  820d80:	1104b03a 	or	r2,r2,r4
  820d84:	00e00034 	movhi	r3,32768
  820d88:	18ffffc4 	addi	r3,r3,-1
  820d8c:	10c4703a 	and	r2,r2,r3
  820d90:	1144b03a 	or	r2,r2,r5
  820d94:	f800283a 	ret
  820d98:	21000217 	ldw	r4,8(r4)
  820d9c:	00bfe084 	movi	r2,-126
  820da0:	20801b16 	blt	r4,r2,820e10 <__pack_f+0xe0>
  820da4:	00801fc4 	movi	r2,127
  820da8:	11001016 	blt	r2,r4,820dec <__pack_f+0xbc>
  820dac:	308e703a 	and	r7,r6,r2
  820db0:	2087883a 	add	r3,r4,r2
  820db4:	00801004 	movi	r2,64
  820db8:	38800526 	beq	r7,r2,820dd0 <__pack_f+0xa0>
  820dbc:	31800fc4 	addi	r6,r6,63
  820dc0:	30000716 	blt	r6,zero,820de0 <__pack_f+0xb0>
  820dc4:	300490ba 	slli	r2,r6,2
  820dc8:	100cd27a 	srli	r6,r2,9
  820dcc:	003fe406 	br	820d60 <__pack_f+0x30>
  820dd0:	3080200c 	andi	r2,r6,128
  820dd4:	103ffa26 	beq	r2,zero,820dc0 <__pack_f+0x90>
  820dd8:	31cd883a 	add	r6,r6,r7
  820ddc:	003ff806 	br	820dc0 <__pack_f+0x90>
  820de0:	300cd07a 	srli	r6,r6,1
  820de4:	18c00044 	addi	r3,r3,1
  820de8:	003ff606 	br	820dc4 <__pack_f+0x94>
  820dec:	000d883a 	mov	r6,zero
  820df0:	00ffffc4 	movi	r3,-1
  820df4:	003fda06 	br	820d60 <__pack_f+0x30>
  820df8:	31800434 	orhi	r6,r6,16
  820dfc:	00802034 	movhi	r2,128
  820e00:	10bfffc4 	addi	r2,r2,-1
  820e04:	308c703a 	and	r6,r6,r2
  820e08:	00ffffc4 	movi	r3,-1
  820e0c:	003fd406 	br	820d60 <__pack_f+0x30>
  820e10:	1109c83a 	sub	r4,r2,r4
  820e14:	00800644 	movi	r2,25
  820e18:	11001216 	blt	r2,r4,820e64 <__pack_f+0x134>
  820e1c:	3904983a 	sll	r2,r7,r4
  820e20:	3106d83a 	srl	r3,r6,r4
  820e24:	10bfffc4 	addi	r2,r2,-1
  820e28:	3084703a 	and	r2,r6,r2
  820e2c:	1004c03a 	cmpne	r2,r2,zero
  820e30:	1886b03a 	or	r3,r3,r2
  820e34:	19001fcc 	andi	r4,r3,127
  820e38:	00801004 	movi	r2,64
  820e3c:	20800c26 	beq	r4,r2,820e70 <__pack_f+0x140>
  820e40:	18c00fc4 	addi	r3,r3,63
  820e44:	00900034 	movhi	r2,16384
  820e48:	10bfffc4 	addi	r2,r2,-1
  820e4c:	180cd1fa 	srli	r6,r3,7
  820e50:	10c7803a 	cmpltu	r3,r2,r3
  820e54:	00802034 	movhi	r2,128
  820e58:	10bfffc4 	addi	r2,r2,-1
  820e5c:	308c703a 	and	r6,r6,r2
  820e60:	003fbf06 	br	820d60 <__pack_f+0x30>
  820e64:	0007883a 	mov	r3,zero
  820e68:	000d883a 	mov	r6,zero
  820e6c:	003ff906 	br	820e54 <__pack_f+0x124>
  820e70:	1880200c 	andi	r2,r3,128
  820e74:	10000126 	beq	r2,zero,820e7c <__pack_f+0x14c>
  820e78:	1907883a 	add	r3,r3,r4
  820e7c:	180cd1fa 	srli	r6,r3,7
  820e80:	00900034 	movhi	r2,16384
  820e84:	10bfffc4 	addi	r2,r2,-1
  820e88:	10c7803a 	cmpltu	r3,r2,r3
  820e8c:	003ff106 	br	820e54 <__pack_f+0x124>

00820e90 <__unpack_f>:
  820e90:	21800017 	ldw	r6,0(r4)
  820e94:	00c02034 	movhi	r3,128
  820e98:	18ffffc4 	addi	r3,r3,-1
  820e9c:	3004d5fa 	srli	r2,r6,23
  820ea0:	3008d7fa 	srli	r4,r6,31
  820ea4:	30ce703a 	and	r7,r6,r3
  820ea8:	10c03fcc 	andi	r3,r2,255
  820eac:	29000115 	stw	r4,4(r5)
  820eb0:	1800131e 	bne	r3,zero,820f00 <__unpack_f+0x70>
  820eb4:	38000f26 	beq	r7,zero,820ef4 <__unpack_f+0x64>
  820eb8:	380691fa 	slli	r3,r7,7
  820ebc:	01bfe084 	movi	r6,-126
  820ec0:	008000c4 	movi	r2,3
  820ec4:	01100034 	movhi	r4,16384
  820ec8:	213fffc4 	addi	r4,r4,-1
  820ecc:	28800015 	stw	r2,0(r5)
  820ed0:	29800215 	stw	r6,8(r5)
  820ed4:	20c00536 	bltu	r4,r3,820eec <__unpack_f+0x5c>
  820ed8:	3005883a 	mov	r2,r6
  820edc:	18c7883a 	add	r3,r3,r3
  820ee0:	10bfffc4 	addi	r2,r2,-1
  820ee4:	20fffd2e 	bgeu	r4,r3,820edc <__unpack_f+0x4c>
  820ee8:	28800215 	stw	r2,8(r5)
  820eec:	28c00315 	stw	r3,12(r5)
  820ef0:	f800283a 	ret
  820ef4:	00800084 	movi	r2,2
  820ef8:	28800015 	stw	r2,0(r5)
  820efc:	f800283a 	ret
  820f00:	00803fc4 	movi	r2,255
  820f04:	18800826 	beq	r3,r2,820f28 <__unpack_f+0x98>
  820f08:	380491fa 	slli	r2,r7,7
  820f0c:	18ffe044 	addi	r3,r3,-127
  820f10:	28c00215 	stw	r3,8(r5)
  820f14:	10900034 	orhi	r2,r2,16384
  820f18:	28800315 	stw	r2,12(r5)
  820f1c:	008000c4 	movi	r2,3
  820f20:	28800015 	stw	r2,0(r5)
  820f24:	f800283a 	ret
  820f28:	3800031e 	bne	r7,zero,820f38 <__unpack_f+0xa8>
  820f2c:	00800104 	movi	r2,4
  820f30:	28800015 	stw	r2,0(r5)
  820f34:	f800283a 	ret
  820f38:	3080042c 	andhi	r2,r6,16
  820f3c:	10000426 	beq	r2,zero,820f50 <__unpack_f+0xc0>
  820f40:	00800044 	movi	r2,1
  820f44:	28800015 	stw	r2,0(r5)
  820f48:	29c00315 	stw	r7,12(r5)
  820f4c:	f800283a 	ret
  820f50:	28000015 	stw	zero,0(r5)
  820f54:	003ffc06 	br	820f48 <__unpack_f+0xb8>

00820f58 <__fpcmp_parts_f>:
  820f58:	21800017 	ldw	r6,0(r4)
  820f5c:	00c00044 	movi	r3,1
  820f60:	19800a2e 	bgeu	r3,r6,820f8c <__fpcmp_parts_f+0x34>
  820f64:	28800017 	ldw	r2,0(r5)
  820f68:	1880082e 	bgeu	r3,r2,820f8c <__fpcmp_parts_f+0x34>
  820f6c:	00c00104 	movi	r3,4
  820f70:	30c01e26 	beq	r6,r3,820fec <__fpcmp_parts_f+0x94>
  820f74:	10c01a26 	beq	r2,r3,820fe0 <__fpcmp_parts_f+0x88>
  820f78:	00c00084 	movi	r3,2
  820f7c:	30c00526 	beq	r6,r3,820f94 <__fpcmp_parts_f+0x3c>
  820f80:	10c0071e 	bne	r2,r3,820fa0 <__fpcmp_parts_f+0x48>
  820f84:	20800117 	ldw	r2,4(r4)
  820f88:	1000091e 	bne	r2,zero,820fb0 <__fpcmp_parts_f+0x58>
  820f8c:	00800044 	movi	r2,1
  820f90:	f800283a 	ret
  820f94:	10c0121e 	bne	r2,r3,820fe0 <__fpcmp_parts_f+0x88>
  820f98:	0005883a 	mov	r2,zero
  820f9c:	f800283a 	ret
  820fa0:	20c00117 	ldw	r3,4(r4)
  820fa4:	28800117 	ldw	r2,4(r5)
  820fa8:	18800326 	beq	r3,r2,820fb8 <__fpcmp_parts_f+0x60>
  820fac:	183ff726 	beq	r3,zero,820f8c <__fpcmp_parts_f+0x34>
  820fb0:	00bfffc4 	movi	r2,-1
  820fb4:	f800283a 	ret
  820fb8:	21800217 	ldw	r6,8(r4)
  820fbc:	28800217 	ldw	r2,8(r5)
  820fc0:	11bffa16 	blt	r2,r6,820fac <__fpcmp_parts_f+0x54>
  820fc4:	30800416 	blt	r6,r2,820fd8 <__fpcmp_parts_f+0x80>
  820fc8:	21000317 	ldw	r4,12(r4)
  820fcc:	29400317 	ldw	r5,12(r5)
  820fd0:	293ff636 	bltu	r5,r4,820fac <__fpcmp_parts_f+0x54>
  820fd4:	217ff02e 	bgeu	r4,r5,820f98 <__fpcmp_parts_f+0x40>
  820fd8:	183fec1e 	bne	r3,zero,820f8c <__fpcmp_parts_f+0x34>
  820fdc:	003ff406 	br	820fb0 <__fpcmp_parts_f+0x58>
  820fe0:	28800117 	ldw	r2,4(r5)
  820fe4:	103fe91e 	bne	r2,zero,820f8c <__fpcmp_parts_f+0x34>
  820fe8:	003ff106 	br	820fb0 <__fpcmp_parts_f+0x58>
  820fec:	11bfe51e 	bne	r2,r6,820f84 <__fpcmp_parts_f+0x2c>
  820ff0:	28c00117 	ldw	r3,4(r5)
  820ff4:	20800117 	ldw	r2,4(r4)
  820ff8:	1885c83a 	sub	r2,r3,r2
  820ffc:	f800283a 	ret

00821000 <__make_fp>:
  821000:	defffb04 	addi	sp,sp,-20
  821004:	d9000015 	stw	r4,0(sp)
  821008:	d809883a 	mov	r4,sp
  82100c:	dfc00415 	stw	ra,16(sp)
  821010:	d9400115 	stw	r5,4(sp)
  821014:	d9800215 	stw	r6,8(sp)
  821018:	d9c00315 	stw	r7,12(sp)
  82101c:	0820d300 	call	820d30 <__pack_f>
  821020:	dfc00417 	ldw	ra,16(sp)
  821024:	dec00504 	addi	sp,sp,20
  821028:	f800283a 	ret

0082102c <__pack_d>:
  82102c:	20c00017 	ldw	r3,0(r4)
  821030:	defffd04 	addi	sp,sp,-12
  821034:	dc000015 	stw	r16,0(sp)
  821038:	dc800215 	stw	r18,8(sp)
  82103c:	dc400115 	stw	r17,4(sp)
  821040:	00800044 	movi	r2,1
  821044:	22000317 	ldw	r8,12(r4)
  821048:	001f883a 	mov	r15,zero
  82104c:	22400417 	ldw	r9,16(r4)
  821050:	24000117 	ldw	r16,4(r4)
  821054:	10c0552e 	bgeu	r2,r3,8211ac <__pack_d+0x180>
  821058:	00800104 	movi	r2,4
  82105c:	18804f26 	beq	r3,r2,82119c <__pack_d+0x170>
  821060:	00800084 	movi	r2,2
  821064:	18800226 	beq	r3,r2,821070 <__pack_d+0x44>
  821068:	4244b03a 	or	r2,r8,r9
  82106c:	10001a1e 	bne	r2,zero,8210d8 <__pack_d+0xac>
  821070:	000d883a 	mov	r6,zero
  821074:	000f883a 	mov	r7,zero
  821078:	0011883a 	mov	r8,zero
  82107c:	00800434 	movhi	r2,16
  821080:	10bfffc4 	addi	r2,r2,-1
  821084:	301d883a 	mov	r14,r6
  821088:	3884703a 	and	r2,r7,r2
  82108c:	400a953a 	slli	r5,r8,20
  821090:	79bffc2c 	andhi	r6,r15,65520
  821094:	308cb03a 	or	r6,r6,r2
  821098:	00e00434 	movhi	r3,32784
  82109c:	18ffffc4 	addi	r3,r3,-1
  8210a0:	800497fa 	slli	r2,r16,31
  8210a4:	30c6703a 	and	r3,r6,r3
  8210a8:	1946b03a 	or	r3,r3,r5
  8210ac:	01600034 	movhi	r5,32768
  8210b0:	297fffc4 	addi	r5,r5,-1
  8210b4:	194a703a 	and	r5,r3,r5
  8210b8:	288ab03a 	or	r5,r5,r2
  8210bc:	2807883a 	mov	r3,r5
  8210c0:	7005883a 	mov	r2,r14
  8210c4:	dc800217 	ldw	r18,8(sp)
  8210c8:	dc400117 	ldw	r17,4(sp)
  8210cc:	dc000017 	ldw	r16,0(sp)
  8210d0:	dec00304 	addi	sp,sp,12
  8210d4:	f800283a 	ret
  8210d8:	21000217 	ldw	r4,8(r4)
  8210dc:	00bf0084 	movi	r2,-1022
  8210e0:	20803f16 	blt	r4,r2,8211e0 <__pack_d+0x1b4>
  8210e4:	0080ffc4 	movi	r2,1023
  8210e8:	11002c16 	blt	r2,r4,82119c <__pack_d+0x170>
  8210ec:	00803fc4 	movi	r2,255
  8210f0:	408c703a 	and	r6,r8,r2
  8210f4:	00802004 	movi	r2,128
  8210f8:	0007883a 	mov	r3,zero
  8210fc:	000f883a 	mov	r7,zero
  821100:	2280ffc4 	addi	r10,r4,1023
  821104:	30801e26 	beq	r6,r2,821180 <__pack_d+0x154>
  821108:	00801fc4 	movi	r2,127
  82110c:	4089883a 	add	r4,r8,r2
  821110:	220d803a 	cmpltu	r6,r4,r8
  821114:	324d883a 	add	r6,r6,r9
  821118:	2011883a 	mov	r8,r4
  82111c:	3013883a 	mov	r9,r6
  821120:	00880034 	movhi	r2,8192
  821124:	10bfffc4 	addi	r2,r2,-1
  821128:	12400d36 	bltu	r2,r9,821160 <__pack_d+0x134>
  82112c:	4804963a 	slli	r2,r9,24
  821130:	400cd23a 	srli	r6,r8,8
  821134:	480ed23a 	srli	r7,r9,8
  821138:	013fffc4 	movi	r4,-1
  82113c:	118cb03a 	or	r6,r2,r6
  821140:	01400434 	movhi	r5,16
  821144:	297fffc4 	addi	r5,r5,-1
  821148:	3104703a 	and	r2,r6,r4
  82114c:	3946703a 	and	r3,r7,r5
  821150:	5201ffcc 	andi	r8,r10,2047
  821154:	100d883a 	mov	r6,r2
  821158:	180f883a 	mov	r7,r3
  82115c:	003fc706 	br	82107c <__pack_d+0x50>
  821160:	480897fa 	slli	r4,r9,31
  821164:	4004d07a 	srli	r2,r8,1
  821168:	4806d07a 	srli	r3,r9,1
  82116c:	52800044 	addi	r10,r10,1
  821170:	2084b03a 	or	r2,r4,r2
  821174:	1011883a 	mov	r8,r2
  821178:	1813883a 	mov	r9,r3
  82117c:	003feb06 	br	82112c <__pack_d+0x100>
  821180:	383fe11e 	bne	r7,zero,821108 <__pack_d+0xdc>
  821184:	01004004 	movi	r4,256
  821188:	4104703a 	and	r2,r8,r4
  82118c:	10c4b03a 	or	r2,r2,r3
  821190:	103fe326 	beq	r2,zero,821120 <__pack_d+0xf4>
  821194:	3005883a 	mov	r2,r6
  821198:	003fdc06 	br	82110c <__pack_d+0xe0>
  82119c:	000d883a 	mov	r6,zero
  8211a0:	000f883a 	mov	r7,zero
  8211a4:	0201ffc4 	movi	r8,2047
  8211a8:	003fb406 	br	82107c <__pack_d+0x50>
  8211ac:	0005883a 	mov	r2,zero
  8211b0:	00c00234 	movhi	r3,8
  8211b4:	408cb03a 	or	r6,r8,r2
  8211b8:	48ceb03a 	or	r7,r9,r3
  8211bc:	013fffc4 	movi	r4,-1
  8211c0:	01400434 	movhi	r5,16
  8211c4:	297fffc4 	addi	r5,r5,-1
  8211c8:	3104703a 	and	r2,r6,r4
  8211cc:	3946703a 	and	r3,r7,r5
  8211d0:	100d883a 	mov	r6,r2
  8211d4:	180f883a 	mov	r7,r3
  8211d8:	0201ffc4 	movi	r8,2047
  8211dc:	003fa706 	br	82107c <__pack_d+0x50>
  8211e0:	1109c83a 	sub	r4,r2,r4
  8211e4:	00800e04 	movi	r2,56
  8211e8:	11004316 	blt	r2,r4,8212f8 <__pack_d+0x2cc>
  8211ec:	21fff804 	addi	r7,r4,-32
  8211f0:	38004516 	blt	r7,zero,821308 <__pack_d+0x2dc>
  8211f4:	49d8d83a 	srl	r12,r9,r7
  8211f8:	001b883a 	mov	r13,zero
  8211fc:	0023883a 	mov	r17,zero
  821200:	01400044 	movi	r5,1
  821204:	0025883a 	mov	r18,zero
  821208:	38004716 	blt	r7,zero,821328 <__pack_d+0x2fc>
  82120c:	29d6983a 	sll	r11,r5,r7
  821210:	0015883a 	mov	r10,zero
  821214:	00bfffc4 	movi	r2,-1
  821218:	5089883a 	add	r4,r10,r2
  82121c:	588b883a 	add	r5,r11,r2
  821220:	228d803a 	cmpltu	r6,r4,r10
  821224:	314b883a 	add	r5,r6,r5
  821228:	4104703a 	and	r2,r8,r4
  82122c:	4946703a 	and	r3,r9,r5
  821230:	10c4b03a 	or	r2,r2,r3
  821234:	10000226 	beq	r2,zero,821240 <__pack_d+0x214>
  821238:	04400044 	movi	r17,1
  82123c:	0025883a 	mov	r18,zero
  821240:	00803fc4 	movi	r2,255
  821244:	644eb03a 	or	r7,r12,r17
  821248:	3892703a 	and	r9,r7,r2
  82124c:	00802004 	movi	r2,128
  821250:	6c90b03a 	or	r8,r13,r18
  821254:	0015883a 	mov	r10,zero
  821258:	48801626 	beq	r9,r2,8212b4 <__pack_d+0x288>
  82125c:	01001fc4 	movi	r4,127
  821260:	3905883a 	add	r2,r7,r4
  821264:	11cd803a 	cmpltu	r6,r2,r7
  821268:	320d883a 	add	r6,r6,r8
  82126c:	100f883a 	mov	r7,r2
  821270:	00840034 	movhi	r2,4096
  821274:	10bfffc4 	addi	r2,r2,-1
  821278:	3011883a 	mov	r8,r6
  82127c:	0007883a 	mov	r3,zero
  821280:	11801b36 	bltu	r2,r6,8212f0 <__pack_d+0x2c4>
  821284:	4004963a 	slli	r2,r8,24
  821288:	3808d23a 	srli	r4,r7,8
  82128c:	400ad23a 	srli	r5,r8,8
  821290:	1813883a 	mov	r9,r3
  821294:	1108b03a 	or	r4,r2,r4
  821298:	00bfffc4 	movi	r2,-1
  82129c:	00c00434 	movhi	r3,16
  8212a0:	18ffffc4 	addi	r3,r3,-1
  8212a4:	208c703a 	and	r6,r4,r2
  8212a8:	28ce703a 	and	r7,r5,r3
  8212ac:	4a01ffcc 	andi	r8,r9,2047
  8212b0:	003f7206 	br	82107c <__pack_d+0x50>
  8212b4:	503fe91e 	bne	r10,zero,82125c <__pack_d+0x230>
  8212b8:	01004004 	movi	r4,256
  8212bc:	3904703a 	and	r2,r7,r4
  8212c0:	0007883a 	mov	r3,zero
  8212c4:	10c4b03a 	or	r2,r2,r3
  8212c8:	10000626 	beq	r2,zero,8212e4 <__pack_d+0x2b8>
  8212cc:	3a45883a 	add	r2,r7,r9
  8212d0:	11cd803a 	cmpltu	r6,r2,r7
  8212d4:	320d883a 	add	r6,r6,r8
  8212d8:	100f883a 	mov	r7,r2
  8212dc:	3011883a 	mov	r8,r6
  8212e0:	0007883a 	mov	r3,zero
  8212e4:	00840034 	movhi	r2,4096
  8212e8:	10bfffc4 	addi	r2,r2,-1
  8212ec:	123fe52e 	bgeu	r2,r8,821284 <__pack_d+0x258>
  8212f0:	00c00044 	movi	r3,1
  8212f4:	003fe306 	br	821284 <__pack_d+0x258>
  8212f8:	0009883a 	mov	r4,zero
  8212fc:	0013883a 	mov	r9,zero
  821300:	000b883a 	mov	r5,zero
  821304:	003fe406 	br	821298 <__pack_d+0x26c>
  821308:	4a47883a 	add	r3,r9,r9
  82130c:	008007c4 	movi	r2,31
  821310:	1105c83a 	sub	r2,r2,r4
  821314:	1886983a 	sll	r3,r3,r2
  821318:	4118d83a 	srl	r12,r8,r4
  82131c:	491ad83a 	srl	r13,r9,r4
  821320:	1b18b03a 	or	r12,r3,r12
  821324:	003fb506 	br	8211fc <__pack_d+0x1d0>
  821328:	2806d07a 	srli	r3,r5,1
  82132c:	008007c4 	movi	r2,31
  821330:	1105c83a 	sub	r2,r2,r4
  821334:	1896d83a 	srl	r11,r3,r2
  821338:	2914983a 	sll	r10,r5,r4
  82133c:	003fb506 	br	821214 <__pack_d+0x1e8>

00821340 <__unpack_d>:
  821340:	20c00117 	ldw	r3,4(r4)
  821344:	22400017 	ldw	r9,0(r4)
  821348:	00800434 	movhi	r2,16
  82134c:	10bfffc4 	addi	r2,r2,-1
  821350:	1808d53a 	srli	r4,r3,20
  821354:	180cd7fa 	srli	r6,r3,31
  821358:	1894703a 	and	r10,r3,r2
  82135c:	2201ffcc 	andi	r8,r4,2047
  821360:	281b883a 	mov	r13,r5
  821364:	4817883a 	mov	r11,r9
  821368:	29800115 	stw	r6,4(r5)
  82136c:	5019883a 	mov	r12,r10
  821370:	40001e1e 	bne	r8,zero,8213ec <__unpack_d+0xac>
  821374:	4a84b03a 	or	r2,r9,r10
  821378:	10001926 	beq	r2,zero,8213e0 <__unpack_d+0xa0>
  82137c:	4804d63a 	srli	r2,r9,24
  821380:	500c923a 	slli	r6,r10,8
  821384:	013f0084 	movi	r4,-1022
  821388:	00c40034 	movhi	r3,4096
  82138c:	18ffffc4 	addi	r3,r3,-1
  821390:	118cb03a 	or	r6,r2,r6
  821394:	008000c4 	movi	r2,3
  821398:	480a923a 	slli	r5,r9,8
  82139c:	68800015 	stw	r2,0(r13)
  8213a0:	69000215 	stw	r4,8(r13)
  8213a4:	19800b36 	bltu	r3,r6,8213d4 <__unpack_d+0x94>
  8213a8:	200f883a 	mov	r7,r4
  8213ac:	1811883a 	mov	r8,r3
  8213b0:	2945883a 	add	r2,r5,r5
  8213b4:	1149803a 	cmpltu	r4,r2,r5
  8213b8:	3187883a 	add	r3,r6,r6
  8213bc:	20c9883a 	add	r4,r4,r3
  8213c0:	100b883a 	mov	r5,r2
  8213c4:	200d883a 	mov	r6,r4
  8213c8:	39ffffc4 	addi	r7,r7,-1
  8213cc:	413ff82e 	bgeu	r8,r4,8213b0 <__unpack_d+0x70>
  8213d0:	69c00215 	stw	r7,8(r13)
  8213d4:	69800415 	stw	r6,16(r13)
  8213d8:	69400315 	stw	r5,12(r13)
  8213dc:	f800283a 	ret
  8213e0:	00800084 	movi	r2,2
  8213e4:	28800015 	stw	r2,0(r5)
  8213e8:	f800283a 	ret
  8213ec:	0081ffc4 	movi	r2,2047
  8213f0:	40800f26 	beq	r8,r2,821430 <__unpack_d+0xf0>
  8213f4:	480cd63a 	srli	r6,r9,24
  8213f8:	5006923a 	slli	r3,r10,8
  8213fc:	4804923a 	slli	r2,r9,8
  821400:	0009883a 	mov	r4,zero
  821404:	30c6b03a 	or	r3,r6,r3
  821408:	01440034 	movhi	r5,4096
  82140c:	110cb03a 	or	r6,r2,r4
  821410:	423f0044 	addi	r8,r8,-1023
  821414:	194eb03a 	or	r7,r3,r5
  821418:	008000c4 	movi	r2,3
  82141c:	69c00415 	stw	r7,16(r13)
  821420:	6a000215 	stw	r8,8(r13)
  821424:	68800015 	stw	r2,0(r13)
  821428:	69800315 	stw	r6,12(r13)
  82142c:	f800283a 	ret
  821430:	4a84b03a 	or	r2,r9,r10
  821434:	1000031e 	bne	r2,zero,821444 <__unpack_d+0x104>
  821438:	00800104 	movi	r2,4
  82143c:	28800015 	stw	r2,0(r5)
  821440:	f800283a 	ret
  821444:	0009883a 	mov	r4,zero
  821448:	01400234 	movhi	r5,8
  82144c:	4904703a 	and	r2,r9,r4
  821450:	5146703a 	and	r3,r10,r5
  821454:	10c4b03a 	or	r2,r2,r3
  821458:	10000526 	beq	r2,zero,821470 <__unpack_d+0x130>
  82145c:	00800044 	movi	r2,1
  821460:	68800015 	stw	r2,0(r13)
  821464:	6b000415 	stw	r12,16(r13)
  821468:	6ac00315 	stw	r11,12(r13)
  82146c:	f800283a 	ret
  821470:	68000015 	stw	zero,0(r13)
  821474:	003ffb06 	br	821464 <__unpack_d+0x124>

00821478 <__fpcmp_parts_d>:
  821478:	21800017 	ldw	r6,0(r4)
  82147c:	00c00044 	movi	r3,1
  821480:	19800a2e 	bgeu	r3,r6,8214ac <__fpcmp_parts_d+0x34>
  821484:	28800017 	ldw	r2,0(r5)
  821488:	1880082e 	bgeu	r3,r2,8214ac <__fpcmp_parts_d+0x34>
  82148c:	00c00104 	movi	r3,4
  821490:	30c02626 	beq	r6,r3,82152c <__fpcmp_parts_d+0xb4>
  821494:	10c02226 	beq	r2,r3,821520 <__fpcmp_parts_d+0xa8>
  821498:	00c00084 	movi	r3,2
  82149c:	30c00526 	beq	r6,r3,8214b4 <__fpcmp_parts_d+0x3c>
  8214a0:	10c0071e 	bne	r2,r3,8214c0 <__fpcmp_parts_d+0x48>
  8214a4:	20800117 	ldw	r2,4(r4)
  8214a8:	1000091e 	bne	r2,zero,8214d0 <__fpcmp_parts_d+0x58>
  8214ac:	00800044 	movi	r2,1
  8214b0:	f800283a 	ret
  8214b4:	10c01a1e 	bne	r2,r3,821520 <__fpcmp_parts_d+0xa8>
  8214b8:	0005883a 	mov	r2,zero
  8214bc:	f800283a 	ret
  8214c0:	22000117 	ldw	r8,4(r4)
  8214c4:	28800117 	ldw	r2,4(r5)
  8214c8:	40800326 	beq	r8,r2,8214d8 <__fpcmp_parts_d+0x60>
  8214cc:	403ff726 	beq	r8,zero,8214ac <__fpcmp_parts_d+0x34>
  8214d0:	00bfffc4 	movi	r2,-1
  8214d4:	f800283a 	ret
  8214d8:	20c00217 	ldw	r3,8(r4)
  8214dc:	28800217 	ldw	r2,8(r5)
  8214e0:	10fffa16 	blt	r2,r3,8214cc <__fpcmp_parts_d+0x54>
  8214e4:	18800916 	blt	r3,r2,82150c <__fpcmp_parts_d+0x94>
  8214e8:	21c00417 	ldw	r7,16(r4)
  8214ec:	28c00417 	ldw	r3,16(r5)
  8214f0:	21800317 	ldw	r6,12(r4)
  8214f4:	28800317 	ldw	r2,12(r5)
  8214f8:	19fff436 	bltu	r3,r7,8214cc <__fpcmp_parts_d+0x54>
  8214fc:	38c00526 	beq	r7,r3,821514 <__fpcmp_parts_d+0x9c>
  821500:	38c00236 	bltu	r7,r3,82150c <__fpcmp_parts_d+0x94>
  821504:	19ffec1e 	bne	r3,r7,8214b8 <__fpcmp_parts_d+0x40>
  821508:	30bfeb2e 	bgeu	r6,r2,8214b8 <__fpcmp_parts_d+0x40>
  82150c:	403fe71e 	bne	r8,zero,8214ac <__fpcmp_parts_d+0x34>
  821510:	003fef06 	br	8214d0 <__fpcmp_parts_d+0x58>
  821514:	11bffa2e 	bgeu	r2,r6,821500 <__fpcmp_parts_d+0x88>
  821518:	403fe426 	beq	r8,zero,8214ac <__fpcmp_parts_d+0x34>
  82151c:	003fec06 	br	8214d0 <__fpcmp_parts_d+0x58>
  821520:	28800117 	ldw	r2,4(r5)
  821524:	103fe11e 	bne	r2,zero,8214ac <__fpcmp_parts_d+0x34>
  821528:	003fe906 	br	8214d0 <__fpcmp_parts_d+0x58>
  82152c:	11bfdd1e 	bne	r2,r6,8214a4 <__fpcmp_parts_d+0x2c>
  821530:	28c00117 	ldw	r3,4(r5)
  821534:	20800117 	ldw	r2,4(r4)
  821538:	1885c83a 	sub	r2,r3,r2
  82153c:	f800283a 	ret

00821540 <abort>:
  821540:	deffff04 	addi	sp,sp,-4
  821544:	01000184 	movi	r4,6
  821548:	dfc00015 	stw	ra,0(sp)
  82154c:	08228e00 	call	8228e0 <raise>
  821550:	01000044 	movi	r4,1
  821554:	082ac400 	call	82ac40 <_exit>

00821558 <_atoi_r>:
  821558:	000d883a 	mov	r6,zero
  82155c:	01c00284 	movi	r7,10
  821560:	08237841 	jmpi	823784 <_strtol_r>

00821564 <atoi>:
  821564:	000b883a 	mov	r5,zero
  821568:	01800284 	movi	r6,10
  82156c:	08239c81 	jmpi	8239c8 <strtol>

00821570 <calloc>:
  821570:	01802134 	movhi	r6,132
  821574:	3182e104 	addi	r6,r6,2948
  821578:	2007883a 	mov	r3,r4
  82157c:	31000017 	ldw	r4,0(r6)
  821580:	280d883a 	mov	r6,r5
  821584:	180b883a 	mov	r5,r3
  821588:	082158c1 	jmpi	82158c <_calloc_r>

0082158c <_calloc_r>:
  82158c:	298b383a 	mul	r5,r5,r6
  821590:	defffe04 	addi	sp,sp,-8
  821594:	dc000015 	stw	r16,0(sp)
  821598:	dfc00115 	stw	ra,4(sp)
  82159c:	08217100 	call	821710 <_malloc_r>
  8215a0:	1021883a 	mov	r16,r2
  8215a4:	01c00904 	movi	r7,36
  8215a8:	10000d26 	beq	r2,zero,8215e0 <_calloc_r+0x54>
  8215ac:	10ffff17 	ldw	r3,-4(r2)
  8215b0:	1009883a 	mov	r4,r2
  8215b4:	00bfff04 	movi	r2,-4
  8215b8:	1886703a 	and	r3,r3,r2
  8215bc:	1887883a 	add	r3,r3,r2
  8215c0:	180d883a 	mov	r6,r3
  8215c4:	000b883a 	mov	r5,zero
  8215c8:	38c01736 	bltu	r7,r3,821628 <_calloc_r+0x9c>
  8215cc:	008004c4 	movi	r2,19
  8215d0:	10c00836 	bltu	r2,r3,8215f4 <_calloc_r+0x68>
  8215d4:	20000215 	stw	zero,8(r4)
  8215d8:	20000015 	stw	zero,0(r4)
  8215dc:	20000115 	stw	zero,4(r4)
  8215e0:	8005883a 	mov	r2,r16
  8215e4:	dfc00117 	ldw	ra,4(sp)
  8215e8:	dc000017 	ldw	r16,0(sp)
  8215ec:	dec00204 	addi	sp,sp,8
  8215f0:	f800283a 	ret
  8215f4:	008006c4 	movi	r2,27
  8215f8:	80000015 	stw	zero,0(r16)
  8215fc:	80000115 	stw	zero,4(r16)
  821600:	81000204 	addi	r4,r16,8
  821604:	10fff32e 	bgeu	r2,r3,8215d4 <_calloc_r+0x48>
  821608:	80000215 	stw	zero,8(r16)
  82160c:	80000315 	stw	zero,12(r16)
  821610:	81000404 	addi	r4,r16,16
  821614:	19ffef1e 	bne	r3,r7,8215d4 <_calloc_r+0x48>
  821618:	81000604 	addi	r4,r16,24
  82161c:	80000415 	stw	zero,16(r16)
  821620:	80000515 	stw	zero,20(r16)
  821624:	003feb06 	br	8215d4 <_calloc_r+0x48>
  821628:	0821fd00 	call	821fd0 <memset>
  82162c:	8005883a 	mov	r2,r16
  821630:	dfc00117 	ldw	ra,4(sp)
  821634:	dc000017 	ldw	r16,0(sp)
  821638:	dec00204 	addi	sp,sp,8
  82163c:	f800283a 	ret

00821640 <__errno>:
  821640:	00c02134 	movhi	r3,132
  821644:	18c2e104 	addi	r3,r3,2948
  821648:	18800017 	ldw	r2,0(r3)
  82164c:	f800283a 	ret

00821650 <exit>:
  821650:	defffe04 	addi	sp,sp,-8
  821654:	000b883a 	mov	r5,zero
  821658:	dc000015 	stw	r16,0(sp)
  82165c:	dfc00115 	stw	ra,4(sp)
  821660:	2021883a 	mov	r16,r4
  821664:	0825a540 	call	825a54 <__call_exitprocs>
  821668:	00802134 	movhi	r2,132
  82166c:	1082e204 	addi	r2,r2,2952
  821670:	11000017 	ldw	r4,0(r2)
  821674:	20800f17 	ldw	r2,60(r4)
  821678:	10000126 	beq	r2,zero,821680 <exit+0x30>
  82167c:	103ee83a 	callr	r2
  821680:	8009883a 	mov	r4,r16
  821684:	082ac400 	call	82ac40 <_exit>

00821688 <fprintf>:
  821688:	defffc04 	addi	sp,sp,-16
  82168c:	dfc00115 	stw	ra,4(sp)
  821690:	d9800215 	stw	r6,8(sp)
  821694:	d9c00315 	stw	r7,12(sp)
  821698:	d8800204 	addi	r2,sp,8
  82169c:	100d883a 	mov	r6,r2
  8216a0:	d8800015 	stw	r2,0(sp)
  8216a4:	08258f00 	call	8258f0 <__vfprintf_internal>
  8216a8:	dfc00117 	ldw	ra,4(sp)
  8216ac:	dec00404 	addi	sp,sp,16
  8216b0:	f800283a 	ret

008216b4 <_fprintf_r>:
  8216b4:	defffd04 	addi	sp,sp,-12
  8216b8:	2807883a 	mov	r3,r5
  8216bc:	dfc00115 	stw	ra,4(sp)
  8216c0:	d9c00215 	stw	r7,8(sp)
  8216c4:	d8800204 	addi	r2,sp,8
  8216c8:	300b883a 	mov	r5,r6
  8216cc:	1809883a 	mov	r4,r3
  8216d0:	100d883a 	mov	r6,r2
  8216d4:	d8800015 	stw	r2,0(sp)
  8216d8:	08258f00 	call	8258f0 <__vfprintf_internal>
  8216dc:	dfc00117 	ldw	ra,4(sp)
  8216e0:	dec00304 	addi	sp,sp,12
  8216e4:	f800283a 	ret

008216e8 <free>:
  8216e8:	00802134 	movhi	r2,132
  8216ec:	1082e104 	addi	r2,r2,2948
  8216f0:	200b883a 	mov	r5,r4
  8216f4:	11000017 	ldw	r4,0(r2)
  8216f8:	08279ec1 	jmpi	8279ec <_free_r>

008216fc <malloc>:
  8216fc:	00802134 	movhi	r2,132
  821700:	1082e104 	addi	r2,r2,2948
  821704:	200b883a 	mov	r5,r4
  821708:	11000017 	ldw	r4,0(r2)
  82170c:	08217101 	jmpi	821710 <_malloc_r>

00821710 <_malloc_r>:
  821710:	defff604 	addi	sp,sp,-40
  821714:	28c002c4 	addi	r3,r5,11
  821718:	00800584 	movi	r2,22
  82171c:	dc800215 	stw	r18,8(sp)
  821720:	dfc00915 	stw	ra,36(sp)
  821724:	df000815 	stw	fp,32(sp)
  821728:	ddc00715 	stw	r23,28(sp)
  82172c:	dd800615 	stw	r22,24(sp)
  821730:	dd400515 	stw	r21,20(sp)
  821734:	dd000415 	stw	r20,16(sp)
  821738:	dcc00315 	stw	r19,12(sp)
  82173c:	dc400115 	stw	r17,4(sp)
  821740:	dc000015 	stw	r16,0(sp)
  821744:	2025883a 	mov	r18,r4
  821748:	10c01236 	bltu	r2,r3,821794 <_malloc_r+0x84>
  82174c:	04400404 	movi	r17,16
  821750:	8940142e 	bgeu	r17,r5,8217a4 <_malloc_r+0x94>
  821754:	00800304 	movi	r2,12
  821758:	0007883a 	mov	r3,zero
  82175c:	90800015 	stw	r2,0(r18)
  821760:	1805883a 	mov	r2,r3
  821764:	dfc00917 	ldw	ra,36(sp)
  821768:	df000817 	ldw	fp,32(sp)
  82176c:	ddc00717 	ldw	r23,28(sp)
  821770:	dd800617 	ldw	r22,24(sp)
  821774:	dd400517 	ldw	r21,20(sp)
  821778:	dd000417 	ldw	r20,16(sp)
  82177c:	dcc00317 	ldw	r19,12(sp)
  821780:	dc800217 	ldw	r18,8(sp)
  821784:	dc400117 	ldw	r17,4(sp)
  821788:	dc000017 	ldw	r16,0(sp)
  82178c:	dec00a04 	addi	sp,sp,40
  821790:	f800283a 	ret
  821794:	00bffe04 	movi	r2,-8
  821798:	18a2703a 	and	r17,r3,r2
  82179c:	883fed16 	blt	r17,zero,821754 <_malloc_r+0x44>
  8217a0:	897fec36 	bltu	r17,r5,821754 <_malloc_r+0x44>
  8217a4:	9009883a 	mov	r4,r18
  8217a8:	082b0fc0 	call	82b0fc <__malloc_lock>
  8217ac:	00807dc4 	movi	r2,503
  8217b0:	14402b2e 	bgeu	r2,r17,821860 <_malloc_r+0x150>
  8217b4:	8806d27a 	srli	r3,r17,9
  8217b8:	18003f1e 	bne	r3,zero,8218b8 <_malloc_r+0x1a8>
  8217bc:	880cd0fa 	srli	r6,r17,3
  8217c0:	300490fa 	slli	r2,r6,3
  8217c4:	02c02134 	movhi	r11,132
  8217c8:	5afcf104 	addi	r11,r11,-3132
  8217cc:	12cb883a 	add	r5,r2,r11
  8217d0:	2c000317 	ldw	r16,12(r5)
  8217d4:	580f883a 	mov	r7,r11
  8217d8:	2c00041e 	bne	r5,r16,8217ec <_malloc_r+0xdc>
  8217dc:	00000a06 	br	821808 <_malloc_r+0xf8>
  8217e0:	1800860e 	bge	r3,zero,8219fc <_malloc_r+0x2ec>
  8217e4:	84000317 	ldw	r16,12(r16)
  8217e8:	2c000726 	beq	r5,r16,821808 <_malloc_r+0xf8>
  8217ec:	80800117 	ldw	r2,4(r16)
  8217f0:	00ffff04 	movi	r3,-4
  8217f4:	10c8703a 	and	r4,r2,r3
  8217f8:	2447c83a 	sub	r3,r4,r17
  8217fc:	008003c4 	movi	r2,15
  821800:	10fff70e 	bge	r2,r3,8217e0 <_malloc_r+0xd0>
  821804:	31bfffc4 	addi	r6,r6,-1
  821808:	32400044 	addi	r9,r6,1
  82180c:	02802134 	movhi	r10,132
  821810:	52bcf304 	addi	r10,r10,-3124
  821814:	54000217 	ldw	r16,8(r10)
  821818:	8280a026 	beq	r16,r10,821a9c <_malloc_r+0x38c>
  82181c:	80800117 	ldw	r2,4(r16)
  821820:	00ffff04 	movi	r3,-4
  821824:	10ca703a 	and	r5,r2,r3
  821828:	2c4dc83a 	sub	r6,r5,r17
  82182c:	008003c4 	movi	r2,15
  821830:	11808316 	blt	r2,r6,821a40 <_malloc_r+0x330>
  821834:	52800315 	stw	r10,12(r10)
  821838:	52800215 	stw	r10,8(r10)
  82183c:	30002916 	blt	r6,zero,8218e4 <_malloc_r+0x1d4>
  821840:	8147883a 	add	r3,r16,r5
  821844:	18800117 	ldw	r2,4(r3)
  821848:	9009883a 	mov	r4,r18
  82184c:	10800054 	ori	r2,r2,1
  821850:	18800115 	stw	r2,4(r3)
  821854:	082b1000 	call	82b100 <__malloc_unlock>
  821858:	80c00204 	addi	r3,r16,8
  82185c:	003fc006 	br	821760 <_malloc_r+0x50>
  821860:	02c02134 	movhi	r11,132
  821864:	5afcf104 	addi	r11,r11,-3132
  821868:	8ac5883a 	add	r2,r17,r11
  82186c:	14000317 	ldw	r16,12(r2)
  821870:	580f883a 	mov	r7,r11
  821874:	8806d0fa 	srli	r3,r17,3
  821878:	14006c26 	beq	r2,r16,821a2c <_malloc_r+0x31c>
  82187c:	80c00117 	ldw	r3,4(r16)
  821880:	00bfff04 	movi	r2,-4
  821884:	81800317 	ldw	r6,12(r16)
  821888:	1886703a 	and	r3,r3,r2
  82188c:	80c7883a 	add	r3,r16,r3
  821890:	18800117 	ldw	r2,4(r3)
  821894:	81400217 	ldw	r5,8(r16)
  821898:	9009883a 	mov	r4,r18
  82189c:	10800054 	ori	r2,r2,1
  8218a0:	18800115 	stw	r2,4(r3)
  8218a4:	31400215 	stw	r5,8(r6)
  8218a8:	29800315 	stw	r6,12(r5)
  8218ac:	082b1000 	call	82b100 <__malloc_unlock>
  8218b0:	80c00204 	addi	r3,r16,8
  8218b4:	003faa06 	br	821760 <_malloc_r+0x50>
  8218b8:	00800104 	movi	r2,4
  8218bc:	10c0052e 	bgeu	r2,r3,8218d4 <_malloc_r+0x1c4>
  8218c0:	00800504 	movi	r2,20
  8218c4:	10c07836 	bltu	r2,r3,821aa8 <_malloc_r+0x398>
  8218c8:	198016c4 	addi	r6,r3,91
  8218cc:	300490fa 	slli	r2,r6,3
  8218d0:	003fbc06 	br	8217c4 <_malloc_r+0xb4>
  8218d4:	8804d1ba 	srli	r2,r17,6
  8218d8:	11800e04 	addi	r6,r2,56
  8218dc:	300490fa 	slli	r2,r6,3
  8218e0:	003fb806 	br	8217c4 <_malloc_r+0xb4>
  8218e4:	00807fc4 	movi	r2,511
  8218e8:	1140bb36 	bltu	r2,r5,821bd8 <_malloc_r+0x4c8>
  8218ec:	2806d0fa 	srli	r3,r5,3
  8218f0:	573ffe04 	addi	fp,r10,-8
  8218f4:	00800044 	movi	r2,1
  8218f8:	180890fa 	slli	r4,r3,3
  8218fc:	1807d0ba 	srai	r3,r3,2
  821900:	e1c00117 	ldw	r7,4(fp)
  821904:	5909883a 	add	r4,r11,r4
  821908:	21400217 	ldw	r5,8(r4)
  82190c:	10c4983a 	sll	r2,r2,r3
  821910:	81000315 	stw	r4,12(r16)
  821914:	81400215 	stw	r5,8(r16)
  821918:	388eb03a 	or	r7,r7,r2
  82191c:	2c000315 	stw	r16,12(r5)
  821920:	24000215 	stw	r16,8(r4)
  821924:	e1c00115 	stw	r7,4(fp)
  821928:	4807883a 	mov	r3,r9
  82192c:	4800cd16 	blt	r9,zero,821c64 <_malloc_r+0x554>
  821930:	1807d0ba 	srai	r3,r3,2
  821934:	00800044 	movi	r2,1
  821938:	10c8983a 	sll	r4,r2,r3
  82193c:	39004436 	bltu	r7,r4,821a50 <_malloc_r+0x340>
  821940:	21c4703a 	and	r2,r4,r7
  821944:	10000a1e 	bne	r2,zero,821970 <_malloc_r+0x260>
  821948:	2109883a 	add	r4,r4,r4
  82194c:	00bfff04 	movi	r2,-4
  821950:	4884703a 	and	r2,r9,r2
  821954:	3906703a 	and	r3,r7,r4
  821958:	12400104 	addi	r9,r2,4
  82195c:	1800041e 	bne	r3,zero,821970 <_malloc_r+0x260>
  821960:	2109883a 	add	r4,r4,r4
  821964:	3904703a 	and	r2,r7,r4
  821968:	4a400104 	addi	r9,r9,4
  82196c:	103ffc26 	beq	r2,zero,821960 <_malloc_r+0x250>
  821970:	480490fa 	slli	r2,r9,3
  821974:	4819883a 	mov	r12,r9
  821978:	023fff04 	movi	r8,-4
  82197c:	589b883a 	add	r13,r11,r2
  821980:	6807883a 	mov	r3,r13
  821984:	014003c4 	movi	r5,15
  821988:	1c000317 	ldw	r16,12(r3)
  82198c:	1c00041e 	bne	r3,r16,8219a0 <_malloc_r+0x290>
  821990:	0000a706 	br	821c30 <_malloc_r+0x520>
  821994:	3000ab0e 	bge	r6,zero,821c44 <_malloc_r+0x534>
  821998:	84000317 	ldw	r16,12(r16)
  82199c:	1c00a426 	beq	r3,r16,821c30 <_malloc_r+0x520>
  8219a0:	80800117 	ldw	r2,4(r16)
  8219a4:	1204703a 	and	r2,r2,r8
  8219a8:	144dc83a 	sub	r6,r2,r17
  8219ac:	29bff90e 	bge	r5,r6,821994 <_malloc_r+0x284>
  8219b0:	81000317 	ldw	r4,12(r16)
  8219b4:	80c00217 	ldw	r3,8(r16)
  8219b8:	89400054 	ori	r5,r17,1
  8219bc:	8445883a 	add	r2,r16,r17
  8219c0:	20c00215 	stw	r3,8(r4)
  8219c4:	19000315 	stw	r4,12(r3)
  8219c8:	81400115 	stw	r5,4(r16)
  8219cc:	1187883a 	add	r3,r2,r6
  8219d0:	31000054 	ori	r4,r6,1
  8219d4:	50800315 	stw	r2,12(r10)
  8219d8:	50800215 	stw	r2,8(r10)
  8219dc:	19800015 	stw	r6,0(r3)
  8219e0:	11000115 	stw	r4,4(r2)
  8219e4:	12800215 	stw	r10,8(r2)
  8219e8:	12800315 	stw	r10,12(r2)
  8219ec:	9009883a 	mov	r4,r18
  8219f0:	082b1000 	call	82b100 <__malloc_unlock>
  8219f4:	80c00204 	addi	r3,r16,8
  8219f8:	003f5906 	br	821760 <_malloc_r+0x50>
  8219fc:	8109883a 	add	r4,r16,r4
  821a00:	20800117 	ldw	r2,4(r4)
  821a04:	80c00217 	ldw	r3,8(r16)
  821a08:	81400317 	ldw	r5,12(r16)
  821a0c:	10800054 	ori	r2,r2,1
  821a10:	20800115 	stw	r2,4(r4)
  821a14:	28c00215 	stw	r3,8(r5)
  821a18:	19400315 	stw	r5,12(r3)
  821a1c:	9009883a 	mov	r4,r18
  821a20:	082b1000 	call	82b100 <__malloc_unlock>
  821a24:	80c00204 	addi	r3,r16,8
  821a28:	003f4d06 	br	821760 <_malloc_r+0x50>
  821a2c:	80800204 	addi	r2,r16,8
  821a30:	14000317 	ldw	r16,12(r2)
  821a34:	143f911e 	bne	r2,r16,82187c <_malloc_r+0x16c>
  821a38:	1a400084 	addi	r9,r3,2
  821a3c:	003f7306 	br	82180c <_malloc_r+0xfc>
  821a40:	88c00054 	ori	r3,r17,1
  821a44:	8445883a 	add	r2,r16,r17
  821a48:	80c00115 	stw	r3,4(r16)
  821a4c:	003fdf06 	br	8219cc <_malloc_r+0x2bc>
  821a50:	e4000217 	ldw	r16,8(fp)
  821a54:	00bfff04 	movi	r2,-4
  821a58:	80c00117 	ldw	r3,4(r16)
  821a5c:	802d883a 	mov	r22,r16
  821a60:	18aa703a 	and	r21,r3,r2
  821a64:	ac401636 	bltu	r21,r17,821ac0 <_malloc_r+0x3b0>
  821a68:	ac49c83a 	sub	r4,r21,r17
  821a6c:	008003c4 	movi	r2,15
  821a70:	1100130e 	bge	r2,r4,821ac0 <_malloc_r+0x3b0>
  821a74:	88800054 	ori	r2,r17,1
  821a78:	8447883a 	add	r3,r16,r17
  821a7c:	80800115 	stw	r2,4(r16)
  821a80:	20800054 	ori	r2,r4,1
  821a84:	18800115 	stw	r2,4(r3)
  821a88:	e0c00215 	stw	r3,8(fp)
  821a8c:	9009883a 	mov	r4,r18
  821a90:	082b1000 	call	82b100 <__malloc_unlock>
  821a94:	80c00204 	addi	r3,r16,8
  821a98:	003f3106 	br	821760 <_malloc_r+0x50>
  821a9c:	39c00117 	ldw	r7,4(r7)
  821aa0:	573ffe04 	addi	fp,r10,-8
  821aa4:	003fa006 	br	821928 <_malloc_r+0x218>
  821aa8:	00801504 	movi	r2,84
  821aac:	10c06736 	bltu	r2,r3,821c4c <_malloc_r+0x53c>
  821ab0:	8804d33a 	srli	r2,r17,12
  821ab4:	11801b84 	addi	r6,r2,110
  821ab8:	300490fa 	slli	r2,r6,3
  821abc:	003f4106 	br	8217c4 <_malloc_r+0xb4>
  821ac0:	d0a76317 	ldw	r2,-25204(gp)
  821ac4:	d0e00917 	ldw	r3,-32732(gp)
  821ac8:	053fffc4 	movi	r20,-1
  821acc:	10800404 	addi	r2,r2,16
  821ad0:	88a7883a 	add	r19,r17,r2
  821ad4:	1d000326 	beq	r3,r20,821ae4 <_malloc_r+0x3d4>
  821ad8:	98c3ffc4 	addi	r3,r19,4095
  821adc:	00bc0004 	movi	r2,-4096
  821ae0:	18a6703a 	and	r19,r3,r2
  821ae4:	9009883a 	mov	r4,r18
  821ae8:	980b883a 	mov	r5,r19
  821aec:	08227a40 	call	8227a4 <_sbrk_r>
  821af0:	1009883a 	mov	r4,r2
  821af4:	15000426 	beq	r2,r20,821b08 <_malloc_r+0x3f8>
  821af8:	854b883a 	add	r5,r16,r21
  821afc:	1029883a 	mov	r20,r2
  821b00:	11405a2e 	bgeu	r2,r5,821c6c <_malloc_r+0x55c>
  821b04:	87000c26 	beq	r16,fp,821b38 <_malloc_r+0x428>
  821b08:	e4000217 	ldw	r16,8(fp)
  821b0c:	80c00117 	ldw	r3,4(r16)
  821b10:	00bfff04 	movi	r2,-4
  821b14:	1884703a 	and	r2,r3,r2
  821b18:	14400336 	bltu	r2,r17,821b28 <_malloc_r+0x418>
  821b1c:	1449c83a 	sub	r4,r2,r17
  821b20:	008003c4 	movi	r2,15
  821b24:	113fd316 	blt	r2,r4,821a74 <_malloc_r+0x364>
  821b28:	9009883a 	mov	r4,r18
  821b2c:	082b1000 	call	82b100 <__malloc_unlock>
  821b30:	0007883a 	mov	r3,zero
  821b34:	003f0a06 	br	821760 <_malloc_r+0x50>
  821b38:	05c02134 	movhi	r23,132
  821b3c:	bdca5804 	addi	r23,r23,10592
  821b40:	b8800017 	ldw	r2,0(r23)
  821b44:	988d883a 	add	r6,r19,r2
  821b48:	b9800015 	stw	r6,0(r23)
  821b4c:	d0e00917 	ldw	r3,-32732(gp)
  821b50:	00bfffc4 	movi	r2,-1
  821b54:	18808e26 	beq	r3,r2,821d90 <_malloc_r+0x680>
  821b58:	2145c83a 	sub	r2,r4,r5
  821b5c:	3085883a 	add	r2,r6,r2
  821b60:	b8800015 	stw	r2,0(r23)
  821b64:	20c001cc 	andi	r3,r4,7
  821b68:	18005f1e 	bne	r3,zero,821ce8 <_malloc_r+0x5d8>
  821b6c:	000b883a 	mov	r5,zero
  821b70:	a4c5883a 	add	r2,r20,r19
  821b74:	1083ffcc 	andi	r2,r2,4095
  821b78:	00c40004 	movi	r3,4096
  821b7c:	1887c83a 	sub	r3,r3,r2
  821b80:	28e7883a 	add	r19,r5,r3
  821b84:	9009883a 	mov	r4,r18
  821b88:	980b883a 	mov	r5,r19
  821b8c:	08227a40 	call	8227a4 <_sbrk_r>
  821b90:	1007883a 	mov	r3,r2
  821b94:	00bfffc4 	movi	r2,-1
  821b98:	18807a26 	beq	r3,r2,821d84 <_malloc_r+0x674>
  821b9c:	1d05c83a 	sub	r2,r3,r20
  821ba0:	9885883a 	add	r2,r19,r2
  821ba4:	10c00054 	ori	r3,r2,1
  821ba8:	b8800017 	ldw	r2,0(r23)
  821bac:	a021883a 	mov	r16,r20
  821bb0:	a0c00115 	stw	r3,4(r20)
  821bb4:	9885883a 	add	r2,r19,r2
  821bb8:	b8800015 	stw	r2,0(r23)
  821bbc:	e5000215 	stw	r20,8(fp)
  821bc0:	b7003626 	beq	r22,fp,821c9c <_malloc_r+0x58c>
  821bc4:	018003c4 	movi	r6,15
  821bc8:	35404b36 	bltu	r6,r21,821cf8 <_malloc_r+0x5e8>
  821bcc:	00800044 	movi	r2,1
  821bd0:	a0800115 	stw	r2,4(r20)
  821bd4:	003fcd06 	br	821b0c <_malloc_r+0x3fc>
  821bd8:	2808d27a 	srli	r4,r5,9
  821bdc:	2000371e 	bne	r4,zero,821cbc <_malloc_r+0x5ac>
  821be0:	2808d0fa 	srli	r4,r5,3
  821be4:	200690fa 	slli	r3,r4,3
  821be8:	1ad1883a 	add	r8,r3,r11
  821bec:	41800217 	ldw	r6,8(r8)
  821bf0:	41805b26 	beq	r8,r6,821d60 <_malloc_r+0x650>
  821bf4:	30800117 	ldw	r2,4(r6)
  821bf8:	00ffff04 	movi	r3,-4
  821bfc:	10c4703a 	and	r2,r2,r3
  821c00:	2880022e 	bgeu	r5,r2,821c0c <_malloc_r+0x4fc>
  821c04:	31800217 	ldw	r6,8(r6)
  821c08:	41bffa1e 	bne	r8,r6,821bf4 <_malloc_r+0x4e4>
  821c0c:	32000317 	ldw	r8,12(r6)
  821c10:	39c00117 	ldw	r7,4(r7)
  821c14:	82000315 	stw	r8,12(r16)
  821c18:	81800215 	stw	r6,8(r16)
  821c1c:	07002134 	movhi	fp,132
  821c20:	e73cf104 	addi	fp,fp,-3132
  821c24:	34000315 	stw	r16,12(r6)
  821c28:	44000215 	stw	r16,8(r8)
  821c2c:	003f3e06 	br	821928 <_malloc_r+0x218>
  821c30:	63000044 	addi	r12,r12,1
  821c34:	608000cc 	andi	r2,r12,3
  821c38:	10005d26 	beq	r2,zero,821db0 <_malloc_r+0x6a0>
  821c3c:	18c00204 	addi	r3,r3,8
  821c40:	003f5106 	br	821988 <_malloc_r+0x278>
  821c44:	8089883a 	add	r4,r16,r2
  821c48:	003f6d06 	br	821a00 <_malloc_r+0x2f0>
  821c4c:	00805504 	movi	r2,340
  821c50:	10c02036 	bltu	r2,r3,821cd4 <_malloc_r+0x5c4>
  821c54:	8804d3fa 	srli	r2,r17,15
  821c58:	11801dc4 	addi	r6,r2,119
  821c5c:	300490fa 	slli	r2,r6,3
  821c60:	003ed806 	br	8217c4 <_malloc_r+0xb4>
  821c64:	48c000c4 	addi	r3,r9,3
  821c68:	003f3106 	br	821930 <_malloc_r+0x220>
  821c6c:	05c02134 	movhi	r23,132
  821c70:	bdca5804 	addi	r23,r23,10592
  821c74:	b8800017 	ldw	r2,0(r23)
  821c78:	988d883a 	add	r6,r19,r2
  821c7c:	b9800015 	stw	r6,0(r23)
  821c80:	293fb21e 	bne	r5,r4,821b4c <_malloc_r+0x43c>
  821c84:	2083ffcc 	andi	r2,r4,4095
  821c88:	103fb01e 	bne	r2,zero,821b4c <_malloc_r+0x43c>
  821c8c:	e4000217 	ldw	r16,8(fp)
  821c90:	9d45883a 	add	r2,r19,r21
  821c94:	10800054 	ori	r2,r2,1
  821c98:	80800115 	stw	r2,4(r16)
  821c9c:	b8c00017 	ldw	r3,0(r23)
  821ca0:	d0a76417 	ldw	r2,-25200(gp)
  821ca4:	10c0012e 	bgeu	r2,r3,821cac <_malloc_r+0x59c>
  821ca8:	d0e76415 	stw	r3,-25200(gp)
  821cac:	d0a76517 	ldw	r2,-25196(gp)
  821cb0:	10ff962e 	bgeu	r2,r3,821b0c <_malloc_r+0x3fc>
  821cb4:	d0e76515 	stw	r3,-25196(gp)
  821cb8:	003f9406 	br	821b0c <_malloc_r+0x3fc>
  821cbc:	00800104 	movi	r2,4
  821cc0:	11001e36 	bltu	r2,r4,821d3c <_malloc_r+0x62c>
  821cc4:	2804d1ba 	srli	r2,r5,6
  821cc8:	11000e04 	addi	r4,r2,56
  821ccc:	200690fa 	slli	r3,r4,3
  821cd0:	003fc506 	br	821be8 <_malloc_r+0x4d8>
  821cd4:	00815504 	movi	r2,1364
  821cd8:	10c01d2e 	bgeu	r2,r3,821d50 <_malloc_r+0x640>
  821cdc:	01801f84 	movi	r6,126
  821ce0:	0080fc04 	movi	r2,1008
  821ce4:	003eb706 	br	8217c4 <_malloc_r+0xb4>
  821ce8:	00800204 	movi	r2,8
  821cec:	10cbc83a 	sub	r5,r2,r3
  821cf0:	2169883a 	add	r20,r4,r5
  821cf4:	003f9e06 	br	821b70 <_malloc_r+0x460>
  821cf8:	00bffe04 	movi	r2,-8
  821cfc:	a93ffd04 	addi	r4,r21,-12
  821d00:	2088703a 	and	r4,r4,r2
  821d04:	b10b883a 	add	r5,r22,r4
  821d08:	00c00144 	movi	r3,5
  821d0c:	28c00215 	stw	r3,8(r5)
  821d10:	28c00115 	stw	r3,4(r5)
  821d14:	b0800117 	ldw	r2,4(r22)
  821d18:	1080004c 	andi	r2,r2,1
  821d1c:	2084b03a 	or	r2,r4,r2
  821d20:	b0800115 	stw	r2,4(r22)
  821d24:	313fdd2e 	bgeu	r6,r4,821c9c <_malloc_r+0x58c>
  821d28:	b1400204 	addi	r5,r22,8
  821d2c:	9009883a 	mov	r4,r18
  821d30:	08279ec0 	call	8279ec <_free_r>
  821d34:	e4000217 	ldw	r16,8(fp)
  821d38:	003fd806 	br	821c9c <_malloc_r+0x58c>
  821d3c:	00800504 	movi	r2,20
  821d40:	11001536 	bltu	r2,r4,821d98 <_malloc_r+0x688>
  821d44:	210016c4 	addi	r4,r4,91
  821d48:	200690fa 	slli	r3,r4,3
  821d4c:	003fa606 	br	821be8 <_malloc_r+0x4d8>
  821d50:	8804d4ba 	srli	r2,r17,18
  821d54:	11801f04 	addi	r6,r2,124
  821d58:	300490fa 	slli	r2,r6,3
  821d5c:	003e9906 	br	8217c4 <_malloc_r+0xb4>
  821d60:	2009d0ba 	srai	r4,r4,2
  821d64:	01402134 	movhi	r5,132
  821d68:	297cf104 	addi	r5,r5,-3132
  821d6c:	00c00044 	movi	r3,1
  821d70:	28800117 	ldw	r2,4(r5)
  821d74:	1906983a 	sll	r3,r3,r4
  821d78:	10c4b03a 	or	r2,r2,r3
  821d7c:	28800115 	stw	r2,4(r5)
  821d80:	003fa306 	br	821c10 <_malloc_r+0x500>
  821d84:	0027883a 	mov	r19,zero
  821d88:	00c00044 	movi	r3,1
  821d8c:	003f8606 	br	821ba8 <_malloc_r+0x498>
  821d90:	d1200915 	stw	r4,-32732(gp)
  821d94:	003f7306 	br	821b64 <_malloc_r+0x454>
  821d98:	00801504 	movi	r2,84
  821d9c:	11001936 	bltu	r2,r4,821e04 <_malloc_r+0x6f4>
  821da0:	2804d33a 	srli	r2,r5,12
  821da4:	11001b84 	addi	r4,r2,110
  821da8:	200690fa 	slli	r3,r4,3
  821dac:	003f8e06 	br	821be8 <_malloc_r+0x4d8>
  821db0:	480b883a 	mov	r5,r9
  821db4:	6807883a 	mov	r3,r13
  821db8:	288000cc 	andi	r2,r5,3
  821dbc:	18fffe04 	addi	r3,r3,-8
  821dc0:	297fffc4 	addi	r5,r5,-1
  821dc4:	10001526 	beq	r2,zero,821e1c <_malloc_r+0x70c>
  821dc8:	18800217 	ldw	r2,8(r3)
  821dcc:	10fffa26 	beq	r2,r3,821db8 <_malloc_r+0x6a8>
  821dd0:	2109883a 	add	r4,r4,r4
  821dd4:	393f1e36 	bltu	r7,r4,821a50 <_malloc_r+0x340>
  821dd8:	203f1d26 	beq	r4,zero,821a50 <_malloc_r+0x340>
  821ddc:	21c4703a 	and	r2,r4,r7
  821de0:	10000226 	beq	r2,zero,821dec <_malloc_r+0x6dc>
  821de4:	6013883a 	mov	r9,r12
  821de8:	003ee106 	br	821970 <_malloc_r+0x260>
  821dec:	2109883a 	add	r4,r4,r4
  821df0:	3904703a 	and	r2,r7,r4
  821df4:	63000104 	addi	r12,r12,4
  821df8:	103ffc26 	beq	r2,zero,821dec <_malloc_r+0x6dc>
  821dfc:	6013883a 	mov	r9,r12
  821e00:	003edb06 	br	821970 <_malloc_r+0x260>
  821e04:	00805504 	movi	r2,340
  821e08:	11000836 	bltu	r2,r4,821e2c <_malloc_r+0x71c>
  821e0c:	2804d3fa 	srli	r2,r5,15
  821e10:	11001dc4 	addi	r4,r2,119
  821e14:	200690fa 	slli	r3,r4,3
  821e18:	003f7306 	br	821be8 <_malloc_r+0x4d8>
  821e1c:	0104303a 	nor	r2,zero,r4
  821e20:	388e703a 	and	r7,r7,r2
  821e24:	e1c00115 	stw	r7,4(fp)
  821e28:	003fe906 	br	821dd0 <_malloc_r+0x6c0>
  821e2c:	00815504 	movi	r2,1364
  821e30:	1100032e 	bgeu	r2,r4,821e40 <_malloc_r+0x730>
  821e34:	01001f84 	movi	r4,126
  821e38:	00c0fc04 	movi	r3,1008
  821e3c:	003f6a06 	br	821be8 <_malloc_r+0x4d8>
  821e40:	2804d4ba 	srli	r2,r5,18
  821e44:	11001f04 	addi	r4,r2,124
  821e48:	200690fa 	slli	r3,r4,3
  821e4c:	003f6606 	br	821be8 <_malloc_r+0x4d8>

00821e50 <memcpy>:
  821e50:	01c003c4 	movi	r7,15
  821e54:	2007883a 	mov	r3,r4
  821e58:	3980032e 	bgeu	r7,r6,821e68 <memcpy+0x18>
  821e5c:	2904b03a 	or	r2,r5,r4
  821e60:	108000cc 	andi	r2,r2,3
  821e64:	10000926 	beq	r2,zero,821e8c <memcpy+0x3c>
  821e68:	30000626 	beq	r6,zero,821e84 <memcpy+0x34>
  821e6c:	30cd883a 	add	r6,r6,r3
  821e70:	28800003 	ldbu	r2,0(r5)
  821e74:	29400044 	addi	r5,r5,1
  821e78:	18800005 	stb	r2,0(r3)
  821e7c:	18c00044 	addi	r3,r3,1
  821e80:	30fffb1e 	bne	r6,r3,821e70 <memcpy+0x20>
  821e84:	2005883a 	mov	r2,r4
  821e88:	f800283a 	ret
  821e8c:	3811883a 	mov	r8,r7
  821e90:	200f883a 	mov	r7,r4
  821e94:	28c00017 	ldw	r3,0(r5)
  821e98:	31bffc04 	addi	r6,r6,-16
  821e9c:	38c00015 	stw	r3,0(r7)
  821ea0:	28800117 	ldw	r2,4(r5)
  821ea4:	38800115 	stw	r2,4(r7)
  821ea8:	28c00217 	ldw	r3,8(r5)
  821eac:	38c00215 	stw	r3,8(r7)
  821eb0:	28800317 	ldw	r2,12(r5)
  821eb4:	29400404 	addi	r5,r5,16
  821eb8:	38800315 	stw	r2,12(r7)
  821ebc:	39c00404 	addi	r7,r7,16
  821ec0:	41bff436 	bltu	r8,r6,821e94 <memcpy+0x44>
  821ec4:	008000c4 	movi	r2,3
  821ec8:	1180072e 	bgeu	r2,r6,821ee8 <memcpy+0x98>
  821ecc:	1007883a 	mov	r3,r2
  821ed0:	28800017 	ldw	r2,0(r5)
  821ed4:	31bfff04 	addi	r6,r6,-4
  821ed8:	29400104 	addi	r5,r5,4
  821edc:	38800015 	stw	r2,0(r7)
  821ee0:	39c00104 	addi	r7,r7,4
  821ee4:	19bffa36 	bltu	r3,r6,821ed0 <memcpy+0x80>
  821ee8:	3807883a 	mov	r3,r7
  821eec:	003fde06 	br	821e68 <memcpy+0x18>

00821ef0 <memmove>:
  821ef0:	2807883a 	mov	r3,r5
  821ef4:	2011883a 	mov	r8,r4
  821ef8:	29000c2e 	bgeu	r5,r4,821f2c <memmove+0x3c>
  821efc:	298f883a 	add	r7,r5,r6
  821f00:	21c00a2e 	bgeu	r4,r7,821f2c <memmove+0x3c>
  821f04:	30000726 	beq	r6,zero,821f24 <memmove+0x34>
  821f08:	2187883a 	add	r3,r4,r6
  821f0c:	198dc83a 	sub	r6,r3,r6
  821f10:	39ffffc4 	addi	r7,r7,-1
  821f14:	38800003 	ldbu	r2,0(r7)
  821f18:	18ffffc4 	addi	r3,r3,-1
  821f1c:	18800005 	stb	r2,0(r3)
  821f20:	19bffb1e 	bne	r3,r6,821f10 <memmove+0x20>
  821f24:	2005883a 	mov	r2,r4
  821f28:	f800283a 	ret
  821f2c:	01c003c4 	movi	r7,15
  821f30:	39800a36 	bltu	r7,r6,821f5c <memmove+0x6c>
  821f34:	303ffb26 	beq	r6,zero,821f24 <memmove+0x34>
  821f38:	400f883a 	mov	r7,r8
  821f3c:	320d883a 	add	r6,r6,r8
  821f40:	28800003 	ldbu	r2,0(r5)
  821f44:	29400044 	addi	r5,r5,1
  821f48:	38800005 	stb	r2,0(r7)
  821f4c:	39c00044 	addi	r7,r7,1
  821f50:	39bffb1e 	bne	r7,r6,821f40 <memmove+0x50>
  821f54:	2005883a 	mov	r2,r4
  821f58:	f800283a 	ret
  821f5c:	1904b03a 	or	r2,r3,r4
  821f60:	108000cc 	andi	r2,r2,3
  821f64:	103ff31e 	bne	r2,zero,821f34 <memmove+0x44>
  821f68:	3811883a 	mov	r8,r7
  821f6c:	180b883a 	mov	r5,r3
  821f70:	200f883a 	mov	r7,r4
  821f74:	28c00017 	ldw	r3,0(r5)
  821f78:	31bffc04 	addi	r6,r6,-16
  821f7c:	38c00015 	stw	r3,0(r7)
  821f80:	28800117 	ldw	r2,4(r5)
  821f84:	38800115 	stw	r2,4(r7)
  821f88:	28c00217 	ldw	r3,8(r5)
  821f8c:	38c00215 	stw	r3,8(r7)
  821f90:	28800317 	ldw	r2,12(r5)
  821f94:	29400404 	addi	r5,r5,16
  821f98:	38800315 	stw	r2,12(r7)
  821f9c:	39c00404 	addi	r7,r7,16
  821fa0:	41bff436 	bltu	r8,r6,821f74 <memmove+0x84>
  821fa4:	008000c4 	movi	r2,3
  821fa8:	1180072e 	bgeu	r2,r6,821fc8 <memmove+0xd8>
  821fac:	1007883a 	mov	r3,r2
  821fb0:	28800017 	ldw	r2,0(r5)
  821fb4:	31bfff04 	addi	r6,r6,-4
  821fb8:	29400104 	addi	r5,r5,4
  821fbc:	38800015 	stw	r2,0(r7)
  821fc0:	39c00104 	addi	r7,r7,4
  821fc4:	19bffa36 	bltu	r3,r6,821fb0 <memmove+0xc0>
  821fc8:	3811883a 	mov	r8,r7
  821fcc:	003fd906 	br	821f34 <memmove+0x44>

00821fd0 <memset>:
  821fd0:	008000c4 	movi	r2,3
  821fd4:	29403fcc 	andi	r5,r5,255
  821fd8:	2007883a 	mov	r3,r4
  821fdc:	1180022e 	bgeu	r2,r6,821fe8 <memset+0x18>
  821fe0:	2084703a 	and	r2,r4,r2
  821fe4:	10000826 	beq	r2,zero,822008 <memset+0x38>
  821fe8:	30000526 	beq	r6,zero,822000 <memset+0x30>
  821fec:	2805883a 	mov	r2,r5
  821ff0:	30cd883a 	add	r6,r6,r3
  821ff4:	18800005 	stb	r2,0(r3)
  821ff8:	18c00044 	addi	r3,r3,1
  821ffc:	19bffd1e 	bne	r3,r6,821ff4 <memset+0x24>
  822000:	2005883a 	mov	r2,r4
  822004:	f800283a 	ret
  822008:	2804923a 	slli	r2,r5,8
  82200c:	020003c4 	movi	r8,15
  822010:	200f883a 	mov	r7,r4
  822014:	2884b03a 	or	r2,r5,r2
  822018:	1006943a 	slli	r3,r2,16
  82201c:	10c6b03a 	or	r3,r2,r3
  822020:	41800a2e 	bgeu	r8,r6,82204c <memset+0x7c>
  822024:	4005883a 	mov	r2,r8
  822028:	31bffc04 	addi	r6,r6,-16
  82202c:	38c00015 	stw	r3,0(r7)
  822030:	38c00115 	stw	r3,4(r7)
  822034:	38c00215 	stw	r3,8(r7)
  822038:	38c00315 	stw	r3,12(r7)
  82203c:	39c00404 	addi	r7,r7,16
  822040:	11bff936 	bltu	r2,r6,822028 <memset+0x58>
  822044:	008000c4 	movi	r2,3
  822048:	1180052e 	bgeu	r2,r6,822060 <memset+0x90>
  82204c:	31bfff04 	addi	r6,r6,-4
  822050:	008000c4 	movi	r2,3
  822054:	38c00015 	stw	r3,0(r7)
  822058:	39c00104 	addi	r7,r7,4
  82205c:	11bffb36 	bltu	r2,r6,82204c <memset+0x7c>
  822060:	3807883a 	mov	r3,r7
  822064:	003fe006 	br	821fe8 <memset+0x18>

00822068 <printf>:
  822068:	defffb04 	addi	sp,sp,-20
  82206c:	dfc00115 	stw	ra,4(sp)
  822070:	d9400215 	stw	r5,8(sp)
  822074:	d9800315 	stw	r6,12(sp)
  822078:	d9c00415 	stw	r7,16(sp)
  82207c:	00802134 	movhi	r2,132
  822080:	1082e104 	addi	r2,r2,2948
  822084:	10c00017 	ldw	r3,0(r2)
  822088:	200b883a 	mov	r5,r4
  82208c:	d8800204 	addi	r2,sp,8
  822090:	19000217 	ldw	r4,8(r3)
  822094:	100d883a 	mov	r6,r2
  822098:	d8800015 	stw	r2,0(sp)
  82209c:	08258f00 	call	8258f0 <__vfprintf_internal>
  8220a0:	dfc00117 	ldw	ra,4(sp)
  8220a4:	dec00504 	addi	sp,sp,20
  8220a8:	f800283a 	ret

008220ac <_printf_r>:
  8220ac:	defffc04 	addi	sp,sp,-16
  8220b0:	dfc00115 	stw	ra,4(sp)
  8220b4:	d9800215 	stw	r6,8(sp)
  8220b8:	d9c00315 	stw	r7,12(sp)
  8220bc:	280d883a 	mov	r6,r5
  8220c0:	21400217 	ldw	r5,8(r4)
  8220c4:	d8c00204 	addi	r3,sp,8
  8220c8:	180f883a 	mov	r7,r3
  8220cc:	d8c00015 	stw	r3,0(sp)
  8220d0:	0823a440 	call	823a44 <___vfprintf_internal_r>
  8220d4:	dfc00117 	ldw	ra,4(sp)
  8220d8:	dec00404 	addi	sp,sp,16
  8220dc:	f800283a 	ret

008220e0 <_puts_r>:
  8220e0:	defff604 	addi	sp,sp,-40
  8220e4:	dc400715 	stw	r17,28(sp)
  8220e8:	2023883a 	mov	r17,r4
  8220ec:	2809883a 	mov	r4,r5
  8220f0:	dfc00915 	stw	ra,36(sp)
  8220f4:	dcc00815 	stw	r19,32(sp)
  8220f8:	2827883a 	mov	r19,r5
  8220fc:	0822e100 	call	822e10 <strlen>
  822100:	89400217 	ldw	r5,8(r17)
  822104:	00c020f4 	movhi	r3,131
  822108:	18ce1304 	addi	r3,r3,14412
  82210c:	01c00044 	movi	r7,1
  822110:	12000044 	addi	r8,r2,1
  822114:	d8c00515 	stw	r3,20(sp)
  822118:	d9c00615 	stw	r7,24(sp)
  82211c:	d8c00304 	addi	r3,sp,12
  822120:	01c00084 	movi	r7,2
  822124:	8809883a 	mov	r4,r17
  822128:	d80d883a 	mov	r6,sp
  82212c:	d8c00015 	stw	r3,0(sp)
  822130:	dcc00315 	stw	r19,12(sp)
  822134:	da000215 	stw	r8,8(sp)
  822138:	d9c00115 	stw	r7,4(sp)
  82213c:	d8800415 	stw	r2,16(sp)
  822140:	0827d000 	call	827d00 <__sfvwrite_r>
  822144:	00ffffc4 	movi	r3,-1
  822148:	10000626 	beq	r2,zero,822164 <_puts_r+0x84>
  82214c:	1805883a 	mov	r2,r3
  822150:	dfc00917 	ldw	ra,36(sp)
  822154:	dcc00817 	ldw	r19,32(sp)
  822158:	dc400717 	ldw	r17,28(sp)
  82215c:	dec00a04 	addi	sp,sp,40
  822160:	f800283a 	ret
  822164:	00c00284 	movi	r3,10
  822168:	1805883a 	mov	r2,r3
  82216c:	dfc00917 	ldw	ra,36(sp)
  822170:	dcc00817 	ldw	r19,32(sp)
  822174:	dc400717 	ldw	r17,28(sp)
  822178:	dec00a04 	addi	sp,sp,40
  82217c:	f800283a 	ret

00822180 <puts>:
  822180:	00802134 	movhi	r2,132
  822184:	1082e104 	addi	r2,r2,2948
  822188:	200b883a 	mov	r5,r4
  82218c:	11000017 	ldw	r4,0(r2)
  822190:	08220e01 	jmpi	8220e0 <_puts_r>

00822194 <realloc>:
  822194:	01802134 	movhi	r6,132
  822198:	3182e104 	addi	r6,r6,2948
  82219c:	2007883a 	mov	r3,r4
  8221a0:	31000017 	ldw	r4,0(r6)
  8221a4:	280d883a 	mov	r6,r5
  8221a8:	180b883a 	mov	r5,r3
  8221ac:	08221b01 	jmpi	8221b0 <_realloc_r>

008221b0 <_realloc_r>:
  8221b0:	defff404 	addi	sp,sp,-48
  8221b4:	dd800815 	stw	r22,32(sp)
  8221b8:	dc800415 	stw	r18,16(sp)
  8221bc:	dc400315 	stw	r17,12(sp)
  8221c0:	dfc00b15 	stw	ra,44(sp)
  8221c4:	df000a15 	stw	fp,40(sp)
  8221c8:	ddc00915 	stw	r23,36(sp)
  8221cc:	dd400715 	stw	r21,28(sp)
  8221d0:	dd000615 	stw	r20,24(sp)
  8221d4:	dcc00515 	stw	r19,20(sp)
  8221d8:	dc000215 	stw	r16,8(sp)
  8221dc:	2825883a 	mov	r18,r5
  8221e0:	3023883a 	mov	r17,r6
  8221e4:	202d883a 	mov	r22,r4
  8221e8:	2800c926 	beq	r5,zero,822510 <_realloc_r+0x360>
  8221ec:	082b0fc0 	call	82b0fc <__malloc_lock>
  8221f0:	943ffe04 	addi	r16,r18,-8
  8221f4:	88c002c4 	addi	r3,r17,11
  8221f8:	00800584 	movi	r2,22
  8221fc:	82000117 	ldw	r8,4(r16)
  822200:	10c01b2e 	bgeu	r2,r3,822270 <_realloc_r+0xc0>
  822204:	00bffe04 	movi	r2,-8
  822208:	188e703a 	and	r7,r3,r2
  82220c:	3839883a 	mov	fp,r7
  822210:	38001a16 	blt	r7,zero,82227c <_realloc_r+0xcc>
  822214:	e4401936 	bltu	fp,r17,82227c <_realloc_r+0xcc>
  822218:	013fff04 	movi	r4,-4
  82221c:	4126703a 	and	r19,r8,r4
  822220:	99c02616 	blt	r19,r7,8222bc <_realloc_r+0x10c>
  822224:	802b883a 	mov	r21,r16
  822228:	9829883a 	mov	r20,r19
  82222c:	84000204 	addi	r16,r16,8
  822230:	a80f883a 	mov	r7,r21
  822234:	a70dc83a 	sub	r6,r20,fp
  822238:	008003c4 	movi	r2,15
  82223c:	1180c136 	bltu	r2,r6,822544 <_realloc_r+0x394>
  822240:	38800117 	ldw	r2,4(r7)
  822244:	a549883a 	add	r4,r20,r21
  822248:	1080004c 	andi	r2,r2,1
  82224c:	a084b03a 	or	r2,r20,r2
  822250:	38800115 	stw	r2,4(r7)
  822254:	20c00117 	ldw	r3,4(r4)
  822258:	18c00054 	ori	r3,r3,1
  82225c:	20c00115 	stw	r3,4(r4)
  822260:	b009883a 	mov	r4,r22
  822264:	082b1000 	call	82b100 <__malloc_unlock>
  822268:	8023883a 	mov	r17,r16
  82226c:	00000606 	br	822288 <_realloc_r+0xd8>
  822270:	01c00404 	movi	r7,16
  822274:	3839883a 	mov	fp,r7
  822278:	e47fe72e 	bgeu	fp,r17,822218 <_realloc_r+0x68>
  82227c:	00800304 	movi	r2,12
  822280:	0023883a 	mov	r17,zero
  822284:	b0800015 	stw	r2,0(r22)
  822288:	8805883a 	mov	r2,r17
  82228c:	dfc00b17 	ldw	ra,44(sp)
  822290:	df000a17 	ldw	fp,40(sp)
  822294:	ddc00917 	ldw	r23,36(sp)
  822298:	dd800817 	ldw	r22,32(sp)
  82229c:	dd400717 	ldw	r21,28(sp)
  8222a0:	dd000617 	ldw	r20,24(sp)
  8222a4:	dcc00517 	ldw	r19,20(sp)
  8222a8:	dc800417 	ldw	r18,16(sp)
  8222ac:	dc400317 	ldw	r17,12(sp)
  8222b0:	dc000217 	ldw	r16,8(sp)
  8222b4:	dec00c04 	addi	sp,sp,48
  8222b8:	f800283a 	ret
  8222bc:	00802134 	movhi	r2,132
  8222c0:	10bcf104 	addi	r2,r2,-3132
  8222c4:	12400217 	ldw	r9,8(r2)
  8222c8:	84cd883a 	add	r6,r16,r19
  8222cc:	802b883a 	mov	r21,r16
  8222d0:	3240b926 	beq	r6,r9,8225b8 <_realloc_r+0x408>
  8222d4:	31400117 	ldw	r5,4(r6)
  8222d8:	00bfff84 	movi	r2,-2
  8222dc:	2884703a 	and	r2,r5,r2
  8222e0:	1185883a 	add	r2,r2,r6
  8222e4:	10c00117 	ldw	r3,4(r2)
  8222e8:	18c0004c 	andi	r3,r3,1
  8222ec:	1807003a 	cmpeq	r3,r3,zero
  8222f0:	1800a326 	beq	r3,zero,822580 <_realloc_r+0x3d0>
  8222f4:	2908703a 	and	r4,r5,r4
  8222f8:	9929883a 	add	r20,r19,r4
  8222fc:	a1c0a30e 	bge	r20,r7,82258c <_realloc_r+0x3dc>
  822300:	4080004c 	andi	r2,r8,1
  822304:	1000551e 	bne	r2,zero,82245c <_realloc_r+0x2ac>
  822308:	80800017 	ldw	r2,0(r16)
  82230c:	80afc83a 	sub	r23,r16,r2
  822310:	b8c00117 	ldw	r3,4(r23)
  822314:	00bfff04 	movi	r2,-4
  822318:	1884703a 	and	r2,r3,r2
  82231c:	30002e26 	beq	r6,zero,8223d8 <_realloc_r+0x228>
  822320:	3240b926 	beq	r6,r9,822608 <_realloc_r+0x458>
  822324:	98a9883a 	add	r20,r19,r2
  822328:	2509883a 	add	r4,r4,r20
  82232c:	d9000015 	stw	r4,0(sp)
  822330:	21c02a16 	blt	r4,r7,8223dc <_realloc_r+0x22c>
  822334:	30800317 	ldw	r2,12(r6)
  822338:	30c00217 	ldw	r3,8(r6)
  82233c:	01400904 	movi	r5,36
  822340:	99bfff04 	addi	r6,r19,-4
  822344:	18800315 	stw	r2,12(r3)
  822348:	10c00215 	stw	r3,8(r2)
  82234c:	b9000317 	ldw	r4,12(r23)
  822350:	b8800217 	ldw	r2,8(r23)
  822354:	b82b883a 	mov	r21,r23
  822358:	bc000204 	addi	r16,r23,8
  82235c:	20800215 	stw	r2,8(r4)
  822360:	11000315 	stw	r4,12(r2)
  822364:	2980e436 	bltu	r5,r6,8226f8 <_realloc_r+0x548>
  822368:	008004c4 	movi	r2,19
  82236c:	9009883a 	mov	r4,r18
  822370:	8011883a 	mov	r8,r16
  822374:	11800f2e 	bgeu	r2,r6,8223b4 <_realloc_r+0x204>
  822378:	90800017 	ldw	r2,0(r18)
  82237c:	ba000404 	addi	r8,r23,16
  822380:	91000204 	addi	r4,r18,8
  822384:	b8800215 	stw	r2,8(r23)
  822388:	90c00117 	ldw	r3,4(r18)
  82238c:	008006c4 	movi	r2,27
  822390:	b8c00315 	stw	r3,12(r23)
  822394:	1180072e 	bgeu	r2,r6,8223b4 <_realloc_r+0x204>
  822398:	90c00217 	ldw	r3,8(r18)
  82239c:	ba000604 	addi	r8,r23,24
  8223a0:	91000404 	addi	r4,r18,16
  8223a4:	b8c00415 	stw	r3,16(r23)
  8223a8:	90800317 	ldw	r2,12(r18)
  8223ac:	b8800515 	stw	r2,20(r23)
  8223b0:	3140e726 	beq	r6,r5,822750 <_realloc_r+0x5a0>
  8223b4:	20800017 	ldw	r2,0(r4)
  8223b8:	dd000017 	ldw	r20,0(sp)
  8223bc:	b80f883a 	mov	r7,r23
  8223c0:	40800015 	stw	r2,0(r8)
  8223c4:	20c00117 	ldw	r3,4(r4)
  8223c8:	40c00115 	stw	r3,4(r8)
  8223cc:	20800217 	ldw	r2,8(r4)
  8223d0:	40800215 	stw	r2,8(r8)
  8223d4:	003f9706 	br	822234 <_realloc_r+0x84>
  8223d8:	98a9883a 	add	r20,r19,r2
  8223dc:	a1c01f16 	blt	r20,r7,82245c <_realloc_r+0x2ac>
  8223e0:	b8c00317 	ldw	r3,12(r23)
  8223e4:	b8800217 	ldw	r2,8(r23)
  8223e8:	99bfff04 	addi	r6,r19,-4
  8223ec:	01400904 	movi	r5,36
  8223f0:	b82b883a 	mov	r21,r23
  8223f4:	18800215 	stw	r2,8(r3)
  8223f8:	10c00315 	stw	r3,12(r2)
  8223fc:	bc000204 	addi	r16,r23,8
  822400:	2980c336 	bltu	r5,r6,822710 <_realloc_r+0x560>
  822404:	008004c4 	movi	r2,19
  822408:	9009883a 	mov	r4,r18
  82240c:	8011883a 	mov	r8,r16
  822410:	11800f2e 	bgeu	r2,r6,822450 <_realloc_r+0x2a0>
  822414:	90800017 	ldw	r2,0(r18)
  822418:	ba000404 	addi	r8,r23,16
  82241c:	91000204 	addi	r4,r18,8
  822420:	b8800215 	stw	r2,8(r23)
  822424:	90c00117 	ldw	r3,4(r18)
  822428:	008006c4 	movi	r2,27
  82242c:	b8c00315 	stw	r3,12(r23)
  822430:	1180072e 	bgeu	r2,r6,822450 <_realloc_r+0x2a0>
  822434:	90c00217 	ldw	r3,8(r18)
  822438:	ba000604 	addi	r8,r23,24
  82243c:	91000404 	addi	r4,r18,16
  822440:	b8c00415 	stw	r3,16(r23)
  822444:	90800317 	ldw	r2,12(r18)
  822448:	b8800515 	stw	r2,20(r23)
  82244c:	3140c726 	beq	r6,r5,82276c <_realloc_r+0x5bc>
  822450:	20800017 	ldw	r2,0(r4)
  822454:	b80f883a 	mov	r7,r23
  822458:	003fd906 	br	8223c0 <_realloc_r+0x210>
  82245c:	880b883a 	mov	r5,r17
  822460:	b009883a 	mov	r4,r22
  822464:	08217100 	call	821710 <_malloc_r>
  822468:	1023883a 	mov	r17,r2
  82246c:	10002526 	beq	r2,zero,822504 <_realloc_r+0x354>
  822470:	80800117 	ldw	r2,4(r16)
  822474:	00ffff84 	movi	r3,-2
  822478:	893ffe04 	addi	r4,r17,-8
  82247c:	10c4703a 	and	r2,r2,r3
  822480:	8085883a 	add	r2,r16,r2
  822484:	20809526 	beq	r4,r2,8226dc <_realloc_r+0x52c>
  822488:	99bfff04 	addi	r6,r19,-4
  82248c:	01c00904 	movi	r7,36
  822490:	39804536 	bltu	r7,r6,8225a8 <_realloc_r+0x3f8>
  822494:	008004c4 	movi	r2,19
  822498:	9009883a 	mov	r4,r18
  82249c:	880b883a 	mov	r5,r17
  8224a0:	11800f2e 	bgeu	r2,r6,8224e0 <_realloc_r+0x330>
  8224a4:	90800017 	ldw	r2,0(r18)
  8224a8:	89400204 	addi	r5,r17,8
  8224ac:	91000204 	addi	r4,r18,8
  8224b0:	88800015 	stw	r2,0(r17)
  8224b4:	90c00117 	ldw	r3,4(r18)
  8224b8:	008006c4 	movi	r2,27
  8224bc:	88c00115 	stw	r3,4(r17)
  8224c0:	1180072e 	bgeu	r2,r6,8224e0 <_realloc_r+0x330>
  8224c4:	90c00217 	ldw	r3,8(r18)
  8224c8:	89400404 	addi	r5,r17,16
  8224cc:	91000404 	addi	r4,r18,16
  8224d0:	88c00215 	stw	r3,8(r17)
  8224d4:	90800317 	ldw	r2,12(r18)
  8224d8:	88800315 	stw	r2,12(r17)
  8224dc:	31c09126 	beq	r6,r7,822724 <_realloc_r+0x574>
  8224e0:	20800017 	ldw	r2,0(r4)
  8224e4:	28800015 	stw	r2,0(r5)
  8224e8:	20c00117 	ldw	r3,4(r4)
  8224ec:	28c00115 	stw	r3,4(r5)
  8224f0:	20800217 	ldw	r2,8(r4)
  8224f4:	28800215 	stw	r2,8(r5)
  8224f8:	900b883a 	mov	r5,r18
  8224fc:	b009883a 	mov	r4,r22
  822500:	08279ec0 	call	8279ec <_free_r>
  822504:	b009883a 	mov	r4,r22
  822508:	082b1000 	call	82b100 <__malloc_unlock>
  82250c:	003f5e06 	br	822288 <_realloc_r+0xd8>
  822510:	300b883a 	mov	r5,r6
  822514:	dfc00b17 	ldw	ra,44(sp)
  822518:	df000a17 	ldw	fp,40(sp)
  82251c:	ddc00917 	ldw	r23,36(sp)
  822520:	dd800817 	ldw	r22,32(sp)
  822524:	dd400717 	ldw	r21,28(sp)
  822528:	dd000617 	ldw	r20,24(sp)
  82252c:	dcc00517 	ldw	r19,20(sp)
  822530:	dc800417 	ldw	r18,16(sp)
  822534:	dc400317 	ldw	r17,12(sp)
  822538:	dc000217 	ldw	r16,8(sp)
  82253c:	dec00c04 	addi	sp,sp,48
  822540:	08217101 	jmpi	821710 <_malloc_r>
  822544:	38800117 	ldw	r2,4(r7)
  822548:	e54b883a 	add	r5,fp,r21
  82254c:	31000054 	ori	r4,r6,1
  822550:	1080004c 	andi	r2,r2,1
  822554:	1704b03a 	or	r2,r2,fp
  822558:	38800115 	stw	r2,4(r7)
  82255c:	29000115 	stw	r4,4(r5)
  822560:	2987883a 	add	r3,r5,r6
  822564:	18800117 	ldw	r2,4(r3)
  822568:	29400204 	addi	r5,r5,8
  82256c:	b009883a 	mov	r4,r22
  822570:	10800054 	ori	r2,r2,1
  822574:	18800115 	stw	r2,4(r3)
  822578:	08279ec0 	call	8279ec <_free_r>
  82257c:	003f3806 	br	822260 <_realloc_r+0xb0>
  822580:	000d883a 	mov	r6,zero
  822584:	0009883a 	mov	r4,zero
  822588:	003f5d06 	br	822300 <_realloc_r+0x150>
  82258c:	30c00217 	ldw	r3,8(r6)
  822590:	30800317 	ldw	r2,12(r6)
  822594:	800f883a 	mov	r7,r16
  822598:	84000204 	addi	r16,r16,8
  82259c:	10c00215 	stw	r3,8(r2)
  8225a0:	18800315 	stw	r2,12(r3)
  8225a4:	003f2306 	br	822234 <_realloc_r+0x84>
  8225a8:	8809883a 	mov	r4,r17
  8225ac:	900b883a 	mov	r5,r18
  8225b0:	0821ef00 	call	821ef0 <memmove>
  8225b4:	003fd006 	br	8224f8 <_realloc_r+0x348>
  8225b8:	30800117 	ldw	r2,4(r6)
  8225bc:	e0c00404 	addi	r3,fp,16
  8225c0:	1108703a 	and	r4,r2,r4
  8225c4:	9905883a 	add	r2,r19,r4
  8225c8:	10ff4d16 	blt	r2,r3,822300 <_realloc_r+0x150>
  8225cc:	1705c83a 	sub	r2,r2,fp
  8225d0:	870b883a 	add	r5,r16,fp
  8225d4:	10800054 	ori	r2,r2,1
  8225d8:	28800115 	stw	r2,4(r5)
  8225dc:	80c00117 	ldw	r3,4(r16)
  8225e0:	00802134 	movhi	r2,132
  8225e4:	10bcf104 	addi	r2,r2,-3132
  8225e8:	b009883a 	mov	r4,r22
  8225ec:	18c0004c 	andi	r3,r3,1
  8225f0:	e0c6b03a 	or	r3,fp,r3
  8225f4:	11400215 	stw	r5,8(r2)
  8225f8:	80c00115 	stw	r3,4(r16)
  8225fc:	082b1000 	call	82b100 <__malloc_unlock>
  822600:	84400204 	addi	r17,r16,8
  822604:	003f2006 	br	822288 <_realloc_r+0xd8>
  822608:	98a9883a 	add	r20,r19,r2
  82260c:	2509883a 	add	r4,r4,r20
  822610:	e0800404 	addi	r2,fp,16
  822614:	d9000115 	stw	r4,4(sp)
  822618:	20bf7016 	blt	r4,r2,8223dc <_realloc_r+0x22c>
  82261c:	b8c00317 	ldw	r3,12(r23)
  822620:	b8800217 	ldw	r2,8(r23)
  822624:	99bfff04 	addi	r6,r19,-4
  822628:	01400904 	movi	r5,36
  82262c:	18800215 	stw	r2,8(r3)
  822630:	10c00315 	stw	r3,12(r2)
  822634:	bc400204 	addi	r17,r23,8
  822638:	29804136 	bltu	r5,r6,822740 <_realloc_r+0x590>
  82263c:	008004c4 	movi	r2,19
  822640:	9009883a 	mov	r4,r18
  822644:	880f883a 	mov	r7,r17
  822648:	11800f2e 	bgeu	r2,r6,822688 <_realloc_r+0x4d8>
  82264c:	90800017 	ldw	r2,0(r18)
  822650:	b9c00404 	addi	r7,r23,16
  822654:	91000204 	addi	r4,r18,8
  822658:	b8800215 	stw	r2,8(r23)
  82265c:	90c00117 	ldw	r3,4(r18)
  822660:	008006c4 	movi	r2,27
  822664:	b8c00315 	stw	r3,12(r23)
  822668:	1180072e 	bgeu	r2,r6,822688 <_realloc_r+0x4d8>
  82266c:	90c00217 	ldw	r3,8(r18)
  822670:	b9c00604 	addi	r7,r23,24
  822674:	91000404 	addi	r4,r18,16
  822678:	b8c00415 	stw	r3,16(r23)
  82267c:	90800317 	ldw	r2,12(r18)
  822680:	b8800515 	stw	r2,20(r23)
  822684:	31404026 	beq	r6,r5,822788 <_realloc_r+0x5d8>
  822688:	20800017 	ldw	r2,0(r4)
  82268c:	38800015 	stw	r2,0(r7)
  822690:	20c00117 	ldw	r3,4(r4)
  822694:	38c00115 	stw	r3,4(r7)
  822698:	20800217 	ldw	r2,8(r4)
  82269c:	38800215 	stw	r2,8(r7)
  8226a0:	d8c00117 	ldw	r3,4(sp)
  8226a4:	bf0b883a 	add	r5,r23,fp
  8226a8:	b009883a 	mov	r4,r22
  8226ac:	1f05c83a 	sub	r2,r3,fp
  8226b0:	10800054 	ori	r2,r2,1
  8226b4:	28800115 	stw	r2,4(r5)
  8226b8:	b8c00117 	ldw	r3,4(r23)
  8226bc:	00802134 	movhi	r2,132
  8226c0:	10bcf104 	addi	r2,r2,-3132
  8226c4:	11400215 	stw	r5,8(r2)
  8226c8:	18c0004c 	andi	r3,r3,1
  8226cc:	e0c6b03a 	or	r3,fp,r3
  8226d0:	b8c00115 	stw	r3,4(r23)
  8226d4:	082b1000 	call	82b100 <__malloc_unlock>
  8226d8:	003eeb06 	br	822288 <_realloc_r+0xd8>
  8226dc:	20800117 	ldw	r2,4(r4)
  8226e0:	00ffff04 	movi	r3,-4
  8226e4:	800f883a 	mov	r7,r16
  8226e8:	10c4703a 	and	r2,r2,r3
  8226ec:	98a9883a 	add	r20,r19,r2
  8226f0:	84000204 	addi	r16,r16,8
  8226f4:	003ecf06 	br	822234 <_realloc_r+0x84>
  8226f8:	900b883a 	mov	r5,r18
  8226fc:	8009883a 	mov	r4,r16
  822700:	0821ef00 	call	821ef0 <memmove>
  822704:	dd000017 	ldw	r20,0(sp)
  822708:	b80f883a 	mov	r7,r23
  82270c:	003ec906 	br	822234 <_realloc_r+0x84>
  822710:	900b883a 	mov	r5,r18
  822714:	8009883a 	mov	r4,r16
  822718:	0821ef00 	call	821ef0 <memmove>
  82271c:	b80f883a 	mov	r7,r23
  822720:	003ec406 	br	822234 <_realloc_r+0x84>
  822724:	90c00417 	ldw	r3,16(r18)
  822728:	89400604 	addi	r5,r17,24
  82272c:	91000604 	addi	r4,r18,24
  822730:	88c00415 	stw	r3,16(r17)
  822734:	90800517 	ldw	r2,20(r18)
  822738:	88800515 	stw	r2,20(r17)
  82273c:	003f6806 	br	8224e0 <_realloc_r+0x330>
  822740:	900b883a 	mov	r5,r18
  822744:	8809883a 	mov	r4,r17
  822748:	0821ef00 	call	821ef0 <memmove>
  82274c:	003fd406 	br	8226a0 <_realloc_r+0x4f0>
  822750:	90c00417 	ldw	r3,16(r18)
  822754:	91000604 	addi	r4,r18,24
  822758:	ba000804 	addi	r8,r23,32
  82275c:	b8c00615 	stw	r3,24(r23)
  822760:	90800517 	ldw	r2,20(r18)
  822764:	b8800715 	stw	r2,28(r23)
  822768:	003f1206 	br	8223b4 <_realloc_r+0x204>
  82276c:	90c00417 	ldw	r3,16(r18)
  822770:	91000604 	addi	r4,r18,24
  822774:	ba000804 	addi	r8,r23,32
  822778:	b8c00615 	stw	r3,24(r23)
  82277c:	90800517 	ldw	r2,20(r18)
  822780:	b8800715 	stw	r2,28(r23)
  822784:	003f3206 	br	822450 <_realloc_r+0x2a0>
  822788:	90c00417 	ldw	r3,16(r18)
  82278c:	91000604 	addi	r4,r18,24
  822790:	b9c00804 	addi	r7,r23,32
  822794:	b8c00615 	stw	r3,24(r23)
  822798:	90800517 	ldw	r2,20(r18)
  82279c:	b8800715 	stw	r2,28(r23)
  8227a0:	003fb906 	br	822688 <_realloc_r+0x4d8>

008227a4 <_sbrk_r>:
  8227a4:	defffd04 	addi	sp,sp,-12
  8227a8:	dc000015 	stw	r16,0(sp)
  8227ac:	04002134 	movhi	r16,132
  8227b0:	840a4104 	addi	r16,r16,10500
  8227b4:	dc400115 	stw	r17,4(sp)
  8227b8:	80000015 	stw	zero,0(r16)
  8227bc:	2023883a 	mov	r17,r4
  8227c0:	2809883a 	mov	r4,r5
  8227c4:	dfc00215 	stw	ra,8(sp)
  8227c8:	082b2440 	call	82b244 <sbrk>
  8227cc:	1007883a 	mov	r3,r2
  8227d0:	00bfffc4 	movi	r2,-1
  8227d4:	18800626 	beq	r3,r2,8227f0 <_sbrk_r+0x4c>
  8227d8:	1805883a 	mov	r2,r3
  8227dc:	dfc00217 	ldw	ra,8(sp)
  8227e0:	dc400117 	ldw	r17,4(sp)
  8227e4:	dc000017 	ldw	r16,0(sp)
  8227e8:	dec00304 	addi	sp,sp,12
  8227ec:	f800283a 	ret
  8227f0:	80800017 	ldw	r2,0(r16)
  8227f4:	103ff826 	beq	r2,zero,8227d8 <_sbrk_r+0x34>
  8227f8:	88800015 	stw	r2,0(r17)
  8227fc:	1805883a 	mov	r2,r3
  822800:	dfc00217 	ldw	ra,8(sp)
  822804:	dc400117 	ldw	r17,4(sp)
  822808:	dc000017 	ldw	r16,0(sp)
  82280c:	dec00304 	addi	sp,sp,12
  822810:	f800283a 	ret

00822814 <_raise_r>:
  822814:	defffd04 	addi	sp,sp,-12
  822818:	008007c4 	movi	r2,31
  82281c:	dc400115 	stw	r17,4(sp)
  822820:	dc000015 	stw	r16,0(sp)
  822824:	dfc00215 	stw	ra,8(sp)
  822828:	2821883a 	mov	r16,r5
  82282c:	2023883a 	mov	r17,r4
  822830:	11402736 	bltu	r2,r5,8228d0 <_raise_r+0xbc>
  822834:	20c0b717 	ldw	r3,732(r4)
  822838:	18001326 	beq	r3,zero,822888 <_raise_r+0x74>
  82283c:	2945883a 	add	r2,r5,r5
  822840:	1085883a 	add	r2,r2,r2
  822844:	188b883a 	add	r5,r3,r2
  822848:	28c00017 	ldw	r3,0(r5)
  82284c:	18000e26 	beq	r3,zero,822888 <_raise_r+0x74>
  822850:	01000044 	movi	r4,1
  822854:	19000526 	beq	r3,r4,82286c <_raise_r+0x58>
  822858:	00bfffc4 	movi	r2,-1
  82285c:	18801326 	beq	r3,r2,8228ac <_raise_r+0x98>
  822860:	28000015 	stw	zero,0(r5)
  822864:	8009883a 	mov	r4,r16
  822868:	183ee83a 	callr	r3
  82286c:	0007883a 	mov	r3,zero
  822870:	1805883a 	mov	r2,r3
  822874:	dfc00217 	ldw	ra,8(sp)
  822878:	dc400117 	ldw	r17,4(sp)
  82287c:	dc000017 	ldw	r16,0(sp)
  822880:	dec00304 	addi	sp,sp,12
  822884:	f800283a 	ret
  822888:	0822aec0 	call	822aec <_getpid_r>
  82288c:	100b883a 	mov	r5,r2
  822890:	8809883a 	mov	r4,r17
  822894:	800d883a 	mov	r6,r16
  822898:	dfc00217 	ldw	ra,8(sp)
  82289c:	dc400117 	ldw	r17,4(sp)
  8228a0:	dc000017 	ldw	r16,0(sp)
  8228a4:	dec00304 	addi	sp,sp,12
  8228a8:	0822af01 	jmpi	822af0 <_kill_r>
  8228ac:	2007883a 	mov	r3,r4
  8228b0:	00800584 	movi	r2,22
  8228b4:	88800015 	stw	r2,0(r17)
  8228b8:	1805883a 	mov	r2,r3
  8228bc:	dfc00217 	ldw	ra,8(sp)
  8228c0:	dc400117 	ldw	r17,4(sp)
  8228c4:	dc000017 	ldw	r16,0(sp)
  8228c8:	dec00304 	addi	sp,sp,12
  8228cc:	f800283a 	ret
  8228d0:	00800584 	movi	r2,22
  8228d4:	00ffffc4 	movi	r3,-1
  8228d8:	20800015 	stw	r2,0(r4)
  8228dc:	003fe406 	br	822870 <_raise_r+0x5c>

008228e0 <raise>:
  8228e0:	00802134 	movhi	r2,132
  8228e4:	1082e104 	addi	r2,r2,2948
  8228e8:	200b883a 	mov	r5,r4
  8228ec:	11000017 	ldw	r4,0(r2)
  8228f0:	08228141 	jmpi	822814 <_raise_r>

008228f4 <_init_signal_r>:
  8228f4:	2080b717 	ldw	r2,732(r4)
  8228f8:	defffe04 	addi	sp,sp,-8
  8228fc:	dc000015 	stw	r16,0(sp)
  822900:	dfc00115 	stw	ra,4(sp)
  822904:	2021883a 	mov	r16,r4
  822908:	10000526 	beq	r2,zero,822920 <_init_signal_r+0x2c>
  82290c:	0005883a 	mov	r2,zero
  822910:	dfc00117 	ldw	ra,4(sp)
  822914:	dc000017 	ldw	r16,0(sp)
  822918:	dec00204 	addi	sp,sp,8
  82291c:	f800283a 	ret
  822920:	01402004 	movi	r5,128
  822924:	08217100 	call	821710 <_malloc_r>
  822928:	1009883a 	mov	r4,r2
  82292c:	8080b715 	stw	r2,732(r16)
  822930:	10000726 	beq	r2,zero,822950 <_init_signal_r+0x5c>
  822934:	0007883a 	mov	r3,zero
  822938:	01402004 	movi	r5,128
  82293c:	20c5883a 	add	r2,r4,r3
  822940:	18c00104 	addi	r3,r3,4
  822944:	10000015 	stw	zero,0(r2)
  822948:	197ffc1e 	bne	r3,r5,82293c <_init_signal_r+0x48>
  82294c:	003fef06 	br	82290c <_init_signal_r+0x18>
  822950:	00bfffc4 	movi	r2,-1
  822954:	003fee06 	br	822910 <_init_signal_r+0x1c>

00822958 <_init_signal>:
  822958:	00802134 	movhi	r2,132
  82295c:	1082e104 	addi	r2,r2,2948
  822960:	11000017 	ldw	r4,0(r2)
  822964:	08228f41 	jmpi	8228f4 <_init_signal_r>

00822968 <__sigtramp_r>:
  822968:	defffd04 	addi	sp,sp,-12
  82296c:	008007c4 	movi	r2,31
  822970:	dc000115 	stw	r16,4(sp)
  822974:	dfc00215 	stw	ra,8(sp)
  822978:	2021883a 	mov	r16,r4
  82297c:	11401336 	bltu	r2,r5,8229cc <__sigtramp_r+0x64>
  822980:	20c0b717 	ldw	r3,732(r4)
  822984:	18001f26 	beq	r3,zero,822a04 <__sigtramp_r+0x9c>
  822988:	2945883a 	add	r2,r5,r5
  82298c:	1085883a 	add	r2,r2,r2
  822990:	10c9883a 	add	r4,r2,r3
  822994:	20c00017 	ldw	r3,0(r4)
  822998:	18001626 	beq	r3,zero,8229f4 <__sigtramp_r+0x8c>
  82299c:	00bfffc4 	movi	r2,-1
  8229a0:	18801626 	beq	r3,r2,8229fc <__sigtramp_r+0x94>
  8229a4:	00800044 	movi	r2,1
  8229a8:	18800d26 	beq	r3,r2,8229e0 <__sigtramp_r+0x78>
  8229ac:	20000015 	stw	zero,0(r4)
  8229b0:	2809883a 	mov	r4,r5
  8229b4:	183ee83a 	callr	r3
  8229b8:	0005883a 	mov	r2,zero
  8229bc:	dfc00217 	ldw	ra,8(sp)
  8229c0:	dc000117 	ldw	r16,4(sp)
  8229c4:	dec00304 	addi	sp,sp,12
  8229c8:	f800283a 	ret
  8229cc:	00bfffc4 	movi	r2,-1
  8229d0:	dfc00217 	ldw	ra,8(sp)
  8229d4:	dc000117 	ldw	r16,4(sp)
  8229d8:	dec00304 	addi	sp,sp,12
  8229dc:	f800283a 	ret
  8229e0:	008000c4 	movi	r2,3
  8229e4:	dfc00217 	ldw	ra,8(sp)
  8229e8:	dc000117 	ldw	r16,4(sp)
  8229ec:	dec00304 	addi	sp,sp,12
  8229f0:	f800283a 	ret
  8229f4:	00800044 	movi	r2,1
  8229f8:	003ff006 	br	8229bc <__sigtramp_r+0x54>
  8229fc:	00800084 	movi	r2,2
  822a00:	003fee06 	br	8229bc <__sigtramp_r+0x54>
  822a04:	d9400015 	stw	r5,0(sp)
  822a08:	08228f40 	call	8228f4 <_init_signal_r>
  822a0c:	d9400017 	ldw	r5,0(sp)
  822a10:	103fee1e 	bne	r2,zero,8229cc <__sigtramp_r+0x64>
  822a14:	80c0b717 	ldw	r3,732(r16)
  822a18:	003fdb06 	br	822988 <__sigtramp_r+0x20>

00822a1c <__sigtramp>:
  822a1c:	00802134 	movhi	r2,132
  822a20:	1082e104 	addi	r2,r2,2948
  822a24:	200b883a 	mov	r5,r4
  822a28:	11000017 	ldw	r4,0(r2)
  822a2c:	08229681 	jmpi	822968 <__sigtramp_r>

00822a30 <_signal_r>:
  822a30:	defffc04 	addi	sp,sp,-16
  822a34:	008007c4 	movi	r2,31
  822a38:	dc800215 	stw	r18,8(sp)
  822a3c:	dc400115 	stw	r17,4(sp)
  822a40:	dc000015 	stw	r16,0(sp)
  822a44:	dfc00315 	stw	ra,12(sp)
  822a48:	2823883a 	mov	r17,r5
  822a4c:	00ffffc4 	movi	r3,-1
  822a50:	3025883a 	mov	r18,r6
  822a54:	2021883a 	mov	r16,r4
  822a58:	1140092e 	bgeu	r2,r5,822a80 <_signal_r+0x50>
  822a5c:	00800584 	movi	r2,22
  822a60:	20800015 	stw	r2,0(r4)
  822a64:	1805883a 	mov	r2,r3
  822a68:	dfc00317 	ldw	ra,12(sp)
  822a6c:	dc800217 	ldw	r18,8(sp)
  822a70:	dc400117 	ldw	r17,4(sp)
  822a74:	dc000017 	ldw	r16,0(sp)
  822a78:	dec00404 	addi	sp,sp,16
  822a7c:	f800283a 	ret
  822a80:	2140b717 	ldw	r5,732(r4)
  822a84:	28000c26 	beq	r5,zero,822ab8 <_signal_r+0x88>
  822a88:	8c45883a 	add	r2,r17,r17
  822a8c:	1085883a 	add	r2,r2,r2
  822a90:	1145883a 	add	r2,r2,r5
  822a94:	10c00017 	ldw	r3,0(r2)
  822a98:	14800015 	stw	r18,0(r2)
  822a9c:	1805883a 	mov	r2,r3
  822aa0:	dfc00317 	ldw	ra,12(sp)
  822aa4:	dc800217 	ldw	r18,8(sp)
  822aa8:	dc400117 	ldw	r17,4(sp)
  822aac:	dc000017 	ldw	r16,0(sp)
  822ab0:	dec00404 	addi	sp,sp,16
  822ab4:	f800283a 	ret
  822ab8:	08228f40 	call	8228f4 <_init_signal_r>
  822abc:	1000021e 	bne	r2,zero,822ac8 <_signal_r+0x98>
  822ac0:	8140b717 	ldw	r5,732(r16)
  822ac4:	003ff006 	br	822a88 <_signal_r+0x58>
  822ac8:	00ffffc4 	movi	r3,-1
  822acc:	003fe506 	br	822a64 <_signal_r+0x34>

00822ad0 <signal>:
  822ad0:	01802134 	movhi	r6,132
  822ad4:	3182e104 	addi	r6,r6,2948
  822ad8:	2007883a 	mov	r3,r4
  822adc:	31000017 	ldw	r4,0(r6)
  822ae0:	280d883a 	mov	r6,r5
  822ae4:	180b883a 	mov	r5,r3
  822ae8:	0822a301 	jmpi	822a30 <_signal_r>

00822aec <_getpid_r>:
  822aec:	082ace41 	jmpi	82ace4 <getpid>

00822af0 <_kill_r>:
  822af0:	defffd04 	addi	sp,sp,-12
  822af4:	dc000015 	stw	r16,0(sp)
  822af8:	04002134 	movhi	r16,132
  822afc:	840a4104 	addi	r16,r16,10500
  822b00:	dc400115 	stw	r17,4(sp)
  822b04:	80000015 	stw	zero,0(r16)
  822b08:	2023883a 	mov	r17,r4
  822b0c:	2809883a 	mov	r4,r5
  822b10:	300b883a 	mov	r5,r6
  822b14:	dfc00215 	stw	ra,8(sp)
  822b18:	082ae300 	call	82ae30 <kill>
  822b1c:	1007883a 	mov	r3,r2
  822b20:	00bfffc4 	movi	r2,-1
  822b24:	18800626 	beq	r3,r2,822b40 <_kill_r+0x50>
  822b28:	1805883a 	mov	r2,r3
  822b2c:	dfc00217 	ldw	ra,8(sp)
  822b30:	dc400117 	ldw	r17,4(sp)
  822b34:	dc000017 	ldw	r16,0(sp)
  822b38:	dec00304 	addi	sp,sp,12
  822b3c:	f800283a 	ret
  822b40:	80800017 	ldw	r2,0(r16)
  822b44:	103ff826 	beq	r2,zero,822b28 <_kill_r+0x38>
  822b48:	88800015 	stw	r2,0(r17)
  822b4c:	1805883a 	mov	r2,r3
  822b50:	dfc00217 	ldw	ra,8(sp)
  822b54:	dc400117 	ldw	r17,4(sp)
  822b58:	dc000017 	ldw	r16,0(sp)
  822b5c:	dec00304 	addi	sp,sp,12
  822b60:	f800283a 	ret

00822b64 <sprintf>:
  822b64:	deffe504 	addi	sp,sp,-108
  822b68:	2013883a 	mov	r9,r4
  822b6c:	dfc01815 	stw	ra,96(sp)
  822b70:	d9801915 	stw	r6,100(sp)
  822b74:	d9c01a15 	stw	r7,104(sp)
  822b78:	d8801904 	addi	r2,sp,100
  822b7c:	d8800015 	stw	r2,0(sp)
  822b80:	00802134 	movhi	r2,132
  822b84:	1082e104 	addi	r2,r2,2948
  822b88:	11000017 	ldw	r4,0(r2)
  822b8c:	d9c00017 	ldw	r7,0(sp)
  822b90:	00808204 	movi	r2,520
  822b94:	00e00034 	movhi	r3,32768
  822b98:	18ffffc4 	addi	r3,r3,-1
  822b9c:	280d883a 	mov	r6,r5
  822ba0:	d880040d 	sth	r2,16(sp)
  822ba4:	d9400104 	addi	r5,sp,4
  822ba8:	00bfffc4 	movi	r2,-1
  822bac:	d8c00615 	stw	r3,24(sp)
  822bb0:	d8c00315 	stw	r3,12(sp)
  822bb4:	da400515 	stw	r9,20(sp)
  822bb8:	d880048d 	sth	r2,18(sp)
  822bbc:	da400115 	stw	r9,4(sp)
  822bc0:	0823a440 	call	823a44 <___vfprintf_internal_r>
  822bc4:	d8c00117 	ldw	r3,4(sp)
  822bc8:	18000005 	stb	zero,0(r3)
  822bcc:	dfc01817 	ldw	ra,96(sp)
  822bd0:	dec01b04 	addi	sp,sp,108
  822bd4:	f800283a 	ret

00822bd8 <_sprintf_r>:
  822bd8:	deffe604 	addi	sp,sp,-104
  822bdc:	2813883a 	mov	r9,r5
  822be0:	dfc01815 	stw	ra,96(sp)
  822be4:	d9c01915 	stw	r7,100(sp)
  822be8:	d8801904 	addi	r2,sp,100
  822bec:	d8800015 	stw	r2,0(sp)
  822bf0:	100f883a 	mov	r7,r2
  822bf4:	00808204 	movi	r2,520
  822bf8:	00e00034 	movhi	r3,32768
  822bfc:	18ffffc4 	addi	r3,r3,-1
  822c00:	d880040d 	sth	r2,16(sp)
  822c04:	d9400104 	addi	r5,sp,4
  822c08:	00bfffc4 	movi	r2,-1
  822c0c:	d8c00615 	stw	r3,24(sp)
  822c10:	d8c00315 	stw	r3,12(sp)
  822c14:	da400515 	stw	r9,20(sp)
  822c18:	d880048d 	sth	r2,18(sp)
  822c1c:	da400115 	stw	r9,4(sp)
  822c20:	0823a440 	call	823a44 <___vfprintf_internal_r>
  822c24:	d8c00117 	ldw	r3,4(sp)
  822c28:	18000005 	stb	zero,0(r3)
  822c2c:	dfc01817 	ldw	ra,96(sp)
  822c30:	dec01a04 	addi	sp,sp,104
  822c34:	f800283a 	ret

00822c38 <strcat>:
  822c38:	defffe04 	addi	sp,sp,-8
  822c3c:	208000cc 	andi	r2,r4,3
  822c40:	dc000015 	stw	r16,0(sp)
  822c44:	dfc00115 	stw	ra,4(sp)
  822c48:	2021883a 	mov	r16,r4
  822c4c:	1000161e 	bne	r2,zero,822ca8 <strcat+0x70>
  822c50:	20c00017 	ldw	r3,0(r4)
  822c54:	01bfbff4 	movhi	r6,65279
  822c58:	31bfbfc4 	addi	r6,r6,-257
  822c5c:	02202074 	movhi	r8,32897
  822c60:	42202004 	addi	r8,r8,-32640
  822c64:	1985883a 	add	r2,r3,r6
  822c68:	1204703a 	and	r2,r2,r8
  822c6c:	00c6303a 	nor	r3,zero,r3
  822c70:	1886703a 	and	r3,r3,r2
  822c74:	18000c1e 	bne	r3,zero,822ca8 <strcat+0x70>
  822c78:	300f883a 	mov	r7,r6
  822c7c:	400d883a 	mov	r6,r8
  822c80:	21000104 	addi	r4,r4,4
  822c84:	20800017 	ldw	r2,0(r4)
  822c88:	11c7883a 	add	r3,r2,r7
  822c8c:	1986703a 	and	r3,r3,r6
  822c90:	0084303a 	nor	r2,zero,r2
  822c94:	10c4703a 	and	r2,r2,r3
  822c98:	103ff926 	beq	r2,zero,822c80 <strcat+0x48>
  822c9c:	20800007 	ldb	r2,0(r4)
  822ca0:	10000326 	beq	r2,zero,822cb0 <strcat+0x78>
  822ca4:	21000044 	addi	r4,r4,1
  822ca8:	20800007 	ldb	r2,0(r4)
  822cac:	103ffd1e 	bne	r2,zero,822ca4 <strcat+0x6c>
  822cb0:	0822d840 	call	822d84 <strcpy>
  822cb4:	8005883a 	mov	r2,r16
  822cb8:	dfc00117 	ldw	ra,4(sp)
  822cbc:	dc000017 	ldw	r16,0(sp)
  822cc0:	dec00204 	addi	sp,sp,8
  822cc4:	f800283a 	ret

00822cc8 <strcmp>:
  822cc8:	2144b03a 	or	r2,r4,r5
  822ccc:	108000cc 	andi	r2,r2,3
  822cd0:	10001d1e 	bne	r2,zero,822d48 <strcmp+0x80>
  822cd4:	200f883a 	mov	r7,r4
  822cd8:	28800017 	ldw	r2,0(r5)
  822cdc:	21000017 	ldw	r4,0(r4)
  822ce0:	280d883a 	mov	r6,r5
  822ce4:	2080161e 	bne	r4,r2,822d40 <strcmp+0x78>
  822ce8:	023fbff4 	movhi	r8,65279
  822cec:	423fbfc4 	addi	r8,r8,-257
  822cf0:	2207883a 	add	r3,r4,r8
  822cf4:	01602074 	movhi	r5,32897
  822cf8:	29602004 	addi	r5,r5,-32640
  822cfc:	1946703a 	and	r3,r3,r5
  822d00:	0104303a 	nor	r2,zero,r4
  822d04:	10c4703a 	and	r2,r2,r3
  822d08:	10001c1e 	bne	r2,zero,822d7c <strcmp+0xb4>
  822d0c:	4013883a 	mov	r9,r8
  822d10:	2811883a 	mov	r8,r5
  822d14:	00000106 	br	822d1c <strcmp+0x54>
  822d18:	1800181e 	bne	r3,zero,822d7c <strcmp+0xb4>
  822d1c:	39c00104 	addi	r7,r7,4
  822d20:	39000017 	ldw	r4,0(r7)
  822d24:	31800104 	addi	r6,r6,4
  822d28:	31400017 	ldw	r5,0(r6)
  822d2c:	2245883a 	add	r2,r4,r9
  822d30:	1204703a 	and	r2,r2,r8
  822d34:	0106303a 	nor	r3,zero,r4
  822d38:	1886703a 	and	r3,r3,r2
  822d3c:	217ff626 	beq	r4,r5,822d18 <strcmp+0x50>
  822d40:	3809883a 	mov	r4,r7
  822d44:	300b883a 	mov	r5,r6
  822d48:	20c00007 	ldb	r3,0(r4)
  822d4c:	1800051e 	bne	r3,zero,822d64 <strcmp+0x9c>
  822d50:	00000606 	br	822d6c <strcmp+0xa4>
  822d54:	21000044 	addi	r4,r4,1
  822d58:	20c00007 	ldb	r3,0(r4)
  822d5c:	29400044 	addi	r5,r5,1
  822d60:	18000226 	beq	r3,zero,822d6c <strcmp+0xa4>
  822d64:	28800007 	ldb	r2,0(r5)
  822d68:	18bffa26 	beq	r3,r2,822d54 <strcmp+0x8c>
  822d6c:	20c00003 	ldbu	r3,0(r4)
  822d70:	28800003 	ldbu	r2,0(r5)
  822d74:	1885c83a 	sub	r2,r3,r2
  822d78:	f800283a 	ret
  822d7c:	0005883a 	mov	r2,zero
  822d80:	f800283a 	ret

00822d84 <strcpy>:
  822d84:	2904b03a 	or	r2,r5,r4
  822d88:	108000cc 	andi	r2,r2,3
  822d8c:	10000826 	beq	r2,zero,822db0 <strcpy+0x2c>
  822d90:	2007883a 	mov	r3,r4
  822d94:	28800003 	ldbu	r2,0(r5)
  822d98:	29400044 	addi	r5,r5,1
  822d9c:	18800005 	stb	r2,0(r3)
  822da0:	18c00044 	addi	r3,r3,1
  822da4:	103ffb1e 	bne	r2,zero,822d94 <strcpy+0x10>
  822da8:	2005883a 	mov	r2,r4
  822dac:	f800283a 	ret
  822db0:	29800017 	ldw	r6,0(r5)
  822db4:	023fbff4 	movhi	r8,65279
  822db8:	423fbfc4 	addi	r8,r8,-257
  822dbc:	02a02074 	movhi	r10,32897
  822dc0:	52a02004 	addi	r10,r10,-32640
  822dc4:	3205883a 	add	r2,r6,r8
  822dc8:	0186303a 	nor	r3,zero,r6
  822dcc:	10c4703a 	and	r2,r2,r3
  822dd0:	1284703a 	and	r2,r2,r10
  822dd4:	200f883a 	mov	r7,r4
  822dd8:	10000b1e 	bne	r2,zero,822e08 <strcpy+0x84>
  822ddc:	4013883a 	mov	r9,r8
  822de0:	5011883a 	mov	r8,r10
  822de4:	39800015 	stw	r6,0(r7)
  822de8:	29400104 	addi	r5,r5,4
  822dec:	29800017 	ldw	r6,0(r5)
  822df0:	39c00104 	addi	r7,r7,4
  822df4:	3245883a 	add	r2,r6,r9
  822df8:	0186303a 	nor	r3,zero,r6
  822dfc:	10c4703a 	and	r2,r2,r3
  822e00:	1204703a 	and	r2,r2,r8
  822e04:	103ff726 	beq	r2,zero,822de4 <strcpy+0x60>
  822e08:	3807883a 	mov	r3,r7
  822e0c:	003fe106 	br	822d94 <strcpy+0x10>

00822e10 <strlen>:
  822e10:	208000cc 	andi	r2,r4,3
  822e14:	2011883a 	mov	r8,r4
  822e18:	1000161e 	bne	r2,zero,822e74 <strlen+0x64>
  822e1c:	20c00017 	ldw	r3,0(r4)
  822e20:	017fbff4 	movhi	r5,65279
  822e24:	297fbfc4 	addi	r5,r5,-257
  822e28:	01e02074 	movhi	r7,32897
  822e2c:	39e02004 	addi	r7,r7,-32640
  822e30:	1945883a 	add	r2,r3,r5
  822e34:	11c4703a 	and	r2,r2,r7
  822e38:	00c6303a 	nor	r3,zero,r3
  822e3c:	1886703a 	and	r3,r3,r2
  822e40:	18000c1e 	bne	r3,zero,822e74 <strlen+0x64>
  822e44:	280d883a 	mov	r6,r5
  822e48:	380b883a 	mov	r5,r7
  822e4c:	21000104 	addi	r4,r4,4
  822e50:	20800017 	ldw	r2,0(r4)
  822e54:	1187883a 	add	r3,r2,r6
  822e58:	1946703a 	and	r3,r3,r5
  822e5c:	0084303a 	nor	r2,zero,r2
  822e60:	10c4703a 	and	r2,r2,r3
  822e64:	103ff926 	beq	r2,zero,822e4c <strlen+0x3c>
  822e68:	20800007 	ldb	r2,0(r4)
  822e6c:	10000326 	beq	r2,zero,822e7c <strlen+0x6c>
  822e70:	21000044 	addi	r4,r4,1
  822e74:	20800007 	ldb	r2,0(r4)
  822e78:	103ffd1e 	bne	r2,zero,822e70 <strlen+0x60>
  822e7c:	2205c83a 	sub	r2,r4,r8
  822e80:	f800283a 	ret

00822e84 <strncat>:
  822e84:	208000cc 	andi	r2,r4,3
  822e88:	10001426 	beq	r2,zero,822edc <strncat+0x58>
  822e8c:	2007883a 	mov	r3,r4
  822e90:	00000106 	br	822e98 <strncat+0x14>
  822e94:	18c00044 	addi	r3,r3,1
  822e98:	18800007 	ldb	r2,0(r3)
  822e9c:	103ffd1e 	bne	r2,zero,822e94 <strncat+0x10>
  822ea0:	31bfffc4 	addi	r6,r6,-1
  822ea4:	00bfffc4 	movi	r2,-1
  822ea8:	30800a26 	beq	r6,r2,822ed4 <strncat+0x50>
  822eac:	28800003 	ldbu	r2,0(r5)
  822eb0:	29400044 	addi	r5,r5,1
  822eb4:	18800005 	stb	r2,0(r3)
  822eb8:	10000626 	beq	r2,zero,822ed4 <strncat+0x50>
  822ebc:	18c00044 	addi	r3,r3,1
  822ec0:	303ff71e 	bne	r6,zero,822ea0 <strncat+0x1c>
  822ec4:	31bfffc4 	addi	r6,r6,-1
  822ec8:	00bfffc4 	movi	r2,-1
  822ecc:	18000005 	stb	zero,0(r3)
  822ed0:	30bff61e 	bne	r6,r2,822eac <strncat+0x28>
  822ed4:	2005883a 	mov	r2,r4
  822ed8:	f800283a 	ret
  822edc:	20c00017 	ldw	r3,0(r4)
  822ee0:	023fbff4 	movhi	r8,65279
  822ee4:	423fbfc4 	addi	r8,r8,-257
  822ee8:	02a02074 	movhi	r10,32897
  822eec:	52a02004 	addi	r10,r10,-32640
  822ef0:	1a05883a 	add	r2,r3,r8
  822ef4:	1284703a 	and	r2,r2,r10
  822ef8:	00c6303a 	nor	r3,zero,r3
  822efc:	1886703a 	and	r3,r3,r2
  822f00:	200f883a 	mov	r7,r4
  822f04:	1800091e 	bne	r3,zero,822f2c <strncat+0xa8>
  822f08:	4013883a 	mov	r9,r8
  822f0c:	5011883a 	mov	r8,r10
  822f10:	39c00104 	addi	r7,r7,4
  822f14:	38800017 	ldw	r2,0(r7)
  822f18:	1247883a 	add	r3,r2,r9
  822f1c:	1a06703a 	and	r3,r3,r8
  822f20:	0084303a 	nor	r2,zero,r2
  822f24:	10c4703a 	and	r2,r2,r3
  822f28:	103ff926 	beq	r2,zero,822f10 <strncat+0x8c>
  822f2c:	3807883a 	mov	r3,r7
  822f30:	003fd906 	br	822e98 <strncat+0x14>

00822f34 <strncpy>:
  822f34:	2904b03a 	or	r2,r5,r4
  822f38:	108000cc 	andi	r2,r2,3
  822f3c:	00c000c4 	movi	r3,3
  822f40:	1000291e 	bne	r2,zero,822fe8 <strncpy+0xb4>
  822f44:	1980282e 	bgeu	r3,r6,822fe8 <strncpy+0xb4>
  822f48:	1817883a 	mov	r11,r3
  822f4c:	2011883a 	mov	r8,r4
  822f50:	02bfbff4 	movhi	r10,65279
  822f54:	52bfbfc4 	addi	r10,r10,-257
  822f58:	02602074 	movhi	r9,32897
  822f5c:	4a602004 	addi	r9,r9,-32640
  822f60:	29c00017 	ldw	r7,0(r5)
  822f64:	3a85883a 	add	r2,r7,r10
  822f68:	01c6303a 	nor	r3,zero,r7
  822f6c:	10c4703a 	and	r2,r2,r3
  822f70:	1244703a 	and	r2,r2,r9
  822f74:	1000051e 	bne	r2,zero,822f8c <strncpy+0x58>
  822f78:	31bfff04 	addi	r6,r6,-4
  822f7c:	41c00015 	stw	r7,0(r8)
  822f80:	29400104 	addi	r5,r5,4
  822f84:	42000104 	addi	r8,r8,4
  822f88:	59bff536 	bltu	r11,r6,822f60 <strncpy+0x2c>
  822f8c:	400f883a 	mov	r7,r8
  822f90:	30001326 	beq	r6,zero,822fe0 <strncpy+0xac>
  822f94:	28800003 	ldbu	r2,0(r5)
  822f98:	31bfffc4 	addi	r6,r6,-1
  822f9c:	38c00044 	addi	r3,r7,1
  822fa0:	38800005 	stb	r2,0(r7)
  822fa4:	10000826 	beq	r2,zero,822fc8 <strncpy+0x94>
  822fa8:	29400044 	addi	r5,r5,1
  822fac:	30000c26 	beq	r6,zero,822fe0 <strncpy+0xac>
  822fb0:	28800003 	ldbu	r2,0(r5)
  822fb4:	31bfffc4 	addi	r6,r6,-1
  822fb8:	29400044 	addi	r5,r5,1
  822fbc:	18800005 	stb	r2,0(r3)
  822fc0:	18c00044 	addi	r3,r3,1
  822fc4:	103ff91e 	bne	r2,zero,822fac <strncpy+0x78>
  822fc8:	30000526 	beq	r6,zero,822fe0 <strncpy+0xac>
  822fcc:	1805883a 	mov	r2,r3
  822fd0:	30cd883a 	add	r6,r6,r3
  822fd4:	10000005 	stb	zero,0(r2)
  822fd8:	10800044 	addi	r2,r2,1
  822fdc:	30bffd1e 	bne	r6,r2,822fd4 <strncpy+0xa0>
  822fe0:	2005883a 	mov	r2,r4
  822fe4:	f800283a 	ret
  822fe8:	200f883a 	mov	r7,r4
  822fec:	003fe806 	br	822f90 <strncpy+0x5c>

00822ff0 <critical_factorization>:
  822ff0:	03000044 	movi	r12,1
  822ff4:	6013883a 	mov	r9,r12
  822ff8:	037fffc4 	movi	r13,-1
  822ffc:	0011883a 	mov	r8,zero
  823000:	6905883a 	add	r2,r13,r4
  823004:	424f883a 	add	r7,r8,r9
  823008:	1245883a 	add	r2,r2,r9
  82300c:	21c7883a 	add	r3,r4,r7
  823010:	39400b2e 	bgeu	r7,r5,823040 <critical_factorization+0x50>
  823014:	18c00003 	ldbu	r3,0(r3)
  823018:	10800003 	ldbu	r2,0(r2)
  82301c:	1880232e 	bgeu	r3,r2,8230ac <critical_factorization+0xbc>
  823020:	3b59c83a 	sub	r12,r7,r13
  823024:	02400044 	movi	r9,1
  823028:	3811883a 	mov	r8,r7
  82302c:	6905883a 	add	r2,r13,r4
  823030:	424f883a 	add	r7,r8,r9
  823034:	1245883a 	add	r2,r2,r9
  823038:	21c7883a 	add	r3,r4,r7
  82303c:	397ff536 	bltu	r7,r5,823014 <critical_factorization+0x24>
  823040:	02c00044 	movi	r11,1
  823044:	5815883a 	mov	r10,r11
  823048:	027fffc4 	movi	r9,-1
  82304c:	0011883a 	mov	r8,zero
  823050:	4905883a 	add	r2,r9,r4
  823054:	428f883a 	add	r7,r8,r10
  823058:	33000015 	stw	r12,0(r6)
  82305c:	1285883a 	add	r2,r2,r10
  823060:	3907883a 	add	r3,r7,r4
  823064:	39400b2e 	bgeu	r7,r5,823094 <critical_factorization+0xa4>
  823068:	18c00003 	ldbu	r3,0(r3)
  82306c:	10800003 	ldbu	r2,0(r2)
  823070:	10c01a2e 	bgeu	r2,r3,8230dc <critical_factorization+0xec>
  823074:	3a57c83a 	sub	r11,r7,r9
  823078:	02800044 	movi	r10,1
  82307c:	3811883a 	mov	r8,r7
  823080:	4905883a 	add	r2,r9,r4
  823084:	428f883a 	add	r7,r8,r10
  823088:	1285883a 	add	r2,r2,r10
  82308c:	3907883a 	add	r3,r7,r4
  823090:	397ff536 	bltu	r7,r5,823068 <critical_factorization+0x78>
  823094:	48c00044 	addi	r3,r9,1
  823098:	68800044 	addi	r2,r13,1
  82309c:	18800236 	bltu	r3,r2,8230a8 <critical_factorization+0xb8>
  8230a0:	32c00015 	stw	r11,0(r6)
  8230a4:	1805883a 	mov	r2,r3
  8230a8:	f800283a 	ret
  8230ac:	18800626 	beq	r3,r2,8230c8 <critical_factorization+0xd8>
  8230b0:	03000044 	movi	r12,1
  8230b4:	430f883a 	add	r7,r8,r12
  8230b8:	401b883a 	mov	r13,r8
  8230bc:	6013883a 	mov	r9,r12
  8230c0:	3811883a 	mov	r8,r7
  8230c4:	003fd906 	br	82302c <critical_factorization+0x3c>
  8230c8:	4b001026 	beq	r9,r12,82310c <critical_factorization+0x11c>
  8230cc:	400f883a 	mov	r7,r8
  8230d0:	4a400044 	addi	r9,r9,1
  8230d4:	3811883a 	mov	r8,r7
  8230d8:	003fd406 	br	82302c <critical_factorization+0x3c>
  8230dc:	18800626 	beq	r3,r2,8230f8 <critical_factorization+0x108>
  8230e0:	02c00044 	movi	r11,1
  8230e4:	42cf883a 	add	r7,r8,r11
  8230e8:	4013883a 	mov	r9,r8
  8230ec:	5815883a 	mov	r10,r11
  8230f0:	3811883a 	mov	r8,r7
  8230f4:	003fe206 	br	823080 <critical_factorization+0x90>
  8230f8:	52c00726 	beq	r10,r11,823118 <critical_factorization+0x128>
  8230fc:	400f883a 	mov	r7,r8
  823100:	52800044 	addi	r10,r10,1
  823104:	3811883a 	mov	r8,r7
  823108:	003fdd06 	br	823080 <critical_factorization+0x90>
  82310c:	02400044 	movi	r9,1
  823110:	3811883a 	mov	r8,r7
  823114:	003fc506 	br	82302c <critical_factorization+0x3c>
  823118:	02800044 	movi	r10,1
  82311c:	3811883a 	mov	r8,r7
  823120:	003fd706 	br	823080 <critical_factorization+0x90>

00823124 <strstr>:
  823124:	defef404 	addi	sp,sp,-1072
  823128:	dd810815 	stw	r22,1056(sp)
  82312c:	dc410315 	stw	r17,1036(sp)
  823130:	dfc10b15 	stw	ra,1068(sp)
  823134:	df010a15 	stw	fp,1064(sp)
  823138:	ddc10915 	stw	r23,1060(sp)
  82313c:	dd410715 	stw	r21,1052(sp)
  823140:	dd010615 	stw	r20,1048(sp)
  823144:	dcc10515 	stw	r19,1044(sp)
  823148:	dc810415 	stw	r18,1040(sp)
  82314c:	dc010215 	stw	r16,1032(sp)
  823150:	2023883a 	mov	r17,r4
  823154:	21000007 	ldb	r4,0(r4)
  823158:	282d883a 	mov	r22,r5
  82315c:	2000d026 	beq	r4,zero,8234a0 <strstr+0x37c>
  823160:	28800007 	ldb	r2,0(r5)
  823164:	10001026 	beq	r2,zero,8231a8 <strstr+0x84>
  823168:	2821883a 	mov	r16,r5
  82316c:	8807883a 	mov	r3,r17
  823170:	01400044 	movi	r5,1
  823174:	00000206 	br	823180 <strstr+0x5c>
  823178:	80800007 	ldb	r2,0(r16)
  82317c:	10000826 	beq	r2,zero,8231a0 <strstr+0x7c>
  823180:	18c00044 	addi	r3,r3,1
  823184:	2085003a 	cmpeq	r2,r4,r2
  823188:	19000007 	ldb	r4,0(r3)
  82318c:	288a703a 	and	r5,r5,r2
  823190:	84000044 	addi	r16,r16,1
  823194:	203ff81e 	bne	r4,zero,823178 <strstr+0x54>
  823198:	80800007 	ldb	r2,0(r16)
  82319c:	1000611e 	bne	r2,zero,823324 <strstr+0x200>
  8231a0:	2805003a 	cmpeq	r2,r5,zero
  8231a4:	10000e1e 	bne	r2,zero,8231e0 <strstr+0xbc>
  8231a8:	8825883a 	mov	r18,r17
  8231ac:	9005883a 	mov	r2,r18
  8231b0:	dfc10b17 	ldw	ra,1068(sp)
  8231b4:	df010a17 	ldw	fp,1064(sp)
  8231b8:	ddc10917 	ldw	r23,1060(sp)
  8231bc:	dd810817 	ldw	r22,1056(sp)
  8231c0:	dd410717 	ldw	r21,1052(sp)
  8231c4:	dd010617 	ldw	r20,1048(sp)
  8231c8:	dcc10517 	ldw	r19,1044(sp)
  8231cc:	dc810417 	ldw	r18,1040(sp)
  8231d0:	dc410317 	ldw	r17,1036(sp)
  8231d4:	dc010217 	ldw	r16,1032(sp)
  8231d8:	dec10c04 	addi	sp,sp,1072
  8231dc:	f800283a 	ret
  8231e0:	b1400007 	ldb	r5,0(r22)
  8231e4:	89000044 	addi	r4,r17,1
  8231e8:	04c00044 	movi	r19,1
  8231ec:	082984c0 	call	82984c <strchr>
  8231f0:	1025883a 	mov	r18,r2
  8231f4:	103fed26 	beq	r2,zero,8231ac <strstr+0x88>
  8231f8:	85a1c83a 	sub	r16,r16,r22
  8231fc:	84ffeb26 	beq	r16,r19,8231ac <strstr+0x88>
  823200:	8c09883a 	add	r4,r17,r16
  823204:	2080492e 	bgeu	r4,r2,82332c <strstr+0x208>
  823208:	9829883a 	mov	r20,r19
  82320c:	008007c4 	movi	r2,31
  823210:	14004836 	bltu	r2,r16,823334 <strstr+0x210>
  823214:	b009883a 	mov	r4,r22
  823218:	800b883a 	mov	r5,r16
  82321c:	d80d883a 	mov	r6,sp
  823220:	0822ff00 	call	822ff0 <critical_factorization>
  823224:	d9400017 	ldw	r5,0(sp)
  823228:	b009883a 	mov	r4,r22
  82322c:	100d883a 	mov	r6,r2
  823230:	b14b883a 	add	r5,r22,r5
  823234:	1027883a 	mov	r19,r2
  823238:	08286580 	call	828658 <memcmp>
  82323c:	1000b526 	beq	r2,zero,823514 <strstr+0x3f0>
  823240:	84efc83a 	sub	r23,r16,r19
  823244:	9805883a 	mov	r2,r19
  823248:	9dc0012e 	bgeu	r19,r23,823250 <strstr+0x12c>
  82324c:	b805883a 	mov	r2,r23
  823250:	10800044 	addi	r2,r2,1
  823254:	002b883a 	mov	r21,zero
  823258:	d8800015 	stw	r2,0(sp)
  82325c:	ac23883a 	add	r17,r21,r16
  823260:	8d0dc83a 	sub	r6,r17,r20
  823264:	9509883a 	add	r4,r18,r20
  823268:	000b883a 	mov	r5,zero
  82326c:	08285740 	call	828574 <memchr>
  823270:	10002c1e 	bne	r2,zero,823324 <strstr+0x200>
  823274:	88002b26 	beq	r17,zero,823324 <strstr+0x200>
  823278:	9c00122e 	bgeu	r19,r16,8232c4 <strstr+0x1a0>
  82327c:	acc5883a 	add	r2,r21,r19
  823280:	908b883a 	add	r5,r18,r2
  823284:	b4c9883a 	add	r4,r22,r19
  823288:	20c00003 	ldbu	r3,0(r4)
  82328c:	28800003 	ldbu	r2,0(r5)
  823290:	1881331e 	bne	r3,r2,823760 <strstr+0x63c>
  823294:	200d883a 	mov	r6,r4
  823298:	29400044 	addi	r5,r5,1
  82329c:	9809883a 	mov	r4,r19
  8232a0:	9dcf883a 	add	r7,r19,r23
  8232a4:	00000506 	br	8232bc <strstr+0x198>
  8232a8:	30c00043 	ldbu	r3,1(r6)
  8232ac:	28800003 	ldbu	r2,0(r5)
  8232b0:	31800044 	addi	r6,r6,1
  8232b4:	29400044 	addi	r5,r5,1
  8232b8:	10c1161e 	bne	r2,r3,823714 <strstr+0x5f0>
  8232bc:	21000044 	addi	r4,r4,1
  8232c0:	21fff91e 	bne	r4,r7,8232a8 <strstr+0x184>
  8232c4:	01ffffc4 	movi	r7,-1
  8232c8:	99cd883a 	add	r6,r19,r7
  8232cc:	31c12726 	beq	r6,r7,82376c <strstr+0x648>
  8232d0:	ac91883a 	add	r8,r21,r18
  8232d4:	b187883a 	add	r3,r22,r6
  8232d8:	4189883a 	add	r4,r8,r6
  8232dc:	19400003 	ldbu	r5,0(r3)
  8232e0:	20800003 	ldbu	r2,0(r4)
  8232e4:	2881141e 	bne	r5,r2,823738 <strstr+0x614>
  8232e8:	acc5883a 	add	r2,r21,r19
  8232ec:	9085883a 	add	r2,r18,r2
  8232f0:	b4c7883a 	add	r3,r22,r19
  8232f4:	197fff84 	addi	r5,r3,-2
  8232f8:	113fff84 	addi	r4,r2,-2
  8232fc:	00000506 	br	823314 <strstr+0x1f0>
  823300:	28c00003 	ldbu	r3,0(r5)
  823304:	20800003 	ldbu	r2,0(r4)
  823308:	297fffc4 	addi	r5,r5,-1
  82330c:	213fffc4 	addi	r4,r4,-1
  823310:	10c1091e 	bne	r2,r3,823738 <strstr+0x614>
  823314:	31bfffc4 	addi	r6,r6,-1
  823318:	31fff91e 	bne	r6,r7,823300 <strstr+0x1dc>
  82331c:	4025883a 	mov	r18,r8
  823320:	003fa206 	br	8231ac <strstr+0x88>
  823324:	0025883a 	mov	r18,zero
  823328:	003fa006 	br	8231ac <strstr+0x88>
  82332c:	20a9c83a 	sub	r20,r4,r2
  823330:	003fb606 	br	82320c <strstr+0xe8>
  823334:	b009883a 	mov	r4,r22
  823338:	800b883a 	mov	r5,r16
  82333c:	d80d883a 	mov	r6,sp
  823340:	0822ff00 	call	822ff0 <critical_factorization>
  823344:	102b883a 	mov	r21,r2
  823348:	d8c10104 	addi	r3,sp,1028
  82334c:	d8800104 	addi	r2,sp,4
  823350:	14000015 	stw	r16,0(r2)
  823354:	10800104 	addi	r2,r2,4
  823358:	10fffd1e 	bne	r2,r3,823350 <strstr+0x22c>
  82335c:	84ffffc4 	addi	r19,r16,-1
  823360:	b009883a 	mov	r4,r22
  823364:	9807883a 	mov	r3,r19
  823368:	017fffc4 	movi	r5,-1
  82336c:	20800003 	ldbu	r2,0(r4)
  823370:	21000044 	addi	r4,r4,1
  823374:	1085883a 	add	r2,r2,r2
  823378:	1085883a 	add	r2,r2,r2
  82337c:	16c5883a 	add	r2,r2,sp
  823380:	10c00115 	stw	r3,4(r2)
  823384:	18ffffc4 	addi	r3,r3,-1
  823388:	197ff81e 	bne	r3,r5,82336c <strstr+0x248>
  82338c:	d9400017 	ldw	r5,0(sp)
  823390:	b009883a 	mov	r4,r22
  823394:	a80d883a 	mov	r6,r21
  823398:	b14b883a 	add	r5,r22,r5
  82339c:	08286580 	call	828658 <memcmp>
  8233a0:	10004226 	beq	r2,zero,8234ac <strstr+0x388>
  8233a4:	8547c83a 	sub	r3,r16,r21
  8233a8:	a805883a 	mov	r2,r21
  8233ac:	a8c0012e 	bgeu	r21,r3,8233b4 <strstr+0x290>
  8233b0:	1805883a 	mov	r2,r3
  8233b4:	10800044 	addi	r2,r2,1
  8233b8:	002f883a 	mov	r23,zero
  8233bc:	b579883a 	add	fp,r22,r21
  8233c0:	d8800015 	stw	r2,0(sp)
  8233c4:	bc23883a 	add	r17,r23,r16
  8233c8:	8d0dc83a 	sub	r6,r17,r20
  8233cc:	9509883a 	add	r4,r18,r20
  8233d0:	000b883a 	mov	r5,zero
  8233d4:	08285740 	call	828574 <memchr>
  8233d8:	103fd21e 	bne	r2,zero,823324 <strstr+0x200>
  8233dc:	883fd126 	beq	r17,zero,823324 <strstr+0x200>
  8233e0:	9447883a 	add	r3,r18,r17
  8233e4:	18bfffc3 	ldbu	r2,-1(r3)
  8233e8:	1085883a 	add	r2,r2,r2
  8233ec:	1085883a 	add	r2,r2,r2
  8233f0:	16c5883a 	add	r2,r2,sp
  8233f4:	10800117 	ldw	r2,4(r2)
  8233f8:	1000b61e 	bne	r2,zero,8236d4 <strstr+0x5b0>
  8233fc:	acc0102e 	bgeu	r21,r19,823440 <strstr+0x31c>
  823400:	bd45883a 	add	r2,r23,r21
  823404:	9089883a 	add	r4,r18,r2
  823408:	20c00003 	ldbu	r3,0(r4)
  82340c:	e0800003 	ldbu	r2,0(fp)
  823410:	1880af1e 	bne	r3,r2,8236d0 <strstr+0x5ac>
  823414:	21800044 	addi	r6,r4,1
  823418:	e00b883a 	mov	r5,fp
  82341c:	a809883a 	mov	r4,r21
  823420:	00000506 	br	823438 <strstr+0x314>
  823424:	28c00043 	ldbu	r3,1(r5)
  823428:	30800003 	ldbu	r2,0(r6)
  82342c:	29400044 	addi	r5,r5,1
  823430:	31800044 	addi	r6,r6,1
  823434:	10c0bc1e 	bne	r2,r3,823728 <strstr+0x604>
  823438:	21000044 	addi	r4,r4,1
  82343c:	24fff936 	bltu	r4,r19,823424 <strstr+0x300>
  823440:	01ffffc4 	movi	r7,-1
  823444:	a9cd883a 	add	r6,r21,r7
  823448:	31c0cb26 	beq	r6,r7,823778 <strstr+0x654>
  82344c:	bc91883a 	add	r8,r23,r18
  823450:	b187883a 	add	r3,r22,r6
  823454:	4189883a 	add	r4,r8,r6
  823458:	19400003 	ldbu	r5,0(r3)
  82345c:	20800003 	ldbu	r2,0(r4)
  823460:	2880b91e 	bne	r5,r2,823748 <strstr+0x624>
  823464:	bd45883a 	add	r2,r23,r21
  823468:	9085883a 	add	r2,r18,r2
  82346c:	b547883a 	add	r3,r22,r21
  823470:	197fff84 	addi	r5,r3,-2
  823474:	113fff84 	addi	r4,r2,-2
  823478:	00000506 	br	823490 <strstr+0x36c>
  82347c:	28c00003 	ldbu	r3,0(r5)
  823480:	20800003 	ldbu	r2,0(r4)
  823484:	297fffc4 	addi	r5,r5,-1
  823488:	213fffc4 	addi	r4,r4,-1
  82348c:	10c0ae1e 	bne	r2,r3,823748 <strstr+0x624>
  823490:	31bfffc4 	addi	r6,r6,-1
  823494:	31fff91e 	bne	r6,r7,82347c <strstr+0x358>
  823498:	4025883a 	mov	r18,r8
  82349c:	003f4306 	br	8231ac <strstr+0x88>
  8234a0:	2821883a 	mov	r16,r5
  8234a4:	01400044 	movi	r5,1
  8234a8:	003f3b06 	br	823198 <strstr+0x74>
  8234ac:	a8bfffc4 	addi	r2,r21,-1
  8234b0:	002f883a 	mov	r23,zero
  8234b4:	0039883a 	mov	fp,zero
  8234b8:	d8810115 	stw	r2,1028(sp)
  8234bc:	bc23883a 	add	r17,r23,r16
  8234c0:	8d0dc83a 	sub	r6,r17,r20
  8234c4:	9509883a 	add	r4,r18,r20
  8234c8:	000b883a 	mov	r5,zero
  8234cc:	08285740 	call	828574 <memchr>
  8234d0:	103f941e 	bne	r2,zero,823324 <strstr+0x200>
  8234d4:	883f9326 	beq	r17,zero,823324 <strstr+0x200>
  8234d8:	9447883a 	add	r3,r18,r17
  8234dc:	18bfffc3 	ldbu	r2,-1(r3)
  8234e0:	1085883a 	add	r2,r2,r2
  8234e4:	1085883a 	add	r2,r2,r2
  8234e8:	16c5883a 	add	r2,r2,sp
  8234ec:	10800117 	ldw	r2,4(r2)
  8234f0:	10004526 	beq	r2,zero,823608 <strstr+0x4e4>
  8234f4:	e0000426 	beq	fp,zero,823508 <strstr+0x3e4>
  8234f8:	d8c00017 	ldw	r3,0(sp)
  8234fc:	10c0022e 	bgeu	r2,r3,823508 <strstr+0x3e4>
  823500:	80c5c83a 	sub	r2,r16,r3
  823504:	0039883a 	mov	fp,zero
  823508:	b8af883a 	add	r23,r23,r2
  82350c:	8829883a 	mov	r20,r17
  823510:	003fea06 	br	8234bc <strstr+0x398>
  823514:	002f883a 	mov	r23,zero
  823518:	0023883a 	mov	r17,zero
  82351c:	9f3fffc4 	addi	fp,r19,-1
  823520:	bc2b883a 	add	r21,r23,r16
  823524:	ad0dc83a 	sub	r6,r21,r20
  823528:	9509883a 	add	r4,r18,r20
  82352c:	000b883a 	mov	r5,zero
  823530:	08285740 	call	828574 <memchr>
  823534:	103f7b1e 	bne	r2,zero,823324 <strstr+0x200>
  823538:	a83f7a26 	beq	r21,zero,823324 <strstr+0x200>
  82353c:	880b883a 	mov	r5,r17
  823540:	8cc0012e 	bgeu	r17,r19,823548 <strstr+0x424>
  823544:	980b883a 	mov	r5,r19
  823548:	2c00112e 	bgeu	r5,r16,823590 <strstr+0x46c>
  82354c:	b945883a 	add	r2,r23,r5
  823550:	908f883a 	add	r7,r18,r2
  823554:	b149883a 	add	r4,r22,r5
  823558:	20c00003 	ldbu	r3,0(r4)
  82355c:	38800003 	ldbu	r2,0(r7)
  823560:	1880551e 	bne	r3,r2,8236b8 <strstr+0x594>
  823564:	200d883a 	mov	r6,r4
  823568:	39000044 	addi	r4,r7,1
  82356c:	800f883a 	mov	r7,r16
  823570:	00000506 	br	823588 <strstr+0x464>
  823574:	30c00043 	ldbu	r3,1(r6)
  823578:	20800003 	ldbu	r2,0(r4)
  82357c:	31800044 	addi	r6,r6,1
  823580:	21000044 	addi	r4,r4,1
  823584:	10c04c1e 	bne	r2,r3,8236b8 <strstr+0x594>
  823588:	29400044 	addi	r5,r5,1
  82358c:	29fff91e 	bne	r5,r7,823574 <strstr+0x450>
  823590:	980f883a 	mov	r7,r19
  823594:	8cc0152e 	bgeu	r17,r19,8235ec <strstr+0x4c8>
  823598:	bc85883a 	add	r2,r23,r18
  82359c:	1705883a 	add	r2,r2,fp
  8235a0:	b707883a 	add	r3,r22,fp
  8235a4:	19400003 	ldbu	r5,0(r3)
  8235a8:	11000003 	ldbu	r4,0(r2)
  8235ac:	29000f1e 	bne	r5,r4,8235ec <strstr+0x4c8>
  8235b0:	bcc5883a 	add	r2,r23,r19
  8235b4:	9085883a 	add	r2,r18,r2
  8235b8:	9d87883a 	add	r3,r19,r22
  8235bc:	e00f883a 	mov	r7,fp
  8235c0:	19bfff84 	addi	r6,r3,-2
  8235c4:	117fff84 	addi	r5,r2,-2
  8235c8:	89c0082e 	bgeu	r17,r7,8235ec <strstr+0x4c8>
  8235cc:	30c00003 	ldbu	r3,0(r6)
  8235d0:	28800003 	ldbu	r2,0(r5)
  8235d4:	31bfffc4 	addi	r6,r6,-1
  8235d8:	297fffc4 	addi	r5,r5,-1
  8235dc:	393fffc4 	addi	r4,r7,-1
  8235e0:	10c0021e 	bne	r2,r3,8235ec <strstr+0x4c8>
  8235e4:	200f883a 	mov	r7,r4
  8235e8:	89fff836 	bltu	r17,r7,8235cc <strstr+0x4a8>
  8235ec:	88800044 	addi	r2,r17,1
  8235f0:	38805936 	bltu	r7,r2,823758 <strstr+0x634>
  8235f4:	d8800017 	ldw	r2,0(sp)
  8235f8:	a829883a 	mov	r20,r21
  8235fc:	b8af883a 	add	r23,r23,r2
  823600:	80a3c83a 	sub	r17,r16,r2
  823604:	003fc606 	br	823520 <strstr+0x3fc>
  823608:	e00d883a 	mov	r6,fp
  82360c:	e540012e 	bgeu	fp,r21,823614 <strstr+0x4f0>
  823610:	a80d883a 	mov	r6,r21
  823614:	34c0102e 	bgeu	r6,r19,823658 <strstr+0x534>
  823618:	b985883a 	add	r2,r23,r6
  82361c:	908f883a 	add	r7,r18,r2
  823620:	b189883a 	add	r4,r22,r6
  823624:	20c00003 	ldbu	r3,0(r4)
  823628:	38800003 	ldbu	r2,0(r7)
  82362c:	1880331e 	bne	r3,r2,8236fc <strstr+0x5d8>
  823630:	200b883a 	mov	r5,r4
  823634:	39000044 	addi	r4,r7,1
  823638:	00000506 	br	823650 <strstr+0x52c>
  82363c:	28c00043 	ldbu	r3,1(r5)
  823640:	20800003 	ldbu	r2,0(r4)
  823644:	29400044 	addi	r5,r5,1
  823648:	21000044 	addi	r4,r4,1
  82364c:	10c02b1e 	bne	r2,r3,8236fc <strstr+0x5d8>
  823650:	31800044 	addi	r6,r6,1
  823654:	34fff936 	bltu	r6,r19,82363c <strstr+0x518>
  823658:	a80f883a 	mov	r7,r21
  82365c:	e540202e 	bgeu	fp,r21,8236e0 <strstr+0x5bc>
  823660:	d8c10117 	ldw	r3,1028(sp)
  823664:	bc85883a 	add	r2,r23,r18
  823668:	10c5883a 	add	r2,r2,r3
  82366c:	1d87883a 	add	r3,r3,r22
  823670:	19400003 	ldbu	r5,0(r3)
  823674:	11000003 	ldbu	r4,0(r2)
  823678:	2900191e 	bne	r5,r4,8236e0 <strstr+0x5bc>
  82367c:	bd45883a 	add	r2,r23,r21
  823680:	d9c10117 	ldw	r7,1028(sp)
  823684:	9085883a 	add	r2,r18,r2
  823688:	b547883a 	add	r3,r22,r21
  82368c:	19bfff84 	addi	r6,r3,-2
  823690:	117fff84 	addi	r5,r2,-2
  823694:	e1c0122e 	bgeu	fp,r7,8236e0 <strstr+0x5bc>
  823698:	30c00003 	ldbu	r3,0(r6)
  82369c:	28800003 	ldbu	r2,0(r5)
  8236a0:	31bfffc4 	addi	r6,r6,-1
  8236a4:	297fffc4 	addi	r5,r5,-1
  8236a8:	393fffc4 	addi	r4,r7,-1
  8236ac:	10c00c1e 	bne	r2,r3,8236e0 <strstr+0x5bc>
  8236b0:	200f883a 	mov	r7,r4
  8236b4:	003ff706 	br	823694 <strstr+0x570>
  8236b8:	2cc5c83a 	sub	r2,r5,r19
  8236bc:	10800044 	addi	r2,r2,1
  8236c0:	b8af883a 	add	r23,r23,r2
  8236c4:	0023883a 	mov	r17,zero
  8236c8:	a829883a 	mov	r20,r21
  8236cc:	003f9406 	br	823520 <strstr+0x3fc>
  8236d0:	00800044 	movi	r2,1
  8236d4:	b8af883a 	add	r23,r23,r2
  8236d8:	8829883a 	mov	r20,r17
  8236dc:	003f3906 	br	8233c4 <strstr+0x2a0>
  8236e0:	e0800044 	addi	r2,fp,1
  8236e4:	38801c36 	bltu	r7,r2,823758 <strstr+0x634>
  8236e8:	d8800017 	ldw	r2,0(sp)
  8236ec:	8829883a 	mov	r20,r17
  8236f0:	b8af883a 	add	r23,r23,r2
  8236f4:	80b9c83a 	sub	fp,r16,r2
  8236f8:	003f7006 	br	8234bc <strstr+0x398>
  8236fc:	3545c83a 	sub	r2,r6,r21
  823700:	10800044 	addi	r2,r2,1
  823704:	b8af883a 	add	r23,r23,r2
  823708:	0039883a 	mov	fp,zero
  82370c:	8829883a 	mov	r20,r17
  823710:	003f6a06 	br	8234bc <strstr+0x398>
  823714:	24c5c83a 	sub	r2,r4,r19
  823718:	10800044 	addi	r2,r2,1
  82371c:	a8ab883a 	add	r21,r21,r2
  823720:	8829883a 	mov	r20,r17
  823724:	003ecd06 	br	82325c <strstr+0x138>
  823728:	2545c83a 	sub	r2,r4,r21
  82372c:	10800044 	addi	r2,r2,1
  823730:	b8af883a 	add	r23,r23,r2
  823734:	003fe806 	br	8236d8 <strstr+0x5b4>
  823738:	d8800017 	ldw	r2,0(sp)
  82373c:	8829883a 	mov	r20,r17
  823740:	a8ab883a 	add	r21,r21,r2
  823744:	003ec506 	br	82325c <strstr+0x138>
  823748:	d8800017 	ldw	r2,0(sp)
  82374c:	8829883a 	mov	r20,r17
  823750:	b8af883a 	add	r23,r23,r2
  823754:	003f1b06 	br	8233c4 <strstr+0x2a0>
  823758:	95e5883a 	add	r18,r18,r23
  82375c:	003e9306 	br	8231ac <strstr+0x88>
  823760:	00800044 	movi	r2,1
  823764:	a8ab883a 	add	r21,r21,r2
  823768:	003fed06 	br	823720 <strstr+0x5fc>
  82376c:	ac91883a 	add	r8,r21,r18
  823770:	4025883a 	mov	r18,r8
  823774:	003e8d06 	br	8231ac <strstr+0x88>
  823778:	bc91883a 	add	r8,r23,r18
  82377c:	4025883a 	mov	r18,r8
  823780:	003e8a06 	br	8231ac <strstr+0x88>

00823784 <_strtol_r>:
  823784:	defff304 	addi	sp,sp,-52
  823788:	00802134 	movhi	r2,132
  82378c:	1082e504 	addi	r2,r2,2964
  823790:	dcc00615 	stw	r19,24(sp)
  823794:	14c00017 	ldw	r19,0(r2)
  823798:	ddc00a15 	stw	r23,40(sp)
  82379c:	dc000315 	stw	r16,12(sp)
  8237a0:	dfc00c15 	stw	ra,48(sp)
  8237a4:	df000b15 	stw	fp,44(sp)
  8237a8:	dd800915 	stw	r22,36(sp)
  8237ac:	dd400815 	stw	r21,32(sp)
  8237b0:	dd000715 	stw	r20,28(sp)
  8237b4:	dc800515 	stw	r18,20(sp)
  8237b8:	dc400415 	stw	r17,16(sp)
  8237bc:	282f883a 	mov	r23,r5
  8237c0:	d9000015 	stw	r4,0(sp)
  8237c4:	d9800115 	stw	r6,4(sp)
  8237c8:	2821883a 	mov	r16,r5
  8237cc:	84400007 	ldb	r17,0(r16)
  8237d0:	84000044 	addi	r16,r16,1
  8237d4:	9c47883a 	add	r3,r19,r17
  8237d8:	18800003 	ldbu	r2,0(r3)
  8237dc:	1080020c 	andi	r2,r2,8
  8237e0:	103ffa1e 	bne	r2,zero,8237cc <_strtol_r+0x48>
  8237e4:	00800b44 	movi	r2,45
  8237e8:	88805c26 	beq	r17,r2,82395c <_strtol_r+0x1d8>
  8237ec:	00800ac4 	movi	r2,43
  8237f0:	88805726 	beq	r17,r2,823950 <_strtol_r+0x1cc>
  8237f4:	0039883a 	mov	fp,zero
  8237f8:	3807003a 	cmpeq	r3,r7,zero
  8237fc:	1800431e 	bne	r3,zero,82390c <_strtol_r+0x188>
  823800:	00800404 	movi	r2,16
  823804:	38804126 	beq	r7,r2,82390c <_strtol_r+0x188>
  823808:	3829883a 	mov	r20,r7
  82380c:	e02cc03a 	cmpne	r22,fp,zero
  823810:	b0004b1e 	bne	r22,zero,823940 <_strtol_r+0x1bc>
  823814:	04a00034 	movhi	r18,32768
  823818:	94bfffc4 	addi	r18,r18,-1
  82381c:	9009883a 	mov	r4,r18
  823820:	a00b883a 	mov	r5,r20
  823824:	d9c00215 	stw	r7,8(sp)
  823828:	0820c100 	call	820c10 <__umodsi3>
  82382c:	9009883a 	mov	r4,r18
  823830:	a00b883a 	mov	r5,r20
  823834:	102b883a 	mov	r21,r2
  823838:	0820c080 	call	820c08 <__udivsi3>
  82383c:	1011883a 	mov	r8,r2
  823840:	9c45883a 	add	r2,r19,r17
  823844:	11000003 	ldbu	r4,0(r2)
  823848:	000b883a 	mov	r5,zero
  82384c:	000d883a 	mov	r6,zero
  823850:	20c0010c 	andi	r3,r4,4
  823854:	d9c00217 	ldw	r7,8(sp)
  823858:	18000e26 	beq	r3,zero,823894 <_strtol_r+0x110>
  82385c:	88fff404 	addi	r3,r17,-48
  823860:	19c0140e 	bge	r3,r7,8238b4 <_strtol_r+0x130>
  823864:	30003116 	blt	r6,zero,82392c <_strtol_r+0x1a8>
  823868:	41403036 	bltu	r8,r5,82392c <_strtol_r+0x1a8>
  82386c:	2a002e26 	beq	r5,r8,823928 <_strtol_r+0x1a4>
  823870:	2d05383a 	mul	r2,r5,r20
  823874:	01800044 	movi	r6,1
  823878:	10cb883a 	add	r5,r2,r3
  82387c:	84400007 	ldb	r17,0(r16)
  823880:	84000044 	addi	r16,r16,1
  823884:	9c45883a 	add	r2,r19,r17
  823888:	11000003 	ldbu	r4,0(r2)
  82388c:	20c0010c 	andi	r3,r4,4
  823890:	183ff21e 	bne	r3,zero,82385c <_strtol_r+0xd8>
  823894:	208000cc 	andi	r2,r4,3
  823898:	10000626 	beq	r2,zero,8238b4 <_strtol_r+0x130>
  82389c:	2080004c 	andi	r2,r4,1
  8238a0:	1005003a 	cmpeq	r2,r2,zero
  8238a4:	1000231e 	bne	r2,zero,823934 <_strtol_r+0x1b0>
  8238a8:	00800dc4 	movi	r2,55
  8238ac:	8887c83a 	sub	r3,r17,r2
  8238b0:	19ffec16 	blt	r3,r7,823864 <_strtol_r+0xe0>
  8238b4:	30002d16 	blt	r6,zero,82396c <_strtol_r+0x1e8>
  8238b8:	b000231e 	bne	r22,zero,823948 <_strtol_r+0x1c4>
  8238bc:	2807883a 	mov	r3,r5
  8238c0:	d8800117 	ldw	r2,4(sp)
  8238c4:	10000426 	beq	r2,zero,8238d8 <_strtol_r+0x154>
  8238c8:	30000126 	beq	r6,zero,8238d0 <_strtol_r+0x14c>
  8238cc:	85ffffc4 	addi	r23,r16,-1
  8238d0:	d9000117 	ldw	r4,4(sp)
  8238d4:	25c00015 	stw	r23,0(r4)
  8238d8:	1805883a 	mov	r2,r3
  8238dc:	dfc00c17 	ldw	ra,48(sp)
  8238e0:	df000b17 	ldw	fp,44(sp)
  8238e4:	ddc00a17 	ldw	r23,40(sp)
  8238e8:	dd800917 	ldw	r22,36(sp)
  8238ec:	dd400817 	ldw	r21,32(sp)
  8238f0:	dd000717 	ldw	r20,28(sp)
  8238f4:	dcc00617 	ldw	r19,24(sp)
  8238f8:	dc800517 	ldw	r18,20(sp)
  8238fc:	dc400417 	ldw	r17,16(sp)
  823900:	dc000317 	ldw	r16,12(sp)
  823904:	dec00d04 	addi	sp,sp,52
  823908:	f800283a 	ret
  82390c:	00800c04 	movi	r2,48
  823910:	88801d26 	beq	r17,r2,823988 <_strtol_r+0x204>
  823914:	183fbc26 	beq	r3,zero,823808 <_strtol_r+0x84>
  823918:	00800c04 	movi	r2,48
  82391c:	88802726 	beq	r17,r2,8239bc <_strtol_r+0x238>
  823920:	01c00284 	movi	r7,10
  823924:	003fb806 	br	823808 <_strtol_r+0x84>
  823928:	a8ffd10e 	bge	r21,r3,823870 <_strtol_r+0xec>
  82392c:	01bfffc4 	movi	r6,-1
  823930:	003fd206 	br	82387c <_strtol_r+0xf8>
  823934:	008015c4 	movi	r2,87
  823938:	8887c83a 	sub	r3,r17,r2
  82393c:	003fdc06 	br	8238b0 <_strtol_r+0x12c>
  823940:	04a00034 	movhi	r18,32768
  823944:	003fb506 	br	82381c <_strtol_r+0x98>
  823948:	0147c83a 	sub	r3,zero,r5
  82394c:	003fdc06 	br	8238c0 <_strtol_r+0x13c>
  823950:	84400007 	ldb	r17,0(r16)
  823954:	84000044 	addi	r16,r16,1
  823958:	003fa606 	br	8237f4 <_strtol_r+0x70>
  82395c:	84400007 	ldb	r17,0(r16)
  823960:	07000044 	movi	fp,1
  823964:	84000044 	addi	r16,r16,1
  823968:	003fa306 	br	8237f8 <_strtol_r+0x74>
  82396c:	e005003a 	cmpeq	r2,fp,zero
  823970:	10000f1e 	bne	r2,zero,8239b0 <_strtol_r+0x22c>
  823974:	00e00034 	movhi	r3,32768
  823978:	d9000017 	ldw	r4,0(sp)
  82397c:	00800884 	movi	r2,34
  823980:	20800015 	stw	r2,0(r4)
  823984:	003fce06 	br	8238c0 <_strtol_r+0x13c>
  823988:	81000007 	ldb	r4,0(r16)
  82398c:	00801e04 	movi	r2,120
  823990:	20800226 	beq	r4,r2,82399c <_strtol_r+0x218>
  823994:	00801604 	movi	r2,88
  823998:	20bfde1e 	bne	r4,r2,823914 <_strtol_r+0x190>
  82399c:	84400047 	ldb	r17,1(r16)
  8239a0:	01c00404 	movi	r7,16
  8239a4:	84000084 	addi	r16,r16,2
  8239a8:	3829883a 	mov	r20,r7
  8239ac:	003f9706 	br	82380c <_strtol_r+0x88>
  8239b0:	00e00034 	movhi	r3,32768
  8239b4:	18ffffc4 	addi	r3,r3,-1
  8239b8:	003fef06 	br	823978 <_strtol_r+0x1f4>
  8239bc:	01c00204 	movi	r7,8
  8239c0:	3829883a 	mov	r20,r7
  8239c4:	003f9106 	br	82380c <_strtol_r+0x88>

008239c8 <strtol>:
  8239c8:	00802134 	movhi	r2,132
  8239cc:	1082e104 	addi	r2,r2,2948
  8239d0:	2013883a 	mov	r9,r4
  8239d4:	11000017 	ldw	r4,0(r2)
  8239d8:	2805883a 	mov	r2,r5
  8239dc:	300f883a 	mov	r7,r6
  8239e0:	480b883a 	mov	r5,r9
  8239e4:	100d883a 	mov	r6,r2
  8239e8:	08237841 	jmpi	823784 <_strtol_r>

008239ec <__sprint_r>:
  8239ec:	30800217 	ldw	r2,8(r6)
  8239f0:	defffe04 	addi	sp,sp,-8
  8239f4:	dc000015 	stw	r16,0(sp)
  8239f8:	dfc00115 	stw	ra,4(sp)
  8239fc:	3021883a 	mov	r16,r6
  823a00:	0007883a 	mov	r3,zero
  823a04:	1000061e 	bne	r2,zero,823a20 <__sprint_r+0x34>
  823a08:	1805883a 	mov	r2,r3
  823a0c:	30000115 	stw	zero,4(r6)
  823a10:	dfc00117 	ldw	ra,4(sp)
  823a14:	dc000017 	ldw	r16,0(sp)
  823a18:	dec00204 	addi	sp,sp,8
  823a1c:	f800283a 	ret
  823a20:	0827d000 	call	827d00 <__sfvwrite_r>
  823a24:	1007883a 	mov	r3,r2
  823a28:	1805883a 	mov	r2,r3
  823a2c:	80000115 	stw	zero,4(r16)
  823a30:	80000215 	stw	zero,8(r16)
  823a34:	dfc00117 	ldw	ra,4(sp)
  823a38:	dc000017 	ldw	r16,0(sp)
  823a3c:	dec00204 	addi	sp,sp,8
  823a40:	f800283a 	ret

00823a44 <___vfprintf_internal_r>:
  823a44:	defea404 	addi	sp,sp,-1392
  823a48:	dd815815 	stw	r22,1376(sp)
  823a4c:	dc015215 	stw	r16,1352(sp)
  823a50:	d9c15115 	stw	r7,1348(sp)
  823a54:	dfc15b15 	stw	ra,1388(sp)
  823a58:	df015a15 	stw	fp,1384(sp)
  823a5c:	ddc15915 	stw	r23,1380(sp)
  823a60:	dd415715 	stw	r21,1372(sp)
  823a64:	dd015615 	stw	r20,1368(sp)
  823a68:	dcc15515 	stw	r19,1364(sp)
  823a6c:	dc815415 	stw	r18,1360(sp)
  823a70:	dc415315 	stw	r17,1356(sp)
  823a74:	282d883a 	mov	r22,r5
  823a78:	3021883a 	mov	r16,r6
  823a7c:	d9014f15 	stw	r4,1340(sp)
  823a80:	08283240 	call	828324 <_localeconv_r>
  823a84:	10800017 	ldw	r2,0(r2)
  823a88:	d9c15117 	ldw	r7,1348(sp)
  823a8c:	d8814915 	stw	r2,1316(sp)
  823a90:	d8814f17 	ldw	r2,1340(sp)
  823a94:	10000226 	beq	r2,zero,823aa0 <___vfprintf_internal_r+0x5c>
  823a98:	10800e17 	ldw	r2,56(r2)
  823a9c:	10020d26 	beq	r2,zero,8242d4 <___vfprintf_internal_r+0x890>
  823aa0:	b080030b 	ldhu	r2,12(r22)
  823aa4:	1080020c 	andi	r2,r2,8
  823aa8:	10020e26 	beq	r2,zero,8242e4 <___vfprintf_internal_r+0x8a0>
  823aac:	b0800417 	ldw	r2,16(r22)
  823ab0:	10020c26 	beq	r2,zero,8242e4 <___vfprintf_internal_r+0x8a0>
  823ab4:	b200030b 	ldhu	r8,12(r22)
  823ab8:	00800284 	movi	r2,10
  823abc:	40c0068c 	andi	r3,r8,26
  823ac0:	18802f1e 	bne	r3,r2,823b80 <___vfprintf_internal_r+0x13c>
  823ac4:	b080038f 	ldh	r2,14(r22)
  823ac8:	10002d16 	blt	r2,zero,823b80 <___vfprintf_internal_r+0x13c>
  823acc:	b240038b 	ldhu	r9,14(r22)
  823ad0:	b2800717 	ldw	r10,28(r22)
  823ad4:	b2c00917 	ldw	r11,36(r22)
  823ad8:	d9014f17 	ldw	r4,1340(sp)
  823adc:	dc402904 	addi	r17,sp,164
  823ae0:	d8804004 	addi	r2,sp,256
  823ae4:	00c10004 	movi	r3,1024
  823ae8:	423fff4c 	andi	r8,r8,65533
  823aec:	800d883a 	mov	r6,r16
  823af0:	880b883a 	mov	r5,r17
  823af4:	da002c0d 	sth	r8,176(sp)
  823af8:	da402c8d 	sth	r9,178(sp)
  823afc:	da803015 	stw	r10,192(sp)
  823b00:	dac03215 	stw	r11,200(sp)
  823b04:	d8802d15 	stw	r2,180(sp)
  823b08:	d8c02e15 	stw	r3,184(sp)
  823b0c:	d8802915 	stw	r2,164(sp)
  823b10:	d8c02b15 	stw	r3,172(sp)
  823b14:	d8002f15 	stw	zero,188(sp)
  823b18:	0823a440 	call	823a44 <___vfprintf_internal_r>
  823b1c:	d8814b15 	stw	r2,1324(sp)
  823b20:	10000416 	blt	r2,zero,823b34 <___vfprintf_internal_r+0xf0>
  823b24:	d9014f17 	ldw	r4,1340(sp)
  823b28:	880b883a 	mov	r5,r17
  823b2c:	08273d00 	call	8273d0 <_fflush_r>
  823b30:	1002321e 	bne	r2,zero,8243fc <___vfprintf_internal_r+0x9b8>
  823b34:	d8802c0b 	ldhu	r2,176(sp)
  823b38:	1080100c 	andi	r2,r2,64
  823b3c:	10000326 	beq	r2,zero,823b4c <___vfprintf_internal_r+0x108>
  823b40:	b080030b 	ldhu	r2,12(r22)
  823b44:	10801014 	ori	r2,r2,64
  823b48:	b080030d 	sth	r2,12(r22)
  823b4c:	d8814b17 	ldw	r2,1324(sp)
  823b50:	dfc15b17 	ldw	ra,1388(sp)
  823b54:	df015a17 	ldw	fp,1384(sp)
  823b58:	ddc15917 	ldw	r23,1380(sp)
  823b5c:	dd815817 	ldw	r22,1376(sp)
  823b60:	dd415717 	ldw	r21,1372(sp)
  823b64:	dd015617 	ldw	r20,1368(sp)
  823b68:	dcc15517 	ldw	r19,1364(sp)
  823b6c:	dc815417 	ldw	r18,1360(sp)
  823b70:	dc415317 	ldw	r17,1356(sp)
  823b74:	dc015217 	ldw	r16,1352(sp)
  823b78:	dec15c04 	addi	sp,sp,1392
  823b7c:	f800283a 	ret
  823b80:	0005883a 	mov	r2,zero
  823b84:	0007883a 	mov	r3,zero
  823b88:	dd401904 	addi	r21,sp,100
  823b8c:	d8814215 	stw	r2,1288(sp)
  823b90:	802f883a 	mov	r23,r16
  823b94:	d8c14315 	stw	r3,1292(sp)
  823b98:	d8014b15 	stw	zero,1324(sp)
  823b9c:	d8014815 	stw	zero,1312(sp)
  823ba0:	d8014415 	stw	zero,1296(sp)
  823ba4:	d8014715 	stw	zero,1308(sp)
  823ba8:	dd400c15 	stw	r21,48(sp)
  823bac:	d8000e15 	stw	zero,56(sp)
  823bb0:	d8000d15 	stw	zero,52(sp)
  823bb4:	b8800007 	ldb	r2,0(r23)
  823bb8:	10001926 	beq	r2,zero,823c20 <___vfprintf_internal_r+0x1dc>
  823bbc:	00c00944 	movi	r3,37
  823bc0:	10c01726 	beq	r2,r3,823c20 <___vfprintf_internal_r+0x1dc>
  823bc4:	b821883a 	mov	r16,r23
  823bc8:	00000106 	br	823bd0 <___vfprintf_internal_r+0x18c>
  823bcc:	10c00326 	beq	r2,r3,823bdc <___vfprintf_internal_r+0x198>
  823bd0:	84000044 	addi	r16,r16,1
  823bd4:	80800007 	ldb	r2,0(r16)
  823bd8:	103ffc1e 	bne	r2,zero,823bcc <___vfprintf_internal_r+0x188>
  823bdc:	85e7c83a 	sub	r19,r16,r23
  823be0:	98000e26 	beq	r19,zero,823c1c <___vfprintf_internal_r+0x1d8>
  823be4:	dc800e17 	ldw	r18,56(sp)
  823be8:	dc400d17 	ldw	r17,52(sp)
  823bec:	008001c4 	movi	r2,7
  823bf0:	94e5883a 	add	r18,r18,r19
  823bf4:	8c400044 	addi	r17,r17,1
  823bf8:	adc00015 	stw	r23,0(r21)
  823bfc:	dc800e15 	stw	r18,56(sp)
  823c00:	acc00115 	stw	r19,4(r21)
  823c04:	dc400d15 	stw	r17,52(sp)
  823c08:	14428b16 	blt	r2,r17,824638 <___vfprintf_internal_r+0xbf4>
  823c0c:	ad400204 	addi	r21,r21,8
  823c10:	d9014b17 	ldw	r4,1324(sp)
  823c14:	24c9883a 	add	r4,r4,r19
  823c18:	d9014b15 	stw	r4,1324(sp)
  823c1c:	802f883a 	mov	r23,r16
  823c20:	b8800007 	ldb	r2,0(r23)
  823c24:	10013c26 	beq	r2,zero,824118 <___vfprintf_internal_r+0x6d4>
  823c28:	bdc00044 	addi	r23,r23,1
  823c2c:	d8000405 	stb	zero,16(sp)
  823c30:	b8c00007 	ldb	r3,0(r23)
  823c34:	04ffffc4 	movi	r19,-1
  823c38:	d8014c15 	stw	zero,1328(sp)
  823c3c:	d8014a15 	stw	zero,1320(sp)
  823c40:	d8c14d15 	stw	r3,1332(sp)
  823c44:	bdc00044 	addi	r23,r23,1
  823c48:	d9414d17 	ldw	r5,1332(sp)
  823c4c:	00801604 	movi	r2,88
  823c50:	28fff804 	addi	r3,r5,-32
  823c54:	10c06036 	bltu	r2,r3,823dd8 <___vfprintf_internal_r+0x394>
  823c58:	18c5883a 	add	r2,r3,r3
  823c5c:	1085883a 	add	r2,r2,r2
  823c60:	00c020b4 	movhi	r3,130
  823c64:	18cf1d04 	addi	r3,r3,15476
  823c68:	10c5883a 	add	r2,r2,r3
  823c6c:	11000017 	ldw	r4,0(r2)
  823c70:	2000683a 	jmp	r4
  823c74:	00824be8 	cmpgeui	r2,zero,2351
  823c78:	00823dd8 	cmpnei	r2,zero,2295
  823c7c:	00823dd8 	cmpnei	r2,zero,2295
  823c80:	00824bd4 	movui	r2,2351
  823c84:	00823dd8 	cmpnei	r2,zero,2295
  823c88:	00823dd8 	cmpnei	r2,zero,2295
  823c8c:	00823dd8 	cmpnei	r2,zero,2295
  823c90:	00823dd8 	cmpnei	r2,zero,2295
  823c94:	00823dd8 	cmpnei	r2,zero,2295
  823c98:	00823dd8 	cmpnei	r2,zero,2295
  823c9c:	008249b4 	movhi	r2,2342
  823ca0:	00824bc4 	movi	r2,2351
  823ca4:	00823dd8 	cmpnei	r2,zero,2295
  823ca8:	008249cc 	andi	r2,zero,2343
  823cac:	00824c60 	cmpeqi	r2,zero,2353
  823cb0:	00823dd8 	cmpnei	r2,zero,2295
  823cb4:	00824c4c 	andi	r2,zero,2353
  823cb8:	00824c14 	movui	r2,2352
  823cbc:	00824c14 	movui	r2,2352
  823cc0:	00824c14 	movui	r2,2352
  823cc4:	00824c14 	movui	r2,2352
  823cc8:	00824c14 	movui	r2,2352
  823ccc:	00824c14 	movui	r2,2352
  823cd0:	00824c14 	movui	r2,2352
  823cd4:	00824c14 	movui	r2,2352
  823cd8:	00824c14 	movui	r2,2352
  823cdc:	00823dd8 	cmpnei	r2,zero,2295
  823ce0:	00823dd8 	cmpnei	r2,zero,2295
  823ce4:	00823dd8 	cmpnei	r2,zero,2295
  823ce8:	00823dd8 	cmpnei	r2,zero,2295
  823cec:	00823dd8 	cmpnei	r2,zero,2295
  823cf0:	00823dd8 	cmpnei	r2,zero,2295
  823cf4:	00823dd8 	cmpnei	r2,zero,2295
  823cf8:	00823dd8 	cmpnei	r2,zero,2295
  823cfc:	00823dd8 	cmpnei	r2,zero,2295
  823d00:	00823dd8 	cmpnei	r2,zero,2295
  823d04:	00824430 	cmpltui	r2,zero,2320
  823d08:	00824a9c 	xori	r2,zero,2346
  823d0c:	00823dd8 	cmpnei	r2,zero,2295
  823d10:	00824a9c 	xori	r2,zero,2346
  823d14:	00823dd8 	cmpnei	r2,zero,2295
  823d18:	00823dd8 	cmpnei	r2,zero,2295
  823d1c:	00823dd8 	cmpnei	r2,zero,2295
  823d20:	00823dd8 	cmpnei	r2,zero,2295
  823d24:	00824c00 	call	824c0 <__reset-0x77db40>
  823d28:	00823dd8 	cmpnei	r2,zero,2295
  823d2c:	00823dd8 	cmpnei	r2,zero,2295
  823d30:	008244e4 	muli	r2,zero,2323
  823d34:	00823dd8 	cmpnei	r2,zero,2295
  823d38:	00823dd8 	cmpnei	r2,zero,2295
  823d3c:	00823dd8 	cmpnei	r2,zero,2295
  823d40:	00823dd8 	cmpnei	r2,zero,2295
  823d44:	00823dd8 	cmpnei	r2,zero,2295
  823d48:	00824530 	cmpltui	r2,zero,2324
  823d4c:	00823dd8 	cmpnei	r2,zero,2295
  823d50:	00823dd8 	cmpnei	r2,zero,2295
  823d54:	00824b50 	cmplti	r2,zero,2349
  823d58:	00823dd8 	cmpnei	r2,zero,2295
  823d5c:	00823dd8 	cmpnei	r2,zero,2295
  823d60:	00823dd8 	cmpnei	r2,zero,2295
  823d64:	00823dd8 	cmpnei	r2,zero,2295
  823d68:	00823dd8 	cmpnei	r2,zero,2295
  823d6c:	00823dd8 	cmpnei	r2,zero,2295
  823d70:	00823dd8 	cmpnei	r2,zero,2295
  823d74:	00823dd8 	cmpnei	r2,zero,2295
  823d78:	00823dd8 	cmpnei	r2,zero,2295
  823d7c:	00823dd8 	cmpnei	r2,zero,2295
  823d80:	00824b24 	muli	r2,zero,2348
  823d84:	0082443c 	xorhi	r2,zero,2320
  823d88:	00824a9c 	xori	r2,zero,2346
  823d8c:	00824a9c 	xori	r2,zero,2346
  823d90:	00824a9c 	xori	r2,zero,2346
  823d94:	00824a88 	cmpgei	r2,zero,2346
  823d98:	0082443c 	xorhi	r2,zero,2320
  823d9c:	00823dd8 	cmpnei	r2,zero,2295
  823da0:	00823dd8 	cmpnei	r2,zero,2295
  823da4:	00824a10 	cmplti	r2,zero,2344
  823da8:	00823dd8 	cmpnei	r2,zero,2295
  823dac:	008249e0 	cmpeqi	r2,zero,2343
  823db0:	008244f0 	cmpltui	r2,zero,2323
  823db4:	00824a40 	call	824a4 <__reset-0x77db5c>
  823db8:	00824a2c 	andhi	r2,zero,2344
  823dbc:	00823dd8 	cmpnei	r2,zero,2295
  823dc0:	00824cbc 	xorhi	r2,zero,2354
  823dc4:	00823dd8 	cmpnei	r2,zero,2295
  823dc8:	0082453c 	xorhi	r2,zero,2324
  823dcc:	00823dd8 	cmpnei	r2,zero,2295
  823dd0:	00823dd8 	cmpnei	r2,zero,2295
  823dd4:	00824bb4 	movhi	r2,2350
  823dd8:	d9014d17 	ldw	r4,1332(sp)
  823ddc:	2000ce26 	beq	r4,zero,824118 <___vfprintf_internal_r+0x6d4>
  823de0:	01400044 	movi	r5,1
  823de4:	d9800f04 	addi	r6,sp,60
  823de8:	d9c14015 	stw	r7,1280(sp)
  823dec:	d9414515 	stw	r5,1300(sp)
  823df0:	d9814115 	stw	r6,1284(sp)
  823df4:	280f883a 	mov	r7,r5
  823df8:	d9000f05 	stb	r4,60(sp)
  823dfc:	d8000405 	stb	zero,16(sp)
  823e00:	d8014615 	stw	zero,1304(sp)
  823e04:	d8c14c17 	ldw	r3,1328(sp)
  823e08:	1880008c 	andi	r2,r3,2
  823e0c:	1005003a 	cmpeq	r2,r2,zero
  823e10:	d8815015 	stw	r2,1344(sp)
  823e14:	1000031e 	bne	r2,zero,823e24 <___vfprintf_internal_r+0x3e0>
  823e18:	d9014517 	ldw	r4,1300(sp)
  823e1c:	21000084 	addi	r4,r4,2
  823e20:	d9014515 	stw	r4,1300(sp)
  823e24:	d9414c17 	ldw	r5,1328(sp)
  823e28:	2940210c 	andi	r5,r5,132
  823e2c:	d9414e15 	stw	r5,1336(sp)
  823e30:	28002d1e 	bne	r5,zero,823ee8 <___vfprintf_internal_r+0x4a4>
  823e34:	d9814a17 	ldw	r6,1320(sp)
  823e38:	d8814517 	ldw	r2,1300(sp)
  823e3c:	30a1c83a 	sub	r16,r6,r2
  823e40:	0400290e 	bge	zero,r16,823ee8 <___vfprintf_internal_r+0x4a4>
  823e44:	00800404 	movi	r2,16
  823e48:	1404580e 	bge	r2,r16,824fac <___vfprintf_internal_r+0x1568>
  823e4c:	dc800e17 	ldw	r18,56(sp)
  823e50:	dc400d17 	ldw	r17,52(sp)
  823e54:	1027883a 	mov	r19,r2
  823e58:	07002134 	movhi	fp,132
  823e5c:	e73a9e84 	addi	fp,fp,-5510
  823e60:	050001c4 	movi	r20,7
  823e64:	00000306 	br	823e74 <___vfprintf_internal_r+0x430>
  823e68:	843ffc04 	addi	r16,r16,-16
  823e6c:	ad400204 	addi	r21,r21,8
  823e70:	9c00130e 	bge	r19,r16,823ec0 <___vfprintf_internal_r+0x47c>
  823e74:	94800404 	addi	r18,r18,16
  823e78:	8c400044 	addi	r17,r17,1
  823e7c:	af000015 	stw	fp,0(r21)
  823e80:	acc00115 	stw	r19,4(r21)
  823e84:	dc800e15 	stw	r18,56(sp)
  823e88:	dc400d15 	stw	r17,52(sp)
  823e8c:	a47ff60e 	bge	r20,r17,823e68 <___vfprintf_internal_r+0x424>
  823e90:	d9014f17 	ldw	r4,1340(sp)
  823e94:	b00b883a 	mov	r5,r22
  823e98:	d9800c04 	addi	r6,sp,48
  823e9c:	d9c15115 	stw	r7,1348(sp)
  823ea0:	08239ec0 	call	8239ec <__sprint_r>
  823ea4:	d9c15117 	ldw	r7,1348(sp)
  823ea8:	10009e1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  823eac:	843ffc04 	addi	r16,r16,-16
  823eb0:	dc800e17 	ldw	r18,56(sp)
  823eb4:	dc400d17 	ldw	r17,52(sp)
  823eb8:	dd401904 	addi	r21,sp,100
  823ebc:	9c3fed16 	blt	r19,r16,823e74 <___vfprintf_internal_r+0x430>
  823ec0:	9425883a 	add	r18,r18,r16
  823ec4:	8c400044 	addi	r17,r17,1
  823ec8:	008001c4 	movi	r2,7
  823ecc:	af000015 	stw	fp,0(r21)
  823ed0:	ac000115 	stw	r16,4(r21)
  823ed4:	dc800e15 	stw	r18,56(sp)
  823ed8:	dc400d15 	stw	r17,52(sp)
  823edc:	1441f516 	blt	r2,r17,8246b4 <___vfprintf_internal_r+0xc70>
  823ee0:	ad400204 	addi	r21,r21,8
  823ee4:	00000206 	br	823ef0 <___vfprintf_internal_r+0x4ac>
  823ee8:	dc800e17 	ldw	r18,56(sp)
  823eec:	dc400d17 	ldw	r17,52(sp)
  823ef0:	d8800407 	ldb	r2,16(sp)
  823ef4:	10000b26 	beq	r2,zero,823f24 <___vfprintf_internal_r+0x4e0>
  823ef8:	00800044 	movi	r2,1
  823efc:	94800044 	addi	r18,r18,1
  823f00:	8c400044 	addi	r17,r17,1
  823f04:	a8800115 	stw	r2,4(r21)
  823f08:	d8c00404 	addi	r3,sp,16
  823f0c:	008001c4 	movi	r2,7
  823f10:	a8c00015 	stw	r3,0(r21)
  823f14:	dc800e15 	stw	r18,56(sp)
  823f18:	dc400d15 	stw	r17,52(sp)
  823f1c:	1441da16 	blt	r2,r17,824688 <___vfprintf_internal_r+0xc44>
  823f20:	ad400204 	addi	r21,r21,8
  823f24:	d9015017 	ldw	r4,1344(sp)
  823f28:	20000b1e 	bne	r4,zero,823f58 <___vfprintf_internal_r+0x514>
  823f2c:	d8800444 	addi	r2,sp,17
  823f30:	94800084 	addi	r18,r18,2
  823f34:	8c400044 	addi	r17,r17,1
  823f38:	a8800015 	stw	r2,0(r21)
  823f3c:	00c00084 	movi	r3,2
  823f40:	008001c4 	movi	r2,7
  823f44:	a8c00115 	stw	r3,4(r21)
  823f48:	dc800e15 	stw	r18,56(sp)
  823f4c:	dc400d15 	stw	r17,52(sp)
  823f50:	1441c216 	blt	r2,r17,82465c <___vfprintf_internal_r+0xc18>
  823f54:	ad400204 	addi	r21,r21,8
  823f58:	d9414e17 	ldw	r5,1336(sp)
  823f5c:	00802004 	movi	r2,128
  823f60:	2880b126 	beq	r5,r2,824228 <___vfprintf_internal_r+0x7e4>
  823f64:	d8c14617 	ldw	r3,1304(sp)
  823f68:	19e1c83a 	sub	r16,r3,r7
  823f6c:	0400260e 	bge	zero,r16,824008 <___vfprintf_internal_r+0x5c4>
  823f70:	00800404 	movi	r2,16
  823f74:	1403c90e 	bge	r2,r16,824e9c <___vfprintf_internal_r+0x1458>
  823f78:	1027883a 	mov	r19,r2
  823f7c:	07002134 	movhi	fp,132
  823f80:	e73a9a84 	addi	fp,fp,-5526
  823f84:	050001c4 	movi	r20,7
  823f88:	00000306 	br	823f98 <___vfprintf_internal_r+0x554>
  823f8c:	843ffc04 	addi	r16,r16,-16
  823f90:	ad400204 	addi	r21,r21,8
  823f94:	9c00130e 	bge	r19,r16,823fe4 <___vfprintf_internal_r+0x5a0>
  823f98:	94800404 	addi	r18,r18,16
  823f9c:	8c400044 	addi	r17,r17,1
  823fa0:	af000015 	stw	fp,0(r21)
  823fa4:	acc00115 	stw	r19,4(r21)
  823fa8:	dc800e15 	stw	r18,56(sp)
  823fac:	dc400d15 	stw	r17,52(sp)
  823fb0:	a47ff60e 	bge	r20,r17,823f8c <___vfprintf_internal_r+0x548>
  823fb4:	d9014f17 	ldw	r4,1340(sp)
  823fb8:	b00b883a 	mov	r5,r22
  823fbc:	d9800c04 	addi	r6,sp,48
  823fc0:	d9c15115 	stw	r7,1348(sp)
  823fc4:	08239ec0 	call	8239ec <__sprint_r>
  823fc8:	d9c15117 	ldw	r7,1348(sp)
  823fcc:	1000551e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  823fd0:	843ffc04 	addi	r16,r16,-16
  823fd4:	dc800e17 	ldw	r18,56(sp)
  823fd8:	dc400d17 	ldw	r17,52(sp)
  823fdc:	dd401904 	addi	r21,sp,100
  823fe0:	9c3fed16 	blt	r19,r16,823f98 <___vfprintf_internal_r+0x554>
  823fe4:	9425883a 	add	r18,r18,r16
  823fe8:	8c400044 	addi	r17,r17,1
  823fec:	008001c4 	movi	r2,7
  823ff0:	af000015 	stw	fp,0(r21)
  823ff4:	ac000115 	stw	r16,4(r21)
  823ff8:	dc800e15 	stw	r18,56(sp)
  823ffc:	dc400d15 	stw	r17,52(sp)
  824000:	14418216 	blt	r2,r17,82460c <___vfprintf_internal_r+0xbc8>
  824004:	ad400204 	addi	r21,r21,8
  824008:	d9014c17 	ldw	r4,1328(sp)
  82400c:	2080400c 	andi	r2,r4,256
  824010:	10004a1e 	bne	r2,zero,82413c <___vfprintf_internal_r+0x6f8>
  824014:	d9414117 	ldw	r5,1284(sp)
  824018:	91e5883a 	add	r18,r18,r7
  82401c:	8c400044 	addi	r17,r17,1
  824020:	008001c4 	movi	r2,7
  824024:	a9400015 	stw	r5,0(r21)
  824028:	a9c00115 	stw	r7,4(r21)
  82402c:	dc800e15 	stw	r18,56(sp)
  824030:	dc400d15 	stw	r17,52(sp)
  824034:	14416716 	blt	r2,r17,8245d4 <___vfprintf_internal_r+0xb90>
  824038:	a8c00204 	addi	r3,r21,8
  82403c:	d9814c17 	ldw	r6,1328(sp)
  824040:	3080010c 	andi	r2,r6,4
  824044:	10002826 	beq	r2,zero,8240e8 <___vfprintf_internal_r+0x6a4>
  824048:	d8814a17 	ldw	r2,1320(sp)
  82404c:	d9014517 	ldw	r4,1300(sp)
  824050:	1121c83a 	sub	r16,r2,r4
  824054:	0400240e 	bge	zero,r16,8240e8 <___vfprintf_internal_r+0x6a4>
  824058:	00800404 	movi	r2,16
  82405c:	14044f0e 	bge	r2,r16,82519c <___vfprintf_internal_r+0x1758>
  824060:	dc400d17 	ldw	r17,52(sp)
  824064:	1027883a 	mov	r19,r2
  824068:	07002134 	movhi	fp,132
  82406c:	e73a9e84 	addi	fp,fp,-5510
  824070:	050001c4 	movi	r20,7
  824074:	00000306 	br	824084 <___vfprintf_internal_r+0x640>
  824078:	843ffc04 	addi	r16,r16,-16
  82407c:	18c00204 	addi	r3,r3,8
  824080:	9c00110e 	bge	r19,r16,8240c8 <___vfprintf_internal_r+0x684>
  824084:	94800404 	addi	r18,r18,16
  824088:	8c400044 	addi	r17,r17,1
  82408c:	1f000015 	stw	fp,0(r3)
  824090:	1cc00115 	stw	r19,4(r3)
  824094:	dc800e15 	stw	r18,56(sp)
  824098:	dc400d15 	stw	r17,52(sp)
  82409c:	a47ff60e 	bge	r20,r17,824078 <___vfprintf_internal_r+0x634>
  8240a0:	d9014f17 	ldw	r4,1340(sp)
  8240a4:	b00b883a 	mov	r5,r22
  8240a8:	d9800c04 	addi	r6,sp,48
  8240ac:	08239ec0 	call	8239ec <__sprint_r>
  8240b0:	10001c1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8240b4:	843ffc04 	addi	r16,r16,-16
  8240b8:	dc800e17 	ldw	r18,56(sp)
  8240bc:	dc400d17 	ldw	r17,52(sp)
  8240c0:	d8c01904 	addi	r3,sp,100
  8240c4:	9c3fef16 	blt	r19,r16,824084 <___vfprintf_internal_r+0x640>
  8240c8:	9425883a 	add	r18,r18,r16
  8240cc:	8c400044 	addi	r17,r17,1
  8240d0:	008001c4 	movi	r2,7
  8240d4:	1f000015 	stw	fp,0(r3)
  8240d8:	1c000115 	stw	r16,4(r3)
  8240dc:	dc800e15 	stw	r18,56(sp)
  8240e0:	dc400d15 	stw	r17,52(sp)
  8240e4:	1440cb16 	blt	r2,r17,824414 <___vfprintf_internal_r+0x9d0>
  8240e8:	d8814a17 	ldw	r2,1320(sp)
  8240ec:	d9414517 	ldw	r5,1300(sp)
  8240f0:	1140010e 	bge	r2,r5,8240f8 <___vfprintf_internal_r+0x6b4>
  8240f4:	2805883a 	mov	r2,r5
  8240f8:	d9814b17 	ldw	r6,1324(sp)
  8240fc:	308d883a 	add	r6,r6,r2
  824100:	d9814b15 	stw	r6,1324(sp)
  824104:	90013b1e 	bne	r18,zero,8245f4 <___vfprintf_internal_r+0xbb0>
  824108:	d9c14017 	ldw	r7,1280(sp)
  82410c:	dd401904 	addi	r21,sp,100
  824110:	d8000d15 	stw	zero,52(sp)
  824114:	003ea706 	br	823bb4 <___vfprintf_internal_r+0x170>
  824118:	d8800e17 	ldw	r2,56(sp)
  82411c:	10053f1e 	bne	r2,zero,82561c <___vfprintf_internal_r+0x1bd8>
  824120:	d8000d15 	stw	zero,52(sp)
  824124:	b080030b 	ldhu	r2,12(r22)
  824128:	1080100c 	andi	r2,r2,64
  82412c:	103e8726 	beq	r2,zero,823b4c <___vfprintf_internal_r+0x108>
  824130:	00bfffc4 	movi	r2,-1
  824134:	d8814b15 	stw	r2,1324(sp)
  824138:	003e8406 	br	823b4c <___vfprintf_internal_r+0x108>
  82413c:	d9814d17 	ldw	r6,1332(sp)
  824140:	00801944 	movi	r2,101
  824144:	11806e16 	blt	r2,r6,824300 <___vfprintf_internal_r+0x8bc>
  824148:	d9414717 	ldw	r5,1308(sp)
  82414c:	00c00044 	movi	r3,1
  824150:	1943430e 	bge	r3,r5,824e60 <___vfprintf_internal_r+0x141c>
  824154:	d8814117 	ldw	r2,1284(sp)
  824158:	94800044 	addi	r18,r18,1
  82415c:	8c400044 	addi	r17,r17,1
  824160:	a8800015 	stw	r2,0(r21)
  824164:	008001c4 	movi	r2,7
  824168:	a8c00115 	stw	r3,4(r21)
  82416c:	dc800e15 	stw	r18,56(sp)
  824170:	dc400d15 	stw	r17,52(sp)
  824174:	1441ca16 	blt	r2,r17,8248a0 <___vfprintf_internal_r+0xe5c>
  824178:	a8c00204 	addi	r3,r21,8
  82417c:	d9014917 	ldw	r4,1316(sp)
  824180:	00800044 	movi	r2,1
  824184:	94800044 	addi	r18,r18,1
  824188:	8c400044 	addi	r17,r17,1
  82418c:	18800115 	stw	r2,4(r3)
  824190:	008001c4 	movi	r2,7
  824194:	19000015 	stw	r4,0(r3)
  824198:	dc800e15 	stw	r18,56(sp)
  82419c:	dc400d15 	stw	r17,52(sp)
  8241a0:	1441b616 	blt	r2,r17,82487c <___vfprintf_internal_r+0xe38>
  8241a4:	1cc00204 	addi	r19,r3,8
  8241a8:	d9014217 	ldw	r4,1288(sp)
  8241ac:	d9414317 	ldw	r5,1292(sp)
  8241b0:	000d883a 	mov	r6,zero
  8241b4:	000f883a 	mov	r7,zero
  8241b8:	082a8980 	call	82a898 <__nedf2>
  8241bc:	10017426 	beq	r2,zero,824790 <___vfprintf_internal_r+0xd4c>
  8241c0:	d9414717 	ldw	r5,1308(sp)
  8241c4:	d9814117 	ldw	r6,1284(sp)
  8241c8:	8c400044 	addi	r17,r17,1
  8241cc:	2c85883a 	add	r2,r5,r18
  8241d0:	14bfffc4 	addi	r18,r2,-1
  8241d4:	28bfffc4 	addi	r2,r5,-1
  8241d8:	30c00044 	addi	r3,r6,1
  8241dc:	98800115 	stw	r2,4(r19)
  8241e0:	008001c4 	movi	r2,7
  8241e4:	98c00015 	stw	r3,0(r19)
  8241e8:	dc800e15 	stw	r18,56(sp)
  8241ec:	dc400d15 	stw	r17,52(sp)
  8241f0:	14418e16 	blt	r2,r17,82482c <___vfprintf_internal_r+0xde8>
  8241f4:	9cc00204 	addi	r19,r19,8
  8241f8:	d9414817 	ldw	r5,1312(sp)
  8241fc:	d8800804 	addi	r2,sp,32
  824200:	8c400044 	addi	r17,r17,1
  824204:	9165883a 	add	r18,r18,r5
  824208:	98800015 	stw	r2,0(r19)
  82420c:	008001c4 	movi	r2,7
  824210:	99400115 	stw	r5,4(r19)
  824214:	dc800e15 	stw	r18,56(sp)
  824218:	dc400d15 	stw	r17,52(sp)
  82421c:	1440ed16 	blt	r2,r17,8245d4 <___vfprintf_internal_r+0xb90>
  824220:	98c00204 	addi	r3,r19,8
  824224:	003f8506 	br	82403c <___vfprintf_internal_r+0x5f8>
  824228:	d9814a17 	ldw	r6,1320(sp)
  82422c:	d8814517 	ldw	r2,1300(sp)
  824230:	30a1c83a 	sub	r16,r6,r2
  824234:	043f4b0e 	bge	zero,r16,823f64 <___vfprintf_internal_r+0x520>
  824238:	00800404 	movi	r2,16
  82423c:	1404340e 	bge	r2,r16,825310 <___vfprintf_internal_r+0x18cc>
  824240:	1027883a 	mov	r19,r2
  824244:	07002134 	movhi	fp,132
  824248:	e73a9a84 	addi	fp,fp,-5526
  82424c:	050001c4 	movi	r20,7
  824250:	00000306 	br	824260 <___vfprintf_internal_r+0x81c>
  824254:	843ffc04 	addi	r16,r16,-16
  824258:	ad400204 	addi	r21,r21,8
  82425c:	9c00130e 	bge	r19,r16,8242ac <___vfprintf_internal_r+0x868>
  824260:	94800404 	addi	r18,r18,16
  824264:	8c400044 	addi	r17,r17,1
  824268:	af000015 	stw	fp,0(r21)
  82426c:	acc00115 	stw	r19,4(r21)
  824270:	dc800e15 	stw	r18,56(sp)
  824274:	dc400d15 	stw	r17,52(sp)
  824278:	a47ff60e 	bge	r20,r17,824254 <___vfprintf_internal_r+0x810>
  82427c:	d9014f17 	ldw	r4,1340(sp)
  824280:	b00b883a 	mov	r5,r22
  824284:	d9800c04 	addi	r6,sp,48
  824288:	d9c15115 	stw	r7,1348(sp)
  82428c:	08239ec0 	call	8239ec <__sprint_r>
  824290:	d9c15117 	ldw	r7,1348(sp)
  824294:	103fa31e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824298:	843ffc04 	addi	r16,r16,-16
  82429c:	dc800e17 	ldw	r18,56(sp)
  8242a0:	dc400d17 	ldw	r17,52(sp)
  8242a4:	dd401904 	addi	r21,sp,100
  8242a8:	9c3fed16 	blt	r19,r16,824260 <___vfprintf_internal_r+0x81c>
  8242ac:	9425883a 	add	r18,r18,r16
  8242b0:	8c400044 	addi	r17,r17,1
  8242b4:	008001c4 	movi	r2,7
  8242b8:	af000015 	stw	fp,0(r21)
  8242bc:	ac000115 	stw	r16,4(r21)
  8242c0:	dc800e15 	stw	r18,56(sp)
  8242c4:	dc400d15 	stw	r17,52(sp)
  8242c8:	14416116 	blt	r2,r17,824850 <___vfprintf_internal_r+0xe0c>
  8242cc:	ad400204 	addi	r21,r21,8
  8242d0:	003f2406 	br	823f64 <___vfprintf_internal_r+0x520>
  8242d4:	d9014f17 	ldw	r4,1340(sp)
  8242d8:	08276680 	call	827668 <__sinit>
  8242dc:	d9c15117 	ldw	r7,1348(sp)
  8242e0:	003def06 	br	823aa0 <___vfprintf_internal_r+0x5c>
  8242e4:	d9014f17 	ldw	r4,1340(sp)
  8242e8:	b00b883a 	mov	r5,r22
  8242ec:	d9c15115 	stw	r7,1348(sp)
  8242f0:	08259140 	call	825914 <__swsetup_r>
  8242f4:	d9c15117 	ldw	r7,1348(sp)
  8242f8:	103dee26 	beq	r2,zero,823ab4 <___vfprintf_internal_r+0x70>
  8242fc:	003f8c06 	br	824130 <___vfprintf_internal_r+0x6ec>
  824300:	d9014217 	ldw	r4,1288(sp)
  824304:	d9414317 	ldw	r5,1292(sp)
  824308:	000d883a 	mov	r6,zero
  82430c:	000f883a 	mov	r7,zero
  824310:	08206300 	call	820630 <__eqdf2>
  824314:	1000f21e 	bne	r2,zero,8246e0 <___vfprintf_internal_r+0xc9c>
  824318:	008020f4 	movhi	r2,131
  82431c:	108d3f04 	addi	r2,r2,13564
  824320:	94800044 	addi	r18,r18,1
  824324:	8c400044 	addi	r17,r17,1
  824328:	a8800015 	stw	r2,0(r21)
  82432c:	00c00044 	movi	r3,1
  824330:	008001c4 	movi	r2,7
  824334:	a8c00115 	stw	r3,4(r21)
  824338:	dc800e15 	stw	r18,56(sp)
  82433c:	dc400d15 	stw	r17,52(sp)
  824340:	1442fa16 	blt	r2,r17,824f2c <___vfprintf_internal_r+0x14e8>
  824344:	a8c00204 	addi	r3,r21,8
  824348:	d8800517 	ldw	r2,20(sp)
  82434c:	d9014717 	ldw	r4,1308(sp)
  824350:	11015c0e 	bge	r2,r4,8248c4 <___vfprintf_internal_r+0xe80>
  824354:	dc400d17 	ldw	r17,52(sp)
  824358:	d9814917 	ldw	r6,1316(sp)
  82435c:	00800044 	movi	r2,1
  824360:	94800044 	addi	r18,r18,1
  824364:	8c400044 	addi	r17,r17,1
  824368:	18800115 	stw	r2,4(r3)
  82436c:	008001c4 	movi	r2,7
  824370:	19800015 	stw	r6,0(r3)
  824374:	dc800e15 	stw	r18,56(sp)
  824378:	dc400d15 	stw	r17,52(sp)
  82437c:	14431016 	blt	r2,r17,824fc0 <___vfprintf_internal_r+0x157c>
  824380:	18c00204 	addi	r3,r3,8
  824384:	d8814717 	ldw	r2,1308(sp)
  824388:	143fffc4 	addi	r16,r2,-1
  82438c:	043f2b0e 	bge	zero,r16,82403c <___vfprintf_internal_r+0x5f8>
  824390:	00800404 	movi	r2,16
  824394:	1402a20e 	bge	r2,r16,824e20 <___vfprintf_internal_r+0x13dc>
  824398:	dc400d17 	ldw	r17,52(sp)
  82439c:	1027883a 	mov	r19,r2
  8243a0:	07002134 	movhi	fp,132
  8243a4:	e73a9a84 	addi	fp,fp,-5526
  8243a8:	050001c4 	movi	r20,7
  8243ac:	00000306 	br	8243bc <___vfprintf_internal_r+0x978>
  8243b0:	18c00204 	addi	r3,r3,8
  8243b4:	843ffc04 	addi	r16,r16,-16
  8243b8:	9c029c0e 	bge	r19,r16,824e2c <___vfprintf_internal_r+0x13e8>
  8243bc:	94800404 	addi	r18,r18,16
  8243c0:	8c400044 	addi	r17,r17,1
  8243c4:	1f000015 	stw	fp,0(r3)
  8243c8:	1cc00115 	stw	r19,4(r3)
  8243cc:	dc800e15 	stw	r18,56(sp)
  8243d0:	dc400d15 	stw	r17,52(sp)
  8243d4:	a47ff60e 	bge	r20,r17,8243b0 <___vfprintf_internal_r+0x96c>
  8243d8:	d9014f17 	ldw	r4,1340(sp)
  8243dc:	b00b883a 	mov	r5,r22
  8243e0:	d9800c04 	addi	r6,sp,48
  8243e4:	08239ec0 	call	8239ec <__sprint_r>
  8243e8:	103f4e1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8243ec:	dc800e17 	ldw	r18,56(sp)
  8243f0:	dc400d17 	ldw	r17,52(sp)
  8243f4:	d8c01904 	addi	r3,sp,100
  8243f8:	003fee06 	br	8243b4 <___vfprintf_internal_r+0x970>
  8243fc:	d8802c0b 	ldhu	r2,176(sp)
  824400:	00ffffc4 	movi	r3,-1
  824404:	d8c14b15 	stw	r3,1324(sp)
  824408:	1080100c 	andi	r2,r2,64
  82440c:	103dcc1e 	bne	r2,zero,823b40 <___vfprintf_internal_r+0xfc>
  824410:	003dce06 	br	823b4c <___vfprintf_internal_r+0x108>
  824414:	d9014f17 	ldw	r4,1340(sp)
  824418:	b00b883a 	mov	r5,r22
  82441c:	d9800c04 	addi	r6,sp,48
  824420:	08239ec0 	call	8239ec <__sprint_r>
  824424:	103f3f1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824428:	dc800e17 	ldw	r18,56(sp)
  82442c:	003f2e06 	br	8240e8 <___vfprintf_internal_r+0x6a4>
  824430:	d9414c17 	ldw	r5,1328(sp)
  824434:	29400414 	ori	r5,r5,16
  824438:	d9414c15 	stw	r5,1328(sp)
  82443c:	d9814c17 	ldw	r6,1328(sp)
  824440:	3080080c 	andi	r2,r6,32
  824444:	10014f1e 	bne	r2,zero,824984 <___vfprintf_internal_r+0xf40>
  824448:	d8c14c17 	ldw	r3,1328(sp)
  82444c:	1880040c 	andi	r2,r3,16
  824450:	1002ea1e 	bne	r2,zero,824ffc <___vfprintf_internal_r+0x15b8>
  824454:	d9014c17 	ldw	r4,1328(sp)
  824458:	2080100c 	andi	r2,r4,64
  82445c:	1002e726 	beq	r2,zero,824ffc <___vfprintf_internal_r+0x15b8>
  824460:	3880000f 	ldh	r2,0(r7)
  824464:	39c00104 	addi	r7,r7,4
  824468:	d9c14015 	stw	r7,1280(sp)
  82446c:	1023d7fa 	srai	r17,r2,31
  824470:	1021883a 	mov	r16,r2
  824474:	88037216 	blt	r17,zero,825240 <___vfprintf_internal_r+0x17fc>
  824478:	01000044 	movi	r4,1
  82447c:	98000416 	blt	r19,zero,824490 <___vfprintf_internal_r+0xa4c>
  824480:	d8c14c17 	ldw	r3,1328(sp)
  824484:	00bfdfc4 	movi	r2,-129
  824488:	1886703a 	and	r3,r3,r2
  82448c:	d8c14c15 	stw	r3,1328(sp)
  824490:	8444b03a 	or	r2,r16,r17
  824494:	1002261e 	bne	r2,zero,824d30 <___vfprintf_internal_r+0x12ec>
  824498:	9802251e 	bne	r19,zero,824d30 <___vfprintf_internal_r+0x12ec>
  82449c:	20803fcc 	andi	r2,r4,255
  8244a0:	10029b26 	beq	r2,zero,824f10 <___vfprintf_internal_r+0x14cc>
  8244a4:	d8c01904 	addi	r3,sp,100
  8244a8:	dd000f04 	addi	r20,sp,60
  8244ac:	d8c14115 	stw	r3,1284(sp)
  8244b0:	d8c14117 	ldw	r3,1284(sp)
  8244b4:	dcc14515 	stw	r19,1300(sp)
  8244b8:	a0c5c83a 	sub	r2,r20,r3
  8244bc:	11c00a04 	addi	r7,r2,40
  8244c0:	99c0010e 	bge	r19,r7,8244c8 <___vfprintf_internal_r+0xa84>
  8244c4:	d9c14515 	stw	r7,1300(sp)
  8244c8:	dcc14615 	stw	r19,1304(sp)
  8244cc:	d8800407 	ldb	r2,16(sp)
  8244d0:	103e4c26 	beq	r2,zero,823e04 <___vfprintf_internal_r+0x3c0>
  8244d4:	d8814517 	ldw	r2,1300(sp)
  8244d8:	10800044 	addi	r2,r2,1
  8244dc:	d8814515 	stw	r2,1300(sp)
  8244e0:	003e4806 	br	823e04 <___vfprintf_internal_r+0x3c0>
  8244e4:	d9814c17 	ldw	r6,1328(sp)
  8244e8:	31800414 	ori	r6,r6,16
  8244ec:	d9814c15 	stw	r6,1328(sp)
  8244f0:	d8c14c17 	ldw	r3,1328(sp)
  8244f4:	1880080c 	andi	r2,r3,32
  8244f8:	1001271e 	bne	r2,zero,824998 <___vfprintf_internal_r+0xf54>
  8244fc:	d9414c17 	ldw	r5,1328(sp)
  824500:	2880040c 	andi	r2,r5,16
  824504:	1002b61e 	bne	r2,zero,824fe0 <___vfprintf_internal_r+0x159c>
  824508:	d9814c17 	ldw	r6,1328(sp)
  82450c:	3080100c 	andi	r2,r6,64
  824510:	1002b326 	beq	r2,zero,824fe0 <___vfprintf_internal_r+0x159c>
  824514:	3c00000b 	ldhu	r16,0(r7)
  824518:	0009883a 	mov	r4,zero
  82451c:	39c00104 	addi	r7,r7,4
  824520:	0023883a 	mov	r17,zero
  824524:	d9c14015 	stw	r7,1280(sp)
  824528:	d8000405 	stb	zero,16(sp)
  82452c:	003fd306 	br	82447c <___vfprintf_internal_r+0xa38>
  824530:	d9014c17 	ldw	r4,1328(sp)
  824534:	21000414 	ori	r4,r4,16
  824538:	d9014c15 	stw	r4,1328(sp)
  82453c:	d9414c17 	ldw	r5,1328(sp)
  824540:	2880080c 	andi	r2,r5,32
  824544:	1001081e 	bne	r2,zero,824968 <___vfprintf_internal_r+0xf24>
  824548:	d8c14c17 	ldw	r3,1328(sp)
  82454c:	1880040c 	andi	r2,r3,16
  824550:	1002b01e 	bne	r2,zero,825014 <___vfprintf_internal_r+0x15d0>
  824554:	d9014c17 	ldw	r4,1328(sp)
  824558:	2080100c 	andi	r2,r4,64
  82455c:	1002ad26 	beq	r2,zero,825014 <___vfprintf_internal_r+0x15d0>
  824560:	3c00000b 	ldhu	r16,0(r7)
  824564:	01000044 	movi	r4,1
  824568:	39c00104 	addi	r7,r7,4
  82456c:	0023883a 	mov	r17,zero
  824570:	d9c14015 	stw	r7,1280(sp)
  824574:	d8000405 	stb	zero,16(sp)
  824578:	003fc006 	br	82447c <___vfprintf_internal_r+0xa38>
  82457c:	d9014f17 	ldw	r4,1340(sp)
  824580:	b00b883a 	mov	r5,r22
  824584:	d9800c04 	addi	r6,sp,48
  824588:	08239ec0 	call	8239ec <__sprint_r>
  82458c:	103ee51e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824590:	dc800e17 	ldw	r18,56(sp)
  824594:	d8c01904 	addi	r3,sp,100
  824598:	d9814c17 	ldw	r6,1328(sp)
  82459c:	3080004c 	andi	r2,r6,1
  8245a0:	1005003a 	cmpeq	r2,r2,zero
  8245a4:	103ea51e 	bne	r2,zero,82403c <___vfprintf_internal_r+0x5f8>
  8245a8:	00800044 	movi	r2,1
  8245ac:	dc400d17 	ldw	r17,52(sp)
  8245b0:	18800115 	stw	r2,4(r3)
  8245b4:	d8814917 	ldw	r2,1316(sp)
  8245b8:	94800044 	addi	r18,r18,1
  8245bc:	8c400044 	addi	r17,r17,1
  8245c0:	18800015 	stw	r2,0(r3)
  8245c4:	008001c4 	movi	r2,7
  8245c8:	dc800e15 	stw	r18,56(sp)
  8245cc:	dc400d15 	stw	r17,52(sp)
  8245d0:	14421e0e 	bge	r2,r17,824e4c <___vfprintf_internal_r+0x1408>
  8245d4:	d9014f17 	ldw	r4,1340(sp)
  8245d8:	b00b883a 	mov	r5,r22
  8245dc:	d9800c04 	addi	r6,sp,48
  8245e0:	08239ec0 	call	8239ec <__sprint_r>
  8245e4:	103ecf1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8245e8:	dc800e17 	ldw	r18,56(sp)
  8245ec:	d8c01904 	addi	r3,sp,100
  8245f0:	003e9206 	br	82403c <___vfprintf_internal_r+0x5f8>
  8245f4:	d9014f17 	ldw	r4,1340(sp)
  8245f8:	b00b883a 	mov	r5,r22
  8245fc:	d9800c04 	addi	r6,sp,48
  824600:	08239ec0 	call	8239ec <__sprint_r>
  824604:	103ec026 	beq	r2,zero,824108 <___vfprintf_internal_r+0x6c4>
  824608:	003ec606 	br	824124 <___vfprintf_internal_r+0x6e0>
  82460c:	d9014f17 	ldw	r4,1340(sp)
  824610:	b00b883a 	mov	r5,r22
  824614:	d9800c04 	addi	r6,sp,48
  824618:	d9c15115 	stw	r7,1348(sp)
  82461c:	08239ec0 	call	8239ec <__sprint_r>
  824620:	d9c15117 	ldw	r7,1348(sp)
  824624:	103ebf1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824628:	dc800e17 	ldw	r18,56(sp)
  82462c:	dc400d17 	ldw	r17,52(sp)
  824630:	dd401904 	addi	r21,sp,100
  824634:	003e7406 	br	824008 <___vfprintf_internal_r+0x5c4>
  824638:	d9014f17 	ldw	r4,1340(sp)
  82463c:	b00b883a 	mov	r5,r22
  824640:	d9800c04 	addi	r6,sp,48
  824644:	d9c15115 	stw	r7,1348(sp)
  824648:	08239ec0 	call	8239ec <__sprint_r>
  82464c:	d9c15117 	ldw	r7,1348(sp)
  824650:	103eb41e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824654:	dd401904 	addi	r21,sp,100
  824658:	003d6d06 	br	823c10 <___vfprintf_internal_r+0x1cc>
  82465c:	d9014f17 	ldw	r4,1340(sp)
  824660:	b00b883a 	mov	r5,r22
  824664:	d9800c04 	addi	r6,sp,48
  824668:	d9c15115 	stw	r7,1348(sp)
  82466c:	08239ec0 	call	8239ec <__sprint_r>
  824670:	d9c15117 	ldw	r7,1348(sp)
  824674:	103eab1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824678:	dc800e17 	ldw	r18,56(sp)
  82467c:	dc400d17 	ldw	r17,52(sp)
  824680:	dd401904 	addi	r21,sp,100
  824684:	003e3406 	br	823f58 <___vfprintf_internal_r+0x514>
  824688:	d9014f17 	ldw	r4,1340(sp)
  82468c:	b00b883a 	mov	r5,r22
  824690:	d9800c04 	addi	r6,sp,48
  824694:	d9c15115 	stw	r7,1348(sp)
  824698:	08239ec0 	call	8239ec <__sprint_r>
  82469c:	d9c15117 	ldw	r7,1348(sp)
  8246a0:	103ea01e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8246a4:	dc800e17 	ldw	r18,56(sp)
  8246a8:	dc400d17 	ldw	r17,52(sp)
  8246ac:	dd401904 	addi	r21,sp,100
  8246b0:	003e1c06 	br	823f24 <___vfprintf_internal_r+0x4e0>
  8246b4:	d9014f17 	ldw	r4,1340(sp)
  8246b8:	b00b883a 	mov	r5,r22
  8246bc:	d9800c04 	addi	r6,sp,48
  8246c0:	d9c15115 	stw	r7,1348(sp)
  8246c4:	08239ec0 	call	8239ec <__sprint_r>
  8246c8:	d9c15117 	ldw	r7,1348(sp)
  8246cc:	103e951e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8246d0:	dc800e17 	ldw	r18,56(sp)
  8246d4:	dc400d17 	ldw	r17,52(sp)
  8246d8:	dd401904 	addi	r21,sp,100
  8246dc:	003e0406 	br	823ef0 <___vfprintf_internal_r+0x4ac>
  8246e0:	d9000517 	ldw	r4,20(sp)
  8246e4:	0102520e 	bge	zero,r4,825030 <___vfprintf_internal_r+0x15ec>
  8246e8:	d9814717 	ldw	r6,1308(sp)
  8246ec:	21807a16 	blt	r4,r6,8248d8 <___vfprintf_internal_r+0xe94>
  8246f0:	d8814117 	ldw	r2,1284(sp)
  8246f4:	91a5883a 	add	r18,r18,r6
  8246f8:	8c400044 	addi	r17,r17,1
  8246fc:	a8800015 	stw	r2,0(r21)
  824700:	008001c4 	movi	r2,7
  824704:	a9800115 	stw	r6,4(r21)
  824708:	dc800e15 	stw	r18,56(sp)
  82470c:	dc400d15 	stw	r17,52(sp)
  824710:	1442f616 	blt	r2,r17,8252ec <___vfprintf_internal_r+0x18a8>
  824714:	a8c00204 	addi	r3,r21,8
  824718:	d9414717 	ldw	r5,1308(sp)
  82471c:	2161c83a 	sub	r16,r4,r5
  824720:	043f9d0e 	bge	zero,r16,824598 <___vfprintf_internal_r+0xb54>
  824724:	00800404 	movi	r2,16
  824728:	1402130e 	bge	r2,r16,824f78 <___vfprintf_internal_r+0x1534>
  82472c:	dc400d17 	ldw	r17,52(sp)
  824730:	1027883a 	mov	r19,r2
  824734:	07002134 	movhi	fp,132
  824738:	e73a9a84 	addi	fp,fp,-5526
  82473c:	050001c4 	movi	r20,7
  824740:	00000306 	br	824750 <___vfprintf_internal_r+0xd0c>
  824744:	18c00204 	addi	r3,r3,8
  824748:	843ffc04 	addi	r16,r16,-16
  82474c:	9c020d0e 	bge	r19,r16,824f84 <___vfprintf_internal_r+0x1540>
  824750:	94800404 	addi	r18,r18,16
  824754:	8c400044 	addi	r17,r17,1
  824758:	1f000015 	stw	fp,0(r3)
  82475c:	1cc00115 	stw	r19,4(r3)
  824760:	dc800e15 	stw	r18,56(sp)
  824764:	dc400d15 	stw	r17,52(sp)
  824768:	a47ff60e 	bge	r20,r17,824744 <___vfprintf_internal_r+0xd00>
  82476c:	d9014f17 	ldw	r4,1340(sp)
  824770:	b00b883a 	mov	r5,r22
  824774:	d9800c04 	addi	r6,sp,48
  824778:	08239ec0 	call	8239ec <__sprint_r>
  82477c:	103e691e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824780:	dc800e17 	ldw	r18,56(sp)
  824784:	dc400d17 	ldw	r17,52(sp)
  824788:	d8c01904 	addi	r3,sp,100
  82478c:	003fee06 	br	824748 <___vfprintf_internal_r+0xd04>
  824790:	d8814717 	ldw	r2,1308(sp)
  824794:	143fffc4 	addi	r16,r2,-1
  824798:	043e970e 	bge	zero,r16,8241f8 <___vfprintf_internal_r+0x7b4>
  82479c:	00800404 	movi	r2,16
  8247a0:	1400180e 	bge	r2,r16,824804 <___vfprintf_internal_r+0xdc0>
  8247a4:	1029883a 	mov	r20,r2
  8247a8:	07002134 	movhi	fp,132
  8247ac:	e73a9a84 	addi	fp,fp,-5526
  8247b0:	054001c4 	movi	r21,7
  8247b4:	00000306 	br	8247c4 <___vfprintf_internal_r+0xd80>
  8247b8:	9cc00204 	addi	r19,r19,8
  8247bc:	843ffc04 	addi	r16,r16,-16
  8247c0:	a400120e 	bge	r20,r16,82480c <___vfprintf_internal_r+0xdc8>
  8247c4:	94800404 	addi	r18,r18,16
  8247c8:	8c400044 	addi	r17,r17,1
  8247cc:	9f000015 	stw	fp,0(r19)
  8247d0:	9d000115 	stw	r20,4(r19)
  8247d4:	dc800e15 	stw	r18,56(sp)
  8247d8:	dc400d15 	stw	r17,52(sp)
  8247dc:	ac7ff60e 	bge	r21,r17,8247b8 <___vfprintf_internal_r+0xd74>
  8247e0:	d9014f17 	ldw	r4,1340(sp)
  8247e4:	b00b883a 	mov	r5,r22
  8247e8:	d9800c04 	addi	r6,sp,48
  8247ec:	08239ec0 	call	8239ec <__sprint_r>
  8247f0:	103e4c1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8247f4:	dc800e17 	ldw	r18,56(sp)
  8247f8:	dc400d17 	ldw	r17,52(sp)
  8247fc:	dcc01904 	addi	r19,sp,100
  824800:	003fee06 	br	8247bc <___vfprintf_internal_r+0xd78>
  824804:	07002134 	movhi	fp,132
  824808:	e73a9a84 	addi	fp,fp,-5526
  82480c:	9425883a 	add	r18,r18,r16
  824810:	8c400044 	addi	r17,r17,1
  824814:	008001c4 	movi	r2,7
  824818:	9f000015 	stw	fp,0(r19)
  82481c:	9c000115 	stw	r16,4(r19)
  824820:	dc800e15 	stw	r18,56(sp)
  824824:	dc400d15 	stw	r17,52(sp)
  824828:	147e720e 	bge	r2,r17,8241f4 <___vfprintf_internal_r+0x7b0>
  82482c:	d9014f17 	ldw	r4,1340(sp)
  824830:	b00b883a 	mov	r5,r22
  824834:	d9800c04 	addi	r6,sp,48
  824838:	08239ec0 	call	8239ec <__sprint_r>
  82483c:	103e391e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824840:	dc800e17 	ldw	r18,56(sp)
  824844:	dc400d17 	ldw	r17,52(sp)
  824848:	dcc01904 	addi	r19,sp,100
  82484c:	003e6a06 	br	8241f8 <___vfprintf_internal_r+0x7b4>
  824850:	d9014f17 	ldw	r4,1340(sp)
  824854:	b00b883a 	mov	r5,r22
  824858:	d9800c04 	addi	r6,sp,48
  82485c:	d9c15115 	stw	r7,1348(sp)
  824860:	08239ec0 	call	8239ec <__sprint_r>
  824864:	d9c15117 	ldw	r7,1348(sp)
  824868:	103e2e1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  82486c:	dc800e17 	ldw	r18,56(sp)
  824870:	dc400d17 	ldw	r17,52(sp)
  824874:	dd401904 	addi	r21,sp,100
  824878:	003dba06 	br	823f64 <___vfprintf_internal_r+0x520>
  82487c:	d9014f17 	ldw	r4,1340(sp)
  824880:	b00b883a 	mov	r5,r22
  824884:	d9800c04 	addi	r6,sp,48
  824888:	08239ec0 	call	8239ec <__sprint_r>
  82488c:	103e251e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824890:	dc800e17 	ldw	r18,56(sp)
  824894:	dc400d17 	ldw	r17,52(sp)
  824898:	dcc01904 	addi	r19,sp,100
  82489c:	003e4206 	br	8241a8 <___vfprintf_internal_r+0x764>
  8248a0:	d9014f17 	ldw	r4,1340(sp)
  8248a4:	b00b883a 	mov	r5,r22
  8248a8:	d9800c04 	addi	r6,sp,48
  8248ac:	08239ec0 	call	8239ec <__sprint_r>
  8248b0:	103e1c1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8248b4:	dc800e17 	ldw	r18,56(sp)
  8248b8:	dc400d17 	ldw	r17,52(sp)
  8248bc:	d8c01904 	addi	r3,sp,100
  8248c0:	003e2e06 	br	82417c <___vfprintf_internal_r+0x738>
  8248c4:	d9414c17 	ldw	r5,1328(sp)
  8248c8:	2880004c 	andi	r2,r5,1
  8248cc:	1005003a 	cmpeq	r2,r2,zero
  8248d0:	103dda1e 	bne	r2,zero,82403c <___vfprintf_internal_r+0x5f8>
  8248d4:	003e9f06 	br	824354 <___vfprintf_internal_r+0x910>
  8248d8:	d8c14117 	ldw	r3,1284(sp)
  8248dc:	9125883a 	add	r18,r18,r4
  8248e0:	8c400044 	addi	r17,r17,1
  8248e4:	008001c4 	movi	r2,7
  8248e8:	a8c00015 	stw	r3,0(r21)
  8248ec:	a9000115 	stw	r4,4(r21)
  8248f0:	dc800e15 	stw	r18,56(sp)
  8248f4:	dc400d15 	stw	r17,52(sp)
  8248f8:	14426616 	blt	r2,r17,825294 <___vfprintf_internal_r+0x1850>
  8248fc:	a8c00204 	addi	r3,r21,8
  824900:	d9414917 	ldw	r5,1316(sp)
  824904:	00800044 	movi	r2,1
  824908:	94800044 	addi	r18,r18,1
  82490c:	8c400044 	addi	r17,r17,1
  824910:	18800115 	stw	r2,4(r3)
  824914:	008001c4 	movi	r2,7
  824918:	19400015 	stw	r5,0(r3)
  82491c:	dc800e15 	stw	r18,56(sp)
  824920:	dc400d15 	stw	r17,52(sp)
  824924:	2021883a 	mov	r16,r4
  824928:	14425016 	blt	r2,r17,82526c <___vfprintf_internal_r+0x1828>
  82492c:	19400204 	addi	r5,r3,8
  824930:	d9814717 	ldw	r6,1308(sp)
  824934:	8c400044 	addi	r17,r17,1
  824938:	dc400d15 	stw	r17,52(sp)
  82493c:	3107c83a 	sub	r3,r6,r4
  824940:	d9014117 	ldw	r4,1284(sp)
  824944:	90e5883a 	add	r18,r18,r3
  824948:	28c00115 	stw	r3,4(r5)
  82494c:	8105883a 	add	r2,r16,r4
  824950:	28800015 	stw	r2,0(r5)
  824954:	008001c4 	movi	r2,7
  824958:	dc800e15 	stw	r18,56(sp)
  82495c:	147f1d16 	blt	r2,r17,8245d4 <___vfprintf_internal_r+0xb90>
  824960:	28c00204 	addi	r3,r5,8
  824964:	003db506 	br	82403c <___vfprintf_internal_r+0x5f8>
  824968:	3c000017 	ldw	r16,0(r7)
  82496c:	3c400117 	ldw	r17,4(r7)
  824970:	39800204 	addi	r6,r7,8
  824974:	01000044 	movi	r4,1
  824978:	d9814015 	stw	r6,1280(sp)
  82497c:	d8000405 	stb	zero,16(sp)
  824980:	003ebe06 	br	82447c <___vfprintf_internal_r+0xa38>
  824984:	3c000017 	ldw	r16,0(r7)
  824988:	3c400117 	ldw	r17,4(r7)
  82498c:	38800204 	addi	r2,r7,8
  824990:	d8814015 	stw	r2,1280(sp)
  824994:	003eb706 	br	824474 <___vfprintf_internal_r+0xa30>
  824998:	3c000017 	ldw	r16,0(r7)
  82499c:	3c400117 	ldw	r17,4(r7)
  8249a0:	39000204 	addi	r4,r7,8
  8249a4:	d9014015 	stw	r4,1280(sp)
  8249a8:	0009883a 	mov	r4,zero
  8249ac:	d8000405 	stb	zero,16(sp)
  8249b0:	003eb206 	br	82447c <___vfprintf_internal_r+0xa38>
  8249b4:	38c00017 	ldw	r3,0(r7)
  8249b8:	39c00104 	addi	r7,r7,4
  8249bc:	d8c14a15 	stw	r3,1320(sp)
  8249c0:	1800d10e 	bge	r3,zero,824d08 <___vfprintf_internal_r+0x12c4>
  8249c4:	00c7c83a 	sub	r3,zero,r3
  8249c8:	d8c14a15 	stw	r3,1320(sp)
  8249cc:	d9014c17 	ldw	r4,1328(sp)
  8249d0:	b8c00007 	ldb	r3,0(r23)
  8249d4:	21000114 	ori	r4,r4,4
  8249d8:	d9014c15 	stw	r4,1328(sp)
  8249dc:	003c9806 	br	823c40 <___vfprintf_internal_r+0x1fc>
  8249e0:	d9814c17 	ldw	r6,1328(sp)
  8249e4:	3080080c 	andi	r2,r6,32
  8249e8:	1001f026 	beq	r2,zero,8251ac <___vfprintf_internal_r+0x1768>
  8249ec:	d9014b17 	ldw	r4,1324(sp)
  8249f0:	38800017 	ldw	r2,0(r7)
  8249f4:	39c00104 	addi	r7,r7,4
  8249f8:	d9c14015 	stw	r7,1280(sp)
  8249fc:	2007d7fa 	srai	r3,r4,31
  824a00:	d9c14017 	ldw	r7,1280(sp)
  824a04:	11000015 	stw	r4,0(r2)
  824a08:	10c00115 	stw	r3,4(r2)
  824a0c:	003c6906 	br	823bb4 <___vfprintf_internal_r+0x170>
  824a10:	b8c00007 	ldb	r3,0(r23)
  824a14:	00801b04 	movi	r2,108
  824a18:	18824f26 	beq	r3,r2,825358 <___vfprintf_internal_r+0x1914>
  824a1c:	d9414c17 	ldw	r5,1328(sp)
  824a20:	29400414 	ori	r5,r5,16
  824a24:	d9414c15 	stw	r5,1328(sp)
  824a28:	003c8506 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824a2c:	d9814c17 	ldw	r6,1328(sp)
  824a30:	b8c00007 	ldb	r3,0(r23)
  824a34:	31800814 	ori	r6,r6,32
  824a38:	d9814c15 	stw	r6,1328(sp)
  824a3c:	003c8006 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824a40:	d8814c17 	ldw	r2,1328(sp)
  824a44:	3c000017 	ldw	r16,0(r7)
  824a48:	00c01e04 	movi	r3,120
  824a4c:	10800094 	ori	r2,r2,2
  824a50:	d8814c15 	stw	r2,1328(sp)
  824a54:	39c00104 	addi	r7,r7,4
  824a58:	01402134 	movhi	r5,132
  824a5c:	297a8404 	addi	r5,r5,-5616
  824a60:	00800c04 	movi	r2,48
  824a64:	0023883a 	mov	r17,zero
  824a68:	01000084 	movi	r4,2
  824a6c:	d9c14015 	stw	r7,1280(sp)
  824a70:	d8c14d15 	stw	r3,1332(sp)
  824a74:	d9414415 	stw	r5,1296(sp)
  824a78:	d8800445 	stb	r2,17(sp)
  824a7c:	d8c00485 	stb	r3,18(sp)
  824a80:	d8000405 	stb	zero,16(sp)
  824a84:	003e7d06 	br	82447c <___vfprintf_internal_r+0xa38>
  824a88:	d8814c17 	ldw	r2,1328(sp)
  824a8c:	b8c00007 	ldb	r3,0(r23)
  824a90:	10801014 	ori	r2,r2,64
  824a94:	d8814c15 	stw	r2,1328(sp)
  824a98:	003c6906 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824a9c:	d9414c17 	ldw	r5,1328(sp)
  824aa0:	2880020c 	andi	r2,r5,8
  824aa4:	1001df26 	beq	r2,zero,825224 <___vfprintf_internal_r+0x17e0>
  824aa8:	39800017 	ldw	r6,0(r7)
  824aac:	38800204 	addi	r2,r7,8
  824ab0:	d8814015 	stw	r2,1280(sp)
  824ab4:	d9814215 	stw	r6,1288(sp)
  824ab8:	39c00117 	ldw	r7,4(r7)
  824abc:	d9c14315 	stw	r7,1292(sp)
  824ac0:	d9014217 	ldw	r4,1288(sp)
  824ac4:	d9414317 	ldw	r5,1292(sp)
  824ac8:	08296c00 	call	8296c0 <__isinfd>
  824acc:	10021726 	beq	r2,zero,82532c <___vfprintf_internal_r+0x18e8>
  824ad0:	d9014217 	ldw	r4,1288(sp)
  824ad4:	d9414317 	ldw	r5,1292(sp)
  824ad8:	000d883a 	mov	r6,zero
  824adc:	000f883a 	mov	r7,zero
  824ae0:	08207c80 	call	8207c8 <__ltdf2>
  824ae4:	1002ca16 	blt	r2,zero,825610 <___vfprintf_internal_r+0x1bcc>
  824ae8:	d9414d17 	ldw	r5,1332(sp)
  824aec:	008011c4 	movi	r2,71
  824af0:	11420a16 	blt	r2,r5,82531c <___vfprintf_internal_r+0x18d8>
  824af4:	01802134 	movhi	r6,132
  824af8:	31ba8904 	addi	r6,r6,-5596
  824afc:	d9814115 	stw	r6,1284(sp)
  824b00:	d9014c17 	ldw	r4,1328(sp)
  824b04:	00c000c4 	movi	r3,3
  824b08:	00bfdfc4 	movi	r2,-129
  824b0c:	2088703a 	and	r4,r4,r2
  824b10:	180f883a 	mov	r7,r3
  824b14:	d8c14515 	stw	r3,1300(sp)
  824b18:	d9014c15 	stw	r4,1328(sp)
  824b1c:	d8014615 	stw	zero,1304(sp)
  824b20:	003e6a06 	br	8244cc <___vfprintf_internal_r+0xa88>
  824b24:	38800017 	ldw	r2,0(r7)
  824b28:	00c00044 	movi	r3,1
  824b2c:	39c00104 	addi	r7,r7,4
  824b30:	d9c14015 	stw	r7,1280(sp)
  824b34:	d9000f04 	addi	r4,sp,60
  824b38:	180f883a 	mov	r7,r3
  824b3c:	d8c14515 	stw	r3,1300(sp)
  824b40:	d9014115 	stw	r4,1284(sp)
  824b44:	d8800f05 	stb	r2,60(sp)
  824b48:	d8000405 	stb	zero,16(sp)
  824b4c:	003cac06 	br	823e00 <___vfprintf_internal_r+0x3bc>
  824b50:	01402134 	movhi	r5,132
  824b54:	297a8f04 	addi	r5,r5,-5572
  824b58:	d9414415 	stw	r5,1296(sp)
  824b5c:	d9814c17 	ldw	r6,1328(sp)
  824b60:	3080080c 	andi	r2,r6,32
  824b64:	1000f926 	beq	r2,zero,824f4c <___vfprintf_internal_r+0x1508>
  824b68:	3c000017 	ldw	r16,0(r7)
  824b6c:	3c400117 	ldw	r17,4(r7)
  824b70:	38800204 	addi	r2,r7,8
  824b74:	d8814015 	stw	r2,1280(sp)
  824b78:	d9414c17 	ldw	r5,1328(sp)
  824b7c:	2880004c 	andi	r2,r5,1
  824b80:	1005003a 	cmpeq	r2,r2,zero
  824b84:	1000b31e 	bne	r2,zero,824e54 <___vfprintf_internal_r+0x1410>
  824b88:	8444b03a 	or	r2,r16,r17
  824b8c:	1000b126 	beq	r2,zero,824e54 <___vfprintf_internal_r+0x1410>
  824b90:	d9814d17 	ldw	r6,1332(sp)
  824b94:	29400094 	ori	r5,r5,2
  824b98:	00800c04 	movi	r2,48
  824b9c:	01000084 	movi	r4,2
  824ba0:	d9414c15 	stw	r5,1328(sp)
  824ba4:	d8800445 	stb	r2,17(sp)
  824ba8:	d9800485 	stb	r6,18(sp)
  824bac:	d8000405 	stb	zero,16(sp)
  824bb0:	003e3206 	br	82447c <___vfprintf_internal_r+0xa38>
  824bb4:	01802134 	movhi	r6,132
  824bb8:	31ba8404 	addi	r6,r6,-5616
  824bbc:	d9814415 	stw	r6,1296(sp)
  824bc0:	003fe606 	br	824b5c <___vfprintf_internal_r+0x1118>
  824bc4:	00800ac4 	movi	r2,43
  824bc8:	d8800405 	stb	r2,16(sp)
  824bcc:	b8c00007 	ldb	r3,0(r23)
  824bd0:	003c1b06 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824bd4:	d8814c17 	ldw	r2,1328(sp)
  824bd8:	b8c00007 	ldb	r3,0(r23)
  824bdc:	10800054 	ori	r2,r2,1
  824be0:	d8814c15 	stw	r2,1328(sp)
  824be4:	003c1606 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824be8:	d8800407 	ldb	r2,16(sp)
  824bec:	1000461e 	bne	r2,zero,824d08 <___vfprintf_internal_r+0x12c4>
  824bf0:	00800804 	movi	r2,32
  824bf4:	d8800405 	stb	r2,16(sp)
  824bf8:	b8c00007 	ldb	r3,0(r23)
  824bfc:	003c1006 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824c00:	d9814c17 	ldw	r6,1328(sp)
  824c04:	b8c00007 	ldb	r3,0(r23)
  824c08:	31800214 	ori	r6,r6,8
  824c0c:	d9814c15 	stw	r6,1328(sp)
  824c10:	003c0b06 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824c14:	0007883a 	mov	r3,zero
  824c18:	01000244 	movi	r4,9
  824c1c:	188002a4 	muli	r2,r3,10
  824c20:	b8c00007 	ldb	r3,0(r23)
  824c24:	d9814d17 	ldw	r6,1332(sp)
  824c28:	bdc00044 	addi	r23,r23,1
  824c2c:	d8c14d15 	stw	r3,1332(sp)
  824c30:	d9414d17 	ldw	r5,1332(sp)
  824c34:	3085883a 	add	r2,r6,r2
  824c38:	10fff404 	addi	r3,r2,-48
  824c3c:	28bff404 	addi	r2,r5,-48
  824c40:	20bff62e 	bgeu	r4,r2,824c1c <___vfprintf_internal_r+0x11d8>
  824c44:	d8c14a15 	stw	r3,1320(sp)
  824c48:	003bff06 	br	823c48 <___vfprintf_internal_r+0x204>
  824c4c:	d9414c17 	ldw	r5,1328(sp)
  824c50:	b8c00007 	ldb	r3,0(r23)
  824c54:	29402014 	ori	r5,r5,128
  824c58:	d9414c15 	stw	r5,1328(sp)
  824c5c:	003bf806 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824c60:	b8c00007 	ldb	r3,0(r23)
  824c64:	00800a84 	movi	r2,42
  824c68:	bdc00044 	addi	r23,r23,1
  824c6c:	18831526 	beq	r3,r2,8258c4 <___vfprintf_internal_r+0x1e80>
  824c70:	d8c14d15 	stw	r3,1332(sp)
  824c74:	18bff404 	addi	r2,r3,-48
  824c78:	00c00244 	movi	r3,9
  824c7c:	18827836 	bltu	r3,r2,825660 <___vfprintf_internal_r+0x1c1c>
  824c80:	000d883a 	mov	r6,zero
  824c84:	308002a4 	muli	r2,r6,10
  824c88:	b9800007 	ldb	r6,0(r23)
  824c8c:	d9414d17 	ldw	r5,1332(sp)
  824c90:	bdc00044 	addi	r23,r23,1
  824c94:	d9814d15 	stw	r6,1332(sp)
  824c98:	d9014d17 	ldw	r4,1332(sp)
  824c9c:	1145883a 	add	r2,r2,r5
  824ca0:	11bff404 	addi	r6,r2,-48
  824ca4:	20bff404 	addi	r2,r4,-48
  824ca8:	18bff62e 	bgeu	r3,r2,824c84 <___vfprintf_internal_r+0x1240>
  824cac:	3027883a 	mov	r19,r6
  824cb0:	303be50e 	bge	r6,zero,823c48 <___vfprintf_internal_r+0x204>
  824cb4:	04ffffc4 	movi	r19,-1
  824cb8:	003be306 	br	823c48 <___vfprintf_internal_r+0x204>
  824cbc:	d8000405 	stb	zero,16(sp)
  824cc0:	39800017 	ldw	r6,0(r7)
  824cc4:	39c00104 	addi	r7,r7,4
  824cc8:	d9c14015 	stw	r7,1280(sp)
  824ccc:	d9814115 	stw	r6,1284(sp)
  824cd0:	3001c926 	beq	r6,zero,8253f8 <___vfprintf_internal_r+0x19b4>
  824cd4:	98000e16 	blt	r19,zero,824d10 <___vfprintf_internal_r+0x12cc>
  824cd8:	d9014117 	ldw	r4,1284(sp)
  824cdc:	000b883a 	mov	r5,zero
  824ce0:	980d883a 	mov	r6,r19
  824ce4:	08285740 	call	828574 <memchr>
  824ce8:	10025926 	beq	r2,zero,825650 <___vfprintf_internal_r+0x1c0c>
  824cec:	d8c14117 	ldw	r3,1284(sp)
  824cf0:	10cfc83a 	sub	r7,r2,r3
  824cf4:	99c19e16 	blt	r19,r7,825370 <___vfprintf_internal_r+0x192c>
  824cf8:	d9c14515 	stw	r7,1300(sp)
  824cfc:	38000916 	blt	r7,zero,824d24 <___vfprintf_internal_r+0x12e0>
  824d00:	d8014615 	stw	zero,1304(sp)
  824d04:	003df106 	br	8244cc <___vfprintf_internal_r+0xa88>
  824d08:	b8c00007 	ldb	r3,0(r23)
  824d0c:	003bcc06 	br	823c40 <___vfprintf_internal_r+0x1fc>
  824d10:	d9014117 	ldw	r4,1284(sp)
  824d14:	0822e100 	call	822e10 <strlen>
  824d18:	d8814515 	stw	r2,1300(sp)
  824d1c:	100f883a 	mov	r7,r2
  824d20:	103ff70e 	bge	r2,zero,824d00 <___vfprintf_internal_r+0x12bc>
  824d24:	d8014515 	stw	zero,1300(sp)
  824d28:	d8014615 	stw	zero,1304(sp)
  824d2c:	003de706 	br	8244cc <___vfprintf_internal_r+0xa88>
  824d30:	20c03fcc 	andi	r3,r4,255
  824d34:	00800044 	movi	r2,1
  824d38:	18802d26 	beq	r3,r2,824df0 <___vfprintf_internal_r+0x13ac>
  824d3c:	18800e36 	bltu	r3,r2,824d78 <___vfprintf_internal_r+0x1334>
  824d40:	00800084 	movi	r2,2
  824d44:	1880fa26 	beq	r3,r2,825130 <___vfprintf_internal_r+0x16ec>
  824d48:	01002134 	movhi	r4,132
  824d4c:	213a9404 	addi	r4,r4,-5552
  824d50:	0822e100 	call	822e10 <strlen>
  824d54:	100f883a 	mov	r7,r2
  824d58:	dcc14515 	stw	r19,1300(sp)
  824d5c:	9880010e 	bge	r19,r2,824d64 <___vfprintf_internal_r+0x1320>
  824d60:	d8814515 	stw	r2,1300(sp)
  824d64:	00802134 	movhi	r2,132
  824d68:	10ba9404 	addi	r2,r2,-5552
  824d6c:	dcc14615 	stw	r19,1304(sp)
  824d70:	d8814115 	stw	r2,1284(sp)
  824d74:	003dd506 	br	8244cc <___vfprintf_internal_r+0xa88>
  824d78:	d9401904 	addi	r5,sp,100
  824d7c:	dd000f04 	addi	r20,sp,60
  824d80:	d9414115 	stw	r5,1284(sp)
  824d84:	880a977a 	slli	r5,r17,29
  824d88:	d9814117 	ldw	r6,1284(sp)
  824d8c:	8004d0fa 	srli	r2,r16,3
  824d90:	8806d0fa 	srli	r3,r17,3
  824d94:	810001cc 	andi	r4,r16,7
  824d98:	2884b03a 	or	r2,r5,r2
  824d9c:	31bfffc4 	addi	r6,r6,-1
  824da0:	21000c04 	addi	r4,r4,48
  824da4:	d9814115 	stw	r6,1284(sp)
  824da8:	10cab03a 	or	r5,r2,r3
  824dac:	31000005 	stb	r4,0(r6)
  824db0:	1021883a 	mov	r16,r2
  824db4:	1823883a 	mov	r17,r3
  824db8:	283ff21e 	bne	r5,zero,824d84 <___vfprintf_internal_r+0x1340>
  824dbc:	d8c14c17 	ldw	r3,1328(sp)
  824dc0:	1880004c 	andi	r2,r3,1
  824dc4:	1005003a 	cmpeq	r2,r2,zero
  824dc8:	103db91e 	bne	r2,zero,8244b0 <___vfprintf_internal_r+0xa6c>
  824dcc:	20803fcc 	andi	r2,r4,255
  824dd0:	1080201c 	xori	r2,r2,128
  824dd4:	10bfe004 	addi	r2,r2,-128
  824dd8:	00c00c04 	movi	r3,48
  824ddc:	10fdb426 	beq	r2,r3,8244b0 <___vfprintf_internal_r+0xa6c>
  824de0:	31bfffc4 	addi	r6,r6,-1
  824de4:	d9814115 	stw	r6,1284(sp)
  824de8:	30c00005 	stb	r3,0(r6)
  824dec:	003db006 	br	8244b0 <___vfprintf_internal_r+0xa6c>
  824df0:	88800068 	cmpgeui	r2,r17,1
  824df4:	10002c1e 	bne	r2,zero,824ea8 <___vfprintf_internal_r+0x1464>
  824df8:	8800021e 	bne	r17,zero,824e04 <___vfprintf_internal_r+0x13c0>
  824dfc:	00800244 	movi	r2,9
  824e00:	14002936 	bltu	r2,r16,824ea8 <___vfprintf_internal_r+0x1464>
  824e04:	d90018c4 	addi	r4,sp,99
  824e08:	dd000f04 	addi	r20,sp,60
  824e0c:	d9014115 	stw	r4,1284(sp)
  824e10:	d9014117 	ldw	r4,1284(sp)
  824e14:	80800c04 	addi	r2,r16,48
  824e18:	20800005 	stb	r2,0(r4)
  824e1c:	003da406 	br	8244b0 <___vfprintf_internal_r+0xa6c>
  824e20:	dc400d17 	ldw	r17,52(sp)
  824e24:	07002134 	movhi	fp,132
  824e28:	e73a9a84 	addi	fp,fp,-5526
  824e2c:	9425883a 	add	r18,r18,r16
  824e30:	8c400044 	addi	r17,r17,1
  824e34:	008001c4 	movi	r2,7
  824e38:	1f000015 	stw	fp,0(r3)
  824e3c:	1c000115 	stw	r16,4(r3)
  824e40:	dc800e15 	stw	r18,56(sp)
  824e44:	dc400d15 	stw	r17,52(sp)
  824e48:	147de216 	blt	r2,r17,8245d4 <___vfprintf_internal_r+0xb90>
  824e4c:	18c00204 	addi	r3,r3,8
  824e50:	003c7a06 	br	82403c <___vfprintf_internal_r+0x5f8>
  824e54:	01000084 	movi	r4,2
  824e58:	d8000405 	stb	zero,16(sp)
  824e5c:	003d8706 	br	82447c <___vfprintf_internal_r+0xa38>
  824e60:	d9814c17 	ldw	r6,1328(sp)
  824e64:	30c4703a 	and	r2,r6,r3
  824e68:	1005003a 	cmpeq	r2,r2,zero
  824e6c:	103cb926 	beq	r2,zero,824154 <___vfprintf_internal_r+0x710>
  824e70:	d9014117 	ldw	r4,1284(sp)
  824e74:	94800044 	addi	r18,r18,1
  824e78:	8c400044 	addi	r17,r17,1
  824e7c:	008001c4 	movi	r2,7
  824e80:	a9000015 	stw	r4,0(r21)
  824e84:	a8c00115 	stw	r3,4(r21)
  824e88:	dc800e15 	stw	r18,56(sp)
  824e8c:	dc400d15 	stw	r17,52(sp)
  824e90:	147e6616 	blt	r2,r17,82482c <___vfprintf_internal_r+0xde8>
  824e94:	acc00204 	addi	r19,r21,8
  824e98:	003cd706 	br	8241f8 <___vfprintf_internal_r+0x7b4>
  824e9c:	07002134 	movhi	fp,132
  824ea0:	e73a9a84 	addi	fp,fp,-5526
  824ea4:	003c4f06 	br	823fe4 <___vfprintf_internal_r+0x5a0>
  824ea8:	dd000f04 	addi	r20,sp,60
  824eac:	dc801904 	addi	r18,sp,100
  824eb0:	8009883a 	mov	r4,r16
  824eb4:	880b883a 	mov	r5,r17
  824eb8:	01800284 	movi	r6,10
  824ebc:	000f883a 	mov	r7,zero
  824ec0:	082a2e80 	call	82a2e8 <__umoddi3>
  824ec4:	12000c04 	addi	r8,r2,48
  824ec8:	94bfffc4 	addi	r18,r18,-1
  824ecc:	8009883a 	mov	r4,r16
  824ed0:	880b883a 	mov	r5,r17
  824ed4:	01800284 	movi	r6,10
  824ed8:	000f883a 	mov	r7,zero
  824edc:	92000005 	stb	r8,0(r18)
  824ee0:	0829d0c0 	call	829d0c <__udivdi3>
  824ee4:	1009883a 	mov	r4,r2
  824ee8:	1021883a 	mov	r16,r2
  824eec:	18800068 	cmpgeui	r2,r3,1
  824ef0:	1823883a 	mov	r17,r3
  824ef4:	103fee1e 	bne	r2,zero,824eb0 <___vfprintf_internal_r+0x146c>
  824ef8:	1800021e 	bne	r3,zero,824f04 <___vfprintf_internal_r+0x14c0>
  824efc:	00800244 	movi	r2,9
  824f00:	113feb36 	bltu	r2,r4,824eb0 <___vfprintf_internal_r+0x146c>
  824f04:	94bfffc4 	addi	r18,r18,-1
  824f08:	dc814115 	stw	r18,1284(sp)
  824f0c:	003fc006 	br	824e10 <___vfprintf_internal_r+0x13cc>
  824f10:	d9014c17 	ldw	r4,1328(sp)
  824f14:	2080004c 	andi	r2,r4,1
  824f18:	10009a1e 	bne	r2,zero,825184 <___vfprintf_internal_r+0x1740>
  824f1c:	d9401904 	addi	r5,sp,100
  824f20:	dd000f04 	addi	r20,sp,60
  824f24:	d9414115 	stw	r5,1284(sp)
  824f28:	003d6106 	br	8244b0 <___vfprintf_internal_r+0xa6c>
  824f2c:	d9014f17 	ldw	r4,1340(sp)
  824f30:	b00b883a 	mov	r5,r22
  824f34:	d9800c04 	addi	r6,sp,48
  824f38:	08239ec0 	call	8239ec <__sprint_r>
  824f3c:	103c791e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824f40:	dc800e17 	ldw	r18,56(sp)
  824f44:	d8c01904 	addi	r3,sp,100
  824f48:	003cff06 	br	824348 <___vfprintf_internal_r+0x904>
  824f4c:	d8c14c17 	ldw	r3,1328(sp)
  824f50:	1880040c 	andi	r2,r3,16
  824f54:	1000711e 	bne	r2,zero,82511c <___vfprintf_internal_r+0x16d8>
  824f58:	d9014c17 	ldw	r4,1328(sp)
  824f5c:	2080100c 	andi	r2,r4,64
  824f60:	10006e26 	beq	r2,zero,82511c <___vfprintf_internal_r+0x16d8>
  824f64:	3c00000b 	ldhu	r16,0(r7)
  824f68:	0023883a 	mov	r17,zero
  824f6c:	39c00104 	addi	r7,r7,4
  824f70:	d9c14015 	stw	r7,1280(sp)
  824f74:	003f0006 	br	824b78 <___vfprintf_internal_r+0x1134>
  824f78:	dc400d17 	ldw	r17,52(sp)
  824f7c:	07002134 	movhi	fp,132
  824f80:	e73a9a84 	addi	fp,fp,-5526
  824f84:	9425883a 	add	r18,r18,r16
  824f88:	8c400044 	addi	r17,r17,1
  824f8c:	008001c4 	movi	r2,7
  824f90:	1f000015 	stw	fp,0(r3)
  824f94:	1c000115 	stw	r16,4(r3)
  824f98:	dc800e15 	stw	r18,56(sp)
  824f9c:	dc400d15 	stw	r17,52(sp)
  824fa0:	147d7616 	blt	r2,r17,82457c <___vfprintf_internal_r+0xb38>
  824fa4:	18c00204 	addi	r3,r3,8
  824fa8:	003d7b06 	br	824598 <___vfprintf_internal_r+0xb54>
  824fac:	dc800e17 	ldw	r18,56(sp)
  824fb0:	dc400d17 	ldw	r17,52(sp)
  824fb4:	07002134 	movhi	fp,132
  824fb8:	e73a9e84 	addi	fp,fp,-5510
  824fbc:	003bc006 	br	823ec0 <___vfprintf_internal_r+0x47c>
  824fc0:	d9014f17 	ldw	r4,1340(sp)
  824fc4:	b00b883a 	mov	r5,r22
  824fc8:	d9800c04 	addi	r6,sp,48
  824fcc:	08239ec0 	call	8239ec <__sprint_r>
  824fd0:	103c541e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  824fd4:	dc800e17 	ldw	r18,56(sp)
  824fd8:	d8c01904 	addi	r3,sp,100
  824fdc:	003ce906 	br	824384 <___vfprintf_internal_r+0x940>
  824fe0:	3c000017 	ldw	r16,0(r7)
  824fe4:	0009883a 	mov	r4,zero
  824fe8:	39c00104 	addi	r7,r7,4
  824fec:	0023883a 	mov	r17,zero
  824ff0:	d9c14015 	stw	r7,1280(sp)
  824ff4:	d8000405 	stb	zero,16(sp)
  824ff8:	003d2006 	br	82447c <___vfprintf_internal_r+0xa38>
  824ffc:	38800017 	ldw	r2,0(r7)
  825000:	39c00104 	addi	r7,r7,4
  825004:	d9c14015 	stw	r7,1280(sp)
  825008:	1023d7fa 	srai	r17,r2,31
  82500c:	1021883a 	mov	r16,r2
  825010:	003d1806 	br	824474 <___vfprintf_internal_r+0xa30>
  825014:	3c000017 	ldw	r16,0(r7)
  825018:	01000044 	movi	r4,1
  82501c:	39c00104 	addi	r7,r7,4
  825020:	0023883a 	mov	r17,zero
  825024:	d9c14015 	stw	r7,1280(sp)
  825028:	d8000405 	stb	zero,16(sp)
  82502c:	003d1306 	br	82447c <___vfprintf_internal_r+0xa38>
  825030:	008020f4 	movhi	r2,131
  825034:	108d3f04 	addi	r2,r2,13564
  825038:	94800044 	addi	r18,r18,1
  82503c:	8c400044 	addi	r17,r17,1
  825040:	a8800015 	stw	r2,0(r21)
  825044:	00c00044 	movi	r3,1
  825048:	008001c4 	movi	r2,7
  82504c:	a8c00115 	stw	r3,4(r21)
  825050:	dc800e15 	stw	r18,56(sp)
  825054:	dc400d15 	stw	r17,52(sp)
  825058:	1440ca16 	blt	r2,r17,825384 <___vfprintf_internal_r+0x1940>
  82505c:	a8c00204 	addi	r3,r21,8
  825060:	2000061e 	bne	r4,zero,82507c <___vfprintf_internal_r+0x1638>
  825064:	d9414717 	ldw	r5,1308(sp)
  825068:	2800041e 	bne	r5,zero,82507c <___vfprintf_internal_r+0x1638>
  82506c:	d9814c17 	ldw	r6,1328(sp)
  825070:	3080004c 	andi	r2,r6,1
  825074:	1005003a 	cmpeq	r2,r2,zero
  825078:	103bf01e 	bne	r2,zero,82403c <___vfprintf_internal_r+0x5f8>
  82507c:	00800044 	movi	r2,1
  825080:	dc400d17 	ldw	r17,52(sp)
  825084:	18800115 	stw	r2,4(r3)
  825088:	d8814917 	ldw	r2,1316(sp)
  82508c:	94800044 	addi	r18,r18,1
  825090:	8c400044 	addi	r17,r17,1
  825094:	18800015 	stw	r2,0(r3)
  825098:	008001c4 	movi	r2,7
  82509c:	dc800e15 	stw	r18,56(sp)
  8250a0:	dc400d15 	stw	r17,52(sp)
  8250a4:	1440ca16 	blt	r2,r17,8253d0 <___vfprintf_internal_r+0x198c>
  8250a8:	18c00204 	addi	r3,r3,8
  8250ac:	0121c83a 	sub	r16,zero,r4
  8250b0:	0400500e 	bge	zero,r16,8251f4 <___vfprintf_internal_r+0x17b0>
  8250b4:	00800404 	movi	r2,16
  8250b8:	1400800e 	bge	r2,r16,8252bc <___vfprintf_internal_r+0x1878>
  8250bc:	1027883a 	mov	r19,r2
  8250c0:	07002134 	movhi	fp,132
  8250c4:	e73a9a84 	addi	fp,fp,-5526
  8250c8:	050001c4 	movi	r20,7
  8250cc:	00000306 	br	8250dc <___vfprintf_internal_r+0x1698>
  8250d0:	18c00204 	addi	r3,r3,8
  8250d4:	843ffc04 	addi	r16,r16,-16
  8250d8:	9c007a0e 	bge	r19,r16,8252c4 <___vfprintf_internal_r+0x1880>
  8250dc:	94800404 	addi	r18,r18,16
  8250e0:	8c400044 	addi	r17,r17,1
  8250e4:	1f000015 	stw	fp,0(r3)
  8250e8:	1cc00115 	stw	r19,4(r3)
  8250ec:	dc800e15 	stw	r18,56(sp)
  8250f0:	dc400d15 	stw	r17,52(sp)
  8250f4:	a47ff60e 	bge	r20,r17,8250d0 <___vfprintf_internal_r+0x168c>
  8250f8:	d9014f17 	ldw	r4,1340(sp)
  8250fc:	b00b883a 	mov	r5,r22
  825100:	d9800c04 	addi	r6,sp,48
  825104:	08239ec0 	call	8239ec <__sprint_r>
  825108:	103c061e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  82510c:	dc800e17 	ldw	r18,56(sp)
  825110:	dc400d17 	ldw	r17,52(sp)
  825114:	d8c01904 	addi	r3,sp,100
  825118:	003fee06 	br	8250d4 <___vfprintf_internal_r+0x1690>
  82511c:	3c000017 	ldw	r16,0(r7)
  825120:	0023883a 	mov	r17,zero
  825124:	39c00104 	addi	r7,r7,4
  825128:	d9c14015 	stw	r7,1280(sp)
  82512c:	003e9206 	br	824b78 <___vfprintf_internal_r+0x1134>
  825130:	d9401904 	addi	r5,sp,100
  825134:	dd000f04 	addi	r20,sp,60
  825138:	d9414115 	stw	r5,1284(sp)
  82513c:	d9814417 	ldw	r6,1296(sp)
  825140:	880a973a 	slli	r5,r17,28
  825144:	8004d13a 	srli	r2,r16,4
  825148:	810003cc 	andi	r4,r16,15
  82514c:	3109883a 	add	r4,r6,r4
  825150:	2884b03a 	or	r2,r5,r2
  825154:	21400003 	ldbu	r5,0(r4)
  825158:	d9014117 	ldw	r4,1284(sp)
  82515c:	8806d13a 	srli	r3,r17,4
  825160:	1021883a 	mov	r16,r2
  825164:	213fffc4 	addi	r4,r4,-1
  825168:	d9014115 	stw	r4,1284(sp)
  82516c:	d9814117 	ldw	r6,1284(sp)
  825170:	10c8b03a 	or	r4,r2,r3
  825174:	1823883a 	mov	r17,r3
  825178:	31400005 	stb	r5,0(r6)
  82517c:	203fef1e 	bne	r4,zero,82513c <___vfprintf_internal_r+0x16f8>
  825180:	003ccb06 	br	8244b0 <___vfprintf_internal_r+0xa6c>
  825184:	00800c04 	movi	r2,48
  825188:	d98018c4 	addi	r6,sp,99
  82518c:	dd000f04 	addi	r20,sp,60
  825190:	d88018c5 	stb	r2,99(sp)
  825194:	d9814115 	stw	r6,1284(sp)
  825198:	003cc506 	br	8244b0 <___vfprintf_internal_r+0xa6c>
  82519c:	dc400d17 	ldw	r17,52(sp)
  8251a0:	07002134 	movhi	fp,132
  8251a4:	e73a9e84 	addi	fp,fp,-5510
  8251a8:	003bc706 	br	8240c8 <___vfprintf_internal_r+0x684>
  8251ac:	d9414c17 	ldw	r5,1328(sp)
  8251b0:	2880040c 	andi	r2,r5,16
  8251b4:	10007c26 	beq	r2,zero,8253a8 <___vfprintf_internal_r+0x1964>
  8251b8:	38800017 	ldw	r2,0(r7)
  8251bc:	39c00104 	addi	r7,r7,4
  8251c0:	d9c14015 	stw	r7,1280(sp)
  8251c4:	d9814b17 	ldw	r6,1324(sp)
  8251c8:	d9c14017 	ldw	r7,1280(sp)
  8251cc:	11800015 	stw	r6,0(r2)
  8251d0:	003a7806 	br	823bb4 <___vfprintf_internal_r+0x170>
  8251d4:	d9014f17 	ldw	r4,1340(sp)
  8251d8:	b00b883a 	mov	r5,r22
  8251dc:	d9800c04 	addi	r6,sp,48
  8251e0:	08239ec0 	call	8239ec <__sprint_r>
  8251e4:	103bcf1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8251e8:	dc800e17 	ldw	r18,56(sp)
  8251ec:	dc400d17 	ldw	r17,52(sp)
  8251f0:	d8c01904 	addi	r3,sp,100
  8251f4:	d9014717 	ldw	r4,1308(sp)
  8251f8:	d9414117 	ldw	r5,1284(sp)
  8251fc:	8c400044 	addi	r17,r17,1
  825200:	9125883a 	add	r18,r18,r4
  825204:	008001c4 	movi	r2,7
  825208:	19400015 	stw	r5,0(r3)
  82520c:	19000115 	stw	r4,4(r3)
  825210:	dc800e15 	stw	r18,56(sp)
  825214:	dc400d15 	stw	r17,52(sp)
  825218:	147cee16 	blt	r2,r17,8245d4 <___vfprintf_internal_r+0xb90>
  82521c:	18c00204 	addi	r3,r3,8
  825220:	003b8606 	br	82403c <___vfprintf_internal_r+0x5f8>
  825224:	38c00017 	ldw	r3,0(r7)
  825228:	39000204 	addi	r4,r7,8
  82522c:	d9014015 	stw	r4,1280(sp)
  825230:	d8c14215 	stw	r3,1288(sp)
  825234:	39c00117 	ldw	r7,4(r7)
  825238:	d9c14315 	stw	r7,1292(sp)
  82523c:	003e2006 	br	824ac0 <___vfprintf_internal_r+0x107c>
  825240:	0005883a 	mov	r2,zero
  825244:	1409c83a 	sub	r4,r2,r16
  825248:	1105803a 	cmpltu	r2,r2,r4
  82524c:	044bc83a 	sub	r5,zero,r17
  825250:	2885c83a 	sub	r2,r5,r2
  825254:	2021883a 	mov	r16,r4
  825258:	1023883a 	mov	r17,r2
  82525c:	01000044 	movi	r4,1
  825260:	00800b44 	movi	r2,45
  825264:	d8800405 	stb	r2,16(sp)
  825268:	003c8406 	br	82447c <___vfprintf_internal_r+0xa38>
  82526c:	d9014f17 	ldw	r4,1340(sp)
  825270:	b00b883a 	mov	r5,r22
  825274:	d9800c04 	addi	r6,sp,48
  825278:	08239ec0 	call	8239ec <__sprint_r>
  82527c:	103ba91e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  825280:	dc800e17 	ldw	r18,56(sp)
  825284:	dc400d17 	ldw	r17,52(sp)
  825288:	d9000517 	ldw	r4,20(sp)
  82528c:	d9401904 	addi	r5,sp,100
  825290:	003da706 	br	824930 <___vfprintf_internal_r+0xeec>
  825294:	d9014f17 	ldw	r4,1340(sp)
  825298:	b00b883a 	mov	r5,r22
  82529c:	d9800c04 	addi	r6,sp,48
  8252a0:	08239ec0 	call	8239ec <__sprint_r>
  8252a4:	103b9f1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8252a8:	dc800e17 	ldw	r18,56(sp)
  8252ac:	dc400d17 	ldw	r17,52(sp)
  8252b0:	d9000517 	ldw	r4,20(sp)
  8252b4:	d8c01904 	addi	r3,sp,100
  8252b8:	003d9106 	br	824900 <___vfprintf_internal_r+0xebc>
  8252bc:	07002134 	movhi	fp,132
  8252c0:	e73a9a84 	addi	fp,fp,-5526
  8252c4:	9425883a 	add	r18,r18,r16
  8252c8:	8c400044 	addi	r17,r17,1
  8252cc:	008001c4 	movi	r2,7
  8252d0:	1f000015 	stw	fp,0(r3)
  8252d4:	1c000115 	stw	r16,4(r3)
  8252d8:	dc800e15 	stw	r18,56(sp)
  8252dc:	dc400d15 	stw	r17,52(sp)
  8252e0:	147fbc16 	blt	r2,r17,8251d4 <___vfprintf_internal_r+0x1790>
  8252e4:	18c00204 	addi	r3,r3,8
  8252e8:	003fc206 	br	8251f4 <___vfprintf_internal_r+0x17b0>
  8252ec:	d9014f17 	ldw	r4,1340(sp)
  8252f0:	b00b883a 	mov	r5,r22
  8252f4:	d9800c04 	addi	r6,sp,48
  8252f8:	08239ec0 	call	8239ec <__sprint_r>
  8252fc:	103b891e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  825300:	dc800e17 	ldw	r18,56(sp)
  825304:	d9000517 	ldw	r4,20(sp)
  825308:	d8c01904 	addi	r3,sp,100
  82530c:	003d0206 	br	824718 <___vfprintf_internal_r+0xcd4>
  825310:	07002134 	movhi	fp,132
  825314:	e73a9a84 	addi	fp,fp,-5526
  825318:	003be406 	br	8242ac <___vfprintf_internal_r+0x868>
  82531c:	00802134 	movhi	r2,132
  825320:	10ba8a04 	addi	r2,r2,-5592
  825324:	d8814115 	stw	r2,1284(sp)
  825328:	003df506 	br	824b00 <___vfprintf_internal_r+0x10bc>
  82532c:	d9014217 	ldw	r4,1288(sp)
  825330:	d9414317 	ldw	r5,1292(sp)
  825334:	081eea00 	call	81eea0 <__isnand>
  825338:	10003926 	beq	r2,zero,825420 <___vfprintf_internal_r+0x19dc>
  82533c:	d9414d17 	ldw	r5,1332(sp)
  825340:	008011c4 	movi	r2,71
  825344:	1140ce16 	blt	r2,r5,825680 <___vfprintf_internal_r+0x1c3c>
  825348:	01802134 	movhi	r6,132
  82534c:	31ba8b04 	addi	r6,r6,-5588
  825350:	d9814115 	stw	r6,1284(sp)
  825354:	003dea06 	br	824b00 <___vfprintf_internal_r+0x10bc>
  825358:	d9014c17 	ldw	r4,1328(sp)
  82535c:	bdc00044 	addi	r23,r23,1
  825360:	b8c00007 	ldb	r3,0(r23)
  825364:	21000814 	ori	r4,r4,32
  825368:	d9014c15 	stw	r4,1328(sp)
  82536c:	003a3406 	br	823c40 <___vfprintf_internal_r+0x1fc>
  825370:	dcc14515 	stw	r19,1300(sp)
  825374:	98011016 	blt	r19,zero,8257b8 <___vfprintf_internal_r+0x1d74>
  825378:	980f883a 	mov	r7,r19
  82537c:	d8014615 	stw	zero,1304(sp)
  825380:	003c5206 	br	8244cc <___vfprintf_internal_r+0xa88>
  825384:	d9014f17 	ldw	r4,1340(sp)
  825388:	b00b883a 	mov	r5,r22
  82538c:	d9800c04 	addi	r6,sp,48
  825390:	08239ec0 	call	8239ec <__sprint_r>
  825394:	103b631e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  825398:	dc800e17 	ldw	r18,56(sp)
  82539c:	d9000517 	ldw	r4,20(sp)
  8253a0:	d8c01904 	addi	r3,sp,100
  8253a4:	003f2e06 	br	825060 <___vfprintf_internal_r+0x161c>
  8253a8:	d8c14c17 	ldw	r3,1328(sp)
  8253ac:	1880100c 	andi	r2,r3,64
  8253b0:	1000a026 	beq	r2,zero,825634 <___vfprintf_internal_r+0x1bf0>
  8253b4:	38800017 	ldw	r2,0(r7)
  8253b8:	39c00104 	addi	r7,r7,4
  8253bc:	d9c14015 	stw	r7,1280(sp)
  8253c0:	d9014b17 	ldw	r4,1324(sp)
  8253c4:	d9c14017 	ldw	r7,1280(sp)
  8253c8:	1100000d 	sth	r4,0(r2)
  8253cc:	0039f906 	br	823bb4 <___vfprintf_internal_r+0x170>
  8253d0:	d9014f17 	ldw	r4,1340(sp)
  8253d4:	b00b883a 	mov	r5,r22
  8253d8:	d9800c04 	addi	r6,sp,48
  8253dc:	08239ec0 	call	8239ec <__sprint_r>
  8253e0:	103b501e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  8253e4:	dc800e17 	ldw	r18,56(sp)
  8253e8:	dc400d17 	ldw	r17,52(sp)
  8253ec:	d9000517 	ldw	r4,20(sp)
  8253f0:	d8c01904 	addi	r3,sp,100
  8253f4:	003f2d06 	br	8250ac <___vfprintf_internal_r+0x1668>
  8253f8:	00800184 	movi	r2,6
  8253fc:	14c09a36 	bltu	r2,r19,825668 <___vfprintf_internal_r+0x1c24>
  825400:	dcc14515 	stw	r19,1300(sp)
  825404:	9800010e 	bge	r19,zero,82540c <___vfprintf_internal_r+0x19c8>
  825408:	d8014515 	stw	zero,1300(sp)
  82540c:	00802134 	movhi	r2,132
  825410:	10ba8d04 	addi	r2,r2,-5580
  825414:	980f883a 	mov	r7,r19
  825418:	d8814115 	stw	r2,1284(sp)
  82541c:	003a7806 	br	823e00 <___vfprintf_internal_r+0x3bc>
  825420:	00bfffc4 	movi	r2,-1
  825424:	9880e226 	beq	r19,r2,8257b0 <___vfprintf_internal_r+0x1d6c>
  825428:	d9414d17 	ldw	r5,1332(sp)
  82542c:	008019c4 	movi	r2,103
  825430:	2880dc26 	beq	r5,r2,8257a4 <___vfprintf_internal_r+0x1d60>
  825434:	008011c4 	movi	r2,71
  825438:	2880da26 	beq	r5,r2,8257a4 <___vfprintf_internal_r+0x1d60>
  82543c:	d9414c17 	ldw	r5,1328(sp)
  825440:	d9014317 	ldw	r4,1292(sp)
  825444:	d9814217 	ldw	r6,1288(sp)
  825448:	29404014 	ori	r5,r5,256
  82544c:	d9414c15 	stw	r5,1328(sp)
  825450:	2000cc16 	blt	r4,zero,825784 <___vfprintf_internal_r+0x1d40>
  825454:	3021883a 	mov	r16,r6
  825458:	2023883a 	mov	r17,r4
  82545c:	0039883a 	mov	fp,zero
  825460:	d9414d17 	ldw	r5,1332(sp)
  825464:	00801984 	movi	r2,102
  825468:	2880b726 	beq	r5,r2,825748 <___vfprintf_internal_r+0x1d04>
  82546c:	00801184 	movi	r2,70
  825470:	2880b526 	beq	r5,r2,825748 <___vfprintf_internal_r+0x1d04>
  825474:	00801944 	movi	r2,101
  825478:	2880c826 	beq	r5,r2,82579c <___vfprintf_internal_r+0x1d58>
  82547c:	00801144 	movi	r2,69
  825480:	2880c626 	beq	r5,r2,82579c <___vfprintf_internal_r+0x1d58>
  825484:	9829883a 	mov	r20,r19
  825488:	d9014f17 	ldw	r4,1340(sp)
  82548c:	d8800504 	addi	r2,sp,20
  825490:	880d883a 	mov	r6,r17
  825494:	d8800115 	stw	r2,4(sp)
  825498:	d8c00604 	addi	r3,sp,24
  82549c:	d8800704 	addi	r2,sp,28
  8254a0:	800b883a 	mov	r5,r16
  8254a4:	01c00084 	movi	r7,2
  8254a8:	d8c00215 	stw	r3,8(sp)
  8254ac:	d8800315 	stw	r2,12(sp)
  8254b0:	dd000015 	stw	r20,0(sp)
  8254b4:	0825e1c0 	call	825e1c <_dtoa_r>
  8254b8:	d9814d17 	ldw	r6,1332(sp)
  8254bc:	d8814115 	stw	r2,1284(sp)
  8254c0:	008019c4 	movi	r2,103
  8254c4:	30809526 	beq	r6,r2,82571c <___vfprintf_internal_r+0x1cd8>
  8254c8:	d8c14d17 	ldw	r3,1332(sp)
  8254cc:	008011c4 	movi	r2,71
  8254d0:	18809226 	beq	r3,r2,82571c <___vfprintf_internal_r+0x1cd8>
  8254d4:	d9414117 	ldw	r5,1284(sp)
  8254d8:	d9814d17 	ldw	r6,1332(sp)
  8254dc:	00801984 	movi	r2,102
  8254e0:	2d25883a 	add	r18,r5,r20
  8254e4:	30808626 	beq	r6,r2,825700 <___vfprintf_internal_r+0x1cbc>
  8254e8:	00801184 	movi	r2,70
  8254ec:	30808426 	beq	r6,r2,825700 <___vfprintf_internal_r+0x1cbc>
  8254f0:	000d883a 	mov	r6,zero
  8254f4:	000f883a 	mov	r7,zero
  8254f8:	880b883a 	mov	r5,r17
  8254fc:	8009883a 	mov	r4,r16
  825500:	08206300 	call	820630 <__eqdf2>
  825504:	1000751e 	bne	r2,zero,8256dc <___vfprintf_internal_r+0x1c98>
  825508:	9005883a 	mov	r2,r18
  82550c:	dc800715 	stw	r18,28(sp)
  825510:	d9014117 	ldw	r4,1284(sp)
  825514:	d9414d17 	ldw	r5,1332(sp)
  825518:	00c019c4 	movi	r3,103
  82551c:	1125c83a 	sub	r18,r2,r4
  825520:	28c06826 	beq	r5,r3,8256c4 <___vfprintf_internal_r+0x1c80>
  825524:	008011c4 	movi	r2,71
  825528:	28806626 	beq	r5,r2,8256c4 <___vfprintf_internal_r+0x1c80>
  82552c:	d9000517 	ldw	r4,20(sp)
  825530:	d8c14d17 	ldw	r3,1332(sp)
  825534:	00801944 	movi	r2,101
  825538:	10c05516 	blt	r2,r3,825690 <___vfprintf_internal_r+0x1c4c>
  82553c:	213fffc4 	addi	r4,r4,-1
  825540:	d9000515 	stw	r4,20(sp)
  825544:	d8c00805 	stb	r3,32(sp)
  825548:	2021883a 	mov	r16,r4
  82554c:	2000c116 	blt	r4,zero,825854 <___vfprintf_internal_r+0x1e10>
  825550:	00800ac4 	movi	r2,43
  825554:	d8800845 	stb	r2,33(sp)
  825558:	00800244 	movi	r2,9
  82555c:	1400af0e 	bge	r2,r16,82581c <___vfprintf_internal_r+0x1dd8>
  825560:	1027883a 	mov	r19,r2
  825564:	dc400b84 	addi	r17,sp,46
  825568:	8009883a 	mov	r4,r16
  82556c:	01400284 	movi	r5,10
  825570:	0820ba80 	call	820ba8 <__modsi3>
  825574:	10800c04 	addi	r2,r2,48
  825578:	8c7fffc4 	addi	r17,r17,-1
  82557c:	8009883a 	mov	r4,r16
  825580:	01400284 	movi	r5,10
  825584:	88800005 	stb	r2,0(r17)
  825588:	0820b480 	call	820b48 <__divsi3>
  82558c:	1021883a 	mov	r16,r2
  825590:	98bff516 	blt	r19,r2,825568 <___vfprintf_internal_r+0x1b24>
  825594:	10c00c04 	addi	r3,r2,48
  825598:	d88009c4 	addi	r2,sp,39
  82559c:	108001c4 	addi	r2,r2,7
  8255a0:	897fffc4 	addi	r5,r17,-1
  8255a4:	88ffffc5 	stb	r3,-1(r17)
  8255a8:	2880a72e 	bgeu	r5,r2,825848 <___vfprintf_internal_r+0x1e04>
  8255ac:	1009883a 	mov	r4,r2
  8255b0:	d9800804 	addi	r6,sp,32
  8255b4:	d8c00884 	addi	r3,sp,34
  8255b8:	28800003 	ldbu	r2,0(r5)
  8255bc:	29400044 	addi	r5,r5,1
  8255c0:	18800005 	stb	r2,0(r3)
  8255c4:	18c00044 	addi	r3,r3,1
  8255c8:	293ffb36 	bltu	r5,r4,8255b8 <___vfprintf_internal_r+0x1b74>
  8255cc:	1987c83a 	sub	r3,r3,r6
  8255d0:	00800044 	movi	r2,1
  8255d4:	d8c14815 	stw	r3,1312(sp)
  8255d8:	90cf883a 	add	r7,r18,r3
  8255dc:	1480960e 	bge	r2,r18,825838 <___vfprintf_internal_r+0x1df4>
  8255e0:	39c00044 	addi	r7,r7,1
  8255e4:	d9c14515 	stw	r7,1300(sp)
  8255e8:	38003416 	blt	r7,zero,8256bc <___vfprintf_internal_r+0x1c78>
  8255ec:	e0803fcc 	andi	r2,fp,255
  8255f0:	1080201c 	xori	r2,r2,128
  8255f4:	10bfe004 	addi	r2,r2,-128
  8255f8:	10004e26 	beq	r2,zero,825734 <___vfprintf_internal_r+0x1cf0>
  8255fc:	00800b44 	movi	r2,45
  825600:	dc814715 	stw	r18,1308(sp)
  825604:	d8014615 	stw	zero,1304(sp)
  825608:	d8800405 	stb	r2,16(sp)
  82560c:	003bb106 	br	8244d4 <___vfprintf_internal_r+0xa90>
  825610:	00800b44 	movi	r2,45
  825614:	d8800405 	stb	r2,16(sp)
  825618:	003d3306 	br	824ae8 <___vfprintf_internal_r+0x10a4>
  82561c:	d9014f17 	ldw	r4,1340(sp)
  825620:	b00b883a 	mov	r5,r22
  825624:	d9800c04 	addi	r6,sp,48
  825628:	08239ec0 	call	8239ec <__sprint_r>
  82562c:	103abd1e 	bne	r2,zero,824124 <___vfprintf_internal_r+0x6e0>
  825630:	003abb06 	br	824120 <___vfprintf_internal_r+0x6dc>
  825634:	38800017 	ldw	r2,0(r7)
  825638:	39c00104 	addi	r7,r7,4
  82563c:	d9c14015 	stw	r7,1280(sp)
  825640:	d9414b17 	ldw	r5,1324(sp)
  825644:	d9c14017 	ldw	r7,1280(sp)
  825648:	11400015 	stw	r5,0(r2)
  82564c:	00395906 	br	823bb4 <___vfprintf_internal_r+0x170>
  825650:	980f883a 	mov	r7,r19
  825654:	dcc14515 	stw	r19,1300(sp)
  825658:	d8014615 	stw	zero,1304(sp)
  82565c:	003b9b06 	br	8244cc <___vfprintf_internal_r+0xa88>
  825660:	0027883a 	mov	r19,zero
  825664:	00397806 	br	823c48 <___vfprintf_internal_r+0x204>
  825668:	00c02134 	movhi	r3,132
  82566c:	18fa8d04 	addi	r3,r3,-5580
  825670:	100f883a 	mov	r7,r2
  825674:	d8814515 	stw	r2,1300(sp)
  825678:	d8c14115 	stw	r3,1284(sp)
  82567c:	0039e006 	br	823e00 <___vfprintf_internal_r+0x3bc>
  825680:	00802134 	movhi	r2,132
  825684:	10ba8c04 	addi	r2,r2,-5584
  825688:	d8814115 	stw	r2,1284(sp)
  82568c:	003d1c06 	br	824b00 <___vfprintf_internal_r+0x10bc>
  825690:	d9414d17 	ldw	r5,1332(sp)
  825694:	00801984 	movi	r2,102
  825698:	28804926 	beq	r5,r2,8257c0 <___vfprintf_internal_r+0x1d7c>
  82569c:	200f883a 	mov	r7,r4
  8256a0:	24805716 	blt	r4,r18,825800 <___vfprintf_internal_r+0x1dbc>
  8256a4:	d9414c17 	ldw	r5,1328(sp)
  8256a8:	2880004c 	andi	r2,r5,1
  8256ac:	10000126 	beq	r2,zero,8256b4 <___vfprintf_internal_r+0x1c70>
  8256b0:	21c00044 	addi	r7,r4,1
  8256b4:	d9c14515 	stw	r7,1300(sp)
  8256b8:	383fcc0e 	bge	r7,zero,8255ec <___vfprintf_internal_r+0x1ba8>
  8256bc:	d8014515 	stw	zero,1300(sp)
  8256c0:	003fca06 	br	8255ec <___vfprintf_internal_r+0x1ba8>
  8256c4:	d9000517 	ldw	r4,20(sp)
  8256c8:	00bfff04 	movi	r2,-4
  8256cc:	1100480e 	bge	r2,r4,8257f0 <___vfprintf_internal_r+0x1dac>
  8256d0:	99004716 	blt	r19,r4,8257f0 <___vfprintf_internal_r+0x1dac>
  8256d4:	d8c14d15 	stw	r3,1332(sp)
  8256d8:	003ff006 	br	82569c <___vfprintf_internal_r+0x1c58>
  8256dc:	d8800717 	ldw	r2,28(sp)
  8256e0:	14bf8b2e 	bgeu	r2,r18,825510 <___vfprintf_internal_r+0x1acc>
  8256e4:	9007883a 	mov	r3,r18
  8256e8:	01000c04 	movi	r4,48
  8256ec:	11000005 	stb	r4,0(r2)
  8256f0:	10800044 	addi	r2,r2,1
  8256f4:	d8800715 	stw	r2,28(sp)
  8256f8:	18bffc1e 	bne	r3,r2,8256ec <___vfprintf_internal_r+0x1ca8>
  8256fc:	003f8406 	br	825510 <___vfprintf_internal_r+0x1acc>
  825700:	d8814117 	ldw	r2,1284(sp)
  825704:	10c00007 	ldb	r3,0(r2)
  825708:	00800c04 	movi	r2,48
  82570c:	18805b26 	beq	r3,r2,82587c <___vfprintf_internal_r+0x1e38>
  825710:	d9000517 	ldw	r4,20(sp)
  825714:	9125883a 	add	r18,r18,r4
  825718:	003f7506 	br	8254f0 <___vfprintf_internal_r+0x1aac>
  82571c:	d9014c17 	ldw	r4,1328(sp)
  825720:	2080004c 	andi	r2,r4,1
  825724:	1005003a 	cmpeq	r2,r2,zero
  825728:	103f6a26 	beq	r2,zero,8254d4 <___vfprintf_internal_r+0x1a90>
  82572c:	d8800717 	ldw	r2,28(sp)
  825730:	003f7706 	br	825510 <___vfprintf_internal_r+0x1acc>
  825734:	d9c14515 	stw	r7,1300(sp)
  825738:	38004d16 	blt	r7,zero,825870 <___vfprintf_internal_r+0x1e2c>
  82573c:	dc814715 	stw	r18,1308(sp)
  825740:	d8014615 	stw	zero,1304(sp)
  825744:	003b6106 	br	8244cc <___vfprintf_internal_r+0xa88>
  825748:	d9014f17 	ldw	r4,1340(sp)
  82574c:	d8800504 	addi	r2,sp,20
  825750:	d8800115 	stw	r2,4(sp)
  825754:	d8c00604 	addi	r3,sp,24
  825758:	d8800704 	addi	r2,sp,28
  82575c:	800b883a 	mov	r5,r16
  825760:	880d883a 	mov	r6,r17
  825764:	01c000c4 	movi	r7,3
  825768:	d8c00215 	stw	r3,8(sp)
  82576c:	d8800315 	stw	r2,12(sp)
  825770:	dcc00015 	stw	r19,0(sp)
  825774:	9829883a 	mov	r20,r19
  825778:	0825e1c0 	call	825e1c <_dtoa_r>
  82577c:	d8814115 	stw	r2,1284(sp)
  825780:	003f5106 	br	8254c8 <___vfprintf_internal_r+0x1a84>
  825784:	d8c14217 	ldw	r3,1288(sp)
  825788:	d9014317 	ldw	r4,1292(sp)
  82578c:	07000b44 	movi	fp,45
  825790:	1821883a 	mov	r16,r3
  825794:	2460003c 	xorhi	r17,r4,32768
  825798:	003f3106 	br	825460 <___vfprintf_internal_r+0x1a1c>
  82579c:	9d000044 	addi	r20,r19,1
  8257a0:	003f3906 	br	825488 <___vfprintf_internal_r+0x1a44>
  8257a4:	983f251e 	bne	r19,zero,82543c <___vfprintf_internal_r+0x19f8>
  8257a8:	04c00044 	movi	r19,1
  8257ac:	003f2306 	br	82543c <___vfprintf_internal_r+0x19f8>
  8257b0:	04c00184 	movi	r19,6
  8257b4:	003f2106 	br	82543c <___vfprintf_internal_r+0x19f8>
  8257b8:	d8014515 	stw	zero,1300(sp)
  8257bc:	003eee06 	br	825378 <___vfprintf_internal_r+0x1934>
  8257c0:	200f883a 	mov	r7,r4
  8257c4:	0100370e 	bge	zero,r4,8258a4 <___vfprintf_internal_r+0x1e60>
  8257c8:	9800031e 	bne	r19,zero,8257d8 <___vfprintf_internal_r+0x1d94>
  8257cc:	d9814c17 	ldw	r6,1328(sp)
  8257d0:	3080004c 	andi	r2,r6,1
  8257d4:	103fb726 	beq	r2,zero,8256b4 <___vfprintf_internal_r+0x1c70>
  8257d8:	20800044 	addi	r2,r4,1
  8257dc:	98a7883a 	add	r19,r19,r2
  8257e0:	dcc14515 	stw	r19,1300(sp)
  8257e4:	980f883a 	mov	r7,r19
  8257e8:	983f800e 	bge	r19,zero,8255ec <___vfprintf_internal_r+0x1ba8>
  8257ec:	003fb306 	br	8256bc <___vfprintf_internal_r+0x1c78>
  8257f0:	d9814d17 	ldw	r6,1332(sp)
  8257f4:	31bfff84 	addi	r6,r6,-2
  8257f8:	d9814d15 	stw	r6,1332(sp)
  8257fc:	003f4c06 	br	825530 <___vfprintf_internal_r+0x1aec>
  825800:	0100180e 	bge	zero,r4,825864 <___vfprintf_internal_r+0x1e20>
  825804:	00800044 	movi	r2,1
  825808:	1485883a 	add	r2,r2,r18
  82580c:	d8814515 	stw	r2,1300(sp)
  825810:	100f883a 	mov	r7,r2
  825814:	103f750e 	bge	r2,zero,8255ec <___vfprintf_internal_r+0x1ba8>
  825818:	003fa806 	br	8256bc <___vfprintf_internal_r+0x1c78>
  82581c:	80c00c04 	addi	r3,r16,48
  825820:	00800c04 	movi	r2,48
  825824:	d8c008c5 	stb	r3,35(sp)
  825828:	d9800804 	addi	r6,sp,32
  82582c:	d8c00904 	addi	r3,sp,36
  825830:	d8800885 	stb	r2,34(sp)
  825834:	003f6506 	br	8255cc <___vfprintf_internal_r+0x1b88>
  825838:	d9014c17 	ldw	r4,1328(sp)
  82583c:	2084703a 	and	r2,r4,r2
  825840:	103f9c26 	beq	r2,zero,8256b4 <___vfprintf_internal_r+0x1c70>
  825844:	003f6606 	br	8255e0 <___vfprintf_internal_r+0x1b9c>
  825848:	d9800804 	addi	r6,sp,32
  82584c:	d8c00884 	addi	r3,sp,34
  825850:	003f5e06 	br	8255cc <___vfprintf_internal_r+0x1b88>
  825854:	00800b44 	movi	r2,45
  825858:	0121c83a 	sub	r16,zero,r4
  82585c:	d8800845 	stb	r2,33(sp)
  825860:	003f3d06 	br	825558 <___vfprintf_internal_r+0x1b14>
  825864:	00800084 	movi	r2,2
  825868:	1105c83a 	sub	r2,r2,r4
  82586c:	003fe606 	br	825808 <___vfprintf_internal_r+0x1dc4>
  825870:	d8014515 	stw	zero,1300(sp)
  825874:	dc814715 	stw	r18,1308(sp)
  825878:	003fb106 	br	825740 <___vfprintf_internal_r+0x1cfc>
  82587c:	000d883a 	mov	r6,zero
  825880:	000f883a 	mov	r7,zero
  825884:	8009883a 	mov	r4,r16
  825888:	880b883a 	mov	r5,r17
  82588c:	082a8980 	call	82a898 <__nedf2>
  825890:	103f9f26 	beq	r2,zero,825710 <___vfprintf_internal_r+0x1ccc>
  825894:	00800044 	movi	r2,1
  825898:	1509c83a 	sub	r4,r2,r20
  82589c:	d9000515 	stw	r4,20(sp)
  8258a0:	003f9b06 	br	825710 <___vfprintf_internal_r+0x1ccc>
  8258a4:	98000d1e 	bne	r19,zero,8258dc <___vfprintf_internal_r+0x1e98>
  8258a8:	d8c14c17 	ldw	r3,1328(sp)
  8258ac:	1880004c 	andi	r2,r3,1
  8258b0:	10000a1e 	bne	r2,zero,8258dc <___vfprintf_internal_r+0x1e98>
  8258b4:	01000044 	movi	r4,1
  8258b8:	200f883a 	mov	r7,r4
  8258bc:	d9014515 	stw	r4,1300(sp)
  8258c0:	003f4a06 	br	8255ec <___vfprintf_internal_r+0x1ba8>
  8258c4:	3cc00017 	ldw	r19,0(r7)
  8258c8:	39c00104 	addi	r7,r7,4
  8258cc:	983d0e0e 	bge	r19,zero,824d08 <___vfprintf_internal_r+0x12c4>
  8258d0:	b8c00007 	ldb	r3,0(r23)
  8258d4:	04ffffc4 	movi	r19,-1
  8258d8:	0038d906 	br	823c40 <___vfprintf_internal_r+0x1fc>
  8258dc:	9cc00084 	addi	r19,r19,2
  8258e0:	dcc14515 	stw	r19,1300(sp)
  8258e4:	980f883a 	mov	r7,r19
  8258e8:	983f400e 	bge	r19,zero,8255ec <___vfprintf_internal_r+0x1ba8>
  8258ec:	003f7306 	br	8256bc <___vfprintf_internal_r+0x1c78>

008258f0 <__vfprintf_internal>:
  8258f0:	00802134 	movhi	r2,132
  8258f4:	1082e104 	addi	r2,r2,2948
  8258f8:	2013883a 	mov	r9,r4
  8258fc:	11000017 	ldw	r4,0(r2)
  825900:	2805883a 	mov	r2,r5
  825904:	300f883a 	mov	r7,r6
  825908:	480b883a 	mov	r5,r9
  82590c:	100d883a 	mov	r6,r2
  825910:	0823a441 	jmpi	823a44 <___vfprintf_internal_r>

00825914 <__swsetup_r>:
  825914:	00802134 	movhi	r2,132
  825918:	1082e104 	addi	r2,r2,2948
  82591c:	10c00017 	ldw	r3,0(r2)
  825920:	defffd04 	addi	sp,sp,-12
  825924:	dc400115 	stw	r17,4(sp)
  825928:	dc000015 	stw	r16,0(sp)
  82592c:	dfc00215 	stw	ra,8(sp)
  825930:	2023883a 	mov	r17,r4
  825934:	2821883a 	mov	r16,r5
  825938:	18000226 	beq	r3,zero,825944 <__swsetup_r+0x30>
  82593c:	18800e17 	ldw	r2,56(r3)
  825940:	10001f26 	beq	r2,zero,8259c0 <__swsetup_r+0xac>
  825944:	8100030b 	ldhu	r4,12(r16)
  825948:	2080020c 	andi	r2,r4,8
  82594c:	10002826 	beq	r2,zero,8259f0 <__swsetup_r+0xdc>
  825950:	81400417 	ldw	r5,16(r16)
  825954:	28001d26 	beq	r5,zero,8259cc <__swsetup_r+0xb8>
  825958:	2080004c 	andi	r2,r4,1
  82595c:	1005003a 	cmpeq	r2,r2,zero
  825960:	10000b26 	beq	r2,zero,825990 <__swsetup_r+0x7c>
  825964:	2080008c 	andi	r2,r4,2
  825968:	10001226 	beq	r2,zero,8259b4 <__swsetup_r+0xa0>
  82596c:	0005883a 	mov	r2,zero
  825970:	80800215 	stw	r2,8(r16)
  825974:	28000b26 	beq	r5,zero,8259a4 <__swsetup_r+0x90>
  825978:	0005883a 	mov	r2,zero
  82597c:	dfc00217 	ldw	ra,8(sp)
  825980:	dc400117 	ldw	r17,4(sp)
  825984:	dc000017 	ldw	r16,0(sp)
  825988:	dec00304 	addi	sp,sp,12
  82598c:	f800283a 	ret
  825990:	80800517 	ldw	r2,20(r16)
  825994:	80000215 	stw	zero,8(r16)
  825998:	0085c83a 	sub	r2,zero,r2
  82599c:	80800615 	stw	r2,24(r16)
  8259a0:	283ff51e 	bne	r5,zero,825978 <__swsetup_r+0x64>
  8259a4:	2080200c 	andi	r2,r4,128
  8259a8:	103ff326 	beq	r2,zero,825978 <__swsetup_r+0x64>
  8259ac:	00bfffc4 	movi	r2,-1
  8259b0:	003ff206 	br	82597c <__swsetup_r+0x68>
  8259b4:	80800517 	ldw	r2,20(r16)
  8259b8:	80800215 	stw	r2,8(r16)
  8259bc:	003fed06 	br	825974 <__swsetup_r+0x60>
  8259c0:	1809883a 	mov	r4,r3
  8259c4:	08276680 	call	827668 <__sinit>
  8259c8:	003fde06 	br	825944 <__swsetup_r+0x30>
  8259cc:	20c0a00c 	andi	r3,r4,640
  8259d0:	00808004 	movi	r2,512
  8259d4:	18bfe026 	beq	r3,r2,825958 <__swsetup_r+0x44>
  8259d8:	8809883a 	mov	r4,r17
  8259dc:	800b883a 	mov	r5,r16
  8259e0:	08283e00 	call	8283e0 <__smakebuf_r>
  8259e4:	8100030b 	ldhu	r4,12(r16)
  8259e8:	81400417 	ldw	r5,16(r16)
  8259ec:	003fda06 	br	825958 <__swsetup_r+0x44>
  8259f0:	2080040c 	andi	r2,r4,16
  8259f4:	103fed26 	beq	r2,zero,8259ac <__swsetup_r+0x98>
  8259f8:	2080010c 	andi	r2,r4,4
  8259fc:	10001226 	beq	r2,zero,825a48 <__swsetup_r+0x134>
  825a00:	81400c17 	ldw	r5,48(r16)
  825a04:	28000526 	beq	r5,zero,825a1c <__swsetup_r+0x108>
  825a08:	80801004 	addi	r2,r16,64
  825a0c:	28800226 	beq	r5,r2,825a18 <__swsetup_r+0x104>
  825a10:	8809883a 	mov	r4,r17
  825a14:	08279ec0 	call	8279ec <_free_r>
  825a18:	80000c15 	stw	zero,48(r16)
  825a1c:	8080030b 	ldhu	r2,12(r16)
  825a20:	81400417 	ldw	r5,16(r16)
  825a24:	80000115 	stw	zero,4(r16)
  825a28:	10bff6cc 	andi	r2,r2,65499
  825a2c:	8080030d 	sth	r2,12(r16)
  825a30:	81400015 	stw	r5,0(r16)
  825a34:	8080030b 	ldhu	r2,12(r16)
  825a38:	10800214 	ori	r2,r2,8
  825a3c:	113fffcc 	andi	r4,r2,65535
  825a40:	8080030d 	sth	r2,12(r16)
  825a44:	003fc306 	br	825954 <__swsetup_r+0x40>
  825a48:	81400417 	ldw	r5,16(r16)
  825a4c:	003ff906 	br	825a34 <__swsetup_r+0x120>

00825a50 <register_fini>:
  825a50:	f800283a 	ret

00825a54 <__call_exitprocs>:
  825a54:	00802134 	movhi	r2,132
  825a58:	1082e204 	addi	r2,r2,2952
  825a5c:	10800017 	ldw	r2,0(r2)
  825a60:	defff304 	addi	sp,sp,-52
  825a64:	df000b15 	stw	fp,44(sp)
  825a68:	d8800115 	stw	r2,4(sp)
  825a6c:	008020b4 	movhi	r2,130
  825a70:	1085ba04 	addi	r2,r2,5864
  825a74:	1005003a 	cmpeq	r2,r2,zero
  825a78:	d8800215 	stw	r2,8(sp)
  825a7c:	d8800117 	ldw	r2,4(sp)
  825a80:	dd400815 	stw	r21,32(sp)
  825a84:	dd000715 	stw	r20,28(sp)
  825a88:	10805204 	addi	r2,r2,328
  825a8c:	dfc00c15 	stw	ra,48(sp)
  825a90:	ddc00a15 	stw	r23,40(sp)
  825a94:	dd800915 	stw	r22,36(sp)
  825a98:	dcc00615 	stw	r19,24(sp)
  825a9c:	dc800515 	stw	r18,20(sp)
  825aa0:	dc400415 	stw	r17,16(sp)
  825aa4:	dc000315 	stw	r16,12(sp)
  825aa8:	282b883a 	mov	r21,r5
  825aac:	2039883a 	mov	fp,r4
  825ab0:	d8800015 	stw	r2,0(sp)
  825ab4:	2829003a 	cmpeq	r20,r5,zero
  825ab8:	d8800117 	ldw	r2,4(sp)
  825abc:	14405217 	ldw	r17,328(r2)
  825ac0:	88001026 	beq	r17,zero,825b04 <__call_exitprocs+0xb0>
  825ac4:	ddc00017 	ldw	r23,0(sp)
  825ac8:	88800117 	ldw	r2,4(r17)
  825acc:	8c802204 	addi	r18,r17,136
  825ad0:	143fffc4 	addi	r16,r2,-1
  825ad4:	80000916 	blt	r16,zero,825afc <__call_exitprocs+0xa8>
  825ad8:	05bfffc4 	movi	r22,-1
  825adc:	a000151e 	bne	r20,zero,825b34 <__call_exitprocs+0xe0>
  825ae0:	8409883a 	add	r4,r16,r16
  825ae4:	2105883a 	add	r2,r4,r4
  825ae8:	1485883a 	add	r2,r2,r18
  825aec:	10c02017 	ldw	r3,128(r2)
  825af0:	a8c01126 	beq	r21,r3,825b38 <__call_exitprocs+0xe4>
  825af4:	843fffc4 	addi	r16,r16,-1
  825af8:	85bff81e 	bne	r16,r22,825adc <__call_exitprocs+0x88>
  825afc:	d8800217 	ldw	r2,8(sp)
  825b00:	10003126 	beq	r2,zero,825bc8 <__call_exitprocs+0x174>
  825b04:	dfc00c17 	ldw	ra,48(sp)
  825b08:	df000b17 	ldw	fp,44(sp)
  825b0c:	ddc00a17 	ldw	r23,40(sp)
  825b10:	dd800917 	ldw	r22,36(sp)
  825b14:	dd400817 	ldw	r21,32(sp)
  825b18:	dd000717 	ldw	r20,28(sp)
  825b1c:	dcc00617 	ldw	r19,24(sp)
  825b20:	dc800517 	ldw	r18,20(sp)
  825b24:	dc400417 	ldw	r17,16(sp)
  825b28:	dc000317 	ldw	r16,12(sp)
  825b2c:	dec00d04 	addi	sp,sp,52
  825b30:	f800283a 	ret
  825b34:	8409883a 	add	r4,r16,r16
  825b38:	88c00117 	ldw	r3,4(r17)
  825b3c:	2105883a 	add	r2,r4,r4
  825b40:	1445883a 	add	r2,r2,r17
  825b44:	18ffffc4 	addi	r3,r3,-1
  825b48:	11800217 	ldw	r6,8(r2)
  825b4c:	1c001526 	beq	r3,r16,825ba4 <__call_exitprocs+0x150>
  825b50:	10000215 	stw	zero,8(r2)
  825b54:	303fe726 	beq	r6,zero,825af4 <__call_exitprocs+0xa0>
  825b58:	00c00044 	movi	r3,1
  825b5c:	1c06983a 	sll	r3,r3,r16
  825b60:	90804017 	ldw	r2,256(r18)
  825b64:	8cc00117 	ldw	r19,4(r17)
  825b68:	1884703a 	and	r2,r3,r2
  825b6c:	10001426 	beq	r2,zero,825bc0 <__call_exitprocs+0x16c>
  825b70:	90804117 	ldw	r2,260(r18)
  825b74:	1884703a 	and	r2,r3,r2
  825b78:	10000c1e 	bne	r2,zero,825bac <__call_exitprocs+0x158>
  825b7c:	2105883a 	add	r2,r4,r4
  825b80:	1485883a 	add	r2,r2,r18
  825b84:	11400017 	ldw	r5,0(r2)
  825b88:	e009883a 	mov	r4,fp
  825b8c:	303ee83a 	callr	r6
  825b90:	88800117 	ldw	r2,4(r17)
  825b94:	98bfc81e 	bne	r19,r2,825ab8 <__call_exitprocs+0x64>
  825b98:	b8800017 	ldw	r2,0(r23)
  825b9c:	147fd526 	beq	r2,r17,825af4 <__call_exitprocs+0xa0>
  825ba0:	003fc506 	br	825ab8 <__call_exitprocs+0x64>
  825ba4:	8c000115 	stw	r16,4(r17)
  825ba8:	003fea06 	br	825b54 <__call_exitprocs+0x100>
  825bac:	2105883a 	add	r2,r4,r4
  825bb0:	1485883a 	add	r2,r2,r18
  825bb4:	11000017 	ldw	r4,0(r2)
  825bb8:	303ee83a 	callr	r6
  825bbc:	003ff406 	br	825b90 <__call_exitprocs+0x13c>
  825bc0:	303ee83a 	callr	r6
  825bc4:	003ff206 	br	825b90 <__call_exitprocs+0x13c>
  825bc8:	88800117 	ldw	r2,4(r17)
  825bcc:	1000081e 	bne	r2,zero,825bf0 <__call_exitprocs+0x19c>
  825bd0:	89000017 	ldw	r4,0(r17)
  825bd4:	20000726 	beq	r4,zero,825bf4 <__call_exitprocs+0x1a0>
  825bd8:	b9000015 	stw	r4,0(r23)
  825bdc:	8809883a 	mov	r4,r17
  825be0:	08216e80 	call	8216e8 <free>
  825be4:	bc400017 	ldw	r17,0(r23)
  825be8:	883fb71e 	bne	r17,zero,825ac8 <__call_exitprocs+0x74>
  825bec:	003fc506 	br	825b04 <__call_exitprocs+0xb0>
  825bf0:	89000017 	ldw	r4,0(r17)
  825bf4:	882f883a 	mov	r23,r17
  825bf8:	2023883a 	mov	r17,r4
  825bfc:	883fb21e 	bne	r17,zero,825ac8 <__call_exitprocs+0x74>
  825c00:	003fc006 	br	825b04 <__call_exitprocs+0xb0>

00825c04 <quorem>:
  825c04:	28c00417 	ldw	r3,16(r5)
  825c08:	20800417 	ldw	r2,16(r4)
  825c0c:	defff604 	addi	sp,sp,-40
  825c10:	ddc00715 	stw	r23,28(sp)
  825c14:	dd400515 	stw	r21,20(sp)
  825c18:	dfc00915 	stw	ra,36(sp)
  825c1c:	df000815 	stw	fp,32(sp)
  825c20:	dd800615 	stw	r22,24(sp)
  825c24:	dd000415 	stw	r20,16(sp)
  825c28:	dcc00315 	stw	r19,12(sp)
  825c2c:	dc800215 	stw	r18,8(sp)
  825c30:	dc400115 	stw	r17,4(sp)
  825c34:	dc000015 	stw	r16,0(sp)
  825c38:	202f883a 	mov	r23,r4
  825c3c:	282b883a 	mov	r21,r5
  825c40:	10c07416 	blt	r2,r3,825e14 <quorem+0x210>
  825c44:	1c7fffc4 	addi	r17,r3,-1
  825c48:	8c45883a 	add	r2,r17,r17
  825c4c:	1085883a 	add	r2,r2,r2
  825c50:	2c000504 	addi	r16,r5,20
  825c54:	24c00504 	addi	r19,r4,20
  825c58:	14ed883a 	add	r22,r2,r19
  825c5c:	80a5883a 	add	r18,r16,r2
  825c60:	b7000017 	ldw	fp,0(r22)
  825c64:	91400017 	ldw	r5,0(r18)
  825c68:	e009883a 	mov	r4,fp
  825c6c:	29400044 	addi	r5,r5,1
  825c70:	0820c080 	call	820c08 <__udivsi3>
  825c74:	1029883a 	mov	r20,r2
  825c78:	10003c1e 	bne	r2,zero,825d6c <quorem+0x168>
  825c7c:	a80b883a 	mov	r5,r21
  825c80:	b809883a 	mov	r4,r23
  825c84:	08288280 	call	828828 <__mcmp>
  825c88:	10002b16 	blt	r2,zero,825d38 <quorem+0x134>
  825c8c:	a5000044 	addi	r20,r20,1
  825c90:	980f883a 	mov	r7,r19
  825c94:	0011883a 	mov	r8,zero
  825c98:	0009883a 	mov	r4,zero
  825c9c:	81400017 	ldw	r5,0(r16)
  825ca0:	38c00017 	ldw	r3,0(r7)
  825ca4:	84000104 	addi	r16,r16,4
  825ca8:	28bfffcc 	andi	r2,r5,65535
  825cac:	2085883a 	add	r2,r4,r2
  825cb0:	11bfffcc 	andi	r6,r2,65535
  825cb4:	193fffcc 	andi	r4,r3,65535
  825cb8:	1004d43a 	srli	r2,r2,16
  825cbc:	280ad43a 	srli	r5,r5,16
  825cc0:	2189c83a 	sub	r4,r4,r6
  825cc4:	2209883a 	add	r4,r4,r8
  825cc8:	1806d43a 	srli	r3,r3,16
  825ccc:	288b883a 	add	r5,r5,r2
  825cd0:	200dd43a 	srai	r6,r4,16
  825cd4:	28bfffcc 	andi	r2,r5,65535
  825cd8:	1887c83a 	sub	r3,r3,r2
  825cdc:	1987883a 	add	r3,r3,r6
  825ce0:	3900000d 	sth	r4,0(r7)
  825ce4:	38c0008d 	sth	r3,2(r7)
  825ce8:	2808d43a 	srli	r4,r5,16
  825cec:	39c00104 	addi	r7,r7,4
  825cf0:	1811d43a 	srai	r8,r3,16
  825cf4:	943fe92e 	bgeu	r18,r16,825c9c <quorem+0x98>
  825cf8:	8c45883a 	add	r2,r17,r17
  825cfc:	1085883a 	add	r2,r2,r2
  825d00:	9885883a 	add	r2,r19,r2
  825d04:	10c00017 	ldw	r3,0(r2)
  825d08:	18000b1e 	bne	r3,zero,825d38 <quorem+0x134>
  825d0c:	113fff04 	addi	r4,r2,-4
  825d10:	9900082e 	bgeu	r19,r4,825d34 <quorem+0x130>
  825d14:	10bfff17 	ldw	r2,-4(r2)
  825d18:	10000326 	beq	r2,zero,825d28 <quorem+0x124>
  825d1c:	00000506 	br	825d34 <quorem+0x130>
  825d20:	20800017 	ldw	r2,0(r4)
  825d24:	1000031e 	bne	r2,zero,825d34 <quorem+0x130>
  825d28:	213fff04 	addi	r4,r4,-4
  825d2c:	8c7fffc4 	addi	r17,r17,-1
  825d30:	993ffb36 	bltu	r19,r4,825d20 <quorem+0x11c>
  825d34:	bc400415 	stw	r17,16(r23)
  825d38:	a005883a 	mov	r2,r20
  825d3c:	dfc00917 	ldw	ra,36(sp)
  825d40:	df000817 	ldw	fp,32(sp)
  825d44:	ddc00717 	ldw	r23,28(sp)
  825d48:	dd800617 	ldw	r22,24(sp)
  825d4c:	dd400517 	ldw	r21,20(sp)
  825d50:	dd000417 	ldw	r20,16(sp)
  825d54:	dcc00317 	ldw	r19,12(sp)
  825d58:	dc800217 	ldw	r18,8(sp)
  825d5c:	dc400117 	ldw	r17,4(sp)
  825d60:	dc000017 	ldw	r16,0(sp)
  825d64:	dec00a04 	addi	sp,sp,40
  825d68:	f800283a 	ret
  825d6c:	980f883a 	mov	r7,r19
  825d70:	8011883a 	mov	r8,r16
  825d74:	0013883a 	mov	r9,zero
  825d78:	000d883a 	mov	r6,zero
  825d7c:	40c00017 	ldw	r3,0(r8)
  825d80:	39000017 	ldw	r4,0(r7)
  825d84:	42000104 	addi	r8,r8,4
  825d88:	18bfffcc 	andi	r2,r3,65535
  825d8c:	a085383a 	mul	r2,r20,r2
  825d90:	1806d43a 	srli	r3,r3,16
  825d94:	217fffcc 	andi	r5,r4,65535
  825d98:	3085883a 	add	r2,r6,r2
  825d9c:	11bfffcc 	andi	r6,r2,65535
  825da0:	a0c7383a 	mul	r3,r20,r3
  825da4:	1004d43a 	srli	r2,r2,16
  825da8:	298bc83a 	sub	r5,r5,r6
  825dac:	2a4b883a 	add	r5,r5,r9
  825db0:	2008d43a 	srli	r4,r4,16
  825db4:	1887883a 	add	r3,r3,r2
  825db8:	280dd43a 	srai	r6,r5,16
  825dbc:	18bfffcc 	andi	r2,r3,65535
  825dc0:	2089c83a 	sub	r4,r4,r2
  825dc4:	2189883a 	add	r4,r4,r6
  825dc8:	3900008d 	sth	r4,2(r7)
  825dcc:	3940000d 	sth	r5,0(r7)
  825dd0:	180cd43a 	srli	r6,r3,16
  825dd4:	39c00104 	addi	r7,r7,4
  825dd8:	2013d43a 	srai	r9,r4,16
  825ddc:	923fe72e 	bgeu	r18,r8,825d7c <quorem+0x178>
  825de0:	e03fa61e 	bne	fp,zero,825c7c <quorem+0x78>
  825de4:	b0ffff04 	addi	r3,r22,-4
  825de8:	98c0082e 	bgeu	r19,r3,825e0c <quorem+0x208>
  825dec:	b0bfff17 	ldw	r2,-4(r22)
  825df0:	10000326 	beq	r2,zero,825e00 <quorem+0x1fc>
  825df4:	00000506 	br	825e0c <quorem+0x208>
  825df8:	18800017 	ldw	r2,0(r3)
  825dfc:	1000031e 	bne	r2,zero,825e0c <quorem+0x208>
  825e00:	18ffff04 	addi	r3,r3,-4
  825e04:	8c7fffc4 	addi	r17,r17,-1
  825e08:	98fffb36 	bltu	r19,r3,825df8 <quorem+0x1f4>
  825e0c:	bc400415 	stw	r17,16(r23)
  825e10:	003f9a06 	br	825c7c <quorem+0x78>
  825e14:	0005883a 	mov	r2,zero
  825e18:	003fc806 	br	825d3c <quorem+0x138>

00825e1c <_dtoa_r>:
  825e1c:	22001017 	ldw	r8,64(r4)
  825e20:	deffda04 	addi	sp,sp,-152
  825e24:	dd402115 	stw	r21,132(sp)
  825e28:	dd002015 	stw	r20,128(sp)
  825e2c:	dc801e15 	stw	r18,120(sp)
  825e30:	dc401d15 	stw	r17,116(sp)
  825e34:	dfc02515 	stw	ra,148(sp)
  825e38:	df002415 	stw	fp,144(sp)
  825e3c:	ddc02315 	stw	r23,140(sp)
  825e40:	dd802215 	stw	r22,136(sp)
  825e44:	dcc01f15 	stw	r19,124(sp)
  825e48:	dc001c15 	stw	r16,112(sp)
  825e4c:	d9001615 	stw	r4,88(sp)
  825e50:	3023883a 	mov	r17,r6
  825e54:	2829883a 	mov	r20,r5
  825e58:	d9c01715 	stw	r7,92(sp)
  825e5c:	dc802817 	ldw	r18,160(sp)
  825e60:	302b883a 	mov	r21,r6
  825e64:	40000a26 	beq	r8,zero,825e90 <_dtoa_r+0x74>
  825e68:	20801117 	ldw	r2,68(r4)
  825e6c:	400b883a 	mov	r5,r8
  825e70:	40800115 	stw	r2,4(r8)
  825e74:	20c01117 	ldw	r3,68(r4)
  825e78:	00800044 	movi	r2,1
  825e7c:	10c4983a 	sll	r2,r2,r3
  825e80:	40800215 	stw	r2,8(r8)
  825e84:	08286cc0 	call	8286cc <_Bfree>
  825e88:	d8c01617 	ldw	r3,88(sp)
  825e8c:	18001015 	stw	zero,64(r3)
  825e90:	8800a316 	blt	r17,zero,826120 <_dtoa_r+0x304>
  825e94:	90000015 	stw	zero,0(r18)
  825e98:	a8dffc2c 	andhi	r3,r21,32752
  825e9c:	009ffc34 	movhi	r2,32752
  825ea0:	18809126 	beq	r3,r2,8260e8 <_dtoa_r+0x2cc>
  825ea4:	000d883a 	mov	r6,zero
  825ea8:	000f883a 	mov	r7,zero
  825eac:	a009883a 	mov	r4,r20
  825eb0:	a80b883a 	mov	r5,r21
  825eb4:	dd001215 	stw	r20,72(sp)
  825eb8:	dd401315 	stw	r21,76(sp)
  825ebc:	082a8980 	call	82a898 <__nedf2>
  825ec0:	1000171e 	bne	r2,zero,825f20 <_dtoa_r+0x104>
  825ec4:	d9802717 	ldw	r6,156(sp)
  825ec8:	00800044 	movi	r2,1
  825ecc:	30800015 	stw	r2,0(r6)
  825ed0:	d8802917 	ldw	r2,164(sp)
  825ed4:	10029b26 	beq	r2,zero,826944 <_dtoa_r+0xb28>
  825ed8:	d9002917 	ldw	r4,164(sp)
  825edc:	008020f4 	movhi	r2,131
  825ee0:	108d3f44 	addi	r2,r2,13565
  825ee4:	10ffffc4 	addi	r3,r2,-1
  825ee8:	20800015 	stw	r2,0(r4)
  825eec:	1805883a 	mov	r2,r3
  825ef0:	dfc02517 	ldw	ra,148(sp)
  825ef4:	df002417 	ldw	fp,144(sp)
  825ef8:	ddc02317 	ldw	r23,140(sp)
  825efc:	dd802217 	ldw	r22,136(sp)
  825f00:	dd402117 	ldw	r21,132(sp)
  825f04:	dd002017 	ldw	r20,128(sp)
  825f08:	dcc01f17 	ldw	r19,124(sp)
  825f0c:	dc801e17 	ldw	r18,120(sp)
  825f10:	dc401d17 	ldw	r17,116(sp)
  825f14:	dc001c17 	ldw	r16,112(sp)
  825f18:	dec02604 	addi	sp,sp,152
  825f1c:	f800283a 	ret
  825f20:	d9001617 	ldw	r4,88(sp)
  825f24:	d9401217 	ldw	r5,72(sp)
  825f28:	d8800104 	addi	r2,sp,4
  825f2c:	a80d883a 	mov	r6,r21
  825f30:	d9c00204 	addi	r7,sp,8
  825f34:	d8800015 	stw	r2,0(sp)
  825f38:	0828d080 	call	828d08 <__d2b>
  825f3c:	d8800715 	stw	r2,28(sp)
  825f40:	a804d53a 	srli	r2,r21,20
  825f44:	1101ffcc 	andi	r4,r2,2047
  825f48:	20008626 	beq	r4,zero,826164 <_dtoa_r+0x348>
  825f4c:	d8c01217 	ldw	r3,72(sp)
  825f50:	00800434 	movhi	r2,16
  825f54:	10bfffc4 	addi	r2,r2,-1
  825f58:	ddc00117 	ldw	r23,4(sp)
  825f5c:	a884703a 	and	r2,r21,r2
  825f60:	1811883a 	mov	r8,r3
  825f64:	124ffc34 	orhi	r9,r2,16368
  825f68:	25bf0044 	addi	r22,r4,-1023
  825f6c:	d8000815 	stw	zero,32(sp)
  825f70:	0005883a 	mov	r2,zero
  825f74:	00cffe34 	movhi	r3,16376
  825f78:	480b883a 	mov	r5,r9
  825f7c:	4009883a 	mov	r4,r8
  825f80:	180f883a 	mov	r7,r3
  825f84:	100d883a 	mov	r6,r2
  825f88:	081ff200 	call	81ff20 <__subdf3>
  825f8c:	0218dbf4 	movhi	r8,25455
  825f90:	4210d844 	addi	r8,r8,17249
  825f94:	024ff4f4 	movhi	r9,16339
  825f98:	4a61e9c4 	addi	r9,r9,-30809
  825f9c:	480f883a 	mov	r7,r9
  825fa0:	400d883a 	mov	r6,r8
  825fa4:	180b883a 	mov	r5,r3
  825fa8:	1009883a 	mov	r4,r2
  825fac:	08200140 	call	820014 <__muldf3>
  825fb0:	0222d874 	movhi	r8,35681
  825fb4:	42322cc4 	addi	r8,r8,-14157
  825fb8:	024ff1f4 	movhi	r9,16327
  825fbc:	4a628a04 	addi	r9,r9,-30168
  825fc0:	480f883a 	mov	r7,r9
  825fc4:	400d883a 	mov	r6,r8
  825fc8:	180b883a 	mov	r5,r3
  825fcc:	1009883a 	mov	r4,r2
  825fd0:	081ffa00 	call	81ffa0 <__adddf3>
  825fd4:	b009883a 	mov	r4,r22
  825fd8:	1021883a 	mov	r16,r2
  825fdc:	1823883a 	mov	r17,r3
  825fe0:	08208500 	call	820850 <__floatsidf>
  825fe4:	021427f4 	movhi	r8,20639
  825fe8:	421e7ec4 	addi	r8,r8,31227
  825fec:	024ff4f4 	movhi	r9,16339
  825ff0:	4a5104c4 	addi	r9,r9,17427
  825ff4:	480f883a 	mov	r7,r9
  825ff8:	400d883a 	mov	r6,r8
  825ffc:	180b883a 	mov	r5,r3
  826000:	1009883a 	mov	r4,r2
  826004:	08200140 	call	820014 <__muldf3>
  826008:	180f883a 	mov	r7,r3
  82600c:	880b883a 	mov	r5,r17
  826010:	100d883a 	mov	r6,r2
  826014:	8009883a 	mov	r4,r16
  826018:	081ffa00 	call	81ffa0 <__adddf3>
  82601c:	1009883a 	mov	r4,r2
  826020:	180b883a 	mov	r5,r3
  826024:	1021883a 	mov	r16,r2
  826028:	1823883a 	mov	r17,r3
  82602c:	08209480 	call	820948 <__fixdfsi>
  826030:	000d883a 	mov	r6,zero
  826034:	000f883a 	mov	r7,zero
  826038:	8009883a 	mov	r4,r16
  82603c:	880b883a 	mov	r5,r17
  826040:	d8800d15 	stw	r2,52(sp)
  826044:	08207c80 	call	8207c8 <__ltdf2>
  826048:	10031716 	blt	r2,zero,826ca8 <_dtoa_r+0xe8c>
  82604c:	d8c00d17 	ldw	r3,52(sp)
  826050:	00800584 	movi	r2,22
  826054:	10c1482e 	bgeu	r2,r3,826578 <_dtoa_r+0x75c>
  826058:	01000044 	movi	r4,1
  82605c:	d9000c15 	stw	r4,48(sp)
  826060:	bd85c83a 	sub	r2,r23,r22
  826064:	11bfffc4 	addi	r6,r2,-1
  826068:	30030b16 	blt	r6,zero,826c98 <_dtoa_r+0xe7c>
  82606c:	d9800a15 	stw	r6,40(sp)
  826070:	d8001115 	stw	zero,68(sp)
  826074:	d8c00d17 	ldw	r3,52(sp)
  826078:	1802ff16 	blt	r3,zero,826c78 <_dtoa_r+0xe5c>
  82607c:	d9000a17 	ldw	r4,40(sp)
  826080:	d8c00915 	stw	r3,36(sp)
  826084:	d8001015 	stw	zero,64(sp)
  826088:	20c9883a 	add	r4,r4,r3
  82608c:	d9000a15 	stw	r4,40(sp)
  826090:	d9001717 	ldw	r4,92(sp)
  826094:	00800244 	movi	r2,9
  826098:	11004636 	bltu	r2,r4,8261b4 <_dtoa_r+0x398>
  82609c:	00800144 	movi	r2,5
  8260a0:	11020416 	blt	r2,r4,8268b4 <_dtoa_r+0xa98>
  8260a4:	04400044 	movi	r17,1
  8260a8:	d8c01717 	ldw	r3,92(sp)
  8260ac:	00800144 	movi	r2,5
  8260b0:	10c1ed36 	bltu	r2,r3,826868 <_dtoa_r+0xa4c>
  8260b4:	18c5883a 	add	r2,r3,r3
  8260b8:	1085883a 	add	r2,r2,r2
  8260bc:	00c020b4 	movhi	r3,130
  8260c0:	18d83404 	addi	r3,r3,24784
  8260c4:	10c5883a 	add	r2,r2,r3
  8260c8:	11000017 	ldw	r4,0(r2)
  8260cc:	2000683a 	jmp	r4
  8260d0:	008261bc 	xorhi	r2,zero,2438
  8260d4:	008261bc 	xorhi	r2,zero,2438
  8260d8:	00826bbc 	xorhi	r2,zero,2478
  8260dc:	00826b94 	movui	r2,2478
  8260e0:	00826bd8 	cmpnei	r2,zero,2479
  8260e4:	00826be4 	muli	r2,zero,2479
  8260e8:	d9002717 	ldw	r4,156(sp)
  8260ec:	0089c3c4 	movi	r2,9999
  8260f0:	20800015 	stw	r2,0(r4)
  8260f4:	a0001026 	beq	r20,zero,826138 <_dtoa_r+0x31c>
  8260f8:	00c02134 	movhi	r3,132
  8260fc:	18fb4604 	addi	r3,r3,-4840
  826100:	d9802917 	ldw	r6,164(sp)
  826104:	303f7926 	beq	r6,zero,825eec <_dtoa_r+0xd0>
  826108:	188000c7 	ldb	r2,3(r3)
  82610c:	190000c4 	addi	r4,r3,3
  826110:	1000101e 	bne	r2,zero,826154 <_dtoa_r+0x338>
  826114:	d8802917 	ldw	r2,164(sp)
  826118:	11000015 	stw	r4,0(r2)
  82611c:	003f7306 	br	825eec <_dtoa_r+0xd0>
  826120:	00a00034 	movhi	r2,32768
  826124:	10bfffc4 	addi	r2,r2,-1
  826128:	00c00044 	movi	r3,1
  82612c:	88aa703a 	and	r21,r17,r2
  826130:	90c00015 	stw	r3,0(r18)
  826134:	003f5806 	br	825e98 <_dtoa_r+0x7c>
  826138:	00800434 	movhi	r2,16
  82613c:	10bfffc4 	addi	r2,r2,-1
  826140:	a884703a 	and	r2,r21,r2
  826144:	103fec1e 	bne	r2,zero,8260f8 <_dtoa_r+0x2dc>
  826148:	00c02134 	movhi	r3,132
  82614c:	18fb4304 	addi	r3,r3,-4852
  826150:	003feb06 	br	826100 <_dtoa_r+0x2e4>
  826154:	d8802917 	ldw	r2,164(sp)
  826158:	19000204 	addi	r4,r3,8
  82615c:	11000015 	stw	r4,0(r2)
  826160:	003f6206 	br	825eec <_dtoa_r+0xd0>
  826164:	ddc00117 	ldw	r23,4(sp)
  826168:	d8800217 	ldw	r2,8(sp)
  82616c:	01000804 	movi	r4,32
  826170:	b8c10c84 	addi	r3,r23,1074
  826174:	18a3883a 	add	r17,r3,r2
  826178:	2441b80e 	bge	r4,r17,82685c <_dtoa_r+0xa40>
  82617c:	00c01004 	movi	r3,64
  826180:	1c47c83a 	sub	r3,r3,r17
  826184:	88bff804 	addi	r2,r17,-32
  826188:	a8c6983a 	sll	r3,r21,r3
  82618c:	a084d83a 	srl	r2,r20,r2
  826190:	1888b03a 	or	r4,r3,r2
  826194:	082a9200 	call	82a920 <__floatunsidf>
  826198:	1011883a 	mov	r8,r2
  82619c:	00bf8434 	movhi	r2,65040
  8261a0:	01000044 	movi	r4,1
  8261a4:	10d3883a 	add	r9,r2,r3
  8261a8:	8dbef344 	addi	r22,r17,-1075
  8261ac:	d9000815 	stw	r4,32(sp)
  8261b0:	003f6f06 	br	825f70 <_dtoa_r+0x154>
  8261b4:	d8001715 	stw	zero,92(sp)
  8261b8:	04400044 	movi	r17,1
  8261bc:	00bfffc4 	movi	r2,-1
  8261c0:	00c00044 	movi	r3,1
  8261c4:	d8800e15 	stw	r2,56(sp)
  8261c8:	d8002615 	stw	zero,152(sp)
  8261cc:	d8800f15 	stw	r2,60(sp)
  8261d0:	d8c00b15 	stw	r3,44(sp)
  8261d4:	1021883a 	mov	r16,r2
  8261d8:	d8801617 	ldw	r2,88(sp)
  8261dc:	10001115 	stw	zero,68(r2)
  8261e0:	d8801617 	ldw	r2,88(sp)
  8261e4:	11401117 	ldw	r5,68(r2)
  8261e8:	1009883a 	mov	r4,r2
  8261ec:	0828c4c0 	call	828c4c <_Balloc>
  8261f0:	d8c01617 	ldw	r3,88(sp)
  8261f4:	d8800515 	stw	r2,20(sp)
  8261f8:	18801015 	stw	r2,64(r3)
  8261fc:	00800384 	movi	r2,14
  826200:	14006836 	bltu	r2,r16,8263a4 <_dtoa_r+0x588>
  826204:	8805003a 	cmpeq	r2,r17,zero
  826208:	1000661e 	bne	r2,zero,8263a4 <_dtoa_r+0x588>
  82620c:	d9000d17 	ldw	r4,52(sp)
  826210:	0102300e 	bge	zero,r4,826ad4 <_dtoa_r+0xcb8>
  826214:	208003cc 	andi	r2,r4,15
  826218:	100490fa 	slli	r2,r2,3
  82621c:	2025d13a 	srai	r18,r4,4
  826220:	00c02134 	movhi	r3,132
  826224:	18fb5604 	addi	r3,r3,-4776
  826228:	10c5883a 	add	r2,r2,r3
  82622c:	90c0040c 	andi	r3,r18,16
  826230:	14000017 	ldw	r16,0(r2)
  826234:	14400117 	ldw	r17,4(r2)
  826238:	18036a1e 	bne	r3,zero,826fe4 <_dtoa_r+0x11c8>
  82623c:	05800084 	movi	r22,2
  826240:	90001026 	beq	r18,zero,826284 <_dtoa_r+0x468>
  826244:	04c02134 	movhi	r19,132
  826248:	9cfb8804 	addi	r19,r19,-4576
  82624c:	9080004c 	andi	r2,r18,1
  826250:	1005003a 	cmpeq	r2,r2,zero
  826254:	1000081e 	bne	r2,zero,826278 <_dtoa_r+0x45c>
  826258:	99800017 	ldw	r6,0(r19)
  82625c:	99c00117 	ldw	r7,4(r19)
  826260:	880b883a 	mov	r5,r17
  826264:	8009883a 	mov	r4,r16
  826268:	08200140 	call	820014 <__muldf3>
  82626c:	1021883a 	mov	r16,r2
  826270:	b5800044 	addi	r22,r22,1
  826274:	1823883a 	mov	r17,r3
  826278:	9025d07a 	srai	r18,r18,1
  82627c:	9cc00204 	addi	r19,r19,8
  826280:	903ff21e 	bne	r18,zero,82624c <_dtoa_r+0x430>
  826284:	a80b883a 	mov	r5,r21
  826288:	a009883a 	mov	r4,r20
  82628c:	880f883a 	mov	r7,r17
  826290:	800d883a 	mov	r6,r16
  826294:	08203d80 	call	8203d8 <__divdf3>
  826298:	1029883a 	mov	r20,r2
  82629c:	182b883a 	mov	r21,r3
  8262a0:	d8c00c17 	ldw	r3,48(sp)
  8262a4:	1805003a 	cmpeq	r2,r3,zero
  8262a8:	1000081e 	bne	r2,zero,8262cc <_dtoa_r+0x4b0>
  8262ac:	0005883a 	mov	r2,zero
  8262b0:	00cffc34 	movhi	r3,16368
  8262b4:	180f883a 	mov	r7,r3
  8262b8:	a009883a 	mov	r4,r20
  8262bc:	a80b883a 	mov	r5,r21
  8262c0:	100d883a 	mov	r6,r2
  8262c4:	08207c80 	call	8207c8 <__ltdf2>
  8262c8:	1003fe16 	blt	r2,zero,8272c4 <_dtoa_r+0x14a8>
  8262cc:	b009883a 	mov	r4,r22
  8262d0:	08208500 	call	820850 <__floatsidf>
  8262d4:	180b883a 	mov	r5,r3
  8262d8:	1009883a 	mov	r4,r2
  8262dc:	a00d883a 	mov	r6,r20
  8262e0:	a80f883a 	mov	r7,r21
  8262e4:	08200140 	call	820014 <__muldf3>
  8262e8:	0011883a 	mov	r8,zero
  8262ec:	02500734 	movhi	r9,16412
  8262f0:	1009883a 	mov	r4,r2
  8262f4:	180b883a 	mov	r5,r3
  8262f8:	480f883a 	mov	r7,r9
  8262fc:	400d883a 	mov	r6,r8
  826300:	081ffa00 	call	81ffa0 <__adddf3>
  826304:	d9000f17 	ldw	r4,60(sp)
  826308:	102d883a 	mov	r22,r2
  82630c:	00bf3034 	movhi	r2,64704
  826310:	18b9883a 	add	fp,r3,r2
  826314:	e02f883a 	mov	r23,fp
  826318:	20028f1e 	bne	r4,zero,826d58 <_dtoa_r+0xf3c>
  82631c:	0005883a 	mov	r2,zero
  826320:	00d00534 	movhi	r3,16404
  826324:	a009883a 	mov	r4,r20
  826328:	a80b883a 	mov	r5,r21
  82632c:	180f883a 	mov	r7,r3
  826330:	100d883a 	mov	r6,r2
  826334:	081ff200 	call	81ff20 <__subdf3>
  826338:	1009883a 	mov	r4,r2
  82633c:	e00f883a 	mov	r7,fp
  826340:	180b883a 	mov	r5,r3
  826344:	b00d883a 	mov	r6,r22
  826348:	1025883a 	mov	r18,r2
  82634c:	1827883a 	mov	r19,r3
  826350:	08206b80 	call	8206b8 <__gtdf2>
  826354:	00834f16 	blt	zero,r2,827094 <_dtoa_r+0x1278>
  826358:	e0e0003c 	xorhi	r3,fp,32768
  82635c:	9009883a 	mov	r4,r18
  826360:	980b883a 	mov	r5,r19
  826364:	180f883a 	mov	r7,r3
  826368:	b00d883a 	mov	r6,r22
  82636c:	08207c80 	call	8207c8 <__ltdf2>
  826370:	1000080e 	bge	r2,zero,826394 <_dtoa_r+0x578>
  826374:	0027883a 	mov	r19,zero
  826378:	0025883a 	mov	r18,zero
  82637c:	d8802617 	ldw	r2,152(sp)
  826380:	df000517 	ldw	fp,20(sp)
  826384:	d8000615 	stw	zero,24(sp)
  826388:	0084303a 	nor	r2,zero,r2
  82638c:	d8800d15 	stw	r2,52(sp)
  826390:	00019b06 	br	826a00 <_dtoa_r+0xbe4>
  826394:	d9801217 	ldw	r6,72(sp)
  826398:	d8801317 	ldw	r2,76(sp)
  82639c:	3029883a 	mov	r20,r6
  8263a0:	102b883a 	mov	r21,r2
  8263a4:	d8c00217 	ldw	r3,8(sp)
  8263a8:	18008516 	blt	r3,zero,8265c0 <_dtoa_r+0x7a4>
  8263ac:	d9000d17 	ldw	r4,52(sp)
  8263b0:	00800384 	movi	r2,14
  8263b4:	11008216 	blt	r2,r4,8265c0 <_dtoa_r+0x7a4>
  8263b8:	200490fa 	slli	r2,r4,3
  8263bc:	d9802617 	ldw	r6,152(sp)
  8263c0:	00c02134 	movhi	r3,132
  8263c4:	18fb5604 	addi	r3,r3,-4776
  8263c8:	10c5883a 	add	r2,r2,r3
  8263cc:	14800017 	ldw	r18,0(r2)
  8263d0:	14c00117 	ldw	r19,4(r2)
  8263d4:	30031e16 	blt	r6,zero,827050 <_dtoa_r+0x1234>
  8263d8:	d9000517 	ldw	r4,20(sp)
  8263dc:	d8c00f17 	ldw	r3,60(sp)
  8263e0:	a823883a 	mov	r17,r21
  8263e4:	a021883a 	mov	r16,r20
  8263e8:	192b883a 	add	r21,r3,r4
  8263ec:	2039883a 	mov	fp,r4
  8263f0:	00000f06 	br	826430 <_dtoa_r+0x614>
  8263f4:	0005883a 	mov	r2,zero
  8263f8:	00d00934 	movhi	r3,16420
  8263fc:	5009883a 	mov	r4,r10
  826400:	580b883a 	mov	r5,r11
  826404:	180f883a 	mov	r7,r3
  826408:	100d883a 	mov	r6,r2
  82640c:	08200140 	call	820014 <__muldf3>
  826410:	180b883a 	mov	r5,r3
  826414:	000d883a 	mov	r6,zero
  826418:	000f883a 	mov	r7,zero
  82641c:	1009883a 	mov	r4,r2
  826420:	1021883a 	mov	r16,r2
  826424:	1823883a 	mov	r17,r3
  826428:	082a8980 	call	82a898 <__nedf2>
  82642c:	10004526 	beq	r2,zero,826544 <_dtoa_r+0x728>
  826430:	900d883a 	mov	r6,r18
  826434:	980f883a 	mov	r7,r19
  826438:	8009883a 	mov	r4,r16
  82643c:	880b883a 	mov	r5,r17
  826440:	08203d80 	call	8203d8 <__divdf3>
  826444:	180b883a 	mov	r5,r3
  826448:	1009883a 	mov	r4,r2
  82644c:	08209480 	call	820948 <__fixdfsi>
  826450:	1009883a 	mov	r4,r2
  826454:	1029883a 	mov	r20,r2
  826458:	08208500 	call	820850 <__floatsidf>
  82645c:	180f883a 	mov	r7,r3
  826460:	9009883a 	mov	r4,r18
  826464:	980b883a 	mov	r5,r19
  826468:	100d883a 	mov	r6,r2
  82646c:	08200140 	call	820014 <__muldf3>
  826470:	180f883a 	mov	r7,r3
  826474:	880b883a 	mov	r5,r17
  826478:	8009883a 	mov	r4,r16
  82647c:	100d883a 	mov	r6,r2
  826480:	081ff200 	call	81ff20 <__subdf3>
  826484:	1015883a 	mov	r10,r2
  826488:	a0800c04 	addi	r2,r20,48
  82648c:	e0800005 	stb	r2,0(fp)
  826490:	e7000044 	addi	fp,fp,1
  826494:	1817883a 	mov	r11,r3
  826498:	e57fd61e 	bne	fp,r21,8263f4 <_dtoa_r+0x5d8>
  82649c:	500d883a 	mov	r6,r10
  8264a0:	180f883a 	mov	r7,r3
  8264a4:	5009883a 	mov	r4,r10
  8264a8:	180b883a 	mov	r5,r3
  8264ac:	081ffa00 	call	81ffa0 <__adddf3>
  8264b0:	100d883a 	mov	r6,r2
  8264b4:	9009883a 	mov	r4,r18
  8264b8:	980b883a 	mov	r5,r19
  8264bc:	180f883a 	mov	r7,r3
  8264c0:	1021883a 	mov	r16,r2
  8264c4:	1823883a 	mov	r17,r3
  8264c8:	08207c80 	call	8207c8 <__ltdf2>
  8264cc:	10000816 	blt	r2,zero,8264f0 <_dtoa_r+0x6d4>
  8264d0:	980b883a 	mov	r5,r19
  8264d4:	800d883a 	mov	r6,r16
  8264d8:	880f883a 	mov	r7,r17
  8264dc:	9009883a 	mov	r4,r18
  8264e0:	08206300 	call	820630 <__eqdf2>
  8264e4:	1000171e 	bne	r2,zero,826544 <_dtoa_r+0x728>
  8264e8:	a080004c 	andi	r2,r20,1
  8264ec:	10001526 	beq	r2,zero,826544 <_dtoa_r+0x728>
  8264f0:	d8800d17 	ldw	r2,52(sp)
  8264f4:	d8800415 	stw	r2,16(sp)
  8264f8:	e009883a 	mov	r4,fp
  8264fc:	213fffc4 	addi	r4,r4,-1
  826500:	20c00007 	ldb	r3,0(r4)
  826504:	00800e44 	movi	r2,57
  826508:	1880081e 	bne	r3,r2,82652c <_dtoa_r+0x710>
  82650c:	d8800517 	ldw	r2,20(sp)
  826510:	113ffa1e 	bne	r2,r4,8264fc <_dtoa_r+0x6e0>
  826514:	d8c00417 	ldw	r3,16(sp)
  826518:	d9800517 	ldw	r6,20(sp)
  82651c:	00800c04 	movi	r2,48
  826520:	18c00044 	addi	r3,r3,1
  826524:	d8c00415 	stw	r3,16(sp)
  826528:	30800005 	stb	r2,0(r6)
  82652c:	20800003 	ldbu	r2,0(r4)
  826530:	d8c00417 	ldw	r3,16(sp)
  826534:	27000044 	addi	fp,r4,1
  826538:	10800044 	addi	r2,r2,1
  82653c:	d8c00d15 	stw	r3,52(sp)
  826540:	20800005 	stb	r2,0(r4)
  826544:	d9001617 	ldw	r4,88(sp)
  826548:	d9400717 	ldw	r5,28(sp)
  82654c:	08286cc0 	call	8286cc <_Bfree>
  826550:	e0000005 	stb	zero,0(fp)
  826554:	d9800d17 	ldw	r6,52(sp)
  826558:	d8c02717 	ldw	r3,156(sp)
  82655c:	d9002917 	ldw	r4,164(sp)
  826560:	30800044 	addi	r2,r6,1
  826564:	18800015 	stw	r2,0(r3)
  826568:	20029c26 	beq	r4,zero,826fdc <_dtoa_r+0x11c0>
  82656c:	d8c00517 	ldw	r3,20(sp)
  826570:	27000015 	stw	fp,0(r4)
  826574:	003e5d06 	br	825eec <_dtoa_r+0xd0>
  826578:	d9800d17 	ldw	r6,52(sp)
  82657c:	00c02134 	movhi	r3,132
  826580:	18fb5604 	addi	r3,r3,-4776
  826584:	d9001217 	ldw	r4,72(sp)
  826588:	300490fa 	slli	r2,r6,3
  82658c:	d9401317 	ldw	r5,76(sp)
  826590:	10c5883a 	add	r2,r2,r3
  826594:	12000017 	ldw	r8,0(r2)
  826598:	12400117 	ldw	r9,4(r2)
  82659c:	400d883a 	mov	r6,r8
  8265a0:	480f883a 	mov	r7,r9
  8265a4:	08207c80 	call	8207c8 <__ltdf2>
  8265a8:	1000030e 	bge	r2,zero,8265b8 <_dtoa_r+0x79c>
  8265ac:	d8800d17 	ldw	r2,52(sp)
  8265b0:	10bfffc4 	addi	r2,r2,-1
  8265b4:	d8800d15 	stw	r2,52(sp)
  8265b8:	d8000c15 	stw	zero,48(sp)
  8265bc:	003ea806 	br	826060 <_dtoa_r+0x244>
  8265c0:	d9000b17 	ldw	r4,44(sp)
  8265c4:	202cc03a 	cmpne	r22,r4,zero
  8265c8:	b000c71e 	bne	r22,zero,8268e8 <_dtoa_r+0xacc>
  8265cc:	dc001117 	ldw	r16,68(sp)
  8265d0:	dc801017 	ldw	r18,64(sp)
  8265d4:	0027883a 	mov	r19,zero
  8265d8:	04000b0e 	bge	zero,r16,826608 <_dtoa_r+0x7ec>
  8265dc:	d8c00a17 	ldw	r3,40(sp)
  8265e0:	00c0090e 	bge	zero,r3,826608 <_dtoa_r+0x7ec>
  8265e4:	8005883a 	mov	r2,r16
  8265e8:	1c011316 	blt	r3,r16,826a38 <_dtoa_r+0xc1c>
  8265ec:	d9000a17 	ldw	r4,40(sp)
  8265f0:	d9801117 	ldw	r6,68(sp)
  8265f4:	80a1c83a 	sub	r16,r16,r2
  8265f8:	2089c83a 	sub	r4,r4,r2
  8265fc:	308dc83a 	sub	r6,r6,r2
  826600:	d9000a15 	stw	r4,40(sp)
  826604:	d9801115 	stw	r6,68(sp)
  826608:	d8801017 	ldw	r2,64(sp)
  82660c:	0080150e 	bge	zero,r2,826664 <_dtoa_r+0x848>
  826610:	d8c00b17 	ldw	r3,44(sp)
  826614:	1805003a 	cmpeq	r2,r3,zero
  826618:	1001c91e 	bne	r2,zero,826d40 <_dtoa_r+0xf24>
  82661c:	04800e0e 	bge	zero,r18,826658 <_dtoa_r+0x83c>
  826620:	d9001617 	ldw	r4,88(sp)
  826624:	980b883a 	mov	r5,r19
  826628:	900d883a 	mov	r6,r18
  82662c:	08294800 	call	829480 <__pow5mult>
  826630:	d9001617 	ldw	r4,88(sp)
  826634:	d9800717 	ldw	r6,28(sp)
  826638:	100b883a 	mov	r5,r2
  82663c:	1027883a 	mov	r19,r2
  826640:	082915c0 	call	82915c <__multiply>
  826644:	d9001617 	ldw	r4,88(sp)
  826648:	d9400717 	ldw	r5,28(sp)
  82664c:	1023883a 	mov	r17,r2
  826650:	08286cc0 	call	8286cc <_Bfree>
  826654:	dc400715 	stw	r17,28(sp)
  826658:	d9001017 	ldw	r4,64(sp)
  82665c:	248dc83a 	sub	r6,r4,r18
  826660:	30010e1e 	bne	r6,zero,826a9c <_dtoa_r+0xc80>
  826664:	d9001617 	ldw	r4,88(sp)
  826668:	04400044 	movi	r17,1
  82666c:	880b883a 	mov	r5,r17
  826670:	08293440 	call	829344 <__i2b>
  826674:	d9800917 	ldw	r6,36(sp)
  826678:	1025883a 	mov	r18,r2
  82667c:	0180040e 	bge	zero,r6,826690 <_dtoa_r+0x874>
  826680:	d9001617 	ldw	r4,88(sp)
  826684:	100b883a 	mov	r5,r2
  826688:	08294800 	call	829480 <__pow5mult>
  82668c:	1025883a 	mov	r18,r2
  826690:	d8801717 	ldw	r2,92(sp)
  826694:	8880f30e 	bge	r17,r2,826a64 <_dtoa_r+0xc48>
  826698:	0023883a 	mov	r17,zero
  82669c:	d9800917 	ldw	r6,36(sp)
  8266a0:	30019e1e 	bne	r6,zero,826d1c <_dtoa_r+0xf00>
  8266a4:	00c00044 	movi	r3,1
  8266a8:	d9000a17 	ldw	r4,40(sp)
  8266ac:	20c5883a 	add	r2,r4,r3
  8266b0:	10c007cc 	andi	r3,r2,31
  8266b4:	1800841e 	bne	r3,zero,8268c8 <_dtoa_r+0xaac>
  8266b8:	00800704 	movi	r2,28
  8266bc:	d9000a17 	ldw	r4,40(sp)
  8266c0:	d9801117 	ldw	r6,68(sp)
  8266c4:	80a1883a 	add	r16,r16,r2
  8266c8:	2089883a 	add	r4,r4,r2
  8266cc:	308d883a 	add	r6,r6,r2
  8266d0:	d9000a15 	stw	r4,40(sp)
  8266d4:	d9801115 	stw	r6,68(sp)
  8266d8:	d8801117 	ldw	r2,68(sp)
  8266dc:	0080050e 	bge	zero,r2,8266f4 <_dtoa_r+0x8d8>
  8266e0:	d9400717 	ldw	r5,28(sp)
  8266e4:	d9001617 	ldw	r4,88(sp)
  8266e8:	100d883a 	mov	r6,r2
  8266ec:	08290100 	call	829010 <__lshift>
  8266f0:	d8800715 	stw	r2,28(sp)
  8266f4:	d8c00a17 	ldw	r3,40(sp)
  8266f8:	00c0050e 	bge	zero,r3,826710 <_dtoa_r+0x8f4>
  8266fc:	d9001617 	ldw	r4,88(sp)
  826700:	900b883a 	mov	r5,r18
  826704:	180d883a 	mov	r6,r3
  826708:	08290100 	call	829010 <__lshift>
  82670c:	1025883a 	mov	r18,r2
  826710:	d9000c17 	ldw	r4,48(sp)
  826714:	2005003a 	cmpeq	r2,r4,zero
  826718:	10016f26 	beq	r2,zero,826cd8 <_dtoa_r+0xebc>
  82671c:	d9000f17 	ldw	r4,60(sp)
  826720:	0102170e 	bge	zero,r4,826f80 <_dtoa_r+0x1164>
  826724:	d9800b17 	ldw	r6,44(sp)
  826728:	3005003a 	cmpeq	r2,r6,zero
  82672c:	1000881e 	bne	r2,zero,826950 <_dtoa_r+0xb34>
  826730:	0400050e 	bge	zero,r16,826748 <_dtoa_r+0x92c>
  826734:	d9001617 	ldw	r4,88(sp)
  826738:	980b883a 	mov	r5,r19
  82673c:	800d883a 	mov	r6,r16
  826740:	08290100 	call	829010 <__lshift>
  826744:	1027883a 	mov	r19,r2
  826748:	8804c03a 	cmpne	r2,r17,zero
  82674c:	1002541e 	bne	r2,zero,8270a0 <_dtoa_r+0x1284>
  826750:	980b883a 	mov	r5,r19
  826754:	dd800517 	ldw	r22,20(sp)
  826758:	dcc00615 	stw	r19,24(sp)
  82675c:	a700004c 	andi	fp,r20,1
  826760:	2827883a 	mov	r19,r5
  826764:	d9000717 	ldw	r4,28(sp)
  826768:	900b883a 	mov	r5,r18
  82676c:	0825c040 	call	825c04 <quorem>
  826770:	d9000717 	ldw	r4,28(sp)
  826774:	d9400617 	ldw	r5,24(sp)
  826778:	1023883a 	mov	r17,r2
  82677c:	8dc00c04 	addi	r23,r17,48
  826780:	08288280 	call	828828 <__mcmp>
  826784:	d9001617 	ldw	r4,88(sp)
  826788:	900b883a 	mov	r5,r18
  82678c:	980d883a 	mov	r6,r19
  826790:	1029883a 	mov	r20,r2
  826794:	0828e840 	call	828e84 <__mdiff>
  826798:	102b883a 	mov	r21,r2
  82679c:	10800317 	ldw	r2,12(r2)
  8267a0:	1001281e 	bne	r2,zero,826c44 <_dtoa_r+0xe28>
  8267a4:	d9000717 	ldw	r4,28(sp)
  8267a8:	a80b883a 	mov	r5,r21
  8267ac:	08288280 	call	828828 <__mcmp>
  8267b0:	d9001617 	ldw	r4,88(sp)
  8267b4:	1021883a 	mov	r16,r2
  8267b8:	a80b883a 	mov	r5,r21
  8267bc:	08286cc0 	call	8286cc <_Bfree>
  8267c0:	8000041e 	bne	r16,zero,8267d4 <_dtoa_r+0x9b8>
  8267c4:	d8801717 	ldw	r2,92(sp)
  8267c8:	1000021e 	bne	r2,zero,8267d4 <_dtoa_r+0x9b8>
  8267cc:	e004c03a 	cmpne	r2,fp,zero
  8267d0:	10011726 	beq	r2,zero,826c30 <_dtoa_r+0xe14>
  8267d4:	a0010616 	blt	r20,zero,826bf0 <_dtoa_r+0xdd4>
  8267d8:	a000041e 	bne	r20,zero,8267ec <_dtoa_r+0x9d0>
  8267dc:	d8c01717 	ldw	r3,92(sp)
  8267e0:	1800021e 	bne	r3,zero,8267ec <_dtoa_r+0x9d0>
  8267e4:	e004c03a 	cmpne	r2,fp,zero
  8267e8:	10010126 	beq	r2,zero,826bf0 <_dtoa_r+0xdd4>
  8267ec:	04023d16 	blt	zero,r16,8270e4 <_dtoa_r+0x12c8>
  8267f0:	b5c00005 	stb	r23,0(r22)
  8267f4:	d9800517 	ldw	r6,20(sp)
  8267f8:	d9000f17 	ldw	r4,60(sp)
  8267fc:	b5800044 	addi	r22,r22,1
  826800:	3105883a 	add	r2,r6,r4
  826804:	b0806526 	beq	r22,r2,82699c <_dtoa_r+0xb80>
  826808:	d9400717 	ldw	r5,28(sp)
  82680c:	d9001617 	ldw	r4,88(sp)
  826810:	01800284 	movi	r6,10
  826814:	000f883a 	mov	r7,zero
  826818:	08293800 	call	829380 <__multadd>
  82681c:	d8800715 	stw	r2,28(sp)
  826820:	d8800617 	ldw	r2,24(sp)
  826824:	14c10c26 	beq	r2,r19,826c58 <_dtoa_r+0xe3c>
  826828:	d9400617 	ldw	r5,24(sp)
  82682c:	d9001617 	ldw	r4,88(sp)
  826830:	01800284 	movi	r6,10
  826834:	000f883a 	mov	r7,zero
  826838:	08293800 	call	829380 <__multadd>
  82683c:	d9001617 	ldw	r4,88(sp)
  826840:	980b883a 	mov	r5,r19
  826844:	01800284 	movi	r6,10
  826848:	000f883a 	mov	r7,zero
  82684c:	d8800615 	stw	r2,24(sp)
  826850:	08293800 	call	829380 <__multadd>
  826854:	1027883a 	mov	r19,r2
  826858:	003fc206 	br	826764 <_dtoa_r+0x948>
  82685c:	2445c83a 	sub	r2,r4,r17
  826860:	a088983a 	sll	r4,r20,r2
  826864:	003e4b06 	br	826194 <_dtoa_r+0x378>
  826868:	01bfffc4 	movi	r6,-1
  82686c:	00800044 	movi	r2,1
  826870:	d9800e15 	stw	r6,56(sp)
  826874:	d9800f15 	stw	r6,60(sp)
  826878:	d8800b15 	stw	r2,44(sp)
  82687c:	d8c01617 	ldw	r3,88(sp)
  826880:	008005c4 	movi	r2,23
  826884:	18001115 	stw	zero,68(r3)
  826888:	1580082e 	bgeu	r2,r22,8268ac <_dtoa_r+0xa90>
  82688c:	00c00104 	movi	r3,4
  826890:	0009883a 	mov	r4,zero
  826894:	18c7883a 	add	r3,r3,r3
  826898:	18800504 	addi	r2,r3,20
  82689c:	21000044 	addi	r4,r4,1
  8268a0:	b0bffc2e 	bgeu	r22,r2,826894 <_dtoa_r+0xa78>
  8268a4:	d9801617 	ldw	r6,88(sp)
  8268a8:	31001115 	stw	r4,68(r6)
  8268ac:	dc000f17 	ldw	r16,60(sp)
  8268b0:	003e4b06 	br	8261e0 <_dtoa_r+0x3c4>
  8268b4:	d9801717 	ldw	r6,92(sp)
  8268b8:	0023883a 	mov	r17,zero
  8268bc:	31bfff04 	addi	r6,r6,-4
  8268c0:	d9801715 	stw	r6,92(sp)
  8268c4:	003df806 	br	8260a8 <_dtoa_r+0x28c>
  8268c8:	00800804 	movi	r2,32
  8268cc:	10c9c83a 	sub	r4,r2,r3
  8268d0:	00c00104 	movi	r3,4
  8268d4:	19005a16 	blt	r3,r4,826a40 <_dtoa_r+0xc24>
  8268d8:	008000c4 	movi	r2,3
  8268dc:	113f7e16 	blt	r2,r4,8266d8 <_dtoa_r+0x8bc>
  8268e0:	20800704 	addi	r2,r4,28
  8268e4:	003f7506 	br	8266bc <_dtoa_r+0x8a0>
  8268e8:	d9801717 	ldw	r6,92(sp)
  8268ec:	00800044 	movi	r2,1
  8268f0:	1180a10e 	bge	r2,r6,826b78 <_dtoa_r+0xd5c>
  8268f4:	d9800f17 	ldw	r6,60(sp)
  8268f8:	d8c01017 	ldw	r3,64(sp)
  8268fc:	30bfffc4 	addi	r2,r6,-1
  826900:	1881c616 	blt	r3,r2,82701c <_dtoa_r+0x1200>
  826904:	18a5c83a 	sub	r18,r3,r2
  826908:	d8800f17 	ldw	r2,60(sp)
  82690c:	10026216 	blt	r2,zero,827298 <_dtoa_r+0x147c>
  826910:	dc001117 	ldw	r16,68(sp)
  826914:	1007883a 	mov	r3,r2
  826918:	d9800a17 	ldw	r6,40(sp)
  82691c:	d8801117 	ldw	r2,68(sp)
  826920:	d9001617 	ldw	r4,88(sp)
  826924:	30cd883a 	add	r6,r6,r3
  826928:	10c5883a 	add	r2,r2,r3
  82692c:	01400044 	movi	r5,1
  826930:	d9800a15 	stw	r6,40(sp)
  826934:	d8801115 	stw	r2,68(sp)
  826938:	08293440 	call	829344 <__i2b>
  82693c:	1027883a 	mov	r19,r2
  826940:	003f2506 	br	8265d8 <_dtoa_r+0x7bc>
  826944:	00c020f4 	movhi	r3,131
  826948:	18cd3f04 	addi	r3,r3,13564
  82694c:	003d6706 	br	825eec <_dtoa_r+0xd0>
  826950:	dd800517 	ldw	r22,20(sp)
  826954:	04000044 	movi	r16,1
  826958:	00000706 	br	826978 <_dtoa_r+0xb5c>
  82695c:	d9400717 	ldw	r5,28(sp)
  826960:	d9001617 	ldw	r4,88(sp)
  826964:	01800284 	movi	r6,10
  826968:	000f883a 	mov	r7,zero
  82696c:	08293800 	call	829380 <__multadd>
  826970:	d8800715 	stw	r2,28(sp)
  826974:	84000044 	addi	r16,r16,1
  826978:	d9000717 	ldw	r4,28(sp)
  82697c:	900b883a 	mov	r5,r18
  826980:	0825c040 	call	825c04 <quorem>
  826984:	15c00c04 	addi	r23,r2,48
  826988:	b5c00005 	stb	r23,0(r22)
  82698c:	d8c00f17 	ldw	r3,60(sp)
  826990:	b5800044 	addi	r22,r22,1
  826994:	80fff116 	blt	r16,r3,82695c <_dtoa_r+0xb40>
  826998:	d8000615 	stw	zero,24(sp)
  82699c:	d9400717 	ldw	r5,28(sp)
  8269a0:	d9001617 	ldw	r4,88(sp)
  8269a4:	01800044 	movi	r6,1
  8269a8:	08290100 	call	829010 <__lshift>
  8269ac:	1009883a 	mov	r4,r2
  8269b0:	900b883a 	mov	r5,r18
  8269b4:	d8800715 	stw	r2,28(sp)
  8269b8:	08288280 	call	828828 <__mcmp>
  8269bc:	00803c0e 	bge	zero,r2,826ab0 <_dtoa_r+0xc94>
  8269c0:	b009883a 	mov	r4,r22
  8269c4:	213fffc4 	addi	r4,r4,-1
  8269c8:	21400003 	ldbu	r5,0(r4)
  8269cc:	00800e44 	movi	r2,57
  8269d0:	28c03fcc 	andi	r3,r5,255
  8269d4:	18c0201c 	xori	r3,r3,128
  8269d8:	18ffe004 	addi	r3,r3,-128
  8269dc:	1881981e 	bne	r3,r2,827040 <_dtoa_r+0x1224>
  8269e0:	d9800517 	ldw	r6,20(sp)
  8269e4:	21bff71e 	bne	r4,r6,8269c4 <_dtoa_r+0xba8>
  8269e8:	d8800d17 	ldw	r2,52(sp)
  8269ec:	37000044 	addi	fp,r6,1
  8269f0:	10800044 	addi	r2,r2,1
  8269f4:	d8800d15 	stw	r2,52(sp)
  8269f8:	00800c44 	movi	r2,49
  8269fc:	30800005 	stb	r2,0(r6)
  826a00:	d9001617 	ldw	r4,88(sp)
  826a04:	900b883a 	mov	r5,r18
  826a08:	08286cc0 	call	8286cc <_Bfree>
  826a0c:	983ecd26 	beq	r19,zero,826544 <_dtoa_r+0x728>
  826a10:	d8c00617 	ldw	r3,24(sp)
  826a14:	18000426 	beq	r3,zero,826a28 <_dtoa_r+0xc0c>
  826a18:	1cc00326 	beq	r3,r19,826a28 <_dtoa_r+0xc0c>
  826a1c:	d9001617 	ldw	r4,88(sp)
  826a20:	180b883a 	mov	r5,r3
  826a24:	08286cc0 	call	8286cc <_Bfree>
  826a28:	d9001617 	ldw	r4,88(sp)
  826a2c:	980b883a 	mov	r5,r19
  826a30:	08286cc0 	call	8286cc <_Bfree>
  826a34:	003ec306 	br	826544 <_dtoa_r+0x728>
  826a38:	1805883a 	mov	r2,r3
  826a3c:	003eeb06 	br	8265ec <_dtoa_r+0x7d0>
  826a40:	d9800a17 	ldw	r6,40(sp)
  826a44:	d8c01117 	ldw	r3,68(sp)
  826a48:	20bfff04 	addi	r2,r4,-4
  826a4c:	308d883a 	add	r6,r6,r2
  826a50:	1887883a 	add	r3,r3,r2
  826a54:	80a1883a 	add	r16,r16,r2
  826a58:	d9800a15 	stw	r6,40(sp)
  826a5c:	d8c01115 	stw	r3,68(sp)
  826a60:	003f1d06 	br	8266d8 <_dtoa_r+0x8bc>
  826a64:	a03f0c1e 	bne	r20,zero,826698 <_dtoa_r+0x87c>
  826a68:	00800434 	movhi	r2,16
  826a6c:	10bfffc4 	addi	r2,r2,-1
  826a70:	a884703a 	and	r2,r21,r2
  826a74:	103f081e 	bne	r2,zero,826698 <_dtoa_r+0x87c>
  826a78:	a89ffc2c 	andhi	r2,r21,32752
  826a7c:	103f0626 	beq	r2,zero,826698 <_dtoa_r+0x87c>
  826a80:	d8c01117 	ldw	r3,68(sp)
  826a84:	d9000a17 	ldw	r4,40(sp)
  826a88:	18c00044 	addi	r3,r3,1
  826a8c:	21000044 	addi	r4,r4,1
  826a90:	d8c01115 	stw	r3,68(sp)
  826a94:	d9000a15 	stw	r4,40(sp)
  826a98:	003f0006 	br	82669c <_dtoa_r+0x880>
  826a9c:	d9400717 	ldw	r5,28(sp)
  826aa0:	d9001617 	ldw	r4,88(sp)
  826aa4:	08294800 	call	829480 <__pow5mult>
  826aa8:	d8800715 	stw	r2,28(sp)
  826aac:	003eed06 	br	826664 <_dtoa_r+0x848>
  826ab0:	1000021e 	bne	r2,zero,826abc <_dtoa_r+0xca0>
  826ab4:	b880004c 	andi	r2,r23,1
  826ab8:	103fc11e 	bne	r2,zero,8269c0 <_dtoa_r+0xba4>
  826abc:	b5bfffc4 	addi	r22,r22,-1
  826ac0:	b0c00007 	ldb	r3,0(r22)
  826ac4:	00800c04 	movi	r2,48
  826ac8:	18bffc26 	beq	r3,r2,826abc <_dtoa_r+0xca0>
  826acc:	b7000044 	addi	fp,r22,1
  826ad0:	003fcb06 	br	826a00 <_dtoa_r+0xbe4>
  826ad4:	d9800d17 	ldw	r6,52(sp)
  826ad8:	018fc83a 	sub	r7,zero,r6
  826adc:	3801f726 	beq	r7,zero,8272bc <_dtoa_r+0x14a0>
  826ae0:	398003cc 	andi	r6,r7,15
  826ae4:	300c90fa 	slli	r6,r6,3
  826ae8:	01402134 	movhi	r5,132
  826aec:	297b5604 	addi	r5,r5,-4776
  826af0:	d9001217 	ldw	r4,72(sp)
  826af4:	314d883a 	add	r6,r6,r5
  826af8:	30c00117 	ldw	r3,4(r6)
  826afc:	30800017 	ldw	r2,0(r6)
  826b00:	d9401317 	ldw	r5,76(sp)
  826b04:	3821d13a 	srai	r16,r7,4
  826b08:	100d883a 	mov	r6,r2
  826b0c:	180f883a 	mov	r7,r3
  826b10:	08200140 	call	820014 <__muldf3>
  826b14:	1011883a 	mov	r8,r2
  826b18:	1813883a 	mov	r9,r3
  826b1c:	1029883a 	mov	r20,r2
  826b20:	182b883a 	mov	r21,r3
  826b24:	8001e526 	beq	r16,zero,8272bc <_dtoa_r+0x14a0>
  826b28:	05800084 	movi	r22,2
  826b2c:	04402134 	movhi	r17,132
  826b30:	8c7b8804 	addi	r17,r17,-4576
  826b34:	8080004c 	andi	r2,r16,1
  826b38:	1005003a 	cmpeq	r2,r2,zero
  826b3c:	1000081e 	bne	r2,zero,826b60 <_dtoa_r+0xd44>
  826b40:	89800017 	ldw	r6,0(r17)
  826b44:	89c00117 	ldw	r7,4(r17)
  826b48:	480b883a 	mov	r5,r9
  826b4c:	4009883a 	mov	r4,r8
  826b50:	08200140 	call	820014 <__muldf3>
  826b54:	1011883a 	mov	r8,r2
  826b58:	b5800044 	addi	r22,r22,1
  826b5c:	1813883a 	mov	r9,r3
  826b60:	8021d07a 	srai	r16,r16,1
  826b64:	8c400204 	addi	r17,r17,8
  826b68:	803ff21e 	bne	r16,zero,826b34 <_dtoa_r+0xd18>
  826b6c:	4029883a 	mov	r20,r8
  826b70:	482b883a 	mov	r21,r9
  826b74:	003dca06 	br	8262a0 <_dtoa_r+0x484>
  826b78:	d9000817 	ldw	r4,32(sp)
  826b7c:	2005003a 	cmpeq	r2,r4,zero
  826b80:	1001f61e 	bne	r2,zero,82735c <_dtoa_r+0x1540>
  826b84:	dc001117 	ldw	r16,68(sp)
  826b88:	dc801017 	ldw	r18,64(sp)
  826b8c:	18c10cc4 	addi	r3,r3,1075
  826b90:	003f6106 	br	826918 <_dtoa_r+0xafc>
  826b94:	d8000b15 	stw	zero,44(sp)
  826b98:	d9802617 	ldw	r6,152(sp)
  826b9c:	d8c00d17 	ldw	r3,52(sp)
  826ba0:	30800044 	addi	r2,r6,1
  826ba4:	18ad883a 	add	r22,r3,r2
  826ba8:	b13fffc4 	addi	r4,r22,-1
  826bac:	d9000e15 	stw	r4,56(sp)
  826bb0:	0581f60e 	bge	zero,r22,82738c <_dtoa_r+0x1570>
  826bb4:	dd800f15 	stw	r22,60(sp)
  826bb8:	003f3006 	br	82687c <_dtoa_r+0xa60>
  826bbc:	d8000b15 	stw	zero,44(sp)
  826bc0:	d9002617 	ldw	r4,152(sp)
  826bc4:	0101eb0e 	bge	zero,r4,827374 <_dtoa_r+0x1558>
  826bc8:	202d883a 	mov	r22,r4
  826bcc:	d9000e15 	stw	r4,56(sp)
  826bd0:	d9000f15 	stw	r4,60(sp)
  826bd4:	003f2906 	br	82687c <_dtoa_r+0xa60>
  826bd8:	01800044 	movi	r6,1
  826bdc:	d9800b15 	stw	r6,44(sp)
  826be0:	003ff706 	br	826bc0 <_dtoa_r+0xda4>
  826be4:	01000044 	movi	r4,1
  826be8:	d9000b15 	stw	r4,44(sp)
  826bec:	003fea06 	br	826b98 <_dtoa_r+0xd7c>
  826bf0:	04000c0e 	bge	zero,r16,826c24 <_dtoa_r+0xe08>
  826bf4:	d9400717 	ldw	r5,28(sp)
  826bf8:	d9001617 	ldw	r4,88(sp)
  826bfc:	01800044 	movi	r6,1
  826c00:	08290100 	call	829010 <__lshift>
  826c04:	1009883a 	mov	r4,r2
  826c08:	900b883a 	mov	r5,r18
  826c0c:	d8800715 	stw	r2,28(sp)
  826c10:	08288280 	call	828828 <__mcmp>
  826c14:	0081e00e 	bge	zero,r2,827398 <_dtoa_r+0x157c>
  826c18:	bdc00044 	addi	r23,r23,1
  826c1c:	00800e84 	movi	r2,58
  826c20:	b881a226 	beq	r23,r2,8272ac <_dtoa_r+0x1490>
  826c24:	b7000044 	addi	fp,r22,1
  826c28:	b5c00005 	stb	r23,0(r22)
  826c2c:	003f7406 	br	826a00 <_dtoa_r+0xbe4>
  826c30:	00800e44 	movi	r2,57
  826c34:	b8819d26 	beq	r23,r2,8272ac <_dtoa_r+0x1490>
  826c38:	053ffa0e 	bge	zero,r20,826c24 <_dtoa_r+0xe08>
  826c3c:	8dc00c44 	addi	r23,r17,49
  826c40:	003ff806 	br	826c24 <_dtoa_r+0xe08>
  826c44:	d9001617 	ldw	r4,88(sp)
  826c48:	a80b883a 	mov	r5,r21
  826c4c:	04000044 	movi	r16,1
  826c50:	08286cc0 	call	8286cc <_Bfree>
  826c54:	003edf06 	br	8267d4 <_dtoa_r+0x9b8>
  826c58:	d9001617 	ldw	r4,88(sp)
  826c5c:	980b883a 	mov	r5,r19
  826c60:	01800284 	movi	r6,10
  826c64:	000f883a 	mov	r7,zero
  826c68:	08293800 	call	829380 <__multadd>
  826c6c:	1027883a 	mov	r19,r2
  826c70:	d8800615 	stw	r2,24(sp)
  826c74:	003ebb06 	br	826764 <_dtoa_r+0x948>
  826c78:	d9801117 	ldw	r6,68(sp)
  826c7c:	d8800d17 	ldw	r2,52(sp)
  826c80:	d8000915 	stw	zero,36(sp)
  826c84:	308dc83a 	sub	r6,r6,r2
  826c88:	0087c83a 	sub	r3,zero,r2
  826c8c:	d9801115 	stw	r6,68(sp)
  826c90:	d8c01015 	stw	r3,64(sp)
  826c94:	003cfe06 	br	826090 <_dtoa_r+0x274>
  826c98:	018dc83a 	sub	r6,zero,r6
  826c9c:	d9801115 	stw	r6,68(sp)
  826ca0:	d8000a15 	stw	zero,40(sp)
  826ca4:	003cf306 	br	826074 <_dtoa_r+0x258>
  826ca8:	d9000d17 	ldw	r4,52(sp)
  826cac:	08208500 	call	820850 <__floatsidf>
  826cb0:	880b883a 	mov	r5,r17
  826cb4:	8009883a 	mov	r4,r16
  826cb8:	180f883a 	mov	r7,r3
  826cbc:	100d883a 	mov	r6,r2
  826cc0:	082a8980 	call	82a898 <__nedf2>
  826cc4:	103ce126 	beq	r2,zero,82604c <_dtoa_r+0x230>
  826cc8:	d9800d17 	ldw	r6,52(sp)
  826ccc:	31bfffc4 	addi	r6,r6,-1
  826cd0:	d9800d15 	stw	r6,52(sp)
  826cd4:	003cdd06 	br	82604c <_dtoa_r+0x230>
  826cd8:	d9000717 	ldw	r4,28(sp)
  826cdc:	900b883a 	mov	r5,r18
  826ce0:	08288280 	call	828828 <__mcmp>
  826ce4:	103e8d0e 	bge	r2,zero,82671c <_dtoa_r+0x900>
  826ce8:	d9400717 	ldw	r5,28(sp)
  826cec:	d9001617 	ldw	r4,88(sp)
  826cf0:	01800284 	movi	r6,10
  826cf4:	000f883a 	mov	r7,zero
  826cf8:	08293800 	call	829380 <__multadd>
  826cfc:	d9800d17 	ldw	r6,52(sp)
  826d00:	d8800715 	stw	r2,28(sp)
  826d04:	31bfffc4 	addi	r6,r6,-1
  826d08:	d9800d15 	stw	r6,52(sp)
  826d0c:	b001a71e 	bne	r22,zero,8273ac <_dtoa_r+0x1590>
  826d10:	d8800e17 	ldw	r2,56(sp)
  826d14:	d8800f15 	stw	r2,60(sp)
  826d18:	003e8006 	br	82671c <_dtoa_r+0x900>
  826d1c:	90800417 	ldw	r2,16(r18)
  826d20:	1085883a 	add	r2,r2,r2
  826d24:	1085883a 	add	r2,r2,r2
  826d28:	1485883a 	add	r2,r2,r18
  826d2c:	11000417 	ldw	r4,16(r2)
  826d30:	08286f40 	call	8286f4 <__hi0bits>
  826d34:	00c00804 	movi	r3,32
  826d38:	1887c83a 	sub	r3,r3,r2
  826d3c:	003e5a06 	br	8266a8 <_dtoa_r+0x88c>
  826d40:	d9400717 	ldw	r5,28(sp)
  826d44:	d9801017 	ldw	r6,64(sp)
  826d48:	d9001617 	ldw	r4,88(sp)
  826d4c:	08294800 	call	829480 <__pow5mult>
  826d50:	d8800715 	stw	r2,28(sp)
  826d54:	003e4306 	br	826664 <_dtoa_r+0x848>
  826d58:	d9800f17 	ldw	r6,60(sp)
  826d5c:	d8800d17 	ldw	r2,52(sp)
  826d60:	d9800315 	stw	r6,12(sp)
  826d64:	d8800415 	stw	r2,16(sp)
  826d68:	d8c00b17 	ldw	r3,44(sp)
  826d6c:	1805003a 	cmpeq	r2,r3,zero
  826d70:	1000e21e 	bne	r2,zero,8270fc <_dtoa_r+0x12e0>
  826d74:	d9000317 	ldw	r4,12(sp)
  826d78:	0005883a 	mov	r2,zero
  826d7c:	00cff834 	movhi	r3,16352
  826d80:	200c90fa 	slli	r6,r4,3
  826d84:	01002134 	movhi	r4,132
  826d88:	213b5604 	addi	r4,r4,-4776
  826d8c:	180b883a 	mov	r5,r3
  826d90:	310d883a 	add	r6,r6,r4
  826d94:	327fff17 	ldw	r9,-4(r6)
  826d98:	323ffe17 	ldw	r8,-8(r6)
  826d9c:	1009883a 	mov	r4,r2
  826da0:	480f883a 	mov	r7,r9
  826da4:	400d883a 	mov	r6,r8
  826da8:	08203d80 	call	8203d8 <__divdf3>
  826dac:	180b883a 	mov	r5,r3
  826db0:	b00d883a 	mov	r6,r22
  826db4:	b80f883a 	mov	r7,r23
  826db8:	1009883a 	mov	r4,r2
  826dbc:	081ff200 	call	81ff20 <__subdf3>
  826dc0:	a80b883a 	mov	r5,r21
  826dc4:	a009883a 	mov	r4,r20
  826dc8:	d8c01915 	stw	r3,100(sp)
  826dcc:	d8801815 	stw	r2,96(sp)
  826dd0:	08209480 	call	820948 <__fixdfsi>
  826dd4:	1009883a 	mov	r4,r2
  826dd8:	1027883a 	mov	r19,r2
  826ddc:	08208500 	call	820850 <__floatsidf>
  826de0:	a80b883a 	mov	r5,r21
  826de4:	a009883a 	mov	r4,r20
  826de8:	180f883a 	mov	r7,r3
  826dec:	100d883a 	mov	r6,r2
  826df0:	081ff200 	call	81ff20 <__subdf3>
  826df4:	d9801817 	ldw	r6,96(sp)
  826df8:	1823883a 	mov	r17,r3
  826dfc:	d8801415 	stw	r2,80(sp)
  826e00:	302d883a 	mov	r22,r6
  826e04:	d9800517 	ldw	r6,20(sp)
  826e08:	9cc00c04 	addi	r19,r19,48
  826e0c:	dc401515 	stw	r17,84(sp)
  826e10:	d8c01917 	ldw	r3,100(sp)
  826e14:	34c00005 	stb	r19,0(r6)
  826e18:	d8800517 	ldw	r2,20(sp)
  826e1c:	d9401917 	ldw	r5,100(sp)
  826e20:	d9801417 	ldw	r6,80(sp)
  826e24:	b009883a 	mov	r4,r22
  826e28:	880f883a 	mov	r7,r17
  826e2c:	182f883a 	mov	r23,r3
  826e30:	17000044 	addi	fp,r2,1
  826e34:	08206b80 	call	8206b8 <__gtdf2>
  826e38:	00804e16 	blt	zero,r2,826f74 <_dtoa_r+0x1158>
  826e3c:	d9801417 	ldw	r6,80(sp)
  826e40:	0005883a 	mov	r2,zero
  826e44:	00cffc34 	movhi	r3,16368
  826e48:	180b883a 	mov	r5,r3
  826e4c:	880f883a 	mov	r7,r17
  826e50:	1009883a 	mov	r4,r2
  826e54:	081ff200 	call	81ff20 <__subdf3>
  826e58:	d9401917 	ldw	r5,100(sp)
  826e5c:	180f883a 	mov	r7,r3
  826e60:	b009883a 	mov	r4,r22
  826e64:	100d883a 	mov	r6,r2
  826e68:	08206b80 	call	8206b8 <__gtdf2>
  826e6c:	00bda216 	blt	zero,r2,8264f8 <_dtoa_r+0x6dc>
  826e70:	d8c00317 	ldw	r3,12(sp)
  826e74:	00800044 	movi	r2,1
  826e78:	10c01216 	blt	r2,r3,826ec4 <_dtoa_r+0x10a8>
  826e7c:	003d4506 	br	826394 <_dtoa_r+0x578>
  826e80:	d9801417 	ldw	r6,80(sp)
  826e84:	0005883a 	mov	r2,zero
  826e88:	00cffc34 	movhi	r3,16368
  826e8c:	180b883a 	mov	r5,r3
  826e90:	880f883a 	mov	r7,r17
  826e94:	1009883a 	mov	r4,r2
  826e98:	081ff200 	call	81ff20 <__subdf3>
  826e9c:	d9c01b17 	ldw	r7,108(sp)
  826ea0:	180b883a 	mov	r5,r3
  826ea4:	1009883a 	mov	r4,r2
  826ea8:	b00d883a 	mov	r6,r22
  826eac:	08207c80 	call	8207c8 <__ltdf2>
  826eb0:	103d9116 	blt	r2,zero,8264f8 <_dtoa_r+0x6dc>
  826eb4:	d9800517 	ldw	r6,20(sp)
  826eb8:	d9000317 	ldw	r4,12(sp)
  826ebc:	3105883a 	add	r2,r6,r4
  826ec0:	e0bd3426 	beq	fp,r2,826394 <_dtoa_r+0x578>
  826ec4:	04500934 	movhi	r17,16420
  826ec8:	0021883a 	mov	r16,zero
  826ecc:	b80b883a 	mov	r5,r23
  826ed0:	b009883a 	mov	r4,r22
  826ed4:	800d883a 	mov	r6,r16
  826ed8:	880f883a 	mov	r7,r17
  826edc:	08200140 	call	820014 <__muldf3>
  826ee0:	d9401517 	ldw	r5,84(sp)
  826ee4:	d9001417 	ldw	r4,80(sp)
  826ee8:	880f883a 	mov	r7,r17
  826eec:	000d883a 	mov	r6,zero
  826ef0:	d8801a15 	stw	r2,104(sp)
  826ef4:	d8c01b15 	stw	r3,108(sp)
  826ef8:	08200140 	call	820014 <__muldf3>
  826efc:	180b883a 	mov	r5,r3
  826f00:	1009883a 	mov	r4,r2
  826f04:	1823883a 	mov	r17,r3
  826f08:	1021883a 	mov	r16,r2
  826f0c:	08209480 	call	820948 <__fixdfsi>
  826f10:	1009883a 	mov	r4,r2
  826f14:	102b883a 	mov	r21,r2
  826f18:	08208500 	call	820850 <__floatsidf>
  826f1c:	880b883a 	mov	r5,r17
  826f20:	8009883a 	mov	r4,r16
  826f24:	180f883a 	mov	r7,r3
  826f28:	100d883a 	mov	r6,r2
  826f2c:	081ff200 	call	81ff20 <__subdf3>
  826f30:	1021883a 	mov	r16,r2
  826f34:	d9001b17 	ldw	r4,108(sp)
  826f38:	1823883a 	mov	r17,r3
  826f3c:	dc001415 	stw	r16,80(sp)
  826f40:	ad400c04 	addi	r21,r21,48
  826f44:	dc401515 	stw	r17,84(sp)
  826f48:	d8801a17 	ldw	r2,104(sp)
  826f4c:	e5400005 	stb	r21,0(fp)
  826f50:	202f883a 	mov	r23,r4
  826f54:	d9c01b17 	ldw	r7,108(sp)
  826f58:	d9001417 	ldw	r4,80(sp)
  826f5c:	880b883a 	mov	r5,r17
  826f60:	100d883a 	mov	r6,r2
  826f64:	102d883a 	mov	r22,r2
  826f68:	e7000044 	addi	fp,fp,1
  826f6c:	08207c80 	call	8207c8 <__ltdf2>
  826f70:	103fc30e 	bge	r2,zero,826e80 <_dtoa_r+0x1064>
  826f74:	d9000417 	ldw	r4,16(sp)
  826f78:	d9000d15 	stw	r4,52(sp)
  826f7c:	003d7106 	br	826544 <_dtoa_r+0x728>
  826f80:	d9801717 	ldw	r6,92(sp)
  826f84:	00800084 	movi	r2,2
  826f88:	11bde60e 	bge	r2,r6,826724 <_dtoa_r+0x908>
  826f8c:	203cfb1e 	bne	r4,zero,82637c <_dtoa_r+0x560>
  826f90:	d9001617 	ldw	r4,88(sp)
  826f94:	900b883a 	mov	r5,r18
  826f98:	01800144 	movi	r6,5
  826f9c:	000f883a 	mov	r7,zero
  826fa0:	08293800 	call	829380 <__multadd>
  826fa4:	d9000717 	ldw	r4,28(sp)
  826fa8:	100b883a 	mov	r5,r2
  826fac:	1025883a 	mov	r18,r2
  826fb0:	08288280 	call	828828 <__mcmp>
  826fb4:	00bcf10e 	bge	zero,r2,82637c <_dtoa_r+0x560>
  826fb8:	d8c00d17 	ldw	r3,52(sp)
  826fbc:	d9000517 	ldw	r4,20(sp)
  826fc0:	d8000615 	stw	zero,24(sp)
  826fc4:	18c00044 	addi	r3,r3,1
  826fc8:	d8c00d15 	stw	r3,52(sp)
  826fcc:	00800c44 	movi	r2,49
  826fd0:	27000044 	addi	fp,r4,1
  826fd4:	20800005 	stb	r2,0(r4)
  826fd8:	003e8906 	br	826a00 <_dtoa_r+0xbe4>
  826fdc:	d8c00517 	ldw	r3,20(sp)
  826fe0:	003bc206 	br	825eec <_dtoa_r+0xd0>
  826fe4:	01802134 	movhi	r6,132
  826fe8:	31bb8804 	addi	r6,r6,-4576
  826fec:	30c00917 	ldw	r3,36(r6)
  826ff0:	30800817 	ldw	r2,32(r6)
  826ff4:	d9001217 	ldw	r4,72(sp)
  826ff8:	d9401317 	ldw	r5,76(sp)
  826ffc:	180f883a 	mov	r7,r3
  827000:	100d883a 	mov	r6,r2
  827004:	08203d80 	call	8203d8 <__divdf3>
  827008:	948003cc 	andi	r18,r18,15
  82700c:	058000c4 	movi	r22,3
  827010:	1029883a 	mov	r20,r2
  827014:	182b883a 	mov	r21,r3
  827018:	003c8906 	br	826240 <_dtoa_r+0x424>
  82701c:	d9001017 	ldw	r4,64(sp)
  827020:	d9800917 	ldw	r6,36(sp)
  827024:	0025883a 	mov	r18,zero
  827028:	1105c83a 	sub	r2,r2,r4
  82702c:	2089883a 	add	r4,r4,r2
  827030:	308d883a 	add	r6,r6,r2
  827034:	d9001015 	stw	r4,64(sp)
  827038:	d9800915 	stw	r6,36(sp)
  82703c:	003e3206 	br	826908 <_dtoa_r+0xaec>
  827040:	28800044 	addi	r2,r5,1
  827044:	27000044 	addi	fp,r4,1
  827048:	20800005 	stb	r2,0(r4)
  82704c:	003e6c06 	br	826a00 <_dtoa_r+0xbe4>
  827050:	d8800f17 	ldw	r2,60(sp)
  827054:	00bce016 	blt	zero,r2,8263d8 <_dtoa_r+0x5bc>
  827058:	d9800f17 	ldw	r6,60(sp)
  82705c:	303cc51e 	bne	r6,zero,826374 <_dtoa_r+0x558>
  827060:	0005883a 	mov	r2,zero
  827064:	00d00534 	movhi	r3,16404
  827068:	980b883a 	mov	r5,r19
  82706c:	180f883a 	mov	r7,r3
  827070:	9009883a 	mov	r4,r18
  827074:	100d883a 	mov	r6,r2
  827078:	08200140 	call	820014 <__muldf3>
  82707c:	180b883a 	mov	r5,r3
  827080:	a80f883a 	mov	r7,r21
  827084:	1009883a 	mov	r4,r2
  827088:	a00d883a 	mov	r6,r20
  82708c:	08207400 	call	820740 <__gedf2>
  827090:	103cb80e 	bge	r2,zero,826374 <_dtoa_r+0x558>
  827094:	0027883a 	mov	r19,zero
  827098:	0025883a 	mov	r18,zero
  82709c:	003fc606 	br	826fb8 <_dtoa_r+0x119c>
  8270a0:	99400117 	ldw	r5,4(r19)
  8270a4:	d9001617 	ldw	r4,88(sp)
  8270a8:	0828c4c0 	call	828c4c <_Balloc>
  8270ac:	99800417 	ldw	r6,16(r19)
  8270b0:	11000304 	addi	r4,r2,12
  8270b4:	99400304 	addi	r5,r19,12
  8270b8:	318d883a 	add	r6,r6,r6
  8270bc:	318d883a 	add	r6,r6,r6
  8270c0:	31800204 	addi	r6,r6,8
  8270c4:	1023883a 	mov	r17,r2
  8270c8:	0821e500 	call	821e50 <memcpy>
  8270cc:	d9001617 	ldw	r4,88(sp)
  8270d0:	880b883a 	mov	r5,r17
  8270d4:	01800044 	movi	r6,1
  8270d8:	08290100 	call	829010 <__lshift>
  8270dc:	100b883a 	mov	r5,r2
  8270e0:	003d9c06 	br	826754 <_dtoa_r+0x938>
  8270e4:	00800e44 	movi	r2,57
  8270e8:	b8807026 	beq	r23,r2,8272ac <_dtoa_r+0x1490>
  8270ec:	b8800044 	addi	r2,r23,1
  8270f0:	b7000044 	addi	fp,r22,1
  8270f4:	b0800005 	stb	r2,0(r22)
  8270f8:	003e4106 	br	826a00 <_dtoa_r+0xbe4>
  8270fc:	d8800317 	ldw	r2,12(sp)
  827100:	01802134 	movhi	r6,132
  827104:	31bb5604 	addi	r6,r6,-4776
  827108:	b009883a 	mov	r4,r22
  82710c:	100e90fa 	slli	r7,r2,3
  827110:	b80b883a 	mov	r5,r23
  827114:	398f883a 	add	r7,r7,r6
  827118:	38bffe17 	ldw	r2,-8(r7)
  82711c:	d9800517 	ldw	r6,20(sp)
  827120:	38ffff17 	ldw	r3,-4(r7)
  827124:	37000044 	addi	fp,r6,1
  827128:	180f883a 	mov	r7,r3
  82712c:	100d883a 	mov	r6,r2
  827130:	08200140 	call	820014 <__muldf3>
  827134:	a80b883a 	mov	r5,r21
  827138:	a009883a 	mov	r4,r20
  82713c:	182f883a 	mov	r23,r3
  827140:	102d883a 	mov	r22,r2
  827144:	08209480 	call	820948 <__fixdfsi>
  827148:	1009883a 	mov	r4,r2
  82714c:	1027883a 	mov	r19,r2
  827150:	08208500 	call	820850 <__floatsidf>
  827154:	a80b883a 	mov	r5,r21
  827158:	a009883a 	mov	r4,r20
  82715c:	180f883a 	mov	r7,r3
  827160:	100d883a 	mov	r6,r2
  827164:	081ff200 	call	81ff20 <__subdf3>
  827168:	180b883a 	mov	r5,r3
  82716c:	d8c00517 	ldw	r3,20(sp)
  827170:	9cc00c04 	addi	r19,r19,48
  827174:	1009883a 	mov	r4,r2
  827178:	1cc00005 	stb	r19,0(r3)
  82717c:	2021883a 	mov	r16,r4
  827180:	d9000317 	ldw	r4,12(sp)
  827184:	00800044 	movi	r2,1
  827188:	2823883a 	mov	r17,r5
  82718c:	20802226 	beq	r4,r2,827218 <_dtoa_r+0x13fc>
  827190:	1029883a 	mov	r20,r2
  827194:	0005883a 	mov	r2,zero
  827198:	00d00934 	movhi	r3,16420
  82719c:	180f883a 	mov	r7,r3
  8271a0:	100d883a 	mov	r6,r2
  8271a4:	880b883a 	mov	r5,r17
  8271a8:	8009883a 	mov	r4,r16
  8271ac:	08200140 	call	820014 <__muldf3>
  8271b0:	180b883a 	mov	r5,r3
  8271b4:	1009883a 	mov	r4,r2
  8271b8:	1823883a 	mov	r17,r3
  8271bc:	1021883a 	mov	r16,r2
  8271c0:	08209480 	call	820948 <__fixdfsi>
  8271c4:	1009883a 	mov	r4,r2
  8271c8:	102b883a 	mov	r21,r2
  8271cc:	08208500 	call	820850 <__floatsidf>
  8271d0:	880b883a 	mov	r5,r17
  8271d4:	8009883a 	mov	r4,r16
  8271d8:	180f883a 	mov	r7,r3
  8271dc:	100d883a 	mov	r6,r2
  8271e0:	081ff200 	call	81ff20 <__subdf3>
  8271e4:	180b883a 	mov	r5,r3
  8271e8:	d8c00517 	ldw	r3,20(sp)
  8271ec:	1009883a 	mov	r4,r2
  8271f0:	ad400c04 	addi	r21,r21,48
  8271f4:	1d05883a 	add	r2,r3,r20
  8271f8:	15400005 	stb	r21,0(r2)
  8271fc:	2021883a 	mov	r16,r4
  827200:	d9000317 	ldw	r4,12(sp)
  827204:	a5000044 	addi	r20,r20,1
  827208:	2823883a 	mov	r17,r5
  82720c:	a13fe11e 	bne	r20,r4,827194 <_dtoa_r+0x1378>
  827210:	e505883a 	add	r2,fp,r20
  827214:	173fffc4 	addi	fp,r2,-1
  827218:	0025883a 	mov	r18,zero
  82721c:	04cff834 	movhi	r19,16352
  827220:	b009883a 	mov	r4,r22
  827224:	b80b883a 	mov	r5,r23
  827228:	900d883a 	mov	r6,r18
  82722c:	980f883a 	mov	r7,r19
  827230:	081ffa00 	call	81ffa0 <__adddf3>
  827234:	180b883a 	mov	r5,r3
  827238:	1009883a 	mov	r4,r2
  82723c:	800d883a 	mov	r6,r16
  827240:	880f883a 	mov	r7,r17
  827244:	08207c80 	call	8207c8 <__ltdf2>
  827248:	103cab16 	blt	r2,zero,8264f8 <_dtoa_r+0x6dc>
  82724c:	0009883a 	mov	r4,zero
  827250:	980b883a 	mov	r5,r19
  827254:	b80f883a 	mov	r7,r23
  827258:	b00d883a 	mov	r6,r22
  82725c:	081ff200 	call	81ff20 <__subdf3>
  827260:	180b883a 	mov	r5,r3
  827264:	880f883a 	mov	r7,r17
  827268:	1009883a 	mov	r4,r2
  82726c:	800d883a 	mov	r6,r16
  827270:	08206b80 	call	8206b8 <__gtdf2>
  827274:	00bc470e 	bge	zero,r2,826394 <_dtoa_r+0x578>
  827278:	00c00c04 	movi	r3,48
  82727c:	e73fffc4 	addi	fp,fp,-1
  827280:	e0800007 	ldb	r2,0(fp)
  827284:	10fffd26 	beq	r2,r3,82727c <_dtoa_r+0x1460>
  827288:	d9800417 	ldw	r6,16(sp)
  82728c:	e7000044 	addi	fp,fp,1
  827290:	d9800d15 	stw	r6,52(sp)
  827294:	003cab06 	br	826544 <_dtoa_r+0x728>
  827298:	d8c00f17 	ldw	r3,60(sp)
  82729c:	d9001117 	ldw	r4,68(sp)
  8272a0:	20e1c83a 	sub	r16,r4,r3
  8272a4:	0007883a 	mov	r3,zero
  8272a8:	003d9b06 	br	826918 <_dtoa_r+0xafc>
  8272ac:	00800e44 	movi	r2,57
  8272b0:	b0800005 	stb	r2,0(r22)
  8272b4:	b5800044 	addi	r22,r22,1
  8272b8:	003dc106 	br	8269c0 <_dtoa_r+0xba4>
  8272bc:	05800084 	movi	r22,2
  8272c0:	003bf706 	br	8262a0 <_dtoa_r+0x484>
  8272c4:	d9000f17 	ldw	r4,60(sp)
  8272c8:	013c000e 	bge	zero,r4,8262cc <_dtoa_r+0x4b0>
  8272cc:	d9800e17 	ldw	r6,56(sp)
  8272d0:	01bc300e 	bge	zero,r6,826394 <_dtoa_r+0x578>
  8272d4:	0005883a 	mov	r2,zero
  8272d8:	00d00934 	movhi	r3,16420
  8272dc:	a80b883a 	mov	r5,r21
  8272e0:	180f883a 	mov	r7,r3
  8272e4:	a009883a 	mov	r4,r20
  8272e8:	100d883a 	mov	r6,r2
  8272ec:	08200140 	call	820014 <__muldf3>
  8272f0:	b1000044 	addi	r4,r22,1
  8272f4:	1021883a 	mov	r16,r2
  8272f8:	1823883a 	mov	r17,r3
  8272fc:	08208500 	call	820850 <__floatsidf>
  827300:	880b883a 	mov	r5,r17
  827304:	8009883a 	mov	r4,r16
  827308:	180f883a 	mov	r7,r3
  82730c:	100d883a 	mov	r6,r2
  827310:	08200140 	call	820014 <__muldf3>
  827314:	0011883a 	mov	r8,zero
  827318:	02500734 	movhi	r9,16412
  82731c:	180b883a 	mov	r5,r3
  827320:	480f883a 	mov	r7,r9
  827324:	1009883a 	mov	r4,r2
  827328:	400d883a 	mov	r6,r8
  82732c:	081ffa00 	call	81ffa0 <__adddf3>
  827330:	102d883a 	mov	r22,r2
  827334:	00bf3034 	movhi	r2,64704
  827338:	10ef883a 	add	r23,r2,r3
  82733c:	d8800d17 	ldw	r2,52(sp)
  827340:	d8c00e17 	ldw	r3,56(sp)
  827344:	8029883a 	mov	r20,r16
  827348:	10bfffc4 	addi	r2,r2,-1
  82734c:	882b883a 	mov	r21,r17
  827350:	d8800415 	stw	r2,16(sp)
  827354:	d8c00315 	stw	r3,12(sp)
  827358:	003e8306 	br	826d68 <_dtoa_r+0xf4c>
  82735c:	d8800117 	ldw	r2,4(sp)
  827360:	dc001117 	ldw	r16,68(sp)
  827364:	dc801017 	ldw	r18,64(sp)
  827368:	00c00d84 	movi	r3,54
  82736c:	1887c83a 	sub	r3,r3,r2
  827370:	003d6906 	br	826918 <_dtoa_r+0xafc>
  827374:	01800044 	movi	r6,1
  827378:	3021883a 	mov	r16,r6
  82737c:	d9800f15 	stw	r6,60(sp)
  827380:	d9802615 	stw	r6,152(sp)
  827384:	d9800e15 	stw	r6,56(sp)
  827388:	003b9306 	br	8261d8 <_dtoa_r+0x3bc>
  82738c:	b021883a 	mov	r16,r22
  827390:	dd800f15 	stw	r22,60(sp)
  827394:	003b9006 	br	8261d8 <_dtoa_r+0x3bc>
  827398:	103e221e 	bne	r2,zero,826c24 <_dtoa_r+0xe08>
  82739c:	b880004c 	andi	r2,r23,1
  8273a0:	1005003a 	cmpeq	r2,r2,zero
  8273a4:	103e1f1e 	bne	r2,zero,826c24 <_dtoa_r+0xe08>
  8273a8:	003e1b06 	br	826c18 <_dtoa_r+0xdfc>
  8273ac:	d9001617 	ldw	r4,88(sp)
  8273b0:	980b883a 	mov	r5,r19
  8273b4:	01800284 	movi	r6,10
  8273b8:	000f883a 	mov	r7,zero
  8273bc:	08293800 	call	829380 <__multadd>
  8273c0:	d8c00e17 	ldw	r3,56(sp)
  8273c4:	1027883a 	mov	r19,r2
  8273c8:	d8c00f15 	stw	r3,60(sp)
  8273cc:	003cd306 	br	82671c <_dtoa_r+0x900>

008273d0 <_fflush_r>:
  8273d0:	defffb04 	addi	sp,sp,-20
  8273d4:	dcc00315 	stw	r19,12(sp)
  8273d8:	dc800215 	stw	r18,8(sp)
  8273dc:	dfc00415 	stw	ra,16(sp)
  8273e0:	dc400115 	stw	r17,4(sp)
  8273e4:	dc000015 	stw	r16,0(sp)
  8273e8:	2027883a 	mov	r19,r4
  8273ec:	2825883a 	mov	r18,r5
  8273f0:	20000226 	beq	r4,zero,8273fc <_fflush_r+0x2c>
  8273f4:	20800e17 	ldw	r2,56(r4)
  8273f8:	10005626 	beq	r2,zero,827554 <_fflush_r+0x184>
  8273fc:	9100030b 	ldhu	r4,12(r18)
  827400:	20ffffcc 	andi	r3,r4,65535
  827404:	18e0001c 	xori	r3,r3,32768
  827408:	18e00004 	addi	r3,r3,-32768
  82740c:	1880020c 	andi	r2,r3,8
  827410:	1000261e 	bne	r2,zero,8274ac <_fflush_r+0xdc>
  827414:	90c00117 	ldw	r3,4(r18)
  827418:	20820014 	ori	r2,r4,2048
  82741c:	9080030d 	sth	r2,12(r18)
  827420:	1009883a 	mov	r4,r2
  827424:	00c0400e 	bge	zero,r3,827528 <_fflush_r+0x158>
  827428:	92000a17 	ldw	r8,40(r18)
  82742c:	40004026 	beq	r8,zero,827530 <_fflush_r+0x160>
  827430:	2084000c 	andi	r2,r4,4096
  827434:	10005326 	beq	r2,zero,827584 <_fflush_r+0x1b4>
  827438:	94001417 	ldw	r16,80(r18)
  82743c:	9080030b 	ldhu	r2,12(r18)
  827440:	1080010c 	andi	r2,r2,4
  827444:	1000481e 	bne	r2,zero,827568 <_fflush_r+0x198>
  827448:	91400717 	ldw	r5,28(r18)
  82744c:	9809883a 	mov	r4,r19
  827450:	800d883a 	mov	r6,r16
  827454:	000f883a 	mov	r7,zero
  827458:	403ee83a 	callr	r8
  82745c:	8080261e 	bne	r16,r2,8274f8 <_fflush_r+0x128>
  827460:	9080030b 	ldhu	r2,12(r18)
  827464:	91000417 	ldw	r4,16(r18)
  827468:	90000115 	stw	zero,4(r18)
  82746c:	10bdffcc 	andi	r2,r2,63487
  827470:	10ffffcc 	andi	r3,r2,65535
  827474:	18c4000c 	andi	r3,r3,4096
  827478:	9080030d 	sth	r2,12(r18)
  82747c:	91000015 	stw	r4,0(r18)
  827480:	18002b26 	beq	r3,zero,827530 <_fflush_r+0x160>
  827484:	0007883a 	mov	r3,zero
  827488:	1805883a 	mov	r2,r3
  82748c:	94001415 	stw	r16,80(r18)
  827490:	dfc00417 	ldw	ra,16(sp)
  827494:	dcc00317 	ldw	r19,12(sp)
  827498:	dc800217 	ldw	r18,8(sp)
  82749c:	dc400117 	ldw	r17,4(sp)
  8274a0:	dc000017 	ldw	r16,0(sp)
  8274a4:	dec00504 	addi	sp,sp,20
  8274a8:	f800283a 	ret
  8274ac:	94400417 	ldw	r17,16(r18)
  8274b0:	88001f26 	beq	r17,zero,827530 <_fflush_r+0x160>
  8274b4:	90800017 	ldw	r2,0(r18)
  8274b8:	18c000cc 	andi	r3,r3,3
  8274bc:	94400015 	stw	r17,0(r18)
  8274c0:	1461c83a 	sub	r16,r2,r17
  8274c4:	18002526 	beq	r3,zero,82755c <_fflush_r+0x18c>
  8274c8:	0005883a 	mov	r2,zero
  8274cc:	90800215 	stw	r2,8(r18)
  8274d0:	0400170e 	bge	zero,r16,827530 <_fflush_r+0x160>
  8274d4:	90c00917 	ldw	r3,36(r18)
  8274d8:	91400717 	ldw	r5,28(r18)
  8274dc:	880d883a 	mov	r6,r17
  8274e0:	800f883a 	mov	r7,r16
  8274e4:	9809883a 	mov	r4,r19
  8274e8:	183ee83a 	callr	r3
  8274ec:	88a3883a 	add	r17,r17,r2
  8274f0:	80a1c83a 	sub	r16,r16,r2
  8274f4:	00bff616 	blt	zero,r2,8274d0 <_fflush_r+0x100>
  8274f8:	9080030b 	ldhu	r2,12(r18)
  8274fc:	00ffffc4 	movi	r3,-1
  827500:	10801014 	ori	r2,r2,64
  827504:	9080030d 	sth	r2,12(r18)
  827508:	1805883a 	mov	r2,r3
  82750c:	dfc00417 	ldw	ra,16(sp)
  827510:	dcc00317 	ldw	r19,12(sp)
  827514:	dc800217 	ldw	r18,8(sp)
  827518:	dc400117 	ldw	r17,4(sp)
  82751c:	dc000017 	ldw	r16,0(sp)
  827520:	dec00504 	addi	sp,sp,20
  827524:	f800283a 	ret
  827528:	90800f17 	ldw	r2,60(r18)
  82752c:	00bfbe16 	blt	zero,r2,827428 <_fflush_r+0x58>
  827530:	0007883a 	mov	r3,zero
  827534:	1805883a 	mov	r2,r3
  827538:	dfc00417 	ldw	ra,16(sp)
  82753c:	dcc00317 	ldw	r19,12(sp)
  827540:	dc800217 	ldw	r18,8(sp)
  827544:	dc400117 	ldw	r17,4(sp)
  827548:	dc000017 	ldw	r16,0(sp)
  82754c:	dec00504 	addi	sp,sp,20
  827550:	f800283a 	ret
  827554:	08276680 	call	827668 <__sinit>
  827558:	003fa806 	br	8273fc <_fflush_r+0x2c>
  82755c:	90800517 	ldw	r2,20(r18)
  827560:	90800215 	stw	r2,8(r18)
  827564:	003fda06 	br	8274d0 <_fflush_r+0x100>
  827568:	90800117 	ldw	r2,4(r18)
  82756c:	90c00c17 	ldw	r3,48(r18)
  827570:	80a1c83a 	sub	r16,r16,r2
  827574:	183fb426 	beq	r3,zero,827448 <_fflush_r+0x78>
  827578:	90800f17 	ldw	r2,60(r18)
  82757c:	80a1c83a 	sub	r16,r16,r2
  827580:	003fb106 	br	827448 <_fflush_r+0x78>
  827584:	91400717 	ldw	r5,28(r18)
  827588:	9809883a 	mov	r4,r19
  82758c:	000d883a 	mov	r6,zero
  827590:	01c00044 	movi	r7,1
  827594:	403ee83a 	callr	r8
  827598:	1021883a 	mov	r16,r2
  82759c:	00bfffc4 	movi	r2,-1
  8275a0:	80800226 	beq	r16,r2,8275ac <_fflush_r+0x1dc>
  8275a4:	92000a17 	ldw	r8,40(r18)
  8275a8:	003fa406 	br	82743c <_fflush_r+0x6c>
  8275ac:	98c00017 	ldw	r3,0(r19)
  8275b0:	00800744 	movi	r2,29
  8275b4:	18bfde26 	beq	r3,r2,827530 <_fflush_r+0x160>
  8275b8:	9080030b 	ldhu	r2,12(r18)
  8275bc:	8007883a 	mov	r3,r16
  8275c0:	10801014 	ori	r2,r2,64
  8275c4:	9080030d 	sth	r2,12(r18)
  8275c8:	003fcf06 	br	827508 <_fflush_r+0x138>

008275cc <fflush>:
  8275cc:	014020b4 	movhi	r5,130
  8275d0:	295cf404 	addi	r5,r5,29648
  8275d4:	2007883a 	mov	r3,r4
  8275d8:	20000526 	beq	r4,zero,8275f0 <fflush+0x24>
  8275dc:	00802134 	movhi	r2,132
  8275e0:	1082e104 	addi	r2,r2,2948
  8275e4:	11000017 	ldw	r4,0(r2)
  8275e8:	180b883a 	mov	r5,r3
  8275ec:	08273d01 	jmpi	8273d0 <_fflush_r>
  8275f0:	00802134 	movhi	r2,132
  8275f4:	1082e204 	addi	r2,r2,2952
  8275f8:	11000017 	ldw	r4,0(r2)
  8275fc:	082819c1 	jmpi	82819c <_fwalk_reent>

00827600 <std>:
  827600:	008020f4 	movhi	r2,131
  827604:	10a5c004 	addi	r2,r2,-26880
  827608:	20800b15 	stw	r2,44(r4)
  82760c:	008020f4 	movhi	r2,131
  827610:	10a5fb04 	addi	r2,r2,-26644
  827614:	20800815 	stw	r2,32(r4)
  827618:	00c020f4 	movhi	r3,131
  82761c:	18e5dc04 	addi	r3,r3,-26768
  827620:	008020f4 	movhi	r2,131
  827624:	10a5c204 	addi	r2,r2,-26872
  827628:	2140030d 	sth	r5,12(r4)
  82762c:	2180038d 	sth	r6,14(r4)
  827630:	20c00915 	stw	r3,36(r4)
  827634:	20800a15 	stw	r2,40(r4)
  827638:	20000015 	stw	zero,0(r4)
  82763c:	20000115 	stw	zero,4(r4)
  827640:	20000215 	stw	zero,8(r4)
  827644:	20000415 	stw	zero,16(r4)
  827648:	20000515 	stw	zero,20(r4)
  82764c:	20000615 	stw	zero,24(r4)
  827650:	21000715 	stw	r4,28(r4)
  827654:	f800283a 	ret

00827658 <__sfp_lock_acquire>:
  827658:	f800283a 	ret

0082765c <__sfp_lock_release>:
  82765c:	f800283a 	ret

00827660 <__sinit_lock_acquire>:
  827660:	f800283a 	ret

00827664 <__sinit_lock_release>:
  827664:	f800283a 	ret

00827668 <__sinit>:
  827668:	20800e17 	ldw	r2,56(r4)
  82766c:	defffd04 	addi	sp,sp,-12
  827670:	dc400115 	stw	r17,4(sp)
  827674:	dc000015 	stw	r16,0(sp)
  827678:	dfc00215 	stw	ra,8(sp)
  82767c:	04400044 	movi	r17,1
  827680:	01400104 	movi	r5,4
  827684:	000d883a 	mov	r6,zero
  827688:	2021883a 	mov	r16,r4
  82768c:	2200bb04 	addi	r8,r4,748
  827690:	200f883a 	mov	r7,r4
  827694:	10000526 	beq	r2,zero,8276ac <__sinit+0x44>
  827698:	dfc00217 	ldw	ra,8(sp)
  82769c:	dc400117 	ldw	r17,4(sp)
  8276a0:	dc000017 	ldw	r16,0(sp)
  8276a4:	dec00304 	addi	sp,sp,12
  8276a8:	f800283a 	ret
  8276ac:	21000117 	ldw	r4,4(r4)
  8276b0:	008020b4 	movhi	r2,130
  8276b4:	109dd304 	addi	r2,r2,30540
  8276b8:	00c000c4 	movi	r3,3
  8276bc:	80800f15 	stw	r2,60(r16)
  8276c0:	80c0b915 	stw	r3,740(r16)
  8276c4:	8200ba15 	stw	r8,744(r16)
  8276c8:	84400e15 	stw	r17,56(r16)
  8276cc:	8000b815 	stw	zero,736(r16)
  8276d0:	08276000 	call	827600 <std>
  8276d4:	81000217 	ldw	r4,8(r16)
  8276d8:	880d883a 	mov	r6,r17
  8276dc:	800f883a 	mov	r7,r16
  8276e0:	01400284 	movi	r5,10
  8276e4:	08276000 	call	827600 <std>
  8276e8:	81000317 	ldw	r4,12(r16)
  8276ec:	800f883a 	mov	r7,r16
  8276f0:	01400484 	movi	r5,18
  8276f4:	01800084 	movi	r6,2
  8276f8:	dfc00217 	ldw	ra,8(sp)
  8276fc:	dc400117 	ldw	r17,4(sp)
  827700:	dc000017 	ldw	r16,0(sp)
  827704:	dec00304 	addi	sp,sp,12
  827708:	08276001 	jmpi	827600 <std>

0082770c <__fp_lock>:
  82770c:	0005883a 	mov	r2,zero
  827710:	f800283a 	ret

00827714 <__fp_unlock>:
  827714:	0005883a 	mov	r2,zero
  827718:	f800283a 	ret

0082771c <__fp_unlock_all>:
  82771c:	00802134 	movhi	r2,132
  827720:	1082e104 	addi	r2,r2,2948
  827724:	11000017 	ldw	r4,0(r2)
  827728:	014020b4 	movhi	r5,130
  82772c:	295dc504 	addi	r5,r5,30484
  827730:	08282641 	jmpi	828264 <_fwalk>

00827734 <__fp_lock_all>:
  827734:	00802134 	movhi	r2,132
  827738:	1082e104 	addi	r2,r2,2948
  82773c:	11000017 	ldw	r4,0(r2)
  827740:	014020b4 	movhi	r5,130
  827744:	295dc304 	addi	r5,r5,30476
  827748:	08282641 	jmpi	828264 <_fwalk>

0082774c <_cleanup_r>:
  82774c:	014020f4 	movhi	r5,131
  827750:	2966c904 	addi	r5,r5,-25820
  827754:	08282641 	jmpi	828264 <_fwalk>

00827758 <_cleanup>:
  827758:	00802134 	movhi	r2,132
  82775c:	1082e204 	addi	r2,r2,2952
  827760:	11000017 	ldw	r4,0(r2)
  827764:	082774c1 	jmpi	82774c <_cleanup_r>

00827768 <__sfmoreglue>:
  827768:	defffc04 	addi	sp,sp,-16
  82776c:	dc400115 	stw	r17,4(sp)
  827770:	2c401724 	muli	r17,r5,92
  827774:	dc800215 	stw	r18,8(sp)
  827778:	2825883a 	mov	r18,r5
  82777c:	89400304 	addi	r5,r17,12
  827780:	dc000015 	stw	r16,0(sp)
  827784:	dfc00315 	stw	ra,12(sp)
  827788:	08217100 	call	821710 <_malloc_r>
  82778c:	0021883a 	mov	r16,zero
  827790:	880d883a 	mov	r6,r17
  827794:	000b883a 	mov	r5,zero
  827798:	10000626 	beq	r2,zero,8277b4 <__sfmoreglue+0x4c>
  82779c:	11000304 	addi	r4,r2,12
  8277a0:	14800115 	stw	r18,4(r2)
  8277a4:	10000015 	stw	zero,0(r2)
  8277a8:	11000215 	stw	r4,8(r2)
  8277ac:	1021883a 	mov	r16,r2
  8277b0:	0821fd00 	call	821fd0 <memset>
  8277b4:	8005883a 	mov	r2,r16
  8277b8:	dfc00317 	ldw	ra,12(sp)
  8277bc:	dc800217 	ldw	r18,8(sp)
  8277c0:	dc400117 	ldw	r17,4(sp)
  8277c4:	dc000017 	ldw	r16,0(sp)
  8277c8:	dec00404 	addi	sp,sp,16
  8277cc:	f800283a 	ret

008277d0 <__sfp>:
  8277d0:	defffd04 	addi	sp,sp,-12
  8277d4:	00802134 	movhi	r2,132
  8277d8:	1082e204 	addi	r2,r2,2952
  8277dc:	dc000015 	stw	r16,0(sp)
  8277e0:	14000017 	ldw	r16,0(r2)
  8277e4:	dc400115 	stw	r17,4(sp)
  8277e8:	dfc00215 	stw	ra,8(sp)
  8277ec:	80800e17 	ldw	r2,56(r16)
  8277f0:	2023883a 	mov	r17,r4
  8277f4:	10002626 	beq	r2,zero,827890 <__sfp+0xc0>
  8277f8:	8400b804 	addi	r16,r16,736
  8277fc:	80800117 	ldw	r2,4(r16)
  827800:	81000217 	ldw	r4,8(r16)
  827804:	10ffffc4 	addi	r3,r2,-1
  827808:	18000916 	blt	r3,zero,827830 <__sfp+0x60>
  82780c:	2080030f 	ldh	r2,12(r4)
  827810:	10000b26 	beq	r2,zero,827840 <__sfp+0x70>
  827814:	017fffc4 	movi	r5,-1
  827818:	00000206 	br	827824 <__sfp+0x54>
  82781c:	2080030f 	ldh	r2,12(r4)
  827820:	10000726 	beq	r2,zero,827840 <__sfp+0x70>
  827824:	18ffffc4 	addi	r3,r3,-1
  827828:	21001704 	addi	r4,r4,92
  82782c:	197ffb1e 	bne	r3,r5,82781c <__sfp+0x4c>
  827830:	80800017 	ldw	r2,0(r16)
  827834:	10001926 	beq	r2,zero,82789c <__sfp+0xcc>
  827838:	1021883a 	mov	r16,r2
  82783c:	003fef06 	br	8277fc <__sfp+0x2c>
  827840:	00bfffc4 	movi	r2,-1
  827844:	00c00044 	movi	r3,1
  827848:	2080038d 	sth	r2,14(r4)
  82784c:	20c0030d 	sth	r3,12(r4)
  827850:	20000015 	stw	zero,0(r4)
  827854:	20000215 	stw	zero,8(r4)
  827858:	20000115 	stw	zero,4(r4)
  82785c:	20000415 	stw	zero,16(r4)
  827860:	20000515 	stw	zero,20(r4)
  827864:	20000615 	stw	zero,24(r4)
  827868:	20000c15 	stw	zero,48(r4)
  82786c:	20000d15 	stw	zero,52(r4)
  827870:	20001115 	stw	zero,68(r4)
  827874:	20001215 	stw	zero,72(r4)
  827878:	2005883a 	mov	r2,r4
  82787c:	dfc00217 	ldw	ra,8(sp)
  827880:	dc400117 	ldw	r17,4(sp)
  827884:	dc000017 	ldw	r16,0(sp)
  827888:	dec00304 	addi	sp,sp,12
  82788c:	f800283a 	ret
  827890:	8009883a 	mov	r4,r16
  827894:	08276680 	call	827668 <__sinit>
  827898:	003fd706 	br	8277f8 <__sfp+0x28>
  82789c:	8809883a 	mov	r4,r17
  8278a0:	01400104 	movi	r5,4
  8278a4:	08277680 	call	827768 <__sfmoreglue>
  8278a8:	80800015 	stw	r2,0(r16)
  8278ac:	103fe21e 	bne	r2,zero,827838 <__sfp+0x68>
  8278b0:	00800304 	movi	r2,12
  8278b4:	0009883a 	mov	r4,zero
  8278b8:	88800015 	stw	r2,0(r17)
  8278bc:	003fee06 	br	827878 <__sfp+0xa8>

008278c0 <_malloc_trim_r>:
  8278c0:	defffb04 	addi	sp,sp,-20
  8278c4:	dcc00315 	stw	r19,12(sp)
  8278c8:	04c02134 	movhi	r19,132
  8278cc:	9cfcf104 	addi	r19,r19,-3132
  8278d0:	dc800215 	stw	r18,8(sp)
  8278d4:	dc400115 	stw	r17,4(sp)
  8278d8:	dc000015 	stw	r16,0(sp)
  8278dc:	2823883a 	mov	r17,r5
  8278e0:	2025883a 	mov	r18,r4
  8278e4:	dfc00415 	stw	ra,16(sp)
  8278e8:	082b0fc0 	call	82b0fc <__malloc_lock>
  8278ec:	98800217 	ldw	r2,8(r19)
  8278f0:	9009883a 	mov	r4,r18
  8278f4:	000b883a 	mov	r5,zero
  8278f8:	10c00117 	ldw	r3,4(r2)
  8278fc:	00bfff04 	movi	r2,-4
  827900:	18a0703a 	and	r16,r3,r2
  827904:	8463c83a 	sub	r17,r16,r17
  827908:	8c43fbc4 	addi	r17,r17,4079
  82790c:	8822d33a 	srli	r17,r17,12
  827910:	0083ffc4 	movi	r2,4095
  827914:	8c7fffc4 	addi	r17,r17,-1
  827918:	8822933a 	slli	r17,r17,12
  82791c:	1440060e 	bge	r2,r17,827938 <_malloc_trim_r+0x78>
  827920:	08227a40 	call	8227a4 <_sbrk_r>
  827924:	98c00217 	ldw	r3,8(r19)
  827928:	9009883a 	mov	r4,r18
  82792c:	044bc83a 	sub	r5,zero,r17
  827930:	80c7883a 	add	r3,r16,r3
  827934:	10c00926 	beq	r2,r3,82795c <_malloc_trim_r+0x9c>
  827938:	082b1000 	call	82b100 <__malloc_unlock>
  82793c:	0005883a 	mov	r2,zero
  827940:	dfc00417 	ldw	ra,16(sp)
  827944:	dcc00317 	ldw	r19,12(sp)
  827948:	dc800217 	ldw	r18,8(sp)
  82794c:	dc400117 	ldw	r17,4(sp)
  827950:	dc000017 	ldw	r16,0(sp)
  827954:	dec00504 	addi	sp,sp,20
  827958:	f800283a 	ret
  82795c:	9009883a 	mov	r4,r18
  827960:	08227a40 	call	8227a4 <_sbrk_r>
  827964:	844dc83a 	sub	r6,r16,r17
  827968:	00ffffc4 	movi	r3,-1
  82796c:	9009883a 	mov	r4,r18
  827970:	000b883a 	mov	r5,zero
  827974:	01c02134 	movhi	r7,132
  827978:	39ca5804 	addi	r7,r7,10592
  82797c:	31800054 	ori	r6,r6,1
  827980:	10c00926 	beq	r2,r3,8279a8 <_malloc_trim_r+0xe8>
  827984:	38800017 	ldw	r2,0(r7)
  827988:	98c00217 	ldw	r3,8(r19)
  82798c:	9009883a 	mov	r4,r18
  827990:	1445c83a 	sub	r2,r2,r17
  827994:	38800015 	stw	r2,0(r7)
  827998:	19800115 	stw	r6,4(r3)
  82799c:	082b1000 	call	82b100 <__malloc_unlock>
  8279a0:	00800044 	movi	r2,1
  8279a4:	003fe606 	br	827940 <_malloc_trim_r+0x80>
  8279a8:	08227a40 	call	8227a4 <_sbrk_r>
  8279ac:	99800217 	ldw	r6,8(r19)
  8279b0:	100f883a 	mov	r7,r2
  8279b4:	9009883a 	mov	r4,r18
  8279b8:	1187c83a 	sub	r3,r2,r6
  8279bc:	008003c4 	movi	r2,15
  8279c0:	19400054 	ori	r5,r3,1
  8279c4:	10ffdc0e 	bge	r2,r3,827938 <_malloc_trim_r+0x78>
  8279c8:	00802134 	movhi	r2,132
  8279cc:	1082e404 	addi	r2,r2,2960
  8279d0:	10c00017 	ldw	r3,0(r2)
  8279d4:	00802134 	movhi	r2,132
  8279d8:	108a5804 	addi	r2,r2,10592
  8279dc:	31400115 	stw	r5,4(r6)
  8279e0:	38c7c83a 	sub	r3,r7,r3
  8279e4:	10c00015 	stw	r3,0(r2)
  8279e8:	003fd306 	br	827938 <_malloc_trim_r+0x78>

008279ec <_free_r>:
  8279ec:	defffd04 	addi	sp,sp,-12
  8279f0:	dc400115 	stw	r17,4(sp)
  8279f4:	dc000015 	stw	r16,0(sp)
  8279f8:	dfc00215 	stw	ra,8(sp)
  8279fc:	2821883a 	mov	r16,r5
  827a00:	2023883a 	mov	r17,r4
  827a04:	28005a26 	beq	r5,zero,827b70 <_free_r+0x184>
  827a08:	082b0fc0 	call	82b0fc <__malloc_lock>
  827a0c:	823ffe04 	addi	r8,r16,-8
  827a10:	41400117 	ldw	r5,4(r8)
  827a14:	00bfff84 	movi	r2,-2
  827a18:	02802134 	movhi	r10,132
  827a1c:	52bcf104 	addi	r10,r10,-3132
  827a20:	288e703a 	and	r7,r5,r2
  827a24:	41cd883a 	add	r6,r8,r7
  827a28:	30c00117 	ldw	r3,4(r6)
  827a2c:	51000217 	ldw	r4,8(r10)
  827a30:	00bfff04 	movi	r2,-4
  827a34:	1892703a 	and	r9,r3,r2
  827a38:	5017883a 	mov	r11,r10
  827a3c:	31006726 	beq	r6,r4,827bdc <_free_r+0x1f0>
  827a40:	2880004c 	andi	r2,r5,1
  827a44:	1005003a 	cmpeq	r2,r2,zero
  827a48:	32400115 	stw	r9,4(r6)
  827a4c:	10001a1e 	bne	r2,zero,827ab8 <_free_r+0xcc>
  827a50:	000b883a 	mov	r5,zero
  827a54:	3247883a 	add	r3,r6,r9
  827a58:	18800117 	ldw	r2,4(r3)
  827a5c:	1080004c 	andi	r2,r2,1
  827a60:	1000231e 	bne	r2,zero,827af0 <_free_r+0x104>
  827a64:	280ac03a 	cmpne	r5,r5,zero
  827a68:	3a4f883a 	add	r7,r7,r9
  827a6c:	2800451e 	bne	r5,zero,827b84 <_free_r+0x198>
  827a70:	31000217 	ldw	r4,8(r6)
  827a74:	00802134 	movhi	r2,132
  827a78:	10bcf304 	addi	r2,r2,-3124
  827a7c:	20807b26 	beq	r4,r2,827c6c <_free_r+0x280>
  827a80:	30800317 	ldw	r2,12(r6)
  827a84:	3a07883a 	add	r3,r7,r8
  827a88:	19c00015 	stw	r7,0(r3)
  827a8c:	11000215 	stw	r4,8(r2)
  827a90:	20800315 	stw	r2,12(r4)
  827a94:	38800054 	ori	r2,r7,1
  827a98:	40800115 	stw	r2,4(r8)
  827a9c:	28001a26 	beq	r5,zero,827b08 <_free_r+0x11c>
  827aa0:	8809883a 	mov	r4,r17
  827aa4:	dfc00217 	ldw	ra,8(sp)
  827aa8:	dc400117 	ldw	r17,4(sp)
  827aac:	dc000017 	ldw	r16,0(sp)
  827ab0:	dec00304 	addi	sp,sp,12
  827ab4:	082b1001 	jmpi	82b100 <__malloc_unlock>
  827ab8:	80bffe17 	ldw	r2,-8(r16)
  827abc:	50c00204 	addi	r3,r10,8
  827ac0:	4091c83a 	sub	r8,r8,r2
  827ac4:	41000217 	ldw	r4,8(r8)
  827ac8:	388f883a 	add	r7,r7,r2
  827acc:	20c06126 	beq	r4,r3,827c54 <_free_r+0x268>
  827ad0:	40800317 	ldw	r2,12(r8)
  827ad4:	3247883a 	add	r3,r6,r9
  827ad8:	000b883a 	mov	r5,zero
  827adc:	11000215 	stw	r4,8(r2)
  827ae0:	20800315 	stw	r2,12(r4)
  827ae4:	18800117 	ldw	r2,4(r3)
  827ae8:	1080004c 	andi	r2,r2,1
  827aec:	103fdd26 	beq	r2,zero,827a64 <_free_r+0x78>
  827af0:	38800054 	ori	r2,r7,1
  827af4:	3a07883a 	add	r3,r7,r8
  827af8:	280ac03a 	cmpne	r5,r5,zero
  827afc:	40800115 	stw	r2,4(r8)
  827b00:	19c00015 	stw	r7,0(r3)
  827b04:	283fe61e 	bne	r5,zero,827aa0 <_free_r+0xb4>
  827b08:	00807fc4 	movi	r2,511
  827b0c:	11c01f2e 	bgeu	r2,r7,827b8c <_free_r+0x1a0>
  827b10:	3806d27a 	srli	r3,r7,9
  827b14:	1800481e 	bne	r3,zero,827c38 <_free_r+0x24c>
  827b18:	3804d0fa 	srli	r2,r7,3
  827b1c:	100690fa 	slli	r3,r2,3
  827b20:	1acd883a 	add	r6,r3,r11
  827b24:	31400217 	ldw	r5,8(r6)
  827b28:	31405926 	beq	r6,r5,827c90 <_free_r+0x2a4>
  827b2c:	28800117 	ldw	r2,4(r5)
  827b30:	00ffff04 	movi	r3,-4
  827b34:	10c4703a 	and	r2,r2,r3
  827b38:	3880022e 	bgeu	r7,r2,827b44 <_free_r+0x158>
  827b3c:	29400217 	ldw	r5,8(r5)
  827b40:	317ffa1e 	bne	r6,r5,827b2c <_free_r+0x140>
  827b44:	29800317 	ldw	r6,12(r5)
  827b48:	41800315 	stw	r6,12(r8)
  827b4c:	41400215 	stw	r5,8(r8)
  827b50:	8809883a 	mov	r4,r17
  827b54:	2a000315 	stw	r8,12(r5)
  827b58:	32000215 	stw	r8,8(r6)
  827b5c:	dfc00217 	ldw	ra,8(sp)
  827b60:	dc400117 	ldw	r17,4(sp)
  827b64:	dc000017 	ldw	r16,0(sp)
  827b68:	dec00304 	addi	sp,sp,12
  827b6c:	082b1001 	jmpi	82b100 <__malloc_unlock>
  827b70:	dfc00217 	ldw	ra,8(sp)
  827b74:	dc400117 	ldw	r17,4(sp)
  827b78:	dc000017 	ldw	r16,0(sp)
  827b7c:	dec00304 	addi	sp,sp,12
  827b80:	f800283a 	ret
  827b84:	31000217 	ldw	r4,8(r6)
  827b88:	003fbd06 	br	827a80 <_free_r+0x94>
  827b8c:	3806d0fa 	srli	r3,r7,3
  827b90:	00800044 	movi	r2,1
  827b94:	51400117 	ldw	r5,4(r10)
  827b98:	180890fa 	slli	r4,r3,3
  827b9c:	1807d0ba 	srai	r3,r3,2
  827ba0:	22c9883a 	add	r4,r4,r11
  827ba4:	21800217 	ldw	r6,8(r4)
  827ba8:	10c4983a 	sll	r2,r2,r3
  827bac:	41000315 	stw	r4,12(r8)
  827bb0:	41800215 	stw	r6,8(r8)
  827bb4:	288ab03a 	or	r5,r5,r2
  827bb8:	22000215 	stw	r8,8(r4)
  827bbc:	8809883a 	mov	r4,r17
  827bc0:	51400115 	stw	r5,4(r10)
  827bc4:	32000315 	stw	r8,12(r6)
  827bc8:	dfc00217 	ldw	ra,8(sp)
  827bcc:	dc400117 	ldw	r17,4(sp)
  827bd0:	dc000017 	ldw	r16,0(sp)
  827bd4:	dec00304 	addi	sp,sp,12
  827bd8:	082b1001 	jmpi	82b100 <__malloc_unlock>
  827bdc:	2880004c 	andi	r2,r5,1
  827be0:	3a4d883a 	add	r6,r7,r9
  827be4:	1000071e 	bne	r2,zero,827c04 <_free_r+0x218>
  827be8:	80bffe17 	ldw	r2,-8(r16)
  827bec:	4091c83a 	sub	r8,r8,r2
  827bf0:	41000317 	ldw	r4,12(r8)
  827bf4:	40c00217 	ldw	r3,8(r8)
  827bf8:	308d883a 	add	r6,r6,r2
  827bfc:	20c00215 	stw	r3,8(r4)
  827c00:	19000315 	stw	r4,12(r3)
  827c04:	00802134 	movhi	r2,132
  827c08:	1082e304 	addi	r2,r2,2956
  827c0c:	11000017 	ldw	r4,0(r2)
  827c10:	30c00054 	ori	r3,r6,1
  827c14:	52000215 	stw	r8,8(r10)
  827c18:	40c00115 	stw	r3,4(r8)
  827c1c:	313fa036 	bltu	r6,r4,827aa0 <_free_r+0xb4>
  827c20:	00802134 	movhi	r2,132
  827c24:	108a3e04 	addi	r2,r2,10488
  827c28:	11400017 	ldw	r5,0(r2)
  827c2c:	8809883a 	mov	r4,r17
  827c30:	08278c00 	call	8278c0 <_malloc_trim_r>
  827c34:	003f9a06 	br	827aa0 <_free_r+0xb4>
  827c38:	00800104 	movi	r2,4
  827c3c:	10c0072e 	bgeu	r2,r3,827c5c <_free_r+0x270>
  827c40:	00800504 	movi	r2,20
  827c44:	10c01936 	bltu	r2,r3,827cac <_free_r+0x2c0>
  827c48:	188016c4 	addi	r2,r3,91
  827c4c:	100690fa 	slli	r3,r2,3
  827c50:	003fb306 	br	827b20 <_free_r+0x134>
  827c54:	01400044 	movi	r5,1
  827c58:	003f7e06 	br	827a54 <_free_r+0x68>
  827c5c:	3804d1ba 	srli	r2,r7,6
  827c60:	10800e04 	addi	r2,r2,56
  827c64:	100690fa 	slli	r3,r2,3
  827c68:	003fad06 	br	827b20 <_free_r+0x134>
  827c6c:	22000315 	stw	r8,12(r4)
  827c70:	22000215 	stw	r8,8(r4)
  827c74:	3a05883a 	add	r2,r7,r8
  827c78:	38c00054 	ori	r3,r7,1
  827c7c:	11c00015 	stw	r7,0(r2)
  827c80:	41000215 	stw	r4,8(r8)
  827c84:	40c00115 	stw	r3,4(r8)
  827c88:	41000315 	stw	r4,12(r8)
  827c8c:	003f8406 	br	827aa0 <_free_r+0xb4>
  827c90:	1005d0ba 	srai	r2,r2,2
  827c94:	00c00044 	movi	r3,1
  827c98:	51000117 	ldw	r4,4(r10)
  827c9c:	1886983a 	sll	r3,r3,r2
  827ca0:	20c8b03a 	or	r4,r4,r3
  827ca4:	51000115 	stw	r4,4(r10)
  827ca8:	003fa706 	br	827b48 <_free_r+0x15c>
  827cac:	00801504 	movi	r2,84
  827cb0:	10c00436 	bltu	r2,r3,827cc4 <_free_r+0x2d8>
  827cb4:	3804d33a 	srli	r2,r7,12
  827cb8:	10801b84 	addi	r2,r2,110
  827cbc:	100690fa 	slli	r3,r2,3
  827cc0:	003f9706 	br	827b20 <_free_r+0x134>
  827cc4:	00805504 	movi	r2,340
  827cc8:	10c00436 	bltu	r2,r3,827cdc <_free_r+0x2f0>
  827ccc:	3804d3fa 	srli	r2,r7,15
  827cd0:	10801dc4 	addi	r2,r2,119
  827cd4:	100690fa 	slli	r3,r2,3
  827cd8:	003f9106 	br	827b20 <_free_r+0x134>
  827cdc:	00815504 	movi	r2,1364
  827ce0:	10c0032e 	bgeu	r2,r3,827cf0 <_free_r+0x304>
  827ce4:	00801f84 	movi	r2,126
  827ce8:	00c0fc04 	movi	r3,1008
  827cec:	003f8c06 	br	827b20 <_free_r+0x134>
  827cf0:	3804d4ba 	srli	r2,r7,18
  827cf4:	10801f04 	addi	r2,r2,124
  827cf8:	100690fa 	slli	r3,r2,3
  827cfc:	003f8806 	br	827b20 <_free_r+0x134>

00827d00 <__sfvwrite_r>:
  827d00:	30800217 	ldw	r2,8(r6)
  827d04:	defff504 	addi	sp,sp,-44
  827d08:	df000915 	stw	fp,36(sp)
  827d0c:	dd800715 	stw	r22,28(sp)
  827d10:	dc800315 	stw	r18,12(sp)
  827d14:	dfc00a15 	stw	ra,40(sp)
  827d18:	ddc00815 	stw	r23,32(sp)
  827d1c:	dd400615 	stw	r21,24(sp)
  827d20:	dd000515 	stw	r20,20(sp)
  827d24:	dcc00415 	stw	r19,16(sp)
  827d28:	dc400215 	stw	r17,8(sp)
  827d2c:	dc000115 	stw	r16,4(sp)
  827d30:	302d883a 	mov	r22,r6
  827d34:	2039883a 	mov	fp,r4
  827d38:	2825883a 	mov	r18,r5
  827d3c:	10001c26 	beq	r2,zero,827db0 <__sfvwrite_r+0xb0>
  827d40:	29c0030b 	ldhu	r7,12(r5)
  827d44:	3880020c 	andi	r2,r7,8
  827d48:	10002726 	beq	r2,zero,827de8 <__sfvwrite_r+0xe8>
  827d4c:	28800417 	ldw	r2,16(r5)
  827d50:	10002526 	beq	r2,zero,827de8 <__sfvwrite_r+0xe8>
  827d54:	3880008c 	andi	r2,r7,2
  827d58:	b5400017 	ldw	r21,0(r22)
  827d5c:	10002826 	beq	r2,zero,827e00 <__sfvwrite_r+0x100>
  827d60:	0021883a 	mov	r16,zero
  827d64:	0023883a 	mov	r17,zero
  827d68:	880d883a 	mov	r6,r17
  827d6c:	e009883a 	mov	r4,fp
  827d70:	00810004 	movi	r2,1024
  827d74:	80006e26 	beq	r16,zero,827f30 <__sfvwrite_r+0x230>
  827d78:	800f883a 	mov	r7,r16
  827d7c:	91400717 	ldw	r5,28(r18)
  827d80:	1400012e 	bgeu	r2,r16,827d88 <__sfvwrite_r+0x88>
  827d84:	100f883a 	mov	r7,r2
  827d88:	90c00917 	ldw	r3,36(r18)
  827d8c:	183ee83a 	callr	r3
  827d90:	1007883a 	mov	r3,r2
  827d94:	80a1c83a 	sub	r16,r16,r2
  827d98:	88a3883a 	add	r17,r17,r2
  827d9c:	00806d0e 	bge	zero,r2,827f54 <__sfvwrite_r+0x254>
  827da0:	b0800217 	ldw	r2,8(r22)
  827da4:	10c5c83a 	sub	r2,r2,r3
  827da8:	b0800215 	stw	r2,8(r22)
  827dac:	103fee1e 	bne	r2,zero,827d68 <__sfvwrite_r+0x68>
  827db0:	0009883a 	mov	r4,zero
  827db4:	2005883a 	mov	r2,r4
  827db8:	dfc00a17 	ldw	ra,40(sp)
  827dbc:	df000917 	ldw	fp,36(sp)
  827dc0:	ddc00817 	ldw	r23,32(sp)
  827dc4:	dd800717 	ldw	r22,28(sp)
  827dc8:	dd400617 	ldw	r21,24(sp)
  827dcc:	dd000517 	ldw	r20,20(sp)
  827dd0:	dcc00417 	ldw	r19,16(sp)
  827dd4:	dc800317 	ldw	r18,12(sp)
  827dd8:	dc400217 	ldw	r17,8(sp)
  827ddc:	dc000117 	ldw	r16,4(sp)
  827de0:	dec00b04 	addi	sp,sp,44
  827de4:	f800283a 	ret
  827de8:	08259140 	call	825914 <__swsetup_r>
  827dec:	1000e41e 	bne	r2,zero,828180 <__sfvwrite_r+0x480>
  827df0:	91c0030b 	ldhu	r7,12(r18)
  827df4:	b5400017 	ldw	r21,0(r22)
  827df8:	3880008c 	andi	r2,r7,2
  827dfc:	103fd81e 	bne	r2,zero,827d60 <__sfvwrite_r+0x60>
  827e00:	3880004c 	andi	r2,r7,1
  827e04:	1005003a 	cmpeq	r2,r2,zero
  827e08:	10005726 	beq	r2,zero,827f68 <__sfvwrite_r+0x268>
  827e0c:	0029883a 	mov	r20,zero
  827e10:	002f883a 	mov	r23,zero
  827e14:	a0004226 	beq	r20,zero,827f20 <__sfvwrite_r+0x220>
  827e18:	3880800c 	andi	r2,r7,512
  827e1c:	94000217 	ldw	r16,8(r18)
  827e20:	10008b26 	beq	r2,zero,828050 <__sfvwrite_r+0x350>
  827e24:	800d883a 	mov	r6,r16
  827e28:	a400a536 	bltu	r20,r16,8280c0 <__sfvwrite_r+0x3c0>
  827e2c:	3881200c 	andi	r2,r7,1152
  827e30:	10002726 	beq	r2,zero,827ed0 <__sfvwrite_r+0x1d0>
  827e34:	90800517 	ldw	r2,20(r18)
  827e38:	92000417 	ldw	r8,16(r18)
  827e3c:	91400017 	ldw	r5,0(r18)
  827e40:	1087883a 	add	r3,r2,r2
  827e44:	1887883a 	add	r3,r3,r2
  827e48:	1808d7fa 	srli	r4,r3,31
  827e4c:	2a21c83a 	sub	r16,r5,r8
  827e50:	80800044 	addi	r2,r16,1
  827e54:	20c9883a 	add	r4,r4,r3
  827e58:	2027d07a 	srai	r19,r4,1
  827e5c:	a085883a 	add	r2,r20,r2
  827e60:	980d883a 	mov	r6,r19
  827e64:	9880022e 	bgeu	r19,r2,827e70 <__sfvwrite_r+0x170>
  827e68:	1027883a 	mov	r19,r2
  827e6c:	100d883a 	mov	r6,r2
  827e70:	3881000c 	andi	r2,r7,1024
  827e74:	1000b826 	beq	r2,zero,828158 <__sfvwrite_r+0x458>
  827e78:	300b883a 	mov	r5,r6
  827e7c:	e009883a 	mov	r4,fp
  827e80:	08217100 	call	821710 <_malloc_r>
  827e84:	10003126 	beq	r2,zero,827f4c <__sfvwrite_r+0x24c>
  827e88:	91400417 	ldw	r5,16(r18)
  827e8c:	1009883a 	mov	r4,r2
  827e90:	800d883a 	mov	r6,r16
  827e94:	1023883a 	mov	r17,r2
  827e98:	0821e500 	call	821e50 <memcpy>
  827e9c:	90c0030b 	ldhu	r3,12(r18)
  827ea0:	00beffc4 	movi	r2,-1025
  827ea4:	1886703a 	and	r3,r3,r2
  827ea8:	18c02014 	ori	r3,r3,128
  827eac:	90c0030d 	sth	r3,12(r18)
  827eb0:	9c07c83a 	sub	r3,r19,r16
  827eb4:	8c05883a 	add	r2,r17,r16
  827eb8:	a00d883a 	mov	r6,r20
  827ebc:	a021883a 	mov	r16,r20
  827ec0:	90800015 	stw	r2,0(r18)
  827ec4:	90c00215 	stw	r3,8(r18)
  827ec8:	94400415 	stw	r17,16(r18)
  827ecc:	94c00515 	stw	r19,20(r18)
  827ed0:	91000017 	ldw	r4,0(r18)
  827ed4:	b80b883a 	mov	r5,r23
  827ed8:	a023883a 	mov	r17,r20
  827edc:	0821ef00 	call	821ef0 <memmove>
  827ee0:	90c00217 	ldw	r3,8(r18)
  827ee4:	90800017 	ldw	r2,0(r18)
  827ee8:	a027883a 	mov	r19,r20
  827eec:	1c07c83a 	sub	r3,r3,r16
  827ef0:	1405883a 	add	r2,r2,r16
  827ef4:	90c00215 	stw	r3,8(r18)
  827ef8:	a021883a 	mov	r16,r20
  827efc:	90800015 	stw	r2,0(r18)
  827f00:	b0800217 	ldw	r2,8(r22)
  827f04:	1405c83a 	sub	r2,r2,r16
  827f08:	b0800215 	stw	r2,8(r22)
  827f0c:	103fa826 	beq	r2,zero,827db0 <__sfvwrite_r+0xb0>
  827f10:	a469c83a 	sub	r20,r20,r17
  827f14:	91c0030b 	ldhu	r7,12(r18)
  827f18:	bcef883a 	add	r23,r23,r19
  827f1c:	a03fbe1e 	bne	r20,zero,827e18 <__sfvwrite_r+0x118>
  827f20:	adc00017 	ldw	r23,0(r21)
  827f24:	ad000117 	ldw	r20,4(r21)
  827f28:	ad400204 	addi	r21,r21,8
  827f2c:	003fb906 	br	827e14 <__sfvwrite_r+0x114>
  827f30:	ac400017 	ldw	r17,0(r21)
  827f34:	ac000117 	ldw	r16,4(r21)
  827f38:	ad400204 	addi	r21,r21,8
  827f3c:	003f8a06 	br	827d68 <__sfvwrite_r+0x68>
  827f40:	91400417 	ldw	r5,16(r18)
  827f44:	e009883a 	mov	r4,fp
  827f48:	08279ec0 	call	8279ec <_free_r>
  827f4c:	00800304 	movi	r2,12
  827f50:	e0800015 	stw	r2,0(fp)
  827f54:	9080030b 	ldhu	r2,12(r18)
  827f58:	013fffc4 	movi	r4,-1
  827f5c:	10801014 	ori	r2,r2,64
  827f60:	9080030d 	sth	r2,12(r18)
  827f64:	003f9306 	br	827db4 <__sfvwrite_r+0xb4>
  827f68:	0027883a 	mov	r19,zero
  827f6c:	002f883a 	mov	r23,zero
  827f70:	d8000015 	stw	zero,0(sp)
  827f74:	0029883a 	mov	r20,zero
  827f78:	98001e26 	beq	r19,zero,827ff4 <__sfvwrite_r+0x2f4>
  827f7c:	d8c00017 	ldw	r3,0(sp)
  827f80:	1804c03a 	cmpne	r2,r3,zero
  827f84:	10005e26 	beq	r2,zero,828100 <__sfvwrite_r+0x400>
  827f88:	9821883a 	mov	r16,r19
  827f8c:	a4c0012e 	bgeu	r20,r19,827f94 <__sfvwrite_r+0x294>
  827f90:	a021883a 	mov	r16,r20
  827f94:	91000017 	ldw	r4,0(r18)
  827f98:	90800417 	ldw	r2,16(r18)
  827f9c:	91800217 	ldw	r6,8(r18)
  827fa0:	91c00517 	ldw	r7,20(r18)
  827fa4:	1100022e 	bgeu	r2,r4,827fb0 <__sfvwrite_r+0x2b0>
  827fa8:	31e3883a 	add	r17,r6,r7
  827fac:	8c001616 	blt	r17,r16,828008 <__sfvwrite_r+0x308>
  827fb0:	81c03816 	blt	r16,r7,828094 <__sfvwrite_r+0x394>
  827fb4:	90c00917 	ldw	r3,36(r18)
  827fb8:	91400717 	ldw	r5,28(r18)
  827fbc:	e009883a 	mov	r4,fp
  827fc0:	b80d883a 	mov	r6,r23
  827fc4:	183ee83a 	callr	r3
  827fc8:	1023883a 	mov	r17,r2
  827fcc:	00bfe10e 	bge	zero,r2,827f54 <__sfvwrite_r+0x254>
  827fd0:	a469c83a 	sub	r20,r20,r17
  827fd4:	a0001826 	beq	r20,zero,828038 <__sfvwrite_r+0x338>
  827fd8:	b0800217 	ldw	r2,8(r22)
  827fdc:	1445c83a 	sub	r2,r2,r17
  827fe0:	b0800215 	stw	r2,8(r22)
  827fe4:	103f7226 	beq	r2,zero,827db0 <__sfvwrite_r+0xb0>
  827fe8:	9c67c83a 	sub	r19,r19,r17
  827fec:	bc6f883a 	add	r23,r23,r17
  827ff0:	983fe21e 	bne	r19,zero,827f7c <__sfvwrite_r+0x27c>
  827ff4:	adc00017 	ldw	r23,0(r21)
  827ff8:	acc00117 	ldw	r19,4(r21)
  827ffc:	ad400204 	addi	r21,r21,8
  828000:	d8000015 	stw	zero,0(sp)
  828004:	003fdc06 	br	827f78 <__sfvwrite_r+0x278>
  828008:	b80b883a 	mov	r5,r23
  82800c:	880d883a 	mov	r6,r17
  828010:	0821ef00 	call	821ef0 <memmove>
  828014:	90c00017 	ldw	r3,0(r18)
  828018:	e009883a 	mov	r4,fp
  82801c:	900b883a 	mov	r5,r18
  828020:	1c47883a 	add	r3,r3,r17
  828024:	90c00015 	stw	r3,0(r18)
  828028:	08273d00 	call	8273d0 <_fflush_r>
  82802c:	103fc91e 	bne	r2,zero,827f54 <__sfvwrite_r+0x254>
  828030:	a469c83a 	sub	r20,r20,r17
  828034:	a03fe81e 	bne	r20,zero,827fd8 <__sfvwrite_r+0x2d8>
  828038:	e009883a 	mov	r4,fp
  82803c:	900b883a 	mov	r5,r18
  828040:	08273d00 	call	8273d0 <_fflush_r>
  828044:	103fc31e 	bne	r2,zero,827f54 <__sfvwrite_r+0x254>
  828048:	d8000015 	stw	zero,0(sp)
  82804c:	003fe206 	br	827fd8 <__sfvwrite_r+0x2d8>
  828050:	91000017 	ldw	r4,0(r18)
  828054:	90800417 	ldw	r2,16(r18)
  828058:	1100022e 	bgeu	r2,r4,828064 <__sfvwrite_r+0x364>
  82805c:	8023883a 	mov	r17,r16
  828060:	85003136 	bltu	r16,r20,828128 <__sfvwrite_r+0x428>
  828064:	91c00517 	ldw	r7,20(r18)
  828068:	a1c01836 	bltu	r20,r7,8280cc <__sfvwrite_r+0x3cc>
  82806c:	90c00917 	ldw	r3,36(r18)
  828070:	91400717 	ldw	r5,28(r18)
  828074:	e009883a 	mov	r4,fp
  828078:	b80d883a 	mov	r6,r23
  82807c:	183ee83a 	callr	r3
  828080:	1021883a 	mov	r16,r2
  828084:	00bfb30e 	bge	zero,r2,827f54 <__sfvwrite_r+0x254>
  828088:	1023883a 	mov	r17,r2
  82808c:	1027883a 	mov	r19,r2
  828090:	003f9b06 	br	827f00 <__sfvwrite_r+0x200>
  828094:	b80b883a 	mov	r5,r23
  828098:	800d883a 	mov	r6,r16
  82809c:	0821ef00 	call	821ef0 <memmove>
  8280a0:	90c00217 	ldw	r3,8(r18)
  8280a4:	90800017 	ldw	r2,0(r18)
  8280a8:	8023883a 	mov	r17,r16
  8280ac:	1c07c83a 	sub	r3,r3,r16
  8280b0:	1405883a 	add	r2,r2,r16
  8280b4:	90c00215 	stw	r3,8(r18)
  8280b8:	90800015 	stw	r2,0(r18)
  8280bc:	003fc406 	br	827fd0 <__sfvwrite_r+0x2d0>
  8280c0:	a00d883a 	mov	r6,r20
  8280c4:	a021883a 	mov	r16,r20
  8280c8:	003f8106 	br	827ed0 <__sfvwrite_r+0x1d0>
  8280cc:	b80b883a 	mov	r5,r23
  8280d0:	a00d883a 	mov	r6,r20
  8280d4:	0821ef00 	call	821ef0 <memmove>
  8280d8:	90c00217 	ldw	r3,8(r18)
  8280dc:	90800017 	ldw	r2,0(r18)
  8280e0:	a021883a 	mov	r16,r20
  8280e4:	1d07c83a 	sub	r3,r3,r20
  8280e8:	1505883a 	add	r2,r2,r20
  8280ec:	a023883a 	mov	r17,r20
  8280f0:	a027883a 	mov	r19,r20
  8280f4:	90c00215 	stw	r3,8(r18)
  8280f8:	90800015 	stw	r2,0(r18)
  8280fc:	003f8006 	br	827f00 <__sfvwrite_r+0x200>
  828100:	b809883a 	mov	r4,r23
  828104:	01400284 	movi	r5,10
  828108:	980d883a 	mov	r6,r19
  82810c:	08285740 	call	828574 <memchr>
  828110:	10001726 	beq	r2,zero,828170 <__sfvwrite_r+0x470>
  828114:	15c5c83a 	sub	r2,r2,r23
  828118:	15000044 	addi	r20,r2,1
  82811c:	00800044 	movi	r2,1
  828120:	d8800015 	stw	r2,0(sp)
  828124:	003f9806 	br	827f88 <__sfvwrite_r+0x288>
  828128:	b80b883a 	mov	r5,r23
  82812c:	800d883a 	mov	r6,r16
  828130:	0821ef00 	call	821ef0 <memmove>
  828134:	90c00017 	ldw	r3,0(r18)
  828138:	e009883a 	mov	r4,fp
  82813c:	900b883a 	mov	r5,r18
  828140:	1c07883a 	add	r3,r3,r16
  828144:	90c00015 	stw	r3,0(r18)
  828148:	8027883a 	mov	r19,r16
  82814c:	08273d00 	call	8273d0 <_fflush_r>
  828150:	103f6b26 	beq	r2,zero,827f00 <__sfvwrite_r+0x200>
  828154:	003f7f06 	br	827f54 <__sfvwrite_r+0x254>
  828158:	400b883a 	mov	r5,r8
  82815c:	e009883a 	mov	r4,fp
  828160:	08221b00 	call	8221b0 <_realloc_r>
  828164:	103f7626 	beq	r2,zero,827f40 <__sfvwrite_r+0x240>
  828168:	1023883a 	mov	r17,r2
  82816c:	003f5006 	br	827eb0 <__sfvwrite_r+0x1b0>
  828170:	00c00044 	movi	r3,1
  828174:	9d000044 	addi	r20,r19,1
  828178:	d8c00015 	stw	r3,0(sp)
  82817c:	003f8206 	br	827f88 <__sfvwrite_r+0x288>
  828180:	9080030b 	ldhu	r2,12(r18)
  828184:	00c00244 	movi	r3,9
  828188:	013fffc4 	movi	r4,-1
  82818c:	10801014 	ori	r2,r2,64
  828190:	9080030d 	sth	r2,12(r18)
  828194:	e0c00015 	stw	r3,0(fp)
  828198:	003f0606 	br	827db4 <__sfvwrite_r+0xb4>

0082819c <_fwalk_reent>:
  82819c:	defff704 	addi	sp,sp,-36
  8281a0:	dcc00315 	stw	r19,12(sp)
  8281a4:	24c0b804 	addi	r19,r4,736
  8281a8:	dd800615 	stw	r22,24(sp)
  8281ac:	dd400515 	stw	r21,20(sp)
  8281b0:	dfc00815 	stw	ra,32(sp)
  8281b4:	ddc00715 	stw	r23,28(sp)
  8281b8:	dd000415 	stw	r20,16(sp)
  8281bc:	dc800215 	stw	r18,8(sp)
  8281c0:	dc400115 	stw	r17,4(sp)
  8281c4:	dc000015 	stw	r16,0(sp)
  8281c8:	202b883a 	mov	r21,r4
  8281cc:	282d883a 	mov	r22,r5
  8281d0:	08276580 	call	827658 <__sfp_lock_acquire>
  8281d4:	98002126 	beq	r19,zero,82825c <_fwalk_reent+0xc0>
  8281d8:	002f883a 	mov	r23,zero
  8281dc:	9c800117 	ldw	r18,4(r19)
  8281e0:	9c000217 	ldw	r16,8(r19)
  8281e4:	90bfffc4 	addi	r2,r18,-1
  8281e8:	10000d16 	blt	r2,zero,828220 <_fwalk_reent+0x84>
  8281ec:	0023883a 	mov	r17,zero
  8281f0:	053fffc4 	movi	r20,-1
  8281f4:	8080030f 	ldh	r2,12(r16)
  8281f8:	8c400044 	addi	r17,r17,1
  8281fc:	10000626 	beq	r2,zero,828218 <_fwalk_reent+0x7c>
  828200:	8080038f 	ldh	r2,14(r16)
  828204:	800b883a 	mov	r5,r16
  828208:	a809883a 	mov	r4,r21
  82820c:	15000226 	beq	r2,r20,828218 <_fwalk_reent+0x7c>
  828210:	b03ee83a 	callr	r22
  828214:	b8aeb03a 	or	r23,r23,r2
  828218:	84001704 	addi	r16,r16,92
  82821c:	947ff51e 	bne	r18,r17,8281f4 <_fwalk_reent+0x58>
  828220:	9cc00017 	ldw	r19,0(r19)
  828224:	983fed1e 	bne	r19,zero,8281dc <_fwalk_reent+0x40>
  828228:	082765c0 	call	82765c <__sfp_lock_release>
  82822c:	b805883a 	mov	r2,r23
  828230:	dfc00817 	ldw	ra,32(sp)
  828234:	ddc00717 	ldw	r23,28(sp)
  828238:	dd800617 	ldw	r22,24(sp)
  82823c:	dd400517 	ldw	r21,20(sp)
  828240:	dd000417 	ldw	r20,16(sp)
  828244:	dcc00317 	ldw	r19,12(sp)
  828248:	dc800217 	ldw	r18,8(sp)
  82824c:	dc400117 	ldw	r17,4(sp)
  828250:	dc000017 	ldw	r16,0(sp)
  828254:	dec00904 	addi	sp,sp,36
  828258:	f800283a 	ret
  82825c:	002f883a 	mov	r23,zero
  828260:	003ff106 	br	828228 <_fwalk_reent+0x8c>

00828264 <_fwalk>:
  828264:	defff804 	addi	sp,sp,-32
  828268:	dcc00315 	stw	r19,12(sp)
  82826c:	24c0b804 	addi	r19,r4,736
  828270:	dd400515 	stw	r21,20(sp)
  828274:	dfc00715 	stw	ra,28(sp)
  828278:	dd800615 	stw	r22,24(sp)
  82827c:	dd000415 	stw	r20,16(sp)
  828280:	dc800215 	stw	r18,8(sp)
  828284:	dc400115 	stw	r17,4(sp)
  828288:	dc000015 	stw	r16,0(sp)
  82828c:	282b883a 	mov	r21,r5
  828290:	08276580 	call	827658 <__sfp_lock_acquire>
  828294:	98001f26 	beq	r19,zero,828314 <_fwalk+0xb0>
  828298:	002d883a 	mov	r22,zero
  82829c:	9c800117 	ldw	r18,4(r19)
  8282a0:	9c000217 	ldw	r16,8(r19)
  8282a4:	90bfffc4 	addi	r2,r18,-1
  8282a8:	10000c16 	blt	r2,zero,8282dc <_fwalk+0x78>
  8282ac:	0023883a 	mov	r17,zero
  8282b0:	053fffc4 	movi	r20,-1
  8282b4:	8080030f 	ldh	r2,12(r16)
  8282b8:	8c400044 	addi	r17,r17,1
  8282bc:	10000526 	beq	r2,zero,8282d4 <_fwalk+0x70>
  8282c0:	8080038f 	ldh	r2,14(r16)
  8282c4:	8009883a 	mov	r4,r16
  8282c8:	15000226 	beq	r2,r20,8282d4 <_fwalk+0x70>
  8282cc:	a83ee83a 	callr	r21
  8282d0:	b0acb03a 	or	r22,r22,r2
  8282d4:	84001704 	addi	r16,r16,92
  8282d8:	947ff61e 	bne	r18,r17,8282b4 <_fwalk+0x50>
  8282dc:	9cc00017 	ldw	r19,0(r19)
  8282e0:	983fee1e 	bne	r19,zero,82829c <_fwalk+0x38>
  8282e4:	082765c0 	call	82765c <__sfp_lock_release>
  8282e8:	b005883a 	mov	r2,r22
  8282ec:	dfc00717 	ldw	ra,28(sp)
  8282f0:	dd800617 	ldw	r22,24(sp)
  8282f4:	dd400517 	ldw	r21,20(sp)
  8282f8:	dd000417 	ldw	r20,16(sp)
  8282fc:	dcc00317 	ldw	r19,12(sp)
  828300:	dc800217 	ldw	r18,8(sp)
  828304:	dc400117 	ldw	r17,4(sp)
  828308:	dc000017 	ldw	r16,0(sp)
  82830c:	dec00804 	addi	sp,sp,32
  828310:	f800283a 	ret
  828314:	002d883a 	mov	r22,zero
  828318:	003ff206 	br	8282e4 <_fwalk+0x80>

0082831c <__locale_charset>:
  82831c:	d0a00c17 	ldw	r2,-32720(gp)
  828320:	f800283a 	ret

00828324 <_localeconv_r>:
  828324:	00802134 	movhi	r2,132
  828328:	10bb4a04 	addi	r2,r2,-4824
  82832c:	f800283a 	ret

00828330 <localeconv>:
  828330:	00802134 	movhi	r2,132
  828334:	1082e104 	addi	r2,r2,2948
  828338:	11000017 	ldw	r4,0(r2)
  82833c:	08283241 	jmpi	828324 <_localeconv_r>

00828340 <_setlocale_r>:
  828340:	defffc04 	addi	sp,sp,-16
  828344:	00c02134 	movhi	r3,132
  828348:	18fa8304 	addi	r3,r3,-5620
  82834c:	dc800215 	stw	r18,8(sp)
  828350:	dc400115 	stw	r17,4(sp)
  828354:	dc000015 	stw	r16,0(sp)
  828358:	2023883a 	mov	r17,r4
  82835c:	2825883a 	mov	r18,r5
  828360:	dfc00315 	stw	ra,12(sp)
  828364:	3021883a 	mov	r16,r6
  828368:	3009883a 	mov	r4,r6
  82836c:	180b883a 	mov	r5,r3
  828370:	30000926 	beq	r6,zero,828398 <_setlocale_r+0x58>
  828374:	0822cc80 	call	822cc8 <strcmp>
  828378:	8009883a 	mov	r4,r16
  82837c:	014020f4 	movhi	r5,131
  828380:	294ed604 	addi	r5,r5,15192
  828384:	10000b1e 	bne	r2,zero,8283b4 <_setlocale_r+0x74>
  828388:	8c000d15 	stw	r16,52(r17)
  82838c:	8c800c15 	stw	r18,48(r17)
  828390:	00c02134 	movhi	r3,132
  828394:	18fa8304 	addi	r3,r3,-5620
  828398:	1805883a 	mov	r2,r3
  82839c:	dfc00317 	ldw	ra,12(sp)
  8283a0:	dc800217 	ldw	r18,8(sp)
  8283a4:	dc400117 	ldw	r17,4(sp)
  8283a8:	dc000017 	ldw	r16,0(sp)
  8283ac:	dec00404 	addi	sp,sp,16
  8283b0:	f800283a 	ret
  8283b4:	0822cc80 	call	822cc8 <strcmp>
  8283b8:	0007883a 	mov	r3,zero
  8283bc:	103ff226 	beq	r2,zero,828388 <_setlocale_r+0x48>
  8283c0:	003ff506 	br	828398 <_setlocale_r+0x58>

008283c4 <setlocale>:
  8283c4:	01802134 	movhi	r6,132
  8283c8:	3182e104 	addi	r6,r6,2948
  8283cc:	2007883a 	mov	r3,r4
  8283d0:	31000017 	ldw	r4,0(r6)
  8283d4:	280d883a 	mov	r6,r5
  8283d8:	180b883a 	mov	r5,r3
  8283dc:	08283401 	jmpi	828340 <_setlocale_r>

008283e0 <__smakebuf_r>:
  8283e0:	2880030b 	ldhu	r2,12(r5)
  8283e4:	deffed04 	addi	sp,sp,-76
  8283e8:	dc401015 	stw	r17,64(sp)
  8283ec:	1080008c 	andi	r2,r2,2
  8283f0:	dc000f15 	stw	r16,60(sp)
  8283f4:	dfc01215 	stw	ra,72(sp)
  8283f8:	dc801115 	stw	r18,68(sp)
  8283fc:	2821883a 	mov	r16,r5
  828400:	2023883a 	mov	r17,r4
  828404:	10000b26 	beq	r2,zero,828434 <__smakebuf_r+0x54>
  828408:	28c010c4 	addi	r3,r5,67
  82840c:	00800044 	movi	r2,1
  828410:	28800515 	stw	r2,20(r5)
  828414:	28c00415 	stw	r3,16(r5)
  828418:	28c00015 	stw	r3,0(r5)
  82841c:	dfc01217 	ldw	ra,72(sp)
  828420:	dc801117 	ldw	r18,68(sp)
  828424:	dc401017 	ldw	r17,64(sp)
  828428:	dc000f17 	ldw	r16,60(sp)
  82842c:	dec01304 	addi	sp,sp,76
  828430:	f800283a 	ret
  828434:	2940038f 	ldh	r5,14(r5)
  828438:	28002116 	blt	r5,zero,8284c0 <__smakebuf_r+0xe0>
  82843c:	d80d883a 	mov	r6,sp
  828440:	0829b380 	call	829b38 <_fstat_r>
  828444:	10001e16 	blt	r2,zero,8284c0 <__smakebuf_r+0xe0>
  828448:	d8800117 	ldw	r2,4(sp)
  82844c:	00e00014 	movui	r3,32768
  828450:	113c000c 	andi	r4,r2,61440
  828454:	20c03126 	beq	r4,r3,82851c <__smakebuf_r+0x13c>
  828458:	8080030b 	ldhu	r2,12(r16)
  82845c:	00c80004 	movi	r3,8192
  828460:	10820014 	ori	r2,r2,2048
  828464:	8080030d 	sth	r2,12(r16)
  828468:	20c01e26 	beq	r4,r3,8284e4 <__smakebuf_r+0x104>
  82846c:	04810004 	movi	r18,1024
  828470:	8809883a 	mov	r4,r17
  828474:	900b883a 	mov	r5,r18
  828478:	08217100 	call	821710 <_malloc_r>
  82847c:	1009883a 	mov	r4,r2
  828480:	10003126 	beq	r2,zero,828548 <__smakebuf_r+0x168>
  828484:	80c0030b 	ldhu	r3,12(r16)
  828488:	008020b4 	movhi	r2,130
  82848c:	109dd304 	addi	r2,r2,30540
  828490:	88800f15 	stw	r2,60(r17)
  828494:	18c02014 	ori	r3,r3,128
  828498:	84800515 	stw	r18,20(r16)
  82849c:	80c0030d 	sth	r3,12(r16)
  8284a0:	81000415 	stw	r4,16(r16)
  8284a4:	81000015 	stw	r4,0(r16)
  8284a8:	dfc01217 	ldw	ra,72(sp)
  8284ac:	dc801117 	ldw	r18,68(sp)
  8284b0:	dc401017 	ldw	r17,64(sp)
  8284b4:	dc000f17 	ldw	r16,60(sp)
  8284b8:	dec01304 	addi	sp,sp,76
  8284bc:	f800283a 	ret
  8284c0:	80c0030b 	ldhu	r3,12(r16)
  8284c4:	1880200c 	andi	r2,r3,128
  8284c8:	10000426 	beq	r2,zero,8284dc <__smakebuf_r+0xfc>
  8284cc:	04801004 	movi	r18,64
  8284d0:	18820014 	ori	r2,r3,2048
  8284d4:	8080030d 	sth	r2,12(r16)
  8284d8:	003fe506 	br	828470 <__smakebuf_r+0x90>
  8284dc:	04810004 	movi	r18,1024
  8284e0:	003ffb06 	br	8284d0 <__smakebuf_r+0xf0>
  8284e4:	8140038f 	ldh	r5,14(r16)
  8284e8:	8809883a 	mov	r4,r17
  8284ec:	0829bac0 	call	829bac <_isatty_r>
  8284f0:	103fde26 	beq	r2,zero,82846c <__smakebuf_r+0x8c>
  8284f4:	8080030b 	ldhu	r2,12(r16)
  8284f8:	80c010c4 	addi	r3,r16,67
  8284fc:	04810004 	movi	r18,1024
  828500:	10800054 	ori	r2,r2,1
  828504:	8080030d 	sth	r2,12(r16)
  828508:	00800044 	movi	r2,1
  82850c:	80c00415 	stw	r3,16(r16)
  828510:	80800515 	stw	r2,20(r16)
  828514:	80c00015 	stw	r3,0(r16)
  828518:	003fd506 	br	828470 <__smakebuf_r+0x90>
  82851c:	80c00a17 	ldw	r3,40(r16)
  828520:	008020f4 	movhi	r2,131
  828524:	10a5c204 	addi	r2,r2,-26872
  828528:	18bfcb1e 	bne	r3,r2,828458 <__smakebuf_r+0x78>
  82852c:	8080030b 	ldhu	r2,12(r16)
  828530:	00c10004 	movi	r3,1024
  828534:	1825883a 	mov	r18,r3
  828538:	10c4b03a 	or	r2,r2,r3
  82853c:	8080030d 	sth	r2,12(r16)
  828540:	80c01315 	stw	r3,76(r16)
  828544:	003fca06 	br	828470 <__smakebuf_r+0x90>
  828548:	8100030b 	ldhu	r4,12(r16)
  82854c:	2080800c 	andi	r2,r4,512
  828550:	103fb21e 	bne	r2,zero,82841c <__smakebuf_r+0x3c>
  828554:	80c010c4 	addi	r3,r16,67
  828558:	21000094 	ori	r4,r4,2
  82855c:	00800044 	movi	r2,1
  828560:	80800515 	stw	r2,20(r16)
  828564:	8100030d 	sth	r4,12(r16)
  828568:	80c00415 	stw	r3,16(r16)
  82856c:	80c00015 	stw	r3,0(r16)
  828570:	003faa06 	br	82841c <__smakebuf_r+0x3c>

00828574 <memchr>:
  828574:	008000c4 	movi	r2,3
  828578:	29403fcc 	andi	r5,r5,255
  82857c:	2007883a 	mov	r3,r4
  828580:	1180022e 	bgeu	r2,r6,82858c <memchr+0x18>
  828584:	2084703a 	and	r2,r4,r2
  828588:	10000b26 	beq	r2,zero,8285b8 <memchr+0x44>
  82858c:	313fffc4 	addi	r4,r6,-1
  828590:	3000051e 	bne	r6,zero,8285a8 <memchr+0x34>
  828594:	00002c06 	br	828648 <memchr+0xd4>
  828598:	213fffc4 	addi	r4,r4,-1
  82859c:	00bfffc4 	movi	r2,-1
  8285a0:	18c00044 	addi	r3,r3,1
  8285a4:	20802826 	beq	r4,r2,828648 <memchr+0xd4>
  8285a8:	18800003 	ldbu	r2,0(r3)
  8285ac:	28bffa1e 	bne	r5,r2,828598 <memchr+0x24>
  8285b0:	1805883a 	mov	r2,r3
  8285b4:	f800283a 	ret
  8285b8:	0011883a 	mov	r8,zero
  8285bc:	0007883a 	mov	r3,zero
  8285c0:	01c00104 	movi	r7,4
  8285c4:	4004923a 	slli	r2,r8,8
  8285c8:	18c00044 	addi	r3,r3,1
  8285cc:	1151883a 	add	r8,r2,r5
  8285d0:	19fffc1e 	bne	r3,r7,8285c4 <memchr+0x50>
  8285d4:	02bfbff4 	movhi	r10,65279
  8285d8:	52bfbfc4 	addi	r10,r10,-257
  8285dc:	02602074 	movhi	r9,32897
  8285e0:	4a602004 	addi	r9,r9,-32640
  8285e4:	02c000c4 	movi	r11,3
  8285e8:	20800017 	ldw	r2,0(r4)
  8285ec:	31bfff04 	addi	r6,r6,-4
  8285f0:	200f883a 	mov	r7,r4
  8285f4:	1204f03a 	xor	r2,r2,r8
  8285f8:	1287883a 	add	r3,r2,r10
  8285fc:	1a46703a 	and	r3,r3,r9
  828600:	0084303a 	nor	r2,zero,r2
  828604:	10c4703a 	and	r2,r2,r3
  828608:	10000b26 	beq	r2,zero,828638 <memchr+0xc4>
  82860c:	20800003 	ldbu	r2,0(r4)
  828610:	28800f26 	beq	r5,r2,828650 <memchr+0xdc>
  828614:	20800043 	ldbu	r2,1(r4)
  828618:	21c00044 	addi	r7,r4,1
  82861c:	28800c26 	beq	r5,r2,828650 <memchr+0xdc>
  828620:	20800083 	ldbu	r2,2(r4)
  828624:	21c00084 	addi	r7,r4,2
  828628:	28800926 	beq	r5,r2,828650 <memchr+0xdc>
  82862c:	208000c3 	ldbu	r2,3(r4)
  828630:	21c000c4 	addi	r7,r4,3
  828634:	28800626 	beq	r5,r2,828650 <memchr+0xdc>
  828638:	21000104 	addi	r4,r4,4
  82863c:	59bfea36 	bltu	r11,r6,8285e8 <memchr+0x74>
  828640:	2007883a 	mov	r3,r4
  828644:	003fd106 	br	82858c <memchr+0x18>
  828648:	0005883a 	mov	r2,zero
  82864c:	f800283a 	ret
  828650:	3805883a 	mov	r2,r7
  828654:	f800283a 	ret

00828658 <memcmp>:
  828658:	00c000c4 	movi	r3,3
  82865c:	1980032e 	bgeu	r3,r6,82866c <memcmp+0x14>
  828660:	2144b03a 	or	r2,r4,r5
  828664:	10c4703a 	and	r2,r2,r3
  828668:	10000f26 	beq	r2,zero,8286a8 <memcmp+0x50>
  82866c:	31ffffc4 	addi	r7,r6,-1
  828670:	3000061e 	bne	r6,zero,82868c <memcmp+0x34>
  828674:	00000a06 	br	8286a0 <memcmp+0x48>
  828678:	39ffffc4 	addi	r7,r7,-1
  82867c:	00bfffc4 	movi	r2,-1
  828680:	21000044 	addi	r4,r4,1
  828684:	29400044 	addi	r5,r5,1
  828688:	38800526 	beq	r7,r2,8286a0 <memcmp+0x48>
  82868c:	20c00003 	ldbu	r3,0(r4)
  828690:	28800003 	ldbu	r2,0(r5)
  828694:	18bff826 	beq	r3,r2,828678 <memcmp+0x20>
  828698:	1885c83a 	sub	r2,r3,r2
  82869c:	f800283a 	ret
  8286a0:	0005883a 	mov	r2,zero
  8286a4:	f800283a 	ret
  8286a8:	180f883a 	mov	r7,r3
  8286ac:	20c00017 	ldw	r3,0(r4)
  8286b0:	28800017 	ldw	r2,0(r5)
  8286b4:	18bfed1e 	bne	r3,r2,82866c <memcmp+0x14>
  8286b8:	31bfff04 	addi	r6,r6,-4
  8286bc:	21000104 	addi	r4,r4,4
  8286c0:	29400104 	addi	r5,r5,4
  8286c4:	39bff936 	bltu	r7,r6,8286ac <memcmp+0x54>
  8286c8:	003fe806 	br	82866c <memcmp+0x14>

008286cc <_Bfree>:
  8286cc:	28000826 	beq	r5,zero,8286f0 <_Bfree+0x24>
  8286d0:	28800117 	ldw	r2,4(r5)
  8286d4:	21001317 	ldw	r4,76(r4)
  8286d8:	1085883a 	add	r2,r2,r2
  8286dc:	1085883a 	add	r2,r2,r2
  8286e0:	1105883a 	add	r2,r2,r4
  8286e4:	10c00017 	ldw	r3,0(r2)
  8286e8:	28c00015 	stw	r3,0(r5)
  8286ec:	11400015 	stw	r5,0(r2)
  8286f0:	f800283a 	ret

008286f4 <__hi0bits>:
  8286f4:	20bfffec 	andhi	r2,r4,65535
  8286f8:	10001426 	beq	r2,zero,82874c <__hi0bits+0x58>
  8286fc:	0007883a 	mov	r3,zero
  828700:	20bfc02c 	andhi	r2,r4,65280
  828704:	1000021e 	bne	r2,zero,828710 <__hi0bits+0x1c>
  828708:	2008923a 	slli	r4,r4,8
  82870c:	18c00204 	addi	r3,r3,8
  828710:	20bc002c 	andhi	r2,r4,61440
  828714:	1000021e 	bne	r2,zero,828720 <__hi0bits+0x2c>
  828718:	2008913a 	slli	r4,r4,4
  82871c:	18c00104 	addi	r3,r3,4
  828720:	20b0002c 	andhi	r2,r4,49152
  828724:	1000031e 	bne	r2,zero,828734 <__hi0bits+0x40>
  828728:	2105883a 	add	r2,r4,r4
  82872c:	18c00084 	addi	r3,r3,2
  828730:	1089883a 	add	r4,r2,r2
  828734:	20000316 	blt	r4,zero,828744 <__hi0bits+0x50>
  828738:	2090002c 	andhi	r2,r4,16384
  82873c:	10000626 	beq	r2,zero,828758 <__hi0bits+0x64>
  828740:	18c00044 	addi	r3,r3,1
  828744:	1805883a 	mov	r2,r3
  828748:	f800283a 	ret
  82874c:	2008943a 	slli	r4,r4,16
  828750:	00c00404 	movi	r3,16
  828754:	003fea06 	br	828700 <__hi0bits+0xc>
  828758:	00c00804 	movi	r3,32
  82875c:	1805883a 	mov	r2,r3
  828760:	f800283a 	ret

00828764 <__lo0bits>:
  828764:	20c00017 	ldw	r3,0(r4)
  828768:	188001cc 	andi	r2,r3,7
  82876c:	10000a26 	beq	r2,zero,828798 <__lo0bits+0x34>
  828770:	1880004c 	andi	r2,r3,1
  828774:	1005003a 	cmpeq	r2,r2,zero
  828778:	10002126 	beq	r2,zero,828800 <__lo0bits+0x9c>
  82877c:	1880008c 	andi	r2,r3,2
  828780:	1000251e 	bne	r2,zero,828818 <__lo0bits+0xb4>
  828784:	1804d0ba 	srli	r2,r3,2
  828788:	01400084 	movi	r5,2
  82878c:	20800015 	stw	r2,0(r4)
  828790:	2805883a 	mov	r2,r5
  828794:	f800283a 	ret
  828798:	18bfffcc 	andi	r2,r3,65535
  82879c:	10001526 	beq	r2,zero,8287f4 <__lo0bits+0x90>
  8287a0:	000b883a 	mov	r5,zero
  8287a4:	18803fcc 	andi	r2,r3,255
  8287a8:	1000021e 	bne	r2,zero,8287b4 <__lo0bits+0x50>
  8287ac:	1806d23a 	srli	r3,r3,8
  8287b0:	29400204 	addi	r5,r5,8
  8287b4:	188003cc 	andi	r2,r3,15
  8287b8:	1000021e 	bne	r2,zero,8287c4 <__lo0bits+0x60>
  8287bc:	1806d13a 	srli	r3,r3,4
  8287c0:	29400104 	addi	r5,r5,4
  8287c4:	188000cc 	andi	r2,r3,3
  8287c8:	1000021e 	bne	r2,zero,8287d4 <__lo0bits+0x70>
  8287cc:	1806d0ba 	srli	r3,r3,2
  8287d0:	29400084 	addi	r5,r5,2
  8287d4:	1880004c 	andi	r2,r3,1
  8287d8:	1000031e 	bne	r2,zero,8287e8 <__lo0bits+0x84>
  8287dc:	1806d07a 	srli	r3,r3,1
  8287e0:	18000a26 	beq	r3,zero,82880c <__lo0bits+0xa8>
  8287e4:	29400044 	addi	r5,r5,1
  8287e8:	2805883a 	mov	r2,r5
  8287ec:	20c00015 	stw	r3,0(r4)
  8287f0:	f800283a 	ret
  8287f4:	1806d43a 	srli	r3,r3,16
  8287f8:	01400404 	movi	r5,16
  8287fc:	003fe906 	br	8287a4 <__lo0bits+0x40>
  828800:	000b883a 	mov	r5,zero
  828804:	2805883a 	mov	r2,r5
  828808:	f800283a 	ret
  82880c:	01400804 	movi	r5,32
  828810:	2805883a 	mov	r2,r5
  828814:	f800283a 	ret
  828818:	1804d07a 	srli	r2,r3,1
  82881c:	01400044 	movi	r5,1
  828820:	20800015 	stw	r2,0(r4)
  828824:	003fda06 	br	828790 <__lo0bits+0x2c>

00828828 <__mcmp>:
  828828:	20800417 	ldw	r2,16(r4)
  82882c:	28c00417 	ldw	r3,16(r5)
  828830:	10cfc83a 	sub	r7,r2,r3
  828834:	38000c1e 	bne	r7,zero,828868 <__mcmp+0x40>
  828838:	18c5883a 	add	r2,r3,r3
  82883c:	1085883a 	add	r2,r2,r2
  828840:	10c00504 	addi	r3,r2,20
  828844:	21000504 	addi	r4,r4,20
  828848:	28cb883a 	add	r5,r5,r3
  82884c:	2085883a 	add	r2,r4,r2
  828850:	10bfff04 	addi	r2,r2,-4
  828854:	297fff04 	addi	r5,r5,-4
  828858:	11800017 	ldw	r6,0(r2)
  82885c:	28c00017 	ldw	r3,0(r5)
  828860:	30c0031e 	bne	r6,r3,828870 <__mcmp+0x48>
  828864:	20bffa36 	bltu	r4,r2,828850 <__mcmp+0x28>
  828868:	3805883a 	mov	r2,r7
  82886c:	f800283a 	ret
  828870:	30c00336 	bltu	r6,r3,828880 <__mcmp+0x58>
  828874:	01c00044 	movi	r7,1
  828878:	3805883a 	mov	r2,r7
  82887c:	f800283a 	ret
  828880:	01ffffc4 	movi	r7,-1
  828884:	003ff806 	br	828868 <__mcmp+0x40>

00828888 <__ulp>:
  828888:	295ffc2c 	andhi	r5,r5,32752
  82888c:	013f3034 	movhi	r4,64704
  828890:	290b883a 	add	r5,r5,r4
  828894:	0145c83a 	sub	r2,zero,r5
  828898:	1007d53a 	srai	r3,r2,20
  82889c:	000d883a 	mov	r6,zero
  8288a0:	0140040e 	bge	zero,r5,8288b4 <__ulp+0x2c>
  8288a4:	280f883a 	mov	r7,r5
  8288a8:	3807883a 	mov	r3,r7
  8288ac:	3005883a 	mov	r2,r6
  8288b0:	f800283a 	ret
  8288b4:	008004c4 	movi	r2,19
  8288b8:	193ffb04 	addi	r4,r3,-20
  8288bc:	10c00c0e 	bge	r2,r3,8288f0 <__ulp+0x68>
  8288c0:	008007c4 	movi	r2,31
  8288c4:	1107c83a 	sub	r3,r2,r4
  8288c8:	00800784 	movi	r2,30
  8288cc:	01400044 	movi	r5,1
  8288d0:	11000216 	blt	r2,r4,8288dc <__ulp+0x54>
  8288d4:	00800044 	movi	r2,1
  8288d8:	10ca983a 	sll	r5,r2,r3
  8288dc:	000f883a 	mov	r7,zero
  8288e0:	280d883a 	mov	r6,r5
  8288e4:	3807883a 	mov	r3,r7
  8288e8:	3005883a 	mov	r2,r6
  8288ec:	f800283a 	ret
  8288f0:	00800234 	movhi	r2,8
  8288f4:	10cfd83a 	sra	r7,r2,r3
  8288f8:	000d883a 	mov	r6,zero
  8288fc:	3005883a 	mov	r2,r6
  828900:	3807883a 	mov	r3,r7
  828904:	f800283a 	ret

00828908 <__b2d>:
  828908:	20800417 	ldw	r2,16(r4)
  82890c:	defff904 	addi	sp,sp,-28
  828910:	dd000415 	stw	r20,16(sp)
  828914:	1085883a 	add	r2,r2,r2
  828918:	25000504 	addi	r20,r4,20
  82891c:	1085883a 	add	r2,r2,r2
  828920:	dc000015 	stw	r16,0(sp)
  828924:	a0a1883a 	add	r16,r20,r2
  828928:	dd400515 	stw	r21,20(sp)
  82892c:	857fff17 	ldw	r21,-4(r16)
  828930:	dc400115 	stw	r17,4(sp)
  828934:	dfc00615 	stw	ra,24(sp)
  828938:	a809883a 	mov	r4,r21
  82893c:	2823883a 	mov	r17,r5
  828940:	dcc00315 	stw	r19,12(sp)
  828944:	dc800215 	stw	r18,8(sp)
  828948:	08286f40 	call	8286f4 <__hi0bits>
  82894c:	100b883a 	mov	r5,r2
  828950:	00800804 	movi	r2,32
  828954:	1145c83a 	sub	r2,r2,r5
  828958:	88800015 	stw	r2,0(r17)
  82895c:	00800284 	movi	r2,10
  828960:	80ffff04 	addi	r3,r16,-4
  828964:	11401416 	blt	r2,r5,8289b8 <__b2d+0xb0>
  828968:	008002c4 	movi	r2,11
  82896c:	1149c83a 	sub	r4,r2,r5
  828970:	a0c02736 	bltu	r20,r3,828a10 <__b2d+0x108>
  828974:	000d883a 	mov	r6,zero
  828978:	28800544 	addi	r2,r5,21
  82897c:	a906d83a 	srl	r3,r21,r4
  828980:	a884983a 	sll	r2,r21,r2
  828984:	1ccffc34 	orhi	r19,r3,16368
  828988:	11a4b03a 	or	r18,r2,r6
  82898c:	9005883a 	mov	r2,r18
  828990:	9807883a 	mov	r3,r19
  828994:	dfc00617 	ldw	ra,24(sp)
  828998:	dd400517 	ldw	r21,20(sp)
  82899c:	dd000417 	ldw	r20,16(sp)
  8289a0:	dcc00317 	ldw	r19,12(sp)
  8289a4:	dc800217 	ldw	r18,8(sp)
  8289a8:	dc400117 	ldw	r17,4(sp)
  8289ac:	dc000017 	ldw	r16,0(sp)
  8289b0:	dec00704 	addi	sp,sp,28
  8289b4:	f800283a 	ret
  8289b8:	a0c00e36 	bltu	r20,r3,8289f4 <__b2d+0xec>
  8289bc:	293ffd44 	addi	r4,r5,-11
  8289c0:	000d883a 	mov	r6,zero
  8289c4:	20000f26 	beq	r4,zero,828a04 <__b2d+0xfc>
  8289c8:	00800804 	movi	r2,32
  8289cc:	110bc83a 	sub	r5,r2,r4
  8289d0:	a0c01236 	bltu	r20,r3,828a1c <__b2d+0x114>
  8289d4:	000f883a 	mov	r7,zero
  8289d8:	a904983a 	sll	r2,r21,r4
  8289dc:	3146d83a 	srl	r3,r6,r5
  8289e0:	3108983a 	sll	r4,r6,r4
  8289e4:	108ffc34 	orhi	r2,r2,16368
  8289e8:	18a6b03a 	or	r19,r3,r2
  8289ec:	3924b03a 	or	r18,r7,r4
  8289f0:	003fe606 	br	82898c <__b2d+0x84>
  8289f4:	293ffd44 	addi	r4,r5,-11
  8289f8:	81bffe17 	ldw	r6,-8(r16)
  8289fc:	80fffe04 	addi	r3,r16,-8
  828a00:	203ff11e 	bne	r4,zero,8289c8 <__b2d+0xc0>
  828a04:	accffc34 	orhi	r19,r21,16368
  828a08:	3025883a 	mov	r18,r6
  828a0c:	003fdf06 	br	82898c <__b2d+0x84>
  828a10:	18bfff17 	ldw	r2,-4(r3)
  828a14:	110cd83a 	srl	r6,r2,r4
  828a18:	003fd706 	br	828978 <__b2d+0x70>
  828a1c:	18bfff17 	ldw	r2,-4(r3)
  828a20:	114ed83a 	srl	r7,r2,r5
  828a24:	003fec06 	br	8289d8 <__b2d+0xd0>

00828a28 <__ratio>:
  828a28:	defff904 	addi	sp,sp,-28
  828a2c:	dc400215 	stw	r17,8(sp)
  828a30:	2823883a 	mov	r17,r5
  828a34:	d80b883a 	mov	r5,sp
  828a38:	dfc00615 	stw	ra,24(sp)
  828a3c:	dd000515 	stw	r20,20(sp)
  828a40:	dcc00415 	stw	r19,16(sp)
  828a44:	dc800315 	stw	r18,12(sp)
  828a48:	2025883a 	mov	r18,r4
  828a4c:	08289080 	call	828908 <__b2d>
  828a50:	8809883a 	mov	r4,r17
  828a54:	d9400104 	addi	r5,sp,4
  828a58:	1027883a 	mov	r19,r2
  828a5c:	1829883a 	mov	r20,r3
  828a60:	08289080 	call	828908 <__b2d>
  828a64:	89000417 	ldw	r4,16(r17)
  828a68:	91c00417 	ldw	r7,16(r18)
  828a6c:	d9800117 	ldw	r6,4(sp)
  828a70:	180b883a 	mov	r5,r3
  828a74:	390fc83a 	sub	r7,r7,r4
  828a78:	1009883a 	mov	r4,r2
  828a7c:	d8800017 	ldw	r2,0(sp)
  828a80:	380e917a 	slli	r7,r7,5
  828a84:	2011883a 	mov	r8,r4
  828a88:	1185c83a 	sub	r2,r2,r6
  828a8c:	11c5883a 	add	r2,r2,r7
  828a90:	1006953a 	slli	r3,r2,20
  828a94:	2813883a 	mov	r9,r5
  828a98:	00800d0e 	bge	zero,r2,828ad0 <__ratio+0xa8>
  828a9c:	1d29883a 	add	r20,r3,r20
  828aa0:	a00b883a 	mov	r5,r20
  828aa4:	480f883a 	mov	r7,r9
  828aa8:	9809883a 	mov	r4,r19
  828aac:	400d883a 	mov	r6,r8
  828ab0:	08203d80 	call	8203d8 <__divdf3>
  828ab4:	dfc00617 	ldw	ra,24(sp)
  828ab8:	dd000517 	ldw	r20,20(sp)
  828abc:	dcc00417 	ldw	r19,16(sp)
  828ac0:	dc800317 	ldw	r18,12(sp)
  828ac4:	dc400217 	ldw	r17,8(sp)
  828ac8:	dec00704 	addi	sp,sp,28
  828acc:	f800283a 	ret
  828ad0:	28d3c83a 	sub	r9,r5,r3
  828ad4:	003ff206 	br	828aa0 <__ratio+0x78>

00828ad8 <_mprec_log10>:
  828ad8:	defffe04 	addi	sp,sp,-8
  828adc:	008005c4 	movi	r2,23
  828ae0:	dc000015 	stw	r16,0(sp)
  828ae4:	dfc00115 	stw	ra,4(sp)
  828ae8:	2021883a 	mov	r16,r4
  828aec:	11000c16 	blt	r2,r4,828b20 <_mprec_log10+0x48>
  828af0:	200490fa 	slli	r2,r4,3
  828af4:	00c02134 	movhi	r3,132
  828af8:	18fb5604 	addi	r3,r3,-4776
  828afc:	10c5883a 	add	r2,r2,r3
  828b00:	12400117 	ldw	r9,4(r2)
  828b04:	12000017 	ldw	r8,0(r2)
  828b08:	4807883a 	mov	r3,r9
  828b0c:	4005883a 	mov	r2,r8
  828b10:	dfc00117 	ldw	ra,4(sp)
  828b14:	dc000017 	ldw	r16,0(sp)
  828b18:	dec00204 	addi	sp,sp,8
  828b1c:	f800283a 	ret
  828b20:	0011883a 	mov	r8,zero
  828b24:	024ffc34 	movhi	r9,16368
  828b28:	0005883a 	mov	r2,zero
  828b2c:	00d00934 	movhi	r3,16420
  828b30:	480b883a 	mov	r5,r9
  828b34:	4009883a 	mov	r4,r8
  828b38:	180f883a 	mov	r7,r3
  828b3c:	100d883a 	mov	r6,r2
  828b40:	08200140 	call	820014 <__muldf3>
  828b44:	843fffc4 	addi	r16,r16,-1
  828b48:	1011883a 	mov	r8,r2
  828b4c:	1813883a 	mov	r9,r3
  828b50:	803ff51e 	bne	r16,zero,828b28 <_mprec_log10+0x50>
  828b54:	4005883a 	mov	r2,r8
  828b58:	4807883a 	mov	r3,r9
  828b5c:	dfc00117 	ldw	ra,4(sp)
  828b60:	dc000017 	ldw	r16,0(sp)
  828b64:	dec00204 	addi	sp,sp,8
  828b68:	f800283a 	ret

00828b6c <__copybits>:
  828b6c:	297fffc4 	addi	r5,r5,-1
  828b70:	30800417 	ldw	r2,16(r6)
  828b74:	280bd17a 	srai	r5,r5,5
  828b78:	31800504 	addi	r6,r6,20
  828b7c:	1085883a 	add	r2,r2,r2
  828b80:	294b883a 	add	r5,r5,r5
  828b84:	294b883a 	add	r5,r5,r5
  828b88:	1085883a 	add	r2,r2,r2
  828b8c:	290b883a 	add	r5,r5,r4
  828b90:	3087883a 	add	r3,r6,r2
  828b94:	29400104 	addi	r5,r5,4
  828b98:	30c0052e 	bgeu	r6,r3,828bb0 <__copybits+0x44>
  828b9c:	30800017 	ldw	r2,0(r6)
  828ba0:	31800104 	addi	r6,r6,4
  828ba4:	20800015 	stw	r2,0(r4)
  828ba8:	21000104 	addi	r4,r4,4
  828bac:	30fffb36 	bltu	r6,r3,828b9c <__copybits+0x30>
  828bb0:	2140032e 	bgeu	r4,r5,828bc0 <__copybits+0x54>
  828bb4:	20000015 	stw	zero,0(r4)
  828bb8:	21000104 	addi	r4,r4,4
  828bbc:	217ffd36 	bltu	r4,r5,828bb4 <__copybits+0x48>
  828bc0:	f800283a 	ret

00828bc4 <__any_on>:
  828bc4:	20800417 	ldw	r2,16(r4)
  828bc8:	2807d17a 	srai	r3,r5,5
  828bcc:	21000504 	addi	r4,r4,20
  828bd0:	10c00d0e 	bge	r2,r3,828c08 <__any_on+0x44>
  828bd4:	1085883a 	add	r2,r2,r2
  828bd8:	1085883a 	add	r2,r2,r2
  828bdc:	208d883a 	add	r6,r4,r2
  828be0:	2180182e 	bgeu	r4,r6,828c44 <__any_on+0x80>
  828be4:	30bfff17 	ldw	r2,-4(r6)
  828be8:	30ffff04 	addi	r3,r6,-4
  828bec:	1000041e 	bne	r2,zero,828c00 <__any_on+0x3c>
  828bf0:	20c0142e 	bgeu	r4,r3,828c44 <__any_on+0x80>
  828bf4:	18ffff04 	addi	r3,r3,-4
  828bf8:	18800017 	ldw	r2,0(r3)
  828bfc:	103ffc26 	beq	r2,zero,828bf0 <__any_on+0x2c>
  828c00:	00800044 	movi	r2,1
  828c04:	f800283a 	ret
  828c08:	18800a0e 	bge	r3,r2,828c34 <__any_on+0x70>
  828c0c:	294007cc 	andi	r5,r5,31
  828c10:	28000826 	beq	r5,zero,828c34 <__any_on+0x70>
  828c14:	18c5883a 	add	r2,r3,r3
  828c18:	1085883a 	add	r2,r2,r2
  828c1c:	208d883a 	add	r6,r4,r2
  828c20:	30c00017 	ldw	r3,0(r6)
  828c24:	1944d83a 	srl	r2,r3,r5
  828c28:	1144983a 	sll	r2,r2,r5
  828c2c:	18bff41e 	bne	r3,r2,828c00 <__any_on+0x3c>
  828c30:	003feb06 	br	828be0 <__any_on+0x1c>
  828c34:	18c5883a 	add	r2,r3,r3
  828c38:	1085883a 	add	r2,r2,r2
  828c3c:	208d883a 	add	r6,r4,r2
  828c40:	003fe706 	br	828be0 <__any_on+0x1c>
  828c44:	0005883a 	mov	r2,zero
  828c48:	f800283a 	ret

00828c4c <_Balloc>:
  828c4c:	20c01317 	ldw	r3,76(r4)
  828c50:	defffb04 	addi	sp,sp,-20
  828c54:	dcc00315 	stw	r19,12(sp)
  828c58:	dc800215 	stw	r18,8(sp)
  828c5c:	dfc00415 	stw	ra,16(sp)
  828c60:	2825883a 	mov	r18,r5
  828c64:	dc400115 	stw	r17,4(sp)
  828c68:	dc000015 	stw	r16,0(sp)
  828c6c:	2027883a 	mov	r19,r4
  828c70:	01800404 	movi	r6,16
  828c74:	01400104 	movi	r5,4
  828c78:	18001726 	beq	r3,zero,828cd8 <_Balloc+0x8c>
  828c7c:	01400044 	movi	r5,1
  828c80:	9485883a 	add	r2,r18,r18
  828c84:	2ca2983a 	sll	r17,r5,r18
  828c88:	1085883a 	add	r2,r2,r2
  828c8c:	10c7883a 	add	r3,r2,r3
  828c90:	1c000017 	ldw	r16,0(r3)
  828c94:	8c4d883a 	add	r6,r17,r17
  828c98:	318d883a 	add	r6,r6,r6
  828c9c:	9809883a 	mov	r4,r19
  828ca0:	31800504 	addi	r6,r6,20
  828ca4:	80001226 	beq	r16,zero,828cf0 <_Balloc+0xa4>
  828ca8:	80800017 	ldw	r2,0(r16)
  828cac:	18800015 	stw	r2,0(r3)
  828cb0:	80000415 	stw	zero,16(r16)
  828cb4:	80000315 	stw	zero,12(r16)
  828cb8:	8005883a 	mov	r2,r16
  828cbc:	dfc00417 	ldw	ra,16(sp)
  828cc0:	dcc00317 	ldw	r19,12(sp)
  828cc4:	dc800217 	ldw	r18,8(sp)
  828cc8:	dc400117 	ldw	r17,4(sp)
  828ccc:	dc000017 	ldw	r16,0(sp)
  828cd0:	dec00504 	addi	sp,sp,20
  828cd4:	f800283a 	ret
  828cd8:	082158c0 	call	82158c <_calloc_r>
  828cdc:	1007883a 	mov	r3,r2
  828ce0:	0021883a 	mov	r16,zero
  828ce4:	98801315 	stw	r2,76(r19)
  828ce8:	103fe41e 	bne	r2,zero,828c7c <_Balloc+0x30>
  828cec:	003ff206 	br	828cb8 <_Balloc+0x6c>
  828cf0:	082158c0 	call	82158c <_calloc_r>
  828cf4:	103ff026 	beq	r2,zero,828cb8 <_Balloc+0x6c>
  828cf8:	1021883a 	mov	r16,r2
  828cfc:	14800115 	stw	r18,4(r2)
  828d00:	14400215 	stw	r17,8(r2)
  828d04:	003fea06 	br	828cb0 <_Balloc+0x64>

00828d08 <__d2b>:
  828d08:	defff504 	addi	sp,sp,-44
  828d0c:	dcc00515 	stw	r19,20(sp)
  828d10:	04c00044 	movi	r19,1
  828d14:	dc000215 	stw	r16,8(sp)
  828d18:	2821883a 	mov	r16,r5
  828d1c:	980b883a 	mov	r5,r19
  828d20:	ddc00915 	stw	r23,36(sp)
  828d24:	dd800815 	stw	r22,32(sp)
  828d28:	dd400715 	stw	r21,28(sp)
  828d2c:	dd000615 	stw	r20,24(sp)
  828d30:	dc800415 	stw	r18,16(sp)
  828d34:	dc400315 	stw	r17,12(sp)
  828d38:	dfc00a15 	stw	ra,40(sp)
  828d3c:	3023883a 	mov	r17,r6
  828d40:	382d883a 	mov	r22,r7
  828d44:	ddc00b17 	ldw	r23,44(sp)
  828d48:	0828c4c0 	call	828c4c <_Balloc>
  828d4c:	1025883a 	mov	r18,r2
  828d50:	00a00034 	movhi	r2,32768
  828d54:	10bfffc4 	addi	r2,r2,-1
  828d58:	8888703a 	and	r4,r17,r2
  828d5c:	202ad53a 	srli	r21,r4,20
  828d60:	00800434 	movhi	r2,16
  828d64:	10bfffc4 	addi	r2,r2,-1
  828d68:	8886703a 	and	r3,r17,r2
  828d6c:	a829003a 	cmpeq	r20,r21,zero
  828d70:	800b883a 	mov	r5,r16
  828d74:	d8c00115 	stw	r3,4(sp)
  828d78:	94000504 	addi	r16,r18,20
  828d7c:	a000021e 	bne	r20,zero,828d88 <__d2b+0x80>
  828d80:	18c00434 	orhi	r3,r3,16
  828d84:	d8c00115 	stw	r3,4(sp)
  828d88:	28002726 	beq	r5,zero,828e28 <__d2b+0x120>
  828d8c:	d809883a 	mov	r4,sp
  828d90:	d9400015 	stw	r5,0(sp)
  828d94:	08287640 	call	828764 <__lo0bits>
  828d98:	100d883a 	mov	r6,r2
  828d9c:	10003526 	beq	r2,zero,828e74 <__d2b+0x16c>
  828da0:	d8c00117 	ldw	r3,4(sp)
  828da4:	00800804 	movi	r2,32
  828da8:	1185c83a 	sub	r2,r2,r6
  828dac:	d9000017 	ldw	r4,0(sp)
  828db0:	1886983a 	sll	r3,r3,r2
  828db4:	1906b03a 	or	r3,r3,r4
  828db8:	90c00515 	stw	r3,20(r18)
  828dbc:	d8c00117 	ldw	r3,4(sp)
  828dc0:	1986d83a 	srl	r3,r3,r6
  828dc4:	d8c00115 	stw	r3,4(sp)
  828dc8:	180b003a 	cmpeq	r5,r3,zero
  828dcc:	00800084 	movi	r2,2
  828dd0:	114bc83a 	sub	r5,r2,r5
  828dd4:	80c00115 	stw	r3,4(r16)
  828dd8:	91400415 	stw	r5,16(r18)
  828ddc:	a0001a1e 	bne	r20,zero,828e48 <__d2b+0x140>
  828de0:	3545883a 	add	r2,r6,r21
  828de4:	10bef344 	addi	r2,r2,-1075
  828de8:	00c00d44 	movi	r3,53
  828dec:	b0800015 	stw	r2,0(r22)
  828df0:	1987c83a 	sub	r3,r3,r6
  828df4:	b8c00015 	stw	r3,0(r23)
  828df8:	9005883a 	mov	r2,r18
  828dfc:	dfc00a17 	ldw	ra,40(sp)
  828e00:	ddc00917 	ldw	r23,36(sp)
  828e04:	dd800817 	ldw	r22,32(sp)
  828e08:	dd400717 	ldw	r21,28(sp)
  828e0c:	dd000617 	ldw	r20,24(sp)
  828e10:	dcc00517 	ldw	r19,20(sp)
  828e14:	dc800417 	ldw	r18,16(sp)
  828e18:	dc400317 	ldw	r17,12(sp)
  828e1c:	dc000217 	ldw	r16,8(sp)
  828e20:	dec00b04 	addi	sp,sp,44
  828e24:	f800283a 	ret
  828e28:	d9000104 	addi	r4,sp,4
  828e2c:	08287640 	call	828764 <__lo0bits>
  828e30:	11800804 	addi	r6,r2,32
  828e34:	d8800117 	ldw	r2,4(sp)
  828e38:	94c00415 	stw	r19,16(r18)
  828e3c:	980b883a 	mov	r5,r19
  828e40:	90800515 	stw	r2,20(r18)
  828e44:	a03fe626 	beq	r20,zero,828de0 <__d2b+0xd8>
  828e48:	2945883a 	add	r2,r5,r5
  828e4c:	1085883a 	add	r2,r2,r2
  828e50:	1405883a 	add	r2,r2,r16
  828e54:	113fff17 	ldw	r4,-4(r2)
  828e58:	30fef384 	addi	r3,r6,-1074
  828e5c:	2820917a 	slli	r16,r5,5
  828e60:	b0c00015 	stw	r3,0(r22)
  828e64:	08286f40 	call	8286f4 <__hi0bits>
  828e68:	80a1c83a 	sub	r16,r16,r2
  828e6c:	bc000015 	stw	r16,0(r23)
  828e70:	003fe106 	br	828df8 <__d2b+0xf0>
  828e74:	d8800017 	ldw	r2,0(sp)
  828e78:	90800515 	stw	r2,20(r18)
  828e7c:	d8c00117 	ldw	r3,4(sp)
  828e80:	003fd106 	br	828dc8 <__d2b+0xc0>

00828e84 <__mdiff>:
  828e84:	defffb04 	addi	sp,sp,-20
  828e88:	dc000015 	stw	r16,0(sp)
  828e8c:	2821883a 	mov	r16,r5
  828e90:	dc800215 	stw	r18,8(sp)
  828e94:	300b883a 	mov	r5,r6
  828e98:	2025883a 	mov	r18,r4
  828e9c:	8009883a 	mov	r4,r16
  828ea0:	dc400115 	stw	r17,4(sp)
  828ea4:	dfc00415 	stw	ra,16(sp)
  828ea8:	dcc00315 	stw	r19,12(sp)
  828eac:	3023883a 	mov	r17,r6
  828eb0:	08288280 	call	828828 <__mcmp>
  828eb4:	10004226 	beq	r2,zero,828fc0 <__mdiff+0x13c>
  828eb8:	10005016 	blt	r2,zero,828ffc <__mdiff+0x178>
  828ebc:	0027883a 	mov	r19,zero
  828ec0:	81400117 	ldw	r5,4(r16)
  828ec4:	9009883a 	mov	r4,r18
  828ec8:	0828c4c0 	call	828c4c <_Balloc>
  828ecc:	1019883a 	mov	r12,r2
  828ed0:	82800417 	ldw	r10,16(r16)
  828ed4:	88800417 	ldw	r2,16(r17)
  828ed8:	81800504 	addi	r6,r16,20
  828edc:	5287883a 	add	r3,r10,r10
  828ee0:	1085883a 	add	r2,r2,r2
  828ee4:	18c7883a 	add	r3,r3,r3
  828ee8:	1085883a 	add	r2,r2,r2
  828eec:	8a000504 	addi	r8,r17,20
  828ef0:	64c00315 	stw	r19,12(r12)
  828ef4:	30db883a 	add	r13,r6,r3
  828ef8:	4097883a 	add	r11,r8,r2
  828efc:	61c00504 	addi	r7,r12,20
  828f00:	0013883a 	mov	r9,zero
  828f04:	31000017 	ldw	r4,0(r6)
  828f08:	41400017 	ldw	r5,0(r8)
  828f0c:	42000104 	addi	r8,r8,4
  828f10:	20bfffcc 	andi	r2,r4,65535
  828f14:	28ffffcc 	andi	r3,r5,65535
  828f18:	10c5c83a 	sub	r2,r2,r3
  828f1c:	1245883a 	add	r2,r2,r9
  828f20:	2008d43a 	srli	r4,r4,16
  828f24:	280ad43a 	srli	r5,r5,16
  828f28:	1007d43a 	srai	r3,r2,16
  828f2c:	3880000d 	sth	r2,0(r7)
  828f30:	2149c83a 	sub	r4,r4,r5
  828f34:	20c9883a 	add	r4,r4,r3
  828f38:	3900008d 	sth	r4,2(r7)
  828f3c:	31800104 	addi	r6,r6,4
  828f40:	39c00104 	addi	r7,r7,4
  828f44:	2013d43a 	srai	r9,r4,16
  828f48:	42ffee36 	bltu	r8,r11,828f04 <__mdiff+0x80>
  828f4c:	33400c2e 	bgeu	r6,r13,828f80 <__mdiff+0xfc>
  828f50:	30800017 	ldw	r2,0(r6)
  828f54:	31800104 	addi	r6,r6,4
  828f58:	10ffffcc 	andi	r3,r2,65535
  828f5c:	1a47883a 	add	r3,r3,r9
  828f60:	1004d43a 	srli	r2,r2,16
  828f64:	1809d43a 	srai	r4,r3,16
  828f68:	38c0000d 	sth	r3,0(r7)
  828f6c:	1105883a 	add	r2,r2,r4
  828f70:	3880008d 	sth	r2,2(r7)
  828f74:	1013d43a 	srai	r9,r2,16
  828f78:	39c00104 	addi	r7,r7,4
  828f7c:	337ff436 	bltu	r6,r13,828f50 <__mdiff+0xcc>
  828f80:	38bfff17 	ldw	r2,-4(r7)
  828f84:	38ffff04 	addi	r3,r7,-4
  828f88:	1000041e 	bne	r2,zero,828f9c <__mdiff+0x118>
  828f8c:	18ffff04 	addi	r3,r3,-4
  828f90:	18800017 	ldw	r2,0(r3)
  828f94:	52bfffc4 	addi	r10,r10,-1
  828f98:	103ffc26 	beq	r2,zero,828f8c <__mdiff+0x108>
  828f9c:	6005883a 	mov	r2,r12
  828fa0:	62800415 	stw	r10,16(r12)
  828fa4:	dfc00417 	ldw	ra,16(sp)
  828fa8:	dcc00317 	ldw	r19,12(sp)
  828fac:	dc800217 	ldw	r18,8(sp)
  828fb0:	dc400117 	ldw	r17,4(sp)
  828fb4:	dc000017 	ldw	r16,0(sp)
  828fb8:	dec00504 	addi	sp,sp,20
  828fbc:	f800283a 	ret
  828fc0:	9009883a 	mov	r4,r18
  828fc4:	000b883a 	mov	r5,zero
  828fc8:	0828c4c0 	call	828c4c <_Balloc>
  828fcc:	1019883a 	mov	r12,r2
  828fd0:	00800044 	movi	r2,1
  828fd4:	60800415 	stw	r2,16(r12)
  828fd8:	6005883a 	mov	r2,r12
  828fdc:	60000515 	stw	zero,20(r12)
  828fe0:	dfc00417 	ldw	ra,16(sp)
  828fe4:	dcc00317 	ldw	r19,12(sp)
  828fe8:	dc800217 	ldw	r18,8(sp)
  828fec:	dc400117 	ldw	r17,4(sp)
  828ff0:	dc000017 	ldw	r16,0(sp)
  828ff4:	dec00504 	addi	sp,sp,20
  828ff8:	f800283a 	ret
  828ffc:	880d883a 	mov	r6,r17
  829000:	04c00044 	movi	r19,1
  829004:	8023883a 	mov	r17,r16
  829008:	3021883a 	mov	r16,r6
  82900c:	003fac06 	br	828ec0 <__mdiff+0x3c>

00829010 <__lshift>:
  829010:	defff904 	addi	sp,sp,-28
  829014:	28800417 	ldw	r2,16(r5)
  829018:	dc000015 	stw	r16,0(sp)
  82901c:	3021d17a 	srai	r16,r6,5
  829020:	28c00217 	ldw	r3,8(r5)
  829024:	10800044 	addi	r2,r2,1
  829028:	dc400115 	stw	r17,4(sp)
  82902c:	80a3883a 	add	r17,r16,r2
  829030:	dd400515 	stw	r21,20(sp)
  829034:	dd000415 	stw	r20,16(sp)
  829038:	dc800215 	stw	r18,8(sp)
  82903c:	dfc00615 	stw	ra,24(sp)
  829040:	2825883a 	mov	r18,r5
  829044:	dcc00315 	stw	r19,12(sp)
  829048:	3029883a 	mov	r20,r6
  82904c:	202b883a 	mov	r21,r4
  829050:	29400117 	ldw	r5,4(r5)
  829054:	1c40030e 	bge	r3,r17,829064 <__lshift+0x54>
  829058:	18c7883a 	add	r3,r3,r3
  82905c:	29400044 	addi	r5,r5,1
  829060:	1c7ffd16 	blt	r3,r17,829058 <__lshift+0x48>
  829064:	a809883a 	mov	r4,r21
  829068:	0828c4c0 	call	828c4c <_Balloc>
  82906c:	1027883a 	mov	r19,r2
  829070:	11400504 	addi	r5,r2,20
  829074:	0400090e 	bge	zero,r16,82909c <__lshift+0x8c>
  829078:	2805883a 	mov	r2,r5
  82907c:	0007883a 	mov	r3,zero
  829080:	18c00044 	addi	r3,r3,1
  829084:	10000015 	stw	zero,0(r2)
  829088:	10800104 	addi	r2,r2,4
  82908c:	80fffc1e 	bne	r16,r3,829080 <__lshift+0x70>
  829090:	8405883a 	add	r2,r16,r16
  829094:	1085883a 	add	r2,r2,r2
  829098:	288b883a 	add	r5,r5,r2
  82909c:	90800417 	ldw	r2,16(r18)
  8290a0:	91000504 	addi	r4,r18,20
  8290a4:	a18007cc 	andi	r6,r20,31
  8290a8:	1085883a 	add	r2,r2,r2
  8290ac:	1085883a 	add	r2,r2,r2
  8290b0:	208f883a 	add	r7,r4,r2
  8290b4:	30001e26 	beq	r6,zero,829130 <__lshift+0x120>
  8290b8:	00800804 	movi	r2,32
  8290bc:	1191c83a 	sub	r8,r2,r6
  8290c0:	0007883a 	mov	r3,zero
  8290c4:	20800017 	ldw	r2,0(r4)
  8290c8:	1184983a 	sll	r2,r2,r6
  8290cc:	1884b03a 	or	r2,r3,r2
  8290d0:	28800015 	stw	r2,0(r5)
  8290d4:	20c00017 	ldw	r3,0(r4)
  8290d8:	21000104 	addi	r4,r4,4
  8290dc:	29400104 	addi	r5,r5,4
  8290e0:	1a06d83a 	srl	r3,r3,r8
  8290e4:	21fff736 	bltu	r4,r7,8290c4 <__lshift+0xb4>
  8290e8:	28c00015 	stw	r3,0(r5)
  8290ec:	18000126 	beq	r3,zero,8290f4 <__lshift+0xe4>
  8290f0:	8c400044 	addi	r17,r17,1
  8290f4:	88bfffc4 	addi	r2,r17,-1
  8290f8:	98800415 	stw	r2,16(r19)
  8290fc:	a809883a 	mov	r4,r21
  829100:	900b883a 	mov	r5,r18
  829104:	08286cc0 	call	8286cc <_Bfree>
  829108:	9805883a 	mov	r2,r19
  82910c:	dfc00617 	ldw	ra,24(sp)
  829110:	dd400517 	ldw	r21,20(sp)
  829114:	dd000417 	ldw	r20,16(sp)
  829118:	dcc00317 	ldw	r19,12(sp)
  82911c:	dc800217 	ldw	r18,8(sp)
  829120:	dc400117 	ldw	r17,4(sp)
  829124:	dc000017 	ldw	r16,0(sp)
  829128:	dec00704 	addi	sp,sp,28
  82912c:	f800283a 	ret
  829130:	20800017 	ldw	r2,0(r4)
  829134:	21000104 	addi	r4,r4,4
  829138:	28800015 	stw	r2,0(r5)
  82913c:	29400104 	addi	r5,r5,4
  829140:	21ffec2e 	bgeu	r4,r7,8290f4 <__lshift+0xe4>
  829144:	20800017 	ldw	r2,0(r4)
  829148:	21000104 	addi	r4,r4,4
  82914c:	28800015 	stw	r2,0(r5)
  829150:	29400104 	addi	r5,r5,4
  829154:	21fff636 	bltu	r4,r7,829130 <__lshift+0x120>
  829158:	003fe606 	br	8290f4 <__lshift+0xe4>

0082915c <__multiply>:
  82915c:	defff904 	addi	sp,sp,-28
  829160:	dcc00315 	stw	r19,12(sp)
  829164:	dc800215 	stw	r18,8(sp)
  829168:	2cc00417 	ldw	r19,16(r5)
  82916c:	34800417 	ldw	r18,16(r6)
  829170:	dd000415 	stw	r20,16(sp)
  829174:	dc400115 	stw	r17,4(sp)
  829178:	dfc00615 	stw	ra,24(sp)
  82917c:	dd400515 	stw	r21,20(sp)
  829180:	dc000015 	stw	r16,0(sp)
  829184:	2823883a 	mov	r17,r5
  829188:	3029883a 	mov	r20,r6
  82918c:	9c80040e 	bge	r19,r18,8291a0 <__multiply+0x44>
  829190:	9027883a 	mov	r19,r18
  829194:	2c800417 	ldw	r18,16(r5)
  829198:	2829883a 	mov	r20,r5
  82919c:	3023883a 	mov	r17,r6
  8291a0:	88800217 	ldw	r2,8(r17)
  8291a4:	9ca1883a 	add	r16,r19,r18
  8291a8:	89400117 	ldw	r5,4(r17)
  8291ac:	1400010e 	bge	r2,r16,8291b4 <__multiply+0x58>
  8291b0:	29400044 	addi	r5,r5,1
  8291b4:	0828c4c0 	call	828c4c <_Balloc>
  8291b8:	102b883a 	mov	r21,r2
  8291bc:	8405883a 	add	r2,r16,r16
  8291c0:	1085883a 	add	r2,r2,r2
  8291c4:	a9000504 	addi	r4,r21,20
  8291c8:	209d883a 	add	r14,r4,r2
  8291cc:	2380042e 	bgeu	r4,r14,8291e0 <__multiply+0x84>
  8291d0:	2005883a 	mov	r2,r4
  8291d4:	10000015 	stw	zero,0(r2)
  8291d8:	10800104 	addi	r2,r2,4
  8291dc:	13bffd36 	bltu	r2,r14,8291d4 <__multiply+0x78>
  8291e0:	9485883a 	add	r2,r18,r18
  8291e4:	9cc7883a 	add	r3,r19,r19
  8291e8:	a1800504 	addi	r6,r20,20
  8291ec:	1085883a 	add	r2,r2,r2
  8291f0:	8b400504 	addi	r13,r17,20
  8291f4:	18c7883a 	add	r3,r3,r3
  8291f8:	309f883a 	add	r15,r6,r2
  8291fc:	68d7883a 	add	r11,r13,r3
  829200:	33c03b2e 	bgeu	r6,r15,8292f0 <__multiply+0x194>
  829204:	2019883a 	mov	r12,r4
  829208:	30800017 	ldw	r2,0(r6)
  82920c:	127fffcc 	andi	r9,r2,65535
  829210:	48001826 	beq	r9,zero,829274 <__multiply+0x118>
  829214:	6811883a 	mov	r8,r13
  829218:	600f883a 	mov	r7,r12
  82921c:	0015883a 	mov	r10,zero
  829220:	40c00017 	ldw	r3,0(r8)
  829224:	39400017 	ldw	r5,0(r7)
  829228:	42000104 	addi	r8,r8,4
  82922c:	193fffcc 	andi	r4,r3,65535
  829230:	4909383a 	mul	r4,r9,r4
  829234:	1806d43a 	srli	r3,r3,16
  829238:	28bfffcc 	andi	r2,r5,65535
  82923c:	5085883a 	add	r2,r10,r2
  829240:	2089883a 	add	r4,r4,r2
  829244:	48c7383a 	mul	r3,r9,r3
  829248:	280ad43a 	srli	r5,r5,16
  82924c:	2004d43a 	srli	r2,r4,16
  829250:	3900000d 	sth	r4,0(r7)
  829254:	1947883a 	add	r3,r3,r5
  829258:	10c5883a 	add	r2,r2,r3
  82925c:	3880008d 	sth	r2,2(r7)
  829260:	1014d43a 	srli	r10,r2,16
  829264:	39c00104 	addi	r7,r7,4
  829268:	42ffed36 	bltu	r8,r11,829220 <__multiply+0xc4>
  82926c:	3a800015 	stw	r10,0(r7)
  829270:	30800017 	ldw	r2,0(r6)
  829274:	1012d43a 	srli	r9,r2,16
  829278:	48001926 	beq	r9,zero,8292e0 <__multiply+0x184>
  82927c:	60800017 	ldw	r2,0(r12)
  829280:	6811883a 	mov	r8,r13
  829284:	600f883a 	mov	r7,r12
  829288:	0015883a 	mov	r10,zero
  82928c:	100b883a 	mov	r5,r2
  829290:	41000017 	ldw	r4,0(r8)
  829294:	2806d43a 	srli	r3,r5,16
  829298:	3880000d 	sth	r2,0(r7)
  82929c:	20bfffcc 	andi	r2,r4,65535
  8292a0:	4885383a 	mul	r2,r9,r2
  8292a4:	50c7883a 	add	r3,r10,r3
  8292a8:	2008d43a 	srli	r4,r4,16
  8292ac:	10c5883a 	add	r2,r2,r3
  8292b0:	3880008d 	sth	r2,2(r7)
  8292b4:	39c00104 	addi	r7,r7,4
  8292b8:	39400017 	ldw	r5,0(r7)
  8292bc:	4909383a 	mul	r4,r9,r4
  8292c0:	1004d43a 	srli	r2,r2,16
  8292c4:	28ffffcc 	andi	r3,r5,65535
  8292c8:	20c9883a 	add	r4,r4,r3
  8292cc:	1105883a 	add	r2,r2,r4
  8292d0:	42000104 	addi	r8,r8,4
  8292d4:	1014d43a 	srli	r10,r2,16
  8292d8:	42ffed36 	bltu	r8,r11,829290 <__multiply+0x134>
  8292dc:	38800015 	stw	r2,0(r7)
  8292e0:	31800104 	addi	r6,r6,4
  8292e4:	33c0022e 	bgeu	r6,r15,8292f0 <__multiply+0x194>
  8292e8:	63000104 	addi	r12,r12,4
  8292ec:	003fc606 	br	829208 <__multiply+0xac>
  8292f0:	0400090e 	bge	zero,r16,829318 <__multiply+0x1bc>
  8292f4:	70bfff17 	ldw	r2,-4(r14)
  8292f8:	70ffff04 	addi	r3,r14,-4
  8292fc:	10000326 	beq	r2,zero,82930c <__multiply+0x1b0>
  829300:	00000506 	br	829318 <__multiply+0x1bc>
  829304:	18800017 	ldw	r2,0(r3)
  829308:	1000031e 	bne	r2,zero,829318 <__multiply+0x1bc>
  82930c:	843fffc4 	addi	r16,r16,-1
  829310:	18ffff04 	addi	r3,r3,-4
  829314:	803ffb1e 	bne	r16,zero,829304 <__multiply+0x1a8>
  829318:	a805883a 	mov	r2,r21
  82931c:	ac000415 	stw	r16,16(r21)
  829320:	dfc00617 	ldw	ra,24(sp)
  829324:	dd400517 	ldw	r21,20(sp)
  829328:	dd000417 	ldw	r20,16(sp)
  82932c:	dcc00317 	ldw	r19,12(sp)
  829330:	dc800217 	ldw	r18,8(sp)
  829334:	dc400117 	ldw	r17,4(sp)
  829338:	dc000017 	ldw	r16,0(sp)
  82933c:	dec00704 	addi	sp,sp,28
  829340:	f800283a 	ret

00829344 <__i2b>:
  829344:	defffd04 	addi	sp,sp,-12
  829348:	dc000015 	stw	r16,0(sp)
  82934c:	04000044 	movi	r16,1
  829350:	dc800115 	stw	r18,4(sp)
  829354:	2825883a 	mov	r18,r5
  829358:	800b883a 	mov	r5,r16
  82935c:	dfc00215 	stw	ra,8(sp)
  829360:	0828c4c0 	call	828c4c <_Balloc>
  829364:	14000415 	stw	r16,16(r2)
  829368:	14800515 	stw	r18,20(r2)
  82936c:	dfc00217 	ldw	ra,8(sp)
  829370:	dc800117 	ldw	r18,4(sp)
  829374:	dc000017 	ldw	r16,0(sp)
  829378:	dec00304 	addi	sp,sp,12
  82937c:	f800283a 	ret

00829380 <__multadd>:
  829380:	defffa04 	addi	sp,sp,-24
  829384:	dc800215 	stw	r18,8(sp)
  829388:	2c800417 	ldw	r18,16(r5)
  82938c:	dd000415 	stw	r20,16(sp)
  829390:	dcc00315 	stw	r19,12(sp)
  829394:	dc000015 	stw	r16,0(sp)
  829398:	dfc00515 	stw	ra,20(sp)
  82939c:	3821883a 	mov	r16,r7
  8293a0:	dc400115 	stw	r17,4(sp)
  8293a4:	2827883a 	mov	r19,r5
  8293a8:	2029883a 	mov	r20,r4
  8293ac:	2a000504 	addi	r8,r5,20
  8293b0:	000f883a 	mov	r7,zero
  8293b4:	40800017 	ldw	r2,0(r8)
  8293b8:	39c00044 	addi	r7,r7,1
  8293bc:	10ffffcc 	andi	r3,r2,65535
  8293c0:	1987383a 	mul	r3,r3,r6
  8293c4:	1004d43a 	srli	r2,r2,16
  8293c8:	1c07883a 	add	r3,r3,r16
  8293cc:	180ad43a 	srli	r5,r3,16
  8293d0:	1185383a 	mul	r2,r2,r6
  8293d4:	18ffffcc 	andi	r3,r3,65535
  8293d8:	1145883a 	add	r2,r2,r5
  8293dc:	1008943a 	slli	r4,r2,16
  8293e0:	1020d43a 	srli	r16,r2,16
  8293e4:	20c9883a 	add	r4,r4,r3
  8293e8:	41000015 	stw	r4,0(r8)
  8293ec:	42000104 	addi	r8,r8,4
  8293f0:	3cbff016 	blt	r7,r18,8293b4 <__multadd+0x34>
  8293f4:	80000826 	beq	r16,zero,829418 <__multadd+0x98>
  8293f8:	98800217 	ldw	r2,8(r19)
  8293fc:	90800f0e 	bge	r18,r2,82943c <__multadd+0xbc>
  829400:	9485883a 	add	r2,r18,r18
  829404:	1085883a 	add	r2,r2,r2
  829408:	14c5883a 	add	r2,r2,r19
  82940c:	90c00044 	addi	r3,r18,1
  829410:	14000515 	stw	r16,20(r2)
  829414:	98c00415 	stw	r3,16(r19)
  829418:	9805883a 	mov	r2,r19
  82941c:	dfc00517 	ldw	ra,20(sp)
  829420:	dd000417 	ldw	r20,16(sp)
  829424:	dcc00317 	ldw	r19,12(sp)
  829428:	dc800217 	ldw	r18,8(sp)
  82942c:	dc400117 	ldw	r17,4(sp)
  829430:	dc000017 	ldw	r16,0(sp)
  829434:	dec00604 	addi	sp,sp,24
  829438:	f800283a 	ret
  82943c:	99400117 	ldw	r5,4(r19)
  829440:	a009883a 	mov	r4,r20
  829444:	29400044 	addi	r5,r5,1
  829448:	0828c4c0 	call	828c4c <_Balloc>
  82944c:	99800417 	ldw	r6,16(r19)
  829450:	99400304 	addi	r5,r19,12
  829454:	11000304 	addi	r4,r2,12
  829458:	318d883a 	add	r6,r6,r6
  82945c:	318d883a 	add	r6,r6,r6
  829460:	31800204 	addi	r6,r6,8
  829464:	1023883a 	mov	r17,r2
  829468:	0821e500 	call	821e50 <memcpy>
  82946c:	980b883a 	mov	r5,r19
  829470:	a009883a 	mov	r4,r20
  829474:	08286cc0 	call	8286cc <_Bfree>
  829478:	8827883a 	mov	r19,r17
  82947c:	003fe006 	br	829400 <__multadd+0x80>

00829480 <__pow5mult>:
  829480:	defffa04 	addi	sp,sp,-24
  829484:	308000cc 	andi	r2,r6,3
  829488:	dd000415 	stw	r20,16(sp)
  82948c:	dcc00315 	stw	r19,12(sp)
  829490:	dc000015 	stw	r16,0(sp)
  829494:	dfc00515 	stw	ra,20(sp)
  829498:	dc800215 	stw	r18,8(sp)
  82949c:	dc400115 	stw	r17,4(sp)
  8294a0:	3021883a 	mov	r16,r6
  8294a4:	2027883a 	mov	r19,r4
  8294a8:	2829883a 	mov	r20,r5
  8294ac:	10002b1e 	bne	r2,zero,82955c <__pow5mult+0xdc>
  8294b0:	8025d0ba 	srai	r18,r16,2
  8294b4:	90001b26 	beq	r18,zero,829524 <__pow5mult+0xa4>
  8294b8:	9c001217 	ldw	r16,72(r19)
  8294bc:	8000081e 	bne	r16,zero,8294e0 <__pow5mult+0x60>
  8294c0:	00003006 	br	829584 <__pow5mult+0x104>
  8294c4:	800b883a 	mov	r5,r16
  8294c8:	800d883a 	mov	r6,r16
  8294cc:	9809883a 	mov	r4,r19
  8294d0:	90001426 	beq	r18,zero,829524 <__pow5mult+0xa4>
  8294d4:	80800017 	ldw	r2,0(r16)
  8294d8:	10001b26 	beq	r2,zero,829548 <__pow5mult+0xc8>
  8294dc:	1021883a 	mov	r16,r2
  8294e0:	9080004c 	andi	r2,r18,1
  8294e4:	1005003a 	cmpeq	r2,r2,zero
  8294e8:	9025d07a 	srai	r18,r18,1
  8294ec:	800d883a 	mov	r6,r16
  8294f0:	9809883a 	mov	r4,r19
  8294f4:	a00b883a 	mov	r5,r20
  8294f8:	103ff21e 	bne	r2,zero,8294c4 <__pow5mult+0x44>
  8294fc:	082915c0 	call	82915c <__multiply>
  829500:	a00b883a 	mov	r5,r20
  829504:	9809883a 	mov	r4,r19
  829508:	1023883a 	mov	r17,r2
  82950c:	08286cc0 	call	8286cc <_Bfree>
  829510:	8829883a 	mov	r20,r17
  829514:	800b883a 	mov	r5,r16
  829518:	800d883a 	mov	r6,r16
  82951c:	9809883a 	mov	r4,r19
  829520:	903fec1e 	bne	r18,zero,8294d4 <__pow5mult+0x54>
  829524:	a005883a 	mov	r2,r20
  829528:	dfc00517 	ldw	ra,20(sp)
  82952c:	dd000417 	ldw	r20,16(sp)
  829530:	dcc00317 	ldw	r19,12(sp)
  829534:	dc800217 	ldw	r18,8(sp)
  829538:	dc400117 	ldw	r17,4(sp)
  82953c:	dc000017 	ldw	r16,0(sp)
  829540:	dec00604 	addi	sp,sp,24
  829544:	f800283a 	ret
  829548:	082915c0 	call	82915c <__multiply>
  82954c:	80800015 	stw	r2,0(r16)
  829550:	1021883a 	mov	r16,r2
  829554:	10000015 	stw	zero,0(r2)
  829558:	003fe106 	br	8294e0 <__pow5mult+0x60>
  82955c:	1085883a 	add	r2,r2,r2
  829560:	00c02134 	movhi	r3,132
  829564:	18fb9c04 	addi	r3,r3,-4496
  829568:	1085883a 	add	r2,r2,r2
  82956c:	10c5883a 	add	r2,r2,r3
  829570:	11bfff17 	ldw	r6,-4(r2)
  829574:	000f883a 	mov	r7,zero
  829578:	08293800 	call	829380 <__multadd>
  82957c:	1029883a 	mov	r20,r2
  829580:	003fcb06 	br	8294b0 <__pow5mult+0x30>
  829584:	9809883a 	mov	r4,r19
  829588:	01409c44 	movi	r5,625
  82958c:	08293440 	call	829344 <__i2b>
  829590:	98801215 	stw	r2,72(r19)
  829594:	1021883a 	mov	r16,r2
  829598:	10000015 	stw	zero,0(r2)
  82959c:	003fd006 	br	8294e0 <__pow5mult+0x60>

008295a0 <__s2b>:
  8295a0:	defff904 	addi	sp,sp,-28
  8295a4:	dcc00315 	stw	r19,12(sp)
  8295a8:	dc800215 	stw	r18,8(sp)
  8295ac:	2827883a 	mov	r19,r5
  8295b0:	2025883a 	mov	r18,r4
  8295b4:	01400244 	movi	r5,9
  8295b8:	39000204 	addi	r4,r7,8
  8295bc:	dd000415 	stw	r20,16(sp)
  8295c0:	dc400115 	stw	r17,4(sp)
  8295c4:	dfc00615 	stw	ra,24(sp)
  8295c8:	dd400515 	stw	r21,20(sp)
  8295cc:	dc000015 	stw	r16,0(sp)
  8295d0:	3829883a 	mov	r20,r7
  8295d4:	3023883a 	mov	r17,r6
  8295d8:	0820b480 	call	820b48 <__divsi3>
  8295dc:	00c00044 	movi	r3,1
  8295e0:	1880350e 	bge	r3,r2,8296b8 <__s2b+0x118>
  8295e4:	000b883a 	mov	r5,zero
  8295e8:	18c7883a 	add	r3,r3,r3
  8295ec:	29400044 	addi	r5,r5,1
  8295f0:	18bffd16 	blt	r3,r2,8295e8 <__s2b+0x48>
  8295f4:	9009883a 	mov	r4,r18
  8295f8:	0828c4c0 	call	828c4c <_Balloc>
  8295fc:	1011883a 	mov	r8,r2
  829600:	d8800717 	ldw	r2,28(sp)
  829604:	00c00044 	movi	r3,1
  829608:	01800244 	movi	r6,9
  82960c:	40800515 	stw	r2,20(r8)
  829610:	40c00415 	stw	r3,16(r8)
  829614:	3440260e 	bge	r6,r17,8296b0 <__s2b+0x110>
  829618:	3021883a 	mov	r16,r6
  82961c:	99ab883a 	add	r21,r19,r6
  829620:	9c05883a 	add	r2,r19,r16
  829624:	11c00007 	ldb	r7,0(r2)
  829628:	400b883a 	mov	r5,r8
  82962c:	9009883a 	mov	r4,r18
  829630:	39fff404 	addi	r7,r7,-48
  829634:	01800284 	movi	r6,10
  829638:	08293800 	call	829380 <__multadd>
  82963c:	84000044 	addi	r16,r16,1
  829640:	1011883a 	mov	r8,r2
  829644:	8c3ff61e 	bne	r17,r16,829620 <__s2b+0x80>
  829648:	ac45883a 	add	r2,r21,r17
  82964c:	117ffe04 	addi	r5,r2,-8
  829650:	880d883a 	mov	r6,r17
  829654:	35000c0e 	bge	r6,r20,829688 <__s2b+0xe8>
  829658:	a185c83a 	sub	r2,r20,r6
  82965c:	2821883a 	mov	r16,r5
  829660:	28a3883a 	add	r17,r5,r2
  829664:	81c00007 	ldb	r7,0(r16)
  829668:	400b883a 	mov	r5,r8
  82966c:	9009883a 	mov	r4,r18
  829670:	39fff404 	addi	r7,r7,-48
  829674:	01800284 	movi	r6,10
  829678:	08293800 	call	829380 <__multadd>
  82967c:	84000044 	addi	r16,r16,1
  829680:	1011883a 	mov	r8,r2
  829684:	847ff71e 	bne	r16,r17,829664 <__s2b+0xc4>
  829688:	4005883a 	mov	r2,r8
  82968c:	dfc00617 	ldw	ra,24(sp)
  829690:	dd400517 	ldw	r21,20(sp)
  829694:	dd000417 	ldw	r20,16(sp)
  829698:	dcc00317 	ldw	r19,12(sp)
  82969c:	dc800217 	ldw	r18,8(sp)
  8296a0:	dc400117 	ldw	r17,4(sp)
  8296a4:	dc000017 	ldw	r16,0(sp)
  8296a8:	dec00704 	addi	sp,sp,28
  8296ac:	f800283a 	ret
  8296b0:	99400284 	addi	r5,r19,10
  8296b4:	003fe706 	br	829654 <__s2b+0xb4>
  8296b8:	000b883a 	mov	r5,zero
  8296bc:	003fcd06 	br	8295f4 <__s2b+0x54>

008296c0 <__isinfd>:
  8296c0:	200d883a 	mov	r6,r4
  8296c4:	0109c83a 	sub	r4,zero,r4
  8296c8:	2188b03a 	or	r4,r4,r6
  8296cc:	2008d7fa 	srli	r4,r4,31
  8296d0:	00a00034 	movhi	r2,32768
  8296d4:	10bfffc4 	addi	r2,r2,-1
  8296d8:	1144703a 	and	r2,r2,r5
  8296dc:	2088b03a 	or	r4,r4,r2
  8296e0:	009ffc34 	movhi	r2,32752
  8296e4:	1105c83a 	sub	r2,r2,r4
  8296e8:	0087c83a 	sub	r3,zero,r2
  8296ec:	10c4b03a 	or	r2,r2,r3
  8296f0:	1004d7fa 	srli	r2,r2,31
  8296f4:	00c00044 	movi	r3,1
  8296f8:	1885c83a 	sub	r2,r3,r2
  8296fc:	f800283a 	ret

00829700 <__sclose>:
  829700:	2940038f 	ldh	r5,14(r5)
  829704:	08299a41 	jmpi	8299a4 <_close_r>

00829708 <__sseek>:
  829708:	defffe04 	addi	sp,sp,-8
  82970c:	dc000015 	stw	r16,0(sp)
  829710:	2821883a 	mov	r16,r5
  829714:	2940038f 	ldh	r5,14(r5)
  829718:	dfc00115 	stw	ra,4(sp)
  82971c:	0829c1c0 	call	829c1c <_lseek_r>
  829720:	1007883a 	mov	r3,r2
  829724:	00bfffc4 	movi	r2,-1
  829728:	18800926 	beq	r3,r2,829750 <__sseek+0x48>
  82972c:	8080030b 	ldhu	r2,12(r16)
  829730:	80c01415 	stw	r3,80(r16)
  829734:	10840014 	ori	r2,r2,4096
  829738:	8080030d 	sth	r2,12(r16)
  82973c:	1805883a 	mov	r2,r3
  829740:	dfc00117 	ldw	ra,4(sp)
  829744:	dc000017 	ldw	r16,0(sp)
  829748:	dec00204 	addi	sp,sp,8
  82974c:	f800283a 	ret
  829750:	8080030b 	ldhu	r2,12(r16)
  829754:	10bbffcc 	andi	r2,r2,61439
  829758:	8080030d 	sth	r2,12(r16)
  82975c:	1805883a 	mov	r2,r3
  829760:	dfc00117 	ldw	ra,4(sp)
  829764:	dc000017 	ldw	r16,0(sp)
  829768:	dec00204 	addi	sp,sp,8
  82976c:	f800283a 	ret

00829770 <__swrite>:
  829770:	2880030b 	ldhu	r2,12(r5)
  829774:	defffb04 	addi	sp,sp,-20
  829778:	dcc00315 	stw	r19,12(sp)
  82977c:	1080400c 	andi	r2,r2,256
  829780:	dc800215 	stw	r18,8(sp)
  829784:	dc400115 	stw	r17,4(sp)
  829788:	dc000015 	stw	r16,0(sp)
  82978c:	3027883a 	mov	r19,r6
  829790:	3825883a 	mov	r18,r7
  829794:	dfc00415 	stw	ra,16(sp)
  829798:	2821883a 	mov	r16,r5
  82979c:	000d883a 	mov	r6,zero
  8297a0:	01c00084 	movi	r7,2
  8297a4:	2023883a 	mov	r17,r4
  8297a8:	10000226 	beq	r2,zero,8297b4 <__swrite+0x44>
  8297ac:	2940038f 	ldh	r5,14(r5)
  8297b0:	0829c1c0 	call	829c1c <_lseek_r>
  8297b4:	8080030b 	ldhu	r2,12(r16)
  8297b8:	8140038f 	ldh	r5,14(r16)
  8297bc:	8809883a 	mov	r4,r17
  8297c0:	10bbffcc 	andi	r2,r2,61439
  8297c4:	980d883a 	mov	r6,r19
  8297c8:	900f883a 	mov	r7,r18
  8297cc:	8080030d 	sth	r2,12(r16)
  8297d0:	dfc00417 	ldw	ra,16(sp)
  8297d4:	dcc00317 	ldw	r19,12(sp)
  8297d8:	dc800217 	ldw	r18,8(sp)
  8297dc:	dc400117 	ldw	r17,4(sp)
  8297e0:	dc000017 	ldw	r16,0(sp)
  8297e4:	dec00504 	addi	sp,sp,20
  8297e8:	082992c1 	jmpi	82992c <_write_r>

008297ec <__sread>:
  8297ec:	defffe04 	addi	sp,sp,-8
  8297f0:	dc000015 	stw	r16,0(sp)
  8297f4:	2821883a 	mov	r16,r5
  8297f8:	2940038f 	ldh	r5,14(r5)
  8297fc:	dfc00115 	stw	ra,4(sp)
  829800:	0829c940 	call	829c94 <_read_r>
  829804:	1007883a 	mov	r3,r2
  829808:	10000816 	blt	r2,zero,82982c <__sread+0x40>
  82980c:	80801417 	ldw	r2,80(r16)
  829810:	10c5883a 	add	r2,r2,r3
  829814:	80801415 	stw	r2,80(r16)
  829818:	1805883a 	mov	r2,r3
  82981c:	dfc00117 	ldw	ra,4(sp)
  829820:	dc000017 	ldw	r16,0(sp)
  829824:	dec00204 	addi	sp,sp,8
  829828:	f800283a 	ret
  82982c:	8080030b 	ldhu	r2,12(r16)
  829830:	10bbffcc 	andi	r2,r2,61439
  829834:	8080030d 	sth	r2,12(r16)
  829838:	1805883a 	mov	r2,r3
  82983c:	dfc00117 	ldw	ra,4(sp)
  829840:	dc000017 	ldw	r16,0(sp)
  829844:	dec00204 	addi	sp,sp,8
  829848:	f800283a 	ret

0082984c <strchr>:
  82984c:	208000cc 	andi	r2,r4,3
  829850:	2007883a 	mov	r3,r4
  829854:	1000311e 	bne	r2,zero,82991c <strchr+0xd0>
  829858:	29c03fcc 	andi	r7,r5,255
  82985c:	0015883a 	mov	r10,zero
  829860:	0007883a 	mov	r3,zero
  829864:	01400104 	movi	r5,4
  829868:	5004923a 	slli	r2,r10,8
  82986c:	18c00044 	addi	r3,r3,1
  829870:	3894b03a 	or	r10,r7,r2
  829874:	197ffc1e 	bne	r3,r5,829868 <strchr+0x1c>
  829878:	200d883a 	mov	r6,r4
  82987c:	21000017 	ldw	r4,0(r4)
  829880:	017fbff4 	movhi	r5,65279
  829884:	297fbfc4 	addi	r5,r5,-257
  829888:	02202074 	movhi	r8,32897
  82988c:	42202004 	addi	r8,r8,-32640
  829890:	2145883a 	add	r2,r4,r5
  829894:	1204703a 	and	r2,r2,r8
  829898:	0106303a 	nor	r3,zero,r4
  82989c:	10c4703a 	and	r2,r2,r3
  8298a0:	1000151e 	bne	r2,zero,8298f8 <strchr+0xac>
  8298a4:	2284f03a 	xor	r2,r4,r10
  8298a8:	1147883a 	add	r3,r2,r5
  8298ac:	1a06703a 	and	r3,r3,r8
  8298b0:	0084303a 	nor	r2,zero,r2
  8298b4:	10c4703a 	and	r2,r2,r3
  8298b8:	10000f1e 	bne	r2,zero,8298f8 <strchr+0xac>
  8298bc:	2813883a 	mov	r9,r5
  8298c0:	00000106 	br	8298c8 <strchr+0x7c>
  8298c4:	18000c1e 	bne	r3,zero,8298f8 <strchr+0xac>
  8298c8:	31800104 	addi	r6,r6,4
  8298cc:	30800017 	ldw	r2,0(r6)
  8298d0:	1286f03a 	xor	r3,r2,r10
  8298d4:	124b883a 	add	r5,r2,r9
  8298d8:	1a49883a 	add	r4,r3,r9
  8298dc:	2a0a703a 	and	r5,r5,r8
  8298e0:	0084303a 	nor	r2,zero,r2
  8298e4:	2208703a 	and	r4,r4,r8
  8298e8:	00c6303a 	nor	r3,zero,r3
  8298ec:	1144703a 	and	r2,r2,r5
  8298f0:	1906703a 	and	r3,r3,r4
  8298f4:	103ff326 	beq	r2,zero,8298c4 <strchr+0x78>
  8298f8:	3007883a 	mov	r3,r6
  8298fc:	00000206 	br	829908 <strchr+0xbc>
  829900:	38800426 	beq	r7,r2,829914 <strchr+0xc8>
  829904:	18c00044 	addi	r3,r3,1
  829908:	18800003 	ldbu	r2,0(r3)
  82990c:	103ffc1e 	bne	r2,zero,829900 <strchr+0xb4>
  829910:	3800041e 	bne	r7,zero,829924 <strchr+0xd8>
  829914:	1805883a 	mov	r2,r3
  829918:	f800283a 	ret
  82991c:	29c03fcc 	andi	r7,r5,255
  829920:	003ff906 	br	829908 <strchr+0xbc>
  829924:	0005883a 	mov	r2,zero
  829928:	f800283a 	ret

0082992c <_write_r>:
  82992c:	defffd04 	addi	sp,sp,-12
  829930:	dc000015 	stw	r16,0(sp)
  829934:	04002134 	movhi	r16,132
  829938:	840a4104 	addi	r16,r16,10500
  82993c:	dc400115 	stw	r17,4(sp)
  829940:	80000015 	stw	zero,0(r16)
  829944:	2023883a 	mov	r17,r4
  829948:	2809883a 	mov	r4,r5
  82994c:	300b883a 	mov	r5,r6
  829950:	380d883a 	mov	r6,r7
  829954:	dfc00215 	stw	ra,8(sp)
  829958:	082b3b40 	call	82b3b4 <write>
  82995c:	1007883a 	mov	r3,r2
  829960:	00bfffc4 	movi	r2,-1
  829964:	18800626 	beq	r3,r2,829980 <_write_r+0x54>
  829968:	1805883a 	mov	r2,r3
  82996c:	dfc00217 	ldw	ra,8(sp)
  829970:	dc400117 	ldw	r17,4(sp)
  829974:	dc000017 	ldw	r16,0(sp)
  829978:	dec00304 	addi	sp,sp,12
  82997c:	f800283a 	ret
  829980:	80800017 	ldw	r2,0(r16)
  829984:	103ff826 	beq	r2,zero,829968 <_write_r+0x3c>
  829988:	88800015 	stw	r2,0(r17)
  82998c:	1805883a 	mov	r2,r3
  829990:	dfc00217 	ldw	ra,8(sp)
  829994:	dc400117 	ldw	r17,4(sp)
  829998:	dc000017 	ldw	r16,0(sp)
  82999c:	dec00304 	addi	sp,sp,12
  8299a0:	f800283a 	ret

008299a4 <_close_r>:
  8299a4:	defffd04 	addi	sp,sp,-12
  8299a8:	dc000015 	stw	r16,0(sp)
  8299ac:	04002134 	movhi	r16,132
  8299b0:	840a4104 	addi	r16,r16,10500
  8299b4:	dc400115 	stw	r17,4(sp)
  8299b8:	80000015 	stw	zero,0(r16)
  8299bc:	2023883a 	mov	r17,r4
  8299c0:	2809883a 	mov	r4,r5
  8299c4:	dfc00215 	stw	ra,8(sp)
  8299c8:	082ab480 	call	82ab48 <close>
  8299cc:	1007883a 	mov	r3,r2
  8299d0:	00bfffc4 	movi	r2,-1
  8299d4:	18800626 	beq	r3,r2,8299f0 <_close_r+0x4c>
  8299d8:	1805883a 	mov	r2,r3
  8299dc:	dfc00217 	ldw	ra,8(sp)
  8299e0:	dc400117 	ldw	r17,4(sp)
  8299e4:	dc000017 	ldw	r16,0(sp)
  8299e8:	dec00304 	addi	sp,sp,12
  8299ec:	f800283a 	ret
  8299f0:	80800017 	ldw	r2,0(r16)
  8299f4:	103ff826 	beq	r2,zero,8299d8 <_close_r+0x34>
  8299f8:	88800015 	stw	r2,0(r17)
  8299fc:	1805883a 	mov	r2,r3
  829a00:	dfc00217 	ldw	ra,8(sp)
  829a04:	dc400117 	ldw	r17,4(sp)
  829a08:	dc000017 	ldw	r16,0(sp)
  829a0c:	dec00304 	addi	sp,sp,12
  829a10:	f800283a 	ret

00829a14 <_fclose_r>:
  829a14:	defffc04 	addi	sp,sp,-16
  829a18:	dc400115 	stw	r17,4(sp)
  829a1c:	dc000015 	stw	r16,0(sp)
  829a20:	dfc00315 	stw	ra,12(sp)
  829a24:	dc800215 	stw	r18,8(sp)
  829a28:	2821883a 	mov	r16,r5
  829a2c:	2023883a 	mov	r17,r4
  829a30:	28002926 	beq	r5,zero,829ad8 <_fclose_r+0xc4>
  829a34:	08276580 	call	827658 <__sfp_lock_acquire>
  829a38:	88000226 	beq	r17,zero,829a44 <_fclose_r+0x30>
  829a3c:	88800e17 	ldw	r2,56(r17)
  829a40:	10002d26 	beq	r2,zero,829af8 <_fclose_r+0xe4>
  829a44:	8080030f 	ldh	r2,12(r16)
  829a48:	10002226 	beq	r2,zero,829ad4 <_fclose_r+0xc0>
  829a4c:	8809883a 	mov	r4,r17
  829a50:	800b883a 	mov	r5,r16
  829a54:	08273d00 	call	8273d0 <_fflush_r>
  829a58:	1025883a 	mov	r18,r2
  829a5c:	80800b17 	ldw	r2,44(r16)
  829a60:	10000426 	beq	r2,zero,829a74 <_fclose_r+0x60>
  829a64:	81400717 	ldw	r5,28(r16)
  829a68:	8809883a 	mov	r4,r17
  829a6c:	103ee83a 	callr	r2
  829a70:	10002a16 	blt	r2,zero,829b1c <_fclose_r+0x108>
  829a74:	8080030b 	ldhu	r2,12(r16)
  829a78:	1080200c 	andi	r2,r2,128
  829a7c:	1000231e 	bne	r2,zero,829b0c <_fclose_r+0xf8>
  829a80:	81400c17 	ldw	r5,48(r16)
  829a84:	28000526 	beq	r5,zero,829a9c <_fclose_r+0x88>
  829a88:	80801004 	addi	r2,r16,64
  829a8c:	28800226 	beq	r5,r2,829a98 <_fclose_r+0x84>
  829a90:	8809883a 	mov	r4,r17
  829a94:	08279ec0 	call	8279ec <_free_r>
  829a98:	80000c15 	stw	zero,48(r16)
  829a9c:	81401117 	ldw	r5,68(r16)
  829aa0:	28000326 	beq	r5,zero,829ab0 <_fclose_r+0x9c>
  829aa4:	8809883a 	mov	r4,r17
  829aa8:	08279ec0 	call	8279ec <_free_r>
  829aac:	80001115 	stw	zero,68(r16)
  829ab0:	8000030d 	sth	zero,12(r16)
  829ab4:	082765c0 	call	82765c <__sfp_lock_release>
  829ab8:	9005883a 	mov	r2,r18
  829abc:	dfc00317 	ldw	ra,12(sp)
  829ac0:	dc800217 	ldw	r18,8(sp)
  829ac4:	dc400117 	ldw	r17,4(sp)
  829ac8:	dc000017 	ldw	r16,0(sp)
  829acc:	dec00404 	addi	sp,sp,16
  829ad0:	f800283a 	ret
  829ad4:	082765c0 	call	82765c <__sfp_lock_release>
  829ad8:	0025883a 	mov	r18,zero
  829adc:	9005883a 	mov	r2,r18
  829ae0:	dfc00317 	ldw	ra,12(sp)
  829ae4:	dc800217 	ldw	r18,8(sp)
  829ae8:	dc400117 	ldw	r17,4(sp)
  829aec:	dc000017 	ldw	r16,0(sp)
  829af0:	dec00404 	addi	sp,sp,16
  829af4:	f800283a 	ret
  829af8:	8809883a 	mov	r4,r17
  829afc:	08276680 	call	827668 <__sinit>
  829b00:	8080030f 	ldh	r2,12(r16)
  829b04:	103fd11e 	bne	r2,zero,829a4c <_fclose_r+0x38>
  829b08:	003ff206 	br	829ad4 <_fclose_r+0xc0>
  829b0c:	81400417 	ldw	r5,16(r16)
  829b10:	8809883a 	mov	r4,r17
  829b14:	08279ec0 	call	8279ec <_free_r>
  829b18:	003fd906 	br	829a80 <_fclose_r+0x6c>
  829b1c:	04bfffc4 	movi	r18,-1
  829b20:	003fd406 	br	829a74 <_fclose_r+0x60>

00829b24 <fclose>:
  829b24:	00802134 	movhi	r2,132
  829b28:	1082e104 	addi	r2,r2,2948
  829b2c:	200b883a 	mov	r5,r4
  829b30:	11000017 	ldw	r4,0(r2)
  829b34:	0829a141 	jmpi	829a14 <_fclose_r>

00829b38 <_fstat_r>:
  829b38:	defffd04 	addi	sp,sp,-12
  829b3c:	dc000015 	stw	r16,0(sp)
  829b40:	04002134 	movhi	r16,132
  829b44:	840a4104 	addi	r16,r16,10500
  829b48:	dc400115 	stw	r17,4(sp)
  829b4c:	80000015 	stw	zero,0(r16)
  829b50:	2023883a 	mov	r17,r4
  829b54:	2809883a 	mov	r4,r5
  829b58:	300b883a 	mov	r5,r6
  829b5c:	dfc00215 	stw	ra,8(sp)
  829b60:	082ac540 	call	82ac54 <fstat>
  829b64:	1007883a 	mov	r3,r2
  829b68:	00bfffc4 	movi	r2,-1
  829b6c:	18800626 	beq	r3,r2,829b88 <_fstat_r+0x50>
  829b70:	1805883a 	mov	r2,r3
  829b74:	dfc00217 	ldw	ra,8(sp)
  829b78:	dc400117 	ldw	r17,4(sp)
  829b7c:	dc000017 	ldw	r16,0(sp)
  829b80:	dec00304 	addi	sp,sp,12
  829b84:	f800283a 	ret
  829b88:	80800017 	ldw	r2,0(r16)
  829b8c:	103ff826 	beq	r2,zero,829b70 <_fstat_r+0x38>
  829b90:	88800015 	stw	r2,0(r17)
  829b94:	1805883a 	mov	r2,r3
  829b98:	dfc00217 	ldw	ra,8(sp)
  829b9c:	dc400117 	ldw	r17,4(sp)
  829ba0:	dc000017 	ldw	r16,0(sp)
  829ba4:	dec00304 	addi	sp,sp,12
  829ba8:	f800283a 	ret

00829bac <_isatty_r>:
  829bac:	defffd04 	addi	sp,sp,-12
  829bb0:	dc000015 	stw	r16,0(sp)
  829bb4:	04002134 	movhi	r16,132
  829bb8:	840a4104 	addi	r16,r16,10500
  829bbc:	dc400115 	stw	r17,4(sp)
  829bc0:	80000015 	stw	zero,0(r16)
  829bc4:	2023883a 	mov	r17,r4
  829bc8:	2809883a 	mov	r4,r5
  829bcc:	dfc00215 	stw	ra,8(sp)
  829bd0:	082adac0 	call	82adac <isatty>
  829bd4:	1007883a 	mov	r3,r2
  829bd8:	00bfffc4 	movi	r2,-1
  829bdc:	18800626 	beq	r3,r2,829bf8 <_isatty_r+0x4c>
  829be0:	1805883a 	mov	r2,r3
  829be4:	dfc00217 	ldw	ra,8(sp)
  829be8:	dc400117 	ldw	r17,4(sp)
  829bec:	dc000017 	ldw	r16,0(sp)
  829bf0:	dec00304 	addi	sp,sp,12
  829bf4:	f800283a 	ret
  829bf8:	80800017 	ldw	r2,0(r16)
  829bfc:	103ff826 	beq	r2,zero,829be0 <_isatty_r+0x34>
  829c00:	88800015 	stw	r2,0(r17)
  829c04:	1805883a 	mov	r2,r3
  829c08:	dfc00217 	ldw	ra,8(sp)
  829c0c:	dc400117 	ldw	r17,4(sp)
  829c10:	dc000017 	ldw	r16,0(sp)
  829c14:	dec00304 	addi	sp,sp,12
  829c18:	f800283a 	ret

00829c1c <_lseek_r>:
  829c1c:	defffd04 	addi	sp,sp,-12
  829c20:	dc000015 	stw	r16,0(sp)
  829c24:	04002134 	movhi	r16,132
  829c28:	840a4104 	addi	r16,r16,10500
  829c2c:	dc400115 	stw	r17,4(sp)
  829c30:	80000015 	stw	zero,0(r16)
  829c34:	2023883a 	mov	r17,r4
  829c38:	2809883a 	mov	r4,r5
  829c3c:	300b883a 	mov	r5,r6
  829c40:	380d883a 	mov	r6,r7
  829c44:	dfc00215 	stw	ra,8(sp)
  829c48:	082b0000 	call	82b000 <lseek>
  829c4c:	1007883a 	mov	r3,r2
  829c50:	00bfffc4 	movi	r2,-1
  829c54:	18800626 	beq	r3,r2,829c70 <_lseek_r+0x54>
  829c58:	1805883a 	mov	r2,r3
  829c5c:	dfc00217 	ldw	ra,8(sp)
  829c60:	dc400117 	ldw	r17,4(sp)
  829c64:	dc000017 	ldw	r16,0(sp)
  829c68:	dec00304 	addi	sp,sp,12
  829c6c:	f800283a 	ret
  829c70:	80800017 	ldw	r2,0(r16)
  829c74:	103ff826 	beq	r2,zero,829c58 <_lseek_r+0x3c>
  829c78:	88800015 	stw	r2,0(r17)
  829c7c:	1805883a 	mov	r2,r3
  829c80:	dfc00217 	ldw	ra,8(sp)
  829c84:	dc400117 	ldw	r17,4(sp)
  829c88:	dc000017 	ldw	r16,0(sp)
  829c8c:	dec00304 	addi	sp,sp,12
  829c90:	f800283a 	ret

00829c94 <_read_r>:
  829c94:	defffd04 	addi	sp,sp,-12
  829c98:	dc000015 	stw	r16,0(sp)
  829c9c:	04002134 	movhi	r16,132
  829ca0:	840a4104 	addi	r16,r16,10500
  829ca4:	dc400115 	stw	r17,4(sp)
  829ca8:	80000015 	stw	zero,0(r16)
  829cac:	2023883a 	mov	r17,r4
  829cb0:	2809883a 	mov	r4,r5
  829cb4:	300b883a 	mov	r5,r6
  829cb8:	380d883a 	mov	r6,r7
  829cbc:	dfc00215 	stw	ra,8(sp)
  829cc0:	082b1040 	call	82b104 <read>
  829cc4:	1007883a 	mov	r3,r2
  829cc8:	00bfffc4 	movi	r2,-1
  829ccc:	18800626 	beq	r3,r2,829ce8 <_read_r+0x54>
  829cd0:	1805883a 	mov	r2,r3
  829cd4:	dfc00217 	ldw	ra,8(sp)
  829cd8:	dc400117 	ldw	r17,4(sp)
  829cdc:	dc000017 	ldw	r16,0(sp)
  829ce0:	dec00304 	addi	sp,sp,12
  829ce4:	f800283a 	ret
  829ce8:	80800017 	ldw	r2,0(r16)
  829cec:	103ff826 	beq	r2,zero,829cd0 <_read_r+0x3c>
  829cf0:	88800015 	stw	r2,0(r17)
  829cf4:	1805883a 	mov	r2,r3
  829cf8:	dfc00217 	ldw	ra,8(sp)
  829cfc:	dc400117 	ldw	r17,4(sp)
  829d00:	dc000017 	ldw	r16,0(sp)
  829d04:	dec00304 	addi	sp,sp,12
  829d08:	f800283a 	ret

00829d0c <__udivdi3>:
  829d0c:	defff004 	addi	sp,sp,-64
  829d10:	2005883a 	mov	r2,r4
  829d14:	3011883a 	mov	r8,r6
  829d18:	df000e15 	stw	fp,56(sp)
  829d1c:	dd000a15 	stw	r20,40(sp)
  829d20:	dc000615 	stw	r16,24(sp)
  829d24:	dfc00f15 	stw	ra,60(sp)
  829d28:	ddc00d15 	stw	r23,52(sp)
  829d2c:	dd800c15 	stw	r22,48(sp)
  829d30:	dd400b15 	stw	r21,44(sp)
  829d34:	dcc00915 	stw	r19,36(sp)
  829d38:	dc800815 	stw	r18,32(sp)
  829d3c:	dc400715 	stw	r17,28(sp)
  829d40:	4021883a 	mov	r16,r8
  829d44:	1039883a 	mov	fp,r2
  829d48:	2829883a 	mov	r20,r5
  829d4c:	38003b1e 	bne	r7,zero,829e3c <__udivdi3+0x130>
  829d50:	2a005c36 	bltu	r5,r8,829ec4 <__udivdi3+0x1b8>
  829d54:	4000a626 	beq	r8,zero,829ff0 <__udivdi3+0x2e4>
  829d58:	00bfffd4 	movui	r2,65535
  829d5c:	14009e36 	bltu	r2,r16,829fd8 <__udivdi3+0x2cc>
  829d60:	00803fc4 	movi	r2,255
  829d64:	14013d36 	bltu	r2,r16,82a25c <__udivdi3+0x550>
  829d68:	000b883a 	mov	r5,zero
  829d6c:	0005883a 	mov	r2,zero
  829d70:	8084d83a 	srl	r2,r16,r2
  829d74:	01002134 	movhi	r4,132
  829d78:	213a4304 	addi	r4,r4,-5876
  829d7c:	01800804 	movi	r6,32
  829d80:	1105883a 	add	r2,r2,r4
  829d84:	10c00003 	ldbu	r3,0(r2)
  829d88:	28c7883a 	add	r3,r5,r3
  829d8c:	30edc83a 	sub	r22,r6,r3
  829d90:	b000ee1e 	bne	r22,zero,82a14c <__udivdi3+0x440>
  829d94:	802ad43a 	srli	r21,r16,16
  829d98:	00800044 	movi	r2,1
  829d9c:	a423c83a 	sub	r17,r20,r16
  829da0:	85ffffcc 	andi	r23,r16,65535
  829da4:	d8800315 	stw	r2,12(sp)
  829da8:	8809883a 	mov	r4,r17
  829dac:	a80b883a 	mov	r5,r21
  829db0:	0820c080 	call	820c08 <__udivsi3>
  829db4:	8809883a 	mov	r4,r17
  829db8:	a80b883a 	mov	r5,r21
  829dbc:	102d883a 	mov	r22,r2
  829dc0:	0820c100 	call	820c10 <__umodsi3>
  829dc4:	1004943a 	slli	r2,r2,16
  829dc8:	e006d43a 	srli	r3,fp,16
  829dcc:	bda3383a 	mul	r17,r23,r22
  829dd0:	10c4b03a 	or	r2,r2,r3
  829dd4:	1440042e 	bgeu	r2,r17,829de8 <__udivdi3+0xdc>
  829dd8:	1405883a 	add	r2,r2,r16
  829ddc:	b5bfffc4 	addi	r22,r22,-1
  829de0:	14000136 	bltu	r2,r16,829de8 <__udivdi3+0xdc>
  829de4:	14413d36 	bltu	r2,r17,82a2dc <__udivdi3+0x5d0>
  829de8:	1463c83a 	sub	r17,r2,r17
  829dec:	8809883a 	mov	r4,r17
  829df0:	a80b883a 	mov	r5,r21
  829df4:	0820c080 	call	820c08 <__udivsi3>
  829df8:	8809883a 	mov	r4,r17
  829dfc:	a80b883a 	mov	r5,r21
  829e00:	1029883a 	mov	r20,r2
  829e04:	0820c100 	call	820c10 <__umodsi3>
  829e08:	1004943a 	slli	r2,r2,16
  829e0c:	bd09383a 	mul	r4,r23,r20
  829e10:	e0ffffcc 	andi	r3,fp,65535
  829e14:	10c4b03a 	or	r2,r2,r3
  829e18:	1100042e 	bgeu	r2,r4,829e2c <__udivdi3+0x120>
  829e1c:	8085883a 	add	r2,r16,r2
  829e20:	a53fffc4 	addi	r20,r20,-1
  829e24:	14000136 	bltu	r2,r16,829e2c <__udivdi3+0x120>
  829e28:	11012036 	bltu	r2,r4,82a2ac <__udivdi3+0x5a0>
  829e2c:	b004943a 	slli	r2,r22,16
  829e30:	d9000317 	ldw	r4,12(sp)
  829e34:	a084b03a 	or	r2,r20,r2
  829e38:	00001506 	br	829e90 <__udivdi3+0x184>
  829e3c:	380d883a 	mov	r6,r7
  829e40:	29c06236 	bltu	r5,r7,829fcc <__udivdi3+0x2c0>
  829e44:	00bfffd4 	movui	r2,65535
  829e48:	11c05a36 	bltu	r2,r7,829fb4 <__udivdi3+0x2a8>
  829e4c:	00803fc4 	movi	r2,255
  829e50:	11c0fc36 	bltu	r2,r7,82a244 <__udivdi3+0x538>
  829e54:	000b883a 	mov	r5,zero
  829e58:	0005883a 	mov	r2,zero
  829e5c:	3084d83a 	srl	r2,r6,r2
  829e60:	01002134 	movhi	r4,132
  829e64:	213a4304 	addi	r4,r4,-5876
  829e68:	01c00804 	movi	r7,32
  829e6c:	1105883a 	add	r2,r2,r4
  829e70:	10c00003 	ldbu	r3,0(r2)
  829e74:	28c7883a 	add	r3,r5,r3
  829e78:	38efc83a 	sub	r23,r7,r3
  829e7c:	b800691e 	bne	r23,zero,82a024 <__udivdi3+0x318>
  829e80:	35000136 	bltu	r6,r20,829e88 <__udivdi3+0x17c>
  829e84:	e4005136 	bltu	fp,r16,829fcc <__udivdi3+0x2c0>
  829e88:	00800044 	movi	r2,1
  829e8c:	0009883a 	mov	r4,zero
  829e90:	2007883a 	mov	r3,r4
  829e94:	dfc00f17 	ldw	ra,60(sp)
  829e98:	df000e17 	ldw	fp,56(sp)
  829e9c:	ddc00d17 	ldw	r23,52(sp)
  829ea0:	dd800c17 	ldw	r22,48(sp)
  829ea4:	dd400b17 	ldw	r21,44(sp)
  829ea8:	dd000a17 	ldw	r20,40(sp)
  829eac:	dcc00917 	ldw	r19,36(sp)
  829eb0:	dc800817 	ldw	r18,32(sp)
  829eb4:	dc400717 	ldw	r17,28(sp)
  829eb8:	dc000617 	ldw	r16,24(sp)
  829ebc:	dec01004 	addi	sp,sp,64
  829ec0:	f800283a 	ret
  829ec4:	00bfffd4 	movui	r2,65535
  829ec8:	12005036 	bltu	r2,r8,82a00c <__udivdi3+0x300>
  829ecc:	00803fc4 	movi	r2,255
  829ed0:	1200e836 	bltu	r2,r8,82a274 <__udivdi3+0x568>
  829ed4:	000b883a 	mov	r5,zero
  829ed8:	0005883a 	mov	r2,zero
  829edc:	8084d83a 	srl	r2,r16,r2
  829ee0:	01002134 	movhi	r4,132
  829ee4:	213a4304 	addi	r4,r4,-5876
  829ee8:	01800804 	movi	r6,32
  829eec:	1105883a 	add	r2,r2,r4
  829ef0:	10c00003 	ldbu	r3,0(r2)
  829ef4:	28c7883a 	add	r3,r5,r3
  829ef8:	30cbc83a 	sub	r5,r6,r3
  829efc:	28000626 	beq	r5,zero,829f18 <__udivdi3+0x20c>
  829f00:	3145c83a 	sub	r2,r6,r5
  829f04:	e084d83a 	srl	r2,fp,r2
  829f08:	a146983a 	sll	r3,r20,r5
  829f0c:	e178983a 	sll	fp,fp,r5
  829f10:	8160983a 	sll	r16,r16,r5
  829f14:	18a8b03a 	or	r20,r3,r2
  829f18:	802ad43a 	srli	r21,r16,16
  829f1c:	a009883a 	mov	r4,r20
  829f20:	85ffffcc 	andi	r23,r16,65535
  829f24:	a80b883a 	mov	r5,r21
  829f28:	0820c080 	call	820c08 <__udivsi3>
  829f2c:	a009883a 	mov	r4,r20
  829f30:	a80b883a 	mov	r5,r21
  829f34:	102d883a 	mov	r22,r2
  829f38:	0820c100 	call	820c10 <__umodsi3>
  829f3c:	1004943a 	slli	r2,r2,16
  829f40:	e006d43a 	srli	r3,fp,16
  829f44:	bda3383a 	mul	r17,r23,r22
  829f48:	10c4b03a 	or	r2,r2,r3
  829f4c:	1440042e 	bgeu	r2,r17,829f60 <__udivdi3+0x254>
  829f50:	1405883a 	add	r2,r2,r16
  829f54:	b5bfffc4 	addi	r22,r22,-1
  829f58:	14000136 	bltu	r2,r16,829f60 <__udivdi3+0x254>
  829f5c:	1440d536 	bltu	r2,r17,82a2b4 <__udivdi3+0x5a8>
  829f60:	1463c83a 	sub	r17,r2,r17
  829f64:	8809883a 	mov	r4,r17
  829f68:	a80b883a 	mov	r5,r21
  829f6c:	0820c080 	call	820c08 <__udivsi3>
  829f70:	8809883a 	mov	r4,r17
  829f74:	a80b883a 	mov	r5,r21
  829f78:	1029883a 	mov	r20,r2
  829f7c:	0820c100 	call	820c10 <__umodsi3>
  829f80:	1004943a 	slli	r2,r2,16
  829f84:	bd09383a 	mul	r4,r23,r20
  829f88:	e0ffffcc 	andi	r3,fp,65535
  829f8c:	10c4b03a 	or	r2,r2,r3
  829f90:	1100042e 	bgeu	r2,r4,829fa4 <__udivdi3+0x298>
  829f94:	8085883a 	add	r2,r16,r2
  829f98:	a53fffc4 	addi	r20,r20,-1
  829f9c:	14000136 	bltu	r2,r16,829fa4 <__udivdi3+0x298>
  829fa0:	1100c736 	bltu	r2,r4,82a2c0 <__udivdi3+0x5b4>
  829fa4:	b004943a 	slli	r2,r22,16
  829fa8:	0009883a 	mov	r4,zero
  829fac:	a084b03a 	or	r2,r20,r2
  829fb0:	003fb706 	br	829e90 <__udivdi3+0x184>
  829fb4:	00804034 	movhi	r2,256
  829fb8:	10bfffc4 	addi	r2,r2,-1
  829fbc:	11c0a436 	bltu	r2,r7,82a250 <__udivdi3+0x544>
  829fc0:	01400404 	movi	r5,16
  829fc4:	2805883a 	mov	r2,r5
  829fc8:	003fa406 	br	829e5c <__udivdi3+0x150>
  829fcc:	0005883a 	mov	r2,zero
  829fd0:	0009883a 	mov	r4,zero
  829fd4:	003fae06 	br	829e90 <__udivdi3+0x184>
  829fd8:	00804034 	movhi	r2,256
  829fdc:	10bfffc4 	addi	r2,r2,-1
  829fe0:	1400a136 	bltu	r2,r16,82a268 <__udivdi3+0x55c>
  829fe4:	01400404 	movi	r5,16
  829fe8:	2805883a 	mov	r2,r5
  829fec:	003f6006 	br	829d70 <__udivdi3+0x64>
  829ff0:	01000044 	movi	r4,1
  829ff4:	000b883a 	mov	r5,zero
  829ff8:	0820c080 	call	820c08 <__udivsi3>
  829ffc:	1021883a 	mov	r16,r2
  82a000:	00bfffd4 	movui	r2,65535
  82a004:	143ff436 	bltu	r2,r16,829fd8 <__udivdi3+0x2cc>
  82a008:	003f5506 	br	829d60 <__udivdi3+0x54>
  82a00c:	00804034 	movhi	r2,256
  82a010:	10bfffc4 	addi	r2,r2,-1
  82a014:	12009a36 	bltu	r2,r8,82a280 <__udivdi3+0x574>
  82a018:	01400404 	movi	r5,16
  82a01c:	2805883a 	mov	r2,r5
  82a020:	003fae06 	br	829edc <__udivdi3+0x1d0>
  82a024:	3dc5c83a 	sub	r2,r7,r23
  82a028:	35c8983a 	sll	r4,r6,r23
  82a02c:	8086d83a 	srl	r3,r16,r2
  82a030:	a0a2d83a 	srl	r17,r20,r2
  82a034:	e084d83a 	srl	r2,fp,r2
  82a038:	20eab03a 	or	r21,r4,r3
  82a03c:	a82cd43a 	srli	r22,r21,16
  82a040:	a5c6983a 	sll	r3,r20,r23
  82a044:	8809883a 	mov	r4,r17
  82a048:	b00b883a 	mov	r5,r22
  82a04c:	1886b03a 	or	r3,r3,r2
  82a050:	d8c00215 	stw	r3,8(sp)
  82a054:	0820c080 	call	820c08 <__udivsi3>
  82a058:	8809883a 	mov	r4,r17
  82a05c:	b00b883a 	mov	r5,r22
  82a060:	1029883a 	mov	r20,r2
  82a064:	0820c100 	call	820c10 <__umodsi3>
  82a068:	a8ffffcc 	andi	r3,r21,65535
  82a06c:	d8c00515 	stw	r3,20(sp)
  82a070:	d9000217 	ldw	r4,8(sp)
  82a074:	d9400517 	ldw	r5,20(sp)
  82a078:	1004943a 	slli	r2,r2,16
  82a07c:	2006d43a 	srli	r3,r4,16
  82a080:	85e0983a 	sll	r16,r16,r23
  82a084:	2d23383a 	mul	r17,r5,r20
  82a088:	10c4b03a 	or	r2,r2,r3
  82a08c:	dc000015 	stw	r16,0(sp)
  82a090:	1440032e 	bgeu	r2,r17,82a0a0 <__udivdi3+0x394>
  82a094:	1545883a 	add	r2,r2,r21
  82a098:	a53fffc4 	addi	r20,r20,-1
  82a09c:	15407f2e 	bgeu	r2,r21,82a29c <__udivdi3+0x590>
  82a0a0:	1463c83a 	sub	r17,r2,r17
  82a0a4:	8809883a 	mov	r4,r17
  82a0a8:	b00b883a 	mov	r5,r22
  82a0ac:	0820c080 	call	820c08 <__udivsi3>
  82a0b0:	8809883a 	mov	r4,r17
  82a0b4:	b00b883a 	mov	r5,r22
  82a0b8:	1021883a 	mov	r16,r2
  82a0bc:	0820c100 	call	820c10 <__umodsi3>
  82a0c0:	d8c00517 	ldw	r3,20(sp)
  82a0c4:	d9000217 	ldw	r4,8(sp)
  82a0c8:	1004943a 	slli	r2,r2,16
  82a0cc:	1c0f383a 	mul	r7,r3,r16
  82a0d0:	20ffffcc 	andi	r3,r4,65535
  82a0d4:	10e2b03a 	or	r17,r2,r3
  82a0d8:	89c0032e 	bgeu	r17,r7,82a0e8 <__udivdi3+0x3dc>
  82a0dc:	8d63883a 	add	r17,r17,r21
  82a0e0:	843fffc4 	addi	r16,r16,-1
  82a0e4:	8d40692e 	bgeu	r17,r21,82a28c <__udivdi3+0x580>
  82a0e8:	a008943a 	slli	r4,r20,16
  82a0ec:	d9400017 	ldw	r5,0(sp)
  82a0f0:	89e3c83a 	sub	r17,r17,r7
  82a0f4:	8110b03a 	or	r8,r16,r4
  82a0f8:	280cd43a 	srli	r6,r5,16
  82a0fc:	28ffffcc 	andi	r3,r5,65535
  82a100:	40bfffcc 	andi	r2,r8,65535
  82a104:	400ad43a 	srli	r5,r8,16
  82a108:	10d3383a 	mul	r9,r2,r3
  82a10c:	1185383a 	mul	r2,r2,r6
  82a110:	28c7383a 	mul	r3,r5,r3
  82a114:	4808d43a 	srli	r4,r9,16
  82a118:	298b383a 	mul	r5,r5,r6
  82a11c:	10c5883a 	add	r2,r2,r3
  82a120:	2089883a 	add	r4,r4,r2
  82a124:	20c0022e 	bgeu	r4,r3,82a130 <__udivdi3+0x424>
  82a128:	00800074 	movhi	r2,1
  82a12c:	288b883a 	add	r5,r5,r2
  82a130:	2004d43a 	srli	r2,r4,16
  82a134:	288b883a 	add	r5,r5,r2
  82a138:	89403f36 	bltu	r17,r5,82a238 <__udivdi3+0x52c>
  82a13c:	89403926 	beq	r17,r5,82a224 <__udivdi3+0x518>
  82a140:	4005883a 	mov	r2,r8
  82a144:	0009883a 	mov	r4,zero
  82a148:	003f5106 	br	829e90 <__udivdi3+0x184>
  82a14c:	85a0983a 	sll	r16,r16,r22
  82a150:	3585c83a 	sub	r2,r6,r22
  82a154:	a0a2d83a 	srl	r17,r20,r2
  82a158:	802ad43a 	srli	r21,r16,16
  82a15c:	e084d83a 	srl	r2,fp,r2
  82a160:	a586983a 	sll	r3,r20,r22
  82a164:	8809883a 	mov	r4,r17
  82a168:	a80b883a 	mov	r5,r21
  82a16c:	1886b03a 	or	r3,r3,r2
  82a170:	d8c00115 	stw	r3,4(sp)
  82a174:	0820c080 	call	820c08 <__udivsi3>
  82a178:	8809883a 	mov	r4,r17
  82a17c:	a80b883a 	mov	r5,r21
  82a180:	d8800415 	stw	r2,16(sp)
  82a184:	0820c100 	call	820c10 <__umodsi3>
  82a188:	d9000117 	ldw	r4,4(sp)
  82a18c:	d9400417 	ldw	r5,16(sp)
  82a190:	1004943a 	slli	r2,r2,16
  82a194:	85ffffcc 	andi	r23,r16,65535
  82a198:	2006d43a 	srli	r3,r4,16
  82a19c:	b963383a 	mul	r17,r23,r5
  82a1a0:	10c4b03a 	or	r2,r2,r3
  82a1a4:	1440042e 	bgeu	r2,r17,82a1b8 <__udivdi3+0x4ac>
  82a1a8:	297fffc4 	addi	r5,r5,-1
  82a1ac:	1405883a 	add	r2,r2,r16
  82a1b0:	d9400415 	stw	r5,16(sp)
  82a1b4:	1400442e 	bgeu	r2,r16,82a2c8 <__udivdi3+0x5bc>
  82a1b8:	1463c83a 	sub	r17,r2,r17
  82a1bc:	8809883a 	mov	r4,r17
  82a1c0:	a80b883a 	mov	r5,r21
  82a1c4:	0820c080 	call	820c08 <__udivsi3>
  82a1c8:	8809883a 	mov	r4,r17
  82a1cc:	a80b883a 	mov	r5,r21
  82a1d0:	1029883a 	mov	r20,r2
  82a1d4:	0820c100 	call	820c10 <__umodsi3>
  82a1d8:	d9400117 	ldw	r5,4(sp)
  82a1dc:	1004943a 	slli	r2,r2,16
  82a1e0:	bd09383a 	mul	r4,r23,r20
  82a1e4:	28ffffcc 	andi	r3,r5,65535
  82a1e8:	10c6b03a 	or	r3,r2,r3
  82a1ec:	1900062e 	bgeu	r3,r4,82a208 <__udivdi3+0x4fc>
  82a1f0:	1c07883a 	add	r3,r3,r16
  82a1f4:	a53fffc4 	addi	r20,r20,-1
  82a1f8:	1c000336 	bltu	r3,r16,82a208 <__udivdi3+0x4fc>
  82a1fc:	1900022e 	bgeu	r3,r4,82a208 <__udivdi3+0x4fc>
  82a200:	a53fffc4 	addi	r20,r20,-1
  82a204:	1c07883a 	add	r3,r3,r16
  82a208:	d9400417 	ldw	r5,16(sp)
  82a20c:	e5b8983a 	sll	fp,fp,r22
  82a210:	1923c83a 	sub	r17,r3,r4
  82a214:	2804943a 	slli	r2,r5,16
  82a218:	a0a8b03a 	or	r20,r20,r2
  82a21c:	dd000315 	stw	r20,12(sp)
  82a220:	003ee106 	br	829da8 <__udivdi3+0x9c>
  82a224:	2004943a 	slli	r2,r4,16
  82a228:	e5c8983a 	sll	r4,fp,r23
  82a22c:	48ffffcc 	andi	r3,r9,65535
  82a230:	10c5883a 	add	r2,r2,r3
  82a234:	20bfc22e 	bgeu	r4,r2,82a140 <__udivdi3+0x434>
  82a238:	40bfffc4 	addi	r2,r8,-1
  82a23c:	0009883a 	mov	r4,zero
  82a240:	003f1306 	br	829e90 <__udivdi3+0x184>
  82a244:	01400204 	movi	r5,8
  82a248:	2805883a 	mov	r2,r5
  82a24c:	003f0306 	br	829e5c <__udivdi3+0x150>
  82a250:	01400604 	movi	r5,24
  82a254:	2805883a 	mov	r2,r5
  82a258:	003f0006 	br	829e5c <__udivdi3+0x150>
  82a25c:	01400204 	movi	r5,8
  82a260:	2805883a 	mov	r2,r5
  82a264:	003ec206 	br	829d70 <__udivdi3+0x64>
  82a268:	01400604 	movi	r5,24
  82a26c:	2805883a 	mov	r2,r5
  82a270:	003ebf06 	br	829d70 <__udivdi3+0x64>
  82a274:	01400204 	movi	r5,8
  82a278:	2805883a 	mov	r2,r5
  82a27c:	003f1706 	br	829edc <__udivdi3+0x1d0>
  82a280:	01400604 	movi	r5,24
  82a284:	2805883a 	mov	r2,r5
  82a288:	003f1406 	br	829edc <__udivdi3+0x1d0>
  82a28c:	89ff962e 	bgeu	r17,r7,82a0e8 <__udivdi3+0x3dc>
  82a290:	8d63883a 	add	r17,r17,r21
  82a294:	843fffc4 	addi	r16,r16,-1
  82a298:	003f9306 	br	82a0e8 <__udivdi3+0x3dc>
  82a29c:	147f802e 	bgeu	r2,r17,82a0a0 <__udivdi3+0x394>
  82a2a0:	a53fffc4 	addi	r20,r20,-1
  82a2a4:	1545883a 	add	r2,r2,r21
  82a2a8:	003f7d06 	br	82a0a0 <__udivdi3+0x394>
  82a2ac:	a53fffc4 	addi	r20,r20,-1
  82a2b0:	003ede06 	br	829e2c <__udivdi3+0x120>
  82a2b4:	b5bfffc4 	addi	r22,r22,-1
  82a2b8:	1405883a 	add	r2,r2,r16
  82a2bc:	003f2806 	br	829f60 <__udivdi3+0x254>
  82a2c0:	a53fffc4 	addi	r20,r20,-1
  82a2c4:	003f3706 	br	829fa4 <__udivdi3+0x298>
  82a2c8:	147fbb2e 	bgeu	r2,r17,82a1b8 <__udivdi3+0x4ac>
  82a2cc:	297fffc4 	addi	r5,r5,-1
  82a2d0:	1405883a 	add	r2,r2,r16
  82a2d4:	d9400415 	stw	r5,16(sp)
  82a2d8:	003fb706 	br	82a1b8 <__udivdi3+0x4ac>
  82a2dc:	b5bfffc4 	addi	r22,r22,-1
  82a2e0:	1405883a 	add	r2,r2,r16
  82a2e4:	003ec006 	br	829de8 <__udivdi3+0xdc>

0082a2e8 <__umoddi3>:
  82a2e8:	defff104 	addi	sp,sp,-60
  82a2ec:	dd800b15 	stw	r22,44(sp)
  82a2f0:	dd000915 	stw	r20,36(sp)
  82a2f4:	dc000515 	stw	r16,20(sp)
  82a2f8:	dfc00e15 	stw	ra,56(sp)
  82a2fc:	df000d15 	stw	fp,52(sp)
  82a300:	ddc00c15 	stw	r23,48(sp)
  82a304:	dd400a15 	stw	r21,40(sp)
  82a308:	dcc00815 	stw	r19,32(sp)
  82a30c:	dc800715 	stw	r18,28(sp)
  82a310:	dc400615 	stw	r17,24(sp)
  82a314:	3021883a 	mov	r16,r6
  82a318:	202d883a 	mov	r22,r4
  82a31c:	2829883a 	mov	r20,r5
  82a320:	38002b1e 	bne	r7,zero,82a3d0 <__umoddi3+0xe8>
  82a324:	29805036 	bltu	r5,r6,82a468 <__umoddi3+0x180>
  82a328:	30008a26 	beq	r6,zero,82a554 <__umoddi3+0x26c>
  82a32c:	00bfffd4 	movui	r2,65535
  82a330:	14008236 	bltu	r2,r16,82a53c <__umoddi3+0x254>
  82a334:	00803fc4 	movi	r2,255
  82a338:	14013636 	bltu	r2,r16,82a814 <__umoddi3+0x52c>
  82a33c:	000b883a 	mov	r5,zero
  82a340:	0005883a 	mov	r2,zero
  82a344:	8084d83a 	srl	r2,r16,r2
  82a348:	01002134 	movhi	r4,132
  82a34c:	213a4304 	addi	r4,r4,-5876
  82a350:	01800804 	movi	r6,32
  82a354:	1105883a 	add	r2,r2,r4
  82a358:	10c00003 	ldbu	r3,0(r2)
  82a35c:	28c7883a 	add	r3,r5,r3
  82a360:	30efc83a 	sub	r23,r6,r3
  82a364:	b800941e 	bne	r23,zero,82a5b8 <__umoddi3+0x2d0>
  82a368:	802ad43a 	srli	r21,r16,16
  82a36c:	a423c83a 	sub	r17,r20,r16
  82a370:	0039883a 	mov	fp,zero
  82a374:	853fffcc 	andi	r20,r16,65535
  82a378:	8809883a 	mov	r4,r17
  82a37c:	a80b883a 	mov	r5,r21
  82a380:	0820c080 	call	820c08 <__udivsi3>
  82a384:	8809883a 	mov	r4,r17
  82a388:	a80b883a 	mov	r5,r21
  82a38c:	a0a3383a 	mul	r17,r20,r2
  82a390:	0820c100 	call	820c10 <__umodsi3>
  82a394:	1004943a 	slli	r2,r2,16
  82a398:	b006d43a 	srli	r3,r22,16
  82a39c:	10c4b03a 	or	r2,r2,r3
  82a3a0:	1440032e 	bgeu	r2,r17,82a3b0 <__umoddi3+0xc8>
  82a3a4:	1405883a 	add	r2,r2,r16
  82a3a8:	14000136 	bltu	r2,r16,82a3b0 <__umoddi3+0xc8>
  82a3ac:	14413536 	bltu	r2,r17,82a884 <__umoddi3+0x59c>
  82a3b0:	1463c83a 	sub	r17,r2,r17
  82a3b4:	8809883a 	mov	r4,r17
  82a3b8:	a80b883a 	mov	r5,r21
  82a3bc:	0820c080 	call	820c08 <__udivsi3>
  82a3c0:	8809883a 	mov	r4,r17
  82a3c4:	a0a3383a 	mul	r17,r20,r2
  82a3c8:	a80b883a 	mov	r5,r21
  82a3cc:	00004d06 	br	82a504 <__umoddi3+0x21c>
  82a3d0:	380d883a 	mov	r6,r7
  82a3d4:	29c0102e 	bgeu	r5,r7,82a418 <__umoddi3+0x130>
  82a3d8:	2011883a 	mov	r8,r4
  82a3dc:	2813883a 	mov	r9,r5
  82a3e0:	4005883a 	mov	r2,r8
  82a3e4:	4807883a 	mov	r3,r9
  82a3e8:	dfc00e17 	ldw	ra,56(sp)
  82a3ec:	df000d17 	ldw	fp,52(sp)
  82a3f0:	ddc00c17 	ldw	r23,48(sp)
  82a3f4:	dd800b17 	ldw	r22,44(sp)
  82a3f8:	dd400a17 	ldw	r21,40(sp)
  82a3fc:	dd000917 	ldw	r20,36(sp)
  82a400:	dcc00817 	ldw	r19,32(sp)
  82a404:	dc800717 	ldw	r18,28(sp)
  82a408:	dc400617 	ldw	r17,24(sp)
  82a40c:	dc000517 	ldw	r16,20(sp)
  82a410:	dec00f04 	addi	sp,sp,60
  82a414:	f800283a 	ret
  82a418:	00bfffd4 	movui	r2,65535
  82a41c:	11c05a36 	bltu	r2,r7,82a588 <__umoddi3+0x2a0>
  82a420:	00803fc4 	movi	r2,255
  82a424:	11c0fe36 	bltu	r2,r7,82a820 <__umoddi3+0x538>
  82a428:	000b883a 	mov	r5,zero
  82a42c:	0005883a 	mov	r2,zero
  82a430:	3084d83a 	srl	r2,r6,r2
  82a434:	01002134 	movhi	r4,132
  82a438:	213a4304 	addi	r4,r4,-5876
  82a43c:	01c00804 	movi	r7,32
  82a440:	1105883a 	add	r2,r2,r4
  82a444:	10c00003 	ldbu	r3,0(r2)
  82a448:	28c7883a 	add	r3,r5,r3
  82a44c:	38ebc83a 	sub	r21,r7,r3
  82a450:	a800851e 	bne	r21,zero,82a668 <__umoddi3+0x380>
  82a454:	35005236 	bltu	r6,r20,82a5a0 <__umoddi3+0x2b8>
  82a458:	b400512e 	bgeu	r22,r16,82a5a0 <__umoddi3+0x2b8>
  82a45c:	b011883a 	mov	r8,r22
  82a460:	a013883a 	mov	r9,r20
  82a464:	003fde06 	br	82a3e0 <__umoddi3+0xf8>
  82a468:	00bfffd4 	movui	r2,65535
  82a46c:	11804036 	bltu	r2,r6,82a570 <__umoddi3+0x288>
  82a470:	00803fc4 	movi	r2,255
  82a474:	1180ed36 	bltu	r2,r6,82a82c <__umoddi3+0x544>
  82a478:	000b883a 	mov	r5,zero
  82a47c:	0005883a 	mov	r2,zero
  82a480:	8084d83a 	srl	r2,r16,r2
  82a484:	01002134 	movhi	r4,132
  82a488:	213a4304 	addi	r4,r4,-5876
  82a48c:	01800804 	movi	r6,32
  82a490:	1105883a 	add	r2,r2,r4
  82a494:	10c00003 	ldbu	r3,0(r2)
  82a498:	28c7883a 	add	r3,r5,r3
  82a49c:	30c7c83a 	sub	r3,r6,r3
  82a4a0:	1800bf1e 	bne	r3,zero,82a7a0 <__umoddi3+0x4b8>
  82a4a4:	0039883a 	mov	fp,zero
  82a4a8:	802ad43a 	srli	r21,r16,16
  82a4ac:	a009883a 	mov	r4,r20
  82a4b0:	85ffffcc 	andi	r23,r16,65535
  82a4b4:	a80b883a 	mov	r5,r21
  82a4b8:	0820c080 	call	820c08 <__udivsi3>
  82a4bc:	a009883a 	mov	r4,r20
  82a4c0:	a80b883a 	mov	r5,r21
  82a4c4:	b8a3383a 	mul	r17,r23,r2
  82a4c8:	0820c100 	call	820c10 <__umodsi3>
  82a4cc:	1004943a 	slli	r2,r2,16
  82a4d0:	b006d43a 	srli	r3,r22,16
  82a4d4:	10c4b03a 	or	r2,r2,r3
  82a4d8:	1440032e 	bgeu	r2,r17,82a4e8 <__umoddi3+0x200>
  82a4dc:	1405883a 	add	r2,r2,r16
  82a4e0:	14000136 	bltu	r2,r16,82a4e8 <__umoddi3+0x200>
  82a4e4:	1440e536 	bltu	r2,r17,82a87c <__umoddi3+0x594>
  82a4e8:	1463c83a 	sub	r17,r2,r17
  82a4ec:	8809883a 	mov	r4,r17
  82a4f0:	a80b883a 	mov	r5,r21
  82a4f4:	0820c080 	call	820c08 <__udivsi3>
  82a4f8:	8809883a 	mov	r4,r17
  82a4fc:	b8a3383a 	mul	r17,r23,r2
  82a500:	a80b883a 	mov	r5,r21
  82a504:	0820c100 	call	820c10 <__umodsi3>
  82a508:	1004943a 	slli	r2,r2,16
  82a50c:	b0ffffcc 	andi	r3,r22,65535
  82a510:	10c4b03a 	or	r2,r2,r3
  82a514:	1440042e 	bgeu	r2,r17,82a528 <__umoddi3+0x240>
  82a518:	1405883a 	add	r2,r2,r16
  82a51c:	14000236 	bltu	r2,r16,82a528 <__umoddi3+0x240>
  82a520:	1440012e 	bgeu	r2,r17,82a528 <__umoddi3+0x240>
  82a524:	1405883a 	add	r2,r2,r16
  82a528:	1445c83a 	sub	r2,r2,r17
  82a52c:	1724d83a 	srl	r18,r2,fp
  82a530:	0013883a 	mov	r9,zero
  82a534:	9011883a 	mov	r8,r18
  82a538:	003fa906 	br	82a3e0 <__umoddi3+0xf8>
  82a53c:	00804034 	movhi	r2,256
  82a540:	10bfffc4 	addi	r2,r2,-1
  82a544:	1400b036 	bltu	r2,r16,82a808 <__umoddi3+0x520>
  82a548:	01400404 	movi	r5,16
  82a54c:	2805883a 	mov	r2,r5
  82a550:	003f7c06 	br	82a344 <__umoddi3+0x5c>
  82a554:	01000044 	movi	r4,1
  82a558:	000b883a 	mov	r5,zero
  82a55c:	0820c080 	call	820c08 <__udivsi3>
  82a560:	1021883a 	mov	r16,r2
  82a564:	00bfffd4 	movui	r2,65535
  82a568:	143ff436 	bltu	r2,r16,82a53c <__umoddi3+0x254>
  82a56c:	003f7106 	br	82a334 <__umoddi3+0x4c>
  82a570:	00804034 	movhi	r2,256
  82a574:	10bfffc4 	addi	r2,r2,-1
  82a578:	1180af36 	bltu	r2,r6,82a838 <__umoddi3+0x550>
  82a57c:	01400404 	movi	r5,16
  82a580:	2805883a 	mov	r2,r5
  82a584:	003fbe06 	br	82a480 <__umoddi3+0x198>
  82a588:	00804034 	movhi	r2,256
  82a58c:	10bfffc4 	addi	r2,r2,-1
  82a590:	11c0ac36 	bltu	r2,r7,82a844 <__umoddi3+0x55c>
  82a594:	01400404 	movi	r5,16
  82a598:	2805883a 	mov	r2,r5
  82a59c:	003fa406 	br	82a430 <__umoddi3+0x148>
  82a5a0:	b409c83a 	sub	r4,r22,r16
  82a5a4:	b105803a 	cmpltu	r2,r22,r4
  82a5a8:	a187c83a 	sub	r3,r20,r6
  82a5ac:	18a9c83a 	sub	r20,r3,r2
  82a5b0:	202d883a 	mov	r22,r4
  82a5b4:	003fa906 	br	82a45c <__umoddi3+0x174>
  82a5b8:	85e0983a 	sll	r16,r16,r23
  82a5bc:	35c5c83a 	sub	r2,r6,r23
  82a5c0:	a0a2d83a 	srl	r17,r20,r2
  82a5c4:	802ad43a 	srli	r21,r16,16
  82a5c8:	b084d83a 	srl	r2,r22,r2
  82a5cc:	a5c6983a 	sll	r3,r20,r23
  82a5d0:	8809883a 	mov	r4,r17
  82a5d4:	a80b883a 	mov	r5,r21
  82a5d8:	1886b03a 	or	r3,r3,r2
  82a5dc:	d8c00115 	stw	r3,4(sp)
  82a5e0:	853fffcc 	andi	r20,r16,65535
  82a5e4:	0820c080 	call	820c08 <__udivsi3>
  82a5e8:	8809883a 	mov	r4,r17
  82a5ec:	a80b883a 	mov	r5,r21
  82a5f0:	a0a3383a 	mul	r17,r20,r2
  82a5f4:	0820c100 	call	820c10 <__umodsi3>
  82a5f8:	d9000117 	ldw	r4,4(sp)
  82a5fc:	1004943a 	slli	r2,r2,16
  82a600:	b839883a 	mov	fp,r23
  82a604:	2006d43a 	srli	r3,r4,16
  82a608:	10c4b03a 	or	r2,r2,r3
  82a60c:	1440022e 	bgeu	r2,r17,82a618 <__umoddi3+0x330>
  82a610:	1405883a 	add	r2,r2,r16
  82a614:	1400962e 	bgeu	r2,r16,82a870 <__umoddi3+0x588>
  82a618:	1463c83a 	sub	r17,r2,r17
  82a61c:	8809883a 	mov	r4,r17
  82a620:	a80b883a 	mov	r5,r21
  82a624:	0820c080 	call	820c08 <__udivsi3>
  82a628:	8809883a 	mov	r4,r17
  82a62c:	a80b883a 	mov	r5,r21
  82a630:	a0a3383a 	mul	r17,r20,r2
  82a634:	0820c100 	call	820c10 <__umodsi3>
  82a638:	d9400117 	ldw	r5,4(sp)
  82a63c:	1004943a 	slli	r2,r2,16
  82a640:	28ffffcc 	andi	r3,r5,65535
  82a644:	10c4b03a 	or	r2,r2,r3
  82a648:	1440042e 	bgeu	r2,r17,82a65c <__umoddi3+0x374>
  82a64c:	1405883a 	add	r2,r2,r16
  82a650:	14000236 	bltu	r2,r16,82a65c <__umoddi3+0x374>
  82a654:	1440012e 	bgeu	r2,r17,82a65c <__umoddi3+0x374>
  82a658:	1405883a 	add	r2,r2,r16
  82a65c:	b5ec983a 	sll	r22,r22,r23
  82a660:	1463c83a 	sub	r17,r2,r17
  82a664:	003f4406 	br	82a378 <__umoddi3+0x90>
  82a668:	3d4fc83a 	sub	r7,r7,r21
  82a66c:	3546983a 	sll	r3,r6,r21
  82a670:	81c4d83a 	srl	r2,r16,r7
  82a674:	a1e2d83a 	srl	r17,r20,r7
  82a678:	a54c983a 	sll	r6,r20,r21
  82a67c:	18aeb03a 	or	r23,r3,r2
  82a680:	b828d43a 	srli	r20,r23,16
  82a684:	b1c4d83a 	srl	r2,r22,r7
  82a688:	8809883a 	mov	r4,r17
  82a68c:	a00b883a 	mov	r5,r20
  82a690:	308cb03a 	or	r6,r6,r2
  82a694:	d9c00315 	stw	r7,12(sp)
  82a698:	d9800215 	stw	r6,8(sp)
  82a69c:	0820c080 	call	820c08 <__udivsi3>
  82a6a0:	8809883a 	mov	r4,r17
  82a6a4:	a00b883a 	mov	r5,r20
  82a6a8:	1039883a 	mov	fp,r2
  82a6ac:	0820c100 	call	820c10 <__umodsi3>
  82a6b0:	b8ffffcc 	andi	r3,r23,65535
  82a6b4:	d8c00415 	stw	r3,16(sp)
  82a6b8:	d9000217 	ldw	r4,8(sp)
  82a6bc:	d9400417 	ldw	r5,16(sp)
  82a6c0:	1004943a 	slli	r2,r2,16
  82a6c4:	2006d43a 	srli	r3,r4,16
  82a6c8:	8560983a 	sll	r16,r16,r21
  82a6cc:	2f23383a 	mul	r17,r5,fp
  82a6d0:	10c4b03a 	or	r2,r2,r3
  82a6d4:	dc000015 	stw	r16,0(sp)
  82a6d8:	b56c983a 	sll	r22,r22,r21
  82a6dc:	1440032e 	bgeu	r2,r17,82a6ec <__umoddi3+0x404>
  82a6e0:	15c5883a 	add	r2,r2,r23
  82a6e4:	e73fffc4 	addi	fp,fp,-1
  82a6e8:	15c05d2e 	bgeu	r2,r23,82a860 <__umoddi3+0x578>
  82a6ec:	1463c83a 	sub	r17,r2,r17
  82a6f0:	8809883a 	mov	r4,r17
  82a6f4:	a00b883a 	mov	r5,r20
  82a6f8:	0820c080 	call	820c08 <__udivsi3>
  82a6fc:	8809883a 	mov	r4,r17
  82a700:	a00b883a 	mov	r5,r20
  82a704:	1021883a 	mov	r16,r2
  82a708:	0820c100 	call	820c10 <__umodsi3>
  82a70c:	d8c00417 	ldw	r3,16(sp)
  82a710:	d9000217 	ldw	r4,8(sp)
  82a714:	1004943a 	slli	r2,r2,16
  82a718:	1c23383a 	mul	r17,r3,r16
  82a71c:	20ffffcc 	andi	r3,r4,65535
  82a720:	10ceb03a 	or	r7,r2,r3
  82a724:	3c40032e 	bgeu	r7,r17,82a734 <__umoddi3+0x44c>
  82a728:	3dcf883a 	add	r7,r7,r23
  82a72c:	843fffc4 	addi	r16,r16,-1
  82a730:	3dc0472e 	bgeu	r7,r23,82a850 <__umoddi3+0x568>
  82a734:	e004943a 	slli	r2,fp,16
  82a738:	d9400017 	ldw	r5,0(sp)
  82a73c:	3c4fc83a 	sub	r7,r7,r17
  82a740:	8084b03a 	or	r2,r16,r2
  82a744:	28ffffcc 	andi	r3,r5,65535
  82a748:	280cd43a 	srli	r6,r5,16
  82a74c:	100ad43a 	srli	r5,r2,16
  82a750:	10bfffcc 	andi	r2,r2,65535
  82a754:	10d1383a 	mul	r8,r2,r3
  82a758:	28c7383a 	mul	r3,r5,r3
  82a75c:	1185383a 	mul	r2,r2,r6
  82a760:	4008d43a 	srli	r4,r8,16
  82a764:	298b383a 	mul	r5,r5,r6
  82a768:	10c5883a 	add	r2,r2,r3
  82a76c:	2089883a 	add	r4,r4,r2
  82a770:	20c0022e 	bgeu	r4,r3,82a77c <__umoddi3+0x494>
  82a774:	00800074 	movhi	r2,1
  82a778:	288b883a 	add	r5,r5,r2
  82a77c:	2004d43a 	srli	r2,r4,16
  82a780:	2008943a 	slli	r4,r4,16
  82a784:	40ffffcc 	andi	r3,r8,65535
  82a788:	288b883a 	add	r5,r5,r2
  82a78c:	20c9883a 	add	r4,r4,r3
  82a790:	39400b36 	bltu	r7,r5,82a7c0 <__umoddi3+0x4d8>
  82a794:	39403d26 	beq	r7,r5,82a88c <__umoddi3+0x5a4>
  82a798:	394bc83a 	sub	r5,r7,r5
  82a79c:	00000f06 	br	82a7dc <__umoddi3+0x4f4>
  82a7a0:	30c5c83a 	sub	r2,r6,r3
  82a7a4:	1839883a 	mov	fp,r3
  82a7a8:	b084d83a 	srl	r2,r22,r2
  82a7ac:	a0c6983a 	sll	r3,r20,r3
  82a7b0:	8720983a 	sll	r16,r16,fp
  82a7b4:	b72c983a 	sll	r22,r22,fp
  82a7b8:	18a8b03a 	or	r20,r3,r2
  82a7bc:	003f3a06 	br	82a4a8 <__umoddi3+0x1c0>
  82a7c0:	d8c00017 	ldw	r3,0(sp)
  82a7c4:	20c5c83a 	sub	r2,r4,r3
  82a7c8:	2089803a 	cmpltu	r4,r4,r2
  82a7cc:	2dc7c83a 	sub	r3,r5,r23
  82a7d0:	1907c83a 	sub	r3,r3,r4
  82a7d4:	38cbc83a 	sub	r5,r7,r3
  82a7d8:	1009883a 	mov	r4,r2
  82a7dc:	b105c83a 	sub	r2,r22,r4
  82a7e0:	b087803a 	cmpltu	r3,r22,r2
  82a7e4:	28c7c83a 	sub	r3,r5,r3
  82a7e8:	d9400317 	ldw	r5,12(sp)
  82a7ec:	1544d83a 	srl	r2,r2,r21
  82a7f0:	1948983a 	sll	r4,r3,r5
  82a7f4:	1d46d83a 	srl	r3,r3,r21
  82a7f8:	20a4b03a 	or	r18,r4,r2
  82a7fc:	9011883a 	mov	r8,r18
  82a800:	1813883a 	mov	r9,r3
  82a804:	003ef606 	br	82a3e0 <__umoddi3+0xf8>
  82a808:	01400604 	movi	r5,24
  82a80c:	2805883a 	mov	r2,r5
  82a810:	003ecc06 	br	82a344 <__umoddi3+0x5c>
  82a814:	01400204 	movi	r5,8
  82a818:	2805883a 	mov	r2,r5
  82a81c:	003ec906 	br	82a344 <__umoddi3+0x5c>
  82a820:	01400204 	movi	r5,8
  82a824:	2805883a 	mov	r2,r5
  82a828:	003f0106 	br	82a430 <__umoddi3+0x148>
  82a82c:	01400204 	movi	r5,8
  82a830:	2805883a 	mov	r2,r5
  82a834:	003f1206 	br	82a480 <__umoddi3+0x198>
  82a838:	01400604 	movi	r5,24
  82a83c:	2805883a 	mov	r2,r5
  82a840:	003f0f06 	br	82a480 <__umoddi3+0x198>
  82a844:	01400604 	movi	r5,24
  82a848:	2805883a 	mov	r2,r5
  82a84c:	003ef806 	br	82a430 <__umoddi3+0x148>
  82a850:	3c7fb82e 	bgeu	r7,r17,82a734 <__umoddi3+0x44c>
  82a854:	843fffc4 	addi	r16,r16,-1
  82a858:	3dcf883a 	add	r7,r7,r23
  82a85c:	003fb506 	br	82a734 <__umoddi3+0x44c>
  82a860:	147fa22e 	bgeu	r2,r17,82a6ec <__umoddi3+0x404>
  82a864:	e73fffc4 	addi	fp,fp,-1
  82a868:	15c5883a 	add	r2,r2,r23
  82a86c:	003f9f06 	br	82a6ec <__umoddi3+0x404>
  82a870:	147f692e 	bgeu	r2,r17,82a618 <__umoddi3+0x330>
  82a874:	1405883a 	add	r2,r2,r16
  82a878:	003f6706 	br	82a618 <__umoddi3+0x330>
  82a87c:	1405883a 	add	r2,r2,r16
  82a880:	003f1906 	br	82a4e8 <__umoddi3+0x200>
  82a884:	1405883a 	add	r2,r2,r16
  82a888:	003ec906 	br	82a3b0 <__umoddi3+0xc8>
  82a88c:	b13fcc36 	bltu	r22,r4,82a7c0 <__umoddi3+0x4d8>
  82a890:	000b883a 	mov	r5,zero
  82a894:	003fd106 	br	82a7dc <__umoddi3+0x4f4>

0082a898 <__nedf2>:
  82a898:	deffef04 	addi	sp,sp,-68
  82a89c:	dc400f15 	stw	r17,60(sp)
  82a8a0:	dc400404 	addi	r17,sp,16
  82a8a4:	2005883a 	mov	r2,r4
  82a8a8:	2807883a 	mov	r3,r5
  82a8ac:	dc000e15 	stw	r16,56(sp)
  82a8b0:	d809883a 	mov	r4,sp
  82a8b4:	880b883a 	mov	r5,r17
  82a8b8:	dc000904 	addi	r16,sp,36
  82a8bc:	d8c00115 	stw	r3,4(sp)
  82a8c0:	d8800015 	stw	r2,0(sp)
  82a8c4:	d9800215 	stw	r6,8(sp)
  82a8c8:	dfc01015 	stw	ra,64(sp)
  82a8cc:	d9c00315 	stw	r7,12(sp)
  82a8d0:	08213400 	call	821340 <__unpack_d>
  82a8d4:	d9000204 	addi	r4,sp,8
  82a8d8:	800b883a 	mov	r5,r16
  82a8dc:	08213400 	call	821340 <__unpack_d>
  82a8e0:	d8800417 	ldw	r2,16(sp)
  82a8e4:	00c00044 	movi	r3,1
  82a8e8:	180d883a 	mov	r6,r3
  82a8ec:	1880062e 	bgeu	r3,r2,82a908 <__nedf2+0x70>
  82a8f0:	d8800917 	ldw	r2,36(sp)
  82a8f4:	8809883a 	mov	r4,r17
  82a8f8:	800b883a 	mov	r5,r16
  82a8fc:	1880022e 	bgeu	r3,r2,82a908 <__nedf2+0x70>
  82a900:	08214780 	call	821478 <__fpcmp_parts_d>
  82a904:	100d883a 	mov	r6,r2
  82a908:	3005883a 	mov	r2,r6
  82a90c:	dfc01017 	ldw	ra,64(sp)
  82a910:	dc400f17 	ldw	r17,60(sp)
  82a914:	dc000e17 	ldw	r16,56(sp)
  82a918:	dec01104 	addi	sp,sp,68
  82a91c:	f800283a 	ret

0082a920 <__floatunsidf>:
  82a920:	defff204 	addi	sp,sp,-56
  82a924:	dfc00d15 	stw	ra,52(sp)
  82a928:	ddc00c15 	stw	r23,48(sp)
  82a92c:	dd800b15 	stw	r22,44(sp)
  82a930:	dd400a15 	stw	r21,40(sp)
  82a934:	dd000915 	stw	r20,36(sp)
  82a938:	dcc00815 	stw	r19,32(sp)
  82a93c:	dc800715 	stw	r18,28(sp)
  82a940:	dc400615 	stw	r17,24(sp)
  82a944:	dc000515 	stw	r16,20(sp)
  82a948:	d8000115 	stw	zero,4(sp)
  82a94c:	20000f1e 	bne	r4,zero,82a98c <__floatunsidf+0x6c>
  82a950:	00800084 	movi	r2,2
  82a954:	d8800015 	stw	r2,0(sp)
  82a958:	d809883a 	mov	r4,sp
  82a95c:	082102c0 	call	82102c <__pack_d>
  82a960:	dfc00d17 	ldw	ra,52(sp)
  82a964:	ddc00c17 	ldw	r23,48(sp)
  82a968:	dd800b17 	ldw	r22,44(sp)
  82a96c:	dd400a17 	ldw	r21,40(sp)
  82a970:	dd000917 	ldw	r20,36(sp)
  82a974:	dcc00817 	ldw	r19,32(sp)
  82a978:	dc800717 	ldw	r18,28(sp)
  82a97c:	dc400617 	ldw	r17,24(sp)
  82a980:	dc000517 	ldw	r16,20(sp)
  82a984:	dec00e04 	addi	sp,sp,56
  82a988:	f800283a 	ret
  82a98c:	008000c4 	movi	r2,3
  82a990:	00c00f04 	movi	r3,60
  82a994:	002f883a 	mov	r23,zero
  82a998:	202d883a 	mov	r22,r4
  82a99c:	d8800015 	stw	r2,0(sp)
  82a9a0:	d8c00215 	stw	r3,8(sp)
  82a9a4:	d9000315 	stw	r4,12(sp)
  82a9a8:	ddc00415 	stw	r23,16(sp)
  82a9ac:	0820cb00 	call	820cb0 <__clzsi2>
  82a9b0:	12400744 	addi	r9,r2,29
  82a9b4:	48000b16 	blt	r9,zero,82a9e4 <__floatunsidf+0xc4>
  82a9b8:	483fe726 	beq	r9,zero,82a958 <__floatunsidf+0x38>
  82a9bc:	10bfff44 	addi	r2,r2,-3
  82a9c0:	10002e16 	blt	r2,zero,82aa7c <__floatunsidf+0x15c>
  82a9c4:	b0a2983a 	sll	r17,r22,r2
  82a9c8:	0021883a 	mov	r16,zero
  82a9cc:	d8800217 	ldw	r2,8(sp)
  82a9d0:	dc400415 	stw	r17,16(sp)
  82a9d4:	dc000315 	stw	r16,12(sp)
  82a9d8:	1245c83a 	sub	r2,r2,r9
  82a9dc:	d8800215 	stw	r2,8(sp)
  82a9e0:	003fdd06 	br	82a958 <__floatunsidf+0x38>
  82a9e4:	0255c83a 	sub	r10,zero,r9
  82a9e8:	51bff804 	addi	r6,r10,-32
  82a9ec:	30001b16 	blt	r6,zero,82aa5c <__floatunsidf+0x13c>
  82a9f0:	b9a8d83a 	srl	r20,r23,r6
  82a9f4:	002b883a 	mov	r21,zero
  82a9f8:	000f883a 	mov	r7,zero
  82a9fc:	01000044 	movi	r4,1
  82aa00:	0011883a 	mov	r8,zero
  82aa04:	30002516 	blt	r6,zero,82aa9c <__floatunsidf+0x17c>
  82aa08:	21a6983a 	sll	r19,r4,r6
  82aa0c:	0025883a 	mov	r18,zero
  82aa10:	00bfffc4 	movi	r2,-1
  82aa14:	9089883a 	add	r4,r18,r2
  82aa18:	988b883a 	add	r5,r19,r2
  82aa1c:	248d803a 	cmpltu	r6,r4,r18
  82aa20:	314b883a 	add	r5,r6,r5
  82aa24:	b104703a 	and	r2,r22,r4
  82aa28:	b946703a 	and	r3,r23,r5
  82aa2c:	10c4b03a 	or	r2,r2,r3
  82aa30:	10000226 	beq	r2,zero,82aa3c <__floatunsidf+0x11c>
  82aa34:	01c00044 	movi	r7,1
  82aa38:	0011883a 	mov	r8,zero
  82aa3c:	d9000217 	ldw	r4,8(sp)
  82aa40:	a1c4b03a 	or	r2,r20,r7
  82aa44:	aa06b03a 	or	r3,r21,r8
  82aa48:	2249c83a 	sub	r4,r4,r9
  82aa4c:	d8c00415 	stw	r3,16(sp)
  82aa50:	d9000215 	stw	r4,8(sp)
  82aa54:	d8800315 	stw	r2,12(sp)
  82aa58:	003fbf06 	br	82a958 <__floatunsidf+0x38>
  82aa5c:	bdc7883a 	add	r3,r23,r23
  82aa60:	008007c4 	movi	r2,31
  82aa64:	1285c83a 	sub	r2,r2,r10
  82aa68:	1886983a 	sll	r3,r3,r2
  82aa6c:	b2a8d83a 	srl	r20,r22,r10
  82aa70:	baaad83a 	srl	r21,r23,r10
  82aa74:	1d28b03a 	or	r20,r3,r20
  82aa78:	003fdf06 	br	82a9f8 <__floatunsidf+0xd8>
  82aa7c:	b006d07a 	srli	r3,r22,1
  82aa80:	008007c4 	movi	r2,31
  82aa84:	1245c83a 	sub	r2,r2,r9
  82aa88:	1886d83a 	srl	r3,r3,r2
  82aa8c:	ba62983a 	sll	r17,r23,r9
  82aa90:	b260983a 	sll	r16,r22,r9
  82aa94:	1c62b03a 	or	r17,r3,r17
  82aa98:	003fcc06 	br	82a9cc <__floatunsidf+0xac>
  82aa9c:	2006d07a 	srli	r3,r4,1
  82aaa0:	008007c4 	movi	r2,31
  82aaa4:	1285c83a 	sub	r2,r2,r10
  82aaa8:	18a6d83a 	srl	r19,r3,r2
  82aaac:	22a4983a 	sll	r18,r4,r10
  82aab0:	003fd706 	br	82aa10 <__floatunsidf+0xf0>

0082aab4 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  82aab4:	00802134 	movhi	r2,132
  82aab8:	108a4904 	addi	r2,r2,10532
  82aabc:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  82aac0:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  82aac4:	00bfde84 	movi	r2,-134
  82aac8:	1800011e 	bne	r3,zero,82aad0 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
  82aacc:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  82aad0:	00bffa84 	movi	r2,-22
  82aad4:	203ffd26 	beq	r4,zero,82aacc <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
  82aad8:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  82aadc:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82aae0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82aae4:	00bfff84 	movi	r2,-2
  82aae8:	3084703a 	and	r2,r6,r2
  82aaec:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  82aaf0:	00c02134 	movhi	r3,132
  82aaf4:	18ca4a04 	addi	r3,r3,10536
  82aaf8:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  82aafc:	20800044 	addi	r2,r4,1
  82ab00:	2885883a 	add	r2,r5,r2
  82ab04:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  82ab08:	11000d2e 	bgeu	r2,r4,82ab40 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
  82ab0c:	00800044 	movi	r2,1
  82ab10:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  82ab14:	00802134 	movhi	r2,132
  82ab18:	1082f004 	addi	r2,r2,3008
  entry->next     = list->next;
  82ab1c:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  82ab20:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
  82ab24:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
  82ab28:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
  82ab2c:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  82ab30:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82ab34:	3001703a 	wrctl	status,r6
  82ab38:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  82ab3c:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  82ab40:	40000405 	stb	zero,16(r8)
  82ab44:	003ff306 	br	82ab14 <alt_alarm_start+0x60>

0082ab48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  82ab48:	defffd04 	addi	sp,sp,-12
  82ab4c:	dc000015 	stw	r16,0(sp)
  82ab50:	dfc00215 	stw	ra,8(sp)
  82ab54:	dc400115 	stw	r17,4(sp)
  82ab58:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  82ab5c:	20001516 	blt	r4,zero,82abb4 <close+0x6c>
  82ab60:	20c00324 	muli	r3,r4,12
  82ab64:	00802134 	movhi	r2,132
  82ab68:	10be0004 	addi	r2,r2,-2048
  82ab6c:	1887883a 	add	r3,r3,r2

  if (fd)
  82ab70:	18001026 	beq	r3,zero,82abb4 <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  82ab74:	18800017 	ldw	r2,0(r3)
  82ab78:	10800417 	ldw	r2,16(r2)
  82ab7c:	10001c26 	beq	r2,zero,82abf0 <close+0xa8>
  82ab80:	1809883a 	mov	r4,r3
  82ab84:	103ee83a 	callr	r2
  82ab88:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  82ab8c:	8009883a 	mov	r4,r16
  82ab90:	082b2200 	call	82b220 <alt_release_fd>
    if (rval < 0)
  82ab94:	88001b16 	blt	r17,zero,82ac04 <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  82ab98:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  82ab9c:	1805883a 	mov	r2,r3
  82aba0:	dfc00217 	ldw	ra,8(sp)
  82aba4:	dc400117 	ldw	r17,4(sp)
  82aba8:	dc000017 	ldw	r16,0(sp)
  82abac:	dec00304 	addi	sp,sp,12
  82abb0:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  82abb4:	00802134 	movhi	r2,132
  82abb8:	1082ed04 	addi	r2,r2,2996
  82abbc:	10800017 	ldw	r2,0(r2)
  82abc0:	10000d26 	beq	r2,zero,82abf8 <close+0xb0>
  82abc4:	103ee83a 	callr	r2
  82abc8:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  82abcc:	00ffffc4 	movi	r3,-1
  82abd0:	00801444 	movi	r2,81
  82abd4:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
  82abd8:	1805883a 	mov	r2,r3
  82abdc:	dfc00217 	ldw	ra,8(sp)
  82abe0:	dc400117 	ldw	r17,4(sp)
  82abe4:	dc000017 	ldw	r16,0(sp)
  82abe8:	dec00304 	addi	sp,sp,12
  82abec:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  82abf0:	082b2200 	call	82b220 <alt_release_fd>
  82abf4:	003fe806 	br	82ab98 <close+0x50>
  82abf8:	01002134 	movhi	r4,132
  82abfc:	210a4104 	addi	r4,r4,10500
  82ac00:	003ff206 	br	82abcc <close+0x84>
  82ac04:	00802134 	movhi	r2,132
  82ac08:	1082ed04 	addi	r2,r2,2996
  82ac0c:	10800017 	ldw	r2,0(r2)
  82ac10:	10000626 	beq	r2,zero,82ac2c <close+0xe4>
  82ac14:	103ee83a 	callr	r2
  82ac18:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  82ac1c:	0445c83a 	sub	r2,zero,r17
  82ac20:	00ffffc4 	movi	r3,-1
  82ac24:	20800015 	stw	r2,0(r4)
  82ac28:	003fdc06 	br	82ab9c <close+0x54>
  82ac2c:	01002134 	movhi	r4,132
  82ac30:	210a4104 	addi	r4,r4,10500
  82ac34:	003ff906 	br	82ac1c <close+0xd4>

0082ac38 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  82ac38:	3005883a 	mov	r2,r6
  82ac3c:	f800283a 	ret

0082ac40 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  82ac40:	20000226 	beq	r4,zero,82ac4c <_exit+0xc>
    ALT_SIM_FAIL();
  82ac44:	002af070 	cmpltui	zero,zero,43969
  82ac48:	003fff06 	br	82ac48 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
  82ac4c:	002af0b0 	cmpltui	zero,zero,43970
  82ac50:	003ffd06 	br	82ac48 <_exit+0x8>

0082ac54 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  82ac54:	deffff04 	addi	sp,sp,-4
  82ac58:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82ac5c:	20c00324 	muli	r3,r4,12
  82ac60:	20001116 	blt	r4,zero,82aca8 <fstat+0x54>
  82ac64:	00802134 	movhi	r2,132
  82ac68:	10be0004 	addi	r2,r2,-2048
  82ac6c:	1889883a 	add	r4,r3,r2
  
  if (fd)
  82ac70:	20000d26 	beq	r4,zero,82aca8 <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  82ac74:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  82ac78:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  82ac7c:	10800817 	ldw	r2,32(r2)
  82ac80:	10000326 	beq	r2,zero,82ac90 <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  82ac84:	dfc00017 	ldw	ra,0(sp)
  82ac88:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  82ac8c:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  82ac90:	00880004 	movi	r2,8192
  82ac94:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  82ac98:	1805883a 	mov	r2,r3
  82ac9c:	dfc00017 	ldw	ra,0(sp)
  82aca0:	dec00104 	addi	sp,sp,4
  82aca4:	f800283a 	ret
  82aca8:	00802134 	movhi	r2,132
  82acac:	1082ed04 	addi	r2,r2,2996
  82acb0:	10800017 	ldw	r2,0(r2)
  82acb4:	00c02134 	movhi	r3,132
  82acb8:	18ca4104 	addi	r3,r3,10500
  82acbc:	10000226 	beq	r2,zero,82acc8 <fstat+0x74>
  82acc0:	103ee83a 	callr	r2
  82acc4:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  82acc8:	00801444 	movi	r2,81
  82accc:	18800015 	stw	r2,0(r3)
  82acd0:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
  82acd4:	1805883a 	mov	r2,r3
  82acd8:	dfc00017 	ldw	ra,0(sp)
  82acdc:	dec00104 	addi	sp,sp,4
  82ace0:	f800283a 	ret

0082ace4 <getpid>:
 */
 
int ALT_GETPID (void)
{
  return 0;
}
  82ace4:	0005883a 	mov	r2,zero
  82ace8:	f800283a 	ret

0082acec <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  82acec:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  82acf0:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  82acf4:	00fffa84 	movi	r3,-22
  82acf8:	1100022e 	bgeu	r2,r4,82ad04 <alt_irq_register+0x18>
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  82acfc:	1805883a 	mov	r2,r3
  82ad00:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82ad04:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82ad08:	013fff84 	movi	r4,-2
  82ad0c:	4104703a 	and	r2,r8,r4
  82ad10:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  82ad14:	380690fa 	slli	r3,r7,3
  82ad18:	00802174 	movhi	r2,133
  82ad1c:	10b50504 	addi	r2,r2,-11244
  82ad20:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = context;
  82ad24:	19400115 	stw	r5,4(r3)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  82ad28:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  82ad2c:	30001126 	beq	r6,zero,82ad74 <alt_irq_register+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82ad30:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82ad34:	2904703a 	and	r2,r5,r4
  82ad38:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  82ad3c:	01002134 	movhi	r4,132
  82ad40:	210a4504 	addi	r4,r4,10516
  82ad44:	00800044 	movi	r2,1
  82ad48:	20c00017 	ldw	r3,0(r4)
  82ad4c:	11c4983a 	sll	r2,r2,r7
  82ad50:	10c4b03a 	or	r2,r2,r3
  82ad54:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  82ad58:	20c00017 	ldw	r3,0(r4)
  82ad5c:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82ad60:	2801703a 	wrctl	status,r5
  82ad64:	4001703a 	wrctl	status,r8
  82ad68:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
  82ad6c:	1805883a 	mov	r2,r3
  82ad70:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82ad74:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82ad78:	2904703a 	and	r2,r5,r4
  82ad7c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  82ad80:	01002134 	movhi	r4,132
  82ad84:	210a4504 	addi	r4,r4,10516
  82ad88:	00bfff84 	movi	r2,-2
  82ad8c:	20c00017 	ldw	r3,0(r4)
  82ad90:	11c4183a 	rol	r2,r2,r7
  82ad94:	10c4703a 	and	r2,r2,r3
  82ad98:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  82ad9c:	20c00017 	ldw	r3,0(r4)
  82ada0:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82ada4:	2801703a 	wrctl	status,r5
  82ada8:	003fee06 	br	82ad64 <alt_irq_register+0x78>

0082adac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  82adac:	defff004 	addi	sp,sp,-64
  82adb0:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82adb4:	20c00324 	muli	r3,r4,12
  82adb8:	20000f16 	blt	r4,zero,82adf8 <isatty+0x4c>
  82adbc:	00802134 	movhi	r2,132
  82adc0:	10be0004 	addi	r2,r2,-2048
  82adc4:	1885883a 	add	r2,r3,r2
  
  if (fd)
  82adc8:	10000b26 	beq	r2,zero,82adf8 <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  82adcc:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  82add0:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  82add4:	10c00817 	ldw	r3,32(r2)
  82add8:	00800044 	movi	r2,1
  82addc:	18000326 	beq	r3,zero,82adec <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  82ade0:	082ac540 	call	82ac54 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  82ade4:	d8c00117 	ldw	r3,4(sp)
  82ade8:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  82adec:	dfc00f17 	ldw	ra,60(sp)
  82adf0:	dec01004 	addi	sp,sp,64
  82adf4:	f800283a 	ret
  82adf8:	00802134 	movhi	r2,132
  82adfc:	1082ed04 	addi	r2,r2,2996
  82ae00:	10800017 	ldw	r2,0(r2)
  82ae04:	00c02134 	movhi	r3,132
  82ae08:	18ca4104 	addi	r3,r3,10500
  82ae0c:	10000226 	beq	r2,zero,82ae18 <isatty+0x6c>
  82ae10:	103ee83a 	callr	r2
  82ae14:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  82ae18:	00801444 	movi	r2,81
  82ae1c:	18800015 	stw	r2,0(r3)
  82ae20:	0005883a 	mov	r2,zero
    return 0;
  }
}
  82ae24:	dfc00f17 	ldw	ra,60(sp)
  82ae28:	dec01004 	addi	sp,sp,64
  82ae2c:	f800283a 	ret

0082ae30 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  82ae30:	defffe04 	addi	sp,sp,-8
  82ae34:	dfc00115 	stw	ra,4(sp)
  82ae38:	dc000015 	stw	r16,0(sp)
  int status = 0;

  if (pid <= 0)
  82ae3c:	01004116 	blt	zero,r4,82af44 <kill+0x114>
  {
    switch (sig)
  82ae40:	008007c4 	movi	r2,31
  82ae44:	11400d2e 	bgeu	r2,r5,82ae7c <kill+0x4c>
  82ae48:	04000584 	movi	r16,22
  82ae4c:	00802134 	movhi	r2,132
  82ae50:	1082ed04 	addi	r2,r2,2996
  82ae54:	10800017 	ldw	r2,0(r2)
  82ae58:	10002f26 	beq	r2,zero,82af18 <kill+0xe8>
  82ae5c:	103ee83a 	callr	r2
    status = ESRCH;
  }

  if (status)
  {
    ALT_ERRNO = status;
  82ae60:	00ffffc4 	movi	r3,-1
  82ae64:	14000015 	stw	r16,0(r2)
    return -1;
  }

  return 0;
}
  82ae68:	1805883a 	mov	r2,r3
  82ae6c:	dfc00117 	ldw	ra,4(sp)
  82ae70:	dc000017 	ldw	r16,0(sp)
  82ae74:	dec00204 	addi	sp,sp,8
  82ae78:	f800283a 	ret
{
  int status = 0;

  if (pid <= 0)
  {
    switch (sig)
  82ae7c:	2945883a 	add	r2,r5,r5
  82ae80:	1085883a 	add	r2,r2,r2
  82ae84:	00c020f4 	movhi	r3,131
  82ae88:	18eba604 	addi	r3,r3,-20840
  82ae8c:	10c5883a 	add	r2,r2,r3
  82ae90:	11000017 	ldw	r4,0(r2)
  82ae94:	2000683a 	jmp	r4
  82ae98:	0082af24 	muli	r2,zero,2748
  82ae9c:	0082ae48 	cmpgei	r2,zero,2745
  82aea0:	0082ae48 	cmpgei	r2,zero,2745
  82aea4:	0082af3c 	xorhi	r2,zero,2748
  82aea8:	0082af3c 	xorhi	r2,zero,2748
  82aeac:	0082af3c 	xorhi	r2,zero,2748
  82aeb0:	0082af3c 	xorhi	r2,zero,2748
  82aeb4:	0082ae48 	cmpgei	r2,zero,2745
  82aeb8:	0082af3c 	xorhi	r2,zero,2748
  82aebc:	0082af3c 	xorhi	r2,zero,2748
  82aec0:	0082af3c 	xorhi	r2,zero,2748
  82aec4:	0082af3c 	xorhi	r2,zero,2748
  82aec8:	0082af3c 	xorhi	r2,zero,2748
  82aecc:	0082af3c 	xorhi	r2,zero,2748
  82aed0:	0082af3c 	xorhi	r2,zero,2748
  82aed4:	0082af3c 	xorhi	r2,zero,2748
  82aed8:	0082af24 	muli	r2,zero,2748
  82aedc:	0082ae48 	cmpgei	r2,zero,2745
  82aee0:	0082ae48 	cmpgei	r2,zero,2745
  82aee4:	0082ae48 	cmpgei	r2,zero,2745
  82aee8:	0082af24 	muli	r2,zero,2748
  82aeec:	0082ae48 	cmpgei	r2,zero,2745
  82aef0:	0082ae48 	cmpgei	r2,zero,2745
  82aef4:	0082af3c 	xorhi	r2,zero,2748
  82aef8:	0082af3c 	xorhi	r2,zero,2748
  82aefc:	0082af3c 	xorhi	r2,zero,2748
  82af00:	0082af3c 	xorhi	r2,zero,2748
  82af04:	0082af3c 	xorhi	r2,zero,2748
  82af08:	0082ae48 	cmpgei	r2,zero,2745
  82af0c:	0082ae48 	cmpgei	r2,zero,2745
  82af10:	0082af3c 	xorhi	r2,zero,2748
  82af14:	0082af3c 	xorhi	r2,zero,2748
  82af18:	00802134 	movhi	r2,132
  82af1c:	108a4104 	addi	r2,r2,10500
  82af20:	003fcf06 	br	82ae60 <kill+0x30>
  82af24:	0007883a 	mov	r3,zero
    ALT_ERRNO = status;
    return -1;
  }

  return 0;
}
  82af28:	1805883a 	mov	r2,r3
  82af2c:	dfc00117 	ldw	ra,4(sp)
  82af30:	dc000017 	ldw	r16,0(sp)
  82af34:	dec00204 	addi	sp,sp,8
  82af38:	f800283a 	ret
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  82af3c:	0009883a 	mov	r4,zero
  82af40:	082ac400 	call	82ac40 <_exit>
    status = ESRCH;
  }

  if (status)
  {
    ALT_ERRNO = status;
  82af44:	040000c4 	movi	r16,3
  82af48:	003fc006 	br	82ae4c <kill+0x1c>

0082af4c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  82af4c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  82af50:	01002134 	movhi	r4,132
  82af54:	2102f204 	addi	r4,r4,3016
  82af58:	00c02134 	movhi	r3,132
  82af5c:	18fbb104 	addi	r3,r3,-4412
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  82af60:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  82af64:	20c00826 	beq	r4,r3,82af88 <alt_load+0x3c>
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  82af68:	01402134 	movhi	r5,132
  82af6c:	2942f204 	addi	r5,r5,3016
  {
    while( to != end )
  82af70:	19400526 	beq	r3,r5,82af88 <alt_load+0x3c>
    {
      *to++ = *from++;
  82af74:	20800017 	ldw	r2,0(r4)
  82af78:	21000104 	addi	r4,r4,4
  82af7c:	18800015 	stw	r2,0(r3)
  82af80:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  82af84:	28fffb1e 	bne	r5,r3,82af74 <alt_load+0x28>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  82af88:	01002034 	movhi	r4,128
  82af8c:	21000804 	addi	r4,r4,32
  82af90:	00c02034 	movhi	r3,128
  82af94:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  82af98:	20c00826 	beq	r4,r3,82afbc <alt_load+0x70>
  82af9c:	01402034 	movhi	r5,128
  82afa0:	29406104 	addi	r5,r5,388
  {
    while( to != end )
  82afa4:	19400526 	beq	r3,r5,82afbc <alt_load+0x70>
    {
      *to++ = *from++;
  82afa8:	20800017 	ldw	r2,0(r4)
  82afac:	21000104 	addi	r4,r4,4
  82afb0:	18800015 	stw	r2,0(r3)
  82afb4:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  82afb8:	28fffb1e 	bne	r5,r3,82afa8 <alt_load+0x5c>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  82afbc:	010020f4 	movhi	r4,131
  82afc0:	210ba404 	addi	r4,r4,11920
  82afc4:	00c020f4 	movhi	r3,131
  82afc8:	18cba404 	addi	r3,r3,11920

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  82afcc:	20c00826 	beq	r4,r3,82aff0 <alt_load+0xa4>
  82afd0:	01402134 	movhi	r5,132
  82afd4:	297bb104 	addi	r5,r5,-4412
  {
    while( to != end )
  82afd8:	19400526 	beq	r3,r5,82aff0 <alt_load+0xa4>
    {
      *to++ = *from++;
  82afdc:	20800017 	ldw	r2,0(r4)
  82afe0:	21000104 	addi	r4,r4,4
  82afe4:	18800015 	stw	r2,0(r3)
  82afe8:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  82afec:	28fffb1e 	bne	r5,r3,82afdc <alt_load+0x90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  82aff0:	08327380 	call	832738 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  82aff4:	dfc00017 	ldw	ra,0(sp)
  82aff8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  82affc:	08328f81 	jmpi	8328f8 <alt_icache_flush_all>

0082b000 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  82b000:	defffe04 	addi	sp,sp,-8
  82b004:	dfc00115 	stw	ra,4(sp)
  82b008:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82b00c:	20001f16 	blt	r4,zero,82b08c <lseek+0x8c>
  82b010:	20c00324 	muli	r3,r4,12
  82b014:	00802134 	movhi	r2,132
  82b018:	10be0004 	addi	r2,r2,-2048
  82b01c:	1889883a 	add	r4,r3,r2
  
  if (fd) 
  82b020:	20001c26 	beq	r4,zero,82b094 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  82b024:	20800017 	ldw	r2,0(r4)
  82b028:	10800717 	ldw	r2,28(r2)
  82b02c:	10000626 	beq	r2,zero,82b048 <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  82b030:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  82b034:	10000516 	blt	r2,zero,82b04c <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  82b038:	dfc00117 	ldw	ra,4(sp)
  82b03c:	dc000017 	ldw	r16,0(sp)
  82b040:	dec00204 	addi	sp,sp,8
  82b044:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  82b048:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  82b04c:	00a1c83a 	sub	r16,zero,r2
  82b050:	00802134 	movhi	r2,132
  82b054:	1082ed04 	addi	r2,r2,2996
  82b058:	10800017 	ldw	r2,0(r2)
  82b05c:	10000826 	beq	r2,zero,82b080 <lseek+0x80>
  82b060:	103ee83a 	callr	r2
  82b064:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
  82b068:	00bfffc4 	movi	r2,-1
  82b06c:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
  82b070:	dfc00117 	ldw	ra,4(sp)
  82b074:	dc000017 	ldw	r16,0(sp)
  82b078:	dec00204 	addi	sp,sp,8
  82b07c:	f800283a 	ret
  82b080:	00c02134 	movhi	r3,132
  82b084:	18ca4104 	addi	r3,r3,10500
  82b088:	003ff706 	br	82b068 <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82b08c:	04001444 	movi	r16,81
  82b090:	003fef06 	br	82b050 <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  82b094:	00bfebc4 	movi	r2,-81
  82b098:	003fec06 	br	82b04c <lseek+0x4c>

0082b09c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  82b09c:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  82b0a0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  82b0a4:	dfc00115 	stw	ra,4(sp)
  82b0a8:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  82b0ac:	082b4cc0 	call	82b4cc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  82b0b0:	082b4ec0 	call	82b4ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  82b0b4:	01002134 	movhi	r4,132
  82b0b8:	213ba204 	addi	r4,r4,-4472
  82b0bc:	200b883a 	mov	r5,r4
  82b0c0:	200d883a 	mov	r6,r4
  82b0c4:	08329040 	call	832904 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  82b0c8:	08327cc0 	call	8327cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  82b0cc:	010020f4 	movhi	r4,131
  82b0d0:	210a0604 	addi	r4,r4,10264
  82b0d4:	0832cd80 	call	832cd8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  82b0d8:	d1276b17 	ldw	r4,-25172(gp)
  82b0dc:	d1676c17 	ldw	r5,-25168(gp)
  82b0e0:	d1a76d17 	ldw	r6,-25164(gp)
  82b0e4:	080df6c0 	call	80df6c <main>
  82b0e8:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
  82b0ec:	01000044 	movi	r4,1
  82b0f0:	082ab480 	call	82ab48 <close>
  exit (result);
  82b0f4:	8809883a 	mov	r4,r17
  82b0f8:	08216500 	call	821650 <exit>

0082b0fc <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
  82b0fc:	f800283a 	ret

0082b100 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
  82b100:	f800283a 	ret

0082b104 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  82b104:	defffe04 	addi	sp,sp,-8
  82b108:	dfc00115 	stw	ra,4(sp)
  82b10c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82b110:	20002516 	blt	r4,zero,82b1a8 <read+0xa4>
  82b114:	20c00324 	muli	r3,r4,12
  82b118:	00802134 	movhi	r2,132
  82b11c:	10be0004 	addi	r2,r2,-2048
  82b120:	1889883a 	add	r4,r3,r2
  
  if (fd)
  82b124:	20002026 	beq	r4,zero,82b1a8 <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  82b128:	20800217 	ldw	r2,8(r4)
  82b12c:	00c00044 	movi	r3,1
  82b130:	108000cc 	andi	r2,r2,3
  82b134:	10c00b26 	beq	r2,r3,82b164 <read+0x60>
  82b138:	20800017 	ldw	r2,0(r4)
  82b13c:	10800517 	ldw	r2,20(r2)
  82b140:	10000826 	beq	r2,zero,82b164 <read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  82b144:	103ee83a 	callr	r2
  82b148:	1021883a 	mov	r16,r2
  82b14c:	10002716 	blt	r2,zero,82b1ec <read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  82b150:	8005883a 	mov	r2,r16
  82b154:	dfc00117 	ldw	ra,4(sp)
  82b158:	dc000017 	ldw	r16,0(sp)
  82b15c:	dec00204 	addi	sp,sp,8
  82b160:	f800283a 	ret
  82b164:	00802134 	movhi	r2,132
  82b168:	1082ed04 	addi	r2,r2,2996
  82b16c:	10800017 	ldw	r2,0(r2)
  82b170:	10000a26 	beq	r2,zero,82b19c <read+0x98>
  82b174:	103ee83a 	callr	r2
  82b178:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  82b17c:	043fffc4 	movi	r16,-1
  82b180:	00800344 	movi	r2,13
  82b184:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  82b188:	8005883a 	mov	r2,r16
  82b18c:	dfc00117 	ldw	ra,4(sp)
  82b190:	dc000017 	ldw	r16,0(sp)
  82b194:	dec00204 	addi	sp,sp,8
  82b198:	f800283a 	ret
  82b19c:	00c02134 	movhi	r3,132
  82b1a0:	18ca4104 	addi	r3,r3,10500
  82b1a4:	003ff506 	br	82b17c <read+0x78>
  82b1a8:	00802134 	movhi	r2,132
  82b1ac:	1082ed04 	addi	r2,r2,2996
  82b1b0:	10800017 	ldw	r2,0(r2)
  82b1b4:	10000a26 	beq	r2,zero,82b1e0 <read+0xdc>
  82b1b8:	103ee83a 	callr	r2
  82b1bc:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  82b1c0:	00801444 	movi	r2,81
  82b1c4:	043fffc4 	movi	r16,-1
  82b1c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  82b1cc:	8005883a 	mov	r2,r16
  82b1d0:	dfc00117 	ldw	ra,4(sp)
  82b1d4:	dc000017 	ldw	r16,0(sp)
  82b1d8:	dec00204 	addi	sp,sp,8
  82b1dc:	f800283a 	ret
  82b1e0:	00c02134 	movhi	r3,132
  82b1e4:	18ca4104 	addi	r3,r3,10500
  82b1e8:	003ff506 	br	82b1c0 <read+0xbc>
  82b1ec:	00802134 	movhi	r2,132
  82b1f0:	1082ed04 	addi	r2,r2,2996
  82b1f4:	10800017 	ldw	r2,0(r2)
  82b1f8:	10000626 	beq	r2,zero,82b214 <read+0x110>
  82b1fc:	103ee83a 	callr	r2
  82b200:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  82b204:	0405c83a 	sub	r2,zero,r16
  82b208:	043fffc4 	movi	r16,-1
  82b20c:	18800015 	stw	r2,0(r3)
  82b210:	003fcf06 	br	82b150 <read+0x4c>
  82b214:	00c02134 	movhi	r3,132
  82b218:	18ca4104 	addi	r3,r3,10500
  82b21c:	003ff906 	br	82b204 <read+0x100>

0082b220 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  82b220:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
  82b224:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  82b228:	1100050e 	bge	r2,r4,82b240 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
  82b22c:	00802134 	movhi	r2,132
  82b230:	10be0004 	addi	r2,r2,-2048
  82b234:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
  82b238:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  82b23c:	10000215 	stw	zero,8(r2)
  82b240:	f800283a 	ret

0082b244 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82b244:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82b248:	00bfff84 	movi	r2,-2
  82b24c:	2884703a 	and	r2,r5,r2
  82b250:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  82b254:	d0e01417 	ldw	r3,-32688(gp)
  82b258:	00bfff04 	movi	r2,-4
  82b25c:	18c000c4 	addi	r3,r3,3
  82b260:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  82b264:	1909883a 	add	r4,r3,r4
  82b268:	00804034 	movhi	r2,256
  82b26c:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  82b270:	d0e01415 	stw	r3,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  82b274:	1100042e 	bgeu	r2,r4,82b288 <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82b278:	2801703a 	wrctl	status,r5
  82b27c:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  82b280:	1805883a 	mov	r2,r3
  82b284:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  82b288:	d1201415 	stw	r4,-32688(gp)
  82b28c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  82b290:	1805883a 	mov	r2,r3
  82b294:	f800283a 	ret

0082b298 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82b298:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82b29c:	00bfff84 	movi	r2,-2
  82b2a0:	3084703a 	and	r2,r6,r2
  82b2a4:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  82b2a8:	21400017 	ldw	r5,0(r4)
  82b2ac:	20800117 	ldw	r2,4(r4)
  82b2b0:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
  82b2b4:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  82b2b8:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  82b2bc:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  82b2c0:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82b2c4:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  82b2c8:	f800283a 	ret

0082b2cc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  82b2cc:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  82b2d0:	d0a76f17 	ldw	r2,-25156(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  82b2d4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  82b2d8:	d4201517 	ldw	r16,-32684(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  82b2dc:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  82b2e0:	10800044 	addi	r2,r2,1
  82b2e4:	d4a01504 	addi	r18,gp,-32684
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  82b2e8:	dfc00315 	stw	ra,12(sp)
  82b2ec:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  82b2f0:	d0a76f15 	stw	r2,-25156(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  82b2f4:	84800d26 	beq	r16,r18,82b32c <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  82b2f8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  82b2fc:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  82b300:	10000326 	beq	r2,zero,82b310 <alt_tick+0x44>
  82b304:	d0a76f17 	ldw	r2,-25156(gp)
  82b308:	1000011e 	bne	r2,zero,82b310 <alt_tick+0x44>
    {
      alarm->rollover = 0;
  82b30c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  82b310:	d0e76f17 	ldw	r3,-25156(gp)
  82b314:	80800217 	ldw	r2,8(r16)
  82b318:	18800236 	bltu	r3,r2,82b324 <alt_tick+0x58>
  82b31c:	80800403 	ldbu	r2,16(r16)
  82b320:	10000826 	beq	r2,zero,82b344 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  82b324:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  82b328:	84bff31e 	bne	r16,r18,82b2f8 <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  82b32c:	dfc00317 	ldw	ra,12(sp)
  82b330:	dc800217 	ldw	r18,8(sp)
  82b334:	dc400117 	ldw	r17,4(sp)
  82b338:	dc000017 	ldw	r16,0(sp)
  82b33c:	dec00404 	addi	sp,sp,16
  82b340:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  82b344:	81000517 	ldw	r4,20(r16)
  82b348:	80c00317 	ldw	r3,12(r16)
  82b34c:	183ee83a 	callr	r3
  82b350:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  82b354:	10000926 	beq	r2,zero,82b37c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  82b358:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  82b35c:	d0e76f17 	ldw	r3,-25156(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  82b360:	2085883a 	add	r2,r4,r2
  82b364:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  82b368:	10ffee2e 	bgeu	r2,r3,82b324 <alt_tick+0x58>
        {
          alarm->rollover = 1;
  82b36c:	00800044 	movi	r2,1
  82b370:	80800405 	stb	r2,16(r16)
  82b374:	8821883a 	mov	r16,r17
  82b378:	003feb06 	br	82b328 <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82b37c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82b380:	00bfff84 	movi	r2,-2
  82b384:	2884703a 	and	r2,r5,r2
  82b388:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  82b38c:	81000017 	ldw	r4,0(r16)
  82b390:	80800117 	ldw	r2,4(r16)
  82b394:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
  82b398:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  82b39c:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  82b3a0:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  82b3a4:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82b3a8:	2801703a 	wrctl	status,r5
  82b3ac:	8821883a 	mov	r16,r17
  82b3b0:	003fdd06 	br	82b328 <alt_tick+0x5c>

0082b3b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  82b3b4:	defffe04 	addi	sp,sp,-8
  82b3b8:	dfc00115 	stw	ra,4(sp)
  82b3bc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82b3c0:	20002416 	blt	r4,zero,82b454 <write+0xa0>
  82b3c4:	20c00324 	muli	r3,r4,12
  82b3c8:	00802134 	movhi	r2,132
  82b3cc:	10be0004 	addi	r2,r2,-2048
  82b3d0:	1889883a 	add	r4,r3,r2
  
  if (fd)
  82b3d4:	20001f26 	beq	r4,zero,82b454 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  82b3d8:	20800217 	ldw	r2,8(r4)
  82b3dc:	108000cc 	andi	r2,r2,3
  82b3e0:	10000b26 	beq	r2,zero,82b410 <write+0x5c>
  82b3e4:	20800017 	ldw	r2,0(r4)
  82b3e8:	10800617 	ldw	r2,24(r2)
  82b3ec:	10000826 	beq	r2,zero,82b410 <write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  82b3f0:	103ee83a 	callr	r2
  82b3f4:	1021883a 	mov	r16,r2
  82b3f8:	10002716 	blt	r2,zero,82b498 <write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  82b3fc:	8005883a 	mov	r2,r16
  82b400:	dfc00117 	ldw	ra,4(sp)
  82b404:	dc000017 	ldw	r16,0(sp)
  82b408:	dec00204 	addi	sp,sp,8
  82b40c:	f800283a 	ret
  82b410:	00802134 	movhi	r2,132
  82b414:	1082ed04 	addi	r2,r2,2996
  82b418:	10800017 	ldw	r2,0(r2)
  82b41c:	10000a26 	beq	r2,zero,82b448 <write+0x94>
  82b420:	103ee83a 	callr	r2
  82b424:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  82b428:	043fffc4 	movi	r16,-1
  82b42c:	00800344 	movi	r2,13
  82b430:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  82b434:	8005883a 	mov	r2,r16
  82b438:	dfc00117 	ldw	ra,4(sp)
  82b43c:	dc000017 	ldw	r16,0(sp)
  82b440:	dec00204 	addi	sp,sp,8
  82b444:	f800283a 	ret
  82b448:	00c02134 	movhi	r3,132
  82b44c:	18ca4104 	addi	r3,r3,10500
  82b450:	003ff506 	br	82b428 <write+0x74>
  82b454:	00802134 	movhi	r2,132
  82b458:	1082ed04 	addi	r2,r2,2996
  82b45c:	10800017 	ldw	r2,0(r2)
  82b460:	10000a26 	beq	r2,zero,82b48c <write+0xd8>
  82b464:	103ee83a 	callr	r2
  82b468:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  82b46c:	00801444 	movi	r2,81
  82b470:	043fffc4 	movi	r16,-1
  82b474:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  82b478:	8005883a 	mov	r2,r16
  82b47c:	dfc00117 	ldw	ra,4(sp)
  82b480:	dc000017 	ldw	r16,0(sp)
  82b484:	dec00204 	addi	sp,sp,8
  82b488:	f800283a 	ret
  82b48c:	00c02134 	movhi	r3,132
  82b490:	18ca4104 	addi	r3,r3,10500
  82b494:	003ff506 	br	82b46c <write+0xb8>
  82b498:	00802134 	movhi	r2,132
  82b49c:	1082ed04 	addi	r2,r2,2996
  82b4a0:	10800017 	ldw	r2,0(r2)
  82b4a4:	10000626 	beq	r2,zero,82b4c0 <write+0x10c>
  82b4a8:	103ee83a 	callr	r2
  82b4ac:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  82b4b0:	0405c83a 	sub	r2,zero,r16
  82b4b4:	043fffc4 	movi	r16,-1
  82b4b8:	18800015 	stw	r2,0(r3)
  82b4bc:	003fcf06 	br	82b3fc <write+0x48>
  82b4c0:	00c02134 	movhi	r3,132
  82b4c4:	18ca4104 	addi	r3,r3,10500
  82b4c8:	003ff906 	br	82b4b0 <write+0xfc>

0082b4cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  82b4cc:	deffff04 	addi	sp,sp,-4
  82b4d0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
  82b4d4:	0832b880 	call	832b88 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  82b4d8:	00800044 	movi	r2,1
  82b4dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  82b4e0:	dfc00017 	ldw	ra,0(sp)
  82b4e4:	dec00104 	addi	sp,sp,4
  82b4e8:	f800283a 	ret

0082b4ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  82b4ec:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( AUDIOBUFFERPROCESS, audioBufferProcess);
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  82b4f0:	01c0fa04 	movi	r7,1000
  82b4f4:	01004234 	movhi	r4,264
  82b4f8:	210d0004 	addi	r4,r4,13312
  82b4fc:	000b883a 	mov	r5,zero
  82b500:	000d883a 	mov	r6,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  82b504:	dfc00115 	stw	ra,4(sp)
  82b508:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( AUDIOBUFFERPROCESS, audioBufferProcess);
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  82b50c:	082bcb00 	call	82bcb0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  82b510:	01800104 	movi	r6,4
  82b514:	01002134 	movhi	r4,132
  82b518:	213e6a04 	addi	r4,r4,-1624
  82b51c:	000b883a 	mov	r5,zero
  82b520:	082b7b80 	call	82b7b8 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  82b524:	01002134 	movhi	r4,132
  82b528:	213e6004 	addi	r4,r4,-1664
  82b52c:	01402134 	movhi	r5,132
  82b530:	2942ea04 	addi	r5,r5,2984
  82b534:	08327500 	call	832750 <alt_dev_llist_insert>
  82b538:	01002134 	movhi	r4,132
  82b53c:	21027804 	addi	r4,r4,2528
  82b540:	01402134 	movhi	r5,132
  82b544:	2942ea04 	addi	r5,r5,2984
  82b548:	08327500 	call	832750 <alt_dev_llist_insert>
  82b54c:	01402134 	movhi	r5,132
  82b550:	2942ea04 	addi	r5,r5,2984
  82b554:	01002134 	movhi	r4,132
  82b558:	21028404 	addi	r4,r4,2576
  82b55c:	08327500 	call	832750 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
  82b560:	01002134 	movhi	r4,132
  82b564:	21029004 	addi	r4,r4,2624
  82b568:	082c6d00 	call	82c6d0 <alt_up_ps2_init>
  82b56c:	01402134 	movhi	r5,132
  82b570:	2942ea04 	addi	r5,r5,2984
  82b574:	01002134 	movhi	r4,132
  82b578:	21029004 	addi	r4,r4,2624
  82b57c:	08327500 	call	832750 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  82b580:	04002134 	movhi	r16,132
  82b584:	8402a904 	addi	r16,r16,2724
  82b588:	01402134 	movhi	r5,132
  82b58c:	2942ea04 	addi	r5,r5,2984
  82b590:	01002134 	movhi	r4,132
  82b594:	21029e04 	addi	r4,r4,2680
  82b598:	08327500 	call	832750 <alt_dev_llist_insert>
  82b59c:	80800a17 	ldw	r2,40(r16)
  82b5a0:	8009883a 	mov	r4,r16
  82b5a4:	10c00117 	ldw	r3,4(r2)
  82b5a8:	00801004 	movi	r2,64
  82b5ac:	180ad43a 	srli	r5,r3,16
  82b5b0:	18ffffcc 	andi	r3,r3,65535
  82b5b4:	80c00c15 	stw	r3,48(r16)
  82b5b8:	81400d15 	stw	r5,52(r16)
  82b5bc:	10c00436 	bltu	r2,r3,82b5d0 <alt_sys_init+0xe4>
  82b5c0:	00800fc4 	movi	r2,63
  82b5c4:	00c00184 	movi	r3,6
  82b5c8:	80800f15 	stw	r2,60(r16)
  82b5cc:	80c01015 	stw	r3,64(r16)
  82b5d0:	00800804 	movi	r2,32
  82b5d4:	11400236 	bltu	r2,r5,82b5e0 <alt_sys_init+0xf4>
  82b5d8:	008007c4 	movi	r2,31
  82b5dc:	80801115 	stw	r2,68(r16)
  82b5e0:	082c9a80 	call	82c9a8 <alt_up_char_buffer_init>
  82b5e4:	01402134 	movhi	r5,132
  82b5e8:	2942ea04 	addi	r5,r5,2984
  82b5ec:	8009883a 	mov	r4,r16
  82b5f0:	08327500 	call	832750 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA_0, pixel_buffer_dma_0);
  82b5f4:	02002134 	movhi	r8,132
  82b5f8:	4202bb04 	addi	r8,r8,2796
  82b5fc:	41000a17 	ldw	r4,40(r8)
  82b600:	02400044 	movi	r9,1
  82b604:	01c00084 	movi	r7,2
  82b608:	20800017 	ldw	r2,0(r4)
  82b60c:	40800b15 	stw	r2,44(r8)
  82b610:	20c00117 	ldw	r3,4(r4)
  82b614:	40c00c15 	stw	r3,48(r8)
  82b618:	2080020b 	ldhu	r2,8(r4)
  82b61c:	40800f15 	stw	r2,60(r8)
  82b620:	20c0028b 	ldhu	r3,10(r4)
  82b624:	40c01015 	stw	r3,64(r8)
  82b628:	20800317 	ldw	r2,12(r4)
  82b62c:	1245d83a 	sra	r2,r2,r9
  82b630:	1244703a 	and	r2,r2,r9
  82b634:	40800d15 	stw	r2,52(r8)
  82b638:	20c00317 	ldw	r3,12(r4)
  82b63c:	1807d13a 	srai	r3,r3,4
  82b640:	18c003cc 	andi	r3,r3,15
  82b644:	40c00e15 	stw	r3,56(r8)
  82b648:	21400317 	ldw	r5,12(r4)
  82b64c:	280cd43a 	srli	r6,r5,16
  82b650:	1a401c26 	beq	r3,r9,82b6c4 <alt_sys_init+0x1d8>
  82b654:	19c01e26 	beq	r3,r7,82b6d0 <alt_sys_init+0x1e4>
  82b658:	41c01115 	stw	r7,68(r8)
  82b65c:	3809883a 	mov	r4,r7
  82b660:	280ad63a 	srli	r5,r5,24
  82b664:	31803fcc 	andi	r6,r6,255
  82b668:	00800804 	movi	r2,32
  82b66c:	118fc83a 	sub	r7,r2,r6
  82b670:	00ffffc4 	movi	r3,-1
  82b674:	1145c83a 	sub	r2,r2,r5
  82b678:	1884d83a 	srl	r2,r3,r2
  82b67c:	19c6d83a 	srl	r3,r3,r7
  82b680:	310d883a 	add	r6,r6,r4
  82b684:	01402134 	movhi	r5,132
  82b688:	2942ea04 	addi	r5,r5,2984
  82b68c:	01002134 	movhi	r4,132
  82b690:	2102bb04 	addi	r4,r4,2796
  82b694:	40801415 	stw	r2,80(r8)
  82b698:	40c01215 	stw	r3,72(r8)
  82b69c:	41801315 	stw	r6,76(r8)
  82b6a0:	08327500 	call	832750 <alt_dev_llist_insert>
  82b6a4:	01002134 	movhi	r4,132
  82b6a8:	2102d004 	addi	r4,r4,2880
  82b6ac:	01402134 	movhi	r5,132
  82b6b0:	2942ea04 	addi	r5,r5,2984
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
}
  82b6b4:	dfc00117 	ldw	ra,4(sp)
  82b6b8:	dc000017 	ldw	r16,0(sp)
  82b6bc:	dec00204 	addi	sp,sp,8
  82b6c0:	08327501 	jmpi	832750 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA_0, pixel_buffer_dma_0);
  82b6c4:	40001115 	stw	zero,68(r8)
  82b6c8:	41001117 	ldw	r4,68(r8)
  82b6cc:	003fe406 	br	82b660 <alt_sys_init+0x174>
  82b6d0:	4809883a 	mov	r4,r9
  82b6d4:	42401115 	stw	r9,68(r8)
  82b6d8:	003fe106 	br	82b660 <alt_sys_init+0x174>

0082b6dc <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  82b6dc:	21000017 	ldw	r4,0(r4)
  82b6e0:	21000a04 	addi	r4,r4,40
  82b6e4:	082b9381 	jmpi	82b938 <altera_avalon_jtag_uart_ioctl>

0082b6e8 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  82b6e8:	20800017 	ldw	r2,0(r4)
  82b6ec:	21400217 	ldw	r5,8(r4)
  82b6f0:	11000a04 	addi	r4,r2,40
  82b6f4:	082b7181 	jmpi	82b718 <altera_avalon_jtag_uart_close>

0082b6f8 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  82b6f8:	20800017 	ldw	r2,0(r4)
  82b6fc:	21c00217 	ldw	r7,8(r4)
  82b700:	11000a04 	addi	r4,r2,40
  82b704:	082bb2c1 	jmpi	82bb2c <altera_avalon_jtag_uart_write>

0082b708 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  82b708:	20800017 	ldw	r2,0(r4)
  82b70c:	21c00217 	ldw	r7,8(r4)
  82b710:	11000a04 	addi	r4,r2,40
  82b714:	082b9c01 	jmpi	82b9c0 <altera_avalon_jtag_uart_read>

0082b718 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  82b718:	2950000c 	andi	r5,r5,16384
  82b71c:	21800c17 	ldw	r6,48(r4)
  82b720:	28000426 	beq	r5,zero,82b734 <altera_avalon_jtag_uart_close+0x1c>
  82b724:	00000706 	br	82b744 <altera_avalon_jtag_uart_close+0x2c>
  82b728:	20c00917 	ldw	r3,36(r4)
  82b72c:	20800117 	ldw	r2,4(r4)
  82b730:	1880022e 	bgeu	r3,r2,82b73c <altera_avalon_jtag_uart_close+0x24>
  82b734:	20800d17 	ldw	r2,52(r4)
  82b738:	11bffb1e 	bne	r2,r6,82b728 <altera_avalon_jtag_uart_close+0x10>
  82b73c:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
  82b740:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  82b744:	20800d17 	ldw	r2,52(r4)
  82b748:	11bffc26 	beq	r2,r6,82b73c <altera_avalon_jtag_uart_close+0x24>
  82b74c:	20c00117 	ldw	r3,4(r4)
  82b750:	20800917 	ldw	r2,36(r4)
  82b754:	10fff92e 	bgeu	r2,r3,82b73c <altera_avalon_jtag_uart_close+0x24>
  82b758:	00bffd44 	movi	r2,-11
  82b75c:	f800283a 	ret

0082b760 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  82b760:	20c00017 	ldw	r3,0(r4)
  82b764:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  82b768:	1081000c 	andi	r2,r2,1024
  82b76c:	10000a1e 	bne	r2,zero,82b798 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  82b770:	20c00917 	ldw	r3,36(r4)
  82b774:	00a00034 	movhi	r2,32768
  82b778:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
  82b77c:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  82b780:	10c00136 	bltu	r2,r3,82b788 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  82b784:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  82b788:	00c02134 	movhi	r3,132
  82b78c:	18ca4904 	addi	r3,r3,10532
  82b790:	18800017 	ldw	r2,0(r3)
  82b794:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  82b798:	20800817 	ldw	r2,32(r4)
  82b79c:	10810014 	ori	r2,r2,1024
  82b7a0:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  82b7a4:	00c02134 	movhi	r3,132
  82b7a8:	18ca4904 	addi	r3,r3,10532
  82b7ac:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  82b7b0:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  82b7b4:	f800283a 	ret

0082b7b8 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  82b7b8:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  82b7bc:	defffe04 	addi	sp,sp,-8
  82b7c0:	dc000015 	stw	r16,0(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  82b7c4:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  82b7c8:	2021883a 	mov	r16,r4
  82b7cc:	dfc00115 	stw	ra,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  82b7d0:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  82b7d4:	18800135 	stwio	r2,4(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  82b7d8:	3009883a 	mov	r4,r6
  82b7dc:	800b883a 	mov	r5,r16
  82b7e0:	018020f4 	movhi	r6,131
  82b7e4:	31ae0c04 	addi	r6,r6,-18384
  82b7e8:	082acec0 	call	82acec <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  82b7ec:	00c02134 	movhi	r3,132
  82b7f0:	18ca4904 	addi	r3,r3,10532
  82b7f4:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  82b7f8:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  82b7fc:	81000204 	addi	r4,r16,8
  82b800:	018020f4 	movhi	r6,131
  82b804:	31add804 	addi	r6,r6,-18592
  82b808:	800f883a 	mov	r7,r16
  82b80c:	082aab40 	call	82aab4 <alt_alarm_start>
  82b810:	1000030e 	bge	r2,zero,82b820 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  82b814:	00a00034 	movhi	r2,32768
  82b818:	10bfffc4 	addi	r2,r2,-1
  82b81c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  82b820:	dfc00117 	ldw	ra,4(sp)
  82b824:	dc000017 	ldw	r16,0(sp)
  82b828:	dec00204 	addi	sp,sp,8
  82b82c:	f800283a 	ret

0082b830 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  82b830:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  82b834:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  82b838:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  82b83c:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  82b840:	4880c00c 	andi	r2,r9,768
  82b844:	10003426 	beq	r2,zero,82b918 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  82b848:	4880400c 	andi	r2,r9,256
  82b84c:	10001626 	beq	r2,zero,82b8a8 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82b850:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
  82b854:	2a000b17 	ldw	r8,44(r5)
  82b858:	10800044 	addi	r2,r2,1
  82b85c:	1081ffcc 	andi	r2,r2,2047
  82b860:	40800c1e 	bne	r8,r2,82b894 <altera_avalon_jtag_uart_irq+0x64>
  82b864:	00002d06 	br	82b91c <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  82b868:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82b86c:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  82b870:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82b874:	18c00044 	addi	r3,r3,1
  82b878:	18c1ffcc 	andi	r3,r3,2047
  82b87c:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82b880:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  82b884:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  82b888:	21000044 	addi	r4,r4,1
  82b88c:	2101ffcc 	andi	r4,r4,2047
  82b890:	22000326 	beq	r4,r8,82b8a0 <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  82b894:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  82b898:	30a0000c 	andi	r2,r6,32768
  82b89c:	103ff21e 	bne	r2,zero,82b868 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  82b8a0:	30bfffec 	andhi	r2,r6,65535
  82b8a4:	10001d1e 	bne	r2,zero,82b91c <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  82b8a8:	4880800c 	andi	r2,r9,512
  82b8ac:	103fe326 	beq	r2,zero,82b83c <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  82b8b0:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  82b8b4:	20000b1e 	bne	r4,zero,82b8e4 <altera_avalon_jtag_uart_irq+0xb4>
  82b8b8:	003fe006 	br	82b83c <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  82b8bc:	28800d17 	ldw	r2,52(r5)
  82b8c0:	1145883a 	add	r2,r2,r5
  82b8c4:	10c20e07 	ldb	r3,2104(r2)
  82b8c8:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82b8cc:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  82b8d0:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82b8d4:	10800044 	addi	r2,r2,1
  82b8d8:	1081ffcc 	andi	r2,r2,2047
  82b8dc:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  82b8e0:	203fd626 	beq	r4,zero,82b83c <altera_avalon_jtag_uart_irq+0xc>
  82b8e4:	28c00d17 	ldw	r3,52(r5)
  82b8e8:	28800c17 	ldw	r2,48(r5)
  82b8ec:	18bff31e 	bne	r3,r2,82b8bc <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  82b8f0:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82b8f4:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  82b8f8:	00ffff44 	movi	r3,-3
  82b8fc:	10c4703a 	and	r2,r2,r3
  82b900:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82b904:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  82b908:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  82b90c:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  82b910:	4880c00c 	andi	r2,r9,768
  82b914:	103fcc1e 	bne	r2,zero,82b848 <altera_avalon_jtag_uart_irq+0x18>
  82b918:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  82b91c:	28800817 	ldw	r2,32(r5)
  82b920:	00ffff84 	movi	r3,-2
  82b924:	10c4703a 	and	r2,r2,r3
  82b928:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  82b92c:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  82b930:	50c00037 	ldwio	r3,0(r10)
  82b934:	003fdc06 	br	82b8a8 <altera_avalon_jtag_uart_irq+0x78>

0082b938 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  82b938:	009a8044 	movi	r2,27137
  82b93c:	28800f26 	beq	r5,r2,82b97c <altera_avalon_jtag_uart_ioctl+0x44>
  82b940:	009a8084 	movi	r2,27138
  82b944:	28800326 	beq	r5,r2,82b954 <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  82b948:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
  82b94c:	1805883a 	mov	r2,r3
  82b950:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  82b954:	21400117 	ldw	r5,4(r4)
  82b958:	00a00034 	movhi	r2,32768
  82b95c:	10bfffc4 	addi	r2,r2,-1
  82b960:	28bff926 	beq	r5,r2,82b948 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  82b964:	20800917 	ldw	r2,36(r4)
  82b968:	0007883a 	mov	r3,zero
  82b96c:	1145803a 	cmpltu	r2,r2,r5
  82b970:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
  82b974:	1805883a 	mov	r2,r3
  82b978:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  82b97c:	20c00117 	ldw	r3,4(r4)
  82b980:	00a00034 	movhi	r2,32768
  82b984:	10bfffc4 	addi	r2,r2,-1
  82b988:	18bfef26 	beq	r3,r2,82b948 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  82b98c:	31800017 	ldw	r6,0(r6)
  82b990:	10bfff44 	addi	r2,r2,-3
  82b994:	30ffff84 	addi	r3,r6,-2
  82b998:	10c00436 	bltu	r2,r3,82b9ac <altera_avalon_jtag_uart_ioctl+0x74>
  82b99c:	0007883a 	mov	r3,zero
  82b9a0:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
  82b9a4:	1805883a 	mov	r2,r3
  82b9a8:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  82b9ac:	01a00034 	movhi	r6,32768
  82b9b0:	31bfff84 	addi	r6,r6,-2
  82b9b4:	0007883a 	mov	r3,zero
  82b9b8:	21800115 	stw	r6,4(r4)
  82b9bc:	003ff906 	br	82b9a4 <altera_avalon_jtag_uart_ioctl+0x6c>

0082b9c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  82b9c0:	defff404 	addi	sp,sp,-48
  82b9c4:	dd400715 	stw	r21,28(sp)
  82b9c8:	dcc00515 	stw	r19,20(sp)
  82b9cc:	dfc00b15 	stw	ra,44(sp)
  82b9d0:	df000a15 	stw	fp,40(sp)
  82b9d4:	ddc00915 	stw	r23,36(sp)
  82b9d8:	dd800815 	stw	r22,32(sp)
  82b9dc:	dd000615 	stw	r20,24(sp)
  82b9e0:	dc800415 	stw	r18,16(sp)
  82b9e4:	dc400315 	stw	r17,12(sp)
  82b9e8:	dc000215 	stw	r16,8(sp)
  82b9ec:	302b883a 	mov	r21,r6
  82b9f0:	2027883a 	mov	r19,r4
  82b9f4:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  82b9f8:	0180480e 	bge	zero,r6,82bb1c <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  82b9fc:	39d0000c 	andi	r7,r7,16384
  82ba00:	d9c00015 	stw	r7,0(sp)
  82ba04:	dd000117 	ldw	r20,4(sp)
  82ba08:	07020004 	movi	fp,2048
  82ba0c:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
  82ba10:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  82ba14:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  82ba18:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  82ba1c:	b4400136 	bltu	r22,r17,82ba24 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  82ba20:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  82ba24:	a009883a 	mov	r4,r20
  82ba28:	bc4b883a 	add	r5,r23,r17
  82ba2c:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  82ba30:	80000826 	beq	r16,zero,82ba54 <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
  82ba34:	ac002036 	bltu	r21,r16,82bab8 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  82ba38:	0821e500 	call	821e50 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82ba3c:	8445883a 	add	r2,r16,r17
  82ba40:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  82ba44:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82ba48:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  82ba4c:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  82ba50:	057fef16 	blt	zero,r21,82ba10 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
  82ba54:	d8800117 	ldw	r2,4(sp)
  82ba58:	a080231e 	bne	r20,r2,82bae8 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  82ba5c:	d8c00017 	ldw	r3,0(sp)
  82ba60:	1800301e 	bne	r3,zero,82bb24 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  82ba64:	98800a17 	ldw	r2,40(r19)
  82ba68:	b080031e 	bne	r22,r2,82ba78 <altera_avalon_jtag_uart_read+0xb8>
  82ba6c:	98c00917 	ldw	r3,36(r19)
  82ba70:	98800117 	ldw	r2,4(r19)
  82ba74:	18bffb36 	bltu	r3,r2,82ba64 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  82ba78:	98800a17 	ldw	r2,40(r19)
  82ba7c:	b0800126 	beq	r22,r2,82ba84 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  82ba80:	057fe016 	blt	zero,r21,82ba04 <altera_avalon_jtag_uart_read+0x44>
  82ba84:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  82ba88:	dfc00b17 	ldw	ra,44(sp)
  82ba8c:	df000a17 	ldw	fp,40(sp)
  82ba90:	ddc00917 	ldw	r23,36(sp)
  82ba94:	dd800817 	ldw	r22,32(sp)
  82ba98:	dd400717 	ldw	r21,28(sp)
  82ba9c:	dd000617 	ldw	r20,24(sp)
  82baa0:	dcc00517 	ldw	r19,20(sp)
  82baa4:	dc800417 	ldw	r18,16(sp)
  82baa8:	dc400317 	ldw	r17,12(sp)
  82baac:	dc000217 	ldw	r16,8(sp)
  82bab0:	dec00c04 	addi	sp,sp,48
  82bab4:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  82bab8:	99400e04 	addi	r5,r19,56
  82babc:	a009883a 	mov	r4,r20
  82bac0:	a80d883a 	mov	r6,r21
  82bac4:	894b883a 	add	r5,r17,r5
  82bac8:	0821e500 	call	821e50 <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  82bacc:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82bad0:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  82bad4:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82bad8:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  82badc:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82bae0:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  82bae4:	a0bfdd26 	beq	r20,r2,82ba5c <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82bae8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82baec:	00bfff84 	movi	r2,-2
  82baf0:	2084703a 	and	r2,r4,r2
  82baf4:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  82baf8:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82bafc:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  82bb00:	18c00054 	ori	r3,r3,1
  82bb04:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82bb08:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82bb0c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  82bb10:	d8c00117 	ldw	r3,4(sp)
  82bb14:	a0c5c83a 	sub	r2,r20,r3
  82bb18:	003fdb06 	br	82ba88 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
  82bb1c:	3890000c 	andi	r2,r7,16384
  82bb20:	103fd826 	beq	r2,zero,82ba84 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  82bb24:	00bffd44 	movi	r2,-11
  82bb28:	003fd706 	br	82ba88 <altera_avalon_jtag_uart_read+0xc8>

0082bb2c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  82bb2c:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  82bb30:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  82bb34:	ddc00715 	stw	r23,28(sp)
  82bb38:	dd800615 	stw	r22,24(sp)
  82bb3c:	dcc00315 	stw	r19,12(sp)
  82bb40:	dc000015 	stw	r16,0(sp)
  82bb44:	dfc00815 	stw	ra,32(sp)
  82bb48:	dd400515 	stw	r21,20(sp)
  82bb4c:	dd000415 	stw	r20,16(sp)
  82bb50:	dc800215 	stw	r18,8(sp)
  82bb54:	dc400115 	stw	r17,4(sp)
  82bb58:	3027883a 	mov	r19,r6
  82bb5c:	2021883a 	mov	r16,r4
  82bb60:	282d883a 	mov	r22,r5
  82bb64:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  82bb68:	40004926 	beq	r8,zero,82bc90 <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  82bb6c:	3d50000c 	andi	r21,r7,16384
  82bb70:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  82bb74:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
  82bb78:	81400d17 	ldw	r5,52(r16)

      if (in < out)
  82bb7c:	91403d2e 	bgeu	r18,r5,82bc74 <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  82bb80:	2c85c83a 	sub	r2,r5,r18
  82bb84:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  82bb88:	30002626 	beq	r6,zero,82bc24 <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
  82bb8c:	3023883a 	mov	r17,r6
  82bb90:	9980012e 	bgeu	r19,r6,82bb98 <altera_avalon_jtag_uart_write+0x6c>
  82bb94:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  82bb98:	81020e04 	addi	r4,r16,2104
  82bb9c:	a00b883a 	mov	r5,r20
  82bba0:	2489883a 	add	r4,r4,r18
  82bba4:	880d883a 	mov	r6,r17
  82bba8:	0821e500 	call	821e50 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82bbac:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  82bbb0:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82bbb4:	18c1ffcc 	andi	r3,r3,2047
  82bbb8:	9a000048 	cmpgei	r8,r19,1
  82bbbc:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  82bbc0:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  82bbc4:	403feb1e 	bne	r8,zero,82bb74 <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82bbc8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82bbcc:	00bfff84 	movi	r2,-2
  82bbd0:	2084703a 	and	r2,r4,r2
  82bbd4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  82bbd8:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82bbdc:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  82bbe0:	18c00094 	ori	r3,r3,2
  82bbe4:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82bbe8:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82bbec:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  82bbf0:	b5002926 	beq	r22,r20,82bc98 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
  82bbf4:	a585c83a 	sub	r2,r20,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
  82bbf8:	dfc00817 	ldw	ra,32(sp)
  82bbfc:	ddc00717 	ldw	r23,28(sp)
  82bc00:	dd800617 	ldw	r22,24(sp)
  82bc04:	dd400517 	ldw	r21,20(sp)
  82bc08:	dd000417 	ldw	r20,16(sp)
  82bc0c:	dcc00317 	ldw	r19,12(sp)
  82bc10:	dc800217 	ldw	r18,8(sp)
  82bc14:	dc400117 	ldw	r17,4(sp)
  82bc18:	dc000017 	ldw	r16,0(sp)
  82bc1c:	dec00904 	addi	sp,sp,36
  82bc20:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82bc24:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82bc28:	00bfff84 	movi	r2,-2
  82bc2c:	2084703a 	and	r2,r4,r2
  82bc30:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  82bc34:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82bc38:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  82bc3c:	18c00094 	ori	r3,r3,2
  82bc40:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82bc44:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82bc48:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  82bc4c:	a83fe81e 	bne	r21,zero,82bbf0 <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  82bc50:	80800d17 	ldw	r2,52(r16)
  82bc54:	1140031e 	bne	r2,r5,82bc64 <altera_avalon_jtag_uart_write+0x138>
  82bc58:	80c00917 	ldw	r3,36(r16)
  82bc5c:	80800117 	ldw	r2,4(r16)
  82bc60:	18bffb36 	bltu	r3,r2,82bc50 <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  82bc64:	80800d17 	ldw	r2,52(r16)
  82bc68:	117fe126 	beq	r2,r5,82bbf0 <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  82bc6c:	403fc11e 	bne	r8,zero,82bb74 <altera_avalon_jtag_uart_write+0x48>
  82bc70:	003fd506 	br	82bbc8 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  82bc74:	28000326 	beq	r5,zero,82bc84 <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  82bc78:	00820004 	movi	r2,2048
  82bc7c:	148dc83a 	sub	r6,r2,r18
  82bc80:	003fc106 	br	82bb88 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  82bc84:	0081ffc4 	movi	r2,2047
  82bc88:	148dc83a 	sub	r6,r2,r18
  82bc8c:	003fbe06 	br	82bb88 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  82bc90:	2829883a 	mov	r20,r5
  82bc94:	003fcc06 	br	82bbc8 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  82bc98:	b890000c 	andi	r2,r23,16384
  82bc9c:	1000021e 	bne	r2,zero,82bca8 <altera_avalon_jtag_uart_write+0x17c>
  82bca0:	00bffec4 	movi	r2,-5
  82bca4:	003fd406 	br	82bbf8 <altera_avalon_jtag_uart_write+0xcc>
  82bca8:	00bffd44 	movi	r2,-11
  82bcac:	003fd206 	br	82bbf8 <altera_avalon_jtag_uart_write+0xcc>

0082bcb0 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  82bcb0:	00c02134 	movhi	r3,132
  82bcb4:	18ca4904 	addi	r3,r3,10532
  82bcb8:	18800017 	ldw	r2,0(r3)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  82bcbc:	200b883a 	mov	r5,r4
  82bcc0:	1000011e 	bne	r2,zero,82bcc8 <alt_avalon_timer_sc_init+0x18>
  {
    _alt_tick_rate = nticks;
  82bcc4:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  82bcc8:	008001c4 	movi	r2,7
  82bccc:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  82bcd0:	3009883a 	mov	r4,r6
  82bcd4:	018020f4 	movhi	r6,131
  82bcd8:	31af3804 	addi	r6,r6,-17184
  82bcdc:	082acec1 	jmpi	82acec <alt_irq_register>

0082bce0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  82bce0:	defffe04 	addi	sp,sp,-8
  82bce4:	dfc00115 	stw	ra,4(sp)
  82bce8:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  82bcec:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  82bcf0:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82bcf4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82bcf8:	00bfff84 	movi	r2,-2
  82bcfc:	8084703a 	and	r2,r16,r2
  82bd00:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  82bd04:	082b2cc0 	call	82b2cc <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82bd08:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  82bd0c:	dfc00117 	ldw	ra,4(sp)
  82bd10:	dc000017 	ldw	r16,0(sp)
  82bd14:	dec00204 	addi	sp,sp,8
  82bd18:	f800283a 	ret

0082bd1c <alt_up_audio_write_fifo_head>:
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
  82bd1c:	3000031e 	bne	r6,zero,82bd2c <alt_up_audio_write_fifo_head+0x10>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  82bd20:	20800a17 	ldw	r2,40(r4)
  82bd24:	11400235 	stwio	r5,8(r2)
  82bd28:	f800283a 	ret
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  82bd2c:	20800a17 	ldw	r2,40(r4)
  82bd30:	11400335 	stwio	r5,12(r2)
  82bd34:	f800283a 	ret

0082bd38 <alt_up_audio_read_fifo_head>:
	return count;
}

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  82bd38:	2800031e 	bne	r5,zero,82bd48 <alt_up_audio_read_fifo_head+0x10>
  82bd3c:	20800a17 	ldw	r2,40(r4)
  82bd40:	10800237 	ldwio	r2,8(r2)
  82bd44:	f800283a 	ret
  82bd48:	20800a17 	ldw	r2,40(r4)
  82bd4c:	10800337 	ldwio	r2,12(r2)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  82bd50:	f800283a 	ret

0082bd54 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bd54:	0180180e 	bge	zero,r6,82bdb8 <alt_up_audio_write_fifo+0x64>
  82bd58:	0011883a 	mov	r8,zero
  82bd5c:	38000b26 	beq	r7,zero,82bd8c <alt_up_audio_write_fifo+0x38>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bd60:	20c00a17 	ldw	r3,40(r4)
  82bd64:	18800137 	ldwio	r2,4(r3)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bd68:	10803fec 	andhi	r2,r2,255
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  82bd6c:	10000526 	beq	r2,zero,82bd84 <alt_up_audio_write_fifo+0x30>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  82bd70:	28800017 	ldw	r2,0(r5)
  82bd74:	42000044 	addi	r8,r8,1
  82bd78:	29400104 	addi	r5,r5,4
  82bd7c:	18800335 	stwio	r2,12(r3)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bd80:	41bff716 	blt	r8,r6,82bd60 <alt_up_audio_write_fifo+0xc>
			// no more space to write
			break;
		}
	}
	return count;
}
  82bd84:	4005883a 	mov	r2,r8
  82bd88:	f800283a 	ret
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bd8c:	20c00a17 	ldw	r3,40(r4)
  82bd90:	18800137 	ldwio	r2,4(r3)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bd94:	1004d63a 	srli	r2,r2,24
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  82bd98:	103ffa26 	beq	r2,zero,82bd84 <alt_up_audio_write_fifo+0x30>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  82bd9c:	28800017 	ldw	r2,0(r5)
  82bda0:	42000044 	addi	r8,r8,1
  82bda4:	29400104 	addi	r5,r5,4
  82bda8:	18800235 	stwio	r2,8(r3)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bdac:	41bff716 	blt	r8,r6,82bd8c <alt_up_audio_write_fifo+0x38>
			// no more space to write
			break;
		}
	}
	return count;
}
  82bdb0:	4005883a 	mov	r2,r8
  82bdb4:	f800283a 	ret

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bdb8:	0011883a 	mov	r8,zero
  82bdbc:	003ff106 	br	82bd84 <alt_up_audio_write_fifo+0x30>

0082bdc0 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bdc0:	0180180e 	bge	zero,r6,82be24 <alt_up_audio_read_fifo+0x64>
  82bdc4:	0011883a 	mov	r8,zero
  82bdc8:	38000b26 	beq	r7,zero,82bdf8 <alt_up_audio_read_fifo+0x38>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bdcc:	20c00a17 	ldw	r3,40(r4)
  82bdd0:	18800137 	ldwio	r2,4(r3)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bdd4:	10803fcc 	andi	r2,r2,255
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  82bdd8:	10000526 	beq	r2,zero,82bdf0 <alt_up_audio_read_fifo+0x30>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bddc:	18800337 	ldwio	r2,12(r3)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  82bde0:	42000044 	addi	r8,r8,1
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bde4:	28800015 	stw	r2,0(r5)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  82bde8:	29400104 	addi	r5,r5,4

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bdec:	323ff71e 	bne	r6,r8,82bdcc <alt_up_audio_read_fifo+0xc>
			// no more data to read
			break;
		}
	}
	return count;
}
  82bdf0:	4005883a 	mov	r2,r8
  82bdf4:	f800283a 	ret
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bdf8:	20c00a17 	ldw	r3,40(r4)
  82bdfc:	18800137 	ldwio	r2,4(r3)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  82be00:	10bfc00c 	andi	r2,r2,65280
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  82be04:	103ffa26 	beq	r2,zero,82bdf0 <alt_up_audio_read_fifo+0x30>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  82be08:	18800237 	ldwio	r2,8(r3)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  82be0c:	42000044 	addi	r8,r8,1
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  82be10:	28800015 	stw	r2,0(r5)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  82be14:	29400104 	addi	r5,r5,4

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82be18:	323ff71e 	bne	r6,r8,82bdf8 <alt_up_audio_read_fifo+0x38>
			// no more data to read
			break;
		}
	}
	return count;
}
  82be1c:	4005883a 	mov	r2,r8
  82be20:	f800283a 	ret

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82be24:	0011883a 	mov	r8,zero
  82be28:	003ff106 	br	82bdf0 <alt_up_audio_read_fifo+0x30>

0082be2c <alt_up_audio_write_fifo_space>:
/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82be2c:	20800a17 	ldw	r2,40(r4)
  82be30:	10c00137 	ldwio	r3,4(r2)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  82be34:	1804d63a 	srli	r2,r3,24
  82be38:	18c03fec 	andhi	r3,r3,255
  82be3c:	28000126 	beq	r5,zero,82be44 <alt_up_audio_write_fifo_space+0x18>
  82be40:	1804d43a 	srli	r2,r3,16
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
}
  82be44:	f800283a 	ret

0082be48 <alt_up_audio_read_fifo_avail>:
/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82be48:	20800a17 	ldw	r2,40(r4)
  82be4c:	11000137 	ldwio	r4,4(r2)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  82be50:	20ffc00c 	andi	r3,r4,65280
  82be54:	1804d23a 	srli	r2,r3,8
  82be58:	28000126 	beq	r5,zero,82be60 <alt_up_audio_read_fifo_avail+0x18>
  82be5c:	20803fcc 	andi	r2,r4,255
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
}
  82be60:	f800283a 	ret

0082be64 <alt_up_audio_reset_audio_core>:
}

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  82be64:	20c00a17 	ldw	r3,40(r4)
  82be68:	18800037 	ldwio	r2,0(r3)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  82be6c:	10800314 	ori	r2,r2,12
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  82be70:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  82be74:	21400a17 	ldw	r5,40(r4)
  82be78:	00fffcc4 	movi	r3,-13
  82be7c:	10c4703a 	and	r2,r2,r3
  82be80:	28800035 	stwio	r2,0(r5)
}
  82be84:	f800283a 	ret

0082be88 <alt_up_audio_write_interrupt_pending>:
}

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  82be88:	20c00a17 	ldw	r3,40(r4)
  82be8c:	18800037 	ldwio	r2,0(r3)
  82be90:	1004d27a 	srli	r2,r2,9
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
}
  82be94:	1080004c 	andi	r2,r2,1
  82be98:	f800283a 	ret

0082be9c <alt_up_audio_read_interrupt_pending>:
}

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  82be9c:	20c00a17 	ldw	r3,40(r4)
  82bea0:	18800037 	ldwio	r2,0(r3)
  82bea4:	1004d23a 	srli	r2,r2,8
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
}
  82bea8:	1080004c 	andi	r2,r2,1
  82beac:	f800283a 	ret

0082beb0 <alt_up_audio_disable_write_interrupt>:
}

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  82beb0:	20800a17 	ldw	r2,40(r4)
  82beb4:	10c00037 	ldwio	r3,0(r2)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  82beb8:	013fff44 	movi	r4,-3
  82bebc:	1906703a 	and	r3,r3,r4
  82bec0:	10c00035 	stwio	r3,0(r2)
}
  82bec4:	f800283a 	ret

0082bec8 <alt_up_audio_enable_write_interrupt>:
}

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  82bec8:	20c00a17 	ldw	r3,40(r4)
  82becc:	18800037 	ldwio	r2,0(r3)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  82bed0:	10800094 	ori	r2,r2,2
  82bed4:	18800035 	stwio	r2,0(r3)
}
  82bed8:	f800283a 	ret

0082bedc <alt_up_audio_disable_read_interrupt>:
}

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  82bedc:	20800a17 	ldw	r2,40(r4)
  82bee0:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  82bee4:	013fff84 	movi	r4,-2
  82bee8:	1906703a 	and	r3,r3,r4
  82beec:	10c00035 	stwio	r3,0(r2)
}
  82bef0:	f800283a 	ret

0082bef4 <alt_up_audio_enable_read_interrupt>:
}

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  82bef4:	20c00a17 	ldw	r3,40(r4)
  82bef8:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  82befc:	10800054 	ori	r2,r2,1
  82bf00:	18800035 	stwio	r2,0(r3)
}
  82bf04:	f800283a 	ret

0082bf08 <alt_up_audio_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  82bf08:	01402134 	movhi	r5,132
  82bf0c:	2942ea04 	addi	r5,r5,2984
  82bf10:	08328641 	jmpi	832864 <alt_find_dev>

0082bf14 <alt_up_audio_record_l>:
/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bf14:	21c00a17 	ldw	r7,40(r4)
  82bf18:	38800137 	ldwio	r2,4(r7)
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
	if (data_words <= BUF_THRESHOLD)
  82bf1c:	00c01804 	movi	r3,96
  82bf20:	10bfc00c 	andi	r2,r2,65280
  82bf24:	1004d23a 	srli	r2,r2,8
  82bf28:	18800e2e 	bgeu	r3,r2,82bf64 <alt_up_audio_record_l+0x50>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bf2c:	01800d0e 	bge	zero,r6,82bf64 <alt_up_audio_record_l+0x50>
  82bf30:	0007883a 	mov	r3,zero
  82bf34:	00000606 	br	82bf50 <alt_up_audio_record_l+0x3c>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bf38:	38800237 	ldwio	r2,8(r7)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  82bf3c:	18c00044 	addi	r3,r3,1
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bf40:	28800015 	stw	r2,0(r5)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  82bf44:	29400104 	addi	r5,r5,4

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bf48:	30c00826 	beq	r6,r3,82bf6c <alt_up_audio_record_l+0x58>
  82bf4c:	21c00a17 	ldw	r7,40(r4)
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bf50:	38800137 	ldwio	r2,4(r7)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  82bf54:	10bfc00c 	andi	r2,r2,65280
  82bf58:	103ff71e 	bne	r2,zero,82bf38 <alt_up_audio_record_l+0x24>
  82bf5c:	1805883a 	mov	r2,r3
  82bf60:	f800283a 	ret

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bf64:	0005883a 	mov	r2,zero
  82bf68:	f800283a 	ret
  82bf6c:	1805883a 	mov	r2,r3
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
	if (data_words <= BUF_THRESHOLD)
		return 0;
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
}
  82bf70:	f800283a 	ret

0082bf74 <alt_up_audio_record_r>:
/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bf74:	21c00a17 	ldw	r7,40(r4)
  82bf78:	38800137 	ldwio	r2,4(r7)
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
	if (data_words <= BUF_THRESHOLD)
  82bf7c:	00c01804 	movi	r3,96
  82bf80:	10803fcc 	andi	r2,r2,255
  82bf84:	18800e2e 	bgeu	r3,r2,82bfc0 <alt_up_audio_record_r+0x4c>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bf88:	01800d0e 	bge	zero,r6,82bfc0 <alt_up_audio_record_r+0x4c>
  82bf8c:	0007883a 	mov	r3,zero
  82bf90:	00000606 	br	82bfac <alt_up_audio_record_r+0x38>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bf94:	38800337 	ldwio	r2,12(r7)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  82bf98:	18c00044 	addi	r3,r3,1
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  82bf9c:	28800015 	stw	r2,0(r5)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  82bfa0:	29400104 	addi	r5,r5,4

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bfa4:	30c00826 	beq	r6,r3,82bfc8 <alt_up_audio_record_r+0x54>
  82bfa8:	21c00a17 	ldw	r7,40(r4)
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bfac:	38800137 	ldwio	r2,4(r7)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  82bfb0:	10803fcc 	andi	r2,r2,255
  82bfb4:	103ff71e 	bne	r2,zero,82bf94 <alt_up_audio_record_r+0x20>
  82bfb8:	1805883a 	mov	r2,r3
  82bfbc:	f800283a 	ret

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bfc0:	0005883a 	mov	r2,zero
  82bfc4:	f800283a 	ret
  82bfc8:	1805883a 	mov	r2,r3
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
	if (data_words <= BUF_THRESHOLD)
		return 0;
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
}
  82bfcc:	f800283a 	ret

0082bfd0 <alt_up_audio_play_r>:
/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82bfd0:	21c00a17 	ldw	r7,40(r4)
  82bfd4:	38800137 	ldwio	r2,4(r7)
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
	if (space <= BUF_THRESHOLD)
  82bfd8:	00c01804 	movi	r3,96
  82bfdc:	10803fec 	andhi	r2,r2,255
  82bfe0:	1004d43a 	srli	r2,r2,16
  82bfe4:	18800e2e 	bgeu	r3,r2,82c020 <alt_up_audio_play_r+0x50>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82bfe8:	01800d0e 	bge	zero,r6,82c020 <alt_up_audio_play_r+0x50>
  82bfec:	0007883a 	mov	r3,zero
  82bff0:	00000606 	br	82c00c <alt_up_audio_play_r+0x3c>
		if (fifospace > 0) 
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  82bff4:	28800017 	ldw	r2,0(r5)
  82bff8:	18c00044 	addi	r3,r3,1
  82bffc:	38800335 	stwio	r2,12(r7)
  82c000:	29400104 	addi	r5,r5,4

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82c004:	30c00826 	beq	r6,r3,82c028 <alt_up_audio_play_r+0x58>
  82c008:	21c00a17 	ldw	r7,40(r4)
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82c00c:	38800137 	ldwio	r2,4(r7)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  82c010:	10803fec 	andhi	r2,r2,255
  82c014:	103ff71e 	bne	r2,zero,82bff4 <alt_up_audio_play_r+0x24>
  82c018:	1805883a 	mov	r2,r3
  82c01c:	f800283a 	ret

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82c020:	0005883a 	mov	r2,zero
  82c024:	f800283a 	ret
  82c028:	1805883a 	mov	r2,r3
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
	if (space <= BUF_THRESHOLD)
		return 0;
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
}
  82c02c:	f800283a 	ret

0082c030 <alt_up_audio_play_l>:
/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82c030:	21c00a17 	ldw	r7,40(r4)
  82c034:	38800137 	ldwio	r2,4(r7)
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
	if (space <= BUF_THRESHOLD)
  82c038:	00c01804 	movi	r3,96
  82c03c:	1004d63a 	srli	r2,r2,24
  82c040:	18800e2e 	bgeu	r3,r2,82c07c <alt_up_audio_play_l+0x4c>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82c044:	01800d0e 	bge	zero,r6,82c07c <alt_up_audio_play_l+0x4c>
  82c048:	0007883a 	mov	r3,zero
  82c04c:	00000606 	br	82c068 <alt_up_audio_play_l+0x38>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  82c050:	28800017 	ldw	r2,0(r5)
  82c054:	18c00044 	addi	r3,r3,1
  82c058:	38800235 	stwio	r2,8(r7)
  82c05c:	29400104 	addi	r5,r5,4

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82c060:	30c00826 	beq	r6,r3,82c084 <alt_up_audio_play_l+0x54>
  82c064:	21c00a17 	ldw	r7,40(r4)
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  82c068:	38800137 	ldwio	r2,4(r7)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  82c06c:	1004d63a 	srli	r2,r2,24
  82c070:	103ff71e 	bne	r2,zero,82c050 <alt_up_audio_play_l+0x20>
  82c074:	1805883a 	mov	r2,r3
  82c078:	f800283a 	ret

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82c07c:	0005883a 	mov	r2,zero
  82c080:	f800283a 	ret
  82c084:	1805883a 	mov	r2,r3
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
	if (space <= BUF_THRESHOLD)
		return 0;
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
}
  82c088:	f800283a 	ret

0082c08c <alt_up_av_config_disable_interrupt>:
	return 0;
}

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  82c08c:	20800a17 	ldw	r2,40(r4)
  82c090:	10000025 	stbio	zero,0(r2)
	return 0;
}
  82c094:	0005883a 	mov	r2,zero
  82c098:	f800283a 	ret

0082c09c <alt_up_av_config_enable_interrupt>:
	return 0;
}

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  82c09c:	20c00a17 	ldw	r3,40(r4)
  82c0a0:	00800084 	movi	r2,2
  82c0a4:	18800025 	stbio	r2,0(r3)
	return 0;
}
  82c0a8:	0005883a 	mov	r2,zero
  82c0ac:	f800283a 	ret

0082c0b0 <alt_up_av_config_reset>:
	return 0;
}

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  82c0b0:	20c00a17 	ldw	r3,40(r4)
  82c0b4:	00800044 	movi	r2,1
  82c0b8:	18800025 	stbio	r2,0(r3)
	return 0;
}
  82c0bc:	0005883a 	mov	r2,zero
  82c0c0:	f800283a 	ret

0082c0c4 <alt_up_av_config_read_ready>:
	return -1;
}

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  82c0c4:	20c00a17 	ldw	r3,40(r4)
  82c0c8:	18800137 	ldwio	r2,4(r3)
  82c0cc:	1080008c 	andi	r2,r2,2
}
  82c0d0:	1004d07a 	srli	r2,r2,1
  82c0d4:	f800283a 	ret

0082c0d8 <alt_up_av_config_read_acknowledge>:
	return 0;
}

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  82c0d8:	20c00a17 	ldw	r3,40(r4)
  82c0dc:	18c00104 	addi	r3,r3,4
  82c0e0:	18800037 	ldwio	r2,0(r3)
  82c0e4:	013fffc4 	movi	r4,-1
  82c0e8:	1080008c 	andi	r2,r2,2
  82c0ec:	10000226 	beq	r2,zero,82c0f8 <alt_up_av_config_read_acknowledge+0x20>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  82c0f0:	18800037 	ldwio	r2,0(r3)
  82c0f4:	1100004c 	andi	r4,r2,1
	return -1;
}
  82c0f8:	2005883a 	mov	r2,r4
  82c0fc:	f800283a 	ret

0082c100 <alt_up_av_config_write_data>:
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c100:	20c00a17 	ldw	r3,40(r4)
  82c104:	29403fcc 	andi	r5,r5,255
  82c108:	19400235 	stwio	r5,8(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  82c10c:	20800a17 	ldw	r2,40(r4)
  82c110:	31bfffcc 	andi	r6,r6,65535
  82c114:	11800335 	stwio	r6,12(r2)

	return 0;
}
  82c118:	0005883a 	mov	r2,zero
  82c11c:	f800283a 	ret

0082c120 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  82c120:	deffff04 	addi	sp,sp,-4
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  82c124:	01402134 	movhi	r5,132
  82c128:	2942ea04 	addi	r5,r5,2984

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  82c12c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  82c130:	08328640 	call	832864 <alt_find_dev>
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  82c134:	11000a17 	ldw	r4,40(r2)
  82c138:	20c00137 	ldwio	r3,4(r4)
  82c13c:	18c03fec 	andhi	r3,r3,255
  82c140:	1807d43a 	srai	r3,r3,16
  82c144:	10c00b15 	stw	r3,44(r2)

  return dev;
}
  82c148:	dfc00017 	ldw	ra,0(sp)
  82c14c:	dec00104 	addi	sp,sp,4
  82c150:	f800283a 	ret

0082c154 <alt_up_av_config_read_data>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c154:	20800a17 	ldw	r2,40(r4)
  82c158:	29403fcc 	andi	r5,r5,255
  82c15c:	11400235 	stwio	r5,8(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  82c160:	20c00a17 	ldw	r3,40(r4)
  82c164:	18800337 	ldwio	r2,12(r3)
  82c168:	30800015 	stw	r2,0(r6)
	return 0;
}

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  82c16c:	18c00104 	addi	r3,r3,4
  82c170:	18800037 	ldwio	r2,0(r3)
  82c174:	1080008c 	andi	r2,r2,2
  82c178:	10000426 	beq	r2,zero,82c18c <alt_up_av_config_read_data+0x38>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  82c17c:	18800037 	ldwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  82c180:	0007883a 	mov	r3,zero
  82c184:	1080004c 	andi	r2,r2,1
  82c188:	10000126 	beq	r2,zero,82c190 <alt_up_av_config_read_data+0x3c>
  82c18c:	00ffffc4 	movi	r3,-1
		return -1;

	return 0;
}
  82c190:	1805883a 	mov	r2,r3
  82c194:	f800283a 	ret

0082c198 <alt_up_av_config_write_LTM_cfg_register>:
	return alt_up_av_config_read_data(av_config, addr, data);
}

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	if (av_config->type != TRDB_LTM_CONFIG)
  82c198:	20800b17 	ldw	r2,44(r4)
  82c19c:	00c00284 	movi	r3,10
  82c1a0:	01fffa84 	movi	r7,-22
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c1a4:	29403fcc 	andi	r5,r5,255
	return alt_up_av_config_read_data(av_config, addr, data);
}

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	if (av_config->type != TRDB_LTM_CONFIG)
  82c1a8:	10c00226 	beq	r2,r3,82c1b4 <alt_up_av_config_write_LTM_cfg_register+0x1c>
		return -EINVAL;

	return alt_up_av_config_write_data(av_config, addr, data);
}
  82c1ac:	3805883a 	mov	r2,r7
  82c1b0:	f800283a 	ret
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c1b4:	20800a17 	ldw	r2,40(r4)
  82c1b8:	11400235 	stwio	r5,8(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  82c1bc:	20c00a17 	ldw	r3,40(r4)
  82c1c0:	30bfffcc 	andi	r2,r6,65535
  82c1c4:	18800335 	stwio	r2,12(r3)
  82c1c8:	000f883a 	mov	r7,zero
{
	if (av_config->type != TRDB_LTM_CONFIG)
		return -EINVAL;

	return alt_up_av_config_write_data(av_config, addr, data);
}
  82c1cc:	3805883a 	mov	r2,r7
  82c1d0:	f800283a 	ret

0082c1d4 <alt_up_av_config_write_D5M_cfg_register>:
	return alt_up_av_config_read_data(av_config, addr, data);
}

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	if (av_config->type != TRDB_D5M_CONFIG)
  82c1d4:	20800b17 	ldw	r2,44(r4)
  82c1d8:	00c00244 	movi	r3,9
  82c1dc:	01fffa84 	movi	r7,-22
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c1e0:	29403fcc 	andi	r5,r5,255
	return alt_up_av_config_read_data(av_config, addr, data);
}

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	if (av_config->type != TRDB_D5M_CONFIG)
  82c1e4:	10c00226 	beq	r2,r3,82c1f0 <alt_up_av_config_write_D5M_cfg_register+0x1c>
		return -EINVAL;
	
	return alt_up_av_config_write_data(av_config, addr, data);
}
  82c1e8:	3805883a 	mov	r2,r7
  82c1ec:	f800283a 	ret
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c1f0:	20800a17 	ldw	r2,40(r4)
  82c1f4:	11400235 	stwio	r5,8(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  82c1f8:	20c00a17 	ldw	r3,40(r4)
  82c1fc:	30bfffcc 	andi	r2,r6,65535
  82c200:	18800335 	stwio	r2,12(r3)
  82c204:	000f883a 	mov	r7,zero
{
	if (av_config->type != TRDB_D5M_CONFIG)
		return -EINVAL;
	
	return alt_up_av_config_write_data(av_config, addr, data);
}
  82c208:	3805883a 	mov	r2,r7
  82c20c:	f800283a 	ret

0082c210 <alt_up_av_config_write_DC2_cfg_register>:
	return alt_up_av_config_read_data(av_config, addr, data);
}

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	if (av_config->type != TRDB_DC2_CONFIG)
  82c210:	20c00b17 	ldw	r3,44(r4)
  82c214:	00800204 	movi	r2,8
  82c218:	01fffa84 	movi	r7,-22
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c21c:	29403fcc 	andi	r5,r5,255
	return alt_up_av_config_read_data(av_config, addr, data);
}

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	if (av_config->type != TRDB_DC2_CONFIG)
  82c220:	18800226 	beq	r3,r2,82c22c <alt_up_av_config_write_DC2_cfg_register+0x1c>
		return -EINVAL;

	return alt_up_av_config_write_data(av_config, addr, data);
}
  82c224:	3805883a 	mov	r2,r7
  82c228:	f800283a 	ret
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c22c:	20800a17 	ldw	r2,40(r4)
  82c230:	10c5883a 	add	r2,r2,r3
  82c234:	11400035 	stwio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  82c238:	20c00a17 	ldw	r3,40(r4)
  82c23c:	30bfffcc 	andi	r2,r6,65535
  82c240:	18800335 	stwio	r2,12(r3)
  82c244:	000f883a 	mov	r7,zero
{
	if (av_config->type != TRDB_DC2_CONFIG)
		return -EINVAL;

	return alt_up_av_config_write_data(av_config, addr, data);
}
  82c248:	3805883a 	mov	r2,r7
  82c24c:	f800283a 	ret

0082c250 <alt_up_av_config_write_video_cfg_register>:
}

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  82c250:	20c00b17 	ldw	r3,44(r4)
  82c254:	02000084 	movi	r8,2
  82c258:	18bfff84 	addi	r2,r3,-2
  82c25c:	40800636 	bltu	r8,r2,82c278 <alt_up_av_config_write_video_cfg_register+0x28>
		return -EINVAL;

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  82c260:	1a000326 	beq	r3,r8,82c270 <alt_up_av_config_write_video_cfg_register+0x20>
  82c264:	00800104 	movi	r2,4
	{
		if (video_port != FIRST_VIDEO_DEVICE)
			return -EINVAL;
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  82c268:	3a3fffc4 	addi	r8,r7,-1
{
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
		return -EINVAL;

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  82c26c:	1880041e 	bne	r3,r2,82c280 <alt_up_av_config_write_video_cfg_register+0x30>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  82c270:	00800044 	movi	r2,1
  82c274:	38800426 	beq	r7,r2,82c288 <alt_up_av_config_write_video_cfg_register+0x38>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);

	return alt_up_av_config_write_data(av_config, addr, data);
  82c278:	00bffa84 	movi	r2,-22
}
  82c27c:	f800283a 	ret
	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
	{
		if (video_port != FIRST_VIDEO_DEVICE)
			return -EINVAL;
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  82c280:	00800044 	movi	r2,1
  82c284:	123ffc36 	bltu	r2,r8,82c278 <alt_up_av_config_write_video_cfg_register+0x28>
			return -EINVAL;
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  82c288:	20800a17 	ldw	r2,40(r4)
  82c28c:	11c000a5 	stbio	r7,2(r2)
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c290:	20c00a17 	ldw	r3,40(r4)
  82c294:	28803fcc 	andi	r2,r5,255
  82c298:	18800235 	stwio	r2,8(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  82c29c:	21000a17 	ldw	r4,40(r4)
  82c2a0:	30bfffcc 	andi	r2,r6,65535
  82c2a4:	20800335 	stwio	r2,12(r4)
  82c2a8:	0005883a 	mov	r2,zero
  82c2ac:	f800283a 	ret

0082c2b0 <alt_up_av_config_write_audio_cfg_register>:
}

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  82c2b0:	20c00b17 	ldw	r3,44(r4)
  82c2b4:	008000c4 	movi	r2,3
  82c2b8:	01fffa84 	movi	r7,-22
  82c2bc:	18ffffc4 	addi	r3,r3,-1
  82c2c0:	10c00936 	bltu	r2,r3,82c2e8 <alt_up_av_config_write_audio_cfg_register+0x38>
		return -EINVAL;

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  82c2c4:	20800a17 	ldw	r2,40(r4)
  82c2c8:	100000a5 	stbio	zero,2(r2)
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c2cc:	20c00a17 	ldw	r3,40(r4)
  82c2d0:	28803fcc 	andi	r2,r5,255
  82c2d4:	18800235 	stwio	r2,8(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  82c2d8:	21000a17 	ldw	r4,40(r4)
  82c2dc:	30bfffcc 	andi	r2,r6,65535
  82c2e0:	20800335 	stwio	r2,12(r4)
  82c2e4:	000f883a 	mov	r7,zero
	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);

	return alt_up_av_config_write_data(av_config, addr, data);
}
  82c2e8:	3805883a 	mov	r2,r7
  82c2ec:	f800283a 	ret

0082c2f0 <alt_up_av_config_read_LTM_cfg_register>:
	return alt_up_av_config_write_data(av_config, addr, data);
}

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
	if (av_config->type != TRDB_LTM_CONFIG)
  82c2f0:	20800b17 	ldw	r2,44(r4)
  82c2f4:	00c00284 	movi	r3,10
  82c2f8:	01fffa84 	movi	r7,-22
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c2fc:	29403fcc 	andi	r5,r5,255
	return alt_up_av_config_write_data(av_config, addr, data);
}

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
	if (av_config->type != TRDB_LTM_CONFIG)
  82c300:	10c00226 	beq	r2,r3,82c30c <alt_up_av_config_read_LTM_cfg_register+0x1c>
		return -EINVAL;

	return alt_up_av_config_read_data(av_config, addr, data);
}
  82c304:	3805883a 	mov	r2,r7
  82c308:	f800283a 	ret
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c30c:	20800a17 	ldw	r2,40(r4)
  82c310:	11400235 	stwio	r5,8(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  82c314:	20c00a17 	ldw	r3,40(r4)
  82c318:	18800337 	ldwio	r2,12(r3)
  82c31c:	30800015 	stw	r2,0(r6)
	return 0;
}

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  82c320:	18c00104 	addi	r3,r3,4
  82c324:	18800037 	ldwio	r2,0(r3)
  82c328:	1080008c 	andi	r2,r2,2
  82c32c:	10000426 	beq	r2,zero,82c340 <alt_up_av_config_read_LTM_cfg_register+0x50>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  82c330:	18800037 	ldwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  82c334:	000f883a 	mov	r7,zero
  82c338:	1080004c 	andi	r2,r2,1
  82c33c:	103ff126 	beq	r2,zero,82c304 <alt_up_av_config_read_LTM_cfg_register+0x14>
  82c340:	01ffffc4 	movi	r7,-1
{
	if (av_config->type != TRDB_LTM_CONFIG)
		return -EINVAL;

	return alt_up_av_config_read_data(av_config, addr, data);
}
  82c344:	3805883a 	mov	r2,r7
  82c348:	f800283a 	ret

0082c34c <alt_up_av_config_read_D5M_cfg_register>:
	return alt_up_av_config_write_data(av_config, addr, data);
}

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
	if (av_config->type != TRDB_D5M_CONFIG)
  82c34c:	20800b17 	ldw	r2,44(r4)
  82c350:	00c00244 	movi	r3,9
  82c354:	01fffa84 	movi	r7,-22
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c358:	29403fcc 	andi	r5,r5,255
	return alt_up_av_config_write_data(av_config, addr, data);
}

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
	if (av_config->type != TRDB_D5M_CONFIG)
  82c35c:	10c00226 	beq	r2,r3,82c368 <alt_up_av_config_read_D5M_cfg_register+0x1c>
		return -EINVAL;
	
	return alt_up_av_config_read_data(av_config, addr, data);
}
  82c360:	3805883a 	mov	r2,r7
  82c364:	f800283a 	ret
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c368:	20800a17 	ldw	r2,40(r4)
  82c36c:	11400235 	stwio	r5,8(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  82c370:	20c00a17 	ldw	r3,40(r4)
  82c374:	18800337 	ldwio	r2,12(r3)
  82c378:	30800015 	stw	r2,0(r6)
	return 0;
}

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  82c37c:	18c00104 	addi	r3,r3,4
  82c380:	18800037 	ldwio	r2,0(r3)
  82c384:	1080008c 	andi	r2,r2,2
  82c388:	10000426 	beq	r2,zero,82c39c <alt_up_av_config_read_D5M_cfg_register+0x50>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  82c38c:	18800037 	ldwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  82c390:	000f883a 	mov	r7,zero
  82c394:	1080004c 	andi	r2,r2,1
  82c398:	103ff126 	beq	r2,zero,82c360 <alt_up_av_config_read_D5M_cfg_register+0x14>
  82c39c:	01ffffc4 	movi	r7,-1
{
	if (av_config->type != TRDB_D5M_CONFIG)
		return -EINVAL;
	
	return alt_up_av_config_read_data(av_config, addr, data);
}
  82c3a0:	3805883a 	mov	r2,r7
  82c3a4:	f800283a 	ret

0082c3a8 <alt_up_av_config_read_DC2_cfg_register>:
	return alt_up_av_config_write_data(av_config, addr, data);
}

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
	if (av_config->type != TRDB_DC2_CONFIG)
  82c3a8:	20c00b17 	ldw	r3,44(r4)
  82c3ac:	00800204 	movi	r2,8
  82c3b0:	01fffa84 	movi	r7,-22
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c3b4:	29403fcc 	andi	r5,r5,255
	return alt_up_av_config_write_data(av_config, addr, data);
}

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
	if (av_config->type != TRDB_DC2_CONFIG)
  82c3b8:	18800226 	beq	r3,r2,82c3c4 <alt_up_av_config_read_DC2_cfg_register+0x1c>
		return -EINVAL;

	return alt_up_av_config_read_data(av_config, addr, data);
}
  82c3bc:	3805883a 	mov	r2,r7
  82c3c0:	f800283a 	ret
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c3c4:	20800a17 	ldw	r2,40(r4)
  82c3c8:	10c5883a 	add	r2,r2,r3
  82c3cc:	11400035 	stwio	r5,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  82c3d0:	20c00a17 	ldw	r3,40(r4)
  82c3d4:	18800337 	ldwio	r2,12(r3)
  82c3d8:	30800015 	stw	r2,0(r6)
	return 0;
}

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  82c3dc:	18c00104 	addi	r3,r3,4
  82c3e0:	18800037 	ldwio	r2,0(r3)
  82c3e4:	1080008c 	andi	r2,r2,2
  82c3e8:	10000426 	beq	r2,zero,82c3fc <alt_up_av_config_read_DC2_cfg_register+0x54>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  82c3ec:	18800037 	ldwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  82c3f0:	000f883a 	mov	r7,zero
  82c3f4:	1080004c 	andi	r2,r2,1
  82c3f8:	103ff026 	beq	r2,zero,82c3bc <alt_up_av_config_read_DC2_cfg_register+0x14>
  82c3fc:	01ffffc4 	movi	r7,-1
{
	if (av_config->type != TRDB_DC2_CONFIG)
		return -EINVAL;

	return alt_up_av_config_read_data(av_config, addr, data);
}
  82c400:	3805883a 	mov	r2,r7
  82c404:	f800283a 	ret

0082c408 <alt_up_av_config_read_video_cfg_register>:
}

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  82c408:	20c00b17 	ldw	r3,44(r4)
  82c40c:	02000084 	movi	r8,2
  82c410:	18bfff84 	addi	r2,r3,-2
  82c414:	40800536 	bltu	r8,r2,82c42c <alt_up_av_config_read_video_cfg_register+0x24>
		return -EINVAL;

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  82c418:	1a000226 	beq	r3,r8,82c424 <alt_up_av_config_read_video_cfg_register+0x1c>
  82c41c:	00800104 	movi	r2,4
  82c420:	1880041e 	bne	r3,r2,82c434 <alt_up_av_config_read_video_cfg_register+0x2c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  82c424:	00800044 	movi	r2,1
  82c428:	38800526 	beq	r7,r2,82c440 <alt_up_av_config_read_video_cfg_register+0x38>

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  82c42c:	00bffa84 	movi	r2,-22
  82c430:	f800283a 	ret
	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
	{
		if (video_port != FIRST_VIDEO_DEVICE)
			return -EINVAL;
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  82c434:	38ffffc4 	addi	r3,r7,-1
  82c438:	00800044 	movi	r2,1
  82c43c:	10fffb36 	bltu	r2,r3,82c42c <alt_up_av_config_read_video_cfg_register+0x24>
			return -EINVAL;
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  82c440:	20800a17 	ldw	r2,40(r4)
  82c444:	11c000a5 	stbio	r7,2(r2)
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82c448:	20c00a17 	ldw	r3,40(r4)
  82c44c:	28803fcc 	andi	r2,r5,255
  82c450:	18800235 	stwio	r2,8(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  82c454:	21000a17 	ldw	r4,40(r4)
  82c458:	20800337 	ldwio	r2,12(r4)
  82c45c:	30800015 	stw	r2,0(r6)
	return 0;
}

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  82c460:	21000104 	addi	r4,r4,4
  82c464:	20800037 	ldwio	r2,0(r4)
  82c468:	1080008c 	andi	r2,r2,2
  82c46c:	10000326 	beq	r2,zero,82c47c <alt_up_av_config_read_video_cfg_register+0x74>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  82c470:	20800037 	ldwio	r2,0(r4)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  82c474:	1080004c 	andi	r2,r2,1
  82c478:	10000226 	beq	r2,zero,82c484 <alt_up_av_config_read_video_cfg_register+0x7c>
  82c47c:	00bfffc4 	movi	r2,-1

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);

	return alt_up_av_config_read_data(av_config, addr, data);
}
  82c480:	f800283a 	ret
  82c484:	f800283a 	ret

0082c488 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
  82c488:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
  82c48c:	1004c03a 	cmpne	r2,r2,zero
  82c490:	f800283a 	ret

0082c494 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
  82c494:	2080004c 	andi	r2,r4,1
  82c498:	f800283a 	ret

0082c49c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
  82c49c:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
  82c4a0:	1004c03a 	cmpne	r2,r2,zero
  82c4a4:	f800283a 	ret

0082c4a8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
  82c4a8:	2004d43a 	srli	r2,r4,16
  82c4ac:	f800283a 	ret

0082c4b0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
  82c4b0:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
  82c4b4:	1004c03a 	cmpne	r2,r2,zero
  82c4b8:	f800283a 	ret

0082c4bc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
  82c4bc:	20803fcc 	andi	r2,r4,255
  82c4c0:	f800283a 	ret

0082c4c4 <alt_up_ps2_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
  82c4c4:	01402134 	movhi	r5,132
  82c4c8:	2942ea04 	addi	r5,r5,2984
  82c4cc:	08328641 	jmpi	832864 <alt_find_dev>

0082c4d0 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  82c4d0:	21c00a17 	ldw	r7,40(r4)
  82c4d4:	0007883a 	mov	r3,zero
  82c4d8:	00000306 	br	82c4e8 <alt_up_ps2_read_data_byte_timeout+0x18>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c4dc:	20800c17 	ldw	r2,48(r4)
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
  82c4e0:	18c00044 	addi	r3,r3,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c4e4:	1000061e 	bne	r2,zero,82c500 <alt_up_ps2_read_data_byte_timeout+0x30>
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c4e8:	39800037 	ldwio	r6,0(r7)
		if (read_data_valid(data_reg))
  82c4ec:	30a0000c 	andi	r2,r6,32768
  82c4f0:	103ffa26 	beq	r2,zero,82c4dc <alt_up_ps2_read_data_byte_timeout+0xc>
		{
			*byte = read_data_byte(data_reg);
  82c4f4:	0005883a 	mov	r2,zero
  82c4f8:	29800005 	stb	r6,0(r5)
  82c4fc:	f800283a 	ret
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c500:	10fff92e 	bgeu	r2,r3,82c4e8 <alt_up_ps2_read_data_byte_timeout+0x18>
  82c504:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
  82c508:	f800283a 	ret

0082c50c <alt_up_ps2_write_data_byte>:
int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  82c50c:	20800a17 	ldw	r2,40(r4)
  82c510:	29403fcc 	andi	r5,r5,255
  82c514:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  82c518:	20c00a17 	ldw	r3,40(r4)
  82c51c:	18800137 	ldwio	r2,4(r3)
	if (read_CE_bit(ctrl_reg))
  82c520:	00fffec4 	movi	r3,-5
  82c524:	1081000c 	andi	r2,r2,1024
  82c528:	1000011e 	bne	r2,zero,82c530 <alt_up_ps2_write_data_byte+0x24>
  82c52c:	0007883a 	mov	r3,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
  82c530:	1805883a 	mov	r2,r3
  82c534:	f800283a 	ret

0082c538 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  82c538:	20800a17 	ldw	r2,40(r4)
  82c53c:	10800104 	addi	r2,r2,4
  82c540:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  82c544:	013fff84 	movi	r4,-2
  82c548:	1906703a 	and	r3,r3,r4
  82c54c:	10c00035 	stwio	r3,0(r2)
}
  82c550:	f800283a 	ret

0082c554 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  82c554:	20c00a17 	ldw	r3,40(r4)
  82c558:	18c00104 	addi	r3,r3,4
  82c55c:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  82c560:	10800054 	ori	r2,r2,1
  82c564:	18800035 	stwio	r2,0(r3)
}
  82c568:	f800283a 	ret

0082c56c <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
  82c56c:	20c00a17 	ldw	r3,40(r4)
	alt_u16 num = 0;
	unsigned int data_reg = 0;
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c570:	18800037 	ldwio	r2,0(r3)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
	} while (num > 0);
  82c574:	1004d43a 	srli	r2,r2,16
  82c578:	103ffd1e 	bne	r2,zero,82c570 <alt_up_ps2_clear_fifo+0x4>
}
  82c57c:	f800283a 	ret

0082c580 <alt_up_ps2_read_data_byte>:
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c580:	20800a17 	ldw	r2,40(r4)
  82c584:	10c00037 	ldwio	r3,0(r2)
	if (read_data_valid(data_reg))
  82c588:	013fffc4 	movi	r4,-1
  82c58c:	18a0000c 	andi	r2,r3,32768
  82c590:	10000226 	beq	r2,zero,82c59c <alt_up_ps2_read_data_byte+0x1c>
	{
		*byte = read_data_byte(data_reg);
  82c594:	28c00005 	stb	r3,0(r5)
  82c598:	0009883a 	mov	r4,zero
		return 0;
	}
	return -1;
}
  82c59c:	2005883a 	mov	r2,r4
  82c5a0:	f800283a 	ret

0082c5a4 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  82c5a4:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
  82c5a8:	0180010e 	bge	zero,r6,82c5b0 <alt_up_ps2_read_fd+0xc>
  82c5ac:	003fff06 	br	82c5ac <alt_up_ps2_read_fd+0x8>
  82c5b0:	21c00a17 	ldw	r7,40(r4)
  82c5b4:	0007883a 	mov	r3,zero
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c5b8:	39800037 	ldwio	r6,0(r7)
		if (read_data_valid(data_reg))
  82c5bc:	30a0000c 	andi	r2,r6,32768
  82c5c0:	1000061e 	bne	r2,zero,82c5dc <alt_up_ps2_read_fd+0x38>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c5c4:	20800c17 	ldw	r2,48(r4)
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
  82c5c8:	18c00044 	addi	r3,r3,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c5cc:	103ffa26 	beq	r2,zero,82c5b8 <alt_up_ps2_read_fd+0x14>
  82c5d0:	10fff92e 	bgeu	r2,r3,82c5b8 <alt_up_ps2_read_fd+0x14>
  82c5d4:	0005883a 	mov	r2,zero
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
  82c5d8:	f800283a 	ret
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		if (read_data_valid(data_reg))
		{
			*byte = read_data_byte(data_reg);
  82c5dc:	00800044 	movi	r2,1
  82c5e0:	29800005 	stb	r6,0(r5)
  82c5e4:	f800283a 	ret

0082c5e8 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
  82c5e8:	21800a17 	ldw	r6,40(r4)
  82c5ec:	01c03e84 	movi	r7,250
  82c5f0:	0007883a 	mov	r3,zero
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c5f4:	31400037 	ldwio	r5,0(r6)
		if (read_data_valid(data_reg))
  82c5f8:	28a0000c 	andi	r2,r5,32768
  82c5fc:	1000061e 	bne	r2,zero,82c618 <alt_up_ps2_wait_for_ack+0x30>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c600:	20800c17 	ldw	r2,48(r4)
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
  82c604:	18c00044 	addi	r3,r3,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c608:	103ffa26 	beq	r2,zero,82c5f4 <alt_up_ps2_wait_for_ack+0xc>
  82c60c:	10fff92e 	bgeu	r2,r3,82c5f4 <alt_up_ps2_wait_for_ack+0xc>
  82c610:	00802304 	movi	r2,140
		{
			return status;
		}
	} while(1);
	return -ETIMEDOUT;
}
  82c614:	f800283a 	ret
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
		if ( status == 0)
		{
			if (data == PS2_ACK)
  82c618:	28803fcc 	andi	r2,r5,255
  82c61c:	11fff41e 	bne	r2,r7,82c5f0 <alt_up_ps2_wait_for_ack+0x8>
  82c620:	0005883a 	mov	r2,zero
  82c624:	f800283a 	ret

0082c628 <alt_up_ps2_write_fd>:
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  82c628:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
  82c62c:	01800e0e 	bge	zero,r6,82c668 <alt_up_ps2_write_fd+0x40>
  82c630:	21c00a17 	ldw	r7,40(r4)
  82c634:	0011883a 	mov	r8,zero
  82c638:	00000206 	br	82c644 <alt_up_ps2_write_fd+0x1c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
  82c63c:	42000044 	addi	r8,r8,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
  82c640:	32000726 	beq	r6,r8,82c660 <alt_up_ps2_write_fd+0x38>
int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  82c644:	4145883a 	add	r2,r8,r5
  82c648:	10c00003 	ldbu	r3,0(r2)
  82c64c:	38c00025 	stbio	r3,0(r7)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  82c650:	21c00a17 	ldw	r7,40(r4)
  82c654:	38800137 	ldwio	r2,4(r7)
	if (read_CE_bit(ctrl_reg))
  82c658:	1081000c 	andi	r2,r2,1024
  82c65c:	103ff726 	beq	r2,zero,82c63c <alt_up_ps2_write_fd+0x14>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
  82c660:	4005883a 	mov	r2,r8
  82c664:	f800283a 	ret
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
  82c668:	0011883a 	mov	r8,zero
  82c66c:	003ffc06 	br	82c660 <alt_up_ps2_write_fd+0x38>

0082c670 <alt_up_ps2_write_data_byte_with_ack>:
int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  82c670:	20800a17 	ldw	r2,40(r4)
  82c674:	29403fcc 	andi	r5,r5,255
  82c678:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  82c67c:	21800a17 	ldw	r6,40(r4)
  82c680:	30800137 	ldwio	r2,4(r6)
	if (read_CE_bit(ctrl_reg))
  82c684:	1081000c 	andi	r2,r2,1024
  82c688:	10000f1e 	bne	r2,zero,82c6c8 <alt_up_ps2_write_data_byte_with_ack+0x58>
  82c68c:	000b883a 	mov	r5,zero
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c690:	30c00037 	ldwio	r3,0(r6)
		if (read_data_valid(data_reg))
  82c694:	18a0000c 	andi	r2,r3,32768
  82c698:	1000061e 	bne	r2,zero,82c6b4 <alt_up_ps2_write_data_byte_with_ack+0x44>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c69c:	20800c17 	ldw	r2,48(r4)
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
  82c6a0:	29400044 	addi	r5,r5,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c6a4:	103ffa26 	beq	r2,zero,82c690 <alt_up_ps2_write_data_byte_with_ack+0x20>
  82c6a8:	117ff92e 	bgeu	r2,r5,82c690 <alt_up_ps2_write_data_byte_with_ack+0x20>
  82c6ac:	00802304 	movi	r2,140
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}
  82c6b0:	f800283a 	ret
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
		if ( status == 0)
		{
			if (data == PS2_ACK)
  82c6b4:	18c03fcc 	andi	r3,r3,255
  82c6b8:	00803e84 	movi	r2,250
  82c6bc:	18bff31e 	bne	r3,r2,82c68c <alt_up_ps2_write_data_byte_with_ack+0x1c>
  82c6c0:	0005883a 	mov	r2,zero
  82c6c4:	f800283a 	ret
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
	if (read_CE_bit(ctrl_reg))
  82c6c8:	00bffec4 	movi	r2,-5
  82c6cc:	f800283a 	ret

0082c6d0 <alt_up_ps2_init>:
int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  82c6d0:	20c00a17 	ldw	r3,40(r4)
  82c6d4:	00803fc4 	movi	r2,255
  82c6d8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  82c6dc:	21800a17 	ldw	r6,40(r4)
  82c6e0:	30800137 	ldwio	r2,4(r6)
	if (read_CE_bit(ctrl_reg))
  82c6e4:	1081000c 	andi	r2,r2,1024
  82c6e8:	1000171e 	bne	r2,zero,82c748 <alt_up_ps2_init+0x78>
  82c6ec:	01c03e84 	movi	r7,250
  82c6f0:	0007883a 	mov	r3,zero
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c6f4:	31400037 	ldwio	r5,0(r6)
		if (read_data_valid(data_reg))
  82c6f8:	28a0000c 	andi	r2,r5,32768
  82c6fc:	1000131e 	bne	r2,zero,82c74c <alt_up_ps2_init+0x7c>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c700:	20800c17 	ldw	r2,48(r4)
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
  82c704:	18c00044 	addi	r3,r3,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c708:	103ffa26 	beq	r2,zero,82c6f4 <alt_up_ps2_init+0x24>
  82c70c:	10fff92e 	bgeu	r2,r3,82c6f4 <alt_up_ps2_init+0x24>
  82c710:	f800283a 	ret
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
	if (status == 0)
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
		if (status == 0 && byte == 0xAA)
  82c714:	18c03fcc 	andi	r3,r3,255
  82c718:	00802a84 	movi	r2,170
  82c71c:	18800a1e 	bne	r3,r2,82c748 <alt_up_ps2_init+0x78>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c720:	0007883a 	mov	r3,zero
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c724:	31400037 	ldwio	r5,0(r6)
		if (read_data_valid(data_reg))
  82c728:	28a0000c 	andi	r2,r5,32768
  82c72c:	1000121e 	bne	r2,zero,82c778 <alt_up_ps2_init+0xa8>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c730:	20800c17 	ldw	r2,48(r4)
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
  82c734:	18c00044 	addi	r3,r3,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c738:	103ffa26 	beq	r2,zero,82c724 <alt_up_ps2_init+0x54>
  82c73c:	10fff92e 	bgeu	r2,r3,82c724 <alt_up_ps2_init+0x54>
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
  82c740:	00800044 	movi	r2,1
  82c744:	20800d15 	stw	r2,52(r4)
  82c748:	f800283a 	ret
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
		if ( status == 0)
		{
			if (data == PS2_ACK)
  82c74c:	28803fcc 	andi	r2,r5,255
  82c750:	11ffe71e 	bne	r2,r7,82c6f0 <alt_up_ps2_init+0x20>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c754:	000b883a 	mov	r5,zero
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82c758:	30c00037 	ldwio	r3,0(r6)
		if (read_data_valid(data_reg))
  82c75c:	18a0000c 	andi	r2,r3,32768
  82c760:	103fec1e 	bne	r2,zero,82c714 <alt_up_ps2_init+0x44>
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c764:	20800c17 	ldw	r2,48(r4)
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
  82c768:	29400044 	addi	r5,r5,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  82c76c:	103ffa26 	beq	r2,zero,82c758 <alt_up_ps2_init+0x88>
  82c770:	117ff92e 	bgeu	r2,r5,82c758 <alt_up_ps2_init+0x88>
  82c774:	f800283a 	ret
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
  82c778:	28803fcc 	andi	r2,r5,255
  82c77c:	103ff21e 	bne	r2,zero,82c748 <alt_up_ps2_init+0x78>
int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  82c780:	00803d04 	movi	r2,244
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
  82c784:	20000d15 	stw	zero,52(r4)
int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  82c788:	30800025 	stbio	r2,0(r6)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  82c78c:	20c00a17 	ldw	r3,40(r4)
  82c790:	18800137 	ldwio	r2,4(r3)
  82c794:	f800283a 	ret

0082c798 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
  82c798:	200495ba 	slli	r2,r4,22
}
  82c79c:	1005d7fa 	srai	r2,r2,31
  82c7a0:	f800283a 	ret

0082c7a4 <alt_up_rs232_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  82c7a4:	01402134 	movhi	r5,132
  82c7a8:	2942ea04 	addi	r5,r5,2984
  82c7ac:	08328641 	jmpi	832864 <alt_find_dev>

0082c7b0 <alt_up_rs232_read_data>:
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  82c7b0:	20800a17 	ldw	r2,40(r4)
  82c7b4:	10c00037 	ldwio	r3,0(r2)
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
  82c7b8:	180895ba 	slli	r4,r3,22
int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
	*parity_error = alt_up_rs232_check_parity(data_reg);
  82c7bc:	18a0000c 	andi	r2,r3,32768
  82c7c0:	1004d3fa 	srli	r2,r2,15
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
  82c7c4:	2009d7fa 	srai	r4,r4,31

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  82c7c8:	28c00005 	stb	r3,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
  82c7cc:	10bfffc4 	addi	r2,r2,-1
int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
	*parity_error = alt_up_rs232_check_parity(data_reg);
  82c7d0:	31000005 	stb	r4,0(r6)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
  82c7d4:	f800283a 	ret

0082c7d8 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  82c7d8:	20c00a17 	ldw	r3,40(r4)
  82c7dc:	18800137 	ldwio	r2,4(r3)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
  82c7e0:	1004d43a 	srli	r2,r2,16
  82c7e4:	f800283a 	ret

0082c7e8 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  82c7e8:	20800a17 	ldw	r2,40(r4)
  82c7ec:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  82c7f0:	29403fcc 	andi	r5,r5,255
  82c7f4:	11400035 	stwio	r5,0(r2)
	return 0;
}
  82c7f8:	0005883a 	mov	r2,zero
  82c7fc:	f800283a 	ret

0082c800 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  82c800:	20800a17 	ldw	r2,40(r4)
  82c804:	10800104 	addi	r2,r2,4
  82c808:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  82c80c:	013fff84 	movi	r4,-2
  82c810:	1906703a 	and	r3,r3,r4
  82c814:	10c00035 	stwio	r3,0(r2)
}
  82c818:	f800283a 	ret

0082c81c <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  82c81c:	20c00a17 	ldw	r3,40(r4)
  82c820:	18c00104 	addi	r3,r3,4
  82c824:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  82c828:	10800054 	ori	r2,r2,1
  82c82c:	18800035 	stwio	r2,0(r3)
}
  82c830:	f800283a 	ret

0082c834 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  82c834:	20c00a17 	ldw	r3,40(r4)
  82c838:	188000ab 	ldhuio	r2,2(r3)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
  82c83c:	10bfffcc 	andi	r2,r2,65535
  82c840:	f800283a 	ret

0082c844 <alt_up_rs232_read_fd>:
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  82c844:	22000017 	ldw	r8,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  82c848:	30000e26 	beq	r6,zero,82c884 <alt_up_rs232_read_fd+0x40>
  82c84c:	000f883a 	mov	r7,zero
  82c850:	02400044 	movi	r9,1
  82c854:	00000206 	br	82c860 <alt_up_rs232_read_fd+0x1c>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
  82c858:	38cf883a 	add	r7,r7,r3
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  82c85c:	31c00726 	beq	r6,r7,82c87c <alt_up_rs232_read_fd+0x38>
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  82c860:	40800a17 	ldw	r2,40(r8)
  82c864:	11000037 	ldwio	r4,0(r2)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  82c868:	20e0000c 	andi	r3,r4,32768
  82c86c:	1806d3fa 	srli	r3,r3,15

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  82c870:	3945883a 	add	r2,r7,r5
  82c874:	11000005 	stb	r4,0(r2)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  82c878:	1a7ff726 	beq	r3,r9,82c858 <alt_up_rs232_read_fd+0x14>
			count++;
		else
			break;
	}
	return count;
}
  82c87c:	3805883a 	mov	r2,r7
  82c880:	f800283a 	ret
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  82c884:	000f883a 	mov	r7,zero
  82c888:	003ffc06 	br	82c87c <alt_up_rs232_read_fd+0x38>

0082c88c <alt_up_rs232_write_fd>:
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  82c88c:	22000017 	ldw	r8,0(r4)
	int count = 0;
	while(len--)
  82c890:	30000a26 	beq	r6,zero,82c8bc <alt_up_rs232_write_fd+0x30>
  82c894:	000f883a 	mov	r7,zero
  82c898:	28800003 	ldbu	r2,0(r5)
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  82c89c:	40c00a17 	ldw	r3,40(r8)
  82c8a0:	19000037 	ldwio	r4,0(r3)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  82c8a4:	18800035 	stwio	r2,0(r3)
	int count = 0;
	while(len--)
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
		{
			count++;
  82c8a8:	39c00044 	addi	r7,r7,1
			ptr++;
  82c8ac:	29400044 	addi	r5,r5,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  82c8b0:	31fff91e 	bne	r6,r7,82c898 <alt_up_rs232_write_fd+0xc>
  82c8b4:	3005883a 	mov	r2,r6
		}
		else
			break;
	}
	return count;
}
  82c8b8:	f800283a 	ret

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  82c8bc:	0005883a 	mov	r2,zero
  82c8c0:	f800283a 	ret

0082c8c4 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  82c8c4:	20800c17 	ldw	r2,48(r4)
  82c8c8:	30800236 	bltu	r6,r2,82c8d4 <alt_up_char_buffer_string+0x10>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
  82c8cc:	00bfffc4 	movi	r2,-1
  82c8d0:	f800283a 	ret
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  82c8d4:	20800d17 	ldw	r2,52(r4)
  82c8d8:	38bffc2e 	bgeu	r7,r2,82c8cc <alt_up_char_buffer_string+0x8>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  82c8dc:	28c00007 	ldb	r3,0(r5)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
  82c8e0:	20801017 	ldw	r2,64(r4)

	while ( *ptr )
  82c8e4:	18000c26 	beq	r3,zero,82c918 <alt_up_char_buffer_string+0x54>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
  82c8e8:	3884983a 	sll	r2,r7,r2
  82c8ec:	308f883a 	add	r7,r6,r2

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  82c8f0:	20800b17 	ldw	r2,44(r4)
  82c8f4:	3885883a 	add	r2,r7,r2
  82c8f8:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
  82c8fc:	20800c17 	ldw	r2,48(r4)
  82c900:	31800044 	addi	r6,r6,1
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
  82c904:	29400044 	addi	r5,r5,1
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
  82c908:	39c00044 	addi	r7,r7,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
  82c90c:	30bfef2e 	bgeu	r6,r2,82c8cc <alt_up_char_buffer_string+0x8>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  82c910:	28c00007 	ldb	r3,0(r5)
  82c914:	183ff61e 	bne	r3,zero,82c8f0 <alt_up_char_buffer_string+0x2c>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
  82c918:	0005883a 	mov	r2,zero
	}
	return 0;
}
  82c91c:	f800283a 	ret

0082c920 <alt_up_char_buffer_draw>:
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  82c920:	20800c17 	ldw	r2,48(r4)

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  82c924:	3011883a 	mov	r8,r6
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  82c928:	30800236 	bltu	r6,r2,82c934 <alt_up_char_buffer_draw+0x14>
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
  82c92c:	00bfffc4 	movi	r2,-1
}
  82c930:	f800283a 	ret
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  82c934:	20800d17 	ldw	r2,52(r4)
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  82c938:	2a403fcc 	andi	r9,r5,255
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  82c93c:	38bffb2e 	bgeu	r7,r2,82c92c <alt_up_char_buffer_draw+0xc>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  82c940:	20800f17 	ldw	r2,60(r4)
  82c944:	20c01117 	ldw	r3,68(r4)
  82c948:	21400e17 	ldw	r5,56(r4)
  82c94c:	21801017 	ldw	r6,64(r4)
  82c950:	4084703a 	and	r2,r8,r2
  82c954:	38c6703a 	and	r3,r7,r3
  82c958:	1144983a 	sll	r2,r2,r5
  82c95c:	1986983a 	sll	r3,r3,r6
  82c960:	21000b17 	ldw	r4,44(r4)
  82c964:	10c4b03a 	or	r2,r2,r3
  82c968:	1105883a 	add	r2,r2,r4
  82c96c:	12400025 	stbio	r9,0(r2)
  82c970:	0005883a 	mov	r2,zero
  82c974:	f800283a 	ret

0082c978 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  82c978:	21400a17 	ldw	r5,40(r4)
  82c97c:	00800044 	movi	r2,1
  82c980:	288000a5 	stbio	r2,2(r5)
  82c984:	20c00a17 	ldw	r3,40(r4)
  82c988:	18c00084 	addi	r3,r3,2
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  82c98c:	18800023 	ldbuio	r2,0(r3)
  82c990:	1080004c 	andi	r2,r2,1
  82c994:	103ffd1e 	bne	r2,zero,82c98c <alt_up_char_buffer_clear+0x14>
	return 0;
}
  82c998:	f800283a 	ret

0082c99c <alt_up_char_buffer_open_dev>:
alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  82c99c:	01402134 	movhi	r5,132
  82c9a0:	2942ea04 	addi	r5,r5,2984
  82c9a4:	08328641 	jmpi	832864 <alt_find_dev>

0082c9a8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  82c9a8:	defffe04 	addi	sp,sp,-8
  82c9ac:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
  82c9b0:	24000217 	ldw	r16,8(r4)
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  82c9b4:	dfc00115 	stw	ra,4(sp)
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  82c9b8:	80800007 	ldb	r2,0(r16)
  82c9bc:	1000041e 	bne	r2,zero,82c9d0 <alt_up_char_buffer_init+0x28>
  82c9c0:	00000906 	br	82c9e8 <alt_up_char_buffer_init+0x40>
  82c9c4:	84000044 	addi	r16,r16,1
  82c9c8:	80800007 	ldb	r2,0(r16)
  82c9cc:	10000626 	beq	r2,zero,82c9e8 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  82c9d0:	8009883a 	mov	r4,r16
  82c9d4:	01402134 	movhi	r5,132
  82c9d8:	297baa04 	addi	r5,r5,-4440
  82c9dc:	0822cc80 	call	822cc8 <strcmp>
  82c9e0:	103ff81e 	bne	r2,zero,82c9c4 <alt_up_char_buffer_init+0x1c>
			(*name) = '\0';
  82c9e4:	80000005 	stb	zero,0(r16)
			break;
		}
	}
	
	return;
}
  82c9e8:	dfc00117 	ldw	ra,4(sp)
  82c9ec:	dc000017 	ldw	r16,0(sp)
  82c9f0:	dec00204 	addi	sp,sp,8
  82c9f4:	f800283a 	ret

0082c9f8 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  82c9f8:	da400117 	ldw	r9,4(sp)
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  82c9fc:	29c5383a 	mul	r2,r5,r7
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  82ca00:	da000017 	ldw	r8,0(sp)
	if (mode == 0)
  82ca04:	48000e26 	beq	r9,zero,82ca40 <helper_plot_pixel+0x48>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  82ca08:	00800044 	movi	r2,1
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  82ca0c:	29c7383a 	mul	r3,r5,r7
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  82ca10:	48800626 	beq	r9,r2,82ca2c <helper_plot_pixel+0x34>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  82ca14:	1985883a 	add	r2,r3,r6
  82ca18:	1085883a 	add	r2,r2,r2
  82ca1c:	1085883a 	add	r2,r2,r2
  82ca20:	1105883a 	add	r2,r2,r4
  82ca24:	12000035 	stwio	r8,0(r2)
  82ca28:	f800283a 	ret
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  82ca2c:	30c5883a 	add	r2,r6,r3
  82ca30:	1085883a 	add	r2,r2,r2
  82ca34:	1105883a 	add	r2,r2,r4
  82ca38:	1200002d 	sthio	r8,0(r2)
  82ca3c:	f800283a 	ret
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  82ca40:	3085883a 	add	r2,r6,r2
  82ca44:	1105883a 	add	r2,r2,r4
  82ca48:	12000025 	stbio	r8,0(r2)
  82ca4c:	f800283a 	ret

0082ca50 <alt_up_pixel_buffer_dma_draw_vline>:
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
  82ca50:	3811883a 	mov	r8,r7


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  82ca54:	dac00017 	ldw	r11,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  82ca58:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  82ca5c:	20801017 	ldw	r2,64(r4)
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
  82ca60:	3980022e 	bgeu	r7,r6,82ca6c <alt_up_pixel_buffer_dma_draw_vline+0x1c>
  82ca64:	3011883a 	mov	r8,r6
  82ca68:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  82ca6c:	2a401a2e 	bgeu	r5,r9,82cad8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
  82ca70:	3080192e 	bgeu	r6,r2,82cad8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  82ca74:	40800136 	bltu	r8,r2,82ca7c <alt_up_pixel_buffer_dma_draw_vline+0x2c>
	{
		b_y = limit_y - 1;
  82ca78:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  82ca7c:	d8c00117 	ldw	r3,4(sp)
  82ca80:	00800044 	movi	r2,1
  82ca84:	18803826 	beq	r3,r2,82cb68 <alt_up_pixel_buffer_dma_draw_vline+0x118>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  82ca88:	22800b17 	ldw	r10,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  82ca8c:	20800d17 	ldw	r2,52(r4)
  82ca90:	1000121e 	bne	r2,zero,82cadc <alt_up_pixel_buffer_dma_draw_vline+0x8c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  82ca94:	21c01317 	ldw	r7,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82ca98:	21000e17 	ldw	r4,56(r4)
  82ca9c:	02400044 	movi	r9,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  82caa0:	31c4983a 	sll	r2,r6,r7
  82caa4:	5087883a 	add	r3,r10,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82caa8:	22401e26 	beq	r4,r9,82cb24 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82caac:	00800084 	movi	r2,2
  82cab0:	20803a26 	beq	r4,r2,82cb9c <alt_up_pixel_buffer_dma_draw_vline+0x14c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  82cab4:	41804236 	bltu	r8,r6,82cbc0 <alt_up_pixel_buffer_dma_draw_vline+0x170>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cab8:	2945883a 	add	r2,r5,r5
  82cabc:	49c8983a 	sll	r4,r9,r7
  82cac0:	1085883a 	add	r2,r2,r2
  82cac4:	10c5883a 	add	r2,r2,r3
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  82cac8:	12c00035 	stwio	r11,0(r2)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  82cacc:	31800044 	addi	r6,r6,1
  82cad0:	1105883a 	add	r2,r2,r4
  82cad4:	41bffc2e 	bgeu	r8,r6,82cac8 <alt_up_pixel_buffer_dma_draw_vline+0x78>
  82cad8:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82cadc:	21000e17 	ldw	r4,56(r4)
  82cae0:	00800044 	movi	r2,1
  82cae4:	20801726 	beq	r4,r2,82cb44 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82cae8:	00800084 	movi	r2,2
  82caec:	20802026 	beq	r4,r2,82cb70 <alt_up_pixel_buffer_dma_draw_vline+0x120>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82caf0:	41bff936 	bltu	r8,r6,82cad8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  82caf4:	4a45883a 	add	r2,r9,r9
  82caf8:	1089883a 	add	r4,r2,r2
  82cafc:	3107383a 	mul	r3,r6,r4
  82cb00:	2945883a 	add	r2,r5,r5
  82cb04:	1085883a 	add	r2,r2,r2
  82cb08:	50c7883a 	add	r3,r10,r3
  82cb0c:	10c5883a 	add	r2,r2,r3
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  82cb10:	12c00035 	stwio	r11,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cb14:	31800044 	addi	r6,r6,1
  82cb18:	1105883a 	add	r2,r2,r4
  82cb1c:	41bffc2e 	bgeu	r8,r6,82cb10 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
  82cb20:	f800283a 	ret
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cb24:	41bfec36 	bltu	r8,r6,82cad8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
  82cb28:	49c8983a 	sll	r4,r9,r7
  82cb2c:	1945883a 	add	r2,r3,r5
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  82cb30:	12c00025 	stbio	r11,0(r2)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cb34:	31800044 	addi	r6,r6,1
  82cb38:	1105883a 	add	r2,r2,r4
  82cb3c:	41bffc2e 	bgeu	r8,r6,82cb30 <alt_up_pixel_buffer_dma_draw_vline+0xe0>
  82cb40:	f800283a 	ret
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cb44:	41bfe436 	bltu	r8,r6,82cad8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
  82cb48:	3245383a 	mul	r2,r6,r9
  82cb4c:	5085883a 	add	r2,r10,r2
  82cb50:	2885883a 	add	r2,r5,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  82cb54:	12c00025 	stbio	r11,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cb58:	31800044 	addi	r6,r6,1
  82cb5c:	1245883a 	add	r2,r2,r9
  82cb60:	41bffc2e 	bgeu	r8,r6,82cb54 <alt_up_pixel_buffer_dma_draw_vline+0x104>
  82cb64:	f800283a 	ret
		b_y = limit_y - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  82cb68:	22800c17 	ldw	r10,48(r4)
  82cb6c:	003fc706 	br	82ca8c <alt_up_pixel_buffer_dma_draw_vline+0x3c>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cb70:	41bfd936 	bltu	r8,r6,82cad8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
  82cb74:	4a49883a 	add	r4,r9,r9
  82cb78:	3105383a 	mul	r2,r6,r4
  82cb7c:	2947883a 	add	r3,r5,r5
  82cb80:	5085883a 	add	r2,r10,r2
  82cb84:	1885883a 	add	r2,r3,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  82cb88:	12c0002d 	sthio	r11,0(r2)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cb8c:	31800044 	addi	r6,r6,1
  82cb90:	1105883a 	add	r2,r2,r4
  82cb94:	41bffc2e 	bgeu	r8,r6,82cb88 <alt_up_pixel_buffer_dma_draw_vline+0x138>
  82cb98:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cb9c:	41800936 	bltu	r8,r6,82cbc4 <alt_up_pixel_buffer_dma_draw_vline+0x174>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  82cba0:	49c8983a 	sll	r4,r9,r7
  82cba4:	2945883a 	add	r2,r5,r5
  82cba8:	10c5883a 	add	r2,r2,r3
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  82cbac:	12c0002d 	sthio	r11,0(r2)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cbb0:	31800044 	addi	r6,r6,1
  82cbb4:	1105883a 	add	r2,r2,r4
  82cbb8:	41bffc2e 	bgeu	r8,r6,82cbac <alt_up_pixel_buffer_dma_draw_vline+0x15c>
  82cbbc:	f800283a 	ret
  82cbc0:	f800283a 	ret
  82cbc4:	f800283a 	ret

0082cbc8 <alt_up_pixel_buffer_dma_draw_hline>:
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
  82cbc8:	3013883a 	mov	r9,r6
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  82cbcc:	da800017 	ldw	r10,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  82cbd0:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  82cbd4:	20801017 	ldw	r2,64(r4)
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
  82cbd8:	3140022e 	bgeu	r6,r5,82cbe4 <alt_up_pixel_buffer_dma_draw_hline+0x1c>
  82cbdc:	2813883a 	mov	r9,r5
  82cbe0:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  82cbe4:	2a00192e 	bgeu	r5,r8,82cc4c <alt_up_pixel_buffer_dma_draw_hline+0x84>
  82cbe8:	3880182e 	bgeu	r7,r2,82cc4c <alt_up_pixel_buffer_dma_draw_hline+0x84>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  82cbec:	4a000136 	bltu	r9,r8,82cbf4 <alt_up_pixel_buffer_dma_draw_hline+0x2c>
	{
		r_x = limit_x - 1;
  82cbf0:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  82cbf4:	d8c00117 	ldw	r3,4(sp)
  82cbf8:	00800044 	movi	r2,1
  82cbfc:	18803726 	beq	r3,r2,82ccdc <alt_up_pixel_buffer_dma_draw_hline+0x114>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  82cc00:	21800b17 	ldw	r6,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  82cc04:	20800d17 	ldw	r2,52(r4)
  82cc08:	1000111e 	bne	r2,zero,82cc50 <alt_up_pixel_buffer_dma_draw_hline+0x88>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
  82cc0c:	20801317 	ldw	r2,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82cc10:	21000e17 	ldw	r4,56(r4)
  82cc14:	00c00044 	movi	r3,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
  82cc18:	3884983a 	sll	r2,r7,r2
  82cc1c:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82cc20:	20c01d26 	beq	r4,r3,82cc98 <alt_up_pixel_buffer_dma_draw_hline+0xd0>
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82cc24:	00800084 	movi	r2,2
  82cc28:	20803826 	beq	r4,r2,82cd0c <alt_up_pixel_buffer_dma_draw_hline+0x144>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  82cc2c:	49403e36 	bltu	r9,r5,82cd28 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  82cc30:	2945883a 	add	r2,r5,r5
  82cc34:	1085883a 	add	r2,r2,r2
  82cc38:	11c5883a 	add	r2,r2,r7
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  82cc3c:	12800035 	stwio	r10,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  82cc40:	29400044 	addi	r5,r5,1
  82cc44:	10800104 	addi	r2,r2,4
  82cc48:	497ffc2e 	bgeu	r9,r5,82cc3c <alt_up_pixel_buffer_dma_draw_hline+0x74>
  82cc4c:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82cc50:	21000e17 	ldw	r4,56(r4)
  82cc54:	00800044 	movi	r2,1
  82cc58:	20801626 	beq	r4,r2,82ccb4 <alt_up_pixel_buffer_dma_draw_hline+0xec>
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82cc5c:	00800084 	movi	r2,2
  82cc60:	20802026 	beq	r4,r2,82cce4 <alt_up_pixel_buffer_dma_draw_hline+0x11c>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  82cc64:	497ff936 	bltu	r9,r5,82cc4c <alt_up_pixel_buffer_dma_draw_hline+0x84>
  82cc68:	4205883a 	add	r2,r8,r8
  82cc6c:	1085883a 	add	r2,r2,r2
  82cc70:	3885383a 	mul	r2,r7,r2
  82cc74:	2947883a 	add	r3,r5,r5
  82cc78:	18c7883a 	add	r3,r3,r3
  82cc7c:	3085883a 	add	r2,r6,r2
  82cc80:	1885883a 	add	r2,r3,r2
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  82cc84:	12800035 	stwio	r10,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  82cc88:	29400044 	addi	r5,r5,1
  82cc8c:	10800104 	addi	r2,r2,4
  82cc90:	497ffc2e 	bgeu	r9,r5,82cc84 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
  82cc94:	f800283a 	ret
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  82cc98:	497fec36 	bltu	r9,r5,82cc4c <alt_up_pixel_buffer_dma_draw_hline+0x84>
  82cc9c:	29c5883a 	add	r2,r5,r7
			{
				IOWR_8DIRECT(addr, x, local_color);
  82cca0:	12800025 	stbio	r10,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  82cca4:	29400044 	addi	r5,r5,1
  82cca8:	10800044 	addi	r2,r2,1
  82ccac:	497ffc2e 	bgeu	r9,r5,82cca0 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
  82ccb0:	f800283a 	ret
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  82ccb4:	497fe536 	bltu	r9,r5,82cc4c <alt_up_pixel_buffer_dma_draw_hline+0x84>
  82ccb8:	41c5383a 	mul	r2,r8,r7
  82ccbc:	2807883a 	mov	r3,r5
  82ccc0:	3085883a 	add	r2,r6,r2
  82ccc4:	2885883a 	add	r2,r5,r2
			{
				IOWR_8DIRECT(addr, x, local_color);
  82ccc8:	12800025 	stbio	r10,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  82cccc:	18c00044 	addi	r3,r3,1
  82ccd0:	10800044 	addi	r2,r2,1
  82ccd4:	48fffc2e 	bgeu	r9,r3,82ccc8 <alt_up_pixel_buffer_dma_draw_hline+0x100>
  82ccd8:	f800283a 	ret
		r_x = limit_x - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  82ccdc:	21800c17 	ldw	r6,48(r4)
  82cce0:	003fc806 	br	82cc04 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  82cce4:	497fd936 	bltu	r9,r5,82cc4c <alt_up_pixel_buffer_dma_draw_hline+0x84>
  82cce8:	4205883a 	add	r2,r8,r8
  82ccec:	3885383a 	mul	r2,r7,r2
  82ccf0:	308f883a 	add	r7,r6,r2
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  82ccf4:	2945883a 	add	r2,r5,r5
  82ccf8:	11c5883a 	add	r2,r2,r7
  82ccfc:	1280002d 	sthio	r10,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  82cd00:	29400044 	addi	r5,r5,1
  82cd04:	497ffb2e 	bgeu	r9,r5,82ccf4 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
  82cd08:	f800283a 	ret
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  82cd0c:	49400736 	bltu	r9,r5,82cd2c <alt_up_pixel_buffer_dma_draw_hline+0x164>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  82cd10:	2945883a 	add	r2,r5,r5
  82cd14:	11c5883a 	add	r2,r2,r7
  82cd18:	1280002d 	sthio	r10,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  82cd1c:	29400044 	addi	r5,r5,1
  82cd20:	497ffb2e 	bgeu	r9,r5,82cd10 <alt_up_pixel_buffer_dma_draw_hline+0x148>
  82cd24:	f800283a 	ret
  82cd28:	f800283a 	ret
  82cd2c:	f800283a 	ret

0082cd30 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  82cd30:	defff604 	addi	sp,sp,-40
  82cd34:	dd400715 	stw	r21,28(sp)
  82cd38:	dd000615 	stw	r20,24(sp)
  82cd3c:	dd400c17 	ldw	r21,48(sp)
  82cd40:	dd000b17 	ldw	r20,44(sp)
  82cd44:	dc000215 	stw	r16,8(sp)
  82cd48:	dc000a17 	ldw	r16,40(sp)
  82cd4c:	ddc00815 	stw	r23,32(sp)
  82cd50:	302f883a 	mov	r23,r6
  82cd54:	dcc00515 	stw	r19,20(sp)
  82cd58:	dc800415 	stw	r18,16(sp)
  82cd5c:	3827883a 	mov	r19,r7
  82cd60:	2825883a 	mov	r18,r5
  82cd64:	dc400315 	stw	r17,12(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  82cd68:	380d883a 	mov	r6,r7
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  82cd6c:	2023883a 	mov	r17,r4
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  82cd70:	b80f883a 	mov	r7,r23
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  82cd74:	dfc00915 	stw	ra,36(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  82cd78:	dd000015 	stw	r20,0(sp)
  82cd7c:	dd400115 	stw	r21,4(sp)
  82cd80:	082cbc80 	call	82cbc8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  82cd84:	8809883a 	mov	r4,r17
  82cd88:	900b883a 	mov	r5,r18
  82cd8c:	980d883a 	mov	r6,r19
  82cd90:	800f883a 	mov	r7,r16
  82cd94:	dd000015 	stw	r20,0(sp)
  82cd98:	dd400115 	stw	r21,4(sp)
  82cd9c:	082cbc80 	call	82cbc8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  82cda0:	900b883a 	mov	r5,r18
  82cda4:	8809883a 	mov	r4,r17
  82cda8:	b80d883a 	mov	r6,r23
  82cdac:	800f883a 	mov	r7,r16
  82cdb0:	dd000015 	stw	r20,0(sp)
  82cdb4:	dd400115 	stw	r21,4(sp)
  82cdb8:	082ca500 	call	82ca50 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  82cdbc:	8809883a 	mov	r4,r17
  82cdc0:	980b883a 	mov	r5,r19
  82cdc4:	b80d883a 	mov	r6,r23
  82cdc8:	800f883a 	mov	r7,r16
  82cdcc:	dd000a15 	stw	r20,40(sp)
  82cdd0:	dd400b15 	stw	r21,44(sp)
}
  82cdd4:	dfc00917 	ldw	ra,36(sp)
  82cdd8:	ddc00817 	ldw	r23,32(sp)
  82cddc:	dd400717 	ldw	r21,28(sp)
  82cde0:	dd000617 	ldw	r20,24(sp)
  82cde4:	dcc00517 	ldw	r19,20(sp)
  82cde8:	dc800417 	ldw	r18,16(sp)
  82cdec:	dc400317 	ldw	r17,12(sp)
  82cdf0:	dc000217 	ldw	r16,8(sp)
  82cdf4:	dec00a04 	addi	sp,sp,40
void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  82cdf8:	082ca501 	jmpi	82ca50 <alt_up_pixel_buffer_dma_draw_vline>

0082cdfc <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  82cdfc:	d8c00017 	ldw	r3,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
  82ce00:	2811883a 	mov	r8,r5
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  82ce04:	da400117 	ldw	r9,4(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
  82ce08:	380b883a 	mov	r5,r7

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  82ce0c:	22c00f17 	ldw	r11,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  82ce10:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
  82ce14:	1815883a 	mov	r10,r3
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
  82ce18:	3a00022e 	bgeu	r7,r8,82ce24 <alt_up_pixel_buffer_dma_draw_box+0x28>
  82ce1c:	400b883a 	mov	r5,r8
  82ce20:	3811883a 	mov	r8,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
  82ce24:	5180022e 	bgeu	r10,r6,82ce30 <alt_up_pixel_buffer_dma_draw_box+0x34>
  82ce28:	3015883a 	mov	r10,r6
  82ce2c:	180d883a 	mov	r6,r3
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  82ce30:	42c0232e 	bgeu	r8,r11,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
  82ce34:	3080222e 	bgeu	r6,r2,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  82ce38:	2ac00136 	bltu	r5,r11,82ce40 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		r_x = limit_x - 1;
  82ce3c:	597fffc4 	addi	r5,r11,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  82ce40:	50800136 	bltu	r10,r2,82ce48 <alt_up_pixel_buffer_dma_draw_box+0x4c>
	{
		b_y = limit_y - 1;
  82ce44:	12bfffc4 	addi	r10,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  82ce48:	d8c00217 	ldw	r3,8(sp)
  82ce4c:	00800044 	movi	r2,1
  82ce50:	18804e26 	beq	r3,r2,82cf8c <alt_up_pixel_buffer_dma_draw_box+0x190>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  82ce54:	23000b17 	ldw	r12,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  82ce58:	20800d17 	ldw	r2,52(r4)
  82ce5c:	1000191e 	bne	r2,zero,82cec4 <alt_up_pixel_buffer_dma_draw_box+0xc8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  82ce60:	22c01317 	ldw	r11,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82ce64:	21000e17 	ldw	r4,56(r4)
  82ce68:	00c00044 	movi	r3,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  82ce6c:	32c4983a 	sll	r2,r6,r11
  82ce70:	608f883a 	add	r7,r12,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82ce74:	20c01126 	beq	r4,r3,82cebc <alt_up_pixel_buffer_dma_draw_box+0xc0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82ce78:	00800084 	movi	r2,2
  82ce7c:	20805426 	beq	r4,r2,82cfd0 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  82ce80:	51800f36 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
  82ce84:	2a000736 	bltu	r5,r8,82cea4 <alt_up_pixel_buffer_dma_draw_box+0xa8>
  82ce88:	4007883a 	mov	r3,r8
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  82ce8c:	18c5883a 	add	r2,r3,r3
  82ce90:	1085883a 	add	r2,r2,r2
  82ce94:	11c5883a 	add	r2,r2,r7
  82ce98:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82ce9c:	18c00044 	addi	r3,r3,1
  82cea0:	28fffa2e 	bgeu	r5,r3,82ce8c <alt_up_pixel_buffer_dma_draw_box+0x90>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  82cea4:	31800044 	addi	r6,r6,1
  82cea8:	51800536 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  82ceac:	00800044 	movi	r2,1
  82ceb0:	12c4983a 	sll	r2,r2,r11
  82ceb4:	388f883a 	add	r7,r7,r2
  82ceb8:	003ff206 	br	82ce84 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cebc:	51801c2e 	bgeu	r10,r6,82cf30 <alt_up_pixel_buffer_dma_draw_box+0x134>
  82cec0:	f800283a 	ret
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82cec4:	21000e17 	ldw	r4,56(r4)
  82cec8:	00800044 	movi	r2,1
  82cecc:	20802026 	beq	r4,r2,82cf50 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82ced0:	00800084 	movi	r2,2
  82ced4:	20802f26 	beq	r4,r2,82cf94 <alt_up_pixel_buffer_dma_draw_box+0x198>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82ced8:	51bff936 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  82cedc:	5ac5883a 	add	r2,r11,r11
  82cee0:	108f883a 	add	r7,r2,r2
			addr = addr + t_y * limit_x;
  82cee4:	31c7383a 	mul	r3,r6,r7
  82cee8:	60c9883a 	add	r4,r12,r3
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82ceec:	2a000736 	bltu	r5,r8,82cf0c <alt_up_pixel_buffer_dma_draw_box+0x110>
  82cef0:	4007883a 	mov	r3,r8
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  82cef4:	18c5883a 	add	r2,r3,r3
  82cef8:	1085883a 	add	r2,r2,r2
  82cefc:	1105883a 	add	r2,r2,r4
  82cf00:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82cf04:	18c00044 	addi	r3,r3,1
  82cf08:	28fffa2e 	bgeu	r5,r3,82cef4 <alt_up_pixel_buffer_dma_draw_box+0xf8>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cf0c:	31800044 	addi	r6,r6,1
  82cf10:	51bfeb36 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  82cf14:	21c9883a 	add	r4,r4,r7
  82cf18:	003ff406 	br	82ceec <alt_up_pixel_buffer_dma_draw_box+0xf0>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cf1c:	31800044 	addi	r6,r6,1
  82cf20:	51bfe736 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  82cf24:	00800044 	movi	r2,1
  82cf28:	12c4983a 	sll	r2,r2,r11
  82cf2c:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82cf30:	2a3ffa36 	bltu	r5,r8,82cf1c <alt_up_pixel_buffer_dma_draw_box+0x120>
  82cf34:	3a07883a 	add	r3,r7,r8
  82cf38:	4005883a 	mov	r2,r8
				{
					IOWR_8DIRECT(addr, x, local_color);
  82cf3c:	1a400025 	stbio	r9,0(r3)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82cf40:	10800044 	addi	r2,r2,1
  82cf44:	18c00044 	addi	r3,r3,1
  82cf48:	28bffc2e 	bgeu	r5,r2,82cf3c <alt_up_pixel_buffer_dma_draw_box+0x140>
  82cf4c:	003ff306 	br	82cf1c <alt_up_pixel_buffer_dma_draw_box+0x120>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cf50:	51bfdb36 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
  82cf54:	32c5383a 	mul	r2,r6,r11
  82cf58:	6085883a 	add	r2,r12,r2
  82cf5c:	4085883a 	add	r2,r8,r2
			{
				for (x = l_x; x <= r_x; x++)
  82cf60:	2a000636 	bltu	r5,r8,82cf7c <alt_up_pixel_buffer_dma_draw_box+0x180>
  82cf64:	1009883a 	mov	r4,r2
  82cf68:	4007883a 	mov	r3,r8
				{
					IOWR_8DIRECT(addr, x, local_color);
  82cf6c:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82cf70:	18c00044 	addi	r3,r3,1
  82cf74:	21000044 	addi	r4,r4,1
  82cf78:	28fffc2e 	bgeu	r5,r3,82cf6c <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cf7c:	31800044 	addi	r6,r6,1
  82cf80:	12c5883a 	add	r2,r2,r11
  82cf84:	51bff62e 	bgeu	r10,r6,82cf60 <alt_up_pixel_buffer_dma_draw_box+0x164>
  82cf88:	f800283a 	ret
		b_y = limit_y - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  82cf8c:	23000c17 	ldw	r12,48(r4)
  82cf90:	003fb106 	br	82ce58 <alt_up_pixel_buffer_dma_draw_box+0x5c>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cf94:	51bfca36 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
  82cf98:	5acf883a 	add	r7,r11,r11
			addr = addr + t_y * limit_x;
  82cf9c:	31c5383a 	mul	r2,r6,r7
  82cfa0:	6089883a 	add	r4,r12,r2
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82cfa4:	2a000636 	bltu	r5,r8,82cfc0 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
  82cfa8:	4007883a 	mov	r3,r8
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  82cfac:	18c5883a 	add	r2,r3,r3
  82cfb0:	1105883a 	add	r2,r2,r4
  82cfb4:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82cfb8:	18c00044 	addi	r3,r3,1
  82cfbc:	28fffb2e 	bgeu	r5,r3,82cfac <alt_up_pixel_buffer_dma_draw_box+0x1b0>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  82cfc0:	31800044 	addi	r6,r6,1
  82cfc4:	51bfbe36 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  82cfc8:	21c9883a 	add	r4,r4,r7
  82cfcc:	003ff506 	br	82cfa4 <alt_up_pixel_buffer_dma_draw_box+0x1a8>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cfd0:	51bfbb36 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
  82cfd4:	2a000636 	bltu	r5,r8,82cff0 <alt_up_pixel_buffer_dma_draw_box+0x1f4>
  82cfd8:	4007883a 	mov	r3,r8
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  82cfdc:	18c5883a 	add	r2,r3,r3
  82cfe0:	3885883a 	add	r2,r7,r2
  82cfe4:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82cfe8:	18c00044 	addi	r3,r3,1
  82cfec:	28fffb2e 	bgeu	r5,r3,82cfdc <alt_up_pixel_buffer_dma_draw_box+0x1e0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  82cff0:	31800044 	addi	r6,r6,1
  82cff4:	51bfb236 	bltu	r10,r6,82cec0 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  82cff8:	00800044 	movi	r2,1
  82cffc:	12c4983a 	sll	r2,r2,r11
  82d000:	388f883a 	add	r7,r7,r2
  82d004:	003ff306 	br	82cfd4 <alt_up_pixel_buffer_dma_draw_box+0x1d8>

0082d008 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  82d008:	00800044 	movi	r2,1
  82d00c:	28802626 	beq	r5,r2,82d0a8 <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  82d010:	21800b17 	ldw	r6,44(r4)
	limit_x = pixel_buffer->x_resolution;
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82d014:	20c00e17 	ldw	r3,56(r4)
  82d018:	00800084 	movi	r2,2
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
	limit_x = pixel_buffer->x_resolution;
  82d01c:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82d020:	18801f26 	beq	r3,r2,82d0a0 <alt_up_pixel_buffer_dma_clear_screen+0x98>
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
  82d024:	2945883a 	add	r2,r5,r5
  82d028:	108b883a 	add	r5,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  82d02c:	20800d17 	ldw	r2,52(r4)
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
	}	
	limit_y = pixel_buffer->y_resolution;
  82d030:	22001017 	ldw	r8,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  82d034:	1000101e 	bne	r2,zero,82d078 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  82d038:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
  82d03c:	40001726 	beq	r8,zero,82d09c <alt_up_pixel_buffer_dma_clear_screen+0x94>
  82d040:	000f883a 	mov	r7,zero
  82d044:	2812c03a 	cmpne	r9,r5,zero
		{
			for (x = 0; x < limit_x; x = x + 4)
  82d048:	48000526 	beq	r9,zero,82d060 <alt_up_pixel_buffer_dma_clear_screen+0x58>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  82d04c:	0007883a 	mov	r3,zero
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
  82d050:	1985883a 	add	r2,r3,r6
  82d054:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  82d058:	18c00104 	addi	r3,r3,4
  82d05c:	197ffc36 	bltu	r3,r5,82d050 <alt_up_pixel_buffer_dma_clear_screen+0x48>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  82d060:	39c00044 	addi	r7,r7,1
  82d064:	41c00d26 	beq	r8,r7,82d09c <alt_up_pixel_buffer_dma_clear_screen+0x94>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  82d068:	00800044 	movi	r2,1
  82d06c:	1104983a 	sll	r2,r2,r4
  82d070:	308d883a 	add	r6,r6,r2
  82d074:	003ff406 	br	82d048 <alt_up_pixel_buffer_dma_clear_screen+0x40>
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  82d078:	2a09383a 	mul	r4,r5,r8

		for (x = 0; x < limit_y; x = x + 4)
  82d07c:	20000726 	beq	r4,zero,82d09c <alt_up_pixel_buffer_dma_clear_screen+0x94>
  82d080:	0007883a 	mov	r3,zero
  82d084:	0005883a 	mov	r2,zero
		{
			IOWR_32DIRECT(addr, x, 0);
  82d088:	1185883a 	add	r2,r2,r6
  82d08c:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  82d090:	18800104 	addi	r2,r3,4
  82d094:	1007883a 	mov	r3,r2
  82d098:	113ffb36 	bltu	r2,r4,82d088 <alt_up_pixel_buffer_dma_clear_screen+0x80>
  82d09c:	f800283a 	ret
	else
		addr = pixel_buffer->buffer_start_address;
	limit_x = pixel_buffer->x_resolution;
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
  82d0a0:	294b883a 	add	r5,r5,r5
  82d0a4:	003fe106 	br	82d02c <alt_up_pixel_buffer_dma_clear_screen+0x24>
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  82d0a8:	21800c17 	ldw	r6,48(r4)
  82d0ac:	003fd906 	br	82d014 <alt_up_pixel_buffer_dma_clear_screen+0xc>

0082d0b0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  82d0b0:	21800c17 	ldw	r6,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  82d0b4:	20c00a17 	ldw	r3,40(r4)
  82d0b8:	00800044 	movi	r2,1
  82d0bc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  82d0c0:	21400b17 	ldw	r5,44(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
  82d0c4:	0005883a 	mov	r2,zero
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
	pixel_buffer->buffer_start_address = temp;
  82d0c8:	21800b15 	stw	r6,44(r4)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  82d0cc:	21400c15 	stw	r5,48(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
  82d0d0:	f800283a 	ret

0082d0d4 <alt_up_pixel_buffer_dma_draw>:
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  82d0d4:	22400f17 	ldw	r9,60(r4)
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  82d0d8:	2011883a 	mov	r8,r4
  82d0dc:	2815883a 	mov	r10,r5
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  82d0e0:	32400236 	bltu	r6,r9,82d0ec <alt_up_pixel_buffer_dma_draw+0x18>
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  82d0e4:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
  82d0e8:	f800283a 	ret
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  82d0ec:	20801017 	ldw	r2,64(r4)
  82d0f0:	38bffc2e 	bgeu	r7,r2,82d0e4 <alt_up_pixel_buffer_dma_draw+0x10>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  82d0f4:	20800d17 	ldw	r2,52(r4)
  82d0f8:	1000131e 	bne	r2,zero,82d148 <alt_up_pixel_buffer_dma_draw+0x74>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  82d0fc:	20c01217 	ldw	r3,72(r4)
  82d100:	20801417 	ldw	r2,80(r4)
  82d104:	41401317 	ldw	r5,76(r8)
  82d108:	21001117 	ldw	r4,68(r4)
  82d10c:	30c6703a 	and	r3,r6,r3
  82d110:	3884703a 	and	r2,r7,r2
  82d114:	1906983a 	sll	r3,r3,r4
  82d118:	1144983a 	sll	r2,r2,r5
  82d11c:	1886b03a 	or	r3,r3,r2
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  82d120:	41000e17 	ldw	r4,56(r8)
  82d124:	00800044 	movi	r2,1
  82d128:	20801526 	beq	r4,r2,82d180 <alt_up_pixel_buffer_dma_draw+0xac>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82d12c:	00800084 	movi	r2,2
  82d130:	20800e26 	beq	r4,r2,82d16c <alt_up_pixel_buffer_dma_draw+0x98>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  82d134:	40800c17 	ldw	r2,48(r8)
  82d138:	1885883a 	add	r2,r3,r2
  82d13c:	12800035 	stwio	r10,0(r2)
  82d140:	0005883a 	mov	r2,zero
  82d144:	f800283a 	ret
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  82d148:	20801417 	ldw	r2,80(r4)
  82d14c:	20c01217 	ldw	r3,72(r4)
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  82d150:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  82d154:	3884703a 	and	r2,r7,r2
  82d158:	4885383a 	mul	r2,r9,r2
  82d15c:	30c6703a 	and	r3,r6,r3
  82d160:	10c5883a 	add	r2,r2,r3
  82d164:	1106983a 	sll	r3,r2,r4
  82d168:	003fed06 	br	82d120 <alt_up_pixel_buffer_dma_draw+0x4c>
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  82d16c:	40800c17 	ldw	r2,48(r8)
  82d170:	1885883a 	add	r2,r3,r2
  82d174:	1280002d 	sthio	r10,0(r2)
  82d178:	0005883a 	mov	r2,zero
  82d17c:	f800283a 	ret
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  82d180:	40800c17 	ldw	r2,48(r8)
  82d184:	1885883a 	add	r2,r3,r2
  82d188:	12800025 	stbio	r10,0(r2)
  82d18c:	0005883a 	mov	r2,zero
  82d190:	f800283a 	ret

0082d194 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  82d194:	20c00a17 	ldw	r3,40(r4)
  82d198:	18800337 	ldwio	r2,12(r3)
}
  82d19c:	1080004c 	andi	r2,r2,1
  82d1a0:	f800283a 	ret

0082d1a4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  82d1a4:	20c00a17 	ldw	r3,40(r4)
  82d1a8:	01800104 	movi	r6,4
  82d1ac:	1987883a 	add	r3,r3,r6
  82d1b0:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  82d1b4:	20800a17 	ldw	r2,40(r4)
  82d1b8:	1185883a 	add	r2,r2,r6
  82d1bc:	10c00037 	ldwio	r3,0(r2)
	return 0;
}
  82d1c0:	0005883a 	mov	r2,zero

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  82d1c4:	20c00c15 	stw	r3,48(r4)
	return 0;
}
  82d1c8:	f800283a 	ret

0082d1cc <alt_up_pixel_buffer_dma_open_dev>:
alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  82d1cc:	01402134 	movhi	r5,132
  82d1d0:	2942ea04 	addi	r5,r5,2984
  82d1d4:	08328641 	jmpi	832864 <alt_find_dev>

0082d1d8 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  82d1d8:	defffe04 	addi	sp,sp,-8
  82d1dc:	dac00217 	ldw	r11,8(sp)
  82d1e0:	dc000015 	stw	r16,0(sp)
  82d1e4:	dc400115 	stw	r17,4(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  82d1e8:	5987c83a 	sub	r3,r11,r6
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  82d1ec:	3013883a 	mov	r9,r6
  82d1f0:	dc000317 	ldw	r16,12(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  82d1f4:	18009116 	blt	r3,zero,82d43c <alt_up_pixel_buffer_dma_draw_line+0x264>
  82d1f8:	3945c83a 	sub	r2,r7,r5
  82d1fc:	10008d16 	blt	r2,zero,82d434 <alt_up_pixel_buffer_dma_draw_line+0x25c>
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  82d200:	22000e17 	ldw	r8,56(r4)
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  82d204:	10c4803a 	cmplt	r2,r2,r3
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  82d208:	00c00044 	movi	r3,1
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  82d20c:	100d883a 	mov	r6,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  82d210:	40c08426 	beq	r8,r3,82d424 <alt_up_pixel_buffer_dma_draw_line+0x24c>
  82d214:	43c00098 	cmpnei	r15,r8,2
  82d218:	78df883a 	add	r15,r15,r3
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  82d21c:	20800d17 	ldw	r2,52(r4)
  82d220:	1000571e 	bne	r2,zero,82d380 <alt_up_pixel_buffer_dma_draw_line+0x1a8>
  82d224:	20801317 	ldw	r2,76(r4)
  82d228:	00c00044 	movi	r3,1
  82d22c:	13c5c83a 	sub	r2,r2,r15
  82d230:	189a983a 	sll	r13,r3,r2

	if (backbuffer == 1)
  82d234:	d8c00417 	ldw	r3,16(sp)
  82d238:	00800044 	movi	r2,1
  82d23c:	18805426 	beq	r3,r2,82d390 <alt_up_pixel_buffer_dma_draw_line+0x1b8>
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  82d240:	34403fcc 	andi	r17,r6,255
  82d244:	8c40201c 	xori	r17,r17,128
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;
  82d248:	21000b17 	ldw	r4,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
  82d24c:	8c7fe004 	addi	r17,r17,-128
  82d250:	30005426 	beq	r6,zero,82d3a4 <alt_up_pixel_buffer_dma_draw_line+0x1cc>
  82d254:	480d883a 	mov	r6,r9
  82d258:	5815883a 	mov	r10,r11
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
  82d25c:	5180060e 	bge	r10,r6,82d278 <alt_up_pixel_buffer_dma_draw_line+0xa0>
  82d260:	5005883a 	mov	r2,r10
  82d264:	3807883a 	mov	r3,r7
  82d268:	3015883a 	mov	r10,r6
  82d26c:	280f883a 	mov	r7,r5
  82d270:	100d883a 	mov	r6,r2
  82d274:	180b883a 	mov	r5,r3
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
  82d278:	3957c83a 	sub	r11,r7,r5
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  82d27c:	5199c83a 	sub	r12,r10,r6
	deltay = ABS(y_1 - y_0);
  82d280:	58006a16 	blt	r11,zero,82d42c <alt_up_pixel_buffer_dma_draw_line+0x254>
	error = -(deltax / 2); 
  82d284:	6004d7fa 	srli	r2,r12,31
  82d288:	1305883a 	add	r2,r2,r12
  82d28c:	1005d07a 	srai	r2,r2,1
  82d290:	0091c83a 	sub	r8,zero,r2
	y = y_0;
	if (y_0 < y_1)
  82d294:	29c02416 	blt	r5,r7,82d328 <alt_up_pixel_buffer_dma_draw_line+0x150>
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  82d298:	00800044 	movi	r2,1
	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
  82d29c:	03bfffc4 	movi	r14,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  82d2a0:	88802426 	beq	r17,r2,82d334 <alt_up_pixel_buffer_dma_draw_line+0x15c>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d2a4:	51801016 	blt	r10,r6,82d2e8 <alt_up_pixel_buffer_dma_draw_line+0x110>

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  82d2a8:	300f883a 	mov	r7,r6
  82d2ac:	2807883a 	mov	r3,r5
  82d2b0:	78001226 	beq	r15,zero,82d2fc <alt_up_pixel_buffer_dma_draw_line+0x124>
  82d2b4:	78804126 	beq	r15,r2,82d3bc <alt_up_pixel_buffer_dma_draw_line+0x1e4>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  82d2b8:	68c5383a 	mul	r2,r13,r3
  82d2bc:	11c5883a 	add	r2,r2,r7
  82d2c0:	1085883a 	add	r2,r2,r2
  82d2c4:	1085883a 	add	r2,r2,r2
  82d2c8:	1105883a 	add	r2,r2,r4
  82d2cc:	14000035 	stwio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  82d2d0:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d2d4:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  82d2d8:	0200020e 	bge	zero,r8,82d2e4 <alt_up_pixel_buffer_dma_draw_line+0x10c>
				y = y + ystep;
  82d2dc:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  82d2e0:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d2e4:	51fff40e 	bge	r10,r7,82d2b8 <alt_up_pixel_buffer_dma_draw_line+0xe0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  82d2e8:	dc400117 	ldw	r17,4(sp)
  82d2ec:	dc000017 	ldw	r16,0(sp)
  82d2f0:	dec00204 	addi	sp,sp,8
  82d2f4:	f800283a 	ret
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d2f8:	51fffb16 	blt	r10,r7,82d2e8 <alt_up_pixel_buffer_dma_draw_line+0x110>
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  82d2fc:	68c5383a 	mul	r2,r13,r3
  82d300:	11c5883a 	add	r2,r2,r7
  82d304:	1105883a 	add	r2,r2,r4
  82d308:	14000025 	stbio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  82d30c:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d310:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  82d314:	023ff80e 	bge	zero,r8,82d2f8 <alt_up_pixel_buffer_dma_draw_line+0x120>
				y = y + ystep;
  82d318:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  82d31c:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d320:	51fff60e 	bge	r10,r7,82d2fc <alt_up_pixel_buffer_dma_draw_line+0x124>
  82d324:	003ff006 	br	82d2e8 <alt_up_pixel_buffer_dma_draw_line+0x110>
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  82d328:	00800044 	movi	r2,1
	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
  82d32c:	03800044 	movi	r14,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  82d330:	88bfdc1e 	bne	r17,r2,82d2a4 <alt_up_pixel_buffer_dma_draw_line+0xcc>
	{
		for (x=x_0; x <= x_1; x++) {
  82d334:	51bfec16 	blt	r10,r6,82d2e8 <alt_up_pixel_buffer_dma_draw_line+0x110>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d338:	3013883a 	mov	r9,r6
  82d33c:	2807883a 	mov	r3,r5
  82d340:	334f383a 	mul	r7,r6,r13
  82d344:	78002926 	beq	r15,zero,82d3ec <alt_up_pixel_buffer_dma_draw_line+0x214>
  82d348:	7c403e26 	beq	r15,r17,82d444 <alt_up_pixel_buffer_dma_draw_line+0x26c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  82d34c:	38c5883a 	add	r2,r7,r3
  82d350:	1085883a 	add	r2,r2,r2
  82d354:	1085883a 	add	r2,r2,r2
  82d358:	1105883a 	add	r2,r2,r4
  82d35c:	14000035 	stwio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  82d360:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  82d364:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  82d368:	0200020e 	bge	zero,r8,82d374 <alt_up_pixel_buffer_dma_draw_line+0x19c>
				y = y + ystep;
  82d36c:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  82d370:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  82d374:	3b4f883a 	add	r7,r7,r13
  82d378:	527ff40e 	bge	r10,r9,82d34c <alt_up_pixel_buffer_dma_draw_line+0x174>
  82d37c:	003fda06 	br	82d2e8 <alt_up_pixel_buffer_dma_draw_line+0x110>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
  82d380:	d8c00417 	ldw	r3,16(sp)
  82d384:	00800044 	movi	r2,1
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  82d388:	23400f17 	ldw	r13,60(r4)

	if (backbuffer == 1)
  82d38c:	18bfac1e 	bne	r3,r2,82d240 <alt_up_pixel_buffer_dma_draw_line+0x68>
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  82d390:	34403fcc 	andi	r17,r6,255
  82d394:	8c40201c 	xori	r17,r17,128
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
		buffer_start = pixel_buffer->back_buffer_start_address;
  82d398:	21000c17 	ldw	r4,48(r4)
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  82d39c:	8c7fe004 	addi	r17,r17,-128
  82d3a0:	303fac1e 	bne	r6,zero,82d254 <alt_up_pixel_buffer_dma_draw_line+0x7c>
  82d3a4:	280d883a 	mov	r6,r5
  82d3a8:	3815883a 	mov	r10,r7
  82d3ac:	480b883a 	mov	r5,r9
  82d3b0:	580f883a 	mov	r7,r11
  82d3b4:	003fa906 	br	82d25c <alt_up_pixel_buffer_dma_draw_line+0x84>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d3b8:	51ffcb16 	blt	r10,r7,82d2e8 <alt_up_pixel_buffer_dma_draw_line+0x110>
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  82d3bc:	68c5383a 	mul	r2,r13,r3
  82d3c0:	11c5883a 	add	r2,r2,r7
  82d3c4:	1085883a 	add	r2,r2,r2
  82d3c8:	1105883a 	add	r2,r2,r4
  82d3cc:	1400002d 	sthio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  82d3d0:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d3d4:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  82d3d8:	023ff70e 	bge	zero,r8,82d3b8 <alt_up_pixel_buffer_dma_draw_line+0x1e0>
				y = y + ystep;
  82d3dc:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  82d3e0:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  82d3e4:	51fff50e 	bge	r10,r7,82d3bc <alt_up_pixel_buffer_dma_draw_line+0x1e4>
  82d3e8:	003fbf06 	br	82d2e8 <alt_up_pixel_buffer_dma_draw_line+0x110>
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  82d3ec:	38c5883a 	add	r2,r7,r3
  82d3f0:	1105883a 	add	r2,r2,r4
  82d3f4:	14000025 	stbio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  82d3f8:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  82d3fc:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  82d400:	0200020e 	bge	zero,r8,82d40c <alt_up_pixel_buffer_dma_draw_line+0x234>
				y = y + ystep;
  82d404:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  82d408:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  82d40c:	3b4f883a 	add	r7,r7,r13
  82d410:	527ff60e 	bge	r10,r9,82d3ec <alt_up_pixel_buffer_dma_draw_line+0x214>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  82d414:	dc400117 	ldw	r17,4(sp)
  82d418:	dc000017 	ldw	r16,0(sp)
  82d41c:	dec00204 	addi	sp,sp,8
  82d420:	f800283a 	ret
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  82d424:	001f883a 	mov	r15,zero
  82d428:	003f7c06 	br	82d21c <alt_up_pixel_buffer_dma_draw_line+0x44>
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
  82d42c:	02d7c83a 	sub	r11,zero,r11
  82d430:	003f9406 	br	82d284 <alt_up_pixel_buffer_dma_draw_line+0xac>
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  82d434:	0085c83a 	sub	r2,zero,r2
  82d438:	003f7106 	br	82d200 <alt_up_pixel_buffer_dma_draw_line+0x28>
  82d43c:	00c7c83a 	sub	r3,zero,r3
  82d440:	003f6d06 	br	82d1f8 <alt_up_pixel_buffer_dma_draw_line+0x20>
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  82d444:	38c5883a 	add	r2,r7,r3
  82d448:	1085883a 	add	r2,r2,r2
  82d44c:	1105883a 	add	r2,r2,r4
  82d450:	1400002d 	sthio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  82d454:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  82d458:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  82d45c:	0200020e 	bge	zero,r8,82d468 <alt_up_pixel_buffer_dma_draw_line+0x290>
				y = y + ystep;
  82d460:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  82d464:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  82d468:	3b4f883a 	add	r7,r7,r13
  82d46c:	527ff50e 	bge	r10,r9,82d444 <alt_up_pixel_buffer_dma_draw_line+0x26c>
  82d470:	003f9d06 	br	82d2e8 <alt_up_pixel_buffer_dma_draw_line+0x110>

0082d474 <match_file_record_to_name_ext>:
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  82d474:	21c00003 	ldbu	r7,0(r4)
  82d478:	00c00644 	movi	r3,25
  82d47c:	38bfe7c4 	addi	r2,r7,-97
  82d480:	10803fcc 	andi	r2,r2,255
  82d484:	1880c12e 	bgeu	r3,r2,82d78c <match_file_record_to_name_ext+0x318>
  82d488:	3a003fcc 	andi	r8,r7,255
  82d48c:	4200201c 	xori	r8,r8,128
  82d490:	423fe004 	addi	r8,r8,-128
  82d494:	29c00003 	ldbu	r7,0(r5)
  82d498:	00c00644 	movi	r3,25
  82d49c:	38bfe7c4 	addi	r2,r7,-97
  82d4a0:	10803fcc 	andi	r2,r2,255
  82d4a4:	1880b42e 	bgeu	r3,r2,82d778 <match_file_record_to_name_ext+0x304>
  82d4a8:	38803fcc 	andi	r2,r7,255
  82d4ac:	1080201c 	xori	r2,r2,128
  82d4b0:	10bfe004 	addi	r2,r2,-128
  82d4b4:	40811e1e 	bne	r8,r2,82d930 <match_file_record_to_name_ext+0x4bc>
  82d4b8:	21c00043 	ldbu	r7,1(r4)
  82d4bc:	00c00644 	movi	r3,25
  82d4c0:	38bfe7c4 	addi	r2,r7,-97
  82d4c4:	10803fcc 	andi	r2,r2,255
  82d4c8:	1880b52e 	bgeu	r3,r2,82d7a0 <match_file_record_to_name_ext+0x32c>
  82d4cc:	3a003fcc 	andi	r8,r7,255
  82d4d0:	29c00043 	ldbu	r7,1(r5)
  82d4d4:	4200201c 	xori	r8,r8,128
  82d4d8:	00c00644 	movi	r3,25
  82d4dc:	38bfe7c4 	addi	r2,r7,-97
  82d4e0:	10803fcc 	andi	r2,r2,255
  82d4e4:	423fe004 	addi	r8,r8,-128
  82d4e8:	1880b62e 	bgeu	r3,r2,82d7c4 <match_file_record_to_name_ext+0x350>
  82d4ec:	38803fcc 	andi	r2,r7,255
  82d4f0:	1080201c 	xori	r2,r2,128
  82d4f4:	10bfe004 	addi	r2,r2,-128
  82d4f8:	40810d1e 	bne	r8,r2,82d930 <match_file_record_to_name_ext+0x4bc>
  82d4fc:	21c00083 	ldbu	r7,2(r4)
  82d500:	00c00644 	movi	r3,25
  82d504:	38bfe7c4 	addi	r2,r7,-97
  82d508:	10803fcc 	andi	r2,r2,255
  82d50c:	1880cb2e 	bgeu	r3,r2,82d83c <match_file_record_to_name_ext+0x3c8>
  82d510:	3a003fcc 	andi	r8,r7,255
  82d514:	4200201c 	xori	r8,r8,128
  82d518:	423fe004 	addi	r8,r8,-128
  82d51c:	29c00083 	ldbu	r7,2(r5)
  82d520:	00c00644 	movi	r3,25
  82d524:	38bfe7c4 	addi	r2,r7,-97
  82d528:	10803fcc 	andi	r2,r2,255
  82d52c:	1880be2e 	bgeu	r3,r2,82d828 <match_file_record_to_name_ext+0x3b4>
  82d530:	38803fcc 	andi	r2,r7,255
  82d534:	1080201c 	xori	r2,r2,128
  82d538:	10bfe004 	addi	r2,r2,-128
  82d53c:	4080fc1e 	bne	r8,r2,82d930 <match_file_record_to_name_ext+0x4bc>
  82d540:	21c000c3 	ldbu	r7,3(r4)
  82d544:	00c00644 	movi	r3,25
  82d548:	38bfe7c4 	addi	r2,r7,-97
  82d54c:	10803fcc 	andi	r2,r2,255
  82d550:	1880cc2e 	bgeu	r3,r2,82d884 <match_file_record_to_name_ext+0x410>
  82d554:	3a003fcc 	andi	r8,r7,255
  82d558:	4200201c 	xori	r8,r8,128
  82d55c:	423fe004 	addi	r8,r8,-128
  82d560:	29c000c3 	ldbu	r7,3(r5)
  82d564:	00c00644 	movi	r3,25
  82d568:	38bfe7c4 	addi	r2,r7,-97
  82d56c:	10803fcc 	andi	r2,r2,255
  82d570:	1880bf2e 	bgeu	r3,r2,82d870 <match_file_record_to_name_ext+0x3fc>
  82d574:	38803fcc 	andi	r2,r7,255
  82d578:	1080201c 	xori	r2,r2,128
  82d57c:	10bfe004 	addi	r2,r2,-128
  82d580:	4080eb1e 	bne	r8,r2,82d930 <match_file_record_to_name_ext+0x4bc>
  82d584:	21c00103 	ldbu	r7,4(r4)
  82d588:	00c00644 	movi	r3,25
  82d58c:	38bfe7c4 	addi	r2,r7,-97
  82d590:	10803fcc 	andi	r2,r2,255
  82d594:	1880c52e 	bgeu	r3,r2,82d8ac <match_file_record_to_name_ext+0x438>
  82d598:	3a003fcc 	andi	r8,r7,255
  82d59c:	4200201c 	xori	r8,r8,128
  82d5a0:	423fe004 	addi	r8,r8,-128
  82d5a4:	29c00103 	ldbu	r7,4(r5)
  82d5a8:	00c00644 	movi	r3,25
  82d5ac:	38bfe7c4 	addi	r2,r7,-97
  82d5b0:	10803fcc 	andi	r2,r2,255
  82d5b4:	1880b82e 	bgeu	r3,r2,82d898 <match_file_record_to_name_ext+0x424>
  82d5b8:	38803fcc 	andi	r2,r7,255
  82d5bc:	1080201c 	xori	r2,r2,128
  82d5c0:	10bfe004 	addi	r2,r2,-128
  82d5c4:	4080da1e 	bne	r8,r2,82d930 <match_file_record_to_name_ext+0x4bc>
  82d5c8:	21c00143 	ldbu	r7,5(r4)
  82d5cc:	00c00644 	movi	r3,25
  82d5d0:	38bfe7c4 	addi	r2,r7,-97
  82d5d4:	10803fcc 	andi	r2,r2,255
  82d5d8:	1880be2e 	bgeu	r3,r2,82d8d4 <match_file_record_to_name_ext+0x460>
  82d5dc:	3a003fcc 	andi	r8,r7,255
  82d5e0:	4200201c 	xori	r8,r8,128
  82d5e4:	423fe004 	addi	r8,r8,-128
  82d5e8:	29c00143 	ldbu	r7,5(r5)
  82d5ec:	00c00644 	movi	r3,25
  82d5f0:	38bfe7c4 	addi	r2,r7,-97
  82d5f4:	10803fcc 	andi	r2,r2,255
  82d5f8:	1880b12e 	bgeu	r3,r2,82d8c0 <match_file_record_to_name_ext+0x44c>
  82d5fc:	38803fcc 	andi	r2,r7,255
  82d600:	1080201c 	xori	r2,r2,128
  82d604:	10bfe004 	addi	r2,r2,-128
  82d608:	4080c91e 	bne	r8,r2,82d930 <match_file_record_to_name_ext+0x4bc>
  82d60c:	21c00183 	ldbu	r7,6(r4)
  82d610:	00c00644 	movi	r3,25
  82d614:	38bfe7c4 	addi	r2,r7,-97
  82d618:	10803fcc 	andi	r2,r2,255
  82d61c:	1880b72e 	bgeu	r3,r2,82d8fc <match_file_record_to_name_ext+0x488>
  82d620:	3a003fcc 	andi	r8,r7,255
  82d624:	4200201c 	xori	r8,r8,128
  82d628:	423fe004 	addi	r8,r8,-128
  82d62c:	29c00183 	ldbu	r7,6(r5)
  82d630:	00c00644 	movi	r3,25
  82d634:	38bfe7c4 	addi	r2,r7,-97
  82d638:	10803fcc 	andi	r2,r2,255
  82d63c:	1880aa2e 	bgeu	r3,r2,82d8e8 <match_file_record_to_name_ext+0x474>
  82d640:	38803fcc 	andi	r2,r7,255
  82d644:	1080201c 	xori	r2,r2,128
  82d648:	10bfe004 	addi	r2,r2,-128
  82d64c:	4080b81e 	bne	r8,r2,82d930 <match_file_record_to_name_ext+0x4bc>
  82d650:	21c001c3 	ldbu	r7,7(r4)
  82d654:	00c00644 	movi	r3,25
  82d658:	38bfe7c4 	addi	r2,r7,-97
  82d65c:	10803fcc 	andi	r2,r2,255
  82d660:	1880af36 	bltu	r3,r2,82d920 <match_file_record_to_name_ext+0x4ac>
  82d664:	38bff804 	addi	r2,r7,-32
  82d668:	11c03fcc 	andi	r7,r2,255
  82d66c:	39c0201c 	xori	r7,r7,128
  82d670:	39ffe004 	addi	r7,r7,-128
  82d674:	294001c3 	ldbu	r5,7(r5)
  82d678:	00c00644 	movi	r3,25
  82d67c:	28bfe7c4 	addi	r2,r5,-97
  82d680:	10803fcc 	andi	r2,r2,255
  82d684:	1880a236 	bltu	r3,r2,82d910 <match_file_record_to_name_ext+0x49c>
  82d688:	28bff804 	addi	r2,r5,-32
  82d68c:	10803fcc 	andi	r2,r2,255
  82d690:	1080201c 	xori	r2,r2,128
  82d694:	10bfe004 	addi	r2,r2,-128
  82d698:	3891003a 	cmpeq	r8,r7,r2
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  82d69c:	21400203 	ldbu	r5,8(r4)
  82d6a0:	00c00644 	movi	r3,25
  82d6a4:	28bfe7c4 	addi	r2,r5,-97
  82d6a8:	10803fcc 	andi	r2,r2,255
  82d6ac:	18804f2e 	bgeu	r3,r2,82d7ec <match_file_record_to_name_ext+0x378>
  82d6b0:	29c03fcc 	andi	r7,r5,255
  82d6b4:	39c0201c 	xori	r7,r7,128
  82d6b8:	39ffe004 	addi	r7,r7,-128
  82d6bc:	31400003 	ldbu	r5,0(r6)
  82d6c0:	00c00644 	movi	r3,25
  82d6c4:	28bfe7c4 	addi	r2,r5,-97
  82d6c8:	10803fcc 	andi	r2,r2,255
  82d6cc:	1880422e 	bgeu	r3,r2,82d7d8 <match_file_record_to_name_ext+0x364>
  82d6d0:	28803fcc 	andi	r2,r5,255
  82d6d4:	1080201c 	xori	r2,r2,128
  82d6d8:	10bfe004 	addi	r2,r2,-128
  82d6dc:	3880961e 	bne	r7,r2,82d938 <match_file_record_to_name_ext+0x4c4>
  82d6e0:	21400243 	ldbu	r5,9(r4)
  82d6e4:	00c00644 	movi	r3,25
  82d6e8:	28bfe7c4 	addi	r2,r5,-97
  82d6ec:	10803fcc 	andi	r2,r2,255
  82d6f0:	1880482e 	bgeu	r3,r2,82d814 <match_file_record_to_name_ext+0x3a0>
  82d6f4:	29c03fcc 	andi	r7,r5,255
  82d6f8:	39c0201c 	xori	r7,r7,128
  82d6fc:	39ffe004 	addi	r7,r7,-128
  82d700:	31400043 	ldbu	r5,1(r6)
  82d704:	00c00644 	movi	r3,25
  82d708:	28bfe7c4 	addi	r2,r5,-97
  82d70c:	10803fcc 	andi	r2,r2,255
  82d710:	18803b2e 	bgeu	r3,r2,82d800 <match_file_record_to_name_ext+0x38c>
  82d714:	28803fcc 	andi	r2,r5,255
  82d718:	1080201c 	xori	r2,r2,128
  82d71c:	10bfe004 	addi	r2,r2,-128
  82d720:	3880851e 	bne	r7,r2,82d938 <match_file_record_to_name_ext+0x4c4>
  82d724:	21000283 	ldbu	r4,10(r4)
  82d728:	00c00644 	movi	r3,25
  82d72c:	20bfe7c4 	addi	r2,r4,-97
  82d730:	10803fcc 	andi	r2,r2,255
  82d734:	18804a36 	bltu	r3,r2,82d860 <match_file_record_to_name_ext+0x3ec>
  82d738:	20bff804 	addi	r2,r4,-32
  82d73c:	11003fcc 	andi	r4,r2,255
  82d740:	2100201c 	xori	r4,r4,128
  82d744:	213fe004 	addi	r4,r4,-128
  82d748:	31800083 	ldbu	r6,2(r6)
  82d74c:	00c00644 	movi	r3,25
  82d750:	30bfe7c4 	addi	r2,r6,-97
  82d754:	10803fcc 	andi	r2,r2,255
  82d758:	18803d36 	bltu	r3,r2,82d850 <match_file_record_to_name_ext+0x3dc>
  82d75c:	30bff804 	addi	r2,r6,-32
  82d760:	10803fcc 	andi	r2,r2,255
  82d764:	1080201c 	xori	r2,r2,128
  82d768:	10bfe004 	addi	r2,r2,-128
  82d76c:	2080721e 	bne	r4,r2,82d938 <match_file_record_to_name_ext+0x4c4>
			match = false;
			break;
		}
	}
	return match;
}
  82d770:	4005883a 	mov	r2,r8
  82d774:	f800283a 	ret
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  82d778:	38bff804 	addi	r2,r7,-32
  82d77c:	10803fcc 	andi	r2,r2,255
  82d780:	1080201c 	xori	r2,r2,128
  82d784:	10bfe004 	addi	r2,r2,-128
  82d788:	003f4a06 	br	82d4b4 <match_file_record_to_name_ext+0x40>
  82d78c:	38bff804 	addi	r2,r7,-32
  82d790:	12003fcc 	andi	r8,r2,255
  82d794:	4200201c 	xori	r8,r8,128
  82d798:	423fe004 	addi	r8,r8,-128
  82d79c:	003f3d06 	br	82d494 <match_file_record_to_name_ext+0x20>
  82d7a0:	38bff804 	addi	r2,r7,-32
  82d7a4:	29c00043 	ldbu	r7,1(r5)
  82d7a8:	12003fcc 	andi	r8,r2,255
  82d7ac:	4200201c 	xori	r8,r8,128
  82d7b0:	38bfe7c4 	addi	r2,r7,-97
  82d7b4:	10803fcc 	andi	r2,r2,255
  82d7b8:	00c00644 	movi	r3,25
  82d7bc:	423fe004 	addi	r8,r8,-128
  82d7c0:	18bf4a36 	bltu	r3,r2,82d4ec <match_file_record_to_name_ext+0x78>
  82d7c4:	38bff804 	addi	r2,r7,-32
  82d7c8:	10803fcc 	andi	r2,r2,255
  82d7cc:	1080201c 	xori	r2,r2,128
  82d7d0:	10bfe004 	addi	r2,r2,-128
  82d7d4:	003f4806 	br	82d4f8 <match_file_record_to_name_ext+0x84>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  82d7d8:	28bff804 	addi	r2,r5,-32
  82d7dc:	10803fcc 	andi	r2,r2,255
  82d7e0:	1080201c 	xori	r2,r2,128
  82d7e4:	10bfe004 	addi	r2,r2,-128
  82d7e8:	003fbc06 	br	82d6dc <match_file_record_to_name_ext+0x268>
  82d7ec:	28bff804 	addi	r2,r5,-32
  82d7f0:	11c03fcc 	andi	r7,r2,255
  82d7f4:	39c0201c 	xori	r7,r7,128
  82d7f8:	39ffe004 	addi	r7,r7,-128
  82d7fc:	003faf06 	br	82d6bc <match_file_record_to_name_ext+0x248>
  82d800:	28bff804 	addi	r2,r5,-32
  82d804:	10803fcc 	andi	r2,r2,255
  82d808:	1080201c 	xori	r2,r2,128
  82d80c:	10bfe004 	addi	r2,r2,-128
  82d810:	003fc306 	br	82d720 <match_file_record_to_name_ext+0x2ac>
  82d814:	28bff804 	addi	r2,r5,-32
  82d818:	11c03fcc 	andi	r7,r2,255
  82d81c:	39c0201c 	xori	r7,r7,128
  82d820:	39ffe004 	addi	r7,r7,-128
  82d824:	003fb606 	br	82d700 <match_file_record_to_name_ext+0x28c>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  82d828:	38bff804 	addi	r2,r7,-32
  82d82c:	10803fcc 	andi	r2,r2,255
  82d830:	1080201c 	xori	r2,r2,128
  82d834:	10bfe004 	addi	r2,r2,-128
  82d838:	003f4006 	br	82d53c <match_file_record_to_name_ext+0xc8>
  82d83c:	38bff804 	addi	r2,r7,-32
  82d840:	12003fcc 	andi	r8,r2,255
  82d844:	4200201c 	xori	r8,r8,128
  82d848:	423fe004 	addi	r8,r8,-128
  82d84c:	003f3306 	br	82d51c <match_file_record_to_name_ext+0xa8>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  82d850:	30803fcc 	andi	r2,r6,255
  82d854:	1080201c 	xori	r2,r2,128
  82d858:	10bfe004 	addi	r2,r2,-128
  82d85c:	003fc306 	br	82d76c <match_file_record_to_name_ext+0x2f8>
  82d860:	21003fcc 	andi	r4,r4,255
  82d864:	2100201c 	xori	r4,r4,128
  82d868:	213fe004 	addi	r4,r4,-128
  82d86c:	003fb606 	br	82d748 <match_file_record_to_name_ext+0x2d4>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  82d870:	38bff804 	addi	r2,r7,-32
  82d874:	10803fcc 	andi	r2,r2,255
  82d878:	1080201c 	xori	r2,r2,128
  82d87c:	10bfe004 	addi	r2,r2,-128
  82d880:	003f3f06 	br	82d580 <match_file_record_to_name_ext+0x10c>
  82d884:	38bff804 	addi	r2,r7,-32
  82d888:	12003fcc 	andi	r8,r2,255
  82d88c:	4200201c 	xori	r8,r8,128
  82d890:	423fe004 	addi	r8,r8,-128
  82d894:	003f3206 	br	82d560 <match_file_record_to_name_ext+0xec>
  82d898:	38bff804 	addi	r2,r7,-32
  82d89c:	10803fcc 	andi	r2,r2,255
  82d8a0:	1080201c 	xori	r2,r2,128
  82d8a4:	10bfe004 	addi	r2,r2,-128
  82d8a8:	003f4606 	br	82d5c4 <match_file_record_to_name_ext+0x150>
  82d8ac:	38bff804 	addi	r2,r7,-32
  82d8b0:	12003fcc 	andi	r8,r2,255
  82d8b4:	4200201c 	xori	r8,r8,128
  82d8b8:	423fe004 	addi	r8,r8,-128
  82d8bc:	003f3906 	br	82d5a4 <match_file_record_to_name_ext+0x130>
  82d8c0:	38bff804 	addi	r2,r7,-32
  82d8c4:	10803fcc 	andi	r2,r2,255
  82d8c8:	1080201c 	xori	r2,r2,128
  82d8cc:	10bfe004 	addi	r2,r2,-128
  82d8d0:	003f4d06 	br	82d608 <match_file_record_to_name_ext+0x194>
  82d8d4:	38bff804 	addi	r2,r7,-32
  82d8d8:	12003fcc 	andi	r8,r2,255
  82d8dc:	4200201c 	xori	r8,r8,128
  82d8e0:	423fe004 	addi	r8,r8,-128
  82d8e4:	003f4006 	br	82d5e8 <match_file_record_to_name_ext+0x174>
  82d8e8:	38bff804 	addi	r2,r7,-32
  82d8ec:	10803fcc 	andi	r2,r2,255
  82d8f0:	1080201c 	xori	r2,r2,128
  82d8f4:	10bfe004 	addi	r2,r2,-128
  82d8f8:	003f5406 	br	82d64c <match_file_record_to_name_ext+0x1d8>
  82d8fc:	38bff804 	addi	r2,r7,-32
  82d900:	12003fcc 	andi	r8,r2,255
  82d904:	4200201c 	xori	r8,r8,128
  82d908:	423fe004 	addi	r8,r8,-128
  82d90c:	003f4706 	br	82d62c <match_file_record_to_name_ext+0x1b8>
  82d910:	28803fcc 	andi	r2,r5,255
  82d914:	1080201c 	xori	r2,r2,128
  82d918:	10bfe004 	addi	r2,r2,-128
  82d91c:	003f5e06 	br	82d698 <match_file_record_to_name_ext+0x224>
  82d920:	39c03fcc 	andi	r7,r7,255
  82d924:	39c0201c 	xori	r7,r7,128
  82d928:	39ffe004 	addi	r7,r7,-128
  82d92c:	003f5106 	br	82d674 <match_file_record_to_name_ext+0x200>
  82d930:	0011883a 	mov	r8,zero
  82d934:	003f5906 	br	82d69c <match_file_record_to_name_ext+0x228>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  82d938:	0011883a 	mov	r8,zero
			match = false;
			break;
		}
	}
	return match;
}
  82d93c:	4005883a 	mov	r2,r8
  82d940:	f800283a 	ret

0082d944 <convert_filename_to_name_extension>:
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82d944:	21c00003 	ldbu	r7,0(r4)
  82d948:	00800b84 	movi	r2,46
  82d94c:	38c03fcc 	andi	r3,r7,255
  82d950:	18c0201c 	xori	r3,r3,128
  82d954:	18ffe004 	addi	r3,r3,-128
  82d958:	1880ae26 	beq	r3,r2,82dc14 <convert_filename_to_name_extension+0x2d0>
			name[counter] = filename[local];
  82d95c:	29c00005 	stb	r7,0(r5)
			if (filename[local] != 0)
  82d960:	20800007 	ldb	r2,0(r4)
  82d964:	10006226 	beq	r2,zero,82daf0 <convert_filename_to_name_extension+0x1ac>
  82d968:	02400044 	movi	r9,1
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82d96c:	224f883a 	add	r7,r4,r9
  82d970:	3a000003 	ldbu	r8,0(r7)
  82d974:	00800b84 	movi	r2,46
  82d978:	3815883a 	mov	r10,r7
  82d97c:	40c03fcc 	andi	r3,r8,255
  82d980:	18c0201c 	xori	r3,r3,128
  82d984:	18ffe004 	addi	r3,r3,-128
  82d988:	18809726 	beq	r3,r2,82dbe8 <convert_filename_to_name_extension+0x2a4>
			name[counter] = filename[local];
  82d98c:	2a000045 	stb	r8,1(r5)
			if (filename[local] != 0)
  82d990:	50800007 	ldb	r2,0(r10)
  82d994:	10005c26 	beq	r2,zero,82db08 <convert_filename_to_name_extension+0x1c4>
				local++;
  82d998:	4a400044 	addi	r9,r9,1
  82d99c:	224f883a 	add	r7,r4,r9
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82d9a0:	3a000003 	ldbu	r8,0(r7)
  82d9a4:	00800b84 	movi	r2,46
  82d9a8:	40c03fcc 	andi	r3,r8,255
  82d9ac:	18c0201c 	xori	r3,r3,128
  82d9b0:	18ffe004 	addi	r3,r3,-128
  82d9b4:	18809426 	beq	r3,r2,82dc08 <convert_filename_to_name_extension+0x2c4>
			name[counter] = filename[local];
  82d9b8:	2a000085 	stb	r8,2(r5)
			if (filename[local] != 0)
  82d9bc:	38800007 	ldb	r2,0(r7)
  82d9c0:	10005626 	beq	r2,zero,82db1c <convert_filename_to_name_extension+0x1d8>
				local++;
  82d9c4:	4a400044 	addi	r9,r9,1
  82d9c8:	224f883a 	add	r7,r4,r9
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82d9cc:	3a000003 	ldbu	r8,0(r7)
  82d9d0:	00800b84 	movi	r2,46
  82d9d4:	40c03fcc 	andi	r3,r8,255
  82d9d8:	18c0201c 	xori	r3,r3,128
  82d9dc:	18ffe004 	addi	r3,r3,-128
  82d9e0:	18807e26 	beq	r3,r2,82dbdc <convert_filename_to_name_extension+0x298>
			name[counter] = filename[local];
  82d9e4:	2a0000c5 	stb	r8,3(r5)
			if (filename[local] != 0)
  82d9e8:	38800007 	ldb	r2,0(r7)
  82d9ec:	10004f26 	beq	r2,zero,82db2c <convert_filename_to_name_extension+0x1e8>
				local++;
  82d9f0:	4a400044 	addi	r9,r9,1
  82d9f4:	224f883a 	add	r7,r4,r9
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82d9f8:	3a000003 	ldbu	r8,0(r7)
  82d9fc:	00800b84 	movi	r2,46
  82da00:	40c03fcc 	andi	r3,r8,255
  82da04:	18c0201c 	xori	r3,r3,128
  82da08:	18ffe004 	addi	r3,r3,-128
  82da0c:	18807026 	beq	r3,r2,82dbd0 <convert_filename_to_name_extension+0x28c>
			name[counter] = filename[local];
  82da10:	2a000105 	stb	r8,4(r5)
			if (filename[local] != 0)
  82da14:	38800007 	ldb	r2,0(r7)
  82da18:	10004826 	beq	r2,zero,82db3c <convert_filename_to_name_extension+0x1f8>
				local++;
  82da1c:	4a400044 	addi	r9,r9,1
  82da20:	224f883a 	add	r7,r4,r9
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82da24:	3a000003 	ldbu	r8,0(r7)
  82da28:	00800b84 	movi	r2,46
  82da2c:	40c03fcc 	andi	r3,r8,255
  82da30:	18c0201c 	xori	r3,r3,128
  82da34:	18ffe004 	addi	r3,r3,-128
  82da38:	18805226 	beq	r3,r2,82db84 <convert_filename_to_name_extension+0x240>
			name[counter] = filename[local];
  82da3c:	2a000145 	stb	r8,5(r5)
			if (filename[local] != 0)
  82da40:	38800007 	ldb	r2,0(r7)
  82da44:	10004126 	beq	r2,zero,82db4c <convert_filename_to_name_extension+0x208>
				local++;
  82da48:	4a400044 	addi	r9,r9,1
  82da4c:	224f883a 	add	r7,r4,r9
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82da50:	3a000003 	ldbu	r8,0(r7)
  82da54:	00800b84 	movi	r2,46
  82da58:	40c03fcc 	andi	r3,r8,255
  82da5c:	18c0201c 	xori	r3,r3,128
  82da60:	18ffe004 	addi	r3,r3,-128
  82da64:	18804f26 	beq	r3,r2,82dba4 <convert_filename_to_name_extension+0x260>
			name[counter] = filename[local];
  82da68:	2a000185 	stb	r8,6(r5)
			if (filename[local] != 0)
  82da6c:	38800007 	ldb	r2,0(r7)
  82da70:	10003a26 	beq	r2,zero,82db5c <convert_filename_to_name_extension+0x218>
				local++;
  82da74:	4a400044 	addi	r9,r9,1
  82da78:	224f883a 	add	r7,r4,r9
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82da7c:	3a000003 	ldbu	r8,0(r7)
  82da80:	00800b84 	movi	r2,46
  82da84:	40c03fcc 	andi	r3,r8,255
  82da88:	18c0201c 	xori	r3,r3,128
  82da8c:	18ffe004 	addi	r3,r3,-128
  82da90:	18804c26 	beq	r3,r2,82dbc4 <convert_filename_to_name_extension+0x280>
			name[counter] = filename[local];
  82da94:	2a0001c5 	stb	r8,7(r5)
			if (filename[local] != 0)
  82da98:	38800007 	ldb	r2,0(r7)
  82da9c:	10000726 	beq	r2,zero,82dabc <convert_filename_to_name_extension+0x178>
				local++;
  82daa0:	4a400044 	addi	r9,r9,1
  82daa4:	490f883a 	add	r7,r9,r4
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  82daa8:	38c00007 	ldb	r3,0(r7)
  82daac:	00800b84 	movi	r2,46
  82dab0:	1880021e 	bne	r3,r2,82dabc <convert_filename_to_name_extension+0x178>
		local++;
  82dab4:	4a400044 	addi	r9,r9,1
  82dab8:	224f883a 	add	r7,r4,r9
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
  82dabc:	38800003 	ldbu	r2,0(r7)
  82dac0:	10002c1e 	bne	r2,zero,82db74 <convert_filename_to_name_extension+0x230>
			extension[counter] = filename[local];
			local++;
		} else {
			extension[counter] = ' ';
  82dac4:	00800804 	movi	r2,32
  82dac8:	30800005 	stb	r2,0(r6)
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
  82dacc:	38800003 	ldbu	r2,0(r7)
  82dad0:	1000241e 	bne	r2,zero,82db64 <convert_filename_to_name_extension+0x220>
			extension[counter] = filename[local];
			local++;
		} else {
			extension[counter] = ' ';
  82dad4:	00800804 	movi	r2,32
  82dad8:	30800045 	stb	r2,1(r6)
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
  82dadc:	38800003 	ldbu	r2,0(r7)
  82dae0:	1000011e 	bne	r2,zero,82dae8 <convert_filename_to_name_extension+0x1a4>
			extension[counter] = filename[local];
			local++;
		} else {
			extension[counter] = ' ';
  82dae4:	00800804 	movi	r2,32
  82dae8:	30800085 	stb	r2,2(r6)
  82daec:	f800283a 	ret
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82daf0:	22000003 	ldbu	r8,0(r4)
  82daf4:	2015883a 	mov	r10,r4
		} else {
			extension[counter] = ' ';
		}
	}

}
  82daf8:	0013883a 	mov	r9,zero
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
			name[counter] = filename[local];
  82dafc:	2a000045 	stb	r8,1(r5)
			if (filename[local] != 0)
  82db00:	50800007 	ldb	r2,0(r10)
  82db04:	103fa41e 	bne	r2,zero,82d998 <convert_filename_to_name_extension+0x54>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82db08:	224f883a 	add	r7,r4,r9
  82db0c:	3a000003 	ldbu	r8,0(r7)
			name[counter] = filename[local];
  82db10:	2a000085 	stb	r8,2(r5)
			if (filename[local] != 0)
  82db14:	38800007 	ldb	r2,0(r7)
  82db18:	103faa1e 	bne	r2,zero,82d9c4 <convert_filename_to_name_extension+0x80>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82db1c:	3a000003 	ldbu	r8,0(r7)
			name[counter] = filename[local];
  82db20:	2a0000c5 	stb	r8,3(r5)
			if (filename[local] != 0)
  82db24:	38800007 	ldb	r2,0(r7)
  82db28:	103fb11e 	bne	r2,zero,82d9f0 <convert_filename_to_name_extension+0xac>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82db2c:	3a000003 	ldbu	r8,0(r7)
			name[counter] = filename[local];
  82db30:	2a000105 	stb	r8,4(r5)
			if (filename[local] != 0)
  82db34:	38800007 	ldb	r2,0(r7)
  82db38:	103fb81e 	bne	r2,zero,82da1c <convert_filename_to_name_extension+0xd8>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82db3c:	3a000003 	ldbu	r8,0(r7)
			name[counter] = filename[local];
  82db40:	2a000145 	stb	r8,5(r5)
			if (filename[local] != 0)
  82db44:	38800007 	ldb	r2,0(r7)
  82db48:	103fbf1e 	bne	r2,zero,82da48 <convert_filename_to_name_extension+0x104>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82db4c:	3a000003 	ldbu	r8,0(r7)
			name[counter] = filename[local];
  82db50:	2a000185 	stb	r8,6(r5)
			if (filename[local] != 0)
  82db54:	38800007 	ldb	r2,0(r7)
  82db58:	103fc61e 	bne	r2,zero,82da74 <convert_filename_to_name_extension+0x130>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82db5c:	3a000003 	ldbu	r8,0(r7)
  82db60:	003fcc06 	br	82da94 <convert_filename_to_name_extension+0x150>
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
			extension[counter] = filename[local];
			local++;
  82db64:	4a400044 	addi	r9,r9,1
  82db68:	224f883a 	add	r7,r4,r9
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
			extension[counter] = filename[local];
  82db6c:	30800045 	stb	r2,1(r6)
  82db70:	003fda06 	br	82dadc <convert_filename_to_name_extension+0x198>
			local++;
  82db74:	4a400044 	addi	r9,r9,1
  82db78:	224f883a 	add	r7,r4,r9
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
			extension[counter] = filename[local];
  82db7c:	30800005 	stb	r2,0(r6)
  82db80:	003fd206 	br	82dacc <convert_filename_to_name_extension+0x188>
		if (filename[local] != '.') {
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  82db84:	00800804 	movi	r2,32
  82db88:	28800145 	stb	r2,5(r5)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82db8c:	3a000003 	ldbu	r8,0(r7)
  82db90:	00800b84 	movi	r2,46
  82db94:	40c03fcc 	andi	r3,r8,255
  82db98:	18c0201c 	xori	r3,r3,128
  82db9c:	18ffe004 	addi	r3,r3,-128
  82dba0:	18bfb11e 	bne	r3,r2,82da68 <convert_filename_to_name_extension+0x124>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  82dba4:	00800804 	movi	r2,32
  82dba8:	28800185 	stb	r2,6(r5)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82dbac:	3a000003 	ldbu	r8,0(r7)
  82dbb0:	00800b84 	movi	r2,46
  82dbb4:	40c03fcc 	andi	r3,r8,255
  82dbb8:	18c0201c 	xori	r3,r3,128
  82dbbc:	18ffe004 	addi	r3,r3,-128
  82dbc0:	18bfb41e 	bne	r3,r2,82da94 <convert_filename_to_name_extension+0x150>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  82dbc4:	00800804 	movi	r2,32
  82dbc8:	288001c5 	stb	r2,7(r5)
  82dbcc:	003fb606 	br	82daa8 <convert_filename_to_name_extension+0x164>
  82dbd0:	00800804 	movi	r2,32
  82dbd4:	28800105 	stb	r2,4(r5)
  82dbd8:	003f9206 	br	82da24 <convert_filename_to_name_extension+0xe0>
  82dbdc:	00800804 	movi	r2,32
  82dbe0:	288000c5 	stb	r2,3(r5)
  82dbe4:	003f8406 	br	82d9f8 <convert_filename_to_name_extension+0xb4>
  82dbe8:	00800804 	movi	r2,32
  82dbec:	28800045 	stb	r2,1(r5)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  82dbf0:	3a000003 	ldbu	r8,0(r7)
  82dbf4:	00800b84 	movi	r2,46
  82dbf8:	40c03fcc 	andi	r3,r8,255
  82dbfc:	18c0201c 	xori	r3,r3,128
  82dc00:	18ffe004 	addi	r3,r3,-128
  82dc04:	18bf6c1e 	bne	r3,r2,82d9b8 <convert_filename_to_name_extension+0x74>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  82dc08:	00800804 	movi	r2,32
  82dc0c:	28800085 	stb	r2,2(r5)
  82dc10:	003f6e06 	br	82d9cc <convert_filename_to_name_extension+0x88>
  82dc14:	00800804 	movi	r2,32
  82dc18:	0013883a 	mov	r9,zero
  82dc1c:	28800005 	stb	r2,0(r5)
  82dc20:	003f5206 	br	82d96c <convert_filename_to_name_extension+0x28>

0082dc24 <copy_file_record_name_to_string>:
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dc24:	21800003 	ldbu	r6,0(r4)
  82dc28:	00800804 	movi	r2,32
  82dc2c:	30c03fcc 	andi	r3,r6,255
  82dc30:	18804826 	beq	r3,r2,82dd54 <copy_file_record_name_to_string+0x130>
			file_name[flength] = file_record->name[index];
  82dc34:	29800005 	stb	r6,0(r5)
  82dc38:	01800044 	movi	r6,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dc3c:	20c00043 	ldbu	r3,1(r4)
  82dc40:	01c00804 	movi	r7,32
  82dc44:	18803fcc 	andi	r2,r3,255
  82dc48:	11c00326 	beq	r2,r7,82dc58 <copy_file_record_name_to_string+0x34>
			file_name[flength] = file_record->name[index];
  82dc4c:	2985883a 	add	r2,r5,r6
  82dc50:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82dc54:	31800044 	addi	r6,r6,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dc58:	20c00083 	ldbu	r3,2(r4)
  82dc5c:	18803fcc 	andi	r2,r3,255
  82dc60:	11c00326 	beq	r2,r7,82dc70 <copy_file_record_name_to_string+0x4c>
			file_name[flength] = file_record->name[index];
  82dc64:	2985883a 	add	r2,r5,r6
  82dc68:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82dc6c:	31800044 	addi	r6,r6,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dc70:	20c000c3 	ldbu	r3,3(r4)
  82dc74:	18803fcc 	andi	r2,r3,255
  82dc78:	11c00326 	beq	r2,r7,82dc88 <copy_file_record_name_to_string+0x64>
			file_name[flength] = file_record->name[index];
  82dc7c:	2985883a 	add	r2,r5,r6
  82dc80:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82dc84:	31800044 	addi	r6,r6,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dc88:	20c00103 	ldbu	r3,4(r4)
  82dc8c:	18803fcc 	andi	r2,r3,255
  82dc90:	11c00326 	beq	r2,r7,82dca0 <copy_file_record_name_to_string+0x7c>
			file_name[flength] = file_record->name[index];
  82dc94:	2985883a 	add	r2,r5,r6
  82dc98:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82dc9c:	31800044 	addi	r6,r6,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dca0:	20c00143 	ldbu	r3,5(r4)
  82dca4:	18803fcc 	andi	r2,r3,255
  82dca8:	11c00326 	beq	r2,r7,82dcb8 <copy_file_record_name_to_string+0x94>
			file_name[flength] = file_record->name[index];
  82dcac:	2985883a 	add	r2,r5,r6
  82dcb0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82dcb4:	31800044 	addi	r6,r6,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dcb8:	20c00183 	ldbu	r3,6(r4)
  82dcbc:	18803fcc 	andi	r2,r3,255
  82dcc0:	11c00326 	beq	r2,r7,82dcd0 <copy_file_record_name_to_string+0xac>
			file_name[flength] = file_record->name[index];
  82dcc4:	2985883a 	add	r2,r5,r6
  82dcc8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82dccc:	31800044 	addi	r6,r6,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dcd0:	20c001c3 	ldbu	r3,7(r4)
  82dcd4:	18803fcc 	andi	r2,r3,255
  82dcd8:	11c00326 	beq	r2,r7,82dce8 <copy_file_record_name_to_string+0xc4>
			file_name[flength] = file_record->name[index];
  82dcdc:	2985883a 	add	r2,r5,r6
  82dce0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82dce4:	31800044 	addi	r6,r6,1
		}
	}
	if (file_record->extension[0] != ' ') {
  82dce8:	20800203 	ldbu	r2,8(r4)
  82dcec:	11c01626 	beq	r2,r7,82dd48 <copy_file_record_name_to_string+0x124>
		file_name[flength] = '.';
  82dcf0:	2985883a 	add	r2,r5,r6
  82dcf4:	00c00b84 	movi	r3,46
  82dcf8:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
			if (file_record->extension[index] != ' ') {
  82dcfc:	20c00203 	ldbu	r3,8(r4)
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
  82dd00:	31800044 	addi	r6,r6,1
		for (index = 0; index < 3; index++) {
			if (file_record->extension[index] != ' ') {
  82dd04:	18803fcc 	andi	r2,r3,255
  82dd08:	11c00326 	beq	r2,r7,82dd18 <copy_file_record_name_to_string+0xf4>
				file_name[flength] = file_record->extension[index];
  82dd0c:	2985883a 	add	r2,r5,r6
  82dd10:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  82dd14:	31800044 	addi	r6,r6,1
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
			if (file_record->extension[index] != ' ') {
  82dd18:	20c00243 	ldbu	r3,9(r4)
  82dd1c:	18803fcc 	andi	r2,r3,255
  82dd20:	11c00326 	beq	r2,r7,82dd30 <copy_file_record_name_to_string+0x10c>
				file_name[flength] = file_record->extension[index];
  82dd24:	2985883a 	add	r2,r5,r6
  82dd28:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  82dd2c:	31800044 	addi	r6,r6,1
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
			if (file_record->extension[index] != ' ') {
  82dd30:	21000283 	ldbu	r4,10(r4)
  82dd34:	20803fcc 	andi	r2,r4,255
  82dd38:	11c00326 	beq	r2,r7,82dd48 <copy_file_record_name_to_string+0x124>
				file_name[flength] = file_record->extension[index];
  82dd3c:	2985883a 	add	r2,r5,r6
  82dd40:	11000005 	stb	r4,0(r2)
				flength = flength + 1;
  82dd44:	31800044 	addi	r6,r6,1
			}
		}
	}
	file_name[flength] = 0;
  82dd48:	3145883a 	add	r2,r6,r5
  82dd4c:	10000005 	stb	zero,0(r2)
}
  82dd50:	f800283a 	ret
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82dd54:	000d883a 	mov	r6,zero
  82dd58:	003fb806 	br	82dc3c <copy_file_record_name_to_string+0x18>

0082dd5c <alt_up_sd_card_set_attributes>:
void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
		if (active_files[file_handle].in_use) {
  82dd5c:	20bfffcc 	andi	r2,r4,65535
  82dd60:	10a0001c 	xori	r2,r2,32768
  82dd64:	10a00004 	addi	r2,r2,-32768
  82dd68:	100491ba 	slli	r2,r2,6
  82dd6c:	00c02174 	movhi	r3,133
  82dd70:	18f3c504 	addi	r3,r3,-12524

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  82dd74:	213fffcc 	andi	r4,r4,65535
		if (active_files[file_handle].in_use) {
  82dd78:	10c7883a 	add	r3,r2,r3

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  82dd7c:	008004c4 	movi	r2,19
  82dd80:	11000336 	bltu	r2,r4,82dd90 <alt_up_sd_card_set_attributes+0x34>
		if (active_files[file_handle].in_use) {
  82dd84:	18800f17 	ldw	r2,60(r3)
  82dd88:	10000126 	beq	r2,zero,82dd90 <alt_up_sd_card_set_attributes+0x34>
			active_files[file_handle].attributes
  82dd8c:	194002c5 	stb	r5,11(r3)
  82dd90:	f800283a 	ret

0082dd94 <alt_up_sd_card_get_attributes>:
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
		if (active_files[file_handle].in_use) {
  82dd94:	20bfffcc 	andi	r2,r4,65535
  82dd98:	10a0001c 	xori	r2,r2,32768
  82dd9c:	10a00004 	addi	r2,r2,-32768
  82dda0:	100491ba 	slli	r2,r2,6
  82dda4:	00c02174 	movhi	r3,133
  82dda8:	18f3c504 	addi	r3,r3,-12524
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  82ddac:	213fffcc 	andi	r4,r4,65535
  82ddb0:	014004c4 	movi	r5,19
		if (active_files[file_handle].in_use) {
  82ddb4:	10c7883a 	add	r3,r2,r3
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  82ddb8:	29000436 	bltu	r5,r4,82ddcc <alt_up_sd_card_get_attributes+0x38>
		if (active_files[file_handle].in_use) {
  82ddbc:	18800f17 	ldw	r2,60(r3)
  82ddc0:	10000226 	beq	r2,zero,82ddcc <alt_up_sd_card_get_attributes+0x38>
  82ddc4:	188002c3 	ldbu	r2,11(r3)
  82ddc8:	f800283a 	ret
  82ddcc:	00bfffc4 	movi	r2,-1
			result = ((active_files[file_handle].attributes) & 0x00ff);
		}
	}
	return result;
}
  82ddd0:	f800283a 	ret

0082ddd4 <alt_up_sd_card_is_Present>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82ddd4:	d0a77a17 	ldw	r2,-25112(gp)
  82ddd8:	10000426 	beq	r2,zero,82ddec <alt_up_sd_card_is_Present+0x18>
  82dddc:	d0e77217 	ldw	r3,-25144(gp)
  82dde0:	1880002b 	ldhuio	r2,0(r3)
  82dde4:	1080008c 	andi	r2,r2,2
  82dde8:	1000131e 	bne	r2,zero,82de38 <alt_up_sd_card_is_Present+0x64>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82ddec:	d0e77017 	ldw	r3,-25152(gp)
  82ddf0:	00800044 	movi	r2,1
  82ddf4:	18800226 	beq	r3,r2,82de00 <alt_up_sd_card_is_Present+0x2c>

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82ddf8:	0005883a 	mov	r2,zero
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
}
  82ddfc:	f800283a 	ret
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82de00:	00802174 	movhi	r2,133
  82de04:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82de08:	00c02174 	movhi	r3,133
  82de0c:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82de10:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82de14:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82de18:	d0277115 	stw	zero,-25148(gp)
  82de1c:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82de20:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82de24:	183fff15 	stw	zero,-4(r3)
  82de28:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82de2c:	18bffc1e 	bne	r3,r2,82de20 <alt_up_sd_card_is_Present+0x4c>
  82de30:	0005883a 	mov	r2,zero
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
}
  82de34:	f800283a 	ret
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82de38:	00800044 	movi	r2,1
  82de3c:	f800283a 	ret

0082de40 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  82de40:	deffff04 	addi	sp,sp,-4
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  82de44:	01402134 	movhi	r5,132
  82de48:	2942ea04 	addi	r5,r5,2984
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  82de4c:	dfc00015 	stw	ra,0(sp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  82de50:	08328640 	call	832864 <alt_find_dev>

	if (dev != NULL) {
  82de54:	10001226 	beq	r2,zero,82dea0 <alt_up_sd_card_open_dev+0x60>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  82de58:	11000a17 	ldw	r4,40(r2)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
		search_data.valid = false;
  82de5c:	00c02174 	movhi	r3,133
  82de60:	18f3ab04 	addi	r3,r3,-12628
  82de64:	18000415 	stw	zero,16(r3)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);

	if (dev != NULL) {
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  82de68:	21408d04 	addi	r5,r4,564
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  82de6c:	20c08904 	addi	r3,r4,548
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  82de70:	21808404 	addi	r6,r4,528
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  82de74:	21c08c04 	addi	r7,r4,560
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  82de78:	22008b04 	addi	r8,r4,556
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
  82de7c:	d0a77a15 	stw	r2,-25112(gp)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);

	if (dev != NULL) {
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  82de80:	d1677215 	stw	r5,-25144(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  82de84:	d0e77315 	stw	r3,-25140(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  82de88:	d1a77415 	stw	r6,-25136(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  82de8c:	d1e77515 	stw	r7,-25132(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  82de90:	d2277615 	stw	r8,-25128(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  82de94:	d1277715 	stw	r4,-25124(gp)
		device_pointer = dev;
		initialized = false;
  82de98:	d0277015 	stw	zero,-25152(gp)
		is_sd_card_formated_as_FAT16 = false;
  82de9c:	d0277115 	stw	zero,-25148(gp)
		search_data.valid = false;
	}
	return dev;
}
  82dea0:	dfc00017 	ldw	ra,0(sp)
  82dea4:	dec00104 	addi	sp,sp,4
  82dea8:	f800283a 	ret

0082deac <get_dir_divider_location>:
	return result;
}

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  82deac:	defffe04 	addi	sp,sp,-8
  82deb0:	dc000015 	stw	r16,0(sp)
  82deb4:	dfc00115 	stw	ra,4(sp)
  82deb8:	2021883a 	mov	r16,r4
	int index = 0;
	int length = strlen(name);
  82debc:	0822e100 	call	822e10 <strlen>
  82dec0:	1009883a 	mov	r4,r2

	for (index = 0; index < length; index++) {
  82dec4:	0080160e 	bge	zero,r2,82df20 <get_dir_divider_location+0x74>
		if ((name[index] == '\\') || (name[index] == '/')) {
  82dec8:	80800007 	ldb	r2,0(r16)
  82decc:	01401704 	movi	r5,92
  82ded0:	11401126 	beq	r2,r5,82df18 <get_dir_divider_location+0x6c>
  82ded4:	00c00bc4 	movi	r3,47
  82ded8:	10c00f26 	beq	r2,r3,82df18 <get_dir_divider_location+0x6c>
  82dedc:	280d883a 	mov	r6,r5
  82dee0:	0005883a 	mov	r2,zero
  82dee4:	180b883a 	mov	r5,r3
  82dee8:	00000306 	br	82def8 <get_dir_divider_location+0x4c>
  82deec:	18c00007 	ldb	r3,0(r3)
  82def0:	19800526 	beq	r3,r6,82df08 <get_dir_divider_location+0x5c>
  82def4:	19400426 	beq	r3,r5,82df08 <get_dir_divider_location+0x5c>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82def8:	10800044 	addi	r2,r2,1
		if ((name[index] == '\\') || (name[index] == '/')) {
  82defc:	8087883a 	add	r3,r16,r2
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82df00:	20bffa1e 	bne	r4,r2,82deec <get_dir_divider_location+0x40>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  82df04:	00bfffc4 	movi	r2,-1
		index = -1;
	}

	return index;
}
  82df08:	dfc00117 	ldw	ra,4(sp)
  82df0c:	dc000017 	ldw	r16,0(sp)
  82df10:	dec00204 	addi	sp,sp,8
  82df14:	f800283a 	ret
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  82df18:	0005883a 	mov	r2,zero
  82df1c:	003ffa06 	br	82df08 <get_dir_divider_location+0x5c>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82df20:	0005883a 	mov	r2,zero
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  82df24:	203ff81e 	bne	r4,zero,82df08 <get_dir_divider_location+0x5c>
  82df28:	003ff606 	br	82df04 <get_dir_divider_location+0x58>

0082df2c <check_file_name_for_FAT16_compliance>:
	}
}

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  82df2c:	defffe04 	addi	sp,sp,-8
  82df30:	dc000015 	stw	r16,0(sp)
  82df34:	dfc00115 	stw	ra,4(sp)
  82df38:	2021883a 	mov	r16,r4
	int length = strlen(file_name);
  82df3c:	0822e100 	call	822e10 <strlen>
  82df40:	100f883a 	mov	r7,r2
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  82df44:	00802e0e 	bge	zero,r2,82e000 <check_file_name_for_FAT16_compliance+0xd4>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  82df48:	80c00007 	ldb	r3,0(r16)
  82df4c:	00800804 	movi	r2,32
  82df50:	18801826 	beq	r3,r2,82dfb4 <check_file_name_for_FAT16_compliance+0x88>
  82df54:	017fffc4 	movi	r5,-1
  82df58:	1017883a 	mov	r11,r2
  82df5c:	0009883a 	mov	r4,zero
  82df60:	280d883a 	mov	r6,r5
  82df64:	02001704 	movi	r8,92
  82df68:	02400bc4 	movi	r9,47
  82df6c:	02800244 	movi	r10,9
  82df70:	03400b84 	movi	r13,46
  82df74:	030000c4 	movi	r12,3
  82df78:	20bfffc4 	addi	r2,r4,-1
  82df7c:	11802b26 	beq	r2,r6,82e02c <check_file_name_for_FAT16_compliance+0x100>
  82df80:	2145c83a 	sub	r2,r4,r5
  82df84:	12801726 	beq	r2,r10,82dfe4 <check_file_name_for_FAT16_compliance+0xb8>
  82df88:	29801826 	beq	r5,r6,82dfec <check_file_name_for_FAT16_compliance+0xc0>
  82df8c:	6080170e 	bge	r12,r2,82dfec <check_file_name_for_FAT16_compliance+0xc0>
  82df90:	1a000126 	beq	r3,r8,82df98 <check_file_name_for_FAT16_compliance+0x6c>
  82df94:	1a40071e 	bne	r3,r9,82dfb4 <check_file_name_for_FAT16_compliance+0x88>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
			last_period = index;
			last_dir_break_position = index;
		}
		if (file_name[index] == '.') {
  82df98:	200d883a 	mov	r6,r4
  82df9c:	200b883a 	mov	r5,r4
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  82dfa0:	21000044 	addi	r4,r4,1
  82dfa4:	39001626 	beq	r7,r4,82e000 <check_file_name_for_FAT16_compliance+0xd4>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  82dfa8:	2405883a 	add	r2,r4,r16
  82dfac:	10c00007 	ldb	r3,0(r2)
  82dfb0:	1afff11e 	bne	r3,r11,82df78 <check_file_name_for_FAT16_compliance+0x4c>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  82dfb4:	81c5883a 	add	r2,r16,r7
  82dfb8:	113fffc7 	ldb	r4,-1(r2)
  82dfbc:	00c01704 	movi	r3,92
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  82dfc0:	000b883a 	mov	r5,zero
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  82dfc4:	20c01326 	beq	r4,r3,82e014 <check_file_name_for_FAT16_compliance+0xe8>
  82dfc8:	00800bc4 	movi	r2,47
  82dfcc:	20801126 	beq	r4,r2,82e014 <check_file_name_for_FAT16_compliance+0xe8>
		result = false;
	}
	return result;
}
  82dfd0:	2805883a 	mov	r2,r5
  82dfd4:	dfc00117 	ldw	ra,4(sp)
  82dfd8:	dc000017 	ldw	r16,0(sp)
  82dfdc:	dec00204 	addi	sp,sp,8
  82dfe0:	f800283a 	ret
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  82dfe4:	1b7ff31e 	bne	r3,r13,82dfb4 <check_file_name_for_FAT16_compliance+0x88>
  82dfe8:	29bfe81e 	bne	r5,r6,82df8c <check_file_name_for_FAT16_compliance+0x60>
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
			break;
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  82dfec:	1a3fea26 	beq	r3,r8,82df98 <check_file_name_for_FAT16_compliance+0x6c>
  82dff0:	1a7fe926 	beq	r3,r9,82df98 <check_file_name_for_FAT16_compliance+0x6c>
			last_period = index;
			last_dir_break_position = index;
		}
		if (file_name[index] == '.') {
  82dff4:	1b7fe926 	beq	r3,r13,82df9c <check_file_name_for_FAT16_compliance+0x70>
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  82dff8:	21000044 	addi	r4,r4,1
  82dffc:	393fea1e 	bne	r7,r4,82dfa8 <check_file_name_for_FAT16_compliance+0x7c>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  82e000:	81c5883a 	add	r2,r16,r7
  82e004:	113fffc7 	ldb	r4,-1(r2)
  82e008:	00c01704 	movi	r3,92
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  82e00c:	01400044 	movi	r5,1
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  82e010:	20ffed1e 	bne	r4,r3,82dfc8 <check_file_name_for_FAT16_compliance+0x9c>
  82e014:	000b883a 	mov	r5,zero
		result = false;
	}
	return result;
}
  82e018:	2805883a 	mov	r2,r5
  82e01c:	dfc00117 	ldw	ra,4(sp)
  82e020:	dc000017 	ldw	r16,0(sp)
  82e024:	dec00204 	addi	sp,sp,8
  82e028:	f800283a 	ret
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  82e02c:	1a3fe126 	beq	r3,r8,82dfb4 <check_file_name_for_FAT16_compliance+0x88>
  82e030:	1a7fd31e 	bne	r3,r9,82df80 <check_file_name_for_FAT16_compliance+0x54>
  82e034:	003fdf06 	br	82dfb4 <check_file_name_for_FAT16_compliance+0x88>

0082e038 <filename_to_upper_case>:
	return result;
}

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  82e038:	defffe04 	addi	sp,sp,-8
  82e03c:	dc000015 	stw	r16,0(sp)
  82e040:	dfc00115 	stw	ra,4(sp)
  82e044:	2021883a 	mov	r16,r4
	int index;
	int length = strlen(file_name);
  82e048:	0822e100 	call	822e10 <strlen>
  82e04c:	100d883a 	mov	r6,r2

	for (index = 0; index < length; index++) {
  82e050:	00800c0e 	bge	zero,r2,82e084 <filename_to_upper_case+0x4c>
  82e054:	8009883a 	mov	r4,r16
  82e058:	000b883a 	mov	r5,zero
  82e05c:	01c00644 	movi	r7,25
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  82e060:	20c00003 	ldbu	r3,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  82e064:	29400044 	addi	r5,r5,1
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  82e068:	18bfe7c4 	addi	r2,r3,-97
  82e06c:	10803fcc 	andi	r2,r2,255
			file_name[index] = (file_name[index] - 'a') + 'A';
  82e070:	18fff804 	addi	r3,r3,-32
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  82e074:	38800136 	bltu	r7,r2,82e07c <filename_to_upper_case+0x44>
			file_name[index] = (file_name[index] - 'a') + 'A';
  82e078:	20c00005 	stb	r3,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  82e07c:	21000044 	addi	r4,r4,1
  82e080:	317ff71e 	bne	r6,r5,82e060 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  82e084:	dfc00117 	ldw	ra,4(sp)
  82e088:	dc000017 	ldw	r16,0(sp)
  82e08c:	dec00204 	addi	sp,sp,8
  82e090:	f800283a 	ret

0082e094 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  82e094:	208007cc 	andi	r2,r4,31
	return result;
}

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  82e098:	2013883a 	mov	r9,r4
  82e09c:	2815883a 	mov	r10,r5
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  82e0a0:	1000751e 	bne	r2,zero,82e278 <Write_File_Record_At_Offset+0x1e4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82e0a4:	d1277a17 	ldw	r4,-25112(gp)
  82e0a8:	20007026 	beq	r4,zero,82e26c <Write_File_Record_At_Offset+0x1d8>
  82e0ac:	d0e77217 	ldw	r3,-25144(gp)
  82e0b0:	1880002b 	ldhuio	r2,0(r3)
  82e0b4:	1080008c 	andi	r2,r2,2
  82e0b8:	10006c26 	beq	r2,zero,82e26c <Write_File_Record_At_Offset+0x1d8>

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  82e0bc:	d0a77117 	ldw	r2,-25148(gp)
  82e0c0:	10006d26 	beq	r2,zero,82e278 <Write_File_Record_At_Offset+0x1e4>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
  82e0c4:	28800043 	ldbu	r2,1(r5)
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e0c8:	28c00003 	ldbu	r3,0(r5)
  82e0cc:	21000a17 	ldw	r4,40(r4)
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
  82e0d0:	1004923a 	slli	r2,r2,8
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e0d4:	4909883a 	add	r4,r9,r4
  82e0d8:	10c4b03a 	or	r2,r2,r3
  82e0dc:	10bfffcc 	andi	r2,r2,65535
  82e0e0:	10a0001c 	xori	r2,r2,32768
  82e0e4:	10a00004 	addi	r2,r2,-32768
  82e0e8:	2080002d 	sthio	r2,0(r4)
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
  82e0ec:	28c000c3 	ldbu	r3,3(r5)
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e0f0:	d0a77a17 	ldw	r2,-25112(gp)
  82e0f4:	29400083 	ldbu	r5,2(r5)
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
  82e0f8:	1806923a 	slli	r3,r3,8
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e0fc:	11000a17 	ldw	r4,40(r2)
  82e100:	49c00084 	addi	r7,r9,2
  82e104:	1946b03a 	or	r3,r3,r5
  82e108:	18ffffcc 	andi	r3,r3,65535
  82e10c:	18e0001c 	xori	r3,r3,32768
  82e110:	3909883a 	add	r4,r7,r4
  82e114:	18e00004 	addi	r3,r3,-32768
  82e118:	20c0002d 	sthio	r3,0(r4)
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
  82e11c:	50800143 	ldbu	r2,5(r10)
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e120:	51800103 	ldbu	r6,4(r10)
  82e124:	d0e77a17 	ldw	r3,-25112(gp)
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
  82e128:	1004923a 	slli	r2,r2,8
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e12c:	49000104 	addi	r4,r9,4
  82e130:	19400a17 	ldw	r5,40(r3)
  82e134:	1184b03a 	or	r2,r2,r6
  82e138:	10bfffcc 	andi	r2,r2,65535
  82e13c:	10a0001c 	xori	r2,r2,32768
  82e140:	2149883a 	add	r4,r4,r5
  82e144:	10a00004 	addi	r2,r2,-32768
  82e148:	2080002d 	sthio	r2,0(r4)
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
  82e14c:	50c001c3 	ldbu	r3,7(r10)
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e150:	51800183 	ldbu	r6,6(r10)
  82e154:	d0a77a17 	ldw	r2,-25112(gp)
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
  82e158:	1806923a 	slli	r3,r3,8
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e15c:	49000184 	addi	r4,r9,6
  82e160:	11400a17 	ldw	r5,40(r2)
  82e164:	1986b03a 	or	r3,r3,r6
  82e168:	18ffffcc 	andi	r3,r3,65535
  82e16c:	18e0001c 	xori	r3,r3,32768
  82e170:	2149883a 	add	r4,r4,r5
  82e174:	18e00004 	addi	r3,r3,-32768
  82e178:	20c0002d 	sthio	r3,0(r4)
		}
		for (counter = 0; counter < 3; counter++) {
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  82e17c:	d0e77a17 	ldw	r3,-25112(gp)
  82e180:	51400203 	ldbu	r5,8(r10)
  82e184:	18800a17 	ldw	r2,40(r3)
  82e188:	4885883a 	add	r2,r9,r2
  82e18c:	11400225 	stbio	r5,8(r2)
  82e190:	d0a77a17 	ldw	r2,-25112(gp)
  82e194:	51800243 	ldbu	r6,9(r10)
  82e198:	48c00044 	addi	r3,r9,1
  82e19c:	11000a17 	ldw	r4,40(r2)
  82e1a0:	02000044 	movi	r8,1
  82e1a4:	1907883a 	add	r3,r3,r4
  82e1a8:	19800225 	stbio	r6,8(r3)
  82e1ac:	d0a77a17 	ldw	r2,-25112(gp)
  82e1b0:	51000283 	ldbu	r4,10(r10)
  82e1b4:	10c00a17 	ldw	r3,40(r2)
  82e1b8:	38cf883a 	add	r7,r7,r3
  82e1bc:	39000225 	stbio	r4,8(r7)
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  82e1c0:	d0e77a17 	ldw	r3,-25112(gp)
  82e1c4:	514002c3 	ldbu	r5,11(r10)
  82e1c8:	18800a17 	ldw	r2,40(r3)
  82e1cc:	4885883a 	add	r2,r9,r2
  82e1d0:	114002e5 	stbio	r5,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  82e1d4:	d0e77a17 	ldw	r3,-25112(gp)
  82e1d8:	5100030b 	ldhu	r4,12(r10)
  82e1dc:	18800a17 	ldw	r2,40(r3)
  82e1e0:	4885883a 	add	r2,r9,r2
  82e1e4:	110003ad 	sthio	r4,14(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  82e1e8:	d0e77a17 	ldw	r3,-25112(gp)
  82e1ec:	5140038b 	ldhu	r5,14(r10)
  82e1f0:	18800a17 	ldw	r2,40(r3)
  82e1f4:	4885883a 	add	r2,r9,r2
  82e1f8:	1140042d 	sthio	r5,16(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  82e1fc:	d0e77a17 	ldw	r3,-25112(gp)
  82e200:	5100040b 	ldhu	r4,16(r10)
  82e204:	18800a17 	ldw	r2,40(r3)
  82e208:	4885883a 	add	r2,r9,r2
  82e20c:	110004ad 	sthio	r4,18(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  82e210:	d0e77a17 	ldw	r3,-25112(gp)
  82e214:	5140048b 	ldhu	r5,18(r10)
  82e218:	18800a17 	ldw	r2,40(r3)
  82e21c:	4885883a 	add	r2,r9,r2
  82e220:	114005ad 	sthio	r5,22(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  82e224:	d0e77a17 	ldw	r3,-25112(gp)
  82e228:	5100050b 	ldhu	r4,20(r10)
  82e22c:	18800a17 	ldw	r2,40(r3)
  82e230:	4885883a 	add	r2,r9,r2
  82e234:	1100062d 	sthio	r4,24(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  82e238:	d0e77a17 	ldw	r3,-25112(gp)
  82e23c:	5140058b 	ldhu	r5,22(r10)
  82e240:	18800a17 	ldw	r2,40(r3)
  82e244:	4885883a 	add	r2,r9,r2
  82e248:	114006ad 	sthio	r5,26(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  82e24c:	d0e77a17 	ldw	r3,-25112(gp)
  82e250:	51000617 	ldw	r4,24(r10)
  82e254:	18800a17 	ldw	r2,40(r3)
  82e258:	4885883a 	add	r2,r9,r2
  82e25c:	11000735 	stwio	r4,28(r2)
		current_sector_modified = true;
  82e260:	4005883a 	mov	r2,r8
  82e264:	d2277b15 	stw	r8,-25108(gp)
  82e268:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82e26c:	d0e77017 	ldw	r3,-25152(gp)
  82e270:	00800044 	movi	r2,1
  82e274:	18800226 	beq	r3,r2,82e280 <Write_File_Record_At_Offset+0x1ec>
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
		current_sector_modified = true;
  82e278:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  82e27c:	f800283a 	ret
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82e280:	00802174 	movhi	r2,133
  82e284:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82e288:	00c02174 	movhi	r3,133
  82e28c:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82e290:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82e294:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82e298:	d0277115 	stw	zero,-25148(gp)
  82e29c:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82e2a0:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82e2a4:	183fff15 	stw	zero,-4(r3)
  82e2a8:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82e2ac:	18bffc1e 	bne	r3,r2,82e2a0 <Write_File_Record_At_Offset+0x20c>
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
		current_sector_modified = true;
  82e2b0:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  82e2b4:	f800283a 	ret

0082e2b8 <Read_File_Record_At_Offset>:
bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  82e2b8:	208007cc 	andi	r2,r4,31
}

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  82e2bc:	2013883a 	mov	r9,r4
  82e2c0:	2811883a 	mov	r8,r5
  82e2c4:	3015883a 	mov	r10,r6
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  82e2c8:	1000631e 	bne	r2,zero,82e458 <Read_File_Record_At_Offset+0x1a0>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82e2cc:	d1277a17 	ldw	r4,-25112(gp)
  82e2d0:	20005e26 	beq	r4,zero,82e44c <Read_File_Record_At_Offset+0x194>
  82e2d4:	d0e77217 	ldw	r3,-25144(gp)
  82e2d8:	1880002b 	ldhuio	r2,0(r3)
  82e2dc:	1080008c 	andi	r2,r2,2
  82e2e0:	10005a26 	beq	r2,zero,82e44c <Read_File_Record_At_Offset+0x194>
bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  82e2e4:	d0a77117 	ldw	r2,-25148(gp)
  82e2e8:	10005b26 	beq	r2,zero,82e458 <Read_File_Record_At_Offset+0x1a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
  82e2ec:	20800a17 	ldw	r2,40(r4)
  82e2f0:	4885883a 	add	r2,r9,r2
  82e2f4:	10c00023 	ldbuio	r3,0(r2)
  82e2f8:	28c00005 	stb	r3,0(r5)
  82e2fc:	d0e77a17 	ldw	r3,-25112(gp)
  82e300:	49800044 	addi	r6,r9,1
  82e304:	18800a17 	ldw	r2,40(r3)
  82e308:	3085883a 	add	r2,r6,r2
  82e30c:	10c00023 	ldbuio	r3,0(r2)
  82e310:	28c00045 	stb	r3,1(r5)
  82e314:	d0e77a17 	ldw	r3,-25112(gp)
  82e318:	49400084 	addi	r5,r9,2
  82e31c:	18800a17 	ldw	r2,40(r3)
  82e320:	2885883a 	add	r2,r5,r2
  82e324:	10c00023 	ldbuio	r3,0(r2)
  82e328:	40c00085 	stb	r3,2(r8)
  82e32c:	d0e77a17 	ldw	r3,-25112(gp)
  82e330:	488000c4 	addi	r2,r9,3
  82e334:	19000a17 	ldw	r4,40(r3)
  82e338:	1105883a 	add	r2,r2,r4
  82e33c:	10c00023 	ldbuio	r3,0(r2)
  82e340:	40c000c5 	stb	r3,3(r8)
  82e344:	d0e77a17 	ldw	r3,-25112(gp)
  82e348:	48800104 	addi	r2,r9,4
  82e34c:	19000a17 	ldw	r4,40(r3)
  82e350:	1105883a 	add	r2,r2,r4
  82e354:	10c00023 	ldbuio	r3,0(r2)
  82e358:	40c00105 	stb	r3,4(r8)
  82e35c:	d0e77a17 	ldw	r3,-25112(gp)
  82e360:	48800144 	addi	r2,r9,5
  82e364:	19000a17 	ldw	r4,40(r3)
  82e368:	1105883a 	add	r2,r2,r4
  82e36c:	10c00023 	ldbuio	r3,0(r2)
  82e370:	40c00145 	stb	r3,5(r8)
  82e374:	d0e77a17 	ldw	r3,-25112(gp)
  82e378:	48800184 	addi	r2,r9,6
  82e37c:	19000a17 	ldw	r4,40(r3)
  82e380:	1105883a 	add	r2,r2,r4
  82e384:	10c00023 	ldbuio	r3,0(r2)
  82e388:	40c00185 	stb	r3,6(r8)
  82e38c:	d0e77a17 	ldw	r3,-25112(gp)
  82e390:	488001c4 	addi	r2,r9,7
  82e394:	19000a17 	ldw	r4,40(r3)
  82e398:	1105883a 	add	r2,r2,r4
  82e39c:	10c00023 	ldbuio	r3,0(r2)
  82e3a0:	40c001c5 	stb	r3,7(r8)
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
			record->extension[counter]
  82e3a4:	d1277a17 	ldw	r4,-25112(gp)
  82e3a8:	20800a17 	ldw	r2,40(r4)
  82e3ac:	4885883a 	add	r2,r9,r2
  82e3b0:	10c00223 	ldbuio	r3,8(r2)
  82e3b4:	40c00205 	stb	r3,8(r8)
  82e3b8:	d0a77a17 	ldw	r2,-25112(gp)
  82e3bc:	10c00a17 	ldw	r3,40(r2)
  82e3c0:	30cd883a 	add	r6,r6,r3
  82e3c4:	30800223 	ldbuio	r2,8(r6)
  82e3c8:	40800245 	stb	r2,9(r8)
  82e3cc:	d0e77a17 	ldw	r3,-25112(gp)
  82e3d0:	18800a17 	ldw	r2,40(r3)
  82e3d4:	288b883a 	add	r5,r5,r2
  82e3d8:	28c00223 	ldbuio	r3,8(r5)
  82e3dc:	40c00285 	stb	r3,10(r8)
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  82e3e0:	d1277a17 	ldw	r4,-25112(gp)
  82e3e4:	20800a17 	ldw	r2,40(r4)
  82e3e8:	4885883a 	add	r2,r9,r2
  82e3ec:	10c002e3 	ldbuio	r3,11(r2)
  82e3f0:	40c002c5 	stb	r3,11(r8)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  82e3f4:	d1277a17 	ldw	r4,-25112(gp)
  82e3f8:	20800a17 	ldw	r2,40(r4)
  82e3fc:	4885883a 	add	r2,r9,r2
  82e400:	10c003ab 	ldhuio	r3,14(r2)
  82e404:	40c0030d 	sth	r3,12(r8)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  82e408:	1100042b 	ldhuio	r4,16(r2)
  82e40c:	4100038d 	sth	r4,14(r8)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  82e410:	10c004ab 	ldhuio	r3,18(r2)
  82e414:	40c0040d 	sth	r3,16(r8)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  82e418:	110005ab 	ldhuio	r4,22(r2)
  82e41c:	4100048d 	sth	r4,18(r8)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  82e420:	10c0062b 	ldhuio	r3,24(r2)
  82e424:	40c0050d 	sth	r3,20(r8)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  82e428:	110006ab 	ldhuio	r4,26(r2)
  82e42c:	4100058d 	sth	r4,22(r8)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  82e430:	10c00737 	ldwio	r3,28(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  82e434:	00800044 	movi	r2,1
  82e438:	42400c0d 	sth	r9,48(r8)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  82e43c:	40c00615 	stw	r3,24(r8)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  82e440:	42800a15 	stw	r10,40(r8)
		record->file_record_sector_in_cluster = sector_in_cluster;
  82e444:	41c00b15 	stw	r7,44(r8)
  82e448:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82e44c:	d0e77017 	ldw	r3,-25152(gp)
  82e450:	00800044 	movi	r2,1
  82e454:	18800226 	beq	r3,r2,82e460 <Read_File_Record_At_Offset+0x1a8>
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  82e458:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  82e45c:	f800283a 	ret
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82e460:	00802174 	movhi	r2,133
  82e464:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82e468:	00c02174 	movhi	r3,133
  82e46c:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82e470:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82e474:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82e478:	d0277115 	stw	zero,-25148(gp)
  82e47c:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82e480:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82e484:	183fff15 	stw	zero,-4(r3)
  82e488:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82e48c:	18bffc1e 	bne	r3,r2,82e480 <Read_File_Record_At_Offset+0x1c8>
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  82e490:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  82e494:	f800283a 	ret

0082e498 <Write_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82e498:	d0a77a17 	ldw	r2,-25112(gp)
  82e49c:	10000426 	beq	r2,zero,82e4b0 <Write_Sector_Data+0x18>
  82e4a0:	d0e77217 	ldw	r3,-25144(gp)
  82e4a4:	1880002b 	ldhuio	r2,0(r3)
  82e4a8:	1080008c 	andi	r2,r2,2
  82e4ac:	1000131e 	bne	r2,zero,82e4fc <Write_Sector_Data+0x64>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82e4b0:	d0e77017 	ldw	r3,-25152(gp)
  82e4b4:	00800044 	movi	r2,1
  82e4b8:	18800226 	beq	r3,r2,82e4c4 <Write_Sector_Data+0x2c>
		} while ((reg_state & 0x04) != 0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
			result = true;
			current_sector_modified = false;
			current_sector_index = sector_index + partition_offset;
  82e4bc:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  82e4c0:	f800283a 	ret
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82e4c4:	00802174 	movhi	r2,133
  82e4c8:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82e4cc:	00c02174 	movhi	r3,133
  82e4d0:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82e4d4:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82e4d8:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82e4dc:	d0277115 	stw	zero,-25148(gp)
  82e4e0:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82e4e4:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82e4e8:	183fff15 	stw	zero,-4(r3)
  82e4ec:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82e4f0:	18bffc1e 	bne	r3,r2,82e4e4 <Write_Sector_Data+0x4c>
		} while ((reg_state & 0x04) != 0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
			result = true;
			current_sector_modified = false;
			current_sector_index = sector_index + partition_offset;
  82e4f4:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  82e4f8:	f800283a 	ret
	if (alt_up_sd_card_is_Present()) {
		short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  82e4fc:	214b883a 	add	r5,r4,r5
  82e500:	2806927a 	slli	r3,r5,9
  82e504:	d0a77617 	ldw	r2,-25128(gp)
  82e508:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  82e50c:	d0a77517 	ldw	r2,-25132(gp)
  82e510:	01000604 	movi	r4,24
  82e514:	1100002d 	sthio	r4,0(r2)
  82e518:	d1277217 	ldw	r4,-25144(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  82e51c:	2080002b 	ldhuio	r2,0(r4)
		} while ((reg_state & 0x04) != 0);
  82e520:	10bfffcc 	andi	r2,r2,65535
  82e524:	10c0010c 	andi	r3,r2,4
  82e528:	183ffc1e 	bne	r3,zero,82e51c <Write_Sector_Data+0x84>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  82e52c:	1080040c 	andi	r2,r2,16
  82e530:	103fe21e 	bne	r2,zero,82e4bc <Write_Sector_Data+0x24>
			result = true;
			current_sector_modified = false;
			current_sector_index = sector_index + partition_offset;
  82e534:	00800044 	movi	r2,1
  82e538:	d1677c15 	stw	r5,-25104(gp)
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
		} while ((reg_state & 0x04) != 0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
			result = true;
			current_sector_modified = false;
  82e53c:	d0277b15 	stw	zero,-25108(gp)
  82e540:	f800283a 	ret

0082e544 <Read_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82e544:	d0a77a17 	ldw	r2,-25112(gp)
	return result;
}

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  82e548:	defffd04 	addi	sp,sp,-12
  82e54c:	dc400115 	stw	r17,4(sp)
  82e550:	dc000015 	stw	r16,0(sp)
  82e554:	dfc00215 	stw	ra,8(sp)
  82e558:	2023883a 	mov	r17,r4
  82e55c:	2821883a 	mov	r16,r5
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82e560:	10001c26 	beq	r2,zero,82e5d4 <Read_Sector_Data+0x90>
  82e564:	d0e77217 	ldw	r3,-25144(gp)
  82e568:	1880002b 	ldhuio	r2,0(r3)
  82e56c:	1080008c 	andi	r2,r2,2
  82e570:	10001826 	beq	r2,zero,82e5d4 <Read_Sector_Data+0x90>

	if (alt_up_sd_card_is_Present()) {
		short int reg_state = 0xff;

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  82e574:	d0a77b17 	ldw	r2,-25108(gp)
  82e578:	10002c1e 	bne	r2,zero,82e62c <Read_Sector_Data+0xe8>
				return false;
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  82e57c:	8c0b883a 	add	r5,r17,r16
  82e580:	2806927a 	slli	r3,r5,9
  82e584:	d0a77617 	ldw	r2,-25128(gp)
  82e588:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  82e58c:	d0a77517 	ldw	r2,-25132(gp)
  82e590:	01000444 	movi	r4,17
  82e594:	1100002d 	sthio	r4,0(r2)
  82e598:	d1277217 	ldw	r4,-25144(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  82e59c:	2080002b 	ldhuio	r2,0(r4)
		} while ((reg_state & 0x04) != 0);
  82e5a0:	10bfffcc 	andi	r2,r2,65535
  82e5a4:	10c0010c 	andi	r3,r2,4
  82e5a8:	183ffc1e 	bne	r3,zero,82e59c <Read_Sector_Data+0x58>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  82e5ac:	1080040c 	andi	r2,r2,16
  82e5b0:	10000b1e 	bne	r2,zero,82e5e0 <Read_Sector_Data+0x9c>
			result = true;
			current_sector_modified = false;
			current_sector_index = sector_index + partition_offset;
  82e5b4:	00800044 	movi	r2,1
  82e5b8:	d1677c15 	stw	r5,-25104(gp)
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
		} while ((reg_state & 0x04) != 0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
			result = true;
			current_sector_modified = false;
  82e5bc:	d0277b15 	stw	zero,-25108(gp)
			current_sector_index = sector_index + partition_offset;
		}
	}
	return result;
}
  82e5c0:	dfc00217 	ldw	ra,8(sp)
  82e5c4:	dc400117 	ldw	r17,4(sp)
  82e5c8:	dc000017 	ldw	r16,0(sp)
  82e5cc:	dec00304 	addi	sp,sp,12
  82e5d0:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82e5d4:	d0e77017 	ldw	r3,-25152(gp)
  82e5d8:	00800044 	movi	r2,1
  82e5dc:	18800626 	beq	r3,r2,82e5f8 <Read_Sector_Data+0xb4>
		} while ((reg_state & 0x04) != 0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
			result = true;
			current_sector_modified = false;
			current_sector_index = sector_index + partition_offset;
  82e5e0:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  82e5e4:	dfc00217 	ldw	ra,8(sp)
  82e5e8:	dc400117 	ldw	r17,4(sp)
  82e5ec:	dc000017 	ldw	r16,0(sp)
  82e5f0:	dec00304 	addi	sp,sp,12
  82e5f4:	f800283a 	ret
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82e5f8:	00802174 	movhi	r2,133
  82e5fc:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82e600:	00c02174 	movhi	r3,133
  82e604:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82e608:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82e60c:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82e610:	d0277115 	stw	zero,-25148(gp)
  82e614:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82e618:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82e61c:	183fff15 	stw	zero,-4(r3)
  82e620:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82e624:	18bffc1e 	bne	r3,r2,82e618 <Read_Sector_Data+0xd4>
  82e628:	003fed06 	br	82e5e0 <Read_Sector_Data+0x9c>
	if (alt_up_sd_card_is_Present()) {
		short int reg_state = 0xff;

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  82e62c:	d1277c17 	ldw	r4,-25104(gp)
  82e630:	000b883a 	mov	r5,zero
  82e634:	082e4980 	call	82e498 <Write_Sector_Data>
  82e638:	103fd01e 	bne	r2,zero,82e57c <Read_Sector_Data+0x38>
  82e63c:	003fe806 	br	82e5e0 <Read_Sector_Data+0x9c>

0082e640 <find_first_empty_record_in_root_directory>:
	return result;
}

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  82e640:	defffc04 	addi	sp,sp,-16
  82e644:	dc800215 	stw	r18,8(sp)
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  82e648:	04802174 	movhi	r18,133
  82e64c:	94b3b004 	addi	r18,r18,-12608
  82e650:	9180050b 	ldhu	r6,20(r18)
  82e654:	9140030b 	ldhu	r5,12(r18)
  82e658:	008003c4 	movi	r2,15
  82e65c:	3008917a 	slli	r4,r6,5
	return result;
}

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  82e660:	dfc00315 	stw	ra,12(sp)
  82e664:	dc400115 	stw	r17,4(sp)
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  82e668:	2146b03a 	or	r3,r4,r5
	return result;
}

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  82e66c:	dc000015 	stw	r16,0(sp)
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  82e670:	10c02836 	bltu	r2,r3,82e714 <find_first_empty_record_in_root_directory+0xd4>
  82e674:	3004927a 	slli	r2,r6,9
  82e678:	00c02134 	movhi	r3,132
  82e67c:	18fbb104 	addi	r3,r3,-4412
  82e680:	1144b03a 	or	r2,r2,r5
  82e684:	10c5883a 	add	r2,r2,r3
  82e688:	14400003 	ldbu	r17,0(r2)
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  82e68c:	0440170e 	bge	zero,r17,82e6ec <find_first_empty_record_in_root_directory+0xac>
  82e690:	0021883a 	mov	r16,zero
		if (Read_Sector_Data(sector_index
  82e694:	91001317 	ldw	r4,76(r18)
  82e698:	d1677817 	ldw	r5,-25120(gp)
  82e69c:	8109883a 	add	r4,r16,r4
  82e6a0:	082e5440 	call	82e544 <Read_Sector_Data>
  82e6a4:	10001126 	beq	r2,zero,82e6ec <find_first_empty_record_in_root_directory+0xac>
  82e6a8:	d0a77a17 	ldw	r2,-25112(gp)
  82e6ac:	8012913a 	slli	r9,r16,4
					result = (sector_index * 16 + file_counter) << 16;
					return result;
				}
			}
		} else {
			break;
  82e6b0:	000b883a 	mov	r5,zero
  82e6b4:	11800a17 	ldw	r6,40(r2)
  82e6b8:	0009883a 	mov	r4,zero
  82e6bc:	02003944 	movi	r8,229
  82e6c0:	01c00404 	movi	r7,16

			for (file_counter = 0; file_counter < 16; file_counter++) {
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  82e6c4:	2185883a 	add	r2,r4,r6
  82e6c8:	10c00023 	ldbuio	r3,0(r2)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  82e6cc:	18c03fcc 	andi	r3,r3,255
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  82e6d0:	21000804 	addi	r4,r4,32
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  82e6d4:	1a000726 	beq	r3,r8,82e6f4 <find_first_empty_record_in_root_directory+0xb4>
  82e6d8:	18000626 	beq	r3,zero,82e6f4 <find_first_empty_record_in_root_directory+0xb4>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  82e6dc:	29400044 	addi	r5,r5,1
  82e6e0:	29fff81e 	bne	r5,r7,82e6c4 <find_first_empty_record_in_root_directory+0x84>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  82e6e4:	84000044 	addi	r16,r16,1
  82e6e8:	8c3fea1e 	bne	r17,r16,82e694 <find_first_empty_record_in_root_directory+0x54>
  82e6ec:	00bfffc4 	movi	r2,-1
  82e6f0:	00000206 	br	82e6fc <find_first_empty_record_in_root_directory+0xbc>

				// Read first character of the file record.
				leading_char
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
					result = (sector_index * 16 + file_counter) << 16;
  82e6f4:	4945883a 	add	r2,r9,r5
  82e6f8:	1004943a 	slli	r2,r2,16
		} else {
			break;
		}
	}
	return result;
}
  82e6fc:	dfc00317 	ldw	ra,12(sp)
  82e700:	dc800217 	ldw	r18,8(sp)
  82e704:	dc400117 	ldw	r17,4(sp)
  82e708:	dc000017 	ldw	r16,0(sp)
  82e70c:	dec00404 	addi	sp,sp,16
  82e710:	f800283a 	ret
int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  82e714:	0820b480 	call	820b48 <__divsi3>
  82e718:	1023883a 	mov	r17,r2
  82e71c:	003fdb06 	br	82e68c <find_first_empty_record_in_root_directory+0x4c>

0082e720 <find_first_empty_cluster>:
	return result;
}

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  82e720:	defffa04 	addi	sp,sp,-24
  82e724:	dcc00315 	stw	r19,12(sp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  82e728:	04c02174 	movhi	r19,133
  82e72c:	9cf3b004 	addi	r19,r19,-12608
	return result;
}

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  82e730:	dc800215 	stw	r18,8(sp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  82e734:	98801217 	ldw	r2,72(r19)
}

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  82e738:	9c801117 	ldw	r18,68(r19)
	return result;
}

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  82e73c:	dd000415 	stw	r20,16(sp)
  82e740:	dfc00515 	stw	ra,20(sp)
  82e744:	dc400115 	stw	r17,4(sp)
  82e748:	dc000015 	stw	r16,0(sp)
  82e74c:	2029883a 	mov	r20,r4
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  82e750:	90801926 	beq	r18,r2,82e7b8 <find_first_empty_cluster+0x98>
  82e754:	04400084 	movi	r17,2
  82e758:	043fffc4 	movi	r16,-1
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  82e75c:	d1677817 	ldw	r5,-25120(gp)
  82e760:	9009883a 	mov	r4,r18
  82e764:	082e5440 	call	82e544 <Read_Sector_Data>
  82e768:	10001c26 	beq	r2,zero,82e7dc <find_first_empty_cluster+0xbc>
  82e76c:	d0a77a17 	ldw	r2,-25112(gp)
  82e770:	88c03fcc 	andi	r3,r17,255
  82e774:	11000a17 	ldw	r4,40(r2)
			do {
				cluster
  82e778:	18c5883a 	add	r2,r3,r3
  82e77c:	1105883a 	add	r2,r2,r4
  82e780:	10c0002b 	ldhuio	r3,0(r2)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  82e784:	18bfffcc 	andi	r2,r3,65535
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster
  82e788:	1821883a 	mov	r16,r3
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  82e78c:	10001726 	beq	r2,zero,82e7ec <find_first_empty_cluster+0xcc>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  82e790:	8c400044 	addi	r17,r17,1
				}
			} while ((cluster_index % 256) != 0);
  82e794:	88c03fcc 	andi	r3,r17,255
  82e798:	183ff71e 	bne	r3,zero,82e778 <find_first_empty_cluster+0x58>
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  82e79c:	98801217 	ldw	r2,72(r19)
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
			break;
		}
		sector++;
  82e7a0:	94800044 	addi	r18,r18,1
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  82e7a4:	14bfed1e 	bne	r2,r18,82e75c <find_first_empty_cluster+0x3c>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  82e7a8:	80bfffcc 	andi	r2,r16,65535
  82e7ac:	10a0001c 	xori	r2,r2,32768
  82e7b0:	10a00004 	addi	r2,r2,-32768
  82e7b4:	10000d26 	beq	r2,zero,82e7ec <find_first_empty_cluster+0xcc>
		*cluster_number = cluster_index;
  82e7b8:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  82e7bc:	dfc00517 	ldw	ra,20(sp)
  82e7c0:	dd000417 	ldw	r20,16(sp)
  82e7c4:	dcc00317 	ldw	r19,12(sp)
  82e7c8:	dc800217 	ldw	r18,8(sp)
  82e7cc:	dc400117 	ldw	r17,4(sp)
  82e7d0:	dc000017 	ldw	r16,0(sp)
  82e7d4:	dec00604 	addi	sp,sp,24
  82e7d8:	f800283a 	ret
				} else {
					cluster_index++;
				}
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
  82e7dc:	80bfffcc 	andi	r2,r16,65535
  82e7e0:	10a0001c 	xori	r2,r2,32768
  82e7e4:	10a00004 	addi	r2,r2,-32768
  82e7e8:	103fec1e 	bne	r2,zero,82e79c <find_first_empty_cluster+0x7c>
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
		*cluster_number = cluster_index;
  82e7ec:	00800044 	movi	r2,1
  82e7f0:	a4400015 	stw	r17,0(r20)
		result = true;
	}
	return result;
}
  82e7f4:	dfc00517 	ldw	ra,20(sp)
  82e7f8:	dd000417 	ldw	r20,16(sp)
  82e7fc:	dcc00317 	ldw	r19,12(sp)
  82e800:	dc800217 	ldw	r18,8(sp)
  82e804:	dc400117 	ldw	r17,4(sp)
  82e808:	dc000017 	ldw	r16,0(sp)
  82e80c:	dec00604 	addi	sp,sp,24
  82e810:	f800283a 	ret

0082e814 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  82e814:	2006d23a 	srli	r3,r4,8
  82e818:	d0a77817 	ldw	r2,-25120(gp)
	return true;
}

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  82e81c:	defffd04 	addi	sp,sp,-12
  82e820:	dc400115 	stw	r17,4(sp)
  82e824:	dc000015 	stw	r16,0(sp)
  82e828:	dfc00215 	stw	ra,8(sp)
  82e82c:	2021883a 	mov	r16,r4
  82e830:	2823883a 	mov	r17,r5
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  82e834:	1889883a 	add	r4,r3,r2

	if (first_fat) {
  82e838:	30001d26 	beq	r6,zero,82e8b0 <mark_cluster+0x9c>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  82e83c:	00802174 	movhi	r2,133
  82e840:	10b3b004 	addi	r2,r2,-12608
  82e844:	10c01117 	ldw	r3,68(r2)
  82e848:	20c7883a 	add	r3,r4,r3
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  82e84c:	d0a77c17 	ldw	r2,-25104(gp)
		if (Read_Sector_Data(sector_index, 0) == false) {
  82e850:	1809883a 	mov	r4,r3
  82e854:	000b883a 	mov	r5,zero
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  82e858:	18800326 	beq	r3,r2,82e868 <mark_cluster+0x54>
		if (Read_Sector_Data(sector_index, 0) == false) {
  82e85c:	082e5440 	call	82e544 <Read_Sector_Data>
  82e860:	0007883a 	mov	r3,zero
  82e864:	10000c26 	beq	r2,zero,82e898 <mark_cluster+0x84>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  82e868:	d0e77a17 	ldw	r3,-25112(gp)
  82e86c:	80803fcc 	andi	r2,r16,255
  82e870:	897fffcc 	andi	r5,r17,65535
  82e874:	19000a17 	ldw	r4,40(r3)
  82e878:	2960001c 	xori	r5,r5,32768
  82e87c:	1085883a 	add	r2,r2,r2
  82e880:	29600004 	addi	r5,r5,-32768
  82e884:	1105883a 	add	r2,r2,r4
  82e888:	1140002d 	sthio	r5,0(r2)
	current_sector_modified = true;
  82e88c:	00800044 	movi	r2,1
  82e890:	d0a77b15 	stw	r2,-25108(gp)
  82e894:	1007883a 	mov	r3,r2
	return true;
}
  82e898:	1805883a 	mov	r2,r3
  82e89c:	dfc00217 	ldw	ra,8(sp)
  82e8a0:	dc400117 	ldw	r17,4(sp)
  82e8a4:	dc000017 	ldw	r16,0(sp)
  82e8a8:	dec00304 	addi	sp,sp,12
  82e8ac:	f800283a 	ret
			+ fat_partition_offset_in_512_byte_sectors;

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  82e8b0:	00802174 	movhi	r2,133
  82e8b4:	10b3b004 	addi	r2,r2,-12608
  82e8b8:	10c01217 	ldw	r3,72(r2)
  82e8bc:	20c7883a 	add	r3,r4,r3
  82e8c0:	003fe206 	br	82e84c <mark_cluster+0x38>

0082e8c4 <get_cluster_flag>:
	return result;
}

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  82e8c4:	defffd04 	addi	sp,sp,-12
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  82e8c8:	00802174 	movhi	r2,133
  82e8cc:	10b3b004 	addi	r2,r2,-12608
	return result;
}

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  82e8d0:	dc000015 	stw	r16,0(sp)
  82e8d4:	2021883a 	mov	r16,r4
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  82e8d8:	11001117 	ldw	r4,68(r2)
  82e8dc:	d0a77817 	ldw	r2,-25120(gp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  82e8e0:	8006d23a 	srli	r3,r16,8
	return result;
}

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  82e8e4:	dc400115 	stw	r17,4(sp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  82e8e8:	1105883a 	add	r2,r2,r4

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  82e8ec:	1887883a 	add	r3,r3,r2

	if (sector_index != current_sector_index) {
  82e8f0:	d0a77c17 	ldw	r2,-25104(gp)
	return result;
}

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  82e8f4:	2823883a 	mov	r17,r5
  82e8f8:	dfc00215 	stw	ra,8(sp)
			+ fat_partition_offset_in_512_byte_sectors;

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;

	if (sector_index != current_sector_index) {
		if (Read_Sector_Data(sector_index, 0) == false) {
  82e8fc:	1809883a 	mov	r4,r3
  82e900:	000b883a 	mov	r5,zero
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;

	if (sector_index != current_sector_index) {
  82e904:	18800326 	beq	r3,r2,82e914 <get_cluster_flag+0x50>
		if (Read_Sector_Data(sector_index, 0) == false) {
  82e908:	082e5440 	call	82e544 <Read_Sector_Data>
  82e90c:	0009883a 	mov	r4,zero
  82e910:	10000826 	beq	r2,zero,82e934 <get_cluster_flag+0x70>
			return false;
		}
	}
	*flag
  82e914:	d0e77a17 	ldw	r3,-25112(gp)
  82e918:	80803fcc 	andi	r2,r16,255
  82e91c:	1085883a 	add	r2,r2,r2
  82e920:	19000a17 	ldw	r4,40(r3)
  82e924:	1105883a 	add	r2,r2,r4
  82e928:	10c0002b 	ldhuio	r3,0(r2)
  82e92c:	01000044 	movi	r4,1
  82e930:	88c0000d 	sth	r3,0(r17)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
}
  82e934:	2005883a 	mov	r2,r4
  82e938:	dfc00217 	ldw	ra,8(sp)
  82e93c:	dc400117 	ldw	r17,4(sp)
  82e940:	dc000017 	ldw	r16,0(sp)
  82e944:	dec00304 	addi	sp,sp,12
  82e948:	f800283a 	ret

0082e94c <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
	bool result = true;
	if (current_sector_modified) {
  82e94c:	d0e77b17 	ldw	r3,-25108(gp)
		result = Write_Sector_Data(current_sector_index, 0);
  82e950:	000b883a 	mov	r5,zero
	}
	return result;
}
  82e954:	00800044 	movi	r2,1

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
	bool result = true;
	if (current_sector_modified) {
  82e958:	1800011e 	bne	r3,zero,82e960 <Save_Modified_Sector+0x14>
		result = Write_Sector_Data(current_sector_index, 0);
	}
	return result;
}
  82e95c:	f800283a 	ret
bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
	bool result = true;
	if (current_sector_modified) {
		result = Write_Sector_Data(current_sector_index, 0);
  82e960:	d1277c17 	ldw	r4,-25104(gp)
  82e964:	082e4981 	jmpi	82e498 <Write_Sector_Data>

0082e968 <alt_up_sd_card_fclose>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82e968:	d0a77a17 	ldw	r2,-25112(gp)
	return result;
}

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  82e96c:	defffc04 	addi	sp,sp,-16
  82e970:	dfc00315 	stw	ra,12(sp)
  82e974:	dc800215 	stw	r18,8(sp)
  82e978:	dc400115 	stw	r17,4(sp)
  82e97c:	dc000015 	stw	r16,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82e980:	10003026 	beq	r2,zero,82ea44 <alt_up_sd_card_fclose+0xdc>
  82e984:	d0e77217 	ldw	r3,-25144(gp)
  82e988:	1880002b 	ldhuio	r2,0(r3)
  82e98c:	1080008c 	andi	r2,r2,2
  82e990:	10002c26 	beq	r2,zero,82ea44 <alt_up_sd_card_fclose+0xdc>

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
	bool result = false;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  82e994:	d0a77117 	ldw	r2,-25148(gp)
  82e998:	10002d26 	beq	r2,zero,82ea50 <alt_up_sd_card_fclose+0xe8>
		if (active_files[file_handle].in_use) {
  82e99c:	24bfffcc 	andi	r18,r4,65535
  82e9a0:	94a0001c 	xori	r18,r18,32768
  82e9a4:	94a00004 	addi	r18,r18,-32768
  82e9a8:	902091ba 	slli	r16,r18,6
  82e9ac:	04402174 	movhi	r17,133
  82e9b0:	8c73c504 	addi	r17,r17,-12524
  82e9b4:	8449883a 	add	r4,r16,r17
  82e9b8:	20800f17 	ldw	r2,60(r4)
  82e9bc:	10002426 	beq	r2,zero,82ea50 <alt_up_sd_card_fclose+0xe8>
			if (active_files[file_handle].modified) {
  82e9c0:	20800e17 	ldw	r2,56(r4)
  82e9c4:	10001526 	beq	r2,zero,82ea1c <alt_up_sd_card_fclose+0xb4>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
				if (active_files[file_handle].file_record_cluster == 0) {
  82e9c8:	20c00a17 	ldw	r3,40(r4)
	bool result = false;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
		if (active_files[file_handle].in_use) {
			if (active_files[file_handle].modified) {
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  82e9cc:	21800b17 	ldw	r6,44(r4)
				if (active_files[file_handle].file_record_cluster == 0) {
  82e9d0:	1800341e 	bne	r3,zero,82eaa4 <alt_up_sd_card_fclose+0x13c>
					record_sector = record_sector
  82e9d4:	00802174 	movhi	r2,133
  82e9d8:	10b3b004 	addi	r2,r2,-12608
  82e9dc:	10c01317 	ldw	r3,76(r2)
  82e9e0:	30c9883a 	add	r4,r6,r3
					record_sector = record_sector
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  82e9e4:	d1677817 	ldw	r5,-25120(gp)
  82e9e8:	082e5440 	call	82e544 <Read_Sector_Data>
  82e9ec:	10000b26 	beq	r2,zero,82ea1c <alt_up_sd_card_fclose+0xb4>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  82e9f0:	900a91ba 	slli	r5,r18,6
  82e9f4:	8445883a 	add	r2,r16,r17
  82e9f8:	11000c0f 	ldh	r4,48(r2)
  82e9fc:	2c4b883a 	add	r5,r5,r17
  82ea00:	082e0940 	call	82e094 <Write_File_Record_At_Offset>
  82ea04:	10000526 	beq	r2,zero,82ea1c <alt_up_sd_card_fclose+0xb4>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
	bool result = true;
	if (current_sector_modified) {
  82ea08:	d0a77b17 	ldw	r2,-25108(gp)
  82ea0c:	10000326 	beq	r2,zero,82ea1c <alt_up_sd_card_fclose+0xb4>
		result = Write_Sector_Data(current_sector_index, 0);
  82ea10:	d1277c17 	ldw	r4,-25104(gp)
  82ea14:	000b883a 	mov	r5,zero
  82ea18:	082e4980 	call	82e498 <Write_Sector_Data>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
  82ea1c:	8445883a 	add	r2,r16,r17
  82ea20:	00c00044 	movi	r3,1
  82ea24:	10000f15 	stw	zero,60(r2)
			result = true;
		}
	}

	return result;
}
  82ea28:	1805883a 	mov	r2,r3
  82ea2c:	dfc00317 	ldw	ra,12(sp)
  82ea30:	dc800217 	ldw	r18,8(sp)
  82ea34:	dc400117 	ldw	r17,4(sp)
  82ea38:	dc000017 	ldw	r16,0(sp)
  82ea3c:	dec00404 	addi	sp,sp,16
  82ea40:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82ea44:	d0e77017 	ldw	r3,-25152(gp)
  82ea48:	00800044 	movi	r2,1
  82ea4c:	18800826 	beq	r3,r2,82ea70 <alt_up_sd_card_fclose+0x108>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
  82ea50:	0007883a 	mov	r3,zero
			result = true;
		}
	}

	return result;
}
  82ea54:	1805883a 	mov	r2,r3
  82ea58:	dfc00317 	ldw	ra,12(sp)
  82ea5c:	dc800217 	ldw	r18,8(sp)
  82ea60:	dc400117 	ldw	r17,4(sp)
  82ea64:	dc000017 	ldw	r16,0(sp)
  82ea68:	dec00404 	addi	sp,sp,16
  82ea6c:	f800283a 	ret
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82ea70:	00802174 	movhi	r2,133
  82ea74:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82ea78:	00c02174 	movhi	r3,133
  82ea7c:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82ea80:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82ea84:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82ea88:	d0277115 	stw	zero,-25148(gp)
  82ea8c:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82ea90:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82ea94:	183fff15 	stw	zero,-4(r3)
  82ea98:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82ea9c:	18bffc1e 	bne	r3,r2,82ea90 <alt_up_sd_card_fclose+0x128>
  82eaa0:	003feb06 	br	82ea50 <alt_up_sd_card_fclose+0xe8>
						active_files[file_handle].file_record_sector_in_cluster;
				if (active_files[file_handle].file_record_cluster == 0) {
					record_sector = record_sector
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  82eaa4:	01002174 	movhi	r4,133
  82eaa8:	2133b004 	addi	r4,r4,-12608
  82eaac:	21400383 	ldbu	r5,14(r4)
  82eab0:	20801417 	ldw	r2,80(r4)
  82eab4:	18ffff84 	addi	r3,r3,-2
  82eab8:	1947383a 	mul	r3,r3,r5
  82eabc:	3085883a 	add	r2,r6,r2
  82eac0:	10c9883a 	add	r4,r2,r3
  82eac4:	003fc706 	br	82e9e4 <alt_up_sd_card_fclose+0x7c>

0082eac8 <Read_Sector_Data_CRC>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82eac8:	d0a77a17 	ldw	r2,-25112(gp)
	return result;
}

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  82eacc:	defffd04 	addi	sp,sp,-12
  82ead0:	dc400115 	stw	r17,4(sp)
  82ead4:	dc000015 	stw	r16,0(sp)
  82ead8:	dfc00215 	stw	ra,8(sp)
  82eadc:	2023883a 	mov	r17,r4
  82eae0:	2821883a 	mov	r16,r5
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82eae4:	10001c26 	beq	r2,zero,82eb58 <Read_Sector_Data_CRC+0x90>
  82eae8:	d0e77217 	ldw	r3,-25144(gp)
  82eaec:	1880002b 	ldhuio	r2,0(r3)
  82eaf0:	1080008c 	andi	r2,r2,2
  82eaf4:	10001826 	beq	r2,zero,82eb58 <Read_Sector_Data_CRC+0x90>

	if (alt_up_sd_card_is_Present()) {
		short int reg_state = 0xff;

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  82eaf8:	d0a77b17 	ldw	r2,-25108(gp)
  82eafc:	10002c1e 	bne	r2,zero,82ebb0 <Read_Sector_Data_CRC+0xe8>
				return false;
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  82eb00:	8c0b883a 	add	r5,r17,r16
  82eb04:	2806927a 	slli	r3,r5,9
  82eb08:	d0a77617 	ldw	r2,-25128(gp)
  82eb0c:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  82eb10:	d0a77517 	ldw	r2,-25132(gp)
  82eb14:	01000444 	movi	r4,17
  82eb18:	1100002d 	sthio	r4,0(r2)
  82eb1c:	d1277217 	ldw	r4,-25144(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  82eb20:	2080002b 	ldhuio	r2,0(r4)
		} while ((reg_state & 0x04) != 0);
  82eb24:	10bfffcc 	andi	r2,r2,65535
  82eb28:	10c0010c 	andi	r3,r2,4
  82eb2c:	183ffc1e 	bne	r3,zero,82eb20 <Read_Sector_Data_CRC+0x58>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  82eb30:	10800c0c 	andi	r2,r2,48
  82eb34:	10000b1e 	bne	r2,zero,82eb64 <Read_Sector_Data_CRC+0x9c>
			result = true;
			current_sector_modified = false;
			current_sector_index = sector_index + partition_offset;
  82eb38:	00800044 	movi	r2,1
  82eb3c:	d1677c15 	stw	r5,-25104(gp)
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
		} while ((reg_state & 0x04) != 0);
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
			result = true;
			current_sector_modified = false;
  82eb40:	d0277b15 	stw	zero,-25108(gp)
			current_sector_index = sector_index + partition_offset;
		}
	}
	return result;
}
  82eb44:	dfc00217 	ldw	ra,8(sp)
  82eb48:	dc400117 	ldw	r17,4(sp)
  82eb4c:	dc000017 	ldw	r16,0(sp)
  82eb50:	dec00304 	addi	sp,sp,12
  82eb54:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82eb58:	d0e77017 	ldw	r3,-25152(gp)
  82eb5c:	00800044 	movi	r2,1
  82eb60:	18800626 	beq	r3,r2,82eb7c <Read_Sector_Data_CRC+0xb4>
		} while ((reg_state & 0x04) != 0);
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
			result = true;
			current_sector_modified = false;
			current_sector_index = sector_index + partition_offset;
  82eb64:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  82eb68:	dfc00217 	ldw	ra,8(sp)
  82eb6c:	dc400117 	ldw	r17,4(sp)
  82eb70:	dc000017 	ldw	r16,0(sp)
  82eb74:	dec00304 	addi	sp,sp,12
  82eb78:	f800283a 	ret
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82eb7c:	00802174 	movhi	r2,133
  82eb80:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82eb84:	00c02174 	movhi	r3,133
  82eb88:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82eb8c:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82eb90:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82eb94:	d0277115 	stw	zero,-25148(gp)
  82eb98:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82eb9c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82eba0:	183fff15 	stw	zero,-4(r3)
  82eba4:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82eba8:	18bffc1e 	bne	r3,r2,82eb9c <Read_Sector_Data_CRC+0xd4>
  82ebac:	003fed06 	br	82eb64 <Read_Sector_Data_CRC+0x9c>
	if (alt_up_sd_card_is_Present()) {
		short int reg_state = 0xff;

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  82ebb0:	d1277c17 	ldw	r4,-25104(gp)
  82ebb4:	000b883a 	mov	r5,zero
  82ebb8:	082e4980 	call	82e498 <Write_Sector_Data>
  82ebbc:	103fd01e 	bne	r2,zero,82eb00 <Read_Sector_Data_CRC+0x38>
  82ebc0:	003fe806 	br	82eb64 <Read_Sector_Data_CRC+0x9c>

0082ebc4 <Read_Sector_Data_Attempt_CRC>:
		}
	}
	return result;
}

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  82ebc4:	defffb04 	addi	sp,sp,-20
  82ebc8:	dcc00315 	stw	r19,12(sp)
  82ebcc:	dc800215 	stw	r18,8(sp)
  82ebd0:	dc400115 	stw	r17,4(sp)
  82ebd4:	dc000015 	stw	r16,0(sp)
  82ebd8:	2023883a 	mov	r17,r4
  82ebdc:	2825883a 	mov	r18,r5
  82ebe0:	0021883a 	mov	r16,zero
  82ebe4:	04c01904 	movi	r19,100
  82ebe8:	dfc00415 	stw	ra,16(sp)
  82ebec:	00000106 	br	82ebf4 <Read_Sector_Data_Attempt_CRC+0x30>
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  82ebf0:	84c00d26 	beq	r16,r19,82ec28 <Read_Sector_Data_Attempt_CRC+0x64>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  82ebf4:	8809883a 	mov	r4,r17
  82ebf8:	900b883a 	mov	r5,r18
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  82ebfc:	84000044 	addi	r16,r16,1
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  82ec00:	082eac80 	call	82eac8 <Read_Sector_Data_CRC>
		if (correct) {
  82ec04:	103ffa26 	beq	r2,zero,82ebf0 <Read_Sector_Data_Attempt_CRC+0x2c>
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
}
  82ec08:	00800044 	movi	r2,1
  82ec0c:	dfc00417 	ldw	ra,16(sp)
  82ec10:	dcc00317 	ldw	r19,12(sp)
  82ec14:	dc800217 	ldw	r18,8(sp)
  82ec18:	dc400117 	ldw	r17,4(sp)
  82ec1c:	dc000017 	ldw	r16,0(sp)
  82ec20:	dec00504 	addi	sp,sp,20
  82ec24:	f800283a 	ret
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  82ec28:	8809883a 	mov	r4,r17
  82ec2c:	900b883a 	mov	r5,r18
}
  82ec30:	dfc00417 	ldw	ra,16(sp)
  82ec34:	dcc00317 	ldw	r19,12(sp)
  82ec38:	dc800217 	ldw	r18,8(sp)
  82ec3c:	dc400117 	ldw	r17,4(sp)
  82ec40:	dc000017 	ldw	r16,0(sp)
  82ec44:	dec00504 	addi	sp,sp,20
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  82ec48:	082e5441 	jmpi	82e544 <Read_Sector_Data>

0082ec4c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  82ec4c:	defffb04 	addi	sp,sp,-20
  82ec50:	dc800215 	stw	r18,8(sp)
  82ec54:	dc400115 	stw	r17,4(sp)
  82ec58:	dc000015 	stw	r16,0(sp)
  82ec5c:	2023883a 	mov	r17,r4
  82ec60:	0021883a 	mov	r16,zero
  82ec64:	04801904 	movi	r18,100
  82ec68:	dfc00415 	stw	ra,16(sp)
  82ec6c:	dcc00315 	stw	r19,12(sp)
  82ec70:	00000106 	br	82ec78 <Check_for_DOS_FAT+0x2c>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  82ec74:	84810026 	beq	r16,r18,82f078 <Check_for_DOS_FAT+0x42c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  82ec78:	0009883a 	mov	r4,zero
  82ec7c:	880b883a 	mov	r5,r17
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  82ec80:	84000044 	addi	r16,r16,1
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  82ec84:	082eac80 	call	82eac8 <Read_Sector_Data_CRC>
		if (correct) {
  82ec88:	103ffa26 	beq	r2,zero,82ec74 <Check_for_DOS_FAT+0x28>
  82ec8c:	01000044 	movi	r4,1
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  82ec90:	d4277a17 	ldw	r16,-25112(gp)
  82ec94:	81400a17 	ldw	r5,40(r16)
  82ec98:	28807fab 	ldhuio	r2,510(r5)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  82ec9c:	00ea9554 	movui	r3,43605
  82eca0:	10bfffcc 	andi	r2,r2,65535
  82eca4:	10c00926 	beq	r2,r3,82eccc <Check_for_DOS_FAT+0x80>
  82eca8:	0009883a 	mov	r4,zero
		result = true;
	} else {
		result = false;
	}
	return result;
}
  82ecac:	2005883a 	mov	r2,r4
  82ecb0:	dfc00417 	ldw	ra,16(sp)
  82ecb4:	dcc00317 	ldw	r19,12(sp)
  82ecb8:	dc800217 	ldw	r18,8(sp)
  82ecbc:	dc400117 	ldw	r17,4(sp)
  82ecc0:	dc000017 	ldw	r16,0(sp)
  82ecc4:	dec00504 	addi	sp,sp,20
  82ecc8:	f800283a 	ret
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  82eccc:	203ff726 	beq	r4,zero,82ecac <Check_for_DOS_FAT+0x60>
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0]
  82ecd0:	28c00023 	ldbuio	r3,0(r5)
  82ecd4:	01002174 	movhi	r4,133
  82ecd8:	2133b004 	addi	r4,r4,-12608
  82ecdc:	20c00005 	stb	r3,0(r4)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  82ece0:	80800a17 	ldw	r2,40(r16)
  82ece4:	10c00063 	ldbuio	r3,1(r2)
  82ece8:	20c00045 	stb	r3,1(r4)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  82ecec:	80800a17 	ldw	r2,40(r16)
  82ecf0:	10c000a3 	ldbuio	r3,2(r2)
  82ecf4:	20c00085 	stb	r3,2(r4)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.OEM_name[counter]
  82ecf8:	80800a17 	ldw	r2,40(r16)
  82ecfc:	10c000e3 	ldbuio	r3,3(r2)
  82ed00:	20c000c5 	stb	r3,3(r4)
  82ed04:	80800a17 	ldw	r2,40(r16)
  82ed08:	10c00123 	ldbuio	r3,4(r2)
  82ed0c:	20c00105 	stb	r3,4(r4)
  82ed10:	80800a17 	ldw	r2,40(r16)
  82ed14:	10c00163 	ldbuio	r3,5(r2)
  82ed18:	20c00145 	stb	r3,5(r4)
  82ed1c:	80800a17 	ldw	r2,40(r16)
  82ed20:	10c001a3 	ldbuio	r3,6(r2)
  82ed24:	20c00185 	stb	r3,6(r4)
  82ed28:	80800a17 	ldw	r2,40(r16)
  82ed2c:	10c001e3 	ldbuio	r3,7(r2)
  82ed30:	20c001c5 	stb	r3,7(r4)
  82ed34:	80800a17 	ldw	r2,40(r16)
  82ed38:	10c00223 	ldbuio	r3,8(r2)
  82ed3c:	20c00205 	stb	r3,8(r4)
  82ed40:	80800a17 	ldw	r2,40(r16)
  82ed44:	10c00263 	ldbuio	r3,9(r2)
  82ed48:	20c00245 	stb	r3,9(r4)
  82ed4c:	80800a17 	ldw	r2,40(r16)
  82ed50:	10c002a3 	ldbuio	r3,10(r2)
  82ed54:	20c00285 	stb	r3,10(r4)
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  82ed58:	81400a17 	ldw	r5,40(r16)
  82ed5c:	28800323 	ldbuio	r2,12(r5)
  82ed60:	28c002e3 	ldbuio	r3,11(r5)
  82ed64:	10803fcc 	andi	r2,r2,255
  82ed68:	1004923a 	slli	r2,r2,8
  82ed6c:	18c03fcc 	andi	r3,r3,255
  82ed70:	18c0201c 	xori	r3,r3,128
  82ed74:	18ffe004 	addi	r3,r3,-128
  82ed78:	10c4b03a 	or	r2,r2,r3
  82ed7c:	2080030d 	sth	r2,12(r4)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  82ed80:	28c00363 	ldbuio	r3,13(r5)
  82ed84:	20c00385 	stb	r3,14(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  82ed88:	81400a17 	ldw	r5,40(r16)
  82ed8c:	288003ab 	ldhuio	r2,14(r5)
  82ed90:	2080040d 	sth	r2,16(r4)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  82ed94:	28c00423 	ldbuio	r3,16(r5)
  82ed98:	20c00485 	stb	r3,18(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  82ed9c:	81400a17 	ldw	r5,40(r16)
  82eda0:	288004a3 	ldbuio	r2,18(r5)
  82eda4:	28c00463 	ldbuio	r3,17(r5)
  82eda8:	10803fcc 	andi	r2,r2,255
  82edac:	1004923a 	slli	r2,r2,8
  82edb0:	18c03fcc 	andi	r3,r3,255
  82edb4:	10c4b03a 	or	r2,r2,r3
  82edb8:	2080050d 	sth	r2,20(r4)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  82edbc:	28c00523 	ldbuio	r3,20(r5)
  82edc0:	288004e3 	ldbuio	r2,19(r5)
  82edc4:	18c03fcc 	andi	r3,r3,255
  82edc8:	1806923a 	slli	r3,r3,8
  82edcc:	10803fcc 	andi	r2,r2,255
  82edd0:	1886b03a 	or	r3,r3,r2
  82edd4:	20c0058d 	sth	r3,22(r4)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  82edd8:	28800563 	ldbuio	r2,21(r5)
  82eddc:	20800605 	stb	r2,24(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  82ede0:	81400a17 	ldw	r5,40(r16)
  82ede4:	288005ab 	ldhuio	r2,22(r5)
  82ede8:	2080068d 	sth	r2,26(r4)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  82edec:	28c0062b 	ldhuio	r3,24(r5)
  82edf0:	20c0070d 	sth	r3,28(r4)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  82edf4:	288006ab 	ldhuio	r2,26(r5)
  82edf8:	2080078d 	sth	r2,30(r4)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  82edfc:	28c00737 	ldwio	r3,28(r5)
  82ee00:	20c00815 	stw	r3,32(r4)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  82ee04:	80800a17 	ldw	r2,40(r16)
  82ee08:	10c00837 	ldwio	r3,32(r2)
  82ee0c:	20c00915 	stw	r3,36(r4)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  82ee10:	80800a17 	ldw	r2,40(r16)
  82ee14:	10c00923 	ldbuio	r3,36(r2)
  82ee18:	20c00a05 	stb	r3,40(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  82ee1c:	80800a17 	ldw	r2,40(r16)
  82ee20:	10c00963 	ldbuio	r3,37(r2)
  82ee24:	20c00a45 	stb	r3,41(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  82ee28:	80800a17 	ldw	r2,40(r16)
  82ee2c:	11c009a3 	ldbuio	r7,38(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  82ee30:	2280050b 	ldhu	r10,20(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  82ee34:	2080068b 	ldhu	r2,26(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  82ee38:	2140040b 	ldhu	r5,16(r4)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  82ee3c:	5012917a 	slli	r9,r10,5
  82ee40:	2200030b 	ldhu	r8,12(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  82ee44:	2887883a 	add	r3,r5,r2
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  82ee48:	18a5883a 	add	r18,r3,r2
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  82ee4c:	4a0cb03a 	or	r6,r9,r8
  82ee50:	008003c4 	movi	r2,15
  82ee54:	2023883a 	mov	r17,r4
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  82ee58:	21c00a85 	stb	r7,42(r4)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  82ee5c:	21401115 	stw	r5,68(r4)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  82ee60:	20c01215 	stw	r3,72(r4)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  82ee64:	24801315 	stw	r18,76(r4)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  82ee68:	2027883a 	mov	r19,r4
  82ee6c:	11806e36 	bltu	r2,r6,82f028 <Check_for_DOS_FAT+0x3dc>
  82ee70:	5004927a 	slli	r2,r10,9
  82ee74:	00c02134 	movhi	r3,132
  82ee78:	18fbb104 	addi	r3,r3,-4412
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  82ee7c:	8900058b 	ldhu	r4,22(r17)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  82ee80:	1204b03a 	or	r2,r2,r8
  82ee84:	10c5883a 	add	r2,r2,r3
  82ee88:	10800003 	ldbu	r2,0(r2)
  82ee8c:	9085883a 	add	r2,r18,r2
  82ee90:	98801415 	stw	r2,80(r19)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  82ee94:	00802174 	movhi	r2,133
  82ee98:	10b3b004 	addi	r2,r2,-12608
  82ee9c:	20006b26 	beq	r4,zero,82f04c <Check_for_DOS_FAT+0x400>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  82eea0:	11400383 	ldbu	r5,14(r2)
  82eea4:	008003c4 	movi	r2,15
  82eea8:	2146b03a 	or	r3,r4,r5
  82eeac:	10c07736 	bltu	r2,r3,82f08c <Check_for_DOS_FAT+0x440>
  82eeb0:	2004913a 	slli	r2,r4,4
  82eeb4:	00c02134 	movhi	r3,132
  82eeb8:	18fbb104 	addi	r3,r3,-4412
  82eebc:	1144b03a 	or	r2,r2,r5
  82eec0:	10c5883a 	add	r2,r2,r3
  82eec4:	10c00003 	ldbu	r3,0(r2)
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  82eec8:	0083fd84 	movi	r2,4086
  82eecc:	10c06516 	blt	r2,r3,82f064 <Check_for_DOS_FAT+0x418>
			boot_sector_data.bits_for_cluster_index = 12;
  82eed0:	00800304 	movi	r2,12
  82eed4:	88801085 	stb	r2,66(r17)
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
  82eed8:	80800a17 	ldw	r2,40(r16)
  82eedc:	10c009e3 	ldbuio	r3,39(r2)
  82eee0:	88c00ac5 	stb	r3,43(r17)
  82eee4:	80800a17 	ldw	r2,40(r16)
  82eee8:	10c00a23 	ldbuio	r3,40(r2)
  82eeec:	88c00b05 	stb	r3,44(r17)
  82eef0:	80800a17 	ldw	r2,40(r16)
  82eef4:	10c00a63 	ldbuio	r3,41(r2)
  82eef8:	88c00b45 	stb	r3,45(r17)
  82eefc:	80800a17 	ldw	r2,40(r16)
  82ef00:	10c00aa3 	ldbuio	r3,42(r2)
  82ef04:	88c00b85 	stb	r3,46(r17)
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
  82ef08:	80800a17 	ldw	r2,40(r16)
  82ef0c:	10c00ae3 	ldbuio	r3,43(r2)
  82ef10:	88c00bc5 	stb	r3,47(r17)
  82ef14:	80800a17 	ldw	r2,40(r16)
  82ef18:	10c00b23 	ldbuio	r3,44(r2)
  82ef1c:	88c00c05 	stb	r3,48(r17)
  82ef20:	80800a17 	ldw	r2,40(r16)
  82ef24:	10c00b63 	ldbuio	r3,45(r2)
  82ef28:	88c00c45 	stb	r3,49(r17)
  82ef2c:	80800a17 	ldw	r2,40(r16)
  82ef30:	10c00ba3 	ldbuio	r3,46(r2)
  82ef34:	88c00c85 	stb	r3,50(r17)
  82ef38:	80800a17 	ldw	r2,40(r16)
  82ef3c:	10c00be3 	ldbuio	r3,47(r2)
  82ef40:	88c00cc5 	stb	r3,51(r17)
  82ef44:	80800a17 	ldw	r2,40(r16)
  82ef48:	10c00c23 	ldbuio	r3,48(r2)
  82ef4c:	88c00d05 	stb	r3,52(r17)
  82ef50:	80800a17 	ldw	r2,40(r16)
  82ef54:	10c00c63 	ldbuio	r3,49(r2)
  82ef58:	88c00d45 	stb	r3,53(r17)
  82ef5c:	80800a17 	ldw	r2,40(r16)
  82ef60:	10c00ca3 	ldbuio	r3,50(r2)
  82ef64:	88c00d85 	stb	r3,54(r17)
  82ef68:	80800a17 	ldw	r2,40(r16)
  82ef6c:	10c00ce3 	ldbuio	r3,51(r2)
  82ef70:	88c00dc5 	stb	r3,55(r17)
  82ef74:	80800a17 	ldw	r2,40(r16)
  82ef78:	10c00d23 	ldbuio	r3,52(r2)
  82ef7c:	88c00e05 	stb	r3,56(r17)
  82ef80:	80800a17 	ldw	r2,40(r16)
  82ef84:	10c00d63 	ldbuio	r3,53(r2)
  82ef88:	88c00e45 	stb	r3,57(r17)
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
  82ef8c:	80800a17 	ldw	r2,40(r16)
  82ef90:	10c00da3 	ldbuio	r3,54(r2)
  82ef94:	88c00e85 	stb	r3,58(r17)
  82ef98:	80800a17 	ldw	r2,40(r16)
  82ef9c:	10c00de3 	ldbuio	r3,55(r2)
  82efa0:	88c00ec5 	stb	r3,59(r17)
  82efa4:	80800a17 	ldw	r2,40(r16)
  82efa8:	10c00e23 	ldbuio	r3,56(r2)
  82efac:	88c00f05 	stb	r3,60(r17)
  82efb0:	80800a17 	ldw	r2,40(r16)
  82efb4:	10c00e63 	ldbuio	r3,57(r2)
  82efb8:	88c00f45 	stb	r3,61(r17)
  82efbc:	80800a17 	ldw	r2,40(r16)
  82efc0:	10c00ea3 	ldbuio	r3,58(r2)
  82efc4:	88c00f85 	stb	r3,62(r17)
  82efc8:	80800a17 	ldw	r2,40(r16)
  82efcc:	10c00ee3 	ldbuio	r3,59(r2)
  82efd0:	88c00fc5 	stb	r3,63(r17)
  82efd4:	80800a17 	ldw	r2,40(r16)
  82efd8:	10c00f23 	ldbuio	r3,60(r2)
  82efdc:	88c01005 	stb	r3,64(r17)
  82efe0:	80800a17 	ldw	r2,40(r16)
  82efe4:	10c00f63 	ldbuio	r3,61(r2)
  82efe8:	00802174 	movhi	r2,133
  82efec:	10b3d404 	addi	r2,r2,-12464
  82eff0:	88c01045 	stb	r3,65(r17)
  82eff4:	10c14004 	addi	r3,r2,1280
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
  82eff8:	10000015 	stw	zero,0(r2)
  82effc:	10801004 	addi	r2,r2,64
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  82f000:	10fffd1e 	bne	r2,r3,82eff8 <Check_for_DOS_FAT+0x3ac>
  82f004:	01000044 	movi	r4,1
		result = true;
	} else {
		result = false;
	}
	return result;
}
  82f008:	2005883a 	mov	r2,r4
  82f00c:	dfc00417 	ldw	ra,16(sp)
  82f010:	dcc00317 	ldw	r19,12(sp)
  82f014:	dc800217 	ldw	r18,8(sp)
  82f018:	dc400117 	ldw	r17,4(sp)
  82f01c:	dc000017 	ldw	r16,0(sp)
  82f020:	dec00504 	addi	sp,sp,20
  82f024:	f800283a 	ret
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  82f028:	4809883a 	mov	r4,r9
  82f02c:	400b883a 	mov	r5,r8
  82f030:	0820b480 	call	820b48 <__divsi3>
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  82f034:	8900058b 	ldhu	r4,22(r17)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  82f038:	9085883a 	add	r2,r18,r2
  82f03c:	98801415 	stw	r2,80(r19)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  82f040:	00802174 	movhi	r2,133
  82f044:	10b3b004 	addi	r2,r2,-12608
  82f048:	203f951e 	bne	r4,zero,82eea0 <Check_for_DOS_FAT+0x254>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  82f04c:	11400383 	ldbu	r5,14(r2)
  82f050:	11000917 	ldw	r4,36(r2)
  82f054:	0820c080 	call	820c08 <__udivsi3>
  82f058:	1007883a 	mov	r3,r2
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  82f05c:	0083fd84 	movi	r2,4086
  82f060:	10ff9b0e 	bge	r2,r3,82eed0 <Check_for_DOS_FAT+0x284>
			boot_sector_data.bits_for_cluster_index = 12;
		} else if (num_clusters <= 65517) {
  82f064:	00bffb54 	movui	r2,65517
  82f068:	10c00b16 	blt	r2,r3,82f098 <Check_for_DOS_FAT+0x44c>
			boot_sector_data.bits_for_cluster_index = 16;
  82f06c:	00800404 	movi	r2,16
  82f070:	88801085 	stb	r2,66(r17)
  82f074:	003f9806 	br	82eed8 <Check_for_DOS_FAT+0x28c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  82f078:	0009883a 	mov	r4,zero
  82f07c:	880b883a 	mov	r5,r17
  82f080:	082e5440 	call	82e544 <Read_Sector_Data>
  82f084:	1009883a 	mov	r4,r2
  82f088:	003f0106 	br	82ec90 <Check_for_DOS_FAT+0x44>
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  82f08c:	0820b480 	call	820b48 <__divsi3>
  82f090:	1007883a 	mov	r3,r2
  82f094:	003f8c06 	br	82eec8 <Check_for_DOS_FAT+0x27c>
		if (num_clusters < 4087) {
			boot_sector_data.bits_for_cluster_index = 12;
		} else if (num_clusters <= 65517) {
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  82f098:	00800804 	movi	r2,32
  82f09c:	88801085 	stb	r2,66(r17)
  82f0a0:	003f8d06 	br	82eed8 <Check_for_DOS_FAT+0x28c>

0082f0a4 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  82f0a4:	defffd04 	addi	sp,sp,-12
  82f0a8:	dc400115 	stw	r17,4(sp)
  82f0ac:	dc000015 	stw	r16,0(sp)
  82f0b0:	04401904 	movi	r17,100
  82f0b4:	0021883a 	mov	r16,zero
  82f0b8:	dfc00215 	stw	ra,8(sp)
  82f0bc:	00000106 	br	82f0c4 <Check_for_Master_Boot_Record+0x20>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  82f0c0:	84407026 	beq	r16,r17,82f284 <Check_for_Master_Boot_Record+0x1e0>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  82f0c4:	0009883a 	mov	r4,zero
  82f0c8:	000b883a 	mov	r5,zero
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  82f0cc:	84000044 	addi	r16,r16,1
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  82f0d0:	082eac80 	call	82eac8 <Read_Sector_Data_CRC>
		if (correct) {
  82f0d4:	103ffa26 	beq	r2,zero,82f0c0 <Check_for_Master_Boot_Record+0x1c>
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  82f0d8:	d1a77a17 	ldw	r6,-25112(gp)
  82f0dc:	31000a17 	ldw	r4,40(r6)
  82f0e0:	20807fab 	ldhuio	r2,510(r4)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  82f0e4:	00ea9554 	movui	r3,43605
  82f0e8:	10bfffcc 	andi	r2,r2,65535
  82f0ec:	10c00626 	beq	r2,r3,82f108 <Check_for_Master_Boot_Record+0x64>
					// Check if the partition is valid
					if (partition_size > 0) {
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
						break;
  82f0f0:	0005883a 	mov	r2,zero
			}
		}
	}

	return result;
}
  82f0f4:	dfc00217 	ldw	ra,8(sp)
  82f0f8:	dc400117 	ldw	r17,4(sp)
  82f0fc:	dc000017 	ldw	r16,0(sp)
  82f100:	dec00304 	addi	sp,sp,12
  82f104:	f800283a 	ret
			for (index = 0; index < 4; index++) {
				int partition_data_offset = (index * 16) + 0x01be;
				char type;

				// Read Partition type
				type
  82f108:	208070a3 	ldbuio	r2,450(r4)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  82f10c:	00c00044 	movi	r3,1
  82f110:	11003fcc 	andi	r4,r2,255
  82f114:	20c00626 	beq	r4,r3,82f130 <Check_for_Master_Boot_Record+0x8c>
  82f118:	00800104 	movi	r2,4
  82f11c:	20800426 	beq	r4,r2,82f130 <Check_for_Master_Boot_Record+0x8c>
  82f120:	00800184 	movi	r2,6
  82f124:	20800226 	beq	r4,r2,82f130 <Check_for_Master_Boot_Record+0x8c>
  82f128:	00800384 	movi	r2,14
  82f12c:	20800c1e 	bne	r4,r2,82f160 <Check_for_Master_Boot_Record+0xbc>
					// Get partition offset and size.
					offset
  82f130:	31400a17 	ldw	r5,40(r6)
  82f134:	28c0722b 	ldhuio	r3,456(r5)
  82f138:	288071ab 	ldhuio	r2,454(r5)
  82f13c:	1806943a 	slli	r3,r3,16
  82f140:	10bfffcc 	andi	r2,r2,65535
  82f144:	1886b03a 	or	r3,r3,r2
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  82f148:	2900732b 	ldhuio	r4,460(r5)
  82f14c:	288072ab 	ldhuio	r2,458(r5)
  82f150:	2008943a 	slli	r4,r4,16
  82f154:	10bfffcc 	andi	r2,r2,65535
  82f158:	2088b03a 	or	r4,r4,r2
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  82f15c:	01004516 	blt	zero,r4,82f274 <Check_for_Master_Boot_Record+0x1d0>
			for (index = 0; index < 4; index++) {
				int partition_data_offset = (index * 16) + 0x01be;
				char type;

				// Read Partition type
				type
  82f160:	30800a17 	ldw	r2,40(r6)
  82f164:	10c074a3 	ldbuio	r3,466(r2)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  82f168:	00800044 	movi	r2,1
  82f16c:	18c03fcc 	andi	r3,r3,255
  82f170:	18800626 	beq	r3,r2,82f18c <Check_for_Master_Boot_Record+0xe8>
  82f174:	00800104 	movi	r2,4
  82f178:	18800426 	beq	r3,r2,82f18c <Check_for_Master_Boot_Record+0xe8>
  82f17c:	00800184 	movi	r2,6
  82f180:	18800226 	beq	r3,r2,82f18c <Check_for_Master_Boot_Record+0xe8>
  82f184:	00800384 	movi	r2,14
  82f188:	18800c1e 	bne	r3,r2,82f1bc <Check_for_Master_Boot_Record+0x118>
					// Get partition offset and size.
					offset
  82f18c:	31400a17 	ldw	r5,40(r6)
  82f190:	28c0762b 	ldhuio	r3,472(r5)
  82f194:	288075ab 	ldhuio	r2,470(r5)
  82f198:	1806943a 	slli	r3,r3,16
  82f19c:	10bfffcc 	andi	r2,r2,65535
  82f1a0:	1886b03a 	or	r3,r3,r2
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  82f1a4:	2900772b 	ldhuio	r4,476(r5)
  82f1a8:	288076ab 	ldhuio	r2,474(r5)
  82f1ac:	2008943a 	slli	r4,r4,16
  82f1b0:	10bfffcc 	andi	r2,r2,65535
  82f1b4:	2088b03a 	or	r4,r4,r2
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  82f1b8:	01002e16 	blt	zero,r4,82f274 <Check_for_Master_Boot_Record+0x1d0>
			for (index = 0; index < 4; index++) {
				int partition_data_offset = (index * 16) + 0x01be;
				char type;

				// Read Partition type
				type
  82f1bc:	30800a17 	ldw	r2,40(r6)
  82f1c0:	10c078a3 	ldbuio	r3,482(r2)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  82f1c4:	00800044 	movi	r2,1
  82f1c8:	18c03fcc 	andi	r3,r3,255
  82f1cc:	18800626 	beq	r3,r2,82f1e8 <Check_for_Master_Boot_Record+0x144>
  82f1d0:	00800104 	movi	r2,4
  82f1d4:	18800426 	beq	r3,r2,82f1e8 <Check_for_Master_Boot_Record+0x144>
  82f1d8:	00800184 	movi	r2,6
  82f1dc:	18800226 	beq	r3,r2,82f1e8 <Check_for_Master_Boot_Record+0x144>
  82f1e0:	00800384 	movi	r2,14
  82f1e4:	18800c1e 	bne	r3,r2,82f218 <Check_for_Master_Boot_Record+0x174>
					// Get partition offset and size.
					offset
  82f1e8:	31400a17 	ldw	r5,40(r6)
  82f1ec:	28c07a2b 	ldhuio	r3,488(r5)
  82f1f0:	288079ab 	ldhuio	r2,486(r5)
  82f1f4:	1806943a 	slli	r3,r3,16
  82f1f8:	10bfffcc 	andi	r2,r2,65535
  82f1fc:	1886b03a 	or	r3,r3,r2
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  82f200:	29007b2b 	ldhuio	r4,492(r5)
  82f204:	28807aab 	ldhuio	r2,490(r5)
  82f208:	2008943a 	slli	r4,r4,16
  82f20c:	10bfffcc 	andi	r2,r2,65535
  82f210:	2088b03a 	or	r4,r4,r2
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  82f214:	01001716 	blt	zero,r4,82f274 <Check_for_Master_Boot_Record+0x1d0>
			for (index = 0; index < 4; index++) {
				int partition_data_offset = (index * 16) + 0x01be;
				char type;

				// Read Partition type
				type
  82f218:	30800a17 	ldw	r2,40(r6)
  82f21c:	10c07ca3 	ldbuio	r3,498(r2)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  82f220:	00800044 	movi	r2,1
  82f224:	18c03fcc 	andi	r3,r3,255
  82f228:	18800626 	beq	r3,r2,82f244 <Check_for_Master_Boot_Record+0x1a0>
  82f22c:	00800104 	movi	r2,4
  82f230:	18800426 	beq	r3,r2,82f244 <Check_for_Master_Boot_Record+0x1a0>
  82f234:	00800184 	movi	r2,6
  82f238:	18800226 	beq	r3,r2,82f244 <Check_for_Master_Boot_Record+0x1a0>
  82f23c:	00800384 	movi	r2,14
  82f240:	18bfab1e 	bne	r3,r2,82f0f0 <Check_for_Master_Boot_Record+0x4c>
					// Get partition offset and size.
					offset
  82f244:	31400a17 	ldw	r5,40(r6)
  82f248:	28c07e2b 	ldhuio	r3,504(r5)
  82f24c:	28807dab 	ldhuio	r2,502(r5)
  82f250:	1806943a 	slli	r3,r3,16
  82f254:	10bfffcc 	andi	r2,r2,65535
  82f258:	1886b03a 	or	r3,r3,r2
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  82f25c:	29007f2b 	ldhuio	r4,508(r5)
  82f260:	28807eab 	ldhuio	r2,506(r5)
  82f264:	2008943a 	slli	r4,r4,16
  82f268:	10bfffcc 	andi	r2,r2,65535
  82f26c:	2088b03a 	or	r4,r4,r2
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  82f270:	013f9f0e 	bge	zero,r4,82f0f0 <Check_for_Master_Boot_Record+0x4c>
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
  82f274:	00800044 	movi	r2,1
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
  82f278:	d1277915 	stw	r4,-25116(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  82f27c:	d0e77815 	stw	r3,-25120(gp)
  82f280:	003f9c06 	br	82f0f4 <Check_for_Master_Boot_Record+0x50>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  82f284:	0009883a 	mov	r4,zero
  82f288:	000b883a 	mov	r5,zero
  82f28c:	082e5440 	call	82e544 <Read_Sector_Data>
	bool result = false;
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  82f290:	103f9726 	beq	r2,zero,82f0f0 <Check_for_Master_Boot_Record+0x4c>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  82f294:	d1a77a17 	ldw	r6,-25112(gp)
  82f298:	31000a17 	ldw	r4,40(r6)
  82f29c:	20807fab 	ldhuio	r2,510(r4)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  82f2a0:	00ea9554 	movui	r3,43605
  82f2a4:	10bfffcc 	andi	r2,r2,65535
  82f2a8:	10ff911e 	bne	r2,r3,82f0f0 <Check_for_Master_Boot_Record+0x4c>
  82f2ac:	003f9606 	br	82f108 <Check_for_Master_Boot_Record+0x64>

0082f2b0 <Look_for_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82f2b0:	d0a77a17 	ldw	r2,-25112(gp)
	return result;
}

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  82f2b4:	defffd04 	addi	sp,sp,-12
  82f2b8:	dfc00215 	stw	ra,8(sp)
  82f2bc:	dc400115 	stw	r17,4(sp)
  82f2c0:	dc000015 	stw	r16,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82f2c4:	10002226 	beq	r2,zero,82f350 <Look_for_FAT16+0xa0>
  82f2c8:	d0e77217 	ldw	r3,-25144(gp)
  82f2cc:	1880002b 	ldhuio	r2,0(r3)
  82f2d0:	1080008c 	andi	r2,r2,2
  82f2d4:	10001e26 	beq	r2,zero,82f350 <Look_for_FAT16+0xa0>

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82f2d8:	0021883a 	mov	r16,zero
  82f2dc:	04401904 	movi	r17,100
  82f2e0:	00000106 	br	82f2e8 <Look_for_FAT16+0x38>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  82f2e4:	84403926 	beq	r16,r17,82f3cc <Look_for_FAT16+0x11c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  82f2e8:	0009883a 	mov	r4,zero
  82f2ec:	000b883a 	mov	r5,zero
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  82f2f0:	84000044 	addi	r16,r16,1
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  82f2f4:	082eac80 	call	82eac8 <Read_Sector_Data_CRC>
		if (correct) {
  82f2f8:	103ffa26 	beq	r2,zero,82f2e4 <Look_for_FAT16+0x34>
	bool result = false;

	if (alt_up_sd_card_is_Present()) {
		Read_Sector_Data_Attempt_CRC(0, 0);

		short int csd_file_format = *CSD_register_w0;
  82f2fc:	d0a77417 	ldw	r2,-25136(gp)

		fat_partition_offset_in_512_byte_sectors = 0;
  82f300:	d0277815 	stw	zero,-25120(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  82f304:	d0277915 	stw	zero,-25116(gp)
	bool result = false;

	if (alt_up_sd_card_is_Present()) {
		Read_Sector_Data_Attempt_CRC(0, 0);

		short int csd_file_format = *CSD_register_w0;
  82f308:	1080000b 	ldhu	r2,0(r2)

		fat_partition_offset_in_512_byte_sectors = 0;
		fat_partition_size_in_512_byte_sectors = 0;

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  82f30c:	10ffffcc 	andi	r3,r2,65535
  82f310:	18e0001c 	xori	r3,r3,32768
  82f314:	18e00004 	addi	r3,r3,-32768
  82f318:	18000616 	blt	r3,zero,82f334 <Look_for_FAT16+0x84>
  82f31c:	10c3000c 	andi	r3,r2,3072
  82f320:	00830004 	movi	r2,3072
  82f324:	18800326 	beq	r3,r2,82f334 <Look_for_FAT16+0x84>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  82f328:	00810004 	movi	r2,1024
  82f32c:	18802b26 	beq	r3,r2,82f3dc <Look_for_FAT16+0x12c>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  82f330:	18001726 	beq	r3,zero,82f390 <Look_for_FAT16+0xe0>
			if (result == true) {
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
					result = false;
				} else {
					fat_partition_size_in_512_byte_sectors
  82f334:	0009883a 	mov	r4,zero
				}
			}
		}
	}
	return result;
}
  82f338:	2005883a 	mov	r2,r4
  82f33c:	dfc00217 	ldw	ra,8(sp)
  82f340:	dc400117 	ldw	r17,4(sp)
  82f344:	dc000017 	ldw	r16,0(sp)
  82f348:	dec00304 	addi	sp,sp,12
  82f34c:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82f350:	d0e77017 	ldw	r3,-25152(gp)
  82f354:	00800044 	movi	r2,1
  82f358:	18bff61e 	bne	r3,r2,82f334 <Look_for_FAT16+0x84>
		int index;

		initialized = false;
		search_data.valid = false;
  82f35c:	00802174 	movhi	r2,133
  82f360:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82f364:	00c02174 	movhi	r3,133
  82f368:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82f36c:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82f370:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82f374:	d0277115 	stw	zero,-25148(gp)
  82f378:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82f37c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82f380:	183fff15 	stw	zero,-4(r3)
  82f384:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82f388:	18bffc1e 	bne	r3,r2,82f37c <Look_for_FAT16+0xcc>
  82f38c:	003fe906 	br	82f334 <Look_for_FAT16+0x84>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  82f390:	082f0a40 	call	82f0a4 <Check_for_Master_Boot_Record>
  82f394:	103fe726 	beq	r2,zero,82f334 <Look_for_FAT16+0x84>
					result = Check_for_DOS_FAT(
  82f398:	d1277817 	ldw	r4,-25120(gp)
  82f39c:	082ec4c0 	call	82ec4c <Check_for_DOS_FAT>
  82f3a0:	1009883a 	mov	r4,r2
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  82f3a4:	00800044 	movi	r2,1
  82f3a8:	20bfe31e 	bne	r4,r2,82f338 <Look_for_FAT16+0x88>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  82f3ac:	01402174 	movhi	r5,133
  82f3b0:	2973b004 	addi	r5,r5,-12608
  82f3b4:	28c01083 	ldbu	r3,66(r5)
  82f3b8:	00800404 	movi	r2,16
  82f3bc:	18bfdd1e 	bne	r3,r2,82f334 <Look_for_FAT16+0x84>
					result = false;
				} else {
					fat_partition_size_in_512_byte_sectors
  82f3c0:	2880058b 	ldhu	r2,22(r5)
  82f3c4:	d0a77915 	stw	r2,-25116(gp)
  82f3c8:	003fdb06 	br	82f338 <Look_for_FAT16+0x88>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  82f3cc:	0009883a 	mov	r4,zero
  82f3d0:	000b883a 	mov	r5,zero
  82f3d4:	082e5440 	call	82e544 <Read_Sector_Data>
  82f3d8:	003fc806 	br	82f2fc <Look_for_FAT16+0x4c>

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  82f3dc:	0009883a 	mov	r4,zero
  82f3e0:	082ec4c0 	call	82ec4c <Check_for_DOS_FAT>
  82f3e4:	1009883a 	mov	r4,r2
  82f3e8:	003fee06 	br	82f3a4 <Look_for_FAT16+0xf4>

0082f3ec <alt_up_sd_card_is_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82f3ec:	d0a77a17 	ldw	r2,-25112(gp)
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  82f3f0:	deffff04 	addi	sp,sp,-4
  82f3f4:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82f3f8:	10000a26 	beq	r2,zero,82f424 <alt_up_sd_card_is_FAT16+0x38>
  82f3fc:	d0e77217 	ldw	r3,-25144(gp)
  82f400:	1880002b 	ldhuio	r2,0(r3)
  82f404:	1080008c 	andi	r2,r2,2
  82f408:	10000626 	beq	r2,zero,82f424 <alt_up_sd_card_is_FAT16+0x38>
{
	bool result = false;

	if (alt_up_sd_card_is_Present()) {
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  82f40c:	d0a77017 	ldw	r2,-25152(gp)
  82f410:	10001a26 	beq	r2,zero,82f47c <alt_up_sd_card_is_FAT16+0x90>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
		}
		result = is_sd_card_formated_as_FAT16;
  82f414:	d0a77117 	ldw	r2,-25148(gp)
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
	}

	return result;
}
  82f418:	dfc00017 	ldw	ra,0(sp)
  82f41c:	dec00104 	addi	sp,sp,4
  82f420:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82f424:	d0e77017 	ldw	r3,-25152(gp)
  82f428:	00800044 	movi	r2,1
  82f42c:	18800626 	beq	r3,r2,82f448 <alt_up_sd_card_is_FAT16+0x5c>
		}
		result = is_sd_card_formated_as_FAT16;
	} else {
		// If not then you may as well not open the device.
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
  82f430:	0005883a 	mov	r2,zero
			search_data.valid = false;
		}
		result = is_sd_card_formated_as_FAT16;
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  82f434:	d0277015 	stw	zero,-25152(gp)
		is_sd_card_formated_as_FAT16 = false;
  82f438:	d0277115 	stw	zero,-25148(gp)
	}

	return result;
}
  82f43c:	dfc00017 	ldw	ra,0(sp)
  82f440:	dec00104 	addi	sp,sp,4
  82f444:	f800283a 	ret
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82f448:	00802174 	movhi	r2,133
  82f44c:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82f450:	00c02174 	movhi	r3,133
  82f454:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82f458:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82f45c:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82f460:	d0277115 	stw	zero,-25148(gp)
  82f464:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82f468:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82f46c:	183fff15 	stw	zero,-4(r3)
  82f470:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82f474:	18bffc1e 	bne	r3,r2,82f468 <alt_up_sd_card_is_FAT16+0x7c>
  82f478:	003fed06 	br	82f430 <alt_up_sd_card_is_FAT16+0x44>

	if (alt_up_sd_card_is_Present()) {
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  82f47c:	082f2b00 	call	82f2b0 <Look_for_FAT16>
  82f480:	d0a77115 	stw	r2,-25148(gp)
			initialized = is_sd_card_formated_as_FAT16;
  82f484:	d0a77015 	stw	r2,-25152(gp)
			search_data.valid = false;
		}
		result = is_sd_card_formated_as_FAT16;
  82f488:	d0a77117 	ldw	r2,-25148(gp)
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
  82f48c:	00c02174 	movhi	r3,133
  82f490:	18f3ab04 	addi	r3,r3,-12628
  82f494:	18000415 	stw	zero,16(r3)
  82f498:	003fdf06 	br	82f418 <alt_up_sd_card_is_FAT16+0x2c>

0082f49c <alt_up_sd_card_find_next>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82f49c:	d0a77a17 	ldw	r2,-25112(gp)
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  82f4a0:	deffe404 	addi	sp,sp,-112
  82f4a4:	dd801815 	stw	r22,96(sp)
  82f4a8:	dfc01b15 	stw	ra,108(sp)
  82f4ac:	df001a15 	stw	fp,104(sp)
  82f4b0:	ddc01915 	stw	r23,100(sp)
  82f4b4:	dd401715 	stw	r21,92(sp)
  82f4b8:	dd001615 	stw	r20,88(sp)
  82f4bc:	dcc01515 	stw	r19,84(sp)
  82f4c0:	dc801415 	stw	r18,80(sp)
  82f4c4:	dc401315 	stw	r17,76(sp)
  82f4c8:	dc001215 	stw	r16,72(sp)
  82f4cc:	202d883a 	mov	r22,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  82f4d0:	10001426 	beq	r2,zero,82f524 <alt_up_sd_card_find_next+0x88>
  82f4d4:	d0e77217 	ldw	r3,-25144(gp)
  82f4d8:	1880002b 	ldhuio	r2,0(r3)
  82f4dc:	1080008c 	andi	r2,r2,2
  82f4e0:	10001026 	beq	r2,zero,82f524 <alt_up_sd_card_find_next+0x88>
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  82f4e4:	d0a77117 	ldw	r2,-25148(gp)
  82f4e8:	10001e1e 	bne	r2,zero,82f564 <alt_up_sd_card_find_next+0xc8>
						} else {
							// Error encountered.                 
							result = -1;
						}
					}
				} while (cluster < 0x0000fff8);
  82f4ec:	01400084 	movi	r5,2
			// Call Find_First first.
			result = 3;
		}
	}
	return result;
}
  82f4f0:	2805883a 	mov	r2,r5
  82f4f4:	dfc01b17 	ldw	ra,108(sp)
  82f4f8:	df001a17 	ldw	fp,104(sp)
  82f4fc:	ddc01917 	ldw	r23,100(sp)
  82f500:	dd801817 	ldw	r22,96(sp)
  82f504:	dd401717 	ldw	r21,92(sp)
  82f508:	dd001617 	ldw	r20,88(sp)
  82f50c:	dcc01517 	ldw	r19,84(sp)
  82f510:	dc801417 	ldw	r18,80(sp)
  82f514:	dc401317 	ldw	r17,76(sp)
  82f518:	dc001217 	ldw	r16,72(sp)
  82f51c:	dec01c04 	addi	sp,sp,112
  82f520:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  82f524:	d0e77017 	ldw	r3,-25152(gp)
  82f528:	00800044 	movi	r2,1
  82f52c:	18bfef1e 	bne	r3,r2,82f4ec <alt_up_sd_card_find_next+0x50>
		int index;

		initialized = false;
		search_data.valid = false;
  82f530:	00802174 	movhi	r2,133
  82f534:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  82f538:	00c02174 	movhi	r3,133
  82f53c:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  82f540:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  82f544:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  82f548:	d0277115 	stw	zero,-25148(gp)
  82f54c:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  82f550:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  82f554:	183fff15 	stw	zero,-4(r3)
  82f558:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  82f55c:	18bffc1e 	bne	r3,r2,82f550 <alt_up_sd_card_find_next+0xb4>
  82f560:	003fe206 	br	82f4ec <alt_up_sd_card_find_next+0x50>
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
		if (search_data.valid) {
  82f564:	05c02174 	movhi	r23,133
  82f568:	bdf3ab04 	addi	r23,r23,-12628
  82f56c:	b8800417 	ldw	r2,16(r23)
  82f570:	1000021e 	bne	r2,zero,82f57c <alt_up_sd_card_find_next+0xe0>
  82f574:	014000c4 	movi	r5,3
  82f578:	003fdd06 	br	82f4f0 <alt_up_sd_card_find_next+0x54>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  82f57c:	b9800117 	ldw	r6,4(r23)

			if (cluster == 0) {
  82f580:	3000321e 	bne	r6,zero,82f64c <alt_up_sd_card_find_next+0x1b0>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  82f584:	07002174 	movhi	fp,133
  82f588:	e733b004 	addi	fp,fp,-12608
  82f58c:	e180050b 	ldhu	r6,20(fp)
  82f590:	e140030b 	ldhu	r5,12(fp)
  82f594:	008003c4 	movi	r2,15
  82f598:	3008917a 	slli	r4,r6,5
  82f59c:	2146b03a 	or	r3,r4,r5
  82f5a0:	10c0ba36 	bltu	r2,r3,82f88c <alt_up_sd_card_find_next+0x3f0>
  82f5a4:	3004927a 	slli	r2,r6,9
  82f5a8:	00c02134 	movhi	r3,132
  82f5ac:	18fbb104 	addi	r3,r3,-4412
  82f5b0:	1144b03a 	or	r2,r2,r5
  82f5b4:	10c5883a 	add	r2,r2,r3
  82f5b8:	15000003 	ldbu	r20,0(r2)
				int sector_index = search_data.current_sector_in_cluster;
  82f5bc:	bc800217 	ldw	r18,8(r23)
				int file_counter = search_data.file_index_in_sector + 1;
  82f5c0:	b880030b 	ldhu	r2,12(r23)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  82f5c4:	95001f0e 	bge	r18,r20,82f644 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;
  82f5c8:	10bfffcc 	andi	r2,r2,65535
  82f5cc:	10a0001c 	xori	r2,r2,32768
  82f5d0:	10a00004 	addi	r2,r2,-32768
  82f5d4:	14400044 	addi	r17,r2,1
  82f5d8:	dcc00104 	addi	r19,sp,4

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
  82f5dc:	e1001317 	ldw	r4,76(fp)
  82f5e0:	d1677817 	ldw	r5,-25120(gp)
  82f5e4:	9109883a 	add	r4,r18,r4
  82f5e8:	082e5440 	call	82e544 <Read_Sector_Data>
  82f5ec:	10001526 	beq	r2,zero,82f644 <alt_up_sd_card_find_next+0x1a8>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  82f5f0:	008003c4 	movi	r2,15
  82f5f4:	14401016 	blt	r2,r17,82f638 <alt_up_sd_card_find_next+0x19c>
  82f5f8:	8820917a 	slli	r16,r17,5
							if (Read_File_Record_At_Offset(file_counter * 32,
  82f5fc:	8009883a 	mov	r4,r16
  82f600:	980b883a 	mov	r5,r19
  82f604:	000d883a 	mov	r6,zero
  82f608:	900f883a 	mov	r7,r18
  82f60c:	082e2b80 	call	82e2b8 <Read_File_Record_At_Offset>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  82f610:	84000804 	addi	r16,r16,32
							if (Read_File_Record_At_Offset(file_counter * 32,
  82f614:	10000526 	beq	r2,zero,82f62c <alt_up_sd_card_find_next+0x190>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  82f618:	d9000103 	ldbu	r4,4(sp)
  82f61c:	20c03fcc 	andi	r3,r4,255
  82f620:	18000226 	beq	r3,zero,82f62c <alt_up_sd_card_find_next+0x190>
  82f624:	00803944 	movi	r2,229
  82f628:	1880921e 	bne	r3,r2,82f874 <alt_up_sd_card_find_next+0x3d8>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  82f62c:	8c400044 	addi	r17,r17,1
  82f630:	00800404 	movi	r2,16
  82f634:	88bff11e 	bne	r17,r2,82f5fc <alt_up_sd_card_find_next+0x160>
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  82f638:	94800044 	addi	r18,r18,1
  82f63c:	0023883a 	mov	r17,zero
  82f640:	953fe61e 	bne	r18,r20,82f5dc <alt_up_sd_card_find_next+0x140>
						} else {
							// Error encountered.                 
							result = -1;
						}
					}
				} while (cluster < 0x0000fff8);
  82f644:	017fffc4 	movi	r5,-1
  82f648:	003fa906 	br	82f4f0 <alt_up_sd_card_find_next+0x54>
						break;
					}
				}
				result = -1;
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  82f64c:	b880030f 	ldh	r2,12(r23)
  82f650:	00c00084 	movi	r3,2
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
		if (search_data.valid) {
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  82f654:	3027883a 	mov	r19,r6
						break;
					}
				}
				result = -1;
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  82f658:	d8c0110d 	sth	r3,68(sp)
  82f65c:	14400044 	addi	r17,r2,1
  82f660:	07002174 	movhi	fp,133
  82f664:	e733b004 	addi	fp,fp,-12608
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  82f668:	e0800383 	ldbu	r2,14(fp)
  82f66c:	98ffff84 	addi	r3,r19,-2
  82f670:	e1001417 	ldw	r4,80(fp)
  82f674:	1887383a 	mul	r3,r3,r2
					int sector_index = search_data.current_sector_in_cluster;
  82f678:	bc800217 	ldw	r18,8(r23)
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  82f67c:	1907883a 	add	r3,r3,r4
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  82f680:	90801d0e 	bge	r18,r2,82f6f8 <alt_up_sd_card_find_next+0x25c>
  82f684:	1cab883a 	add	r21,r3,r18
  82f688:	dd000104 	addi	r20,sp,4
						if (Read_Sector_Data(sector_index + start_sector,
  82f68c:	d1677817 	ldw	r5,-25120(gp)
  82f690:	a809883a 	mov	r4,r21
  82f694:	082e5440 	call	82e544 <Read_Sector_Data>
  82f698:	10007f26 	beq	r2,zero,82f898 <alt_up_sd_card_find_next+0x3fc>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  82f69c:	008003c4 	movi	r2,15
  82f6a0:	14401016 	blt	r2,r17,82f6e4 <alt_up_sd_card_find_next+0x248>
  82f6a4:	8820917a 	slli	r16,r17,5
								if (Read_File_Record_At_Offset(file_counter
  82f6a8:	8009883a 	mov	r4,r16
  82f6ac:	a00b883a 	mov	r5,r20
  82f6b0:	980d883a 	mov	r6,r19
  82f6b4:	900f883a 	mov	r7,r18
  82f6b8:	082e2b80 	call	82e2b8 <Read_File_Record_At_Offset>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  82f6bc:	84000804 	addi	r16,r16,32
								if (Read_File_Record_At_Offset(file_counter
  82f6c0:	10000526 	beq	r2,zero,82f6d8 <alt_up_sd_card_find_next+0x23c>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  82f6c4:	d9000103 	ldbu	r4,4(sp)
  82f6c8:	20c03fcc 	andi	r3,r4,255
  82f6cc:	18000226 	beq	r3,zero,82f6d8 <alt_up_sd_card_find_next+0x23c>
  82f6d0:	00803944 	movi	r2,229
  82f6d4:	18801b1e 	bne	r3,r2,82f744 <alt_up_sd_card_find_next+0x2a8>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  82f6d8:	8c400044 	addi	r17,r17,1
  82f6dc:	00800404 	movi	r2,16
  82f6e0:	88bff11e 	bne	r17,r2,82f6a8 <alt_up_sd_card_find_next+0x20c>
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  82f6e4:	e0800383 	ldbu	r2,14(fp)
  82f6e8:	94800044 	addi	r18,r18,1
  82f6ec:	ad400044 	addi	r21,r21,1
  82f6f0:	0023883a 	mov	r17,zero
  82f6f4:	90bfe516 	blt	r18,r2,82f68c <alt_up_sd_card_find_next+0x1f0>

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  82f6f8:	e0c01117 	ldw	r3,68(fp)
  82f6fc:	d0a77817 	ldw	r2,-25120(gp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  82f700:	9808d23a 	srli	r4,r19,8

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  82f704:	10c5883a 	add	r2,r2,r3

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;

	if (sector_index != current_sector_index) {
  82f708:	d0e77c17 	ldw	r3,-25104(gp)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  82f70c:	2089883a 	add	r4,r4,r2

	if (sector_index != current_sector_index) {
  82f710:	20c06426 	beq	r4,r3,82f8a4 <alt_up_sd_card_find_next+0x408>
		if (Read_Sector_Data(sector_index, 0) == false) {
  82f714:	000b883a 	mov	r5,zero
  82f718:	082e5440 	call	82e544 <Read_Sector_Data>
  82f71c:	1000611e 	bne	r2,zero,82f8a4 <alt_up_sd_card_find_next+0x408>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
								result = -1;
								search_data.valid = false;
  82f720:	00bfffc4 	movi	r2,-1
  82f724:	d880110d 	sth	r2,68(sp)
						} else {
							// Error encountered.                 
							result = -1;
						}
					}
				} while (cluster < 0x0000fff8);
  82f728:	00bffdd4 	movui	r2,65527
  82f72c:	14ffce0e 	bge	r2,r19,82f668 <alt_up_sd_card_find_next+0x1cc>
  82f730:	d8c0110b 	ldhu	r3,68(sp)
  82f734:	197fffcc 	andi	r5,r3,65535
  82f738:	2960001c 	xori	r5,r5,32768
  82f73c:	29600004 	addi	r5,r5,-32768
  82f740:	003f6b06 	br	82f4f0 <alt_up_sd_card_find_next+0x54>
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f744:	00800804 	movi	r2,32
										/* Update search structure. */
										search_data.current_cluster_index
												= cluster;
										search_data.file_index_in_sector
												= file_counter;
										search_data.current_sector_in_cluster
  82f748:	bc800215 	stw	r18,8(r23)
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  82f74c:	bcc00115 	stw	r19,4(r23)
												= cluster;
										search_data.file_index_in_sector
  82f750:	bc40030d 	sth	r17,12(r23)
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f754:	18804b26 	beq	r3,r2,82f884 <alt_up_sd_card_find_next+0x3e8>
			file_name[flength] = file_record->name[index];
  82f758:	b1000005 	stb	r4,0(r22)
  82f75c:	01000044 	movi	r4,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f760:	d8c00143 	ldbu	r3,5(sp)
  82f764:	01800804 	movi	r6,32
  82f768:	18803fcc 	andi	r2,r3,255
  82f76c:	11800326 	beq	r2,r6,82f77c <alt_up_sd_card_find_next+0x2e0>
			file_name[flength] = file_record->name[index];
  82f770:	b105883a 	add	r2,r22,r4
  82f774:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82f778:	21000044 	addi	r4,r4,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f77c:	d8c00183 	ldbu	r3,6(sp)
  82f780:	18803fcc 	andi	r2,r3,255
  82f784:	11800326 	beq	r2,r6,82f794 <alt_up_sd_card_find_next+0x2f8>
			file_name[flength] = file_record->name[index];
  82f788:	b105883a 	add	r2,r22,r4
  82f78c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82f790:	21000044 	addi	r4,r4,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f794:	d8c001c3 	ldbu	r3,7(sp)
  82f798:	18803fcc 	andi	r2,r3,255
  82f79c:	11800326 	beq	r2,r6,82f7ac <alt_up_sd_card_find_next+0x310>
			file_name[flength] = file_record->name[index];
  82f7a0:	b105883a 	add	r2,r22,r4
  82f7a4:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82f7a8:	21000044 	addi	r4,r4,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f7ac:	d8c00203 	ldbu	r3,8(sp)
  82f7b0:	18803fcc 	andi	r2,r3,255
  82f7b4:	11800326 	beq	r2,r6,82f7c4 <alt_up_sd_card_find_next+0x328>
			file_name[flength] = file_record->name[index];
  82f7b8:	b105883a 	add	r2,r22,r4
  82f7bc:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82f7c0:	21000044 	addi	r4,r4,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f7c4:	d8c00243 	ldbu	r3,9(sp)
  82f7c8:	18803fcc 	andi	r2,r3,255
  82f7cc:	11800326 	beq	r2,r6,82f7dc <alt_up_sd_card_find_next+0x340>
			file_name[flength] = file_record->name[index];
  82f7d0:	b105883a 	add	r2,r22,r4
  82f7d4:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82f7d8:	21000044 	addi	r4,r4,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f7dc:	d8c00283 	ldbu	r3,10(sp)
  82f7e0:	18803fcc 	andi	r2,r3,255
  82f7e4:	11800326 	beq	r2,r6,82f7f4 <alt_up_sd_card_find_next+0x358>
			file_name[flength] = file_record->name[index];
  82f7e8:	b105883a 	add	r2,r22,r4
  82f7ec:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82f7f0:	21000044 	addi	r4,r4,1
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f7f4:	d8c002c3 	ldbu	r3,11(sp)
  82f7f8:	18803fcc 	andi	r2,r3,255
  82f7fc:	11800326 	beq	r2,r6,82f80c <alt_up_sd_card_find_next+0x370>
			file_name[flength] = file_record->name[index];
  82f800:	b105883a 	add	r2,r22,r4
  82f804:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  82f808:	21000044 	addi	r4,r4,1
		}
	}
	if (file_record->extension[0] != ' ') {
  82f80c:	d9400303 	ldbu	r5,12(sp)
  82f810:	29801426 	beq	r5,r6,82f864 <alt_up_sd_card_find_next+0x3c8>
		file_name[flength] = '.';
  82f814:	b107883a 	add	r3,r22,r4
  82f818:	00800b84 	movi	r2,46
  82f81c:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  82f820:	21000044 	addi	r4,r4,1
		for (index = 0; index < 3; index++) {
			if (file_record->extension[index] != ' ') {
  82f824:	29800326 	beq	r5,r6,82f834 <alt_up_sd_card_find_next+0x398>
				file_name[flength] = file_record->extension[index];
  82f828:	b105883a 	add	r2,r22,r4
  82f82c:	11400005 	stb	r5,0(r2)
				flength = flength + 1;
  82f830:	21000044 	addi	r4,r4,1
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
			if (file_record->extension[index] != ' ') {
  82f834:	d8c00343 	ldbu	r3,13(sp)
  82f838:	18803fcc 	andi	r2,r3,255
  82f83c:	11800326 	beq	r2,r6,82f84c <alt_up_sd_card_find_next+0x3b0>
				file_name[flength] = file_record->extension[index];
  82f840:	b105883a 	add	r2,r22,r4
  82f844:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  82f848:	21000044 	addi	r4,r4,1
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
			if (file_record->extension[index] != ' ') {
  82f84c:	d8c00383 	ldbu	r3,14(sp)
  82f850:	18803fcc 	andi	r2,r3,255
  82f854:	11800326 	beq	r2,r6,82f864 <alt_up_sd_card_find_next+0x3c8>
				file_name[flength] = file_record->extension[index];
  82f858:	b105883a 	add	r2,r22,r4
  82f85c:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  82f860:	21000044 	addi	r4,r4,1
			}
		}
	}
	file_name[flength] = 0;
  82f864:	b105883a 	add	r2,r22,r4
  82f868:	000b883a 	mov	r5,zero
  82f86c:	10000005 	stb	zero,0(r2)
  82f870:	003f1f06 	br	82f4f0 <alt_up_sd_card_find_next+0x54>
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f874:	00800804 	movi	r2,32
								if ((file_record.name[0] != 0)
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
											= file_counter;
									search_data.current_sector_in_cluster
  82f878:	bc800215 	stw	r18,8(r23)
							if (Read_File_Record_At_Offset(file_counter * 32,
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  82f87c:	bc40030d 	sth	r17,12(r23)
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
		if (file_record->name[index] != ' ') {
  82f880:	18bfb51e 	bne	r3,r2,82f758 <alt_up_sd_card_find_next+0x2bc>
  82f884:	0009883a 	mov	r4,zero
  82f888:	003fb506 	br	82f760 <alt_up_sd_card_find_next+0x2c4>

			if (cluster == 0) {
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  82f88c:	0820b480 	call	820b48 <__divsi3>
  82f890:	1029883a 	mov	r20,r2
  82f894:	003f4906 	br	82f5bc <alt_up_sd_card_find_next+0x120>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  82f898:	e0800383 	ldbu	r2,14(fp)
  82f89c:	90bfa216 	blt	r18,r2,82f728 <alt_up_sd_card_find_next+0x28c>
  82f8a0:	003f9506 	br	82f6f8 <alt_up_sd_card_find_next+0x25c>
	if (sector_index != current_sector_index) {
		if (Read_Sector_Data(sector_index, 0) == false) {
			return false;
		}
	}
	*flag
  82f8a4:	d0e77a17 	ldw	r3,-25112(gp)
  82f8a8:	98803fcc 	andi	r2,r19,255
  82f8ac:	1085883a 	add	r2,r2,r2
  82f8b0:	19000a17 	ldw	r4,40(r3)
  82f8b4:	1105883a 	add	r2,r2,r4
  82f8b8:	10c0002b 	ldhuio	r3,0(r2)
  82f8bc:	d8c0000d 	sth	r3,0(sp)
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  82f8c0:	d880000f 	ldh	r2,0(sp)
  82f8c4:	00fffe14 	movui	r3,65528
  82f8c8:	14fffe0c 	andi	r19,r2,65528
  82f8cc:	98ff961e 	bne	r19,r3,82f728 <alt_up_sd_card_find_next+0x28c>
								result = -1;
								search_data.valid = false;
  82f8d0:	017fffc4 	movi	r5,-1
  82f8d4:	b8000415 	stw	zero,16(r23)
  82f8d8:	003f0506 	br	82f4f0 <alt_up_sd_card_find_next+0x54>

0082f8dc <find_file_in_directory>:
}

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  82f8dc:	defff404 	addi	sp,sp,-48
  82f8e0:	dd800915 	stw	r22,36(sp)
  82f8e4:	dcc00615 	stw	r19,24(sp)
  82f8e8:	dc400415 	stw	r17,16(sp)
  82f8ec:	202d883a 	mov	r22,r4
  82f8f0:	dfc00b15 	stw	ra,44(sp)
  82f8f4:	ddc00a15 	stw	r23,40(sp)
  82f8f8:	dd400815 	stw	r21,32(sp)
  82f8fc:	dd000715 	stw	r20,28(sp)
  82f900:	dc800515 	stw	r18,20(sp)
  82f904:	dc000315 	stw	r16,12(sp)

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);
  82f908:	2809883a 	mov	r4,r5
}

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  82f90c:	2827883a 	mov	r19,r5
  82f910:	3023883a 	mov	r17,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);
  82f914:	0822e100 	call	822e10 <strlen>

	for (index = 0; index < length; index++) {
  82f918:	0081130e 	bge	zero,r2,82fd68 <find_file_in_directory+0x48c>
		if ((name[index] == '\\') || (name[index] == '/')) {
  82f91c:	98c00007 	ldb	r3,0(r19)
  82f920:	01401704 	movi	r5,92
  82f924:	19431c26 	beq	r3,r5,830598 <find_file_in_directory+0xcbc>
  82f928:	01000bc4 	movi	r4,47
  82f92c:	19031a26 	beq	r3,r4,830598 <find_file_in_directory+0xcbc>
  82f930:	0021883a 	mov	r16,zero
  82f934:	00000306 	br	82f944 <find_file_in_directory+0x68>
  82f938:	18c00007 	ldb	r3,0(r3)
  82f93c:	19410c26 	beq	r3,r5,82fd70 <find_file_in_directory+0x494>
  82f940:	19010b26 	beq	r3,r4,82fd70 <find_file_in_directory+0x494>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82f944:	84000044 	addi	r16,r16,1
		if ((name[index] == '\\') || (name[index] == '/')) {
  82f948:	9c07883a 	add	r3,r19,r16
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82f94c:	143ffa1e 	bne	r2,r16,82f938 <find_file_in_directory+0x5c>
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
	int location = get_dir_divider_location(file_name);
	int last_dir_separator = 0;
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  82f950:	00800804 	movi	r2,32
	char extension[3] = { ' ', ' ', ' ' };
  82f954:	d8800085 	stb	r2,2(sp)
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
	int location = get_dir_divider_location(file_name);
	int last_dir_separator = 0;
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  82f958:	d88000c5 	stb	r2,3(sp)
  82f95c:	d8800105 	stb	r2,4(sp)
  82f960:	d8800145 	stb	r2,5(sp)
  82f964:	d8800185 	stb	r2,6(sp)
  82f968:	d88001c5 	stb	r2,7(sp)
  82f96c:	d8800205 	stb	r2,8(sp)
  82f970:	d8800245 	stb	r2,9(sp)
  82f974:	d8800285 	stb	r2,10(sp)
	char extension[3] = { ' ', ' ', ' ' };
  82f978:	d8800005 	stb	r2,0(sp)
  82f97c:	d8800045 	stb	r2,1(sp)
	int ext_index = -1;
	int cluster = directory_start_cluster;
	int index;
	int length = strlen(file_name);
  82f980:	9809883a 	mov	r4,r19
  82f984:	0822e100 	call	822e10 <strlen>
  82f988:	102b883a 	mov	r21,r2
  82f98c:	000d883a 	mov	r6,zero
  82f990:	0029883a 	mov	r20,zero
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  82f994:	35401a0e 	bge	r6,r21,82fa00 <find_file_in_directory+0x124>
}

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  82f998:	3507c83a 	sub	r3,r6,r20
  82f99c:	d88000c4 	addi	r2,sp,3
  82f9a0:	10cb883a 	add	r5,r2,r3
  82f9a4:	9989883a 	add	r4,r19,r6
  82f9a8:	a811883a 	mov	r8,r21
  82f9ac:	01ffffc4 	movi	r7,-1
  82f9b0:	02400b84 	movi	r9,46
  82f9b4:	00000806 	br	82f9d8 <find_file_in_directory+0xfc>
		if (file_name[index] == '.') {
			ext_index = index;
		} else if (ext_index < 0) {
			name[index - last_dir_separator] = file_name[index];
		} else {
			extension[index - ext_index - 1] = file_name[index];
  82f9b8:	31c5c83a 	sub	r2,r6,r7
  82f9bc:	16c5883a 	add	r2,r2,sp

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
		if (file_name[index] == '.') {
			ext_index = index;
		} else if (ext_index < 0) {
  82f9c0:	38011616 	blt	r7,zero,82fe1c <find_file_in_directory+0x540>
			name[index - last_dir_separator] = file_name[index];
		} else {
			extension[index - ext_index - 1] = file_name[index];
  82f9c4:	10ffffc5 	stb	r3,-1(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  82f9c8:	31800044 	addi	r6,r6,1
  82f9cc:	21000044 	addi	r4,r4,1
  82f9d0:	29400044 	addi	r5,r5,1
  82f9d4:	32000a26 	beq	r6,r8,82fa00 <find_file_in_directory+0x124>
		if (file_name[index] == '.') {
  82f9d8:	20c00003 	ldbu	r3,0(r4)
  82f9dc:	18803fcc 	andi	r2,r3,255
  82f9e0:	1080201c 	xori	r2,r2,128
  82f9e4:	10bfe004 	addi	r2,r2,-128
  82f9e8:	127ff31e 	bne	r2,r9,82f9b8 <find_file_in_directory+0xdc>
  82f9ec:	300f883a 	mov	r7,r6
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  82f9f0:	31800044 	addi	r6,r6,1
  82f9f4:	21000044 	addi	r4,r4,1
  82f9f8:	29400044 	addi	r5,r5,1
  82f9fc:	323ff61e 	bne	r6,r8,82f9d8 <find_file_in_directory+0xfc>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  82fa00:	b001081e 	bne	r22,zero,82fe24 <find_file_in_directory+0x548>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  82fa04:	05c02174 	movhi	r23,133
  82fa08:	bdf3b004 	addi	r23,r23,-12608
  82fa0c:	b980050b 	ldhu	r6,20(r23)
  82fa10:	b940030b 	ldhu	r5,12(r23)
  82fa14:	008003c4 	movi	r2,15
  82fa18:	3008917a 	slli	r4,r6,5
  82fa1c:	2146b03a 	or	r3,r4,r5
  82fa20:	10c25c2e 	bgeu	r2,r3,830394 <find_file_in_directory+0xab8>
  82fa24:	0820b480 	call	820b48 <__divsi3>
  82fa28:	1029883a 	mov	r20,r2
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  82fa2c:	0500c10e 	bge	zero,r20,82fd34 <find_file_in_directory+0x458>
  82fa30:	0027883a 	mov	r19,zero
			if (Read_Sector_Data(sector_index
  82fa34:	b9001317 	ldw	r4,76(r23)
  82fa38:	d1677817 	ldw	r5,-25120(gp)
  82fa3c:	9909883a 	add	r4,r19,r4
  82fa40:	082e5440 	call	82e544 <Read_Sector_Data>
  82fa44:	1000bb26 	beq	r2,zero,82fd34 <find_file_in_directory+0x458>
							break;
						}
					}
				}
			} else {
				break;
  82fa48:	0025883a 	mov	r18,zero
  82fa4c:	04000644 	movi	r16,25
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  82fa50:	9009883a 	mov	r4,r18
  82fa54:	880b883a 	mov	r5,r17
  82fa58:	000d883a 	mov	r6,zero
  82fa5c:	980f883a 	mov	r7,r19
  82fa60:	082e2b80 	call	82e2b8 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  82fa64:	89000003 	ldbu	r4,0(r17)
  82fa68:	00803944 	movi	r2,229
  82fa6c:	20c03fcc 	andi	r3,r4,255
  82fa70:	1880ab26 	beq	r3,r2,82fd20 <find_file_in_directory+0x444>
  82fa74:	1800aa26 	beq	r3,zero,82fd20 <find_file_in_directory+0x444>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  82fa78:	20bfe7c4 	addi	r2,r4,-97
  82fa7c:	10803fcc 	andi	r2,r2,255
  82fa80:	80825f2e 	bgeu	r16,r2,830400 <find_file_in_directory+0xb24>
  82fa84:	21003fcc 	andi	r4,r4,255
  82fa88:	2100201c 	xori	r4,r4,128
  82fa8c:	213fe004 	addi	r4,r4,-128
  82fa90:	d8c000c3 	ldbu	r3,3(sp)
  82fa94:	18bfe7c4 	addi	r2,r3,-97
  82fa98:	10803fcc 	andi	r2,r2,255
  82fa9c:	8082492e 	bgeu	r16,r2,8303c4 <find_file_in_directory+0xae8>
  82faa0:	18803fcc 	andi	r2,r3,255
  82faa4:	1080201c 	xori	r2,r2,128
  82faa8:	10bfe004 	addi	r2,r2,-128
  82faac:	20824a1e 	bne	r4,r2,8303d8 <find_file_in_directory+0xafc>
  82fab0:	88c00043 	ldbu	r3,1(r17)
  82fab4:	18bfe7c4 	addi	r2,r3,-97
  82fab8:	10803fcc 	andi	r2,r2,255
  82fabc:	8082642e 	bgeu	r16,r2,830450 <find_file_in_directory+0xb74>
  82fac0:	19003fcc 	andi	r4,r3,255
  82fac4:	2100201c 	xori	r4,r4,128
  82fac8:	213fe004 	addi	r4,r4,-128
  82facc:	d8c00103 	ldbu	r3,4(sp)
  82fad0:	18bfe7c4 	addi	r2,r3,-97
  82fad4:	10803fcc 	andi	r2,r2,255
  82fad8:	8082582e 	bgeu	r16,r2,83043c <find_file_in_directory+0xb60>
  82fadc:	18803fcc 	andi	r2,r3,255
  82fae0:	1080201c 	xori	r2,r2,128
  82fae4:	10bfe004 	addi	r2,r2,-128
  82fae8:	20823b1e 	bne	r4,r2,8303d8 <find_file_in_directory+0xafc>
  82faec:	88c00083 	ldbu	r3,2(r17)
  82faf0:	18bfe7c4 	addi	r2,r3,-97
  82faf4:	10803fcc 	andi	r2,r2,255
  82faf8:	80825a2e 	bgeu	r16,r2,830464 <find_file_in_directory+0xb88>
  82fafc:	19003fcc 	andi	r4,r3,255
  82fb00:	d8c00143 	ldbu	r3,5(sp)
  82fb04:	2100201c 	xori	r4,r4,128
  82fb08:	213fe004 	addi	r4,r4,-128
  82fb0c:	18bfe7c4 	addi	r2,r3,-97
  82fb10:	10803fcc 	andi	r2,r2,255
  82fb14:	80825b2e 	bgeu	r16,r2,830484 <find_file_in_directory+0xba8>
  82fb18:	18803fcc 	andi	r2,r3,255
  82fb1c:	1080201c 	xori	r2,r2,128
  82fb20:	10bfe004 	addi	r2,r2,-128
  82fb24:	20822c1e 	bne	r4,r2,8303d8 <find_file_in_directory+0xafc>
  82fb28:	88c000c3 	ldbu	r3,3(r17)
  82fb2c:	18bfe7c4 	addi	r2,r3,-97
  82fb30:	10803fcc 	andi	r2,r2,255
  82fb34:	8082602e 	bgeu	r16,r2,8304b8 <find_file_in_directory+0xbdc>
  82fb38:	19003fcc 	andi	r4,r3,255
  82fb3c:	d8c00183 	ldbu	r3,6(sp)
  82fb40:	2100201c 	xori	r4,r4,128
  82fb44:	213fe004 	addi	r4,r4,-128
  82fb48:	18bfe7c4 	addi	r2,r3,-97
  82fb4c:	10803fcc 	andi	r2,r2,255
  82fb50:	8082612e 	bgeu	r16,r2,8304d8 <find_file_in_directory+0xbfc>
  82fb54:	18803fcc 	andi	r2,r3,255
  82fb58:	1080201c 	xori	r2,r2,128
  82fb5c:	10bfe004 	addi	r2,r2,-128
  82fb60:	20821d1e 	bne	r4,r2,8303d8 <find_file_in_directory+0xafc>
  82fb64:	88c00103 	ldbu	r3,4(r17)
  82fb68:	18bfe7c4 	addi	r2,r3,-97
  82fb6c:	10803fcc 	andi	r2,r2,255
  82fb70:	8082632e 	bgeu	r16,r2,830500 <find_file_in_directory+0xc24>
  82fb74:	19003fcc 	andi	r4,r3,255
  82fb78:	2100201c 	xori	r4,r4,128
  82fb7c:	213fe004 	addi	r4,r4,-128
  82fb80:	d8c001c3 	ldbu	r3,7(sp)
  82fb84:	18bfe7c4 	addi	r2,r3,-97
  82fb88:	10803fcc 	andi	r2,r2,255
  82fb8c:	8082572e 	bgeu	r16,r2,8304ec <find_file_in_directory+0xc10>
  82fb90:	18803fcc 	andi	r2,r3,255
  82fb94:	1080201c 	xori	r2,r2,128
  82fb98:	10bfe004 	addi	r2,r2,-128
  82fb9c:	20820e1e 	bne	r4,r2,8303d8 <find_file_in_directory+0xafc>
  82fba0:	88c00143 	ldbu	r3,5(r17)
  82fba4:	18bfe7c4 	addi	r2,r3,-97
  82fba8:	10803fcc 	andi	r2,r2,255
  82fbac:	80825e2e 	bgeu	r16,r2,830528 <find_file_in_directory+0xc4c>
  82fbb0:	19003fcc 	andi	r4,r3,255
  82fbb4:	2100201c 	xori	r4,r4,128
  82fbb8:	213fe004 	addi	r4,r4,-128
  82fbbc:	d8c00203 	ldbu	r3,8(sp)
  82fbc0:	18bfe7c4 	addi	r2,r3,-97
  82fbc4:	10803fcc 	andi	r2,r2,255
  82fbc8:	8082522e 	bgeu	r16,r2,830514 <find_file_in_directory+0xc38>
  82fbcc:	18803fcc 	andi	r2,r3,255
  82fbd0:	1080201c 	xori	r2,r2,128
  82fbd4:	10bfe004 	addi	r2,r2,-128
  82fbd8:	2081ff1e 	bne	r4,r2,8303d8 <find_file_in_directory+0xafc>
  82fbdc:	88c00183 	ldbu	r3,6(r17)
  82fbe0:	18bfe7c4 	addi	r2,r3,-97
  82fbe4:	10803fcc 	andi	r2,r2,255
  82fbe8:	8082592e 	bgeu	r16,r2,830550 <find_file_in_directory+0xc74>
  82fbec:	19003fcc 	andi	r4,r3,255
  82fbf0:	2100201c 	xori	r4,r4,128
  82fbf4:	213fe004 	addi	r4,r4,-128
  82fbf8:	d8c00243 	ldbu	r3,9(sp)
  82fbfc:	18bfe7c4 	addi	r2,r3,-97
  82fc00:	10803fcc 	andi	r2,r2,255
  82fc04:	80824d2e 	bgeu	r16,r2,83053c <find_file_in_directory+0xc60>
  82fc08:	18803fcc 	andi	r2,r3,255
  82fc0c:	1080201c 	xori	r2,r2,128
  82fc10:	10bfe004 	addi	r2,r2,-128
  82fc14:	2081f01e 	bne	r4,r2,8303d8 <find_file_in_directory+0xafc>
  82fc18:	88c001c3 	ldbu	r3,7(r17)
  82fc1c:	18bfe7c4 	addi	r2,r3,-97
  82fc20:	10803fcc 	andi	r2,r2,255
  82fc24:	80824f36 	bltu	r16,r2,830564 <find_file_in_directory+0xc88>
  82fc28:	18bff804 	addi	r2,r3,-32
  82fc2c:	d8c00283 	ldbu	r3,10(sp)
  82fc30:	11003fcc 	andi	r4,r2,255
  82fc34:	2100201c 	xori	r4,r4,128
  82fc38:	18bfe7c4 	addi	r2,r3,-97
  82fc3c:	10803fcc 	andi	r2,r2,255
  82fc40:	213fe004 	addi	r4,r4,-128
  82fc44:	80824e36 	bltu	r16,r2,830580 <find_file_in_directory+0xca4>
  82fc48:	18bff804 	addi	r2,r3,-32
  82fc4c:	10803fcc 	andi	r2,r2,255
  82fc50:	1080201c 	xori	r2,r2,128
  82fc54:	10bfe004 	addi	r2,r2,-128
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  82fc58:	88c00203 	ldbu	r3,8(r17)
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  82fc5c:	208b003a 	cmpeq	r5,r4,r2
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  82fc60:	18bfe7c4 	addi	r2,r3,-97
  82fc64:	10803fcc 	andi	r2,r2,255
  82fc68:	8081e02e 	bgeu	r16,r2,8303ec <find_file_in_directory+0xb10>
  82fc6c:	19003fcc 	andi	r4,r3,255
  82fc70:	2100201c 	xori	r4,r4,128
  82fc74:	213fe004 	addi	r4,r4,-128
  82fc78:	d8c00003 	ldbu	r3,0(sp)
  82fc7c:	18bfe7c4 	addi	r2,r3,-97
  82fc80:	10803fcc 	andi	r2,r2,255
  82fc84:	8081ca2e 	bgeu	r16,r2,8303b0 <find_file_in_directory+0xad4>
  82fc88:	18803fcc 	andi	r2,r3,255
  82fc8c:	1080201c 	xori	r2,r2,128
  82fc90:	10bfe004 	addi	r2,r2,-128
  82fc94:	2080221e 	bne	r4,r2,82fd20 <find_file_in_directory+0x444>
  82fc98:	88c00243 	ldbu	r3,9(r17)
  82fc9c:	18bfe7c4 	addi	r2,r3,-97
  82fca0:	10803fcc 	andi	r2,r2,255
  82fca4:	8081e02e 	bgeu	r16,r2,830428 <find_file_in_directory+0xb4c>
  82fca8:	19003fcc 	andi	r4,r3,255
  82fcac:	2100201c 	xori	r4,r4,128
  82fcb0:	213fe004 	addi	r4,r4,-128
  82fcb4:	d8c00043 	ldbu	r3,1(sp)
  82fcb8:	18bfe7c4 	addi	r2,r3,-97
  82fcbc:	10803fcc 	andi	r2,r2,255
  82fcc0:	8081d42e 	bgeu	r16,r2,830414 <find_file_in_directory+0xb38>
  82fcc4:	18803fcc 	andi	r2,r3,255
  82fcc8:	1080201c 	xori	r2,r2,128
  82fccc:	10bfe004 	addi	r2,r2,-128
  82fcd0:	2080131e 	bne	r4,r2,82fd20 <find_file_in_directory+0x444>
  82fcd4:	88c00283 	ldbu	r3,10(r17)
  82fcd8:	18bfe7c4 	addi	r2,r3,-97
  82fcdc:	10803fcc 	andi	r2,r2,255
  82fce0:	8081f136 	bltu	r16,r2,8304a8 <find_file_in_directory+0xbcc>
  82fce4:	18bff804 	addi	r2,r3,-32
  82fce8:	11003fcc 	andi	r4,r2,255
  82fcec:	2100201c 	xori	r4,r4,128
  82fcf0:	213fe004 	addi	r4,r4,-128
  82fcf4:	d8c00083 	ldbu	r3,2(sp)
  82fcf8:	18bfe7c4 	addi	r2,r3,-97
  82fcfc:	10803fcc 	andi	r2,r2,255
  82fd00:	8081e536 	bltu	r16,r2,830498 <find_file_in_directory+0xbbc>
  82fd04:	18bff804 	addi	r2,r3,-32
  82fd08:	10803fcc 	andi	r2,r2,255
  82fd0c:	1080201c 	xori	r2,r2,128
  82fd10:	10bfe004 	addi	r2,r2,-128
  82fd14:	2080021e 	bne	r4,r2,82fd20 <find_file_in_directory+0x444>
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);

						if (match) {
  82fd18:	2805003a 	cmpeq	r2,r5,zero
  82fd1c:	10021c26 	beq	r2,zero,830590 <find_file_in_directory+0xcb4>
  82fd20:	94800804 	addi	r18,r18,32
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  82fd24:	00808004 	movi	r2,512
  82fd28:	90bf491e 	bne	r18,r2,82fa50 <find_file_in_directory+0x174>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  82fd2c:	9cc00044 	addi	r19,r19,1
  82fd30:	a4ff401e 	bne	r20,r19,82fa34 <find_file_in_directory+0x158>
				} else {
					// Directory path is invalid.
					return false;
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  82fd34:	002b883a 	mov	r21,zero
	}

	return result;
}
  82fd38:	a805883a 	mov	r2,r21
  82fd3c:	dfc00b17 	ldw	ra,44(sp)
  82fd40:	ddc00a17 	ldw	r23,40(sp)
  82fd44:	dd800917 	ldw	r22,36(sp)
  82fd48:	dd400817 	ldw	r21,32(sp)
  82fd4c:	dd000717 	ldw	r20,28(sp)
  82fd50:	dcc00617 	ldw	r19,24(sp)
  82fd54:	dc800517 	ldw	r18,20(sp)
  82fd58:	dc400417 	ldw	r17,16(sp)
  82fd5c:	dc000317 	ldw	r16,12(sp)
  82fd60:	dec00c04 	addi	sp,sp,48
  82fd64:	f800283a 	ret
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82fd68:	0021883a 	mov	r16,zero
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  82fd6c:	103ef826 	beq	r2,zero,82f950 <find_file_in_directory+0x74>
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
	int location = get_dir_divider_location(file_name);
	int last_dir_separator = 0;
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  82fd70:	00800804 	movi	r2,32
	char extension[3] = { ' ', ' ', ' ' };
  82fd74:	d8800085 	stb	r2,2(sp)
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
	int location = get_dir_divider_location(file_name);
	int last_dir_separator = 0;
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  82fd78:	d88000c5 	stb	r2,3(sp)
  82fd7c:	d8800105 	stb	r2,4(sp)
  82fd80:	d8800145 	stb	r2,5(sp)
  82fd84:	d8800185 	stb	r2,6(sp)
  82fd88:	d88001c5 	stb	r2,7(sp)
  82fd8c:	d8800205 	stb	r2,8(sp)
  82fd90:	d8800245 	stb	r2,9(sp)
  82fd94:	d8800285 	stb	r2,10(sp)
	char extension[3] = { ' ', ' ', ' ' };
  82fd98:	d8800005 	stb	r2,0(sp)
  82fd9c:	d8800045 	stb	r2,1(sp)
	int ext_index = -1;
	int cluster = directory_start_cluster;
	int index;
	int length = strlen(file_name);
  82fda0:	9809883a 	mov	r4,r19
  82fda4:	0822e100 	call	822e10 <strlen>
  82fda8:	102b883a 	mov	r21,r2
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  82fdac:	043ef70e 	bge	zero,r16,82f98c <find_file_in_directory+0xb0>
  82fdb0:	0029883a 	mov	r20,zero
		last_dir_separator = last_dir_separator + location + 1;
  82fdb4:	80800044 	addi	r2,r16,1
  82fdb8:	a0a9883a 	add	r20,r20,r2
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  82fdbc:	9d25883a 	add	r18,r19,r20

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);
  82fdc0:	9009883a 	mov	r4,r18
  82fdc4:	0822e100 	call	822e10 <strlen>

	for (index = 0; index < length; index++) {
  82fdc8:	00800f0e 	bge	zero,r2,82fe08 <find_file_in_directory+0x52c>
		if ((name[index] == '\\') || (name[index] == '/')) {
  82fdcc:	90c00007 	ldb	r3,0(r18)
  82fdd0:	01401704 	movi	r5,92
  82fdd4:	19400c26 	beq	r3,r5,82fe08 <find_file_in_directory+0x52c>
  82fdd8:	01000bc4 	movi	r4,47
  82fddc:	19000a26 	beq	r3,r4,82fe08 <find_file_in_directory+0x52c>
  82fde0:	0021883a 	mov	r16,zero
  82fde4:	00000306 	br	82fdf4 <find_file_in_directory+0x518>
  82fde8:	18c00007 	ldb	r3,0(r3)
  82fdec:	19400826 	beq	r3,r5,82fe10 <find_file_in_directory+0x534>
  82fdf0:	19000726 	beq	r3,r4,82fe10 <find_file_in_directory+0x534>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82fdf4:	84000044 	addi	r16,r16,1
		if ((name[index] == '\\') || (name[index] == '/')) {
  82fdf8:	9407883a 	add	r3,r18,r16
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82fdfc:	143ffa1e 	bne	r2,r16,82fde8 <find_file_in_directory+0x50c>
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  82fe00:	a00d883a 	mov	r6,r20
  82fe04:	003ee306 	br	82f994 <find_file_in_directory+0xb8>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82fe08:	0021883a 	mov	r16,zero
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  82fe0c:	103ffc26 	beq	r2,zero,82fe00 <find_file_in_directory+0x524>
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  82fe10:	043fe816 	blt	zero,r16,82fdb4 <find_file_in_directory+0x4d8>
  82fe14:	a00d883a 	mov	r6,r20
  82fe18:	003ede06 	br	82f994 <find_file_in_directory+0xb8>
	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
		if (file_name[index] == '.') {
			ext_index = index;
		} else if (ext_index < 0) {
			name[index - last_dir_separator] = file_name[index];
  82fe1c:	28c00005 	stb	r3,0(r5)
  82fe20:	003ee906 	br	82f9c8 <find_file_in_directory+0xec>
  82fe24:	05c02174 	movhi	r23,133
  82fe28:	bdf3b004 	addi	r23,r23,-12608
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  82fe2c:	b8800383 	ldbu	r2,14(r23)
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  82fe30:	b027883a 	mov	r19,r22
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  82fe34:	98ffff84 	addi	r3,r19,-2
  82fe38:	b9001417 	ldw	r4,80(r23)
  82fe3c:	1887383a 	mul	r3,r3,r2
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  82fe40:	002b883a 	mov	r21,zero
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  82fe44:	192d883a 	add	r22,r3,r4
			int sector_index;

			for (sector_index = 0; sector_index
  82fe48:	1000e126 	beq	r2,zero,8301d0 <find_file_in_directory+0x8f4>
  82fe4c:	0029883a 	mov	r20,zero
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  82fe50:	d1677817 	ldw	r5,-25120(gp)
  82fe54:	b509883a 	add	r4,r22,r20
  82fe58:	082e5440 	call	82e544 <Read_Sector_Data>
  82fe5c:	1000dc26 	beq	r2,zero,8301d0 <find_file_in_directory+0x8f4>
								break;
							}
						}
					}
				} else {
					break;
  82fe60:	0025883a 	mov	r18,zero
  82fe64:	04000644 	movi	r16,25
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  82fe68:	9009883a 	mov	r4,r18
  82fe6c:	880b883a 	mov	r5,r17
  82fe70:	980d883a 	mov	r6,r19
  82fe74:	a00f883a 	mov	r7,r20
  82fe78:	082e2b80 	call	82e2b8 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  82fe7c:	89000003 	ldbu	r4,0(r17)
  82fe80:	00803944 	movi	r2,229
  82fe84:	20c03fcc 	andi	r3,r4,255
  82fe88:	1880ab26 	beq	r3,r2,830138 <find_file_in_directory+0x85c>
  82fe8c:	1800aa26 	beq	r3,zero,830138 <find_file_in_directory+0x85c>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  82fe90:	20bfe7c4 	addi	r2,r4,-97
  82fe94:	10803fcc 	andi	r2,r2,255
  82fe98:	8080e12e 	bgeu	r16,r2,830220 <find_file_in_directory+0x944>
  82fe9c:	21003fcc 	andi	r4,r4,255
  82fea0:	2100201c 	xori	r4,r4,128
  82fea4:	213fe004 	addi	r4,r4,-128
  82fea8:	d8c000c3 	ldbu	r3,3(sp)
  82feac:	18bfe7c4 	addi	r2,r3,-97
  82feb0:	10803fcc 	andi	r2,r2,255
  82feb4:	8080d32e 	bgeu	r16,r2,830204 <find_file_in_directory+0x928>
  82feb8:	18803fcc 	andi	r2,r3,255
  82febc:	1080201c 	xori	r2,r2,128
  82fec0:	10bfe004 	addi	r2,r2,-128
  82fec4:	2080d41e 	bne	r4,r2,830218 <find_file_in_directory+0x93c>
  82fec8:	88c00043 	ldbu	r3,1(r17)
  82fecc:	18bfe7c4 	addi	r2,r3,-97
  82fed0:	10803fcc 	andi	r2,r2,255
  82fed4:	8080e62e 	bgeu	r16,r2,830270 <find_file_in_directory+0x994>
  82fed8:	19003fcc 	andi	r4,r3,255
  82fedc:	2100201c 	xori	r4,r4,128
  82fee0:	213fe004 	addi	r4,r4,-128
  82fee4:	d8c00103 	ldbu	r3,4(sp)
  82fee8:	18bfe7c4 	addi	r2,r3,-97
  82feec:	10803fcc 	andi	r2,r2,255
  82fef0:	8080da2e 	bgeu	r16,r2,83025c <find_file_in_directory+0x980>
  82fef4:	18803fcc 	andi	r2,r3,255
  82fef8:	1080201c 	xori	r2,r2,128
  82fefc:	10bfe004 	addi	r2,r2,-128
  82ff00:	2080c51e 	bne	r4,r2,830218 <find_file_in_directory+0x93c>
  82ff04:	88c00083 	ldbu	r3,2(r17)
  82ff08:	18bfe7c4 	addi	r2,r3,-97
  82ff0c:	10803fcc 	andi	r2,r2,255
  82ff10:	8080e92e 	bgeu	r16,r2,8302b8 <find_file_in_directory+0x9dc>
  82ff14:	19003fcc 	andi	r4,r3,255
  82ff18:	2100201c 	xori	r4,r4,128
  82ff1c:	213fe004 	addi	r4,r4,-128
  82ff20:	d8c00143 	ldbu	r3,5(sp)
  82ff24:	18bfe7c4 	addi	r2,r3,-97
  82ff28:	10803fcc 	andi	r2,r2,255
  82ff2c:	8080dd2e 	bgeu	r16,r2,8302a4 <find_file_in_directory+0x9c8>
  82ff30:	18803fcc 	andi	r2,r3,255
  82ff34:	1080201c 	xori	r2,r2,128
  82ff38:	10bfe004 	addi	r2,r2,-128
  82ff3c:	2080b61e 	bne	r4,r2,830218 <find_file_in_directory+0x93c>
  82ff40:	88c000c3 	ldbu	r3,3(r17)
  82ff44:	18bfe7c4 	addi	r2,r3,-97
  82ff48:	10803fcc 	andi	r2,r2,255
  82ff4c:	8080e42e 	bgeu	r16,r2,8302e0 <find_file_in_directory+0xa04>
  82ff50:	19003fcc 	andi	r4,r3,255
  82ff54:	2100201c 	xori	r4,r4,128
  82ff58:	213fe004 	addi	r4,r4,-128
  82ff5c:	d8c00183 	ldbu	r3,6(sp)
  82ff60:	18bfe7c4 	addi	r2,r3,-97
  82ff64:	10803fcc 	andi	r2,r2,255
  82ff68:	8080d82e 	bgeu	r16,r2,8302cc <find_file_in_directory+0x9f0>
  82ff6c:	18803fcc 	andi	r2,r3,255
  82ff70:	1080201c 	xori	r2,r2,128
  82ff74:	10bfe004 	addi	r2,r2,-128
  82ff78:	2080a71e 	bne	r4,r2,830218 <find_file_in_directory+0x93c>
  82ff7c:	88c00103 	ldbu	r3,4(r17)
  82ff80:	18bfe7c4 	addi	r2,r3,-97
  82ff84:	10803fcc 	andi	r2,r2,255
  82ff88:	8080df2e 	bgeu	r16,r2,830308 <find_file_in_directory+0xa2c>
  82ff8c:	19003fcc 	andi	r4,r3,255
  82ff90:	2100201c 	xori	r4,r4,128
  82ff94:	213fe004 	addi	r4,r4,-128
  82ff98:	d8c001c3 	ldbu	r3,7(sp)
  82ff9c:	18bfe7c4 	addi	r2,r3,-97
  82ffa0:	10803fcc 	andi	r2,r2,255
  82ffa4:	8080d32e 	bgeu	r16,r2,8302f4 <find_file_in_directory+0xa18>
  82ffa8:	18803fcc 	andi	r2,r3,255
  82ffac:	1080201c 	xori	r2,r2,128
  82ffb0:	10bfe004 	addi	r2,r2,-128
  82ffb4:	2080981e 	bne	r4,r2,830218 <find_file_in_directory+0x93c>
  82ffb8:	88c00143 	ldbu	r3,5(r17)
  82ffbc:	18bfe7c4 	addi	r2,r3,-97
  82ffc0:	10803fcc 	andi	r2,r2,255
  82ffc4:	8080da2e 	bgeu	r16,r2,830330 <find_file_in_directory+0xa54>
  82ffc8:	19003fcc 	andi	r4,r3,255
  82ffcc:	2100201c 	xori	r4,r4,128
  82ffd0:	213fe004 	addi	r4,r4,-128
  82ffd4:	d8c00203 	ldbu	r3,8(sp)
  82ffd8:	18bfe7c4 	addi	r2,r3,-97
  82ffdc:	10803fcc 	andi	r2,r2,255
  82ffe0:	8080ce2e 	bgeu	r16,r2,83031c <find_file_in_directory+0xa40>
  82ffe4:	18803fcc 	andi	r2,r3,255
  82ffe8:	1080201c 	xori	r2,r2,128
  82ffec:	10bfe004 	addi	r2,r2,-128
  82fff0:	2080891e 	bne	r4,r2,830218 <find_file_in_directory+0x93c>
  82fff4:	88c00183 	ldbu	r3,6(r17)
  82fff8:	18bfe7c4 	addi	r2,r3,-97
  82fffc:	10803fcc 	andi	r2,r2,255
  830000:	8080d52e 	bgeu	r16,r2,830358 <find_file_in_directory+0xa7c>
  830004:	19003fcc 	andi	r4,r3,255
  830008:	2100201c 	xori	r4,r4,128
  83000c:	213fe004 	addi	r4,r4,-128
  830010:	d8c00243 	ldbu	r3,9(sp)
  830014:	18bfe7c4 	addi	r2,r3,-97
  830018:	10803fcc 	andi	r2,r2,255
  83001c:	8080c92e 	bgeu	r16,r2,830344 <find_file_in_directory+0xa68>
  830020:	18803fcc 	andi	r2,r3,255
  830024:	1080201c 	xori	r2,r2,128
  830028:	10bfe004 	addi	r2,r2,-128
  83002c:	20807a1e 	bne	r4,r2,830218 <find_file_in_directory+0x93c>
  830030:	88c001c3 	ldbu	r3,7(r17)
  830034:	18bfe7c4 	addi	r2,r3,-97
  830038:	10803fcc 	andi	r2,r2,255
  83003c:	8080cf36 	bltu	r16,r2,83037c <find_file_in_directory+0xaa0>
  830040:	18bff804 	addi	r2,r3,-32
  830044:	11003fcc 	andi	r4,r2,255
  830048:	2100201c 	xori	r4,r4,128
  83004c:	213fe004 	addi	r4,r4,-128
  830050:	d8c00283 	ldbu	r3,10(sp)
  830054:	18bfe7c4 	addi	r2,r3,-97
  830058:	10803fcc 	andi	r2,r2,255
  83005c:	8080c336 	bltu	r16,r2,83036c <find_file_in_directory+0xa90>
  830060:	18bff804 	addi	r2,r3,-32
  830064:	10803fcc 	andi	r2,r2,255
  830068:	1080201c 	xori	r2,r2,128
  83006c:	10bfe004 	addi	r2,r2,-128
  830070:	208b003a 	cmpeq	r5,r4,r2
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  830074:	88c00203 	ldbu	r3,8(r17)
  830078:	18bfe7c4 	addi	r2,r3,-97
  83007c:	10803fcc 	andi	r2,r2,255
  830080:	80805b2e 	bgeu	r16,r2,8301f0 <find_file_in_directory+0x914>
  830084:	19003fcc 	andi	r4,r3,255
  830088:	2100201c 	xori	r4,r4,128
  83008c:	213fe004 	addi	r4,r4,-128
  830090:	d8c00003 	ldbu	r3,0(sp)
  830094:	18bfe7c4 	addi	r2,r3,-97
  830098:	10803fcc 	andi	r2,r2,255
  83009c:	80804f2e 	bgeu	r16,r2,8301dc <find_file_in_directory+0x900>
  8300a0:	18803fcc 	andi	r2,r3,255
  8300a4:	1080201c 	xori	r2,r2,128
  8300a8:	10bfe004 	addi	r2,r2,-128
  8300ac:	2080221e 	bne	r4,r2,830138 <find_file_in_directory+0x85c>
  8300b0:	88c00243 	ldbu	r3,9(r17)
  8300b4:	18bfe7c4 	addi	r2,r3,-97
  8300b8:	10803fcc 	andi	r2,r2,255
  8300bc:	8080622e 	bgeu	r16,r2,830248 <find_file_in_directory+0x96c>
  8300c0:	19003fcc 	andi	r4,r3,255
  8300c4:	2100201c 	xori	r4,r4,128
  8300c8:	213fe004 	addi	r4,r4,-128
  8300cc:	d8c00043 	ldbu	r3,1(sp)
  8300d0:	18bfe7c4 	addi	r2,r3,-97
  8300d4:	10803fcc 	andi	r2,r2,255
  8300d8:	8080562e 	bgeu	r16,r2,830234 <find_file_in_directory+0x958>
  8300dc:	18803fcc 	andi	r2,r3,255
  8300e0:	1080201c 	xori	r2,r2,128
  8300e4:	10bfe004 	addi	r2,r2,-128
  8300e8:	2080131e 	bne	r4,r2,830138 <find_file_in_directory+0x85c>
  8300ec:	88c00283 	ldbu	r3,10(r17)
  8300f0:	18bfe7c4 	addi	r2,r3,-97
  8300f4:	10803fcc 	andi	r2,r2,255
  8300f8:	80806636 	bltu	r16,r2,830294 <find_file_in_directory+0x9b8>
  8300fc:	18bff804 	addi	r2,r3,-32
  830100:	11003fcc 	andi	r4,r2,255
  830104:	2100201c 	xori	r4,r4,128
  830108:	213fe004 	addi	r4,r4,-128
  83010c:	d8c00083 	ldbu	r3,2(sp)
  830110:	18bfe7c4 	addi	r2,r3,-97
  830114:	10803fcc 	andi	r2,r2,255
  830118:	80805a36 	bltu	r16,r2,830284 <find_file_in_directory+0x9a8>
  83011c:	18bff804 	addi	r2,r3,-32
  830120:	10803fcc 	andi	r2,r2,255
  830124:	1080201c 	xori	r2,r2,128
  830128:	10bfe004 	addi	r2,r2,-128
  83012c:	2080021e 	bne	r4,r2,830138 <find_file_in_directory+0x85c>
						if ((file_record->name[0] != 0xe5)
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);

							if (match) {
  830130:	2805003a 	cmpeq	r2,r5,zero
  830134:	10009526 	beq	r2,zero,83038c <find_file_in_directory+0xab0>
  830138:	94800804 	addi	r18,r18,32
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  83013c:	00808004 	movi	r2,512
  830140:	90bf491e 	bne	r18,r2,82fe68 <find_file_in_directory+0x58c>
						}
					}
				} else {
					break;
				}
				if (result) {
  830144:	a804c03a 	cmpne	r2,r21,zero
  830148:	1000171e 	bne	r2,zero,8301a8 <find_file_in_directory+0x8cc>
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  83014c:	b8800383 	ldbu	r2,14(r23)
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  830150:	a5000044 	addi	r20,r20,1
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  830154:	a0bf3e16 	blt	r20,r2,82fe50 <find_file_in_directory+0x574>

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  830158:	b8c01117 	ldw	r3,68(r23)
  83015c:	d0a77817 	ldw	r2,-25120(gp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  830160:	9808d23a 	srli	r4,r19,8

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  830164:	10c5883a 	add	r2,r2,r3

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;

	if (sector_index != current_sector_index) {
  830168:	d0e77c17 	ldw	r3,-25104(gp)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  83016c:	2089883a 	add	r4,r4,r2

	if (sector_index != current_sector_index) {
  830170:	20c00326 	beq	r4,r3,830180 <find_file_in_directory+0x8a4>
		if (Read_Sector_Data(sector_index, 0) == false) {
  830174:	000b883a 	mov	r5,zero
  830178:	082e5440 	call	82e544 <Read_Sector_Data>
  83017c:	103eed26 	beq	r2,zero,82fd34 <find_file_in_directory+0x458>
			return false;
		}
	}
	*flag
  830180:	d0e77a17 	ldw	r3,-25112(gp)
  830184:	98803fcc 	andi	r2,r19,255
  830188:	1085883a 	add	r2,r2,r2
  83018c:	19000a17 	ldw	r4,40(r3)
  830190:	1105883a 	add	r2,r2,r4
  830194:	10c0002b 	ldhuio	r3,0(r2)
			if (result == false) {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  830198:	00bffe14 	movui	r2,65528
  83019c:	1cfffe0c 	andi	r19,r3,65528
  8301a0:	98bee426 	beq	r19,r2,82fd34 <find_file_in_directory+0x458>
  8301a4:	002b883a 	mov	r21,zero
				} else {
					// Directory path is invalid.
					return false;
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  8301a8:	00bffdd4 	movui	r2,65527
  8301ac:	14fee216 	blt	r2,r19,82fd38 <find_file_in_directory+0x45c>
  8301b0:	a805003a 	cmpeq	r2,r21,zero
  8301b4:	103ee026 	beq	r2,zero,82fd38 <find_file_in_directory+0x45c>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  8301b8:	b8800383 	ldbu	r2,14(r23)
  8301bc:	98ffff84 	addi	r3,r19,-2
  8301c0:	b9001417 	ldw	r4,80(r23)
  8301c4:	1887383a 	mul	r3,r3,r2
  8301c8:	192d883a 	add	r22,r3,r4
			int sector_index;

			for (sector_index = 0; sector_index
  8301cc:	103f1f1e 	bne	r2,zero,82fe4c <find_file_in_directory+0x570>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  8301d0:	a805003a 	cmpeq	r2,r21,zero
  8301d4:	103ff426 	beq	r2,zero,8301a8 <find_file_in_directory+0x8cc>
  8301d8:	003fdf06 	br	830158 <find_file_in_directory+0x87c>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  8301dc:	18bff804 	addi	r2,r3,-32
  8301e0:	10803fcc 	andi	r2,r2,255
  8301e4:	1080201c 	xori	r2,r2,128
  8301e8:	10bfe004 	addi	r2,r2,-128
  8301ec:	003faf06 	br	8300ac <find_file_in_directory+0x7d0>
  8301f0:	18bff804 	addi	r2,r3,-32
  8301f4:	11003fcc 	andi	r4,r2,255
  8301f8:	2100201c 	xori	r4,r4,128
  8301fc:	213fe004 	addi	r4,r4,-128
  830200:	003fa306 	br	830090 <find_file_in_directory+0x7b4>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  830204:	18bff804 	addi	r2,r3,-32
  830208:	10803fcc 	andi	r2,r2,255
  83020c:	1080201c 	xori	r2,r2,128
  830210:	10bfe004 	addi	r2,r2,-128
  830214:	20bf2c26 	beq	r4,r2,82fec8 <find_file_in_directory+0x5ec>
  830218:	000b883a 	mov	r5,zero
  83021c:	003f9506 	br	830074 <find_file_in_directory+0x798>
  830220:	20bff804 	addi	r2,r4,-32
  830224:	11003fcc 	andi	r4,r2,255
  830228:	2100201c 	xori	r4,r4,128
  83022c:	213fe004 	addi	r4,r4,-128
  830230:	003f1d06 	br	82fea8 <find_file_in_directory+0x5cc>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  830234:	18bff804 	addi	r2,r3,-32
  830238:	10803fcc 	andi	r2,r2,255
  83023c:	1080201c 	xori	r2,r2,128
  830240:	10bfe004 	addi	r2,r2,-128
  830244:	003fa806 	br	8300e8 <find_file_in_directory+0x80c>
  830248:	18bff804 	addi	r2,r3,-32
  83024c:	11003fcc 	andi	r4,r2,255
  830250:	2100201c 	xori	r4,r4,128
  830254:	213fe004 	addi	r4,r4,-128
  830258:	003f9c06 	br	8300cc <find_file_in_directory+0x7f0>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  83025c:	18bff804 	addi	r2,r3,-32
  830260:	10803fcc 	andi	r2,r2,255
  830264:	1080201c 	xori	r2,r2,128
  830268:	10bfe004 	addi	r2,r2,-128
  83026c:	003f2406 	br	82ff00 <find_file_in_directory+0x624>
  830270:	18bff804 	addi	r2,r3,-32
  830274:	11003fcc 	andi	r4,r2,255
  830278:	2100201c 	xori	r4,r4,128
  83027c:	213fe004 	addi	r4,r4,-128
  830280:	003f1806 	br	82fee4 <find_file_in_directory+0x608>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  830284:	18803fcc 	andi	r2,r3,255
  830288:	1080201c 	xori	r2,r2,128
  83028c:	10bfe004 	addi	r2,r2,-128
  830290:	003fa606 	br	83012c <find_file_in_directory+0x850>
  830294:	19003fcc 	andi	r4,r3,255
  830298:	2100201c 	xori	r4,r4,128
  83029c:	213fe004 	addi	r4,r4,-128
  8302a0:	003f9a06 	br	83010c <find_file_in_directory+0x830>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  8302a4:	18bff804 	addi	r2,r3,-32
  8302a8:	10803fcc 	andi	r2,r2,255
  8302ac:	1080201c 	xori	r2,r2,128
  8302b0:	10bfe004 	addi	r2,r2,-128
  8302b4:	003f2106 	br	82ff3c <find_file_in_directory+0x660>
  8302b8:	18bff804 	addi	r2,r3,-32
  8302bc:	11003fcc 	andi	r4,r2,255
  8302c0:	2100201c 	xori	r4,r4,128
  8302c4:	213fe004 	addi	r4,r4,-128
  8302c8:	003f1506 	br	82ff20 <find_file_in_directory+0x644>
  8302cc:	18bff804 	addi	r2,r3,-32
  8302d0:	10803fcc 	andi	r2,r2,255
  8302d4:	1080201c 	xori	r2,r2,128
  8302d8:	10bfe004 	addi	r2,r2,-128
  8302dc:	003f2606 	br	82ff78 <find_file_in_directory+0x69c>
  8302e0:	18bff804 	addi	r2,r3,-32
  8302e4:	11003fcc 	andi	r4,r2,255
  8302e8:	2100201c 	xori	r4,r4,128
  8302ec:	213fe004 	addi	r4,r4,-128
  8302f0:	003f1a06 	br	82ff5c <find_file_in_directory+0x680>
  8302f4:	18bff804 	addi	r2,r3,-32
  8302f8:	10803fcc 	andi	r2,r2,255
  8302fc:	1080201c 	xori	r2,r2,128
  830300:	10bfe004 	addi	r2,r2,-128
  830304:	003f2b06 	br	82ffb4 <find_file_in_directory+0x6d8>
  830308:	18bff804 	addi	r2,r3,-32
  83030c:	11003fcc 	andi	r4,r2,255
  830310:	2100201c 	xori	r4,r4,128
  830314:	213fe004 	addi	r4,r4,-128
  830318:	003f1f06 	br	82ff98 <find_file_in_directory+0x6bc>
  83031c:	18bff804 	addi	r2,r3,-32
  830320:	10803fcc 	andi	r2,r2,255
  830324:	1080201c 	xori	r2,r2,128
  830328:	10bfe004 	addi	r2,r2,-128
  83032c:	003f3006 	br	82fff0 <find_file_in_directory+0x714>
  830330:	18bff804 	addi	r2,r3,-32
  830334:	11003fcc 	andi	r4,r2,255
  830338:	2100201c 	xori	r4,r4,128
  83033c:	213fe004 	addi	r4,r4,-128
  830340:	003f2406 	br	82ffd4 <find_file_in_directory+0x6f8>
  830344:	18bff804 	addi	r2,r3,-32
  830348:	10803fcc 	andi	r2,r2,255
  83034c:	1080201c 	xori	r2,r2,128
  830350:	10bfe004 	addi	r2,r2,-128
  830354:	003f3506 	br	83002c <find_file_in_directory+0x750>
  830358:	18bff804 	addi	r2,r3,-32
  83035c:	11003fcc 	andi	r4,r2,255
  830360:	2100201c 	xori	r4,r4,128
  830364:	213fe004 	addi	r4,r4,-128
  830368:	003f2906 	br	830010 <find_file_in_directory+0x734>
  83036c:	18803fcc 	andi	r2,r3,255
  830370:	1080201c 	xori	r2,r2,128
  830374:	10bfe004 	addi	r2,r2,-128
  830378:	003f3d06 	br	830070 <find_file_in_directory+0x794>
  83037c:	19003fcc 	andi	r4,r3,255
  830380:	2100201c 	xori	r4,r4,128
  830384:	213fe004 	addi	r4,r4,-128
  830388:	003f3106 	br	830050 <find_file_in_directory+0x774>
						if ((file_record->name[0] != 0xe5)
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);

							if (match) {
  83038c:	05400044 	movi	r21,1
  830390:	003f8506 	br	8301a8 <find_file_in_directory+0x8cc>
	// Look for the file.
	if (directory_start_cluster == 0) {
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  830394:	3004927a 	slli	r2,r6,9
  830398:	00c02134 	movhi	r3,132
  83039c:	18fbb104 	addi	r3,r3,-4412
  8303a0:	1144b03a 	or	r2,r2,r5
  8303a4:	10c5883a 	add	r2,r2,r3
  8303a8:	15000003 	ldbu	r20,0(r2)
  8303ac:	003d9f06 	br	82fa2c <find_file_in_directory+0x150>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  8303b0:	18bff804 	addi	r2,r3,-32
  8303b4:	10803fcc 	andi	r2,r2,255
  8303b8:	1080201c 	xori	r2,r2,128
  8303bc:	10bfe004 	addi	r2,r2,-128
  8303c0:	003e3406 	br	82fc94 <find_file_in_directory+0x3b8>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  8303c4:	18bff804 	addi	r2,r3,-32
  8303c8:	10803fcc 	andi	r2,r2,255
  8303cc:	1080201c 	xori	r2,r2,128
  8303d0:	10bfe004 	addi	r2,r2,-128
  8303d4:	20bdb626 	beq	r4,r2,82fab0 <find_file_in_directory+0x1d4>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  8303d8:	88c00203 	ldbu	r3,8(r17)
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  8303dc:	000b883a 	mov	r5,zero
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  8303e0:	18bfe7c4 	addi	r2,r3,-97
  8303e4:	10803fcc 	andi	r2,r2,255
  8303e8:	80be2036 	bltu	r16,r2,82fc6c <find_file_in_directory+0x390>
  8303ec:	18bff804 	addi	r2,r3,-32
  8303f0:	11003fcc 	andi	r4,r2,255
  8303f4:	2100201c 	xori	r4,r4,128
  8303f8:	213fe004 	addi	r4,r4,-128
  8303fc:	003e1e06 	br	82fc78 <find_file_in_directory+0x39c>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  830400:	20bff804 	addi	r2,r4,-32
  830404:	11003fcc 	andi	r4,r2,255
  830408:	2100201c 	xori	r4,r4,128
  83040c:	213fe004 	addi	r4,r4,-128
  830410:	003d9f06 	br	82fa90 <find_file_in_directory+0x1b4>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  830414:	18bff804 	addi	r2,r3,-32
  830418:	10803fcc 	andi	r2,r2,255
  83041c:	1080201c 	xori	r2,r2,128
  830420:	10bfe004 	addi	r2,r2,-128
  830424:	003e2a06 	br	82fcd0 <find_file_in_directory+0x3f4>
  830428:	18bff804 	addi	r2,r3,-32
  83042c:	11003fcc 	andi	r4,r2,255
  830430:	2100201c 	xori	r4,r4,128
  830434:	213fe004 	addi	r4,r4,-128
  830438:	003e1e06 	br	82fcb4 <find_file_in_directory+0x3d8>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  83043c:	18bff804 	addi	r2,r3,-32
  830440:	10803fcc 	andi	r2,r2,255
  830444:	1080201c 	xori	r2,r2,128
  830448:	10bfe004 	addi	r2,r2,-128
  83044c:	003da606 	br	82fae8 <find_file_in_directory+0x20c>
  830450:	18bff804 	addi	r2,r3,-32
  830454:	11003fcc 	andi	r4,r2,255
  830458:	2100201c 	xori	r4,r4,128
  83045c:	213fe004 	addi	r4,r4,-128
  830460:	003d9a06 	br	82facc <find_file_in_directory+0x1f0>
  830464:	18bff804 	addi	r2,r3,-32
  830468:	d8c00143 	ldbu	r3,5(sp)
  83046c:	11003fcc 	andi	r4,r2,255
  830470:	2100201c 	xori	r4,r4,128
  830474:	18bfe7c4 	addi	r2,r3,-97
  830478:	10803fcc 	andi	r2,r2,255
  83047c:	213fe004 	addi	r4,r4,-128
  830480:	80bda536 	bltu	r16,r2,82fb18 <find_file_in_directory+0x23c>
  830484:	18bff804 	addi	r2,r3,-32
  830488:	10803fcc 	andi	r2,r2,255
  83048c:	1080201c 	xori	r2,r2,128
  830490:	10bfe004 	addi	r2,r2,-128
  830494:	003da306 	br	82fb24 <find_file_in_directory+0x248>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  830498:	18803fcc 	andi	r2,r3,255
  83049c:	1080201c 	xori	r2,r2,128
  8304a0:	10bfe004 	addi	r2,r2,-128
  8304a4:	003e1b06 	br	82fd14 <find_file_in_directory+0x438>
  8304a8:	19003fcc 	andi	r4,r3,255
  8304ac:	2100201c 	xori	r4,r4,128
  8304b0:	213fe004 	addi	r4,r4,-128
  8304b4:	003e0f06 	br	82fcf4 <find_file_in_directory+0x418>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  8304b8:	18bff804 	addi	r2,r3,-32
  8304bc:	d8c00183 	ldbu	r3,6(sp)
  8304c0:	11003fcc 	andi	r4,r2,255
  8304c4:	2100201c 	xori	r4,r4,128
  8304c8:	18bfe7c4 	addi	r2,r3,-97
  8304cc:	10803fcc 	andi	r2,r2,255
  8304d0:	213fe004 	addi	r4,r4,-128
  8304d4:	80bd9f36 	bltu	r16,r2,82fb54 <find_file_in_directory+0x278>
  8304d8:	18bff804 	addi	r2,r3,-32
  8304dc:	10803fcc 	andi	r2,r2,255
  8304e0:	1080201c 	xori	r2,r2,128
  8304e4:	10bfe004 	addi	r2,r2,-128
  8304e8:	003d9d06 	br	82fb60 <find_file_in_directory+0x284>
  8304ec:	18bff804 	addi	r2,r3,-32
  8304f0:	10803fcc 	andi	r2,r2,255
  8304f4:	1080201c 	xori	r2,r2,128
  8304f8:	10bfe004 	addi	r2,r2,-128
  8304fc:	003da706 	br	82fb9c <find_file_in_directory+0x2c0>
  830500:	18bff804 	addi	r2,r3,-32
  830504:	11003fcc 	andi	r4,r2,255
  830508:	2100201c 	xori	r4,r4,128
  83050c:	213fe004 	addi	r4,r4,-128
  830510:	003d9b06 	br	82fb80 <find_file_in_directory+0x2a4>
  830514:	18bff804 	addi	r2,r3,-32
  830518:	10803fcc 	andi	r2,r2,255
  83051c:	1080201c 	xori	r2,r2,128
  830520:	10bfe004 	addi	r2,r2,-128
  830524:	003dac06 	br	82fbd8 <find_file_in_directory+0x2fc>
  830528:	18bff804 	addi	r2,r3,-32
  83052c:	11003fcc 	andi	r4,r2,255
  830530:	2100201c 	xori	r4,r4,128
  830534:	213fe004 	addi	r4,r4,-128
  830538:	003da006 	br	82fbbc <find_file_in_directory+0x2e0>
  83053c:	18bff804 	addi	r2,r3,-32
  830540:	10803fcc 	andi	r2,r2,255
  830544:	1080201c 	xori	r2,r2,128
  830548:	10bfe004 	addi	r2,r2,-128
  83054c:	003db106 	br	82fc14 <find_file_in_directory+0x338>
  830550:	18bff804 	addi	r2,r3,-32
  830554:	11003fcc 	andi	r4,r2,255
  830558:	2100201c 	xori	r4,r4,128
  83055c:	213fe004 	addi	r4,r4,-128
  830560:	003da506 	br	82fbf8 <find_file_in_directory+0x31c>
  830564:	19003fcc 	andi	r4,r3,255
  830568:	d8c00283 	ldbu	r3,10(sp)
  83056c:	2100201c 	xori	r4,r4,128
  830570:	213fe004 	addi	r4,r4,-128
  830574:	18bfe7c4 	addi	r2,r3,-97
  830578:	10803fcc 	andi	r2,r2,255
  83057c:	80bdb22e 	bgeu	r16,r2,82fc48 <find_file_in_directory+0x36c>
  830580:	18803fcc 	andi	r2,r3,255
  830584:	1080201c 	xori	r2,r2,128
  830588:	10bfe004 	addi	r2,r2,-128
  83058c:	003db206 	br	82fc58 <find_file_in_directory+0x37c>
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);

						if (match) {
  830590:	05400044 	movi	r21,1
  830594:	003de806 	br	82fd38 <find_file_in_directory+0x45c>
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
	int location = get_dir_divider_location(file_name);
	int last_dir_separator = 0;
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  830598:	00800804 	movi	r2,32
	char extension[3] = { ' ', ' ', ' ' };
  83059c:	d8800085 	stb	r2,2(sp)
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
	int location = get_dir_divider_location(file_name);
	int last_dir_separator = 0;
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  8305a0:	d88000c5 	stb	r2,3(sp)
  8305a4:	d8800105 	stb	r2,4(sp)
  8305a8:	d8800145 	stb	r2,5(sp)
  8305ac:	d8800185 	stb	r2,6(sp)
  8305b0:	d88001c5 	stb	r2,7(sp)
  8305b4:	d8800205 	stb	r2,8(sp)
  8305b8:	d8800245 	stb	r2,9(sp)
  8305bc:	d8800285 	stb	r2,10(sp)
	char extension[3] = { ' ', ' ', ' ' };
  8305c0:	d8800005 	stb	r2,0(sp)
  8305c4:	d8800045 	stb	r2,1(sp)
	int ext_index = -1;
	int cluster = directory_start_cluster;
	int index;
	int length = strlen(file_name);
  8305c8:	9809883a 	mov	r4,r19
  8305cc:	0822e100 	call	822e10 <strlen>
  8305d0:	102b883a 	mov	r21,r2
  8305d4:	003ced06 	br	82f98c <find_file_in_directory+0xb0>

008305d8 <alt_up_sd_card_read>:
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  8305d8:	defffa04 	addi	sp,sp,-24
	short int ch = -1;

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  8305dc:	20ffffcc 	andi	r3,r4,65535
  8305e0:	008004c4 	movi	r2,19
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  8305e4:	dfc00515 	stw	ra,20(sp)
  8305e8:	dd000415 	stw	r20,16(sp)
  8305ec:	dcc00315 	stw	r19,12(sp)
  8305f0:	dc800215 	stw	r18,8(sp)
  8305f4:	dc400115 	stw	r17,4(sp)
  8305f8:	dc000015 	stw	r16,0(sp)
	short int ch = -1;

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  8305fc:	10c00936 	bltu	r2,r3,830624 <alt_up_sd_card_read+0x4c>
		if (active_files[file_handle].in_use) {
  830600:	20bfffcc 	andi	r2,r4,65535
  830604:	10a0001c 	xori	r2,r2,32768
  830608:	10a00004 	addi	r2,r2,-32768
  83060c:	102491ba 	slli	r18,r2,6
  830610:	05002174 	movhi	r20,133
  830614:	a533c504 	addi	r20,r20,-12524
  830618:	9521883a 	add	r16,r18,r20
  83061c:	80800f17 	ldw	r2,60(r16)
  830620:	1000091e 	bne	r2,zero,830648 <alt_up_sd_card_read+0x70>
					}
				}

				ch
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  830624:	00bfffc4 	movi	r2,-1
			}
		}
	}

	return ch;
}
  830628:	dfc00517 	ldw	ra,20(sp)
  83062c:	dd000417 	ldw	r20,16(sp)
  830630:	dcc00317 	ldw	r19,12(sp)
  830634:	dc800217 	ldw	r18,8(sp)
  830638:	dc400117 	ldw	r17,4(sp)
  83063c:	dc000017 	ldw	r16,0(sp)
  830640:	dec00604 	addi	sp,sp,24
  830644:	f800283a 	ret
{
	short int ch = -1;

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
		if (active_files[file_handle].in_use) {
			if (active_files[file_handle].current_byte_position
  830648:	81400917 	ldw	r5,36(r16)
  83064c:	80800617 	ldw	r2,24(r16)
  830650:	28bff42e 	bgeu	r5,r2,830624 <alt_up_sd_card_read+0x4c>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  830654:	04c02174 	movhi	r19,133
  830658:	9cf3b004 	addi	r19,r19,-12608
  83065c:	84400717 	ldw	r17,28(r16)
  830660:	99c00383 	ldbu	r7,14(r19)
  830664:	81800817 	ldw	r6,32(r16)
  830668:	88ffff84 	addi	r3,r17,-2
  83066c:	98801417 	ldw	r2,80(r19)
  830670:	19c7383a 	mul	r3,r3,r7
  830674:	3085883a 	add	r2,r6,r2
  830678:	1889883a 	add	r4,r3,r2

				if ((active_files[file_handle].current_byte_position > 0)
  83067c:	28000226 	beq	r5,zero,830688 <alt_up_sd_card_read+0xb0>
  830680:	28807fcc 	andi	r2,r5,511
  830684:	10001526 	beq	r2,zero,8306dc <alt_up_sd_card_read+0x104>
										+ 1;
						data_sector = data_sector + 1;
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  830688:	d1677817 	ldw	r5,-25120(gp)
  83068c:	d0a77c17 	ldw	r2,-25104(gp)
  830690:	2147883a 	add	r3,r4,r5
  830694:	1880171e 	bne	r3,r2,8306f4 <alt_up_sd_card_read+0x11c>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
					}
				}

				ch
  830698:	950d883a 	add	r6,r18,r20
  83069c:	31000917 	ldw	r4,36(r6)
  8306a0:	d0e77717 	ldw	r3,-25124(gp)
  8306a4:	20807fcc 	andi	r2,r4,511
  8306a8:	10c5883a 	add	r2,r2,r3
  8306ac:	11400023 	ldbuio	r5,0(r2)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  8306b0:	21000044 	addi	r4,r4,1
  8306b4:	28803fcc 	andi	r2,r5,255
  8306b8:	31000915 	stw	r4,36(r6)
			}
		}
	}

	return ch;
}
  8306bc:	dfc00517 	ldw	ra,20(sp)
  8306c0:	dd000417 	ldw	r20,16(sp)
  8306c4:	dcc00317 	ldw	r19,12(sp)
  8306c8:	dc800217 	ldw	r18,8(sp)
  8306cc:	dc400117 	ldw	r17,4(sp)
  8306d0:	dc000017 	ldw	r16,0(sp)
  8306d4:	dec00604 	addi	sp,sp,24
  8306d8:	f800283a 	ret

				if ((active_files[file_handle].current_byte_position > 0)
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  8306dc:	38bfffc4 	addi	r2,r7,-1
  8306e0:	30800826 	beq	r6,r2,830704 <alt_up_sd_card_read+0x12c>
							}
						} else {
							return -2;
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  8306e4:	30800044 	addi	r2,r6,1
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  8306e8:	21000044 	addi	r4,r4,1
							}
						} else {
							return -2;
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  8306ec:	80800815 	stw	r2,32(r16)
  8306f0:	003fe506 	br	830688 <alt_up_sd_card_read+0xb0>
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  8306f4:	082e5440 	call	82e544 <Read_Sector_Data>
  8306f8:	103fe71e 	bne	r2,zero,830698 <alt_up_sd_card_read+0xc0>
					}
				}

				ch
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  8306fc:	00bfff84 	movi	r2,-2
  830700:	003fc906 	br	830628 <alt_up_sd_card_read+0x50>

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  830704:	98c01117 	ldw	r3,68(r19)
  830708:	8804d23a 	srli	r2,r17,8

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  83070c:	d1277817 	ldw	r4,-25120(gp)

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  830710:	10c5883a 	add	r2,r2,r3

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;

	if (sector_index != current_sector_index) {
  830714:	d0e77c17 	ldw	r3,-25104(gp)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  830718:	1109883a 	add	r4,r2,r4

	if (sector_index != current_sector_index) {
  83071c:	20c00326 	beq	r4,r3,83072c <alt_up_sd_card_read+0x154>
		if (Read_Sector_Data(sector_index, 0) == false) {
  830720:	000b883a 	mov	r5,zero
  830724:	082e5440 	call	82e544 <Read_Sector_Data>
  830728:	103ff426 	beq	r2,zero,8306fc <alt_up_sd_card_read+0x124>
			return false;
		}
	}
	*flag
  83072c:	d0e77a17 	ldw	r3,-25112(gp)
  830730:	88803fcc 	andi	r2,r17,255
  830734:	1085883a 	add	r2,r2,r2
  830738:	19000a17 	ldw	r4,40(r3)
  83073c:	1105883a 	add	r2,r2,r4
  830740:	10c0002b 	ldhuio	r3,0(r2)
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  830744:	00bffe14 	movui	r2,65528
  830748:	197fffcc 	andi	r5,r3,65535
  83074c:	293ffe0c 	andi	r4,r5,65528
  830750:	20bfb426 	beq	r4,r2,830624 <alt_up_sd_card_read+0x4c>
							} else {
								active_files[file_handle].current_cluster_index
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
										= 0;
								data_sector
  830754:	98800383 	ldbu	r2,14(r19)
  830758:	28ffff84 	addi	r3,r5,-2
  83075c:	99001417 	ldw	r4,80(r19)
  830760:	1887383a 	mul	r3,r3,r2
								/* End of file */
								return -1;
							} else {
								active_files[file_handle].current_cluster_index
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  830764:	80000815 	stw	zero,32(r16)
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
								/* End of file */
								return -1;
							} else {
								active_files[file_handle].current_cluster_index
  830768:	81400715 	stw	r5,28(r16)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
										= 0;
								data_sector
  83076c:	1909883a 	add	r4,r3,r4
  830770:	003fc506 	br	830688 <alt_up_sd_card_read+0xb0>

00830774 <get_home_directory_cluster_for_file>:
}

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  830774:	deffee04 	addi	sp,sp,-72
  830778:	dc400915 	stw	r17,36(sp)
  83077c:	dfc01115 	stw	ra,68(sp)
  830780:	df001015 	stw	fp,64(sp)
  830784:	ddc00f15 	stw	r23,60(sp)
  830788:	dd800e15 	stw	r22,56(sp)
  83078c:	dd400d15 	stw	r21,52(sp)
  830790:	dd000c15 	stw	r20,48(sp)
  830794:	dcc00b15 	stw	r19,44(sp)
  830798:	dc800a15 	stw	r18,40(sp)
  83079c:	dc000815 	stw	r16,32(sp)
  8307a0:	d9400715 	stw	r5,28(sp)
  8307a4:	d9000615 	stw	r4,24(sp)
  8307a8:	3023883a 	mov	r17,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);
  8307ac:	0822e100 	call	822e10 <strlen>

	for (index = 0; index < length; index++) {
  8307b0:	0083330e 	bge	zero,r2,831480 <get_home_directory_cluster_for_file+0xd0c>
		if ((name[index] == '\\') || (name[index] == '/')) {
  8307b4:	d9000617 	ldw	r4,24(sp)
  8307b8:	01401704 	movi	r5,92
  8307bc:	20c00007 	ldb	r3,0(r4)
  8307c0:	19432f26 	beq	r3,r5,831480 <get_home_directory_cluster_for_file+0xd0c>
  8307c4:	01000bc4 	movi	r4,47
  8307c8:	19032d26 	beq	r3,r4,831480 <get_home_directory_cluster_for_file+0xd0c>
  8307cc:	002d883a 	mov	r22,zero
  8307d0:	00000306 	br	8307e0 <get_home_directory_cluster_for_file+0x6c>
  8307d4:	18c00007 	ldb	r3,0(r3)
  8307d8:	19400b26 	beq	r3,r5,830808 <get_home_directory_cluster_for_file+0x94>
  8307dc:	19000a26 	beq	r3,r4,830808 <get_home_directory_cluster_for_file+0x94>
  8307e0:	d9800617 	ldw	r6,24(sp)
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  8307e4:	b5800044 	addi	r22,r22,1
		if ((name[index] == '\\') || (name[index] == '/')) {
  8307e8:	3587883a 	add	r3,r6,r22
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  8307ec:	15bff91e 	bne	r2,r22,8307d4 <get_home_directory_cluster_for_file+0x60>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  8307f0:	d9000717 	ldw	r4,28(sp)
  8307f4:	20000015 	stw	zero,0(r4)
	if (home_dir_cluster == 0) {
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  8307f8:	01800044 	movi	r6,1
  8307fc:	d9800515 	stw	r6,20(sp)
  830800:	88000a15 	stw	zero,40(r17)
  830804:	0000f606 	br	830be0 <get_home_directory_cluster_for_file+0x46c>
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  830808:	05831e0e 	bge	zero,r22,831484 <get_home_directory_cluster_for_file+0xd10>
  83080c:	dc000617 	ldw	r16,24(sp)
  830810:	d8000515 	stw	zero,20(sp)
  830814:	0027883a 	mov	r19,zero
  830818:	d8000415 	stw	zero,16(sp)
  83081c:	07002174 	movhi	fp,133
  830820:	e733b004 	addi	fp,fp,-12608
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  830824:	00800804 	movi	r2,32
		char extension[3] = { ' ', ' ', ' ' };
  830828:	8009883a 	mov	r4,r16
  83082c:	000d883a 	mov	r6,zero
  830830:	01ffffc4 	movi	r7,-1
  830834:	02000b84 	movi	r8,46
  830838:	da4000c4 	addi	r9,sp,3
  83083c:	d8800085 	stb	r2,2(sp)
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  830840:	d88000c5 	stb	r2,3(sp)
  830844:	d8800105 	stb	r2,4(sp)
  830848:	d8800145 	stb	r2,5(sp)
  83084c:	d8800185 	stb	r2,6(sp)
  830850:	d88001c5 	stb	r2,7(sp)
  830854:	d8800205 	stb	r2,8(sp)
  830858:	d8800245 	stb	r2,9(sp)
  83085c:	d8800285 	stb	r2,10(sp)
		char extension[3] = { ' ', ' ', ' ' };
  830860:	d8800005 	stb	r2,0(sp)
  830864:	d8800045 	stb	r2,1(sp)
  830868:	00000806 	br	83088c <get_home_directory_cluster_for_file+0x118>
			if (file_name[index + start_location] == '.') {
				ext_index = index;
			} else if (ext_index < 0) {
				name[index] = file_name[index + start_location];
			} else {
				extension[index - ext_index]
  83086c:	31c5c83a 	sub	r2,r6,r7
  830870:	d885883a 	add	r2,sp,r2
		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
			if (file_name[index + start_location] == '.') {
				ext_index = index;
			} else if (ext_index < 0) {
				name[index] = file_name[index + start_location];
  830874:	498b883a 	add	r5,r9,r6

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
			if (file_name[index + start_location] == '.') {
				ext_index = index;
			} else if (ext_index < 0) {
  830878:	3800e616 	blt	r7,zero,830c14 <get_home_directory_cluster_for_file+0x4a0>
				name[index] = file_name[index + start_location];
			} else {
				extension[index - ext_index]
  83087c:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  830880:	31800044 	addi	r6,r6,1
  830884:	21000044 	addi	r4,r4,1
  830888:	3580090e 	bge	r6,r22,8308b0 <get_home_directory_cluster_for_file+0x13c>
			if (file_name[index + start_location] == '.') {
  83088c:	20c00003 	ldbu	r3,0(r4)
  830890:	18803fcc 	andi	r2,r3,255
  830894:	1080201c 	xori	r2,r2,128
  830898:	10bfe004 	addi	r2,r2,-128
  83089c:	123ff31e 	bne	r2,r8,83086c <get_home_directory_cluster_for_file+0xf8>
  8308a0:	300f883a 	mov	r7,r6
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  8308a4:	31800044 	addi	r6,r6,1
  8308a8:	21000044 	addi	r4,r4,1
  8308ac:	35bff716 	blt	r6,r22,83088c <get_home_directory_cluster_for_file+0x118>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  8308b0:	9800da1e 	bne	r19,zero,830c1c <get_home_directory_cluster_for_file+0x4a8>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  8308b4:	e180050b 	ldhu	r6,20(fp)
  8308b8:	e140030b 	ldhu	r5,12(fp)
  8308bc:	008003c4 	movi	r2,15
  8308c0:	3008917a 	slli	r4,r6,5
  8308c4:	2146b03a 	or	r3,r4,r5
  8308c8:	10c2632e 	bgeu	r2,r3,831258 <get_home_directory_cluster_for_file+0xae4>
  8308cc:	0820b480 	call	820b48 <__divsi3>
  8308d0:	1029883a 	mov	r20,r2
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8308d4:	0500c10e 	bge	zero,r20,830bdc <get_home_directory_cluster_for_file+0x468>
  8308d8:	0027883a 	mov	r19,zero
				if (Read_Sector_Data(sector_index
  8308dc:	e1001317 	ldw	r4,76(fp)
  8308e0:	d1677817 	ldw	r5,-25120(gp)
  8308e4:	9909883a 	add	r4,r19,r4
  8308e8:	082e5440 	call	82e544 <Read_Sector_Data>
  8308ec:	1000bb26 	beq	r2,zero,830bdc <get_home_directory_cluster_for_file+0x468>
								break;
							}
						}
					}
				} else {
					break;
  8308f0:	0025883a 	mov	r18,zero
  8308f4:	04000644 	movi	r16,25
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  8308f8:	9009883a 	mov	r4,r18
  8308fc:	880b883a 	mov	r5,r17
  830900:	000d883a 	mov	r6,zero
  830904:	980f883a 	mov	r7,r19
  830908:	082e2b80 	call	82e2b8 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  83090c:	89000003 	ldbu	r4,0(r17)
  830910:	00803944 	movi	r2,229
  830914:	20c03fcc 	andi	r3,r4,255
  830918:	1880ab26 	beq	r3,r2,830bc8 <get_home_directory_cluster_for_file+0x454>
  83091c:	1800aa26 	beq	r3,zero,830bc8 <get_home_directory_cluster_for_file+0x454>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  830920:	20bfe7c4 	addi	r2,r4,-97
  830924:	10803fcc 	andi	r2,r2,255
  830928:	8082522e 	bgeu	r16,r2,831274 <get_home_directory_cluster_for_file+0xb00>
  83092c:	d8c000c3 	ldbu	r3,3(sp)
  830930:	21003fcc 	andi	r4,r4,255
  830934:	2100201c 	xori	r4,r4,128
  830938:	18bfe7c4 	addi	r2,r3,-97
  83093c:	10803fcc 	andi	r2,r2,255
  830940:	213fe004 	addi	r4,r4,-128
  830944:	8082532e 	bgeu	r16,r2,831294 <get_home_directory_cluster_for_file+0xb20>
  830948:	18803fcc 	andi	r2,r3,255
  83094c:	1080201c 	xori	r2,r2,128
  830950:	10bfe004 	addi	r2,r2,-128
  830954:	2082541e 	bne	r4,r2,8312a8 <get_home_directory_cluster_for_file+0xb34>
  830958:	88c00043 	ldbu	r3,1(r17)
  83095c:	18bfe7c4 	addi	r2,r3,-97
  830960:	10803fcc 	andi	r2,r2,255
  830964:	8082672e 	bgeu	r16,r2,831304 <get_home_directory_cluster_for_file+0xb90>
  830968:	19003fcc 	andi	r4,r3,255
  83096c:	2100201c 	xori	r4,r4,128
  830970:	213fe004 	addi	r4,r4,-128
  830974:	d8c00103 	ldbu	r3,4(sp)
  830978:	18bfe7c4 	addi	r2,r3,-97
  83097c:	10803fcc 	andi	r2,r2,255
  830980:	80825b2e 	bgeu	r16,r2,8312f0 <get_home_directory_cluster_for_file+0xb7c>
  830984:	18803fcc 	andi	r2,r3,255
  830988:	1080201c 	xori	r2,r2,128
  83098c:	10bfe004 	addi	r2,r2,-128
  830990:	2082451e 	bne	r4,r2,8312a8 <get_home_directory_cluster_for_file+0xb34>
  830994:	88c00083 	ldbu	r3,2(r17)
  830998:	18bfe7c4 	addi	r2,r3,-97
  83099c:	10803fcc 	andi	r2,r2,255
  8309a0:	8082742e 	bgeu	r16,r2,831374 <get_home_directory_cluster_for_file+0xc00>
  8309a4:	19003fcc 	andi	r4,r3,255
  8309a8:	2100201c 	xori	r4,r4,128
  8309ac:	213fe004 	addi	r4,r4,-128
  8309b0:	d8c00143 	ldbu	r3,5(sp)
  8309b4:	18bfe7c4 	addi	r2,r3,-97
  8309b8:	10803fcc 	andi	r2,r2,255
  8309bc:	8082682e 	bgeu	r16,r2,831360 <get_home_directory_cluster_for_file+0xbec>
  8309c0:	18803fcc 	andi	r2,r3,255
  8309c4:	1080201c 	xori	r2,r2,128
  8309c8:	10bfe004 	addi	r2,r2,-128
  8309cc:	2082361e 	bne	r4,r2,8312a8 <get_home_directory_cluster_for_file+0xb34>
  8309d0:	88c000c3 	ldbu	r3,3(r17)
  8309d4:	18bfe7c4 	addi	r2,r3,-97
  8309d8:	10803fcc 	andi	r2,r2,255
  8309dc:	80826f2e 	bgeu	r16,r2,83139c <get_home_directory_cluster_for_file+0xc28>
  8309e0:	19003fcc 	andi	r4,r3,255
  8309e4:	2100201c 	xori	r4,r4,128
  8309e8:	213fe004 	addi	r4,r4,-128
  8309ec:	d8c00183 	ldbu	r3,6(sp)
  8309f0:	18bfe7c4 	addi	r2,r3,-97
  8309f4:	10803fcc 	andi	r2,r2,255
  8309f8:	8082632e 	bgeu	r16,r2,831388 <get_home_directory_cluster_for_file+0xc14>
  8309fc:	18803fcc 	andi	r2,r3,255
  830a00:	1080201c 	xori	r2,r2,128
  830a04:	10bfe004 	addi	r2,r2,-128
  830a08:	2082271e 	bne	r4,r2,8312a8 <get_home_directory_cluster_for_file+0xb34>
  830a0c:	88c00103 	ldbu	r3,4(r17)
  830a10:	18bfe7c4 	addi	r2,r3,-97
  830a14:	10803fcc 	andi	r2,r2,255
  830a18:	80826a2e 	bgeu	r16,r2,8313c4 <get_home_directory_cluster_for_file+0xc50>
  830a1c:	19003fcc 	andi	r4,r3,255
  830a20:	2100201c 	xori	r4,r4,128
  830a24:	213fe004 	addi	r4,r4,-128
  830a28:	d8c001c3 	ldbu	r3,7(sp)
  830a2c:	18bfe7c4 	addi	r2,r3,-97
  830a30:	10803fcc 	andi	r2,r2,255
  830a34:	80825e2e 	bgeu	r16,r2,8313b0 <get_home_directory_cluster_for_file+0xc3c>
  830a38:	18803fcc 	andi	r2,r3,255
  830a3c:	1080201c 	xori	r2,r2,128
  830a40:	10bfe004 	addi	r2,r2,-128
  830a44:	2082181e 	bne	r4,r2,8312a8 <get_home_directory_cluster_for_file+0xb34>
  830a48:	88c00143 	ldbu	r3,5(r17)
  830a4c:	18bfe7c4 	addi	r2,r3,-97
  830a50:	10803fcc 	andi	r2,r2,255
  830a54:	8082652e 	bgeu	r16,r2,8313ec <get_home_directory_cluster_for_file+0xc78>
  830a58:	19003fcc 	andi	r4,r3,255
  830a5c:	2100201c 	xori	r4,r4,128
  830a60:	213fe004 	addi	r4,r4,-128
  830a64:	d8c00203 	ldbu	r3,8(sp)
  830a68:	18bfe7c4 	addi	r2,r3,-97
  830a6c:	10803fcc 	andi	r2,r2,255
  830a70:	8082592e 	bgeu	r16,r2,8313d8 <get_home_directory_cluster_for_file+0xc64>
  830a74:	18803fcc 	andi	r2,r3,255
  830a78:	1080201c 	xori	r2,r2,128
  830a7c:	10bfe004 	addi	r2,r2,-128
  830a80:	2082091e 	bne	r4,r2,8312a8 <get_home_directory_cluster_for_file+0xb34>
  830a84:	88c00183 	ldbu	r3,6(r17)
  830a88:	18bfe7c4 	addi	r2,r3,-97
  830a8c:	10803fcc 	andi	r2,r2,255
  830a90:	8082602e 	bgeu	r16,r2,831414 <get_home_directory_cluster_for_file+0xca0>
  830a94:	19003fcc 	andi	r4,r3,255
  830a98:	2100201c 	xori	r4,r4,128
  830a9c:	213fe004 	addi	r4,r4,-128
  830aa0:	d8c00243 	ldbu	r3,9(sp)
  830aa4:	18bfe7c4 	addi	r2,r3,-97
  830aa8:	10803fcc 	andi	r2,r2,255
  830aac:	8082542e 	bgeu	r16,r2,831400 <get_home_directory_cluster_for_file+0xc8c>
  830ab0:	18803fcc 	andi	r2,r3,255
  830ab4:	1080201c 	xori	r2,r2,128
  830ab8:	10bfe004 	addi	r2,r2,-128
  830abc:	2081fa1e 	bne	r4,r2,8312a8 <get_home_directory_cluster_for_file+0xb34>
  830ac0:	88c001c3 	ldbu	r3,7(r17)
  830ac4:	18bfe7c4 	addi	r2,r3,-97
  830ac8:	10803fcc 	andi	r2,r2,255
  830acc:	80825a36 	bltu	r16,r2,831438 <get_home_directory_cluster_for_file+0xcc4>
  830ad0:	18bff804 	addi	r2,r3,-32
  830ad4:	11003fcc 	andi	r4,r2,255
  830ad8:	2100201c 	xori	r4,r4,128
  830adc:	213fe004 	addi	r4,r4,-128
  830ae0:	d8c00283 	ldbu	r3,10(sp)
  830ae4:	18bfe7c4 	addi	r2,r3,-97
  830ae8:	10803fcc 	andi	r2,r2,255
  830aec:	80824e36 	bltu	r16,r2,831428 <get_home_directory_cluster_for_file+0xcb4>
  830af0:	18bff804 	addi	r2,r3,-32
  830af4:	10803fcc 	andi	r2,r2,255
  830af8:	1080201c 	xori	r2,r2,128
  830afc:	10bfe004 	addi	r2,r2,-128
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  830b00:	88c00203 	ldbu	r3,8(r17)
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  830b04:	208b003a 	cmpeq	r5,r4,r2
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  830b08:	18bfe7c4 	addi	r2,r3,-97
  830b0c:	10803fcc 	andi	r2,r2,255
  830b10:	8081ea2e 	bgeu	r16,r2,8312bc <get_home_directory_cluster_for_file+0xb48>
  830b14:	19003fcc 	andi	r4,r3,255
  830b18:	d8c00003 	ldbu	r3,0(sp)
  830b1c:	2100201c 	xori	r4,r4,128
  830b20:	213fe004 	addi	r4,r4,-128
  830b24:	18bfe7c4 	addi	r2,r3,-97
  830b28:	10803fcc 	andi	r2,r2,255
  830b2c:	8081eb2e 	bgeu	r16,r2,8312dc <get_home_directory_cluster_for_file+0xb68>
  830b30:	18803fcc 	andi	r2,r3,255
  830b34:	1080201c 	xori	r2,r2,128
  830b38:	10bfe004 	addi	r2,r2,-128
  830b3c:	2080221e 	bne	r4,r2,830bc8 <get_home_directory_cluster_for_file+0x454>
  830b40:	88c00243 	ldbu	r3,9(r17)
  830b44:	18bfe7c4 	addi	r2,r3,-97
  830b48:	10803fcc 	andi	r2,r2,255
  830b4c:	8081f72e 	bgeu	r16,r2,83132c <get_home_directory_cluster_for_file+0xbb8>
  830b50:	19003fcc 	andi	r4,r3,255
  830b54:	2100201c 	xori	r4,r4,128
  830b58:	213fe004 	addi	r4,r4,-128
  830b5c:	d8c00043 	ldbu	r3,1(sp)
  830b60:	18bfe7c4 	addi	r2,r3,-97
  830b64:	10803fcc 	andi	r2,r2,255
  830b68:	8081eb2e 	bgeu	r16,r2,831318 <get_home_directory_cluster_for_file+0xba4>
  830b6c:	18803fcc 	andi	r2,r3,255
  830b70:	1080201c 	xori	r2,r2,128
  830b74:	10bfe004 	addi	r2,r2,-128
  830b78:	2080131e 	bne	r4,r2,830bc8 <get_home_directory_cluster_for_file+0x454>
  830b7c:	88c00283 	ldbu	r3,10(r17)
  830b80:	18bfe7c4 	addi	r2,r3,-97
  830b84:	10803fcc 	andi	r2,r2,255
  830b88:	8081f136 	bltu	r16,r2,831350 <get_home_directory_cluster_for_file+0xbdc>
  830b8c:	18bff804 	addi	r2,r3,-32
  830b90:	11003fcc 	andi	r4,r2,255
  830b94:	2100201c 	xori	r4,r4,128
  830b98:	213fe004 	addi	r4,r4,-128
  830b9c:	d8c00083 	ldbu	r3,2(sp)
  830ba0:	18bfe7c4 	addi	r2,r3,-97
  830ba4:	10803fcc 	andi	r2,r2,255
  830ba8:	8081e536 	bltu	r16,r2,831340 <get_home_directory_cluster_for_file+0xbcc>
  830bac:	18bff804 	addi	r2,r3,-32
  830bb0:	10803fcc 	andi	r2,r2,255
  830bb4:	1080201c 	xori	r2,r2,128
  830bb8:	10bfe004 	addi	r2,r2,-128
  830bbc:	2080021e 	bne	r4,r2,830bc8 <get_home_directory_cluster_for_file+0x454>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
							if (match) {
  830bc0:	2805003a 	cmpeq	r2,r5,zero
  830bc4:	10022026 	beq	r2,zero,831448 <get_home_directory_cluster_for_file+0xcd4>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  830bc8:	94800804 	addi	r18,r18,32
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  830bcc:	00808004 	movi	r2,512
  830bd0:	90bf491e 	bne	r18,r2,8308f8 <get_home_directory_cluster_for_file+0x184>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  830bd4:	9cc00044 	addi	r19,r19,1
  830bd8:	a4ff401e 	bne	r20,r19,8308dc <get_home_directory_cluster_for_file+0x168>
		}
	}

	*home_directory_cluster = home_dir_cluster;
	if (home_dir_cluster == 0) {
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  830bdc:	d8000515 	stw	zero,20(sp)
		result = true;
	}
	return result;
}
  830be0:	d8800517 	ldw	r2,20(sp)
  830be4:	dfc01117 	ldw	ra,68(sp)
  830be8:	df001017 	ldw	fp,64(sp)
  830bec:	ddc00f17 	ldw	r23,60(sp)
  830bf0:	dd800e17 	ldw	r22,56(sp)
  830bf4:	dd400d17 	ldw	r21,52(sp)
  830bf8:	dd000c17 	ldw	r20,48(sp)
  830bfc:	dcc00b17 	ldw	r19,44(sp)
  830c00:	dc800a17 	ldw	r18,40(sp)
  830c04:	dc400917 	ldw	r17,36(sp)
  830c08:	dc000817 	ldw	r16,32(sp)
  830c0c:	dec01204 	addi	sp,sp,72
  830c10:	f800283a 	ret
		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
			if (file_name[index + start_location] == '.') {
				ext_index = index;
			} else if (ext_index < 0) {
				name[index] = file_name[index + start_location];
  830c14:	28c00005 	stb	r3,0(r5)
  830c18:	003f1906 	br	830880 <get_home_directory_cluster_for_file+0x10c>
			int cluster = home_dir_cluster;

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  830c1c:	e1000383 	ldbu	r4,14(fp)
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  830c20:	98bfff84 	addi	r2,r19,-2
  830c24:	100b883a 	mov	r5,r2
  830c28:	d8800315 	stw	r2,12(sp)
			int cluster = home_dir_cluster;

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  830c2c:	e0c01417 	ldw	r3,80(fp)
  830c30:	2145383a 	mul	r2,r4,r5
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  830c34:	982b883a 	mov	r21,r19
			int cluster = home_dir_cluster;

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  830c38:	10ef883a 	add	r23,r2,r3
				int sector_index;

				for (sector_index = 0; sector_index
  830c3c:	2000df26 	beq	r4,zero,830fbc <get_home_directory_cluster_for_file+0x848>
  830c40:	0029883a 	mov	r20,zero
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  830c44:	d1677817 	ldw	r5,-25120(gp)
  830c48:	bd09883a 	add	r4,r23,r20
  830c4c:	082e5440 	call	82e544 <Read_Sector_Data>
  830c50:	1000da26 	beq	r2,zero,830fbc <get_home_directory_cluster_for_file+0x848>
									break;
								}
							}
						}
					} else {
						break;
  830c54:	0025883a 	mov	r18,zero
  830c58:	04000644 	movi	r16,25
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  830c5c:	9009883a 	mov	r4,r18
  830c60:	880b883a 	mov	r5,r17
  830c64:	980d883a 	mov	r6,r19
  830c68:	a00f883a 	mov	r7,r20
  830c6c:	082e2b80 	call	82e2b8 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  830c70:	89000003 	ldbu	r4,0(r17)
  830c74:	00803944 	movi	r2,229
  830c78:	20c03fcc 	andi	r3,r4,255
  830c7c:	1880ab26 	beq	r3,r2,830f2c <get_home_directory_cluster_for_file+0x7b8>
  830c80:	1800aa26 	beq	r3,zero,830f2c <get_home_directory_cluster_for_file+0x7b8>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  830c84:	20bfe7c4 	addi	r2,r4,-97
  830c88:	10803fcc 	andi	r2,r2,255
  830c8c:	8081002e 	bgeu	r16,r2,831090 <get_home_directory_cluster_for_file+0x91c>
  830c90:	21003fcc 	andi	r4,r4,255
  830c94:	2100201c 	xori	r4,r4,128
  830c98:	213fe004 	addi	r4,r4,-128
  830c9c:	d8c000c3 	ldbu	r3,3(sp)
  830ca0:	18bfe7c4 	addi	r2,r3,-97
  830ca4:	10803fcc 	andi	r2,r2,255
  830ca8:	8080f22e 	bgeu	r16,r2,831074 <get_home_directory_cluster_for_file+0x900>
  830cac:	18803fcc 	andi	r2,r3,255
  830cb0:	1080201c 	xori	r2,r2,128
  830cb4:	10bfe004 	addi	r2,r2,-128
  830cb8:	2080f31e 	bne	r4,r2,831088 <get_home_directory_cluster_for_file+0x914>
  830cbc:	88c00043 	ldbu	r3,1(r17)
  830cc0:	18bfe7c4 	addi	r2,r3,-97
  830cc4:	10803fcc 	andi	r2,r2,255
  830cc8:	8080fb2e 	bgeu	r16,r2,8310b8 <get_home_directory_cluster_for_file+0x944>
  830ccc:	19003fcc 	andi	r4,r3,255
  830cd0:	2100201c 	xori	r4,r4,128
  830cd4:	213fe004 	addi	r4,r4,-128
  830cd8:	d8c00103 	ldbu	r3,4(sp)
  830cdc:	18bfe7c4 	addi	r2,r3,-97
  830ce0:	10803fcc 	andi	r2,r2,255
  830ce4:	8080ef2e 	bgeu	r16,r2,8310a4 <get_home_directory_cluster_for_file+0x930>
  830ce8:	18803fcc 	andi	r2,r3,255
  830cec:	1080201c 	xori	r2,r2,128
  830cf0:	10bfe004 	addi	r2,r2,-128
  830cf4:	2080e41e 	bne	r4,r2,831088 <get_home_directory_cluster_for_file+0x914>
  830cf8:	88c00083 	ldbu	r3,2(r17)
  830cfc:	18bfe7c4 	addi	r2,r3,-97
  830d00:	10803fcc 	andi	r2,r2,255
  830d04:	8081062e 	bgeu	r16,r2,831120 <get_home_directory_cluster_for_file+0x9ac>
  830d08:	19003fcc 	andi	r4,r3,255
  830d0c:	d8c00143 	ldbu	r3,5(sp)
  830d10:	2100201c 	xori	r4,r4,128
  830d14:	213fe004 	addi	r4,r4,-128
  830d18:	18bfe7c4 	addi	r2,r3,-97
  830d1c:	10803fcc 	andi	r2,r2,255
  830d20:	8081072e 	bgeu	r16,r2,831140 <get_home_directory_cluster_for_file+0x9cc>
  830d24:	18803fcc 	andi	r2,r3,255
  830d28:	1080201c 	xori	r2,r2,128
  830d2c:	10bfe004 	addi	r2,r2,-128
  830d30:	2080d51e 	bne	r4,r2,831088 <get_home_directory_cluster_for_file+0x914>
  830d34:	88c000c3 	ldbu	r3,3(r17)
  830d38:	18bfe7c4 	addi	r2,r3,-97
  830d3c:	10803fcc 	andi	r2,r2,255
  830d40:	8081042e 	bgeu	r16,r2,831154 <get_home_directory_cluster_for_file+0x9e0>
  830d44:	19003fcc 	andi	r4,r3,255
  830d48:	d8c00183 	ldbu	r3,6(sp)
  830d4c:	2100201c 	xori	r4,r4,128
  830d50:	213fe004 	addi	r4,r4,-128
  830d54:	18bfe7c4 	addi	r2,r3,-97
  830d58:	10803fcc 	andi	r2,r2,255
  830d5c:	8081052e 	bgeu	r16,r2,831174 <get_home_directory_cluster_for_file+0xa00>
  830d60:	18803fcc 	andi	r2,r3,255
  830d64:	1080201c 	xori	r2,r2,128
  830d68:	10bfe004 	addi	r2,r2,-128
  830d6c:	2080c61e 	bne	r4,r2,831088 <get_home_directory_cluster_for_file+0x914>
  830d70:	88c00103 	ldbu	r3,4(r17)
  830d74:	18bfe7c4 	addi	r2,r3,-97
  830d78:	10803fcc 	andi	r2,r2,255
  830d7c:	8081022e 	bgeu	r16,r2,831188 <get_home_directory_cluster_for_file+0xa14>
  830d80:	19003fcc 	andi	r4,r3,255
  830d84:	d8c001c3 	ldbu	r3,7(sp)
  830d88:	2100201c 	xori	r4,r4,128
  830d8c:	213fe004 	addi	r4,r4,-128
  830d90:	18bfe7c4 	addi	r2,r3,-97
  830d94:	10803fcc 	andi	r2,r2,255
  830d98:	8081032e 	bgeu	r16,r2,8311a8 <get_home_directory_cluster_for_file+0xa34>
  830d9c:	18803fcc 	andi	r2,r3,255
  830da0:	1080201c 	xori	r2,r2,128
  830da4:	10bfe004 	addi	r2,r2,-128
  830da8:	2080b71e 	bne	r4,r2,831088 <get_home_directory_cluster_for_file+0x914>
  830dac:	88c00143 	ldbu	r3,5(r17)
  830db0:	18bfe7c4 	addi	r2,r3,-97
  830db4:	10803fcc 	andi	r2,r2,255
  830db8:	8081002e 	bgeu	r16,r2,8311bc <get_home_directory_cluster_for_file+0xa48>
  830dbc:	19003fcc 	andi	r4,r3,255
  830dc0:	d8c00203 	ldbu	r3,8(sp)
  830dc4:	2100201c 	xori	r4,r4,128
  830dc8:	213fe004 	addi	r4,r4,-128
  830dcc:	18bfe7c4 	addi	r2,r3,-97
  830dd0:	10803fcc 	andi	r2,r2,255
  830dd4:	8081012e 	bgeu	r16,r2,8311dc <get_home_directory_cluster_for_file+0xa68>
  830dd8:	18803fcc 	andi	r2,r3,255
  830ddc:	1080201c 	xori	r2,r2,128
  830de0:	10bfe004 	addi	r2,r2,-128
  830de4:	2080a81e 	bne	r4,r2,831088 <get_home_directory_cluster_for_file+0x914>
  830de8:	88c00183 	ldbu	r3,6(r17)
  830dec:	18bfe7c4 	addi	r2,r3,-97
  830df0:	10803fcc 	andi	r2,r2,255
  830df4:	8080fe2e 	bgeu	r16,r2,8311f0 <get_home_directory_cluster_for_file+0xa7c>
  830df8:	19003fcc 	andi	r4,r3,255
  830dfc:	d8c00243 	ldbu	r3,9(sp)
  830e00:	2100201c 	xori	r4,r4,128
  830e04:	213fe004 	addi	r4,r4,-128
  830e08:	18bfe7c4 	addi	r2,r3,-97
  830e0c:	10803fcc 	andi	r2,r2,255
  830e10:	8080ff2e 	bgeu	r16,r2,831210 <get_home_directory_cluster_for_file+0xa9c>
  830e14:	18803fcc 	andi	r2,r3,255
  830e18:	1080201c 	xori	r2,r2,128
  830e1c:	10bfe004 	addi	r2,r2,-128
  830e20:	2080991e 	bne	r4,r2,831088 <get_home_directory_cluster_for_file+0x914>
  830e24:	88c001c3 	ldbu	r3,7(r17)
  830e28:	18bfe7c4 	addi	r2,r3,-97
  830e2c:	10803fcc 	andi	r2,r2,255
  830e30:	8080fc36 	bltu	r16,r2,831224 <get_home_directory_cluster_for_file+0xab0>
  830e34:	18bff804 	addi	r2,r3,-32
  830e38:	d8c00283 	ldbu	r3,10(sp)
  830e3c:	11003fcc 	andi	r4,r2,255
  830e40:	2100201c 	xori	r4,r4,128
  830e44:	18bfe7c4 	addi	r2,r3,-97
  830e48:	10803fcc 	andi	r2,r2,255
  830e4c:	213fe004 	addi	r4,r4,-128
  830e50:	8080fb36 	bltu	r16,r2,831240 <get_home_directory_cluster_for_file+0xacc>
  830e54:	18bff804 	addi	r2,r3,-32
  830e58:	10803fcc 	andi	r2,r2,255
  830e5c:	1080201c 	xori	r2,r2,128
  830e60:	10bfe004 	addi	r2,r2,-128
  830e64:	208b003a 	cmpeq	r5,r4,r2
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  830e68:	88c00203 	ldbu	r3,8(r17)
  830e6c:	18bfe7c4 	addi	r2,r3,-97
  830e70:	10803fcc 	andi	r2,r2,255
  830e74:	80807a2e 	bgeu	r16,r2,831060 <get_home_directory_cluster_for_file+0x8ec>
  830e78:	19003fcc 	andi	r4,r3,255
  830e7c:	2100201c 	xori	r4,r4,128
  830e80:	213fe004 	addi	r4,r4,-128
  830e84:	d8c00003 	ldbu	r3,0(sp)
  830e88:	18bfe7c4 	addi	r2,r3,-97
  830e8c:	10803fcc 	andi	r2,r2,255
  830e90:	80806e2e 	bgeu	r16,r2,83104c <get_home_directory_cluster_for_file+0x8d8>
  830e94:	18803fcc 	andi	r2,r3,255
  830e98:	1080201c 	xori	r2,r2,128
  830e9c:	10bfe004 	addi	r2,r2,-128
  830ea0:	1100221e 	bne	r2,r4,830f2c <get_home_directory_cluster_for_file+0x7b8>
  830ea4:	88c00243 	ldbu	r3,9(r17)
  830ea8:	18bfe7c4 	addi	r2,r3,-97
  830eac:	10803fcc 	andi	r2,r2,255
  830eb0:	80808b2e 	bgeu	r16,r2,8310e0 <get_home_directory_cluster_for_file+0x96c>
  830eb4:	19003fcc 	andi	r4,r3,255
  830eb8:	2100201c 	xori	r4,r4,128
  830ebc:	213fe004 	addi	r4,r4,-128
  830ec0:	d8c00043 	ldbu	r3,1(sp)
  830ec4:	18bfe7c4 	addi	r2,r3,-97
  830ec8:	10803fcc 	andi	r2,r2,255
  830ecc:	80807f2e 	bgeu	r16,r2,8310cc <get_home_directory_cluster_for_file+0x958>
  830ed0:	18803fcc 	andi	r2,r3,255
  830ed4:	1080201c 	xori	r2,r2,128
  830ed8:	10bfe004 	addi	r2,r2,-128
  830edc:	1100131e 	bne	r2,r4,830f2c <get_home_directory_cluster_for_file+0x7b8>
  830ee0:	88c00283 	ldbu	r3,10(r17)
  830ee4:	18bfe7c4 	addi	r2,r3,-97
  830ee8:	10803fcc 	andi	r2,r2,255
  830eec:	80808136 	bltu	r16,r2,8310f4 <get_home_directory_cluster_for_file+0x980>
  830ef0:	18bff804 	addi	r2,r3,-32
  830ef4:	d8c00083 	ldbu	r3,2(sp)
  830ef8:	11003fcc 	andi	r4,r2,255
  830efc:	2100201c 	xori	r4,r4,128
  830f00:	18bfe7c4 	addi	r2,r3,-97
  830f04:	10803fcc 	andi	r2,r2,255
  830f08:	213fe004 	addi	r4,r4,-128
  830f0c:	80808036 	bltu	r16,r2,831110 <get_home_directory_cluster_for_file+0x99c>
  830f10:	18bff804 	addi	r2,r3,-32
  830f14:	10803fcc 	andi	r2,r2,255
  830f18:	1080201c 	xori	r2,r2,128
  830f1c:	10bfe004 	addi	r2,r2,-128
  830f20:	1100021e 	bne	r2,r4,830f2c <get_home_directory_cluster_for_file+0x7b8>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
								if (match) {
  830f24:	2805003a 	cmpeq	r2,r5,zero
  830f28:	1000c926 	beq	r2,zero,831250 <get_home_directory_cluster_for_file+0xadc>
									new_cluster
											= file_record->start_cluster_index;
									break;
  830f2c:	94800804 	addi	r18,r18,32
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  830f30:	00808004 	movi	r2,512
  830f34:	90bf491e 	bne	r18,r2,830c5c <get_home_directory_cluster_for_file+0x4e8>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  830f38:	acc0171e 	bne	r21,r19,830f98 <get_home_directory_cluster_for_file+0x824>
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  830f3c:	e0800383 	ldbu	r2,14(fp)
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  830f40:	a5000044 	addi	r20,r20,1
  830f44:	982b883a 	mov	r21,r19
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  830f48:	a0bf3e16 	blt	r20,r2,830c44 <get_home_directory_cluster_for_file+0x4d0>

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  830f4c:	e0c01117 	ldw	r3,68(fp)
  830f50:	d0a77817 	ldw	r2,-25120(gp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  830f54:	9808d23a 	srli	r4,r19,8

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  830f58:	10c5883a 	add	r2,r2,r3

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;

	if (sector_index != current_sector_index) {
  830f5c:	d0e77c17 	ldw	r3,-25104(gp)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  830f60:	2089883a 	add	r4,r4,r2

	if (sector_index != current_sector_index) {
  830f64:	20c00326 	beq	r4,r3,830f74 <get_home_directory_cluster_for_file+0x800>
		if (Read_Sector_Data(sector_index, 0) == false) {
  830f68:	000b883a 	mov	r5,zero
  830f6c:	082e5440 	call	82e544 <Read_Sector_Data>
  830f70:	103f1a26 	beq	r2,zero,830bdc <get_home_directory_cluster_for_file+0x468>
			return false;
		}
	}
	*flag
  830f74:	d0e77a17 	ldw	r3,-25112(gp)
  830f78:	98803fcc 	andi	r2,r19,255
  830f7c:	1085883a 	add	r2,r2,r2
  830f80:	19000a17 	ldw	r4,40(r3)
  830f84:	1105883a 	add	r2,r2,r4
  830f88:	10c0002b 	ldhuio	r3,0(r2)
				if (new_cluster == home_dir_cluster) {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  830f8c:	00bffe14 	movui	r2,65528
  830f90:	1d7ffe0c 	andi	r21,r3,65528
  830f94:	a8bf1126 	beq	r21,r2,830bdc <get_home_directory_cluster_for_file+0x468>
						// Directory path is invalid.                 
						return false;
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  830f98:	00bffdd4 	movui	r2,65527
  830f9c:	14c00a16 	blt	r2,r19,830fc8 <get_home_directory_cluster_for_file+0x854>
  830fa0:	acc00a1e 	bne	r21,r19,830fcc <get_home_directory_cluster_for_file+0x858>
  830fa4:	d9400317 	ldw	r5,12(sp)
			int cluster = home_dir_cluster;

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  830fa8:	e1000383 	ldbu	r4,14(fp)
  830fac:	e0c01417 	ldw	r3,80(fp)
  830fb0:	2145383a 	mul	r2,r4,r5
  830fb4:	10ef883a 	add	r23,r2,r3
				int sector_index;

				for (sector_index = 0; sector_index
  830fb8:	203f211e 	bne	r4,zero,830c40 <get_home_directory_cluster_for_file+0x4cc>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  830fbc:	acffe326 	beq	r21,r19,830f4c <get_home_directory_cluster_for_file+0x7d8>
						// Directory path is invalid.                 
						return false;
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  830fc0:	00bffdd4 	movui	r2,65527
  830fc4:	14fff60e 	bge	r2,r19,830fa0 <get_home_directory_cluster_for_file+0x82c>
			if (new_cluster != home_dir_cluster) {
  830fc8:	acff0426 	beq	r21,r19,830bdc <get_home_directory_cluster_for_file+0x468>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
				start_location = start_location + location + 1;
  830fcc:	d9800417 	ldw	r6,16(sp)
  830fd0:	a827883a 	mov	r19,r21
  830fd4:	30800044 	addi	r2,r6,1
  830fd8:	1585883a 	add	r2,r2,r22
  830fdc:	d8800415 	stw	r2,16(sp)
  830fe0:	1007883a 	mov	r3,r2
			} else {
				// Directory path is invalid.
				return false;
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  830fe4:	d8800617 	ldw	r2,24(sp)
  830fe8:	10e1883a 	add	r16,r2,r3

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);
  830fec:	8009883a 	mov	r4,r16
  830ff0:	0822e100 	call	822e10 <strlen>

	for (index = 0; index < length; index++) {
  830ff4:	0081260e 	bge	zero,r2,831490 <get_home_directory_cluster_for_file+0xd1c>
		if ((name[index] == '\\') || (name[index] == '/')) {
  830ff8:	80c00007 	ldb	r3,0(r16)
  830ffc:	01001704 	movi	r4,92
  831000:	19000e26 	beq	r3,r4,83103c <get_home_directory_cluster_for_file+0x8c8>
  831004:	01400bc4 	movi	r5,47
  831008:	19400c26 	beq	r3,r5,83103c <get_home_directory_cluster_for_file+0x8c8>
  83100c:	002d883a 	mov	r22,zero
  831010:	00000306 	br	831020 <get_home_directory_cluster_for_file+0x8ac>
  831014:	18c00007 	ldb	r3,0(r3)
  831018:	19011626 	beq	r3,r4,831474 <get_home_directory_cluster_for_file+0xd00>
  83101c:	19411526 	beq	r3,r5,831474 <get_home_directory_cluster_for_file+0xd00>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  831020:	b5800044 	addi	r22,r22,1
		if ((name[index] == '\\') || (name[index] == '/')) {
  831024:	8587883a 	add	r3,r16,r22
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  831028:	15bffa1e 	bne	r2,r22,831014 <get_home_directory_cluster_for_file+0x8a0>
				// Directory path is invalid.
				return false;
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
		if (location < 0) {
  83102c:	05bfffc4 	movi	r22,-1
  831030:	01000044 	movi	r4,1
  831034:	d9000515 	stw	r4,20(sp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  831038:	05bdfa16 	blt	zero,r22,830824 <get_home_directory_cluster_for_file+0xb0>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  83103c:	d9400717 	ldw	r5,28(sp)
  831040:	2cc00015 	stw	r19,0(r5)
	if (home_dir_cluster == 0) {
  831044:	983dec26 	beq	r19,zero,8307f8 <get_home_directory_cluster_for_file+0x84>
  831048:	003ee506 	br	830be0 <get_home_directory_cluster_for_file+0x46c>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  83104c:	18bff804 	addi	r2,r3,-32
  831050:	10803fcc 	andi	r2,r2,255
  831054:	1080201c 	xori	r2,r2,128
  831058:	10bfe004 	addi	r2,r2,-128
  83105c:	003f9006 	br	830ea0 <get_home_directory_cluster_for_file+0x72c>
  831060:	18bff804 	addi	r2,r3,-32
  831064:	11003fcc 	andi	r4,r2,255
  831068:	2100201c 	xori	r4,r4,128
  83106c:	213fe004 	addi	r4,r4,-128
  831070:	003f8406 	br	830e84 <get_home_directory_cluster_for_file+0x710>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  831074:	18bff804 	addi	r2,r3,-32
  831078:	10803fcc 	andi	r2,r2,255
  83107c:	1080201c 	xori	r2,r2,128
  831080:	10bfe004 	addi	r2,r2,-128
  831084:	20bf0d26 	beq	r4,r2,830cbc <get_home_directory_cluster_for_file+0x548>
  831088:	000b883a 	mov	r5,zero
  83108c:	003f7606 	br	830e68 <get_home_directory_cluster_for_file+0x6f4>
  831090:	20bff804 	addi	r2,r4,-32
  831094:	11003fcc 	andi	r4,r2,255
  831098:	2100201c 	xori	r4,r4,128
  83109c:	213fe004 	addi	r4,r4,-128
  8310a0:	003efe06 	br	830c9c <get_home_directory_cluster_for_file+0x528>
  8310a4:	18bff804 	addi	r2,r3,-32
  8310a8:	10803fcc 	andi	r2,r2,255
  8310ac:	1080201c 	xori	r2,r2,128
  8310b0:	10bfe004 	addi	r2,r2,-128
  8310b4:	003f0f06 	br	830cf4 <get_home_directory_cluster_for_file+0x580>
  8310b8:	18bff804 	addi	r2,r3,-32
  8310bc:	11003fcc 	andi	r4,r2,255
  8310c0:	2100201c 	xori	r4,r4,128
  8310c4:	213fe004 	addi	r4,r4,-128
  8310c8:	003f0306 	br	830cd8 <get_home_directory_cluster_for_file+0x564>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  8310cc:	18bff804 	addi	r2,r3,-32
  8310d0:	10803fcc 	andi	r2,r2,255
  8310d4:	1080201c 	xori	r2,r2,128
  8310d8:	10bfe004 	addi	r2,r2,-128
  8310dc:	003f7f06 	br	830edc <get_home_directory_cluster_for_file+0x768>
  8310e0:	18bff804 	addi	r2,r3,-32
  8310e4:	11003fcc 	andi	r4,r2,255
  8310e8:	2100201c 	xori	r4,r4,128
  8310ec:	213fe004 	addi	r4,r4,-128
  8310f0:	003f7306 	br	830ec0 <get_home_directory_cluster_for_file+0x74c>
  8310f4:	19003fcc 	andi	r4,r3,255
  8310f8:	d8c00083 	ldbu	r3,2(sp)
  8310fc:	2100201c 	xori	r4,r4,128
  831100:	213fe004 	addi	r4,r4,-128
  831104:	18bfe7c4 	addi	r2,r3,-97
  831108:	10803fcc 	andi	r2,r2,255
  83110c:	80bf802e 	bgeu	r16,r2,830f10 <get_home_directory_cluster_for_file+0x79c>
  831110:	18803fcc 	andi	r2,r3,255
  831114:	1080201c 	xori	r2,r2,128
  831118:	10bfe004 	addi	r2,r2,-128
  83111c:	003f8006 	br	830f20 <get_home_directory_cluster_for_file+0x7ac>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  831120:	18bff804 	addi	r2,r3,-32
  831124:	d8c00143 	ldbu	r3,5(sp)
  831128:	11003fcc 	andi	r4,r2,255
  83112c:	2100201c 	xori	r4,r4,128
  831130:	18bfe7c4 	addi	r2,r3,-97
  831134:	10803fcc 	andi	r2,r2,255
  831138:	213fe004 	addi	r4,r4,-128
  83113c:	80bef936 	bltu	r16,r2,830d24 <get_home_directory_cluster_for_file+0x5b0>
  831140:	18bff804 	addi	r2,r3,-32
  831144:	10803fcc 	andi	r2,r2,255
  831148:	1080201c 	xori	r2,r2,128
  83114c:	10bfe004 	addi	r2,r2,-128
  831150:	003ef706 	br	830d30 <get_home_directory_cluster_for_file+0x5bc>
  831154:	18bff804 	addi	r2,r3,-32
  831158:	d8c00183 	ldbu	r3,6(sp)
  83115c:	11003fcc 	andi	r4,r2,255
  831160:	2100201c 	xori	r4,r4,128
  831164:	18bfe7c4 	addi	r2,r3,-97
  831168:	10803fcc 	andi	r2,r2,255
  83116c:	213fe004 	addi	r4,r4,-128
  831170:	80befb36 	bltu	r16,r2,830d60 <get_home_directory_cluster_for_file+0x5ec>
  831174:	18bff804 	addi	r2,r3,-32
  831178:	10803fcc 	andi	r2,r2,255
  83117c:	1080201c 	xori	r2,r2,128
  831180:	10bfe004 	addi	r2,r2,-128
  831184:	003ef906 	br	830d6c <get_home_directory_cluster_for_file+0x5f8>
  831188:	18bff804 	addi	r2,r3,-32
  83118c:	d8c001c3 	ldbu	r3,7(sp)
  831190:	11003fcc 	andi	r4,r2,255
  831194:	2100201c 	xori	r4,r4,128
  831198:	18bfe7c4 	addi	r2,r3,-97
  83119c:	10803fcc 	andi	r2,r2,255
  8311a0:	213fe004 	addi	r4,r4,-128
  8311a4:	80befd36 	bltu	r16,r2,830d9c <get_home_directory_cluster_for_file+0x628>
  8311a8:	18bff804 	addi	r2,r3,-32
  8311ac:	10803fcc 	andi	r2,r2,255
  8311b0:	1080201c 	xori	r2,r2,128
  8311b4:	10bfe004 	addi	r2,r2,-128
  8311b8:	003efb06 	br	830da8 <get_home_directory_cluster_for_file+0x634>
  8311bc:	18bff804 	addi	r2,r3,-32
  8311c0:	d8c00203 	ldbu	r3,8(sp)
  8311c4:	11003fcc 	andi	r4,r2,255
  8311c8:	2100201c 	xori	r4,r4,128
  8311cc:	18bfe7c4 	addi	r2,r3,-97
  8311d0:	10803fcc 	andi	r2,r2,255
  8311d4:	213fe004 	addi	r4,r4,-128
  8311d8:	80beff36 	bltu	r16,r2,830dd8 <get_home_directory_cluster_for_file+0x664>
  8311dc:	18bff804 	addi	r2,r3,-32
  8311e0:	10803fcc 	andi	r2,r2,255
  8311e4:	1080201c 	xori	r2,r2,128
  8311e8:	10bfe004 	addi	r2,r2,-128
  8311ec:	003efd06 	br	830de4 <get_home_directory_cluster_for_file+0x670>
  8311f0:	18bff804 	addi	r2,r3,-32
  8311f4:	d8c00243 	ldbu	r3,9(sp)
  8311f8:	11003fcc 	andi	r4,r2,255
  8311fc:	2100201c 	xori	r4,r4,128
  831200:	18bfe7c4 	addi	r2,r3,-97
  831204:	10803fcc 	andi	r2,r2,255
  831208:	213fe004 	addi	r4,r4,-128
  83120c:	80bf0136 	bltu	r16,r2,830e14 <get_home_directory_cluster_for_file+0x6a0>
  831210:	18bff804 	addi	r2,r3,-32
  831214:	10803fcc 	andi	r2,r2,255
  831218:	1080201c 	xori	r2,r2,128
  83121c:	10bfe004 	addi	r2,r2,-128
  831220:	003eff06 	br	830e20 <get_home_directory_cluster_for_file+0x6ac>
  831224:	19003fcc 	andi	r4,r3,255
  831228:	d8c00283 	ldbu	r3,10(sp)
  83122c:	2100201c 	xori	r4,r4,128
  831230:	213fe004 	addi	r4,r4,-128
  831234:	18bfe7c4 	addi	r2,r3,-97
  831238:	10803fcc 	andi	r2,r2,255
  83123c:	80bf052e 	bgeu	r16,r2,830e54 <get_home_directory_cluster_for_file+0x6e0>
  831240:	18803fcc 	andi	r2,r3,255
  831244:	1080201c 	xori	r2,r2,128
  831248:	10bfe004 	addi	r2,r2,-128
  83124c:	003f0506 	br	830e64 <get_home_directory_cluster_for_file+0x6f0>
							if ((file_record->name[0] != 0xe5)
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
								if (match) {
									new_cluster
  831250:	8d40058b 	ldhu	r21,22(r17)
  831254:	003f3806 	br	830f38 <get_home_directory_cluster_for_file+0x7c4>

		if (home_dir_cluster == 0) {
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  831258:	3004927a 	slli	r2,r6,9
  83125c:	00c02134 	movhi	r3,132
  831260:	18fbb104 	addi	r3,r3,-4412
  831264:	1144b03a 	or	r2,r2,r5
  831268:	10c5883a 	add	r2,r2,r3
  83126c:	15000003 	ldbu	r20,0(r2)
  831270:	003d9806 	br	8308d4 <get_home_directory_cluster_for_file+0x160>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  831274:	d8c000c3 	ldbu	r3,3(sp)
  831278:	20bff804 	addi	r2,r4,-32
  83127c:	11003fcc 	andi	r4,r2,255
  831280:	18bfe7c4 	addi	r2,r3,-97
  831284:	2100201c 	xori	r4,r4,128
  831288:	10803fcc 	andi	r2,r2,255
  83128c:	213fe004 	addi	r4,r4,-128
  831290:	80bdad36 	bltu	r16,r2,830948 <get_home_directory_cluster_for_file+0x1d4>
  831294:	18bff804 	addi	r2,r3,-32
  831298:	10803fcc 	andi	r2,r2,255
  83129c:	1080201c 	xori	r2,r2,128
  8312a0:	10bfe004 	addi	r2,r2,-128
  8312a4:	20bdac26 	beq	r4,r2,830958 <get_home_directory_cluster_for_file+0x1e4>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  8312a8:	88c00203 	ldbu	r3,8(r17)
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  8312ac:	000b883a 	mov	r5,zero
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  8312b0:	18bfe7c4 	addi	r2,r3,-97
  8312b4:	10803fcc 	andi	r2,r2,255
  8312b8:	80be1636 	bltu	r16,r2,830b14 <get_home_directory_cluster_for_file+0x3a0>
  8312bc:	18bff804 	addi	r2,r3,-32
  8312c0:	d8c00003 	ldbu	r3,0(sp)
  8312c4:	11003fcc 	andi	r4,r2,255
  8312c8:	2100201c 	xori	r4,r4,128
  8312cc:	18bfe7c4 	addi	r2,r3,-97
  8312d0:	10803fcc 	andi	r2,r2,255
  8312d4:	213fe004 	addi	r4,r4,-128
  8312d8:	80be1536 	bltu	r16,r2,830b30 <get_home_directory_cluster_for_file+0x3bc>
  8312dc:	18bff804 	addi	r2,r3,-32
  8312e0:	10803fcc 	andi	r2,r2,255
  8312e4:	1080201c 	xori	r2,r2,128
  8312e8:	10bfe004 	addi	r2,r2,-128
  8312ec:	003e1306 	br	830b3c <get_home_directory_cluster_for_file+0x3c8>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  8312f0:	18bff804 	addi	r2,r3,-32
  8312f4:	10803fcc 	andi	r2,r2,255
  8312f8:	1080201c 	xori	r2,r2,128
  8312fc:	10bfe004 	addi	r2,r2,-128
  831300:	003da306 	br	830990 <get_home_directory_cluster_for_file+0x21c>
  831304:	18bff804 	addi	r2,r3,-32
  831308:	11003fcc 	andi	r4,r2,255
  83130c:	2100201c 	xori	r4,r4,128
  831310:	213fe004 	addi	r4,r4,-128
  831314:	003d9706 	br	830974 <get_home_directory_cluster_for_file+0x200>
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
		if (CHAR_TO_UPPER(file_record->extension[index])
  831318:	18bff804 	addi	r2,r3,-32
  83131c:	10803fcc 	andi	r2,r2,255
  831320:	1080201c 	xori	r2,r2,128
  831324:	10bfe004 	addi	r2,r2,-128
  831328:	003e1306 	br	830b78 <get_home_directory_cluster_for_file+0x404>
  83132c:	18bff804 	addi	r2,r3,-32
  831330:	11003fcc 	andi	r4,r2,255
  831334:	2100201c 	xori	r4,r4,128
  831338:	213fe004 	addi	r4,r4,-128
  83133c:	003e0706 	br	830b5c <get_home_directory_cluster_for_file+0x3e8>
  831340:	18803fcc 	andi	r2,r3,255
  831344:	1080201c 	xori	r2,r2,128
  831348:	10bfe004 	addi	r2,r2,-128
  83134c:	003e1b06 	br	830bbc <get_home_directory_cluster_for_file+0x448>
  831350:	19003fcc 	andi	r4,r3,255
  831354:	2100201c 	xori	r4,r4,128
  831358:	213fe004 	addi	r4,r4,-128
  83135c:	003e0f06 	br	830b9c <get_home_directory_cluster_for_file+0x428>
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
		if (CHAR_TO_UPPER(file_record->name[index])
  831360:	18bff804 	addi	r2,r3,-32
  831364:	10803fcc 	andi	r2,r2,255
  831368:	1080201c 	xori	r2,r2,128
  83136c:	10bfe004 	addi	r2,r2,-128
  831370:	003d9606 	br	8309cc <get_home_directory_cluster_for_file+0x258>
  831374:	18bff804 	addi	r2,r3,-32
  831378:	11003fcc 	andi	r4,r2,255
  83137c:	2100201c 	xori	r4,r4,128
  831380:	213fe004 	addi	r4,r4,-128
  831384:	003d8a06 	br	8309b0 <get_home_directory_cluster_for_file+0x23c>
  831388:	18bff804 	addi	r2,r3,-32
  83138c:	10803fcc 	andi	r2,r2,255
  831390:	1080201c 	xori	r2,r2,128
  831394:	10bfe004 	addi	r2,r2,-128
  831398:	003d9b06 	br	830a08 <get_home_directory_cluster_for_file+0x294>
  83139c:	18bff804 	addi	r2,r3,-32
  8313a0:	11003fcc 	andi	r4,r2,255
  8313a4:	2100201c 	xori	r4,r4,128
  8313a8:	213fe004 	addi	r4,r4,-128
  8313ac:	003d8f06 	br	8309ec <get_home_directory_cluster_for_file+0x278>
  8313b0:	18bff804 	addi	r2,r3,-32
  8313b4:	10803fcc 	andi	r2,r2,255
  8313b8:	1080201c 	xori	r2,r2,128
  8313bc:	10bfe004 	addi	r2,r2,-128
  8313c0:	003da006 	br	830a44 <get_home_directory_cluster_for_file+0x2d0>
  8313c4:	18bff804 	addi	r2,r3,-32
  8313c8:	11003fcc 	andi	r4,r2,255
  8313cc:	2100201c 	xori	r4,r4,128
  8313d0:	213fe004 	addi	r4,r4,-128
  8313d4:	003d9406 	br	830a28 <get_home_directory_cluster_for_file+0x2b4>
  8313d8:	18bff804 	addi	r2,r3,-32
  8313dc:	10803fcc 	andi	r2,r2,255
  8313e0:	1080201c 	xori	r2,r2,128
  8313e4:	10bfe004 	addi	r2,r2,-128
  8313e8:	003da506 	br	830a80 <get_home_directory_cluster_for_file+0x30c>
  8313ec:	18bff804 	addi	r2,r3,-32
  8313f0:	11003fcc 	andi	r4,r2,255
  8313f4:	2100201c 	xori	r4,r4,128
  8313f8:	213fe004 	addi	r4,r4,-128
  8313fc:	003d9906 	br	830a64 <get_home_directory_cluster_for_file+0x2f0>
  831400:	18bff804 	addi	r2,r3,-32
  831404:	10803fcc 	andi	r2,r2,255
  831408:	1080201c 	xori	r2,r2,128
  83140c:	10bfe004 	addi	r2,r2,-128
  831410:	003daa06 	br	830abc <get_home_directory_cluster_for_file+0x348>
  831414:	18bff804 	addi	r2,r3,-32
  831418:	11003fcc 	andi	r4,r2,255
  83141c:	2100201c 	xori	r4,r4,128
  831420:	213fe004 	addi	r4,r4,-128
  831424:	003d9e06 	br	830aa0 <get_home_directory_cluster_for_file+0x32c>
  831428:	18803fcc 	andi	r2,r3,255
  83142c:	1080201c 	xori	r2,r2,128
  831430:	10bfe004 	addi	r2,r2,-128
  831434:	003db206 	br	830b00 <get_home_directory_cluster_for_file+0x38c>
  831438:	19003fcc 	andi	r4,r3,255
  83143c:	2100201c 	xori	r4,r4,128
  831440:	213fe004 	addi	r4,r4,-128
  831444:	003da606 	br	830ae0 <get_home_directory_cluster_for_file+0x36c>
						if ((file_record->name[0] != 0xe5)
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
							if (match) {
								new_cluster = file_record->start_cluster_index;
  831448:	8980058b 	ldhu	r6,22(r17)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  83144c:	00800044 	movi	r2,1
  831450:	88800a15 	stw	r2,40(r17)
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  831454:	303ddf26 	beq	r6,zero,830bd4 <get_home_directory_cluster_for_file+0x460>
				}
			}
			if (new_cluster != home_dir_cluster) {
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
				start_location = start_location + location + 1;
  831458:	d8c00417 	ldw	r3,16(sp)
  83145c:	3027883a 	mov	r19,r6
  831460:	18800044 	addi	r2,r3,1
  831464:	b0ad883a 	add	r22,r22,r2
  831468:	b007883a 	mov	r3,r22
  83146c:	dd800415 	stw	r22,16(sp)
  831470:	003edc06 	br	830fe4 <get_home_directory_cluster_for_file+0x870>
				// Directory path is invalid.
				return false;
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
		if (location < 0) {
  831474:	b03eee16 	blt	r22,zero,831030 <get_home_directory_cluster_for_file+0x8bc>
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  831478:	05bcea16 	blt	zero,r22,830824 <get_home_directory_cluster_for_file+0xb0>
  83147c:	003eef06 	br	83103c <get_home_directory_cluster_for_file+0x8c8>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  831480:	103cdb26 	beq	r2,zero,8307f0 <get_home_directory_cluster_for_file+0x7c>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  831484:	d9400717 	ldw	r5,28(sp)
  831488:	28000015 	stw	zero,0(r5)
  83148c:	003cda06 	br	8307f8 <get_home_directory_cluster_for_file+0x84>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  831490:	002d883a 	mov	r22,zero
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  831494:	103ee526 	beq	r2,zero,83102c <get_home_directory_cluster_for_file+0x8b8>
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  831498:	05bce216 	blt	zero,r22,830824 <get_home_directory_cluster_for_file+0xb0>
  83149c:	003ee706 	br	83103c <get_home_directory_cluster_for_file+0x8c8>

008314a0 <alt_up_sd_card_find_first>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  8314a0:	d0a77a17 	ldw	r2,-25112(gp)
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  8314a4:	deffed04 	addi	sp,sp,-76
  8314a8:	dc001115 	stw	r16,68(sp)
  8314ac:	dfc01215 	stw	ra,72(sp)
  8314b0:	2821883a 	mov	r16,r5
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  8314b4:	10000b26 	beq	r2,zero,8314e4 <alt_up_sd_card_find_first+0x44>
  8314b8:	d0e77217 	ldw	r3,-25144(gp)
  8314bc:	1880002b 	ldhuio	r2,0(r3)
  8314c0:	1080008c 	andi	r2,r2,2
  8314c4:	10000726 	beq	r2,zero,8314e4 <alt_up_sd_card_find_first+0x44>
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  8314c8:	d0a77117 	ldw	r2,-25148(gp)
  8314cc:	1000151e 	bne	r2,zero,831524 <alt_up_sd_card_find_first+0x84>
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  8314d0:	00800084 	movi	r2,2
		} else {
			result = 1;
		}
	}
	return result;
}
  8314d4:	dfc01217 	ldw	ra,72(sp)
  8314d8:	dc001117 	ldw	r16,68(sp)
  8314dc:	dec01304 	addi	sp,sp,76
  8314e0:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  8314e4:	d0e77017 	ldw	r3,-25152(gp)
  8314e8:	00800044 	movi	r2,1
  8314ec:	18bff81e 	bne	r3,r2,8314d0 <alt_up_sd_card_find_first+0x30>
		int index;

		initialized = false;
		search_data.valid = false;
  8314f0:	00802174 	movhi	r2,133
  8314f4:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  8314f8:	00c02174 	movhi	r3,133
  8314fc:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  831500:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  831504:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  831508:	d0277115 	stw	zero,-25148(gp)
  83150c:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  831510:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  831514:	183fff15 	stw	zero,-4(r3)
  831518:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  83151c:	18bffc1e 	bne	r3,r2,831510 <alt_up_sd_card_find_first+0x70>
  831520:	003feb06 	br	8314d0 <alt_up_sd_card_find_first+0x30>
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  831524:	d80b883a 	mov	r5,sp
  831528:	d9800104 	addi	r6,sp,4
  83152c:	08307740 	call	830774 <get_home_directory_cluster_for_file>
  831530:	1000021e 	bne	r2,zero,83153c <alt_up_sd_card_find_first+0x9c>
  831534:	00800044 	movi	r2,1
  831538:	003fe606 	br	8314d4 <alt_up_sd_card_find_first+0x34>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  83153c:	d9400017 	ldw	r5,0(sp)
  831540:	00c02174 	movhi	r3,133
  831544:	18f3ab04 	addi	r3,r3,-12628
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
  831548:	00800044 	movi	r2,1
  83154c:	18800415 	stw	r2,16(r3)
		if (get_home_directory_cluster_for_file(directory_to_search_through,
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
  831550:	00bfffc4 	movi	r2,-1
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  831554:	8009883a 	mov	r4,r16
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
  831558:	19400115 	stw	r5,4(r3)
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
  83155c:	1880030d 	sth	r2,12(r3)
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  831560:	19400015 	stw	r5,0(r3)
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
  831564:	18000215 	stw	zero,8(r3)
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  831568:	082f49c0 	call	82f49c <alt_up_sd_card_find_next>
  83156c:	10bfffcc 	andi	r2,r2,65535
  831570:	10a0001c 	xori	r2,r2,32768
  831574:	10a00004 	addi	r2,r2,-32768
  831578:	003fd606 	br	8314d4 <alt_up_sd_card_find_first+0x34>

0083157c <alt_up_sd_card_write>:
	return ch;
}

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  83157c:	defff504 	addi	sp,sp,-44
	bool result = false;

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  831580:	20ffffcc 	andi	r3,r4,65535
  831584:	008004c4 	movi	r2,19
	return ch;
}

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  831588:	dfc00a15 	stw	ra,40(sp)
  83158c:	df000915 	stw	fp,36(sp)
  831590:	ddc00815 	stw	r23,32(sp)
  831594:	dd800715 	stw	r22,28(sp)
  831598:	dd400615 	stw	r21,24(sp)
  83159c:	dd000515 	stw	r20,20(sp)
  8315a0:	dcc00415 	stw	r19,16(sp)
  8315a4:	dc800315 	stw	r18,12(sp)
  8315a8:	dc400215 	stw	r17,8(sp)
  8315ac:	dc000115 	stw	r16,4(sp)
  8315b0:	d9400085 	stb	r5,2(sp)
	bool result = false;

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  8315b4:	10c03a36 	bltu	r2,r3,8316a0 <alt_up_sd_card_write+0x124>
		if (active_files[file_handle].in_use) {
  8315b8:	20bfffcc 	andi	r2,r4,65535
  8315bc:	10a0001c 	xori	r2,r2,32768
  8315c0:	10a00004 	addi	r2,r2,-32768
  8315c4:	103891ba 	slli	fp,r2,6
  8315c8:	00802174 	movhi	r2,133
  8315cc:	10b3c504 	addi	r2,r2,-12524
  8315d0:	e0a3883a 	add	r17,fp,r2
  8315d4:	88800f17 	ldw	r2,60(r17)
  8315d8:	10003126 	beq	r2,zero,8316a0 <alt_up_sd_card_write+0x124>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  8315dc:	05c02174 	movhi	r23,133
  8315e0:	bdf3b004 	addi	r23,r23,-12608
  8315e4:	8d400717 	ldw	r21,28(r17)
  8315e8:	bc800383 	ldbu	r18,14(r23)
  8315ec:	8cc00817 	ldw	r19,32(r17)
  8315f0:	a8ffff84 	addi	r3,r21,-2
  8315f4:	b8801417 	ldw	r2,80(r23)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  8315f8:	8c000917 	ldw	r16,36(r17)
  8315fc:	bd00030b 	ldhu	r20,12(r23)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
		if (active_files[file_handle].in_use) {
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  831600:	1c87383a 	mul	r3,r3,r18
  831604:	9885883a 	add	r2,r19,r2
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  831608:	8009883a 	mov	r4,r16
  83160c:	a00b883a 	mov	r5,r20
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
		if (active_files[file_handle].in_use) {
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  831610:	18ad883a 	add	r22,r3,r2
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  831614:	0820c100 	call	820c10 <__umodsi3>
  831618:	d880000d 	sth	r2,0(sp)

			if (active_files[file_handle].current_byte_position
  83161c:	88800617 	ldw	r2,24(r17)
  831620:	80802c2e 	bgeu	r16,r2,8316d4 <alt_up_sd_card_write+0x158>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  831624:	80004b1e 	bne	r16,zero,831754 <alt_up_sd_card_write+0x1d8>
  831628:	d1677817 	ldw	r5,-25120(gp)
  83162c:	d1e77c17 	ldw	r7,-25104(gp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  831630:	b145883a 	add	r2,r22,r5
  831634:	11c00326 	beq	r2,r7,831644 <alt_up_sd_card_write+0xc8>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  831638:	b009883a 	mov	r4,r22
  83163c:	082e5440 	call	82e544 <Read_Sector_Data>
  831640:	10001726 	beq	r2,zero,8316a0 <alt_up_sd_card_write+0x124>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  831644:	d8c0000b 	ldhu	r3,0(sp)
  831648:	18bfffcc 	andi	r2,r3,65535
  83164c:	d8c00083 	ldbu	r3,2(sp)
  831650:	10a0001c 	xori	r2,r2,32768
  831654:	10a00004 	addi	r2,r2,-32768
  831658:	19003fcc 	andi	r4,r3,255
  83165c:	d0e77717 	ldw	r3,-25124(gp)
  831660:	2100201c 	xori	r4,r4,128
  831664:	213fe004 	addi	r4,r4,-128
  831668:	10c5883a 	add	r2,r2,r3
  83166c:	11000025 	stbio	r4,0(r2)
			active_files[file_handle].current_byte_position
  831670:	00802174 	movhi	r2,133
  831674:	10b3c504 	addi	r2,r2,-12524
  831678:	e087883a 	add	r3,fp,r2
  83167c:	18800917 	ldw	r2,36(r3)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  831680:	19000617 	ldw	r4,24(r3)
					return false;
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
			active_files[file_handle].current_byte_position
  831684:	01400044 	movi	r5,1
  831688:	1145883a 	add	r2,r2,r5
  83168c:	18800915 	stw	r2,36(r3)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  831690:	11002a2e 	bgeu	r2,r4,83173c <alt_up_sd_card_write+0x1c0>
				active_files[file_handle].file_size_in_bytes
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  831694:	2805883a 	mov	r2,r5
  831698:	d1677b15 	stw	r5,-25108(gp)
  83169c:	00000106 	br	8316a4 <alt_up_sd_card_write+0x128>
  8316a0:	0005883a 	mov	r2,zero
			result = true;
		}
	}

	return result;
}
  8316a4:	dfc00a17 	ldw	ra,40(sp)
  8316a8:	df000917 	ldw	fp,36(sp)
  8316ac:	ddc00817 	ldw	r23,32(sp)
  8316b0:	dd800717 	ldw	r22,28(sp)
  8316b4:	dd400617 	ldw	r21,24(sp)
  8316b8:	dd000517 	ldw	r20,20(sp)
  8316bc:	dcc00417 	ldw	r19,16(sp)
  8316c0:	dc800317 	ldw	r18,12(sp)
  8316c4:	dc400217 	ldw	r17,8(sp)
  8316c8:	dc000117 	ldw	r16,4(sp)
  8316cc:	dec00b04 	addi	sp,sp,44
  8316d0:	f800283a 	ret
						data_sector = data_sector + 1;
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  8316d4:	803fd426 	beq	r16,zero,831628 <alt_up_sd_card_write+0xac>
  8316d8:	d8c0000b 	ldhu	r3,0(sp)
  8316dc:	18bfffcc 	andi	r2,r3,65535
  8316e0:	10a0001c 	xori	r2,r2,32768
  8316e4:	10a00004 	addi	r2,r2,-32768
  8316e8:	103fcf1e 	bne	r2,zero,831628 <alt_up_sd_card_write+0xac>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  8316ec:	90bfffc4 	addi	r2,r18,-1
  8316f0:	98804226 	beq	r19,r2,8317fc <alt_up_sd_card_write+0x280>
						} else {
							return false;
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  8316f4:	8009883a 	mov	r4,r16
  8316f8:	a00b883a 	mov	r5,r20
  8316fc:	0820c080 	call	820c08 <__udivsi3>
  831700:	88800815 	stw	r2,32(r17)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  831704:	00802174 	movhi	r2,133
  831708:	10b3c504 	addi	r2,r2,-12524
  83170c:	e089883a 	add	r4,fp,r2
  831710:	20800717 	ldw	r2,28(r4)
  831714:	b9400383 	ldbu	r5,14(r23)
  831718:	b8c01417 	ldw	r3,80(r23)
  83171c:	10bfff84 	addi	r2,r2,-2
  831720:	21800817 	ldw	r6,32(r4)
  831724:	1145383a 	mul	r2,r2,r5
  831728:	d1e77c17 	ldw	r7,-25104(gp)
  83172c:	d1677817 	ldw	r5,-25120(gp)
  831730:	1987883a 	add	r3,r3,r6
  831734:	10ed883a 	add	r22,r2,r3
  831738:	003fbd06 	br	831630 <alt_up_sd_card_write+0xb4>
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  83173c:	2145883a 	add	r2,r4,r5
  831740:	18800615 	stw	r2,24(r3)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  831744:	19400e15 	stw	r5,56(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  831748:	2805883a 	mov	r2,r5
  83174c:	d1677b15 	stw	r5,-25108(gp)
  831750:	003fd406 	br	8316a4 <alt_up_sd_card_write+0x128>
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;

			if (active_files[file_handle].current_byte_position
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  831754:	d8c0000b 	ldhu	r3,0(sp)
  831758:	18bfffcc 	andi	r2,r3,65535
  83175c:	10a0001c 	xori	r2,r2,32768
  831760:	10a00004 	addi	r2,r2,-32768
  831764:	103fb01e 	bne	r2,zero,831628 <alt_up_sd_card_write+0xac>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  831768:	90bfffc4 	addi	r2,r18,-1
  83176c:	98800626 	beq	r19,r2,831788 <alt_up_sd_card_write+0x20c>
  831770:	d1677817 	ldw	r5,-25120(gp)
  831774:	d1e77c17 	ldw	r7,-25104(gp)
							}
						} else {
							return false;
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  831778:	98800044 	addi	r2,r19,1
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  83177c:	b5800044 	addi	r22,r22,1
							}
						} else {
							return false;
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  831780:	88800815 	stw	r2,32(r17)
  831784:	003faa06 	br	831630 <alt_up_sd_card_write+0xb4>

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831788:	a804d23a 	srli	r2,r21,8
  83178c:	b8c01117 	ldw	r3,68(r23)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  831790:	d1677817 	ldw	r5,-25120(gp)

	if (sector_index != current_sector_index) {
  831794:	d1e77c17 	ldw	r7,-25104(gp)

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831798:	10c5883a 	add	r2,r2,r3

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  83179c:	1149883a 	add	r4,r2,r5

	if (sector_index != current_sector_index) {
  8317a0:	21c00526 	beq	r4,r7,8317b8 <alt_up_sd_card_write+0x23c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8317a4:	000b883a 	mov	r5,zero
  8317a8:	082e5440 	call	82e544 <Read_Sector_Data>
  8317ac:	103fbc26 	beq	r2,zero,8316a0 <alt_up_sd_card_write+0x124>
  8317b0:	d1677817 	ldw	r5,-25120(gp)
  8317b4:	d1e77c17 	ldw	r7,-25104(gp)
			return false;
		}
	}
	*flag
  8317b8:	d0e77a17 	ldw	r3,-25112(gp)
  8317bc:	a8803fcc 	andi	r2,r21,255
  8317c0:	1085883a 	add	r2,r2,r2
  8317c4:	19000a17 	ldw	r4,40(r3)
  8317c8:	1105883a 	add	r2,r2,r4
  8317cc:	10c0002b 	ldhuio	r3,0(r2)
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  8317d0:	00bffdd4 	movui	r2,65527
  8317d4:	19bfffcc 	andi	r6,r3,65535
  8317d8:	11bf9536 	bltu	r2,r6,831630 <alt_up_sd_card_write+0xb4>
								active_files[file_handle].current_cluster_index
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
										= 0;
								data_sector
  8317dc:	b8800383 	ldbu	r2,14(r23)
  8317e0:	30ffff84 	addi	r3,r6,-2
  8317e4:	b9001417 	ldw	r4,80(r23)
  8317e8:	1887383a 	mul	r3,r3,r2
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
								active_files[file_handle].current_cluster_index
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  8317ec:	88000815 	stw	zero,32(r17)
						unsigned short int next_cluster;
						if (get_cluster_flag(
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
								active_files[file_handle].current_cluster_index
  8317f0:	89800715 	stw	r6,28(r17)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
										= 0;
								data_sector
  8317f4:	192d883a 	add	r22,r3,r4
  8317f8:	003f8d06 	br	831630 <alt_up_sd_card_write+0xb4>
}

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  8317fc:	bc401117 	ldw	r17,68(r23)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831800:	b8801217 	ldw	r2,72(r23)
  831804:	88bfa626 	beq	r17,r2,8316a0 <alt_up_sd_card_write+0x124>
  831808:	04800084 	movi	r18,2
  83180c:	043fffc4 	movi	r16,-1
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  831810:	d1677817 	ldw	r5,-25120(gp)
  831814:	8809883a 	mov	r4,r17
  831818:	082e5440 	call	82e544 <Read_Sector_Data>
  83181c:	10007326 	beq	r2,zero,8319ec <alt_up_sd_card_write+0x470>
  831820:	d0a77a17 	ldw	r2,-25112(gp)
  831824:	90c03fcc 	andi	r3,r18,255
  831828:	11000a17 	ldw	r4,40(r2)
			do {
				cluster
  83182c:	18c5883a 	add	r2,r3,r3
  831830:	1105883a 	add	r2,r2,r4
  831834:	10c0002b 	ldhuio	r3,0(r2)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  831838:	18bfffcc 	andi	r2,r3,65535
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster
  83183c:	1821883a 	mov	r16,r3
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  831840:	10000a26 	beq	r2,zero,83186c <alt_up_sd_card_write+0x2f0>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  831844:	94800044 	addi	r18,r18,1
				}
			} while ((cluster_index % 256) != 0);
  831848:	90c03fcc 	andi	r3,r18,255
  83184c:	183ff71e 	bne	r3,zero,83182c <alt_up_sd_card_write+0x2b0>
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831850:	b8801217 	ldw	r2,72(r23)
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
			break;
		}
		sector++;
  831854:	8c400044 	addi	r17,r17,1
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831858:	147fed1e 	bne	r2,r17,831810 <alt_up_sd_card_write+0x294>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  83185c:	80bfffcc 	andi	r2,r16,65535
  831860:	10a0001c 	xori	r2,r2,32768
  831864:	10a00004 	addi	r2,r2,-32768
  831868:	103f8d1e 	bne	r2,zero,8316a0 <alt_up_sd_card_write+0x124>
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  83186c:	00c02174 	movhi	r3,133
  831870:	18f3c504 	addi	r3,r3,-12524
  831874:	e0c5883a 	add	r2,fp,r3
  831878:	14000717 	ldw	r16,28(r2)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  83187c:	b9001117 	ldw	r4,68(r23)

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  831880:	d0e77817 	ldw	r3,-25120(gp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831884:	8004d23a 	srli	r2,r16,8
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  831888:	9027883a 	mov	r19,r18

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  83188c:	1105883a 	add	r2,r2,r4
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831890:	d1277c17 	ldw	r4,-25104(gp)
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  831894:	10c5883a 	add	r2,r2,r3
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831898:	20800426 	beq	r4,r2,8318ac <alt_up_sd_card_write+0x330>
		if (Read_Sector_Data(sector_index, 0) == false) {
  83189c:	1009883a 	mov	r4,r2
  8318a0:	000b883a 	mov	r5,zero
  8318a4:	082e5440 	call	82e544 <Read_Sector_Data>
  8318a8:	10000b26 	beq	r2,zero,8318d8 <alt_up_sd_card_write+0x35c>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8318ac:	d0e77a17 	ldw	r3,-25112(gp)
  8318b0:	80803fcc 	andi	r2,r16,255
  8318b4:	997fffcc 	andi	r5,r19,65535
  8318b8:	19000a17 	ldw	r4,40(r3)
  8318bc:	1085883a 	add	r2,r2,r2
  8318c0:	2960001c 	xori	r5,r5,32768
  8318c4:	29600004 	addi	r5,r5,-32768
  8318c8:	1105883a 	add	r2,r2,r4
  8318cc:	1140002d 	sthio	r5,0(r2)
	current_sector_modified = true;
  8318d0:	00c00044 	movi	r3,1
  8318d4:	d0e77b15 	stw	r3,-25108(gp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  8318d8:	b8801117 	ldw	r2,68(r23)
  8318dc:	d0e77817 	ldw	r3,-25120(gp)
  8318e0:	9022d23a 	srli	r17,r18,8
  8318e4:	1887883a 	add	r3,r3,r2
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  8318e8:	d0a77c17 	ldw	r2,-25104(gp)
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  8318ec:	88c9883a 	add	r4,r17,r3
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  8318f0:	11000326 	beq	r2,r4,831900 <alt_up_sd_card_write+0x384>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8318f4:	000b883a 	mov	r5,zero
  8318f8:	082e5440 	call	82e544 <Read_Sector_Data>
  8318fc:	10000926 	beq	r2,zero,831924 <alt_up_sd_card_write+0x3a8>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  831900:	d0e77a17 	ldw	r3,-25112(gp)
  831904:	90803fcc 	andi	r2,r18,255
  831908:	1085883a 	add	r2,r2,r2
  83190c:	19000a17 	ldw	r4,40(r3)
  831910:	00ffffc4 	movi	r3,-1
  831914:	1105883a 	add	r2,r2,r4
  831918:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  83191c:	01000044 	movi	r4,1
  831920:	d1277b15 	stw	r4,-25108(gp)
							mark_cluster(
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
							mark_cluster(
  831924:	00c02174 	movhi	r3,133
  831928:	18f3c504 	addi	r3,r3,-12524
  83192c:	e0c5883a 	add	r2,fp,r3
  831930:	14000717 	ldw	r16,28(r2)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831934:	b9001217 	ldw	r4,72(r23)

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  831938:	d0e77817 	ldw	r3,-25120(gp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  83193c:	8004d23a 	srli	r2,r16,8
  831940:	1105883a 	add	r2,r2,r4
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831944:	d1277c17 	ldw	r4,-25104(gp)
			+ fat_partition_offset_in_512_byte_sectors;

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  831948:	10c5883a 	add	r2,r2,r3
	}

	if (sector_index != current_sector_index) {
  83194c:	20800426 	beq	r4,r2,831960 <alt_up_sd_card_write+0x3e4>
		if (Read_Sector_Data(sector_index, 0) == false) {
  831950:	1009883a 	mov	r4,r2
  831954:	000b883a 	mov	r5,zero
  831958:	082e5440 	call	82e544 <Read_Sector_Data>
  83195c:	10000b26 	beq	r2,zero,83198c <alt_up_sd_card_write+0x410>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  831960:	d0e77a17 	ldw	r3,-25112(gp)
  831964:	80803fcc 	andi	r2,r16,255
  831968:	997fffcc 	andi	r5,r19,65535
  83196c:	19000a17 	ldw	r4,40(r3)
  831970:	1085883a 	add	r2,r2,r2
  831974:	2960001c 	xori	r5,r5,32768
  831978:	29600004 	addi	r5,r5,-32768
  83197c:	1105883a 	add	r2,r2,r4
  831980:	1140002d 	sthio	r5,0(r2)
	current_sector_modified = true;
  831984:	00c00044 	movi	r3,1
  831988:	d0e77b15 	stw	r3,-25108(gp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  83198c:	b8801217 	ldw	r2,72(r23)
  831990:	d0e77817 	ldw	r3,-25120(gp)
  831994:	1887883a 	add	r3,r3,r2
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831998:	d0a77c17 	ldw	r2,-25104(gp)
			+ fat_partition_offset_in_512_byte_sectors;

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  83199c:	88c9883a 	add	r4,r17,r3
	}

	if (sector_index != current_sector_index) {
  8319a0:	11000326 	beq	r2,r4,8319b0 <alt_up_sd_card_write+0x434>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8319a4:	000b883a 	mov	r5,zero
  8319a8:	082e5440 	call	82e544 <Read_Sector_Data>
  8319ac:	10000926 	beq	r2,zero,8319d4 <alt_up_sd_card_write+0x458>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8319b0:	d0e77a17 	ldw	r3,-25112(gp)
  8319b4:	90803fcc 	andi	r2,r18,255
  8319b8:	1085883a 	add	r2,r2,r2
  8319bc:	19000a17 	ldw	r4,40(r3)
  8319c0:	00ffffc4 	movi	r3,-1
  8319c4:	1105883a 	add	r2,r2,r4
  8319c8:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  8319cc:	01000044 	movi	r4,1
  8319d0:	d1277b15 	stw	r4,-25108(gp)
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  8319d4:	00c02174 	movhi	r3,133
  8319d8:	18f3c504 	addi	r3,r3,-12524
  8319dc:	e0c5883a 	add	r2,fp,r3
  8319e0:	14800715 	stw	r18,28(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  8319e4:	10000815 	stw	zero,32(r2)
  8319e8:	003f4606 	br	831704 <alt_up_sd_card_write+0x188>
				} else {
					cluster_index++;
				}
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
  8319ec:	80bfffcc 	andi	r2,r16,65535
  8319f0:	10a0001c 	xori	r2,r2,32768
  8319f4:	10a00004 	addi	r2,r2,-32768
  8319f8:	103f951e 	bne	r2,zero,831850 <alt_up_sd_card_write+0x2d4>
  8319fc:	003f9b06 	br	83186c <alt_up_sd_card_write+0x2f0>

00831a00 <find_first_empty_record_in_a_subdirectory>:
	return result;
}

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  831a00:	defff504 	addi	sp,sp,-44
  831a04:	dd000515 	stw	r20,20(sp)
  831a08:	dcc00415 	stw	r19,16(sp)
  831a0c:	dc800315 	stw	r18,12(sp)
  831a10:	dfc00a15 	stw	ra,40(sp)
  831a14:	df000915 	stw	fp,36(sp)
  831a18:	ddc00815 	stw	r23,32(sp)
  831a1c:	dd800715 	stw	r22,28(sp)
  831a20:	dd400615 	stw	r21,24(sp)
  831a24:	dc400215 	stw	r17,8(sp)
  831a28:	dc000115 	stw	r16,4(sp)
  831a2c:	2025883a 	mov	r18,r4
  831a30:	053fffc4 	movi	r20,-1
  831a34:	04c02174 	movhi	r19,133
  831a38:	9cf3b004 	addi	r19,r19,-12608
	int result = -1;
	int cluster = start_cluster_index;
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  831a3c:	98800383 	ldbu	r2,14(r19)
  831a40:	90ffff84 	addi	r3,r18,-2
  831a44:	99001417 	ldw	r4,80(r19)
  831a48:	1887383a 	mul	r3,r3,r2
  831a4c:	1923883a 	add	r17,r3,r4
		int sector_index;

		for (sector_index = 0; sector_index
  831a50:	10001926 	beq	r2,zero,831ab8 <find_first_empty_record_in_a_subdirectory+0xb8>
  831a54:	0021883a 	mov	r16,zero
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  831a58:	d1677817 	ldw	r5,-25120(gp)
  831a5c:	8c09883a 	add	r4,r17,r16
  831a60:	082e5440 	call	82e544 <Read_Sector_Data>
  831a64:	10001426 	beq	r2,zero,831ab8 <find_first_empty_record_in_a_subdirectory+0xb8>
  831a68:	d0e77a17 	ldw	r3,-25112(gp)
  831a6c:	8008953a 	slli	r4,r16,20
								| ((sector_index * 16 + file_counter) << 16);
						return result;
					}
				}
			} else {
				break;
  831a70:	000d883a 	mov	r6,zero
  831a74:	19c00a17 	ldw	r7,40(r3)
  831a78:	000b883a 	mov	r5,zero
  831a7c:	02803944 	movi	r10,229
  831a80:	02400404 	movi	r9,16
  831a84:	02000074 	movhi	r8,1

				for (file_counter = 0; file_counter < 16; file_counter++) {
					unsigned short int leading_char;

					// Read file record.
					leading_char
  831a88:	29c5883a 	add	r2,r5,r7
  831a8c:	10c00023 	ldbuio	r3,0(r2)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  831a90:	18c03fcc 	andi	r3,r3,255
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  831a94:	31800044 	addi	r6,r6,1
  831a98:	29400804 	addi	r5,r5,32
					unsigned short int leading_char;

					// Read file record.
					leading_char
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  831a9c:	1a800c26 	beq	r3,r10,831ad0 <find_first_empty_record_in_a_subdirectory+0xd0>
  831aa0:	18000b26 	beq	r3,zero,831ad0 <find_first_empty_record_in_a_subdirectory+0xd0>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  831aa4:	2209883a 	add	r4,r4,r8
  831aa8:	327ff71e 	bne	r6,r9,831a88 <find_first_empty_record_in_a_subdirectory+0x88>
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  831aac:	98800383 	ldbu	r2,14(r19)
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  831ab0:	84000044 	addi	r16,r16,1
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  831ab4:	80bfe816 	blt	r16,r2,831a58 <find_first_empty_record_in_a_subdirectory+0x58>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  831ab8:	a0001316 	blt	r20,zero,831b08 <find_first_empty_record_in_a_subdirectory+0x108>
			} else {
				// Error encountered.                 
				result = -1;
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  831abc:	00bffdd4 	movui	r2,65527
  831ac0:	14800416 	blt	r2,r18,831ad4 <find_first_empty_record_in_a_subdirectory+0xd4>
  831ac4:	00bfffc4 	movi	r2,-1
  831ac8:	a0bfdc26 	beq	r20,r2,831a3c <find_first_empty_record_in_a_subdirectory+0x3c>
  831acc:	00000106 	br	831ad4 <find_first_empty_record_in_a_subdirectory+0xd4>

					// Read file record.
					leading_char
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
						result = (cluster)
  831ad0:	9128b03a 	or	r20,r18,r4
				result = -1;
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
	return result;
}
  831ad4:	a005883a 	mov	r2,r20
  831ad8:	dfc00a17 	ldw	ra,40(sp)
  831adc:	df000917 	ldw	fp,36(sp)
  831ae0:	ddc00817 	ldw	r23,32(sp)
  831ae4:	dd800717 	ldw	r22,28(sp)
  831ae8:	dd400617 	ldw	r21,24(sp)
  831aec:	dd000517 	ldw	r20,20(sp)
  831af0:	dcc00417 	ldw	r19,16(sp)
  831af4:	dc800317 	ldw	r18,12(sp)
  831af8:	dc400217 	ldw	r17,8(sp)
  831afc:	dc000117 	ldw	r16,4(sp)
  831b00:	dec00b04 	addi	sp,sp,44
  831b04:	f800283a 	ret

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831b08:	98801117 	ldw	r2,68(r19)
  831b0c:	d0e77817 	ldw	r3,-25120(gp)
  831b10:	902ed23a 	srli	r23,r18,8
  831b14:	1887883a 	add	r3,r3,r2

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;

	if (sector_index != current_sector_index) {
  831b18:	d0a77c17 	ldw	r2,-25104(gp)
// Read a cluster flag.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  831b1c:	b8c9883a 	add	r4,r23,r3

	if (sector_index != current_sector_index) {
  831b20:	20800526 	beq	r4,r2,831b38 <find_first_empty_record_in_a_subdirectory+0x138>
		if (Read_Sector_Data(sector_index, 0) == false) {
  831b24:	000b883a 	mov	r5,zero
  831b28:	082e5440 	call	82e544 <Read_Sector_Data>
  831b2c:	1000021e 	bne	r2,zero,831b38 <find_first_empty_record_in_a_subdirectory+0x138>
  831b30:	053fffc4 	movi	r20,-1
  831b34:	003fe106 	br	831abc <find_first_empty_record_in_a_subdirectory+0xbc>
			return false;
		}
	}
	*flag
  831b38:	d0e77a17 	ldw	r3,-25112(gp)
  831b3c:	90803fcc 	andi	r2,r18,255
  831b40:	10ad883a 	add	r22,r2,r2
  831b44:	18800a17 	ldw	r2,40(r3)
  831b48:	b085883a 	add	r2,r22,r2
  831b4c:	10c0002b 	ldhuio	r3,0(r2)
		// that holds data for the current directory.
		if (result < 0) {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  831b50:	00bffe14 	movui	r2,65528
  831b54:	18fffe0c 	andi	r3,r3,65528
  831b58:	18bfd81e 	bne	r3,r2,831abc <find_first_empty_record_in_a_subdirectory+0xbc>
}

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  831b5c:	9c401117 	ldw	r17,68(r19)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831b60:	98801217 	ldw	r2,72(r19)
  831b64:	88801926 	beq	r17,r2,831bcc <find_first_empty_record_in_a_subdirectory+0x1cc>
  831b68:	05400084 	movi	r21,2
  831b6c:	043fffc4 	movi	r16,-1
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  831b70:	d1677817 	ldw	r5,-25120(gp)
  831b74:	8809883a 	mov	r4,r17
  831b78:	082e5440 	call	82e544 <Read_Sector_Data>
  831b7c:	10001526 	beq	r2,zero,831bd4 <find_first_empty_record_in_a_subdirectory+0x1d4>
  831b80:	d0e77a17 	ldw	r3,-25112(gp)
  831b84:	a8803fcc 	andi	r2,r21,255
  831b88:	19000a17 	ldw	r4,40(r3)
			do {
				cluster
  831b8c:	1085883a 	add	r2,r2,r2
  831b90:	1105883a 	add	r2,r2,r4
  831b94:	10c0002b 	ldhuio	r3,0(r2)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  831b98:	18bfffcc 	andi	r2,r3,65535
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster
  831b9c:	1821883a 	mov	r16,r3
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  831ba0:	10001026 	beq	r2,zero,831be4 <find_first_empty_record_in_a_subdirectory+0x1e4>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  831ba4:	ad400044 	addi	r21,r21,1
				}
			} while ((cluster_index % 256) != 0);
  831ba8:	a8803fcc 	andi	r2,r21,255
  831bac:	103ff71e 	bne	r2,zero,831b8c <find_first_empty_record_in_a_subdirectory+0x18c>
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831bb0:	98801217 	ldw	r2,72(r19)
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
			break;
		}
		sector++;
  831bb4:	8c400044 	addi	r17,r17,1
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831bb8:	147fed1e 	bne	r2,r17,831b70 <find_first_empty_record_in_a_subdirectory+0x170>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  831bbc:	80bfffcc 	andi	r2,r16,65535
  831bc0:	10a0001c 	xori	r2,r2,32768
  831bc4:	10a00004 	addi	r2,r2,-32768
  831bc8:	10000626 	beq	r2,zero,831be4 <find_first_empty_record_in_a_subdirectory+0x1e4>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831bcc:	04bffe14 	movui	r18,65528
  831bd0:	003fba06 	br	831abc <find_first_empty_record_in_a_subdirectory+0xbc>
				} else {
					cluster_index++;
				}
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
  831bd4:	80bfffcc 	andi	r2,r16,65535
  831bd8:	10a0001c 	xori	r2,r2,32768
  831bdc:	10a00004 	addi	r2,r2,-32768
  831be0:	103ff31e 	bne	r2,zero,831bb0 <find_first_empty_record_in_a_subdirectory+0x1b0>

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831be4:	98801117 	ldw	r2,68(r19)
  831be8:	d0e77817 	ldw	r3,-25120(gp)
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
		*cluster_number = cluster_index;
  831bec:	dd400015 	stw	r21,0(sp)
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  831bf0:	04bffe14 	movui	r18,65528

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831bf4:	1887883a 	add	r3,r3,r2
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831bf8:	d0a77c17 	ldw	r2,-25104(gp)
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  831bfc:	b8c9883a 	add	r4,r23,r3
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831c00:	11000326 	beq	r2,r4,831c10 <find_first_empty_record_in_a_subdirectory+0x210>
		if (Read_Sector_Data(sector_index, 0) == false) {
  831c04:	000b883a 	mov	r5,zero
  831c08:	082e5440 	call	82e544 <Read_Sector_Data>
  831c0c:	103fab26 	beq	r2,zero,831abc <find_first_empty_record_in_a_subdirectory+0xbc>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  831c10:	d0e77a17 	ldw	r3,-25112(gp)
  831c14:	a93fffcc 	andi	r4,r21,65535
  831c18:	2120001c 	xori	r4,r4,32768
  831c1c:	18800a17 	ldw	r2,40(r3)
  831c20:	21200004 	addi	r4,r4,-32768
  831c24:	b085883a 	add	r2,r22,r2
  831c28:	1100002d 	sthio	r4,0(r2)
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  831c2c:	dc000017 	ldw	r16,0(sp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831c30:	98c01117 	ldw	r3,68(r19)
  831c34:	d0a77817 	ldw	r2,-25120(gp)

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  831c38:	8008d23a 	srli	r4,r16,8
		if (Read_Sector_Data(sector_index, 0) == false) {
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
	current_sector_modified = true;
  831c3c:	04400044 	movi	r17,1

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831c40:	10c5883a 	add	r2,r2,r3

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  831c44:	2089883a 	add	r4,r4,r2
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831c48:	d0a77c17 	ldw	r2,-25104(gp)
		if (Read_Sector_Data(sector_index, 0) == false) {
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
	current_sector_modified = true;
  831c4c:	d4677b15 	stw	r17,-25108(gp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831c50:	05402174 	movhi	r21,133
  831c54:	ad73b004 	addi	r21,r21,-12608
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  831c58:	11000326 	beq	r2,r4,831c68 <find_first_empty_record_in_a_subdirectory+0x268>
		if (Read_Sector_Data(sector_index, 0) == false) {
  831c5c:	000b883a 	mov	r5,zero
  831c60:	082e5440 	call	82e544 <Read_Sector_Data>
  831c64:	103f9526 	beq	r2,zero,831abc <find_first_empty_record_in_a_subdirectory+0xbc>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  831c68:	d0e77a17 	ldw	r3,-25112(gp)
  831c6c:	80803fcc 	andi	r2,r16,255
  831c70:	1085883a 	add	r2,r2,r2
  831c74:	19000a17 	ldw	r4,40(r3)
  831c78:	073fffc4 	movi	fp,-1
  831c7c:	1105883a 	add	r2,r2,r4
  831c80:	1700002d 	sthio	fp,0(r2)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831c84:	a8c01217 	ldw	r3,72(r21)
  831c88:	d0a77817 	ldw	r2,-25120(gp)
		if (Read_Sector_Data(sector_index, 0) == false) {
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
	current_sector_modified = true;
  831c8c:	d4677b15 	stw	r17,-25108(gp)
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  831c90:	dc000017 	ldw	r16,0(sp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831c94:	10c5883a 	add	r2,r2,r3

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  831c98:	b889883a 	add	r4,r23,r2
	}

	if (sector_index != current_sector_index) {
  831c9c:	d0a77c17 	ldw	r2,-25104(gp)
  831ca0:	11000326 	beq	r2,r4,831cb0 <find_first_empty_record_in_a_subdirectory+0x2b0>
		if (Read_Sector_Data(sector_index, 0) == false) {
  831ca4:	000b883a 	mov	r5,zero
  831ca8:	082e5440 	call	82e544 <Read_Sector_Data>
  831cac:	103f8326 	beq	r2,zero,831abc <find_first_empty_record_in_a_subdirectory+0xbc>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  831cb0:	d0e77a17 	ldw	r3,-25112(gp)
  831cb4:	813fffcc 	andi	r4,r16,65535
  831cb8:	2120001c 	xori	r4,r4,32768
  831cbc:	18800a17 	ldw	r2,40(r3)
  831cc0:	21200004 	addi	r4,r4,-32768
  831cc4:	b085883a 	add	r2,r22,r2
  831cc8:	1100002d 	sthio	r4,0(r2)
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  831ccc:	dc000017 	ldw	r16,0(sp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831cd0:	a8c01217 	ldw	r3,72(r21)
  831cd4:	d0a77817 	ldw	r2,-25120(gp)

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  831cd8:	8008d23a 	srli	r4,r16,8
		if (Read_Sector_Data(sector_index, 0) == false) {
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
	current_sector_modified = true;
  831cdc:	d4677b15 	stw	r17,-25108(gp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  831ce0:	10c5883a 	add	r2,r2,r3

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  831ce4:	2089883a 	add	r4,r4,r2
	}

	if (sector_index != current_sector_index) {
  831ce8:	d0a77c17 	ldw	r2,-25104(gp)
  831cec:	11000326 	beq	r2,r4,831cfc <find_first_empty_record_in_a_subdirectory+0x2fc>
		if (Read_Sector_Data(sector_index, 0) == false) {
  831cf0:	000b883a 	mov	r5,zero
  831cf4:	082e5440 	call	82e544 <Read_Sector_Data>
  831cf8:	103f7026 	beq	r2,zero,831abc <find_first_empty_record_in_a_subdirectory+0xbc>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  831cfc:	d0e77a17 	ldw	r3,-25112(gp)
  831d00:	80803fcc 	andi	r2,r16,255
  831d04:	1085883a 	add	r2,r2,r2
  831d08:	19000a17 	ldw	r4,40(r3)
  831d0c:	1105883a 	add	r2,r2,r4
  831d10:	1700002d 	sthio	fp,0(r2)
bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
	bool result = true;
	if (current_sector_modified) {
		result = Write_Sector_Data(current_sector_index, 0);
  831d14:	d1277c17 	ldw	r4,-25104(gp)
  831d18:	000b883a 	mov	r5,zero
		if (Read_Sector_Data(sector_index, 0) == false) {
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
	current_sector_modified = true;
  831d1c:	d4677b15 	stw	r17,-25108(gp)
bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
	bool result = true;
	if (current_sector_modified) {
		result = Write_Sector_Data(current_sector_index, 0);
  831d20:	082e4980 	call	82e498 <Write_Sector_Data>
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  831d24:	dd000017 	ldw	r20,0(sp)
  831d28:	003f6406 	br	831abc <find_first_empty_record_in_a_subdirectory+0xbc>

00831d2c <create_file>:
}

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  831d2c:	defff704 	addi	sp,sp,-36
  831d30:	dd400515 	stw	r21,20(sp)
}

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  831d34:	05402174 	movhi	r21,133
  831d38:	ad73b004 	addi	r21,r21,-12608
}

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  831d3c:	dc400115 	stw	r17,4(sp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831d40:	a8801217 	ldw	r2,72(r21)
}

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  831d44:	ac401117 	ldw	r17,68(r21)
}

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  831d48:	ddc00715 	stw	r23,28(sp)
  831d4c:	dcc00315 	stw	r19,12(sp)
  831d50:	dc800215 	stw	r18,8(sp)
  831d54:	dfc00815 	stw	ra,32(sp)
  831d58:	dd800615 	stw	r22,24(sp)
  831d5c:	dd000415 	stw	r20,16(sp)
  831d60:	dc000015 	stw	r16,0(sp)
  831d64:	2027883a 	mov	r19,r4
  831d68:	2825883a 	mov	r18,r5
  831d6c:	302f883a 	mov	r23,r6
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831d70:	14403b26 	beq	r2,r17,831e60 <create_file+0x134>
  831d74:	05000084 	movi	r20,2
  831d78:	043fffc4 	movi	r16,-1
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  831d7c:	d1677817 	ldw	r5,-25120(gp)
  831d80:	8809883a 	mov	r4,r17
  831d84:	082e5440 	call	82e544 <Read_Sector_Data>
  831d88:	10004126 	beq	r2,zero,831e90 <create_file+0x164>
  831d8c:	d0e77a17 	ldw	r3,-25112(gp)
  831d90:	a0803fcc 	andi	r2,r20,255
  831d94:	19000a17 	ldw	r4,40(r3)
			do {
				cluster
  831d98:	1085883a 	add	r2,r2,r2
  831d9c:	1105883a 	add	r2,r2,r4
  831da0:	10c0002b 	ldhuio	r3,0(r2)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  831da4:	18bfffcc 	andi	r2,r3,65535
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster
  831da8:	1821883a 	mov	r16,r3
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  831dac:	10000a26 	beq	r2,zero,831dd8 <create_file+0xac>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  831db0:	a5000044 	addi	r20,r20,1
				}
			} while ((cluster_index % 256) != 0);
  831db4:	a0803fcc 	andi	r2,r20,255
  831db8:	103ff71e 	bne	r2,zero,831d98 <create_file+0x6c>
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831dbc:	a8801217 	ldw	r2,72(r21)
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
			break;
		}
		sector++;
  831dc0:	8c400044 	addi	r17,r17,1
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831dc4:	147fed1e 	bne	r2,r17,831d7c <create_file+0x50>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  831dc8:	80bfffcc 	andi	r2,r16,65535
  831dcc:	10a0001c 	xori	r2,r2,32768
  831dd0:	10a00004 	addi	r2,r2,-32768
  831dd4:	1000221e 	bne	r2,zero,831e60 <create_file+0x134>
	bool result = false;

	if (find_first_empty_cluster(&cluster_number)) {
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  831dd8:	b8800a17 	ldw	r2,40(r23)
  831ddc:	1000341e 	bne	r2,zero,831eb0 <create_file+0x184>
int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  831de0:	a980050b 	ldhu	r6,20(r21)
  831de4:	a940030b 	ldhu	r5,12(r21)
  831de8:	008003c4 	movi	r2,15
  831dec:	3008917a 	slli	r4,r6,5
  831df0:	2146b03a 	or	r3,r4,r5
  831df4:	10c0fd2e 	bgeu	r2,r3,8321ec <create_file+0x4c0>
  831df8:	0820b480 	call	820b48 <__divsi3>
  831dfc:	1023883a 	mov	r17,r2
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  831e00:	0440170e 	bge	zero,r17,831e60 <create_file+0x134>
  831e04:	0021883a 	mov	r16,zero
		if (Read_Sector_Data(sector_index
  831e08:	a9001317 	ldw	r4,76(r21)
  831e0c:	d1677817 	ldw	r5,-25120(gp)
  831e10:	8109883a 	add	r4,r16,r4
  831e14:	082e5440 	call	82e544 <Read_Sector_Data>
  831e18:	10001126 	beq	r2,zero,831e60 <create_file+0x134>
  831e1c:	d0e77a17 	ldw	r3,-25112(gp)
  831e20:	8012913a 	slli	r9,r16,4
					result = (sector_index * 16 + file_counter) << 16;
					return result;
				}
			}
		} else {
			break;
  831e24:	000b883a 	mov	r5,zero
  831e28:	19800a17 	ldw	r6,40(r3)
  831e2c:	0009883a 	mov	r4,zero
  831e30:	02003944 	movi	r8,229
  831e34:	01c00404 	movi	r7,16

			for (file_counter = 0; file_counter < 16; file_counter++) {
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  831e38:	2185883a 	add	r2,r4,r6
  831e3c:	10c00023 	ldbuio	r3,0(r2)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  831e40:	18c03fcc 	andi	r3,r3,255
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  831e44:	21000804 	addi	r4,r4,32
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  831e48:	1a00ef26 	beq	r3,r8,832208 <create_file+0x4dc>
  831e4c:	1800ee26 	beq	r3,zero,832208 <create_file+0x4dc>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  831e50:	29400044 	addi	r5,r5,1
  831e54:	29fff81e 	bne	r5,r7,831e38 <create_file+0x10c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  831e58:	84000044 	addi	r16,r16,1
  831e5c:	8c3fea1e 	bne	r17,r16,831e08 <create_file+0xdc>
		if (Read_Sector_Data(sector_index, 0) == false) {
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
	current_sector_modified = true;
  831e60:	0005883a 	mov	r2,zero
			}
		}

	}
	return result;
}
  831e64:	dfc00817 	ldw	ra,32(sp)
  831e68:	ddc00717 	ldw	r23,28(sp)
  831e6c:	dd800617 	ldw	r22,24(sp)
  831e70:	dd400517 	ldw	r21,20(sp)
  831e74:	dd000417 	ldw	r20,16(sp)
  831e78:	dcc00317 	ldw	r19,12(sp)
  831e7c:	dc800217 	ldw	r18,8(sp)
  831e80:	dc400117 	ldw	r17,4(sp)
  831e84:	dc000017 	ldw	r16,0(sp)
  831e88:	dec00904 	addi	sp,sp,36
  831e8c:	f800283a 	ret
				} else {
					cluster_index++;
				}
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
  831e90:	80bfffcc 	andi	r2,r16,65535
  831e94:	10a0001c 	xori	r2,r2,32768
  831e98:	10a00004 	addi	r2,r2,-32768
  831e9c:	103fce26 	beq	r2,zero,831dd8 <create_file+0xac>
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831ea0:	a8801217 	ldw	r2,72(r21)
			} while ((cluster_index % 256) != 0);
		}
		if (cluster == 0) {
			break;
		}
		sector++;
  831ea4:	8c400044 	addi	r17,r17,1
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  831ea8:	147fb41e 	bne	r2,r17,831d7c <create_file+0x50>
  831eac:	003fc606 	br	831dc8 <create_file+0x9c>
		if (home_dir->file_record_cluster == 0) {
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  831eb0:	b900058b 	ldhu	r4,22(r23)
  831eb4:	0831a000 	call	831a00 <find_first_empty_record_in_a_subdirectory>
  831eb8:	102d883a 	mov	r22,r2
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  831ebc:	b03fe816 	blt	r22,zero,831e60 <create_file+0x134>

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);
  831ec0:	9809883a 	mov	r4,r19
  831ec4:	0822e100 	call	822e10 <strlen>

	for (index = 0; index < length; index++) {
  831ec8:	00815f0e 	bge	zero,r2,832448 <create_file+0x71c>
		if ((name[index] == '\\') || (name[index] == '/')) {
  831ecc:	99c00003 	ldbu	r7,0(r19)
  831ed0:	01401704 	movi	r5,92
  831ed4:	38c03fcc 	andi	r3,r7,255
  831ed8:	18c0201c 	xori	r3,r3,128
  831edc:	18ffe004 	addi	r3,r3,-128
  831ee0:	19400c26 	beq	r3,r5,831f14 <create_file+0x1e8>
  831ee4:	01000bc4 	movi	r4,47
  831ee8:	19000a26 	beq	r3,r4,831f14 <create_file+0x1e8>
  831eec:	280d883a 	mov	r6,r5
  831ef0:	200b883a 	mov	r5,r4
  831ef4:	0009883a 	mov	r4,zero
  831ef8:	00000306 	br	831f08 <create_file+0x1dc>
  831efc:	18c00007 	ldb	r3,0(r3)
  831f00:	1980c426 	beq	r3,r6,832214 <create_file+0x4e8>
  831f04:	1940c326 	beq	r3,r5,832214 <create_file+0x4e8>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  831f08:	21000044 	addi	r4,r4,1
		if ((name[index] == '\\') || (name[index] == '/')) {
  831f0c:	9907883a 	add	r3,r19,r4
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  831f10:	113ffa1e 	bne	r2,r4,831efc <create_file+0x1d0>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  831f14:	38c03fcc 	andi	r3,r7,255
  831f18:	18c0201c 	xori	r3,r3,128
  831f1c:	18ffe004 	addi	r3,r3,-128
  831f20:	00800b84 	movi	r2,46
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  831f24:	92000204 	addi	r8,r18,8
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  831f28:	1880d926 	beq	r3,r2,832290 <create_file+0x564>
			name[counter] = filename[local];
  831f2c:	91c00005 	stb	r7,0(r18)
			if (filename[local] != 0)
  831f30:	98800007 	ldb	r2,0(r19)
  831f34:	10013c26 	beq	r2,zero,832428 <create_file+0x6fc>
  831f38:	01c00044 	movi	r7,1
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  831f3c:	99c9883a 	add	r4,r19,r7
  831f40:	21400003 	ldbu	r5,0(r4)
  831f44:	00800b84 	movi	r2,46
  831f48:	200d883a 	mov	r6,r4
  831f4c:	28c03fcc 	andi	r3,r5,255
  831f50:	18c0201c 	xori	r3,r3,128
  831f54:	18ffe004 	addi	r3,r3,-128
  831f58:	1880d826 	beq	r3,r2,8322bc <create_file+0x590>
			name[counter] = filename[local];
  831f5c:	91400045 	stb	r5,1(r18)
			if (filename[local] != 0)
  831f60:	30800007 	ldb	r2,0(r6)
  831f64:	10011d26 	beq	r2,zero,8323dc <create_file+0x6b0>
				local++;
  831f68:	39c00044 	addi	r7,r7,1
  831f6c:	99c9883a 	add	r4,r19,r7
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  831f70:	21400003 	ldbu	r5,0(r4)
  831f74:	00800b84 	movi	r2,46
  831f78:	28c03fcc 	andi	r3,r5,255
  831f7c:	18c0201c 	xori	r3,r3,128
  831f80:	18ffe004 	addi	r3,r3,-128
  831f84:	1880d526 	beq	r3,r2,8322dc <create_file+0x5b0>
			name[counter] = filename[local];
  831f88:	91400085 	stb	r5,2(r18)
			if (filename[local] != 0)
  831f8c:	20800007 	ldb	r2,0(r4)
  831f90:	10011726 	beq	r2,zero,8323f0 <create_file+0x6c4>
				local++;
  831f94:	39c00044 	addi	r7,r7,1
  831f98:	99c9883a 	add	r4,r19,r7
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  831f9c:	21400003 	ldbu	r5,0(r4)
  831fa0:	00800b84 	movi	r2,46
  831fa4:	28c03fcc 	andi	r3,r5,255
  831fa8:	18c0201c 	xori	r3,r3,128
  831fac:	18ffe004 	addi	r3,r3,-128
  831fb0:	1880d226 	beq	r3,r2,8322fc <create_file+0x5d0>
			name[counter] = filename[local];
  831fb4:	914000c5 	stb	r5,3(r18)
			if (filename[local] != 0)
  831fb8:	20800007 	ldb	r2,0(r4)
  831fbc:	10011026 	beq	r2,zero,832400 <create_file+0x6d4>
				local++;
  831fc0:	39c00044 	addi	r7,r7,1
  831fc4:	99c9883a 	add	r4,r19,r7
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  831fc8:	21400003 	ldbu	r5,0(r4)
  831fcc:	00800b84 	movi	r2,46
  831fd0:	28c03fcc 	andi	r3,r5,255
  831fd4:	18c0201c 	xori	r3,r3,128
  831fd8:	18ffe004 	addi	r3,r3,-128
  831fdc:	1880cf26 	beq	r3,r2,83231c <create_file+0x5f0>
			name[counter] = filename[local];
  831fe0:	91400105 	stb	r5,4(r18)
			if (filename[local] != 0)
  831fe4:	20800007 	ldb	r2,0(r4)
  831fe8:	10010926 	beq	r2,zero,832410 <create_file+0x6e4>
				local++;
  831fec:	39c00044 	addi	r7,r7,1
  831ff0:	99c9883a 	add	r4,r19,r7
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  831ff4:	21400003 	ldbu	r5,0(r4)
  831ff8:	00800b84 	movi	r2,46
  831ffc:	28c03fcc 	andi	r3,r5,255
  832000:	18c0201c 	xori	r3,r3,128
  832004:	18ffe004 	addi	r3,r3,-128
  832008:	1880cc26 	beq	r3,r2,83233c <create_file+0x610>
			name[counter] = filename[local];
  83200c:	91400145 	stb	r5,5(r18)
			if (filename[local] != 0)
  832010:	20800007 	ldb	r2,0(r4)
  832014:	10010226 	beq	r2,zero,832420 <create_file+0x6f4>
				local++;
  832018:	39c00044 	addi	r7,r7,1
  83201c:	99c9883a 	add	r4,r19,r7
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832020:	21400003 	ldbu	r5,0(r4)
  832024:	00800b84 	movi	r2,46
  832028:	28c03fcc 	andi	r3,r5,255
  83202c:	18c0201c 	xori	r3,r3,128
  832030:	18ffe004 	addi	r3,r3,-128
  832034:	1880c926 	beq	r3,r2,83235c <create_file+0x630>
			name[counter] = filename[local];
  832038:	91400185 	stb	r5,6(r18)
			if (filename[local] != 0)
  83203c:	20800007 	ldb	r2,0(r4)
  832040:	1000e426 	beq	r2,zero,8323d4 <create_file+0x6a8>
				local++;
  832044:	39c00044 	addi	r7,r7,1
  832048:	99c9883a 	add	r4,r19,r7
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  83204c:	21400003 	ldbu	r5,0(r4)
  832050:	00800b84 	movi	r2,46
  832054:	28c03fcc 	andi	r3,r5,255
  832058:	18c0201c 	xori	r3,r3,128
  83205c:	18ffe004 	addi	r3,r3,-128
  832060:	1880c626 	beq	r3,r2,83237c <create_file+0x650>
			name[counter] = filename[local];
  832064:	914001c5 	stb	r5,7(r18)
			if (filename[local] != 0)
  832068:	20800007 	ldb	r2,0(r4)
  83206c:	10000726 	beq	r2,zero,83208c <create_file+0x360>
				local++;
  832070:	39c00044 	addi	r7,r7,1
  832074:	99c9883a 	add	r4,r19,r7
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  832078:	20c00007 	ldb	r3,0(r4)
  83207c:	00800b84 	movi	r2,46
  832080:	1880021e 	bne	r3,r2,83208c <create_file+0x360>
		local++;
  832084:	39c00044 	addi	r7,r7,1
  832088:	99c9883a 	add	r4,r19,r7
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
  83208c:	20800003 	ldbu	r2,0(r4)
  832090:	1000cc1e 	bne	r2,zero,8323c4 <create_file+0x698>
			extension[counter] = filename[local];
			local++;
		} else {
			extension[counter] = ' ';
  832094:	00800804 	movi	r2,32
  832098:	40800005 	stb	r2,0(r8)
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
  83209c:	20800003 	ldbu	r2,0(r4)
  8320a0:	1000c41e 	bne	r2,zero,8323b4 <create_file+0x688>
			extension[counter] = filename[local];
			local++;
		} else {
			extension[counter] = ' ';
  8320a4:	00800804 	movi	r2,32
  8320a8:	40800045 	stb	r2,1(r8)
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
  8320ac:	20800003 	ldbu	r2,0(r4)
  8320b0:	1000011e 	bne	r2,zero,8320b8 <create_file+0x38c>
			extension[counter] = filename[local];
			local++;
		} else {
			extension[counter] = ' ';
  8320b4:	00800804 	movi	r2,32
  8320b8:	40800085 	stb	r2,2(r8)
			file_record->file_size_in_bytes = 0;
			file_record->current_cluster_index = cluster_number;
			file_record->current_sector_in_cluster = 0;
			file_record->current_byte_position = 0;
			file_record->file_record_cluster = record_index & 0x0000ffff;
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  8320bc:	b005d43a 	srai	r2,r22,16
			file_record->create_time = 0;
			file_record->create_date = 0;
			file_record->last_access_date = 0;
			file_record->last_modified_time = 0;
			file_record->last_modified_date = 0;
			file_record->start_cluster_index = cluster_number;
  8320c0:	9500058d 	sth	r20,22(r18)
			file_record->file_record_cluster = record_index & 0x0000ffff;
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  8320c4:	b900058b 	ldhu	r4,22(r23)
			file_record->current_sector_in_cluster = 0;
			file_record->current_byte_position = 0;
			file_record->file_record_cluster = record_index & 0x0000ffff;
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  8320c8:	10c003cc 	andi	r3,r2,15
			file_record->file_size_in_bytes = 0;
			file_record->current_cluster_index = cluster_number;
			file_record->current_sector_in_cluster = 0;
			file_record->current_byte_position = 0;
			file_record->file_record_cluster = record_index & 0x0000ffff;
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  8320cc:	10bfffcc 	andi	r2,r2,65535
  8320d0:	100dd13a 	srai	r6,r2,4
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  8320d4:	1806917a 	slli	r3,r3,5
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
			file_record->in_use = true;
  8320d8:	00800044 	movi	r2,1
			file_record->start_cluster_index = cluster_number;
			file_record->file_size_in_bytes = 0;
			file_record->current_cluster_index = cluster_number;
			file_record->current_sector_in_cluster = 0;
			file_record->current_byte_position = 0;
			file_record->file_record_cluster = record_index & 0x0000ffff;
  8320dc:	b17fffcc 	andi	r5,r22,65535
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  8320e0:	90c00c0d 	sth	r3,48(r18)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  8320e4:	91000d15 	stw	r4,52(r18)
			file_record->in_use = true;
			file_record->modified = true;
  8320e8:	90800e15 	stw	r2,56(r18)
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  8320ec:	900002c5 	stb	zero,11(r18)
			file_record->create_time = 0;
  8320f0:	9000030d 	sth	zero,12(r18)
			file_record->create_date = 0;
  8320f4:	9000038d 	sth	zero,14(r18)
			file_record->last_access_date = 0;
  8320f8:	9000040d 	sth	zero,16(r18)
			file_record->last_modified_time = 0;
  8320fc:	9000048d 	sth	zero,18(r18)
			file_record->last_modified_date = 0;
  832100:	9000050d 	sth	zero,20(r18)
			file_record->start_cluster_index = cluster_number;
			file_record->file_size_in_bytes = 0;
  832104:	90000615 	stw	zero,24(r18)
			file_record->current_cluster_index = cluster_number;
  832108:	95000715 	stw	r20,28(r18)
			file_record->current_sector_in_cluster = 0;
  83210c:	90000815 	stw	zero,32(r18)
			file_record->current_byte_position = 0;
  832110:	90000915 	stw	zero,36(r18)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  832114:	91400a15 	stw	r5,40(r18)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  832118:	91800b15 	stw	r6,44(r18)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
			file_record->in_use = true;
  83211c:	90800f15 	stw	r2,60(r18)
			file_record->modified = true;
			// Now write the record at the specified location.
			file_record_sector
  832120:	28009d1e 	bne	r5,zero,832398 <create_file+0x66c>
  832124:	a8801317 	ldw	r2,76(r21)
  832128:	1189883a 	add	r4,r2,r6
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  83212c:	d1677817 	ldw	r5,-25120(gp)
  832130:	082e5440 	call	82e544 <Read_Sector_Data>
  832134:	103f4a26 	beq	r2,zero,831e60 <create_file+0x134>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  832138:	91000c0f 	ldh	r4,48(r18)
  83213c:	900b883a 	mov	r5,r18
  832140:	082e0940 	call	82e094 <Write_File_Record_At_Offset>
  832144:	103f4626 	beq	r2,zero,831e60 <create_file+0x134>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
	bool result = true;
	if (current_sector_modified) {
  832148:	d0a77b17 	ldw	r2,-25108(gp)
  83214c:	1000ba1e 	bne	r2,zero,832438 <create_file+0x70c>

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  832150:	a8801117 	ldw	r2,68(r21)
  832154:	d0e77817 	ldw	r3,-25120(gp)
  832158:	a020d23a 	srli	r16,r20,8
  83215c:	1887883a 	add	r3,r3,r2
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  832160:	d0a77c17 	ldw	r2,-25104(gp)
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  832164:	80c9883a 	add	r4,r16,r3
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  832168:	11000326 	beq	r2,r4,832178 <create_file+0x44c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  83216c:	000b883a 	mov	r5,zero
  832170:	082e5440 	call	82e544 <Read_Sector_Data>
  832174:	10000926 	beq	r2,zero,83219c <create_file+0x470>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  832178:	d0e77a17 	ldw	r3,-25112(gp)
  83217c:	a0803fcc 	andi	r2,r20,255
  832180:	1085883a 	add	r2,r2,r2
  832184:	19000a17 	ldw	r4,40(r3)
  832188:	00ffffc4 	movi	r3,-1
  83218c:	1105883a 	add	r2,r2,r4
  832190:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  832194:	01000044 	movi	r4,1
  832198:	d1277b15 	stw	r4,-25108(gp)

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  83219c:	a8801217 	ldw	r2,72(r21)
  8321a0:	d0e77817 	ldw	r3,-25120(gp)
  8321a4:	1887883a 	add	r3,r3,r2
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
	}

	if (sector_index != current_sector_index) {
  8321a8:	d0a77c17 	ldw	r2,-25104(gp)
			+ fat_partition_offset_in_512_byte_sectors;

	if (first_fat) {
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  8321ac:	80c9883a 	add	r4,r16,r3
	}

	if (sector_index != current_sector_index) {
  8321b0:	11000326 	beq	r2,r4,8321c0 <create_file+0x494>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8321b4:	000b883a 	mov	r5,zero
  8321b8:	082e5440 	call	82e544 <Read_Sector_Data>
  8321bc:	103f2826 	beq	r2,zero,831e60 <create_file+0x134>
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8321c0:	d0e77a17 	ldw	r3,-25112(gp)
  8321c4:	a0803fcc 	andi	r2,r20,255
  8321c8:	1085883a 	add	r2,r2,r2
  8321cc:	19000a17 	ldw	r4,40(r3)
  8321d0:	00ffffc4 	movi	r3,-1
  8321d4:	1105883a 	add	r2,r2,r4
  8321d8:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  8321dc:	01000044 	movi	r4,1
  8321e0:	2005883a 	mov	r2,r4
  8321e4:	d1277b15 	stw	r4,-25108(gp)
  8321e8:	003f1e06 	br	831e64 <create_file+0x138>
int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  8321ec:	3004927a 	slli	r2,r6,9
  8321f0:	00c02134 	movhi	r3,132
  8321f4:	18fbb104 	addi	r3,r3,-4412
  8321f8:	1144b03a 	or	r2,r2,r5
  8321fc:	10c5883a 	add	r2,r2,r3
  832200:	14400003 	ldbu	r17,0(r2)
  832204:	003efe06 	br	831e00 <create_file+0xd4>

				// Read first character of the file record.
				leading_char
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
					result = (sector_index * 16 + file_counter) << 16;
  832208:	2a45883a 	add	r2,r5,r9
  83220c:	102c943a 	slli	r22,r2,16
  832210:	003f2a06 	br	831ebc <create_file+0x190>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  832214:	01008c0e 	bge	zero,r4,832448 <create_file+0x71c>
  832218:	0023883a 	mov	r17,zero
				last_dir_separator = last_dir_separator + location + 1;
  83221c:	88800044 	addi	r2,r17,1
  832220:	1123883a 	add	r17,r2,r4
				location
  832224:	9c61883a 	add	r16,r19,r17

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);
  832228:	8009883a 	mov	r4,r16
  83222c:	0822e100 	call	822e10 <strlen>

	for (index = 0; index < length; index++) {
  832230:	0080550e 	bge	zero,r2,832388 <create_file+0x65c>
		if ((name[index] == '\\') || (name[index] == '/')) {
  832234:	80c00007 	ldb	r3,0(r16)
  832238:	01401704 	movi	r5,92
  83223c:	19400c26 	beq	r3,r5,832270 <create_file+0x544>
  832240:	01000bc4 	movi	r4,47
  832244:	19000a26 	beq	r3,r4,832270 <create_file+0x544>
  832248:	280d883a 	mov	r6,r5
  83224c:	200b883a 	mov	r5,r4
  832250:	0009883a 	mov	r4,zero
  832254:	00000306 	br	832264 <create_file+0x538>
  832258:	18c00007 	ldb	r3,0(r3)
  83225c:	19804c26 	beq	r3,r6,832390 <create_file+0x664>
  832260:	19404b26 	beq	r3,r5,832390 <create_file+0x664>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  832264:	21000044 	addi	r4,r4,1
		if ((name[index] == '\\') || (name[index] == '/')) {
  832268:	8107883a 	add	r3,r16,r4
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  83226c:	113ffa1e 	bne	r2,r4,832258 <create_file+0x52c>
  832270:	81c00003 	ldbu	r7,0(r16)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832274:	00800b84 	movi	r2,46
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  832278:	8027883a 	mov	r19,r16
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  83227c:	38c03fcc 	andi	r3,r7,255
  832280:	18c0201c 	xori	r3,r3,128
  832284:	18ffe004 	addi	r3,r3,-128
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  832288:	92000204 	addi	r8,r18,8
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  83228c:	18bf271e 	bne	r3,r2,831f2c <create_file+0x200>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  832290:	00800804 	movi	r2,32
  832294:	000f883a 	mov	r7,zero
  832298:	90800005 	stb	r2,0(r18)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  83229c:	99c9883a 	add	r4,r19,r7
  8322a0:	21400003 	ldbu	r5,0(r4)
  8322a4:	00800b84 	movi	r2,46
  8322a8:	200d883a 	mov	r6,r4
  8322ac:	28c03fcc 	andi	r3,r5,255
  8322b0:	18c0201c 	xori	r3,r3,128
  8322b4:	18ffe004 	addi	r3,r3,-128
  8322b8:	18bf281e 	bne	r3,r2,831f5c <create_file+0x230>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  8322bc:	00800804 	movi	r2,32
  8322c0:	90800045 	stb	r2,1(r18)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  8322c4:	21400003 	ldbu	r5,0(r4)
  8322c8:	00800b84 	movi	r2,46
  8322cc:	28c03fcc 	andi	r3,r5,255
  8322d0:	18c0201c 	xori	r3,r3,128
  8322d4:	18ffe004 	addi	r3,r3,-128
  8322d8:	18bf2b1e 	bne	r3,r2,831f88 <create_file+0x25c>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  8322dc:	00800804 	movi	r2,32
  8322e0:	90800085 	stb	r2,2(r18)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  8322e4:	21400003 	ldbu	r5,0(r4)
  8322e8:	00800b84 	movi	r2,46
  8322ec:	28c03fcc 	andi	r3,r5,255
  8322f0:	18c0201c 	xori	r3,r3,128
  8322f4:	18ffe004 	addi	r3,r3,-128
  8322f8:	18bf2e1e 	bne	r3,r2,831fb4 <create_file+0x288>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  8322fc:	00800804 	movi	r2,32
  832300:	908000c5 	stb	r2,3(r18)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832304:	21400003 	ldbu	r5,0(r4)
  832308:	00800b84 	movi	r2,46
  83230c:	28c03fcc 	andi	r3,r5,255
  832310:	18c0201c 	xori	r3,r3,128
  832314:	18ffe004 	addi	r3,r3,-128
  832318:	18bf311e 	bne	r3,r2,831fe0 <create_file+0x2b4>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  83231c:	00800804 	movi	r2,32
  832320:	90800105 	stb	r2,4(r18)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832324:	21400003 	ldbu	r5,0(r4)
  832328:	00800b84 	movi	r2,46
  83232c:	28c03fcc 	andi	r3,r5,255
  832330:	18c0201c 	xori	r3,r3,128
  832334:	18ffe004 	addi	r3,r3,-128
  832338:	18bf341e 	bne	r3,r2,83200c <create_file+0x2e0>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  83233c:	00800804 	movi	r2,32
  832340:	90800145 	stb	r2,5(r18)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832344:	21400003 	ldbu	r5,0(r4)
  832348:	00800b84 	movi	r2,46
  83234c:	28c03fcc 	andi	r3,r5,255
  832350:	18c0201c 	xori	r3,r3,128
  832354:	18ffe004 	addi	r3,r3,-128
  832358:	18bf371e 	bne	r3,r2,832038 <create_file+0x30c>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  83235c:	00800804 	movi	r2,32
  832360:	90800185 	stb	r2,6(r18)
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832364:	21400003 	ldbu	r5,0(r4)
  832368:	00800b84 	movi	r2,46
  83236c:	28c03fcc 	andi	r3,r5,255
  832370:	18c0201c 	xori	r3,r3,128
  832374:	18ffe004 	addi	r3,r3,-128
  832378:	18bf3a1e 	bne	r3,r2,832064 <create_file+0x338>
			name[counter] = filename[local];
			if (filename[local] != 0)
				local++;
		} else {
			name[counter] = ' ';
  83237c:	00800804 	movi	r2,32
  832380:	908001c5 	stb	r2,7(r18)
  832384:	003f3c06 	br	832078 <create_file+0x34c>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  832388:	0009883a 	mov	r4,zero
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  83238c:	103fb826 	beq	r2,zero,832270 <create_file+0x544>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  832390:	013fa216 	blt	zero,r4,83221c <create_file+0x4f0>
  832394:	003fb606 	br	832270 <create_file+0x544>
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
			file_record->in_use = true;
			file_record->modified = true;
			// Now write the record at the specified location.
			file_record_sector
  832398:	a9000383 	ldbu	r4,14(r21)
  83239c:	28ffff84 	addi	r3,r5,-2
  8323a0:	a8801417 	ldw	r2,80(r21)
  8323a4:	1907383a 	mul	r3,r3,r4
  8323a8:	1185883a 	add	r2,r2,r6
  8323ac:	1889883a 	add	r4,r3,r2
  8323b0:	003f5e06 	br	83212c <create_file+0x400>
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
			extension[counter] = filename[local];
			local++;
  8323b4:	39c00044 	addi	r7,r7,1
  8323b8:	99c9883a 	add	r4,r19,r7
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
			extension[counter] = filename[local];
  8323bc:	40800045 	stb	r2,1(r8)
  8323c0:	003f3a06 	br	8320ac <create_file+0x380>
			local++;
  8323c4:	39c00044 	addi	r7,r7,1
  8323c8:	99c9883a 	add	r4,r19,r7
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
		if (filename[local] != 0) {
			extension[counter] = filename[local];
  8323cc:	40800005 	stb	r2,0(r8)
  8323d0:	003f3206 	br	83209c <create_file+0x370>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  8323d4:	21400003 	ldbu	r5,0(r4)
  8323d8:	003f2206 	br	832064 <create_file+0x338>
  8323dc:	99c9883a 	add	r4,r19,r7
  8323e0:	21400003 	ldbu	r5,0(r4)
			name[counter] = filename[local];
  8323e4:	91400085 	stb	r5,2(r18)
			if (filename[local] != 0)
  8323e8:	20800007 	ldb	r2,0(r4)
  8323ec:	103ee91e 	bne	r2,zero,831f94 <create_file+0x268>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  8323f0:	21400003 	ldbu	r5,0(r4)
			name[counter] = filename[local];
  8323f4:	914000c5 	stb	r5,3(r18)
			if (filename[local] != 0)
  8323f8:	20800007 	ldb	r2,0(r4)
  8323fc:	103ef01e 	bne	r2,zero,831fc0 <create_file+0x294>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832400:	21400003 	ldbu	r5,0(r4)
			name[counter] = filename[local];
  832404:	91400105 	stb	r5,4(r18)
			if (filename[local] != 0)
  832408:	20800007 	ldb	r2,0(r4)
  83240c:	103ef71e 	bne	r2,zero,831fec <create_file+0x2c0>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832410:	21400003 	ldbu	r5,0(r4)
			name[counter] = filename[local];
  832414:	91400145 	stb	r5,5(r18)
			if (filename[local] != 0)
  832418:	20800007 	ldb	r2,0(r4)
  83241c:	103efe1e 	bne	r2,zero,832018 <create_file+0x2ec>
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832420:	21400003 	ldbu	r5,0(r4)
  832424:	003f0406 	br	832038 <create_file+0x30c>
  832428:	99400003 	ldbu	r5,0(r19)
		if (Read_Sector_Data(sector_index, 0) == false) {
			return false;
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
	current_sector_modified = true;
  83242c:	000f883a 	mov	r7,zero
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
		if (filename[local] != '.') {
  832430:	980d883a 	mov	r6,r19
  832434:	003ec906 	br	831f5c <create_file+0x230>
bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
	bool result = true;
	if (current_sector_modified) {
		result = Write_Sector_Data(current_sector_index, 0);
  832438:	d1277c17 	ldw	r4,-25104(gp)
  83243c:	000b883a 	mov	r5,zero
  832440:	082e4980 	call	82e498 <Write_Sector_Data>
  832444:	003f4206 	br	832150 <create_file+0x424>
  832448:	99c00003 	ldbu	r7,0(r19)
  83244c:	003eb106 	br	831f14 <create_file+0x1e8>

00832450 <alt_up_sd_card_fopen>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  832450:	d0a77a17 	ldw	r2,-25112(gp)
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  832454:	deffe804 	addi	sp,sp,-96
  832458:	dc401215 	stw	r17,72(sp)
  83245c:	dc001115 	stw	r16,68(sp)
  832460:	dfc01715 	stw	ra,92(sp)
  832464:	dd401615 	stw	r21,88(sp)
  832468:	dd001515 	stw	r20,84(sp)
  83246c:	dcc01415 	stw	r19,80(sp)
  832470:	dc801315 	stw	r18,76(sp)
  832474:	2823883a 	mov	r17,r5
  832478:	2021883a 	mov	r16,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  83247c:	10001126 	beq	r2,zero,8324c4 <alt_up_sd_card_fopen+0x74>
  832480:	d0e77217 	ldw	r3,-25144(gp)
  832484:	1880002b 	ldhuio	r2,0(r3)
  832488:	1080008c 	andi	r2,r2,2
  83248c:	10000d26 	beq	r2,zero,8324c4 <alt_up_sd_card_fopen+0x74>
 *		Return -2 if the specified file has already been opened previously.
 */
{
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  832490:	d0a77117 	ldw	r2,-25148(gp)
  832494:	10001b1e 	bne	r2,zero,832504 <alt_up_sd_card_fopen+0xb4>
				} else if (create) {
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
							&home_dir)) {
						active_files[file_record_index].in_use = true;
						active_files[file_record_index].modified = true;
  832498:	013fffc4 	movi	r4,-1
			}
		}
	}

	return file_record_index;
}
  83249c:	2005883a 	mov	r2,r4
  8324a0:	dfc01717 	ldw	ra,92(sp)
  8324a4:	dd401617 	ldw	r21,88(sp)
  8324a8:	dd001517 	ldw	r20,84(sp)
  8324ac:	dcc01417 	ldw	r19,80(sp)
  8324b0:	dc801317 	ldw	r18,76(sp)
  8324b4:	dc401217 	ldw	r17,72(sp)
  8324b8:	dc001117 	ldw	r16,68(sp)
  8324bc:	dec01804 	addi	sp,sp,96
  8324c0:	f800283a 	ret
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  8324c4:	d0e77017 	ldw	r3,-25152(gp)
  8324c8:	00800044 	movi	r2,1
  8324cc:	18bff21e 	bne	r3,r2,832498 <alt_up_sd_card_fopen+0x48>
		int index;

		initialized = false;
		search_data.valid = false;
  8324d0:	00802174 	movhi	r2,133
  8324d4:	10b3ab04 	addi	r2,r2,-12628
		is_sd_card_formated_as_FAT16 = false;
  8324d8:	00c02174 	movhi	r3,133
  8324dc:	18f3d404 	addi	r3,r3,-12464
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
		search_data.valid = false;
  8324e0:	10000415 	stw	zero,16(r2)
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
		int index;

		initialized = false;
  8324e4:	d0277015 	stw	zero,-25152(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  8324e8:	d0277115 	stw	zero,-25148(gp)
  8324ec:	18814004 	addi	r2,r3,1280

		for (index = 0; index < MAX_FILES_OPENED; index++) {
			active_files[index].in_use = false;
  8324f0:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  8324f4:	183fff15 	stw	zero,-4(r3)
  8324f8:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  8324fc:	18bffc1e 	bne	r3,r2,8324f0 <alt_up_sd_card_fopen+0xa0>
  832500:	003fe506 	br	832498 <alt_up_sd_card_fopen+0x48>
 */
{
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
		unsigned int home_directory_cluster = 0;
  832504:	d8000015 	stw	zero,0(sp)

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);
  832508:	0822e100 	call	822e10 <strlen>
  83250c:	100f883a 	mov	r7,r2

	for (index = 0; index < length; index++) {
  832510:	0080650e 	bge	zero,r2,8326a8 <alt_up_sd_card_fopen+0x258>
  832514:	8009883a 	mov	r4,r16
  832518:	000b883a 	mov	r5,zero
  83251c:	01800644 	movi	r6,25
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  832520:	20c00003 	ldbu	r3,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  832524:	29400044 	addi	r5,r5,1
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  832528:	18bfe7c4 	addi	r2,r3,-97
  83252c:	10803fcc 	andi	r2,r2,255
			file_name[index] = (file_name[index] - 'a') + 'A';
  832530:	18fff804 	addi	r3,r3,-32
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  832534:	30800136 	bltu	r6,r2,83253c <alt_up_sd_card_fopen+0xec>
			file_name[index] = (file_name[index] - 'a') + 'A';
  832538:	20c00005 	stb	r3,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  83253c:	21000044 	addi	r4,r4,1
  832540:	397ff71e 	bne	r7,r5,832520 <alt_up_sd_card_fopen+0xd0>
}

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
	int length = strlen(file_name);
  832544:	8009883a 	mov	r4,r16
  832548:	0822e100 	call	822e10 <strlen>
  83254c:	100f883a 	mov	r7,r2
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  832550:	0080550e 	bge	zero,r2,8326a8 <alt_up_sd_card_fopen+0x258>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  832554:	80c00007 	ldb	r3,0(r16)
  832558:	00800804 	movi	r2,32
  83255c:	18801826 	beq	r3,r2,8325c0 <alt_up_sd_card_fopen+0x170>
  832560:	017fffc4 	movi	r5,-1
  832564:	1017883a 	mov	r11,r2
  832568:	0009883a 	mov	r4,zero
  83256c:	280d883a 	mov	r6,r5
  832570:	02001704 	movi	r8,92
  832574:	02400bc4 	movi	r9,47
  832578:	02800244 	movi	r10,9
  83257c:	03400b84 	movi	r13,46
  832580:	030000c4 	movi	r12,3
  832584:	20bfffc4 	addi	r2,r4,-1
  832588:	11804426 	beq	r2,r6,83269c <alt_up_sd_card_fopen+0x24c>
  83258c:	2145c83a 	sub	r2,r4,r5
  832590:	12803c26 	beq	r2,r10,832684 <alt_up_sd_card_fopen+0x234>
  832594:	29803d26 	beq	r5,r6,83268c <alt_up_sd_card_fopen+0x23c>
  832598:	60803c0e 	bge	r12,r2,83268c <alt_up_sd_card_fopen+0x23c>
  83259c:	1a000126 	beq	r3,r8,8325a4 <alt_up_sd_card_fopen+0x154>
  8325a0:	1a40071e 	bne	r3,r9,8325c0 <alt_up_sd_card_fopen+0x170>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
			last_period = index;
			last_dir_break_position = index;
		}
		if (file_name[index] == '.') {
  8325a4:	200d883a 	mov	r6,r4
  8325a8:	200b883a 	mov	r5,r4
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  8325ac:	21000044 	addi	r4,r4,1
  8325b0:	39003d26 	beq	r7,r4,8326a8 <alt_up_sd_card_fopen+0x258>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  8325b4:	2405883a 	add	r2,r4,r16
  8325b8:	10c00007 	ldb	r3,0(r2)
  8325bc:	1afff11e 	bne	r3,r11,832584 <alt_up_sd_card_fopen+0x134>
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  8325c0:	000b883a 	mov	r5,zero
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  8325c4:	81c5883a 	add	r2,r16,r7
  8325c8:	113fffc7 	ldb	r4,-1(r2)
  8325cc:	00c01704 	movi	r3,92
  8325d0:	20ffb126 	beq	r4,r3,832498 <alt_up_sd_card_fopen+0x48>
  8325d4:	00800bc4 	movi	r2,47
  8325d8:	20bfaf26 	beq	r4,r2,832498 <alt_up_sd_card_fopen+0x48>
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
		if (check_file_name_for_FAT16_compliance(name)) {
  8325dc:	2805003a 	cmpeq	r2,r5,zero
  8325e0:	103fad1e 	bne	r2,zero,832498 <alt_up_sd_card_fopen+0x48>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  8325e4:	dd400104 	addi	r21,sp,4
  8325e8:	8009883a 	mov	r4,r16
  8325ec:	d80b883a 	mov	r5,sp
  8325f0:	a80d883a 	mov	r6,r21
  8325f4:	08307740 	call	830774 <get_home_directory_cluster_for_file>
  8325f8:	103fa726 	beq	r2,zero,832498 <alt_up_sd_card_fopen+0x48>
  8325fc:	0007883a 	mov	r3,zero
  832600:	01002174 	movhi	r4,133
  832604:	2133d404 	addi	r4,r4,-12464
  832608:	01400504 	movi	r5,20
  83260c:	00000206 	br	832618 <alt_up_sd_card_fopen+0x1c8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  832610:	18c00044 	addi	r3,r3,1
  832614:	197fa026 	beq	r3,r5,832498 <alt_up_sd_card_fopen+0x48>
				if (active_files[index].in_use == false) {
  832618:	20800017 	ldw	r2,0(r4)
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  83261c:	21001004 	addi	r4,r4,64
				if (active_files[index].in_use == false) {
  832620:	103ffb1e 	bne	r2,zero,832610 <alt_up_sd_card_fopen+0x1c0>
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  832624:	1cffffcc 	andi	r19,r3,65535
  832628:	9ce0001c 	xori	r19,r19,32768
  83262c:	9ce00004 	addi	r19,r19,-32768
  832630:	98003416 	blt	r19,zero,832704 <alt_up_sd_card_fopen+0x2b4>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  832634:	980491ba 	slli	r2,r19,6
  832638:	05002174 	movhi	r20,133
  83263c:	a533c504 	addi	r20,r20,-12524
  832640:	d9000017 	ldw	r4,0(sp)
  832644:	1525883a 	add	r18,r2,r20
  832648:	800b883a 	mov	r5,r16
  83264c:	900d883a 	mov	r6,r18
  832650:	082f8dc0 	call	82f8dc <find_file_in_directory>
  832654:	1000161e 	bne	r2,zero,8326b0 <alt_up_sd_card_fopen+0x260>
								break;
							}
						}
					}

				} else if (create) {
  832658:	883f8f26 	beq	r17,zero,832498 <alt_up_sd_card_fopen+0x48>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  83265c:	8009883a 	mov	r4,r16
  832660:	a80d883a 	mov	r6,r21
  832664:	900b883a 	mov	r5,r18
  832668:	0831d2c0 	call	831d2c <create_file>
  83266c:	103f8a26 	beq	r2,zero,832498 <alt_up_sd_card_fopen+0x48>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  832670:	00800044 	movi	r2,1
  832674:	9809883a 	mov	r4,r19
						active_files[file_record_index].modified = true;
  832678:	90800e15 	stw	r2,56(r18)

				} else if (create) {
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  83267c:	90800f15 	stw	r2,60(r18)
  832680:	003f8606 	br	83249c <alt_up_sd_card_fopen+0x4c>
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  832684:	1b7fce1e 	bne	r3,r13,8325c0 <alt_up_sd_card_fopen+0x170>
  832688:	29bfc31e 	bne	r5,r6,832598 <alt_up_sd_card_fopen+0x148>
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
			break;
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  83268c:	1a3fc526 	beq	r3,r8,8325a4 <alt_up_sd_card_fopen+0x154>
  832690:	1a7fc426 	beq	r3,r9,8325a4 <alt_up_sd_card_fopen+0x154>
			last_period = index;
			last_dir_break_position = index;
		}
		if (file_name[index] == '.') {
  832694:	1b7fc426 	beq	r3,r13,8325a8 <alt_up_sd_card_fopen+0x158>
  832698:	003fc406 	br	8325ac <alt_up_sd_card_fopen+0x15c>
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  83269c:	1a3fc826 	beq	r3,r8,8325c0 <alt_up_sd_card_fopen+0x170>
  8326a0:	1a7fba1e 	bne	r3,r9,83258c <alt_up_sd_card_fopen+0x13c>
  8326a4:	003fc606 	br	8325c0 <alt_up_sd_card_fopen+0x170>
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  8326a8:	01400044 	movi	r5,1
  8326ac:	003fc506 	br	8325c4 <alt_up_sd_card_fopen+0x174>
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
						&(active_files[file_record_index]))) {
					if (create) {
  8326b0:	883f791e 	bne	r17,zero,832498 <alt_up_sd_card_fopen+0x48>
						/* Do not allow overwriting existing files for now. */
						return -1;
					}
					active_files[file_record_index].current_cluster_index
  8326b4:	9080058b 	ldhu	r2,22(r18)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
							= 0;
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
  8326b8:	00c00044 	movi	r3,1
						/* Do not allow overwriting existing files for now. */
						return -1;
					}
					active_files[file_record_index].current_cluster_index
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  8326bc:	90000815 	stw	zero,32(r18)
						&(active_files[file_record_index]))) {
					if (create) {
						/* Do not allow overwriting existing files for now. */
						return -1;
					}
					active_files[file_record_index].current_cluster_index
  8326c0:	90800715 	stw	r2,28(r18)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  8326c4:	90000915 	stw	zero,36(r18)
					active_files[file_record_index].in_use = true;
  8326c8:	90c00f15 	stw	r3,60(r18)
					active_files[file_record_index].modified = false;
  8326cc:	90000e15 	stw	zero,56(r18)
  8326d0:	a1800f04 	addi	r6,r20,60
  8326d4:	1811883a 	mov	r8,r3
  8326d8:	900b883a 	mov	r5,r18
						&(active_files[file_record_index]))) {
					if (create) {
						/* Do not allow overwriting existing files for now. */
						return -1;
					}
					active_files[file_record_index].current_cluster_index
  8326dc:	9809883a 	mov	r4,r19
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
							= 0;
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;
  8326e0:	000f883a 	mov	r7,zero
  8326e4:	02400504 	movi	r9,20

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
						if ((file_record_index != index)
  8326e8:	3cc00226 	beq	r7,r19,8326f4 <alt_up_sd_card_fopen+0x2a4>
  8326ec:	30800017 	ldw	r2,0(r6)
  8326f0:	12000626 	beq	r2,r8,83270c <alt_up_sd_card_fopen+0x2bc>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  8326f4:	39c00044 	addi	r7,r7,1
  8326f8:	31801004 	addi	r6,r6,64
  8326fc:	3a7ffa1e 	bne	r7,r9,8326e8 <alt_up_sd_card_fopen+0x298>
  832700:	003f6606 	br	83249c <alt_up_sd_card_fopen+0x4c>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  832704:	9809883a 	mov	r4,r19
  832708:	003f6406 	br	83249c <alt_up_sd_card_fopen+0x4c>

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
						if ((file_record_index != index)
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  83270c:	30fffb17 	ldw	r3,-20(r6)
  832710:	28800a17 	ldw	r2,40(r5)
  832714:	10fff71e 	bne	r2,r3,8326f4 <alt_up_sd_card_fopen+0x2a4>
  832718:	30fffc17 	ldw	r3,-16(r6)
  83271c:	28800b17 	ldw	r2,44(r5)
  832720:	10fff41e 	bne	r2,r3,8326f4 <alt_up_sd_card_fopen+0x2a4>
  832724:	30fffd0f 	ldh	r3,-12(r6)
  832728:	28800c0f 	ldh	r2,48(r5)
  83272c:	10fff11e 	bne	r2,r3,8326f4 <alt_up_sd_card_fopen+0x2a4>
  832730:	013fff84 	movi	r4,-2
  832734:	003f5906 	br	83249c <alt_up_sd_card_fopen+0x4c>

00832738 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  832738:	0005883a 	mov	r2,zero
  83273c:	00d00004 	movi	r3,16384
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  832740:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  832744:	10800804 	addi	r2,r2,32
  832748:	10fffd1e 	bne	r2,r3,832740 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  83274c:	f800283a 	ret

00832750 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  832750:	deffff04 	addi	sp,sp,-4
  832754:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  832758:	20000d26 	beq	r4,zero,832790 <alt_dev_llist_insert+0x40>
  83275c:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
  832760:	000d883a 	mov	r6,zero
  832764:	10000a26 	beq	r2,zero,832790 <alt_dev_llist_insert+0x40>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  832768:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  83276c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  832770:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  832774:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
  832778:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  83277c:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  832780:	3005883a 	mov	r2,r6
  832784:	dfc00017 	ldw	ra,0(sp)
  832788:	dec00104 	addi	sp,sp,4
  83278c:	f800283a 	ret
  832790:	00802134 	movhi	r2,132
  832794:	1082ed04 	addi	r2,r2,2996
  832798:	10800017 	ldw	r2,0(r2)
  83279c:	00c02134 	movhi	r3,132
  8327a0:	18ca4104 	addi	r3,r3,10500
  8327a4:	10000226 	beq	r2,zero,8327b0 <alt_dev_llist_insert+0x60>
  8327a8:	103ee83a 	callr	r2
  8327ac:	1007883a 	mov	r3,r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  8327b0:	01bffa84 	movi	r6,-22
  8327b4:	00800584 	movi	r2,22
  8327b8:	18800015 	stw	r2,0(r3)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  8327bc:	3005883a 	mov	r2,r6
  8327c0:	dfc00017 	ldw	ra,0(sp)
  8327c4:	dec00104 	addi	sp,sp,4
  8327c8:	f800283a 	ret

008327cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8327cc:	defffd04 	addi	sp,sp,-12
  8327d0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8327d4:	008020f4 	movhi	r2,131
  8327d8:	108ba304 	addi	r2,r2,11916
  8327dc:	044020f4 	movhi	r17,131
  8327e0:	8c4ba304 	addi	r17,r17,11916
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8327e4:	dfc00215 	stw	ra,8(sp)
  8327e8:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8327ec:	14400536 	bltu	r2,r17,832804 <_do_ctors+0x38>
  8327f0:	1021883a 	mov	r16,r2
        (*ctor) (); 
  8327f4:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8327f8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
  8327fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  832800:	847ffc2e 	bgeu	r16,r17,8327f4 <_do_ctors+0x28>
        (*ctor) (); 
}
  832804:	dfc00217 	ldw	ra,8(sp)
  832808:	dc400117 	ldw	r17,4(sp)
  83280c:	dc000017 	ldw	r16,0(sp)
  832810:	dec00304 	addi	sp,sp,12
  832814:	f800283a 	ret

00832818 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  832818:	defffd04 	addi	sp,sp,-12
  83281c:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  832820:	008020f4 	movhi	r2,131
  832824:	108ba304 	addi	r2,r2,11916
  832828:	044020f4 	movhi	r17,131
  83282c:	8c4ba404 	addi	r17,r17,11920
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  832830:	dfc00215 	stw	ra,8(sp)
  832834:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  832838:	14400536 	bltu	r2,r17,832850 <_do_dtors+0x38>
  83283c:	1021883a 	mov	r16,r2
        (*dtor) (); 
  832840:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  832844:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
  832848:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  83284c:	847ffc2e 	bgeu	r16,r17,832840 <_do_dtors+0x28>
        (*dtor) (); 
}
  832850:	dfc00217 	ldw	ra,8(sp)
  832854:	dc400117 	ldw	r17,4(sp)
  832858:	dc000017 	ldw	r16,0(sp)
  83285c:	dec00304 	addi	sp,sp,12
  832860:	f800283a 	ret

00832864 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  832864:	defffb04 	addi	sp,sp,-20
  832868:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  83286c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  832870:	dcc00315 	stw	r19,12(sp)
  832874:	dc400115 	stw	r17,4(sp)
  832878:	dfc00415 	stw	ra,16(sp)
  83287c:	2823883a 	mov	r17,r5
  832880:	dc800215 	stw	r18,8(sp)
  832884:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  832888:	0822e100 	call	822e10 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  83288c:	84401126 	beq	r16,r17,8328d4 <alt_find_dev+0x70>
  832890:	14800044 	addi	r18,r2,1
  832894:	00000206 	br	8328a0 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  832898:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  83289c:	84400d26 	beq	r16,r17,8328d4 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8328a0:	81000217 	ldw	r4,8(r16)
  8328a4:	980b883a 	mov	r5,r19
  8328a8:	900d883a 	mov	r6,r18
  8328ac:	08286580 	call	828658 <memcmp>
  8328b0:	103ff91e 	bne	r2,zero,832898 <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
  8328b4:	8005883a 	mov	r2,r16
  8328b8:	dfc00417 	ldw	ra,16(sp)
  8328bc:	dcc00317 	ldw	r19,12(sp)
  8328c0:	dc800217 	ldw	r18,8(sp)
  8328c4:	dc400117 	ldw	r17,4(sp)
  8328c8:	dc000017 	ldw	r16,0(sp)
  8328cc:	dec00504 	addi	sp,sp,20
  8328d0:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8328d4:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  8328d8:	8005883a 	mov	r2,r16
  8328dc:	dfc00417 	ldw	ra,16(sp)
  8328e0:	dcc00317 	ldw	r19,12(sp)
  8328e4:	dc800217 	ldw	r18,8(sp)
  8328e8:	dc400117 	ldw	r17,4(sp)
  8328ec:	dc000017 	ldw	r16,0(sp)
  8328f0:	dec00504 	addi	sp,sp,20
  8328f4:	f800283a 	ret

008328f8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8328f8:	0009883a 	mov	r4,zero
  8328fc:	01480004 	movi	r5,8192
  832900:	0832ca01 	jmpi	832ca0 <alt_icache_flush>

00832904 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  832904:	defffd04 	addi	sp,sp,-12
  832908:	dc400115 	stw	r17,4(sp)
  83290c:	dc000015 	stw	r16,0(sp)
  832910:	3023883a 	mov	r17,r6
  832914:	2821883a 	mov	r16,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  832918:	01807fc4 	movi	r6,511
  83291c:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  832920:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  832924:	0832a080 	call	832a08 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  832928:	10c00324 	muli	r3,r2,12
  83292c:	01802134 	movhi	r6,132
  832930:	31be0004 	addi	r6,r6,-2048
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  832934:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  832938:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  83293c:	10000716 	blt	r2,zero,83295c <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  832940:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  832944:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  832948:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  83294c:	30800515 	stw	r2,20(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  832950:	30c00315 	stw	r3,12(r6)
    fd->priv     = alt_fd_list[old].priv;
  832954:	31400415 	stw	r5,16(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  832958:	082b2200 	call	82b220 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  83295c:	8009883a 	mov	r4,r16
  832960:	000b883a 	mov	r5,zero
  832964:	01807fc4 	movi	r6,511
  832968:	0832a080 	call	832a08 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  83296c:	10c00324 	muli	r3,r2,12
  832970:	01802134 	movhi	r6,132
  832974:	31be0004 	addi	r6,r6,-2048
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  832978:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  83297c:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  832980:	10000716 	blt	r2,zero,8329a0 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  832984:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  832988:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  83298c:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  832990:	30800215 	stw	r2,8(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  832994:	30c00015 	stw	r3,0(r6)
    fd->priv     = alt_fd_list[old].priv;
  832998:	31400115 	stw	r5,4(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  83299c:	082b2200 	call	82b220 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  8329a0:	8809883a 	mov	r4,r17
  8329a4:	01400044 	movi	r5,1
  8329a8:	01807fc4 	movi	r6,511
  8329ac:	0832a080 	call	832a08 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8329b0:	10c00324 	muli	r3,r2,12
  8329b4:	01802134 	movhi	r6,132
  8329b8:	31be0004 	addi	r6,r6,-2048
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8329bc:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8329c0:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  8329c4:	10000b16 	blt	r2,zero,8329f4 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8329c8:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8329cc:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  8329d0:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8329d4:	30800815 	stw	r2,32(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8329d8:	30c00615 	stw	r3,24(r6)
    fd->priv     = alt_fd_list[old].priv;
  8329dc:	31400715 	stw	r5,28(r6)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  8329e0:	dfc00217 	ldw	ra,8(sp)
  8329e4:	dc400117 	ldw	r17,4(sp)
  8329e8:	dc000017 	ldw	r16,0(sp)
  8329ec:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8329f0:	082b2201 	jmpi	82b220 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  8329f4:	dfc00217 	ldw	ra,8(sp)
  8329f8:	dc400117 	ldw	r17,4(sp)
  8329fc:	dc000017 	ldw	r16,0(sp)
  832a00:	dec00304 	addi	sp,sp,12
  832a04:	f800283a 	ret

00832a08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  832a08:	defff904 	addi	sp,sp,-28
  832a0c:	dcc00315 	stw	r19,12(sp)
  832a10:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  832a14:	01402134 	movhi	r5,132
  832a18:	2942ea04 	addi	r5,r5,2984
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  832a1c:	dd400515 	stw	r21,20(sp)
  832a20:	dd000415 	stw	r20,16(sp)
  832a24:	dc400115 	stw	r17,4(sp)
  832a28:	dfc00615 	stw	ra,24(sp)
  832a2c:	dc800215 	stw	r18,8(sp)
  832a30:	dc000015 	stw	r16,0(sp)
  832a34:	302b883a 	mov	r21,r6
  832a38:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  832a3c:	08328640 	call	832864 <alt_find_dev>
  832a40:	1023883a 	mov	r17,r2
  832a44:	10004726 	beq	r2,zero,832b64 <open+0x15c>
  832a48:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  832a4c:	8809883a 	mov	r4,r17
  832a50:	0832c400 	call	832c40 <alt_get_fd>
  832a54:	1021883a 	mov	r16,r2
  832a58:	10002d16 	blt	r2,zero,832b10 <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  832a5c:	10800324 	muli	r2,r2,12
  832a60:	01402134 	movhi	r5,132
  832a64:	297e0004 	addi	r5,r5,-2048
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  832a68:	00d00034 	movhi	r3,16384
  832a6c:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  832a70:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  832a74:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  832a78:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  832a7c:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  832a80:	1000121e 	bne	r2,zero,832acc <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  832a84:	00802134 	movhi	r2,132
  832a88:	1082ec04 	addi	r2,r2,2992
  832a8c:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  832a90:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  832a94:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  832a98:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  832a9c:	20800215 	stw	r2,8(r4)
  832aa0:	00000206 	br	832aac <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  832aa4:	29400304 	addi	r5,r5,12
  832aa8:	38c00836 	bltu	r7,r3,832acc <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  832aac:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  832ab0:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  832ab4:	11bffb1e 	bne	r2,r6,832aa4 <open+0x9c>
  832ab8:	28800217 	ldw	r2,8(r5)
  832abc:	103ff90e 	bge	r2,zero,832aa4 <open+0x9c>
  832ac0:	293ff826 	beq	r5,r4,832aa4 <open+0x9c>
  832ac4:	04400344 	movi	r17,13
  832ac8:	00001206 	br	832b14 <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  832acc:	88800317 	ldw	r2,12(r17)
  832ad0:	10000526 	beq	r2,zero,832ae8 <open+0xe0>
  832ad4:	a00b883a 	mov	r5,r20
  832ad8:	980d883a 	mov	r6,r19
  832adc:	a80f883a 	mov	r7,r21
  832ae0:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  832ae4:	10001516 	blt	r2,zero,832b3c <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
  832ae8:	8005883a 	mov	r2,r16
  832aec:	dfc00617 	ldw	ra,24(sp)
  832af0:	dd400517 	ldw	r21,20(sp)
  832af4:	dd000417 	ldw	r20,16(sp)
  832af8:	dcc00317 	ldw	r19,12(sp)
  832afc:	dc800217 	ldw	r18,8(sp)
  832b00:	dc400117 	ldw	r17,4(sp)
  832b04:	dc000017 	ldw	r16,0(sp)
  832b08:	dec00704 	addi	sp,sp,28
  832b0c:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  832b10:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  832b14:	8009883a 	mov	r4,r16
  832b18:	082b2200 	call	82b220 <alt_release_fd>
  832b1c:	00802134 	movhi	r2,132
  832b20:	1082ed04 	addi	r2,r2,2996
  832b24:	10800017 	ldw	r2,0(r2)
  832b28:	10000b26 	beq	r2,zero,832b58 <open+0x150>
  832b2c:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  832b30:	043fffc4 	movi	r16,-1
  832b34:	14400015 	stw	r17,0(r2)
  832b38:	003feb06 	br	832ae8 <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  832b3c:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  832b40:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
  832b44:	082b2200 	call	82b220 <alt_release_fd>
  832b48:	00802134 	movhi	r2,132
  832b4c:	1082ed04 	addi	r2,r2,2996
  832b50:	10800017 	ldw	r2,0(r2)
  832b54:	103ff51e 	bne	r2,zero,832b2c <open+0x124>
  832b58:	00802134 	movhi	r2,132
  832b5c:	108a4104 	addi	r2,r2,10500
  832b60:	003ff306 	br	832b30 <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  832b64:	a009883a 	mov	r4,r20
  832b68:	0832b900 	call	832b90 <alt_find_file>
  832b6c:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  832b70:	10000226 	beq	r2,zero,832b7c <open+0x174>
  832b74:	04800044 	movi	r18,1
  832b78:	003fb406 	br	832a4c <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
  832b7c:	043fffc4 	movi	r16,-1
  832b80:	044004c4 	movi	r17,19
  832b84:	003fe306 	br	832b14 <open+0x10c>

00832b88 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  832b88:	000170fa 	wrctl	ienable,zero
}
  832b8c:	f800283a 	ret

00832b90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  832b90:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  832b94:	00802134 	movhi	r2,132
  832b98:	1082e804 	addi	r2,r2,2976
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  832b9c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  832ba0:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  832ba4:	dd000415 	stw	r20,16(sp)
  832ba8:	dc800215 	stw	r18,8(sp)
  832bac:	dfc00515 	stw	ra,20(sp)
  832bb0:	dcc00315 	stw	r19,12(sp)
  832bb4:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  832bb8:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  832bbc:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  832bc0:	80801526 	beq	r16,r2,832c18 <alt_find_file+0x88>
  832bc4:	04c00bc4 	movi	r19,47
  832bc8:	00000806 	br	832bec <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  832bcc:	3485883a 	add	r2,r6,r18
  832bd0:	10800007 	ldb	r2,0(r2)
  832bd4:	14c00126 	beq	r2,r19,832bdc <alt_find_file+0x4c>
  832bd8:	1000021e 	bne	r2,zero,832be4 <alt_find_file+0x54>
  832bdc:	08286580 	call	828658 <memcmp>
  832be0:	10000e26 	beq	r2,zero,832c1c <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  832be4:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  832be8:	85000b26 	beq	r16,r20,832c18 <alt_find_file+0x88>
  {
    len = strlen(next->name);
  832bec:	84400217 	ldw	r17,8(r16)
  832bf0:	8809883a 	mov	r4,r17
  832bf4:	0822e100 	call	822e10 <strlen>
  832bf8:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  832bfc:	8885883a 	add	r2,r17,r2
  832c00:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  832c04:	8809883a 	mov	r4,r17
  832c08:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  832c0c:	1cffef1e 	bne	r3,r19,832bcc <alt_find_file+0x3c>
    {
      len -= 1;
  832c10:	31bfffc4 	addi	r6,r6,-1
  832c14:	003fed06 	br	832bcc <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  832c18:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  832c1c:	8005883a 	mov	r2,r16
  832c20:	dfc00517 	ldw	ra,20(sp)
  832c24:	dd000417 	ldw	r20,16(sp)
  832c28:	dcc00317 	ldw	r19,12(sp)
  832c2c:	dc800217 	ldw	r18,8(sp)
  832c30:	dc400117 	ldw	r17,4(sp)
  832c34:	dc000017 	ldw	r16,0(sp)
  832c38:	dec00604 	addi	sp,sp,24
  832c3c:	f800283a 	ret

00832c40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  832c40:	01402134 	movhi	r5,132
  832c44:	297e0004 	addi	r5,r5,-2048
  832c48:	0007883a 	mov	r3,zero
  832c4c:	01c00804 	movi	r7,32
  832c50:	280d883a 	mov	r6,r5
  832c54:	00000306 	br	832c64 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  832c58:	18c00044 	addi	r3,r3,1
  832c5c:	31800304 	addi	r6,r6,12
  832c60:	19c00d26 	beq	r3,r7,832c98 <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
  832c64:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  832c68:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
  832c6c:	103ffa1e 	bne	r2,zero,832c58 <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  832c70:	01402134 	movhi	r5,132
  832c74:	2942ec04 	addi	r5,r5,2992
  832c78:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  832c7c:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
  832c80:	10c0030e 	bge	r2,r3,832c90 <alt_get_fd+0x50>
      {
        alt_max_fd = i;
  832c84:	1805883a 	mov	r2,r3
  832c88:	28c00015 	stw	r3,0(r5)
  832c8c:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  832c90:	1805883a 	mov	r2,r3
  832c94:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  832c98:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  832c9c:	f800283a 	ret

00832ca0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  832ca0:	00880004 	movi	r2,8192
  832ca4:	2007883a 	mov	r3,r4
  832ca8:	1140012e 	bgeu	r2,r5,832cb0 <alt_icache_flush+0x10>
  832cac:	100b883a 	mov	r5,r2
  832cb0:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  832cb4:	1940032e 	bgeu	r3,r5,832cc4 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  832cb8:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  832cbc:	18c00804 	addi	r3,r3,32
  832cc0:	197ffd36 	bltu	r3,r5,832cb8 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  832cc4:	208007cc 	andi	r2,r4,31
  832cc8:	10000126 	beq	r2,zero,832cd0 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  832ccc:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  832cd0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  832cd4:	f800283a 	ret

00832cd8 <atexit>:
  832cd8:	200b883a 	mov	r5,r4
  832cdc:	000d883a 	mov	r6,zero
  832ce0:	0009883a 	mov	r4,zero
  832ce4:	000f883a 	mov	r7,zero
  832ce8:	0832cec1 	jmpi	832cec <__register_exitproc>

00832cec <__register_exitproc>:
  832cec:	defffa04 	addi	sp,sp,-24
  832cf0:	00802134 	movhi	r2,132
  832cf4:	1082e204 	addi	r2,r2,2952
  832cf8:	dc000015 	stw	r16,0(sp)
  832cfc:	14000017 	ldw	r16,0(r2)
  832d00:	dd000415 	stw	r20,16(sp)
  832d04:	2829883a 	mov	r20,r5
  832d08:	81405217 	ldw	r5,328(r16)
  832d0c:	dcc00315 	stw	r19,12(sp)
  832d10:	dc800215 	stw	r18,8(sp)
  832d14:	dc400115 	stw	r17,4(sp)
  832d18:	dfc00515 	stw	ra,20(sp)
  832d1c:	2023883a 	mov	r17,r4
  832d20:	3027883a 	mov	r19,r6
  832d24:	3825883a 	mov	r18,r7
  832d28:	28002526 	beq	r5,zero,832dc0 <__register_exitproc+0xd4>
  832d2c:	29000117 	ldw	r4,4(r5)
  832d30:	008007c4 	movi	r2,31
  832d34:	11002716 	blt	r2,r4,832dd4 <__register_exitproc+0xe8>
  832d38:	8800101e 	bne	r17,zero,832d7c <__register_exitproc+0x90>
  832d3c:	2105883a 	add	r2,r4,r4
  832d40:	1085883a 	add	r2,r2,r2
  832d44:	20c00044 	addi	r3,r4,1
  832d48:	1145883a 	add	r2,r2,r5
  832d4c:	0009883a 	mov	r4,zero
  832d50:	15000215 	stw	r20,8(r2)
  832d54:	28c00115 	stw	r3,4(r5)
  832d58:	2005883a 	mov	r2,r4
  832d5c:	dfc00517 	ldw	ra,20(sp)
  832d60:	dd000417 	ldw	r20,16(sp)
  832d64:	dcc00317 	ldw	r19,12(sp)
  832d68:	dc800217 	ldw	r18,8(sp)
  832d6c:	dc400117 	ldw	r17,4(sp)
  832d70:	dc000017 	ldw	r16,0(sp)
  832d74:	dec00604 	addi	sp,sp,24
  832d78:	f800283a 	ret
  832d7c:	29802204 	addi	r6,r5,136
  832d80:	00800044 	movi	r2,1
  832d84:	110e983a 	sll	r7,r2,r4
  832d88:	30c04017 	ldw	r3,256(r6)
  832d8c:	2105883a 	add	r2,r4,r4
  832d90:	1085883a 	add	r2,r2,r2
  832d94:	1185883a 	add	r2,r2,r6
  832d98:	19c6b03a 	or	r3,r3,r7
  832d9c:	14802015 	stw	r18,128(r2)
  832da0:	14c00015 	stw	r19,0(r2)
  832da4:	00800084 	movi	r2,2
  832da8:	30c04015 	stw	r3,256(r6)
  832dac:	88bfe31e 	bne	r17,r2,832d3c <__register_exitproc+0x50>
  832db0:	30804117 	ldw	r2,260(r6)
  832db4:	11c4b03a 	or	r2,r2,r7
  832db8:	30804115 	stw	r2,260(r6)
  832dbc:	003fdf06 	br	832d3c <__register_exitproc+0x50>
  832dc0:	00802174 	movhi	r2,133
  832dc4:	10b54504 	addi	r2,r2,-10988
  832dc8:	100b883a 	mov	r5,r2
  832dcc:	80805215 	stw	r2,328(r16)
  832dd0:	003fd606 	br	832d2c <__register_exitproc+0x40>
  832dd4:	008020b4 	movhi	r2,130
  832dd8:	1085bf04 	addi	r2,r2,5884
  832ddc:	1000021e 	bne	r2,zero,832de8 <__register_exitproc+0xfc>
  832de0:	013fffc4 	movi	r4,-1
  832de4:	003fdc06 	br	832d58 <__register_exitproc+0x6c>
  832de8:	01006404 	movi	r4,400
  832dec:	103ee83a 	callr	r2
  832df0:	1007883a 	mov	r3,r2
  832df4:	103ffa26 	beq	r2,zero,832de0 <__register_exitproc+0xf4>
  832df8:	80805217 	ldw	r2,328(r16)
  832dfc:	180b883a 	mov	r5,r3
  832e00:	18000115 	stw	zero,4(r3)
  832e04:	18800015 	stw	r2,0(r3)
  832e08:	80c05215 	stw	r3,328(r16)
  832e0c:	18006215 	stw	zero,392(r3)
  832e10:	18006315 	stw	zero,396(r3)
  832e14:	0009883a 	mov	r4,zero
  832e18:	883fc826 	beq	r17,zero,832d3c <__register_exitproc+0x50>
  832e1c:	003fd706 	br	832d7c <__register_exitproc+0x90>
  832e20:	00000010 	cmplti	zero,zero,0
  832e24:	00000000 	call	0 <__reset-0x800000>
  832e28:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  832e2c:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  832e30:	001b0c0b 	ldhu	zero,27696(zero)
  832e34:	00000028 	cmpgeui	zero,zero,0
  832e38:	00000018 	cmpnei	zero,zero,0
  832e3c:	00829d0c 	andi	r2,zero,2676
  832e40:	000005dc 	xori	zero,zero,23
  832e44:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  832e48:	92099170 	cmpltui	r8,r18,9797
  832e4c:	95079308 	cmpgei	r20,r18,7756
  832e50:	97049605 	stb	fp,4696(r18)
  832e54:	90019f03 	ldbu	zero,1660(r18)
  832e58:	9c06940a 	0x9c06940a
  832e5c:	00000002 	0x2
  832e60:	00000028 	cmpgeui	zero,zero,0
  832e64:	00000044 	movi	zero,1
  832e68:	0082a2e8 	cmpgeui	r2,zero,2699
  832e6c:	000005b0 	cmpltui	zero,zero,22
  832e70:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  832e74:	92099168 	cmpgeui	r8,r18,9797
  832e78:	95079308 	cmpgei	r20,r18,7756
  832e7c:	9c039705 	stb	r16,3676(r19)
  832e80:	90019f02 	0x90019f02
  832e84:	9606940a 	0x9606940a
  832e88:	00000004 	movi	zero,0
  832e8c:	00825a50 	cmplti	r2,zero,2409
